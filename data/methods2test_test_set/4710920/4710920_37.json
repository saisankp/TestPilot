{"test_class": {"identifier": "HttpCommandDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoderTest.java"}, "test_case": {"identifier": "decodePost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void decodePost() throws Exception {\n        FullHttpRequest request = mock(FullHttpRequest.class);\n        when(request.getUri()).thenReturn(\"localhost:80/test\");\n        when(request.getMethod()).thenReturn(HttpMethod.POST);\n        when(request.headers()).thenReturn(HttpHeaders.EMPTY_HEADERS);\n        ByteBuf buf = Unpooled.copiedBuffer(\"a=b&c=d\", StandardCharsets.UTF_8);\n        when(request.content()).thenReturn(buf);\n        CommandContext context = HttpCommandDecoder.decode(request);\n        assertThat(context.getCommandName(), equalTo(\"test\"));\n        assertThat(context.isHttp(), is(true));\n        assertThat(context.getArgs(), arrayContaining(\"b\", \"d\"));\n    }", "signature": "void decodePost()", "full_signature": "@Test public void decodePost()", "class_method_signature": "HttpCommandDecoderTest.decodePost()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getUri", "thenReturn", "when", "getMethod", "thenReturn", "when", "headers", "copiedBuffer", "thenReturn", "when", "content", "decode", "assertThat", "getCommandName", "equalTo", "assertThat", "isHttp", "is", "assertThat", "getArgs", "arrayContaining"]}, "focal_class": {"identifier": "HttpCommandDecoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "decode", "parameters": "(HttpRequest request)", "modifiers": "public static", "return": "CommandContext", "signature": "CommandContext decode(HttpRequest request)", "full_signature": "public static CommandContext decode(HttpRequest request)", "class_method_signature": "HttpCommandDecoder.decode(HttpRequest request)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/command/decoder/HttpCommandDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(HttpRequest request)", "modifiers": "public static", "return": "CommandContext", "body": "public static CommandContext decode(HttpRequest request) {\n        CommandContext commandContext = null;\n        if (request != null) {\n            QueryStringDecoder queryStringDecoder = new QueryStringDecoder(request.getUri());\n            String path = queryStringDecoder.path();\n            String[] array = path.split(\"/\");\n            if (array.length == 2) {\n                String name = array[1];\n\n                // process GET request and POST request separately. Check url for GET, and check body for POST\n                if (request.getMethod() == HttpMethod.GET) {\n                    if (queryStringDecoder.parameters().isEmpty()) {\n                        commandContext = CommandContextFactory.newInstance(name);\n                        commandContext.setHttp(true);\n                    } else {\n                        List<String> valueList = new ArrayList<String>();\n                        for (List<String> values : queryStringDecoder.parameters().values()) {\n                            valueList.addAll(values);\n                        }\n                        commandContext = CommandContextFactory.newInstance(name, valueList.toArray(new String[]{}),true);\n                    }\n                } else if (request.getMethod() == HttpMethod.POST) {\n                    HttpPostRequestDecoder httpPostRequestDecoder = new HttpPostRequestDecoder(request);\n                    List<String> valueList = new ArrayList<String>();\n                    for (InterfaceHttpData interfaceHttpData : httpPostRequestDecoder.getBodyHttpDatas()) {\n                        if (interfaceHttpData.getHttpDataType() == InterfaceHttpData.HttpDataType.Attribute) {\n                            Attribute attribute = (Attribute) interfaceHttpData;\n                            try {\n                                valueList.add(attribute.getValue());\n                            } catch (IOException ex) {\n                                throw new RuntimeException(ex);\n                            }\n                        }\n                    }\n                    if (valueList.isEmpty()) {\n                        commandContext = CommandContextFactory.newInstance(name);\n                        commandContext.setHttp(true);\n                    } else {\n                        commandContext = CommandContextFactory.newInstance(name, valueList.toArray(new String[]{}),true);\n                    }\n                }\n            }\n        }\n\n        return commandContext;\n    }", "signature": "CommandContext decode(HttpRequest request)", "full_signature": "public static CommandContext decode(HttpRequest request)", "class_method_signature": "HttpCommandDecoder.decode(HttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getUri", "path", "split", "getMethod", "isEmpty", "parameters", "newInstance", "setHttp", "values", "parameters", "addAll", "newInstance", "toArray", "getMethod", "getBodyHttpDatas", "getHttpDataType", "add", "getValue", "isEmpty", "newInstance", "setHttp", "newInstance", "toArray"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}