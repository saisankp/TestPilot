{"test_class": {"identifier": "ChargeRuleTest", "superclass": "extends FormulaRuleTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/rules/ChargeRuleTest.java"}, "test_case": {"identifier": "testDefaultValidFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultValidFalse() throws ClassNotFoundException, CDKException, Exception {\n\n        IRule rule = new ChargeRule();\n\n        IMolecularFormula formula = new MolecularFormula();\n        formula.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 2);\n        formula.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 200);\n        formula.setCharge(1);\n\n        Assert.assertEquals(0.0, rule.validate(formula), 0.0001);\n    }", "signature": "void testDefaultValidFalse()", "full_signature": "@Test public void testDefaultValidFalse()", "class_method_signature": "ChargeRuleTest.testDefaultValidFalse()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "newInstance", "addIsotope", "newInstance", "setCharge", "assertEquals", "validate"]}, "focal_class": {"identifier": "ChargeRule", "superclass": "", "interfaces": "implements IRule", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(ChargeRule.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ChargeRule.class)", "var_name": "logger"}, {"original_string": "private double              charge = 0.0;", "modifier": "private", "type": "double", "declarator": "charge = 0.0", "var_name": "charge"}], "methods": [{"identifier": "ChargeRule", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChargeRule()", "full_signature": "public  ChargeRule()", "class_method_signature": "ChargeRule.ChargeRule()", "testcase": false, "constructor": true}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ChargeRule.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ChargeRule.getParameters()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "ChargeRule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/rules/ChargeRule.java"}, "focal_method": {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double validate(IMolecularFormula formula) throws CDKException {\n        logger.info(\"Start validation of \", formula);\n\n        if (formula.getCharge() == null) {\n            return 0.0;\n        } else if (formula.getCharge() == charge) {\n            return 1.0;\n        } else {\n            return 0.0;\n        }\n    }", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "ChargeRule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false, "invocations": ["info", "getCharge", "getCharge"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}