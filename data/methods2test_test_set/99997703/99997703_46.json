{"test_class": {"identifier": "CachedGroupByTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IndexedImmutableObjectCache<TestState, TestState> cache;", "modifier": "private", "type": "IndexedImmutableObjectCache<TestState, TestState>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private CachedGroupBy<TestState, CoordinateLikeTestObject, Integer> groupByAggregation;", "modifier": "private", "type": "CachedGroupBy<TestState, CoordinateLikeTestObject, Integer>", "declarator": "groupByAggregation", "var_name": "groupByAggregation"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/indexedcache/CachedGroupByTest.java"}, "test_case": {"identifier": "get_whenMultipleValuesForGroup_thenReturnCorrectAggregation", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void get_whenMultipleValuesForGroup_thenReturnCorrectAggregation() {\n        ImmutableSet<TestState> states = ImmutableSet.of(\n                new TestState(Id.create(1), CoordinateLikeTestObject.ORIGIN, 1),\n                new TestState(Id.create(2), CoordinateLikeTestObject.ORIGIN, 3),\n                new TestState(Id.create(3), CoordinateLikeTestObject.ORIGIN, 5));\n\n        cache.addAll(states);\n        assertThat(groupByAggregation.get(CoordinateLikeTestObject.ORIGIN)).isEqualTo(9);\n    }", "signature": "void get_whenMultipleValuesForGroup_thenReturnCorrectAggregation()", "full_signature": "@Test void get_whenMultipleValuesForGroup_thenReturnCorrectAggregation()", "class_method_signature": "CachedGroupByTest.get_whenMultipleValuesForGroup_thenReturnCorrectAggregation()", "testcase": true, "constructor": false, "invocations": ["of", "create", "create", "create", "addAll", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "CachedGroupBy", "superclass": "extends AbstractIndex<C>", "interfaces": "", "fields": [{"original_string": "private final Multimap<G, C> cachedGroupValues = LinkedHashMultimap.create();", "modifier": "private final", "type": "Multimap<G, C>", "declarator": "cachedGroupValues = LinkedHashMultimap.create()", "var_name": "cachedGroupValues"}, {"original_string": "private final Map<G, T> cachedAggregation = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<G, T>", "declarator": "cachedAggregation = new LinkedHashMap<>()", "var_name": "cachedAggregation"}, {"original_string": "private final Function<? super C, G> groupByExtractor;", "modifier": "private final", "type": "Function<? super C, G>", "declarator": "groupByExtractor", "var_name": "groupByExtractor"}, {"original_string": "private final Collector<? super C, ?, T> collector;", "modifier": "private final", "type": "Collector<? super C, ?, T>", "declarator": "collector", "var_name": "collector"}, {"original_string": "private final T emptyAggregation;", "modifier": "private final", "type": "T", "declarator": "emptyAggregation", "var_name": "emptyAggregation"}, {"original_string": "private final Set<G> invalidatedGroups = new LinkedHashSet<>();", "modifier": "private final", "type": "Set<G>", "declarator": "invalidatedGroups = new LinkedHashSet<>()", "var_name": "invalidatedGroups"}], "methods": [{"identifier": "CachedGroupBy", "parameters": "(Function<? super C, G> groupByExtractor, Collector<? super C, ?, T> collector)", "modifiers": "", "return": "", "signature": " CachedGroupBy(Function<? super C, G> groupByExtractor, Collector<? super C, ?, T> collector)", "full_signature": "  CachedGroupBy(Function<? super C, G> groupByExtractor, Collector<? super C, ?, T> collector)", "class_method_signature": "CachedGroupBy.CachedGroupBy(Function<? super C, G> groupByExtractor, Collector<? super C, ?, T> collector)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(G g)", "modifiers": "public", "return": "T", "signature": "T get(G g)", "full_signature": "public T get(G g)", "class_method_signature": "CachedGroupBy.get(G g)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(C object)", "modifiers": "@Override protected", "return": "void", "signature": "void remove(C object)", "full_signature": "@Override protected void remove(C object)", "class_method_signature": "CachedGroupBy.remove(C object)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(C object)", "modifiers": "@Override protected", "return": "void", "signature": "void add(C object)", "full_signature": "@Override protected void add(C object)", "class_method_signature": "CachedGroupBy.add(C object)", "testcase": false, "constructor": false}, {"identifier": "afterUpdate", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void afterUpdate()", "full_signature": "@Override protected void afterUpdate()", "class_method_signature": "CachedGroupBy.afterUpdate()", "testcase": false, "constructor": false}, {"identifier": "updateGroup", "parameters": "(G g)", "modifiers": "private", "return": "void", "signature": "void updateGroup(G g)", "full_signature": "private void updateGroup(G g)", "class_method_signature": "CachedGroupBy.updateGroup(G g)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/indexedcache/CachedGroupBy.java"}, "focal_method": {"identifier": "get", "parameters": "(G g)", "modifiers": "public", "return": "T", "body": "public T get(G g) {\n        return cachedAggregation.getOrDefault(g, emptyAggregation);\n    }", "signature": "T get(G g)", "full_signature": "public T get(G g)", "class_method_signature": "CachedGroupBy.get(G g)", "testcase": false, "constructor": false, "invocations": ["getOrDefault"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}