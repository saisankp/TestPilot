{"test_class": {"identifier": "LogUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogUtilTest.java"}, "test_case": {"identifier": "testFindLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindLevel() throws Exception {\n        Log log = mock(Log.class);\n        DubboAppender.logList.add(log);\n        when(log.getLogLevel()).thenReturn(Level.ERROR);\n        assertThat(LogUtil.findLevel(Level.ERROR), equalTo(1));\n        assertThat(LogUtil.findLevel(Level.INFO), equalTo(0));\n    }", "signature": "void testFindLevel()", "full_signature": "@Test public void testFindLevel()", "class_method_signature": "LogUtilTest.testFindLevel()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "thenReturn", "when", "getLogLevel", "assertThat", "findLevel", "equalTo", "assertThat", "findLevel", "equalTo"]}, "focal_class": {"identifier": "LogUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger Log = LoggerFactory.getLogger(LogUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "Log = LoggerFactory.getLogger(LogUtil.class)", "var_name": "Log"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void start()", "full_signature": "public static void start()", "class_method_signature": "LogUtil.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void stop()", "full_signature": "public static void stop()", "class_method_signature": "LogUtil.stop()", "testcase": false, "constructor": false}, {"identifier": "checkNoError", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean checkNoError()", "full_signature": "public static boolean checkNoError()", "class_method_signature": "LogUtil.checkNoError()", "testcase": false, "constructor": false}, {"identifier": "findName", "parameters": "(String expectedLogName)", "modifiers": "public static", "return": "int", "signature": "int findName(String expectedLogName)", "full_signature": "public static int findName(String expectedLogName)", "class_method_signature": "LogUtil.findName(String expectedLogName)", "testcase": false, "constructor": false}, {"identifier": "findLevel", "parameters": "(Level expectedLevel)", "modifiers": "public static", "return": "int", "signature": "int findLevel(Level expectedLevel)", "full_signature": "public static int findLevel(Level expectedLevel)", "class_method_signature": "LogUtil.findLevel(Level expectedLevel)", "testcase": false, "constructor": false}, {"identifier": "findLevelWithThreadName", "parameters": "(Level expectedLevel, String threadName)", "modifiers": "public static", "return": "int", "signature": "int findLevelWithThreadName(Level expectedLevel, String threadName)", "full_signature": "public static int findLevelWithThreadName(Level expectedLevel, String threadName)", "class_method_signature": "LogUtil.findLevelWithThreadName(Level expectedLevel, String threadName)", "testcase": false, "constructor": false}, {"identifier": "findThread", "parameters": "(String expectedThread)", "modifiers": "public static", "return": "int", "signature": "int findThread(String expectedThread)", "full_signature": "public static int findThread(String expectedThread)", "class_method_signature": "LogUtil.findThread(String expectedThread)", "testcase": false, "constructor": false}, {"identifier": "findMessage", "parameters": "(String expectedMessage)", "modifiers": "public static", "return": "int", "signature": "int findMessage(String expectedMessage)", "full_signature": "public static int findMessage(String expectedMessage)", "class_method_signature": "LogUtil.findMessage(String expectedMessage)", "testcase": false, "constructor": false}, {"identifier": "findMessage", "parameters": "(Level expectedLevel, String expectedMessage)", "modifiers": "public static", "return": "int", "signature": "int findMessage(Level expectedLevel, String expectedMessage)", "full_signature": "public static int findMessage(Level expectedLevel, String expectedMessage)", "class_method_signature": "LogUtil.findMessage(Level expectedLevel, String expectedMessage)", "testcase": false, "constructor": false}, {"identifier": "printList", "parameters": "(List<T> list)", "modifiers": "public static", "return": "void", "signature": "void printList(List<T> list)", "full_signature": "public static void printList(List<T> list)", "class_method_signature": "LogUtil.printList(List<T> list)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java"}, "focal_method": {"identifier": "findLevel", "parameters": "(Level expectedLevel)", "modifiers": "public static", "return": "int", "body": "public static int findLevel(Level expectedLevel) {\n        int count = 0;\n        List<Log> logList = DubboAppender.logList;\n        for (int i = 0; i < logList.size(); i++) {\n            Level logLevel = logList.get(i).getLogLevel();\n            if (logLevel.equals(expectedLevel)) {\n                count++;\n            }\n        }\n        return count;\n    }", "signature": "int findLevel(Level expectedLevel)", "full_signature": "public static int findLevel(Level expectedLevel)", "class_method_signature": "LogUtil.findLevel(Level expectedLevel)", "testcase": false, "constructor": false, "invocations": ["size", "getLogLevel", "get", "equals"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}