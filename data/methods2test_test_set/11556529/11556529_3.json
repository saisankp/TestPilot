{"test_class": {"identifier": "PauselessHashMapTest", "superclass": "extends junit.framework.TestCase", "interfaces": "", "fields": [{"original_string": "PauselessHashMap hm;", "modifier": "", "type": "PauselessHashMap", "declarator": "hm", "var_name": "hm"}, {"original_string": "final static int hmSize = 1000;", "modifier": "final static", "type": "int", "declarator": "hmSize = 1000", "var_name": "hmSize"}, {"original_string": "static Object[] objArray;", "modifier": "static", "type": "Object[]", "declarator": "objArray", "var_name": "objArray"}, {"original_string": "static Object[] objArray2;", "modifier": "static", "type": "Object[]", "declarator": "objArray2", "var_name": "objArray2"}], "file": "examples/src/test/java/PauselessHashMapTest.java"}, "test_case": {"identifier": "test_containsValueLjava_lang_Object", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_containsValueLjava_lang_Object() {\n        // Test for method boolean\n        // java.util.PauselessHashMap.containsValue(java.lang.Object)\n        assertTrue(\"Returned false for valid value\", hm\n                .containsValue(new Integer(875)));\n        assertTrue(\"Returned true for invalid valie\", !hm\n                .containsValue(new Integer(-9)));\n    }", "signature": "void test_containsValueLjava_lang_Object()", "full_signature": "@Test public void test_containsValueLjava_lang_Object()", "class_method_signature": "PauselessHashMapTest.test_containsValueLjava_lang_Object()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsValue", "assertTrue", "containsValue"]}, "focal_class": {"identifier": "PauselessHashMap", "superclass": "extends java.util.AbstractMap<K, V>", "interfaces": "implements Map<K, V>,\n        Cloneable, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 318739534392781639L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 318739534392781639L", "var_name": "serialVersionUID"}, {"original_string": "transient int elementCount;", "modifier": "transient", "type": "int", "declarator": "elementCount", "var_name": "elementCount"}, {"original_string": "transient Entry<K, V>[] elementData;", "modifier": "transient", "type": "Entry<K, V>[]", "declarator": "elementData", "var_name": "elementData"}, {"original_string": "transient Entry<K, V>[] resizingIntoElementData;", "modifier": "transient", "type": "Entry<K, V>[]", "declarator": "resizingIntoElementData", "var_name": "resizingIntoElementData"}, {"original_string": "transient int modCount = 0;", "modifier": "transient", "type": "int", "declarator": "modCount = 0", "var_name": "modCount"}, {"original_string": "private static final int DEFAULT_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SIZE = 16", "var_name": "DEFAULT_SIZE"}, {"original_string": "final float loadFactor;", "modifier": "final", "type": "float", "declarator": "loadFactor", "var_name": "loadFactor"}, {"original_string": "int threshold;", "modifier": "", "type": "int", "declarator": "threshold", "var_name": "threshold"}, {"original_string": "transient boolean pendingResize = false;", "modifier": "transient", "type": "boolean", "declarator": "pendingResize = false", "var_name": "pendingResize"}, {"original_string": "transient boolean backgroundResizeComplete = false;", "modifier": "transient", "type": "boolean", "declarator": "backgroundResizeComplete = false", "var_name": "backgroundResizeComplete"}, {"original_string": "transient boolean indicatedObservedResizingIntoTable = false;", "modifier": "transient", "type": "boolean", "declarator": "indicatedObservedResizingIntoTable = false", "var_name": "indicatedObservedResizingIntoTable"}, {"original_string": "transient volatile boolean observedResizingIntoTable = false;", "modifier": "transient volatile", "type": "boolean", "declarator": "observedResizingIntoTable = false", "var_name": "observedResizingIntoTable"}, {"original_string": "transient AtomicBoolean volatileUpdateIndicator = new AtomicBoolean(false);", "modifier": "transient", "type": "AtomicBoolean", "declarator": "volatileUpdateIndicator = new AtomicBoolean(false)", "var_name": "volatileUpdateIndicator"}, {"original_string": "transient final Object rehashMonitor = new Object();", "modifier": "transient final", "type": "Object", "declarator": "rehashMonitor = new Object()", "var_name": "rehashMonitor"}, {"original_string": "Set<K> keySet;", "modifier": "", "type": "Set<K>", "declarator": "keySet", "var_name": "keySet"}, {"original_string": "Collection<V> valuesCollection;", "modifier": "", "type": "Collection<V>", "declarator": "valuesCollection", "var_name": "valuesCollection"}, {"original_string": "static final int DEFAULT_NUMBER_OF_BACKGROUND_RESIZER_EXECUTOR_THREADS = 2;", "modifier": "static final", "type": "int", "declarator": "DEFAULT_NUMBER_OF_BACKGROUND_RESIZER_EXECUTOR_THREADS = 2", "var_name": "DEFAULT_NUMBER_OF_BACKGROUND_RESIZER_EXECUTOR_THREADS"}, {"original_string": "static final int SMALLEST_CAPACITY_TO_KICK_OFF_BACKGROUND_RESIZE_FOR = 0;", "modifier": "static final", "type": "int", "declarator": "SMALLEST_CAPACITY_TO_KICK_OFF_BACKGROUND_RESIZE_FOR = 0", "var_name": "SMALLEST_CAPACITY_TO_KICK_OFF_BACKGROUND_RESIZE_FOR"}, {"original_string": "static final ScheduledExecutorService backgroundResizers =\n            Executors.newScheduledThreadPool(DEFAULT_NUMBER_OF_BACKGROUND_RESIZER_EXECUTOR_THREADS);", "modifier": "static final", "type": "ScheduledExecutorService", "declarator": "backgroundResizers =\n            Executors.newScheduledThreadPool(DEFAULT_NUMBER_OF_BACKGROUND_RESIZER_EXECUTOR_THREADS)", "var_name": "backgroundResizers"}], "methods": [{"identifier": "newElementArray", "parameters": "(int s)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Entry<K, V>[]", "signature": "Entry<K, V>[] newElementArray(int s)", "full_signature": "@SuppressWarnings(\"unchecked\") Entry<K, V>[] newElementArray(int s)", "class_method_signature": "PauselessHashMap.newElementArray(int s)", "testcase": false, "constructor": false}, {"identifier": "PauselessHashMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " PauselessHashMap()", "full_signature": "public  PauselessHashMap()", "class_method_signature": "PauselessHashMap.PauselessHashMap()", "testcase": false, "constructor": true}, {"identifier": "PauselessHashMap", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " PauselessHashMap(int capacity)", "full_signature": "public  PauselessHashMap(int capacity)", "class_method_signature": "PauselessHashMap.PauselessHashMap(int capacity)", "testcase": false, "constructor": true}, {"identifier": "calculateCapacity", "parameters": "(int x)", "modifiers": "private static final", "return": "int", "signature": "int calculateCapacity(int x)", "full_signature": "private static final int calculateCapacity(int x)", "class_method_signature": "PauselessHashMap.calculateCapacity(int x)", "testcase": false, "constructor": false}, {"identifier": "PauselessHashMap", "parameters": "(int capacity, float loadFactor)", "modifiers": "public", "return": "", "signature": " PauselessHashMap(int capacity, float loadFactor)", "full_signature": "public  PauselessHashMap(int capacity, float loadFactor)", "class_method_signature": "PauselessHashMap.PauselessHashMap(int capacity, float loadFactor)", "testcase": false, "constructor": true}, {"identifier": "PauselessHashMap", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "public", "return": "", "signature": " PauselessHashMap(Map<? extends K, ? extends V> map)", "full_signature": "public  PauselessHashMap(Map<? extends K, ? extends V> map)", "class_method_signature": "PauselessHashMap.PauselessHashMap(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "PauselessHashMap.clear()", "testcase": false, "constructor": false}, {"identifier": "clearImpl", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clearImpl()", "full_signature": "private void clearImpl()", "class_method_signature": "PauselessHashMap.clearImpl()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "PauselessHashMap.clone()", "testcase": false, "constructor": false}, {"identifier": "cloneImpl", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Object", "signature": "Object cloneImpl()", "full_signature": "@SuppressWarnings(\"unchecked\") private Object cloneImpl()", "class_method_signature": "PauselessHashMap.cloneImpl()", "testcase": false, "constructor": false}, {"identifier": "computeThreshold", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void computeThreshold()", "full_signature": "private void computeThreshold()", "class_method_signature": "PauselessHashMap.computeThreshold()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(Object key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(Object key)", "full_signature": "@Override public boolean containsKey(Object key)", "class_method_signature": "PauselessHashMap.containsKey(Object key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean containsValue(Object value)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean containsValue(Object value)", "class_method_signature": "PauselessHashMap.containsValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "entrySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<Map.Entry<K, V>>", "signature": "Set<Map.Entry<K, V>> entrySet()", "full_signature": "@Override public Set<Map.Entry<K, V>> entrySet()", "class_method_signature": "PauselessHashMap.entrySet()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V get(Object key)", "full_signature": "@Override public V get(Object key)", "class_method_signature": "PauselessHashMap.get(Object key)", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "(Object key)", "modifiers": "final", "return": "Entry<K, V>", "signature": "Entry<K, V> getEntry(Object key)", "full_signature": "final Entry<K, V> getEntry(Object key)", "class_method_signature": "PauselessHashMap.getEntry(Object key)", "testcase": false, "constructor": false}, {"identifier": "findNonNullKeyEntry", "parameters": "(Object key, int index, int keyHash)", "modifiers": "final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNonNullKeyEntry(Object key, int index, int keyHash)", "full_signature": "final Entry<K,V> findNonNullKeyEntry(Object key, int index, int keyHash)", "class_method_signature": "PauselessHashMap.findNonNullKeyEntry(Object key, int index, int keyHash)", "testcase": false, "constructor": false}, {"identifier": "findNonNullKeyEntryInElementData", "parameters": "(Object key, int index, int keyHash)", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNonNullKeyEntryInElementData(Object key, int index, int keyHash)", "full_signature": "@SuppressWarnings(\"unchecked\") final Entry<K,V> findNonNullKeyEntryInElementData(Object key, int index, int keyHash)", "class_method_signature": "PauselessHashMap.findNonNullKeyEntryInElementData(Object key, int index, int keyHash)", "testcase": false, "constructor": false}, {"identifier": "findNonNullKeyEntryInResizingIntoElementData", "parameters": "(Object key, int index, int keyHash)", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNonNullKeyEntryInResizingIntoElementData(Object key, int index, int keyHash)", "full_signature": "@SuppressWarnings(\"unchecked\") final Entry<K,V> findNonNullKeyEntryInResizingIntoElementData(Object key, int index, int keyHash)", "class_method_signature": "PauselessHashMap.findNonNullKeyEntryInResizingIntoElementData(Object key, int index, int keyHash)", "testcase": false, "constructor": false}, {"identifier": "findNonNullKeyEntryInChain", "parameters": "(Object key, Entry<K,V> chainHead, int keyHash)", "modifiers": "final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNonNullKeyEntryInChain(Object key, Entry<K,V> chainHead, int keyHash)", "full_signature": "final Entry<K,V> findNonNullKeyEntryInChain(Object key, Entry<K,V> chainHead, int keyHash)", "class_method_signature": "PauselessHashMap.findNonNullKeyEntryInChain(Object key, Entry<K,V> chainHead, int keyHash)", "testcase": false, "constructor": false}, {"identifier": "findNullKeyEntry", "parameters": "()", "modifiers": "final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNullKeyEntry()", "full_signature": "final Entry<K,V> findNullKeyEntry()", "class_method_signature": "PauselessHashMap.findNullKeyEntry()", "testcase": false, "constructor": false}, {"identifier": "findNullKeyEntryInElementData", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNullKeyEntryInElementData()", "full_signature": "@SuppressWarnings(\"unchecked\") final Entry<K,V> findNullKeyEntryInElementData()", "class_method_signature": "PauselessHashMap.findNullKeyEntryInElementData()", "testcase": false, "constructor": false}, {"identifier": "findNullKeyEntryInResizingIntoElementData", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNullKeyEntryInResizingIntoElementData()", "full_signature": "@SuppressWarnings(\"unchecked\") final Entry<K,V> findNullKeyEntryInResizingIntoElementData()", "class_method_signature": "PauselessHashMap.findNullKeyEntryInResizingIntoElementData()", "testcase": false, "constructor": false}, {"identifier": "findNullKeyEntryInChain", "parameters": "(Entry<K,V> chainHead)", "modifiers": "final", "return": "Entry<K,V>", "signature": "Entry<K,V> findNullKeyEntryInChain(Entry<K,V> chainHead)", "full_signature": "final Entry<K,V> findNullKeyEntryInChain(Entry<K,V> chainHead)", "class_method_signature": "PauselessHashMap.findNullKeyEntryInChain(Entry<K,V> chainHead)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "PauselessHashMap.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "keySet", "parameters": "()", "modifiers": "@Override public", "return": "Set<K>", "signature": "Set<K> keySet()", "full_signature": "@Override public Set<K> keySet()", "class_method_signature": "PauselessHashMap.keySet()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "V", "signature": "V put(K key, V value)", "full_signature": "@Override public V put(K key, V value)", "class_method_signature": "PauselessHashMap.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "putImpl", "parameters": "(K key, V value)", "modifiers": "private", "return": "V", "signature": "V putImpl(K key, V value)", "full_signature": "private V putImpl(K key, V value)", "class_method_signature": "PauselessHashMap.putImpl(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "forceFinishResizing", "parameters": "()", "modifiers": "", "return": "void", "signature": "void forceFinishResizing()", "full_signature": " void forceFinishResizing()", "class_method_signature": "PauselessHashMap.forceFinishResizing()", "testcase": false, "constructor": false}, {"identifier": "finishResizing", "parameters": "()", "modifiers": "", "return": "void", "signature": "void finishResizing()", "full_signature": " void finishResizing()", "class_method_signature": "PauselessHashMap.finishResizing()", "testcase": false, "constructor": false}, {"identifier": "createEntry", "parameters": "(K key, int index, V value)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Entry<K, V>", "signature": "Entry<K, V> createEntry(K key, int index, V value)", "full_signature": "@SuppressWarnings(\"unchecked\") Entry<K, V> createEntry(K key, int index, V value)", "class_method_signature": "PauselessHashMap.createEntry(K key, int index, V value)", "testcase": false, "constructor": false}, {"identifier": "createHashedEntry", "parameters": "(K key, int index, int hash)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Entry<K,V>", "signature": "Entry<K,V> createHashedEntry(K key, int index, int hash)", "full_signature": "@SuppressWarnings(\"unchecked\") Entry<K,V> createHashedEntry(K key, int index, int hash)", "class_method_signature": "PauselessHashMap.createHashedEntry(K key, int index, int hash)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "@Override public", "return": "void", "signature": "void putAll(Map<? extends K, ? extends V> map)", "full_signature": "@Override public void putAll(Map<? extends K, ? extends V> map)", "class_method_signature": "PauselessHashMap.putAll(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": false}, {"identifier": "putAllImpl", "parameters": "(Map<? extends K, ? extends V> map)", "modifiers": "private", "return": "void", "signature": "void putAllImpl(Map<? extends K, ? extends V> map)", "full_signature": "private void putAllImpl(Map<? extends K, ? extends V> map)", "class_method_signature": "PauselessHashMap.putAllImpl(Map<? extends K, ? extends V> map)", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "(int capacity)", "modifiers": "", "return": "void", "signature": "void rehash(int capacity)", "full_signature": " void rehash(int capacity)", "class_method_signature": "PauselessHashMap.rehash(int capacity)", "testcase": false, "constructor": false}, {"identifier": "rehash", "parameters": "()", "modifiers": "", "return": "void", "signature": "void rehash()", "full_signature": " void rehash()", "class_method_signature": "PauselessHashMap.rehash()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "V", "signature": "V remove(Object key)", "full_signature": "@Override public V remove(Object key)", "class_method_signature": "PauselessHashMap.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeImpl", "parameters": "(Object key)", "modifiers": "private", "return": "V", "signature": "V removeImpl(Object key)", "full_signature": "private V removeImpl(Object key)", "class_method_signature": "PauselessHashMap.removeImpl(Object key)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(Entry<K, V> entry)", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "void", "signature": "void removeEntry(Entry<K, V> entry)", "full_signature": "@SuppressWarnings(\"unchecked\") final void removeEntry(Entry<K, V> entry)", "class_method_signature": "PauselessHashMap.removeEntry(Entry<K, V> entry)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(Object key)", "modifiers": "@SuppressWarnings(\"unchecked\") final", "return": "Entry<K, V>", "signature": "Entry<K, V> removeEntry(Object key)", "full_signature": "@SuppressWarnings(\"unchecked\") final Entry<K, V> removeEntry(Object key)", "class_method_signature": "PauselessHashMap.removeEntry(Object key)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "PauselessHashMap.size()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "()", "modifiers": "@Override public", "return": "Collection<V>", "signature": "Collection<V> values()", "full_signature": "@Override public Collection<V> values()", "class_method_signature": "PauselessHashMap.values()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream stream)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream stream)", "full_signature": "private void writeObject(ObjectOutputStream stream)", "class_method_signature": "PauselessHashMap.writeObject(ObjectOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream stream)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void readObject(ObjectInputStream stream)", "full_signature": "@SuppressWarnings(\"unchecked\") private void readObject(ObjectInputStream stream)", "class_method_signature": "PauselessHashMap.readObject(ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "computeHashCode", "parameters": "(Object key)", "modifiers": "static", "return": "int", "signature": "int computeHashCode(Object key)", "full_signature": "static int computeHashCode(Object key)", "class_method_signature": "PauselessHashMap.computeHashCode(Object key)", "testcase": false, "constructor": false}, {"identifier": "areEqualKeys", "parameters": "(Object key1, Object key2)", "modifiers": "static", "return": "boolean", "signature": "boolean areEqualKeys(Object key1, Object key2)", "full_signature": "static boolean areEqualKeys(Object key1, Object key2)", "class_method_signature": "PauselessHashMap.areEqualKeys(Object key1, Object key2)", "testcase": false, "constructor": false}, {"identifier": "areEqualValues", "parameters": "(Object value1, Object value2)", "modifiers": "static", "return": "boolean", "signature": "boolean areEqualValues(Object value1, Object value2)", "full_signature": "static boolean areEqualValues(Object value1, Object value2)", "class_method_signature": "PauselessHashMap.areEqualValues(Object value1, Object value2)", "testcase": false, "constructor": false}, {"identifier": "kickBackgroundResize", "parameters": "(int capacity)", "modifiers": "final", "return": "void", "signature": "void kickBackgroundResize(int capacity)", "full_signature": "final void kickBackgroundResize(int capacity)", "class_method_signature": "PauselessHashMap.kickBackgroundResize(int capacity)", "testcase": false, "constructor": false}, {"identifier": "doResize", "parameters": "(int capacity)", "modifiers": "final", "return": "void", "signature": "void doResize(int capacity)", "full_signature": "final void doResize(int capacity)", "class_method_signature": "PauselessHashMap.doResize(int capacity)", "testcase": false, "constructor": false}], "file": "examples/src/main/java/PauselessHashMap.java"}, "focal_method": {"identifier": "containsValue", "parameters": "(Object value)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public boolean containsValue(Object value) {\n        if (value != null) {\n            for (int i = 0; i < elementData.length; i++) {\n                Entry<K, V> entry = elementData[i];\n                while (entry != null) {\n                    if (areEqualValues(value, entry.value)) {\n                        return true;\n                    }\n                    entry = entry.next;\n                }\n            }\n        } else {\n            for (int i = 0; i < elementData.length; i++) {\n                Entry<K, V> entry = elementData[i];\n                while (entry != null) {\n                    if (entry.value == null) {\n                        return true;\n                    }\n                    entry = entry.next;\n                }\n            }\n        }\n\n        // Look in the resizing into Entry store, if one exists:\n        if (resizingIntoElementData == null)\n            return false;\n\n        if (value != null) {\n            for (int i = 0; i < resizingIntoElementData.length; i++) {\n                Entry<K, V> entry = resizingIntoElementData[i];\n                while (entry != null) {\n                    if (areEqualValues(value, entry.value)) {\n                        return true;\n                    }\n                    entry = entry.next;\n                }\n            }\n        } else {\n            for (int i = 0; i < resizingIntoElementData.length; i++) {\n                Entry<K, V> entry = resizingIntoElementData[i];\n                while (entry != null) {\n                    if (entry.value == null) {\n                        return true;\n                    }\n                    entry = entry.next;\n                }\n            }\n        }\n\n        return false;\n    }", "signature": "boolean containsValue(Object value)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean containsValue(Object value)", "class_method_signature": "PauselessHashMap.containsValue(Object value)", "testcase": false, "constructor": false, "invocations": ["areEqualValues", "areEqualValues"]}, "repository": {"repo_id": 11556529, "url": "https://github.com/giltene/GilExamples", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 36, "size": 514, "license": "licensed"}}