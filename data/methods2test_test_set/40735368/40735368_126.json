{"test_class": {"identifier": "GribUtilitiesTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "modules/plugin/coverage-multidim/grib/src/test/java/org/geotools/coverage/io/grib/GribUtilitiesTest.java"}, "test_case": {"identifier": "testDataDir", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDataDir() throws FileNotFoundException, IOException {\n\n        File wrongDir = new File(\"wrongfolderfortests\");\n        final File testDir = TestData.file(this, \".\").getCanonicalFile();\n        System.setProperty(\"GRIB_CACHE_DIR\", testDir.getAbsolutePath());\n        boolean isValid = GribUtilities.isValid(testDir);\n        assertTrue(isValid);\n\n        isValid = GribUtilities.isValid(wrongDir);\n        assertFalse(isValid);\n\n        wrongDir = TestData.file(this, \"sampleGrib.grb2\").getCanonicalFile();\n        isValid = GribUtilities.isValid(wrongDir);\n        assertFalse(isValid);\n    }", "signature": "void testDataDir()", "full_signature": "@Test public void testDataDir()", "class_method_signature": "GribUtilitiesTest.testDataDir()", "testcase": true, "constructor": false, "invocations": ["getCanonicalFile", "file", "setProperty", "getAbsolutePath", "isValid", "assertTrue", "isValid", "assertFalse", "getCanonicalFile", "file", "isValid", "assertFalse"]}, "focal_class": {"identifier": "GribUtilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(\"org.geotools.coverage.io.grib.GribUtilities\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(\"org.geotools.coverage.io.grib.GribUtilities\")", "var_name": "LOGGER"}, {"original_string": "public static final String GRIB_CACHE_DIR = \"GRIB_CACHE_DIR\";", "modifier": "public static final", "type": "String", "declarator": "GRIB_CACHE_DIR = \"GRIB_CACHE_DIR\"", "var_name": "GRIB_CACHE_DIR"}], "methods": [{"identifier": "isValid", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(File file)", "full_signature": "public static boolean isValid(File file)", "class_method_signature": "GribUtilities.isValid(File file)", "testcase": false, "constructor": false}], "file": "modules/plugin/coverage-multidim/grib/src/main/java/org/geotools/coverage/io/grib/GribUtilities.java"}, "focal_method": {"identifier": "isValid", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValid(File file) {\n        String dir = file.getAbsolutePath();\n        if (!file.exists()) {\n            if (LOGGER.isLoggable(Level.WARNING)) {\n                LOGGER.warning(\"The specified path doesn't refer \"\n                        + \"to an existing folder. Please check the path: \" + dir);\n            }\n            return false;\n        } else if (!file.isDirectory()) {\n            if (LOGGER.isLoggable(Level.WARNING)) {\n                LOGGER.warning(\"The specified path doesn't refer \"\n                        + \"to a directory. Please check the path: \" + dir);\n            }\n            return false;\n        } else if (!file.canWrite()) {\n            if (LOGGER.isLoggable(Level.WARNING)) {\n                LOGGER.warning(\"The specified path refers to \"\n                        + \"a directory which can't be written. Please check the path and\"\n                        + \" the permissions for: \" + dir);\n            }\n            return false;\n        }\n        return true;\n    }", "signature": "boolean isValid(File file)", "full_signature": "public static boolean isValid(File file)", "class_method_signature": "GribUtilities.isValid(File file)", "testcase": false, "constructor": false, "invocations": ["getAbsolutePath", "exists", "isLoggable", "warning", "isDirectory", "isLoggable", "warning", "canWrite", "isLoggable", "warning"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}