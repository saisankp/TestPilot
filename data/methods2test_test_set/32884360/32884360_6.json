{"test_class": {"identifier": "HttpConductorImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-rest/src/test/java/com/foundationdb/http/HttpConductorImplTest.java"}, "test_case": {"identifier": "slashAll", "parameters": "()", "modifiers": "@Test(expected = IllegalPathRequest.class) public", "return": "void", "body": "@Test(expected = IllegalPathRequest.class)\n    public void slashAll() {\n        HttpConductorImpl.getContextPathPrefix(\"/*\");\n    }", "signature": "void slashAll()", "full_signature": "@Test(expected = IllegalPathRequest.class) public void slashAll()", "class_method_signature": "HttpConductorImplTest.slashAll()", "testcase": true, "constructor": false, "invocations": ["getContextPathPrefix"]}, "focal_class": {"identifier": "HttpConductorImpl", "superclass": "", "interfaces": "implements HttpConductor, Service", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HttpConductorImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HttpConductorImpl.class)", "var_name": "logger"}, {"original_string": "private static final String CONFIG_REALM = \"fdbsql.security.realm\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_REALM = \"fdbsql.security.realm\"", "var_name": "CONFIG_REALM"}, {"original_string": "private static final String CONFIG_HTTP_PREFIX = \"fdbsql.http.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_HTTP_PREFIX = \"fdbsql.http.\"", "var_name": "CONFIG_HTTP_PREFIX"}, {"original_string": "private static final String CONFIG_HOST_PROPERTY = CONFIG_HTTP_PREFIX + \"host\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_HOST_PROPERTY = CONFIG_HTTP_PREFIX + \"host\"", "var_name": "CONFIG_HOST_PROPERTY"}, {"original_string": "private static final String CONFIG_PORT_PROPERTY = CONFIG_HTTP_PREFIX + \"port\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_PORT_PROPERTY = CONFIG_HTTP_PREFIX + \"port\"", "var_name": "CONFIG_PORT_PROPERTY"}, {"original_string": "private static final String CONFIG_SSL_PROPERTY = CONFIG_HTTP_PREFIX + \"ssl\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_SSL_PROPERTY = CONFIG_HTTP_PREFIX + \"ssl\"", "var_name": "CONFIG_SSL_PROPERTY"}, {"original_string": "private static final String CONFIG_LOGIN_PROPERTY = CONFIG_HTTP_PREFIX + \"login\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_LOGIN_PROPERTY = CONFIG_HTTP_PREFIX + \"login\"", "var_name": "CONFIG_LOGIN_PROPERTY"}, {"original_string": "private static final String CONFIG_LOGIN_CACHE_SECONDS = CONFIG_HTTP_PREFIX + \"login_cache_seconds\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_LOGIN_CACHE_SECONDS = CONFIG_HTTP_PREFIX + \"login_cache_seconds\"", "var_name": "CONFIG_LOGIN_CACHE_SECONDS"}, {"original_string": "private static final String CONFIG_XORIGIN_PREFIX = CONFIG_HTTP_PREFIX + \"cross_origin.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_PREFIX = CONFIG_HTTP_PREFIX + \"cross_origin.\"", "var_name": "CONFIG_XORIGIN_PREFIX"}, {"original_string": "private static final String CONFIG_XORIGIN_ENABLED = CONFIG_XORIGIN_PREFIX + \"enabled\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_ENABLED = CONFIG_XORIGIN_PREFIX + \"enabled\"", "var_name": "CONFIG_XORIGIN_ENABLED"}, {"original_string": "private static final String CONFIG_XORIGIN_ORIGINS = CONFIG_XORIGIN_PREFIX + \"allowed_origins\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_ORIGINS = CONFIG_XORIGIN_PREFIX + \"allowed_origins\"", "var_name": "CONFIG_XORIGIN_ORIGINS"}, {"original_string": "private static final String CONFIG_XORIGIN_METHODS = CONFIG_XORIGIN_PREFIX + \"allowed_methods\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_METHODS = CONFIG_XORIGIN_PREFIX + \"allowed_methods\"", "var_name": "CONFIG_XORIGIN_METHODS"}, {"original_string": "private static final String CONFIG_XORIGIN_HEADERS = CONFIG_XORIGIN_PREFIX + \"allowed_headers\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_HEADERS = CONFIG_XORIGIN_PREFIX + \"allowed_headers\"", "var_name": "CONFIG_XORIGIN_HEADERS"}, {"original_string": "private static final String CONFIG_XORIGIN_MAX_AGE = CONFIG_XORIGIN_PREFIX + \"preflight_max_age\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_MAX_AGE = CONFIG_XORIGIN_PREFIX + \"preflight_max_age\"", "var_name": "CONFIG_XORIGIN_MAX_AGE"}, {"original_string": "private static final String CONFIG_XORIGIN_CREDENTIALS = CONFIG_XORIGIN_PREFIX + \"allow_credentials\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_XORIGIN_CREDENTIALS = CONFIG_XORIGIN_PREFIX + \"allow_credentials\"", "var_name": "CONFIG_XORIGIN_CREDENTIALS"}, {"original_string": "private static final String CONFIG_CSRF_PREFIX = CONFIG_HTTP_PREFIX + \"csrf_protection.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_CSRF_PREFIX = CONFIG_HTTP_PREFIX + \"csrf_protection.\"", "var_name": "CONFIG_CSRF_PREFIX"}, {"original_string": "private static final String CONFIG_CSRF_TYPE = CONFIG_CSRF_PREFIX + \"type\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_CSRF_TYPE = CONFIG_CSRF_PREFIX + \"type\"", "var_name": "CONFIG_CSRF_TYPE"}, {"original_string": "private static final String CONFIG_CSRF_ALLOWED_REFERERS = CONFIG_CSRF_PREFIX + \"allowed_referers\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_CSRF_ALLOWED_REFERERS = CONFIG_CSRF_PREFIX + \"allowed_referers\"", "var_name": "CONFIG_CSRF_ALLOWED_REFERERS"}, {"original_string": "private static final String CONFIG_COMMON_PREFIX = \"fdbsql.sql.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_COMMON_PREFIX = \"fdbsql.sql.\"", "var_name": "CONFIG_COMMON_PREFIX"}, {"original_string": "private static final String CONFIG_COMMON_JAAS_PREFIX = CONFIG_COMMON_PREFIX + \"jaas.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_COMMON_JAAS_PREFIX = CONFIG_COMMON_PREFIX + \"jaas.\"", "var_name": "CONFIG_COMMON_JAAS_PREFIX"}, {"original_string": "private static final String CONFIG_JAAS_PREFIX = CONFIG_HTTP_PREFIX + \"jaas.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_JAAS_PREFIX = CONFIG_HTTP_PREFIX + \"jaas.\"", "var_name": "CONFIG_JAAS_PREFIX"}, {"original_string": "private static final String CONFIG_COMMON_SPNEGO_PREFIX = CONFIG_COMMON_PREFIX + \"spnego.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_COMMON_SPNEGO_PREFIX = CONFIG_COMMON_PREFIX + \"spnego.\"", "var_name": "CONFIG_COMMON_SPNEGO_PREFIX"}, {"original_string": "private static final String CONFIG_SPNEGO_PREFIX = CONFIG_HTTP_PREFIX + \"spnego.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_SPNEGO_PREFIX = CONFIG_HTTP_PREFIX + \"spnego.\"", "var_name": "CONFIG_SPNEGO_PREFIX"}, {"original_string": "private static final String REST_ROLE = \"rest-user\";", "modifier": "private static final", "type": "String", "declarator": "REST_ROLE = \"rest-user\"", "var_name": "REST_ROLE"}, {"original_string": "public  static final String SERVER_TYPE = \"REST\";", "modifier": "public  static final", "type": "String", "declarator": "SERVER_TYPE = \"REST\"", "var_name": "SERVER_TYPE"}, {"original_string": "private final ConfigurationService configurationService;", "modifier": "private final", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private final SecurityService securityService;", "modifier": "private final", "type": "SecurityService", "declarator": "securityService", "var_name": "securityService"}, {"original_string": "private final MonitorService monitorService;", "modifier": "private final", "type": "MonitorService", "declarator": "monitorService", "var_name": "monitorService"}, {"original_string": "private final SessionService sessionService;", "modifier": "private final", "type": "SessionService", "declarator": "sessionService", "var_name": "sessionService"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "private ServletContextHandler rootContextHandler;", "modifier": "private", "type": "ServletContextHandler", "declarator": "rootContextHandler", "var_name": "rootContextHandler"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private Set<String> registeredPaths;", "modifier": "private", "type": "Set<String>", "declarator": "registeredPaths", "var_name": "registeredPaths"}, {"original_string": "private volatile int port = -1;", "modifier": "private volatile", "type": "int", "declarator": "port = -1", "var_name": "port"}, {"original_string": "private final java.util.logging.Logger jerseyLogging;", "modifier": "private final", "type": "java.util.logging.Logger", "declarator": "jerseyLogging", "var_name": "jerseyLogging"}], "methods": [{"identifier": "HttpConductorImpl", "parameters": "(ConfigurationService configurationService,\n                             SecurityService securityService,\n                             MonitorService monitor,\n                             SessionService session)", "modifiers": "@Inject public", "return": "", "signature": " HttpConductorImpl(ConfigurationService configurationService,\n                             SecurityService securityService,\n                             MonitorService monitor,\n                             SessionService session)", "full_signature": "@Inject public  HttpConductorImpl(ConfigurationService configurationService,\n                             SecurityService securityService,\n                             MonitorService monitor,\n                             SessionService session)", "class_method_signature": "HttpConductorImpl.HttpConductorImpl(ConfigurationService configurationService,\n                             SecurityService securityService,\n                             MonitorService monitor,\n                             SessionService session)", "testcase": false, "constructor": true}, {"identifier": "registerHandler", "parameters": "(ServletHolder servlet, String path)", "modifiers": "@Override public", "return": "void", "signature": "void registerHandler(ServletHolder servlet, String path)", "full_signature": "@Override public void registerHandler(ServletHolder servlet, String path)", "class_method_signature": "HttpConductorImpl.registerHandler(ServletHolder servlet, String path)", "testcase": false, "constructor": false}, {"identifier": "unregisterHandler", "parameters": "(ServletHolder servlet)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterHandler(ServletHolder servlet)", "full_signature": "@Override public void unregisterHandler(ServletHolder servlet)", "class_method_signature": "HttpConductorImpl.unregisterHandler(ServletHolder servlet)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPort()", "full_signature": "@Override public int getPort()", "class_method_signature": "HttpConductorImpl.getPort()", "testcase": false, "constructor": false}, {"identifier": "safeParseAuthentication", "parameters": "(String propName)", "modifiers": "private", "return": "AuthenticationType", "signature": "AuthenticationType safeParseAuthentication(String propName)", "full_signature": "private AuthenticationType safeParseAuthentication(String propName)", "class_method_signature": "HttpConductorImpl.safeParseAuthentication(String propName)", "testcase": false, "constructor": false}, {"identifier": "safeParseCsrfType", "parameters": "(String propName)", "modifiers": "private", "return": "CsrfProtectionType", "signature": "CsrfProtectionType safeParseCsrfType(String propName)", "full_signature": "private CsrfProtectionType safeParseCsrfType(String propName)", "class_method_signature": "HttpConductorImpl.safeParseCsrfType(String propName)", "testcase": false, "constructor": false}, {"identifier": "safeParseInt", "parameters": "(String propName)", "modifiers": "private", "return": "int", "signature": "int safeParseInt(String propName)", "full_signature": "private int safeParseInt(String propName)", "class_method_signature": "HttpConductorImpl.safeParseInt(String propName)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "HttpConductorImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "HttpConductorImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "crash", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void crash()", "full_signature": "@Override public void crash()", "class_method_signature": "HttpConductorImpl.crash()", "testcase": false, "constructor": false}, {"identifier": "addCsrfFilter", "parameters": "(ContextHandler handler)", "modifiers": "private", "return": "void", "signature": "void addCsrfFilter(ContextHandler handler)", "full_signature": "private void addCsrfFilter(ContextHandler handler)", "class_method_signature": "HttpConductorImpl.addCsrfFilter(ContextHandler handler)", "testcase": false, "constructor": false}, {"identifier": "addCrossOriginFilter", "parameters": "(ContextHandler handler)", "modifiers": "private", "return": "void", "signature": "void addCrossOriginFilter(ContextHandler handler)", "full_signature": "private void addCrossOriginFilter(ContextHandler handler)", "class_method_signature": "HttpConductorImpl.addCrossOriginFilter(ContextHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getContextPathPrefix", "parameters": "(String contextPath)", "modifiers": "static", "return": "String", "signature": "String getContextPathPrefix(String contextPath)", "full_signature": "static String getContextPathPrefix(String contextPath)", "class_method_signature": "HttpConductorImpl.getContextPathPrefix(String contextPath)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-rest/src/main/java/com/foundationdb/http/HttpConductorImpl.java"}, "focal_method": {"identifier": "getContextPathPrefix", "parameters": "(String contextPath)", "modifiers": "static", "return": "String", "body": "static String getContextPathPrefix(String contextPath) {\n        if (!contextPath.startsWith(\"/\"))\n            throw new IllegalPathRequest(\"registered paths must start with '/'\");\n        int contextBaseEnd = contextPath.indexOf(\"/\", 1);\n        if (contextBaseEnd < 0)\n            contextBaseEnd = contextPath.length();\n        String result = contextPath.substring(1, contextBaseEnd);\n        if (result.contains(\"*\"))\n            throw new IllegalPathRequest(\"can't ask for a glob within the first URL segment\");\n        return result;\n    }", "signature": "String getContextPathPrefix(String contextPath)", "full_signature": "static String getContextPathPrefix(String contextPath)", "class_method_signature": "HttpConductorImpl.getContextPathPrefix(String contextPath)", "testcase": false, "constructor": false, "invocations": ["startsWith", "indexOf", "length", "substring", "contains"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}