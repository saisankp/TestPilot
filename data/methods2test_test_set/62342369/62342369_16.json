{"test_class": {"identifier": "FunctionMessageHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY_FILE = \"emptyFile\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_FILE = \"emptyFile\"", "var_name": "EMPTY_FILE"}, {"original_string": "protected AgentTokenServices tokenServices;", "modifier": "protected", "type": "AgentTokenServices", "declarator": "tokenServices", "var_name": "tokenServices"}, {"original_string": "protected MessageHandlerPool messageHandlerPool;", "modifier": "protected", "type": "MessageHandlerPool", "declarator": "messageHandlerPool", "var_name": "messageHandlerPool"}, {"original_string": "protected AgentTokenWrapper agentToken;", "modifier": "protected", "type": "AgentTokenWrapper", "declarator": "agentToken", "var_name": "agentToken"}], "file": "step-functions/step-functions-handler/src/test/java/step/functions/handler/FunctionMessageHandlerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() throws Exception {\n\t\tAgentTokenWrapper agentToken = getAgentToken(tokenServices);\n\t\t\n\t\tInputMessage message = new InputMessage();\n\t\t\n\t\tHashMap<String, String> properties = new HashMap<String, String>();\n\n\t\tproperties.put(FunctionMessageHandler.FUNCTION_HANDLER_PACKAGE_KEY + \".id\", EMPTY_FILE);\n\t\tproperties.put(FunctionMessageHandler.FUNCTION_HANDLER_PACKAGE_KEY + \".version\", \"1\");\n\t\t\n\t\tproperties.put(FunctionMessageHandler.FUNCTION_HANDLER_KEY, TestFunctionHandler.class.getName());\n\t\t\n\t\tmessage.setProperties(properties);\n\t\t\n\t\tInput<TestInput> input = getTestInput();\n\t\t\n\t\tmessage.setPayload(new ObjectMapper().valueToTree(input));\n\t\t\n\t\tOutputMessage outputMessage = messageHandlerPool.get(FunctionMessageHandler.class.getName()).handle(agentToken, message);\n\t\tAssert.assertEquals(\"Bonjour\", outputMessage.getPayload().get(\"payload\").get(\"message\").asText());\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "FunctionMessageHandlerTest.test()", "testcase": true, "constructor": false, "invocations": ["getAgentToken", "put", "put", "put", "getName", "setProperties", "getTestInput", "setPayload", "valueToTree", "handle", "get", "getName", "assertEquals", "asText", "get", "get", "getPayload"]}, "focal_class": {"identifier": "FunctionMessageHandler", "superclass": "extends AbstractMessageHandler", "interfaces": "", "fields": [{"original_string": "public static final String FUNCTION_HANDLER_PACKAGE_KEY = \"$functionhandlerjar\";", "modifier": "public static final", "type": "String", "declarator": "FUNCTION_HANDLER_PACKAGE_KEY = \"$functionhandlerjar\"", "var_name": "FUNCTION_HANDLER_PACKAGE_KEY"}, {"original_string": "public static final String FUNCTION_HANDLER_KEY = \"$functionhandler\";", "modifier": "public static final", "type": "String", "declarator": "FUNCTION_HANDLER_KEY = \"$functionhandler\"", "var_name": "FUNCTION_HANDLER_KEY"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private ApplicationContextBuilder applicationContextBuilder;", "modifier": "private", "type": "ApplicationContextBuilder", "declarator": "applicationContextBuilder", "var_name": "applicationContextBuilder"}, {"original_string": "public FunctionHandlerFactory functionHandlerFactory;", "modifier": "public", "type": "FunctionHandlerFactory", "declarator": "functionHandlerFactory", "var_name": "functionHandlerFactory"}], "methods": [{"identifier": "FunctionMessageHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " FunctionMessageHandler()", "full_signature": "public  FunctionMessageHandler()", "class_method_signature": "FunctionMessageHandler.FunctionMessageHandler()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(AgentTokenServices agentTokenServices)", "modifiers": "@Override public", "return": "void", "signature": "void init(AgentTokenServices agentTokenServices)", "full_signature": "@Override public void init(AgentTokenServices agentTokenServices)", "class_method_signature": "FunctionMessageHandler.init(AgentTokenServices agentTokenServices)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(AgentTokenWrapper token, InputMessage inputMessage)", "modifiers": "@Override public", "return": "OutputMessage", "signature": "OutputMessage handle(AgentTokenWrapper token, InputMessage inputMessage)", "full_signature": "@Override public OutputMessage handle(AgentTokenWrapper token, InputMessage inputMessage)", "class_method_signature": "FunctionMessageHandler.handle(AgentTokenWrapper token, InputMessage inputMessage)", "testcase": false, "constructor": false}, {"identifier": "addCustomTypeToOutputMeasures", "parameters": "(List<Measure> outputMeasures)", "modifiers": "protected", "return": "void", "signature": "void addCustomTypeToOutputMeasures(List<Measure> outputMeasures)", "full_signature": "protected void addCustomTypeToOutputMeasures(List<Measure> outputMeasures)", "class_method_signature": "FunctionMessageHandler.addCustomTypeToOutputMeasures(List<Measure> outputMeasures)", "testcase": false, "constructor": false}, {"identifier": "addAdditionalMeasuresToOutput", "parameters": "(Output<?> output, List<Measure> additionalMeasures)", "modifiers": "protected", "return": "void", "signature": "void addAdditionalMeasuresToOutput(Output<?> output, List<Measure> additionalMeasures)", "full_signature": "protected void addAdditionalMeasuresToOutput(Output<?> output, List<Measure> additionalMeasures)", "class_method_signature": "FunctionMessageHandler.addAdditionalMeasuresToOutput(Output<?> output, List<Measure> additionalMeasures)", "testcase": false, "constructor": false}, {"identifier": "customMeasureData", "parameters": "()", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> customMeasureData()", "full_signature": "protected Map<String, Object> customMeasureData()", "class_method_signature": "FunctionMessageHandler.customMeasureData()", "testcase": false, "constructor": false}, {"identifier": "getMergedAgentProperties", "parameters": "(AgentTokenWrapper token)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getMergedAgentProperties(AgentTokenWrapper token)", "full_signature": "private Map<String, String> getMergedAgentProperties(AgentTokenWrapper token)", "class_method_signature": "FunctionMessageHandler.getMergedAgentProperties(AgentTokenWrapper token)", "testcase": false, "constructor": false}], "file": "step-functions/step-functions-handler/src/main/java/step/functions/handler/FunctionMessageHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(AgentTokenWrapper token, InputMessage inputMessage)", "modifiers": "@Override public", "return": "OutputMessage", "body": "@Override\n\tpublic OutputMessage handle(AgentTokenWrapper token, InputMessage inputMessage) throws Exception {\n\t\tapplicationContextBuilder.resetContext();\n\t\t\n\t\tFileVersionId functionPackage = getFileVersionId(FUNCTION_HANDLER_PACKAGE_KEY, inputMessage.getProperties());\n\t\tif(functionPackage != null) {\n\t\t\tRemoteApplicationContextFactory functionHandlerContext = new RemoteApplicationContextFactory(token.getServices().getFileManagerClient(), getFileVersionId(FUNCTION_HANDLER_PACKAGE_KEY, inputMessage.getProperties()));\n\t\t\tapplicationContextBuilder.pushContext(functionHandlerContext);\n\t\t}\n\t\t\n\t\treturn applicationContextBuilder.runInContext(()->{\n\t\t\t// Merge the token and agent properties\n\t\t\tMap<String, String> mergedAgentProperties = getMergedAgentProperties(token);\n\t\t\t// Instantiate the function handler \n\t\t\tString handlerClass = inputMessage.getProperties().get(FUNCTION_HANDLER_KEY);\n\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\tAbstractFunctionHandler functionHandler = functionHandlerFactory.create(applicationContextBuilder.getCurrentContext().getClassLoader(), \n\t\t\t\t\thandlerClass, token.getSession(), token.getTokenReservationSession(), mergedAgentProperties);\n\t\t\t\n\t\t\t// Deserialize the Input from the message payload\n\t\t\tJavaType javaType = mapper.getTypeFactory().constructParametrizedType(Input.class, Input.class, functionHandler.getInputPayloadClass());\n\t\t\tInput<?> input = mapper.readValue(mapper.treeAsTokens(inputMessage.getPayload()), javaType);\n\t\t\t\n\t\t\t// Handle the input\n\t\t\tMeasurementsBuilder measurementsBuilder = new MeasurementsBuilder();\n\t\t\tmeasurementsBuilder.startMeasure(input.getFunction());\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tOutput<?> output = functionHandler.handle(input);\n\t\t\tmeasurementsBuilder.stopMeasure(customMeasureData());\n\t\t\t\n\t\t\tList<Measure> outputMeasures = output.getMeasures();\n\t\t\t// Add type=\"custom\" to all output measures\n\t\t\taddCustomTypeToOutputMeasures(outputMeasures);\n\t\t\t\n\t\t\t// Add Keyword measure to output\n\t\t\taddAdditionalMeasuresToOutput(output, measurementsBuilder.getMeasures());\n\n\t\t\t// Serialize the output\n\t\t\tObjectNode outputPayload = (ObjectNode) mapper.valueToTree(output);\n\n\t\t\t// Create and return the output message \n\t\t\tOutputMessageBuilder outputMessageBuilder = new OutputMessageBuilder();\n\t\t\toutputMessageBuilder.setPayload(outputPayload);\n\t\t\treturn outputMessageBuilder.build();\n\t\t\t\n\t\t});\n\t}", "signature": "OutputMessage handle(AgentTokenWrapper token, InputMessage inputMessage)", "full_signature": "@Override public OutputMessage handle(AgentTokenWrapper token, InputMessage inputMessage)", "class_method_signature": "FunctionMessageHandler.handle(AgentTokenWrapper token, InputMessage inputMessage)", "testcase": false, "constructor": false, "invocations": ["resetContext", "getFileVersionId", "getProperties", "getFileManagerClient", "getServices", "getFileVersionId", "getProperties", "pushContext", "runInContext", "getMergedAgentProperties", "get", "getProperties", "create", "getClassLoader", "getCurrentContext", "getSession", "getTokenReservationSession", "constructParametrizedType", "getTypeFactory", "getInputPayloadClass", "readValue", "treeAsTokens", "getPayload", "startMeasure", "getFunction", "handle", "stopMeasure", "customMeasureData", "getMeasures", "addCustomTypeToOutputMeasures", "addAdditionalMeasuresToOutput", "getMeasures", "valueToTree", "setPayload", "build"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}