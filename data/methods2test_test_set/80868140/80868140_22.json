{"test_class": {"identifier": "StlFitStatsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StlTestDataGenerator testDataGenerator = new StlTestDataGenerator();", "modifier": "private final", "type": "StlTestDataGenerator", "declarator": "testDataGenerator = new StlTestDataGenerator()", "var_name": "testDataGenerator"}], "file": "stl-decomp-4j/src/test/java/com/github/servicenow/ds/stats/stl/StlFitStatsTest.java"}, "test_case": {"identifier": "StlStatsLogLikelihoodTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void StlStatsLogLikelihoodTest() {\n\n\t\tint periodicity = 168;\n\t\tBuilder builder = new Builder().setPeriodLength(periodicity).setSeasonalWidth(2001);\n\t\tbuilder.setInnerIterations(1).setRobustnessIterations(15);\n\n\t\tSeasonalTrendLoess smoother = builder.buildSmoother(testDataGenerator.values);\n\n\t\tDecomposition stl = smoother.decompose();\n\n\t\tStlFitStats stats = new StlFitStats(stl);\n\n\t\tdouble ll = stats.getResidualLogLikelihood();\n\n\t\tdouble r2sum = 0;\n\t\tfor (double r : stl.getResidual())\n\t\t\tr2sum += r * r;\n\n\t\tint N = stl.getResidual().length;\n\n\t\tdouble varMLE = r2sum / N;\n\n\t\tdouble ll0 = - 0.5 * N * (1 + Math.log(2 * Math.PI * varMLE));\n\n\t\tassertEquals(ll0, ll, 1.0e-14);\n\n\t\tdouble s0 = Math.sqrt(varMLE);\n\n\t\tdouble dp = ll - stats.getResidualLogLikelihood((1 + .0000001) * s0);\n\t\tdouble dm = ll - stats.getResidualLogLikelihood((1 - .0000001) * s0);\n\n\t\tassertTrue(\"Max LL test\", dp > 0.0);\n\t\tassertTrue(\"Max LL test\", dm > 0.0);\n\t}", "signature": "void StlStatsLogLikelihoodTest()", "full_signature": "@Test public void StlStatsLogLikelihoodTest()", "class_method_signature": "StlFitStatsTest.StlStatsLogLikelihoodTest()", "testcase": true, "constructor": false, "invocations": ["setSeasonalWidth", "setPeriodLength", "setRobustnessIterations", "setInnerIterations", "buildSmoother", "decompose", "getResidualLogLikelihood", "getResidual", "getResidual", "log", "assertEquals", "sqrt", "getResidualLogLikelihood", "getResidualLogLikelihood", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "StlFitStats", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int fSampleSize;", "modifier": "private final", "type": "int", "declarator": "fSampleSize", "var_name": "fSampleSize"}, {"original_string": "private final double fDataMean;", "modifier": "private final", "type": "double", "declarator": "fDataMean", "var_name": "fDataMean"}, {"original_string": "private final double fDataVariance;", "modifier": "private final", "type": "double", "declarator": "fDataVariance", "var_name": "fDataVariance"}, {"original_string": "private final double fTrendMean;", "modifier": "private final", "type": "double", "declarator": "fTrendMean", "var_name": "fTrendMean"}, {"original_string": "private final double fTrendRange;", "modifier": "private final", "type": "double", "declarator": "fTrendRange", "var_name": "fTrendRange"}, {"original_string": "private final double fSeasonalMean;", "modifier": "private final", "type": "double", "declarator": "fSeasonalMean", "var_name": "fSeasonalMean"}, {"original_string": "private final double fSeasonalVariance;", "modifier": "private final", "type": "double", "declarator": "fSeasonalVariance", "var_name": "fSeasonalVariance"}, {"original_string": "private final double fResidualMean;", "modifier": "private final", "type": "double", "declarator": "fResidualMean", "var_name": "fResidualMean"}, {"original_string": "private final double fResidualVariance;", "modifier": "private final", "type": "double", "declarator": "fResidualVariance", "var_name": "fResidualVariance"}, {"original_string": "private final double fResidualLogLikelihood;", "modifier": "private final", "type": "double", "declarator": "fResidualLogLikelihood", "var_name": "fResidualLogLikelihood"}, {"original_string": "private final double fDeSeasonalMean;", "modifier": "private final", "type": "double", "declarator": "fDeSeasonalMean", "var_name": "fDeSeasonalMean"}, {"original_string": "private final double fDeSeasonalVariance;", "modifier": "private final", "type": "double", "declarator": "fDeSeasonalVariance", "var_name": "fDeSeasonalVariance"}, {"original_string": "private final double fDeTrendMean;", "modifier": "private final", "type": "double", "declarator": "fDeTrendMean", "var_name": "fDeTrendMean"}, {"original_string": "private final double fDeTrendVariance;", "modifier": "private final", "type": "double", "declarator": "fDeTrendVariance", "var_name": "fDeTrendVariance"}, {"original_string": "private final double fSeasonalRange;", "modifier": "private final", "type": "double", "declarator": "fSeasonalRange", "var_name": "fSeasonalRange"}, {"original_string": "private final double fResidualVarMLE;", "modifier": "private final", "type": "double", "declarator": "fResidualVarMLE", "var_name": "fResidualVarMLE"}], "methods": [{"identifier": "StlFitStats", "parameters": "(SeasonalTrendLoess.Decomposition stl)", "modifiers": "public", "return": "", "signature": " StlFitStats(SeasonalTrendLoess.Decomposition stl)", "full_signature": "public  StlFitStats(SeasonalTrendLoess.Decomposition stl)", "class_method_signature": "StlFitStats.StlFitStats(SeasonalTrendLoess.Decomposition stl)", "testcase": false, "constructor": true}, {"identifier": "getTrendMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTrendMean()", "full_signature": "public double getTrendMean()", "class_method_signature": "StlFitStats.getTrendMean()", "testcase": false, "constructor": false}, {"identifier": "getTrendRange", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTrendRange()", "full_signature": "public double getTrendRange()", "class_method_signature": "StlFitStats.getTrendRange()", "testcase": false, "constructor": false}, {"identifier": "getDataMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDataMean()", "full_signature": "public double getDataMean()", "class_method_signature": "StlFitStats.getDataMean()", "testcase": false, "constructor": false}, {"identifier": "getDataVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDataVariance()", "full_signature": "public double getDataVariance()", "class_method_signature": "StlFitStats.getDataVariance()", "testcase": false, "constructor": false}, {"identifier": "getDataStdDev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDataStdDev()", "full_signature": "public double getDataStdDev()", "class_method_signature": "StlFitStats.getDataStdDev()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasonalMean()", "full_signature": "public double getSeasonalMean()", "class_method_signature": "StlFitStats.getSeasonalMean()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasonalVariance()", "full_signature": "public double getSeasonalVariance()", "class_method_signature": "StlFitStats.getSeasonalVariance()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalStdDev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasonalStdDev()", "full_signature": "public double getSeasonalStdDev()", "class_method_signature": "StlFitStats.getSeasonalStdDev()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalRange", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasonalRange()", "full_signature": "public double getSeasonalRange()", "class_method_signature": "StlFitStats.getSeasonalRange()", "testcase": false, "constructor": false}, {"identifier": "getResidualMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResidualMean()", "full_signature": "public double getResidualMean()", "class_method_signature": "StlFitStats.getResidualMean()", "testcase": false, "constructor": false}, {"identifier": "getResidualVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResidualVariance()", "full_signature": "public double getResidualVariance()", "class_method_signature": "StlFitStats.getResidualVariance()", "testcase": false, "constructor": false}, {"identifier": "getResidualStdDev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResidualStdDev()", "full_signature": "public double getResidualStdDev()", "class_method_signature": "StlFitStats.getResidualStdDev()", "testcase": false, "constructor": false}, {"identifier": "getDeSeasonalMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeSeasonalMean()", "full_signature": "public double getDeSeasonalMean()", "class_method_signature": "StlFitStats.getDeSeasonalMean()", "testcase": false, "constructor": false}, {"identifier": "getDeSeasonalVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeSeasonalVariance()", "full_signature": "public double getDeSeasonalVariance()", "class_method_signature": "StlFitStats.getDeSeasonalVariance()", "testcase": false, "constructor": false}, {"identifier": "getDeTrendMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeTrendMean()", "full_signature": "public double getDeTrendMean()", "class_method_signature": "StlFitStats.getDeTrendMean()", "testcase": false, "constructor": false}, {"identifier": "getDeTrendVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeTrendVariance()", "full_signature": "public double getDeTrendVariance()", "class_method_signature": "StlFitStats.getDeTrendVariance()", "testcase": false, "constructor": false}, {"identifier": "getEstimatedVarianceOfResidualSampleVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getEstimatedVarianceOfResidualSampleVariance()", "full_signature": "public double getEstimatedVarianceOfResidualSampleVariance()", "class_method_signature": "StlFitStats.getEstimatedVarianceOfResidualSampleVariance()", "testcase": false, "constructor": false}, {"identifier": "getTrendinessZScore", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTrendinessZScore()", "full_signature": "public double getTrendinessZScore()", "class_method_signature": "StlFitStats.getTrendinessZScore()", "testcase": false, "constructor": false}, {"identifier": "getSeasonalZScore", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeasonalZScore()", "full_signature": "public double getSeasonalZScore()", "class_method_signature": "StlFitStats.getSeasonalZScore()", "testcase": false, "constructor": false}, {"identifier": "getResidualLogLikelihood", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResidualLogLikelihood()", "full_signature": "public double getResidualLogLikelihood()", "class_method_signature": "StlFitStats.getResidualLogLikelihood()", "testcase": false, "constructor": false}, {"identifier": "getResidualLogLikelihood", "parameters": "(double sigma)", "modifiers": "public", "return": "double", "signature": "double getResidualLogLikelihood(double sigma)", "full_signature": "public double getResidualLogLikelihood(double sigma)", "class_method_signature": "StlFitStats.getResidualLogLikelihood(double sigma)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StlFitStats.toString()", "testcase": false, "constructor": false}], "file": "stl-decomp-4j/src/main/java/com/github/servicenow/ds/stats/stl/StlFitStats.java"}, "focal_method": {"identifier": "getResidualLogLikelihood", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getResidualLogLikelihood() {\n\t\treturn fResidualLogLikelihood;\n\t}", "signature": "double getResidualLogLikelihood()", "full_signature": "public double getResidualLogLikelihood()", "class_method_signature": "StlFitStats.getResidualLogLikelihood()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 80868140, "url": "https://github.com/ServiceNow/stl-decomp-4j", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 79, "size": 3949, "license": "licensed"}}