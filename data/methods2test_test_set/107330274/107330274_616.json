{"test_class": {"identifier": "TitusClientImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TitusClient titusClient;", "modifier": "private static", "type": "TitusClient", "declarator": "titusClient", "var_name": "titusClient"}, {"original_string": "private static Server testServer;", "modifier": "private static", "type": "Server", "declarator": "testServer", "var_name": "testServer"}, {"original_string": "private static BatchJobTask taskOne = JobGenerator.oneBatchTask();", "modifier": "private static", "type": "BatchJobTask", "declarator": "taskOne = JobGenerator.oneBatchTask()", "var_name": "taskOne"}, {"original_string": "private static BatchJobTask taskTwo = JobGenerator.oneBatchTask();", "modifier": "private static", "type": "BatchJobTask", "declarator": "taskTwo = JobGenerator.oneBatchTask()", "var_name": "taskTwo"}, {"original_string": "private static BatchJobTask taskThree = JobGenerator.oneBatchTask();", "modifier": "private static", "type": "BatchJobTask", "declarator": "taskThree = JobGenerator.oneBatchTask()", "var_name": "taskThree"}, {"original_string": "private static BatchJobTask taskFour = JobGenerator.oneBatchTask();", "modifier": "private static", "type": "BatchJobTask", "declarator": "taskFour = JobGenerator.oneBatchTask()", "var_name": "taskFour"}, {"original_string": "private static BatchJobTask taskFive = JobGenerator.oneBatchTask();", "modifier": "private static", "type": "BatchJobTask", "declarator": "taskFive = JobGenerator.oneBatchTask()", "var_name": "taskFive"}, {"original_string": "private static Job<BatchJobExt> jobOne = JobGenerator.oneBatchJob();", "modifier": "private static", "type": "Job<BatchJobExt>", "declarator": "jobOne = JobGenerator.oneBatchJob()", "var_name": "jobOne"}], "file": "titus-supplementary-component/tasks-publisher/src/test/java/com/netflix/titus/supplementary/taskspublisher/TitusClientImplTest.java"}, "test_case": {"identifier": "getTaskUpdates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTaskUpdates() {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger tasksCount = new AtomicInteger(0);\n        titusClient.getJobAndTaskUpdates().subscribe(task -> {\n            if (tasksCount.incrementAndGet() == 5) {\n                latch.countDown();\n            }\n        }, e -> fail(\"getTaskUpdates exception {}\", e));\n        try {\n            latch.await(1, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            fail(\"getTaskUpdates Timeout \", e);\n        }\n    }", "signature": "void getTaskUpdates()", "full_signature": "@Test public void getTaskUpdates()", "class_method_signature": "TitusClientImplTest.getTaskUpdates()", "testcase": true, "constructor": false, "invocations": ["subscribe", "getJobAndTaskUpdates", "incrementAndGet", "countDown", "fail", "await", "fail"]}, "focal_class": {"identifier": "TitusClientImpl", "superclass": "", "interfaces": "implements TitusClient", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TitusClientImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TitusClientImpl.class)", "var_name": "logger"}, {"original_string": "private static final String CLIENT_ID = \"tasksPublisher\";", "modifier": "private static final", "type": "String", "declarator": "CLIENT_ID = \"tasksPublisher\"", "var_name": "CLIENT_ID"}, {"original_string": "private static final int MAX_CACHE_SIZE = 40000;", "modifier": "private static final", "type": "int", "declarator": "MAX_CACHE_SIZE = 40000", "var_name": "MAX_CACHE_SIZE"}, {"original_string": "private final JobManagementServiceStub jobManagementService;", "modifier": "private final", "type": "JobManagementServiceStub", "declarator": "jobManagementService", "var_name": "jobManagementService"}, {"original_string": "private final JobManagementServiceFutureStub jobManagementServiceFutureStub;", "modifier": "private final", "type": "JobManagementServiceFutureStub", "declarator": "jobManagementServiceFutureStub", "var_name": "jobManagementServiceFutureStub"}, {"original_string": "private final Registry registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final AtomicInteger numJobUpdates = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "numJobUpdates = new AtomicInteger(0)", "var_name": "numJobUpdates"}, {"original_string": "private final AtomicInteger numTaskUpdates = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "numTaskUpdates = new AtomicInteger(0)", "var_name": "numTaskUpdates"}, {"original_string": "private final AtomicInteger numSnapshotUpdates = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "numSnapshotUpdates = new AtomicInteger(0)", "var_name": "numSnapshotUpdates"}, {"original_string": "private final AtomicInteger numMissingJobUpdate = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "numMissingJobUpdate = new AtomicInteger(0)", "var_name": "numMissingJobUpdate"}, {"original_string": "private final AtomicInteger apiErrors = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "apiErrors = new AtomicInteger(0)", "var_name": "apiErrors"}, {"original_string": "private final AsyncLoadingCache<String, Job> jobs;", "modifier": "private final", "type": "AsyncLoadingCache<String, Job>", "declarator": "jobs", "var_name": "jobs"}], "methods": [{"identifier": "TitusClientImpl", "parameters": "(JobManagementServiceStub jobManagementService,\n                           JobManagementServiceFutureStub jobManagementServiceFutureStub,\n                           Registry registry)", "modifiers": "public", "return": "", "signature": " TitusClientImpl(JobManagementServiceStub jobManagementService,\n                           JobManagementServiceFutureStub jobManagementServiceFutureStub,\n                           Registry registry)", "full_signature": "public  TitusClientImpl(JobManagementServiceStub jobManagementService,\n                           JobManagementServiceFutureStub jobManagementServiceFutureStub,\n                           Registry registry)", "class_method_signature": "TitusClientImpl.TitusClientImpl(JobManagementServiceStub jobManagementService,\n                           JobManagementServiceFutureStub jobManagementServiceFutureStub,\n                           Registry registry)", "testcase": false, "constructor": true}, {"identifier": "getTask", "parameters": "(String taskId)", "modifiers": "@Override public", "return": "Mono<Task>", "signature": "Mono<Task> getTask(String taskId)", "full_signature": "@Override public Mono<Task> getTask(String taskId)", "class_method_signature": "TitusClientImpl.getTask(String taskId)", "testcase": false, "constructor": false}, {"identifier": "getJobAndTaskUpdates", "parameters": "()", "modifiers": "@Override public", "return": "Flux<JobOrTaskUpdate>", "signature": "Flux<JobOrTaskUpdate> getJobAndTaskUpdates()", "full_signature": "@Override public Flux<JobOrTaskUpdate> getJobAndTaskUpdates()", "class_method_signature": "TitusClientImpl.getJobAndTaskUpdates()", "testcase": false, "constructor": false}, {"identifier": "getJobById", "parameters": "(String jobId)", "modifiers": "@Override public", "return": "Mono<Job>", "signature": "Mono<Job> getJobById(String jobId)", "full_signature": "@Override public Mono<Job> getJobById(String jobId)", "class_method_signature": "TitusClientImpl.getJobById(String jobId)", "testcase": false, "constructor": false}, {"identifier": "configureMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void configureMetrics()", "full_signature": "private void configureMetrics()", "class_method_signature": "TitusClientImpl.configureMetrics()", "testcase": false, "constructor": false}, {"identifier": "attachCallerId", "parameters": "(STUB serviceStub, String callerId)", "modifiers": "private", "return": "STUB", "signature": "STUB attachCallerId(STUB serviceStub, String callerId)", "full_signature": "private STUB attachCallerId(STUB serviceStub, String callerId)", "class_method_signature": "TitusClientImpl.attachCallerId(STUB serviceStub, String callerId)", "testcase": false, "constructor": false}, {"identifier": "buildCacheForJobs", "parameters": "()", "modifiers": "private", "return": "AsyncLoadingCache<String, Job>", "signature": "AsyncLoadingCache<String, Job> buildCacheForJobs()", "full_signature": "private AsyncLoadingCache<String, Job> buildCacheForJobs()", "class_method_signature": "TitusClientImpl.buildCacheForJobs()", "testcase": false, "constructor": false}, {"identifier": "toCompletableFuture", "parameters": "(ListenableFuture<T> listenableFuture, Executor executor)", "modifiers": "private", "return": "CompletableFuture<T>", "signature": "CompletableFuture<T> toCompletableFuture(ListenableFuture<T> listenableFuture, Executor executor)", "full_signature": "private CompletableFuture<T> toCompletableFuture(ListenableFuture<T> listenableFuture, Executor executor)", "class_method_signature": "TitusClientImpl.toCompletableFuture(ListenableFuture<T> listenableFuture, Executor executor)", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/tasks-publisher/src/main/java/com/netflix/titus/supplementary/taskspublisher/TitusClientImpl.java"}, "focal_method": {"identifier": "getJobAndTaskUpdates", "parameters": "()", "modifiers": "@Override public", "return": "Flux<JobOrTaskUpdate>", "body": "@Override\n    public Flux<JobOrTaskUpdate> getJobAndTaskUpdates() {\n        return Flux.create(sink -> attachCallerId(jobManagementService, CLIENT_ID)\n                .observeJobs(ObserveJobsQuery.newBuilder().build(), new StreamObserver<JobChangeNotification>() {\n                    @Override\n                    public void onNext(JobChangeNotification jobChangeNotification) {\n                        switch (jobChangeNotification.getNotificationCase()) {\n                            case JOBUPDATE:\n                                final Job job = jobChangeNotification.getJobUpdate().getJob();\n                                jobs.put(job.getId(), CompletableFuture.completedFuture(job));\n                                logger.debug(\"<{}> JobUpdate {}\", Thread.currentThread().getName(), jobChangeNotification.getJobUpdate().getJob().getId());\n                                sink.next(JobOrTaskUpdate.jobUpdate(job));\n                                numJobUpdates.incrementAndGet();\n                                break;\n                            case TASKUPDATE:\n                                logger.debug(\"<{}> TaskUpdate {}\", Thread.currentThread().getName(), jobChangeNotification.getTaskUpdate().getTask().getId());\n                                final Task task = jobChangeNotification.getTaskUpdate().getTask();\n                                sink.next(JobOrTaskUpdate.taskUpdate(task));\n                                numTaskUpdates.incrementAndGet();\n                                break;\n                            case SNAPSHOTEND:\n                                logger.info(\"<{}> SnapshotEnd {}\", Thread.currentThread().getName(), jobChangeNotification);\n                                numSnapshotUpdates.incrementAndGet();\n                                break;\n                            default:\n                                logger.error(\"<{}> Unknown Notification ? {}\", Thread.currentThread().getName(), jobChangeNotification.getNotificationCase());\n                        }\n                    }\n\n                    @Override\n                    public void onError(Throwable t) {\n                        logger.error(\"Exception in ObserveJobs :: \", t);\n                        apiErrors.incrementAndGet();\n                        sink.error(t);\n                    }\n\n                    @Override\n                    public void onCompleted() {\n                        logger.info(\"STREAM completed ?\");\n                        sink.complete();\n                    }\n                }));\n    }", "signature": "Flux<JobOrTaskUpdate> getJobAndTaskUpdates()", "full_signature": "@Override public Flux<JobOrTaskUpdate> getJobAndTaskUpdates()", "class_method_signature": "TitusClientImpl.getJobAndTaskUpdates()", "testcase": false, "constructor": false, "invocations": ["create", "observeJobs", "attachCallerId", "build", "newBuilder", "getNotificationCase", "getJob", "getJobUpdate", "put", "getId", "completedFuture", "debug", "getName", "currentThread", "getId", "getJob", "getJobUpdate", "next", "jobUpdate", "incrementAndGet", "debug", "getName", "currentThread", "getId", "getTask", "getTaskUpdate", "getTask", "getTaskUpdate", "next", "taskUpdate", "incrementAndGet", "info", "getName", "currentThread", "incrementAndGet", "error", "getName", "currentThread", "getNotificationCase", "error", "incrementAndGet", "error", "info", "complete"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}