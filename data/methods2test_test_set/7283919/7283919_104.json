{"test_class": {"identifier": "FitFixtureReportingSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FitFixtureReportingSystem reportingSystem;", "modifier": "private", "type": "FitFixtureReportingSystem", "declarator": "reportingSystem", "var_name": "reportingSystem"}, {"original_string": "@Mock private Fixture fixture;", "modifier": "@Mock private", "type": "Fixture", "declarator": "fixture", "var_name": "fixture"}, {"original_string": "private Parse table;", "modifier": "private", "type": "Parse", "declarator": "table", "var_name": "table"}, {"original_string": "private ArgumentCaptor<Parse> captor;", "modifier": "private", "type": "ArgumentCaptor<Parse>", "declarator": "captor", "var_name": "captor"}], "file": "dbfit-java/core/src/test/java/dbfit/fixture/report/FitFixtureReportingSystemTest.java"}, "test_case": {"identifier": "testAddExceptionOnStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddExceptionOnStart() {\n        reportingSystem = new FitFixtureReportingSystem(new Fixture(), table);\n\n        reportingSystem.addException(new Exception(\"Cruel World!\"));\n\n        assertThat(table, isParseThat()\n                       .withRecursiveChildren()\n                       .withRecursiveSiblings()\n                       .which(allOf(\n                           hasTagThat(containsString(\"<td\")),\n                           hasBodyThat(allOf(\n                                   containsString(\"Cruel World!\"),\n                                   containsString(\"stacktrace\"))))));\n    }", "signature": "void testAddExceptionOnStart()", "full_signature": "@Test public void testAddExceptionOnStart()", "class_method_signature": "FitFixtureReportingSystemTest.testAddExceptionOnStart()", "testcase": true, "constructor": false, "invocations": ["addException", "assertThat", "which", "withRecursiveSiblings", "withRecursiveChildren", "isParseThat", "allOf", "hasTagThat", "containsString", "hasBodyThat", "allOf", "containsString", "containsString"]}, "focal_class": {"identifier": "FitFixtureReportingSystem", "superclass": "", "interfaces": "implements ReportingSystem", "fields": [{"original_string": "protected final Fixture fixture;", "modifier": "protected final", "type": "Fixture", "declarator": "fixture", "var_name": "fixture"}, {"original_string": "protected final Parse table;", "modifier": "protected final", "type": "Parse", "declarator": "table", "var_name": "table"}, {"original_string": "protected Parse lastClosedRow;", "modifier": "protected", "type": "Parse", "declarator": "lastClosedRow", "var_name": "lastClosedRow"}, {"original_string": "protected Parse newRow;", "modifier": "protected", "type": "Parse", "declarator": "newRow", "var_name": "newRow"}, {"original_string": "protected Parse newRowTail;", "modifier": "protected", "type": "Parse", "declarator": "newRowTail", "var_name": "newRowTail"}], "methods": [{"identifier": "FitFixtureReportingSystem", "parameters": "(final Fixture fixture, final Parse table)", "modifiers": "public", "return": "", "signature": " FitFixtureReportingSystem(final Fixture fixture, final Parse table)", "full_signature": "public  FitFixtureReportingSystem(final Fixture fixture, final Parse table)", "class_method_signature": "FitFixtureReportingSystem.FitFixtureReportingSystem(final Fixture fixture, final Parse table)", "testcase": false, "constructor": true}, {"identifier": "createNewRow", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void createNewRow()", "full_signature": "protected void createNewRow()", "class_method_signature": "FitFixtureReportingSystem.createNewRow()", "testcase": false, "constructor": false}, {"identifier": "newRowAttached", "parameters": "()", "modifiers": "protected", "return": "Parse", "signature": "Parse newRowAttached()", "full_signature": "protected Parse newRowAttached()", "class_method_signature": "FitFixtureReportingSystem.newRowAttached()", "testcase": false, "constructor": false}, {"identifier": "closeNewRow", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void closeNewRow()", "full_signature": "protected void closeNewRow()", "class_method_signature": "FitFixtureReportingSystem.closeNewRow()", "testcase": false, "constructor": false}, {"identifier": "addCell", "parameters": "(final Parse cell)", "modifiers": "protected", "return": "void", "signature": "void addCell(final Parse cell)", "full_signature": "protected void addCell(final Parse cell)", "class_method_signature": "FitFixtureReportingSystem.addCell(final Parse cell)", "testcase": false, "constructor": false}, {"identifier": "endRow", "parameters": "(final MatchResult res, final String description)", "modifiers": "@Override public", "return": "void", "signature": "void endRow(final MatchResult res, final String description)", "full_signature": "@Override public void endRow(final MatchResult res, final String description)", "class_method_signature": "FitFixtureReportingSystem.endRow(final MatchResult res, final String description)", "testcase": false, "constructor": false}, {"identifier": "endRow", "parameters": "(final MatchResult res)", "modifiers": "@Override public", "return": "void", "signature": "void endRow(final MatchResult res)", "full_signature": "@Override public void endRow(final MatchResult res)", "class_method_signature": "FitFixtureReportingSystem.endRow(final MatchResult res)", "testcase": false, "constructor": false}, {"identifier": "addCell", "parameters": "(final MatchResult res)", "modifiers": "@Override public", "return": "void", "signature": "void addCell(final MatchResult res)", "full_signature": "@Override public void addCell(final MatchResult res)", "class_method_signature": "FitFixtureReportingSystem.addCell(final MatchResult res)", "testcase": false, "constructor": false}, {"identifier": "addException", "parameters": "(final Throwable ex)", "modifiers": "@Override public", "return": "void", "signature": "void addException(final Throwable ex)", "full_signature": "@Override public void addException(final Throwable ex)", "class_method_signature": "FitFixtureReportingSystem.addException(final Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "incRight", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void incRight()", "full_signature": "@Override public void incRight()", "class_method_signature": "FitFixtureReportingSystem.incRight()", "testcase": false, "constructor": false}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "Parse", "signature": "Parse getTable()", "full_signature": "public Parse getTable()", "class_method_signature": "FitFixtureReportingSystem.getTable()", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/fixture/report/FitFixtureReportingSystem.java"}, "focal_method": {"identifier": "addException", "parameters": "(final Throwable ex)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addException(final Throwable ex) {\n        Parse cell = new Parse(\"td\", \"\", null, null);\n        fixture.exception(cell, ex);\n        addCell(cell);\n        closeNewRow();\n    }", "signature": "void addException(final Throwable ex)", "full_signature": "@Override public void addException(final Throwable ex)", "class_method_signature": "FitFixtureReportingSystem.addException(final Throwable ex)", "testcase": false, "constructor": false, "invocations": ["exception", "addCell", "closeNewRow"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}