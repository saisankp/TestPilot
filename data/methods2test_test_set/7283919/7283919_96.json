{"test_class": {"identifier": "DataRowDiffTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock DataCellDiff childDiff;", "modifier": "@Mock", "type": "DataCellDiff", "declarator": "childDiff", "var_name": "childDiff"}, {"original_string": "@Mock MatchResult<DataRow, DataRow> mockResult;", "modifier": "@Mock", "type": "MatchResult<DataRow, DataRow>", "declarator": "mockResult", "var_name": "mockResult"}, {"original_string": "@Mock DiffListener listener;", "modifier": "@Mock", "type": "DiffListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "@Captor ArgumentCaptor<MatchResult> resultCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<MatchResult>", "declarator": "resultCaptor", "var_name": "resultCaptor"}, {"original_string": "@Captor ArgumentCaptor<DataCell> arg1Captor;", "modifier": "@Captor", "type": "ArgumentCaptor<DataCell>", "declarator": "arg1Captor", "var_name": "arg1Captor"}, {"original_string": "@Captor ArgumentCaptor<DataCell> arg2Captor;", "modifier": "@Captor", "type": "ArgumentCaptor<DataCell>", "declarator": "arg2Captor", "var_name": "arg2Captor"}, {"original_string": "private List<MatchResult> allResults;", "modifier": "private", "type": "List<MatchResult>", "declarator": "allResults", "var_name": "allResults"}, {"original_string": "private String[] columns = new String[] { \"n\", \"2n\" };", "modifier": "private", "type": "String[]", "declarator": "columns = new String[] { \"n\", \"2n\" }", "var_name": "columns"}], "file": "dbfit-java/core/src/test/java/dbfit/diff/DataRowDiffTest.java"}, "test_case": {"identifier": "shouldEmitChildrenDiffEventsOfTypeDataCell", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEmitChildrenDiffEventsOfTypeDataCell() {\n        Class expectedType = DataCell.class;\n        runUnadaptedDiff(createRow(2, 4), createRow(2, 4));\n\n        assertThat(allResults.get(0).getType(), equalTo(expectedType));\n        assertThat(allResults.get(1).getType(), equalTo(expectedType));\n    }", "signature": "void shouldEmitChildrenDiffEventsOfTypeDataCell()", "full_signature": "@Test public void shouldEmitChildrenDiffEventsOfTypeDataCell()", "class_method_signature": "DataRowDiffTest.shouldEmitChildrenDiffEventsOfTypeDataCell()", "testcase": true, "constructor": false, "invocations": ["runUnadaptedDiff", "createRow", "createRow", "assertThat", "getType", "get", "equalTo", "assertThat", "getType", "get", "equalTo"]}, "focal_class": {"identifier": "DataRowDiff", "superclass": "extends CompositeDiff<DataRow, DataCell>", "interfaces": "", "fields": [{"original_string": "private String[] columnNames;", "modifier": "private", "type": "String[]", "declarator": "columnNames", "var_name": "columnNames"}], "methods": [{"identifier": "DataRowDiff", "parameters": "(final String[] columnNames)", "modifiers": "public", "return": "", "signature": " DataRowDiff(final String[] columnNames)", "full_signature": "public  DataRowDiff(final String[] columnNames)", "class_method_signature": "DataRowDiff.DataRowDiff(final String[] columnNames)", "testcase": false, "constructor": true}, {"identifier": "DataRowDiff", "parameters": "(final String[] columnNames, final DataCellDiff cellDiff)", "modifiers": "public", "return": "", "signature": " DataRowDiff(final String[] columnNames, final DataCellDiff cellDiff)", "full_signature": "public  DataRowDiff(final String[] columnNames, final DataCellDiff cellDiff)", "class_method_signature": "DataRowDiff.DataRowDiff(final String[] columnNames, final DataCellDiff cellDiff)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override protected", "return": "Class", "signature": "Class getType()", "full_signature": "@Override protected Class getType()", "class_method_signature": "DataRowDiff.getType()", "testcase": false, "constructor": false}, {"identifier": "getChildType", "parameters": "()", "modifiers": "@Override protected", "return": "Class", "signature": "Class getChildType()", "full_signature": "@Override protected Class getChildType()", "class_method_signature": "DataRowDiff.getChildType()", "testcase": false, "constructor": false}, {"identifier": "getDiffRunner", "parameters": "(MatchResult<DataRow, DataRow> request)", "modifiers": "@Override protected", "return": "DiffRunner", "signature": "DiffRunner getDiffRunner(MatchResult<DataRow, DataRow> request)", "full_signature": "@Override protected DiffRunner getDiffRunner(MatchResult<DataRow, DataRow> request)", "class_method_signature": "DataRowDiff.getDiffRunner(MatchResult<DataRow, DataRow> request)", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/diff/DataRowDiff.java"}, "focal_method": {"identifier": "getType", "parameters": "()", "modifiers": "@Override protected", "return": "Class", "body": "@Override\n    protected Class getType() {\n        return DataRow.class;\n    }", "signature": "Class getType()", "full_signature": "@Override protected Class getType()", "class_method_signature": "DataRowDiff.getType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}