{"test_class": {"identifier": "PortofolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Offset<Double> PERCENT_OFFSET = offset(0.000000000001d);", "modifier": "private static final", "type": "Offset<Double>", "declarator": "PERCENT_OFFSET = offset(0.000000000001d)", "var_name": "PERCENT_OFFSET"}, {"original_string": "@Autowired\n\tprivate PortofolioService portofolioService;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioService", "declarator": "portofolioService", "var_name": "portofolioService"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/portofolio/PortofolioServiceTest.java"}, "test_case": {"identifier": "testGetPortofolio", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPortofolio() {\n\t\tString login = \"user\";\n\n\t\t// FIXME add asserts\n\n\t\tPortofolio result = portofolioService.getPortofolio(login);\n\n\t\tassertThat(result.getPercentChange()).isCloseTo(13.47978618287961, PERCENT_OFFSET);\n\t\tassertThat(result.getValueChange()).isCloseTo(922.8690277999999, PERCENT_OFFSET);\n\n\t\tassertThat(result.getAssets()).extracting(\"symbol.code\", \"percentChange\", \"valueChange\")\n\t\t\t\t.containsExactlyInAnyOrder( //\n\t\t\t\t\t\ttuple(\"UBI\", -6.14999667, -184.4999), //\n\t\t\t\t\t\ttuple(\"BRE\", 39.33333333, 1180d), //\n\t\t\t\t\t\ttuple(\"GBP\", 5.54032065, 66.4838478));\n\t}", "signature": "void testGetPortofolio()", "full_signature": "@Test public void testGetPortofolio()", "class_method_signature": "PortofolioServiceTest.testGetPortofolio()", "testcase": true, "constructor": false, "invocations": ["getPortofolio", "isCloseTo", "assertThat", "getPercentChange", "isCloseTo", "assertThat", "getValueChange", "containsExactlyInAnyOrder", "extracting", "assertThat", "getAssets", "tuple", "tuple", "tuple"]}, "focal_class": {"identifier": "PortofolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate UserRepository userRepo;", "modifier": "@Autowired\n\tprivate", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "createPortofolio", "parameters": "(String login, String baseCurrencyCode, int baseCurrencyAmount)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "full_signature": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "class_method_signature": "PortofolioService.createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "testcase": false, "constructor": false}, {"identifier": "getBaseCurrency", "parameters": "(String login)", "modifiers": "public", "return": "AssetInfo", "signature": "AssetInfo getBaseCurrency(String login)", "full_signature": "public AssetInfo getBaseCurrency(String login)", "class_method_signature": "PortofolioService.getBaseCurrency(String login)", "testcase": false, "constructor": false}, {"identifier": "getPortofolio", "parameters": "(String login)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio getPortofolio(String login)", "full_signature": "public Portofolio getPortofolio(String login)", "class_method_signature": "PortofolioService.getPortofolio(String login)", "testcase": false, "constructor": false}, {"identifier": "getAsset", "parameters": "(AssetEntity ae)", "modifiers": "protected", "return": "AssetInfo", "signature": "AssetInfo getAsset(AssetEntity ae)", "full_signature": "protected AssetInfo getAsset(AssetEntity ae)", "class_method_signature": "PortofolioService.getAsset(AssetEntity ae)", "testcase": false, "constructor": false}, {"identifier": "getOrderInfo", "parameters": "(String login, String symbolCode, double quantity)", "modifiers": "public", "return": "OrderInfo", "signature": "OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "full_signature": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "class_method_signature": "PortofolioService.getOrderInfo(String login, String symbolCode, double quantity)", "testcase": false, "constructor": false}, {"identifier": "getAvailableSymbols", "parameters": "(String login)", "modifiers": "public", "return": "List<Symbol>", "signature": "List<Symbol> getAvailableSymbols(String login)", "full_signature": "public List<Symbol> getAvailableSymbols(String login)", "class_method_signature": "PortofolioService.getAvailableSymbols(String login)", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order buy(String login, String code, double quantity)", "full_signature": "public Order buy(String login, String code, double quantity)", "class_method_signature": "PortofolioService.buy(String login, String code, double quantity)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order sell(String login, String code, double quantity)", "full_signature": "public Order sell(String login, String code, double quantity)", "class_method_signature": "PortofolioService.sell(String login, String code, double quantity)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/portofolio/PortofolioService.java"}, "focal_method": {"identifier": "getPortofolio", "parameters": "(String login)", "modifiers": "public", "return": "Portofolio", "body": "public Portofolio getPortofolio(String login) {\n\t\tPortofolioEntity portofolio = portofolioRepo.findByUserUsername(login);\n\n\t\tAssetInfo baseCurrencyAsset = new AssetInfo(portofolio.getBaseCurrency(), null, portofolio.getAmount().doubleValue());\n\t\t\n\t\tList<AssetInfo> assets = new ArrayList<>();\n\n\t\tdouble globalBaseCurrencyValueChange = 0f;\n\t\tdouble globalBaseCurrencyInvestedValue = 0f;\n\n\t\tfor (AssetEntity ae : portofolio.getAssets()) {\n\n\t\t\tAssetInfo asset = getAsset(ae);\n\n\t\t\tString currencyCode = asset.getCurrency().getCode();\n\n\t\t\tBigDecimal assetCurrencyToBaseCurrencyRate = rateService.getLatest(currencyCode, portofolio.getBaseCurrency().getCode()).getValue();\n\t\t\tBigDecimal baseCurrencyValueChange = assetCurrencyToBaseCurrencyRate.multiply(BigDecimal.valueOf(asset.getValueChange()));\n\t\t\tBigDecimal baseCurrencyInvestedValue = assetCurrencyToBaseCurrencyRate.multiply(BigDecimal.valueOf(asset.getValue()));\n\n\t\t\tglobalBaseCurrencyValueChange += baseCurrencyValueChange.doubleValue();\n\t\t\tglobalBaseCurrencyInvestedValue += baseCurrencyInvestedValue.doubleValue();\n\n\t\t\tassets.add(asset);\n\t\t}\n\n\t\tdouble globalPercentChange = 0;\n\n\t\tif (globalBaseCurrencyInvestedValue != 0) {\n\t\t\tglobalPercentChange = globalBaseCurrencyValueChange / globalBaseCurrencyInvestedValue * 100d;\n\t\t}\n\n\t\tdouble globalBaseCurrencyValue = globalBaseCurrencyInvestedValue + globalBaseCurrencyValueChange;\n\n\t\treturn new Portofolio(baseCurrencyAsset, assets, globalBaseCurrencyValue, globalPercentChange, globalBaseCurrencyValueChange);\n\t}", "signature": "Portofolio getPortofolio(String login)", "full_signature": "public Portofolio getPortofolio(String login)", "class_method_signature": "PortofolioService.getPortofolio(String login)", "testcase": false, "constructor": false, "invocations": ["findByUserUsername", "getBaseCurrency", "doubleValue", "getAmount", "getAssets", "getAsset", "getCode", "getCurrency", "getValue", "getLatest", "getCode", "getBaseCurrency", "multiply", "valueOf", "getValueChange", "multiply", "valueOf", "getValue", "doubleValue", "doubleValue", "add"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}