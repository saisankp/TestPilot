{"test_class": {"identifier": "OpenLRProtoDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "OpenLRProtoDecoder decoder = new OpenLRProtoDecoder();", "modifier": "", "type": "OpenLRProtoDecoder", "declarator": "decoder = new OpenLRProtoDecoder()", "var_name": "decoder"}], "file": "proto/src/test/java/openlr/proto/OpenLRProtoDecoderTest.java"}, "test_case": {"identifier": "testUnsupportedLocationType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsupportedLocationType() {\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .build();\n\n        LocationReference locationReference = new LocationReferenceProtoImpl(\"1\", LocationType.UNKNOWN, locationReferenceData);\n\n        try {\n            decoder.decodeData(locationReference);\n            fail();\n        } catch (PhysicalFormatException e) {\n            assertEquals(e.getErrorCode(), OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);\n        }\n    }", "signature": "void testUnsupportedLocationType()", "full_signature": "@Test public void testUnsupportedLocationType()", "class_method_signature": "OpenLRProtoDecoderTest.testUnsupportedLocationType()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "decodeData", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "OpenLRProtoDecoder", "superclass": "", "interfaces": "implements PhysicalDecoder", "fields": [{"original_string": "private final LocationTypeDecoderRegistry locationTypeDecoderRegistry = LocationTypeDecoderRegistry.create();", "modifier": "private final", "type": "LocationTypeDecoderRegistry", "declarator": "locationTypeDecoderRegistry = LocationTypeDecoderRegistry.create()", "var_name": "locationTypeDecoderRegistry"}], "methods": [{"identifier": "getDataClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getDataClass()", "full_signature": "@Override public Class<?> getDataClass()", "class_method_signature": "OpenLRProtoDecoder.getDataClass()", "testcase": false, "constructor": false}, {"identifier": "decodeData", "parameters": "(LocationReference data)", "modifiers": "@Override public", "return": "RawLocationReference", "signature": "RawLocationReference decodeData(LocationReference data)", "full_signature": "@Override public RawLocationReference decodeData(LocationReference data)", "class_method_signature": "OpenLRProtoDecoder.decodeData(LocationReference data)", "testcase": false, "constructor": false}, {"identifier": "getDataFormatIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDataFormatIdentifier()", "full_signature": "@Override public String getDataFormatIdentifier()", "class_method_signature": "OpenLRProtoDecoder.getDataFormatIdentifier()", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/OpenLRProtoDecoder.java"}, "focal_method": {"identifier": "decodeData", "parameters": "(LocationReference data)", "modifiers": "@Override public", "return": "RawLocationReference", "body": "@Override\n    public RawLocationReference decodeData(LocationReference data) throws PhysicalFormatException {\n        LocationType locationType = data.getLocationType();\n        LocationReferenceDecoder locationReferenceDecoder = locationTypeDecoderRegistry.getDecoder(locationType);\n\n        if (locationReferenceDecoder == null) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);\n        }\n\n        Object locationReferenceData = data.getLocationReferenceData();\n\n        if (!(locationReferenceData instanceof LocationReferenceData)) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_DATA_TYPE);\n        }\n\n        return locationReferenceDecoder.decode(data.getID(), (LocationReferenceData) locationReferenceData);\n    }", "signature": "RawLocationReference decodeData(LocationReference data)", "full_signature": "@Override public RawLocationReference decodeData(LocationReference data)", "class_method_signature": "OpenLRProtoDecoder.decodeData(LocationReference data)", "testcase": false, "constructor": false, "invocations": ["getLocationType", "getDecoder", "getLocationReferenceData", "decode", "getID"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}