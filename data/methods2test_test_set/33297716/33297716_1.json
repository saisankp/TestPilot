{"test_class": {"identifier": "JDOMetaContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA_NAME = \"__DEFAULT\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA_NAME = \"__DEFAULT\"", "var_name": "SCHEMA_NAME"}, {"original_string": "private static MemoryDatabase memDbData;", "modifier": "private static", "type": "MemoryDatabase", "declarator": "memDbData", "var_name": "memDbData"}, {"original_string": "private final UpdateLoggerFactory ulf = new StdoutUpdateLoggerFactory();", "modifier": "private final", "type": "UpdateLoggerFactory", "declarator": "ulf = new StdoutUpdateLoggerFactory()", "var_name": "ulf"}, {"original_string": "private MemoryDatabase memDbMeta;", "modifier": "private", "type": "MemoryDatabase", "declarator": "memDbMeta", "var_name": "memDbMeta"}, {"original_string": "private MetaStore metaStore;", "modifier": "private", "type": "MetaStore", "declarator": "metaStore", "var_name": "metaStore"}, {"original_string": "private MetaContext metaContext;", "modifier": "private", "type": "MetaContext", "declarator": "metaContext", "var_name": "metaContext"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "octopus-meta-jdo/src/test/java/kr/co/bitnine/octopus/meta/jdo/JDOMetaContextTest.java"}, "test_case": {"identifier": "testGetDataSourceFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDataSourceFail() throws Exception\n    {\n        thrown.expect(MetaException.class);\n        thrown.expectMessage(\"does not exist\");\n        metaContext.getDataSource(\"any\");\n    }", "signature": "void testGetDataSourceFail()", "full_signature": "@Test public void testGetDataSourceFail()", "class_method_signature": "JDOMetaContextTest.testGetDataSourceFail()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "getDataSource"]}, "focal_class": {"identifier": "JDOMetaContext", "superclass": "", "interfaces": "implements MetaContext", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(JDOMetaContext.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(JDOMetaContext.class)", "var_name": "LOG"}, {"original_string": "private final PersistenceManager pm;", "modifier": "private final", "type": "PersistenceManager", "declarator": "pm", "var_name": "pm"}, {"original_string": "private final UpdateLoggerFactory updateLoggerFactory;", "modifier": "private final", "type": "UpdateLoggerFactory", "declarator": "updateLoggerFactory", "var_name": "updateLoggerFactory"}, {"original_string": "private UpdateLogger updateLogger;", "modifier": "private", "type": "UpdateLogger", "declarator": "updateLogger", "var_name": "updateLogger"}], "methods": [{"identifier": "JDOMetaContext", "parameters": "(PersistenceManager persistenceManager,\n                          UpdateLoggerFactory updateLoggerFactory)", "modifiers": "public", "return": "", "signature": " JDOMetaContext(PersistenceManager persistenceManager,\n                          UpdateLoggerFactory updateLoggerFactory)", "full_signature": "public  JDOMetaContext(PersistenceManager persistenceManager,\n                          UpdateLoggerFactory updateLoggerFactory)", "class_method_signature": "JDOMetaContext.JDOMetaContext(PersistenceManager persistenceManager,\n                          UpdateLoggerFactory updateLoggerFactory)", "testcase": false, "constructor": true}, {"identifier": "getMUser", "parameters": "(String name, boolean nothrow)", "modifiers": "private", "return": "MUser", "signature": "MUser getMUser(String name, boolean nothrow)", "full_signature": "private MUser getMUser(String name, boolean nothrow)", "class_method_signature": "JDOMetaContext.getMUser(String name, boolean nothrow)", "testcase": false, "constructor": false}, {"identifier": "userExists", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userExists(String name)", "full_signature": "@Override public boolean userExists(String name)", "class_method_signature": "JDOMetaContext.userExists(String name)", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "(String name)", "modifiers": "@Override public", "return": "MetaUser", "signature": "MetaUser getUser(String name)", "full_signature": "@Override public MetaUser getUser(String name)", "class_method_signature": "JDOMetaContext.getUser(String name)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(String name, String password)", "modifiers": "@Override public", "return": "MetaUser", "signature": "MetaUser createUser(String name, String password)", "full_signature": "@Override public MetaUser createUser(String name, String password)", "class_method_signature": "JDOMetaContext.createUser(String name, String password)", "testcase": false, "constructor": false}, {"identifier": "alterUser", "parameters": "(String name, String newPassword)", "modifiers": "@Override public", "return": "void", "signature": "void alterUser(String name, String newPassword)", "full_signature": "@Override public void alterUser(String name, String newPassword)", "class_method_signature": "JDOMetaContext.alterUser(String name, String newPassword)", "testcase": false, "constructor": false}, {"identifier": "dropUser", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void dropUser(String name)", "full_signature": "@Override public void dropUser(String name)", "class_method_signature": "JDOMetaContext.dropUser(String name)", "testcase": false, "constructor": false}, {"identifier": "commentOnUser", "parameters": "(String comment, String name)", "modifiers": "@Override public", "return": "void", "signature": "void commentOnUser(String comment, String name)", "full_signature": "@Override public void commentOnUser(String comment, String name)", "class_method_signature": "JDOMetaContext.commentOnUser(String comment, String name)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<MetaUser>", "signature": "Collection<MetaUser> getUsers()", "full_signature": "@Override public Collection<MetaUser> getUsers()", "class_method_signature": "JDOMetaContext.getUsers()", "testcase": false, "constructor": false}, {"identifier": "getMDataSource", "parameters": "(String name, boolean nothrow)", "modifiers": "private", "return": "MDataSource", "signature": "MDataSource getMDataSource(String name, boolean nothrow)", "full_signature": "private MDataSource getMDataSource(String name, boolean nothrow)", "class_method_signature": "JDOMetaContext.getMDataSource(String name, boolean nothrow)", "testcase": false, "constructor": false}, {"identifier": "dataSourceExists", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean dataSourceExists(String name)", "full_signature": "@Override public boolean dataSourceExists(String name)", "class_method_signature": "JDOMetaContext.dataSourceExists(String name)", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "(String name)", "modifiers": "@Override public", "return": "MetaDataSource", "signature": "MetaDataSource getDataSource(String name)", "full_signature": "@Override public MetaDataSource getDataSource(String name)", "class_method_signature": "JDOMetaContext.getDataSource(String name)", "testcase": false, "constructor": false}, {"identifier": "addJdbcDataSource", "parameters": "(String driverName, String connectionString, String name)", "modifiers": "@Override public", "return": "MetaDataSource", "signature": "MetaDataSource addJdbcDataSource(String driverName, String connectionString, String name)", "full_signature": "@Override public MetaDataSource addJdbcDataSource(String driverName, String connectionString, String name)", "class_method_signature": "JDOMetaContext.addJdbcDataSource(String driverName, String connectionString, String name)", "testcase": false, "constructor": false}, {"identifier": "createElasticSearchDataContext", "parameters": "(JSONObject jsonObject)", "modifiers": "private", "return": "DataContext", "signature": "DataContext createElasticSearchDataContext(JSONObject jsonObject)", "full_signature": "private DataContext createElasticSearchDataContext(JSONObject jsonObject)", "class_method_signature": "JDOMetaContext.createElasticSearchDataContext(JSONObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "createMongoDbDataContext", "parameters": "(JSONObject jsonObject)", "modifiers": "private", "return": "DataContext", "signature": "DataContext createMongoDbDataContext(JSONObject jsonObject)", "full_signature": "private DataContext createMongoDbDataContext(JSONObject jsonObject)", "class_method_signature": "JDOMetaContext.createMongoDbDataContext(JSONObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "createCouchDbDataContext", "parameters": "(JSONObject jsonObject)", "modifiers": "private", "return": "DataContext", "signature": "DataContext createCouchDbDataContext(JSONObject jsonObject)", "full_signature": "private DataContext createCouchDbDataContext(JSONObject jsonObject)", "class_method_signature": "JDOMetaContext.createCouchDbDataContext(JSONObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "createCassandraDataContext", "parameters": "(JSONObject jsonObject)", "modifiers": "private", "return": "DataContext", "signature": "DataContext createCassandraDataContext(JSONObject jsonObject)", "full_signature": "private DataContext createCassandraDataContext(JSONObject jsonObject)", "class_method_signature": "JDOMetaContext.createCassandraDataContext(JSONObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "addMetaModelDataSource", "parameters": "(String driverName, String connectionString, String name)", "modifiers": "@Override public", "return": "MetaDataSource", "signature": "MetaDataSource addMetaModelDataSource(String driverName, String connectionString, String name)", "full_signature": "@Override public MetaDataSource addMetaModelDataSource(String driverName, String connectionString, String name)", "class_method_signature": "JDOMetaContext.addMetaModelDataSource(String driverName, String connectionString, String name)", "testcase": false, "constructor": false}, {"identifier": "dropJdbcDataSource", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void dropJdbcDataSource(String name)", "full_signature": "@Override public void dropJdbcDataSource(String name)", "class_method_signature": "JDOMetaContext.dropJdbcDataSource(String name)", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(Column rawColumn, MTable mTable)", "modifiers": "private", "return": "void", "signature": "void addColumn(Column rawColumn, MTable mTable)", "full_signature": "private void addColumn(Column rawColumn, MTable mTable)", "class_method_signature": "JDOMetaContext.addColumn(Column rawColumn, MTable mTable)", "testcase": false, "constructor": false}, {"identifier": "getRawTableColumns", "parameters": "(Table rawTable)", "modifiers": "private", "return": "Column[]", "signature": "Column[] getRawTableColumns(Table rawTable)", "full_signature": "private Column[] getRawTableColumns(Table rawTable)", "class_method_signature": "JDOMetaContext.getRawTableColumns(Table rawTable)", "testcase": false, "constructor": false}, {"identifier": "addColumnsOfTable", "parameters": "(Table rawTable, MTable mTable)", "modifiers": "private", "return": "void", "signature": "void addColumnsOfTable(Table rawTable, MTable mTable)", "full_signature": "private void addColumnsOfTable(Table rawTable, MTable mTable)", "class_method_signature": "JDOMetaContext.addColumnsOfTable(Table rawTable, MTable mTable)", "testcase": false, "constructor": false}, {"identifier": "addTablesOfSchema", "parameters": "(Schema rawSchema, MSchema mSchema, UpdateLogger upLog)", "modifiers": "private", "return": "void", "signature": "void addTablesOfSchema(Schema rawSchema, MSchema mSchema, UpdateLogger upLog)", "full_signature": "private void addTablesOfSchema(Schema rawSchema, MSchema mSchema, UpdateLogger upLog)", "class_method_signature": "JDOMetaContext.addTablesOfSchema(Schema rawSchema, MSchema mSchema, UpdateLogger upLog)", "testcase": false, "constructor": false}, {"identifier": "addDataSourceInternal", "parameters": "(DataContext dc, MDataSource mDataSource)", "modifiers": "private", "return": "void", "signature": "void addDataSourceInternal(DataContext dc, MDataSource mDataSource)", "full_signature": "private void addDataSourceInternal(DataContext dc, MDataSource mDataSource)", "class_method_signature": "JDOMetaContext.addDataSourceInternal(DataContext dc, MDataSource mDataSource)", "testcase": false, "constructor": false}, {"identifier": "updateColumnsOfTable", "parameters": "(Table rawTable, MTable mTable)", "modifiers": "private", "return": "void", "signature": "void updateColumnsOfTable(Table rawTable, MTable mTable)", "full_signature": "private void updateColumnsOfTable(Table rawTable, MTable mTable)", "class_method_signature": "JDOMetaContext.updateColumnsOfTable(Table rawTable, MTable mTable)", "testcase": false, "constructor": false}, {"identifier": "updateTablesOfSchema", "parameters": "(Schema rawSchema, MSchema mSchema, final String tableRegex)", "modifiers": "private", "return": "void", "signature": "void updateTablesOfSchema(Schema rawSchema, MSchema mSchema, final String tableRegex)", "full_signature": "private void updateTablesOfSchema(Schema rawSchema, MSchema mSchema, final String tableRegex)", "class_method_signature": "JDOMetaContext.updateTablesOfSchema(Schema rawSchema, MSchema mSchema, final String tableRegex)", "testcase": false, "constructor": false}, {"identifier": "updateJdbcDataSourceInternal", "parameters": "(DataContext dc, MDataSource mDataSource,\n                                              final String schemaRegex, final String tableRegex)", "modifiers": "private", "return": "void", "signature": "void updateJdbcDataSourceInternal(DataContext dc, MDataSource mDataSource,\n                                              final String schemaRegex, final String tableRegex)", "full_signature": "private void updateJdbcDataSourceInternal(DataContext dc, MDataSource mDataSource,\n                                              final String schemaRegex, final String tableRegex)", "class_method_signature": "JDOMetaContext.updateJdbcDataSourceInternal(DataContext dc, MDataSource mDataSource,\n                                              final String schemaRegex, final String tableRegex)", "testcase": false, "constructor": false}, {"identifier": "updateJdbcDataSource", "parameters": "(String dataSourceName, final String schemaRegex, final String tableRegex)", "modifiers": "@Override public", "return": "MetaDataSource", "signature": "MetaDataSource updateJdbcDataSource(String dataSourceName, final String schemaRegex, final String tableRegex)", "full_signature": "@Override public MetaDataSource updateJdbcDataSource(String dataSourceName, final String schemaRegex, final String tableRegex)", "class_method_signature": "JDOMetaContext.updateJdbcDataSource(String dataSourceName, final String schemaRegex, final String tableRegex)", "testcase": false, "constructor": false}, {"identifier": "commentOnDataSource", "parameters": "(String comment, String name)", "modifiers": "@Override public", "return": "void", "signature": "void commentOnDataSource(String comment, String name)", "full_signature": "@Override public void commentOnDataSource(String comment, String name)", "class_method_signature": "JDOMetaContext.commentOnDataSource(String comment, String name)", "testcase": false, "constructor": false}, {"identifier": "getDataSources", "parameters": "()", "modifiers": "@Override public", "return": "Collection<MetaDataSource>", "signature": "Collection<MetaDataSource> getDataSources()", "full_signature": "@Override public Collection<MetaDataSource> getDataSources()", "class_method_signature": "JDOMetaContext.getDataSources()", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "(String dataSourceName, String schemaRegex, String tableRegex, String colmnRegex)", "modifiers": "@Override public", "return": "Collection<ResultOfGetColumns>", "signature": "Collection<ResultOfGetColumns> getColumns(String dataSourceName, String schemaRegex, String tableRegex, String colmnRegex)", "full_signature": "@Override public Collection<ResultOfGetColumns> getColumns(String dataSourceName, String schemaRegex, String tableRegex, String colmnRegex)", "class_method_signature": "JDOMetaContext.getColumns(String dataSourceName, String schemaRegex, String tableRegex, String colmnRegex)", "testcase": false, "constructor": false}, {"identifier": "getSchemaByQualifiedName", "parameters": "(String dataSourceName, String schemaName)", "modifiers": "", "return": "MetaSchema", "signature": "MetaSchema getSchemaByQualifiedName(String dataSourceName, String schemaName)", "full_signature": " MetaSchema getSchemaByQualifiedName(String dataSourceName, String schemaName)", "class_method_signature": "JDOMetaContext.getSchemaByQualifiedName(String dataSourceName, String schemaName)", "testcase": false, "constructor": false}, {"identifier": "commentOnSchema", "parameters": "(String comment, String dataSourceName, String schemaName)", "modifiers": "@Override public", "return": "void", "signature": "void commentOnSchema(String comment, String dataSourceName, String schemaName)", "full_signature": "@Override public void commentOnSchema(String comment, String dataSourceName, String schemaName)", "class_method_signature": "JDOMetaContext.commentOnSchema(String comment, String dataSourceName, String schemaName)", "testcase": false, "constructor": false}, {"identifier": "getTableByQualifiedName", "parameters": "(String dataSourceName, String schemaName, String tableName)", "modifiers": "", "return": "MetaTable", "signature": "MetaTable getTableByQualifiedName(String dataSourceName, String schemaName, String tableName)", "full_signature": " MetaTable getTableByQualifiedName(String dataSourceName, String schemaName, String tableName)", "class_method_signature": "JDOMetaContext.getTableByQualifiedName(String dataSourceName, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "commentOnTable", "parameters": "(String comment, String dataSourceName, String schemaName, String tableName)", "modifiers": "@Override public", "return": "void", "signature": "void commentOnTable(String comment, String dataSourceName, String schemaName, String tableName)", "full_signature": "@Override public void commentOnTable(String comment, String dataSourceName, String schemaName, String tableName)", "class_method_signature": "JDOMetaContext.commentOnTable(String comment, String dataSourceName, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getColumnByQualifiedName", "parameters": "(String dataSourceName, String schemaName, String tableName, String columnName)", "modifiers": "", "return": "MetaColumn", "signature": "MetaColumn getColumnByQualifiedName(String dataSourceName, String schemaName, String tableName, String columnName)", "full_signature": " MetaColumn getColumnByQualifiedName(String dataSourceName, String schemaName, String tableName, String columnName)", "class_method_signature": "JDOMetaContext.getColumnByQualifiedName(String dataSourceName, String schemaName, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "commentOnColumn", "parameters": "(String comment, String dataSourceName, String schemaName, String tableName, String columnName)", "modifiers": "@Override public", "return": "void", "signature": "void commentOnColumn(String comment, String dataSourceName, String schemaName, String tableName, String columnName)", "full_signature": "@Override public void commentOnColumn(String comment, String dataSourceName, String schemaName, String tableName, String columnName)", "class_method_signature": "JDOMetaContext.commentOnColumn(String comment, String dataSourceName, String schemaName, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "setDataCategoryOn", "parameters": "(String category, String dataSourceName, String schemaName, String tableName, String columnName)", "modifiers": "@Override public", "return": "void", "signature": "void setDataCategoryOn(String category, String dataSourceName, String schemaName, String tableName, String columnName)", "full_signature": "@Override public void setDataCategoryOn(String category, String dataSourceName, String schemaName, String tableName, String columnName)", "class_method_signature": "JDOMetaContext.setDataCategoryOn(String category, String dataSourceName, String schemaName, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "createRole", "parameters": "(String name)", "modifiers": "@Override public", "return": "MetaRole", "signature": "MetaRole createRole(String name)", "full_signature": "@Override public MetaRole createRole(String name)", "class_method_signature": "JDOMetaContext.createRole(String name)", "testcase": false, "constructor": false}, {"identifier": "dropRoleByName", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void dropRoleByName(String name)", "full_signature": "@Override public void dropRoleByName(String name)", "class_method_signature": "JDOMetaContext.dropRoleByName(String name)", "testcase": false, "constructor": false}, {"identifier": "addSystemPrivileges", "parameters": "(List<SystemPrivilege> sysPrivs, List<String> userNames)", "modifiers": "@Override public", "return": "void", "signature": "void addSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "full_signature": "@Override public void addSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "class_method_signature": "JDOMetaContext.addSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "testcase": false, "constructor": false}, {"identifier": "removeSystemPrivileges", "parameters": "(List<SystemPrivilege> sysPrivs, List<String> userNames)", "modifiers": "@Override public", "return": "void", "signature": "void removeSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "full_signature": "@Override public void removeSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "class_method_signature": "JDOMetaContext.removeSystemPrivileges(List<SystemPrivilege> sysPrivs, List<String> userNames)", "testcase": false, "constructor": false}, {"identifier": "getSchemaPrivilege", "parameters": "(String[] schemaName, String userName)", "modifiers": "@Override public", "return": "MetaSchemaPrivilege", "signature": "MetaSchemaPrivilege getSchemaPrivilege(String[] schemaName, String userName)", "full_signature": "@Override public MetaSchemaPrivilege getSchemaPrivilege(String[] schemaName, String userName)", "class_method_signature": "JDOMetaContext.getSchemaPrivilege(String[] schemaName, String userName)", "testcase": false, "constructor": false}, {"identifier": "getSchemaPrivilegesByUser", "parameters": "(String userName)", "modifiers": "@Override public", "return": "Collection<MetaSchemaPrivilege>", "signature": "Collection<MetaSchemaPrivilege> getSchemaPrivilegesByUser(String userName)", "full_signature": "@Override public Collection<MetaSchemaPrivilege> getSchemaPrivilegesByUser(String userName)", "class_method_signature": "JDOMetaContext.getSchemaPrivilegesByUser(String userName)", "testcase": false, "constructor": false}, {"identifier": "addObjectPrivileges", "parameters": "(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "modifiers": "@Override public", "return": "void", "signature": "void addObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "full_signature": "@Override public void addObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "class_method_signature": "JDOMetaContext.addObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "testcase": false, "constructor": false}, {"identifier": "removeObjectPrivileges", "parameters": "(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "modifiers": "@Override public", "return": "void", "signature": "void removeObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "full_signature": "@Override public void removeObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "class_method_signature": "JDOMetaContext.removeObjectPrivileges(List<ObjectPrivilege> objPrivs, String[] schemaName, List<String> userNames)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDOMetaContext.close()", "testcase": false, "constructor": false}], "file": "octopus-meta-jdo/src/main/java/kr/co/bitnine/octopus/meta/jdo/JDOMetaContext.java"}, "focal_method": {"identifier": "getDataSource", "parameters": "(String name)", "modifiers": "@Override public", "return": "MetaDataSource", "body": "@Override\n    public MetaDataSource getDataSource(String name) throws MetaException {\n        return getMDataSource(name, false);\n    }", "signature": "MetaDataSource getDataSource(String name)", "full_signature": "@Override public MetaDataSource getDataSource(String name)", "class_method_signature": "JDOMetaContext.getDataSource(String name)", "testcase": false, "constructor": false, "invocations": ["getMDataSource"]}, "repository": {"repo_id": 33297716, "url": "https://github.com/bitnine-oss/octopus", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 13, "size": 2216, "license": "licensed"}}