{"test_class": {"identifier": "TestDatabusRelayMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Logger LOG = Logger.getLogger(TestDatabusRelayMain.class);", "modifier": "public final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDatabusRelayMain.class)", "var_name": "LOG"}, {"original_string": "public static final String SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\";", "modifier": "public static final", "type": "String", "declarator": "SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\"", "var_name": "SCHEMA_REGISTRY_DIR"}], "file": "databus2-relay/databus2-relay-impl/src/test/java/com/linkedin/databus2/relay/TestDatabusRelayMain.java"}, "test_case": {"identifier": "testRelayChainingBasic", "parameters": "()", "modifiers": "@Test /** * Concurrent consumption of chained relay by client and by chained relay from regular relay */ public", "return": "void", "body": "@Test\n\t/**\n\t * Concurrent consumption of chained relay by client and by chained relay from regular relay\n\t */\n\tpublic void testRelayChainingBasic() throws InterruptedException, InvalidConfigException\n\t{\n\t\tDatabusRelayTestUtil.RelayRunner r1=null,r2=null;\n        final Logger log = Logger.getLogger(\"TestDatabusRelayMain.testRelayChainingBasic\");\n        Logger.getRootLogger().setLevel(Level.INFO);\n        log.setLevel(Level.DEBUG);\n\n        log.debug(\"available processors:\" + Runtime.getRuntime().availableProcessors());\n        log.debug(\"available memory:\" + Runtime.getRuntime().freeMemory());\n        log.debug(\"total memory:\" + Runtime.getRuntime().totalMemory());\n\n\t\tClientRunner cr = null;\n\t\ttry\n\t\t{\n\t\t\tString[][] srcNames =\n\t\t\t{\n\t            { \"com.linkedin.events.example.fake.FakeSchema\",\n\t              \"com.linkedin.events.example.person.Person\" }, };\n\n\t\t\t// create main relay with random generator\n\t\t\tPhysicalSourceConfig[] srcConfigs = new PhysicalSourceConfig[srcNames.length];\n\t\t\tint i = 0;\n\t\t\tint eventRatePerSec = 20;\n\t\t\tfor (String[] srcs : srcNames)\n\t\t\t{\n\n\t\t\t\tPhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder(\n\t\t\t\t\t\t(short) (i + 1), DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"mock\",\n\t\t\t\t\t\t100, eventRatePerSec, srcs);\n\t\t\t\tsrcConfigs[i++] = src1;\n\t\t\t}\n            int relayPort = Utils.getAvailablePort(11994);\n\t\t\tDatabusRelayMain relay1 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1002, relayPort,\n\t\t\t\t\t10 * 1024 * 1024, srcConfigs, SCHEMA_REGISTRY_DIR);\n\t\t\tAssert.assertNotNull(relay1);\n\t\t\tr1 = new DatabusRelayTestUtil.RelayRunner(relay1);\n\n\t\t\tlog.info(\"create chained relay\");\n\t\t\tPhysicalSourceConfig[] chainedSrcConfigs = new PhysicalSourceConfig[srcNames.length];\n\t\t\tint j = 0;\n\t\t\tfor (String[] srcs : srcNames)\n\t\t\t{\n\n\t\t\t\tPhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder(\n\t\t\t\t\t\t(short) (j + 1), DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]),\n\t\t\t\t\t\t\"localhost:\" + relayPort, eventRatePerSec, 50, srcs);\n\t\t\t\tchainedSrcConfigs[j++] = src1;\n\t\t\t}\n\t\t\tint chainedRelayPort = relayPort + 1000;\n\t\t\tDatabusRelayMain relay2 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1003,\n\t\t\t\t\tchainedRelayPort, 1 * 1024 * 1024, chainedSrcConfigs, SCHEMA_REGISTRY_DIR);\n\t\t\tAssert.assertNotNull(relay2);\n\t\t\tr2 = new DatabusRelayTestUtil.RelayRunner(relay2);\n\n\t\t\tresetSCN(relay2);\n\n\t\t\tlog.info(\"now create client\");\n\t\t\tString srcSubscriptionString = TestUtil.join(srcNames[0], \",\");\n\t\t\tString serverName = \"localhost:\" + chainedRelayPort;\n\t\t\tfinal CountingConsumer countingConsumer = new CountingConsumer();\n\t\t\t//Set maxSize to 100K, maxEventSize to 50K\n\t\t\tDatabusSourcesConnection clientConn = RelayEventProducer\n\t\t\t\t\t.createDatabusSourcesConnection(\"testProducer\", serverName,\n\t\t\t\t\t\t\tsrcSubscriptionString, countingConsumer,\n\t\t\t\t\t\t\t100 * 1024 , 10000, 30 * 1000, 100, 30 * 1000,\n\t\t\t\t\t\t\t1, true);\n\t\t\tcr = new ClientRunner(clientConn);\n\n\t\t\tlog.info(\"async starts for all components\");\n\t\t\tr1.start();\n\t\t\tassertRelayRunning(r1.getRelay(), 5000, log);\n\t\t\tlog.info(\"start chained relay\");\n\t\t\tr2.start();\n            assertRelayRunning(r2.getRelay(), 5000, log);\n\n\t\t\tThread.sleep(5*1000);\n\n\t\t\tr1.pause();\n\n      // wait for r2 to catchup with r1\n      final DbusEventsTotalStats stats = relay1\n          .getInboundEventStatisticsCollector().getTotalStats();\n      final DbusEventsTotalStats stats2 = relay2\n          .getInboundEventStatisticsCollector().getTotalStats();\n      TestUtil.assertWithBackoff(new ConditionCheck()\n      {\n\n        @Override\n        public boolean check()\n        {\n          log.debug(\"stats2.getNumSysEvents()=\" + stats2.getNumSysEvents());\n          return stats2.getNumSysEvents() == stats.getNumSysEvents();\n        }\n      }, \"wait for chained relay to catchup\", 60000, log);\n\n      log.info(\"start the client\");\n      cr.start();\n\n      // wait until client got all events or for maxTimeout;\n      TestUtil.assertWithBackoff(new ConditionCheck()\n      {\n\n        @Override\n        public boolean check()\n        {\n          log.debug(\"countingConsumer.getNumWindows()=\"\n              + countingConsumer.getNumWindows());\n          return countingConsumer.getNumWindows() == stats.getNumSysEvents();\n        }\n      }, \"wait until client got all events\", 10000, log);\n\n\t\t\tLOG.info(\"Client stats=\" + countingConsumer);\n\t\t\tLOG.info(\"Event windows generated=\"\n\t\t\t\t\t+ stats.getNumSysEvents());\n\t\t\tLOG.info(\"numDataEvents=\" + stats.getNumDataEvents()\n\t\t\t\t\t+ \" numWindows=\" + stats.getNumSysEvents() + \" size=\"\n\t\t\t\t\t+ stats.getSizeDataEvents());\n\t\t\tLOG.info(\"numDataEvents2=\" + stats2.getNumDataEvents()\n\t\t\t\t\t+ \" numWindows2=\" + stats2.getNumSysEvents() + \" size2=\"\n\t\t\t\t\t+ stats2.getSizeDataEvents());\n\n\t\t\tAssert.assertEquals(stats.getNumDataEvents(), countingConsumer\n\t\t\t\t\t.getNumDataEvents());\n\t\t\tAssert.assertEquals(countingConsumer.getNumSources(), 2);\n\t\t\tAssert.assertEquals(stats.getNumSysEvents(), countingConsumer\n\t\t\t\t\t.getNumWindows());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tcleanup ( new DatabusRelayTestUtil.RelayRunner[] {r1,r2} , cr);\n\t\t}\n\n\t}", "signature": "void testRelayChainingBasic()", "full_signature": "@Test /** * Concurrent consumption of chained relay by client and by chained relay from regular relay */ public void testRelayChainingBasic()", "class_method_signature": "TestDatabusRelayMain.testRelayChainingBasic()", "testcase": true, "constructor": false, "invocations": ["getLogger", "setLevel", "getRootLogger", "setLevel", "debug", "availableProcessors", "getRuntime", "debug", "freeMemory", "getRuntime", "debug", "totalMemory", "getRuntime", "createPhysicalConfigBuilder", "getPhysicalSrcName", "getAvailablePort", "createDatabusRelayWithSchemaReg", "assertNotNull", "info", "createPhysicalConfigBuilder", "getPhysicalSrcName", "createDatabusRelayWithSchemaReg", "assertNotNull", "resetSCN", "info", "join", "createDatabusSourcesConnection", "info", "start", "assertRelayRunning", "getRelay", "info", "start", "assertRelayRunning", "getRelay", "sleep", "pause", "getTotalStats", "getInboundEventStatisticsCollector", "getTotalStats", "getInboundEventStatisticsCollector", "assertWithBackoff", "debug", "getNumSysEvents", "getNumSysEvents", "getNumSysEvents", "info", "start", "assertWithBackoff", "debug", "getNumWindows", "getNumWindows", "getNumSysEvents", "info", "info", "getNumSysEvents", "info", "getNumDataEvents", "getNumSysEvents", "getSizeDataEvents", "info", "getNumDataEvents", "getNumSysEvents", "getSizeDataEvents", "assertEquals", "getNumDataEvents", "getNumDataEvents", "assertEquals", "getNumSources", "assertEquals", "getNumSysEvents", "getNumWindows", "cleanup"]}, "focal_class": {"identifier": "DatabusRelayMain", "superclass": "extends HttpRelay", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName())", "var_name": "LOG"}, {"original_string": "public static final String DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\";", "modifier": "public static final", "type": "String", "declarator": "DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\"", "var_name": "DB_RELAY_CONFIG_FILE_OPT_NAME"}, {"original_string": "private final RelayEventProducersRegistry _producersRegistry = RelayEventProducersRegistry.getInstance();", "modifier": "private final", "type": "RelayEventProducersRegistry", "declarator": "_producersRegistry = RelayEventProducersRegistry.getInstance()", "var_name": "_producersRegistry"}, {"original_string": "MultiServerSequenceNumberHandler _maxScnReaderWriters;", "modifier": "", "type": "MultiServerSequenceNumberHandler", "declarator": "_maxScnReaderWriters", "var_name": "_maxScnReaderWriters"}, {"original_string": "protected Map<PhysicalPartition, EventProducer> _producers;", "modifier": "protected", "type": "Map<PhysicalPartition, EventProducer>", "declarator": "_producers", "var_name": "_producers"}, {"original_string": "Map<PhysicalPartition, MonitoringEventProducer> _monitoringProducers;", "modifier": "", "type": "Map<PhysicalPartition, MonitoringEventProducer>", "declarator": "_monitoringProducers", "var_name": "_monitoringProducers"}, {"original_string": "ControlSourceEventsRequestProcessor _csEventRequestProcessor;", "modifier": "", "type": "ControlSourceEventsRequestProcessor", "declarator": "_csEventRequestProcessor", "var_name": "_csEventRequestProcessor"}, {"original_string": "private boolean _dbPullerStart = false;", "modifier": "private", "type": "boolean", "declarator": "_dbPullerStart = false", "var_name": "_dbPullerStart"}], "methods": [{"identifier": "DatabusRelayMain", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatabusRelayMain()", "full_signature": "public  DatabusRelayMain()", "class_method_signature": "DatabusRelayMain.DatabusRelayMain()", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "setDbPullerStart", "parameters": "(boolean s)", "modifiers": "public", "return": "void", "signature": "void setDbPullerStart(boolean s)", "full_signature": "public void setDbPullerStart(boolean s)", "class_method_signature": "DatabusRelayMain.setDbPullerStart(boolean s)", "testcase": false, "constructor": false}, {"identifier": "getDbPullerStart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDbPullerStart()", "full_signature": "public boolean getDbPullerStart()", "class_method_signature": "DatabusRelayMain.getDbPullerStart()", "testcase": false, "constructor": false}, {"identifier": "removeOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.removeOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "addOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void addOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void addOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.addOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "initProducers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initProducers()", "full_signature": "public void initProducers()", "class_method_signature": "DatabusRelayMain.initProducers()", "testcase": false, "constructor": false}, {"identifier": "getMaxSCNReaderWriter", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "public", "return": "MaxSCNReaderWriter", "signature": "MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "full_signature": "public MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DatabusRelayMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "DatabusRelayMain.doStart()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resume()", "full_signature": "@Override public void resume()", "class_method_signature": "DatabusRelayMain.resume()", "testcase": false, "constructor": false}, {"identifier": "doShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doShutdown()", "full_signature": "@Override protected void doShutdown()", "class_method_signature": "DatabusRelayMain.doShutdown()", "testcase": false, "constructor": false}, {"identifier": "getProducers", "parameters": "()", "modifiers": "public", "return": "EventProducer[]", "signature": "EventProducer[] getProducers()", "full_signature": "public EventProducer[] getProducers()", "class_method_signature": "DatabusRelayMain.getProducers()", "testcase": false, "constructor": false}, {"identifier": "getMonitoringProducers", "parameters": "()", "modifiers": "public", "return": "MonitoringEventProducer[]", "signature": "MonitoringEventProducer[] getMonitoringProducers()", "full_signature": "public MonitoringEventProducer[] getMonitoringProducers()", "class_method_signature": "DatabusRelayMain.getMonitoringProducers()", "testcase": false, "constructor": false}, {"identifier": "awaitShutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void awaitShutdown()", "full_signature": "@Override public void awaitShutdown()", "class_method_signature": "DatabusRelayMain.awaitShutdown()", "testcase": false, "constructor": false}], "file": "databus2-relay/databus2-relay-impl/src/main/java/com/linkedin/databus2/relay/DatabusRelayMain.java"}, "focal_method": {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void pause() {\n\t\tfor (Entry<PhysicalPartition, EventProducer> entry : _producers\n\t\t\t\t.entrySet()) {\n\t\t\tEventProducer producer = entry.getValue();\n\n\t\t\tif (null != producer) {\n\t\t\t\tif (producer.isRunning()) {\n\t\t\t\t\tproducer.pause();\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  pause sent\");\n\t\t\t\t} else if (producer.isPaused()) {\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  already paused\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "isRunning", "pause", "info", "getName", "isPaused", "info", "getName"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}