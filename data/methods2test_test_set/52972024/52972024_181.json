{"test_class": {"identifier": "UnzipFeatureActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IStrategyContainer container = new StrategyContainer();", "modifier": "private", "type": "IStrategyContainer", "declarator": "container = new StrategyContainer()", "var_name": "container"}], "file": "CoreFeatures/FeatureManagement/UnzipFeatureActor/src/test/java/info/smart_tools/smartactors/feature_management/unzip_feature_actor/UnzipFeatureActorTest.java"}, "test_case": {"identifier": "checkUnzipMethod", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void checkUnzipMethod()\n            throws Exception {\n        UnzipFeatureActor actor = new UnzipFeatureActor();\n        UnzipFeatureWrapper wrapper = mock(UnzipFeatureWrapper.class);\n        IFeature feature = mock(IFeature.class);\n        when(feature.getName()).thenReturn(\"test-feature\");\n        when(feature.getDependencies()).thenReturn(null);\n        String fileName = \"target/test-classes/test-feature-VERSION-archive.zip\";\n        String directory = \"target/test-classes/test-feature-VERSION\";\n        when(feature.getFeatureLocation()).thenReturn(\n                new Path(fileName)\n        );\n        when(wrapper.getFeature()).thenReturn(feature);\n        actor.unzip(wrapper);\n        verify(feature, times(1)).setDependencies(\n                new HashSet<String>(){{add(\"first-test-feature\"); add(\"second-test-feature\");}}\n        );\n        verify(feature, times(1)).setFeatureLocation(new Path(directory));\n    }", "signature": "void checkUnzipMethod()", "full_signature": "@Ignore @Test public void checkUnzipMethod()", "class_method_signature": "UnzipFeatureActorTest.checkUnzipMethod()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getName", "thenReturn", "when", "getDependencies", "thenReturn", "when", "getFeatureLocation", "thenReturn", "when", "getFeature", "unzip", "setDependencies", "verify", "times", "add", "add", "setFeatureLocation", "verify", "times"]}, "focal_class": {"identifier": "UnzipFeatureActor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IFieldName dependenciesFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "dependenciesFieldName", "var_name": "dependenciesFieldName"}], "methods": [{"identifier": "UnzipFeatureActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " UnzipFeatureActor()", "full_signature": "public  UnzipFeatureActor()", "class_method_signature": "UnzipFeatureActor.UnzipFeatureActor()", "testcase": false, "constructor": true}, {"identifier": "unzip", "parameters": "(final UnzipFeatureWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void unzip(final UnzipFeatureWrapper wrapper)", "full_signature": "public void unzip(final UnzipFeatureWrapper wrapper)", "class_method_signature": "UnzipFeatureActor.unzip(final UnzipFeatureWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "unzip0", "parameters": "(final File f)", "modifiers": "private", "return": "File", "signature": "File unzip0(final File f)", "full_signature": "private File unzip0(final File f)", "class_method_signature": "UnzipFeatureActor.unzip0(final File f)", "testcase": false, "constructor": false}, {"identifier": "updateFeature", "parameters": "(final File f, final IFeature feature)", "modifiers": "private", "return": "void", "signature": "void updateFeature(final File f, final IFeature feature)", "full_signature": "private void updateFeature(final File f, final IFeature feature)", "class_method_signature": "UnzipFeatureActor.updateFeature(final File f, final IFeature feature)", "testcase": false, "constructor": false}], "file": "CoreFeatures/FeatureManagement/UnzipFeatureActor/src/main/java/info/smart_tools/smartactors/feature_management/unzip_feature_actor/UnzipFeatureActor.java"}, "focal_method": {"identifier": "unzip", "parameters": "(final UnzipFeatureWrapper wrapper)", "modifiers": "public", "return": "void", "body": "public void unzip(final UnzipFeatureWrapper wrapper)\n            throws UnzipFeatureException {\n        IFeature feature;\n        try {\n            feature = wrapper.getFeature();\n        } catch (ReadValueException e) {\n            throw new UnzipFeatureException(\"Feature should not be null.\");\n        }\n        try {\n            if (null == feature.getDependencies() && feature.getFeatureLocation().toString().endsWith(\".zip\")) {\n                System.out.println(\"[INFO] Start unzipping feature - '\" + feature.getName() + \"'.\");\n                File f = new File(feature.getFeatureLocation().toString());\n                File configFile = unzip0(f);\n                updateFeature(configFile, feature);\n                System.out.println(\"[OK] -------------- Feature '\" + feature.getName() + \"' has been unzipped successful.\");\n            }\n        } catch (Throwable e) {\n            feature.setFailed(true);\n            System.out.println(\"[FAILED] ---------- Feature '\" + feature.getName() + \"' unzipping has been aborted with exception:\");\n            System.out.println(e);\n        }\n    }", "signature": "void unzip(final UnzipFeatureWrapper wrapper)", "full_signature": "public void unzip(final UnzipFeatureWrapper wrapper)", "class_method_signature": "UnzipFeatureActor.unzip(final UnzipFeatureWrapper wrapper)", "testcase": false, "constructor": false, "invocations": ["getFeature", "getDependencies", "endsWith", "toString", "getFeatureLocation", "println", "getName", "toString", "getFeatureLocation", "unzip0", "updateFeature", "println", "getName", "setFailed", "println", "getName", "println"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}