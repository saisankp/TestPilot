{"test_class": {"identifier": "ResponseDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Element responseDescriptorNode;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "responseDescriptorNode", "var_name": "responseDescriptorNode"}, {"original_string": "@Mock\n    private TemplateGeneratorInitializer templateGeneratorInitializer;", "modifier": "@Mock\n    private", "type": "TemplateGeneratorInitializer", "declarator": "templateGeneratorInitializer", "var_name": "templateGeneratorInitializer"}, {"original_string": "@Mock\n    private Element templateElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "templateElement", "var_name": "templateElement"}, {"original_string": "@Mock\n    private Element rootElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "rootElement", "var_name": "rootElement"}, {"original_string": "@Mock\n    private TemplateFileReader templateFileReader;", "modifier": "@Mock\n    private", "type": "TemplateFileReader", "declarator": "templateFileReader", "var_name": "templateFileReader"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Mock\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Mock\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}, {"original_string": "@Mock\n    private NodeParser<Set<ResponseFormatterDescriptor>> templateDescriptorParser;", "modifier": "@Mock\n    private", "type": "NodeParser<Set<ResponseFormatterDescriptor>>", "declarator": "templateDescriptorParser", "var_name": "templateDescriptorParser"}, {"original_string": "@Mock\n    private TemplateGenerator templateGenerator;", "modifier": "@Mock\n    private", "type": "TemplateGenerator", "declarator": "templateGenerator", "var_name": "templateGenerator"}, {"original_string": "@Mock\n    private ResponseFormatter templateFormatter;", "modifier": "@Mock\n    private", "type": "ResponseFormatter", "declarator": "templateFormatter", "var_name": "templateFormatter"}, {"original_string": "private Set<ResponseFormatterDescriptor> templateFormatterSet;", "modifier": "private", "type": "Set<ResponseFormatterDescriptor>", "declarator": "templateFormatterSet", "var_name": "templateFormatterSet"}, {"original_string": "private final ResponseFormatterDescriptor templateFormatterDescriptor = new ResponseFormatterDescriptor(templateFormatter, new ParameterList());", "modifier": "private final", "type": "ResponseFormatterDescriptor", "declarator": "templateFormatterDescriptor = new ResponseFormatterDescriptor(templateFormatter, new ParameterList())", "var_name": "templateFormatterDescriptor"}, {"original_string": "@InjectMocks\n    private ResponseDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "ResponseDescriptorParser", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/ResponseDescriptorParserTest.java"}, "test_case": {"identifier": "testParseNodeShouldReturnResponseDescriptorTemplateFormatter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodeShouldReturnResponseDescriptorTemplateFormatter() {\n        //GIVEN in setUp\n        //WHEN\n        ResponseDescriptor actual = underTest.parseNode(responseDescriptorNode, document);\n        //THEN\n        assertTrue(actual.getResponseFormatters().contains(templateFormatterDescriptor));\n    }", "signature": "void testParseNodeShouldReturnResponseDescriptorTemplateFormatter()", "full_signature": "@Test public void testParseNodeShouldReturnResponseDescriptorTemplateFormatter()", "class_method_signature": "ResponseDescriptorParserTest.testParseNodeShouldReturnResponseDescriptorTemplateFormatter()", "testcase": true, "constructor": false, "invocations": ["parseNode", "assertTrue", "contains", "getResponseFormatters"]}, "focal_class": {"identifier": "ResponseDescriptorParser", "superclass": "", "interfaces": "implements NodeParser<ResponseDescriptor>", "fields": [{"original_string": "@Autowired\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Autowired\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Autowired\n    @Qualifier(\"templateDescriptorParser\")\n    private NodeParser<Set<ResponseFormatterDescriptor>> templateDescriptorParser;", "modifier": "@Autowired\n    @Qualifier(\"templateDescriptorParser\")\n    private", "type": "NodeParser<Set<ResponseFormatterDescriptor>>", "declarator": "templateDescriptorParser", "var_name": "templateDescriptorParser"}, {"original_string": "@Autowired\n    private TemplateFileReader templateFileReader;", "modifier": "@Autowired\n    private", "type": "TemplateFileReader", "declarator": "templateFileReader", "var_name": "templateFileReader"}, {"original_string": "@Autowired\n    private TemplateGeneratorInitializer templateGeneratorInitializer;", "modifier": "@Autowired\n    private", "type": "TemplateGeneratorInitializer", "declarator": "templateGeneratorInitializer", "var_name": "templateGeneratorInitializer"}, {"original_string": "@Autowired\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}], "methods": [{"identifier": "parseNode", "parameters": "(final Node responseDescriptorNode, final Document document)", "modifiers": "@Override public", "return": "ResponseDescriptor", "signature": "ResponseDescriptor parseNode(final Node responseDescriptorNode, final Document document)", "full_signature": "@Override public ResponseDescriptor parseNode(final Node responseDescriptorNode, final Document document)", "class_method_signature": "ResponseDescriptorParser.parseNode(final Node responseDescriptorNode, final Document document)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(final Element el, final Document document)", "modifiers": "private", "return": "ResponseDescriptorAttributes", "signature": "ResponseDescriptorAttributes getAttributes(final Element el, final Document document)", "full_signature": "private ResponseDescriptorAttributes getAttributes(final Element el, final Document document)", "class_method_signature": "ResponseDescriptorParser.getAttributes(final Element el, final Document document)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(final String templateName, final Document document)", "modifiers": "private", "return": "Template", "signature": "Template getTemplate(final String templateName, final Document document)", "full_signature": "private Template getTemplate(final String templateName, final Document document)", "class_method_signature": "ResponseDescriptorParser.getTemplate(final String templateName, final Document document)", "testcase": false, "constructor": false}, {"identifier": "initializeResource", "parameters": "(final TemplateType templateType, final String resource)", "modifiers": "private", "return": "byte[]", "signature": "byte[] initializeResource(final TemplateType templateType, final String resource)", "full_signature": "private byte[] initializeResource(final TemplateType templateType, final String resource)", "class_method_signature": "ResponseDescriptorParser.initializeResource(final TemplateType templateType, final String resource)", "testcase": false, "constructor": false}, {"identifier": "getTemplateFromTemplateGenerator", "parameters": "(final String resource)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getTemplateFromTemplateGenerator(final String resource)", "full_signature": "private byte[] getTemplateFromTemplateGenerator(final String resource)", "class_method_signature": "ResponseDescriptorParser.getTemplateFromTemplateGenerator(final String resource)", "testcase": false, "constructor": false}, {"identifier": "getTemplateType", "parameters": "(final String type)", "modifiers": "private", "return": "TemplateType", "signature": "TemplateType getTemplateType(final String type)", "full_signature": "private TemplateType getTemplateType(final String type)", "class_method_signature": "ResponseDescriptorParser.getTemplateType(final String type)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/ResponseDescriptorParser.java"}, "focal_method": {"identifier": "parseNode", "parameters": "(final Node responseDescriptorNode, final Document document)", "modifiers": "@Override public", "return": "ResponseDescriptor", "body": "@Override\n    public ResponseDescriptor parseNode(final Node responseDescriptorNode, final Document document) {\n        ResponseDescriptor responseDescriptor = null;\n        if (responseDescriptorNode != null) {\n            Element el = (Element) responseDescriptorNode;\n            ResponseDescriptorAttributes attributes = getAttributes(el, document);\n            Set<ResponseFormatterDescriptor> responseFormatters = templateDescriptorParser.parseNode(el, document);\n            responseDescriptor = new ResponseDescriptor(attributes, responseFormatters);\n        }\n        return responseDescriptor;\n    }", "signature": "ResponseDescriptor parseNode(final Node responseDescriptorNode, final Document document)", "full_signature": "@Override public ResponseDescriptor parseNode(final Node responseDescriptorNode, final Document document)", "class_method_signature": "ResponseDescriptorParser.parseNode(final Node responseDescriptorNode, final Document document)", "testcase": false, "constructor": false, "invocations": ["getAttributes", "parseNode"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}