{"test_class": {"identifier": "BsUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/bsdiff/BsUtilTest.java"}, "test_case": {"identifier": "lexicographicalCompareTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void lexicographicalCompareTest() throws IOException {\n    String s1 = \"this is a string\";\n    String s2 = \"that was a string\";\n    byte[] s1b = s1.getBytes(Charset.forName(\"US-ASCII\"));\n    byte[] s2b = s2.getBytes(Charset.forName(\"US-ASCII\"));\n    RandomAccessObject s1ro = new RandomAccessObject.RandomAccessByteArrayObject(s1b);\n    RandomAccessObject s2ro = new RandomAccessObject.RandomAccessByteArrayObject(s2b);\n\n    int r = BsUtil.lexicographicalCompare(s1ro, 0, s1b.length, s2ro, 0, s2b.length);\n    Assert.assertTrue(r > 0);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 5, s1b.length - 5, s2ro, 5, s2b.length - 5);\n    Assert.assertTrue(r < 0);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 7, s1b.length - 7, s2ro, 8, s2b.length - 7);\n    Assert.assertTrue(r < 0);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 7, s1b.length - 8, s2ro, 8, s2b.length - 8);\n    Assert.assertTrue(r < 0);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 0, 2, s2ro, 0, 2);\n    Assert.assertEquals(0, r);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 0, 1, s2ro, 0, 2);\n    Assert.assertTrue(r < 0);\n\n    r = BsUtil.lexicographicalCompare(s1ro, 0, 2, s2ro, 0, 1);\n    Assert.assertTrue(r > 0);\n  }", "signature": "void lexicographicalCompareTest()", "full_signature": "@Test public void lexicographicalCompareTest()", "class_method_signature": "BsUtilTest.lexicographicalCompareTest()", "testcase": true, "constructor": false, "invocations": ["getBytes", "forName", "getBytes", "forName", "lexicographicalCompare", "assertTrue", "lexicographicalCompare", "assertTrue", "lexicographicalCompare", "assertTrue", "lexicographicalCompare", "assertTrue", "lexicographicalCompare", "assertEquals", "lexicographicalCompare", "assertTrue", "lexicographicalCompare", "assertTrue"]}, "focal_class": {"identifier": "BsUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NEGATIVE_MASK = 1L << 63;", "modifier": "private static final", "type": "long", "declarator": "NEGATIVE_MASK = 1L << 63", "var_name": "NEGATIVE_MASK"}], "methods": [{"identifier": "writeFormattedLong", "parameters": "(final long value, OutputStream outputStream)", "modifiers": "static", "return": "void", "signature": "void writeFormattedLong(final long value, OutputStream outputStream)", "full_signature": "static void writeFormattedLong(final long value, OutputStream outputStream)", "class_method_signature": "BsUtil.writeFormattedLong(final long value, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "readFormattedLong", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "long", "signature": "long readFormattedLong(InputStream inputStream)", "full_signature": "static long readFormattedLong(InputStream inputStream)", "class_method_signature": "BsUtil.readFormattedLong(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "lexicographicalCompare", "parameters": "(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "modifiers": "static", "return": "int", "signature": "int lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "full_signature": "static int lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "class_method_signature": "BsUtil.lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/bsdiff/BsUtil.java"}, "focal_method": {"identifier": "lexicographicalCompare", "parameters": "(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "modifiers": "static", "return": "int", "body": "static int lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)\n      throws IOException {\n    int bytesLeft = Math.min(length1, length2);\n\n    data1.seek(start1);\n    data2.seek(start2);\n    while (bytesLeft-- > 0) {\n      final int i1 = data1.readUnsignedByte();\n      final int i2 = data2.readUnsignedByte();\n\n      if (i1 != i2) {\n        return i1 - i2;\n      }\n    }\n\n    return length1 - length2;\n  }", "signature": "int lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "full_signature": "static int lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "class_method_signature": "BsUtil.lexicographicalCompare(\n      final RandomAccessObject data1,\n      final int start1,\n      final int length1,\n      final RandomAccessObject data2,\n      final int start2,\n      final int length2)", "testcase": false, "constructor": false, "invocations": ["min", "seek", "seek", "readUnsignedByte", "readUnsignedByte"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}