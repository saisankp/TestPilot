{"test_class": {"identifier": "CrescentDefaultDocSearcherTest", "superclass": "extends CrescentTestCaseUtil", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/search/searcher/CrescentDefaultDocSearcherTest.java"}, "test_case": {"identifier": "search", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void search() throws IOException {\n\t\tSearchRequest searchRequest = new SearchRequest();\n\t\tsearchRequest.setKeyword(\"1\");\n\t\tsearchRequest.setCollectionName(\"sample\");\n\t\t\n\t\tCrescentSearchRequestWrapper csrw = new CrescentSearchRequestWrapper(searchRequest);\n\t\t\n\t\tSearchResult searchResult = crescentDocSearcher.search(csrw);\n\t\t\n\t\tAssert.assertTrue(searchResult.getResultList().size() > 0);\n\t}", "signature": "void search()", "full_signature": "@Test public void search()", "class_method_signature": "CrescentDefaultDocSearcherTest.search()", "testcase": true, "constructor": false, "invocations": ["setKeyword", "setCollectionName", "search", "assertTrue", "size", "getResultList"]}, "focal_class": {"identifier": "CrescentDefaultDocSearcher", "superclass": "", "interfaces": "implements CrescentDocSearcher", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(CrescentDefaultDocSearcher.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CrescentDefaultDocSearcher.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\t@Qualifier(\"crescentSearcherManager\")\n\tprivate CrescentSearcherManager crescentSearcherManager;", "modifier": "@Autowired\n\t@Qualifier(\"crescentSearcherManager\")\n\tprivate", "type": "CrescentSearcherManager", "declarator": "crescentSearcherManager", "var_name": "crescentSearcherManager"}], "methods": [{"identifier": "search", "parameters": "(CrescentSearchRequestWrapper csrw)", "modifiers": "@Override public", "return": "SearchResult", "signature": "SearchResult search(CrescentSearchRequestWrapper csrw)", "full_signature": "@Override public SearchResult search(CrescentSearchRequestWrapper csrw)", "class_method_signature": "CrescentDefaultDocSearcher.search(CrescentSearchRequestWrapper csrw)", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/search/searcher/CrescentDefaultDocSearcher.java"}, "focal_method": {"identifier": "search", "parameters": "(CrescentSearchRequestWrapper csrw)", "modifiers": "@Override public", "return": "SearchResult", "body": "@Override\n\tpublic SearchResult search(CrescentSearchRequestWrapper csrw) throws IOException {\n\t\t\n\t\tSearchResult searchResult = new SearchResult();\n\t\tint totalHitsCount = 0;\n\t\tString errorMessage = \"SUCCESS\";\n\t\tint errorCode = 0;\n\t\t\n\t\t//5page * 50\n\t\tint numOfHits = csrw.getDefaultHitsPage() * csrw.getHitsForPage();\n\t\tIndexSearcher indexSearcher = null;\n\t\tSearcherManager searcherManager = crescentSearcherManager.getSearcherManager(csrw.getCollectionName());\n\t\t\n\t\ttry {\n\t\t\tindexSearcher = searcherManager.acquire();\n\t\t\t\n\t\t\tQuery query = csrw.getQuery();\n\t\t\tFilter filter = csrw.getFilter();\n\t\t\tSort sort = csrw.getSort();\n\t\t\t\n\t\t\tlogger.debug(\"query : {}\" , query);\n\t\t\tlogger.debug(\"filter : {}\" , filter);\n\t\t\tlogger.debug(\"sort : {}\" , sort);\n\t\t\t\n\t\t\tlong startTime = System.currentTimeMillis();\n\t\t\tTopDocs topDocs = null;\n\t\t\t\n\t\t\tif(sort == null) {\n\t\t\t\ttopDocs = indexSearcher.search(query, filter, numOfHits);\n\t\t\t} else {\n\t\t\t\ttopDocs = indexSearcher.search(query, filter, numOfHits, sort);\n\t\t\t}\n\t\t\t\n\t\t\tlong endTime = System.currentTimeMillis();\n\t\t\t\n\t\t\t//\uc804\uccb4 \uac80\uc0c9 \uac74\uc218\n\t\t\ttotalHitsCount = topDocs.totalHits;\n\t\t\t\n\t\t\tLogInfo logInfo = new LogInfo();\n\t\t\tlogInfo.setCollectionName(csrw.getCollectionName());\n\t\t\tlogInfo.setElaspedTimeMil(endTime - startTime);\n\t\t\tlogInfo.setKeyword(csrw.getKeyword());\n\t\t\tlogInfo.setPageNum(csrw.getPageNum());\n\t\t\tlogInfo.setPcid(csrw.getPcId());\n\t\t\tlogInfo.setQuery(query);\n\t\t\tlogInfo.setSort(csrw.getSort());\n\t\t\tlogInfo.setTotalCount(totalHitsCount);\n\t\t\tlogInfo.setUserId(csrw.getUserId());\n\t\t\tlogInfo.setUserIp(csrw.getUserIp());\n\t\t\tlogInfo.setFilter(csrw.getFilter());\n\t\t\t\n\t\t\tCrescentLogger.logging(logInfo);\n\t\t\t\n\t\t\t\n\t\t\tlogger.debug(\"Total Hits Count : {} \", totalHitsCount);\n\t\t\t\n\t\t\tScoreDoc[] hits = topDocs.scoreDocs;\n\t\t\t\n\t\t\t//\ucd1d \uac80\uc0c9\uac74\uc218\uc640 \uc2e4\uc81c \ubcf4\uc5ec\uc904 document\uc758 offset (min ~ max)\ub97c \ube44\uad50\ud574\uc11c \uc791\uc740 \uac83\uc744 \uac00\uc838\uc634\n\t\t\tint endOffset = Math.min(totalHitsCount, csrw.getStartOffSet() + csrw.getHitsForPage());\n\t\t\t\n\t\t\tif(endOffset > hits.length) {\n\t\t\t\tlogger.debug(\"\uae30\ubcf8 \uc124\uc815\ub41c \uac80\uc0c9\uac74\uc218\ubcf4\ub2e4 \ub354 \uac80\uc0c9\uc744 \uc6d0\ud558\ubbc0\ub85c, \uc804\uccb4\ub97c \ub300\uc0c1\uc73c\ub85c \uac80\uc0c9\ud569\ub2c8\ub2e4.\");\n\t\t\t\t\n\t\t\t\tif(sort == null) {\n\t\t\t\t\ttopDocs = indexSearcher.search(query, filter, totalHitsCount);\n\t\t\t\t} else {\n\t\t\t\t\ttopDocs = indexSearcher.search(query, filter, totalHitsCount, sort);\n\t\t\t\t}\n\t\t\t\t\n\t\t        hits = topDocs.scoreDocs;\n\t\t\t}\n\t\n\t\t\tint startOffset = csrw.getStartOffSet();\n\t\t\tendOffset = Math.min(hits.length, startOffset + csrw.getHitsForPage());\n\t\t\t\t\t\t\t\t\t\n\t\t\t//for(int i = startOffset; i < endOffset; i++) {\n\t\t\t//\tDocument doc = indexSearcher.doc(hits[i].doc);\n\t\t\t//\tresultDocumentList.add(doc);\n\t\t\t//}\n\t\t\t\n\t\t\tlogger.debug(\"start offset : [{}], end offset : [{}], total : [{}], numOfHits :[{}]\"\n\t\t\t\t\t\t\t,new Object[]{csrw.getStartOffSet(), endOffset, totalHitsCount, numOfHits});\n\t\t\tlogger.debug(\"hits count : [{}]\", hits.length);\n\t\t\tlogger.debug(\"startOffset + hitsPerPage : [{}]\", csrw.getStartOffSet() + csrw.getHitsForPage());\n\t\t\t\n\t\t\t\n\t\t\tif(totalHitsCount > 0) { \n\t\t\t\tList<Map<String, String>> resultList = new ArrayList<Map<String, String>>();\n\t\t\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\t\t\t\n\t\t\t\tCrescentFastVectorHighlighter highlighter = new CrescentFastVectorHighlighter();\n\t\t\t\t\n\t\t\t\tCrescentCollectionHandler collectionHandler \n\t\t\t\t= SpringApplicationContext.getBean(\"crescentCollectionHandler\", CrescentCollectionHandler.class);\n\t\t\t\tCrescentCollection collection = collectionHandler.getCrescentCollections().getCrescentCollection(csrw.getCollectionName());\n\t\t\t\t\n\t\t\t\t//int docnum = 0;\n\t\t\t\tfor(int i = startOffset; i < endOffset; i++) {\n\t\t\t\t\t\n\t\t\t\t\tMap<String,String> resultMap = new HashMap<String, String>();\n\t\t\t\t\t\n\t\t\t\t\tfor(CrescentCollectionField field : collection.getFields()) {\n\t\t\t\t\t\tString value = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(field.isStore() && !field.isNumeric()) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//\ud544\ub4dc\ubcc4 \uacb0\uacfc\ub97c \uac00\uc838\uc628\ub2e4.\n\t\t\t\t\t\t\tvalue = highlighter.getBestFragment(indexSearcher.getIndexReader(), hits[i].doc, query, field.getName());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(value == null || value.length() == 0) {\n\t\t\t\t\t\t\tDocument doc = indexSearcher.doc(hits[i].doc);\n\t\t\t\t\t\t\tvalue = doc.get(field.getName());\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tresultMap.put(field.getName(), value);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresultList.add(resultMap);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult.put(\"total_count\", totalHitsCount);\n\t\t\t\tresult.put(\"result_list\", resultList);\n\t\t\t\tresult.put(\"error_code\", errorCode);\n\t\t\t\tresult.put(\"error_msg\", errorMessage);\n\t\t\t\t\n\t\t\t\tlogger.debug(\"result list {}\", resultList);\n\t\t\t\t\n\t\t\t\tsearchResult.setResultList(resultList);\n\t\t\t\tsearchResult.setTotalHitsCount(totalHitsCount);\n\t\t\t\tsearchResult.setSearchResult(result);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t//\uacb0\uacfc\uc5c6\uc74c\n\t\t\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\t\t\tList<Map<String, String>> resultList = new ArrayList<Map<String, String>>();\n\t\t\t\t\n\t\t\t\tresult.put(\"total_count\", totalHitsCount);\n\t\t\t\tresult.put(\"result_list\", resultList);\n\t\t\t\tresult.put(\"error_code\", errorCode);\n\t\t\t\tresult.put(\"error_msg\", errorMessage);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tlogger.debug(\"result list {}\", resultList);\n\t\t\t\t\n\t\t\t\tsearchResult.setResultList(resultList);\n\t\t\t\tsearchResult.setTotalHitsCount(0);\n\t\t\t\tsearchResult.setSearchResult(result);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t\n\t\t\tlogger.error(\"error in CrescentDefaultDocSearcher : \", e);\n\t\t\t\n\t\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\t\tList<Map<String, String>> resultList = new ArrayList<Map<String, String>>();\n\t\t\t\n\t\t\tresult.put(\"total_count\", totalHitsCount);\n\t\t\tresult.put(\"result_list\", resultList);\n\t\t\tresult.put(\"error_code\", errorCode);\n\t\t\tresult.put(\"error_msg\", errorMessage);\n\t\t\t\n\t\t\tlogger.error(\"\uac80\uc0c9 \uc911 \uc5d0\ub7ec \ubc1c\uc0dd\ud568. {}\", e);\n\t\t\t\n\t\t\tsearchResult.setErrorCode(errorCode);\n\t\t\tsearchResult.setErrorMsg(errorMessage);\n\t\t\tsearchResult.setSearchResult(result);\n\t\t\tsearchResult.setResultList(resultList);\n\t\t\t\n\t\t\treturn searchResult;\n\t\t\t\n\t\t\t\n\t\t} finally {\n\t\t\tsearcherManager.release(indexSearcher);\n\t\t\tindexSearcher = null;\n\t\t}\n\t\t\n\t\treturn searchResult;\n\t}", "signature": "SearchResult search(CrescentSearchRequestWrapper csrw)", "full_signature": "@Override public SearchResult search(CrescentSearchRequestWrapper csrw)", "class_method_signature": "CrescentDefaultDocSearcher.search(CrescentSearchRequestWrapper csrw)", "testcase": false, "constructor": false, "invocations": ["getDefaultHitsPage", "getHitsForPage", "getSearcherManager", "getCollectionName", "acquire", "getQuery", "getFilter", "getSort", "debug", "debug", "debug", "currentTimeMillis", "search", "search", "currentTimeMillis", "setCollectionName", "getCollectionName", "setElaspedTimeMil", "setKeyword", "getKeyword", "setPageNum", "getPageNum", "setPcid", "getPcId", "setQuery", "setSort", "getSort", "setTotalCount", "setUserId", "getUserId", "setUserIp", "getUserIp", "setFilter", "getFilter", "logging", "debug", "min", "getStartOffSet", "getHitsForPage", "debug", "search", "search", "getStartOffSet", "min", "getHitsForPage", "debug", "getStartOffSet", "debug", "debug", "getStartOffSet", "getHitsForPage", "getBean", "getCrescentCollection", "getCrescentCollections", "getCollectionName", "getFields", "isStore", "isNumeric", "getBestFragment", "getIndexReader", "getName", "length", "doc", "get", "getName", "put", "getName", "add", "put", "put", "put", "put", "debug", "setResultList", "setTotalHitsCount", "setSearchResult", "put", "put", "put", "put", "debug", "setResultList", "setTotalHitsCount", "setSearchResult", "error", "put", "put", "put", "put", "error", "setErrorCode", "setErrorMsg", "setSearchResult", "setResultList", "release"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}