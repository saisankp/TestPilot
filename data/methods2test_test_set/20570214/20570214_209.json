{"test_class": {"identifier": "DeterministicAeadWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Integer[] keySizeInBytes;", "modifier": "private", "type": "Integer[]", "declarator": "keySizeInBytes", "var_name": "keySizeInBytes"}], "file": "java_src/src/test/java/com/google/crypto/tink/daead/DeterministicAeadWrapperTest.java"}, "test_case": {"identifier": "testEncrytDecrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEncrytDecrypt() throws Exception {\n    KeysetHandle keysetHandle = KeysetHandle.generateNew(DeterministicAeadKeyTemplates.AES256_SIV);\n    DeterministicAead aead =\n        new DeterministicAeadWrapper().wrap(Registry.getPrimitives(keysetHandle));\n    byte[] plaintext = Random.randBytes(20);\n    byte[] associatedData = Random.randBytes(20);\n    byte[] ciphertext = aead.encryptDeterministically(plaintext, associatedData);\n    byte[] ciphertext2 = aead.encryptDeterministically(plaintext, associatedData);\n    byte[] decrypted = aead.decryptDeterministically(ciphertext, associatedData);\n    byte[] decrypted2 = aead.decryptDeterministically(ciphertext2, associatedData);\n\n    assertArrayEquals(ciphertext, ciphertext2);\n    assertArrayEquals(plaintext, decrypted);\n    assertArrayEquals(plaintext, decrypted2);\n  }", "signature": "void testEncrytDecrypt()", "full_signature": "@Test public void testEncrytDecrypt()", "class_method_signature": "DeterministicAeadWrapperTest.testEncrytDecrypt()", "testcase": true, "constructor": false, "invocations": ["generateNew", "wrap", "getPrimitives", "randBytes", "randBytes", "encryptDeterministically", "encryptDeterministically", "decryptDeterministically", "decryptDeterministically", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "DeterministicAeadWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<DeterministicAead, DeterministicAead>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(DeterministicAeadWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(DeterministicAeadWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "DeterministicAeadWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " DeterministicAeadWrapper()", "full_signature": "  DeterministicAeadWrapper()", "class_method_signature": "DeterministicAeadWrapper.DeterministicAeadWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<DeterministicAead> primitives)", "modifiers": "@Override public", "return": "DeterministicAead", "signature": "DeterministicAead wrap(final PrimitiveSet<DeterministicAead> primitives)", "full_signature": "@Override public DeterministicAead wrap(final PrimitiveSet<DeterministicAead> primitives)", "class_method_signature": "DeterministicAeadWrapper.wrap(final PrimitiveSet<DeterministicAead> primitives)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<DeterministicAead>", "signature": "Class<DeterministicAead> getPrimitiveClass()", "full_signature": "@Override public Class<DeterministicAead> getPrimitiveClass()", "class_method_signature": "DeterministicAeadWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<DeterministicAead>", "signature": "Class<DeterministicAead> getInputPrimitiveClass()", "full_signature": "@Override public Class<DeterministicAead> getInputPrimitiveClass()", "class_method_signature": "DeterministicAeadWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "DeterministicAeadWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/daead/DeterministicAeadWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<DeterministicAead> primitives)", "modifiers": "@Override public", "return": "DeterministicAead", "body": "@Override\n  public DeterministicAead wrap(final PrimitiveSet<DeterministicAead> primitives) {\n    return new WrappedDeterministicAead(primitives);\n  }", "signature": "DeterministicAead wrap(final PrimitiveSet<DeterministicAead> primitives)", "full_signature": "@Override public DeterministicAead wrap(final PrimitiveSet<DeterministicAead> primitives)", "class_method_signature": "DeterministicAeadWrapper.wrap(final PrimitiveSet<DeterministicAead> primitives)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}