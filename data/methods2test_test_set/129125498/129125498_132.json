{"test_class": {"identifier": "HourOfDayDetectionFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DUMMY_VALUE = 100;", "modifier": "public static final", "type": "double", "declarator": "DUMMY_VALUE = 100", "var_name": "DUMMY_VALUE"}, {"original_string": "public static final MetricData METRIC_DATA_INSIDE_NINE_TO_FIVE = buildMetricDataInsideNineToFive(DUMMY_VALUE);", "modifier": "public static final", "type": "MetricData", "declarator": "METRIC_DATA_INSIDE_NINE_TO_FIVE = buildMetricDataInsideNineToFive(DUMMY_VALUE)", "var_name": "METRIC_DATA_INSIDE_NINE_TO_FIVE"}, {"original_string": "public static final MetricData METRIC_DATA_OUTSIDE_NINE_TO_FIVE = buildMetricDataOutsideNineToFive(DUMMY_VALUE);", "modifier": "public static final", "type": "MetricData", "declarator": "METRIC_DATA_OUTSIDE_NINE_TO_FIVE = buildMetricDataOutsideNineToFive(DUMMY_VALUE)", "var_name": "METRIC_DATA_OUTSIDE_NINE_TO_FIVE"}, {"original_string": "@Mock\n    private DetectorContainer mockDetectorContainer;", "modifier": "@Mock\n    private", "type": "DetectorContainer", "declarator": "mockDetectorContainer", "var_name": "mockDetectorContainer"}, {"original_string": "@Mock\n    private DetectorResult mockDetectorResult;", "modifier": "@Mock\n    private", "type": "DetectorResult", "declarator": "mockDetectorResult", "var_name": "mockDetectorResult"}, {"original_string": "@Mock\n    private Detector mockDetector;", "modifier": "@Mock\n    private", "type": "Detector", "declarator": "mockDetector", "var_name": "mockDetector"}, {"original_string": "private HourOfDayDetectionFilter filterUnderTest = new HourOfDayDetectionFilter(9, 17);", "modifier": "private", "type": "HourOfDayDetectionFilter", "declarator": "filterUnderTest = new HourOfDayDetectionFilter(9, 17)", "var_name": "filterUnderTest"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/filter/algo/HourOfDayDetectionFilterTest.java"}, "test_case": {"identifier": "testInsideFilteredPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsideFilteredPeriod() {\n        when(mockDetector.detect(METRIC_DATA_INSIDE_NINE_TO_FIVE)).thenReturn(mockDetectorResult);\n        DetectorResponse detectorResponse = new DetectorResponse();\n        filterUnderTest.doFilter(new DetectorRequest(METRIC_DATA_INSIDE_NINE_TO_FIVE), detectorResponse, chain());\n        DetectorResult actualResult = detectorResponse.getDetectorResult();\n        assertSame(mockDetectorResult, actualResult);\n    }", "signature": "void testInsideFilteredPeriod()", "full_signature": "@Test public void testInsideFilteredPeriod()", "class_method_signature": "HourOfDayDetectionFilterTest.testInsideFilteredPeriod()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "detect", "doFilter", "chain", "getDetectorResult", "assertSame"]}, "focal_class": {"identifier": "HourOfDayDetectionFilter", "superclass": "", "interfaces": "implements DetectionFilter", "fields": [{"original_string": "private int utcStartHour;", "modifier": "private", "type": "int", "declarator": "utcStartHour", "var_name": "utcStartHour"}, {"original_string": "private int utcEndHour;", "modifier": "private", "type": "int", "declarator": "utcEndHour", "var_name": "utcEndHour"}], "methods": [{"identifier": "HourOfDayDetectionFilter", "parameters": "(@JsonProperty(\"utcStartHour\") int utcStartHour,\n                                    @JsonProperty(\"utcEndHour\") int utcEndHour)", "modifiers": "public", "return": "", "signature": " HourOfDayDetectionFilter(@JsonProperty(\"utcStartHour\") int utcStartHour,\n                                    @JsonProperty(\"utcEndHour\") int utcEndHour)", "full_signature": "public  HourOfDayDetectionFilter(@JsonProperty(\"utcStartHour\") int utcStartHour,\n                                    @JsonProperty(\"utcEndHour\") int utcEndHour)", "class_method_signature": "HourOfDayDetectionFilter.HourOfDayDetectionFilter(@JsonProperty(\"utcStartHour\") int utcStartHour,\n                                    @JsonProperty(\"utcEndHour\") int utcEndHour)", "testcase": false, "constructor": true}, {"identifier": "doFilter", "parameters": "(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "full_signature": "@Override public void doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "class_method_signature": "HourOfDayDetectionFilter.doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "metricTimeFallsWithinFilter", "parameters": "(MetricData metricData)", "modifiers": "private", "return": "boolean", "signature": "boolean metricTimeFallsWithinFilter(MetricData metricData)", "full_signature": "private boolean metricTimeFallsWithinFilter(MetricData metricData)", "class_method_signature": "HourOfDayDetectionFilter.metricTimeFallsWithinFilter(MetricData metricData)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/filter/algo/HourOfDayDetectionFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain) {\n        notNull(detectorRequest, \"metricData can't be null\");\n        if (metricTimeFallsWithinFilter(detectorRequest.getMetricData())) {\n            // Metric passes time filter - pass it along to the detector/next filter\n            chain.doFilter(detectorRequest, detectorResponse);\n        } else {\n            // Metric fails time filter - set empty response and abort chain\n            OutlierDetectorResult emptyResult = new OutlierDetectorResult();\n            detectorResponse.setDetectorResult(emptyResult);\n        }\n    }", "signature": "void doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "full_signature": "@Override public void doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "class_method_signature": "HourOfDayDetectionFilter.doFilter(DetectorRequest detectorRequest, DetectorResponse detectorResponse, DetectionFilterChain chain)", "testcase": false, "constructor": false, "invocations": ["notNull", "metricTimeFallsWithinFilter", "getMetricData", "doFilter", "setDetectorResult"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}