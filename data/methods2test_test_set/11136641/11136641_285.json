{"test_class": {"identifier": "LdapEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/support/LdapEncoderTest.java"}, "test_case": {"identifier": "parseBase64BinaryWhenReallyLongThenRemovesNewlineWithNoSpaceForPassivity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseBase64BinaryWhenReallyLongThenRemovesNewlineWithNoSpaceForPassivity() {\n        String toParse = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\\nNTY3ODk=\";\n        String expected = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n        String actual = new String(LdapEncoder.parseBase64Binary(toParse));\n\n        assertThat(actual).isEqualTo(expected);\n    }", "signature": "void parseBase64BinaryWhenReallyLongThenRemovesNewlineWithNoSpaceForPassivity()", "full_signature": "@Test public void parseBase64BinaryWhenReallyLongThenRemovesNewlineWithNoSpaceForPassivity()", "class_method_signature": "LdapEncoderTest.parseBase64BinaryWhenReallyLongThenRemovesNewlineWithNoSpaceForPassivity()", "testcase": true, "constructor": false, "invocations": ["parseBase64Binary", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "LdapEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int HEX = 16;", "modifier": "private static final", "type": "int", "declarator": "HEX = 16", "var_name": "HEX"}, {"original_string": "private static String[] NAME_ESCAPE_TABLE = new String[96];", "modifier": "private static", "type": "String[]", "declarator": "NAME_ESCAPE_TABLE = new String[96]", "var_name": "NAME_ESCAPE_TABLE"}, {"original_string": "private static String[] FILTER_ESCAPE_TABLE = new String['\\\\' + 1];", "modifier": "private static", "type": "String[]", "declarator": "FILTER_ESCAPE_TABLE = new String['\\\\' + 1]", "var_name": "FILTER_ESCAPE_TABLE"}, {"original_string": "private static final int RFC2849_MAX_BASE64_CHARS_PER_LINE = 76;", "modifier": "private static final", "type": "int", "declarator": "RFC2849_MAX_BASE64_CHARS_PER_LINE = 76", "var_name": "RFC2849_MAX_BASE64_CHARS_PER_LINE"}], "methods": [{"identifier": "LdapEncoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " LdapEncoder()", "full_signature": "private  LdapEncoder()", "class_method_signature": "LdapEncoder.LdapEncoder()", "testcase": false, "constructor": true}, {"identifier": "toTwoCharHex", "parameters": "(char c)", "modifiers": "protected static", "return": "String", "signature": "String toTwoCharHex(char c)", "full_signature": "protected static String toTwoCharHex(char c)", "class_method_signature": "LdapEncoder.toTwoCharHex(char c)", "testcase": false, "constructor": false}, {"identifier": "filterEncode", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String filterEncode(String value)", "full_signature": "public static String filterEncode(String value)", "class_method_signature": "LdapEncoder.filterEncode(String value)", "testcase": false, "constructor": false}, {"identifier": "nameEncode", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String nameEncode(String value)", "full_signature": "public static String nameEncode(String value)", "class_method_signature": "LdapEncoder.nameEncode(String value)", "testcase": false, "constructor": false}, {"identifier": "nameDecode", "parameters": "(String value)", "modifiers": "static public", "return": "String", "signature": "String nameDecode(String value)", "full_signature": "static public String nameDecode(String value)", "class_method_signature": "LdapEncoder.nameDecode(String value)", "testcase": false, "constructor": false}, {"identifier": "printBase64Binary", "parameters": "(byte[] val)", "modifiers": "public static", "return": "String", "signature": "String printBase64Binary(byte[] val)", "full_signature": "public static String printBase64Binary(byte[] val)", "class_method_signature": "LdapEncoder.printBase64Binary(byte[] val)", "testcase": false, "constructor": false}, {"identifier": "parseBase64Binary", "parameters": "(String val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseBase64Binary(String val)", "full_signature": "public static byte[] parseBase64Binary(String val)", "class_method_signature": "LdapEncoder.parseBase64Binary(String val)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/support/LdapEncoder.java"}, "focal_method": {"identifier": "parseBase64Binary", "parameters": "(String val)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] parseBase64Binary(String val) {\n\n        Assert.notNull(val, \"val must not be null!\");\n\n        int length = val.length();\n        StringBuilder sb = new StringBuilder(length);\n        for (int i = 0, len = length; i < len; i++) {\n\n            char c = val.charAt(i);\n\n            if(c == '\\n'){\n                if(i + 1 < len && val.charAt(i + 1) == ' ') {\n                    i++;\n                }\n                continue;\n            }\n\n            sb.append(c);\n        }\n\n        return DatatypeConverter.parseBase64Binary(sb.toString());\n    }", "signature": "byte[] parseBase64Binary(String val)", "full_signature": "public static byte[] parseBase64Binary(String val)", "class_method_signature": "LdapEncoder.parseBase64Binary(String val)", "testcase": false, "constructor": false, "invocations": ["notNull", "length", "charAt", "charAt", "append", "parseBase64Binary", "toString"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}