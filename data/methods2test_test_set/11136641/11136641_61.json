{"test_class": {"identifier": "ModifyAttributesOperationRecorderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LdapOperations ldapOperationsMock;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperationsMock", "var_name": "ldapOperationsMock"}, {"original_string": "private IncrementalAttributesMapper attributesMapperMock;", "modifier": "private", "type": "IncrementalAttributesMapper", "declarator": "attributesMapperMock", "var_name": "attributesMapperMock"}, {"original_string": "private ModifyAttributesOperationRecorder tested;", "modifier": "private", "type": "ModifyAttributesOperationRecorder", "declarator": "tested", "var_name": "tested"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/ModifyAttributesOperationRecorderTest.java"}, "test_case": {"identifier": "testGetCompensatingModificationItem_RemoveTwoAttributeValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCompensatingModificationItem_RemoveTwoAttributeValues()\n            throws NamingException {\n        BasicAttribute attribute = new BasicAttribute(\"someattr\");\n        attribute.add(\"value1\");\n        attribute.add(\"value2\");\n        attribute.add(\"value3\");\n        Attributes attributes = new BasicAttributes();\n        attributes.put(attribute);\n\n        BasicAttribute modificationAttribute = new BasicAttribute(\"someattr\");\n        modificationAttribute.add(\"value1\");\n        modificationAttribute.add(\"value2\");\n        ModificationItem originalItem = new ModificationItem(\n                DirContext.REMOVE_ATTRIBUTE, modificationAttribute);\n\n        // Perform test\n        ModificationItem result = tested.getCompensatingModificationItem(\n                attributes, originalItem);\n\n        // Verify result\n        assertThat(result.getModificationOp()).isEqualTo(DirContext.ADD_ATTRIBUTE);\n        Attribute resultAttribute = result.getAttribute();\n        assertThat(resultAttribute.getID()).isEqualTo(\"someattr\");\n        Object object = resultAttribute.get(0);\n        assertThat(object).isEqualTo(\"value1\");\n        assertThat(resultAttribute.get(1)).isEqualTo(\"value2\");\n    }", "signature": "void testGetCompensatingModificationItem_RemoveTwoAttributeValues()", "full_signature": "@Test public void testGetCompensatingModificationItem_RemoveTwoAttributeValues()", "class_method_signature": "ModifyAttributesOperationRecorderTest.testGetCompensatingModificationItem_RemoveTwoAttributeValues()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "put", "add", "add", "getCompensatingModificationItem", "isEqualTo", "assertThat", "getModificationOp", "getAttribute", "isEqualTo", "assertThat", "getID", "get", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "ModifyAttributesOperationRecorder", "superclass": "", "interfaces": "implements\n        CompensatingTransactionOperationRecorder", "fields": [{"original_string": "private LdapOperations ldapOperations;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}], "methods": [{"identifier": "ModifyAttributesOperationRecorder", "parameters": "(LdapOperations ldapOperations)", "modifiers": "public", "return": "", "signature": " ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "full_signature": "public  ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "class_method_signature": "ModifyAttributesOperationRecorder.ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "testcase": false, "constructor": true}, {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "ModifyAttributesOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getAttributesMapper", "parameters": "(String[] attributeNames)", "modifiers": "", "return": "IncrementalAttributesMapper<?>", "signature": "IncrementalAttributesMapper<?> getAttributesMapper(String[] attributeNames)", "full_signature": " IncrementalAttributesMapper<?> getAttributesMapper(String[] attributeNames)", "class_method_signature": "ModifyAttributesOperationRecorder.getAttributesMapper(String[] attributeNames)", "testcase": false, "constructor": false}, {"identifier": "getCompensatingModificationItem", "parameters": "(\n            Attributes originalAttributes, ModificationItem modificationItem)", "modifiers": "protected", "return": "ModificationItem", "signature": "ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "full_signature": "protected ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "class_method_signature": "ModifyAttributesOperationRecorder.getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "testcase": false, "constructor": false}, {"identifier": "getLdapOperations", "parameters": "()", "modifiers": "", "return": "LdapOperations", "signature": "LdapOperations getLdapOperations()", "full_signature": " LdapOperations getLdapOperations()", "class_method_signature": "ModifyAttributesOperationRecorder.getLdapOperations()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/ModifyAttributesOperationRecorder.java"}, "focal_method": {"identifier": "getCompensatingModificationItem", "parameters": "(\n            Attributes originalAttributes, ModificationItem modificationItem)", "modifiers": "protected", "return": "ModificationItem", "body": "protected ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem) {\n        Attribute modificationAttribute = modificationItem.getAttribute();\n        Attribute originalAttribute = originalAttributes\n                .get(modificationAttribute.getID());\n\n        if (modificationItem.getModificationOp() == DirContext.REMOVE_ATTRIBUTE) {\n            if (modificationAttribute.size() == 0) {\n                // If the modification attribute size it means that the\n                // Attribute should be removed entirely - we should store a\n                // ModificationItem to restore all present values for rollback.\n                return new ModificationItem(DirContext.ADD_ATTRIBUTE,\n                        (Attribute) originalAttribute.clone());\n            } else {\n                // The rollback modification will be to re-add the removed\n                // attribute values.\n                return new ModificationItem(DirContext.ADD_ATTRIBUTE,\n                        (Attribute) modificationAttribute.clone());\n            }\n        } else if (modificationItem.getModificationOp() == DirContext.REPLACE_ATTRIBUTE) {\n            if (originalAttribute != null) {\n                return new ModificationItem(DirContext.REPLACE_ATTRIBUTE,\n                        (Attribute) originalAttribute.clone());\n            } else {\n                // The attribute doesn't previously exist - the rollback\n                // operation will be to remove the attribute.\n                return new ModificationItem(DirContext.REMOVE_ATTRIBUTE,\n                        new BasicAttribute(modificationAttribute.getID()));\n            }\n        } else {\n            // An ADD_ATTRIBUTE operation\n            if (originalAttribute == null) {\n                // The attribute doesn't previously exist - the rollback\n                // operation will be to remove the attribute.\n                return new ModificationItem(DirContext.REMOVE_ATTRIBUTE,\n                        new BasicAttribute(modificationAttribute.getID()));\n            } else {\n                // The attribute does exist before - we should store the\n                // previous value and it should be used for replacing in\n                // rollback.\n                return new ModificationItem(DirContext.REPLACE_ATTRIBUTE,\n                        (Attribute) originalAttribute.clone());\n            }\n        }\n    }", "signature": "ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "full_signature": "protected ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "class_method_signature": "ModifyAttributesOperationRecorder.getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "get", "getID", "getModificationOp", "size", "clone", "clone", "getModificationOp", "clone", "getID", "getID", "clone"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}