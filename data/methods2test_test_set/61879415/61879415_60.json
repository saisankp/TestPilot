{"test_class": {"identifier": "IdmNotificationAttachmentControllerTest", "superclass": "extends AbstractReadWriteDtoControllerRestTest<IdmNotificationAttachmentDto>", "interfaces": "", "fields": [{"original_string": "@Autowired private IdmNotificationAttachmentController controller;", "modifier": "@Autowired private", "type": "IdmNotificationAttachmentController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Autowired private IdmNotificationLogService notificationLogService;", "modifier": "@Autowired private", "type": "IdmNotificationLogService", "declarator": "notificationLogService", "var_name": "notificationLogService"}, {"original_string": "@Autowired private AttachmentManager attachmentManager;", "modifier": "@Autowired private", "type": "AttachmentManager", "declarator": "attachmentManager", "var_name": "attachmentManager"}, {"original_string": "@Autowired private IdmNotificationAttachmentService notificationAttachmentService;", "modifier": "@Autowired private", "type": "IdmNotificationAttachmentService", "declarator": "notificationAttachmentService", "var_name": "notificationAttachmentService"}, {"original_string": "@Autowired private NotificationManager notificationManager;", "modifier": "@Autowired private", "type": "NotificationManager", "declarator": "notificationManager", "var_name": "notificationManager"}, {"original_string": "@Autowired private IdmNotificationTemplateService notificationTemplateService;", "modifier": "@Autowired private", "type": "IdmNotificationTemplateService", "declarator": "notificationTemplateService", "var_name": "notificationTemplateService"}, {"original_string": "@Autowired private IdmNotificationConfigurationService notificationConfigurationService;", "modifier": "@Autowired private", "type": "IdmNotificationConfigurationService", "declarator": "notificationConfigurationService", "var_name": "notificationConfigurationService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/notification/rest/impl/IdmNotificationAttachmentControllerTest.java"}, "test_case": {"identifier": "testDownload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDownload() throws Exception {\n\t\tNotificationConfigurationDto config = createConfig();\n\t\tIdmNotificationTemplateDto template = createTestTemplate();\n\t\tIdmIdentityDto identity = getHelper().createIdentity((GuardedString) null);\n\t\t//\n\t\tIdmAttachmentDto attachmentOne = DefaultAttachmentManagerIntegrationTest.prepareDtoWithoutContent();\n\t\tattachmentOne.setInputData(IOUtils.toInputStream(getHelper().createName())); // prepared attachment\n\t\tIdmAttachmentDto attachment = DefaultAttachmentManagerIntegrationTest.prepareDtoWithoutContent();\n\t\tString content = getHelper().createName();\n\t\tattachment.setInputData(IOUtils.toInputStream(content));\t\n\t\tIdmAttachmentDto attachmentTwo = attachmentManager.saveAttachment(identity, attachment);\n\t\tList<IdmAttachmentDto> attachments = Lists.newArrayList(attachmentOne, attachmentTwo);\n\t\t//\n\t\tList<IdmNotificationLogDto> notifications = notificationManager.send(\n\t\t\t\tconfig.getTopic(), \n\t\t\t\tnew IdmMessageDto.Builder().setTemplate(template).build(), \n\t\t\t\tnull,\n\t\t\t\tLists.newArrayList(identity),\n\t\t\t\tattachments);\n\t\t\n\t\tAssert.assertEquals(1, notifications.size());\n\t\tAssert.assertTrue(notifications.stream().anyMatch(n -> n.getType().equals(IdmEmailLog.NOTIFICATION_TYPE)));\n\t\t//\n\t\tIdmNotificationLogDto notification = notifications.get(0);\n\t\t//\n\t\tIdmNotificationAttachmentFilter notificationAttachmentFilter = new IdmNotificationAttachmentFilter();\n\t\tnotificationAttachmentFilter.setNotification(notification.getId());\n\t\tList<IdmNotificationAttachmentDto> notificationAttachments = notificationAttachmentService.find(notificationAttachmentFilter, null).getContent();\n\t\tAssert.assertEquals(2, notificationAttachments.size());\n\t\tAssert.assertTrue(notificationAttachments.stream().allMatch(na -> na.getAttachment() != null));\n\t\tAssert.assertTrue(notificationAttachments.stream().anyMatch(na -> na.getAttachment().equals(attachmentTwo.getId())));\n\t\tIdmNotificationAttachmentDto notificationAttachment = notificationAttachments\n\t\t\t\t.stream()\n\t\t\t\t.filter(na -> na.getAttachment().equals(attachmentTwo.getId()))\n\t\t\t\t.findFirst()\n\t\t\t\t.get();\n\t\t//\n\t\t// download attachment\n\t\tString response = getMockMvc().perform(MockMvcRequestBuilders.get(getDetailUrl(notificationAttachment.getId()) + \"/download\")\n        \t\t.with(authentication(getAdminAuthentication())))\n\t\t\t\t.andExpect(status().isOk())\n                .andReturn()\n                .getResponse()\n                .getContentAsString();\n\t\tAssert.assertEquals(content, response);\n\t\t//\n\t\t// 404 - notification attachment not found\n\t\tgetMockMvc().perform(MockMvcRequestBuilders.get(getDetailUrl(UUID.randomUUID()) + \"/download\")\n        \t\t.with(authentication(getAdminAuthentication())))\n\t\t\t\t.andExpect(status().isNotFound());\n\t\t//\n\t\t// 404 - delete attachment (e.g. simulate ecm store purge)\n\t\tattachmentManager.delete(attachmentTwo);\n\t\tgetMockMvc().perform(MockMvcRequestBuilders.get(getDetailUrl(notificationAttachment.getId()) + \"/download\")\n        \t\t.with(authentication(getAdminAuthentication())))\n\t\t\t\t.andExpect(status().isNotFound());\n\t}", "signature": "void testDownload()", "full_signature": "@Test public void testDownload()", "class_method_signature": "IdmNotificationAttachmentControllerTest.testDownload()", "testcase": true, "constructor": false, "invocations": ["createConfig", "createTestTemplate", "createIdentity", "getHelper", "prepareDtoWithoutContent", "setInputData", "toInputStream", "createName", "getHelper", "prepareDtoWithoutContent", "createName", "getHelper", "setInputData", "toInputStream", "saveAttachment", "newArrayList", "send", "getTopic", "build", "setTemplate", "newArrayList", "assertEquals", "size", "assertTrue", "anyMatch", "stream", "equals", "getType", "get", "setNotification", "getId", "getContent", "find", "assertEquals", "size", "assertTrue", "allMatch", "stream", "getAttachment", "assertTrue", "anyMatch", "stream", "equals", "getAttachment", "getId", "get", "findFirst", "filter", "stream", "equals", "getAttachment", "getId", "getContentAsString", "getResponse", "andReturn", "andExpect", "perform", "getMockMvc", "with", "get", "getDetailUrl", "getId", "authentication", "getAdminAuthentication", "isOk", "status", "assertEquals", "andExpect", "perform", "getMockMvc", "with", "get", "getDetailUrl", "randomUUID", "authentication", "getAdminAuthentication", "isNotFound", "status", "delete", "andExpect", "perform", "getMockMvc", "with", "get", "getDetailUrl", "getId", "authentication", "getAdminAuthentication", "isNotFound", "status"]}, "focal_class": {"identifier": "IdmNotificationAttachmentController", "superclass": "extends AbstractReadWriteDtoController<IdmNotificationAttachmentDto, IdmNotificationAttachmentFilter>", "interfaces": "", "fields": [{"original_string": "protected static final String TAG = \"Notification attachments\";", "modifier": "protected static final", "type": "String", "declarator": "TAG = \"Notification attachments\"", "var_name": "TAG"}, {"original_string": "@Autowired private AttachmentManager attachmentManager;", "modifier": "@Autowired private", "type": "AttachmentManager", "declarator": "attachmentManager", "var_name": "attachmentManager"}], "methods": [{"identifier": "IdmNotificationAttachmentController", "parameters": "(IdmNotificationAttachmentService service)", "modifiers": "@Autowired public", "return": "", "signature": " IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "full_signature": "@Autowired public  IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "class_method_signature": "IdmNotificationAttachmentController.IdmNotificationAttachmentController(IdmNotificationAttachmentService service)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "modifiers": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "Resources<?>", "signature": "Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "full_signature": "@Override @ResponseBody @RequestMapping(method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Search notification attachments (/search/quick alias)\", nickname = \"searchNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public Resources<?> find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "class_method_signature": "IdmNotificationAttachmentController.find(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters, \n\t\t\t@PageableDefault Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "findQuick", "parameters": "(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "modifiers": "@ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/search/quick\", method = RequestMethod.GET) @ApiOperation( value = \"Search notification attachments\", nickname = \"searchQuickNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "Resources<?>", "signature": "Resources<?> findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "full_signature": "@ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/search/quick\", method = RequestMethod.GET) @ApiOperation( value = \"Search notification attachments\", nickname = \"searchQuickNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public Resources<?> findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "class_method_signature": "IdmNotificationAttachmentController.findQuick(\n\t\t\t@RequestParam(required = false) MultiValueMap<String, Object> parameters,\n\t\t\t@PageableDefault Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "modifiers": "@Override @ResponseBody @RequestMapping(value = \"/search/count\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_COUNT + \"')\") @ApiOperation( value = \"The number of entities that match the filter\", nickname = \"countNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }) }) public", "return": "long", "signature": "long count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "full_signature": "@Override @ResponseBody @RequestMapping(value = \"/search/count\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_COUNT + \"')\") @ApiOperation( value = \"The number of entities that match the filter\", nickname = \"countNotificationAttachments\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_COUNT, description = \"\") }) }) public long count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "class_method_signature": "IdmNotificationAttachmentController.count(@RequestParam(required = false) MultiValueMap<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "modifiers": "@Override @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/{backendId}\", method = RequestMethod.GET) @ApiOperation( value = \"Notification attachment detail\", nickname = \"getNotificationAttachment\", response = IdmNotificationAttachmentDto.class, tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "ResponseEntity<?>", "signature": "ResponseEntity<?> get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "full_signature": "@Override @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @RequestMapping(value = \"/{backendId}\", method = RequestMethod.GET) @ApiOperation( value = \"Notification attachment detail\", nickname = \"getNotificationAttachment\", response = IdmNotificationAttachmentDto.class, tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public ResponseEntity<?> get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "class_method_signature": "IdmNotificationAttachmentController.get(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "modifiers": "@Override @ResponseBody @RequestMapping(value = \"/{backendId}/permissions\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"What logged identity can do with given record\", nickname = \"getPermissionsOnNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}) }) public", "return": "Set<String>", "signature": "Set<String> getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "full_signature": "@Override @ResponseBody @RequestMapping(value = \"/{backendId}/permissions\", method = RequestMethod.GET) @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"What logged identity can do with given record\", nickname = \"getPermissionsOnNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\")}) }) public Set<String> getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "class_method_signature": "IdmNotificationAttachmentController.getPermissions(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable @NotNull String backendId)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "modifiers": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "full_signature": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "class_method_signature": "IdmNotificationAttachmentController.download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "testcase": false, "constructor": false}, {"identifier": "toFilter", "parameters": "(MultiValueMap<String, Object> parameters)", "modifiers": "@Override protected", "return": "IdmNotificationAttachmentFilter", "signature": "IdmNotificationAttachmentFilter toFilter(MultiValueMap<String, Object> parameters)", "full_signature": "@Override protected IdmNotificationAttachmentFilter toFilter(MultiValueMap<String, Object> parameters)", "class_method_signature": "IdmNotificationAttachmentController.toFilter(MultiValueMap<String, Object> parameters)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/notification/rest/impl/IdmNotificationAttachmentController.java"}, "focal_method": {"identifier": "download", "parameters": "(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "modifiers": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public", "return": "ResponseEntity<InputStreamResource>", "body": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET)\n\t@ResponseBody\n\t@PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\")\n\t@ApiOperation(\n\t\t\tvalue = \"Download notification attachment\", \n\t\t\tnickname = \"downloadNotificationAttachment\",\n\t\t\ttags = { IdmNotificationAttachmentController.TAG },\n\t\t\tnotes = \"Returns input stream to notification attachment.\",\n\t\t\tauthorizations = {\n\t\t\t\t\t@Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { \n\t\t\t\t\t\t\t@AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }),\n\t\t\t\t\t@Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { \n\t\t\t\t\t\t\t@AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") })\n\t\t\t\t\t})\n\tpublic ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId) {\n\t\tIdmNotificationAttachmentDto dto = getDto(backendId);\n\t\tif (dto == null) {\n\t\t\tthrow new EntityNotFoundException(getService().getEntityClass(), backendId);\n\t\t}\n\t\t//\n\t\tUUID attachmentId = dto.getAttachment();\n\t\tIdmAttachmentDto attachment = attachmentManager.get(attachmentId);\n\t\tif (attachment == null) {\n\t\t\tthrow new EntityNotFoundException(attachmentManager.getEntityClass(), attachmentId);\n\t\t}\n\t\t//\n\t\tInputStream is = attachmentManager.getAttachmentData(attachment.getId());\n\t\t//\n\t\ttry {\n\t\t\tBodyBuilder response = ResponseEntity\n\t\t\t\t\t.ok()\n\t\t\t\t\t.contentLength(is.available())\n\t\t\t\t\t.header(HttpHeaders.CONTENT_DISPOSITION, String.format(\"attachment; filename=\\\"%s\\\"\", attachment.getName()));\n\t\t\t// append media type, if it's filled\n\t\t\tString mimetype = attachment.getMimetype();\n\t\t\tif (StringUtils.isNotBlank(mimetype)) {\n\t\t\t\tresponse = response.contentType(MediaType.valueOf(attachment.getMimetype()));\n\t\t\t}\n\t\t\t//\n\t\t\treturn response.body(new InputStreamResource(is));\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultCodeException(CoreResultCode.INTERNAL_SERVER_ERROR, e);\n\t\t}\n\t}", "signature": "ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "full_signature": "@RequestMapping(value = \"/{backendId}/download\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasAuthority('\" + NotificationGroupPermission.NOTIFICATION_READ + \"')\") @ApiOperation( value = \"Download notification attachment\", nickname = \"downloadNotificationAttachment\", tags = { IdmNotificationAttachmentController.TAG }, notes = \"Returns input stream to notification attachment.\", authorizations = { @Authorization(value = SwaggerConfig.AUTHENTICATION_BASIC, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }), @Authorization(value = SwaggerConfig.AUTHENTICATION_CIDMST, scopes = { @AuthorizationScope(scope = NotificationGroupPermission.NOTIFICATION_READ, description = \"\") }) }) public ResponseEntity<InputStreamResource> download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "class_method_signature": "IdmNotificationAttachmentController.download(\n\t\t\t@ApiParam(value = \"Notification attachment uuid identifier.\", required = true)\n\t\t\t@PathVariable String backendId)", "testcase": false, "constructor": false, "invocations": ["getDto", "getEntityClass", "getService", "getAttachment", "get", "getEntityClass", "getAttachmentData", "getId", "header", "contentLength", "ok", "available", "format", "getName", "getMimetype", "isNotBlank", "contentType", "valueOf", "getMimetype", "body"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}