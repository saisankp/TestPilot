{"test_class": {"identifier": "AnnotationBinderTest", "superclass": "", "interfaces": "", "fields": [], "file": "gsf-legacy/src/test/java/com/fatwire/gst/foundation/controller/action/AnnotationBinderTest.java"}, "test_case": {"identifier": "testBind_csvar", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBind_csvar() {\n        MyObject o = new MyObject();\n        ICS ics = new MockICS() {\n\n            @Override\n            public String GetVar(String key) {\n                if (ftMessage.PageName.equals(key)) {\n                    return \"hello\";\n                } else if (\"cid\".equals(key)) {\n                    return \"12345678901234\";\n                } else if (\"tid\".equals(key)) {\n                    return \"22345678901234\";\n                } else if (\"foo\".equals(key)) {\n                    return \"oof\";\n\n                }\n                return null;\n            }\n\n        };\n        AnnotationBinder.bind(o, ics);\n        assertEquals(\"hello\", o.pagename);\n        assertEquals(12345678901234L, o.cid);\n        assertEquals(new Long(22345678901234L), o.tid);\n        assertNull(o.c);\n        assertEquals(\"oof\", o.bar);\n    }", "signature": "void testBind_csvar()", "full_signature": "@Test public void testBind_csvar()", "class_method_signature": "AnnotationBinderTest.testBind_csvar()", "testcase": true, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "bind", "assertEquals", "assertEquals", "assertEquals", "assertNull", "assertEquals"]}, "focal_class": {"identifier": "AnnotationBinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.AnnotationBinder\");", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(\"tools.gsf.legacy.controller.action.AnnotationBinder\")", "var_name": "LOG"}], "methods": [{"identifier": "bind", "parameters": "(final Object object, ICS ics)", "modifiers": "public static", "return": "void", "signature": "void bind(final Object object, ICS ics)", "full_signature": "public static void bind(final Object object, ICS ics)", "class_method_signature": "AnnotationBinder.bind(final Object object, ICS ics)", "testcase": false, "constructor": false}, {"identifier": "bindToField", "parameters": "(final Object object, final ICS ics, final Field field)", "modifiers": "private static", "return": "void", "signature": "void bindToField(final Object object, final ICS ics, final Field field)", "full_signature": "private static void bindToField(final Object object, final ICS ics, final Field field)", "class_method_signature": "AnnotationBinder.bindToField(final Object object, final ICS ics, final Field field)", "testcase": false, "constructor": false}, {"identifier": "putPrimitive", "parameters": "(Object object, Field field, Object v)", "modifiers": "private static", "return": "void", "signature": "void putPrimitive(Object object, Field field, Object v)", "full_signature": "private static void putPrimitive(Object object, Field field, Object v)", "class_method_signature": "AnnotationBinder.putPrimitive(Object object, Field field, Object v)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Object object, Field field, Object value)", "modifiers": "private static", "return": "void", "signature": "void put(Object object, Field field, Object value)", "full_signature": "private static void put(Object object, Field field, Object value)", "class_method_signature": "AnnotationBinder.put(Object object, Field field, Object value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Object object, Field field, String var)", "modifiers": "private static", "return": "void", "signature": "void put(Object object, Field field, String var)", "full_signature": "private static void put(Object object, Field field, String var)", "class_method_signature": "AnnotationBinder.put(Object object, Field field, String var)", "testcase": false, "constructor": false}, {"identifier": "putPrimitive", "parameters": "(Object object, Field field, String s)", "modifiers": "private static", "return": "void", "signature": "void putPrimitive(Object object, Field field, String s)", "full_signature": "private static void putPrimitive(Object object, Field field, String s)", "class_method_signature": "AnnotationBinder.putPrimitive(Object object, Field field, String s)", "testcase": false, "constructor": false}], "file": "gsf-legacy/src/main/java/com/fatwire/gst/foundation/controller/action/AnnotationBinder.java"}, "focal_method": {"identifier": "bind", "parameters": "(final Object object, ICS ics)", "modifiers": "public static", "return": "void", "body": "public static void bind(final Object object, ICS ics) {\n        if (object == null) {\n            throw new IllegalArgumentException(\"Object cannot be null.\");\n        }\n        if (ics == null) {\n            throw new IllegalArgumentException(\"CS cannot be null.\");\n        }\n        Class<?> c = object.getClass();\n        // all annotated fields.\n        while (c != Object.class && c != null) {\n            for (final Field field : c.getDeclaredFields()) {\n                if (field.isAnnotationPresent(Bind.class)) {\n                    bindToField(object, ics, field);\n                }\n\n            }\n\n            c = c.getSuperclass();\n        }\n    }", "signature": "void bind(final Object object, ICS ics)", "full_signature": "public static void bind(final Object object, ICS ics)", "class_method_signature": "AnnotationBinder.bind(final Object object, ICS ics)", "testcase": false, "constructor": false, "invocations": ["getClass", "getDeclaredFields", "isAnnotationPresent", "bindToField", "getSuperclass"]}, "repository": {"repo_id": 4718003, "url": "https://github.com/dolfdijkstra/gst-foundation", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 13, "size": 149761, "license": "licensed"}}