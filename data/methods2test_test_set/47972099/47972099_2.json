{"test_class": {"identifier": "GroupReduceNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-optimizer/src/test/java/org/apache/flink/optimizer/dag/GroupReduceNodeTest.java"}, "test_case": {"identifier": "testGetSemanticProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSemanticProperties() {\n\n\t\tSingleInputSemanticProperties origProps = new SingleInputSemanticProperties();\n\t\torigProps.addForwardedField(0, 1);\n\t\torigProps.addForwardedField(2, 2);\n\t\torigProps.addForwardedField(3, 4);\n\t\torigProps.addForwardedField(6, 0);\n\t\torigProps.addReadFields(new FieldSet(0, 2, 4, 7));\n\n\t\tGroupReduceOperatorBase<?,?,?> op = mock(GroupReduceOperatorBase.class);\n\t\twhen(op.getSemanticProperties()).thenReturn(origProps);\n\t\twhen(op.getKeyColumns(0)).thenReturn(new int[]{3,2});\n\t\twhen(op.getParameters()).thenReturn(new Configuration());\n\n\t\tGroupReduceNode node = new GroupReduceNode(op);\n\n\t\tSemanticProperties filteredProps = node.getSemanticPropertiesForLocalPropertyFiltering();\n\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 0).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 2).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 2).contains(2));\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 3).size() == 1);\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 3).contains(4));\n\t\tassertTrue(filteredProps.getForwardingTargetFields(0, 6).size() == 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 1) < 0);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 2) == 2);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 4) == 3);\n\t\tassertTrue(filteredProps.getForwardingSourceField(0, 0) < 0);\n\n\t\tassertTrue(filteredProps.getReadFields(0).size() == 4);\n\t\tassertTrue(filteredProps.getReadFields(0).contains(0));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(2));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(4));\n\t\tassertTrue(filteredProps.getReadFields(0).contains(7));\n\n\t}", "signature": "void testGetSemanticProperties()", "full_signature": "@Test public void testGetSemanticProperties()", "class_method_signature": "GroupReduceNodeTest.testGetSemanticProperties()", "testcase": true, "constructor": false, "invocations": ["addForwardedField", "addForwardedField", "addForwardedField", "addForwardedField", "addReadFields", "mock", "thenReturn", "when", "getSemanticProperties", "thenReturn", "when", "getKeyColumns", "thenReturn", "when", "getParameters", "getSemanticPropertiesForLocalPropertyFiltering", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "contains", "getForwardingTargetFields", "assertTrue", "size", "getForwardingTargetFields", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "getForwardingSourceField", "assertTrue", "size", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields", "assertTrue", "contains", "getReadFields"]}, "focal_class": {"identifier": "GroupReduceNode", "superclass": "extends SingleInputNode", "interfaces": "", "fields": [{"original_string": "private final List<OperatorDescriptorSingle> possibleProperties;", "modifier": "private final", "type": "List<OperatorDescriptorSingle>", "declarator": "possibleProperties", "var_name": "possibleProperties"}, {"original_string": "private final String operatorName;", "modifier": "private final", "type": "String", "declarator": "operatorName", "var_name": "operatorName"}, {"original_string": "private GroupReduceNode combinerUtilityNode;", "modifier": "private", "type": "GroupReduceNode", "declarator": "combinerUtilityNode", "var_name": "combinerUtilityNode"}], "methods": [{"identifier": "GroupReduceNode", "parameters": "(GroupReduceOperatorBase<?, ?, ?> operator)", "modifiers": "public", "return": "", "signature": " GroupReduceNode(GroupReduceOperatorBase<?, ?, ?> operator)", "full_signature": "public  GroupReduceNode(GroupReduceOperatorBase<?, ?, ?> operator)", "class_method_signature": "GroupReduceNode.GroupReduceNode(GroupReduceOperatorBase<?, ?, ?> operator)", "testcase": false, "constructor": true}, {"identifier": "GroupReduceNode", "parameters": "(GroupReduceNode reducerToCopyForCombiner)", "modifiers": "private", "return": "", "signature": " GroupReduceNode(GroupReduceNode reducerToCopyForCombiner)", "full_signature": "private  GroupReduceNode(GroupReduceNode reducerToCopyForCombiner)", "class_method_signature": "GroupReduceNode.GroupReduceNode(GroupReduceNode reducerToCopyForCombiner)", "testcase": false, "constructor": true}, {"identifier": "initPossibleProperties", "parameters": "(Partitioner<?> customPartitioner)", "modifiers": "private", "return": "List<OperatorDescriptorSingle>", "signature": "List<OperatorDescriptorSingle> initPossibleProperties(Partitioner<?> customPartitioner)", "full_signature": "private List<OperatorDescriptorSingle> initPossibleProperties(Partitioner<?> customPartitioner)", "class_method_signature": "GroupReduceNode.initPossibleProperties(Partitioner<?> customPartitioner)", "testcase": false, "constructor": false}, {"identifier": "getOperator", "parameters": "()", "modifiers": "@Override public", "return": "GroupReduceOperatorBase<?, ?, ?>", "signature": "GroupReduceOperatorBase<?, ?, ?> getOperator()", "full_signature": "@Override public GroupReduceOperatorBase<?, ?, ?> getOperator()", "class_method_signature": "GroupReduceNode.getOperator()", "testcase": false, "constructor": false}, {"identifier": "isCombineable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCombineable()", "full_signature": "public boolean isCombineable()", "class_method_signature": "GroupReduceNode.isCombineable()", "testcase": false, "constructor": false}, {"identifier": "getOperatorName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getOperatorName()", "full_signature": "@Override public String getOperatorName()", "class_method_signature": "GroupReduceNode.getOperatorName()", "testcase": false, "constructor": false}, {"identifier": "getPossibleProperties", "parameters": "()", "modifiers": "@Override protected", "return": "List<OperatorDescriptorSingle>", "signature": "List<OperatorDescriptorSingle> getPossibleProperties()", "full_signature": "@Override protected List<OperatorDescriptorSingle> getPossibleProperties()", "class_method_signature": "GroupReduceNode.getPossibleProperties()", "testcase": false, "constructor": false}, {"identifier": "getSemanticPropertiesForLocalPropertyFiltering", "parameters": "()", "modifiers": "@Override protected", "return": "SemanticProperties", "signature": "SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "full_signature": "@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "class_method_signature": "GroupReduceNode.getSemanticPropertiesForLocalPropertyFiltering()", "testcase": false, "constructor": false}, {"identifier": "computeOperatorSpecificDefaultEstimates", "parameters": "(DataStatistics statistics)", "modifiers": "@Override protected", "return": "void", "signature": "void computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "full_signature": "@Override protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "class_method_signature": "GroupReduceNode.computeOperatorSpecificDefaultEstimates(DataStatistics statistics)", "testcase": false, "constructor": false}, {"identifier": "getCombinerUtilityNode", "parameters": "()", "modifiers": "public", "return": "GroupReduceNode", "signature": "GroupReduceNode getCombinerUtilityNode()", "full_signature": "public GroupReduceNode getCombinerUtilityNode()", "class_method_signature": "GroupReduceNode.getCombinerUtilityNode()", "testcase": false, "constructor": false}], "file": "flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/GroupReduceNode.java"}, "focal_method": {"identifier": "getSemanticPropertiesForLocalPropertyFiltering", "parameters": "()", "modifiers": "@Override protected", "return": "SemanticProperties", "body": "@Override\n\tprotected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering() {\n\t\t// Local properties for GroupReduce may only be preserved on key fields.\n\t\tSingleInputSemanticProperties origProps = getOperator().getSemanticProperties();\n\t\tSingleInputSemanticProperties filteredProps = new SingleInputSemanticProperties();\n\t\tFieldSet readSet = origProps.getReadFields(0);\n\t\tif(readSet != null) {\n\t\t\tfilteredProps.addReadFields(readSet);\n\t\t}\n\n\t\t// only add forward field information for key fields\n\t\tif(this.keys != null) {\n\t\t\tfor (int f : this.keys) {\n\t\t\t\tFieldSet targets = origProps.getForwardingTargetFields(0, f);\n\t\t\t\tfor (int t : targets) {\n\t\t\t\t\tfilteredProps.addForwardedField(f, t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn filteredProps;\n\t}", "signature": "SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "full_signature": "@Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering()", "class_method_signature": "GroupReduceNode.getSemanticPropertiesForLocalPropertyFiltering()", "testcase": false, "constructor": false, "invocations": ["getSemanticProperties", "getOperator", "getReadFields", "addReadFields", "getForwardingTargetFields", "addForwardedField"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}