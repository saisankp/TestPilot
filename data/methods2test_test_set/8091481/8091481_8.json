{"test_class": {"identifier": "ShingleExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexter-core/src/test/java/it/cnr/isti/hpc/dexter/shingle/ShingleExtractorTest.java"}, "test_case": {"identifier": "testAddText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddText() throws Exception {\n\t\tString text = null;\n\t\tShingleExtractor shingler = new ShingleExtractor(text);\n\t\tIterator<Shingle> it = shingler.iterator();\n\t\tassertFalse(it.hasNext());\n\t\tshingler = new ShingleExtractor(\"\");\n\t\tit = shingler.iterator();\n\t\tassertFalse(it.hasNext());\n\n\t}", "signature": "void testAddText()", "full_signature": "@Test public void testAddText()", "class_method_signature": "ShingleExtractorTest.testAddText()", "testcase": true, "constructor": false, "invocations": ["iterator", "assertFalse", "hasNext", "iterator", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "ShingleExtractor", "superclass": "", "interfaces": "implements Iterable<Shingle>", "fields": [{"original_string": "private int maxShingleSize;", "modifier": "private", "type": "int", "declarator": "maxShingleSize", "var_name": "maxShingleSize"}, {"original_string": "private static final int DEFAULT_MAX_SHINGLE_SIZE = 6;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_SHINGLE_SIZE = 6", "var_name": "DEFAULT_MAX_SHINGLE_SIZE"}, {"original_string": "private final List<List<Token>> cleanedSentences;", "modifier": "private final", "type": "List<List<Token>>", "declarator": "cleanedSentences", "var_name": "cleanedSentences"}, {"original_string": "private final SpotManager sm;", "modifier": "private final", "type": "SpotManager", "declarator": "sm", "var_name": "sm"}, {"original_string": "private final TokenSegmenter ts;", "modifier": "private final", "type": "TokenSegmenter", "declarator": "ts", "var_name": "ts"}, {"original_string": "private final SentenceSegmenter ss;", "modifier": "private final", "type": "SentenceSegmenter", "declarator": "ss", "var_name": "ss"}], "methods": [{"identifier": "ShingleExtractor", "parameters": "()", "modifiers": "private", "return": "", "signature": " ShingleExtractor()", "full_signature": "private  ShingleExtractor()", "class_method_signature": "ShingleExtractor.ShingleExtractor()", "testcase": false, "constructor": true}, {"identifier": "ShingleExtractor", "parameters": "(Article a)", "modifiers": "public", "return": "", "signature": " ShingleExtractor(Article a)", "full_signature": "public  ShingleExtractor(Article a)", "class_method_signature": "ShingleExtractor.ShingleExtractor(Article a)", "testcase": false, "constructor": true}, {"identifier": "ShingleExtractor", "parameters": "(String text)", "modifiers": "public", "return": "", "signature": " ShingleExtractor(String text)", "full_signature": "public  ShingleExtractor(String text)", "class_method_signature": "ShingleExtractor.ShingleExtractor(String text)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void process(String text)", "full_signature": "public void process(String text)", "class_method_signature": "ShingleExtractor.process(String text)", "testcase": false, "constructor": false}, {"identifier": "addText", "parameters": "(String text)", "modifiers": "private", "return": "void", "signature": "void addText(String text)", "full_signature": "private void addText(String text)", "class_method_signature": "ShingleExtractor.addText(String text)", "testcase": false, "constructor": false}, {"identifier": "getMaxShingleSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxShingleSize()", "full_signature": "public int getMaxShingleSize()", "class_method_signature": "ShingleExtractor.getMaxShingleSize()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Shingle>", "signature": "Iterator<Shingle> iterator()", "full_signature": "@Override public Iterator<Shingle> iterator()", "class_method_signature": "ShingleExtractor.iterator()", "testcase": false, "constructor": false}, {"identifier": "setMaxShingleSize", "parameters": "(int maxShingleSize)", "modifiers": "public", "return": "void", "signature": "void setMaxShingleSize(int maxShingleSize)", "full_signature": "public void setMaxShingleSize(int maxShingleSize)", "class_method_signature": "ShingleExtractor.setMaxShingleSize(int maxShingleSize)", "testcase": false, "constructor": false}], "file": "dexter-core/src/main/java/it/cnr/isti/hpc/dexter/shingle/ShingleExtractor.java"}, "focal_method": {"identifier": "addText", "parameters": "(String text)", "modifiers": "private", "return": "void", "body": "private void addText(String text) {\n\t\tif (text == null || text.isEmpty())\n\t\t\treturn;\n\t\tList<Sentence> sentences = ss.splitPos(text);\n\n\t\t// int start = 0;\n\t\tfor (Sentence sentence : sentences) {\n\t\t\tString currSentence = sentence.getText();\n\t\t\tint startSentence = sentence.getStart();\n\n\t\t\t// System.out.println(\"SENTENCE [\" + currSentence + \"]\");\n\t\t\t// //List<Token> textShingles = new LinkedList<Token>();\n\t\t\t// FIXME CLEAN SHOULD NO CHANGE THE OFFSETS OF THE TOKENS\n\t\t\t// currSentence = sm.clean(currSentence);\n\t\t\tList<Token> tokens = ts.tokenizePos(currSentence);\n\t\t\tList<Token> cleanTokens = new LinkedList<Token>();\n\t\t\t// experimental\n\t\t\tfor (Token t : tokens) {\n\n\t\t\t\tt.setStart(t.getStart() + startSentence);\n\t\t\t\tt.setEnd(t.getEnd() + startSentence);\n\t\t\t\tString token = text.substring(t.getStart(), t.getEnd());\n\t\t\t\tString cleanToken = sm.clean(token);\n\t\t\t\tif (cleanToken.isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// System.out.println(token + \"-> \" + cleanToken);\n\t\t\t\t// System.out.println(\"token in text: \" + token);\n\n\t\t\t\t// Skip empty token (or tokens made only of chars cleaned\n\t\t\t\t// above)\n\n\t\t\t\tt.setText(cleanToken);\n\t\t\t\tcleanTokens.add(t);\n\t\t\t}\n\t\t\tcleanedSentences.add(cleanTokens);\n\t\t}\n\n\t}", "signature": "void addText(String text)", "full_signature": "private void addText(String text)", "class_method_signature": "ShingleExtractor.addText(String text)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "splitPos", "getText", "getStart", "tokenizePos", "setStart", "getStart", "setEnd", "getEnd", "substring", "getStart", "getEnd", "clean", "isEmpty", "setText", "add", "add"]}, "repository": {"repo_id": 8091481, "url": "https://github.com/dexter/dexter", "language": "Java", "is_fork": false, "fork_count": 52, "stargazer_count": 196, "size": 17631, "license": "licensed"}}