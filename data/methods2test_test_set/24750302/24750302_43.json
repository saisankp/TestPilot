{"test_class": {"identifier": "AlienContextVariablesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AlienContextVariables alienContextVariables;", "modifier": "private", "type": "AlienContextVariables", "declarator": "alienContextVariables", "var_name": "alienContextVariables"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/variable/AlienContextVariablesTest.java"}, "test_case": {"identifier": "check_tags_can_be_resolved", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void check_tags_can_be_resolved() throws Exception {\n        Assertions.assertThat(alienContextVariables.getProperty(\"a4c.application.tags.yolo\")).isEqualTo(\"oloy\");\n        Assertions.assertThat(alienContextVariables.getProperty(\"a4c.application.tags.tagName\")).isEqualTo(\"tagValue\");\n    }", "signature": "void check_tags_can_be_resolved()", "full_signature": "@Test public void check_tags_can_be_resolved()", "class_method_signature": "AlienContextVariablesTest.check_tags_can_be_resolved()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getProperty", "isEqualTo", "assertThat", "getProperty"]}, "focal_class": {"identifier": "AlienContextVariables", "superclass": "extends PropertySource", "interfaces": "", "fields": [{"original_string": "private Application application;", "modifier": "private", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private ApplicationEnvironment applicationEnvironment;", "modifier": "private", "type": "ApplicationEnvironment", "declarator": "applicationEnvironment", "var_name": "applicationEnvironment"}, {"original_string": "private Location location;", "modifier": "private", "type": "Location", "declarator": "location", "var_name": "location"}], "methods": [{"identifier": "AlienContextVariables", "parameters": "()", "modifiers": "public", "return": "", "signature": " AlienContextVariables()", "full_signature": "public  AlienContextVariables()", "class_method_signature": "AlienContextVariables.AlienContextVariables()", "testcase": false, "constructor": true}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getProperty(String name)", "full_signature": "@Override public Object getProperty(String name)", "class_method_signature": "AlienContextVariables.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "findMetaProperties", "parameters": "(String metaName, IMetaProperties metaProperties)", "modifiers": "private", "return": "String", "signature": "String findMetaProperties(String metaName, IMetaProperties metaProperties)", "full_signature": "private String findMetaProperties(String metaName, IMetaProperties metaProperties)", "class_method_signature": "AlienContextVariables.findMetaProperties(String metaName, IMetaProperties metaProperties)", "testcase": false, "constructor": false}, {"identifier": "ifNotNull", "parameters": "(T o, Function<T, R> getter)", "modifiers": "private", "return": "R", "signature": "R ifNotNull(T o, Function<T, R> getter)", "full_signature": "private R ifNotNull(T o, Function<T, R> getter)", "class_method_signature": "AlienContextVariables.ifNotNull(T o, Function<T, R> getter)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/variable/AlienContextVariables.java"}, "focal_method": {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object getProperty(String name) {\n        if (!name.startsWith(\"a4c.\")) {\n            return null;\n        }\n\n        switch (name) {\n            case \"a4c.application\":\n                return application;\n\n            case \"a4c.application.id\":\n                return ifNotNull(application, Application::getId);\n\n            case \"a4c.application.name\":\n                return ifNotNull(application, Application::getName);\n\n            case \"a4c.environment.type\":\n                return ifNotNull(applicationEnvironment, ApplicationEnvironment::getEnvironmentType);\n\n            case \"a4c.environment.name\":\n                return ifNotNull(applicationEnvironment, ApplicationEnvironment::getName);\n        }\n\n        // lookup for a tag\n        if (name.startsWith(\"a4c.application.tags.\")) {\n            if (application != null && application.getTags() != null) {\n                String tagName = StringUtils.removeStart(name, \"a4c.application.tags.\");\n\n                for (Tag tag : application.getTags()) {\n                    if (tag.getName().equals(tagName)) {\n                        return tag.getValue();\n                    }\n                }\n            }\n        }\n\n        // lookup for meta properties\n        String metaName = StringUtils.removeStart(name, \"a4c.\");\n        String metaValue = findMetaProperties(metaName, application);\n        if (metaValue != null) {\n            return metaValue;\n        }\n        metaValue = findMetaProperties(metaName, location);\n        if (metaValue != null) {\n            return metaValue;\n        }\n\n        return null;\n    }", "signature": "Object getProperty(String name)", "full_signature": "@Override public Object getProperty(String name)", "class_method_signature": "AlienContextVariables.getProperty(String name)", "testcase": false, "constructor": false, "invocations": ["startsWith", "ifNotNull", "ifNotNull", "ifNotNull", "ifNotNull", "startsWith", "getTags", "removeStart", "getTags", "equals", "getName", "getValue", "removeStart", "findMetaProperties", "findMetaProperties"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}