{"test_class": {"identifier": "GeometricDoubleBondEncoderFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactoryTest.java"}, "test_case": {"identifier": "testCreate_NoCoordinates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_NoCoordinates() throws Exception {\n\n        IAtomContainer mol = mock(IAtomContainer.class);\n\n        // a       d    0       3\n        //  \\     /      \\     /\n        //   b = c        1 = 2\n        //  /     \\      /     \\\n        // e       f    4       5\n        IAtom a = mock(IAtom.class); // 0\n        IAtom b = mock(IAtom.class); // 1\n        IAtom c = mock(IAtom.class); // 2\n        IAtom d = mock(IAtom.class); // 3\n        IAtom e = mock(IAtom.class); // 4\n        IAtom f = mock(IAtom.class); // 5\n\n        when(mol.indexOf(a)).thenReturn(0);\n        when(mol.indexOf(b)).thenReturn(1);\n        when(mol.indexOf(c)).thenReturn(2);\n        when(mol.indexOf(d)).thenReturn(3);\n        when(mol.indexOf(e)).thenReturn(4);\n        when(mol.indexOf(f)).thenReturn(5);\n\n        when(mol.getAtom(0)).thenReturn(a);\n        when(mol.getAtom(1)).thenReturn(b);\n        when(mol.getAtom(2)).thenReturn(c);\n        when(mol.getAtom(3)).thenReturn(d);\n        when(mol.getAtom(4)).thenReturn(e);\n        when(mol.getAtom(5)).thenReturn(f);\n\n        when(b.getHybridization()).thenReturn(IAtomType.Hybridization.SP2);\n        when(c.getHybridization()).thenReturn(IAtomType.Hybridization.SP2);\n\n        IBond ba = mock(IBond.class);\n        IBond be = mock(IBond.class);\n        IBond bc = mock(IBond.class);\n        IBond cd = mock(IBond.class);\n        IBond cf = mock(IBond.class);\n\n        when(ba.getBegin()).thenReturn(b);\n        when(ba.getEnd()).thenReturn(a);\n        when(be.getBegin()).thenReturn(b);\n        when(be.getEnd()).thenReturn(e);\n        when(bc.getBegin()).thenReturn(b);\n        when(bc.getEnd()).thenReturn(c);\n        when(cd.getBegin()).thenReturn(c);\n        when(cd.getEnd()).thenReturn(d);\n        when(cf.getBegin()).thenReturn(c);\n        when(cf.getEnd()).thenReturn(f);\n\n        when(bc.getOrder()).thenReturn(IBond.Order.DOUBLE);\n        when(mol.bonds()).thenReturn(Arrays.asList(ba, be, bc, cd, cf));\n\n        when(mol.getConnectedBondsList(a)).thenReturn(Arrays.asList(ba));\n        when(mol.getConnectedBondsList(b)).thenReturn(Arrays.asList(ba, bc, be));\n        when(mol.getConnectedBondsList(c)).thenReturn(Arrays.asList(bc, cd, cf));\n        when(mol.getConnectedBondsList(d)).thenReturn(Arrays.asList(cd));\n        when(mol.getConnectedBondsList(e)).thenReturn(Arrays.asList(be));\n        when(mol.getConnectedBondsList(f)).thenReturn(Arrays.asList(cf));\n\n        StereoEncoderFactory factory = new GeometricDoubleBondEncoderFactory();\n\n        int[][] g = new int[][]{{1}, {0, 2, 4}, {1, 3, 5}, {2}, {1}, {2}};\n\n        assertTrue(factory.create(mol, g) == StereoEncoder.EMPTY);\n    }", "signature": "void testCreate_NoCoordinates()", "full_signature": "@Test public void testCreate_NoCoordinates()", "class_method_signature": "GeometricDoubleBondEncoderFactoryTest.testCreate_NoCoordinates()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "indexOf", "thenReturn", "when", "indexOf", "thenReturn", "when", "indexOf", "thenReturn", "when", "indexOf", "thenReturn", "when", "indexOf", "thenReturn", "when", "indexOf", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getAtom", "thenReturn", "when", "getHybridization", "thenReturn", "when", "getHybridization", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getBegin", "thenReturn", "when", "getEnd", "thenReturn", "when", "getOrder", "thenReturn", "when", "bonds", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "thenReturn", "when", "getConnectedBondsList", "asList", "assertTrue", "create"]}, "focal_class": {"identifier": "GeometricDoubleBondEncoderFactory", "superclass": "", "interfaces": "implements StereoEncoderFactory", "fields": [], "methods": [{"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "newEncoder", "parameters": "(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "modifiers": "static", "return": "StereoEncoder", "signature": "StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "full_signature": "static StereoEncoder newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.newEncoder(IAtomContainer container, IAtom left, IAtom leftParent, IAtom right,\n            IAtom rightParent, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "geometric", "parameters": "(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "modifiers": "static", "return": "GeometricParity", "signature": "GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "full_signature": "static GeometricParity geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "class_method_signature": "GeometricDoubleBondEncoderFactory.geometric(IAtomContainer mol, int l, int r, int l1, int l2, int r1, int r2)", "testcase": false, "constructor": false}, {"identifier": "permutation", "parameters": "(int[] neighbors)", "modifiers": "static", "return": "PermutationParity", "signature": "PermutationParity permutation(int[] neighbors)", "full_signature": "static PermutationParity permutation(int[] neighbors)", "class_method_signature": "GeometricDoubleBondEncoderFactory.permutation(int[] neighbors)", "testcase": false, "constructor": false}, {"identifier": "moveToBack", "parameters": "(int[] neighbors, int v)", "modifiers": "static", "return": "int[]", "signature": "int[] moveToBack(int[] neighbors, int v)", "full_signature": "static int[] moveToBack(int[] neighbors, int v)", "class_method_signature": "GeometricDoubleBondEncoderFactory.moveToBack(int[] neighbors, int v)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(IAtom atom, List<IBond> bonds)", "modifiers": "static", "return": "boolean", "signature": "boolean accept(IAtom atom, List<IBond> bonds)", "full_signature": "static boolean accept(IAtom atom, List<IBond> bonds)", "class_method_signature": "GeometricDoubleBondEncoderFactory.accept(IAtom atom, List<IBond> bonds)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/GeometricDoubleBondEncoderFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(IAtomContainer container, int[][] graph)", "modifiers": "@Override public", "return": "StereoEncoder", "body": "@Override\n    public StereoEncoder create(IAtomContainer container, int[][] graph) {\n\n        List<StereoEncoder> encoders = new ArrayList<StereoEncoder>(5);\n\n        for (IBond bond : container.bonds()) {\n\n            // if double bond and not E or Z query bond\n            if (DOUBLE.equals(bond.getOrder()) && !E_OR_Z.equals(bond.getStereo())) {\n\n                IAtom left = bond.getBegin();\n                IAtom right = bond.getEnd();\n\n                // skip -N=N- double bonds which exhibit inversion\n                if (Integer.valueOf(7).equals(left.getAtomicNumber())\n                        && Integer.valueOf(7).equals(right.getAtomicNumber())) continue;\n\n                StereoEncoder encoder = newEncoder(container, left, right, right, left, graph);\n\n                if (encoder != null) {\n                    encoders.add(encoder);\n                }\n            }\n        }\n\n        return encoders.isEmpty() ? StereoEncoder.EMPTY : new MultiStereoEncoder(encoders);\n    }", "signature": "StereoEncoder create(IAtomContainer container, int[][] graph)", "full_signature": "@Override public StereoEncoder create(IAtomContainer container, int[][] graph)", "class_method_signature": "GeometricDoubleBondEncoderFactory.create(IAtomContainer container, int[][] graph)", "testcase": false, "constructor": false, "invocations": ["bonds", "equals", "getOrder", "equals", "getStereo", "getBegin", "getEnd", "equals", "valueOf", "getAtomicNumber", "equals", "valueOf", "getAtomicNumber", "newEncoder", "add", "isEmpty"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}