{"test_class": {"identifier": "RepoInfoPresenterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Inject\n    protected List<ContributorDTO> contributorDTOs;", "modifier": "@Inject\n    protected", "type": "List<ContributorDTO>", "declarator": "contributorDTOs", "var_name": "contributorDTOs"}, {"original_string": "@Inject\n    protected List<BranchDTO> branchDTOs;", "modifier": "@Inject\n    protected", "type": "List<BranchDTO>", "declarator": "branchDTOs", "var_name": "branchDTOs"}, {"original_string": "@Inject\n    protected List<Contributor> contributorList;", "modifier": "@Inject\n    protected", "type": "List<Contributor>", "declarator": "contributorList", "var_name": "contributorList"}, {"original_string": "@Inject\n    protected List<Branch> branchList;", "modifier": "@Inject\n    protected", "type": "List<Branch>", "declarator": "branchList", "var_name": "branchList"}, {"original_string": "@Inject\n    protected RepoBranchesMapper branchesMapper;", "modifier": "@Inject\n    protected", "type": "RepoBranchesMapper", "declarator": "branchesMapper", "var_name": "branchesMapper"}, {"original_string": "@Inject\n    protected RepoContributorsMapper contributorsMapper;", "modifier": "@Inject\n    protected", "type": "RepoContributorsMapper", "declarator": "contributorsMapper", "var_name": "contributorsMapper"}, {"original_string": "@Inject\n    protected Model model;", "modifier": "@Inject\n    protected", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "@Inject\n    protected Repository repository;", "modifier": "@Inject\n    protected", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private RepoInfoView mockView;", "modifier": "private", "type": "RepoInfoView", "declarator": "mockView", "var_name": "mockView"}, {"original_string": "private RepoInfoPresenter repoInfoPresenter;", "modifier": "private", "type": "RepoInfoPresenter", "declarator": "repoInfoPresenter", "var_name": "repoInfoPresenter"}], "file": "app/src/test/java/com/andrey7mel/stepbystep/presenter/RepoInfoPresenterTest.java"}, "test_case": {"identifier": "testOnErrorContributors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnErrorContributors() {\n        doAnswer(invocation -> Observable.error(new Throwable(TestConst.TEST_ERROR)))\n                .when(model)\n                .getRepoContributors(TestConst.TEST_OWNER, TestConst.TEST_REPO);\n\n        repoInfoPresenter.onCreateView(null);\n\n        verify(mockView).showError(TestConst.TEST_ERROR);\n        verify(mockView).showBranches(branchList);\n    }", "signature": "void testOnErrorContributors()", "full_signature": "@Test public void testOnErrorContributors()", "class_method_signature": "RepoInfoPresenterTest.testOnErrorContributors()", "testcase": true, "constructor": false, "invocations": ["getRepoContributors", "when", "doAnswer", "error", "onCreateView", "showError", "verify", "showBranches", "verify"]}, "focal_class": {"identifier": "RepoInfoPresenter", "superclass": "extends BasePresenter", "interfaces": "", "fields": [{"original_string": "private static final String BUNDLE_BRANCHES_KEY = \"BUNDLE_BRANCHES_KEY\";", "modifier": "private static final", "type": "String", "declarator": "BUNDLE_BRANCHES_KEY = \"BUNDLE_BRANCHES_KEY\"", "var_name": "BUNDLE_BRANCHES_KEY"}, {"original_string": "private static final String BUNDLE_CONTRIBUTORS_KEY = \"BUNDLE_CONTRIBUTORS_KEY\";", "modifier": "private static final", "type": "String", "declarator": "BUNDLE_CONTRIBUTORS_KEY = \"BUNDLE_CONTRIBUTORS_KEY\"", "var_name": "BUNDLE_CONTRIBUTORS_KEY"}, {"original_string": "private static final int COUNT_SUBSCRIPTION = 2;", "modifier": "private static final", "type": "int", "declarator": "COUNT_SUBSCRIPTION = 2", "var_name": "COUNT_SUBSCRIPTION"}, {"original_string": "@Inject\n    protected RepoBranchesMapper branchesMapper;", "modifier": "@Inject\n    protected", "type": "RepoBranchesMapper", "declarator": "branchesMapper", "var_name": "branchesMapper"}, {"original_string": "@Inject\n    protected RepoContributorsMapper contributorsMapper;", "modifier": "@Inject\n    protected", "type": "RepoContributorsMapper", "declarator": "contributorsMapper", "var_name": "contributorsMapper"}, {"original_string": "private int countCompletedSubscription = 0;", "modifier": "private", "type": "int", "declarator": "countCompletedSubscription = 0", "var_name": "countCompletedSubscription"}, {"original_string": "private RepoInfoView view;", "modifier": "private", "type": "RepoInfoView", "declarator": "view", "var_name": "view"}, {"original_string": "private List<Contributor> contributorList;", "modifier": "private", "type": "List<Contributor>", "declarator": "contributorList", "var_name": "contributorList"}, {"original_string": "private List<Branch> branchList;", "modifier": "private", "type": "List<Branch>", "declarator": "branchList", "var_name": "branchList"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "loadData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadData()", "full_signature": "private void loadData()", "class_method_signature": "RepoInfoPresenter.loadData()", "testcase": false, "constructor": false}, {"identifier": "onCreate", "parameters": "(RepoInfoView view, Repository repository)", "modifiers": "public", "return": "void", "signature": "void onCreate(RepoInfoView view, Repository repository)", "full_signature": "public void onCreate(RepoInfoView view, Repository repository)", "class_method_signature": "RepoInfoPresenter.onCreate(RepoInfoView view, Repository repository)", "testcase": false, "constructor": false}, {"identifier": "hideInfoLoadingState", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void hideInfoLoadingState()", "full_signature": "protected void hideInfoLoadingState()", "class_method_signature": "RepoInfoPresenter.hideInfoLoadingState()", "testcase": false, "constructor": false}, {"identifier": "onCreateView", "parameters": "(Bundle savedInstanceState)", "modifiers": "public", "return": "void", "signature": "void onCreateView(Bundle savedInstanceState)", "full_signature": "public void onCreateView(Bundle savedInstanceState)", "class_method_signature": "RepoInfoPresenter.onCreateView(Bundle savedInstanceState)", "testcase": false, "constructor": false}, {"identifier": "onSaveInstanceState", "parameters": "(Bundle outState)", "modifiers": "public", "return": "void", "signature": "void onSaveInstanceState(Bundle outState)", "full_signature": "public void onSaveInstanceState(Bundle outState)", "class_method_signature": "RepoInfoPresenter.onSaveInstanceState(Bundle outState)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "@Override protected", "return": "View", "signature": "View getView()", "full_signature": "@Override protected View getView()", "class_method_signature": "RepoInfoPresenter.getView()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/andrey7mel/stepbystep/presenter/RepoInfoPresenter.java"}, "focal_method": {"identifier": "onCreateView", "parameters": "(Bundle savedInstanceState)", "modifiers": "public", "return": "void", "body": "public void onCreateView(Bundle savedInstanceState) {\n\n        if (savedInstanceState != null) {\n            contributorList = (List<Contributor>) savedInstanceState.getSerializable(BUNDLE_CONTRIBUTORS_KEY);\n            branchList = (List<Branch>) savedInstanceState.getSerializable(BUNDLE_BRANCHES_KEY);\n        }\n\n        if (contributorList == null || branchList == null) {\n            loadData();\n        } else {\n            view.showBranches(branchList);\n            view.showContributors(contributorList);\n        }\n\n    }", "signature": "void onCreateView(Bundle savedInstanceState)", "full_signature": "public void onCreateView(Bundle savedInstanceState)", "class_method_signature": "RepoInfoPresenter.onCreateView(Bundle savedInstanceState)", "testcase": false, "constructor": false, "invocations": ["getSerializable", "getSerializable", "loadData", "showBranches", "showContributors"]}, "repository": {"repo_id": 48544726, "url": "https://github.com/andrey7mel/android-step-by-step", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 130, "size": 313, "license": "licensed"}}