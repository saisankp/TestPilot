{"test_class": {"identifier": "RunOnMultipleDevicesActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final AndroidProjectRule myRule = AndroidProjectRule.inMemory();", "modifier": "@Rule\n  public final", "type": "AndroidProjectRule", "declarator": "myRule = AndroidProjectRule.inMemory()", "var_name": "myRule"}, {"original_string": "private AnAction myAction;", "modifier": "private", "type": "AnAction", "declarator": "myAction", "var_name": "myAction"}, {"original_string": "private Presentation myPresentation;", "modifier": "private", "type": "Presentation", "declarator": "myPresentation", "var_name": "myPresentation"}, {"original_string": "private AnActionEvent myEvent;", "modifier": "private", "type": "AnActionEvent", "declarator": "myEvent", "var_name": "myEvent"}], "file": "android/testSrc/com/android/tools/idea/run/deployment/RunOnMultipleDevicesActionTest.java"}, "test_case": {"identifier": "updateWithNonSupportedRunConfigurationTypeShouldDisableAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateWithNonSupportedRunConfigurationTypeShouldDisableAction() {\n    // Arrange\n    RunnerAndConfigurationSettings settings = Mockito.mock(RunnerAndConfigurationSettings.class);\n    Mockito.when(settings.getType()).thenReturn(Mockito.mock(ConfigurationType.class));\n\n    myAction = new RunOnMultipleDevicesAction(project -> settings, project -> Collections.emptyList());\n    Mockito.when(myEvent.getProject()).thenReturn(myRule.getProject());\n\n    // Act\n    myAction.update(myEvent);\n\n    // Assert\n    assertFalse(myPresentation.isEnabled());\n  }", "signature": "void updateWithNonSupportedRunConfigurationTypeShouldDisableAction()", "full_signature": "@Test public void updateWithNonSupportedRunConfigurationTypeShouldDisableAction()", "class_method_signature": "RunOnMultipleDevicesActionTest.updateWithNonSupportedRunConfigurationTypeShouldDisableAction()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getType", "mock", "emptyList", "thenReturn", "when", "getProject", "getProject", "update", "assertFalse", "isEnabled"]}, "focal_class": {"identifier": "RunOnMultipleDevicesAction", "superclass": "extends AnAction", "interfaces": "", "fields": [{"original_string": "@NotNull\n  private final Function<Project, RunnerAndConfigurationSettings> myGetSelectedConfiguration;", "modifier": "@NotNull\n  private final", "type": "Function<Project, RunnerAndConfigurationSettings>", "declarator": "myGetSelectedConfiguration", "var_name": "myGetSelectedConfiguration"}, {"original_string": "@NotNull\n  private final Function<Project, Collection<Device>> myGetDevices;", "modifier": "@NotNull\n  private final", "type": "Function<Project, Collection<Device>>", "declarator": "myGetDevices", "var_name": "myGetDevices"}], "methods": [{"identifier": "RunOnMultipleDevicesAction", "parameters": "()", "modifiers": "", "return": "", "signature": " RunOnMultipleDevicesAction()", "full_signature": "  RunOnMultipleDevicesAction()", "class_method_signature": "RunOnMultipleDevicesAction.RunOnMultipleDevicesAction()", "testcase": false, "constructor": true}, {"identifier": "RunOnMultipleDevicesAction", "parameters": "(@NotNull Function<Project, RunnerAndConfigurationSettings> getSelectedConfiguration,\n                             @NotNull Function<Project, Collection<Device>> getDevices)", "modifiers": "@VisibleForTesting", "return": "", "signature": " RunOnMultipleDevicesAction(@NotNull Function<Project, RunnerAndConfigurationSettings> getSelectedConfiguration,\n                             @NotNull Function<Project, Collection<Device>> getDevices)", "full_signature": "@VisibleForTesting  RunOnMultipleDevicesAction(@NotNull Function<Project, RunnerAndConfigurationSettings> getSelectedConfiguration,\n                             @NotNull Function<Project, Collection<Device>> getDevices)", "class_method_signature": "RunOnMultipleDevicesAction.RunOnMultipleDevicesAction(@NotNull Function<Project, RunnerAndConfigurationSettings> getSelectedConfiguration,\n                             @NotNull Function<Project, Collection<Device>> getDevices)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public void update(@NotNull AnActionEvent event)", "class_method_signature": "RunOnMultipleDevicesAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "actionPerformed", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void actionPerformed(@NotNull AnActionEvent event)", "full_signature": "@Override public void actionPerformed(@NotNull AnActionEvent event)", "class_method_signature": "RunOnMultipleDevicesAction.actionPerformed(@NotNull AnActionEvent event)", "testcase": false, "constructor": false}, {"identifier": "findProvider", "parameters": "()", "modifiers": "@Nullable private static", "return": "DeviceAndSnapshotComboBoxTargetProvider", "signature": "DeviceAndSnapshotComboBoxTargetProvider findProvider()", "full_signature": "@Nullable private static DeviceAndSnapshotComboBoxTargetProvider findProvider()", "class_method_signature": "RunOnMultipleDevicesAction.findProvider()", "testcase": false, "constructor": false}, {"identifier": "createBuilder", "parameters": "(@NotNull DataContext context)", "modifiers": "@Nullable private static", "return": "ExecutionEnvironmentBuilder", "signature": "ExecutionEnvironmentBuilder createBuilder(@NotNull DataContext context)", "full_signature": "@Nullable private static ExecutionEnvironmentBuilder createBuilder(@NotNull DataContext context)", "class_method_signature": "RunOnMultipleDevicesAction.createBuilder(@NotNull DataContext context)", "testcase": false, "constructor": false}, {"identifier": "isSupportedRunConfigurationType", "parameters": "(@NotNull ConfigurationType type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSupportedRunConfigurationType(@NotNull ConfigurationType type)", "full_signature": "private static boolean isSupportedRunConfigurationType(@NotNull ConfigurationType type)", "class_method_signature": "RunOnMultipleDevicesAction.isSupportedRunConfigurationType(@NotNull ConfigurationType type)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/RunOnMultipleDevicesAction.java"}, "focal_method": {"identifier": "update", "parameters": "(@NotNull AnActionEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void update(@NotNull AnActionEvent event) {\n    Project project = event.getProject();\n    Presentation presentation = event.getPresentation();\n\n    if (project == null) {\n      presentation.setEnabled(false);\n      return;\n    }\n\n    RunnerAndConfigurationSettings settings = myGetSelectedConfiguration.apply(project);\n\n    if (settings == null) {\n      presentation.setEnabled(false);\n      return;\n    }\n\n    if (!isSupportedRunConfigurationType(settings.getType())) {\n      presentation.setEnabled(false);\n      return;\n    }\n\n    if (myGetDevices.apply(project).isEmpty()) {\n      presentation.setEnabled(false);\n      return;\n    }\n\n    presentation.setEnabled(true);\n  }", "signature": "void update(@NotNull AnActionEvent event)", "full_signature": "@Override public void update(@NotNull AnActionEvent event)", "class_method_signature": "RunOnMultipleDevicesAction.update(@NotNull AnActionEvent event)", "testcase": false, "constructor": false, "invocations": ["getProject", "getPresentation", "setEnabled", "apply", "setEnabled", "isSupportedRunConfigurationType", "getType", "setEnabled", "isEmpty", "apply", "setEnabled", "setEnabled"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}