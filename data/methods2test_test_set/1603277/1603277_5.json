{"test_class": {"identifier": "PaginationBuilderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(PaginationBuilderServiceTest.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PaginationBuilderServiceTest.class)", "var_name": "logger"}, {"original_string": "private PaginationBuilderService paginationBuilderService;", "modifier": "private", "type": "PaginationBuilderService", "declarator": "paginationBuilderService", "var_name": "paginationBuilderService"}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.ui/src/test/java/eu/alertproject/iccs/stardom/ui/utils/PaginationBuilderServiceTest.java"}, "test_case": {"identifier": "testEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnd(){\n\n        Map<String,Object> stringObjectMap = paginationBuilderService.buildPages(13, 15, 6);\n\n        Integer[] pages = (Integer[]) stringObjectMap.get(\"pages\");\n        Integer selected = (Integer) stringObjectMap.get(\"selected\");\n\n\n        Assert.assertEquals(13,selected, 0);\n        Assert.assertEquals(13, pages.length);\n\n        // 1,2,| 3,4,5,6,7,8,9,10,11,12,[13],14,15 |\n        testPages(pages,\n                new Integer[]{\n                      3,4,5,6,7,8,9,10,11,12,13,14,15\n                });\n\n    }", "signature": "void testEnd()", "full_signature": "@Test public void testEnd()", "class_method_signature": "PaginationBuilderServiceTest.testEnd()", "testcase": true, "constructor": false, "invocations": ["buildPages", "get", "get", "assertEquals", "assertEquals", "testPages"]}, "focal_class": {"identifier": "PaginationBuilderService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(PaginationBuilderService.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PaginationBuilderService.class)", "var_name": "logger"}], "methods": [{"identifier": "buildPages", "parameters": "(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "full_signature": "public Map<String, Object> buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "class_method_signature": "PaginationBuilderService.buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "testcase": false, "constructor": false}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.ui/src/main/java/eu/alertproject/iccs/stardom/ui/utils/PaginationBuilderService.java"}, "focal_method": {"identifier": "buildPages", "parameters": "(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    ){\n\n\n        logger.trace(\"Map<String,Object> buildPages(selectedPage= {},totalPages={},depthSize={})\",new Object[]{selectedPage,totalPages,depthSize});\n        Map<String,Object> pagination = new HashMap<String, Object>();\n\n\n        // depthSize*2 = Left an right number of pages\n        // +1 The selected page\n        //protect the return size\n        int returnSize = Math.min(((depthSize*2)+1),totalPages);\n\n        Integer[] pages = new Integer[returnSize];\n\n        /*\n          * If the selected page is less that the depthSize,\n          * there is no need to scroll the bottom results\n         */\n        if(selectedPage <= depthSize+1){\n            logger.trace(\"Map<String,Object> buildPages(pages) Keeping to left side no need to scroll \");\n            //no need to scroll the results\n            for(int i =1; i <= returnSize ; i++){\n                pages[i-1]=i;\n            }\n        }else if( selectedPage > totalPages - (depthSize*2)){\n\n            logger.trace(\"Map<String,Object> buildPages(pages) Working from right <- left, not enough spaces on the right {}\",returnSize);\n\n            //from right to left\n            for(int i =0 ; i < returnSize; i++){\n                pages[i] = (totalPages-returnSize+1)+i;\n            }\n\n\n        }else{\n            //it is in the middle\n            //get the previous four numbers and the next four numbers\n\n            pages[depthSize]=selectedPage;\n            for(int i=0; i< depthSize; i++){\n\n                pages[i]= selectedPage-(depthSize-i);\n                pages[depthSize+1+i] = selectedPage+1+i;\n            }\n\n\n\n        }\n\n\n        pagination.put(\"first\",1);\n        pagination.put(\"pages\",pages);\n        pagination.put(\"last\",totalPages);\n        pagination.put(\"selected\",selectedPage);\n\n        return pagination;\n    }", "signature": "Map<String, Object> buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "full_signature": "public Map<String, Object> buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "class_method_signature": "PaginationBuilderService.buildPages(\n            Integer selectedPage,\n            int totalPages,\n            int depthSize\n    )", "testcase": false, "constructor": false, "invocations": ["trace", "min", "trace", "trace", "put", "put", "put", "put"]}, "repository": {"repo_id": 1603277, "url": "https://github.com/iccs/STARDOM", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 39514, "license": "licensed"}}