{"test_class": {"identifier": "AuthenticationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n  public static final WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());", "modifier": "@ClassRule\n  public static final", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(wireMockConfig().dynamicPort())", "var_name": "wireMockRule"}, {"original_string": "private final String username = Randomness.uniquify(\"username\");", "modifier": "private final", "type": "String", "declarator": "username = Randomness.uniquify(\"username\")", "var_name": "username"}, {"original_string": "private final String token = Randomness.uniquify(\"token\");", "modifier": "private final", "type": "String", "declarator": "token = Randomness.uniquify(\"token\")", "var_name": "token"}, {"original_string": "@Autowired\n  private FixedUrlRestTemplate restTemplate;", "modifier": "@Autowired\n  private", "type": "FixedUrlRestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Autowired\n  private AuthenticationService authenticationService;", "modifier": "@Autowired\n  private", "type": "AuthenticationService", "declarator": "authenticationService", "var_name": "authenticationService"}], "file": "manager/src/test/java/io/servicecomb/company/manager/AuthenticationServiceTest.java"}, "test_case": {"identifier": "timesOutWhenDoormanIsUnresponsive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void timesOutWhenDoormanIsUnresponsive() {\n    ResponseEntity<String> responseEntity = authenticationService.validate(token);\n\n    assertThat(responseEntity.getStatusCode()).isEqualTo(REQUEST_TIMEOUT);\n  }", "signature": "void timesOutWhenDoormanIsUnresponsive()", "full_signature": "@Test public void timesOutWhenDoormanIsUnresponsive()", "class_method_signature": "AuthenticationServiceTest.timesOutWhenDoormanIsUnresponsive()", "testcase": true, "constructor": false, "invocations": ["validate", "isEqualTo", "assertThat", "getStatusCode"]}, "focal_class": {"identifier": "AuthenticationService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AuthenticationService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AuthenticationService.class)", "var_name": "logger"}, {"original_string": "private static final String DOORMAN_ADDRESS = \"cse://doorman\";", "modifier": "private static final", "type": "String", "declarator": "DOORMAN_ADDRESS = \"cse://doorman\"", "var_name": "DOORMAN_ADDRESS"}, {"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "methods": [{"identifier": "AuthenticationService", "parameters": "(RestTemplate restTemplate)", "modifiers": "@Autowired", "return": "", "signature": " AuthenticationService(RestTemplate restTemplate)", "full_signature": "@Autowired  AuthenticationService(RestTemplate restTemplate)", "class_method_signature": "AuthenticationService.AuthenticationService(RestTemplate restTemplate)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(String token)", "modifiers": "@HystrixCommand(fallbackMethod = \"timeout\") public", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> validate(String token)", "full_signature": "@HystrixCommand(fallbackMethod = \"timeout\") public ResponseEntity<String> validate(String token)", "class_method_signature": "AuthenticationService.validate(String token)", "testcase": false, "constructor": false}, {"identifier": "timeout", "parameters": "(String token)", "modifiers": "private", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> timeout(String token)", "full_signature": "private ResponseEntity<String> timeout(String token)", "class_method_signature": "AuthenticationService.timeout(String token)", "testcase": false, "constructor": false}, {"identifier": "validationRequest", "parameters": "(String token)", "modifiers": "private", "return": "HttpEntity<Token>", "signature": "HttpEntity<Token> validationRequest(String token)", "full_signature": "private HttpEntity<Token> validationRequest(String token)", "class_method_signature": "AuthenticationService.validationRequest(String token)", "testcase": false, "constructor": false}], "file": "manager/src/main/java/io/servicecomb/company/manager/AuthenticationService.java"}, "focal_method": {"identifier": "validate", "parameters": "(String token)", "modifiers": "@HystrixCommand(fallbackMethod = \"timeout\") public", "return": "ResponseEntity<String>", "body": "@HystrixCommand(fallbackMethod = \"timeout\")\n  public ResponseEntity<String> validate(String token) {\n    logger.info(\"Validating token {}\", token);\n    ResponseEntity<String> responseEntity = restTemplate.postForEntity(\n        DOORMAN_ADDRESS + \"/rest/validate\",\n        validationRequest(token),\n        String.class\n    );\n\n    if (!responseEntity.getStatusCode().is2xxSuccessful()) {\n      logger.warn(\"No such user found with token {}\", token);\n    }\n    logger.info(\"Validated request of token {} to be user {}\", token, responseEntity.getBody());\n    return responseEntity;\n  }", "signature": "ResponseEntity<String> validate(String token)", "full_signature": "@HystrixCommand(fallbackMethod = \"timeout\") public ResponseEntity<String> validate(String token)", "class_method_signature": "AuthenticationService.validate(String token)", "testcase": false, "constructor": false, "invocations": ["info", "postForEntity", "validationRequest", "is2xxSuccessful", "getStatusCode", "warn", "info", "getBody"]}, "repository": {"repo_id": 93611636, "url": "https://github.com/huaweicse/ServiceComb-Company-WorkShop", "language": "Java", "is_fork": false, "fork_count": 49, "stargazer_count": 79, "size": 1350, "license": "licensed"}}