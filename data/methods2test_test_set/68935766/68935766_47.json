{"test_class": {"identifier": "PointTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Point POINT = new Point(null, 1, 2, 3, 90, 180);", "modifier": "static final", "type": "Point", "declarator": "POINT = new Point(null, 1, 2, 3, 90, 180)", "var_name": "POINT"}, {"original_string": "Point point = new Point();", "modifier": "", "type": "Point", "declarator": "point = new Point()", "var_name": "point"}, {"original_string": "Vector vector = new Vector();", "modifier": "", "type": "Vector", "declarator": "vector = new Vector()", "var_name": "vector"}, {"original_string": "Point source = new Point(1, 2, 3);", "modifier": "", "type": "Point", "declarator": "source = new Point(1, 2, 3)", "var_name": "source"}, {"original_string": "Point origin = new Point(null, 1, 2, 3, 90, 180);", "modifier": "", "type": "Point", "declarator": "origin = new Point(null, 1, 2, 3, 90, 180)", "var_name": "origin"}], "file": "commons/src/test/java/com/karuslabs/commons/util/PointTest.java"}, "test_case": {"identifier": "align", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void align() {\n        var position = new Point(1, 2, 3).relative(Axis.X, true).relative(Axis.Y, true).relative(Axis.Z, true).rotation(true);\n        var origin = new Point(null, 1, 2, 3, 90, 180);\n        \n        position.align(origin);\n        \n        assertEquals(new Point(2, -4, -6).relative(Axis.X, true).relative(Axis.Y, true).relative(Axis.Z, true).rotation(true), position);\n    }", "signature": "void align()", "full_signature": "@Test void align()", "class_method_signature": "PointTest.align()", "testcase": true, "constructor": false, "invocations": ["rotation", "relative", "relative", "relative", "align", "assertEquals", "rotation", "relative", "relative", "relative"]}, "focal_class": {"identifier": "Point", "superclass": "extends Location", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.000001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.000001", "var_name": "EPSILON"}, {"original_string": "private static final int X = 0;", "modifier": "private static final", "type": "int", "declarator": "X = 0", "var_name": "X"}, {"original_string": "private static final int Y = 1;", "modifier": "private static final", "type": "int", "declarator": "Y = 1", "var_name": "Y"}, {"original_string": "private static final int Z = 2;", "modifier": "private static final", "type": "int", "declarator": "Z = 2", "var_name": "Z"}, {"original_string": "private boolean[] relative;", "modifier": "private", "type": "boolean[]", "declarator": "relative", "var_name": "relative"}, {"original_string": "private boolean rotation;", "modifier": "private", "type": "boolean", "declarator": "rotation", "var_name": "rotation"}], "methods": [{"identifier": "Point", "parameters": "()", "modifiers": "public", "return": "", "signature": " Point()", "full_signature": "public  Point()", "class_method_signature": "Point.Point()", "testcase": false, "constructor": true}, {"identifier": "Point", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "", "signature": " Point(double x, double y, double z)", "full_signature": "public  Point(double x, double y, double z)", "class_method_signature": "Point.Point(double x, double y, double z)", "testcase": false, "constructor": true}, {"identifier": "Point", "parameters": "(@Nullable World world, double x, double y, double z)", "modifiers": "public", "return": "", "signature": " Point(@Nullable World world, double x, double y, double z)", "full_signature": "public  Point(@Nullable World world, double x, double y, double z)", "class_method_signature": "Point.Point(@Nullable World world, double x, double y, double z)", "testcase": false, "constructor": true}, {"identifier": "Point", "parameters": "(@Nullable World world, double x, double y, double z, float yaw, float pitch)", "modifiers": "public", "return": "", "signature": " Point(@Nullable World world, double x, double y, double z, float yaw, float pitch)", "full_signature": "public  Point(@Nullable World world, double x, double y, double z, float yaw, float pitch)", "class_method_signature": "Point.Point(@Nullable World world, double x, double y, double z, float yaw, float pitch)", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(Location origin, Location result)", "modifiers": "public", "return": "void", "signature": "void copy(Location origin, Location result)", "full_signature": "public void copy(Location origin, Location result)", "class_method_signature": "Point.copy(Location origin, Location result)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(Location origin, Vector result)", "modifiers": "public", "return": "void", "signature": "void copy(Location origin, Vector result)", "full_signature": "public void copy(Location origin, Vector result)", "class_method_signature": "Point.copy(Location origin, Vector result)", "testcase": false, "constructor": false}, {"identifier": "align", "parameters": "(Location origin)", "modifiers": "public", "return": "void", "signature": "void align(Location origin)", "full_signature": "public void align(Location origin)", "class_method_signature": "Point.align(Location origin)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Axis axis, double value)", "modifiers": "public", "return": "Point", "signature": "Point set(Axis axis, double value)", "full_signature": "public Point set(Axis axis, double value)", "class_method_signature": "Point.set(Axis axis, double value)", "testcase": false, "constructor": false}, {"identifier": "relative", "parameters": "(Axis axis)", "modifiers": "public", "return": "boolean", "signature": "boolean relative(Axis axis)", "full_signature": "public boolean relative(Axis axis)", "class_method_signature": "Point.relative(Axis axis)", "testcase": false, "constructor": false}, {"identifier": "relative", "parameters": "(Axis axis, boolean relative)", "modifiers": "public", "return": "Point", "signature": "Point relative(Axis axis, boolean relative)", "full_signature": "public Point relative(Axis axis, boolean relative)", "class_method_signature": "Point.relative(Axis axis, boolean relative)", "testcase": false, "constructor": false}, {"identifier": "rotation", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean rotation()", "full_signature": "public boolean rotation()", "class_method_signature": "Point.rotation()", "testcase": false, "constructor": false}, {"identifier": "rotation", "parameters": "(boolean rotation)", "modifiers": "public", "return": "Point", "signature": "Point rotation(boolean rotation)", "full_signature": "public Point rotation(boolean rotation)", "class_method_signature": "Point.rotation(boolean rotation)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object object)", "full_signature": "@Override public boolean equals(Object object)", "class_method_signature": "Point.equals(Object object)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Point.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Point.toString()", "testcase": false, "constructor": false}, {"identifier": "point", "parameters": "(double point, int axis)", "modifiers": "private", "return": "String", "signature": "String point(double point, int axis)", "full_signature": "private String point(double point, int axis)", "class_method_signature": "Point.point(double point, int axis)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/Point.java"}, "focal_method": {"identifier": "align", "parameters": "(Location origin)", "modifiers": "public", "return": "void", "body": "public void align(Location origin) {\n        if (relative[X]) setX(getX() + origin.getX());\n        if (relative[Y]) setY(getY() + origin.getY());\n        if (relative[Z]) setZ(getZ() + origin.getZ());\n        if (rotation) Vectors.rotate(this, origin);\n    }", "signature": "void align(Location origin)", "full_signature": "public void align(Location origin)", "class_method_signature": "Point.align(Location origin)", "testcase": false, "constructor": false, "invocations": ["setX", "getX", "getX", "setY", "getY", "getY", "setZ", "getZ", "getZ", "rotate"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}