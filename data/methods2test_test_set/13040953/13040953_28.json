{"test_class": {"identifier": "DateParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "rome/src/test/java/com/rometools/rome/io/impl/DateParserTest.java"}, "test_case": {"identifier": "parseW3CDateTimeIsOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseW3CDateTimeIsOk() throws Exception {\n        assertEquals(\n                new Date(1000),\n                DateParser.parseW3CDateTime(\"1970-01-01T00:00:01+00:00\", Locale.GERMANY)\n        );\n    }", "signature": "void parseW3CDateTimeIsOk()", "full_signature": "@Test public void parseW3CDateTimeIsOk()", "class_method_signature": "DateParserTest.parseW3CDateTimeIsOk()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseW3CDateTime"]}, "focal_class": {"identifier": "DateParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String[] ADDITIONAL_MASKS;", "modifier": "private static", "type": "String[]", "declarator": "ADDITIONAL_MASKS", "var_name": "ADDITIONAL_MASKS"}, {"original_string": "private static final String[] RFC822_MASKS = { \"EEE, dd MMM yy HH:mm:ss z\", \"EEE, dd MMM yy HH:mm z\", \"dd MMM yy HH:mm:ss z\", \"dd MMM yy HH:mm z\" };", "modifier": "private static final", "type": "String[]", "declarator": "RFC822_MASKS = { \"EEE, dd MMM yy HH:mm:ss z\", \"EEE, dd MMM yy HH:mm z\", \"dd MMM yy HH:mm:ss z\", \"dd MMM yy HH:mm z\" }", "var_name": "RFC822_MASKS"}, {"original_string": "private static final String[] W3CDATETIME_MASKS = { \"yyyy-MM-dd'T'HH:mm:ss.SSSz\", \"yyyy-MM-dd't'HH:mm:ss.SSSz\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\n            \"yyyy-MM-dd't'HH:mm:ss.SSS'z'\", \"yyyy-MM-dd'T'HH:mm:ssz\", \"yyyy-MM-dd't'HH:mm:ssz\", \"yyyy-MM-dd'T'HH:mm:ssZ\", \"yyyy-MM-dd't'HH:mm:ssZ\",\n            \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd't'HH:mm:ss'z'\", \"yyyy-MM-dd'T'HH:mmz\", // together\n            // with\n            // logic\n            // in\n            // the\n            // parseW3CDateTime\n            // they\n            \"yyyy-MM'T'HH:mmz\", // handle W3C dates without time forcing them to\n            // be GMT\n            \"yyyy'T'HH:mmz\", \"yyyy-MM-dd't'HH:mmz\", \"yyyy-MM-dd'T'HH:mm'Z'\", \"yyyy-MM-dd't'HH:mm'z'\", \"yyyy-MM-dd\", \"yyyy-MM\", \"yyyy\" };", "modifier": "private static final", "type": "String[]", "declarator": "W3CDATETIME_MASKS = { \"yyyy-MM-dd'T'HH:mm:ss.SSSz\", \"yyyy-MM-dd't'HH:mm:ss.SSSz\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\n            \"yyyy-MM-dd't'HH:mm:ss.SSS'z'\", \"yyyy-MM-dd'T'HH:mm:ssz\", \"yyyy-MM-dd't'HH:mm:ssz\", \"yyyy-MM-dd'T'HH:mm:ssZ\", \"yyyy-MM-dd't'HH:mm:ssZ\",\n            \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd't'HH:mm:ss'z'\", \"yyyy-MM-dd'T'HH:mmz\", // together\n            // with\n            // logic\n            // in\n            // the\n            // parseW3CDateTime\n            // they\n            \"yyyy-MM'T'HH:mmz\", // handle W3C dates without time forcing them to\n            // be GMT\n            \"yyyy'T'HH:mmz\", \"yyyy-MM-dd't'HH:mmz\", \"yyyy-MM-dd'T'HH:mm'Z'\", \"yyyy-MM-dd't'HH:mm'z'\", \"yyyy-MM-dd\", \"yyyy-MM\", \"yyyy\" }", "var_name": "W3CDATETIME_MASKS"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final String[] masks = { \"yyyy-MM-dd'T'HH:mm:ss.SSSz\", \"yyyy-MM-dd't'HH:mm:ss.SSSz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd't'HH:mm:ss.SSS'z'\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ssz\", \"yyyy-MM-dd't'HH:mm:ssz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd't'HH:mm:ss'z'\", // invalid\n            \"yyyy-MM-dd'T'HH:mmz\", // invalid\n            \"yyyy-MM-dd't'HH:mmz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm'Z'\", // invalid\n            \"yyyy-MM-dd't'HH:mm'z'\", // invalid\n            \"yyyy-MM-dd\", \"yyyy-MM\", \"yyyy\" };", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "String[]", "declarator": "masks = { \"yyyy-MM-dd'T'HH:mm:ss.SSSz\", \"yyyy-MM-dd't'HH:mm:ss.SSSz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd't'HH:mm:ss.SSS'z'\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ssz\", \"yyyy-MM-dd't'HH:mm:ssz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd't'HH:mm:ss'z'\", // invalid\n            \"yyyy-MM-dd'T'HH:mmz\", // invalid\n            \"yyyy-MM-dd't'HH:mmz\", // invalid\n            \"yyyy-MM-dd'T'HH:mm'Z'\", // invalid\n            \"yyyy-MM-dd't'HH:mm'z'\", // invalid\n            \"yyyy-MM-dd\", \"yyyy-MM\", \"yyyy\" }", "var_name": "masks"}], "methods": [{"identifier": "DateParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateParser()", "full_signature": "private  DateParser()", "class_method_signature": "DateParser.DateParser()", "testcase": false, "constructor": true}, {"identifier": "parseUsingMask", "parameters": "(final String[] masks, String sDate, final Locale locale)", "modifiers": "private static", "return": "Date", "signature": "Date parseUsingMask(final String[] masks, String sDate, final Locale locale)", "full_signature": "private static Date parseUsingMask(final String[] masks, String sDate, final Locale locale)", "class_method_signature": "DateParser.parseUsingMask(final String[] masks, String sDate, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "parseRFC822", "parameters": "(String sDate, final Locale locale)", "modifiers": "public static", "return": "Date", "signature": "Date parseRFC822(String sDate, final Locale locale)", "full_signature": "public static Date parseRFC822(String sDate, final Locale locale)", "class_method_signature": "DateParser.parseRFC822(String sDate, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "convertUnsupportedTimeZones", "parameters": "(String sDate)", "modifiers": "private static", "return": "String", "signature": "String convertUnsupportedTimeZones(String sDate)", "full_signature": "private static String convertUnsupportedTimeZones(String sDate)", "class_method_signature": "DateParser.convertUnsupportedTimeZones(String sDate)", "testcase": false, "constructor": false}, {"identifier": "replaceLastOccurrence", "parameters": "(String original, String target, String replacement)", "modifiers": "private static", "return": "String", "signature": "String replaceLastOccurrence(String original, String target, String replacement)", "full_signature": "private static String replaceLastOccurrence(String original, String target, String replacement)", "class_method_signature": "DateParser.replaceLastOccurrence(String original, String target, String replacement)", "testcase": false, "constructor": false}, {"identifier": "parseW3CDateTime", "parameters": "(String sDate, final Locale locale)", "modifiers": "public static", "return": "Date", "signature": "Date parseW3CDateTime(String sDate, final Locale locale)", "full_signature": "public static Date parseW3CDateTime(String sDate, final Locale locale)", "class_method_signature": "DateParser.parseW3CDateTime(String sDate, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final String sDate, final Locale locale)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(final String sDate, final Locale locale)", "full_signature": "public static Date parseDate(final String sDate, final Locale locale)", "class_method_signature": "DateParser.parseDate(final String sDate, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatRFC822", "parameters": "(final Date date, final Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatRFC822(final Date date, final Locale locale)", "full_signature": "public static String formatRFC822(final Date date, final Locale locale)", "class_method_signature": "DateParser.formatRFC822(final Date date, final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatW3CDateTime", "parameters": "(final Date date, final Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatW3CDateTime(final Date date, final Locale locale)", "full_signature": "public static String formatW3CDateTime(final Date date, final Locale locale)", "class_method_signature": "DateParser.formatW3CDateTime(final Date date, final Locale locale)", "testcase": false, "constructor": false}], "file": "rome/src/main/java/com/rometools/rome/io/impl/DateParser.java"}, "focal_method": {"identifier": "parseW3CDateTime", "parameters": "(String sDate, final Locale locale)", "modifiers": "public static", "return": "Date", "body": "public static Date parseW3CDateTime(String sDate, final Locale locale) {\n        // if sDate has time on it, it injects 'GTM' before de TZ displacement to allow the\n        // SimpleDateFormat parser to parse it properly\n        final int tIndex = sDate.indexOf(\"T\");\n        if (tIndex > -1) {\n            if (sDate.endsWith(\"Z\")) {\n                sDate = sDate.substring(0, sDate.length() - 1) + \"+00:00\";\n            }\n            int tzdIndex = sDate.indexOf(\"+\", tIndex);\n            if (tzdIndex == -1) {\n                tzdIndex = sDate.indexOf(\"-\", tIndex);\n            }\n            if (tzdIndex > -1) {\n                String pre = sDate.substring(0, tzdIndex);\n                final int secFraction = pre.indexOf(\",\");\n                if (secFraction > -1) {\n                    pre = pre.substring(0, secFraction);\n                }\n                final String post = sDate.substring(tzdIndex);\n                sDate = pre + \"GMT\" + post;\n            }\n        } else {\n            sDate += \"T00:00GMT\";\n        }\n        return parseUsingMask(W3CDATETIME_MASKS, sDate, locale);\n    }", "signature": "Date parseW3CDateTime(String sDate, final Locale locale)", "full_signature": "public static Date parseW3CDateTime(String sDate, final Locale locale)", "class_method_signature": "DateParser.parseW3CDateTime(String sDate, final Locale locale)", "testcase": false, "constructor": false, "invocations": ["indexOf", "endsWith", "substring", "length", "indexOf", "indexOf", "substring", "indexOf", "substring", "substring", "parseUsingMask"]}, "repository": {"repo_id": 13040953, "url": "https://github.com/rometools/rome", "stars": 594, "created": "9/23/2013 4:35:35 PM +00:00", "updates": "2020-01-16T10:28:05+00:00", "fork": "False", "license": "licensed"}}