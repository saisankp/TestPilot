{"test_class": {"identifier": "JsonFileMetadataStatementsProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectConverter objectConverter;", "modifier": "private final", "type": "ObjectConverter", "declarator": "objectConverter", "var_name": "objectConverter"}], "file": "webauthn4j-metadata/src/test/java/com/webauthn4j/metadata/JsonFileMetadataStatementsProviderTest.java"}, "test_case": {"identifier": "fetchMetadata", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void fetchMetadata() throws URISyntaxException {\n        List<Path> paths = new ArrayList<>(4);\n        paths.add(Paths.get(ClassLoader.getSystemResource(\"com/webauthn4j/metadata/JsonMetadataItem_fido2.json\").toURI()));\n        paths.add(Paths.get(ClassLoader.getSystemResource(\"com/webauthn4j/metadata/JsonMetadataItem_u2f.json\").toURI()));\n        paths.add(Paths.get(ClassLoader.getSystemResource(\"com/webauthn4j/metadata/JsonMetadataItem_uaf.json\").toURI()));\n        JsonFileMetadataStatementsProvider provider = new JsonFileMetadataStatementsProvider(objectConverter, paths);\n        Map<AAGUID, Set<MetadataStatement>> itemMapInFirstCall = provider.provide();\n        readMetadataItem(itemMapInFirstCall);\n        // read again to run through all branches of JsonFileMetadataStatementsProvider.provider(), and confirm it\n        Map<AAGUID, Set<MetadataStatement>> itemMap = provider.provide();\n        readMetadataItem(itemMap);\n        assertThat(itemMap).isSameAs(itemMapInFirstCall);\n    }", "signature": "void fetchMetadata()", "full_signature": "@Test void fetchMetadata()", "class_method_signature": "JsonFileMetadataStatementsProviderTest.fetchMetadata()", "testcase": true, "constructor": false, "invocations": ["add", "get", "toURI", "getSystemResource", "add", "get", "toURI", "getSystemResource", "add", "get", "toURI", "getSystemResource", "provide", "readMetadataItem", "provide", "readMetadataItem", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "JsonFileMetadataStatementsProvider", "superclass": "", "interfaces": "implements MetadataStatementsProvider", "fields": [{"original_string": "private final JsonConverter jsonConverter;", "modifier": "private final", "type": "JsonConverter", "declarator": "jsonConverter", "var_name": "jsonConverter"}, {"original_string": "private List<Path> paths = Collections.emptyList();", "modifier": "private", "type": "List<Path>", "declarator": "paths = Collections.emptyList()", "var_name": "paths"}, {"original_string": "private Map<AAGUID, Set<MetadataStatement>> cachedMetadataItems;", "modifier": "private", "type": "Map<AAGUID, Set<MetadataStatement>>", "declarator": "cachedMetadataItems", "var_name": "cachedMetadataItems"}, {"original_string": "private final MetadataStatementValidator metadataStatementValidator = new MetadataStatementValidator();", "modifier": "private final", "type": "MetadataStatementValidator", "declarator": "metadataStatementValidator = new MetadataStatementValidator()", "var_name": "metadataStatementValidator"}], "methods": [{"identifier": "JsonFileMetadataStatementsProvider", "parameters": "(ObjectConverter objectConverter, List<Path> paths)", "modifiers": "public", "return": "", "signature": " JsonFileMetadataStatementsProvider(ObjectConverter objectConverter, List<Path> paths)", "full_signature": "public  JsonFileMetadataStatementsProvider(ObjectConverter objectConverter, List<Path> paths)", "class_method_signature": "JsonFileMetadataStatementsProvider.JsonFileMetadataStatementsProvider(ObjectConverter objectConverter, List<Path> paths)", "testcase": false, "constructor": true}, {"identifier": "provide", "parameters": "()", "modifiers": "@Override public", "return": "Map<AAGUID, Set<MetadataStatement>>", "signature": "Map<AAGUID, Set<MetadataStatement>> provide()", "full_signature": "@Override public Map<AAGUID, Set<MetadataStatement>> provide()", "class_method_signature": "JsonFileMetadataStatementsProvider.provide()", "testcase": false, "constructor": false}, {"identifier": "extractAAGUID", "parameters": "(MetadataStatement metadataStatement)", "modifiers": "private", "return": "AAGUID", "signature": "AAGUID extractAAGUID(MetadataStatement metadataStatement)", "full_signature": "private AAGUID extractAAGUID(MetadataStatement metadataStatement)", "class_method_signature": "JsonFileMetadataStatementsProvider.extractAAGUID(MetadataStatement metadataStatement)", "testcase": false, "constructor": false}, {"identifier": "readJsonFile", "parameters": "(Path path)", "modifiers": "", "return": "MetadataStatement", "signature": "MetadataStatement readJsonFile(Path path)", "full_signature": " MetadataStatement readJsonFile(Path path)", "class_method_signature": "JsonFileMetadataStatementsProvider.readJsonFile(Path path)", "testcase": false, "constructor": false}], "file": "webauthn4j-metadata/src/main/java/com/webauthn4j/metadata/JsonFileMetadataStatementsProvider.java"}, "focal_method": {"identifier": "provide", "parameters": "()", "modifiers": "@Override public", "return": "Map<AAGUID, Set<MetadataStatement>>", "body": "@Override\n    public Map<AAGUID, Set<MetadataStatement>> provide() {\n        if (cachedMetadataItems == null) {\n            cachedMetadataItems =\n                    paths.stream()\n                            .map(this::readJsonFile)\n                            .distinct()\n                            .collect(Collectors.groupingBy(this::extractAAGUID))\n                            .entrySet().stream()\n                            .collect(Collectors.toMap(Map.Entry::getKey, entry -> new HashSet<>(entry.getValue())));\n\n        }\n        return cachedMetadataItems;\n    }", "signature": "Map<AAGUID, Set<MetadataStatement>> provide()", "full_signature": "@Override public Map<AAGUID, Set<MetadataStatement>> provide()", "class_method_signature": "JsonFileMetadataStatementsProvider.provide()", "testcase": false, "constructor": false, "invocations": ["collect", "stream", "entrySet", "collect", "distinct", "map", "stream", "groupingBy", "toMap", "getValue"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}