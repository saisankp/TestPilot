{"test_class": {"identifier": "LargestPerTimeBucketTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NO_BUCKETS = Long.MAX_VALUE;", "modifier": "private static final", "type": "long", "declarator": "NO_BUCKETS = Long.MAX_VALUE", "var_name": "NO_BUCKETS"}, {"original_string": "private TestScheduler testScheduler;", "modifier": "private", "type": "TestScheduler", "declarator": "testScheduler", "var_name": "testScheduler"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/batch/LargestPerTimeBucketTest.java"}, "test_case": {"identifier": "biggerBatchesInTheSameBucketGoFirst", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void biggerBatchesInTheSameBucketGoFirst() {\n        final long groupInBucketsOfMs = 60_000 /* 1min */;\n        final Instant now = Instant.ofEpochMilli(testScheduler.now());\n        final Instant past = now.minus(ofMinutes(10));\n        final Stream<Batch<BatchableOperationMock, String>> batches = Stream.of(\n                // 1-3 are in the same minute\n                Batch.of(\"smaller\",\n                        new BatchableOperationMock(LOW, now, \"smaller\", \"sub1\", \"foo\"),\n                        new BatchableOperationMock(LOW, past.minus(ofSeconds(10)), \"smaller\", \"sub2\", \"foo\")\n                ),\n                Batch.of(\"bigger\",\n                        new BatchableOperationMock(LOW, past, \"bigger\", \"sub1\", \"foo\"),\n                        new BatchableOperationMock(HIGH, now.minus(ofMinutes(5)), \"bigger\", \"sub2\", \"foo\"),\n                        new BatchableOperationMock(LOW, now, \"bigger\", \"sub3\", \"foo\")\n                ),\n                Batch.of(\"slightlyOlder\",\n                        new BatchableOperationMock(LOW, now, \"slightlyOlder\", \"sub1\", \"foo\"),\n                        new BatchableOperationMock(LOW, past.minus(ofSeconds(11)), \"slightlyOlder\", \"sub2\", \"foo\")\n                ),\n                Batch.of(\"older\",\n                        new BatchableOperationMock(LOW, past.minus(ofMinutes(5)), \"older\", \"sub1\", \"foo\")\n                )\n        );\n\n        EmissionStrategy strategy = new LargestPerTimeBucket(0, groupInBucketsOfMs, testScheduler);\n        Queue<Batch<BatchableOperationMock, String>> toEmit = strategy.compute(batches);\n        Assertions.assertThat(toEmit).hasSize(4);\n        assertThat(toEmit.poll().getIndex()).isEqualTo(\"older\");\n        // all following are in the same time bucket. Bigger go first, if same size, order by timestamp\n        assertThat(toEmit.poll().getIndex()).isEqualTo(\"bigger\");\n        assertThat(toEmit.poll().getIndex()).isEqualTo(\"slightlyOlder\");\n        assertThat(toEmit.poll().getIndex()).isEqualTo(\"smaller\");\n    }", "signature": "void biggerBatchesInTheSameBucketGoFirst()", "full_signature": "@Test public void biggerBatchesInTheSameBucketGoFirst()", "class_method_signature": "LargestPerTimeBucketTest.biggerBatchesInTheSameBucketGoFirst()", "testcase": true, "constructor": false, "invocations": ["ofEpochMilli", "now", "minus", "ofMinutes", "of", "of", "minus", "ofSeconds", "of", "minus", "ofMinutes", "of", "minus", "ofSeconds", "of", "minus", "ofMinutes", "compute", "hasSize", "assertThat", "isEqualTo", "assertThat", "getIndex", "poll", "isEqualTo", "assertThat", "getIndex", "poll", "isEqualTo", "assertThat", "getIndex", "poll", "isEqualTo", "assertThat", "getIndex", "poll"]}, "focal_class": {"identifier": "LargestPerTimeBucket", "superclass": "", "interfaces": "implements EmissionStrategy", "fields": [{"original_string": "private final long minimumTimeInQueueMs;", "modifier": "private final", "type": "long", "declarator": "minimumTimeInQueueMs", "var_name": "minimumTimeInQueueMs"}, {"original_string": "private final long timeWindowBucketSizeMs;", "modifier": "private final", "type": "long", "declarator": "timeWindowBucketSizeMs", "var_name": "timeWindowBucketSizeMs"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "LargestPerTimeBucket", "parameters": "(long minimumTimeInQueueMs, long timeWindowBucketSizeMs, Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " LargestPerTimeBucket(long minimumTimeInQueueMs, long timeWindowBucketSizeMs, Scheduler scheduler)", "full_signature": "public  LargestPerTimeBucket(long minimumTimeInQueueMs, long timeWindowBucketSizeMs, Scheduler scheduler)", "class_method_signature": "LargestPerTimeBucket.LargestPerTimeBucket(long minimumTimeInQueueMs, long timeWindowBucketSizeMs, Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "compute", "parameters": "(Stream<Batch<T, I>> candidates)", "modifiers": "@Override public", "return": "Queue<Batch<T, I>>", "signature": "Queue<Batch<T, I>> compute(Stream<Batch<T, I>> candidates)", "full_signature": "@Override public Queue<Batch<T, I>> compute(Stream<Batch<T, I>> candidates)", "class_method_signature": "LargestPerTimeBucket.compute(Stream<Batch<T, I>> candidates)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Batch<T, I> one, Batch<T, I> other)", "modifiers": "private", "return": "int", "signature": "int compare(Batch<T, I> one, Batch<T, I> other)", "full_signature": "private int compare(Batch<T, I> one, Batch<T, I> other)", "class_method_signature": "LargestPerTimeBucket.compare(Batch<T, I> one, Batch<T, I> other)", "testcase": false, "constructor": false}, {"identifier": "bucketFor", "parameters": "(Instant timestamp)", "modifiers": "private", "return": "long", "signature": "long bucketFor(Instant timestamp)", "full_signature": "private long bucketFor(Instant timestamp)", "class_method_signature": "LargestPerTimeBucket.bucketFor(Instant timestamp)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/batch/LargestPerTimeBucket.java"}, "focal_method": {"identifier": "compute", "parameters": "(Stream<Batch<T, I>> candidates)", "modifiers": "@Override public", "return": "Queue<Batch<T, I>>", "body": "@Override\n    public <T extends Batchable<?>, I> Queue<Batch<T, I>> compute(Stream<Batch<T, I>> candidates) {\n        // TODO: break too large candidates by a configurable maxBatchSize\n\n        final Instant now = Instant.ofEpochMilli(scheduler.now());\n        final Instant cutLine = now.minus(minimumTimeInQueueMs, ChronoUnit.MILLIS);\n        final Stream<Batch<T, I>> inQueueMinimumRequired = candidates.filter(\n                batch -> !batch.getOldestItemTimestamp().isAfter(cutLine)\n        );\n\n        PriorityQueue<Batch<T, I>> queue = new PriorityQueue<>(this::compare);\n        inQueueMinimumRequired.forEach(queue::offer);\n        return queue;\n    }", "signature": "Queue<Batch<T, I>> compute(Stream<Batch<T, I>> candidates)", "full_signature": "@Override public Queue<Batch<T, I>> compute(Stream<Batch<T, I>> candidates)", "class_method_signature": "LargestPerTimeBucket.compute(Stream<Batch<T, I>> candidates)", "testcase": false, "constructor": false, "invocations": ["ofEpochMilli", "now", "minus", "filter", "isAfter", "getOldestItemTimestamp", "forEach"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}