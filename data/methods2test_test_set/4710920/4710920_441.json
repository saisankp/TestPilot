{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java"}, "test_case": {"identifier": "testSplitToSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSplitToSet() {\n        String value = \"1# 2#3 #4#3\";\n        Set<String> values = splitToSet(value, '#', false);\n        assertEquals(ofSet(\"1\", \" 2\", \"3 \", \"4\", \"3\"), values);\n\n        values = splitToSet(value, '#', true);\n        assertEquals(ofSet(\"1\", \"2\", \"3\", \"4\"), values);\n    }", "signature": "void testSplitToSet()", "full_signature": "@Test public void testSplitToSet()", "class_method_signature": "StringUtilsTest.testSplitToSet()", "testcase": true, "constructor": false, "invocations": ["splitToSet", "assertEquals", "ofSet", "splitToSet", "assertEquals", "ofSet"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY_STRING = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "public static final int INDEX_NOT_FOUND = -1;", "modifier": "public static final", "type": "int", "declarator": "INDEX_NOT_FOUND = -1", "var_name": "INDEX_NOT_FOUND"}, {"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(StringUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StringUtils.class)", "var_name": "logger"}, {"original_string": "private static final Pattern KVP_PATTERN = Pattern.compile(\"([_.a-zA-Z0-9][-_.a-zA-Z0-9]*)[=](.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "KVP_PATTERN = Pattern.compile(\"([_.a-zA-Z0-9][-_.a-zA-Z0-9]*)[=](.*)\")", "var_name": "KVP_PATTERN"}, {"original_string": "private static final Pattern INT_PATTERN = Pattern.compile(\"^\\\\d+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "INT_PATTERN = Pattern.compile(\"^\\\\d+$\")", "var_name": "INT_PATTERN"}, {"original_string": "private static final Pattern PARAMETERS_PATTERN = Pattern.compile(\"^\\\\[((\\\\s*\\\\{\\\\s*[\\\\w_\\\\-\\\\.]+\\\\s*:\\\\s*.+?\\\\s*\\\\}\\\\s*,?\\\\s*)+)\\\\s*\\\\]$\");", "modifier": "private static final", "type": "Pattern", "declarator": "PARAMETERS_PATTERN = Pattern.compile(\"^\\\\[((\\\\s*\\\\{\\\\s*[\\\\w_\\\\-\\\\.]+\\\\s*:\\\\s*.+?\\\\s*\\\\}\\\\s*,?\\\\s*)+)\\\\s*\\\\]$\")", "var_name": "PARAMETERS_PATTERN"}, {"original_string": "private static final Pattern PAIR_PARAMETERS_PATTERN = Pattern.compile(\"^\\\\{\\\\s*([\\\\w-_\\\\.]+)\\\\s*:\\\\s*(.+)\\\\s*\\\\}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "PAIR_PARAMETERS_PATTERN = Pattern.compile(\"^\\\\{\\\\s*([\\\\w-_\\\\.]+)\\\\s*:\\\\s*(.+)\\\\s*\\\\}$\")", "var_name": "PAIR_PARAMETERS_PATTERN"}, {"original_string": "private static final int PAD_LIMIT = 8192;", "modifier": "private static final", "type": "int", "declarator": "PAD_LIMIT = 8192", "var_name": "PAD_LIMIT"}, {"original_string": "private static final byte[] HEX2B;", "modifier": "private static final", "type": "byte[]", "declarator": "HEX2B", "var_name": "HEX2B"}, {"original_string": "public static final char EQUAL_CHAR = '=';", "modifier": "public static final", "type": "char", "declarator": "EQUAL_CHAR = '='", "var_name": "EQUAL_CHAR"}, {"original_string": "public static final String EQUAL = valueOf(EQUAL_CHAR);", "modifier": "public static final", "type": "String", "declarator": "EQUAL = valueOf(EQUAL_CHAR)", "var_name": "EQUAL"}, {"original_string": "public static final char AND_CHAR = '&';", "modifier": "public static final", "type": "char", "declarator": "AND_CHAR = '&'", "var_name": "AND_CHAR"}, {"original_string": "public static final String AND = valueOf(AND_CHAR);", "modifier": "public static final", "type": "String", "declarator": "AND = valueOf(AND_CHAR)", "var_name": "AND"}, {"original_string": "public static final char SEMICOLON_CHAR = ';';", "modifier": "public static final", "type": "char", "declarator": "SEMICOLON_CHAR = ';'", "var_name": "SEMICOLON_CHAR"}, {"original_string": "public static final String SEMICOLON = valueOf(SEMICOLON_CHAR);", "modifier": "public static final", "type": "String", "declarator": "SEMICOLON = valueOf(SEMICOLON_CHAR)", "var_name": "SEMICOLON"}, {"original_string": "public static final char QUESTION_MASK_CHAR = '?';", "modifier": "public static final", "type": "char", "declarator": "QUESTION_MASK_CHAR = '?'", "var_name": "QUESTION_MASK_CHAR"}, {"original_string": "public static final String QUESTION_MASK = valueOf(QUESTION_MASK_CHAR);", "modifier": "public static final", "type": "String", "declarator": "QUESTION_MASK = valueOf(QUESTION_MASK_CHAR)", "var_name": "QUESTION_MASK"}, {"original_string": "public static final char SLASH_CHAR = '/';", "modifier": "public static final", "type": "char", "declarator": "SLASH_CHAR = '/'", "var_name": "SLASH_CHAR"}, {"original_string": "public static final String SLASH = valueOf(SLASH_CHAR);", "modifier": "public static final", "type": "String", "declarator": "SLASH = valueOf(SLASH_CHAR)", "var_name": "SLASH"}, {"original_string": "public static final char HYPHEN_CHAR = '-';", "modifier": "public static final", "type": "char", "declarator": "HYPHEN_CHAR = '-'", "var_name": "HYPHEN_CHAR"}, {"original_string": "public static final String HYPHEN = valueOf(HYPHEN_CHAR);", "modifier": "public static final", "type": "String", "declarator": "HYPHEN = valueOf(HYPHEN_CHAR)", "var_name": "HYPHEN"}], "methods": [{"identifier": "StringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtils()", "full_signature": "private  StringUtils()", "class_method_signature": "StringUtils.StringUtils()", "testcase": false, "constructor": true}, {"identifier": "length", "parameters": "(final CharSequence cs)", "modifiers": "public static", "return": "int", "signature": "int length(final CharSequence cs)", "full_signature": "public static int length(final CharSequence cs)", "class_method_signature": "StringUtils.length(final CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(final String str, final int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeat(final String str, final int repeat)", "full_signature": "public static String repeat(final String str, final int repeat)", "class_method_signature": "StringUtils.repeat(final String str, final int repeat)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(final String str, final String separator, final int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeat(final String str, final String separator, final int repeat)", "full_signature": "public static String repeat(final String str, final String separator, final int repeat)", "class_method_signature": "StringUtils.repeat(final String str, final String separator, final int repeat)", "testcase": false, "constructor": false}, {"identifier": "removeEnd", "parameters": "(final String str, final String remove)", "modifiers": "public static", "return": "String", "signature": "String removeEnd(final String str, final String remove)", "full_signature": "public static String removeEnd(final String str, final String remove)", "class_method_signature": "StringUtils.removeEnd(final String str, final String remove)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(final char ch, final int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeat(final char ch, final int repeat)", "full_signature": "public static String repeat(final char ch, final int repeat)", "class_method_signature": "StringUtils.repeat(final char ch, final int repeat)", "testcase": false, "constructor": false}, {"identifier": "stripEnd", "parameters": "(final String str, final String stripChars)", "modifiers": "public static", "return": "String", "signature": "String stripEnd(final String str, final String stripChars)", "full_signature": "public static String stripEnd(final String str, final String stripChars)", "class_method_signature": "StringUtils.stripEnd(final String str, final String stripChars)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(final String text, final String searchString, final String replacement)", "modifiers": "public static", "return": "String", "signature": "String replace(final String text, final String searchString, final String replacement)", "full_signature": "public static String replace(final String text, final String searchString, final String replacement)", "class_method_signature": "StringUtils.replace(final String text, final String searchString, final String replacement)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(final String text, final String searchString, final String replacement, int max)", "modifiers": "public static", "return": "String", "signature": "String replace(final String text, final String searchString, final String replacement, int max)", "full_signature": "public static String replace(final String text, final String searchString, final String replacement, int max)", "class_method_signature": "StringUtils.replace(final String text, final String searchString, final String replacement, int max)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(CharSequence cs)", "full_signature": "public static boolean isBlank(CharSequence cs)", "class_method_signature": "StringUtils.isBlank(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String str)", "full_signature": "public static boolean isEmpty(String str)", "class_method_signature": "StringUtils.isEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isNoneEmpty", "parameters": "(final String... ss)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNoneEmpty(final String... ss)", "full_signature": "public static boolean isNoneEmpty(final String... ss)", "class_method_signature": "StringUtils.isNoneEmpty(final String... ss)", "testcase": false, "constructor": false}, {"identifier": "isAnyEmpty", "parameters": "(final String... ss)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnyEmpty(final String... ss)", "full_signature": "public static boolean isAnyEmpty(final String... ss)", "class_method_signature": "StringUtils.isAnyEmpty(final String... ss)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String str)", "full_signature": "public static boolean isNotEmpty(String str)", "class_method_signature": "StringUtils.isNotEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isEquals", "parameters": "(String s1, String s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEquals(String s1, String s2)", "full_signature": "public static boolean isEquals(String s1, String s2)", "class_method_signature": "StringUtils.isEquals(String s1, String s2)", "testcase": false, "constructor": false}, {"identifier": "isInteger", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInteger(String str)", "full_signature": "public static boolean isInteger(String str)", "class_method_signature": "StringUtils.isInteger(String str)", "testcase": false, "constructor": false}, {"identifier": "parseInteger", "parameters": "(String str)", "modifiers": "public static", "return": "int", "signature": "int parseInteger(String str)", "full_signature": "public static int parseInteger(String str)", "class_method_signature": "StringUtils.parseInteger(String str)", "testcase": false, "constructor": false}, {"identifier": "isJavaIdentifier", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJavaIdentifier(String s)", "full_signature": "public static boolean isJavaIdentifier(String s)", "class_method_signature": "StringUtils.isJavaIdentifier(String s)", "testcase": false, "constructor": false}, {"identifier": "isContains", "parameters": "(String values, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContains(String values, String value)", "full_signature": "public static boolean isContains(String values, String value)", "class_method_signature": "StringUtils.isContains(String values, String value)", "testcase": false, "constructor": false}, {"identifier": "isContains", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContains(String str, char ch)", "full_signature": "public static boolean isContains(String str, char ch)", "class_method_signature": "StringUtils.isContains(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "isNotContains", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotContains(String str, char ch)", "full_signature": "public static boolean isNotContains(String str, char ch)", "class_method_signature": "StringUtils.isNotContains(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "isContains", "parameters": "(String[] values, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContains(String[] values, String value)", "full_signature": "public static boolean isContains(String[] values, String value)", "class_method_signature": "StringUtils.isContains(String[] values, String value)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(String str, boolean allowDot)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(String str, boolean allowDot)", "full_signature": "public static boolean isNumeric(String str, boolean allowDot)", "class_method_signature": "StringUtils.isNumeric(String str, boolean allowDot)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Throwable e)", "modifiers": "public static", "return": "String", "signature": "String toString(Throwable e)", "full_signature": "public static String toString(Throwable e)", "class_method_signature": "StringUtils.toString(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String msg, Throwable e)", "modifiers": "public static", "return": "String", "signature": "String toString(String msg, Throwable e)", "full_signature": "public static String toString(String msg, Throwable e)", "class_method_signature": "StringUtils.toString(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(String src, String from, String to)", "modifiers": "public static", "return": "String", "signature": "String translate(String src, String from, String to)", "full_signature": "public static String translate(String src, String from, String to)", "class_method_signature": "StringUtils.translate(String src, String from, String to)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, char ch)", "full_signature": "public static String[] split(String str, char ch)", "class_method_signature": "StringUtils.split(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "splitToList0", "parameters": "(String str, char ch)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> splitToList0(String str, char ch)", "full_signature": "private static List<String> splitToList0(String str, char ch)", "class_method_signature": "StringUtils.splitToList0(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "splitToList", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitToList(String str, char ch)", "full_signature": "public static List<String> splitToList(String str, char ch)", "class_method_signature": "StringUtils.splitToList(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "splitToSet", "parameters": "(String value, char separatorChar)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> splitToSet(String value, char separatorChar)", "full_signature": "public static Set<String> splitToSet(String value, char separatorChar)", "class_method_signature": "StringUtils.splitToSet(String value, char separatorChar)", "testcase": false, "constructor": false}, {"identifier": "splitToSet", "parameters": "(String value, char separatorChar, boolean trimElements)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> splitToSet(String value, char separatorChar, boolean trimElements)", "full_signature": "public static Set<String> splitToSet(String value, char separatorChar, boolean trimElements)", "class_method_signature": "StringUtils.splitToSet(String value, char separatorChar, boolean trimElements)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] array)", "modifiers": "public static", "return": "String", "signature": "String join(String[] array)", "full_signature": "public static String join(String[] array)", "class_method_signature": "StringUtils.join(String[] array)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] array, char split)", "modifiers": "public static", "return": "String", "signature": "String join(String[] array, char split)", "full_signature": "public static String join(String[] array, char split)", "class_method_signature": "StringUtils.join(String[] array, char split)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] array, String split)", "modifiers": "public static", "return": "String", "signature": "String join(String[] array, String split)", "full_signature": "public static String join(String[] array, String split)", "class_method_signature": "StringUtils.join(String[] array, String split)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<String> coll, String split)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<String> coll, String split)", "full_signature": "public static String join(Collection<String> coll, String split)", "class_method_signature": "StringUtils.join(Collection<String> coll, String split)", "testcase": false, "constructor": false}, {"identifier": "parseKeyValuePair", "parameters": "(String str, String itemSeparator)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> parseKeyValuePair(String str, String itemSeparator)", "full_signature": "private static Map<String, String> parseKeyValuePair(String str, String itemSeparator)", "class_method_signature": "StringUtils.parseKeyValuePair(String str, String itemSeparator)", "testcase": false, "constructor": false}, {"identifier": "getQueryStringValue", "parameters": "(String qs, String key)", "modifiers": "public static", "return": "String", "signature": "String getQueryStringValue(String qs, String key)", "full_signature": "public static String getQueryStringValue(String qs, String key)", "class_method_signature": "StringUtils.getQueryStringValue(String qs, String key)", "testcase": false, "constructor": false}, {"identifier": "parseQueryString", "parameters": "(String qs)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseQueryString(String qs)", "full_signature": "public static Map<String, String> parseQueryString(String qs)", "class_method_signature": "StringUtils.parseQueryString(String qs)", "testcase": false, "constructor": false}, {"identifier": "getServiceKey", "parameters": "(Map<String, String> ps)", "modifiers": "public static", "return": "String", "signature": "String getServiceKey(Map<String, String> ps)", "full_signature": "public static String getServiceKey(Map<String, String> ps)", "class_method_signature": "StringUtils.getServiceKey(Map<String, String> ps)", "testcase": false, "constructor": false}, {"identifier": "toQueryString", "parameters": "(Map<String, String> ps)", "modifiers": "public static", "return": "String", "signature": "String toQueryString(Map<String, String> ps)", "full_signature": "public static String toQueryString(Map<String, String> ps)", "class_method_signature": "StringUtils.toQueryString(Map<String, String> ps)", "testcase": false, "constructor": false}, {"identifier": "camelToSplitName", "parameters": "(String camelName, String split)", "modifiers": "public static", "return": "String", "signature": "String camelToSplitName(String camelName, String split)", "full_signature": "public static String camelToSplitName(String camelName, String split)", "class_method_signature": "StringUtils.camelToSplitName(String camelName, String split)", "testcase": false, "constructor": false}, {"identifier": "toArgumentString", "parameters": "(Object[] args)", "modifiers": "public static", "return": "String", "signature": "String toArgumentString(Object[] args)", "full_signature": "public static String toArgumentString(Object[] args)", "class_method_signature": "StringUtils.toArgumentString(Object[] args)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trim(String str)", "full_signature": "public static String trim(String str)", "class_method_signature": "StringUtils.trim(String str)", "testcase": false, "constructor": false}, {"identifier": "toURLKey", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String toURLKey(String key)", "full_signature": "public static String toURLKey(String key)", "class_method_signature": "StringUtils.toURLKey(String key)", "testcase": false, "constructor": false}, {"identifier": "toOSStyleKey", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String toOSStyleKey(String key)", "full_signature": "public static String toOSStyleKey(String key)", "class_method_signature": "StringUtils.toOSStyleKey(String key)", "testcase": false, "constructor": false}, {"identifier": "isAllUpperCase", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllUpperCase(String str)", "full_signature": "public static boolean isAllUpperCase(String str)", "class_method_signature": "StringUtils.isAllUpperCase(String str)", "testcase": false, "constructor": false}, {"identifier": "delimitedListToStringArray", "parameters": "(String str, String delimiter)", "modifiers": "public static", "return": "String[]", "signature": "String[] delimitedListToStringArray(String str, String delimiter)", "full_signature": "public static String[] delimitedListToStringArray(String str, String delimiter)", "class_method_signature": "StringUtils.delimitedListToStringArray(String str, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "delimitedListToStringArray", "parameters": "(String str, String delimiter, String charsToDelete)", "modifiers": "public static", "return": "String[]", "signature": "String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete)", "full_signature": "public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete)", "class_method_signature": "StringUtils.delimitedListToStringArray(String str, String delimiter, String charsToDelete)", "testcase": false, "constructor": false}, {"identifier": "arrayToDelimitedString", "parameters": "(Object[] arr, String delim)", "modifiers": "public static", "return": "String", "signature": "String arrayToDelimitedString(Object[] arr, String delim)", "full_signature": "public static String arrayToDelimitedString(Object[] arr, String delim)", "class_method_signature": "StringUtils.arrayToDelimitedString(Object[] arr, String delim)", "testcase": false, "constructor": false}, {"identifier": "deleteAny", "parameters": "(String inString, String charsToDelete)", "modifiers": "public static", "return": "String", "signature": "String deleteAny(String inString, String charsToDelete)", "full_signature": "public static String deleteAny(String inString, String charsToDelete)", "class_method_signature": "StringUtils.deleteAny(String inString, String charsToDelete)", "testcase": false, "constructor": false}, {"identifier": "toStringArray", "parameters": "(Collection<String> collection)", "modifiers": "public static", "return": "String[]", "signature": "String[] toStringArray(Collection<String> collection)", "full_signature": "public static String[] toStringArray(Collection<String> collection)", "class_method_signature": "StringUtils.toStringArray(Collection<String> collection)", "testcase": false, "constructor": false}, {"identifier": "nullSafeToString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String nullSafeToString(Object obj)", "full_signature": "public static String nullSafeToString(Object obj)", "class_method_signature": "StringUtils.nullSafeToString(Object obj)", "testcase": false, "constructor": false}, {"identifier": "parseParameters", "parameters": "(String rawParameters)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseParameters(String rawParameters)", "full_signature": "public static Map<String, String> parseParameters(String rawParameters)", "class_method_signature": "StringUtils.parseParameters(String rawParameters)", "testcase": false, "constructor": false}, {"identifier": "decodeHexNibble", "parameters": "(final char c)", "modifiers": "public static", "return": "int", "signature": "int decodeHexNibble(final char c)", "full_signature": "public static int decodeHexNibble(final char c)", "class_method_signature": "StringUtils.decodeHexNibble(final char c)", "testcase": false, "constructor": false}, {"identifier": "decodeHexByte", "parameters": "(CharSequence s, int pos)", "modifiers": "public static", "return": "byte", "signature": "byte decodeHexByte(CharSequence s, int pos)", "full_signature": "public static byte decodeHexByte(CharSequence s, int pos)", "class_method_signature": "StringUtils.decodeHexByte(CharSequence s, int pos)", "testcase": false, "constructor": false}, {"identifier": "toCommaDelimitedString", "parameters": "(String one, String... others)", "modifiers": "public static", "return": "String", "signature": "String toCommaDelimitedString(String one, String... others)", "full_signature": "public static String toCommaDelimitedString(String one, String... others)", "class_method_signature": "StringUtils.toCommaDelimitedString(String one, String... others)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java"}, "focal_method": {"identifier": "splitToSet", "parameters": "(String value, char separatorChar)", "modifiers": "public static", "return": "Set<String>", "body": "public static Set<String> splitToSet(String value, char separatorChar) {\n        return splitToSet(value, separatorChar, false);\n    }", "signature": "Set<String> splitToSet(String value, char separatorChar)", "full_signature": "public static Set<String> splitToSet(String value, char separatorChar)", "class_method_signature": "StringUtils.splitToSet(String value, char separatorChar)", "testcase": false, "constructor": false, "invocations": ["splitToSet"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}