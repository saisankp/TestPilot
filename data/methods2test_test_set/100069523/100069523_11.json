{"test_class": {"identifier": "DnsUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.net/src/test/java/com/sandpolis/core/net/util/DnsUtilTest.java"}, "test_case": {"identifier": "testGetPort", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n\tvoid testGetPort() throws InterruptedException, ExecutionException {\n\t\tassertTrue(DnsUtil.getPort(\"invalid123\").isEmpty());\n\t\tassertTrue(DnsUtil.getPort(\"test.google.com\").isEmpty());\n\t\tassertThrows(ExecutionException.class, () -> DnsUtil.getPort(\"\"));\n\t}", "signature": "void testGetPort()", "full_signature": "@Test void testGetPort()", "class_method_signature": "DnsUtilTest.testGetPort()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getPort", "assertTrue", "isEmpty", "getPort", "assertThrows", "getPort"]}, "focal_class": {"identifier": "DnsUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DnsNameResolver RESOLVER = new DnsNameResolverBuilder(ThreadStore.get(\"net.dns.resolver\"))\n\t\t\t.channelFactory(() -> new NioDatagramChannel()).build();", "modifier": "private static final", "type": "DnsNameResolver", "declarator": "RESOLVER = new DnsNameResolverBuilder(ThreadStore.get(\"net.dns.resolver\"))\n\t\t\t.channelFactory(() -> new NioDatagramChannel()).build()", "var_name": "RESOLVER"}], "methods": [{"identifier": "getPort", "parameters": "(String server)", "modifiers": "public static", "return": "Optional<Integer>", "signature": "Optional<Integer> getPort(String server)", "full_signature": "public static Optional<Integer> getPort(String server)", "class_method_signature": "DnsUtil.getPort(String server)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String server)", "modifiers": "public static", "return": "Future<InetAddress>", "signature": "Future<InetAddress> resolve(String server)", "full_signature": "public static Future<InetAddress> resolve(String server)", "class_method_signature": "DnsUtil.resolve(String server)", "testcase": false, "constructor": false}, {"identifier": "DnsUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DnsUtil()", "full_signature": "private  DnsUtil()", "class_method_signature": "DnsUtil.DnsUtil()", "testcase": false, "constructor": true}], "file": "module/com.sandpolis.core.net/src/main/java/com/sandpolis/core/net/util/DnsUtil.java"}, "focal_method": {"identifier": "getPort", "parameters": "(String server)", "modifiers": "public static", "return": "Optional<Integer>", "body": "public static Optional<Integer> getPort(String server) throws InterruptedException, ExecutionException {\n\t\tObjects.requireNonNull(server);\n\n\t\tDnsQuestion question = new DefaultDnsQuestion(server, DnsRecordType.SRV);\n\t\tDnsResponse response = RESOLVER.query(question).get().content();\n\t\tDnsRawRecord record = response.recordAt(DnsSection.ANSWER);\n\t\tif (record == null)\n\t\t\treturn Optional.empty();\n\n\t\tByteBuf buffer = record.content();\n\n\t\t// Skip priority\n\t\tbuffer.readShort();\n\n\t\t// Skip weight\n\t\tbuffer.readShort();\n\n\t\t// Read port\n\t\tint port = buffer.readShort();\n\t\tif (!ValidationUtil.port(port))\n\t\t\treturn Optional.empty();\n\n\t\treturn Optional.of(port);\n\t}", "signature": "Optional<Integer> getPort(String server)", "full_signature": "public static Optional<Integer> getPort(String server)", "class_method_signature": "DnsUtil.getPort(String server)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "content", "get", "query", "recordAt", "empty", "content", "readShort", "readShort", "readShort", "port", "empty", "of"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}