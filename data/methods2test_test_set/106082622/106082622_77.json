{"test_class": {"identifier": "MessageFormatControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MessageFormatTestTools messageFormatTestTools;", "modifier": "@Autowired\n    private", "type": "MessageFormatTestTools", "declarator": "messageFormatTestTools", "var_name": "messageFormatTestTools"}, {"original_string": "@Autowired\n    private MessageFormatRepository messageFormatRepository;", "modifier": "@Autowired\n    private", "type": "MessageFormatRepository", "declarator": "messageFormatRepository", "var_name": "messageFormatRepository"}, {"original_string": "@Autowired\n    private ViewTestTools viewTestTools;", "modifier": "@Autowired\n    private", "type": "ViewTestTools", "declarator": "viewTestTools", "var_name": "viewTestTools"}, {"original_string": "private String deserializerUploadPath;", "modifier": "private", "type": "String", "declarator": "deserializerUploadPath", "var_name": "deserializerUploadPath"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/configuration/messageformat/MessageFormatControllerTest.java"}, "test_case": {"identifier": "testPostUpdate_updatingExistingWithValidJarSameName", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void testPostUpdate_updatingExistingWithValidJarSameName() throws Exception {\n        final MessageFormat messageFormat = messageFormatTestTools.createMessageFormat(\"MyMessageFormat\" + System.currentTimeMillis());\n        final String originalJarName = messageFormat.getJar();\n        final String originalJarContents = \"OriginalContents\";\n        final Path originalJarPath = Paths.get(deserializerUploadPath, messageFormat.getJar());\n\n        // Create a dummy jar\n        FileTestTools.createDummyFile(deserializerUploadPath + messageFormat.getJar(), originalJarContents);\n\n        // This is a valid jar\n        final InputStream fileInputStream = getClass().getClassLoader().getResourceAsStream(\"testDeserializer/testPlugins.jar\");\n        final MockMultipartFile jarUpload = new MockMultipartFile(\"file\", \"testPlugins.jar\", null, fileInputStream);\n\n        final String newName = \"MyUpdatedName\" + System.currentTimeMillis();\n        final String newClasspath = \"examples.deserializer.ExampleDeserializer\";\n\n        // Hit page.\n        mockMvc\n            .perform(multipart(\"/configuration/messageFormat/update\")\n                .file(jarUpload)\n                .with(user(adminUserDetails))\n                .with(csrf())\n                .param(\"id\", String.valueOf(messageFormat.getId()))\n                .param(\"name\", newName)\n                .param(\"classpath\", newClasspath))\n            //.andDo(print())\n            .andExpect(model().hasNoErrors())\n            .andExpect(status().is3xxRedirection())\n            .andExpect(redirectedUrl(\"/configuration/messageFormat\"));\n\n        // Validate message format was updated.\n        final MessageFormat updatedMessageFormat = messageFormatRepository.findById(messageFormat.getId()).get();\n        assertNotNull(\"Has message format\", updatedMessageFormat);\n        assertEquals(\"Name updated\", newName, updatedMessageFormat.getName());\n        assertEquals(\"classpath updated\", newClasspath, updatedMessageFormat.getClasspath());\n        assertNotEquals(\"Jar name not updated\", originalJarName, updatedMessageFormat.getJar());\n        assertFalse(\"Should not be a default format\", updatedMessageFormat.isDefaultFormat());\n\n        // No parameters were posted, so we should have an empty json parameters\n        assertEquals(\"No parameters should be empty\", \"{}\", updatedMessageFormat.getOptionParameters());\n\n        // Validate previous jar is gone/deleted.\n        assertFalse(\"File should NOT exist\", Files.exists(originalJarPath));\n\n        // Validate new jar is created.\n        final Path newJarPath = Paths.get(deserializerUploadPath, updatedMessageFormat.getJar());\n        assertTrue(\"New jar should exist\", Files.exists(newJarPath));\n\n        // Cleanup\n        Files.deleteIfExists(newJarPath);\n    }", "signature": "void testPostUpdate_updatingExistingWithValidJarSameName()", "full_signature": "@Test @Transactional public void testPostUpdate_updatingExistingWithValidJarSameName()", "class_method_signature": "MessageFormatControllerTest.testPostUpdate_updatingExistingWithValidJarSameName()", "testcase": true, "constructor": false, "invocations": ["createMessageFormat", "currentTimeMillis", "getJar", "get", "getJar", "createDummyFile", "getJar", "getResourceAsStream", "getClassLoader", "getClass", "currentTimeMillis", "andExpect", "andExpect", "andExpect", "perform", "param", "param", "param", "with", "with", "file", "multipart", "user", "csrf", "valueOf", "getId", "hasNoErrors", "model", "is3xxRedirection", "status", "redirectedUrl", "get", "findById", "getId", "assertNotNull", "assertEquals", "getName", "assertEquals", "getClasspath", "assertNotEquals", "getJar", "assertFalse", "isDefaultFormat", "assertEquals", "getOptionParameters", "assertFalse", "exists", "get", "getJar", "assertTrue", "exists", "deleteIfExists"]}, "focal_class": {"identifier": "MessageFormatController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UploadManager uploadManager;", "modifier": "@Autowired\n    private", "type": "UploadManager", "declarator": "uploadManager", "var_name": "uploadManager"}, {"original_string": "@Autowired\n    private PluginFactory<Deserializer> deserializerLoader;", "modifier": "@Autowired\n    private", "type": "PluginFactory<Deserializer>", "declarator": "deserializerLoader", "var_name": "deserializerLoader"}, {"original_string": "@Autowired\n    private MessageFormatRepository messageFormatRepository;", "modifier": "@Autowired\n    private", "type": "MessageFormatRepository", "declarator": "messageFormatRepository", "var_name": "messageFormatRepository"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}], "methods": [{"identifier": "index", "parameters": "(final Model model)", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "signature": "String index(final Model model)", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(final Model model)", "class_method_signature": "MessageFormatController.index(final Model model)", "testcase": false, "constructor": false}, {"identifier": "createMessageFormat", "parameters": "(final MessageFormatForm messageFormatForm, final Model model)", "modifiers": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public", "return": "String", "signature": "String createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "full_signature": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public String createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "class_method_signature": "MessageFormatController.createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "testcase": false, "constructor": false}, {"identifier": "editMessageFormat", "parameters": "(\n        @PathVariable final Long id,\n        final MessageFormatForm messageFormatForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public", "return": "String", "signature": "String editMessageFormat(\n        @PathVariable final Long id,\n        final MessageFormatForm messageFormatForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public String editMessageFormat(\n        @PathVariable final Long id,\n        final MessageFormatForm messageFormatForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "class_method_signature": "MessageFormatController.editMessageFormat(\n        @PathVariable final Long id,\n        final MessageFormatForm messageFormatForm,\n        final Model model,\n        final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n        @Valid final MessageFormatForm messageFormatForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        @RequestParam final Map<String, String> allRequestParams)", "modifiers": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public", "return": "String", "signature": "String create(\n        @Valid final MessageFormatForm messageFormatForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        @RequestParam final Map<String, String> allRequestParams)", "full_signature": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public String create(\n        @Valid final MessageFormatForm messageFormatForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        @RequestParam final Map<String, String> allRequestParams)", "class_method_signature": "MessageFormatController.create(\n        @Valid final MessageFormatForm messageFormatForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        @RequestParam final Map<String, String> allRequestParams)", "testcase": false, "constructor": false}, {"identifier": "handleCustomOptions", "parameters": "(final MessageFormatForm messageFormatForm)", "modifiers": "private", "return": "String", "signature": "String handleCustomOptions(final MessageFormatForm messageFormatForm)", "full_signature": "private String handleCustomOptions(final MessageFormatForm messageFormatForm)", "class_method_signature": "MessageFormatController.handleCustomOptions(final MessageFormatForm messageFormatForm)", "testcase": false, "constructor": false}, {"identifier": "deleteCluster", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public", "return": "String", "signature": "String deleteCluster(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public String deleteCluster(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "MessageFormatController.deleteCluster(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "setupBreadCrumbs", "parameters": "(final Model model, final String name, final String url)", "modifiers": "private", "return": "void", "signature": "void setupBreadCrumbs(final Model model, final String name, final String url)", "full_signature": "private void setupBreadCrumbs(final Model model, final String name, final String url)", "class_method_signature": "MessageFormatController.setupBreadCrumbs(final Model model, final String name, final String url)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/configuration/messageformat/MessageFormatController.java"}, "focal_method": {"identifier": "createMessageFormat", "parameters": "(final MessageFormatForm messageFormatForm, final Model model)", "modifiers": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public", "return": "String", "body": "@RequestMapping(path = \"/create\", method = RequestMethod.GET)\n    public String createMessageFormat(final MessageFormatForm messageFormatForm, final Model model) {\n        // Setup breadcrumbs\n        setupBreadCrumbs(model, \"Create\", null);\n\n        return \"configuration/messageFormat/create\";\n    }", "signature": "String createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "full_signature": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public String createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "class_method_signature": "MessageFormatController.createMessageFormat(final MessageFormatForm messageFormatForm, final Model model)", "testcase": false, "constructor": false, "invocations": ["setupBreadCrumbs"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}