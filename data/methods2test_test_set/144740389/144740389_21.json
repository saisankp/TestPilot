{"test_class": {"identifier": "SocketIoServerTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoServerTest.java"}, "test_case": {"identifier": "test_connection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_connection() {\n        final EngineIoServer engineIoServer = new EngineIoServer();\n        final SocketIoServer server = new SocketIoServer(engineIoServer);\n        final SocketIoNamespace namespace = server.namespace(\"/\");\n\n        assertNotNull(namespace);\n\n        final Emitter.Listener connectionListener = Mockito.mock(Emitter.Listener.class);\n        namespace.on(\"connect\", connectionListener);\n        namespace.on(\"connection\", connectionListener);\n\n        engineIoServer.handleWebSocket(new EngineIoWebSocket() {\n            @Override\n            public Map<String, String> getQuery() {\n                return new HashMap<>();\n            }\n\n            @Override\n            public void write(String message) {\n            }\n\n            @Override\n            public void write(byte[] message) {\n            }\n\n            @Override\n            public void close() {\n            }\n        });\n\n        Mockito.verify(connectionListener, Mockito.times(2))\n                .call(Mockito.any(SocketIoSocket.class));\n    }", "signature": "void test_connection()", "full_signature": "@Test public void test_connection()", "class_method_signature": "SocketIoServerTest.test_connection()", "testcase": true, "constructor": false, "invocations": ["namespace", "assertNotNull", "mock", "on", "on", "handleWebSocket", "call", "verify", "times", "any"]}, "focal_class": {"identifier": "SocketIoServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SocketIoServerOptions mOptions;", "modifier": "private final", "type": "SocketIoServerOptions", "declarator": "mOptions", "var_name": "mOptions"}, {"original_string": "private final Map<Pattern, SocketIoNamespaceProvider> mNamespaceRegexProviderMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Pattern, SocketIoNamespaceProvider>", "declarator": "mNamespaceRegexProviderMap = new ConcurrentHashMap<>()", "var_name": "mNamespaceRegexProviderMap"}, {"original_string": "private final Map<SocketIoNamespaceProvider, SocketIoNamespaceGroupImpl> mNamespaceGroups = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<SocketIoNamespaceProvider, SocketIoNamespaceGroupImpl>", "declarator": "mNamespaceGroups = new ConcurrentHashMap<>()", "var_name": "mNamespaceGroups"}, {"original_string": "private final Map<String, SocketIoNamespaceImpl> mNamespaces = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SocketIoNamespaceImpl>", "declarator": "mNamespaces = new ConcurrentHashMap<>()", "var_name": "mNamespaces"}, {"original_string": "private final Parser.Encoder mEncoder = new IOParser.Encoder();", "modifier": "private final", "type": "Parser.Encoder", "declarator": "mEncoder = new IOParser.Encoder()", "var_name": "mEncoder"}], "methods": [{"identifier": "SocketIoServer", "parameters": "(EngineIoServer server)", "modifiers": "public", "return": "", "signature": " SocketIoServer(EngineIoServer server)", "full_signature": "public  SocketIoServer(EngineIoServer server)", "class_method_signature": "SocketIoServer.SocketIoServer(EngineIoServer server)", "testcase": false, "constructor": true}, {"identifier": "SocketIoServer", "parameters": "(EngineIoServer server, SocketIoServerOptions options)", "modifiers": "public", "return": "", "signature": " SocketIoServer(EngineIoServer server, SocketIoServerOptions options)", "full_signature": "public  SocketIoServer(EngineIoServer server, SocketIoServerOptions options)", "class_method_signature": "SocketIoServer.SocketIoServer(EngineIoServer server, SocketIoServerOptions options)", "testcase": false, "constructor": true}, {"identifier": "getEncoder", "parameters": "()", "modifiers": "", "return": "Parser.Encoder", "signature": "Parser.Encoder getEncoder()", "full_signature": " Parser.Encoder getEncoder()", "class_method_signature": "SocketIoServer.getEncoder()", "testcase": false, "constructor": false}, {"identifier": "getAdapterFactory", "parameters": "()", "modifiers": "", "return": "SocketIoAdapter.AdapterFactory", "signature": "SocketIoAdapter.AdapterFactory getAdapterFactory()", "full_signature": " SocketIoAdapter.AdapterFactory getAdapterFactory()", "class_method_signature": "SocketIoServer.getAdapterFactory()", "testcase": false, "constructor": false}, {"identifier": "checkNamespace", "parameters": "(String namespace)", "modifiers": "", "return": "boolean", "signature": "boolean checkNamespace(String namespace)", "full_signature": " boolean checkNamespace(String namespace)", "class_method_signature": "SocketIoServer.checkNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "hasNamespace", "parameters": "(String namespace)", "modifiers": "public", "return": "boolean", "signature": "boolean hasNamespace(String namespace)", "full_signature": "public boolean hasNamespace(String namespace)", "class_method_signature": "SocketIoServer.hasNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "namespace", "parameters": "(String namespace)", "modifiers": "public synchronized", "return": "SocketIoNamespace", "signature": "SocketIoNamespace namespace(String namespace)", "full_signature": "public synchronized SocketIoNamespace namespace(String namespace)", "class_method_signature": "SocketIoServer.namespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "namespace", "parameters": "(SocketIoNamespaceProvider namespaceProvider)", "modifiers": "public synchronized", "return": "SocketIoNamespace", "signature": "SocketIoNamespace namespace(SocketIoNamespaceProvider namespaceProvider)", "full_signature": "public synchronized SocketIoNamespace namespace(SocketIoNamespaceProvider namespaceProvider)", "class_method_signature": "SocketIoServer.namespace(SocketIoNamespaceProvider namespaceProvider)", "testcase": false, "constructor": false}, {"identifier": "namespace", "parameters": "(final Pattern namespaceRegex)", "modifiers": "public synchronized", "return": "SocketIoNamespace", "signature": "SocketIoNamespace namespace(final Pattern namespaceRegex)", "full_signature": "public synchronized SocketIoNamespace namespace(final Pattern namespaceRegex)", "class_method_signature": "SocketIoServer.namespace(final Pattern namespaceRegex)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoServer.java"}, "focal_method": {"identifier": "namespace", "parameters": "(String namespace)", "modifiers": "public synchronized", "return": "SocketIoNamespace", "body": "public synchronized SocketIoNamespace namespace(String namespace) {\n        if (namespace.charAt(0) != '/') {\n            namespace = \"/\" + namespace;\n        }\n\n        SocketIoNamespaceImpl nsp = mNamespaces.get(namespace);\n        if (nsp == null) {\n            nsp = new SocketIoNamespaceImpl(this, namespace);\n            mNamespaces.put(namespace, nsp);\n        }\n\n        return nsp;\n    }", "signature": "SocketIoNamespace namespace(String namespace)", "full_signature": "public synchronized SocketIoNamespace namespace(String namespace)", "class_method_signature": "SocketIoServer.namespace(String namespace)", "testcase": false, "constructor": false, "invocations": ["charAt", "get", "put"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}