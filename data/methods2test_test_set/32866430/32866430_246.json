{"test_class": {"identifier": "DescribeActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "@Mock Printing printing;", "modifier": "@Mock", "type": "Printing", "declarator": "printing", "var_name": "printing"}, {"original_string": "DescribeActionConfig describeActionConfig;", "modifier": "", "type": "DescribeActionConfig", "declarator": "describeActionConfig", "var_name": "describeActionConfig"}, {"original_string": "DescribeAction describeAction;", "modifier": "", "type": "DescribeAction", "declarator": "describeAction", "var_name": "describeAction"}, {"original_string": "Secret secret = new Secret(0, \"secret\", null, () ->  \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(0, \"secret\", null, () ->  \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SanitizedSecret sanitizedSecret = SanitizedSecret.fromSecret(secret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.fromSecret(secret)", "var_name": "sanitizedSecret"}], "file": "cli/src/test/java/keywhiz/cli/commands/DescribeActionTest.java"}, "test_case": {"identifier": "describeThrowsIfTooManyArguments", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void describeThrowsIfTooManyArguments() throws Exception {\n    describeActionConfig.describeType = Arrays.asList(\"group\", \"client\");\n\n    describeAction.run();\n  }", "signature": "void describeThrowsIfTooManyArguments()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void describeThrowsIfTooManyArguments()", "class_method_signature": "DescribeActionTest.describeThrowsIfTooManyArguments()", "testcase": true, "constructor": false, "invocations": ["asList", "run"]}, "focal_class": {"identifier": "DescribeAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final DescribeActionConfig describeActionConfig;", "modifier": "private final", "type": "DescribeActionConfig", "declarator": "describeActionConfig", "var_name": "describeActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "private final Printing printing;", "modifier": "private final", "type": "Printing", "declarator": "printing", "var_name": "printing"}], "methods": [{"identifier": "DescribeAction", "parameters": "(DescribeActionConfig describeActionConfig, KeywhizClient client,\n      Printing printing)", "modifiers": "public", "return": "", "signature": " DescribeAction(DescribeActionConfig describeActionConfig, KeywhizClient client,\n      Printing printing)", "full_signature": "public  DescribeAction(DescribeActionConfig describeActionConfig, KeywhizClient client,\n      Printing printing)", "class_method_signature": "DescribeAction.DescribeAction(DescribeActionConfig describeActionConfig, KeywhizClient client,\n      Printing printing)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "DescribeAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/DescribeAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    List<String> describeType = describeActionConfig.describeType;\n\n    if (describeType == null || describeType.isEmpty()) {\n      throw new IllegalArgumentException(\"Must specify a single type to describe.\");\n    }\n\n    if (describeActionConfig.name == null || !validName(describeActionConfig.name)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n\n    String firstType = describeType.get(0).toLowerCase().trim();\n    String name = describeActionConfig.name;\n\n    switch (firstType) {\n\n      case \"group\":\n        try {\n          Group group = keywhizClient.getGroupByName(name);\n          printing.printGroupWithDetails(group);\n        } catch (NotFoundException e) {\n          throw new AssertionError(\"Group not found.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      case \"client\":\n        try {\n          Client client = keywhizClient.getClientByName(name);\n          printing.printClientWithDetails(client);\n        } catch (NotFoundException e) {\n          throw new AssertionError(\"Client not found.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      case \"secret\":\n        SanitizedSecret sanitizedSecret;\n        try {\n          sanitizedSecret = keywhizClient.getSanitizedSecretByName(name);\n\n          printing.printSanitizedSecretWithDetails(sanitizedSecret);\n        } catch (NotFoundException e) {\n          throw new AssertionError(\"Secret not found.\");\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Invalid describe type specified: \" + firstType);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "DescribeAction.run()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "validName", "format", "trim", "toLowerCase", "get", "getGroupByName", "printGroupWithDetails", "propagate", "getClientByName", "printClientWithDetails", "propagate", "getSanitizedSecretByName", "printSanitizedSecretWithDetails", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}