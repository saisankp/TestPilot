{"test_class": {"identifier": "AutomationClientResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "ApiDate now = ApiDate.now();", "modifier": "", "type": "ApiDate", "declarator": "now = ApiDate.now()", "var_name": "now"}, {"original_string": "AutomationClient automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true));", "modifier": "", "type": "AutomationClient", "declarator": "automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true))", "var_name": "automation"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "AutomationClientResource resource;", "modifier": "", "type": "AutomationClientResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/automation/AutomationClientResourceTest.java"}, "test_case": {"identifier": "findClientByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void findClientByName() {\n    Client client = new Client(2, \"client\", \"2nd client\", null, now, \"test\", now, \"test\", null, null,\n        true, false);\n    Group firstGroup = new Group(1, \"first Group\", \"testing group\", now, \"client\", now, \"client\",\n        ImmutableMap.of(\"app\", \"keywhiz\"));\n    Group secondGroup = new Group(2, \"second Group\", \"testing group\", now, \"client\", now, \"client\",\n        ImmutableMap.of(\"app\", \"keywhiz\"));\n    ClientDetailResponse expectedClient = ClientDetailResponse.fromClient(client,\n        ImmutableList.of(firstGroup, secondGroup), ImmutableList.of());\n\n    when(clientDAO.getClientByName(\"client\")).thenReturn(Optional.of(client));\n    when(aclDAO.getGroupsFor(client)).thenReturn(ImmutableSet.of(firstGroup, secondGroup));\n\n    Response response = resource.findClient(automation, Optional.of(\"client\"));\n    assertThat(response.getEntity()).hasSameClassAs(expectedClient);\n    ClientDetailResponse actualResponse = (ClientDetailResponse) response.getEntity();\n    assertThat(actualResponse).isEqualToComparingFieldByField(expectedClient);\n  }", "signature": "void findClientByName()", "full_signature": "@Test public void findClientByName()", "class_method_signature": "AutomationClientResourceTest.findClientByName()", "testcase": true, "constructor": false, "invocations": ["of", "of", "fromClient", "of", "of", "thenReturn", "when", "getClientByName", "of", "thenReturn", "when", "getGroupsFor", "of", "findClient", "of", "hasSameClassAs", "assertThat", "getEntity", "getEntity", "isEqualToComparingFieldByField", "assertThat"]}, "focal_class": {"identifier": "AutomationClientResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientsResource.class)", "var_name": "logger"}, {"original_string": "private final ClientDAO clientDAO;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "AutomationClientResource", "parameters": "(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "full_signature": "@Inject public  AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "class_method_signature": "AutomationClientResource.AutomationClientResource(ClientDAOFactory clientDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "AutomationClientResource", "parameters": "(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "full_signature": "@VisibleForTesting  AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "class_method_signature": "AutomationClientResource.AutomationClientResource(ClientDAO clientDAO, AclDAO aclDAO,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "findClientById", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{clientId}\") public", "return": "Response", "signature": "Response findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{clientId}\") public Response findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "AutomationClientResource.findClientById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}, {"identifier": "findClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "full_signature": "@Timed @ExceptionMetered @GET public Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "class_method_signature": "AutomationClientResource.findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "ClientDetailResponse", "signature": "ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public ClientDetailResponse createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "class_method_signature": "AutomationClientResource.createClient(\n      @Auth AutomationClient automationClient,\n      @Valid CreateClientRequest clientRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteClient", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "modifiers": "@Timed @ExceptionMetered @DELETE @Path(\"{clientId}\") public", "return": "Response", "signature": "Response deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "full_signature": "@Timed @ExceptionMetered @DELETE @Path(\"{clientId}\") public Response deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "class_method_signature": "AutomationClientResource.deleteClient(@Auth AutomationClient automationClient,\n      @PathParam(\"clientId\") LongParam clientId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/AutomationClientResource.java"}, "focal_method": {"identifier": "findClient", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @GET\n  public Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name) {\n    logger.info(\"Automation ({}) - Looking up a name {}\", automationClient.getName(), name);\n\n    if (name.isPresent()) {\n      Client client = clientDAO.getClientByName(name.get()).orElseThrow(NotFoundException::new);\n      ImmutableList<Group> groups = ImmutableList.copyOf(aclDAO.getGroupsFor(client));\n      return Response.ok()\n          .entity(ClientDetailResponse.fromClient(client, groups, ImmutableList.of()))\n          .build();\n    }\n\n    List<ClientDetailResponse> clients = clientDAO.getClients().stream()\n        .map(c -> ClientDetailResponse.fromClient(c, ImmutableList.copyOf(aclDAO.getGroupsFor(c)),\n            ImmutableList.of()))\n        .collect(toList());\n    return Response.ok().entity(clients).build();\n  }", "signature": "Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "full_signature": "@Timed @ExceptionMetered @GET public Response findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "class_method_signature": "AutomationClientResource.findClient(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "testcase": false, "constructor": false, "invocations": ["info", "getName", "isPresent", "orElseThrow", "getClientByName", "get", "copyOf", "getGroupsFor", "build", "entity", "ok", "fromClient", "of", "collect", "map", "stream", "getClients", "fromClient", "copyOf", "getGroupsFor", "of", "toList", "build", "entity", "ok"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}