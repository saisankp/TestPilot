{"test_class": {"identifier": "ChainSamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/sampler/ChainSamplerTest.java"}, "test_case": {"identifier": "testSample", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSample() {\n        System.out.println(\"sample\");\n        \n        ChainSampler sampler = new ChainSampler(10, 125);\n        \n        for (int j=0; j<1000; j++) {\n            sampler.sample(j);\n        }\n    }", "signature": "void testSample()", "full_signature": "@Test public void testSample()", "class_method_signature": "ChainSamplerTest.testSample()", "testcase": true, "constructor": false, "invocations": ["println", "sample"]}, "focal_class": {"identifier": "ChainSampler", "superclass": "", "interfaces": "implements ISampleList<Serializable>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ChainSampler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ChainSampler.class)", "var_name": "LOG"}, {"original_string": "private int k;", "modifier": "private", "type": "int", "declarator": "k", "var_name": "k"}, {"original_string": "private int n;", "modifier": "private", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "private long count = 0;", "modifier": "private", "type": "long", "declarator": "count = 0", "var_name": "count"}, {"original_string": "private int fillSample = 0;", "modifier": "private", "type": "int", "declarator": "fillSample = 0", "var_name": "fillSample"}, {"original_string": "private Serializable[] items;", "modifier": "private", "type": "Serializable[]", "declarator": "items", "var_name": "items"}, {"original_string": "private Map<Integer, Integer> replacements;", "modifier": "private", "type": "Map<Integer, Integer>", "declarator": "replacements", "var_name": "replacements"}, {"original_string": "private Random rand = new Random();", "modifier": "private", "type": "Random", "declarator": "rand = new Random()", "var_name": "rand"}], "methods": [{"identifier": "ChainSampler", "parameters": "(int k, int n)", "modifiers": "public", "return": "", "signature": " ChainSampler(int k, int n)", "full_signature": "public  ChainSampler(int k, int n)", "class_method_signature": "ChainSampler.ChainSampler(int k, int n)", "testcase": false, "constructor": true}, {"identifier": "sample", "parameters": "(Serializable item)", "modifiers": "public", "return": "void", "signature": "void sample(Serializable item)", "full_signature": "public void sample(Serializable item)", "class_method_signature": "ChainSampler.sample(Serializable item)", "testcase": false, "constructor": false}, {"identifier": "sample", "parameters": "(Serializable... t)", "modifiers": "public", "return": "void", "signature": "void sample(Serializable... t)", "full_signature": "public void sample(Serializable... t)", "class_method_signature": "ChainSampler.sample(Serializable... t)", "testcase": false, "constructor": false}, {"identifier": "getSamples", "parameters": "()", "modifiers": "public", "return": "Collection<Serializable>", "signature": "Collection<Serializable> getSamples()", "full_signature": "public Collection<Serializable> getSamples()", "class_method_signature": "ChainSampler.getSamples()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "ChainSampler.getSize()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/sampler/ChainSampler.java"}, "focal_method": {"identifier": "sample", "parameters": "(Serializable item)", "modifiers": "public", "return": "void", "body": "public void sample(Serializable item) {\n        int i = (int) (count%n);\n        \n        if (replacements.containsKey(i)) {\n            int replace = replacements.get(i);\n            // replace the old item\n            items[replace] = item;\n            \n            int next = rand.nextInt(n);\n            \n            LOG.info(String.format(\"Item=%s; i=%d; b=%d; next=%d\", item, i, replace, next));\n            \n            replacements.remove(i);\n            replacements.put(next, replace);\n        }\n        \n        // this will build the initial sample\n        else if (fillSample < k) {\n            double prob = ((double)Math.min(i, n))/((double)n);\n            \n            if (rand.nextDouble() < prob) {\n                int bucket = fillSample++;\n                int next = rand.nextInt(n);\n                \n                items[bucket] = item;\n                replacements.put(next, bucket);\n                \n                LOG.info(String.format(\"[init] Item=%s; i=%d; b=%d; next=%d\", item, i, bucket, next));\n            }\n        }\n        count++;\n    }", "signature": "void sample(Serializable item)", "full_signature": "public void sample(Serializable item)", "class_method_signature": "ChainSampler.sample(Serializable item)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "nextInt", "info", "format", "remove", "put", "min", "nextDouble", "nextInt", "put", "info", "format"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}