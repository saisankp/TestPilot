{"test_class": {"identifier": "MetricQueryServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n        private HttpClientWrapper httpClient;", "modifier": "@Mock\n        private", "type": "HttpClientWrapper", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private Map<String, String> graphiteHeaders = Collections.emptyMap();", "modifier": "private", "type": "Map<String, String>", "declarator": "graphiteHeaders = Collections.emptyMap()", "var_name": "graphiteHeaders"}, {"original_string": "private Map<String, String> metrictankHeaders = Collections.singletonMap(\"x-org-id\", \"1\");", "modifier": "private", "type": "Map<String, String>", "declarator": "metrictankHeaders = Collections.singletonMap(\"x-org-id\", \"1\")", "var_name": "metrictankHeaders"}, {"original_string": "private MetricFunctionsSpec metricFunctionsSpec;", "modifier": "private", "type": "MetricFunctionsSpec", "declarator": "metricFunctionsSpec", "var_name": "metricFunctionsSpec"}, {"original_string": "private Config metricSourceSinkConfig;", "modifier": "private", "type": "Config", "declarator": "metricSourceSinkConfig", "var_name": "metricSourceSinkConfig"}, {"original_string": "public static Map<String, String> metricSourceSinkConfigMap;", "modifier": "public static", "type": "Map<String, String>", "declarator": "metricSourceSinkConfigMap", "var_name": "metricSourceSinkConfigMap"}], "file": "metrics/src/test/java/com/expedia/adaptivealerting/metrics/functions/service/MetricQueryServiceTest.java"}, "test_case": {"identifier": "testValidGraphiteMetricQueryResultMergeTagsFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testValidGraphiteMetricQueryResultMergeTagsFalse() throws Exception {\n                String functionsInputFile = \"config/functions-mergeTags-false-test.txt\";\n                MetricFunctionsSpec metricFunctionsSpec = MetricFunctionsReader\n                                .readFromInputFile(ClassLoader.getSystemResource(functionsInputFile).getPath()).get(0);\n\n                Instant fixedInstant = Instant.parse(\"2020-03-01T05:05:39Z\");\n                MetricQueryService metricQueryService = new MetricQueryService(httpClient);\n                MetricData metricDataResult = metricQueryService.queryMetricSource(metricSourceSinkConfig,\n                                metricFunctionsSpec, fixedInstant);\n                assertEquals(12.0, metricDataResult.getValue(), 0.1);\n                assertEquals(1583039100, metricDataResult.getTimestamp());\n                Map<String, String> tags = metricDataResult.getMetricDefinition().getTags().getKv();\n                assertEquals(2, tags.size());\n                assertEquals(\"sample_app2\", tags.get(\"app_name\"));\n                assertEquals(\"test\", tags.get(\"env\"));\n        }", "signature": "void testValidGraphiteMetricQueryResultMergeTagsFalse()", "full_signature": "@Test public void testValidGraphiteMetricQueryResultMergeTagsFalse()", "class_method_signature": "MetricQueryServiceTest.testValidGraphiteMetricQueryResultMergeTagsFalse()", "testcase": true, "constructor": false, "invocations": ["get", "readFromInputFile", "getPath", "getSystemResource", "parse", "queryMetricSource", "assertEquals", "getValue", "assertEquals", "getTimestamp", "getKv", "getTags", "getMetricDefinition", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "MetricQueryService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpClientWrapper metricFunctionHttpClient;", "modifier": "private", "type": "HttpClientWrapper", "declarator": "metricFunctionHttpClient", "var_name": "metricFunctionHttpClient"}, {"original_string": "private final String METRIC_SOURCE_KEY = \"metric-source\";", "modifier": "private final", "type": "String", "declarator": "METRIC_SOURCE_KEY = \"metric-source\"", "var_name": "METRIC_SOURCE_KEY"}, {"original_string": "private final static String IS_GRAPHITE_SERVER_METRICTANK_KEY = \"is-graphite-server-metrictank\";", "modifier": "private final static", "type": "String", "declarator": "IS_GRAPHITE_SERVER_METRICTANK_KEY = \"is-graphite-server-metrictank\"", "var_name": "IS_GRAPHITE_SERVER_METRICTANK_KEY"}, {"original_string": "private final static String GRAPHITE_SERVER_METRICTANK = \"metrictank\";", "modifier": "private final static", "type": "String", "declarator": "GRAPHITE_SERVER_METRICTANK = \"metrictank\"", "var_name": "GRAPHITE_SERVER_METRICTANK"}, {"original_string": "private final String GRAPHITE_URL_TEMPLATE_KEY = \"urlTemplate\";", "modifier": "private final", "type": "String", "declarator": "GRAPHITE_URL_TEMPLATE_KEY = \"urlTemplate\"", "var_name": "GRAPHITE_URL_TEMPLATE_KEY"}], "methods": [{"identifier": "MetricQueryService", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricQueryService()", "full_signature": "public  MetricQueryService()", "class_method_signature": "MetricQueryService.MetricQueryService()", "testcase": false, "constructor": true}, {"identifier": "MetricQueryService", "parameters": "(HttpClientWrapper httpClientWrapper)", "modifiers": "public", "return": "", "signature": " MetricQueryService(HttpClientWrapper httpClientWrapper)", "full_signature": "public  MetricQueryService(HttpClientWrapper httpClientWrapper)", "class_method_signature": "MetricQueryService.MetricQueryService(HttpClientWrapper httpClientWrapper)", "testcase": false, "constructor": true}, {"identifier": "queryMetricSource", "parameters": "(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "modifiers": "public", "return": "MetricData", "signature": "MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "full_signature": "public MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "class_method_signature": "MetricQueryService.queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "testcase": false, "constructor": false}, {"identifier": "queryGraphite", "parameters": "(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "modifiers": "private", "return": "MetricData", "signature": "MetricData queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "full_signature": "private MetricData queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "class_method_signature": "MetricQueryService.queryGraphite(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "testcase": false, "constructor": false}], "file": "metrics/src/main/java/com/expedia/adaptivealerting/metrics/functions/service/MetricQueryService.java"}, "focal_method": {"identifier": "queryMetricSource", "parameters": "(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "modifiers": "public", "return": "MetricData", "body": "public MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant) throws IllegalStateException, MetricQueryServiceException {\n        String metricSourceName = metricSourceSinkConfig.getString(METRIC_SOURCE_KEY);\n        switch (metricSourceName) {\n            case \"graphite\":\n                return queryGraphite(metricSourceSinkConfig, metricFunctionsSpec, instant);\n            default:\n                throw new IllegalStateException(String.format(\"Unknown metric source '%s'.\", metricSourceName));\n        }\n    }", "signature": "MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "full_signature": "public MetricData queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "class_method_signature": "MetricQueryService.queryMetricSource(Config metricSourceSinkConfig, MetricFunctionsSpec metricFunctionsSpec,\n            Instant instant)", "testcase": false, "constructor": false, "invocations": ["getString", "queryGraphite", "format"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}