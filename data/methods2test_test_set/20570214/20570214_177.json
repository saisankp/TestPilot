{"test_class": {"identifier": "EcdsaSignKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EcdsaSignKeyManager manager = new EcdsaSignKeyManager();", "modifier": "private final", "type": "EcdsaSignKeyManager", "declarator": "manager = new EcdsaSignKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/signature/EcdsaSignKeyManagerTest.java"}, "test_case": {"identifier": "validateKey_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateKey_empty() throws Exception {\n    try {\n      manager.validateKey(EcdsaPrivateKey.getDefaultInstance());\n      fail();\n    } catch (GeneralSecurityException e) {\n      // expected\n    }\n  }", "signature": "void validateKey_empty()", "full_signature": "@Test public void validateKey_empty()", "class_method_signature": "EcdsaSignKeyManagerTest.validateKey_empty()", "testcase": true, "constructor": false, "invocations": ["validateKey", "getDefaultInstance", "fail"]}, "focal_class": {"identifier": "EcdsaSignKeyManager", "superclass": "extends PrivateKeyTypeManager<EcdsaPrivateKey, EcdsaPublicKey>", "interfaces": "", "fields": [], "methods": [{"identifier": "EcdsaSignKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " EcdsaSignKeyManager()", "full_signature": "  EcdsaSignKeyManager()", "class_method_signature": "EcdsaSignKeyManager.EcdsaSignKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "EcdsaSignKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "EcdsaSignKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(EcdsaPrivateKey key)", "modifiers": "@Override public", "return": "EcdsaPublicKey", "signature": "EcdsaPublicKey getPublicKey(EcdsaPrivateKey key)", "full_signature": "@Override public EcdsaPublicKey getPublicKey(EcdsaPrivateKey key)", "class_method_signature": "EcdsaSignKeyManager.getPublicKey(EcdsaPrivateKey key)", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "EcdsaSignKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "EcdsaPrivateKey", "signature": "EcdsaPrivateKey parseKey(ByteString byteString)", "full_signature": "@Override public EcdsaPrivateKey parseKey(ByteString byteString)", "class_method_signature": "EcdsaSignKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(EcdsaPrivateKey privKey)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(EcdsaPrivateKey privKey)", "full_signature": "@Override public void validateKey(EcdsaPrivateKey privKey)", "class_method_signature": "EcdsaSignKeyManager.validateKey(EcdsaPrivateKey privKey)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey>", "signature": "KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey> keyFactory()", "full_signature": "@Override public KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey> keyFactory()", "class_method_signature": "EcdsaSignKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "registerPair", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void registerPair(boolean newKeyAllowed)", "full_signature": "public static void registerPair(boolean newKeyAllowed)", "class_method_signature": "EcdsaSignKeyManager.registerPair(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "ecdsaP256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate ecdsaP256Template()", "full_signature": "public static final KeyTemplate ecdsaP256Template()", "class_method_signature": "EcdsaSignKeyManager.ecdsaP256Template()", "testcase": false, "constructor": false}, {"identifier": "rawEcdsaP256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawEcdsaP256Template()", "full_signature": "public static final KeyTemplate rawEcdsaP256Template()", "class_method_signature": "EcdsaSignKeyManager.rawEcdsaP256Template()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      HashType hashType,\n      EllipticCurveType curve,\n      EcdsaSignatureEncoding encoding,\n      KeyTemplate.OutputPrefixType prefixType)", "modifiers": "public static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      HashType hashType,\n      EllipticCurveType curve,\n      EcdsaSignatureEncoding encoding,\n      KeyTemplate.OutputPrefixType prefixType)", "full_signature": "public static KeyTemplate createKeyTemplate(\n      HashType hashType,\n      EllipticCurveType curve,\n      EcdsaSignatureEncoding encoding,\n      KeyTemplate.OutputPrefixType prefixType)", "class_method_signature": "EcdsaSignKeyManager.createKeyTemplate(\n      HashType hashType,\n      EllipticCurveType curve,\n      EcdsaSignatureEncoding encoding,\n      KeyTemplate.OutputPrefixType prefixType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/signature/EcdsaSignKeyManager.java"}, "focal_method": {"identifier": "validateKey", "parameters": "(EcdsaPrivateKey privKey)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void validateKey(EcdsaPrivateKey privKey) throws GeneralSecurityException {\n    Validators.validateVersion(privKey.getVersion(), getVersion());\n    SigUtil.validateEcdsaParams(privKey.getPublicKey().getParams());\n  }", "signature": "void validateKey(EcdsaPrivateKey privKey)", "full_signature": "@Override public void validateKey(EcdsaPrivateKey privKey)", "class_method_signature": "EcdsaSignKeyManager.validateKey(EcdsaPrivateKey privKey)", "testcase": false, "constructor": false, "invocations": ["validateVersion", "getVersion", "getVersion", "validateEcdsaParams", "getParams", "getPublicKey"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}