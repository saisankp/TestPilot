{"test_class": {"identifier": "HerdStringUtilsTest", "superclass": "extends AbstractCoreTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private static final String CSV_INJECTION_ERROR_MSG = \"One or more schema column fields start with a prohibited character.\";", "modifier": "private static final", "type": "String", "declarator": "CSV_INJECTION_ERROR_MSG = \"One or more schema column fields start with a prohibited character.\"", "var_name": "CSV_INJECTION_ERROR_MSG"}], "file": "herd-code/herd-core/src/test/java/org/finra/herd/core/HerdStringUtilsTest.java"}, "test_case": {"identifier": "testStripHtmlCleanFragment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStripHtmlCleanFragment()\n    {\n        String result = HerdStringUtils.stripHtml(\"fragment\\nwith no html\");\n        assertEquals(\"fragment\\nwith no html\", result);\n    }", "signature": "void testStripHtmlCleanFragment()", "full_signature": "@Test public void testStripHtmlCleanFragment()", "class_method_signature": "HerdStringUtilsTest.testStripHtmlCleanFragment()", "testcase": true, "constructor": false, "invocations": ["stripHtml", "assertEquals"]}, "focal_class": {"identifier": "HerdStringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CSV_INJECTION_REGEX = \"^[+=@-].*\";", "modifier": "private static final", "type": "String", "declarator": "CSV_INJECTION_REGEX = \"^[+=@-].*\"", "var_name": "CSV_INJECTION_REGEX"}, {"original_string": "public static final String HIDDEN_TEXT = \"hidden\";", "modifier": "public static final", "type": "String", "declarator": "HIDDEN_TEXT = \"hidden\"", "var_name": "HIDDEN_TEXT"}, {"original_string": "private static Pattern REGEX_JSON_PASSWORD =\n        Pattern.compile(\"(\\\\\\\\?\\\"?password\\\\\\\\?\\\":\\\\\\\\?\\\")[\\\\w\\\\p{Punct}&&[^&]]*?(\\\\\\\\?\\\")\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_JSON_PASSWORD =\n        Pattern.compile(\"(\\\\\\\\?\\\"?password\\\\\\\\?\\\":\\\\\\\\?\\\")[\\\\w\\\\p{Punct}&&[^&]]*?(\\\\\\\\?\\\")\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_JSON_PASSWORD"}, {"original_string": "private static Pattern REGEX_JSON_PASSWORD2 =\n        Pattern.compile(\"(\\\"name\\\": \\\".*?password\\\", \\\"value\\\": \\\")[\\\\w\\\\p{Punct}&&[^&]]*?\\\"\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_JSON_PASSWORD2 =\n        Pattern.compile(\"(\\\"name\\\": \\\".*?password\\\", \\\"value\\\": \\\")[\\\\w\\\\p{Punct}&&[^&]]*?\\\"\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_JSON_PASSWORD2"}, {"original_string": "private static Pattern REGEX_XML_PASSWORD = Pattern.compile(\"(<.*?password>)[\\\\w\\\\p{Punct}&&[^&]]*?<\", Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "REGEX_XML_PASSWORD = Pattern.compile(\"(<.*?password>)[\\\\w\\\\p{Punct}&&[^&]]*?<\", Pattern.CASE_INSENSITIVE)", "var_name": "REGEX_XML_PASSWORD"}], "methods": [{"identifier": "decodeBase64", "parameters": "(String base64EncodedText)", "modifiers": "public static", "return": "String", "signature": "String decodeBase64(String base64EncodedText)", "full_signature": "public static String decodeBase64(String base64EncodedText)", "class_method_signature": "HerdStringUtils.decodeBase64(String base64EncodedText)", "testcase": false, "constructor": false}, {"identifier": "getShortDescription", "parameters": "(String description, Integer shortDescMaxLength)", "modifiers": "public static", "return": "String", "signature": "String getShortDescription(String description, Integer shortDescMaxLength)", "full_signature": "public static String getShortDescription(String description, Integer shortDescMaxLength)", "class_method_signature": "HerdStringUtils.getShortDescription(String description, Integer shortDescMaxLength)", "testcase": false, "constructor": false}, {"identifier": "stripHtml", "parameters": "(String fragment, String... whitelistTags)", "modifiers": "public static", "return": "String", "signature": "String stripHtml(String fragment, String... whitelistTags)", "full_signature": "public static String stripHtml(String fragment, String... whitelistTags)", "class_method_signature": "HerdStringUtils.stripHtml(String fragment, String... whitelistTags)", "testcase": false, "constructor": false}, {"identifier": "checkCsvInjection", "parameters": "(String text, String errorMessage)", "modifiers": "public static", "return": "void", "signature": "void checkCsvInjection(String text, String errorMessage)", "full_signature": "public static void checkCsvInjection(String text, String errorMessage)", "class_method_signature": "HerdStringUtils.checkCsvInjection(String text, String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "convertStringToInteger", "parameters": "(final String stringValue, final Integer defaultValue)", "modifiers": "public static", "return": "Integer", "signature": "Integer convertStringToInteger(final String stringValue, final Integer defaultValue)", "full_signature": "public static Integer convertStringToInteger(final String stringValue, final Integer defaultValue)", "class_method_signature": "HerdStringUtils.convertStringToInteger(final String stringValue, final Integer defaultValue)", "testcase": false, "constructor": false}, {"identifier": "sanitizeLogText", "parameters": "(String loggingText)", "modifiers": "public static", "return": "String", "signature": "String sanitizeLogText(String loggingText)", "full_signature": "public static String sanitizeLogText(String loggingText)", "class_method_signature": "HerdStringUtils.sanitizeLogText(String loggingText)", "testcase": false, "constructor": false}], "file": "herd-code/herd-core/src/main/java/org/finra/herd/core/HerdStringUtils.java"}, "focal_method": {"identifier": "stripHtml", "parameters": "(String fragment, String... whitelistTags)", "modifiers": "public static", "return": "String", "body": "public static String stripHtml(String fragment, String... whitelistTags)\n    {\n        // Unescape HTML.\n        String unEscapedFragment = StringEscapeUtils.unescapeHtml4(fragment);\n\n        // Parse out html tags except those from a given list of whitelist tags\n        Document dirty = Jsoup.parseBodyFragment(unEscapedFragment);\n\n        Whitelist whitelist = new Whitelist();\n\n        for (String whitelistTag : whitelistTags)\n        {\n            // Get the actual tag name from the whitelist tag\n            // this is vulnerable in general to complex tags but will suffice for our simple needs\n            whitelistTag = StringUtils.removePattern(whitelistTag, \"[^\\\\{IsAlphabetic}]\");\n\n            // Add all specified tags to the whitelist while preserving inline css\n            whitelist.addTags(whitelistTag).addAttributes(whitelistTag, \"class\");\n        }\n\n        Cleaner cleaner = new Cleaner(whitelist);\n        Document clean = cleaner.clean(dirty);\n        // Set character encoding to UTF-8 and make sure no line-breaks are added\n        clean.outputSettings().escapeMode(Entities.EscapeMode.base).charset(StandardCharsets.UTF_8).prettyPrint(false);\n\n        // return 'cleaned' html body\n        return clean.body().html();\n    }", "signature": "String stripHtml(String fragment, String... whitelistTags)", "full_signature": "public static String stripHtml(String fragment, String... whitelistTags)", "class_method_signature": "HerdStringUtils.stripHtml(String fragment, String... whitelistTags)", "testcase": false, "constructor": false, "invocations": ["unescapeHtml4", "parseBodyFragment", "removePattern", "addAttributes", "addTags", "clean", "prettyPrint", "charset", "escapeMode", "outputSettings", "html", "body"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}