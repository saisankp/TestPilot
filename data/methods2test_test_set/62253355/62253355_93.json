{"test_class": {"identifier": "RecordPermissionsRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private RecordPermissionsRest rest;", "modifier": "private", "type": "RecordPermissionsRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private String recordJson;", "modifier": "private", "type": "String", "declarator": "recordJson", "var_name": "recordJson"}, {"original_string": "private XACMLPolicy recordPolicy;", "modifier": "private", "type": "XACMLPolicy", "declarator": "recordPolicy", "var_name": "recordPolicy"}, {"original_string": "private XACMLPolicy policyPolicy;", "modifier": "private", "type": "XACMLPolicy", "declarator": "policyPolicy", "var_name": "policyPolicy"}, {"original_string": "private IRI recordIRI;", "modifier": "private", "type": "IRI", "declarator": "recordIRI", "var_name": "recordIRI"}, {"original_string": "private IRI recordPolicyIRI;", "modifier": "private", "type": "IRI", "declarator": "recordPolicyIRI", "var_name": "recordPolicyIRI"}, {"original_string": "private IRI policyPolicyIRI;", "modifier": "private", "type": "IRI", "declarator": "policyPolicyIRI", "var_name": "policyPolicyIRI"}, {"original_string": "private IRI invalidIRI;", "modifier": "private", "type": "IRI", "declarator": "invalidIRI", "var_name": "invalidIRI"}, {"original_string": "private Statement recordStatement;", "modifier": "private", "type": "Statement", "declarator": "recordStatement", "var_name": "recordStatement"}, {"original_string": "private Statement policyStatement;", "modifier": "private", "type": "Statement", "declarator": "policyStatement", "var_name": "policyStatement"}, {"original_string": "@Mock\n    private XACMLPolicyManager policyManager;", "modifier": "@Mock\n    private", "type": "XACMLPolicyManager", "declarator": "policyManager", "var_name": "policyManager"}, {"original_string": "@Mock\n    private RepositoryConnection conn;", "modifier": "@Mock\n    private", "type": "RepositoryConnection", "declarator": "conn", "var_name": "conn"}, {"original_string": "@Mock\n    private Repository repo;", "modifier": "@Mock\n    private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "@Mock\n    private RepositoryResult recordRepoResult;", "modifier": "@Mock\n    private", "type": "RepositoryResult", "declarator": "recordRepoResult", "var_name": "recordRepoResult"}, {"original_string": "@Mock\n    private RepositoryResult policyRepoResult;", "modifier": "@Mock\n    private", "type": "RepositoryResult", "declarator": "policyRepoResult", "var_name": "policyRepoResult"}, {"original_string": "@Mock\n    private RepositoryResult emptyRepoResult;", "modifier": "@Mock\n    private", "type": "RepositoryResult", "declarator": "emptyRepoResult", "var_name": "emptyRepoResult"}], "file": "com.mobi.security.policy.rest/src/test/java/com/mobi/security/policy/rest/RecordPermissionsRestTest.java"}, "test_case": {"identifier": "updateRecordPolicyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateRecordPolicyTest() {\n        // Setup\n        when(policyManager.createPolicy(any(PolicyType.class))).thenAnswer(invocation -> {\n            PolicyType pt = invocation.getArgumentAt(0, PolicyType.class);\n            if (pt.getPolicyId().equals(recordPolicyIRI.stringValue())) {\n                return recordPolicy;\n            } else {\n                return policyPolicy;\n            }\n        });\n\n        Response response = target().path(\"record-permissions/\" + encode(recordIRI.stringValue())).request().put(Entity.json(recordJson));\n        assertEquals(response.getStatus(), 200);\n        verify(policyManager).getPolicy(recordPolicyIRI);\n        verify(policyManager).getPolicy(policyPolicyIRI);\n        verify(policyManager, times(2)).createPolicy(any(PolicyType.class));\n        verify(policyManager, times(2)).updatePolicy(any(XACMLPolicy.class));\n    }", "signature": "void updateRecordPolicyTest()", "full_signature": "@Test public void updateRecordPolicyTest()", "class_method_signature": "RecordPermissionsRestTest.updateRecordPolicyTest()", "testcase": true, "constructor": false, "invocations": ["thenAnswer", "when", "createPolicy", "any", "getArgumentAt", "equals", "getPolicyId", "stringValue", "put", "request", "path", "target", "encode", "stringValue", "json", "assertEquals", "getStatus", "getPolicy", "verify", "getPolicy", "verify", "createPolicy", "verify", "times", "any", "updatePolicy", "verify", "times", "any"]}, "focal_class": {"identifier": "RecordPermissionsRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger LOGGER = LoggerFactory.getLogger(RecordPermissionsRest.class);", "modifier": "private final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RecordPermissionsRest.class)", "var_name": "LOGGER"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private XACMLPolicyManager policyManager;", "modifier": "private", "type": "XACMLPolicyManager", "declarator": "policyManager", "var_name": "policyManager"}, {"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}], "methods": [{"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "RecordPermissionsRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setPolicyManager", "parameters": "(XACMLPolicyManager policyManager)", "modifiers": "@Reference", "return": "void", "signature": "void setPolicyManager(XACMLPolicyManager policyManager)", "full_signature": "@Reference void setPolicyManager(XACMLPolicyManager policyManager)", "class_method_signature": "RecordPermissionsRest.setPolicyManager(XACMLPolicyManager policyManager)", "testcase": false, "constructor": false}, {"identifier": "setRepo", "parameters": "(Repository repo)", "modifiers": "@Reference(target = \"(id=system)\") public", "return": "void", "signature": "void setRepo(Repository repo)", "full_signature": "@Reference(target = \"(id=system)\") public void setRepo(Repository repo)", "class_method_signature": "RecordPermissionsRest.setRepo(Repository repo)", "testcase": false, "constructor": false}, {"identifier": "retrieveRecordPolicy", "parameters": "(@PathParam(\"recordId\") String recordId)", "modifiers": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{recordId}\") @ApiOperation(\"Retrieves a specific record security policy by its ID.\") @ActionId(Update.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "signature": "Response retrieveRecordPolicy(@PathParam(\"recordId\") String recordId)", "full_signature": "@GET @Produces(MediaType.APPLICATION_JSON) @Path(\"{recordId}\") @ApiOperation(\"Retrieves a specific record security policy by its ID.\") @ActionId(Update.TYPE) @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response retrieveRecordPolicy(@PathParam(\"recordId\") String recordId)", "class_method_signature": "RecordPermissionsRest.retrieveRecordPolicy(@PathParam(\"recordId\") String recordId)", "testcase": false, "constructor": false}, {"identifier": "updateRecordPolicy", "parameters": "(@PathParam(\"recordId\") String recordId, String policyJson)", "modifiers": "@PUT @Path(\"{recordId}\") @Consumes(MediaType.APPLICATION_JSON) @ApiOperation(\"Updates an existing record security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "signature": "Response updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "full_signature": "@PUT @Path(\"{recordId}\") @Consumes(MediaType.APPLICATION_JSON) @ApiOperation(\"Updates an existing record security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "class_method_signature": "RecordPermissionsRest.updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "testcase": false, "constructor": false}, {"identifier": "getRelatedResourceId", "parameters": "(String resourceId, RepositoryConnection conn)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getRelatedResourceId(String resourceId, RepositoryConnection conn)", "full_signature": "private Optional<String> getRelatedResourceId(String resourceId, RepositoryConnection conn)", "class_method_signature": "RecordPermissionsRest.getRelatedResourceId(String resourceId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updatePolicyPolicy", "parameters": "(String json, PolicyType policyType)", "modifiers": "private", "return": "XACMLPolicy", "signature": "XACMLPolicy updatePolicyPolicy(String json, PolicyType policyType)", "full_signature": "private XACMLPolicy updatePolicyPolicy(String json, PolicyType policyType)", "class_method_signature": "RecordPermissionsRest.updatePolicyPolicy(String json, PolicyType policyType)", "testcase": false, "constructor": false}, {"identifier": "recordJsonToPolicy", "parameters": "(String json, PolicyType policyType)", "modifiers": "private", "return": "XACMLPolicy", "signature": "XACMLPolicy recordJsonToPolicy(String json, PolicyType policyType)", "full_signature": "private XACMLPolicy recordJsonToPolicy(String json, PolicyType policyType)", "class_method_signature": "RecordPermissionsRest.recordJsonToPolicy(String json, PolicyType policyType)", "testcase": false, "constructor": false}, {"identifier": "addUsersOrGroupsToAnyOf", "parameters": "(JSONArray array, AttributeDesignatorType attributeDesignator,\n                                         AnyOfType... anyOfArray)", "modifiers": "private", "return": "void", "signature": "void addUsersOrGroupsToAnyOf(JSONArray array, AttributeDesignatorType attributeDesignator,\n                                         AnyOfType... anyOfArray)", "full_signature": "private void addUsersOrGroupsToAnyOf(JSONArray array, AttributeDesignatorType attributeDesignator,\n                                         AnyOfType... anyOfArray)", "class_method_signature": "RecordPermissionsRest.addUsersOrGroupsToAnyOf(JSONArray array, AttributeDesignatorType attributeDesignator,\n                                         AnyOfType... anyOfArray)", "testcase": false, "constructor": false}, {"identifier": "createMasterBranchExpression", "parameters": "(String masterBranch)", "modifiers": "private", "return": "JAXBElement<?>", "signature": "JAXBElement<?> createMasterBranchExpression(String masterBranch)", "full_signature": "private JAXBElement<?> createMasterBranchExpression(String masterBranch)", "class_method_signature": "RecordPermissionsRest.createMasterBranchExpression(String masterBranch)", "testcase": false, "constructor": false}, {"identifier": "recordPolicyToJson", "parameters": "(XACMLPolicy policy)", "modifiers": "private", "return": "String", "signature": "String recordPolicyToJson(XACMLPolicy policy)", "full_signature": "private String recordPolicyToJson(XACMLPolicy policy)", "class_method_signature": "RecordPermissionsRest.recordPolicyToJson(XACMLPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "createRule", "parameters": "(EffectType effect, String ruleId, TargetType target)", "modifiers": "private", "return": "RuleType", "signature": "RuleType createRule(EffectType effect, String ruleId, TargetType target)", "full_signature": "private RuleType createRule(EffectType effect, String ruleId, TargetType target)", "class_method_signature": "RecordPermissionsRest.createRule(EffectType effect, String ruleId, TargetType target)", "testcase": false, "constructor": false}, {"identifier": "createMatch", "parameters": "(String matchId, AttributeDesignatorType attributeDesignator,\n                                  AttributeValueType attributeValue)", "modifiers": "private", "return": "MatchType", "signature": "MatchType createMatch(String matchId, AttributeDesignatorType attributeDesignator,\n                                  AttributeValueType attributeValue)", "full_signature": "private MatchType createMatch(String matchId, AttributeDesignatorType attributeDesignator,\n                                  AttributeValueType attributeValue)", "class_method_signature": "RecordPermissionsRest.createMatch(String matchId, AttributeDesignatorType attributeDesignator,\n                                  AttributeValueType attributeValue)", "testcase": false, "constructor": false}, {"identifier": "createUserRoleMatch", "parameters": "()", "modifiers": "private", "return": "MatchType", "signature": "MatchType createUserRoleMatch()", "full_signature": "private MatchType createUserRoleMatch()", "class_method_signature": "RecordPermissionsRest.createUserRoleMatch()", "testcase": false, "constructor": false}, {"identifier": "createAttributeDesignator", "parameters": "(String attributeId, String category, String dataType,\n                                                              boolean mustBePresent)", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createAttributeDesignator(String attributeId, String category, String dataType,\n                                                              boolean mustBePresent)", "full_signature": "private AttributeDesignatorType createAttributeDesignator(String attributeId, String category, String dataType,\n                                                              boolean mustBePresent)", "class_method_signature": "RecordPermissionsRest.createAttributeDesignator(String attributeId, String category, String dataType,\n                                                              boolean mustBePresent)", "testcase": false, "constructor": false}, {"identifier": "createAttributeValue", "parameters": "(String dataType, String content)", "modifiers": "private", "return": "AttributeValueType", "signature": "AttributeValueType createAttributeValue(String dataType, String content)", "full_signature": "private AttributeValueType createAttributeValue(String dataType, String content)", "class_method_signature": "RecordPermissionsRest.createAttributeValue(String dataType, String content)", "testcase": false, "constructor": false}, {"identifier": "createSubjectIdAttrDesig", "parameters": "()", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createSubjectIdAttrDesig()", "full_signature": "private AttributeDesignatorType createSubjectIdAttrDesig()", "class_method_signature": "RecordPermissionsRest.createSubjectIdAttrDesig()", "testcase": false, "constructor": false}, {"identifier": "createActionIdAttrDesig", "parameters": "()", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createActionIdAttrDesig()", "full_signature": "private AttributeDesignatorType createActionIdAttrDesig()", "class_method_signature": "RecordPermissionsRest.createActionIdAttrDesig()", "testcase": false, "constructor": false}, {"identifier": "createGroupAttrDesig", "parameters": "()", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createGroupAttrDesig()", "full_signature": "private AttributeDesignatorType createGroupAttrDesig()", "class_method_signature": "RecordPermissionsRest.createGroupAttrDesig()", "testcase": false, "constructor": false}, {"identifier": "createBranchAttrDesig", "parameters": "()", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createBranchAttrDesig()", "full_signature": "private AttributeDesignatorType createBranchAttrDesig()", "class_method_signature": "RecordPermissionsRest.createBranchAttrDesig()", "testcase": false, "constructor": false}, {"identifier": "createUserAttrDesig", "parameters": "()", "modifiers": "private", "return": "AttributeDesignatorType", "signature": "AttributeDesignatorType createUserAttrDesig()", "full_signature": "private AttributeDesignatorType createUserAttrDesig()", "class_method_signature": "RecordPermissionsRest.createUserAttrDesig()", "testcase": false, "constructor": false}, {"identifier": "createUserAttrVal", "parameters": "()", "modifiers": "private", "return": "AttributeValueType", "signature": "AttributeValueType createUserAttrVal()", "full_signature": "private AttributeValueType createUserAttrVal()", "class_method_signature": "RecordPermissionsRest.createUserAttrVal()", "testcase": false, "constructor": false}], "file": "com.mobi.security.policy.rest/src/main/java/com/mobi/security/policy/rest/RecordPermissionsRest.java"}, "focal_method": {"identifier": "updateRecordPolicy", "parameters": "(@PathParam(\"recordId\") String recordId, String policyJson)", "modifiers": "@PUT @Path(\"{recordId}\") @Consumes(MediaType.APPLICATION_JSON) @ApiOperation(\"Updates an existing record security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public", "return": "Response", "body": "@PUT\n    @Path(\"{recordId}\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    @ApiOperation(\"Updates an existing record security policy using the provided JSON body.\")\n    @ResourceId(type = ValueType.PATH, value = \"recordId\")\n    public Response updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson) {\n        try (RepositoryConnection conn = repo.getConnection()) {\n            // Record Policy\n            Optional<String> recordPolicyIdOpt = getRelatedResourceId(recordId, conn);\n            String recordPolicyId = recordPolicyIdOpt.orElseThrow(() -> ErrorUtils.sendError(\"Policy for record \"\n                    + recordId + \" does not exist in repository\", Response.Status.BAD_REQUEST));\n            IRI recordPolicyIRI = vf.createIRI(recordPolicyId);\n            Optional<XACMLPolicy> recordPolicy = policyManager.getPolicy(recordPolicyIRI);\n            if (!recordPolicy.isPresent()) {\n                throw ErrorUtils.sendError(\"Record policy to update could not be found\", Response.Status.BAD_REQUEST);\n            }\n\n            XACMLPolicy updatedRecordPolicy = recordJsonToPolicy(policyJson, recordPolicy.get().getJaxbPolicy());\n            if (!updatedRecordPolicy.getId().equals(recordPolicyIRI)) {\n                throw ErrorUtils.sendError(\"Policy Id does not match provided record policy\",\n                        Response.Status.BAD_REQUEST);\n            }\n\n            // Policy Policy\n            Optional<String> policyPolicyIdOpt = getRelatedResourceId(recordPolicyId, conn);\n            String policyPolicyId = policyPolicyIdOpt.orElseThrow(() -> ErrorUtils.sendError(\"Policy for record \"\n                    + \"policy \" + recordId + \" does not exist in repository\", Response.Status.BAD_REQUEST));\n            if (StringUtils.isEmpty(policyPolicyId)) {\n                throw ErrorUtils.sendError(\"Policy for policy \" + recordPolicyId + \"does not exist in repository\",\n                        Response.Status.BAD_REQUEST);\n            }\n            IRI policyPolicyIRI = vf.createIRI(policyPolicyId);\n            Optional<XACMLPolicy> policyPolicy = policyManager.getPolicy(policyPolicyIRI);\n            if (!policyPolicy.isPresent()) {\n                throw ErrorUtils.sendError(\"Policy policy to update could not be found\", Response.Status.BAD_REQUEST);\n            }\n\n            XACMLPolicy updatedPolicyPolicy = updatePolicyPolicy(policyJson, policyPolicy.get().getJaxbPolicy());\n            if (!updatedPolicyPolicy.getId().equals(vf.createIRI(policyPolicyId))) {\n                throw ErrorUtils.sendError(\"Policy policy Id does not match provided policy\",\n                        Response.Status.BAD_REQUEST);\n            }\n\n            policyManager.updatePolicy(updatedRecordPolicy);\n            policyManager.updatePolicy(updatedPolicyPolicy);\n            return Response.ok().build();\n        } catch (IllegalArgumentException | PolicySyntaxException ex) {\n            throw ErrorUtils.sendError(ex, ex.getMessage(), Response.Status.BAD_REQUEST);\n        } catch (IllegalStateException | MobiException ex) {\n            throw ErrorUtils.sendError(ex, \"Policy could not be updated\", Response.Status.INTERNAL_SERVER_ERROR);\n        }\n    }", "signature": "Response updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "full_signature": "@PUT @Path(\"{recordId}\") @Consumes(MediaType.APPLICATION_JSON) @ApiOperation(\"Updates an existing record security policy using the provided JSON body.\") @ResourceId(type = ValueType.PATH, value = \"recordId\") public Response updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "class_method_signature": "RecordPermissionsRest.updateRecordPolicy(@PathParam(\"recordId\") String recordId, String policyJson)", "testcase": false, "constructor": false, "invocations": ["getConnection", "getRelatedResourceId", "orElseThrow", "sendError", "createIRI", "getPolicy", "isPresent", "sendError", "recordJsonToPolicy", "getJaxbPolicy", "get", "equals", "getId", "sendError", "getRelatedResourceId", "orElseThrow", "sendError", "isEmpty", "sendError", "createIRI", "getPolicy", "isPresent", "sendError", "updatePolicyPolicy", "getJaxbPolicy", "get", "equals", "getId", "createIRI", "sendError", "updatePolicy", "updatePolicy", "build", "ok", "sendError", "getMessage", "sendError"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}