{"test_class": {"identifier": "EventBusSourceTest", "superclass": "extends EventbusTestBase", "interfaces": "", "fields": [{"original_string": "private WeldContainer container;", "modifier": "private", "type": "WeldContainer", "declarator": "container", "var_name": "container"}], "file": "smallrye-reactive-messaging-vertx-eventbus/src/test/java/io/smallrye/reactive/messaging/eventbus/EventBusSourceTest.java"}, "test_case": {"identifier": "testSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSource() {\n        String topic = UUID.randomUUID().toString();\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"address\", topic);\n        EventBusSource source = new EventBusSource(vertx,\n                new VertxEventBusConnectorIncomingConfiguration(new MapBasedConfig(config)));\n\n        List<EventBusMessage<Integer>> messages = new ArrayList<>();\n        Multi.createFrom().publisher(source.source().buildRs())\n                .onItem().castTo(EventBusMessage.class)\n                .subscribe().with(messages::add);\n        AtomicInteger counter = new AtomicInteger();\n        new Thread(() -> usage.produceIntegers(topic, 10, true, null,\n                counter::getAndIncrement)).start();\n\n        await().atMost(2, TimeUnit.MINUTES).until(() -> messages.size() >= 10);\n        assertThat(messages.stream()\n                .map(EventBusMessage::getPayload)\n                .collect(Collectors.toList()))\n                        .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n    }", "signature": "void testSource()", "full_signature": "@Test public void testSource()", "class_method_signature": "EventBusSourceTest.testSource()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "put", "with", "subscribe", "castTo", "onItem", "publisher", "createFrom", "buildRs", "source", "start", "produceIntegers", "until", "atMost", "await", "size", "containsExactly", "assertThat", "collect", "map", "stream", "toList"]}, "focal_class": {"identifier": "EventBusSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String address;", "modifier": "private final", "type": "String", "declarator": "address", "var_name": "address"}, {"original_string": "private final boolean ack;", "modifier": "private final", "type": "boolean", "declarator": "ack", "var_name": "ack"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final boolean broadcast;", "modifier": "private final", "type": "boolean", "declarator": "broadcast", "var_name": "broadcast"}], "methods": [{"identifier": "EventBusSource", "parameters": "(Vertx vertx, VertxEventBusConnectorIncomingConfiguration config)", "modifiers": "", "return": "", "signature": " EventBusSource(Vertx vertx, VertxEventBusConnectorIncomingConfiguration config)", "full_signature": "  EventBusSource(Vertx vertx, VertxEventBusConnectorIncomingConfiguration config)", "class_method_signature": "EventBusSource.EventBusSource(Vertx vertx, VertxEventBusConnectorIncomingConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<? extends Message<?>>", "signature": "PublisherBuilder<? extends Message<?>> source()", "full_signature": " PublisherBuilder<? extends Message<?>> source()", "class_method_signature": "EventBusSource.source()", "testcase": false, "constructor": false}, {"identifier": "adapt", "parameters": "(io.vertx.mutiny.core.eventbus.Message<?> msg)", "modifiers": "private", "return": "Message<?>", "signature": "Message<?> adapt(io.vertx.mutiny.core.eventbus.Message<?> msg)", "full_signature": "private Message<?> adapt(io.vertx.mutiny.core.eventbus.Message<?> msg)", "class_method_signature": "EventBusSource.adapt(io.vertx.mutiny.core.eventbus.Message<?> msg)", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-vertx-eventbus/src/main/java/io/smallrye/reactive/messaging/eventbus/EventBusSource.java"}, "focal_method": {"identifier": "source", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<? extends Message<?>>", "body": "PublisherBuilder<? extends Message<?>> source() {\n        MessageConsumer<Message<?>> consumer = vertx.eventBus().consumer(address);\n        Multi<io.vertx.mutiny.core.eventbus.Message<Message<?>>> multi = consumer.toMulti();\n        if (broadcast) {\n            multi = multi.broadcast().toAllSubscribers();\n        }\n        return ReactiveStreams.fromPublisher(multi)\n                .map(this::adapt);\n    }", "signature": "PublisherBuilder<? extends Message<?>> source()", "full_signature": " PublisherBuilder<? extends Message<?>> source()", "class_method_signature": "EventBusSource.source()", "testcase": false, "constructor": false, "invocations": ["consumer", "eventBus", "toMulti", "toAllSubscribers", "broadcast", "map", "fromPublisher"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}