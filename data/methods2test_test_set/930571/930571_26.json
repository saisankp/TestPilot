{"test_class": {"identifier": "UserAndGroupsTasksPreprocessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DataSetLookup dataSetLookup;", "modifier": "", "type": "DataSetLookup", "declarator": "dataSetLookup", "var_name": "dataSetLookup"}, {"original_string": "private static String COL_ID = \"POTOWNER\";", "modifier": "private static", "type": "String", "declarator": "COL_ID = \"POTOWNER\"", "var_name": "COL_ID"}, {"original_string": "@Mock\n    IdentityProvider identityProvider;", "modifier": "@Mock", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "@Mock\n    UserGroupCallback userGroupCallback;", "modifier": "@Mock", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "@Mock\n    DataSetMetadata metaData;", "modifier": "@Mock", "type": "DataSetMetadata", "declarator": "metaData", "var_name": "metaData"}, {"original_string": "@InjectMocks\n    UserAndGroupsTasksPreprocessor userAndGroupsTasksPreprocessor;", "modifier": "@InjectMocks", "type": "UserAndGroupsTasksPreprocessor", "declarator": "userAndGroupsTasksPreprocessor", "var_name": "userAndGroupsTasksPreprocessor"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessorTest.java"}, "test_case": {"identifier": "testSetUser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetUser() {\n        String role1 = \"role1\";\n        String role2 = \"role2\";\n        String userId = \"userId\";\n\n        when(userGroupCallback.getGroupsForUser(userId)).thenReturn(Arrays.asList(role1,\n                                                                                  role2));\n        when(identityProvider.getName()).thenReturn(userId);\n\n        userAndGroupsTasksPreprocessor.preprocess(dataSetLookup);\n\n        assertEquals(\"(POTOWNER in \" + role1 + \", \" + role2 + \", \" + userId + \")\",\n                     dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n    }", "signature": "void testSetUser()", "full_signature": "@Test public void testSetUser()", "class_method_signature": "UserAndGroupsTasksPreprocessorTest.testSetUser()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getGroupsForUser", "asList", "thenReturn", "when", "getName", "preprocess", "assertEquals", "toString", "get", "getColumnFilterList", "getFirstFilterOp"]}, "focal_class": {"identifier": "UserAndGroupsTasksPreprocessor", "superclass": "extends UserTasksPreprocessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UserAndGroupsTasksPreprocessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UserAndGroupsTasksPreprocessor.class)", "var_name": "LOGGER"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private String columnId;", "modifier": "private", "type": "String", "declarator": "columnId", "var_name": "columnId"}], "methods": [{"identifier": "UserAndGroupsTasksPreprocessor", "parameters": "(IdentityProvider identityProvider, UserGroupCallback userGroupCallback, \n                                          String columnId, DataSetMetadata metadata)", "modifiers": "public", "return": "", "signature": " UserAndGroupsTasksPreprocessor(IdentityProvider identityProvider, UserGroupCallback userGroupCallback, \n                                          String columnId, DataSetMetadata metadata)", "full_signature": "public  UserAndGroupsTasksPreprocessor(IdentityProvider identityProvider, UserGroupCallback userGroupCallback, \n                                          String columnId, DataSetMetadata metadata)", "class_method_signature": "UserAndGroupsTasksPreprocessor.UserAndGroupsTasksPreprocessor(IdentityProvider identityProvider, UserGroupCallback userGroupCallback, \n                                          String columnId, DataSetMetadata metadata)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "UserAndGroupsTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false}, {"identifier": "addUserAndGroupsFromIdentityProvider", "parameters": "(List<Comparable> orgEntities, String userId)", "modifiers": "private", "return": "void", "signature": "void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities, String userId)", "full_signature": "private void addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities, String userId)", "class_method_signature": "UserAndGroupsTasksPreprocessor.addUserAndGroupsFromIdentityProvider(List<Comparable> orgEntities, String userId)", "testcase": false, "constructor": false}, {"identifier": "removeCoreFunctionFilter", "parameters": "(List<ColumnFilter> filters, ColumnFilter removedFilter)", "modifiers": "private", "return": "void", "signature": "void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter)", "full_signature": "private void removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter)", "class_method_signature": "UserAndGroupsTasksPreprocessor.removeCoreFunctionFilter(List<ColumnFilter> filters, ColumnFilter removedFilter)", "testcase": false, "constructor": false}, {"identifier": "extractCoreFunctionFilter", "parameters": "(List<ColumnFilter> filters)", "modifiers": "private", "return": "List<CoreFunctionFilter>", "signature": "List<CoreFunctionFilter> extractCoreFunctionFilter(List<ColumnFilter> filters)", "full_signature": "private List<CoreFunctionFilter> extractCoreFunctionFilter(List<ColumnFilter> filters)", "class_method_signature": "UserAndGroupsTasksPreprocessor.extractCoreFunctionFilter(List<ColumnFilter> filters)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/UserAndGroupsTasksPreprocessor.java"}, "focal_method": {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    public void preprocess(DataSetLookup lookup) {\n        if (identityProvider == null || userGroupCallback == null) {\n            return;\n        }\n\n        ColumnFilter columnFilter;\n        List<Comparable> orgEntities = new ArrayList<>();\n\n        if (lookup.getFirstFilterOp() != null) {\n            List<String> potOwners = new ArrayList<String>();\n            List<CoreFunctionFilter> columnFilters = extractCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList());\n            Iterator<CoreFunctionFilter> it = columnFilters.iterator();\n            while (orgEntities.isEmpty() && it.hasNext()) {\n                CoreFunctionFilter column = it.next();\n\n                if (column.getColumnId().toUpperCase().equals(columnId)) {\n                    potOwners.addAll(column.getParameters());\n\n                    for (String potOwner : potOwners) {\n                        addUserAndGroupsFromIdentityProvider(orgEntities, potOwner);\n                    }\n\n                    //  we have now a tree as expression. we need to traverse the entire tree for finding the filter.\n                    removeCoreFunctionFilter(lookup.getFirstFilterOp().getColumnFilterList(), column);\n                }\n\n            }\n\n\n            if (orgEntities.isEmpty()) {\n                addUserAndGroupsFromIdentityProvider(orgEntities, identityProvider.getName());\n            }\n\n            columnFilter = AND(in(COLUMN_POTOWNER, orgEntities));\n            lookup.getFirstFilterOp().addFilterColumn(columnFilter);\n        } else {\n            DataSetFilter filter = new DataSetFilter();\n            addUserAndGroupsFromIdentityProvider(orgEntities, identityProvider.getName());\n\n            columnFilter = AND(in(COLUMN_POTOWNER, orgEntities));\n            filter.addFilterColumn(columnFilter);\n            lookup.addOperation(filter);\n        }\n\n        LOGGER.debug(\"Adding column filter: {}\", columnFilter);\n\n        super.preprocess(lookup);\n    }", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "UserAndGroupsTasksPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false, "invocations": ["getFirstFilterOp", "extractCoreFunctionFilter", "getColumnFilterList", "getFirstFilterOp", "iterator", "isEmpty", "hasNext", "next", "equals", "toUpperCase", "getColumnId", "addAll", "getParameters", "addUserAndGroupsFromIdentityProvider", "removeCoreFunctionFilter", "getColumnFilterList", "getFirstFilterOp", "isEmpty", "addUserAndGroupsFromIdentityProvider", "getName", "AND", "in", "addFilterColumn", "getFirstFilterOp", "addUserAndGroupsFromIdentityProvider", "getName", "AND", "in", "addFilterColumn", "addOperation", "debug", "preprocess"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}