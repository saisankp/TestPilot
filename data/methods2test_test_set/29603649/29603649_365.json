{"test_class": {"identifier": "WilmaAdminHostsFileParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WILMA_ADMIN_HOSTS_FILE = \"wilma.admin.hosts.file\";", "modifier": "private static final", "type": "String", "declarator": "WILMA_ADMIN_HOSTS_FILE = \"wilma.admin.hosts.file\"", "var_name": "WILMA_ADMIN_HOSTS_FILE"}, {"original_string": "@Mock\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Mock\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Mock\n    private PropertyHolder propertyHolder;", "modifier": "@Mock\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Mock\n    private BufferedReaderFactory bufferedReaderFactory;", "modifier": "@Mock\n    private", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}, {"original_string": "@InjectMocks\n    private WilmaAdminHostsFileParser underTest;", "modifier": "@InjectMocks\n    private", "type": "WilmaAdminHostsFileParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private BufferedReader bufferedReader;", "modifier": "@Mock\n    private", "type": "BufferedReader", "declarator": "bufferedReader", "var_name": "bufferedReader"}], "file": "wilma-application/modules/wilma-engine/src/test/java/com/epam/wilma/engine/configuration/parser/WilmaAdminHostsFileParserTest.java"}, "test_case": {"identifier": "testWhenGivenFileDoesNotExistShouldThrowCannotParseExternalResourceException", "parameters": "()", "modifiers": "@Test(expectedExceptions = CannotParseExternalResourceException.class) public", "return": "void", "body": "@Test(expectedExceptions = CannotParseExternalResourceException.class)\n    public void testWhenGivenFileDoesNotExistShouldThrowCannotParseExternalResourceException() throws IOException {\n        //GIVEN\n        String filePath = \"file.txt\";\n        given(propertyHolder.get(WILMA_ADMIN_HOSTS_FILE)).willReturn(filePath);\n        given(bufferedReaderFactory.createBufferedReaderFromFilePath(filePath)).willThrow(\n                new CannotParseExternalResourceException(\"error\", new IOException()));\n        //WHEN\n        underTest.parseFile();\n        //THEN\n        verify(wilmaAdminHostsDTO, never()).setSecurityEnabled(Mockito.anyBoolean());\n        verify(wilmaAdminHostsDTO, never()).setWilmaAdminHosts(Mockito.anyListOf(String.class));\n    }", "signature": "void testWhenGivenFileDoesNotExistShouldThrowCannotParseExternalResourceException()", "full_signature": "@Test(expectedExceptions = CannotParseExternalResourceException.class) public void testWhenGivenFileDoesNotExistShouldThrowCannotParseExternalResourceException()", "class_method_signature": "WilmaAdminHostsFileParserTest.testWhenGivenFileDoesNotExistShouldThrowCannotParseExternalResourceException()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "get", "willThrow", "given", "createBufferedReaderFromFilePath", "parseFile", "setSecurityEnabled", "verify", "never", "anyBoolean", "setWilmaAdminHosts", "verify", "never", "anyListOf"]}, "focal_class": {"identifier": "WilmaAdminHostsFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String WILMA_ADMIN_HOSTS_FILE = \"wilma.admin.hosts.file\";", "modifier": "private static final", "type": "String", "declarator": "WILMA_ADMIN_HOSTS_FILE = \"wilma.admin.hosts.file\"", "var_name": "WILMA_ADMIN_HOSTS_FILE"}, {"original_string": "private static final String ERROR_TEMPLATE = \"Error occurred at wilma admin hosts file parsing, file path: '%s'\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_TEMPLATE = \"Error occurred at wilma admin hosts file parsing, file path: '%s'\"", "var_name": "ERROR_TEMPLATE"}, {"original_string": "@Autowired\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Autowired\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Autowired\n    private PropertyHolder propertyHolder;", "modifier": "@Autowired\n    private", "type": "PropertyHolder", "declarator": "propertyHolder", "var_name": "propertyHolder"}, {"original_string": "@Autowired\n    private BufferedReaderFactory bufferedReaderFactory;", "modifier": "@Autowired\n    private", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}], "methods": [{"identifier": "parseFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void parseFile()", "full_signature": "public void parseFile()", "class_method_signature": "WilmaAdminHostsFileParser.parseFile()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-engine/src/main/java/com/epam/wilma/engine/configuration/parser/WilmaAdminHostsFileParser.java"}, "focal_method": {"identifier": "parseFile", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void parseFile() {\n        String filePath = propertyHolder.get(WILMA_ADMIN_HOSTS_FILE);\n        List<String> wilmaAdminHosts = new ArrayList<>();\n        boolean securityEnabled = !\"\".equals(filePath) && filePath != null;\n        if (securityEnabled) {\n            try (BufferedReader bufferedReader = bufferedReaderFactory.createBufferedReaderFromFilePath(filePath)) {\n                while (bufferedReader.ready()) {\n                    String host = bufferedReader.readLine();\n                    wilmaAdminHosts.add(host);\n                }\n            } catch (IOException e) {\n                throw new CannotParseExternalResourceException(String.format(ERROR_TEMPLATE, filePath), e);\n            }\n        }\n        wilmaAdminHostsDTO.setWilmaAdminHosts(wilmaAdminHosts);\n        wilmaAdminHostsDTO.setSecurityEnabled(securityEnabled);\n    }", "signature": "void parseFile()", "full_signature": "public void parseFile()", "class_method_signature": "WilmaAdminHostsFileParser.parseFile()", "testcase": false, "constructor": false, "invocations": ["get", "equals", "createBufferedReaderFromFilePath", "ready", "readLine", "add", "format", "setWilmaAdminHosts", "setSecurityEnabled"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}