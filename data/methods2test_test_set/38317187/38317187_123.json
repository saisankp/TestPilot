{"test_class": {"identifier": "OperationFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Metadata metadata;", "modifier": "private", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private ResourceAddress address;", "modifier": "private", "type": "ResourceAddress", "declarator": "address", "var_name": "address"}, {"original_string": "private OperationFactory operationFactory;", "modifier": "private", "type": "OperationFactory", "declarator": "operationFactory", "var_name": "operationFactory"}], "file": "core/src/test/java/org/jboss/hal/core/OperationFactoryTest.java"}, "test_case": {"identifier": "reset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reset() {\n        Composite composite = operationFactory.resetResource(address,\n                Sets.newHashSet(\"authentication-context\", // string w/ alternative\n                        \"capacity-decrementer-class\", // string\n                        \"capacity-incrementer-properties\", // object\n                        \"class-name\", // string(required)\n                        \"connectable\", // boolean(false)\n                        \"initial-pool-size\", // int\n                        \"max-pool-size\", // int(20)\n                        \"xa-resource-timeout\"), // is required by wrap-xa-resource\n                metadata);\n        assertUndefine(composite, \"capacity-decrementer-class\");\n        assertUndefine(composite, \"capacity-incrementer-properties\");\n        assertUndefine(composite, \"connectable\");\n        assertUndefine(composite, \"max-pool-size\");\n        assertUndefineNotPresent(composite, \"xa-resource-timeout\");\n    }", "signature": "void reset()", "full_signature": "@Test public void reset()", "class_method_signature": "OperationFactoryTest.reset()", "testcase": true, "constructor": false, "invocations": ["resetResource", "newHashSet", "assertUndefine", "assertUndefine", "assertUndefine", "assertUndefine", "assertUndefineNotPresent"]}, "focal_class": {"identifier": "OperationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OperationFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OperationFactory.class)", "var_name": "logger"}, {"original_string": "private final Function<String, String> nameFn;", "modifier": "private final", "type": "Function<String, String>", "declarator": "nameFn", "var_name": "nameFn"}], "methods": [{"identifier": "OperationFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " OperationFactory()", "full_signature": "public  OperationFactory()", "class_method_signature": "OperationFactory.OperationFactory()", "testcase": false, "constructor": true}, {"identifier": "OperationFactory", "parameters": "(Function<String, String> nameFn)", "modifiers": "public", "return": "", "signature": " OperationFactory(Function<String, String> nameFn)", "full_signature": "public  OperationFactory(Function<String, String> nameFn)", "class_method_signature": "OperationFactory.OperationFactory(Function<String, String> nameFn)", "testcase": false, "constructor": true}, {"identifier": "fromChangeSet", "parameters": "(ResourceAddress address, Map<String, Object> changeSet,\n            Metadata metadata)", "modifiers": "public", "return": "Composite", "signature": "Composite fromChangeSet(ResourceAddress address, Map<String, Object> changeSet,\n            Metadata metadata)", "full_signature": "public Composite fromChangeSet(ResourceAddress address, Map<String, Object> changeSet,\n            Metadata metadata)", "class_method_signature": "OperationFactory.fromChangeSet(ResourceAddress address, Map<String, Object> changeSet,\n            Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "resetResource", "parameters": "(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "modifiers": "", "return": "Composite", "signature": "Composite resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "full_signature": " Composite resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "class_method_signature": "OperationFactory.resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean isNullOrEmpty(Object value)", "full_signature": "private boolean isNullOrEmpty(Object value)", "class_method_signature": "OperationFactory.isNullOrEmpty(Object value)", "testcase": false, "constructor": false}, {"identifier": "undefineAttribute", "parameters": "(ResourceAddress address, String name)", "modifiers": "private", "return": "Operation", "signature": "Operation undefineAttribute(ResourceAddress address, String name)", "full_signature": "private Operation undefineAttribute(ResourceAddress address, String name)", "class_method_signature": "OperationFactory.undefineAttribute(ResourceAddress address, String name)", "testcase": false, "constructor": false}, {"identifier": "writeAttribute", "parameters": "(ResourceAddress address, String name, Object value,\n            ResourceDescription resourceDescription)", "modifiers": "private", "return": "Operation", "signature": "Operation writeAttribute(ResourceAddress address, String name, Object value,\n            ResourceDescription resourceDescription)", "full_signature": "private Operation writeAttribute(ResourceAddress address, String name, Object value,\n            ResourceDescription resourceDescription)", "class_method_signature": "OperationFactory.writeAttribute(ResourceAddress address, String name, Object value,\n            ResourceDescription resourceDescription)", "testcase": false, "constructor": false}, {"identifier": "attributeName", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String attributeName(String name)", "full_signature": "private String attributeName(String name)", "class_method_signature": "OperationFactory.attributeName(String name)", "testcase": false, "constructor": false}, {"identifier": "asValueNode", "parameters": "(String name, Object value, ResourceDescription resourceDescription)", "modifiers": "private", "return": "ModelNode", "signature": "ModelNode asValueNode(String name, Object value, ResourceDescription resourceDescription)", "full_signature": "private ModelNode asValueNode(String name, Object value, ResourceDescription resourceDescription)", "class_method_signature": "OperationFactory.asValueNode(String name, Object value, ResourceDescription resourceDescription)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jboss/hal/core/OperationFactory.java"}, "focal_method": {"identifier": "resetResource", "parameters": "(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "modifiers": "", "return": "Composite", "body": "Composite resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata) {\n        List<Operation> operations = new ArrayList<>();\n        ResourceDescription description = metadata.getDescription();\n\n        // collect all attributes from the 'requires' list of this attribute\n        // HashMultimap<String, String> requires = HashMultimap.create();\n        TreeSet<String> requires = new TreeSet<>();\n        ModelNode attributesDescription = description.get(ATTRIBUTES);\n        attributes.forEach(attribute -> {\n            ModelNode attributeDescription = attributesDescription.get(attribute);\n            if (attributeDescription != null && attributeDescription.hasDefined(REQUIRES)) {\n                failSafeList(attributeDescription, REQUIRES).forEach(node -> requires.add(node.asString()));\n                        /*.map(ModelNode::asString)\n                        .forEach(requiresName -> {\n                            requires.add(requiresName);\n                        });*/\n            }\n        });\n\n        attributes.stream()\n                .map(attribute -> description.findAttribute(ATTRIBUTES, attribute))\n                .filter(Objects::nonNull)\n                .forEach(property -> {\n                    ModelNode attributeDescription = property.getValue();\n                    boolean nillable = attributeDescription.hasDefined(NILLABLE) &&\n                            attributeDescription.get(NILLABLE).asBoolean();\n                    boolean readOnly = attributeDescription.hasDefined(ACCESS_TYPE) &&\n                            READ_ONLY.equals(attributeDescription.get(ACCESS_TYPE).asString());\n                    boolean alternatives = attributeDescription.hasDefined(ALTERNATIVES) &&\n                            !attributeDescription.get(ALTERNATIVES).asList().isEmpty();\n                    boolean requiredBy = requires.contains(property.getName());\n\n                    if (nillable && !readOnly && !alternatives && !requiredBy) {\n                        boolean hasDefault = attributeDescription.hasDefined(DEFAULT);\n                        ModelType type = attributeDescription.get(TYPE).asType();\n                        switch (type) {\n                            case BIG_DECIMAL:\n                            case BIG_INTEGER:\n                            case BOOLEAN:\n                            case BYTES:\n                            case DOUBLE:\n                            case INT:\n                            case LONG:\n                                if (hasDefault) {\n                                    operations.add(undefineAttribute(address, attributeName(property.getName())));\n                                }\n                                break;\n                            case EXPRESSION:\n                            case LIST:\n                            case OBJECT:\n                            case PROPERTY:\n                            case STRING:\n                                operations.add(undefineAttribute(address, attributeName(property.getName())));\n                                break;\n                            case TYPE:\n                            case UNDEFINED:\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                });\n        return new Composite(operations);\n    }", "signature": "Composite resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "full_signature": " Composite resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "class_method_signature": "OperationFactory.resetResource(ResourceAddress address, Set<String> attributes,\n            Metadata metadata)", "testcase": false, "constructor": false, "invocations": ["getDescription", "get", "forEach", "get", "hasDefined", "forEach", "failSafeList", "add", "asString", "forEach", "filter", "map", "stream", "findAttribute", "getValue", "hasDefined", "asBoolean", "get", "hasDefined", "equals", "asString", "get", "hasDefined", "isEmpty", "asList", "get", "contains", "getName", "hasDefined", "asType", "get", "add", "undefineAttribute", "attributeName", "getName", "add", "undefineAttribute", "attributeName", "getName"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}