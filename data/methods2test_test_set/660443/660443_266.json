{"test_class": {"identifier": "AromaticityCalculatorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/aromaticity/AromaticityCalculatorTest.java"}, "test_case": {"identifier": "testIsAromatic_IRing_IAtomContainer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsAromatic_IRing_IAtomContainer() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n\n        IAtomContainer mol = sp.parseSmiles(\"c1ccncc1\");\n        IRingSet rs = (new AllRingsFinder()).findAllRings(mol);\n\n        Assert.assertEquals(1, rs.getAtomContainerCount());\n        Assert.assertTrue(AromaticityCalculator.isAromatic((IRing) rs.getAtomContainer(0), mol));\n    }", "signature": "void testIsAromatic_IRing_IAtomContainer()", "full_signature": "@Test public void testIsAromatic_IRing_IAtomContainer()", "class_method_signature": "AromaticityCalculatorTest.testIsAromatic_IRing_IAtomContainer()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "findAllRings", "assertEquals", "getAtomContainerCount", "assertTrue", "isAromatic", "getAtomContainer"]}, "focal_class": {"identifier": "AromaticityCalculator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isAromatic", "parameters": "(IRing ring, IAtomContainer atomContainer)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAromatic(IRing ring, IAtomContainer atomContainer)", "full_signature": "public static boolean isAromatic(IRing ring, IAtomContainer atomContainer)", "class_method_signature": "AromaticityCalculator.isAromatic(IRing ring, IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/aromaticity/AromaticityCalculator.java"}, "focal_method": {"identifier": "isAromatic", "parameters": "(IRing ring, IAtomContainer atomContainer)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isAromatic(IRing ring, IAtomContainer atomContainer) {\n\n        java.util.Iterator<IAtom> ringAtoms = ring.atoms().iterator();\n        int eCount = 0;\n        java.util.List<IBond> conectedBonds;\n        int numDoubleBond = 0;\n        boolean allConnectedBondsSingle;\n\n        while (ringAtoms.hasNext()) {\n            IAtom atom = ringAtoms.next();\n            numDoubleBond = 0;\n            allConnectedBondsSingle = true;\n            conectedBonds = atomContainer.getConnectedBondsList(atom);\n            for (IBond conectedBond : conectedBonds) {\n                if (conectedBond.getOrder() == IBond.Order.DOUBLE && ring.contains(conectedBond)) {\n                    numDoubleBond++;\n                }\n\n                // Count the Electron if bond order = 1.5\n                else if (conectedBond.getFlag(CDKConstants.ISAROMATIC) && ring.contains(conectedBond)) {\n                    numDoubleBond = 1;\n                }\n\n                if (conectedBond.getOrder() != IBond.Order.SINGLE) {\n                    allConnectedBondsSingle = false;\n                }\n            }\n            if (numDoubleBond == 1) {\n                //C or heteroatoms both contibute 1 electron in sp2 hybridized form\n                eCount++;\n            } else if (!atom.getSymbol().equals(\"C\")) {\n                //Heteroatom probably in sp3 hybrid therefore 2 electrons contributed.\n                eCount = eCount + 2;\n            } else if (atom.getFlag(CDKConstants.ISAROMATIC)) {\n                eCount++;\n            } else if (allConnectedBondsSingle && atom.getSymbol().equals(\"C\") && atom.getFormalCharge() == 1.0) {\n                // This is for tropylium and kinds.\n                // Dependence on hybridisation would be better:\n                // empty p-orbital is needed\n                continue;\n            } else {\n                return false;\n            }\n        }\n        return eCount - 2 != 0 && (eCount - 2) % 4 == 0;\n    }", "signature": "boolean isAromatic(IRing ring, IAtomContainer atomContainer)", "full_signature": "public static boolean isAromatic(IRing ring, IAtomContainer atomContainer)", "class_method_signature": "AromaticityCalculator.isAromatic(IRing ring, IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["iterator", "atoms", "hasNext", "next", "getConnectedBondsList", "getOrder", "contains", "getFlag", "contains", "getOrder", "equals", "getSymbol", "getFlag", "equals", "getSymbol", "getFormalCharge"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}