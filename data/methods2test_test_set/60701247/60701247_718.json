{"test_class": {"identifier": "CaptureNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers/testSrc/com/android/tools/profilers/cpu/CaptureNodeTest.java"}, "test_case": {"identifier": "addChild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addChild() {\n    CaptureNode realParent = new CaptureNode(new StubCaptureNodeModel());\n    CaptureNode childA = new CaptureNode(new StubCaptureNodeModel());\n    VisualNodeCaptureNode visualParent = new VisualNodeCaptureNode(new StubCaptureNodeModel());\n\n    realParent.addChild(childA);\n\n    assertThat(childA.getParent()).isEqualTo(realParent);\n    assertThat(realParent.getChildAt(0)).isEqualTo(childA);\n\n    visualParent.addChild(childA);\n    assertThat(childA.getParent()).isEqualTo(realParent);\n    assertThat(realParent.getChildAt(0)).isEqualTo(childA);\n    assertThat(visualParent.getChildAt(0)).isEqualTo(childA);\n  }", "signature": "void addChild()", "full_signature": "@Test public void addChild()", "class_method_signature": "CaptureNodeTest.addChild()", "testcase": true, "constructor": false, "invocations": ["addChild", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getChildAt", "addChild", "isEqualTo", "assertThat", "getParent", "isEqualTo", "assertThat", "getChildAt", "isEqualTo", "assertThat", "getChildAt"]}, "focal_class": {"identifier": "CaptureNode", "superclass": "", "interfaces": "implements HNode<CaptureNode>", "fields": [{"original_string": "private long myStartGlobal;", "modifier": "private", "type": "long", "declarator": "myStartGlobal", "var_name": "myStartGlobal"}, {"original_string": "private long myEndGlobal;", "modifier": "private", "type": "long", "declarator": "myEndGlobal", "var_name": "myEndGlobal"}, {"original_string": "private long myStartThread;", "modifier": "private", "type": "long", "declarator": "myStartThread", "var_name": "myStartThread"}, {"original_string": "private long myEndThread;", "modifier": "private", "type": "long", "declarator": "myEndThread", "var_name": "myEndThread"}, {"original_string": "@NotNull\n  protected final List<CaptureNode> myChildren;", "modifier": "@NotNull\n  protected final", "type": "List<CaptureNode>", "declarator": "myChildren", "var_name": "myChildren"}, {"original_string": "@NotNull\n  private ClockType myClockType;", "modifier": "@NotNull\n  private", "type": "ClockType", "declarator": "myClockType", "var_name": "myClockType"}, {"original_string": "private CaptureNode myParent;", "modifier": "private", "type": "CaptureNode", "declarator": "myParent", "var_name": "myParent"}, {"original_string": "@NotNull\n  private FilterType myFilterType;", "modifier": "@NotNull\n  private", "type": "FilterType", "declarator": "myFilterType", "var_name": "myFilterType"}, {"original_string": "private int myDepth;", "modifier": "private", "type": "int", "declarator": "myDepth", "var_name": "myDepth"}, {"original_string": "@NotNull\n  private final CaptureNodeModel myData;", "modifier": "@NotNull\n  private final", "type": "CaptureNodeModel", "declarator": "myData", "var_name": "myData"}], "methods": [{"identifier": "CaptureNode", "parameters": "(@NotNull CaptureNodeModel model)", "modifiers": "public", "return": "", "signature": " CaptureNode(@NotNull CaptureNodeModel model)", "full_signature": "public  CaptureNode(@NotNull CaptureNodeModel model)", "class_method_signature": "CaptureNode.CaptureNode(@NotNull CaptureNodeModel model)", "testcase": false, "constructor": true}, {"identifier": "addChild", "parameters": "(CaptureNode node)", "modifiers": "public", "return": "void", "signature": "void addChild(CaptureNode node)", "full_signature": "public void addChild(CaptureNode node)", "class_method_signature": "CaptureNode.addChild(CaptureNode node)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@NotNull public", "return": "List<CaptureNode>", "signature": "List<CaptureNode> getChildren()", "full_signature": "@NotNull public List<CaptureNode> getChildren()", "class_method_signature": "CaptureNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "@NotNull public", "return": "CaptureNodeModel", "signature": "CaptureNodeModel getData()", "full_signature": "@NotNull public CaptureNodeModel getData()", "class_method_signature": "CaptureNode.getData()", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getChildCount()", "full_signature": "@Override public int getChildCount()", "class_method_signature": "CaptureNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@NotNull @Override public", "return": "CaptureNode", "signature": "CaptureNode getChildAt(int index)", "full_signature": "@NotNull @Override public CaptureNode getChildAt(int index)", "class_method_signature": "CaptureNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "CaptureNode", "signature": "CaptureNode getParent()", "full_signature": "@Nullable @Override public CaptureNode getParent()", "class_method_signature": "CaptureNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getStart()", "full_signature": "@Override public long getStart()", "class_method_signature": "CaptureNode.getStart()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEnd()", "full_signature": "@Override public long getEnd()", "class_method_signature": "CaptureNode.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDepth()", "full_signature": "@Override public int getDepth()", "class_method_signature": "CaptureNode.getDepth()", "testcase": false, "constructor": false}, {"identifier": "setStartGlobal", "parameters": "(long startGlobal)", "modifiers": "public", "return": "void", "signature": "void setStartGlobal(long startGlobal)", "full_signature": "public void setStartGlobal(long startGlobal)", "class_method_signature": "CaptureNode.setStartGlobal(long startGlobal)", "testcase": false, "constructor": false}, {"identifier": "getStartGlobal", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartGlobal()", "full_signature": "public long getStartGlobal()", "class_method_signature": "CaptureNode.getStartGlobal()", "testcase": false, "constructor": false}, {"identifier": "setEndGlobal", "parameters": "(long endGlobal)", "modifiers": "public", "return": "void", "signature": "void setEndGlobal(long endGlobal)", "full_signature": "public void setEndGlobal(long endGlobal)", "class_method_signature": "CaptureNode.setEndGlobal(long endGlobal)", "testcase": false, "constructor": false}, {"identifier": "getEndGlobal", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEndGlobal()", "full_signature": "public long getEndGlobal()", "class_method_signature": "CaptureNode.getEndGlobal()", "testcase": false, "constructor": false}, {"identifier": "setStartThread", "parameters": "(long startThread)", "modifiers": "public", "return": "void", "signature": "void setStartThread(long startThread)", "full_signature": "public void setStartThread(long startThread)", "class_method_signature": "CaptureNode.setStartThread(long startThread)", "testcase": false, "constructor": false}, {"identifier": "getStartThread", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartThread()", "full_signature": "public long getStartThread()", "class_method_signature": "CaptureNode.getStartThread()", "testcase": false, "constructor": false}, {"identifier": "setEndThread", "parameters": "(long endThread)", "modifiers": "public", "return": "void", "signature": "void setEndThread(long endThread)", "full_signature": "public void setEndThread(long endThread)", "class_method_signature": "CaptureNode.setEndThread(long endThread)", "testcase": false, "constructor": false}, {"identifier": "getEndThread", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEndThread()", "full_signature": "public long getEndThread()", "class_method_signature": "CaptureNode.getEndThread()", "testcase": false, "constructor": false}, {"identifier": "setClockType", "parameters": "(@NotNull ClockType clockType)", "modifiers": "public", "return": "void", "signature": "void setClockType(@NotNull ClockType clockType)", "full_signature": "public void setClockType(@NotNull ClockType clockType)", "class_method_signature": "CaptureNode.setClockType(@NotNull ClockType clockType)", "testcase": false, "constructor": false}, {"identifier": "threadGlobalRatio", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double threadGlobalRatio()", "full_signature": "public double threadGlobalRatio()", "class_method_signature": "CaptureNode.threadGlobalRatio()", "testcase": false, "constructor": false}, {"identifier": "getClockType", "parameters": "()", "modifiers": "@NotNull public", "return": "ClockType", "signature": "ClockType getClockType()", "full_signature": "@NotNull public ClockType getClockType()", "class_method_signature": "CaptureNode.getClockType()", "testcase": false, "constructor": false}, {"identifier": "setDepth", "parameters": "(int depth)", "modifiers": "public", "return": "void", "signature": "void setDepth(int depth)", "full_signature": "public void setDepth(int depth)", "class_method_signature": "CaptureNode.setDepth(int depth)", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(@NotNull Filter filter)", "modifiers": "@NotNull public", "return": "FilterResult", "signature": "FilterResult applyFilter(@NotNull Filter filter)", "full_signature": "@NotNull public FilterResult applyFilter(@NotNull Filter filter)", "class_method_signature": "CaptureNode.applyFilter(@NotNull Filter filter)", "testcase": false, "constructor": false}, {"identifier": "applyFilter", "parameters": "(@NotNull Filter filter, boolean matches)", "modifiers": "@NotNull private", "return": "FilterResult", "signature": "FilterResult applyFilter(@NotNull Filter filter, boolean matches)", "full_signature": "@NotNull private FilterResult applyFilter(@NotNull Filter filter, boolean matches)", "class_method_signature": "CaptureNode.applyFilter(@NotNull Filter filter, boolean matches)", "testcase": false, "constructor": false}, {"identifier": "getFilterType", "parameters": "()", "modifiers": "@NotNull public", "return": "FilterType", "signature": "FilterType getFilterType()", "full_signature": "@NotNull public FilterType getFilterType()", "class_method_signature": "CaptureNode.getFilterType()", "testcase": false, "constructor": false}, {"identifier": "setFilterType", "parameters": "(@NotNull FilterType type)", "modifiers": "public", "return": "void", "signature": "void setFilterType(@NotNull FilterType type)", "full_signature": "public void setFilterType(@NotNull FilterType type)", "class_method_signature": "CaptureNode.setFilterType(@NotNull FilterType type)", "testcase": false, "constructor": false}, {"identifier": "isUnmatched", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUnmatched()", "full_signature": "public boolean isUnmatched()", "class_method_signature": "CaptureNode.isUnmatched()", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/CaptureNode.java"}, "focal_method": {"identifier": "addChild", "parameters": "(CaptureNode node)", "modifiers": "public", "return": "void", "body": "public void addChild(CaptureNode node) {\n    myChildren.add(node);\n    node.myParent = this;\n  }", "signature": "void addChild(CaptureNode node)", "full_signature": "public void addChild(CaptureNode node)", "class_method_signature": "CaptureNode.addChild(CaptureNode node)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}