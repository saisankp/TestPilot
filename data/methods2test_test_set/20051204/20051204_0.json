{"test_class": {"identifier": "TestComponentCommandOrder", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestComponentCommandOrder.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestComponentCommandOrder.class)", "var_name": "log"}, {"original_string": "private final MockContainerId containerId = new MockContainerId(1);", "modifier": "private final", "type": "MockContainerId", "declarator": "containerId = new MockContainerId(1)", "var_name": "containerId"}, {"original_string": "private static ConfTreeOperations resources = new ConfTreeOperations(\n      new ConfTree());", "modifier": "private static", "type": "ConfTreeOperations", "declarator": "resources = new ConfTreeOperations(\n      new ConfTree())", "var_name": "resources"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestComponentCommandOrder.java"}, "test_case": {"identifier": "testComponentCommandOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComponentCommandOrder() throws Exception {\n    CommandOrder co1 = new CommandOrder();\n    co1.setCommand(\"A-START\");\n    co1.setRequires(\"B-STARTED\");\n    CommandOrder co2 = new CommandOrder();\n    co2.setCommand(\"A-START\");\n    co2.setRequires(\"C-STARTED\");\n    CommandOrder co3 = new CommandOrder();\n    co3.setCommand(\"B-START\");\n    co3.setRequires(\"C-STARTED,D-STARTED,E-INSTALLED\");\n\n    ComponentCommandOrder cco = new ComponentCommandOrder(\n        Arrays.asList(co1, co2, co3), resources);\n    ComponentInstanceState cisB = new ComponentInstanceState(\"B\",\n        containerId, \"aid\");\n    ComponentInstanceState cisC = new ComponentInstanceState(\"C\", containerId, \"aid\");\n    ComponentInstanceState cisD = new ComponentInstanceState(\"D\", containerId, \"aid\");\n    ComponentInstanceState cisE = new ComponentInstanceState(\"E\", containerId, \"aid\");\n    ComponentInstanceState cisE2 = new ComponentInstanceState(\"E\", containerId, \"aid\");\n    cisB.setState(State.STARTED);\n    cisC.setState(State.INSTALLED);\n    Assert.assertTrue(cco.canExecute(\"A\", Command.START, Arrays.asList(cisB)));\n    Assert.assertFalse(cco.canExecute(\"A\", Command.START, Arrays.asList(cisB, cisC)));\n\n    cisC.setState(State.STARTING);\n    Assert.assertFalse(cco.canExecute(\"A\", Command.START, Arrays.asList(cisB, cisC)));\n\n    cisC.setState(State.INSTALL_FAILED);\n    Assert.assertFalse(cco.canExecute(\"A\", Command.START, Arrays.asList(cisB, cisC)));\n\n    cisD.setState(State.INSTALL_FAILED);\n    cisE.setState(State.STARTED);\n    Assert.assertTrue(cco.canExecute(\"E\", Command.START, Arrays.asList(cisB, cisC, cisD, cisE)));\n\n    Assert.assertTrue(cco.canExecute(\"B\", Command.INSTALL, Arrays.asList(cisB, cisC, cisD, cisE)));\n    Assert.assertFalse(cco.canExecute(\"B\", Command.START, Arrays.asList(cisB, cisC, cisD, cisE)));\n\n    cisD.setState(State.INSTALLING);\n    Assert.assertFalse(cco.canExecute(\"B\", Command.START, Arrays.asList(cisB, cisC, cisD, cisE)));\n\n    cisC.setState(State.STARTED);\n    cisD.setState(State.STARTED);\n    Assert.assertTrue(cco.canExecute(\"B\", Command.START, Arrays.asList(cisB, cisC, cisD, cisE)));\n\n    cisE2.setState(State.INSTALLING);\n    Assert.assertFalse(cco.canExecute(\"B\", Command.START, Arrays.asList(cisE, cisE2)));\n\n    cisE2.setState(State.INSTALLED);\n    Assert.assertTrue(cco.canExecute(\"B\", Command.START, Arrays.asList(cisE, cisE2)));\n\n    cisE2.setState(State.STARTED);\n    Assert.assertTrue(cco.canExecute(\"B\", Command.START, Arrays.asList(cisE, cisE2)));\n\n    cisE2.setState(State.STARTING);\n    Assert.assertTrue(cco.canExecute(\"B\", Command.START, Arrays.asList(cisE, cisE2)));\n  }", "signature": "void testComponentCommandOrder()", "full_signature": "@Test public void testComponentCommandOrder()", "class_method_signature": "TestComponentCommandOrder.testComponentCommandOrder()", "testcase": true, "constructor": false, "invocations": ["setCommand", "setRequires", "setCommand", "setRequires", "setCommand", "setRequires", "asList", "setState", "setState", "assertTrue", "canExecute", "asList", "assertFalse", "canExecute", "asList", "setState", "assertFalse", "canExecute", "asList", "setState", "assertFalse", "canExecute", "asList", "setState", "setState", "assertTrue", "canExecute", "asList", "assertTrue", "canExecute", "asList", "assertFalse", "canExecute", "asList", "setState", "assertFalse", "canExecute", "asList", "setState", "setState", "assertTrue", "canExecute", "asList", "setState", "assertFalse", "canExecute", "asList", "setState", "assertTrue", "canExecute", "asList", "setState", "assertTrue", "canExecute", "asList", "setState", "assertTrue", "canExecute", "asList"]}, "focal_class": {"identifier": "ComponentCommandOrder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger log =\n      LoggerFactory.getLogger(ComponentCommandOrder.class);", "modifier": "public static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(ComponentCommandOrder.class)", "var_name": "log"}, {"original_string": "private static char SPLIT_CHAR = '-';", "modifier": "private static", "type": "char", "declarator": "SPLIT_CHAR = '-'", "var_name": "SPLIT_CHAR"}, {"original_string": "Map<Command, Map<String, List<ComponentState>>> dependencies =\n      new HashMap<Command, Map<String, List<ComponentState>>>();", "modifier": "", "type": "Map<Command, Map<String, List<ComponentState>>>", "declarator": "dependencies =\n      new HashMap<Command, Map<String, List<ComponentState>>>()", "var_name": "dependencies"}, {"original_string": "Map<String, Collection<String>> prefixRoleMap = new HashMap<>();", "modifier": "", "type": "Map<String, Collection<String>>", "declarator": "prefixRoleMap = new HashMap<>()", "var_name": "prefixRoleMap"}, {"original_string": "Map<String, String> rolePrefixMap = new HashMap<>();", "modifier": "", "type": "Map<String, String>", "declarator": "rolePrefixMap = new HashMap<>()", "var_name": "rolePrefixMap"}], "methods": [{"identifier": "ComponentCommandOrder", "parameters": "()", "modifiers": "public", "return": "", "signature": " ComponentCommandOrder()", "full_signature": "public  ComponentCommandOrder()", "class_method_signature": "ComponentCommandOrder.ComponentCommandOrder()", "testcase": false, "constructor": true}, {"identifier": "ComponentCommandOrder", "parameters": "(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "modifiers": "public", "return": "", "signature": " ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "full_signature": "public  ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.ComponentCommandOrder(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "testcase": false, "constructor": true}, {"identifier": "mergeCommandOrders", "parameters": "(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "modifiers": "", "return": "void", "signature": "void mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "full_signature": " void mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.mergeCommandOrders(List<CommandOrder> commandOrders,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "parseRequiredStates", "parameters": "(String requires,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "List<ComponentState>", "signature": "List<ComponentState> parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "full_signature": "private List<ComponentState> parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.parseRequiredStates(String requires,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "getComponentCommand", "parameters": "(String compCmdStr,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "ComponentCommand", "signature": "ComponentCommand getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "full_signature": "private ComponentCommand getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.getComponentCommand(String compCmdStr,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "getComponentState", "parameters": "(String compStStr,\n      ConfTreeOperations resources)", "modifiers": "private", "return": "ComponentState", "signature": "ComponentState getComponentState(String compStStr,\n      ConfTreeOperations resources)", "full_signature": "private ComponentState getComponentState(String compStStr,\n      ConfTreeOperations resources)", "class_method_signature": "ComponentCommandOrder.getComponentState(String compStStr,\n      ConfTreeOperations resources)", "testcase": false, "constructor": false}, {"identifier": "canExecute", "parameters": "(String component, Command command, Collection<ComponentInstanceState> currentStates)", "modifiers": "public", "return": "boolean", "signature": "boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "full_signature": "public boolean canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "class_method_signature": "ComponentCommandOrder.canExecute(String component, Command command, Collection<ComponentInstanceState> currentStates)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/ComponentCommandOrder.java"}, "focal_method": {"identifier": "ComponentCommandOrder", "parameters": "()", "modifiers": "public", "return": "", "body": "public ComponentCommandOrder() {}", "signature": " ComponentCommandOrder()", "full_signature": "public  ComponentCommandOrder()", "class_method_signature": "ComponentCommandOrder.ComponentCommandOrder()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}