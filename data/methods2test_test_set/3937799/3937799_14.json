{"test_class": {"identifier": "MysqlServerControllerTest", "superclass": "", "interfaces": "", "fields": [], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/com/taobao/adfs/database/MysqlServerControllerTest.java"}, "test_case": {"identifier": "testMoveData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMoveData() throws IOException, InterruptedException {\n    File dataPath = new File(\"target/test\" + getClass().getSimpleName() + \"/testMoveData/dataPathOfTestMoveData\");\n    dataPath.mkdirs();\n    new MysqlServerController().moveData(dataPath.getAbsolutePath(), Long.MAX_VALUE);\n    assertThat(dataPath.exists(), is(false));\n    assertThat(dataPath.getParentFile().list().length == 1, is(true));\n    dataPath.mkdirs();\n    new MysqlServerController().moveData(dataPath.getAbsolutePath(), Long.MAX_VALUE);\n    assertThat(dataPath.exists(), is(false));\n    assertThat(dataPath.getParentFile().list().length == 2, is(true));\n    Thread.sleep(1000);\n    dataPath.mkdirs();\n    new MysqlServerController().moveData(dataPath.getAbsolutePath(), 500);\n    assertThat(dataPath.exists(), is(false));\n    assertThat(dataPath.getParentFile().list().length == 1, is(true));\n  }", "signature": "void testMoveData()", "full_signature": "@Test public void testMoveData()", "class_method_signature": "MysqlServerControllerTest.testMoveData()", "testcase": true, "constructor": false, "invocations": ["getSimpleName", "getClass", "mkdirs", "moveData", "getAbsolutePath", "assertThat", "exists", "is", "assertThat", "list", "getParentFile", "is", "mkdirs", "moveData", "getAbsolutePath", "assertThat", "exists", "is", "assertThat", "list", "getParentFile", "is", "sleep", "mkdirs", "moveData", "getAbsolutePath", "assertThat", "exists", "is", "assertThat", "list", "getParentFile", "is"]}, "focal_class": {"identifier": "MysqlServerController", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(MysqlServerController.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MysqlServerController.class)", "var_name": "logger"}, {"original_string": "public static final String mysqlConfKeyPrefix = \"mysql.server.conf.\";", "modifier": "public static final", "type": "String", "declarator": "mysqlConfKeyPrefix = \"mysql.server.conf.\"", "var_name": "mysqlConfKeyPrefix"}], "methods": [{"identifier": "getData", "parameters": "(Configuration conf, Lock writeLock)", "modifiers": "public", "return": "String", "signature": "String getData(Configuration conf, Lock writeLock)", "full_signature": "public String getData(Configuration conf, Lock writeLock)", "class_method_signature": "MysqlServerController.getData(Configuration conf, Lock writeLock)", "testcase": false, "constructor": false}, {"identifier": "setData", "parameters": "(Configuration conf)", "modifiers": "public", "return": "String", "signature": "String setData(Configuration conf)", "full_signature": "public String setData(Configuration conf)", "class_method_signature": "MysqlServerController.setData(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "moveData", "parameters": "(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "modifiers": "public", "return": "String", "signature": "String moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "full_signature": "public String moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "class_method_signature": "MysqlServerController.moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "testcase": false, "constructor": false}, {"identifier": "backupData", "parameters": "(Configuration conf)", "modifiers": "public", "return": "String", "signature": "String backupData(Configuration conf)", "full_signature": "public String backupData(Configuration conf)", "class_method_signature": "MysqlServerController.backupData(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getMysqlLibPath", "parameters": "(String mysqlBinPath)", "modifiers": "public", "return": "String", "signature": "String getMysqlLibPath(String mysqlBinPath)", "full_signature": "public String getMysqlLibPath(String mysqlBinPath)", "class_method_signature": "MysqlServerController.getMysqlLibPath(String mysqlBinPath)", "testcase": false, "constructor": false}, {"identifier": "formatData", "parameters": "(Configuration conf)", "modifiers": "public", "return": "void", "signature": "void formatData(Configuration conf)", "full_signature": "public void formatData(Configuration conf)", "class_method_signature": "MysqlServerController.formatData(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "createDatabase", "parameters": "(Configuration conf)", "modifiers": "public", "return": "void", "signature": "void createDatabase(Configuration conf)", "full_signature": "public void createDatabase(Configuration conf)", "class_method_signature": "MysqlServerController.createDatabase(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "startServer", "parameters": "(Configuration conf)", "modifiers": "public", "return": "String", "signature": "String startServer(Configuration conf)", "full_signature": "public String startServer(Configuration conf)", "class_method_signature": "MysqlServerController.startServer(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "saveMysqlConf", "parameters": "(Configuration conf)", "modifiers": "public", "return": "void", "signature": "void saveMysqlConf(Configuration conf)", "full_signature": "public void saveMysqlConf(Configuration conf)", "class_method_signature": "MysqlServerController.saveMysqlConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getMysqlConf", "parameters": "(Configuration conf, String mysqlConfKey)", "modifiers": "public static", "return": "String", "signature": "String getMysqlConf(Configuration conf, String mysqlConfKey)", "full_signature": "public static String getMysqlConf(Configuration conf, String mysqlConfKey)", "class_method_signature": "MysqlServerController.getMysqlConf(Configuration conf, String mysqlConfKey)", "testcase": false, "constructor": false}, {"identifier": "getMysqlConf", "parameters": "(Configuration conf, String mysqlConfKey, Object defaultValue)", "modifiers": "public static", "return": "String", "signature": "String getMysqlConf(Configuration conf, String mysqlConfKey, Object defaultValue)", "full_signature": "public static String getMysqlConf(Configuration conf, String mysqlConfKey, Object defaultValue)", "class_method_signature": "MysqlServerController.getMysqlConf(Configuration conf, String mysqlConfKey, Object defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setMysqlConf", "parameters": "(Configuration conf, String mysqlConfKey, String value)", "modifiers": "public static", "return": "void", "signature": "void setMysqlConf(Configuration conf, String mysqlConfKey, String value)", "full_signature": "public static void setMysqlConf(Configuration conf, String mysqlConfKey, String value)", "class_method_signature": "MysqlServerController.setMysqlConf(Configuration conf, String mysqlConfKey, String value)", "testcase": false, "constructor": false}, {"identifier": "setMysqlDefaultConf", "parameters": "(Configuration conf)", "modifiers": "", "return": "void", "signature": "void setMysqlDefaultConf(Configuration conf)", "full_signature": " void setMysqlDefaultConf(Configuration conf)", "class_method_signature": "MysqlServerController.setMysqlDefaultConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "setMysqlBinPermission", "parameters": "(Configuration conf)", "modifiers": "", "return": "void", "signature": "void setMysqlBinPermission(Configuration conf)", "full_signature": " void setMysqlBinPermission(Configuration conf)", "class_method_signature": "MysqlServerController.setMysqlBinPermission(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "stopServer", "parameters": "(Configuration conf)", "modifiers": "public", "return": "String", "signature": "String stopServer(Configuration conf)", "full_signature": "public String stopServer(Configuration conf)", "class_method_signature": "MysqlServerController.stopServer(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getServerPid", "parameters": "(Configuration conf)", "modifiers": "", "return": "String", "signature": "String getServerPid(Configuration conf)", "full_signature": " String getServerPid(Configuration conf)", "class_method_signature": "MysqlServerController.getServerPid(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getServerListenAddresses", "parameters": "(Configuration conf)", "modifiers": "", "return": "List<String>", "signature": "List<String> getServerListenAddresses(Configuration conf)", "full_signature": " List<String> getServerListenAddresses(Configuration conf)", "class_method_signature": "MysqlServerController.getServerListenAddresses(Configuration conf)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/com/taobao/adfs/database/MysqlServerController.java"}, "focal_method": {"identifier": "moveData", "parameters": "(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "modifiers": "public", "return": "String", "body": "public String moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData) throws IOException {\n    File fileOfMysqlData = new File(pathOfMysqlData).getAbsoluteFile();\n    if (!fileOfMysqlData.exists()) {\n      Utilities.logInfo(logger, \"no need to move not existed path=\", pathOfMysqlData);\n      return null;\n    }\n    try {\n      String newPathOfMysqlData =\n          pathOfMysqlData + \"-\" + Utilities.longTimeToStringTime(System.currentTimeMillis(), \"\");\n      fileOfMysqlData.renameTo(new File(newPathOfMysqlData));\n      File parentFileOfMysqlData = fileOfMysqlData.getParentFile();\n      for (File oldFileOfMysqlData : parentFileOfMysqlData.listFiles()) {\n        if (oldFileOfMysqlData.getName().startsWith(fileOfMysqlData.getName())) {\n          String timeString = oldFileOfMysqlData.getName().substring(fileOfMysqlData.getName().length());\n          if (!timeString.startsWith(\"-\")) continue;\n          timeString = timeString.substring(1);\n          long time = Utilities.stringTimeToLongTime(timeString, \"\");\n          if (System.currentTimeMillis() - time > expireTimeOfOldMysqlData) {\n            Utilities.delete(oldFileOfMysqlData);\n            Utilities.logInfo(logger, \"delete \", oldFileOfMysqlData);\n          }\n        }\n      }\n      Utilities.logInfo(logger, \"move \", pathOfMysqlData, \" to \", newPathOfMysqlData);\n      return newPathOfMysqlData;\n    } catch (Throwable t) {\n      throw new IOException(t);\n    }\n  }", "signature": "String moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "full_signature": "public String moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "class_method_signature": "MysqlServerController.moveData(String pathOfMysqlData, long expireTimeOfOldMysqlData)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "exists", "logInfo", "longTimeToStringTime", "currentTimeMillis", "renameTo", "getParentFile", "listFiles", "startsWith", "getName", "getName", "substring", "getName", "length", "getName", "startsWith", "substring", "stringTimeToLongTime", "currentTimeMillis", "delete", "logInfo", "logInfo"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}