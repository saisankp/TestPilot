{"test_class": {"identifier": "StringConverterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private StringConverter underTest;", "modifier": "@InjectMocks\n    private", "type": "StringConverter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private DataProvider dataProvider;", "modifier": "@Mock\n    private", "type": "DataProvider", "declarator": "dataProvider", "var_name": "dataProvider"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/internal/convert/StringConverterTest.java"}, "test_case": {"identifier": "testConvertShouldCallCustomConvertAndReturnValueIfNotObjectNoConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertShouldCallCustomConvertAndReturnValueIfNotObjectNoConversion() {\n        // Given:\n        String data = \"2016-03-11\";\n        Class<?>[] parameterTypes = new Class<?>[] { Date.class };\n\n        StringConverter underTest = new StringConverter() {\n            @Override\n            protected Object customConvertValue(String str, Class<?> targetType, DataProvider dataProvider) {\n                try {\n                    return new SimpleDateFormat(\"yyyy-MM-dd\").parse(str);\n                } catch (ParseException e) {\n                    fail(\"Unexpected exception: \" + e);\n                    return null; // fool compiler\n                }\n            }\n        };\n\n        // When:\n        Object[] result = underTest.convert(data, false, parameterTypes, dataProvider, 76);\n\n        // Then:\n        GregorianCalendar expectedDate = new GregorianCalendar();\n        expectedDate.set(2016, Calendar.MARCH, 11, 0, 0, 0);\n        expectedDate.set(Calendar.MILLISECOND, 0);\n        assertThat(result).containsExactly(expectedDate.getTime());\n    }", "signature": "void testConvertShouldCallCustomConvertAndReturnValueIfNotObjectNoConversion()", "full_signature": "@Test public void testConvertShouldCallCustomConvertAndReturnValueIfNotObjectNoConversion()", "class_method_signature": "StringConverterTest.testConvertShouldCallCustomConvertAndReturnValueIfNotObjectNoConversion()", "testcase": true, "constructor": false, "invocations": ["parse", "fail", "convert", "set", "set", "containsExactly", "assertThat", "getTime"]}, "focal_class": {"identifier": "StringConverter", "superclass": "extends com.tngtech.junit.dataprovider.convert.StringConverter", "interfaces": "", "fields": [{"original_string": "protected static final Object OBJECT_NO_CONVERSION = com.tngtech.junit.dataprovider.convert.StringConverter.OBJECT_NO_CONVERSION;", "modifier": "protected static final", "type": "Object", "declarator": "OBJECT_NO_CONVERSION = com.tngtech.junit.dataprovider.convert.StringConverter.OBJECT_NO_CONVERSION", "var_name": "OBJECT_NO_CONVERSION"}], "methods": [{"identifier": "convert", "parameters": "(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "modifiers": "public", "return": "Object[]", "signature": "Object[] convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "full_signature": "public Object[] convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "class_method_signature": "StringConverter.convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "testcase": false, "constructor": false}, {"identifier": "splitBy", "parameters": "(String data, String regex)", "modifiers": "@Override protected", "return": "String[]", "signature": "String[] splitBy(String data, String regex)", "full_signature": "@Override protected String[] splitBy(String data, String regex)", "class_method_signature": "StringConverter.splitBy(String data, String regex)", "testcase": false, "constructor": false}, {"identifier": "checkArgumentsAndParameterCount", "parameters": "(int argCount, int paramCount, boolean isVarargs, int rowIdx)", "modifiers": "@Override protected", "return": "void", "signature": "void checkArgumentsAndParameterCount(int argCount, int paramCount, boolean isVarargs, int rowIdx)", "full_signature": "@Override protected void checkArgumentsAndParameterCount(int argCount, int paramCount, boolean isVarargs, int rowIdx)", "class_method_signature": "StringConverter.checkArgumentsAndParameterCount(int argCount, int paramCount, boolean isVarargs, int rowIdx)", "testcase": false, "constructor": false}, {"identifier": "customConvertValue", "parameters": "(String str, Class<?> targetType, ConverterContext context)", "modifiers": "@Override protected", "return": "Object", "signature": "Object customConvertValue(String str, Class<?> targetType, ConverterContext context)", "full_signature": "@Override protected Object customConvertValue(String str, Class<?> targetType, ConverterContext context)", "class_method_signature": "StringConverter.customConvertValue(String str, Class<?> targetType, ConverterContext context)", "testcase": false, "constructor": false}, {"identifier": "customConvertValue", "parameters": "(String str, Class<?> targetType, DataProvider dataProvider)", "modifiers": "protected", "return": "Object", "signature": "Object customConvertValue(String str, Class<?> targetType, DataProvider dataProvider)", "full_signature": "protected Object customConvertValue(String str, Class<?> targetType, DataProvider dataProvider)", "class_method_signature": "StringConverter.customConvertValue(String str, Class<?> targetType, DataProvider dataProvider)", "testcase": false, "constructor": false}, {"identifier": "convertPrimaryOrWrapper", "parameters": "(String str, Class<?> targetType)", "modifiers": "@Override protected", "return": "Object", "signature": "Object convertPrimaryOrWrapper(String str, Class<?> targetType)", "full_signature": "@Override protected Object convertPrimaryOrWrapper(String str, Class<?> targetType)", "class_method_signature": "StringConverter.convertPrimaryOrWrapper(String str, Class<?> targetType)", "testcase": false, "constructor": false}, {"identifier": "convertToLong", "parameters": "(String str)", "modifiers": "@Override protected", "return": "Object", "signature": "Object convertToLong(String str)", "full_signature": "@Override protected Object convertToLong(String str)", "class_method_signature": "StringConverter.convertToLong(String str)", "testcase": false, "constructor": false}, {"identifier": "convertToEnumValue", "parameters": "(String str, Class<Enum> enumType, boolean ignoreEnumCase)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") protected", "return": "Object", "signature": "Object convertToEnumValue(String str, Class<Enum> enumType, boolean ignoreEnumCase)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") protected Object convertToEnumValue(String str, Class<Enum> enumType, boolean ignoreEnumCase)", "class_method_signature": "StringConverter.convertToEnumValue(String str, Class<Enum> enumType, boolean ignoreEnumCase)", "testcase": false, "constructor": false}, {"identifier": "tryConvertUsingSingleStringParamConstructor", "parameters": "(String str, Class<?> targetType)", "modifiers": "@Override protected", "return": "Object", "signature": "Object tryConvertUsingSingleStringParamConstructor(String str, Class<?> targetType)", "full_signature": "@Override protected Object tryConvertUsingSingleStringParamConstructor(String str, Class<?> targetType)", "class_method_signature": "StringConverter.tryConvertUsingSingleStringParamConstructor(String str, Class<?> targetType)", "testcase": false, "constructor": false}, {"identifier": "createProxyDataProvider", "parameters": "(final ConverterContext context)", "modifiers": "private", "return": "DataProvider", "signature": "DataProvider createProxyDataProvider(final ConverterContext context)", "full_signature": "private DataProvider createProxyDataProvider(final ConverterContext context)", "class_method_signature": "StringConverter.createProxyDataProvider(final ConverterContext context)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/internal/convert/StringConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "modifiers": "public", "return": "Object[]", "body": "public Object[] convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx) {\n        ConverterContext context = new ConverterContext(dataProvider.splitBy(), dataProvider.convertNulls(),\n                dataProvider.trimValues(), dataProvider.ignoreEnumCase());\n        return super.convert(data, isVarargs, parameterTypes, context, rowIdx);\n    }", "signature": "Object[] convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "full_signature": "public Object[] convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "class_method_signature": "StringConverter.convert(String data, boolean isVarargs, Class<?>[] parameterTypes, DataProvider dataProvider,\n            int rowIdx)", "testcase": false, "constructor": false, "invocations": ["splitBy", "convertNulls", "trimValues", "ignoreEnumCase", "convert"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}