{"test_class": {"identifier": "AddAccessNodesTest", "superclass": "extends AbstractQueryTest", "interfaces": "", "fields": [{"original_string": "private AddAccessNodes rule;", "modifier": "private", "type": "AddAccessNodes", "declarator": "rule", "var_name": "rule"}, {"original_string": "private QueryContext context;", "modifier": "private", "type": "QueryContext", "declarator": "context", "var_name": "context"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/optimize/AddAccessNodesTest.java"}, "test_case": {"identifier": "shouldAddAccessNodeAboveSourceNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddAccessNodeAboveSourceNode() {\n        PlanNode project = new PlanNode(Type.PROJECT, selector(\"Selector1\"));\n        PlanNode source = new PlanNode(Type.SOURCE, project, selector(\"Selector1\"));\n\n        // Execute the rule ...\n        PlanNode result = rule.execute(context, project, new LinkedList<OptimizerRule>());\n        assertThat(result, is(sameInstance(project)));\n        PlanNode access = project.getFirstChild();\n        assertThat(access.getType(), is(Type.ACCESS));\n        assertSelectors(access, \"Selector1\");\n        assertChildren(access, source);\n        assertChildren(source);\n    }", "signature": "void shouldAddAccessNodeAboveSourceNode()", "full_signature": "@Test public void shouldAddAccessNodeAboveSourceNode()", "class_method_signature": "AddAccessNodesTest.shouldAddAccessNodeAboveSourceNode()", "testcase": true, "constructor": false, "invocations": ["selector", "selector", "execute", "assertThat", "is", "sameInstance", "getFirstChild", "assertThat", "getType", "is", "assertSelectors", "assertChildren", "assertChildren"]}, "focal_class": {"identifier": "AddAccessNodes", "superclass": "", "interfaces": "implements OptimizerRule", "fields": [{"original_string": "public static final AddAccessNodes INSTANCE = new AddAccessNodes();", "modifier": "public static final", "type": "AddAccessNodes", "declarator": "INSTANCE = new AddAccessNodes()", "var_name": "INSTANCE"}], "methods": [{"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "AddAccessNodes.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AddAccessNodes.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/optimize/AddAccessNodes.java"}, "focal_method": {"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "body": "@Override\n    public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack ) {\n        // On each of the source nodes ...\n        for (PlanNode source : plan.findAllAtOrBelow(Type.SOURCE)) {\n            // The source node may have children if it is a view ...\n            if (source.getChildCount() != 0) continue;\n\n            // Create the ACCESS node, set the selectors, and insert above the source node ...\n            PlanNode access = new PlanNode(Type.ACCESS);\n            access.addSelectors(source.getSelectors());\n            source.insertAsParent(access);\n        }\n        return plan;\n    }", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "AddAccessNodes.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false, "invocations": ["findAllAtOrBelow", "getChildCount", "addSelectors", "getSelectors", "insertAsParent"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}