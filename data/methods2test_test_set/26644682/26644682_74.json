{"test_class": {"identifier": "ContentAnalysisTest", "superclass": "extends DataSetBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    ContentAnalysis contentAnalysis;", "modifier": "@Autowired", "type": "ContentAnalysis", "declarator": "contentAnalysis", "var_name": "contentAnalysis"}], "file": "dataprep-dataset/src/test/java/org/talend/dataprep/dataset/service/analysis/synchronous/ContentAnalysisTest.java"}, "test_case": {"identifier": "testAnalysisWithLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAnalysisWithLimit() {\n        final DataSetMetadata metadata = createMetadata(UUID.randomUUID().toString(),\n                Arrays.asList(\"id\", \"first_name\", \"last_name\", \"email\", \"gender\", \"ip_address\"));\n        metadataBuilder.metadata().id(\"3548\").build();\n        createCsvDataSet(metadata, \"100_lines.csv\");\n\n        final Long newLimit = 16L;\n        final Long originalLimit =\n                (Long) ReflectionTestUtils.getField(contentAnalysis, ContentAnalysis.class, \"sizeLimit\");\n        ReflectionTestUtils.setField(contentAnalysis, \"sizeLimit\", newLimit);\n\n        contentAnalysis.analyze(metadata.getId());\n        ReflectionTestUtils.setField(contentAnalysis, \"sizeLimit\", originalLimit);\n\n        final DataSetMetadata actual = dataSetMetadataRepository.get(metadata.getId());\n        final Optional<Long> limit = actual.getContent().getLimit();\n        assertTrue(limit.isPresent());\n        assertThat(limit.get(), is(newLimit));\n    }", "signature": "void testAnalysisWithLimit()", "full_signature": "@Test public void testAnalysisWithLimit()", "class_method_signature": "ContentAnalysisTest.testAnalysisWithLimit()", "testcase": true, "constructor": false, "invocations": ["createMetadata", "toString", "randomUUID", "asList", "build", "id", "metadata", "createCsvDataSet", "getField", "setField", "analyze", "getId", "setField", "get", "getId", "getLimit", "getContent", "assertTrue", "isPresent", "assertThat", "get", "is"]}, "focal_class": {"identifier": "ContentAnalysis", "superclass": "", "interfaces": "implements SynchronousDataSetAnalyzer", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ContentAnalysis.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ContentAnalysis.class)", "var_name": "LOG"}, {"original_string": "@Value(\"${dataset.records.limit:10000}\")\n    private Long sizeLimit;", "modifier": "@Value(\"${dataset.records.limit:10000}\")\n    private", "type": "Long", "declarator": "sizeLimit", "var_name": "sizeLimit"}, {"original_string": "@Autowired\n    private DataSetMetadataRepository repository;", "modifier": "@Autowired\n    private", "type": "DataSetMetadataRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private ContentStoreRouter contentStore;", "modifier": "@Autowired\n    private", "type": "ContentStoreRouter", "declarator": "contentStore", "var_name": "contentStore"}], "methods": [{"identifier": "analyze", "parameters": "(String dataSetId)", "modifiers": "@Override public", "return": "void", "signature": "void analyze(String dataSetId)", "full_signature": "@Override public void analyze(String dataSetId)", "class_method_signature": "ContentAnalysis.analyze(String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "updateHeaderAndFooter", "parameters": "(DataSetMetadata metadata)", "modifiers": "private", "return": "void", "signature": "void updateHeaderAndFooter(DataSetMetadata metadata)", "full_signature": "private void updateHeaderAndFooter(DataSetMetadata metadata)", "class_method_signature": "ContentAnalysis.updateHeaderAndFooter(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "updateLimit", "parameters": "(DataSetMetadata metadata)", "modifiers": "private", "return": "void", "signature": "void updateLimit(DataSetMetadata metadata)", "full_signature": "private void updateLimit(DataSetMetadata metadata)", "class_method_signature": "ContentAnalysis.updateLimit(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int order()", "full_signature": "@Override public int order()", "class_method_signature": "ContentAnalysis.order()", "testcase": false, "constructor": false}], "file": "dataprep-dataset/src/main/java/org/talend/dataprep/dataset/service/analysis/synchronous/ContentAnalysis.java"}, "focal_method": {"identifier": "analyze", "parameters": "(String dataSetId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void analyze(String dataSetId) {\n\n        // defensive programming\n        if (StringUtils.isEmpty(dataSetId)) {\n            throw new IllegalArgumentException(\"Data set id cannot be null or empty.\");\n        }\n\n        DistributedLock datasetLock = repository.createDatasetMetadataLock(dataSetId);\n        datasetLock.lock();\n        try {\n            DataSetMetadata metadata = repository.get(dataSetId);\n            if (metadata != null) {\n                LOG.info(\"Indexing content of data set #{}...\", metadata.getId());\n\n                updateHeaderAndFooter(metadata);\n                updateLimit(metadata);\n\n                metadata.getLifecycle().contentIndexed(true);\n\n                DataSetMetadata savedDataSetMetadata = repository.get(dataSetId);\n                // in order to check that the dataset was not deleted during analysis\n                if (savedDataSetMetadata != null) {\n                    repository.save(metadata);\n                }\n                LOG.info(\"Indexed content of data set #{}.\", dataSetId);\n            } else {\n                LOG.info(\"Data set #{} no longer exists.\", dataSetId); //$NON-NLS-1$\n            }\n        } finally {\n            datasetLock.unlock();\n        }\n    }", "signature": "void analyze(String dataSetId)", "full_signature": "@Override public void analyze(String dataSetId)", "class_method_signature": "ContentAnalysis.analyze(String dataSetId)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "createDatasetMetadataLock", "lock", "get", "info", "getId", "updateHeaderAndFooter", "updateLimit", "contentIndexed", "getLifecycle", "get", "save", "info", "info", "unlock"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}