{"test_class": {"identifier": "JDBCBranchQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private DeveloperQueries developerQueries;", "modifier": "private", "type": "DeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private ProjectQueries projectQueries;", "modifier": "private", "type": "ProjectQueries", "declarator": "projectQueries", "var_name": "projectQueries"}, {"original_string": "private BranchQueries queries;", "modifier": "private", "type": "BranchQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private int projectId;", "modifier": "private", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private String mainDev;", "modifier": "private", "type": "String", "declarator": "mainDev", "var_name": "mainDev"}, {"original_string": "private SmellQueries smellQueries;", "modifier": "private", "type": "SmellQueries", "declarator": "smellQueries", "var_name": "smellQueries"}, {"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private Commit originCommit;", "modifier": "private", "type": "Commit", "declarator": "originCommit", "var_name": "originCommit"}, {"original_string": "private Commit mergedIntoCommit;", "modifier": "private", "type": "Commit", "declarator": "mergedIntoCommit", "var_name": "mergedIntoCommit"}, {"original_string": "private int mergedIntoCommitId;", "modifier": "private", "type": "int", "declarator": "mergedIntoCommitId", "var_name": "mergedIntoCommitId"}, {"original_string": "private int originCommitId;", "modifier": "private", "type": "int", "declarator": "originCommitId", "var_name": "originCommitId"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCBranchQueriesTest.java"}, "test_case": {"identifier": "testIdFromCommitQueryStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIdFromCommitQueryStatement() {\n        List<Map<String, Object>> result;\n        Commit branchCommit = prepareCommit(\"sha\", 0);\n        Commit anotherCommit = prepareCommit(\"another\", 4);\n\n        // No commit means no result\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, branchCommit));\n        assertTrue(result.isEmpty());\n\n        int firstBranchID = insertBranch(projectId, 4, originCommit, mergedIntoCommit);\n        int secondBranchID = insertBranch(projectId, 5, mergedIntoCommit, originCommit);\n\n        // Parent and merged commits are not in the branch\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, originCommit));\n        assertTrue(result.isEmpty());\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, mergedIntoCommit));\n        assertTrue(result.isEmpty());\n\n        persistence.execute(queries.branchCommitInsertionQuery(projectId, 4, branchCommit.sha, 0));\n        persistence.execute(queries.branchCommitInsertionQuery(projectId, 4, anotherCommit.sha, 1));\n\n        // Right commit returns branch ID\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, branchCommit));\n        assertEquals(firstBranchID, result.get(0).get(\"id\"));\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, anotherCommit));\n        assertEquals(firstBranchID, result.get(0).get(\"id\"));\n\n        // TODO: Commit should not appear in 2 distinct branches\n        persistence.execute(queries.branchCommitInsertionQuery(projectId, 5, branchCommit.sha, 2));\n        result = persistence.query(queries.idFromCommitQueryStatement(projectId, branchCommit));\n        assertEquals(firstBranchID, result.get(0).get(\"id\"));\n    }", "signature": "void testIdFromCommitQueryStatement()", "full_signature": "@Test public void testIdFromCommitQueryStatement()", "class_method_signature": "JDBCBranchQueriesTest.testIdFromCommitQueryStatement()", "testcase": true, "constructor": false, "invocations": ["prepareCommit", "prepareCommit", "query", "idFromCommitQueryStatement", "assertTrue", "isEmpty", "insertBranch", "insertBranch", "query", "idFromCommitQueryStatement", "assertTrue", "isEmpty", "query", "idFromCommitQueryStatement", "assertTrue", "isEmpty", "execute", "branchCommitInsertionQuery", "execute", "branchCommitInsertionQuery", "query", "idFromCommitQueryStatement", "assertEquals", "get", "get", "query", "idFromCommitQueryStatement", "assertEquals", "get", "get", "execute", "branchCommitInsertionQuery", "query", "idFromCommitQueryStatement", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "JDBCBranchQueries", "superclass": "extends JDBCQueriesHelper", "interfaces": "implements BranchQueries", "fields": [{"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private SmellQueries smellQueries;", "modifier": "private", "type": "SmellQueries", "declarator": "smellQueries", "var_name": "smellQueries"}], "methods": [{"identifier": "JDBCBranchQueries", "parameters": "(CommitQueries commitQueries, SmellQueries smellQueries)", "modifiers": "public", "return": "", "signature": " JDBCBranchQueries(CommitQueries commitQueries, SmellQueries smellQueries)", "full_signature": "public  JDBCBranchQueries(CommitQueries commitQueries, SmellQueries smellQueries)", "class_method_signature": "JDBCBranchQueries.JDBCBranchQueries(CommitQueries commitQueries, SmellQueries smellQueries)", "testcase": false, "constructor": true}, {"identifier": "branchInsertionStatement", "parameters": "(int projectId, int ordinal, Commit parentCommit, Commit mergedInto)", "modifiers": "@Override public", "return": "String", "signature": "String branchInsertionStatement(int projectId, int ordinal, Commit parentCommit, Commit mergedInto)", "full_signature": "@Override public String branchInsertionStatement(int projectId, int ordinal, Commit parentCommit, Commit mergedInto)", "class_method_signature": "JDBCBranchQueries.branchInsertionStatement(int projectId, int ordinal, Commit parentCommit, Commit mergedInto)", "testcase": false, "constructor": false}, {"identifier": "branchCommitInsertionQuery", "parameters": "(int projectId, int branchOrdinal, String commitSha, int ordinal)", "modifiers": "@Override public", "return": "String", "signature": "String branchCommitInsertionQuery(int projectId, int branchOrdinal, String commitSha, int ordinal)", "full_signature": "@Override public String branchCommitInsertionQuery(int projectId, int branchOrdinal, String commitSha, int ordinal)", "class_method_signature": "JDBCBranchQueries.branchCommitInsertionQuery(int projectId, int branchOrdinal, String commitSha, int ordinal)", "testcase": false, "constructor": false}, {"identifier": "idFromOrdinalQueryStatement", "parameters": "(int projectId, int branchOrdinal)", "modifiers": "@Override public", "return": "String", "signature": "String idFromOrdinalQueryStatement(int projectId, int branchOrdinal)", "full_signature": "@Override public String idFromOrdinalQueryStatement(int projectId, int branchOrdinal)", "class_method_signature": "JDBCBranchQueries.idFromOrdinalQueryStatement(int projectId, int branchOrdinal)", "testcase": false, "constructor": false}, {"identifier": "idFromCommitQueryStatement", "parameters": "(int projectId, Commit commit)", "modifiers": "public", "return": "String", "signature": "String idFromCommitQueryStatement(int projectId, Commit commit)", "full_signature": "public String idFromCommitQueryStatement(int projectId, Commit commit)", "class_method_signature": "JDBCBranchQueries.idFromCommitQueryStatement(int projectId, Commit commit)", "testcase": false, "constructor": false}, {"identifier": "parentCommitSmellsQuery", "parameters": "(int projectId, int branchId, String smellType)", "modifiers": "@Override public", "return": "String", "signature": "String parentCommitSmellsQuery(int projectId, int branchId, String smellType)", "full_signature": "@Override public String parentCommitSmellsQuery(int projectId, int branchId, String smellType)", "class_method_signature": "JDBCBranchQueries.parentCommitSmellsQuery(int projectId, int branchId, String smellType)", "testcase": false, "constructor": false}, {"identifier": "lastCommitSmellsQuery", "parameters": "(int projectId, Commit merge, String smellType)", "modifiers": "@Override public", "return": "String", "signature": "String lastCommitSmellsQuery(int projectId, Commit merge, String smellType)", "full_signature": "@Override public String lastCommitSmellsQuery(int projectId, Commit merge, String smellType)", "class_method_signature": "JDBCBranchQueries.lastCommitSmellsQuery(int projectId, Commit merge, String smellType)", "testcase": false, "constructor": false}, {"identifier": "mergedBranchIdQuery", "parameters": "(int projectId, Commit commit)", "modifiers": "@Override public", "return": "String", "signature": "String mergedBranchIdQuery(int projectId, Commit commit)", "full_signature": "@Override public String mergedBranchIdQuery(int projectId, Commit commit)", "class_method_signature": "JDBCBranchQueries.mergedBranchIdQuery(int projectId, Commit commit)", "testcase": false, "constructor": false}, {"identifier": "shaFromOrdinalQuery", "parameters": "(int projectId, int branchId, int ordinal)", "modifiers": "@Override public", "return": "String", "signature": "String shaFromOrdinalQuery(int projectId, int branchId, int ordinal)", "full_signature": "@Override public String shaFromOrdinalQuery(int projectId, int branchId, int ordinal)", "class_method_signature": "JDBCBranchQueries.shaFromOrdinalQuery(int projectId, int branchId, int ordinal)", "testcase": false, "constructor": false}, {"identifier": "shaFromOrdinalQuery", "parameters": "(int projectId, int branchId, int ordinal, boolean paprikaOnly)", "modifiers": "@Override public", "return": "String", "signature": "String shaFromOrdinalQuery(int projectId, int branchId, int ordinal, boolean paprikaOnly)", "full_signature": "@Override public String shaFromOrdinalQuery(int projectId, int branchId, int ordinal, boolean paprikaOnly)", "class_method_signature": "JDBCBranchQueries.shaFromOrdinalQuery(int projectId, int branchId, int ordinal, boolean paprikaOnly)", "testcase": false, "constructor": false}, {"identifier": "parentCommitIdQuery", "parameters": "(int projectId, int branchId)", "modifiers": "@Override public", "return": "String", "signature": "String parentCommitIdQuery(int projectId, int branchId)", "full_signature": "@Override public String parentCommitIdQuery(int projectId, int branchId)", "class_method_signature": "JDBCBranchQueries.parentCommitIdQuery(int projectId, int branchId)", "testcase": false, "constructor": false}, {"identifier": "parentCommitShaQuery", "parameters": "(int projectId, int branchId)", "modifiers": "@Override public", "return": "String", "signature": "String parentCommitShaQuery(int projectId, int branchId)", "full_signature": "@Override public String parentCommitShaQuery(int projectId, int branchId)", "class_method_signature": "JDBCBranchQueries.parentCommitShaQuery(int projectId, int branchId)", "testcase": false, "constructor": false}, {"identifier": "lastCommitShaQuery", "parameters": "(int projectId, int branchId)", "modifiers": "@Override public", "return": "String", "signature": "String lastCommitShaQuery(int projectId, int branchId)", "full_signature": "@Override public String lastCommitShaQuery(int projectId, int branchId)", "class_method_signature": "JDBCBranchQueries.lastCommitShaQuery(int projectId, int branchId)", "testcase": false, "constructor": false}, {"identifier": "lastCommitIdQuery", "parameters": "(int projectId, int branchId)", "modifiers": "@Override public", "return": "String", "signature": "String lastCommitIdQuery(int projectId, int branchId)", "full_signature": "@Override public String lastCommitIdQuery(int projectId, int branchId)", "class_method_signature": "JDBCBranchQueries.lastCommitIdQuery(int projectId, int branchId)", "testcase": false, "constructor": false}, {"identifier": "commitOrdinalQuery", "parameters": "(int projectId, int branchId, Commit commit)", "modifiers": "@Override public", "return": "String", "signature": "String commitOrdinalQuery(int projectId, int branchId, Commit commit)", "full_signature": "@Override public String commitOrdinalQuery(int projectId, int branchId, Commit commit)", "class_method_signature": "JDBCBranchQueries.commitOrdinalQuery(int projectId, int branchId, Commit commit)", "testcase": false, "constructor": false}, {"identifier": "branchLastCommitQuery", "parameters": "(int projectId, int branchId, String field)", "modifiers": "private", "return": "String", "signature": "String branchLastCommitQuery(int projectId, int branchId, String field)", "full_signature": "private String branchLastCommitQuery(int projectId, int branchId, String field)", "class_method_signature": "JDBCBranchQueries.branchLastCommitQuery(int projectId, int branchId, String field)", "testcase": false, "constructor": false}, {"identifier": "branchLastCommitQuery", "parameters": "(int projectId, String branchId, String field)", "modifiers": "private", "return": "String", "signature": "String branchLastCommitQuery(int projectId, String branchId, String field)", "full_signature": "private String branchLastCommitQuery(int projectId, String branchId, String field)", "class_method_signature": "JDBCBranchQueries.branchLastCommitQuery(int projectId, String branchId, String field)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCBranchQueries.java"}, "focal_method": {"identifier": "idFromCommitQueryStatement", "parameters": "(int projectId, Commit commit)", "modifiers": "public", "return": "String", "body": "public String idFromCommitQueryStatement(int projectId, Commit commit) {\n        return \"SELECT branch.id FROM branch \" +\n                \"RIGHT JOIN branch_commit ON branch.id = branch_commit.branch_id \" +\n                \"LEFT JOIN commit_entry ON commit_entry.id = branch_commit.commit_id \" +\n                \"WHERE commit_entry.sha1 = '\" + commit.sha + \"' AND commit_entry.project_id = '\" + projectId + \"'\";\n    }", "signature": "String idFromCommitQueryStatement(int projectId, Commit commit)", "full_signature": "public String idFromCommitQueryStatement(int projectId, Commit commit)", "class_method_signature": "JDBCBranchQueries.idFromCommitQueryStatement(int projectId, Commit commit)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}