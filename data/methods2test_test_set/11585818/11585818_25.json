{"test_class": {"identifier": "ApacheHttpClientClassHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ApacheHttpClientClassHandler handler = new ApacheHttpClientClassHandler();", "modifier": "private", "type": "ApacheHttpClientClassHandler", "declarator": "handler = new ApacheHttpClientClassHandler()", "var_name": "handler"}], "file": "telemetry-agent/src/test/java/com/yammer/telemetry/agent/handlers/ApacheHttpClientClassHandlerTest.java"}, "test_case": {"identifier": "testHttpClientSubClassDoesGetTransformedIfNonAbstractExecuteMethodExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHttpClientSubClassDoesGetTransformedIfNonAbstractExecuteMethodExists() throws Exception {\n        ClassPool cp = ClassPool.getDefault();\n        CtClass ctClass = cp.get(HttpClientSubClass.class.getName());\n        assertTrue(handler.transform(ctClass, cp));\n    }", "signature": "void testHttpClientSubClassDoesGetTransformedIfNonAbstractExecuteMethodExists()", "full_signature": "@Test public void testHttpClientSubClassDoesGetTransformedIfNonAbstractExecuteMethodExists()", "class_method_signature": "ApacheHttpClientClassHandlerTest.testHttpClientSubClassDoesGetTransformedIfNonAbstractExecuteMethodExists()", "testcase": true, "constructor": false, "invocations": ["getDefault", "get", "getName", "assertTrue", "transform"]}, "focal_class": {"identifier": "ApacheHttpClientClassHandler", "superclass": "extends SubTypeInstrumentationHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "ApacheHttpClientClassHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApacheHttpClientClassHandler()", "full_signature": "public  ApacheHttpClientClassHandler()", "class_method_signature": "ApacheHttpClientClassHandler.ApacheHttpClientClassHandler()", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(CtClass cc, ClassPool pool)", "modifiers": "protected", "return": "boolean", "signature": "boolean transform(CtClass cc, ClassPool pool)", "full_signature": "protected boolean transform(CtClass cc, ClassPool pool)", "class_method_signature": "ApacheHttpClientClassHandler.transform(CtClass cc, ClassPool pool)", "testcase": false, "constructor": false}], "file": "telemetry-agent/src/main/java/com/yammer/telemetry/agent/handlers/ApacheHttpClientClassHandler.java"}, "focal_method": {"identifier": "transform", "parameters": "(CtClass cc, ClassPool pool)", "modifiers": "protected", "return": "boolean", "body": "protected boolean transform(CtClass cc, ClassPool pool) throws NotFoundException, CannotCompileException, IOException {\n        boolean transformedOneMethod = false;\n\n        for (CtMethod method : cc.getDeclaredMethods()) {\n            if (\"execute\".equals(method.getName()) && !Modifier.isAbstract(method.getModifiers())) {\n                String hostParameter = \"null\";\n                String requestParameter = \"null\";\n                String requestUriParameter = \"null\";\n                String handlerParameter = \"null\";\n                CtClass[] parameterTypes = method.getParameterTypes();\n                for (int i = 0; i < parameterTypes.length; i++) {\n                    if (parameterTypes[i].subtypeOf(pool.get(\"org.apache.http.HttpHost\"))) {\n                        hostParameter = \"$\" + (i + 1);\n                    } else if (parameterTypes[i].subtypeOf(pool.get(\"org.apache.http.client.methods.HttpUriRequest\"))) {\n                        requestParameter = \"$\" + (i + 1);\n                        requestUriParameter = \"$\" + (i + 1);\n                    } else if (parameterTypes[i].subtypeOf(pool.get(\"org.apache.http.HttpRequest\"))) {\n                        requestParameter = \"$\" + (i + 1);\n                    }\n                }\n\n                // Copy the method to a uniquely named location that won't conflict with anything.\n                CtMethod copiedMethod = CtNewMethod.copy(method, cc.makeUniqueName(\"execute\"), cc, null);\n                copiedMethod.setModifiers(javassist.Modifier.PRIVATE);\n                cc.addMethod(copiedMethod);\n\n                final String source = Resources.toString(Resources.getResource(getClass(), \"HttpClient_execute.javassist\"), Charset.forName(\"utf-8\"));\n                pool.importPackage(\"java.net\");\n                pool.importPackage(\"org.apache.http\");\n                pool.importPackage(\"org.apache.http.client.methods\");\n                pool.importPackage(\"com.yammer.telemetry.tracing\");\n                pool.importPackage(\"com.yammer.telemetry.agent.handlers\");\n                String body = source.replace(\"%HTTP_HOST_PARAM%\", hostParameter)\n                                    .replace(\"%HTTP_REQUEST_PARAM%\", requestParameter)\n                                    .replace(\"%HTTP_REQUEST_URI_PARAM%\", requestUriParameter)\n                                    .replace(\"%RESPONSE_HANDLER_PARAM%\", handlerParameter);\n                method.setBody(body, \"this\", copiedMethod.getName());\n\n                transformedOneMethod = true;\n            }\n        }\n\n        return transformedOneMethod;\n    }", "signature": "boolean transform(CtClass cc, ClassPool pool)", "full_signature": "protected boolean transform(CtClass cc, ClassPool pool)", "class_method_signature": "ApacheHttpClientClassHandler.transform(CtClass cc, ClassPool pool)", "testcase": false, "constructor": false, "invocations": ["getDeclaredMethods", "equals", "getName", "isAbstract", "getModifiers", "getParameterTypes", "subtypeOf", "get", "subtypeOf", "get", "subtypeOf", "get", "copy", "makeUniqueName", "setModifiers", "addMethod", "toString", "getResource", "getClass", "forName", "importPackage", "importPackage", "importPackage", "importPackage", "importPackage", "replace", "replace", "replace", "replace", "setBody", "getName"]}, "repository": {"repo_id": 11585818, "url": "https://github.com/yammer/telemetry", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 20, "size": 990, "license": "licensed"}}