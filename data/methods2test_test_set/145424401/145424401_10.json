{"test_class": {"identifier": "SpaceControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MediaType contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"));", "modifier": "private", "type": "MediaType", "declarator": "contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"))", "var_name": "contentType"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private HttpMessageConverter<?> mappingJackson2HttpMessageConverter;", "modifier": "private", "type": "HttpMessageConverter<?>", "declarator": "mappingJackson2HttpMessageConverter", "var_name": "mappingJackson2HttpMessageConverter"}, {"original_string": "public static final String TEST_DEFAULT_SPACE = \"public\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_SPACE = \"public\"", "var_name": "TEST_DEFAULT_SPACE"}, {"original_string": "public static final String TEST_DEFAULT_TENANT = \"default\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_TENANT = \"default\"", "var_name": "TEST_DEFAULT_TENANT"}, {"original_string": "@Autowired private SpaceRepository spaceRepository;", "modifier": "@Autowired private", "type": "SpaceRepository", "declarator": "spaceRepository", "var_name": "spaceRepository"}, {"original_string": "@Autowired private TenantRepository tenantRepository;", "modifier": "@Autowired private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "@Autowired private WebApplicationContext webApplicationContext;", "modifier": "@Autowired private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/rest/SpaceControllerTest.java"}, "test_case": {"identifier": "testSearchSpaces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSearchSpaces() throws Exception {\n    assertEquals(0, this.spaceRepository.count());\n    final Tenant d_tenant = this.createDefaultTenant();\n    final Space d_space = this.createSpace(d_tenant, TEST_DEFAULT_SPACE, true);\n    assertEquals(1, this.spaceRepository.count());\n\n    final String space_name = \"foo\";\n    org.eclipse.steady.shared.json.model.Space new_shared_space =\n        new org.eclipse.steady.shared.json.model.Space();\n    new_shared_space.setSpaceName(\"foo\");\n    new_shared_space.setExportConfiguration(ExportConfiguration.OFF);\n    new_shared_space.setSpaceDescription(\"bar\");\n    new_shared_space.setOwnerEmails(\n        new HashSet<String>(Arrays.asList(new String[] {\"foo@bar.com\"})));\n    final List<org.eclipse.steady.shared.json.model.Property> props =\n        new ArrayList<org.eclipse.steady.shared.json.model.Property>();\n    props.add(\n        new org.eclipse.steady.shared.json.model.Property(\n            PropertySource.USER, \"propName\", \"propValue\"));\n    new_shared_space.setProperties(props);\n\n    // Post w tenant header (should create a NON default space as it's not provided)\n    MockHttpServletRequestBuilder post_builder =\n        post(\"/spaces\")\n            .content(JacksonUtil.asJsonString(new_shared_space))\n            .contentType(MediaType.APPLICATION_JSON)\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    MvcResult result =\n        mockMvc\n            .perform(post_builder)\n            .andExpect(status().isCreated())\n            .andExpect(content().contentType(contentType))\n            .andExpect(jsonPath(\"$.default\", is(false)))\n            .andExpect(jsonPath(\"$.spaceName\", is(space_name)))\n            .andReturn();\n\n    // Create another one (private)\n    new_shared_space.setPublic(false);\n    post_builder =\n        post(\"/spaces\")\n            .content(JacksonUtil.asJsonString(new_shared_space))\n            .contentType(MediaType.APPLICATION_JSON)\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    result =\n        mockMvc\n            .perform(post_builder)\n            .andExpect(status().isCreated())\n            .andExpect(content().contentType(contentType))\n            .andExpect(jsonPath(\"$.default\", is(false)))\n            .andExpect(jsonPath(\"$.spaceName\", is(space_name)))\n            .andReturn();\n\n    assertEquals(3, this.spaceRepository.count());\n\n    // Search : 0 hits\n    MockHttpServletRequestBuilder search_builder =\n        get(\"/spaces/search\")\n            .param(\"propertyName\", \"propName\")\n            .param(\"value\", \"xyz\", \"abc\")\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    result = mockMvc.perform(search_builder).andExpect(status().isOk()).andReturn();\n\n    org.eclipse.steady.shared.json.model.Space[] search_result =\n        (org.eclipse.steady.shared.json.model.Space[])\n            JacksonUtil.asObject(\n                result.getResponse().getContentAsString(),\n                org.eclipse.steady.shared.json.model.Space[].class);\n    assertEquals(0, search_result.length);\n\n    // Search : 1 hit\n    search_builder =\n        get(\"/spaces/search\")\n            .param(\"propertyName\", \"propName\")\n            .param(\"value\", \"xyz\", \"abc\", \"propValue\")\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    result = mockMvc.perform(search_builder).andExpect(status().isOk()).andReturn();\n\n    search_result =\n        (org.eclipse.steady.shared.json.model.Space[])\n            JacksonUtil.asObject(\n                result.getResponse().getContentAsString(),\n                org.eclipse.steady.shared.json.model.Space[].class);\n    assertEquals(\n        1,\n        search_result.length); // Should be one public space, the private one shall not be returned\n\n    // Bad reqeust due to lack of search term\n    search_builder =\n        get(\"/spaces/search\")\n            .param(\"propertyName\", \"propName\")\n            .header(Constants.HTTP_TENANT_HEADER, d_tenant.getTenantToken())\n            .accept(MediaType.APPLICATION_JSON);\n    mockMvc.perform(search_builder).andExpect(status().isBadRequest());\n  }", "signature": "void testSearchSpaces()", "full_signature": "@Test public void testSearchSpaces()", "class_method_signature": "SpaceControllerTest.testSearchSpaces()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "count", "createDefaultTenant", "createSpace", "assertEquals", "count", "setSpaceName", "setExportConfiguration", "setSpaceDescription", "setOwnerEmails", "asList", "add", "setProperties", "accept", "header", "contentType", "content", "post", "asJsonString", "getTenantToken", "andReturn", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "isCreated", "status", "contentType", "content", "jsonPath", "is", "jsonPath", "is", "setPublic", "accept", "header", "contentType", "content", "post", "asJsonString", "getTenantToken", "andReturn", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "isCreated", "status", "contentType", "content", "jsonPath", "is", "jsonPath", "is", "assertEquals", "count", "accept", "header", "param", "param", "get", "getTenantToken", "andReturn", "andExpect", "perform", "isOk", "status", "asObject", "getContentAsString", "getResponse", "assertEquals", "accept", "header", "param", "param", "get", "getTenantToken", "andReturn", "andExpect", "perform", "isOk", "status", "asObject", "getContentAsString", "getResponse", "assertEquals", "accept", "header", "param", "get", "getTenantToken", "andExpect", "perform", "isBadRequest", "status"]}, "focal_class": {"identifier": "SpaceController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(SpaceController.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SpaceController.class)", "var_name": "log"}, {"original_string": "private static String SPACE_DO_NOT_DELETE = \"vulas.backend.space.doNotDelete\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_DELETE = \"vulas.backend.space.doNotDelete\"", "var_name": "SPACE_DO_NOT_DELETE"}, {"original_string": "private static String SPACE_DO_NOT_CLEAN = \"vulas.backend.space.doNotClean\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_CLEAN = \"vulas.backend.space.doNotClean\"", "var_name": "SPACE_DO_NOT_CLEAN"}, {"original_string": "private static String SPACE_DO_NOT_MODIFY = \"vulas.backend.space.doNotModify\";", "modifier": "private static", "type": "String", "declarator": "SPACE_DO_NOT_MODIFY = \"vulas.backend.space.doNotModify\"", "var_name": "SPACE_DO_NOT_MODIFY"}, {"original_string": "private SpaceRepository spaceRepository;", "modifier": "private", "type": "SpaceRepository", "declarator": "spaceRepository", "var_name": "spaceRepository"}, {"original_string": "private TenantRepository tenantRepository;", "modifier": "private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "private ApplicationRepository appRepository;", "modifier": "private", "type": "ApplicationRepository", "declarator": "appRepository", "var_name": "appRepository"}, {"original_string": "private final ApplicationExporter appExporter;", "modifier": "private final", "type": "ApplicationExporter", "declarator": "appExporter", "var_name": "appExporter"}, {"original_string": "private final Filter cacheFilter;", "modifier": "private final", "type": "Filter", "declarator": "cacheFilter", "var_name": "cacheFilter"}], "methods": [{"identifier": "SpaceController", "parameters": "(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "modifiers": "@Autowired", "return": "", "signature": " SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "full_signature": "@Autowired  SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "class_method_signature": "SpaceController.SpaceController(\n      TenantRepository tenantRepository,\n      SpaceRepository spaceRepository,\n      ApplicationRepository appRepository,\n      ApplicationExporter appExporter,\n      Filter cacheFilter)", "testcase": false, "constructor": true}, {"identifier": "getAllSpaces", "parameters": "(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Collection<Space>>", "signature": "ResponseEntity<Collection<Space>> getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Collection<Space>> getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getAllSpaces(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getDefaultSpace", "parameters": "(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getDefaultSpace(\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "searchSpaces", "parameters": "(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<List<Space>>", "signature": "ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "isSpaceExisting", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) public ResponseEntity<Space> isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.isSpaceExisting(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getSpace", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.GET) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.GET) public ResponseEntity<Space> getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.getSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "createSpace", "parameters": "(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.createSpace(\n      @RequestBody Space space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "modifySpace", "parameters": "(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<Space> modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.modifySpace(\n      @PathVariable String token,\n      @RequestBody Space new_space,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "cleanSpace", "parameters": "(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.POST) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.POST) public ResponseEntity<Space> cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.cleanSpace(\n      @PathVariable String token,\n      @RequestParam(value = \"clean\", required = true) Boolean clean,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "deleteSpace", "parameters": "(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) public", "return": "ResponseEntity<Space>", "signature": "ResponseEntity<Space> deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) public ResponseEntity<Space> deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.deleteSpace(\n      @PathVariable String token,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false}, {"identifier": "getApplications", "parameters": "(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/{token:.+}/apps\", method = RequestMethod.GET) public", "return": "void", "signature": "void getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/{token:.+}/apps\", method = RequestMethod.GET) public void getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "class_method_signature": "SpaceController.getApplications(\n      @PathVariable String token,\n      @RequestParam(value = \"includeSpaceProperties\", required = false, defaultValue = \"\")\n          final String[] includeSpaceProperties,\n      @RequestParam(value = \"includeGoalConfiguration\", required = false, defaultValue = \"\")\n          final String[] includeGoalConfiguration,\n      @RequestParam(value = \"includeGoalSystemInfo\", required = false, defaultValue = \"\")\n          final String[] includeGoalSystemInfo,\n      @RequestParam(value = \"includeBugs\", required = false, defaultValue = \"false\")\n          final String includeBugs,\n      @RequestParam(value = \"includeExemptions\", required = false, defaultValue = \"false\")\n          final String includeExemptions,\n      @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false) final String tenant,\n      HttpServletRequest request,\n      HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/rest/SpaceController.java"}, "focal_method": {"identifier": "searchSpaces", "parameters": "(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "modifiers": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public", "return": "ResponseEntity<List<Space>>", "body": "@RequestMapping(\n      value = \"search\",\n      method = RequestMethod.GET,\n      produces = {\"application/json;charset=UTF-8\"})\n  public ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant) {\n\n    // Check whether tenant exists or retrieve default\n    Tenant t = null;\n    try {\n      t = this.tenantRepository.getTenant(tenant);\n    } catch (Exception e) {\n      log.error(\"Error retrieving tenant: \" + e);\n      return new ResponseEntity<List<Space>>(HttpStatus.NOT_FOUND);\n    }\n    try {\n      final StringList filter = new StringList();\n      filter.addAll(value);\n\n      final List<Space> matching_spaces = new ArrayList<Space>();\n\n      // Loop over all spaces and compare the value of the given property\n      final List<Space> spaces = this.spaceRepository.findAllTenantSpaces(t.getTenantToken());\n      for (Space s : spaces) {\n        final String p = s.getPropertyValue(propertyName);\n        if (p != null && s.isPublic() && filter.contains(p, mode, caseSensitivity))\n          matching_spaces.add(s);\n      }\n      return new ResponseEntity<List<Space>>(matching_spaces, HttpStatus.OK);\n    } catch (EntityNotFoundException enfe) {\n      return new ResponseEntity<List<Space>>(HttpStatus.NOT_FOUND);\n    }\n  }", "signature": "ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "full_signature": "@RequestMapping( value = \"search\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) public ResponseEntity<List<Space>> searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "class_method_signature": "SpaceController.searchSpaces(\n      @RequestParam(value = \"propertyName\", required = true) String propertyName,\n      @RequestParam(value = \"mode\", required = false, defaultValue = \"EQUALS\") ComparisonMode mode,\n      @RequestParam(value = \"caseSensitivity\", required = false, defaultValue = \"CASE_SENSITIVE\")\n          CaseSensitivity caseSensitivity,\n      @RequestParam(value = \"value\", required = true) String[] value,\n      @ApiIgnore @RequestHeader(value = Constants.HTTP_TENANT_HEADER, required = false)\n          String tenant)", "testcase": false, "constructor": false, "invocations": ["getTenant", "error", "addAll", "findAllTenantSpaces", "getTenantToken", "getPropertyValue", "isPublic", "contains", "add"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}