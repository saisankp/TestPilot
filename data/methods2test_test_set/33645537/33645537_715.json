{"test_class": {"identifier": "CsvUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/CsvUtilTest.java"}, "test_case": {"identifier": "testToCsv", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToCsv() {\n        assertEquals(\"a\", CsvUtil.toCsvString(\"a\"));\n        assertEquals(\"a,b\", CsvUtil.toCsvString(\"a\", \"b\"));\n        assertEquals(\"a,b,\", CsvUtil.toCsvString(\"a\", \"b\", \"\"));\n        assertEquals(\"a,\\\" b \\\"\", CsvUtil.toCsvString(\"a\", \" b \"));\n        assertEquals(\"a,b,\\\"jo,e\\\"\", CsvUtil.toCsvString(\"a\", \"b\", \"jo,e\"));\n        assertEquals(\"a,b,\\\"\\\"\\\"some\\\"\\\"r\\\"\", CsvUtil.toCsvString(\"a\", \"b\", \"\\\"some\\\"r\"));\n        assertEquals(\"1997,Ford,E350,\\\"Super, luxurious truck\\\"\",\n                CsvUtil.toCsvString(\"1997\", \"Ford\", \"E350\", \"Super, luxurious truck\"));\n        assertEquals(\"1997,Ford,E350,\\\"Super \\\"\\\"luxurious\\\"\\\" truck\\\"\",\n                CsvUtil.toCsvString(\"1997\", \"Ford\", \"E350\", \"Super \\\"luxurious\\\" truck\"));\n        assertEquals(\"1,,2\", CsvUtil.toCsvString(Integer.valueOf(1), null, Integer.valueOf(2)));\n        // FIXME\n        assertEquals(\"\\\"a\\nb\\\"\", CsvUtil.toCsvString(\"a\\nb\"));\n    }", "signature": "void testToCsv()", "full_signature": "@Test public void testToCsv()", "class_method_signature": "CsvUtilTest.testToCsv()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "assertEquals", "toCsvString", "valueOf", "valueOf", "assertEquals", "toCsvString"]}, "focal_class": {"identifier": "CsvUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final char FIELD_SEPARATOR = ',';", "modifier": "protected static final", "type": "char", "declarator": "FIELD_SEPARATOR = ','", "var_name": "FIELD_SEPARATOR"}, {"original_string": "protected static final char FIELD_QUOTE = '\"';", "modifier": "protected static final", "type": "char", "declarator": "FIELD_QUOTE = '\"'", "var_name": "FIELD_QUOTE"}, {"original_string": "protected static final String DOUBLE_QUOTE = \"\\\"\\\"\";", "modifier": "protected static final", "type": "String", "declarator": "DOUBLE_QUOTE = \"\\\"\\\"\"", "var_name": "DOUBLE_QUOTE"}, {"original_string": "protected static final String SPECIAL_CHARS = \"\\r\\n\";", "modifier": "protected static final", "type": "String", "declarator": "SPECIAL_CHARS = \"\\r\\n\"", "var_name": "SPECIAL_CHARS"}], "methods": [{"identifier": "toCsvString", "parameters": "(Object...elements)", "modifiers": "public static", "return": "String", "signature": "String toCsvString(Object...elements)", "full_signature": "public static String toCsvString(Object...elements)", "class_method_signature": "CsvUtil.toCsvString(Object...elements)", "testcase": false, "constructor": false}, {"identifier": "toCsvString", "parameters": "(List<T> elements)", "modifiers": "public static", "return": "String", "signature": "String toCsvString(List<T> elements)", "full_signature": "public static String toCsvString(List<T> elements)", "class_method_signature": "CsvUtil.toCsvString(List<T> elements)", "testcase": false, "constructor": false}, {"identifier": "toStringArray", "parameters": "(String line)", "modifiers": "public static", "return": "String[]", "signature": "String[] toStringArray(String line)", "full_signature": "public static String[] toStringArray(String line)", "class_method_signature": "CsvUtil.toStringArray(String line)", "testcase": false, "constructor": false}, {"identifier": "addField", "parameters": "(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "modifiers": "private static", "return": "void", "signature": "void addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "full_signature": "private static void addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "class_method_signature": "CsvUtil.addField(List<String> row, String line, int startIndex, int endIndex, boolean inQuoted)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/CsvUtil.java"}, "focal_method": {"identifier": "toCsvString", "parameters": "(Object...elements)", "modifiers": "public static", "return": "String", "body": "public static String toCsvString(Object...elements) {\n        if (ArrayUtil.isEmpty(elements)) {\n            return null;\n        }\n        StringBuilder line = new StringBuilder();\n        for (int i = 0, last = elements.length - 1; i <= last; i++) {\n            if (elements[i] == null && i != last) {\n                line.append(FIELD_SEPARATOR);\n                continue;\n            }\n            // FIXME\n            if (elements[i] == null) {\n                continue;\n            }\n            String field = elements[i].toString();\n\n            // check for special cases\n            int ndx = field.indexOf(FIELD_SEPARATOR);\n            ndx = (ndx == -1) ? field.indexOf(FIELD_QUOTE) : ndx;\n\n            if (ndx == -1 && (field.startsWith(StringPool.Symbol.SPACE) || field.endsWith(StringPool.Symbol.SPACE))) {\n                ndx = 1;\n            }\n            ndx = (ndx == -1) ? StringUtil.indexOfChars(field, SPECIAL_CHARS) : ndx;\n\n            // add field\n            if (ndx != -1) {\n                line.append(FIELD_QUOTE);\n            }\n            line.append(StringUtil.replace(field, StringPool.Symbol.DOUBLE_QUOTE, DOUBLE_QUOTE));\n            if (ndx != -1) {\n                line.append(FIELD_QUOTE);\n            }\n\n            // last\n            if (i != last) {\n                line.append(FIELD_SEPARATOR);\n            }\n        }\n        return line.toString();\n    }", "signature": "String toCsvString(Object...elements)", "full_signature": "public static String toCsvString(Object...elements)", "class_method_signature": "CsvUtil.toCsvString(Object...elements)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "append", "toString", "indexOf", "indexOf", "startsWith", "endsWith", "indexOfChars", "append", "append", "replace", "append", "append", "toString"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}