{"test_class": {"identifier": "BlockingObserverTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/observers/BlockingObserverTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        Queue<Object> q = new ArrayDeque<Object>();\n\n        BlockingObserver<Object> bo = new BlockingObserver<Object>(q);\n\n        bo.dispose();\n\n        assertEquals(BlockingObserver.TERMINATED, q.poll());\n\n        bo.dispose();\n\n        assertNull(q.poll());\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "BlockingObserverTest.dispose()", "testcase": true, "constructor": false, "invocations": ["dispose", "assertEquals", "poll", "dispose", "assertNull", "poll"]}, "focal_class": {"identifier": "BlockingObserver", "superclass": "extends AtomicReference<Disposable>", "interfaces": "implements Observer<T>, Disposable", "fields": [{"original_string": "private static final long serialVersionUID = -4875965440900746268L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4875965440900746268L", "var_name": "serialVersionUID"}, {"original_string": "public static final Object TERMINATED = new Object();", "modifier": "public static final", "type": "Object", "declarator": "TERMINATED = new Object()", "var_name": "TERMINATED"}, {"original_string": "final Queue<Object> queue;", "modifier": "final", "type": "Queue<Object>", "declarator": "queue", "var_name": "queue"}], "methods": [{"identifier": "BlockingObserver", "parameters": "(Queue<Object> queue)", "modifiers": "public", "return": "", "signature": " BlockingObserver(Queue<Object> queue)", "full_signature": "public  BlockingObserver(Queue<Object> queue)", "class_method_signature": "BlockingObserver.BlockingObserver(Queue<Object> queue)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable s)", "full_signature": "@Override public void onSubscribe(Disposable s)", "class_method_signature": "BlockingObserver.onSubscribe(Disposable s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "BlockingObserver.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "BlockingObserver.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "BlockingObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "BlockingObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "BlockingObserver.isDisposed()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/observers/BlockingObserver.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        if (DisposableHelper.dispose(this)) {\n            queue.offer(TERMINATED);\n        }\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "BlockingObserver.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose", "offer"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}