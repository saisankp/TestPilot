{"test_class": {"identifier": "StandardRoadNetworkTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private StandardRoadNetwork network;", "modifier": "private", "type": "StandardRoadNetwork", "declarator": "network", "var_name": "network"}, {"original_string": "private RoadSegmentStub segment1, segment2, segment3, segment4, segment5;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "segment1", "var_name": "segment1"}, {"original_string": "private RoadSegmentStub segment6, segment7, segment8, segment9;", "modifier": "private", "type": "RoadSegmentStub", "declarator": "segment6", "var_name": "segment6"}], "file": "advanced/gis/gisroad/src/test/java/org/arakhne/afc/gis/road/StandardRoadNetworkTest.java"}, "test_case": {"identifier": "testGetNearestSegment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetNearestSegment() {\n\t\tassertEquals(this.segment4,\n\t\t\t\tthis.network.getNearestSegment(\n\t\t\t\t\t\tnew Point2d(-5.,0.)));\n\t\tassertEquals(this.segment6,\n\t\t\t\tthis.network.getNearestSegment(\n\t\t\t\t\t\tnew Point2d(1000.,1000.)));\n\t\tassertEquals(this.segment6,\n\t\t\t\tthis.network.getNearestSegment(\n\t\t\t\t\t\tnew Point2d(1000.,0.)));\n\t\tassertEquals(this.segment1,\n\t\t\t\tthis.network.getNearestSegment(\n\t\t\t\t\t\tnew Point2d(0.,1000.)));\n\t\tassertTrue(Arrays.asList(this.segment4, this.segment1).contains(this.network.getNearestSegment(\n\t\t\t\t\t\tnew Point2d(0.,0.))));\n\t}", "signature": "void testGetNearestSegment()", "full_signature": "@Test public void testGetNearestSegment()", "class_method_signature": "StandardRoadNetworkTest.testGetNearestSegment()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNearestSegment", "assertEquals", "getNearestSegment", "assertEquals", "getNearestSegment", "assertEquals", "getNearestSegment", "assertTrue", "contains", "asList", "getNearestSegment"]}, "focal_class": {"identifier": "StandardRoadNetwork", "superclass": "extends AbstractBoundedGISElement<GISContainer<?>, StandardRoadNetwork>", "interfaces": "implements RoadNetwork", "fields": [{"original_string": "private static final long serialVersionUID = 4183798734164630125L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4183798734164630125L", "var_name": "serialVersionUID"}, {"original_string": "private final EventHandler eventHandler = new EventHandler();", "modifier": "private final", "type": "EventHandler", "declarator": "eventHandler = new EventHandler()", "var_name": "eventHandler"}, {"original_string": "private  GISPolylineSet<RoadPolyline> roadSegments;", "modifier": "private", "type": "GISPolylineSet<RoadPolyline>", "declarator": "roadSegments", "var_name": "roadSegments"}, {"original_string": "private int connectionCount;", "modifier": "private", "type": "int", "declarator": "connectionCount", "var_name": "connectionCount"}, {"original_string": "private Collection<RoadNetworkListener> listeners;", "modifier": "private", "type": "Collection<RoadNetworkListener>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "StandardRoadNetwork", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "modifiers": "public", "return": "", "signature": " StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "full_signature": "public  StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "class_method_signature": "StandardRoadNetwork.StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "StandardRoadNetwork", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "modifiers": "public", "return": "", "signature": " StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "full_signature": "public  StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "class_method_signature": "StandardRoadNetwork.StandardRoadNetwork(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "testcase": false, "constructor": true}, {"identifier": "StandardRoadNetwork", "parameters": "(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "modifiers": "public", "return": "", "signature": " StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "full_signature": "public  StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "class_method_signature": "StandardRoadNetwork.StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds, AttributeCollection attributeProvider)", "testcase": false, "constructor": true}, {"identifier": "StandardRoadNetwork", "parameters": "(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "modifiers": "public", "return": "", "signature": " StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "full_signature": "public  StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "class_method_signature": "StandardRoadNetwork.StandardRoadNetwork(UUID id, Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "testcase": false, "constructor": true}, {"identifier": "toJson", "parameters": "(JsonBuffer buffer)", "modifiers": "@Override @Pure public", "return": "void", "signature": "void toJson(JsonBuffer buffer)", "full_signature": "@Override @Pure public void toJson(JsonBuffer buffer)", "class_method_signature": "StandardRoadNetwork.toJson(JsonBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "createInternalDataStructure", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "modifiers": "@SuppressWarnings({\"static-method\", \"checkstyle:magicnumber\"}) protected", "return": "GISPolylineSet<RoadPolyline>", "signature": "GISPolylineSet<RoadPolyline> createInternalDataStructure(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "full_signature": "@SuppressWarnings({\"static-method\", \"checkstyle:magicnumber\"}) protected GISPolylineSet<RoadPolyline> createInternalDataStructure(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "class_method_signature": "StandardRoadNetwork.createInternalDataStructure(Rectangle2afp<?, ?, ?, ?, ?, ?> originalBounds)", "testcase": false, "constructor": false}, {"identifier": "initAttributes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initAttributes()", "full_signature": "private void initAttributes()", "class_method_signature": "StandardRoadNetwork.initAttributes()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override @Pure public", "return": "StandardRoadNetwork", "signature": "StandardRoadNetwork clone()", "full_signature": "@Override @Pure public StandardRoadNetwork clone()", "class_method_signature": "StandardRoadNetwork.clone()", "testcase": false, "constructor": false}, {"identifier": "getInternalSet", "parameters": "()", "modifiers": "@Pure public", "return": "GISPolylineSet<RoadPolyline>", "signature": "GISPolylineSet<RoadPolyline> getInternalSet()", "full_signature": "@Pure public GISPolylineSet<RoadPolyline> getInternalSet()", "class_method_signature": "StandardRoadNetwork.getInternalSet()", "testcase": false, "constructor": false}, {"identifier": "getInternalTree", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Pure public", "return": "Tree<RoadPolyline, ?>", "signature": "Tree<RoadPolyline, ?> getInternalTree()", "full_signature": "@SuppressWarnings(\"unchecked\") @Pure public Tree<RoadPolyline, ?> getInternalTree()", "class_method_signature": "StandardRoadNetwork.getInternalTree()", "testcase": false, "constructor": false}, {"identifier": "setUUID", "parameters": "(UUID id)", "modifiers": "@Override public final", "return": "void", "signature": "void setUUID(UUID id)", "full_signature": "@Override public final void setUUID(UUID id)", "class_method_signature": "StandardRoadNetwork.setUUID(UUID id)", "testcase": false, "constructor": false}, {"identifier": "getLegalTrafficSide", "parameters": "()", "modifiers": "@Pure public", "return": "LegalTrafficSide", "signature": "LegalTrafficSide getLegalTrafficSide()", "full_signature": "@Pure public LegalTrafficSide getLegalTrafficSide()", "class_method_signature": "StandardRoadNetwork.getLegalTrafficSide()", "testcase": false, "constructor": false}, {"identifier": "isLeftSidedTrafficDirection", "parameters": "()", "modifiers": "@Override @Pure @Inline(value = \"getLegalTrafficSide() == $1.LEFT\", imported = LegalTrafficSide.class) public", "return": "boolean", "signature": "boolean isLeftSidedTrafficDirection()", "full_signature": "@Override @Pure @Inline(value = \"getLegalTrafficSide() == $1.LEFT\", imported = LegalTrafficSide.class) public boolean isLeftSidedTrafficDirection()", "class_method_signature": "StandardRoadNetwork.isLeftSidedTrafficDirection()", "testcase": false, "constructor": false}, {"identifier": "isRightSidedTrafficDirection", "parameters": "()", "modifiers": "@Override @Pure @Inline(value = \"getLegalTrafficSide() == $1.RIGHT\", imported = LegalTrafficSide.class) public", "return": "boolean", "signature": "boolean isRightSidedTrafficDirection()", "full_signature": "@Override @Pure @Inline(value = \"getLegalTrafficSide() == $1.RIGHT\", imported = LegalTrafficSide.class) public boolean isRightSidedTrafficDirection()", "class_method_signature": "StandardRoadNetwork.isRightSidedTrafficDirection()", "testcase": false, "constructor": false}, {"identifier": "getSegmentCount", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getSegmentCount()", "full_signature": "@Override @Pure public int getSegmentCount()", "class_method_signature": "StandardRoadNetwork.getSegmentCount()", "testcase": false, "constructor": false}, {"identifier": "getPointCount", "parameters": "()", "modifiers": "@Override @Pure public", "return": "int", "signature": "int getPointCount()", "full_signature": "@Override @Pure public int getPointCount()", "class_method_signature": "StandardRoadNetwork.getPointCount()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object obj)", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean contains(Object obj)", "full_signature": "@Override @Pure public boolean contains(Object obj)", "class_method_signature": "StandardRoadNetwork.contains(Object obj)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(RoadSegment segment)", "modifiers": "@Override @Pure public final", "return": "boolean", "signature": "boolean contains(RoadSegment segment)", "full_signature": "@Override @Pure public final boolean contains(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.contains(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override @Pure public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override @Pure public boolean isEmpty()", "class_method_signature": "StandardRoadNetwork.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "calcBounds", "parameters": "()", "modifiers": "@Override @Pure protected", "return": "Rectangle2d", "signature": "Rectangle2d calcBounds()", "full_signature": "@Override @Pure protected Rectangle2d calcBounds()", "class_method_signature": "StandardRoadNetwork.calcBounds()", "testcase": false, "constructor": false}, {"identifier": "getShape", "parameters": "()", "modifiers": "@Override public", "return": "Shape2d<?>", "signature": "Shape2d<?> getShape()", "full_signature": "@Override public Shape2d<?> getShape()", "class_method_signature": "StandardRoadNetwork.getShape()", "testcase": false, "constructor": false}, {"identifier": "getGeoLocation", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GeoLocation", "signature": "GeoLocation getGeoLocation()", "full_signature": "@Override @Pure public GeoLocation getGeoLocation()", "class_method_signature": "StandardRoadNetwork.getGeoLocation()", "testcase": false, "constructor": false}, {"identifier": "getRoadSegments", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Collection<? extends RoadSegment>", "signature": "Collection<? extends RoadSegment> getRoadSegments()", "full_signature": "@Override @Pure public Collection<? extends RoadSegment> getRoadSegments()", "class_method_signature": "StandardRoadNetwork.getRoadSegments()", "testcase": false, "constructor": false}, {"identifier": "getRoadSegment", "parameters": "(GeoId geoId)", "modifiers": "@Override @Pure public final", "return": "RoadSegment", "signature": "RoadSegment getRoadSegment(GeoId geoId)", "full_signature": "@Override @Pure public final RoadSegment getRoadSegment(GeoId geoId)", "class_method_signature": "StandardRoadNetwork.getRoadSegment(GeoId geoId)", "testcase": false, "constructor": false}, {"identifier": "getRoadSegment", "parameters": "(GeoLocation location)", "modifiers": "@Override @Pure public final", "return": "RoadSegment", "signature": "RoadSegment getRoadSegment(GeoLocation location)", "full_signature": "@Override @Pure public final RoadSegment getRoadSegment(GeoLocation location)", "class_method_signature": "StandardRoadNetwork.getRoadSegment(GeoLocation location)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "@Override @Pure public", "return": "Collection<RoadConnection>", "signature": "Collection<RoadConnection> getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "@Override @Pure public Collection<RoadConnection> getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "StandardRoadNetwork.getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "(Rectangle2d bounds)", "modifiers": "@Override @Pure public", "return": "Collection<RoadConnection>", "signature": "Collection<RoadConnection> getConnections(Rectangle2d bounds)", "full_signature": "@Override @Pure public Collection<RoadConnection> getConnections(Rectangle2d bounds)", "class_method_signature": "StandardRoadNetwork.getConnections(Rectangle2d bounds)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds,\n\t\t\tIterator<RoadPolyline> iterator)", "modifiers": "private static", "return": "Collection<RoadConnection>", "signature": "Collection<RoadConnection> getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds,\n\t\t\tIterator<RoadPolyline> iterator)", "full_signature": "private static Collection<RoadConnection> getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds,\n\t\t\tIterator<RoadPolyline> iterator)", "class_method_signature": "StandardRoadNetwork.getConnections(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds,\n\t\t\tIterator<RoadPolyline> iterator)", "testcase": false, "constructor": false}, {"identifier": "getNearestConnection", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "RoadConnection", "signature": "RoadConnection getNearestConnection(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public RoadConnection getNearestConnection(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestConnection(Point2D<?, ?> pos)", "testcase": false, "constructor": false}, {"identifier": "getNearestSegment", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "RoadSegment", "signature": "RoadSegment getNearestSegment(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public RoadSegment getNearestSegment(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestSegment(Point2D<?, ?> pos)", "testcase": false, "constructor": false}, {"identifier": "getNearestSegmentData", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "Pair<? extends RoadSegment, Double>", "signature": "Pair<? extends RoadSegment, Double> getNearestSegmentData(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public Pair<? extends RoadSegment, Double> getNearestSegmentData(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestSegmentData(Point2D<?, ?> pos)", "testcase": false, "constructor": false}, {"identifier": "getNearestPosition", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "Point1d", "signature": "Point1d getNearestPosition(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public Point1d getNearestPosition(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestPosition(Point2D<?, ?> pos)", "testcase": false, "constructor": false}, {"identifier": "getNearestPositionOnRoadBorder", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "Point1d", "signature": "Point1d getNearestPositionOnRoadBorder(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public Point1d getNearestPositionOnRoadBorder(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestPositionOnRoadBorder(Point2D<?, ?> pos)", "testcase": false, "constructor": false}, {"identifier": "addRoadSegment", "parameters": "(RoadSegment segment)", "modifiers": "@Override public final", "return": "void", "signature": "void addRoadSegment(RoadSegment segment)", "full_signature": "@Override public final void addRoadSegment(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.addRoadSegment(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "addRoadPolyline", "parameters": "(RoadPolyline segment)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public final", "return": "boolean", "signature": "boolean addRoadPolyline(RoadPolyline segment)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public final boolean addRoadPolyline(RoadPolyline segment)", "class_method_signature": "StandardRoadNetwork.addRoadPolyline(RoadPolyline segment)", "testcase": false, "constructor": false}, {"identifier": "removeRoadSegment", "parameters": "(RoadSegment segment)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeRoadSegment(RoadSegment segment)", "full_signature": "@Override public boolean removeRoadSegment(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.removeRoadSegment(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean clear()", "full_signature": "@Override public boolean clear()", "class_method_signature": "StandardRoadNetwork.clear()", "testcase": false, "constructor": false}, {"identifier": "mergeRoadConnections", "parameters": "(RoadConnection... connections)", "modifiers": "@Override public final", "return": "RoadConnection", "signature": "RoadConnection mergeRoadConnections(RoadConnection... connections)", "full_signature": "@Override public final RoadConnection mergeRoadConnections(RoadConnection... connections)", "class_method_signature": "StandardRoadNetwork.mergeRoadConnections(RoadConnection... connections)", "testcase": false, "constructor": false}, {"identifier": "mergeRoadConnections", "parameters": "(Collection<? extends RoadConnection> connections)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\"}) public", "return": "RoadConnection", "signature": "RoadConnection mergeRoadConnections(Collection<? extends RoadConnection> connections)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\"}) public RoadConnection mergeRoadConnections(Collection<? extends RoadConnection> connections)", "class_method_signature": "StandardRoadNetwork.mergeRoadConnections(Collection<? extends RoadConnection> connections)", "testcase": false, "constructor": false}, {"identifier": "connectSegmentStartPoint", "parameters": "(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "modifiers": "@Override public", "return": "RoadConnection", "signature": "RoadConnection connectSegmentStartPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "full_signature": "@Override public RoadConnection connectSegmentStartPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "class_method_signature": "StandardRoadNetwork.connectSegmentStartPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "testcase": false, "constructor": false}, {"identifier": "connectSegmentEndPoint", "parameters": "(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "modifiers": "@Override public", "return": "RoadConnection", "signature": "RoadConnection connectSegmentEndPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "full_signature": "@Override public RoadConnection connectSegmentEndPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "class_method_signature": "StandardRoadNetwork.connectSegmentEndPoint(\n\t\t\tRoadConnection connection,\n\t\t\tRoadSegment segment,\n\t\t\tPoint2D<?, ?> position)", "testcase": false, "constructor": false}, {"identifier": "addRoadNetworkListener", "parameters": "(RoadNetworkListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addRoadNetworkListener(RoadNetworkListener listener)", "full_signature": "@Override public void addRoadNetworkListener(RoadNetworkListener listener)", "class_method_signature": "StandardRoadNetwork.addRoadNetworkListener(RoadNetworkListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeRoadNetworkListener", "parameters": "(RoadNetworkListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeRoadNetworkListener(RoadNetworkListener listener)", "full_signature": "@Override public void removeRoadNetworkListener(RoadNetworkListener listener)", "class_method_signature": "StandardRoadNetwork.removeRoadNetworkListener(RoadNetworkListener listener)", "testcase": false, "constructor": false}, {"identifier": "fireSegmentAdded", "parameters": "(RoadSegment segment)", "modifiers": "protected", "return": "void", "signature": "void fireSegmentAdded(RoadSegment segment)", "full_signature": "protected void fireSegmentAdded(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.fireSegmentAdded(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "fireSegmentChanged", "parameters": "(RoadSegment segment)", "modifiers": "protected", "return": "void", "signature": "void fireSegmentChanged(RoadSegment segment)", "full_signature": "protected void fireSegmentChanged(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.fireSegmentChanged(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "fireSegmentRemoved", "parameters": "(RoadSegment segment)", "modifiers": "protected", "return": "void", "signature": "void fireSegmentRemoved(RoadSegment segment)", "full_signature": "protected void fireSegmentRemoved(RoadSegment segment)", "class_method_signature": "StandardRoadNetwork.fireSegmentRemoved(RoadSegment segment)", "testcase": false, "constructor": false}, {"identifier": "depthIterator", "parameters": "(\n\t\t\tRoadSegment startingSegment, double depth,\n\t\t\tdouble position_from_starting_point, RoadConnection startingPoint,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdater)", "modifiers": "@Override @Pure public", "return": "GraphIterator<RoadSegment, RoadConnection>", "signature": "GraphIterator<RoadSegment, RoadConnection> depthIterator(\n\t\t\tRoadSegment startingSegment, double depth,\n\t\t\tdouble position_from_starting_point, RoadConnection startingPoint,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdater)", "full_signature": "@Override @Pure public GraphIterator<RoadSegment, RoadConnection> depthIterator(\n\t\t\tRoadSegment startingSegment, double depth,\n\t\t\tdouble position_from_starting_point, RoadConnection startingPoint,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdater)", "class_method_signature": "StandardRoadNetwork.depthIterator(\n\t\t\tRoadSegment startingSegment, double depth,\n\t\t\tdouble position_from_starting_point, RoadConnection startingPoint,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments,\n\t\t\tDynamicDepthUpdater<RoadSegment, RoadConnection> dynamicDepthUpdater)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(\n\t\t\tRoadSegment starting_segment, RoadConnection starting_point,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments)", "modifiers": "@Override @Pure public", "return": "GraphIterator<RoadSegment, RoadConnection>", "signature": "GraphIterator<RoadSegment, RoadConnection> iterator(\n\t\t\tRoadSegment starting_segment, RoadConnection starting_point,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments)", "full_signature": "@Override @Pure public GraphIterator<RoadSegment, RoadConnection> iterator(\n\t\t\tRoadSegment starting_segment, RoadConnection starting_point,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments)", "class_method_signature": "StandardRoadNetwork.iterator(\n\t\t\tRoadSegment starting_segment, RoadConnection starting_point,\n\t\t\tboolean allowManyReplies, boolean assumeOrientedSegments)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @Pure public", "return": "Iterator<RoadSegment>", "signature": "Iterator<RoadSegment> iterator()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @Pure public Iterator<RoadSegment> iterator()", "class_method_signature": "StandardRoadNetwork.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "@Override @Pure public", "return": "Iterator<? extends RoadSegment>", "signature": "Iterator<? extends RoadSegment> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "@Override @Pure public Iterator<? extends RoadSegment> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "StandardRoadNetwork.iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "modifiers": "@Override @Pure public", "return": "Iterator<? extends RoadSegment>", "signature": "Iterator<? extends RoadSegment> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "full_signature": "@Override @Pure public Iterator<? extends RoadSegment> iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "class_method_signature": "StandardRoadNetwork.iterator(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "testcase": false, "constructor": false}, {"identifier": "toIterable", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "modifiers": "@Override @Pure public", "return": "Iterable<? extends RoadSegment>", "signature": "Iterable<? extends RoadSegment> toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "full_signature": "@Override @Pure public Iterable<? extends RoadSegment> toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "class_method_signature": "StandardRoadNetwork.toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds)", "testcase": false, "constructor": false}, {"identifier": "toIterable", "parameters": "(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "modifiers": "@Override @Pure public", "return": "Iterable<? extends RoadSegment>", "signature": "Iterable<? extends RoadSegment> toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "full_signature": "@Override @Pure public Iterable<? extends RoadSegment> toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "class_method_signature": "StandardRoadNetwork.toIterable(Rectangle2afp<?, ?, ?, ?, ?, ?> bounds, int budget)", "testcase": false, "constructor": false}, {"identifier": "boundsIterator", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Iterator<Rectangle2afp<?, ?, ?, ?, ?, ?>>", "signature": "Iterator<Rectangle2afp<?, ?, ?, ?, ?, ?>> boundsIterator()", "full_signature": "@Override @Pure public Iterator<Rectangle2afp<?, ?, ?, ?, ?, ?>> boundsIterator()", "class_method_signature": "StandardRoadNetwork.boundsIterator()", "testcase": false, "constructor": false}], "file": "advanced/gis/gisroad/src/main/java/org/arakhne/afc/gis/road/StandardRoadNetwork.java"}, "focal_method": {"identifier": "getNearestSegment", "parameters": "(Point2D<?, ?> pos)", "modifiers": "@Override @Pure public", "return": "RoadSegment", "body": "@Override\n\t@Pure\n\tpublic RoadSegment getNearestSegment(Point2D<?, ?> pos) {\n\t\treturn this.roadSegments.getNearest(pos);\n\t}", "signature": "RoadSegment getNearestSegment(Point2D<?, ?> pos)", "full_signature": "@Override @Pure public RoadSegment getNearestSegment(Point2D<?, ?> pos)", "class_method_signature": "StandardRoadNetwork.getNearestSegment(Point2D<?, ?> pos)", "testcase": false, "constructor": false, "invocations": ["getNearest"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}