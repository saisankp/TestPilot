{"test_class": {"identifier": "TreeMapConsistentHashTest", "superclass": "", "interfaces": "", "fields": [], "file": "cim-common/src/test/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/TreeMapConsistentHashTest.java"}, "test_case": {"identifier": "getFirstNodeValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFirstNodeValue() {\n        AbstractConsistentHash map = new TreeMapConsistentHash() ;\n\n        List<String> strings = new ArrayList<String>();\n        for (int i = 0; i < 10; i++) {\n            strings.add(\"127.0.0.\" + i) ;\n        }\n        String process = map.process(strings,\"zhangsan\");\n        System.out.println(process);\n        Assert.assertEquals(\"127.0.0.2\",process);\n    }", "signature": "void getFirstNodeValue()", "full_signature": "@Test public void getFirstNodeValue()", "class_method_signature": "TreeMapConsistentHashTest.getFirstNodeValue()", "testcase": true, "constructor": false, "invocations": ["add", "process", "println", "assertEquals"]}, "focal_class": {"identifier": "TreeMapConsistentHash", "superclass": "extends AbstractConsistentHash", "interfaces": "", "fields": [{"original_string": "private TreeMap<Long,String> treeMap = new TreeMap<Long, String>() ;", "modifier": "private", "type": "TreeMap<Long,String>", "declarator": "treeMap = new TreeMap<Long, String>()", "var_name": "treeMap"}, {"original_string": "private static final int VIRTUAL_NODE_SIZE = 2 ;", "modifier": "private static final", "type": "int", "declarator": "VIRTUAL_NODE_SIZE = 2", "var_name": "VIRTUAL_NODE_SIZE"}], "methods": [{"identifier": "add", "parameters": "(long key, String value)", "modifiers": "@Override public", "return": "void", "signature": "void add(long key, String value)", "full_signature": "@Override public void add(long key, String value)", "class_method_signature": "TreeMapConsistentHash.add(long key, String value)", "testcase": false, "constructor": false}, {"identifier": "getFirstNodeValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "String", "signature": "String getFirstNodeValue(String value)", "full_signature": "@Override public String getFirstNodeValue(String value)", "class_method_signature": "TreeMapConsistentHash.getFirstNodeValue(String value)", "testcase": false, "constructor": false}], "file": "cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/TreeMapConsistentHash.java"}, "focal_method": {"identifier": "getFirstNodeValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getFirstNodeValue(String value) {\n        long hash = super.hash(value);\n        System.out.println(\"value=\" + value + \" hash = \" + hash);\n        SortedMap<Long, String> last = treeMap.tailMap(hash);\n        if (!last.isEmpty()) {\n            return last.get(last.firstKey());\n        }\n        if (treeMap.size() == 0){\n            throw new CIMException(StatusEnum.SERVER_NOT_AVAILABLE) ;\n        }\n        return treeMap.firstEntry().getValue();\n    }", "signature": "String getFirstNodeValue(String value)", "full_signature": "@Override public String getFirstNodeValue(String value)", "class_method_signature": "TreeMapConsistentHash.getFirstNodeValue(String value)", "testcase": false, "constructor": false, "invocations": ["hash", "println", "tailMap", "isEmpty", "get", "firstKey", "size", "getValue", "firstEntry"]}, "repository": {"repo_id": 134164777, "url": "https://github.com/crossoverJie/cim", "stars": 4518, "created": "5/20/2018 3:55:56 PM +00:00", "updates": "2020-01-27T13:30:30+00:00", "fork": "False", "license": "licensed"}}