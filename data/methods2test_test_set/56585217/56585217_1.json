{"test_class": {"identifier": "UserServiceImplTest", "superclass": "extends SpringTestSupport", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "file": "core/src/test/java/com/weghst/setaria/core/service/impl/UserServiceImplTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "(User user)", "modifiers": "@Test(dataProvider = \"dataUser\") public", "return": "void", "body": "@Test(dataProvider = \"dataUser\")\n    public void testUpdate(User user) throws Exception {\n        userService.save(user);\n\n        user.setPassword(\"[NEW-PASSWORD]\");\n        userService.update(user);\n    }", "signature": "void testUpdate(User user)", "full_signature": "@Test(dataProvider = \"dataUser\") public void testUpdate(User user)", "class_method_signature": "UserServiceImplTest.testUpdate(User user)", "testcase": true, "constructor": false, "invocations": ["save", "setPassword", "update"]}, "focal_class": {"identifier": "UserServiceImpl", "superclass": "", "interfaces": "implements UserService", "fields": [{"original_string": "@Value(\"${setaria.root}\")\n    private String root;", "modifier": "@Value(\"${setaria.root}\")\n    private", "type": "String", "declarator": "root", "var_name": "root"}, {"original_string": "@Autowired\n    private UserRepository userRepository;", "modifier": "@Autowired\n    private", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Autowired\n    private UserAppRepository userAppRepository;", "modifier": "@Autowired\n    private", "type": "UserAppRepository", "declarator": "userAppRepository", "var_name": "userAppRepository"}], "methods": [{"identifier": "save", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void save(User user)", "full_signature": "@Override public void save(User user)", "class_method_signature": "UserServiceImpl.save(User user)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(User user, int[] appIds)", "modifiers": "@Override public", "return": "void", "signature": "void save(User user, int[] appIds)", "full_signature": "@Override public void save(User user, int[] appIds)", "class_method_signature": "UserServiceImpl.save(User user, int[] appIds)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void update(User user)", "full_signature": "@Override public void update(User user)", "class_method_signature": "UserServiceImpl.update(User user)", "testcase": false, "constructor": false}, {"identifier": "updatePassword", "parameters": "(int id, String oldPassword, String newPassword)", "modifiers": "@Override public", "return": "void", "signature": "void updatePassword(int id, String oldPassword, String newPassword)", "full_signature": "@Override public void updatePassword(int id, String oldPassword, String newPassword)", "class_method_signature": "UserServiceImpl.updatePassword(int id, String oldPassword, String newPassword)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(User user, int[] appIds)", "modifiers": "@Override public", "return": "void", "signature": "void update(User user, int[] appIds)", "full_signature": "@Override public void update(User user, int[] appIds)", "class_method_signature": "UserServiceImpl.update(User user, int[] appIds)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(int id)", "modifiers": "@Override public", "return": "void", "signature": "void deleteById(int id)", "full_signature": "@Override public void deleteById(int id)", "class_method_signature": "UserServiceImpl.deleteById(int id)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(int id)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "User", "signature": "User findById(int id)", "full_signature": "@Transactional(readOnly = true) @Override public User findById(int id)", "class_method_signature": "UserServiceImpl.findById(int id)", "testcase": false, "constructor": false}, {"identifier": "findByEmail", "parameters": "(String email)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "User", "signature": "User findByEmail(String email)", "full_signature": "@Transactional(readOnly = true) @Override public User findByEmail(String email)", "class_method_signature": "UserServiceImpl.findByEmail(String email)", "testcase": false, "constructor": false}, {"identifier": "findUserAppIds", "parameters": "(int id)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "int[]", "signature": "int[] findUserAppIds(int id)", "full_signature": "@Transactional(readOnly = true) @Override public int[] findUserAppIds(int id)", "class_method_signature": "UserServiceImpl.findUserAppIds(int id)", "testcase": false, "constructor": false}, {"identifier": "findOrdinaryUsers", "parameters": "()", "modifiers": "@Override public", "return": "List<User>", "signature": "List<User> findOrdinaryUsers()", "full_signature": "@Override public List<User> findOrdinaryUsers()", "class_method_signature": "UserServiceImpl.findOrdinaryUsers()", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "List<User>", "signature": "List<User> findAll()", "full_signature": "@Transactional(readOnly = true) @Override public List<User> findAll()", "class_method_signature": "UserServiceImpl.findAll()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String email, String password)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "User", "signature": "User authenticate(String email, String password)", "full_signature": "@Transactional(readOnly = true) @Override public User authenticate(String email, String password)", "class_method_signature": "UserServiceImpl.authenticate(String email, String password)", "testcase": false, "constructor": false}, {"identifier": "saveUserApps", "parameters": "(int userId, int[] appIds)", "modifiers": "private", "return": "void", "signature": "void saveUserApps(int userId, int[] appIds)", "full_signature": "private void saveUserApps(int userId, int[] appIds)", "class_method_signature": "UserServiceImpl.saveUserApps(int userId, int[] appIds)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/weghst/setaria/core/service/impl/UserServiceImpl.java"}, "focal_method": {"identifier": "update", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void update(User user) {\n        User dbUser = findById(user.getId());\n        if (root.equals(dbUser.getEmail())) {\n            throw new RuntimeException(\"ROOT \u7528\u6237\u4e0d\u80fd\u4fee\u6539\");\n        }\n\n        user.setPassword(DigestUtils.md5Hex(user.getPassword()));\n        userRepository.update(user);\n    }", "signature": "void update(User user)", "full_signature": "@Override public void update(User user)", "class_method_signature": "UserServiceImpl.update(User user)", "testcase": false, "constructor": false, "invocations": ["findById", "getId", "equals", "getEmail", "setPassword", "md5Hex", "getPassword", "update"]}, "repository": {"repo_id": 56585217, "url": "https://github.com/kevin70/setaria", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 8, "size": 5630, "license": "licensed"}}