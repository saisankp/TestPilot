{"test_class": {"identifier": "OverloadedMethodTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "OverloadedMethod method;", "modifier": "", "type": "OverloadedMethod", "declarator": "method", "var_name": "method"}], "file": "reflekt/src/test/java/io/advantageous/boon/core/reflection/impl/OverloadedMethodTest.java"}, "test_case": {"identifier": "addLongInt2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addLongInt2() {\n        String str = (String) method.invokeDynamic(new SomeClass(), Long.MAX_VALUE, 1);\n\n        puts(str);\n        assertEquals(\"addTwoLongs9223372036854775807_1\", str);\n\n    }", "signature": "void addLongInt2()", "full_signature": "@Test public void addLongInt2()", "class_method_signature": "OverloadedMethodTest.addLongInt2()", "testcase": true, "constructor": false, "invocations": ["invokeDynamic", "puts", "assertEquals"]}, "focal_class": {"identifier": "OverloadedMethod", "superclass": "", "interfaces": "implements MethodAccess", "fields": [{"original_string": "List<MethodAccess> methodAccessList = new ArrayList<>();", "modifier": "", "type": "List<MethodAccess>", "declarator": "methodAccessList = new ArrayList<>()", "var_name": "methodAccessList"}, {"original_string": "List<List<MethodAccess>> methodAccessListByArgNumber = new ArrayList<>();", "modifier": "", "type": "List<List<MethodAccess>>", "declarator": "methodAccessListByArgNumber = new ArrayList<>()", "var_name": "methodAccessListByArgNumber"}, {"original_string": "List<List<MethodAccess>> methodAccessListByArgNumberWithVarArg = new ArrayList<>();", "modifier": "", "type": "List<List<MethodAccess>>", "declarator": "methodAccessListByArgNumberWithVarArg = new ArrayList<>()", "var_name": "methodAccessListByArgNumberWithVarArg"}, {"original_string": "private boolean lock;", "modifier": "private", "type": "boolean", "declarator": "lock", "var_name": "lock"}], "methods": [{"identifier": "add", "parameters": "(MethodAccess methodAccess)", "modifiers": "public", "return": "OverloadedMethod", "signature": "OverloadedMethod add(MethodAccess methodAccess)", "full_signature": "public OverloadedMethod add(MethodAccess methodAccess)", "class_method_signature": "OverloadedMethod.add(MethodAccess methodAccess)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "OverloadedMethod", "signature": "OverloadedMethod init()", "full_signature": "public OverloadedMethod init()", "class_method_signature": "OverloadedMethod.init()", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void lock()", "full_signature": "public void lock()", "class_method_signature": "OverloadedMethod.lock()", "testcase": false, "constructor": false}, {"identifier": "invokeDynamic", "parameters": "(Object object, Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invokeDynamic(Object object, Object... args)", "full_signature": "@Override public Object invokeDynamic(Object object, Object... args)", "class_method_signature": "OverloadedMethod.invokeDynamic(Object object, Object... args)", "testcase": false, "constructor": false}, {"identifier": "handleLongArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleLongArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleLongArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleLongArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "handleByteArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleByteArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleByteArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleByteArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "handleShortArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleShortArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleShortArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleShortArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "handleIntArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleIntArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleIntArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleIntArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "handleFloatArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleFloatArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleFloatArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleFloatArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "handleDoubleArg", "parameters": "(int score, Object arg, TypeType instanceType)", "modifiers": "private", "return": "int", "signature": "int handleDoubleArg(int score, Object arg, TypeType instanceType)", "full_signature": "private int handleDoubleArg(int score, Object arg, TypeType instanceType)", "class_method_signature": "OverloadedMethod.handleDoubleArg(int score, Object arg, TypeType instanceType)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object object, Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object object, Object... args)", "full_signature": "@Override public Object invoke(Object object, Object... args)", "class_method_signature": "OverloadedMethod.invoke(Object object, Object... args)", "testcase": false, "constructor": false}, {"identifier": "isStatic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStatic()", "full_signature": "@Override public boolean isStatic()", "class_method_signature": "OverloadedMethod.isStatic()", "testcase": false, "constructor": false}, {"identifier": "isPublic", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPublic()", "full_signature": "@Override public boolean isPublic()", "class_method_signature": "OverloadedMethod.isPublic()", "testcase": false, "constructor": false}, {"identifier": "isPrivate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPrivate()", "full_signature": "@Override public boolean isPrivate()", "class_method_signature": "OverloadedMethod.isPrivate()", "testcase": false, "constructor": false}, {"identifier": "returnAccess", "parameters": "()", "modifiers": "@Override public", "return": "MethodReturnAccess", "signature": "MethodReturnAccess returnAccess()", "full_signature": "@Override public MethodReturnAccess returnAccess()", "class_method_signature": "OverloadedMethod.returnAccess()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "OverloadedMethod.name()", "testcase": false, "constructor": false}, {"identifier": "declaringType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> declaringType()", "full_signature": "@Override public Class<?> declaringType()", "class_method_signature": "OverloadedMethod.declaringType()", "testcase": false, "constructor": false}, {"identifier": "returnType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> returnType()", "full_signature": "@Override public Class<?> returnType()", "class_method_signature": "OverloadedMethod.returnType()", "testcase": false, "constructor": false}, {"identifier": "respondsTo", "parameters": "(Class<?>... types)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean respondsTo(Class<?>... types)", "full_signature": "@Override public boolean respondsTo(Class<?>... types)", "class_method_signature": "OverloadedMethod.respondsTo(Class<?>... types)", "testcase": false, "constructor": false}, {"identifier": "respondsTo", "parameters": "(Object... args)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean respondsTo(Object... args)", "full_signature": "@Override public boolean respondsTo(Object... args)", "class_method_signature": "OverloadedMethod.respondsTo(Object... args)", "testcase": false, "constructor": false}, {"identifier": "invokeStatic", "parameters": "(Object... args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invokeStatic(Object... args)", "full_signature": "@Override public Object invokeStatic(Object... args)", "class_method_signature": "OverloadedMethod.invokeStatic(Object... args)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(Object instance)", "modifiers": "@Override public", "return": "MethodAccess", "signature": "MethodAccess bind(Object instance)", "full_signature": "@Override public MethodAccess bind(Object instance)", "class_method_signature": "OverloadedMethod.bind(Object instance)", "testcase": false, "constructor": false}, {"identifier": "methodHandle", "parameters": "()", "modifiers": "@Override public", "return": "MethodHandle", "signature": "MethodHandle methodHandle()", "full_signature": "@Override public MethodHandle methodHandle()", "class_method_signature": "OverloadedMethod.methodHandle()", "testcase": false, "constructor": false}, {"identifier": "methodAccess", "parameters": "()", "modifiers": "@Override public", "return": "MethodAccess", "signature": "MethodAccess methodAccess()", "full_signature": "@Override public MethodAccess methodAccess()", "class_method_signature": "OverloadedMethod.methodAccess()", "testcase": false, "constructor": false}, {"identifier": "bound", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object bound()", "full_signature": "@Override public Object bound()", "class_method_signature": "OverloadedMethod.bound()", "testcase": false, "constructor": false}, {"identifier": "invokeReducerLongIntReturnLongMethodHandle", "parameters": "(T object)", "modifiers": "@Override public", "return": "ConstantCallSite", "signature": "ConstantCallSite invokeReducerLongIntReturnLongMethodHandle(T object)", "full_signature": "@Override public ConstantCallSite invokeReducerLongIntReturnLongMethodHandle(T object)", "class_method_signature": "OverloadedMethod.invokeReducerLongIntReturnLongMethodHandle(T object)", "testcase": false, "constructor": false}, {"identifier": "method", "parameters": "()", "modifiers": "@Override public", "return": "Method", "signature": "Method method()", "full_signature": "@Override public Method method()", "class_method_signature": "OverloadedMethod.method()", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int score()", "full_signature": "@Override public int score()", "class_method_signature": "OverloadedMethod.score()", "testcase": false, "constructor": false}, {"identifier": "paramTypeEnumList", "parameters": "()", "modifiers": "@Override public", "return": "List<TypeType>", "signature": "List<TypeType> paramTypeEnumList()", "full_signature": "@Override public List<TypeType> paramTypeEnumList()", "class_method_signature": "OverloadedMethod.paramTypeEnumList()", "testcase": false, "constructor": false}, {"identifier": "invokeDynamicObject", "parameters": "(final Object object, final Object args)", "modifiers": "public", "return": "Object", "signature": "Object invokeDynamicObject(final Object object, final Object args)", "full_signature": "public Object invokeDynamicObject(final Object object, final Object args)", "class_method_signature": "OverloadedMethod.invokeDynamicObject(final Object object, final Object args)", "testcase": false, "constructor": false}, {"identifier": "annotationDataForParams", "parameters": "()", "modifiers": "@Override public", "return": "List<List<AnnotationData>>", "signature": "List<List<AnnotationData>> annotationDataForParams()", "full_signature": "@Override public List<List<AnnotationData>> annotationDataForParams()", "class_method_signature": "OverloadedMethod.annotationDataForParams()", "testcase": false, "constructor": false}, {"identifier": "parameters", "parameters": "()", "modifiers": "@Override public", "return": "List<MethodParamAccess>", "signature": "List<MethodParamAccess> parameters()", "full_signature": "@Override public List<MethodParamAccess> parameters()", "class_method_signature": "OverloadedMethod.parameters()", "testcase": false, "constructor": false}, {"identifier": "invokeDynamicList", "parameters": "(final Object object, List<?> args)", "modifiers": "public", "return": "Object", "signature": "Object invokeDynamicList(final Object object, List<?> args)", "full_signature": "public Object invokeDynamicList(final Object object, List<?> args)", "class_method_signature": "OverloadedMethod.invokeDynamicList(final Object object, List<?> args)", "testcase": false, "constructor": false}, {"identifier": "parameterTypes", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>[]", "signature": "Class<?>[] parameterTypes()", "full_signature": "@Override public Class<?>[] parameterTypes()", "class_method_signature": "OverloadedMethod.parameterTypes()", "testcase": false, "constructor": false}, {"identifier": "getGenericParameterTypes", "parameters": "()", "modifiers": "@Override public", "return": "Type[]", "signature": "Type[] getGenericParameterTypes()", "full_signature": "@Override public Type[] getGenericParameterTypes()", "class_method_signature": "OverloadedMethod.getGenericParameterTypes()", "testcase": false, "constructor": false}, {"identifier": "annotationData", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<AnnotationData>", "signature": "Iterable<AnnotationData> annotationData()", "full_signature": "@Override public Iterable<AnnotationData> annotationData()", "class_method_signature": "OverloadedMethod.annotationData()", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(String annotationName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAnnotation(String annotationName)", "full_signature": "@Override public boolean hasAnnotation(String annotationName)", "class_method_signature": "OverloadedMethod.hasAnnotation(String annotationName)", "testcase": false, "constructor": false}, {"identifier": "annotation", "parameters": "(String annotationName)", "modifiers": "@Override public", "return": "AnnotationData", "signature": "AnnotationData annotation(String annotationName)", "full_signature": "@Override public AnnotationData annotation(String annotationName)", "class_method_signature": "OverloadedMethod.annotation(String annotationName)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(MethodAccess o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(MethodAccess o)", "full_signature": "@Override public int compareTo(MethodAccess o)", "class_method_signature": "OverloadedMethod.compareTo(MethodAccess o)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/reflection/impl/OverloadedMethod.java"}, "focal_method": {"identifier": "invokeDynamic", "parameters": "(Object object, Object... args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object invokeDynamic(Object object, Object... args) {\n\n        final int length = args.length;\n\n\n        final List<MethodAccess> methodAccesses = this.methodAccessListByArgNumber.get(length);\n\n\n        int maxScore = Integer.MIN_VALUE;\n        MethodAccess methodAccess = null;\n\n        for (MethodAccess m : methodAccesses) {\n            int score = 1;\n            final List<TypeType> paramTypeEnumList = m.paramTypeEnumList();\n\n            if (object == null && !m.isStatic()) {\n                continue;\n            }\n\n\n            loop:\n            for (int argIndex=0; argIndex < args.length; argIndex++) {\n\n                TypeType type =paramTypeEnumList.get(argIndex);\n                Object arg = args[argIndex];\n\n                final TypeType instanceType = TypeType.getInstanceType(arg);\n\n                if (instanceType == type) {\n                    score += 2_000;\n                    continue;\n                }\n\n                switch (type){\n                    case BYTE_WRAPPER:\n                    case BYTE:\n                        score = handleByteArg(score, arg, instanceType);\n                        break;\n\n                    case SHORT_WRAPPER:\n                    case SHORT:\n                        score = handleShortArg(score, arg, instanceType);\n                        break;\n\n                    case INTEGER_WRAPPER:\n                    case INT:\n                        score = handleIntArg(score, arg, instanceType);\n                        break;\n\n\n                    case NULL:\n                        score--;\n                        break;\n\n                    case LONG_WRAPPER:\n                    case LONG:\n                        score = handleLongArg(score, arg, instanceType);\n                        break;\n\n                    case FLOAT_WRAPPER:\n                    case FLOAT:\n                        score = handleFloatArg(score, arg, instanceType);\n                        break;\n\n\n                    case DOUBLE_WRAPPER:\n                    case DOUBLE:\n                        score = handleDoubleArg(score, arg, instanceType);\n                        break;\n\n\n                    case CHAR_WRAPPER:\n                    case CHAR:\n                        if (instanceType == TypeType.CHAR ||\n                                instanceType == TypeType.CHAR_WRAPPER) {\n                            score+=1000;\n                        }\n                        break;\n\n                    case STRING:\n                        if (instanceType == TypeType.STRING) {\n                            score +=1_000;\n                        } else if (instanceType == TypeType.CHAR_SEQUENCE\n                                || arg instanceof CharSequence) {\n                            score +=500;\n                        }\n                        break;\n\n\n                    case INSTANCE:\n                        if (instanceType == TypeType.INSTANCE) {\n                            if (m.parameterTypes()[argIndex].isInstance(arg)){\n                                score+=1000;\n\n                            }\n                        } else if (instanceType == TypeType.MAP) {\n                            score +=1_000;\n                        } else if (instanceType == TypeType.LIST) {\n                            score +=500;\n                        }\n                        break;\n\n                    default:\n                        if (instanceType == type) {\n                            score+=1000;\n                        } else {\n                            if (m.parameterTypes()[argIndex].isInstance(arg)){\n                                score+=1000;\n\n                            }\n                        }\n\n                }\n\n            }\n\n            if (score>maxScore) {\n                maxScore = score;\n                methodAccess = m;\n            }\n        }\n\n        if (methodAccess!=null) {\n            return methodAccess.invokeDynamic(object, args);\n        } else {\n            /* Place holder for now. */\n            List<MethodAccess> varargMethods = this.methodAccessListByArgNumberWithVarArg.get(0);\n            if (varargMethods!=null) {\n                varargMethods.get(0).invokeDynamic(args);\n            }\n        }\n\n        return null;\n    }", "signature": "Object invokeDynamic(Object object, Object... args)", "full_signature": "@Override public Object invokeDynamic(Object object, Object... args)", "class_method_signature": "OverloadedMethod.invokeDynamic(Object object, Object... args)", "testcase": false, "constructor": false, "invocations": ["get", "paramTypeEnumList", "isStatic", "get", "getInstanceType", "handleByteArg", "handleShortArg", "handleIntArg", "handleLongArg", "handleFloatArg", "handleDoubleArg", "isInstance", "parameterTypes", "isInstance", "parameterTypes", "invokeDynamic", "get", "invokeDynamic", "get"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}