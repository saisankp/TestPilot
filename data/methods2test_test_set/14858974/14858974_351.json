{"test_class": {"identifier": "LicenseHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/core/LicenseHandlerTest.java"}, "test_case": {"identifier": "doesNotFailEvenWithWrongPattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doesNotFailEvenWithWrongPattern(){\n        final DbLicense license = new DbLicense();\n        license.setName(\"Test\");\n        license.setRegexp(\"x^[\");\n\n        final RepositoryHandler repoHandler = mock(RepositoryHandler.class);\n        when(repoHandler.getAllLicenses()).thenReturn(Collections.singletonList(license));\n\n        final LicenseHandler licenseHandler = new LicenseHandler(repoHandler);\n\n        Exception exception = null;\n        DbLicense resolvedLicense = null;\n\n        try{\n            resolvedLicense = licenseHandler.resolve(license.getName());\n        }\n        catch (Exception e){\n            exception = e;\n        }\n\n        assertEquals(null, exception);\n        assertEquals(null, resolvedLicense);\n    }", "signature": "void doesNotFailEvenWithWrongPattern()", "full_signature": "@Test public void doesNotFailEvenWithWrongPattern()", "class_method_signature": "LicenseHandlerTest.doesNotFailEvenWithWrongPattern()", "testcase": true, "constructor": false, "invocations": ["setName", "setRegexp", "mock", "thenReturn", "when", "getAllLicenses", "singletonList", "resolve", "getName", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "LicenseHandler", "superclass": "", "interfaces": "implements LicenseMatcher", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LicenseHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LicenseHandler.class)", "var_name": "LOG"}, {"original_string": "private final Map<String, DbLicense> licensesRegexp = new HashMap<>();", "modifier": "private final", "type": "Map<String, DbLicense>", "declarator": "licensesRegexp = new HashMap<>()", "var_name": "licensesRegexp"}, {"original_string": "private final RepositoryHandler repoHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repoHandler", "var_name": "repoHandler"}, {"original_string": "private final RepositoryHandlerBuilder wrapperBuilder = new RepositoryHandlerBuilder();", "modifier": "private final", "type": "RepositoryHandlerBuilder", "declarator": "wrapperBuilder = new RepositoryHandlerBuilder()", "var_name": "wrapperBuilder"}], "methods": [{"identifier": "LicenseHandler", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "", "signature": " LicenseHandler(final RepositoryHandler repoHandler)", "full_signature": "public  LicenseHandler(final RepositoryHandler repoHandler)", "class_method_signature": "LicenseHandler.LicenseHandler(final RepositoryHandler repoHandler)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final List<DbLicense> licenses)", "modifiers": "private", "return": "void", "signature": "void init(final List<DbLicense> licenses)", "full_signature": "private void init(final List<DbLicense> licenses)", "class_method_signature": "LicenseHandler.init(final List<DbLicense> licenses)", "testcase": false, "constructor": false}, {"identifier": "store", "parameters": "(final DbLicense dbLicense)", "modifiers": "public", "return": "void", "signature": "void store(final DbLicense dbLicense)", "full_signature": "public void store(final DbLicense dbLicense)", "class_method_signature": "LicenseHandler.store(final DbLicense dbLicense)", "testcase": false, "constructor": false}, {"identifier": "getLicensesNames", "parameters": "(final FiltersHolder filters)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLicensesNames(final FiltersHolder filters)", "full_signature": "public List<String> getLicensesNames(final FiltersHolder filters)", "class_method_signature": "LicenseHandler.getLicensesNames(final FiltersHolder filters)", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "(final String name)", "modifiers": "public", "return": "DbLicense", "signature": "DbLicense getLicense(final String name)", "full_signature": "public DbLicense getLicense(final String name)", "class_method_signature": "LicenseHandler.getLicense(final String name)", "testcase": false, "constructor": false}, {"identifier": "deleteLicense", "parameters": "(final String licName)", "modifiers": "public", "return": "void", "signature": "void deleteLicense(final String licName)", "full_signature": "public void deleteLicense(final String licName)", "class_method_signature": "LicenseHandler.deleteLicense(final String licName)", "testcase": false, "constructor": false}, {"identifier": "approveLicense", "parameters": "(final String name, final Boolean approved)", "modifiers": "public", "return": "void", "signature": "void approveLicense(final String name, final Boolean approved)", "full_signature": "public void approveLicense(final String name, final Boolean approved)", "class_method_signature": "LicenseHandler.approveLicense(final String name, final Boolean approved)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final String licenseId)", "modifiers": "public", "return": "DbLicense", "signature": "DbLicense resolve(final String licenseId)", "full_signature": "public DbLicense resolve(final String licenseId)", "class_method_signature": "LicenseHandler.resolve(final String licenseId)", "testcase": false, "constructor": false}, {"identifier": "getLicenses", "parameters": "()", "modifiers": "public", "return": "List<License>", "signature": "List<License> getLicenses()", "full_signature": "public List<License> getLicenses()", "class_method_signature": "LicenseHandler.getLicenses()", "testcase": false, "constructor": false}, {"identifier": "resolveLicenses", "parameters": "(List<String> licStrings)", "modifiers": "public", "return": "Set<DbLicense>", "signature": "Set<DbLicense> resolveLicenses(List<String> licStrings)", "full_signature": "public Set<DbLicense> resolveLicenses(List<String> licStrings)", "class_method_signature": "LicenseHandler.resolveLicenses(List<String> licStrings)", "testcase": false, "constructor": false}, {"identifier": "getMatchingLicenses", "parameters": "(String licenseString)", "modifiers": "@Override public", "return": "Set<DbLicense>", "signature": "Set<DbLicense> getMatchingLicenses(String licenseString)", "full_signature": "@Override public Set<DbLicense> getMatchingLicenses(String licenseString)", "class_method_signature": "LicenseHandler.getMatchingLicenses(String licenseString)", "testcase": false, "constructor": false}, {"identifier": "verityLicenseIsConflictFree", "parameters": "(final DbLicense newComer)", "modifiers": "private", "return": "void", "signature": "void verityLicenseIsConflictFree(final DbLicense newComer)", "full_signature": "private void verityLicenseIsConflictFree(final DbLicense newComer)", "class_method_signature": "LicenseHandler.verityLicenseIsConflictFree(final DbLicense newComer)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/core/LicenseHandler.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final String licenseId)", "modifiers": "public", "return": "DbLicense", "body": "public DbLicense resolve(final String licenseId) {\n\n        for (final Entry<String, DbLicense> regexp : licensesRegexp.entrySet()) {\n            try {\n                if (licenseId.matches(regexp.getKey())) {\n                    return regexp.getValue();\n                }\n            } catch (PatternSyntaxException e) {\n                LOG.error(\"Wrong pattern for the following license \" + regexp.getValue().getName(), e);\n                continue;\n            }\n        }\n\n        if(LOG.isWarnEnabled()) {\n            LOG.warn(String.format(\"No matching pattern for license %s\", licenseId));\n        }\n        return null;\n    }", "signature": "DbLicense resolve(final String licenseId)", "full_signature": "public DbLicense resolve(final String licenseId)", "class_method_signature": "LicenseHandler.resolve(final String licenseId)", "testcase": false, "constructor": false, "invocations": ["entrySet", "matches", "getKey", "getValue", "error", "getName", "getValue", "isWarnEnabled", "warn", "format"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}