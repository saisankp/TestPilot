{"test_class": {"identifier": "WebConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WebConfigurer webConfigurer;", "modifier": "private", "type": "WebConfigurer", "declarator": "webConfigurer", "var_name": "webConfigurer"}, {"original_string": "private MockServletContext servletContext;", "modifier": "private", "type": "MockServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private MockEnvironment env;", "modifier": "private", "type": "MockEnvironment", "declarator": "env", "var_name": "env"}, {"original_string": "private JHipsterProperties props;", "modifier": "private", "type": "JHipsterProperties", "declarator": "props", "var_name": "props"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "file": "gamecraft-pipeline-manager/src/test/java/com/gamecraft/config/WebConfigurerTest.java"}, "test_case": {"identifier": "testCorsFilterOnApiPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorsFilterOnApiPath() throws Exception {\n        props.getCors().setAllowedOrigins(Collections.singletonList(\"*\"));\n        props.getCors().setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\"));\n        props.getCors().setAllowedHeaders(Collections.singletonList(\"*\"));\n        props.getCors().setMaxAge(1800L);\n        props.getCors().setAllowCredentials(true);\n\n        MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new WebConfigurerTestController())\n            .addFilters(webConfigurer.corsFilter())\n            .build();\n\n        mockMvc.perform(\n            options(\"/api/test-cors\")\n                .header(HttpHeaders.ORIGIN, \"other.domain.com\")\n                .header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"POST\"))\n            .andExpect(status().isOk())\n            .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"other.domain.com\"))\n            .andExpect(header().string(HttpHeaders.VARY, \"Origin\"))\n            .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, \"GET,POST,PUT,DELETE\"))\n            .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\"))\n            .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_MAX_AGE, \"1800\"));\n\n        mockMvc.perform(\n            get(\"/api/test-cors\")\n                .header(HttpHeaders.ORIGIN, \"other.domain.com\"))\n            .andExpect(status().isOk())\n            .andExpect(header().string(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"other.domain.com\"));\n    }", "signature": "void testCorsFilterOnApiPath()", "full_signature": "@Test public void testCorsFilterOnApiPath()", "class_method_signature": "WebConfigurerTest.testCorsFilterOnApiPath()", "testcase": true, "constructor": false, "invocations": ["setAllowedOrigins", "getCors", "singletonList", "setAllowedMethods", "getCors", "asList", "setAllowedHeaders", "getCors", "singletonList", "setMaxAge", "getCors", "setAllowCredentials", "getCors", "build", "addFilters", "standaloneSetup", "corsFilter", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "header", "header", "options", "isOk", "status", "string", "header", "string", "header", "string", "header", "string", "header", "string", "header", "andExpect", "andExpect", "perform", "header", "get", "isOk", "status", "string", "header"]}, "focal_class": {"identifier": "WebConfigurer", "superclass": "", "interfaces": "implements ServletContextInitializer, EmbeddedServletContainerCustomizer", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(WebConfigurer.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WebConfigurer.class)", "var_name": "log"}, {"original_string": "private final Environment env;", "modifier": "private final", "type": "Environment", "declarator": "env", "var_name": "env"}, {"original_string": "private final JHipsterProperties jHipsterProperties;", "modifier": "private final", "type": "JHipsterProperties", "declarator": "jHipsterProperties", "var_name": "jHipsterProperties"}, {"original_string": "private final HazelcastInstance hazelcastInstance;", "modifier": "private final", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private MetricRegistry metricRegistry;", "modifier": "private", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}], "methods": [{"identifier": "WebConfigurer", "parameters": "(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "modifiers": "public", "return": "", "signature": " WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "full_signature": "public  WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "class_method_signature": "WebConfigurer.WebConfigurer(Environment env, JHipsterProperties jHipsterProperties, HazelcastInstance hazelcastInstance)", "testcase": false, "constructor": true}, {"identifier": "onStartup", "parameters": "(ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(ServletContext servletContext)", "full_signature": "@Override public void onStartup(ServletContext servletContext)", "class_method_signature": "WebConfigurer.onStartup(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "customize", "parameters": "(ConfigurableEmbeddedServletContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void customize(ConfigurableEmbeddedServletContainer container)", "full_signature": "@Override public void customize(ConfigurableEmbeddedServletContainer container)", "class_method_signature": "WebConfigurer.customize(ConfigurableEmbeddedServletContainer container)", "testcase": false, "constructor": false}, {"identifier": "initMetrics", "parameters": "(ServletContext servletContext, EnumSet<DispatcherType> disps)", "modifiers": "private", "return": "void", "signature": "void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "full_signature": "private void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "class_method_signature": "WebConfigurer.initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps)", "testcase": false, "constructor": false}, {"identifier": "corsFilter", "parameters": "()", "modifiers": "@Bean public", "return": "CorsFilter", "signature": "CorsFilter corsFilter()", "full_signature": "@Bean public CorsFilter corsFilter()", "class_method_signature": "WebConfigurer.corsFilter()", "testcase": false, "constructor": false}, {"identifier": "initH2Console", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "void", "signature": "void initH2Console(ServletContext servletContext)", "full_signature": "private void initH2Console(ServletContext servletContext)", "class_method_signature": "WebConfigurer.initH2Console(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "setMetricRegistry", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "@Autowired(required = false) public", "return": "void", "signature": "void setMetricRegistry(MetricRegistry metricRegistry)", "full_signature": "@Autowired(required = false) public void setMetricRegistry(MetricRegistry metricRegistry)", "class_method_signature": "WebConfigurer.setMetricRegistry(MetricRegistry metricRegistry)", "testcase": false, "constructor": false}], "file": "gamecraft-pipeline-manager/src/main/java/com/gamecraft/config/WebConfigurer.java"}, "focal_method": {"identifier": "corsFilter", "parameters": "()", "modifiers": "@Bean public", "return": "CorsFilter", "body": "@Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = jHipsterProperties.getCors();\n        if (config.getAllowedOrigins() != null && !config.getAllowedOrigins().isEmpty()) {\n            log.debug(\"Registering CORS filter\");\n            source.registerCorsConfiguration(\"/api/**\", config);\n            source.registerCorsConfiguration(\"/management/**\", config);\n            source.registerCorsConfiguration(\"/v2/api-docs\", config);\n        }\n        return new CorsFilter(source);\n    }", "signature": "CorsFilter corsFilter()", "full_signature": "@Bean public CorsFilter corsFilter()", "class_method_signature": "WebConfigurer.corsFilter()", "testcase": false, "constructor": false, "invocations": ["getCors", "getAllowedOrigins", "isEmpty", "getAllowedOrigins", "debug", "registerCorsConfiguration", "registerCorsConfiguration", "registerCorsConfiguration"]}, "repository": {"repo_id": 106404296, "url": "https://github.com/iMartinezMateu/gamecraft", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 2528, "license": "licensed"}}