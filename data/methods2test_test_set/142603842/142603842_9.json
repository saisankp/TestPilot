{"test_class": {"identifier": "ChangeVehicleCapacityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScoreDirector<VehicleRoutingSolution> scoreDirector;", "modifier": "@Mock\n    private", "type": "ScoreDirector<VehicleRoutingSolution>", "declarator": "scoreDirector", "var_name": "scoreDirector"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/change/ChangeVehicleCapacityTest.java"}, "test_case": {"identifier": "fail_fast_if_working_object_is_null", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void fail_fast_if_working_object_is_null() {\n        ChangeVehicleCapacity changeVehicleCapacity = new ChangeVehicleCapacity(PlanningVehicleFactory.testVehicle(1));\n        assertThatIllegalStateException()\n                .isThrownBy(() -> changeVehicleCapacity.doChange(scoreDirector))\n                .withMessageContaining(\"working copy of\");\n    }", "signature": "void fail_fast_if_working_object_is_null()", "full_signature": "@Test void fail_fast_if_working_object_is_null()", "class_method_signature": "ChangeVehicleCapacityTest.fail_fast_if_working_object_is_null()", "testcase": true, "constructor": false, "invocations": ["testVehicle", "withMessageContaining", "isThrownBy", "assertThatIllegalStateException", "doChange"]}, "focal_class": {"identifier": "ChangeVehicleCapacity", "superclass": "", "interfaces": "implements ProblemFactChange<VehicleRoutingSolution>", "fields": [{"original_string": "private final PlanningVehicle vehicle;", "modifier": "private final", "type": "PlanningVehicle", "declarator": "vehicle", "var_name": "vehicle"}], "methods": [{"identifier": "ChangeVehicleCapacity", "parameters": "(PlanningVehicle vehicle)", "modifiers": "public", "return": "", "signature": " ChangeVehicleCapacity(PlanningVehicle vehicle)", "full_signature": "public  ChangeVehicleCapacity(PlanningVehicle vehicle)", "class_method_signature": "ChangeVehicleCapacity.ChangeVehicleCapacity(PlanningVehicle vehicle)", "testcase": false, "constructor": true}, {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "ChangeVehicleCapacity.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/change/ChangeVehicleCapacity.java"}, "focal_method": {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector) {\n        PlanningVehicle workingVehicle = scoreDirector.lookUpWorkingObject(vehicle);\n        if (workingVehicle == null) {\n            throw new IllegalStateException(\"Can't look up a working copy of \" + vehicle);\n        }\n\n        // No need to clone the workingVehicle because it is a planning entity, so it is already planning-cloned.\n        // To learn more about problem fact changes, see:\n        // https://docs.jboss.org/optaplanner/release/latest/optaplanner-docs/html_single/#problemFactChangeExample\n\n        scoreDirector.beforeProblemPropertyChanged(workingVehicle);\n        workingVehicle.setCapacity(vehicle.getCapacity());\n        scoreDirector.afterProblemPropertyChanged(workingVehicle);\n\n        scoreDirector.triggerVariableListeners();\n    }", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "ChangeVehicleCapacity.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false, "invocations": ["lookUpWorkingObject", "beforeProblemPropertyChanged", "setCapacity", "getCapacity", "afterProblemPropertyChanged", "triggerVariableListeners"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}