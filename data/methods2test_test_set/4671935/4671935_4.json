{"test_class": {"identifier": "LaserSearchTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/lasers/LaserSearchTest.java"}, "test_case": {"identifier": "matchLaser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void matchLaser() {\n        final LaserProfile laser = new LaserProfile(\"lid\", \"uid\", \"LaserName\", true, 0.0, 1.0, 2.0, \"test\", null);\n        assertTrue(LaserSearch.matchLaser(laser, \"\"));\n        assertTrue(LaserSearch.matchLaser(laser, \" \"));\n        assertFalse(LaserSearch.matchLaser(laser, \"BASE\"));\n        assertFalse(LaserSearch.matchLaser(laser, \"Skydive\"));\n        assertTrue(LaserSearch.matchLaser(laser, \"LaserNa\"));\n        assertTrue(LaserSearch.matchLaser(laser, \"LaserName\"));\n        assertTrue(LaserSearch.matchLaser(laser, \"laser name\"));\n        assertTrue(LaserSearch.matchLaser(laser, \"la na\"));\n        assertFalse(LaserSearch.matchLaser(laser, \"laz\"));\n    }", "signature": "void matchLaser()", "full_signature": "@Test public void matchLaser()", "class_method_signature": "LaserSearchTest.matchLaser()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "matchLaser", "assertTrue", "matchLaser", "assertFalse", "matchLaser", "assertFalse", "matchLaser", "assertTrue", "matchLaser", "assertTrue", "matchLaser", "assertTrue", "matchLaser", "assertTrue", "matchLaser", "assertFalse", "matchLaser"]}, "focal_class": {"identifier": "LaserSearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "matchLaser", "parameters": "(@NonNull LaserProfile laser, @NonNull String filter)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "full_signature": "public static boolean matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "class_method_signature": "LaserSearch.matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/lasers/LaserSearch.java"}, "focal_method": {"identifier": "matchLaser", "parameters": "(@NonNull LaserProfile laser, @NonNull String filter)", "modifiers": "public static", "return": "boolean", "body": "public static boolean matchLaser(@NonNull LaserProfile laser, @NonNull String filter) {\n        // Make a lower case super string of all properties we want to search\n        final StringBuilder sb = new StringBuilder();\n        sb.append(laser.name);\n        sb.append(' ');\n        if (laser.place != null) {\n            sb.append(laser.place.name);\n            sb.append(' ');\n            sb.append(laser.place.region);\n            sb.append(' ');\n            sb.append(laser.place.country);\n        }\n        final String superString = sb.toString().toLowerCase();\n        // Break into tokens\n        for (String token : filter.toLowerCase().split(\" \")) {\n            if (!superString.contains(token)) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "full_signature": "public static boolean matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "class_method_signature": "LaserSearch.matchLaser(@NonNull LaserProfile laser, @NonNull String filter)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "toLowerCase", "toString", "split", "toLowerCase", "contains"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}