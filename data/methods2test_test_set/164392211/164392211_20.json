{"test_class": {"identifier": "OffsetLagSeriesTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/series/OffsetLagSeriesTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n\n        Series<String> s = new OffsetLagSeries<>(Series.forData(\"a\", \"b\", \"c\", \"d\"), -1, \"X\");\n\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> s.get(-1));\n        assertEquals(\"b\", s.get(0));\n        assertEquals(\"c\", s.get(1));\n        assertEquals(\"d\", s.get(2));\n        assertEquals(\"X\", s.get(3));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> s.get(4));\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "OffsetLagSeriesTest.testGet()", "testcase": true, "constructor": false, "invocations": ["forData", "assertThrows", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertThrows", "get"]}, "focal_class": {"identifier": "OffsetLagSeries", "superclass": "extends OffsetSeries<T>", "interfaces": "", "fields": [{"original_string": "private final int offset;", "modifier": "private final", "type": "int", "declarator": "offset", "var_name": "offset"}], "methods": [{"identifier": "OffsetLagSeries", "parameters": "(Series<T> delegate, int offset, T filler)", "modifiers": "public", "return": "", "signature": " OffsetLagSeries(Series<T> delegate, int offset, T filler)", "full_signature": "public  OffsetLagSeries(Series<T> delegate, int offset, T filler)", "class_method_signature": "OffsetLagSeries.OffsetLagSeries(Series<T> delegate, int offset, T filler)", "testcase": false, "constructor": true}, {"identifier": "shift", "parameters": "(int offset, T filler)", "modifiers": "@Override public", "return": "Series<T>", "signature": "Series<T> shift(int offset, T filler)", "full_signature": "@Override public Series<T> shift(int offset, T filler)", "class_method_signature": "OffsetLagSeries.shift(int offset, T filler)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "T", "signature": "T get(int index)", "full_signature": "@Override public T get(int index)", "class_method_signature": "OffsetLagSeries.get(int index)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(Object[] to, int fromOffset, int toOffset, int len)", "modifiers": "@Override public", "return": "void", "signature": "void copyTo(Object[] to, int fromOffset, int toOffset, int len)", "full_signature": "@Override public void copyTo(Object[] to, int fromOffset, int toOffset, int len)", "class_method_signature": "OffsetLagSeries.copyTo(Object[] to, int fromOffset, int toOffset, int len)", "testcase": false, "constructor": false}, {"identifier": "materialize", "parameters": "()", "modifiers": "@Override public", "return": "Series<T>", "signature": "Series<T> materialize()", "full_signature": "@Override public Series<T> materialize()", "class_method_signature": "OffsetLagSeries.materialize()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/series/OffsetLagSeries.java"}, "focal_method": {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T get(int index) {\n        int size = size();\n\n        if (index >= size || index < 0) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n\n        return index < size + offset ? delegate.get(index - offset) : filler;\n    }", "signature": "T get(int index)", "full_signature": "@Override public T get(int index)", "class_method_signature": "OffsetLagSeries.get(int index)", "testcase": false, "constructor": false, "invocations": ["size", "get"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}