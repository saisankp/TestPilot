{"test_class": {"identifier": "DefaultMetadataVersionServiceTest", "superclass": "extends DhisSpringTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MetadataVersionService versionService;", "modifier": "@Autowired\n    private", "type": "MetadataVersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private MetadataKeyJsonService metaDataKeyJsonService;", "modifier": "@Autowired\n    private", "type": "MetadataKeyJsonService", "declarator": "metaDataKeyJsonService", "var_name": "metaDataKeyJsonService"}, {"original_string": "@Autowired\n    private IdentifiableObjectManager manager;", "modifier": "@Autowired\n    private", "type": "IdentifiableObjectManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Autowired\n    private MetadataSystemSettingService metadataSystemSettingService;", "modifier": "@Autowired\n    private", "type": "MetadataSystemSettingService", "declarator": "metadataSystemSettingService", "var_name": "metadataSystemSettingService"}, {"original_string": "private MetadataVersion versionA;", "modifier": "private", "type": "MetadataVersion", "declarator": "versionA", "var_name": "versionA"}, {"original_string": "private MetadataVersion versionB;", "modifier": "private", "type": "MetadataVersion", "declarator": "versionB", "var_name": "versionB"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/version/DefaultMetadataVersionServiceTest.java"}, "test_case": {"identifier": "testShouldThrowMetadataVersionServiceExceptionWhenSnapshotIsNull", "parameters": "()", "modifiers": "@Test( expected = MetadataVersionServiceException.class ) public", "return": "void", "body": "@Test( expected = MetadataVersionServiceException.class )\n    public void testShouldThrowMetadataVersionServiceExceptionWhenSnapshotIsNull()\n    {\n        versionService.createMetadataVersionInDataStore( \"myVersion\", null );\n    }", "signature": "void testShouldThrowMetadataVersionServiceExceptionWhenSnapshotIsNull()", "full_signature": "@Test( expected = MetadataVersionServiceException.class ) public void testShouldThrowMetadataVersionServiceExceptionWhenSnapshotIsNull()", "class_method_signature": "DefaultMetadataVersionServiceTest.testShouldThrowMetadataVersionServiceExceptionWhenSnapshotIsNull()", "testcase": true, "constructor": false, "invocations": ["createMetadataVersionInDataStore"]}, "focal_class": {"identifier": "DefaultMetadataVersionService", "superclass": "", "interfaces": "implements MetadataVersionService", "fields": [{"original_string": "private final MetadataVersionStore versionStore;", "modifier": "private final", "type": "MetadataVersionStore", "declarator": "versionStore", "var_name": "versionStore"}, {"original_string": "private final MetadataExportService metadataExportService;", "modifier": "private final", "type": "MetadataExportService", "declarator": "metadataExportService", "var_name": "metadataExportService"}, {"original_string": "private final MetadataKeyJsonService metaDataKeyJsonService;", "modifier": "private final", "type": "MetadataKeyJsonService", "declarator": "metaDataKeyJsonService", "var_name": "metaDataKeyJsonService"}, {"original_string": "private final NodeService nodeService;", "modifier": "private final", "type": "NodeService", "declarator": "nodeService", "var_name": "nodeService"}, {"original_string": "private final MetadataSystemSettingService metadataSystemSettingService;", "modifier": "private final", "type": "MetadataSystemSettingService", "declarator": "metadataSystemSettingService", "var_name": "metadataSystemSettingService"}, {"original_string": "private final RenderService renderService;", "modifier": "private final", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}], "methods": [{"identifier": "DefaultMetadataVersionService", "parameters": "( MetadataVersionStore metadataVersionStore,\n        MetadataExportService metadataExportService, MetadataKeyJsonService metaDataKeyJsonService,\n        NodeService nodeService, MetadataSystemSettingService metadataSystemSettingService,\n        RenderService renderService )", "modifiers": "public", "return": "", "signature": " DefaultMetadataVersionService( MetadataVersionStore metadataVersionStore,\n        MetadataExportService metadataExportService, MetadataKeyJsonService metaDataKeyJsonService,\n        NodeService nodeService, MetadataSystemSettingService metadataSystemSettingService,\n        RenderService renderService )", "full_signature": "public  DefaultMetadataVersionService( MetadataVersionStore metadataVersionStore,\n        MetadataExportService metadataExportService, MetadataKeyJsonService metaDataKeyJsonService,\n        NodeService nodeService, MetadataSystemSettingService metadataSystemSettingService,\n        RenderService renderService )", "class_method_signature": "DefaultMetadataVersionService.DefaultMetadataVersionService( MetadataVersionStore metadataVersionStore,\n        MetadataExportService metadataExportService, MetadataKeyJsonService metaDataKeyJsonService,\n        NodeService nodeService, MetadataSystemSettingService metadataSystemSettingService,\n        RenderService renderService )", "testcase": false, "constructor": true}, {"identifier": "addVersion", "parameters": "( MetadataVersion version )", "modifiers": "@Override @Transactional public", "return": "long", "signature": "long addVersion( MetadataVersion version )", "full_signature": "@Override @Transactional public long addVersion( MetadataVersion version )", "class_method_signature": "DefaultMetadataVersionService.addVersion( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "updateVersion", "parameters": "( MetadataVersion version )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void updateVersion( MetadataVersion version )", "full_signature": "@Override @Transactional public void updateVersion( MetadataVersion version )", "class_method_signature": "DefaultMetadataVersionService.updateVersion( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "updateVersionName", "parameters": "( long id, String name )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void updateVersionName( long id, String name )", "full_signature": "@Override @Transactional public void updateVersionName( long id, String name )", "class_method_signature": "DefaultMetadataVersionService.updateVersionName( long id, String name )", "testcase": false, "constructor": false}, {"identifier": "deleteVersion", "parameters": "( MetadataVersion version )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void deleteVersion( MetadataVersion version )", "full_signature": "@Override @Transactional public void deleteVersion( MetadataVersion version )", "class_method_signature": "DefaultMetadataVersionService.deleteVersion( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getVersionById", "parameters": "( long id )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "MetadataVersion", "signature": "MetadataVersion getVersionById( long id )", "full_signature": "@Override @Transactional( readOnly = true ) public MetadataVersion getVersionById( long id )", "class_method_signature": "DefaultMetadataVersionService.getVersionById( long id )", "testcase": false, "constructor": false}, {"identifier": "getVersionByName", "parameters": "( String versionName )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "MetadataVersion", "signature": "MetadataVersion getVersionByName( String versionName )", "full_signature": "@Override @Transactional( readOnly = true ) public MetadataVersion getVersionByName( String versionName )", "class_method_signature": "DefaultMetadataVersionService.getVersionByName( String versionName )", "testcase": false, "constructor": false}, {"identifier": "getAllVersions", "parameters": "()", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "List<MetadataVersion>", "signature": "List<MetadataVersion> getAllVersions()", "full_signature": "@Override @Transactional( readOnly = true ) public List<MetadataVersion> getAllVersions()", "class_method_signature": "DefaultMetadataVersionService.getAllVersions()", "testcase": false, "constructor": false}, {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "MetadataVersion", "signature": "MetadataVersion getCurrentVersion()", "full_signature": "@Override @Transactional( readOnly = true ) public MetadataVersion getCurrentVersion()", "class_method_signature": "DefaultMetadataVersionService.getCurrentVersion()", "testcase": false, "constructor": false}, {"identifier": "getInitialVersion", "parameters": "()", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "MetadataVersion", "signature": "MetadataVersion getInitialVersion()", "full_signature": "@Override @Transactional( readOnly = true ) public MetadataVersion getInitialVersion()", "class_method_signature": "DefaultMetadataVersionService.getInitialVersion()", "testcase": false, "constructor": false}, {"identifier": "getAllVersionsInBetween", "parameters": "( Date startDate, Date endDate )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "List<MetadataVersion>", "signature": "List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "full_signature": "@Override @Transactional( readOnly = true ) public List<MetadataVersion> getAllVersionsInBetween( Date startDate, Date endDate )", "class_method_signature": "DefaultMetadataVersionService.getAllVersionsInBetween( Date startDate, Date endDate )", "testcase": false, "constructor": false}, {"identifier": "getCreatedDate", "parameters": "( String versionName )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "Date", "signature": "Date getCreatedDate( String versionName )", "full_signature": "@Override @Transactional( readOnly = true ) public Date getCreatedDate( String versionName )", "class_method_signature": "DefaultMetadataVersionService.getCreatedDate( String versionName )", "testcase": false, "constructor": false}, {"identifier": "saveVersion", "parameters": "( VersionType versionType )", "modifiers": "@Override @Transactional public synchronized", "return": "boolean", "signature": "boolean saveVersion( VersionType versionType )", "full_signature": "@Override @Transactional public synchronized boolean saveVersion( VersionType versionType )", "class_method_signature": "DefaultMetadataVersionService.saveVersion( VersionType versionType )", "testcase": false, "constructor": false}, {"identifier": "getVersionData", "parameters": "( String versionName )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "String", "signature": "String getVersionData( String versionName )", "full_signature": "@Override @Transactional( readOnly = true ) public String getVersionData( String versionName )", "class_method_signature": "DefaultMetadataVersionService.getVersionData( String versionName )", "testcase": false, "constructor": false}, {"identifier": "createMetadataVersionInDataStore", "parameters": "( String versionName, String versionSnapshot )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "full_signature": "@Override @Transactional public void createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "class_method_signature": "DefaultMetadataVersionService.createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "testcase": false, "constructor": false}, {"identifier": "deleteMetadataVersionInDataStore", "parameters": "( String nameSpaceKey )", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void deleteMetadataVersionInDataStore( String nameSpaceKey )", "full_signature": "@Override @Transactional public void deleteMetadataVersionInDataStore( String nameSpaceKey )", "class_method_signature": "DefaultMetadataVersionService.deleteMetadataVersionInDataStore( String nameSpaceKey )", "testcase": false, "constructor": false}, {"identifier": "isMetadataPassingIntegrity", "parameters": "( MetadataVersion version, String versionSnapshot )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMetadataPassingIntegrity( MetadataVersion version, String versionSnapshot )", "full_signature": "@Override public boolean isMetadataPassingIntegrity( MetadataVersion version, String versionSnapshot )", "class_method_signature": "DefaultMetadataVersionService.isMetadataPassingIntegrity( MetadataVersion version, String versionSnapshot )", "testcase": false, "constructor": false}, {"identifier": "getMetadataExport", "parameters": "( Date minDate )", "modifiers": "private", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream getMetadataExport( Date minDate )", "full_signature": "private ByteArrayOutputStream getMetadataExport( Date minDate )", "class_method_signature": "DefaultMetadataVersionService.getMetadataExport( Date minDate )", "testcase": false, "constructor": false}, {"identifier": "getBodyAsString", "parameters": "( Charset charset, ByteArrayOutputStream os )", "modifiers": "private", "return": "String", "signature": "String getBodyAsString( Charset charset, ByteArrayOutputStream os )", "full_signature": "private String getBodyAsString( Charset charset, ByteArrayOutputStream os )", "class_method_signature": "DefaultMetadataVersionService.getBodyAsString( Charset charset, ByteArrayOutputStream os )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/version/DefaultMetadataVersionService.java"}, "focal_method": {"identifier": "createMetadataVersionInDataStore", "parameters": "( String versionName, String versionSnapshot )", "modifiers": "@Override @Transactional public", "return": "void", "body": "@Override\n    @Transactional\n    public void createMetadataVersionInDataStore( String versionName, String versionSnapshot )\n    {\n        if ( StringUtils.isEmpty( versionSnapshot ) )\n        {\n            throw new MetadataVersionServiceException( \"The Metadata Snapshot is null while trying to create a Metadata Version entry in DataStore.\" );\n        }\n\n        KeyJsonValue keyJsonValue = new KeyJsonValue();\n        keyJsonValue.setKey( versionName );\n        keyJsonValue.setNamespace( MetadataVersionService.METADATASTORE );\n\n        //MetadataWrapper is used to avoid Metadata keys reordering by jsonb (jsonb does not preserve keys order)\n        keyJsonValue.setValue( renderService.toJsonAsString( new MetadataWrapper( versionSnapshot ) ) );\n\n        try\n        {\n            metaDataKeyJsonService.addMetaDataKeyJsonValue( keyJsonValue );\n\n        }\n        catch ( Exception ex )\n        {\n            String message = \"Exception occurred while saving the Metadata snapshot in Data Store\" + ex.getMessage();\n            log.error( message, ex );\n            throw new MetadataVersionServiceException( message, ex );\n        }\n    }", "signature": "void createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "full_signature": "@Override @Transactional public void createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "class_method_signature": "DefaultMetadataVersionService.createMetadataVersionInDataStore( String versionName, String versionSnapshot )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "setKey", "setNamespace", "setValue", "toJsonAsString", "addMetaDataKeyJsonValue", "getMessage", "error"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}