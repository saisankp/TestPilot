{"test_class": {"identifier": "NetworkDataProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NetworkActionProvider networkActionProvider;", "modifier": "private", "type": "NetworkActionProvider", "declarator": "networkActionProvider", "var_name": "networkActionProvider"}, {"original_string": "@Mock private ServerSearchManager mockServerSearchManager;", "modifier": "@Mock private", "type": "ServerSearchManager", "declarator": "mockServerSearchManager", "var_name": "mockServerSearchManager"}, {"original_string": "@Mock private ServerEntityDataMapper mockServerEntityDataMapper;", "modifier": "@Mock private", "type": "ServerEntityDataMapper", "declarator": "mockServerEntityDataMapper", "var_name": "mockServerEntityDataMapper"}, {"original_string": "@Mock private NetworkAddressEntityDataMapper mockNetworkAddressEntityDataMapper;", "modifier": "@Mock private", "type": "NetworkAddressEntityDataMapper", "declarator": "mockNetworkAddressEntityDataMapper", "var_name": "mockNetworkAddressEntityDataMapper"}], "file": "infrastructure/src/test/java/com/remotecraft/app/infrastructure/provider/NetworkDataProviderTest.java"}, "test_case": {"identifier": "shouldReturnValidServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnValidServer() throws Exception {\n    ServerEntity serverEntity = getServerEntity();\n    Server server = getServer();\n    Observable<ServerEntity> observable = Observable.create(subscriber -> {\n      subscriber.onNext(serverEntity);\n      subscriber.onComplete();\n    });\n    when(mockServerSearchManager.searchServer()).thenReturn(observable);\n    when(mockServerEntityDataMapper.transform(serverEntity)).thenReturn(server);\n\n    Observable<Server> serverObservable = networkActionProvider.searchServer();\n\n    TestObserver<Server> testObserver = serverObservable.test();\n    testObserver.assertNoErrors();\n    testObserver.assertComplete();\n    testObserver.assertResult(server);\n    verify(mockServerSearchManager, times(1)).searchServer();\n    verify(mockServerEntityDataMapper, times(1)).transform(serverEntity);\n    verifyNoMoreInteractions(mockServerSearchManager, mockServerEntityDataMapper);\n  }", "signature": "void shouldReturnValidServer()", "full_signature": "@Test public void shouldReturnValidServer()", "class_method_signature": "NetworkDataProviderTest.shouldReturnValidServer()", "testcase": true, "constructor": false, "invocations": ["getServerEntity", "getServer", "create", "onNext", "onComplete", "thenReturn", "when", "searchServer", "thenReturn", "when", "transform", "searchServer", "test", "assertNoErrors", "assertComplete", "assertResult", "searchServer", "verify", "times", "transform", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "NetworkDataProvider", "superclass": "", "interfaces": "implements NetworkActionProvider", "fields": [{"original_string": "@Inject Context context;", "modifier": "@Inject", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final ServerSearchManager serverSearchManager;", "modifier": "private final", "type": "ServerSearchManager", "declarator": "serverSearchManager", "var_name": "serverSearchManager"}, {"original_string": "private final ServerEntityDataMapper serverEntityDataMapper;", "modifier": "private final", "type": "ServerEntityDataMapper", "declarator": "serverEntityDataMapper", "var_name": "serverEntityDataMapper"}, {"original_string": "private final NetworkAddressEntityDataMapper networkAddressEntityDataMapper;", "modifier": "private final", "type": "NetworkAddressEntityDataMapper", "declarator": "networkAddressEntityDataMapper", "var_name": "networkAddressEntityDataMapper"}], "methods": [{"identifier": "NetworkDataProvider", "parameters": "(ServerSearchManager serverSearchManager,\n      ServerEntityDataMapper serverEntityDataMapper,\n      NetworkAddressEntityDataMapper networkAddressEntityDataMapper)", "modifiers": "@Inject public", "return": "", "signature": " NetworkDataProvider(ServerSearchManager serverSearchManager,\n      ServerEntityDataMapper serverEntityDataMapper,\n      NetworkAddressEntityDataMapper networkAddressEntityDataMapper)", "full_signature": "@Inject public  NetworkDataProvider(ServerSearchManager serverSearchManager,\n      ServerEntityDataMapper serverEntityDataMapper,\n      NetworkAddressEntityDataMapper networkAddressEntityDataMapper)", "class_method_signature": "NetworkDataProvider.NetworkDataProvider(ServerSearchManager serverSearchManager,\n      ServerEntityDataMapper serverEntityDataMapper,\n      NetworkAddressEntityDataMapper networkAddressEntityDataMapper)", "testcase": false, "constructor": true}, {"identifier": "searchServer", "parameters": "()", "modifiers": "@Override public", "return": "Observable<Server>", "signature": "Observable<Server> searchServer()", "full_signature": "@Override public Observable<Server> searchServer()", "class_method_signature": "NetworkDataProvider.searchServer()", "testcase": false, "constructor": false}, {"identifier": "searchServer", "parameters": "(NetworkAddress networkAddress)", "modifiers": "@Override public", "return": "Observable<Server>", "signature": "Observable<Server> searchServer(NetworkAddress networkAddress)", "full_signature": "@Override public Observable<Server> searchServer(NetworkAddress networkAddress)", "class_method_signature": "NetworkDataProvider.searchServer(NetworkAddress networkAddress)", "testcase": false, "constructor": false}], "file": "infrastructure/src/main/java/com/remotecraft/app/infrastructure/provider/NetworkDataProvider.java"}, "focal_method": {"identifier": "searchServer", "parameters": "()", "modifiers": "@Override public", "return": "Observable<Server>", "body": "@Override\n  public Observable<Server> searchServer() {\n    return serverSearchManager.searchServer().map(serverEntityDataMapper::transform);\n  }", "signature": "Observable<Server> searchServer()", "full_signature": "@Override public Observable<Server> searchServer()", "class_method_signature": "NetworkDataProvider.searchServer()", "testcase": false, "constructor": false, "invocations": ["map", "searchServer"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}