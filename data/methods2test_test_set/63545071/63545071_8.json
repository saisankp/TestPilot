{"test_class": {"identifier": "RCLJavaTest", "superclass": "extends AbstractRosTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RCLJavaTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RCLJavaTest.class)", "var_name": "logger"}, {"original_string": "public static final String TEST_TOPIC = \"_test_topic\";", "modifier": "public static final", "type": "String", "declarator": "TEST_TOPIC = \"_test_topic\"", "var_name": "TEST_TOPIC"}, {"original_string": "public static final String ERROR_RUNTIME = \"Expected Runtime error.\";", "modifier": "public static final", "type": "String", "declarator": "ERROR_RUNTIME = \"Expected Runtime error.\"", "var_name": "ERROR_RUNTIME"}], "file": "rcljava/src/test/java/org/ros2/rcljava/RCLJavaTest.java"}, "test_case": {"identifier": "testSpinOnce", "parameters": "()", "modifiers": "@Test @Ignore public final", "return": "void", "body": "@Test\n    @Ignore\n    public final void testSpinOnce() {\n        logger.debug(new Object(){}.getClass().getEnclosingMethod().getName());\n\n        boolean test = true;\n\n        try {\n            this.initRCLjava();\n            final Node node = RCLJava.createNode(\"_\" + RCLJavaTest.class.getSimpleName());\n            final Publisher<Bool> publisher = node.createPublisher(Bool.class, RCLJavaTest.TEST_TOPIC);\n\n            final Bool msg = new Bool();\n            msg.setData(true);\n\n            final RCLFuture<Bool> future = new RCLFuture<Bool>(new WeakReference<Node>(node));\n            final Subscription<Bool> subscription = node.createSubscription(\n                    Bool.class, RCLJavaTest.TEST_TOPIC, new TestConsumer<Bool>(future));\n\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    RCLJava.spinOnce(node);\n                }\n            }).start();\n\n            while (RCLJava.ok() && !future.isDone()) {\n                publisher.publish(msg);\n            }\n\n            final Bool value = future.get();\n            Assert.assertNotNull(value);\n\n            publisher.dispose();\n            subscription.dispose();\n\n            node.dispose();\n            this.releaseRCLjava();\n        } catch (Exception e) {\n            test = false;\n        }\n\n        Assert.assertTrue(ERROR_RUNTIME, test);\n    }", "signature": "void testSpinOnce()", "full_signature": "@Test @Ignore public final void testSpinOnce()", "class_method_signature": "RCLJavaTest.testSpinOnce()", "testcase": true, "constructor": false, "invocations": ["debug", "getName", "getEnclosingMethod", "getClass", "initRCLjava", "createNode", "getSimpleName", "createPublisher", "setData", "createSubscription", "start", "spinOnce", "ok", "isDone", "publish", "get", "assertNotNull", "dispose", "dispose", "dispose", "releaseRCLjava", "assertTrue"]}, "focal_class": {"identifier": "RCLJava", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RCLJava.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RCLJava.class)", "var_name": "logger"}, {"original_string": "private static final String DISPLAY_SEPARATOR =\n            \"===============================================================\";", "modifier": "private static final", "type": "String", "declarator": "DISPLAY_SEPARATOR =\n            \"===============================================================\"", "var_name": "DISPLAY_SEPARATOR"}, {"original_string": "private static String rmwImplementation;", "modifier": "private static", "type": "String", "declarator": "rmwImplementation", "var_name": "rmwImplementation"}, {"original_string": "private static volatile boolean initialized = false;", "modifier": "private static volatile", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private static String[] arguments;", "modifier": "private static", "type": "String[]", "declarator": "arguments", "var_name": "arguments"}, {"original_string": "private static final ConcurrentMap<String, String> RMW_TO_TYPESUPPORT = new ConcurrentSkipListMap<String, String>() {\n        /** Serial Id */\n        private static final long serialVersionUID = 1L;\n\n        {\n            put(\"rmw_fastrtps_cpp\",         \"rosidl_typesupport_introspection_c\");\n\n            // DISABLE multi-rmw.\n//            put(\"rmw_opensplice_cpp\",       \"rosidl_typesupport_opensplice_c\");\n//            put(\"rmw_connext_cpp\",          \"rosidl_typesupport_connext_c\");\n//            put(\"rmw_connext_dynamic_cpp\",  \"rosidl_typesupport_introspection_c\");\n        }\n    };", "modifier": "private static final", "type": "ConcurrentMap<String, String>", "declarator": "RMW_TO_TYPESUPPORT = new ConcurrentSkipListMap<String, String>() {\n        /** Serial Id */\n        private static final long serialVersionUID = 1L;\n\n        {\n            put(\"rmw_fastrtps_cpp\",         \"rosidl_typesupport_introspection_c\");\n\n            // DISABLE multi-rmw.\n//            put(\"rmw_opensplice_cpp\",       \"rosidl_typesupport_opensplice_c\");\n//            put(\"rmw_connext_cpp\",          \"rosidl_typesupport_connext_c\");\n//            put(\"rmw_connext_dynamic_cpp\",  \"rosidl_typesupport_introspection_c\");\n        }\n    }", "var_name": "RMW_TO_TYPESUPPORT"}], "methods": [{"identifier": "nativeRCLJavaInit", "parameters": "(String... args)", "modifiers": "private static native", "return": "void", "signature": "void nativeRCLJavaInit(String... args)", "full_signature": "private static native void nativeRCLJavaInit(String... args)", "class_method_signature": "RCLJava.nativeRCLJavaInit(String... args)", "testcase": false, "constructor": false}, {"identifier": "nativeShutdown", "parameters": "()", "modifiers": "private static native", "return": "void", "signature": "void nativeShutdown()", "full_signature": "private static native void nativeShutdown()", "class_method_signature": "RCLJava.nativeShutdown()", "testcase": false, "constructor": false}, {"identifier": "nativeOk", "parameters": "()", "modifiers": "private static native", "return": "boolean", "signature": "boolean nativeOk()", "full_signature": "private static native boolean nativeOk()", "class_method_signature": "RCLJava.nativeOk()", "testcase": false, "constructor": false}, {"identifier": "nativeGetRMWIdentifier", "parameters": "()", "modifiers": "private static native", "return": "String", "signature": "String nativeGetRMWIdentifier()", "full_signature": "private static native String nativeGetRMWIdentifier()", "class_method_signature": "RCLJava.nativeGetRMWIdentifier()", "testcase": false, "constructor": false}, {"identifier": "nativeConvertQoSProfileToHandle", "parameters": "(\n            int history, int depth, int reliability, int durability, boolean avoidRos)", "modifiers": "private static native", "return": "long", "signature": "long nativeConvertQoSProfileToHandle(\n            int history, int depth, int reliability, int durability, boolean avoidRos)", "full_signature": "private static native long nativeConvertQoSProfileToHandle(\n            int history, int depth, int reliability, int durability, boolean avoidRos)", "class_method_signature": "RCLJava.nativeConvertQoSProfileToHandle(\n            int history, int depth, int reliability, int durability, boolean avoidRos)", "testcase": false, "constructor": false}, {"identifier": "nativeDisposeQoSProfile", "parameters": "(\n            long qosProfileHandle)", "modifiers": "private static native", "return": "void", "signature": "void nativeDisposeQoSProfile(\n            long qosProfileHandle)", "full_signature": "private static native void nativeDisposeQoSProfile(\n            long qosProfileHandle)", "class_method_signature": "RCLJava.nativeDisposeQoSProfile(\n            long qosProfileHandle)", "testcase": false, "constructor": false}, {"identifier": "RCLJava", "parameters": "()", "modifiers": "private", "return": "", "signature": " RCLJava()", "full_signature": "private  RCLJava()", "class_method_signature": "RCLJava.RCLJava()", "testcase": false, "constructor": true}, {"identifier": "getRmwImplementationSuffix", "parameters": "(final String rmwImplementation)", "modifiers": "private static", "return": "String", "signature": "String getRmwImplementationSuffix(final String rmwImplementation)", "full_signature": "private static String getRmwImplementationSuffix(final String rmwImplementation)", "class_method_signature": "RCLJava.getRmwImplementationSuffix(final String rmwImplementation)", "testcase": false, "constructor": false}, {"identifier": "displayContext", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void displayContext()", "full_signature": "private static void displayContext()", "class_method_signature": "RCLJava.displayContext()", "testcase": false, "constructor": false}, {"identifier": "displayReport", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void displayReport()", "full_signature": "private static void displayReport()", "class_method_signature": "RCLJava.displayReport()", "testcase": false, "constructor": false}, {"identifier": "rclJavaInit", "parameters": "(final String... args)", "modifiers": "public static", "return": "void", "signature": "void rclJavaInit(final String... args)", "full_signature": "public static void rclJavaInit(final String... args)", "class_method_signature": "RCLJava.rclJavaInit(final String... args)", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "public static boolean isInitialized()", "class_method_signature": "RCLJava.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String defaultName)", "modifiers": "public static", "return": "Node", "signature": "Node createNode(final String defaultName)", "full_signature": "public static Node createNode(final String defaultName)", "class_method_signature": "RCLJava.createNode(final String defaultName)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(final String namespace, final String defaultName)", "modifiers": "public static", "return": "Node", "signature": "Node createNode(final String namespace, final String defaultName)", "full_signature": "public static Node createNode(final String namespace, final String defaultName)", "class_method_signature": "RCLJava.createNode(final String namespace, final String defaultName)", "testcase": false, "constructor": false}, {"identifier": "spinOnce", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void spinOnce(final Node node)", "full_signature": "public static void spinOnce(final Node node)", "class_method_signature": "RCLJava.spinOnce(final Node node)", "testcase": false, "constructor": false}, {"identifier": "spin", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "signature": "void spin(final Node node)", "full_signature": "public static void spin(final Node node)", "class_method_signature": "RCLJava.spin(final Node node)", "testcase": false, "constructor": false}, {"identifier": "ok", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean ok()", "full_signature": "public static boolean ok()", "class_method_signature": "RCLJava.ok()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void shutdown()", "full_signature": "public static void shutdown()", "class_method_signature": "RCLJava.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(final boolean force)", "modifiers": "private static", "return": "void", "signature": "void shutdown(final boolean force)", "full_signature": "private static void shutdown(final boolean force)", "class_method_signature": "RCLJava.shutdown(final boolean force)", "testcase": false, "constructor": false}, {"identifier": "getRMWIdentifier", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getRMWIdentifier()", "full_signature": "public static String getRMWIdentifier()", "class_method_signature": "RCLJava.getRMWIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getTypesupportIdentifier", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getTypesupportIdentifier()", "full_signature": "public static String getTypesupportIdentifier()", "class_method_signature": "RCLJava.getTypesupportIdentifier()", "testcase": false, "constructor": false}, {"identifier": "setRMWImplementation", "parameters": "(final String rmwImplementation)", "modifiers": "@SuppressWarnings(\"PMD.AvoidUsingNativeCode\") public static", "return": "void", "signature": "void setRMWImplementation(final String rmwImplementation)", "full_signature": "@SuppressWarnings(\"PMD.AvoidUsingNativeCode\") public static void setRMWImplementation(final String rmwImplementation)", "class_method_signature": "RCLJava.setRMWImplementation(final String rmwImplementation)", "testcase": false, "constructor": false}, {"identifier": "loadLibrary", "parameters": "(final String name)", "modifiers": "@SuppressWarnings(\"PMD.AvoidUsingNativeCode\") public static", "return": "void", "signature": "void loadLibrary(final String name)", "full_signature": "@SuppressWarnings(\"PMD.AvoidUsingNativeCode\") public static void loadLibrary(final String name)", "class_method_signature": "RCLJava.loadLibrary(final String name)", "testcase": false, "constructor": false}, {"identifier": "autoLoadRmw", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void autoLoadRmw()", "full_signature": "private static void autoLoadRmw()", "class_method_signature": "RCLJava.autoLoadRmw()", "testcase": false, "constructor": false}, {"identifier": "shutdownHook", "parameters": "()", "modifiers": "protected static", "return": "void", "signature": "void shutdownHook()", "full_signature": "protected static void shutdownHook()", "class_method_signature": "RCLJava.shutdownHook()", "testcase": false, "constructor": false}, {"identifier": "lockAndCheckInitialized", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void lockAndCheckInitialized()", "full_signature": "private static void lockAndCheckInitialized()", "class_method_signature": "RCLJava.lockAndCheckInitialized()", "testcase": false, "constructor": false}, {"identifier": "convertQoSProfileToHandle", "parameters": "(final QoSProfile qosProfile)", "modifiers": "public static", "return": "long", "signature": "long convertQoSProfileToHandle(final QoSProfile qosProfile)", "full_signature": "public static long convertQoSProfileToHandle(final QoSProfile qosProfile)", "class_method_signature": "RCLJava.convertQoSProfileToHandle(final QoSProfile qosProfile)", "testcase": false, "constructor": false}, {"identifier": "disposeQoSProfile", "parameters": "(final long qosProfileHandle)", "modifiers": "public static", "return": "void", "signature": "void disposeQoSProfile(final long qosProfileHandle)", "full_signature": "public static void disposeQoSProfile(final long qosProfileHandle)", "class_method_signature": "RCLJava.disposeQoSProfile(final long qosProfileHandle)", "testcase": false, "constructor": false}], "file": "rcljava/src/main/java/org/ros2/rcljava/RCLJava.java"}, "focal_method": {"identifier": "spinOnce", "parameters": "(final Node node)", "modifiers": "public static", "return": "void", "body": "public static void spinOnce(final Node node) {\n        RCLJava.lockAndCheckInitialized();\n\n        DefaultThreadedExecutor.getInstance().spinNodeOnce(node, -1);\n    }", "signature": "void spinOnce(final Node node)", "full_signature": "public static void spinOnce(final Node node)", "class_method_signature": "RCLJava.spinOnce(final Node node)", "testcase": false, "constructor": false, "invocations": ["lockAndCheckInitialized", "spinNodeOnce", "getInstance"]}, "repository": {"repo_id": 63545071, "url": "https://github.com/ros2java-alfred/ros2_java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 1035, "license": "licensed"}}