{"test_class": {"identifier": "InductivePartialChargesTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static IAtomContainer mol;", "modifier": "private static", "type": "IAtomContainer", "declarator": "mol", "var_name": "mol"}], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/InductivePartialChargesTest.java"}, "test_case": {"identifier": "testGetPaulingElectronegativities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPaulingElectronegativities() throws Exception {\n        InductivePartialCharges ipc = new InductivePartialCharges();\n        double[] eneg = ipc.getPaulingElectronegativities(mol, true);\n        long[] expected = {};\n        Assert.assertEquals(\"Error in C electronegativity\", 2.20, eneg[0], 0.01);\n        Assert.assertEquals(\"Error in Cl electronegativity\", 3.28, eneg[1], 0.01);\n        Assert.assertEquals(\"Error in Br electronegativity\", 3.13, eneg[2], 0.01);\n        Assert.assertEquals(\"Error in H electronegativity\", 2.10, eneg[3], 0.01);\n        Assert.assertEquals(\"Error in O electronegativity\", 3.20, eneg[4], 0.01);\n    }", "signature": "void testGetPaulingElectronegativities()", "full_signature": "@Test public void testGetPaulingElectronegativities()", "class_method_signature": "InductivePartialChargesTest.testGetPaulingElectronegativities()", "testcase": true, "constructor": false, "invocations": ["getPaulingElectronegativities", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "InductivePartialCharges", "superclass": "", "interfaces": "implements IChargeCalculator", "fields": [{"original_string": "private static double[]     pauling;", "modifier": "private static", "type": "double[]", "declarator": "pauling", "var_name": "pauling"}, {"original_string": "private IsotopeFactory      ifac    = null;", "modifier": "private", "type": "IsotopeFactory", "declarator": "ifac    = null", "var_name": "ifac"}, {"original_string": "private AtomTypeFactory     factory = null;", "modifier": "private", "type": "AtomTypeFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private static ILoggingTool logger  = LoggingToolFactory.createLoggingTool(InductivePartialCharges.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger  = LoggingToolFactory.createLoggingTool(InductivePartialCharges.class)", "var_name": "logger"}], "methods": [{"identifier": "InductivePartialCharges", "parameters": "()", "modifiers": "public", "return": "", "signature": " InductivePartialCharges()", "full_signature": "public  InductivePartialCharges()", "class_method_signature": "InductivePartialCharges.InductivePartialCharges()", "testcase": false, "constructor": true}, {"identifier": "assignInductivePartialCharges", "parameters": "(IAtomContainer ac)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer assignInductivePartialCharges(IAtomContainer ac)", "full_signature": "public IAtomContainer assignInductivePartialCharges(IAtomContainer ac)", "class_method_signature": "InductivePartialCharges.assignInductivePartialCharges(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "calculateCharges", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void calculateCharges(IAtomContainer container)", "full_signature": "@Override public void calculateCharges(IAtomContainer container)", "class_method_signature": "InductivePartialCharges.calculateCharges(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getPaulingElectronegativities", "parameters": "(IAtomContainer ac, boolean modified)", "modifiers": "public", "return": "double[]", "signature": "double[] getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "full_signature": "public double[] getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "class_method_signature": "InductivePartialCharges.getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "testcase": false, "constructor": false}, {"identifier": "getAtomicSoftnessCore", "parameters": "(IAtomContainer ac, int atomPosition)", "modifiers": "public", "return": "double", "signature": "double getAtomicSoftnessCore(IAtomContainer ac, int atomPosition)", "full_signature": "public double getAtomicSoftnessCore(IAtomContainer ac, int atomPosition)", "class_method_signature": "InductivePartialCharges.getAtomicSoftnessCore(IAtomContainer ac, int atomPosition)", "testcase": false, "constructor": false}, {"identifier": "getAtomicChargeIncrement", "parameters": "(IAtomContainer ac, int atomPosition, double[] ElEn, int as)", "modifiers": "private", "return": "double", "signature": "double getAtomicChargeIncrement(IAtomContainer ac, int atomPosition, double[] ElEn, int as)", "full_signature": "private double getAtomicChargeIncrement(IAtomContainer ac, int atomPosition, double[] ElEn, int as)", "class_method_signature": "InductivePartialCharges.getAtomicChargeIncrement(IAtomContainer ac, int atomPosition, double[] ElEn, int as)", "testcase": false, "constructor": false}, {"identifier": "getCovalentRadius", "parameters": "(String symbol, IBond.Order maxBondOrder)", "modifiers": "private", "return": "double", "signature": "double getCovalentRadius(String symbol, IBond.Order maxBondOrder)", "full_signature": "private double getCovalentRadius(String symbol, IBond.Order maxBondOrder)", "class_method_signature": "InductivePartialCharges.getCovalentRadius(String symbol, IBond.Order maxBondOrder)", "testcase": false, "constructor": false}, {"identifier": "calculateSquaredDistanceBetweenTwoAtoms", "parameters": "(IAtom atom1, IAtom atom2)", "modifiers": "private", "return": "double", "signature": "double calculateSquaredDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "full_signature": "private double calculateSquaredDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "class_method_signature": "InductivePartialCharges.calculateSquaredDistanceBetweenTwoAtoms(IAtom atom1, IAtom atom2)", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/InductivePartialCharges.java"}, "focal_method": {"identifier": "getPaulingElectronegativities", "parameters": "(IAtomContainer ac, boolean modified)", "modifiers": "public", "return": "double[]", "body": "public double[] getPaulingElectronegativities(IAtomContainer ac, boolean modified) throws CDKException {\n        double[] paulingElectronegativities = new double[ac.getAtomCount()];\n        IElement element = null;\n        String symbol = null;\n        int atomicNumber = 0;\n        try {\n            ifac = Isotopes.getInstance();\n            for (int i = 0; i < ac.getAtomCount(); i++) {\n                IAtom atom = ac.getAtom(i);\n                symbol = ac.getAtom(i).getSymbol();\n                element = ifac.getElement(symbol);\n                atomicNumber = element.getAtomicNumber();\n                if (modified) {\n                    if (symbol.equals(\"Cl\")) {\n                        paulingElectronegativities[i] = 3.28;\n                    } else if (symbol.equals(\"Br\")) {\n                        paulingElectronegativities[i] = 3.13;\n                    } else if (symbol.equals(\"I\")) {\n                        paulingElectronegativities[i] = 2.93;\n                    } else if (symbol.equals(\"H\")) {\n                        paulingElectronegativities[i] = 2.10;\n                    } else if (symbol.equals(\"C\")) {\n                        if (ac.getMaximumBondOrder(atom) == IBond.Order.SINGLE) {\n                            // Csp3\n                            paulingElectronegativities[i] = 2.20;\n                        } else if (ac.getMaximumBondOrder(atom) == IBond.Order.DOUBLE) {\n                            paulingElectronegativities[i] = 2.31;\n                        } else {\n                            paulingElectronegativities[i] = 3.15;\n                        }\n                    } else if (symbol.equals(\"O\")) {\n                        if (ac.getMaximumBondOrder(atom) == IBond.Order.SINGLE) {\n                            // Osp3\n                            paulingElectronegativities[i] = 3.20;\n                        } else if (ac.getMaximumBondOrder(atom) != IBond.Order.SINGLE) {\n                            paulingElectronegativities[i] = 4.34;\n                        }\n                    } else if (symbol.equals(\"Si\")) {\n                        paulingElectronegativities[i] = 1.99;\n                    } else if (symbol.equals(\"S\")) {\n                        paulingElectronegativities[i] = 2.74;\n                    } else if (symbol.equals(\"N\")) {\n                        paulingElectronegativities[i] = 2.59;\n                    } else {\n                        paulingElectronegativities[i] = pauling[atomicNumber];\n                    }\n                } else {\n                    paulingElectronegativities[i] = pauling[atomicNumber];\n                }\n            }\n            return paulingElectronegativities;\n        } catch (Exception ex1) {\n            logger.debug(ex1);\n            throw new CDKException(\"Problems with IsotopeFactory due to \" + ex1.toString(), ex1);\n        }\n    }", "signature": "double[] getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "full_signature": "public double[] getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "class_method_signature": "InductivePartialCharges.getPaulingElectronegativities(IAtomContainer ac, boolean modified)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getInstance", "getAtomCount", "getAtom", "getSymbol", "getAtom", "getElement", "getAtomicNumber", "equals", "equals", "equals", "equals", "equals", "getMaximumBondOrder", "getMaximumBondOrder", "equals", "getMaximumBondOrder", "getMaximumBondOrder", "equals", "equals", "equals", "debug", "toString"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}