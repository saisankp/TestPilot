{"test_class": {"identifier": "HtmlUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HTMLUtils util;", "modifier": "private", "type": "HTMLUtils", "declarator": "util", "var_name": "util"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/html/HtmlUtilsTest.java"}, "test_case": {"identifier": "testRTN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRTN() {\n\t\tAssert.assertEquals(\" \", util.sanitize(\"\\r\\n\\t\", false).get(0).toString());\n\t}", "signature": "void testRTN()", "full_signature": "@Test public void testRTN()", "class_method_signature": "HtmlUtilsTest.testRTN()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "get", "sanitize"]}, "focal_class": {"identifier": "HTMLUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sanitize", "parameters": "(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "modifiers": "private static", "return": "List<Chunk>", "signature": "List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "full_signature": "private static List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "class_method_signature": "HTMLUtils.sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "(final String str, final boolean preserveWhiteSpace)", "modifiers": "public static", "return": "List<Chunk>", "signature": "List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace)", "full_signature": "public static List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace)", "class_method_signature": "HTMLUtils.sanitize(final String str, final boolean preserveWhiteSpace)", "testcase": false, "constructor": false}, {"identifier": "sanitizeInline", "parameters": "(final String str, final boolean preserveWhiteSpace)", "modifiers": "public static", "return": "List<Chunk>", "signature": "List<Chunk> sanitizeInline(final String str, final boolean preserveWhiteSpace)", "full_signature": "public static List<Chunk> sanitizeInline(final String str, final boolean preserveWhiteSpace)", "class_method_signature": "HTMLUtils.sanitizeInline(final String str, final boolean preserveWhiteSpace)", "testcase": false, "constructor": false}, {"identifier": "sanitizeInline", "parameters": "(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "modifiers": "public static", "return": "List<Chunk>", "signature": "List<Chunk> sanitizeInline(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "full_signature": "public static List<Chunk> sanitizeInline(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "class_method_signature": "HTMLUtils.sanitizeInline(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/html/HTMLUtils.java"}, "focal_method": {"identifier": "sanitize", "parameters": "(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "modifiers": "private static", "return": "List<Chunk>", "body": "private static List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces) {\n\t\tStringBuilder builder = new StringBuilder();\n        StringBuilder whitespaceBuilder = new StringBuilder();\n\t\tchar[] chars = str.toCharArray();\n        ArrayList<Chunk> chunkList = new ArrayList<Chunk>();\n\t\tboolean isWhitespace = chars.length > 0 ? Character.isWhitespace(chars[0]) : true;\n\t\tfor (char c : chars) {\n\t\t\tif (isWhitespace && !Character.isWhitespace(c)) {\n                if (builder.length() == 0) {\n                    chunkList.add(Chunk.createWhitespace(whitespaceBuilder.toString(), preserveWhiteSpace));\n                } else {\n                    builder.append(preserveWhiteSpace ? whitespaceBuilder : \" \");\n                }\n                whitespaceBuilder = new StringBuilder();\n            }\n\n            isWhitespace = Character.isWhitespace(c);\n            if (isWhitespace) {\n                whitespaceBuilder.append(c);\n            } else {\n                builder.append(c);\n            }\n\t\t}\n\n        if (builder.length() > 0) {\n            chunkList.add(new Chunk(replaceNonBreakableSpaces ? builder.toString().replace(Character.valueOf('\\u00a0'), Character.valueOf(' ')) : builder.toString()));\n        }\n\n        if (whitespaceBuilder.length() > 0) {\n            chunkList.add(Chunk.createWhitespace(whitespaceBuilder.toString(), preserveWhiteSpace));\n        }\n\n\t\treturn chunkList;\n\t}", "signature": "List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "full_signature": "private static List<Chunk> sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "class_method_signature": "HTMLUtils.sanitize(final String str, final boolean preserveWhiteSpace, final boolean replaceNonBreakableSpaces)", "testcase": false, "constructor": false, "invocations": ["toCharArray", "isWhitespace", "isWhitespace", "length", "add", "createWhitespace", "toString", "append", "isWhitespace", "append", "append", "length", "add", "replace", "toString", "valueOf", "valueOf", "toString", "length", "add", "createWhitespace", "toString"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}