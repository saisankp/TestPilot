{"test_class": {"identifier": "ConnectionImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public Timeout globalTimeout = new Timeout(1, TimeUnit.SECONDS);", "modifier": "@Rule\n    public", "type": "Timeout", "declarator": "globalTimeout = new Timeout(1, TimeUnit.SECONDS)", "var_name": "globalTimeout"}], "file": "lib/jdee-server/src/test/java/jde/juci/ConnectionImplTest.java"}, "test_case": {"identifier": "testConnectionProxy2CallJava2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnectionProxy2CallJava2() throws Exception {\n        Echo echo = (Echo) ConnectionFactory.getConnection(EchoImpl.class, null, null);\n        assertEquals(\"hello world\", echo.ack(\"hello world\"));\n        ((Connection) echo).end();\n    }", "signature": "void testConnectionProxy2CallJava2()", "full_signature": "@Test public void testConnectionProxy2CallJava2()", "class_method_signature": "ConnectionImplTest.testConnectionProxy2CallJava2()", "testcase": true, "constructor": false, "invocations": ["getConnection", "assertEquals", "ack", "end"]}, "focal_class": {"identifier": "ConnectionImpl", "superclass": "", "interfaces": "implements InvocationHandler, Connection", "fields": [{"original_string": "private This global;", "modifier": "private", "type": "This", "declarator": "global", "var_name": "global"}, {"original_string": "private Map  impls;", "modifier": "private", "type": "Map", "declarator": "impls", "var_name": "impls"}, {"original_string": "private Map cachedImplInstances  = new HashMap();", "modifier": "private", "type": "Map", "declarator": "cachedImplInstances  = new HashMap()", "var_name": "cachedImplInstances"}, {"original_string": "private PrintWriter output       = new PrintWriter(System.out);", "modifier": "private", "type": "PrintWriter", "declarator": "output       = new PrintWriter(System.out)", "var_name": "output"}, {"original_string": "private LispWriter  lispWriter   = new LispWriter(output);", "modifier": "private", "type": "LispWriter", "declarator": "lispWriter   = new LispWriter(output)", "var_name": "lispWriter"}, {"original_string": "private LinkedList  resultStack  = new LinkedList();", "modifier": "private", "type": "LinkedList", "declarator": "resultStack  = new LinkedList()", "var_name": "resultStack"}, {"original_string": "private int         beginCalls   = 0;", "modifier": "private", "type": "int", "declarator": "beginCalls   = 0", "var_name": "beginCalls"}, {"original_string": "private String      variableName = \"juciConn\";", "modifier": "private", "type": "String", "declarator": "variableName = \"juciConn\"", "var_name": "variableName"}, {"original_string": "private ThreadedInvoker invoker;", "modifier": "private", "type": "ThreadedInvoker", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private boolean threaded = true;", "modifier": "private", "type": "boolean", "declarator": "threaded = true", "var_name": "threaded"}, {"original_string": "private Object monitor = new Object();", "modifier": "private", "type": "Object", "declarator": "monitor = new Object()", "var_name": "monitor"}, {"original_string": "private String loggerFilename;", "modifier": "private", "type": "String", "declarator": "loggerFilename", "var_name": "loggerFilename"}, {"original_string": "private Logger logger = new Logger();", "modifier": "private", "type": "Logger", "declarator": "logger = new Logger()", "var_name": "logger"}, {"original_string": "private static final Object RESULT_PENDING = new Object() {\n      public String toString() { return \"RESULT_PENDING\"; }\n    };", "modifier": "private static final", "type": "Object", "declarator": "RESULT_PENDING = new Object() {\n      public String toString() { return \"RESULT_PENDING\"; }\n    }", "var_name": "RESULT_PENDING"}], "methods": [{"identifier": "ConnectionImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConnectionImpl()", "full_signature": "public  ConnectionImpl()", "class_method_signature": "ConnectionImpl.ConnectionImpl()", "testcase": false, "constructor": true}, {"identifier": "ConnectionImpl", "parameters": "(This global, Map impls, String variableName)", "modifiers": "public", "return": "", "signature": " ConnectionImpl(This global, Map impls, String variableName)", "full_signature": "public  ConnectionImpl(This global, Map impls, String variableName)", "class_method_signature": "ConnectionImpl.ConnectionImpl(This global, Map impls, String variableName)", "testcase": false, "constructor": true}, {"identifier": "addSupportedInterfaces", "parameters": "(Map newImpls)", "modifiers": "", "return": "void", "signature": "void addSupportedInterfaces(Map newImpls)", "full_signature": " void addSupportedInterfaces(Map newImpls)", "class_method_signature": "ConnectionImpl.addSupportedInterfaces(Map newImpls)", "testcase": false, "constructor": false}, {"identifier": "setOutput", "parameters": "(PrintWriter writer)", "modifiers": "public", "return": "void", "signature": "void setOutput(PrintWriter writer)", "full_signature": "public void setOutput(PrintWriter writer)", "class_method_signature": "ConnectionImpl.setOutput(PrintWriter writer)", "testcase": false, "constructor": false}, {"identifier": "setThreaded", "parameters": "(boolean threaded)", "modifiers": "", "return": "void", "signature": "void setThreaded(boolean threaded)", "full_signature": " void setThreaded(boolean threaded)", "class_method_signature": "ConnectionImpl.setThreaded(boolean threaded)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object object, Method method, Object[] args)", "modifiers": "public", "return": "Object", "signature": "Object invoke(Object object, Method method, Object[] args)", "full_signature": "public Object invoke(Object object, Method method, Object[] args)", "class_method_signature": "ConnectionImpl.invoke(Object object, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getImplClass", "parameters": "(Method method)", "modifiers": "private", "return": "Class", "signature": "Class getImplClass(Method method)", "full_signature": "private Class getImplClass(Method method)", "class_method_signature": "ConnectionImpl.getImplClass(Method method)", "testcase": false, "constructor": false}, {"identifier": "invokeJava", "parameters": "(Class implClass, Method method, Object[] args)", "modifiers": "private", "return": "Object", "signature": "Object invokeJava(Class implClass, Method method, Object[] args)", "full_signature": "private Object invokeJava(Class implClass, Method method, Object[] args)", "class_method_signature": "ConnectionImpl.invokeJava(Class implClass, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "invokeElisp", "parameters": "(Class implClass, Method method, Object[] args)", "modifiers": "private", "return": "Object", "signature": "Object invokeElisp(Class implClass, Method method, Object[] args)", "full_signature": "private Object invokeElisp(Class implClass, Method method, Object[] args)", "class_method_signature": "ConnectionImpl.invokeElisp(Class implClass, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "invokeOther", "parameters": "(Method method, Object[] args)", "modifiers": "private", "return": "Object", "signature": "Object invokeOther(Method method, Object[] args)", "full_signature": "private Object invokeOther(Method method, Object[] args)", "class_method_signature": "ConnectionImpl.invokeOther(Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "finishInvoke", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object finishInvoke()", "full_signature": "private Object finishInvoke()", "class_method_signature": "ConnectionImpl.finishInvoke()", "testcase": false, "constructor": false}, {"identifier": "maybeConvertMaps", "parameters": "(Object[] args)", "modifiers": "private", "return": "void", "signature": "void maybeConvertMaps(Object[] args)", "full_signature": "private void maybeConvertMaps(Object[] args)", "class_method_signature": "ConnectionImpl.maybeConvertMaps(Object[] args)", "testcase": false, "constructor": false}, {"identifier": "waitForResult", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void waitForResult()", "full_signature": "private void waitForResult()", "class_method_signature": "ConnectionImpl.waitForResult()", "testcase": false, "constructor": false}, {"identifier": "notifyResultReady", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyResultReady()", "full_signature": "private void notifyResultReady()", "class_method_signature": "ConnectionImpl.notifyResultReady()", "testcase": false, "constructor": false}, {"identifier": "begin", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void begin()", "full_signature": "public void begin()", "class_method_signature": "ConnectionImpl.begin()", "testcase": false, "constructor": false}, {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void end()", "full_signature": "public void end()", "class_method_signature": "ConnectionImpl.end()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "ConnectionImpl.reset()", "testcase": false, "constructor": false}, {"identifier": "pushResult", "parameters": "(Object result)", "modifiers": "public", "return": "void", "signature": "void pushResult(Object result)", "full_signature": "public void pushResult(Object result)", "class_method_signature": "ConnectionImpl.pushResult(Object result)", "testcase": false, "constructor": false}, {"identifier": "popResult", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object popResult()", "full_signature": "public Object popResult()", "class_method_signature": "ConnectionImpl.popResult()", "testcase": false, "constructor": false}, {"identifier": "peekResult", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object peekResult()", "full_signature": "public Object peekResult()", "class_method_signature": "ConnectionImpl.peekResult()", "testcase": false, "constructor": false}, {"identifier": "setLoggerFilename", "parameters": "(String filename)", "modifiers": "public", "return": "void", "signature": "void setLoggerFilename(String filename)", "full_signature": "public void setLoggerFilename(String filename)", "class_method_signature": "ConnectionImpl.setLoggerFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "evalBshScript", "parameters": "(final String statement)", "modifiers": "public", "return": "void", "signature": "void evalBshScript(final String statement)", "full_signature": "public void evalBshScript(final String statement)", "class_method_signature": "ConnectionImpl.evalBshScript(final String statement)", "testcase": false, "constructor": false}, {"identifier": "writeResult", "parameters": "(Object result)", "modifiers": "private", "return": "void", "signature": "void writeResult(Object result)", "full_signature": "private void writeResult(Object result)", "class_method_signature": "ConnectionImpl.writeResult(Object result)", "testcase": false, "constructor": false}], "file": "lib/jdee-server/src/main/java/jde/juci/ConnectionImpl.java"}, "focal_method": {"identifier": "end", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void end() {\n    if (--beginCalls <= 0) {\n\n      synchronized (resultStack) {\n        if (resultStack.isEmpty()) {\n          writeResult(LispWriter.NIL);\n        } else {\n          while (!resultStack.isEmpty()) {\n            writeResult(resultStack.removeLast());\n          }\n        }\n      }\n\n      if (global != null) {\n        try {\n          global.getNameSpace().setVariable(variableName, null, true);\n        } catch (bsh.UtilEvalError ee) {\n          // All we're doing is attempting to unset the variable here, so if\n          // we fail at that, the consequences are probably harmless...\n        }\n      }\n\n      synchronized (ConnectionFactory.connectionLock) {\n        ConnectionFactory.currentConnection = null;\n      }\n    }\n    logger.debug(\"*** end \" + beginCalls);\n  }", "signature": "void end()", "full_signature": "public void end()", "class_method_signature": "ConnectionImpl.end()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "writeResult", "isEmpty", "writeResult", "removeLast", "setVariable", "getNameSpace", "debug"]}, "repository": {"repo_id": 42112681, "url": "https://github.com/kqr/.emacs.d", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 42179, "license": "licensed"}}