{"test_class": {"identifier": "SSLUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_CERT_PWD = \"changeit\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CERT_PWD = \"changeit\"", "var_name": "DEFAULT_CERT_PWD"}, {"original_string": "private static final String DEFAULT_SSL_PROTOCOL = \"TLSv1.2\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SSL_PROTOCOL = \"TLSv1.2\"", "var_name": "DEFAULT_SSL_PROTOCOL"}, {"original_string": "private static final String DEFAULT_SSL_STORE_TYPE = \"pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SSL_STORE_TYPE = \"pkcs12\"", "var_name": "DEFAULT_SSL_STORE_TYPE"}, {"original_string": "private static final String DEFAULT_CA_TRUST_STORE = \"src/test/resources/certs/ca/ca.pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CA_TRUST_STORE = \"src/test/resources/certs/ca/ca.pkcs12\"", "var_name": "DEFAULT_CA_TRUST_STORE"}, {"original_string": "private static final String DEFAULT_SERVER_KEY_STORE = \"src/test/resources/certs/server/server.pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SERVER_KEY_STORE = \"src/test/resources/certs/server/server.pkcs12\"", "var_name": "DEFAULT_SERVER_KEY_STORE"}, {"original_string": "private static final String DEFAULT_KEY_STORE_TYPE = \"pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_KEY_STORE_TYPE = \"pkcs12\"", "var_name": "DEFAULT_KEY_STORE_TYPE"}, {"original_string": "private static final String DEFAULT_TRUST_STORE_TYPE = \"pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TRUST_STORE_TYPE = \"pkcs12\"", "var_name": "DEFAULT_TRUST_STORE_TYPE"}, {"original_string": "private static final String KEYSTORE_PASSWORD_APP_NAME = \"testKeystorePassword\";", "modifier": "private static final", "type": "String", "declarator": "KEYSTORE_PASSWORD_APP_NAME = \"testKeystorePassword\"", "var_name": "KEYSTORE_PASSWORD_APP_NAME"}, {"original_string": "private static final String KEY_MANAGER_PASSWORD_APP_NAME = \"testKeyManager\";", "modifier": "private static final", "type": "String", "declarator": "KEY_MANAGER_PASSWORD_APP_NAME = \"testKeyManager\"", "var_name": "KEY_MANAGER_PASSWORD_APP_NAME"}, {"original_string": "private static final String TRSUTSTORE_PASSWORD_APP_NAME = \"testTruststorePassword\";", "modifier": "private static final", "type": "String", "declarator": "TRSUTSTORE_PASSWORD_APP_NAME = \"testTruststorePassword\"", "var_name": "TRSUTSTORE_PASSWORD_APP_NAME"}, {"original_string": "private static final String TRUSTSTORE_PATH = \"src/test/resources/testKeyStore.pkcs12\";", "modifier": "private static final", "type": "String", "declarator": "TRUSTSTORE_PATH = \"src/test/resources/testKeyStore.pkcs12\"", "var_name": "TRUSTSTORE_PATH"}], "file": "libs/java/client_common/src/test/java/com/yahoo/athenz/common/utils/SSLUtilsTest.java"}, "test_case": {"identifier": "testClientAliasedX509ExtendedKeyManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClientAliasedX509ExtendedKeyManager() {\n\n        SSLUtils.ClientAliasedX509ExtendedKeyManager keyManager = new SSLUtils.ClientAliasedX509ExtendedKeyManager(null, \"testKeyAlias\");\n        assertNull(keyManager.getDelegate());\n        assertThrows(RuntimeException.class, () -> {\n            keyManager.chooseEngineServerAlias(null, null, null);\n        });\n        assertThrows(RuntimeException.class, () -> {\n            keyManager.getServerAliases(null, null);\n        });\n        assertThrows(RuntimeException.class, () -> {\n            keyManager.chooseServerAlias(null, null, null);\n        });\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            SSLUtils.loadServicePrivateKey(\"testFactoryClassFail\");\n        });\n        String[] temp = new String[1];\n        temp[0] = \"tempTest\";\n        String[] clientAliases  = new String[2];\n        clientAliases[0] = \"testClientAlias1\";\n        clientAliases[1] = \"testClientAlias2\";\n        X509ExtendedKeyManager mockKeyManager = Mockito.mock(X509ExtendedKeyManager.class);\n        when(mockKeyManager.chooseEngineClientAlias(any(), any(), any())).thenReturn(\"testPass\");\n        when(mockKeyManager.chooseClientAlias(any(), any(), any())).thenReturn(\"testPass\");\n        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(clientAliases);\n        SSLUtils.ClientAliasedX509ExtendedKeyManager keyManagerTemp = new SSLUtils.ClientAliasedX509ExtendedKeyManager(mockKeyManager, null);\n        assertEquals(keyManagerTemp.chooseEngineClientAlias(temp, null, null), \"testPass\");\n        assertEquals(keyManagerTemp.chooseClientAlias(temp, null, null), \"testPass\");\n        assertEquals(keyManagerTemp.getClientAliases(\"testKeyType\", null), clientAliases);\n\n        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(clientAliases);\n        keyManagerTemp = new SSLUtils.ClientAliasedX509ExtendedKeyManager(mockKeyManager, \"testClientAlias2\");\n        assertEquals(keyManagerTemp.chooseEngineClientAlias(temp, null, null), \"testClientAlias2\");\n\n        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(null);\n        assertNull(keyManagerTemp.chooseEngineClientAlias(temp, null, null));\n    }", "signature": "void testClientAliasedX509ExtendedKeyManager()", "full_signature": "@Test public void testClientAliasedX509ExtendedKeyManager()", "class_method_signature": "SSLUtilsTest.testClientAliasedX509ExtendedKeyManager()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getDelegate", "assertThrows", "chooseEngineServerAlias", "assertThrows", "getServerAliases", "assertThrows", "chooseServerAlias", "assertThrows", "loadServicePrivateKey", "mock", "thenReturn", "when", "chooseEngineClientAlias", "any", "any", "any", "thenReturn", "when", "chooseClientAlias", "any", "any", "any", "thenReturn", "when", "getClientAliases", "anyString", "any", "assertEquals", "chooseEngineClientAlias", "assertEquals", "chooseClientAlias", "assertEquals", "getClientAliases", "thenReturn", "when", "getClientAliases", "anyString", "any", "assertEquals", "chooseEngineClientAlias", "thenReturn", "when", "getClientAliases", "anyString", "any", "assertNull", "chooseEngineClientAlias"]}, "focal_class": {"identifier": "SSLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SSLUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SSLUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "loadServicePrivateKey", "parameters": "(String pkeyFactoryClass)", "modifiers": "public static", "return": "PrivateKeyStore", "signature": "PrivateKeyStore loadServicePrivateKey(String pkeyFactoryClass)", "full_signature": "public static PrivateKeyStore loadServicePrivateKey(String pkeyFactoryClass)", "class_method_signature": "SSLUtils.loadServicePrivateKey(String pkeyFactoryClass)", "testcase": false, "constructor": false}], "file": "libs/java/client_common/src/main/java/com/yahoo/athenz/common/utils/SSLUtils.java"}, "focal_method": {"identifier": "loadServicePrivateKey", "parameters": "(String pkeyFactoryClass)", "modifiers": "public static", "return": "PrivateKeyStore", "body": "public static PrivateKeyStore loadServicePrivateKey(String pkeyFactoryClass) {\n        PrivateKeyStoreFactory pkeyFactory;\n        try {\n            pkeyFactory = (PrivateKeyStoreFactory) Class.forName(pkeyFactoryClass).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            LOGGER.error(\"Invalid PrivateKeyStoreFactory class: \" + pkeyFactoryClass\n                    + \" error: \" + e.getMessage());\n            throw new IllegalArgumentException(\"Invalid private key store\");\n        }\n        return pkeyFactory.create();\n    }", "signature": "PrivateKeyStore loadServicePrivateKey(String pkeyFactoryClass)", "full_signature": "public static PrivateKeyStore loadServicePrivateKey(String pkeyFactoryClass)", "class_method_signature": "SSLUtils.loadServicePrivateKey(String pkeyFactoryClass)", "testcase": false, "constructor": false, "invocations": ["newInstance", "forName", "error", "getMessage", "create"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}