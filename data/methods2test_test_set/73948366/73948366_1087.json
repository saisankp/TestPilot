{"test_class": {"identifier": "CertFailedRefreshNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InstanceCertManager instanceCertManager;", "modifier": "private", "type": "InstanceCertManager", "declarator": "instanceCertManager", "var_name": "instanceCertManager"}, {"original_string": "private DataStore dataStore;", "modifier": "private", "type": "DataStore", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "private HostnameResolver hostnameResolver;", "modifier": "private", "type": "HostnameResolver", "declarator": "hostnameResolver", "var_name": "hostnameResolver"}, {"original_string": "private final String userDomainPrefix = \"user.\";", "modifier": "private final", "type": "String", "declarator": "userDomainPrefix = \"user.\"", "var_name": "userDomainPrefix"}, {"original_string": "private final String serverName = \"testServer\";", "modifier": "private final", "type": "String", "declarator": "serverName = \"testServer\"", "var_name": "serverName"}, {"original_string": "private final int httpsPort = 4443;", "modifier": "private final", "type": "int", "declarator": "httpsPort = 4443", "var_name": "httpsPort"}, {"original_string": "private final String htmlSeveralRecords =\n            \"<div class=\\\"athenz-wrapper\\\">\\n\" +\n                    \"    <div class=\\\"mbrapproval unrefreshedcerts\\\">\\n\" +\n                    \"        <div class=\\\"logo\\\">\\n\" +\n                    \"            <img src=\\\"cid:logo\\\" class=\\\"athenzlogowhite\\\" alt=\\\"Athenz logo\\\"/>\\n\" +\n                    \"        </div>\\n\" +\n                    \"        <div class=\\\"hdr\\\">Unrefreshed Certificates Details</div>\\n\" +\n                    \"        <div class=\\\"bt\\\">You have one or more certificates that failed to refresh in your Athenz domain <b>dom1</b>:</div>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <table id=\\\"t02\\\">\\n\" +\n                    \"            <thead>\\n\" +\n                    \"                <tr>\\n\" +\n                    \"                    <th class=\\\"ch\\\">SERVICE</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">PROVIDER</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">INSTANCE ID</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">UPDATE TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">EXPIRATION TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">HOSTNAME</th>\\n\" +\n                    \"                </tr>\\n\" +\n                    \"            </thead>\\n\" +\n                    \"            <tbody><tr><td class=\\\"cv\\\">service0</td><td class=\\\"cv\\\">provider</td><td class=\\\"cv\\\">instanceID0</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">hostName0</td></tr>\\n\" +\n                    \"<tr><td class=\\\"cv\\\">service0</td><td class=\\\"cv\\\">provider</td><td class=\\\"cv\\\">instanceID0</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">secondHostName0</td></tr>\\n\" +\n                    \"</tbody>\\n\" +\n                    \"        </table>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <div class=\\\"bt unrefreshedcerts\\\">\\n\" +\n                    \"            <br>Please review this list and take one of the following actions:\\n\" +\n                    \"            <br>\\n\" +\n                    \"            <p> 1. Login to the host and verify that sia is able to successfully refresh identity certificates.\\n\" +\n                    \"            Address any issues that are reported during the certificate refresh request.</p>\\n\" +\n                    \"            <p> 2. After verifying that if the host certificate record is no longer valid due to this\\n\" +\n                    \"            instance being re-bootstrapped or changed identity, please delete the\\n\" +\n                    \"            certificate record by running the following command (using your domain administrator credentials):</p>\\n\" +\n                    \"            <b>curl --key &lt;KEY&gt; --cert &lt;CERT&gt; -X DELETE https://testServer:4443/zts/v1/instance/&lt;PROVIDER&gt;/dom1/&lt;SERVICE&gt;/&lt;INSTANCE-ID&gt; </b>\\n\" +\n                    \"            <p>Important: Once the certificate record is deleted, the instance will not be able to\\n\" +\n                    \"            refresh its certificates so make sure the record is no longer needed.</p>\\n\" +\n                    \"            <br>For additional support, please contact <a href=\\\"https://link.to.athenz.channel.com\\\">#Athenz slack channel</a>\\n\" +\n                    \"        </div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"    <div class=\\\"footer-container\\\">\\n\" +\n                    \"        <div class=\\\"footer\\\">This is a generated email from <a href=\\\"https://ui-athenz.example.com/\\\">Athenz</a>. Please do not respond.</div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"</div>\\n\" +\n                    \"</body>\\n\" +\n                    \"</html>\";", "modifier": "private final", "type": "String", "declarator": "htmlSeveralRecords =\n            \"<div class=\\\"athenz-wrapper\\\">\\n\" +\n                    \"    <div class=\\\"mbrapproval unrefreshedcerts\\\">\\n\" +\n                    \"        <div class=\\\"logo\\\">\\n\" +\n                    \"            <img src=\\\"cid:logo\\\" class=\\\"athenzlogowhite\\\" alt=\\\"Athenz logo\\\"/>\\n\" +\n                    \"        </div>\\n\" +\n                    \"        <div class=\\\"hdr\\\">Unrefreshed Certificates Details</div>\\n\" +\n                    \"        <div class=\\\"bt\\\">You have one or more certificates that failed to refresh in your Athenz domain <b>dom1</b>:</div>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <table id=\\\"t02\\\">\\n\" +\n                    \"            <thead>\\n\" +\n                    \"                <tr>\\n\" +\n                    \"                    <th class=\\\"ch\\\">SERVICE</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">PROVIDER</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">INSTANCE ID</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">UPDATE TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">EXPIRATION TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">HOSTNAME</th>\\n\" +\n                    \"                </tr>\\n\" +\n                    \"            </thead>\\n\" +\n                    \"            <tbody><tr><td class=\\\"cv\\\">service0</td><td class=\\\"cv\\\">provider</td><td class=\\\"cv\\\">instanceID0</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">hostName0</td></tr>\\n\" +\n                    \"<tr><td class=\\\"cv\\\">service0</td><td class=\\\"cv\\\">provider</td><td class=\\\"cv\\\">instanceID0</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">secondHostName0</td></tr>\\n\" +\n                    \"</tbody>\\n\" +\n                    \"        </table>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <div class=\\\"bt unrefreshedcerts\\\">\\n\" +\n                    \"            <br>Please review this list and take one of the following actions:\\n\" +\n                    \"            <br>\\n\" +\n                    \"            <p> 1. Login to the host and verify that sia is able to successfully refresh identity certificates.\\n\" +\n                    \"            Address any issues that are reported during the certificate refresh request.</p>\\n\" +\n                    \"            <p> 2. After verifying that if the host certificate record is no longer valid due to this\\n\" +\n                    \"            instance being re-bootstrapped or changed identity, please delete the\\n\" +\n                    \"            certificate record by running the following command (using your domain administrator credentials):</p>\\n\" +\n                    \"            <b>curl --key &lt;KEY&gt; --cert &lt;CERT&gt; -X DELETE https://testServer:4443/zts/v1/instance/&lt;PROVIDER&gt;/dom1/&lt;SERVICE&gt;/&lt;INSTANCE-ID&gt; </b>\\n\" +\n                    \"            <p>Important: Once the certificate record is deleted, the instance will not be able to\\n\" +\n                    \"            refresh its certificates so make sure the record is no longer needed.</p>\\n\" +\n                    \"            <br>For additional support, please contact <a href=\\\"https://link.to.athenz.channel.com\\\">#Athenz slack channel</a>\\n\" +\n                    \"        </div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"    <div class=\\\"footer-container\\\">\\n\" +\n                    \"        <div class=\\\"footer\\\">This is a generated email from <a href=\\\"https://ui-athenz.example.com/\\\">Athenz</a>. Please do not respond.</div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"</div>\\n\" +\n                    \"</body>\\n\" +\n                    \"</html>\"", "var_name": "htmlSeveralRecords"}, {"original_string": "private final String htmlSingleRecord =\n            \"<div class=\\\"athenz-wrapper\\\">\\n\" +\n                    \"    <div class=\\\"mbrapproval unrefreshedcerts\\\">\\n\" +\n                    \"        <div class=\\\"logo\\\">\\n\" +\n                    \"            <img src=\\\"cid:logo\\\" class=\\\"athenzlogowhite\\\" alt=\\\"Athenz logo\\\"/>\\n\" +\n                    \"        </div>\\n\" +\n                    \"        <div class=\\\"hdr\\\">Unrefreshed Certificates Details</div>\\n\" +\n                    \"        <div class=\\\"bt\\\">You have one or more certificates that failed to refresh in your Athenz domain <b>dom1</b>:</div>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <table id=\\\"t02\\\">\\n\" +\n                    \"            <thead>\\n\" +\n                    \"                <tr>\\n\" +\n                    \"                    <th class=\\\"ch\\\">SERVICE</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">PROVIDER</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">INSTANCE ID</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">UPDATE TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">EXPIRATION TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">HOSTNAME</th>\\n\" +\n                    \"                </tr>\\n\" +\n                    \"            </thead>\\n\" +\n                    \"            <tbody><tr><td class=\\\"cv\\\">service1</td><td class=\\\"cv\\\">provider1</td><td class=\\\"cv\\\">instanceid1</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">hostName1</td></tr>\\n\" +\n                    \"</tbody>\\n\" +\n                    \"        </table>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <div class=\\\"bt unrefreshedcerts\\\">\\n\" +\n                    \"            <br>Please review this list and take one of the following actions:\\n\" +\n                    \"            <br>\\n\" +\n                    \"            <p> 1. Login to the host and verify that sia is able to successfully refresh identity certificates.\\n\" +\n                    \"            Address any issues that are reported during the certificate refresh request.</p>\\n\" +\n                    \"            <p> 2. After verifying that if the host certificate record is no longer valid due to this\\n\" +\n                    \"            instance being re-bootstrapped or changed identity, please delete the\\n\" +\n                    \"            certificate record by running the following command (using your domain administrator credentials):</p>\\n\" +\n                    \"            <b>curl --key &lt;KEY&gt; --cert &lt;CERT&gt; -X DELETE https://testServer:4443/zts/v1/instance/provider1/dom1/service1/instanceid1 </b>\\n\" +\n                    \"            <p>Important: Once the certificate record is deleted, the instance will not be able to\\n\" +\n                    \"            refresh its certificates so make sure the record is no longer needed.</p>\\n\" +\n                    \"            <br>For additional support, please contact <a href=\\\"https://link.to.athenz.channel.com\\\">#Athenz slack channel</a>\\n\" +\n                    \"        </div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"    <div class=\\\"footer-container\\\">\\n\" +\n                    \"        <div class=\\\"footer\\\">This is a generated email from <a href=\\\"https://ui-athenz.example.com/\\\">Athenz</a>. Please do not respond.</div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"</div>\\n\" +\n                    \"</body>\\n\" +\n                    \"</html>\\n\";", "modifier": "private final", "type": "String", "declarator": "htmlSingleRecord =\n            \"<div class=\\\"athenz-wrapper\\\">\\n\" +\n                    \"    <div class=\\\"mbrapproval unrefreshedcerts\\\">\\n\" +\n                    \"        <div class=\\\"logo\\\">\\n\" +\n                    \"            <img src=\\\"cid:logo\\\" class=\\\"athenzlogowhite\\\" alt=\\\"Athenz logo\\\"/>\\n\" +\n                    \"        </div>\\n\" +\n                    \"        <div class=\\\"hdr\\\">Unrefreshed Certificates Details</div>\\n\" +\n                    \"        <div class=\\\"bt\\\">You have one or more certificates that failed to refresh in your Athenz domain <b>dom1</b>:</div>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <table id=\\\"t02\\\">\\n\" +\n                    \"            <thead>\\n\" +\n                    \"                <tr>\\n\" +\n                    \"                    <th class=\\\"ch\\\">SERVICE</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">PROVIDER</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">INSTANCE ID</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">UPDATE TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">EXPIRATION TIME</th>\\n\" +\n                    \"                    <th class=\\\"ch\\\">HOSTNAME</th>\\n\" +\n                    \"                </tr>\\n\" +\n                    \"            </thead>\\n\" +\n                    \"            <tbody><tr><td class=\\\"cv\\\">service1</td><td class=\\\"cv\\\">provider1</td><td class=\\\"cv\\\">instanceid1</td><td class=\\\"cv\\\">Sun Mar 15 15:08:07 IST 2020</td><td class=\\\"cv\\\"></td><td class=\\\"cv\\\">hostName1</td></tr>\\n\" +\n                    \"</tbody>\\n\" +\n                    \"        </table>\\n\" +\n                    \"        <hr>\\n\" +\n                    \"        <div class=\\\"bt unrefreshedcerts\\\">\\n\" +\n                    \"            <br>Please review this list and take one of the following actions:\\n\" +\n                    \"            <br>\\n\" +\n                    \"            <p> 1. Login to the host and verify that sia is able to successfully refresh identity certificates.\\n\" +\n                    \"            Address any issues that are reported during the certificate refresh request.</p>\\n\" +\n                    \"            <p> 2. After verifying that if the host certificate record is no longer valid due to this\\n\" +\n                    \"            instance being re-bootstrapped or changed identity, please delete the\\n\" +\n                    \"            certificate record by running the following command (using your domain administrator credentials):</p>\\n\" +\n                    \"            <b>curl --key &lt;KEY&gt; --cert &lt;CERT&gt; -X DELETE https://testServer:4443/zts/v1/instance/provider1/dom1/service1/instanceid1 </b>\\n\" +\n                    \"            <p>Important: Once the certificate record is deleted, the instance will not be able to\\n\" +\n                    \"            refresh its certificates so make sure the record is no longer needed.</p>\\n\" +\n                    \"            <br>For additional support, please contact <a href=\\\"https://link.to.athenz.channel.com\\\">#Athenz slack channel</a>\\n\" +\n                    \"        </div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"    <div class=\\\"footer-container\\\">\\n\" +\n                    \"        <div class=\\\"footer\\\">This is a generated email from <a href=\\\"https://ui-athenz.example.com/\\\">Athenz</a>. Please do not respond.</div>\\n\" +\n                    \"    </div>\\n\" +\n                    \"</div>\\n\" +\n                    \"</body>\\n\" +\n                    \"</html>\\n\"", "var_name": "htmlSingleRecord"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/notification/CertFailedRefreshNotificationTaskTest.java"}, "test_case": {"identifier": "testSeveralProviders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSeveralProviders() {\n        Date currentDate = new Date();\n        List<X509CertRecord> records = new ArrayList<>();\n\n        Mockito.when(hostnameResolver.isValidHostname(anyString())).thenReturn(true);\n\n        // Configure 3 providers in property\n        System.setProperty(ZTS_PROP_NOTIFICATION_CERT_FAIL_PROVIDER_LIST, \"provider1, provider2, provider3\");\n\n        // Create 7 records, each in it's own domain (domain0, domain1... domain6)\n        for (int i = 0; i < 7; ++i) {\n            X509CertRecord record = getMockX509CertRecord(currentDate, i);\n            records.add(record);\n            NotificationTestsCommon.mockDomainData(i, dataStore);\n        }\n\n        // Set one record in provider1, two records in provider2 and three records in provider3\n        records.get(0).setProvider(\"provider1\");\n        records.get(1).setProvider(\"provider2\");\n        records.get(2).setProvider(\"provider2\");\n        records.get(3).setProvider(\"provider3\");\n        records.get(4).setProvider(\"provider3\");\n        records.get(5).setProvider(\"provider3\");\n\n        // Set one record in a provider not configured in properties (shouldn't be retrieved)\n        records.get(6).setProvider(\"providerNotInProperty\");\n\n        Mockito.when(instanceCertManager.getUnrefreshedCertsNotifications(eq(serverName), eq(\"provider1\")))\n                .thenReturn(records.subList(0, 1));\n        Mockito.when(instanceCertManager.getUnrefreshedCertsNotifications(eq(serverName), eq(\"provider2\")))\n                .thenReturn(records.subList(1, 3));\n        Mockito.when(instanceCertManager.getUnrefreshedCertsNotifications(eq(serverName), eq(\"provider3\")))\n                .thenReturn(records.subList(3, 6));\n        Mockito.when(instanceCertManager.getUnrefreshedCertsNotifications(eq(serverName), eq(\"providerNotInProperty\")))\n                .thenReturn(records.subList(6, 7));\n\n        CertFailedRefreshNotificationTask certFailedRefreshNotificationTask = new CertFailedRefreshNotificationTask(\n                instanceCertManager,\n                dataStore,\n                hostnameResolver,\n                userDomainPrefix,\n                serverName,\n                httpsPort);\n\n        List<Notification> notifications = certFailedRefreshNotificationTask.getNotifications();\n        assertEquals(6, notifications.size());\n        notifications.sort(Comparator.comparing(notif -> notif.getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS)));\n        // Assert one records for provider1:\n        String expectedDetail = \"service0;provider1;instanceID0;\" + new Timestamp(currentDate.getTime()) + \";;hostName0\";\n        assertEquals(expectedDetail, notifications.get(0).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        // Assert two records for provider2:\n        expectedDetail = \"service1;provider2;instanceID1;\" + new Timestamp(currentDate.getTime()) + \";;hostName1\";\n        assertEquals(expectedDetail, notifications.get(1).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        expectedDetail = \"service2;provider2;instanceID2;\" + new Timestamp(currentDate.getTime()) + \";;hostName2\";\n        assertEquals(expectedDetail, notifications.get(2).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        // Assert three records for provider3:\n        expectedDetail = \"service3;provider3;instanceID3;\" + new Timestamp(currentDate.getTime()) + \";;hostName3\";\n        assertEquals(expectedDetail, notifications.get(3).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        expectedDetail = \"service4;provider3;instanceID4;\" + new Timestamp(currentDate.getTime()) + \";;hostName4\";\n        assertEquals(expectedDetail, notifications.get(4).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        expectedDetail = \"service5;provider3;instanceID5;\" + new Timestamp(currentDate.getTime()) + \";;hostName5\";\n        assertEquals(expectedDetail, notifications.get(5).getDetails().get(NOTIFICATION_DETAILS_UNREFRESHED_CERTS));\n\n        System.clearProperty(ZTS_PROP_NOTIFICATION_CERT_FAIL_PROVIDER_LIST);\n    }", "signature": "void testSeveralProviders()", "full_signature": "@Test public void testSeveralProviders()", "class_method_signature": "CertFailedRefreshNotificationTaskTest.testSeveralProviders()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isValidHostname", "anyString", "setProperty", "getMockX509CertRecord", "add", "mockDomainData", "setProvider", "get", "setProvider", "get", "setProvider", "get", "setProvider", "get", "setProvider", "get", "setProvider", "get", "setProvider", "get", "thenReturn", "when", "getUnrefreshedCertsNotifications", "eq", "eq", "subList", "thenReturn", "when", "getUnrefreshedCertsNotifications", "eq", "eq", "subList", "thenReturn", "when", "getUnrefreshedCertsNotifications", "eq", "eq", "subList", "thenReturn", "when", "getUnrefreshedCertsNotifications", "eq", "eq", "subList", "getNotifications", "assertEquals", "size", "sort", "comparing", "get", "getDetails", "getTime", "assertEquals", "get", "getDetails", "get", "getTime", "assertEquals", "get", "getDetails", "get", "getTime", "assertEquals", "get", "getDetails", "get", "getTime", "assertEquals", "get", "getDetails", "get", "getTime", "assertEquals", "get", "getDetails", "get", "getTime", "assertEquals", "get", "getDetails", "get", "clearProperty"]}, "focal_class": {"identifier": "CertFailedRefreshNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "private final String serverName;", "modifier": "private final", "type": "String", "declarator": "serverName", "var_name": "serverName"}, {"original_string": "private final List<String> providers;", "modifier": "private final", "type": "List<String>", "declarator": "providers", "var_name": "providers"}, {"original_string": "private final InstanceCertManager instanceCertManager;", "modifier": "private final", "type": "InstanceCertManager", "declarator": "instanceCertManager", "var_name": "instanceCertManager"}, {"original_string": "private final NotificationCommon notificationCommon;", "modifier": "private final", "type": "NotificationCommon", "declarator": "notificationCommon", "var_name": "notificationCommon"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CertFailedRefreshNotificationTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CertFailedRefreshNotificationTask.class)", "var_name": "LOGGER"}, {"original_string": "private final static String DESCRIPTION = \"certificate failed refresh notification\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"certificate failed refresh notification\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"cert_fail_refresh\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"cert_fail_refresh\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final HostnameResolver hostnameResolver;", "modifier": "private final", "type": "HostnameResolver", "declarator": "hostnameResolver", "var_name": "hostnameResolver"}, {"original_string": "private final CertFailedRefreshNotificationToEmailConverter certFailedRefreshNotificationToEmailConverter;", "modifier": "private final", "type": "CertFailedRefreshNotificationToEmailConverter", "declarator": "certFailedRefreshNotificationToEmailConverter", "var_name": "certFailedRefreshNotificationToEmailConverter"}, {"original_string": "private final GlobStringsMatcher globStringsMatcher;", "modifier": "private final", "type": "GlobStringsMatcher", "declarator": "globStringsMatcher", "var_name": "globStringsMatcher"}], "methods": [{"identifier": "CertFailedRefreshNotificationTask", "parameters": "(InstanceCertManager instanceCertManager,\n                                             DataStore dataStore,\n                                             HostnameResolver hostnameResolver,\n                                             String userDomainPrefix,\n                                             String serverName,\n                                             int httpsPort)", "modifiers": "public", "return": "", "signature": " CertFailedRefreshNotificationTask(InstanceCertManager instanceCertManager,\n                                             DataStore dataStore,\n                                             HostnameResolver hostnameResolver,\n                                             String userDomainPrefix,\n                                             String serverName,\n                                             int httpsPort)", "full_signature": "public  CertFailedRefreshNotificationTask(InstanceCertManager instanceCertManager,\n                                             DataStore dataStore,\n                                             HostnameResolver hostnameResolver,\n                                             String userDomainPrefix,\n                                             String serverName,\n                                             int httpsPort)", "class_method_signature": "CertFailedRefreshNotificationTask.CertFailedRefreshNotificationTask(InstanceCertManager instanceCertManager,\n                                             DataStore dataStore,\n                                             HostnameResolver hostnameResolver,\n                                             String userDomainPrefix,\n                                             String serverName,\n                                             int httpsPort)", "testcase": false, "constructor": true}, {"identifier": "getProvidersList", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> getProvidersList()", "full_signature": "private List<String> getProvidersList()", "class_method_signature": "CertFailedRefreshNotificationTask.getProvidersList()", "testcase": false, "constructor": false}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "CertFailedRefreshNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getRecordsWithValidServices", "parameters": "(List<X509CertRecord> unrefreshedCerts)", "modifiers": "private", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> getRecordsWithValidServices(List<X509CertRecord> unrefreshedCerts)", "full_signature": "private List<X509CertRecord> getRecordsWithValidServices(List<X509CertRecord> unrefreshedCerts)", "class_method_signature": "CertFailedRefreshNotificationTask.getRecordsWithValidServices(List<X509CertRecord> unrefreshedCerts)", "testcase": false, "constructor": false}, {"identifier": "generateNotificationsForAdmins", "parameters": "(Map<String, List<X509CertRecord>> domainToCertRecordsMap)", "modifiers": "private", "return": "List<Notification>", "signature": "List<Notification> generateNotificationsForAdmins(Map<String, List<X509CertRecord>> domainToCertRecordsMap)", "full_signature": "private List<Notification> generateNotificationsForAdmins(Map<String, List<X509CertRecord>> domainToCertRecordsMap)", "class_method_signature": "CertFailedRefreshNotificationTask.generateNotificationsForAdmins(Map<String, List<X509CertRecord>> domainToCertRecordsMap)", "testcase": false, "constructor": false}, {"identifier": "getRecordsWithValidHosts", "parameters": "(List<X509CertRecord> unrefreshedCerts)", "modifiers": "private", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> getRecordsWithValidHosts(List<X509CertRecord> unrefreshedCerts)", "full_signature": "private List<X509CertRecord> getRecordsWithValidHosts(List<X509CertRecord> unrefreshedCerts)", "class_method_signature": "CertFailedRefreshNotificationTask.getRecordsWithValidHosts(List<X509CertRecord> unrefreshedCerts)", "testcase": false, "constructor": false}, {"identifier": "getNotificationDetails", "parameters": "(String domainName, List<X509CertRecord> certRecords)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getNotificationDetails(String domainName, List<X509CertRecord> certRecords)", "full_signature": "private Map<String, String> getNotificationDetails(String domainName, List<X509CertRecord> certRecords)", "class_method_signature": "CertFailedRefreshNotificationTask.getNotificationDetails(String domainName, List<X509CertRecord> certRecords)", "testcase": false, "constructor": false}, {"identifier": "getDomainToCertRecordsMap", "parameters": "(List<X509CertRecord> unrefreshedRecords)", "modifiers": "private", "return": "Map<String, List<X509CertRecord>>", "signature": "Map<String, List<X509CertRecord>> getDomainToCertRecordsMap(List<X509CertRecord> unrefreshedRecords)", "full_signature": "private Map<String, List<X509CertRecord>> getDomainToCertRecordsMap(List<X509CertRecord> unrefreshedRecords)", "class_method_signature": "CertFailedRefreshNotificationTask.getDomainToCertRecordsMap(List<X509CertRecord> unrefreshedRecords)", "testcase": false, "constructor": false}, {"identifier": "getTimestampAsString", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String getTimestampAsString(Date date)", "full_signature": "private String getTimestampAsString(Date date)", "class_method_signature": "CertFailedRefreshNotificationTask.getTimestampAsString(Date date)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "CertFailedRefreshNotificationTask.getDescription()", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/notification/CertFailedRefreshNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        if (providers == null || providers.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No configured providers\");\n            }\n            return new ArrayList<>();\n        }\n\n        List<X509CertRecord> unrefreshedCerts = new ArrayList<>();\n        for (String provider : providers) {\n            unrefreshedCerts.addAll(instanceCertManager.getUnrefreshedCertsNotifications(serverName, provider));\n        }\n        if (unrefreshedCerts.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No unrefreshed certificates available to send notifications\");\n            }\n            return new ArrayList<>();\n        }\n\n        List<X509CertRecord> unrefreshedCertsValidServices = getRecordsWithValidServices(unrefreshedCerts);\n        if (unrefreshedCertsValidServices.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No unrefreshed certificates with configured services available to send notifications\");\n            }\n            return new ArrayList<>();\n        }\n\n        List<X509CertRecord> unrefreshedCertsValidHosts = getRecordsWithValidHosts(unrefreshedCertsValidServices);\n        if (unrefreshedCertsValidHosts.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No unrefreshed certificates with valid hosts available to send notifications\");\n            }\n            return new ArrayList<>();\n        }\n\n        Map<String, List<X509CertRecord>> domainToCertRecordsMap = getDomainToCertRecordsMap(unrefreshedCertsValidHosts);\n\n        return generateNotificationsForAdmins(domainToCertRecordsMap);\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "CertFailedRefreshNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isDebugEnabled", "debug", "addAll", "getUnrefreshedCertsNotifications", "isEmpty", "isDebugEnabled", "debug", "getRecordsWithValidServices", "isEmpty", "isDebugEnabled", "debug", "getRecordsWithValidHosts", "isEmpty", "isDebugEnabled", "debug", "getDomainToCertRecordsMap", "generateNotificationsForAdmins"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}