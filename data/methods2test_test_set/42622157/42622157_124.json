{"test_class": {"identifier": "DASpecificationTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecificationTest.java"}, "test_case": {"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNodeTemplatesWithAbstractDAs() throws Exception {\n        setRevisionTo(\"af529e513388dc9358a8f700757d8dc59aba3a55\");\n        ServiceTemplateId id = new ServiceTemplateId(\"http://winery.opentosca.org/test/servicetemplates/ponyuniverse/daspecifier\", \"DASpecificationTest\", false);\n        TTopologyTemplate topologyTemplate = this.repository.getElement(id).getTopologyTemplate();\n        List<TNodeTemplate> nodeTemplateWithAbstractDA = new ArrayList<>();\n        nodeTemplateWithAbstractDA.add(topologyTemplate.getNodeTemplate(\"shetland_pony\"));\n\n        List<TNodeTemplate> nodesWithAbstractDA = DASpecification.getNodeTemplatesWithAbstractDAs(topologyTemplate);\n\n        assertEquals(nodeTemplateWithAbstractDA, nodesWithAbstractDA);\n    }", "signature": "void getNodeTemplatesWithAbstractDAs()", "full_signature": "@Test public void getNodeTemplatesWithAbstractDAs()", "class_method_signature": "DASpecificationTest.getNodeTemplatesWithAbstractDAs()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getTopologyTemplate", "getElement", "add", "getNodeTemplate", "getNodeTemplatesWithAbstractDAs", "assertEquals"]}, "focal_class": {"identifier": "DASpecification", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "signature": "List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "full_signature": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeOfDA", "parameters": "(TDeploymentArtifact deploymentArtifact)", "modifiers": "public static", "return": "TArtifactType", "signature": "TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "full_signature": "public static TArtifactType getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "class_method_signature": "DASpecification.getArtifactTypeOfDA(TDeploymentArtifact deploymentArtifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifactTypeHierarchy", "parameters": "(TArtifactType artifactType)", "modifiers": "public static", "return": "List<TArtifactType>", "signature": "List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "full_signature": "public static List<TArtifactType> getArtifactTypeHierarchy(TArtifactType artifactType)", "class_method_signature": "DASpecification.getArtifactTypeHierarchy(TArtifactType artifactType)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "Map<TRelationshipTemplate, TNodeTemplate>", "signature": "Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static Map<TRelationshipTemplate, TNodeTemplate> getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAAndTheDirectlyConnectedNode(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getNodesWithSuitableConcreteDAs", "parameters": "(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "TNodeTemplate", "signature": "TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "full_signature": "public static TNodeTemplate getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodesWithSuitableConcreteDAs(TNodeTemplate nodeTemplate, TDeploymentArtifact deploymentArtifact, TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false}, {"identifier": "getSuitableConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "modifiers": "public static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "full_signature": "public static TDeploymentArtifact getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "class_method_signature": "DASpecification.getSuitableConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, TNodeTemplate nodeTemplate)", "testcase": false, "constructor": false}, {"identifier": "getmatchingNodeTypeImplementations", "parameters": "(QName nodeTypeQName)", "modifiers": "private static", "return": "List<TNodeTypeImplementation>", "signature": "List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "full_signature": "private static List<TNodeTypeImplementation> getmatchingNodeTypeImplementations(QName nodeTypeQName)", "class_method_signature": "DASpecification.getmatchingNodeTypeImplementations(QName nodeTypeQName)", "testcase": false, "constructor": false}, {"identifier": "getConcreteDA", "parameters": "(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "modifiers": "private static", "return": "TDeploymentArtifact", "signature": "TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "full_signature": "private static TDeploymentArtifact getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "class_method_signature": "DASpecification.getConcreteDA(TDeploymentArtifact abstractDeploymentArtifact, List<TDeploymentArtifact> candidates)", "testcase": false, "constructor": false}, {"identifier": "getBasisRelationshipType", "parameters": "(QName relationshipTypeQName)", "modifiers": "private static", "return": "TRelationshipType", "signature": "TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "full_signature": "private static TRelationshipType getBasisRelationshipType(QName relationshipTypeQName)", "class_method_signature": "DASpecification.getBasisRelationshipType(QName relationshipTypeQName)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/driverspecificationandinjection/DASpecification.java"}, "focal_method": {"identifier": "getNodeTemplatesWithAbstractDAs", "parameters": "(TTopologyTemplate topologyTemplate)", "modifiers": "public static", "return": "List<TNodeTemplate>", "body": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate) {\n        List<TNodeTemplate> nodeTemplates = topologyTemplate.getNodeTemplates();\n        List<TNodeTemplate> nodeTemplatesWithAbstractDA = nodeTemplates.stream()\n            .filter(nt -> nt.getDeploymentArtifacts() != null)\n            .filter(nt -> nt.getDeploymentArtifacts().getDeploymentArtifact().stream()\n                .anyMatch(da -> getArtifactTypeOfDA(da).getAbstract() == TBoolean.YES))\n            .collect(Collectors.toList());\n\n        return nodeTemplatesWithAbstractDA;\n    }", "signature": "List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "full_signature": "public static List<TNodeTemplate> getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "class_method_signature": "DASpecification.getNodeTemplatesWithAbstractDAs(TTopologyTemplate topologyTemplate)", "testcase": false, "constructor": false, "invocations": ["getNodeTemplates", "collect", "filter", "filter", "stream", "getDeploymentArtifacts", "anyMatch", "stream", "getDeploymentArtifact", "getDeploymentArtifacts", "getAbstract", "getArtifactTypeOfDA", "toList"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}