{"test_class": {"identifier": "NotificationMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "NotificationMapper notificationMapper;", "modifier": "", "type": "NotificationMapper", "declarator": "notificationMapper", "var_name": "notificationMapper"}, {"original_string": "@Mocked\n    Result mockResult;", "modifier": "@Mocked", "type": "Result", "declarator": "mockResult", "var_name": "mockResult"}], "file": "streams/notification/src/test/java/com/hortonworks/streamline/streams/notification/store/hbase/mappers/NotificationMapperTest.java"}, "test_case": {"identifier": "testTableMutations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTableMutations() throws Exception {\n        Map<String, Object> fieldAndValues = new HashMap<>();\n        fieldAndValues.put(\"one\", \"A\");\n        Notification notification = new NotificationImpl.Builder(fieldAndValues)\n                .id(\"notification-id\")\n                .dataSourceIds(Arrays.asList(\"dsrcid-1\"))\n                .eventIds(Arrays.asList(\"eventid-1\"))\n                .notifierName(\"test-notifier\")\n                .ruleId(\"rule-1\")\n                .build();\n\n        List<TableMutation> tms = notificationMapper.tableMutations(notification);\n\n        System.out.println(tms);\n\n        assertEquals(1, tms.size());\n        TableMutation tm = tms.get(0);\n\n        assertEquals(\"Notification\", tm.tableName());\n        assertEquals(1, tm.updates().size());\n        Put put = tm.updates().get(0);\n        assertTrue(put.has(\"f\".getBytes(), \"one\".getBytes(), new Serializer().serialize(\"A\")));\n        assertTrue(put.has(\"d\".getBytes(), \"dsrcid-1\".getBytes(), \"1\".getBytes()));\n        assertTrue(put.has(\"e\".getBytes(), \"eventid-1\".getBytes(), \"1\".getBytes()));\n        assertTrue(put.has(\"nn\".getBytes(), \"test-notifier\".getBytes(), \"1\".getBytes()));\n        assertTrue(put.has(\"r\".getBytes(), \"rule-1\".getBytes(), \"1\".getBytes()));\n        assertTrue(put.has(\"s\".getBytes(), \"qs\".getBytes(), \"NEW\".getBytes()));\n    }", "signature": "void testTableMutations()", "full_signature": "@Test public void testTableMutations()", "class_method_signature": "NotificationMapperTest.testTableMutations()", "testcase": true, "constructor": false, "invocations": ["put", "build", "ruleId", "notifierName", "eventIds", "dataSourceIds", "id", "asList", "asList", "tableMutations", "println", "assertEquals", "size", "get", "assertEquals", "tableName", "assertEquals", "size", "updates", "get", "updates", "assertTrue", "has", "getBytes", "getBytes", "serialize", "assertTrue", "has", "getBytes", "getBytes", "getBytes", "assertTrue", "has", "getBytes", "getBytes", "getBytes", "assertTrue", "has", "getBytes", "getBytes", "getBytes", "assertTrue", "has", "getBytes", "getBytes", "getBytes", "assertTrue", "has", "getBytes", "getBytes", "getBytes"]}, "focal_class": {"identifier": "NotificationMapper", "superclass": "extends AbstractNotificationMapper", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NotificationMapper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NotificationMapper.class)", "var_name": "LOG"}, {"original_string": "private final List<NotificationIndexMapper> indexMappers;", "modifier": "private final", "type": "List<NotificationIndexMapper>", "declarator": "indexMappers", "var_name": "indexMappers"}, {"original_string": "private static final String TABLE_NAME = \"Notification\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"Notification\"", "var_name": "TABLE_NAME"}], "methods": [{"identifier": "NotificationMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " NotificationMapper()", "full_signature": "public  NotificationMapper()", "class_method_signature": "NotificationMapper.NotificationMapper()", "testcase": false, "constructor": true}, {"identifier": "NotificationMapper", "parameters": "(List<NotificationIndexMapper> indexMappers)", "modifiers": "public", "return": "", "signature": " NotificationMapper(List<NotificationIndexMapper> indexMappers)", "full_signature": "public  NotificationMapper(List<NotificationIndexMapper> indexMappers)", "class_method_signature": "NotificationMapper.NotificationMapper(List<NotificationIndexMapper> indexMappers)", "testcase": false, "constructor": true}, {"identifier": "tableMutations", "parameters": "(Notification notification)", "modifiers": "@Override public", "return": "List<TableMutation>", "signature": "List<TableMutation> tableMutations(Notification notification)", "full_signature": "@Override public List<TableMutation> tableMutations(Notification notification)", "class_method_signature": "NotificationMapper.tableMutations(Notification notification)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(Notification notification, Notification.Status status)", "modifiers": "public", "return": "List<TableMutation>", "signature": "List<TableMutation> status(Notification notification, Notification.Status status)", "full_signature": "public List<TableMutation> status(Notification notification, Notification.Status status)", "class_method_signature": "NotificationMapper.status(Notification notification, Notification.Status status)", "testcase": false, "constructor": false}, {"identifier": "getRowKeys", "parameters": "(Notification notification)", "modifiers": "@Override protected", "return": "List<byte[]>", "signature": "List<byte[]> getRowKeys(Notification notification)", "full_signature": "@Override protected List<byte[]> getRowKeys(Notification notification)", "class_method_signature": "NotificationMapper.getRowKeys(Notification notification)", "testcase": false, "constructor": false}, {"identifier": "getNotificationId", "parameters": "(Result result)", "modifiers": "@Override protected", "return": "String", "signature": "String getNotificationId(Result result)", "full_signature": "@Override protected String getNotificationId(Result result)", "class_method_signature": "NotificationMapper.getNotificationId(Result result)", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTableName()", "full_signature": "@Override public String getTableName()", "class_method_signature": "NotificationMapper.getTableName()", "testcase": false, "constructor": false}], "file": "streams/notification/src/main/java/com/hortonworks/streamline/streams/notification/store/hbase/mappers/NotificationMapper.java"}, "focal_method": {"identifier": "tableMutations", "parameters": "(Notification notification)", "modifiers": "@Override public", "return": "List<TableMutation>", "body": "@Override\n    public List<TableMutation> tableMutations(Notification notification) {\n        List<TableMutation> tableMutations = super.tableMutations(notification);\n        for (NotificationIndexMapper im : indexMappers) {\n            tableMutations.addAll(im.tableMutations(notification));\n        }\n        LOG.trace(\"Notification {}, tableMutations {}\", notification, tableMutations);\n        return tableMutations;\n    }", "signature": "List<TableMutation> tableMutations(Notification notification)", "full_signature": "@Override public List<TableMutation> tableMutations(Notification notification)", "class_method_signature": "NotificationMapper.tableMutations(Notification notification)", "testcase": false, "constructor": false, "invocations": ["tableMutations", "addAll", "tableMutations", "trace"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}