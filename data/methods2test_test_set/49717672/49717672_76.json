{"test_class": {"identifier": "EntryTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/cgm/nsfollow/messages/EntryTest.java"}, "test_case": {"identifier": "getTimeStamp_sysTimeParser_DifferentTime_Iso", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTimeStamp_sysTimeParser_DifferentTime_Iso() {\n        // :: Setup\n        Entry entry = new Entry();\n        entry.sysTime = \"2019-06-29T19:52:01.456Z\";\n        entry.dateString = \"XXX\";\n\n        // :: Act\n        long timeStamp = entry.getTimeStamp();\n\n        // :: Verify\n        assertThat(timeStamp).isEqualTo(1561837921000L);\n        assertThat(new Date(timeStamp).toString()).isEqualTo(\"Sat Jun 29 19:52:01 UTC 2019\");\n    }", "signature": "void getTimeStamp_sysTimeParser_DifferentTime_Iso()", "full_signature": "@Test public void getTimeStamp_sysTimeParser_DifferentTime_Iso()", "class_method_signature": "EntryTest.getTimeStamp_sysTimeParser_DifferentTime_Iso()", "testcase": true, "constructor": false, "invocations": ["getTimeStamp", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "Entry", "superclass": "extends BaseMessage", "interfaces": "", "fields": [{"original_string": "@Expose\n    public String _id;", "modifier": "@Expose\n    public", "type": "String", "declarator": "_id", "var_name": "_id"}, {"original_string": "@Expose\n    public double date;", "modifier": "@Expose\n    public", "type": "double", "declarator": "date", "var_name": "date"}, {"original_string": "@Expose\n    public String dateString;", "modifier": "@Expose\n    public", "type": "String", "declarator": "dateString", "var_name": "dateString"}, {"original_string": "@Expose\n    public double delta;", "modifier": "@Expose\n    public", "type": "double", "declarator": "delta", "var_name": "delta"}, {"original_string": "@Expose\n    public String device;", "modifier": "@Expose\n    public", "type": "String", "declarator": "device", "var_name": "device"}, {"original_string": "@Expose\n    public String direction;", "modifier": "@Expose\n    public", "type": "String", "declarator": "direction", "var_name": "direction"}, {"original_string": "@Expose\n    public double filtered;", "modifier": "@Expose\n    public", "type": "double", "declarator": "filtered", "var_name": "filtered"}, {"original_string": "@Expose\n    public int noise;", "modifier": "@Expose\n    public", "type": "int", "declarator": "noise", "var_name": "noise"}, {"original_string": "@Expose\n    public int rssi;", "modifier": "@Expose\n    public", "type": "int", "declarator": "rssi", "var_name": "rssi"}, {"original_string": "@Expose\n    public int sgv;", "modifier": "@Expose\n    public", "type": "int", "declarator": "sgv", "var_name": "sgv"}, {"original_string": "@Expose\n    public String sysTime;", "modifier": "@Expose\n    public", "type": "String", "declarator": "sysTime", "var_name": "sysTime"}, {"original_string": "@Expose\n    public String type;", "modifier": "@Expose\n    public", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "@Expose\n    public double unfiltered;", "modifier": "@Expose\n    public", "type": "double", "declarator": "unfiltered", "var_name": "unfiltered"}], "methods": [{"identifier": "getTimeStamp", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeStamp()", "full_signature": "public long getTimeStamp()", "class_method_signature": "Entry.getTimeStamp()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/cgm/nsfollow/messages/Entry.java"}, "focal_method": {"identifier": "getTimeStamp", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getTimeStamp() {\n        if (date > 1000000) {\n            return Math.round(date);\n        }\n        if (sysTime != null) {\n            try {\n                final Date date = DateUtil.tolerantFromISODateString(sysTime);\n                return date.getTime();\n            } catch (Exception e) {\n                //\n            }\n        }\n        if (dateString != null) {\n            try {\n                final Date date = DateUtil.tolerantFromISODateString(dateString);\n                return date.getTime();\n            } catch (Exception e) {\n                //\n            }\n        }\n        return -1;\n    }", "signature": "long getTimeStamp()", "full_signature": "public long getTimeStamp()", "class_method_signature": "Entry.getTimeStamp()", "testcase": false, "constructor": false, "invocations": ["round", "tolerantFromISODateString", "getTime", "tolerantFromISODateString", "getTime"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}