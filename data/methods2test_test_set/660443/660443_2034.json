{"test_class": {"identifier": "ConvertorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "storage/libiocml/src/test/java/org/openscience/cdk/libio/cml/ConvertorTest.java"}, "test_case": {"identifier": "testCdkBondToCMLBond_Hatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCdkBondToCMLBond_Hatch() throws IOException {\n\n        IChemObjectBuilder builder = DefaultChemObjectBuilder.getInstance();\n        IBond bond = builder.newInstance(IBond.class);\n        bond.setOrder(IBond.Order.SINGLE);\n        bond.setStereo(IBond.Stereo.DOWN);\n\n        Convertor convertor = new Convertor(true, null);\n        CMLBond cmlBond = convertor.cdkBondToCMLBond(bond);\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n        Serializer serializer = new Serializer(out, \"UTF-8\");\n\n        serializer.write(new Document(cmlBond));\n\n        out.close();\n\n        String expected = \"<bondStereo dictRef=\\\"cml:H\\\">H</bondStereo>\";\n        String actual = new String(out.toByteArray());\n\n        Assert.assertTrue(actual.contains(expected));\n\n    }", "signature": "void testCdkBondToCMLBond_Hatch()", "full_signature": "@Test public void testCdkBondToCMLBond_Hatch()", "class_method_signature": "ConvertorTest.testCdkBondToCMLBond_Hatch()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "setOrder", "setStereo", "cdkBondToCMLBond", "write", "close", "toByteArray", "assertTrue", "contains"]}, "focal_class": {"identifier": "Convertor", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String          NS_CML           = \"http://www.xml-cml.org/schema\";", "modifier": "public final static", "type": "String", "declarator": "NS_CML           = \"http://www.xml-cml.org/schema\"", "var_name": "NS_CML"}, {"original_string": "private static ILoggingTool         logger           = LoggingToolFactory.createLoggingTool(Convertor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger           = LoggingToolFactory.createLoggingTool(Convertor.class)", "var_name": "logger"}, {"original_string": "private final static String         CUSTOMIZERS_LIST = \"libio-cml-customizers.set\";", "modifier": "private final static", "type": "String", "declarator": "CUSTOMIZERS_LIST = \"libio-cml-customizers.set\"", "var_name": "CUSTOMIZERS_LIST"}, {"original_string": "private Map<String, ICMLCustomizer> customizers      = null;", "modifier": "private", "type": "Map<String, ICMLCustomizer>", "declarator": "customizers      = null", "var_name": "customizers"}, {"original_string": "private boolean                     useCMLIDs;", "modifier": "private", "type": "boolean", "declarator": "useCMLIDs", "var_name": "useCMLIDs"}, {"original_string": "private String                      prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}], "methods": [{"identifier": "Convertor", "parameters": "(boolean useCMLIDs, String prefix)", "modifiers": "public", "return": "", "signature": " Convertor(boolean useCMLIDs, String prefix)", "full_signature": "public  Convertor(boolean useCMLIDs, String prefix)", "class_method_signature": "Convertor.Convertor(boolean useCMLIDs, String prefix)", "testcase": false, "constructor": true}, {"identifier": "registerCustomizer", "parameters": "(ICMLCustomizer customizer)", "modifiers": "public", "return": "void", "signature": "void registerCustomizer(ICMLCustomizer customizer)", "full_signature": "public void registerCustomizer(ICMLCustomizer customizer)", "class_method_signature": "Convertor.registerCustomizer(ICMLCustomizer customizer)", "testcase": false, "constructor": false}, {"identifier": "setupCustomizers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupCustomizers()", "full_signature": "private void setupCustomizers()", "class_method_signature": "Convertor.setupCustomizers()", "testcase": false, "constructor": false}, {"identifier": "cdkChemFileToCMLList", "parameters": "(IChemFile file)", "modifiers": "public", "return": "CMLCml", "signature": "CMLCml cdkChemFileToCMLList(IChemFile file)", "full_signature": "public CMLCml cdkChemFileToCMLList(IChemFile file)", "class_method_signature": "Convertor.cdkChemFileToCMLList(IChemFile file)", "testcase": false, "constructor": false}, {"identifier": "cdkChemFileToCMLList", "parameters": "(IChemFile file, boolean setIDs)", "modifiers": "private", "return": "CMLCml", "signature": "CMLCml cdkChemFileToCMLList(IChemFile file, boolean setIDs)", "full_signature": "private CMLCml cdkChemFileToCMLList(IChemFile file, boolean setIDs)", "class_method_signature": "Convertor.cdkChemFileToCMLList(IChemFile file, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkChemSequenceToCMLList", "parameters": "(IChemSequence sequence)", "modifiers": "public", "return": "CMLList", "signature": "CMLList cdkChemSequenceToCMLList(IChemSequence sequence)", "full_signature": "public CMLList cdkChemSequenceToCMLList(IChemSequence sequence)", "class_method_signature": "Convertor.cdkChemSequenceToCMLList(IChemSequence sequence)", "testcase": false, "constructor": false}, {"identifier": "cdkChemSequenceToCMLList", "parameters": "(IChemSequence sequence, boolean setIDs)", "modifiers": "private", "return": "CMLList", "signature": "CMLList cdkChemSequenceToCMLList(IChemSequence sequence, boolean setIDs)", "full_signature": "private CMLList cdkChemSequenceToCMLList(IChemSequence sequence, boolean setIDs)", "class_method_signature": "Convertor.cdkChemSequenceToCMLList(IChemSequence sequence, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkChemModelToCMLList", "parameters": "(IChemModel model)", "modifiers": "public", "return": "CMLList", "signature": "CMLList cdkChemModelToCMLList(IChemModel model)", "full_signature": "public CMLList cdkChemModelToCMLList(IChemModel model)", "class_method_signature": "Convertor.cdkChemModelToCMLList(IChemModel model)", "testcase": false, "constructor": false}, {"identifier": "cdkChemModelToCMLList", "parameters": "(IChemModel model, boolean setIDs)", "modifiers": "private", "return": "CMLList", "signature": "CMLList cdkChemModelToCMLList(IChemModel model, boolean setIDs)", "full_signature": "private CMLList cdkChemModelToCMLList(IChemModel model, boolean setIDs)", "class_method_signature": "Convertor.cdkChemModelToCMLList(IChemModel model, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionSchemeToCMLReactionSchemeAndMoleculeList", "parameters": "(IReactionScheme cdkScheme)", "modifiers": "public", "return": "CMLCml", "signature": "CMLCml cdkReactionSchemeToCMLReactionSchemeAndMoleculeList(IReactionScheme cdkScheme)", "full_signature": "public CMLCml cdkReactionSchemeToCMLReactionSchemeAndMoleculeList(IReactionScheme cdkScheme)", "class_method_signature": "Convertor.cdkReactionSchemeToCMLReactionSchemeAndMoleculeList(IReactionScheme cdkScheme)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionSchemeToCMLReactionScheme", "parameters": "(IReactionScheme cdkScheme)", "modifiers": "public", "return": "CMLReactionScheme", "signature": "CMLReactionScheme cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme)", "full_signature": "public CMLReactionScheme cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme)", "class_method_signature": "Convertor.cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionSchemeToCMLReactionScheme", "parameters": "(IReactionScheme cdkScheme, boolean setIDs)", "modifiers": "private", "return": "CMLReactionScheme", "signature": "CMLReactionScheme cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme, boolean setIDs)", "full_signature": "private CMLReactionScheme cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme, boolean setIDs)", "class_method_signature": "Convertor.cdkReactionSchemeToCMLReactionScheme(IReactionScheme cdkScheme, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionToCMLReactionStep", "parameters": "(IReaction reaction)", "modifiers": "public", "return": "CMLReactionStep", "signature": "CMLReactionStep cdkReactionToCMLReactionStep(IReaction reaction)", "full_signature": "public CMLReactionStep cdkReactionToCMLReactionStep(IReaction reaction)", "class_method_signature": "Convertor.cdkReactionToCMLReactionStep(IReaction reaction)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionToCMLReactionStep", "parameters": "(IReaction reaction, boolean setIDs)", "modifiers": "private", "return": "CMLReactionStep", "signature": "CMLReactionStep cdkReactionToCMLReactionStep(IReaction reaction, boolean setIDs)", "full_signature": "private CMLReactionStep cdkReactionToCMLReactionStep(IReaction reaction, boolean setIDs)", "class_method_signature": "Convertor.cdkReactionToCMLReactionStep(IReaction reaction, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionSetToCMLReactionList", "parameters": "(IReactionSet reactionSet)", "modifiers": "public", "return": "CMLReactionList", "signature": "CMLReactionList cdkReactionSetToCMLReactionList(IReactionSet reactionSet)", "full_signature": "public CMLReactionList cdkReactionSetToCMLReactionList(IReactionSet reactionSet)", "class_method_signature": "Convertor.cdkReactionSetToCMLReactionList(IReactionSet reactionSet)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionSetToCMLReactionList", "parameters": "(IReactionSet reactionSet, boolean setIDs)", "modifiers": "private", "return": "CMLReactionList", "signature": "CMLReactionList cdkReactionSetToCMLReactionList(IReactionSet reactionSet, boolean setIDs)", "full_signature": "private CMLReactionList cdkReactionSetToCMLReactionList(IReactionSet reactionSet, boolean setIDs)", "class_method_signature": "Convertor.cdkReactionSetToCMLReactionList(IReactionSet reactionSet, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomContainerSetToCMLList", "parameters": "(IAtomContainerSet moleculeSet)", "modifiers": "public", "return": "CMLMoleculeList", "signature": "CMLMoleculeList cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet)", "full_signature": "public CMLMoleculeList cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet)", "class_method_signature": "Convertor.cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomContainerSetToCMLList", "parameters": "(IAtomContainerSet moleculeSet, boolean setIDs)", "modifiers": "private", "return": "CMLMoleculeList", "signature": "CMLMoleculeList cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet, boolean setIDs)", "full_signature": "private CMLMoleculeList cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet, boolean setIDs)", "class_method_signature": "Convertor.cdkAtomContainerSetToCMLList(IAtomContainerSet moleculeSet, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionToCMLReaction", "parameters": "(IReaction reaction)", "modifiers": "public", "return": "CMLReaction", "signature": "CMLReaction cdkReactionToCMLReaction(IReaction reaction)", "full_signature": "public CMLReaction cdkReactionToCMLReaction(IReaction reaction)", "class_method_signature": "Convertor.cdkReactionToCMLReaction(IReaction reaction)", "testcase": false, "constructor": false}, {"identifier": "cdkReactionToCMLReaction", "parameters": "(IReaction reaction, boolean setIDs)", "modifiers": "private", "return": "CMLReaction", "signature": "CMLReaction cdkReactionToCMLReaction(IReaction reaction, boolean setIDs)", "full_signature": "private CMLReaction cdkReactionToCMLReaction(IReaction reaction, boolean setIDs)", "class_method_signature": "Convertor.cdkReactionToCMLReaction(IReaction reaction, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkCrystalToCMLMolecule", "parameters": "(ICrystal crystal)", "modifiers": "public", "return": "CMLMolecule", "signature": "CMLMolecule cdkCrystalToCMLMolecule(ICrystal crystal)", "full_signature": "public CMLMolecule cdkCrystalToCMLMolecule(ICrystal crystal)", "class_method_signature": "Convertor.cdkCrystalToCMLMolecule(ICrystal crystal)", "testcase": false, "constructor": false}, {"identifier": "cdkCrystalToCMLMolecule", "parameters": "(ICrystal crystal, boolean setIDs)", "modifiers": "private", "return": "CMLMolecule", "signature": "CMLMolecule cdkCrystalToCMLMolecule(ICrystal crystal, boolean setIDs)", "full_signature": "private CMLMolecule cdkCrystalToCMLMolecule(ICrystal crystal, boolean setIDs)", "class_method_signature": "Convertor.cdkCrystalToCMLMolecule(ICrystal crystal, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkPDBPolymerToCMLMolecule", "parameters": "(IPDBPolymer pdbPolymer)", "modifiers": "public", "return": "CMLMolecule", "signature": "CMLMolecule cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer)", "full_signature": "public CMLMolecule cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer)", "class_method_signature": "Convertor.cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer)", "testcase": false, "constructor": false}, {"identifier": "cdkPDBPolymerToCMLMolecule", "parameters": "(IPDBPolymer pdbPolymer, boolean setIDs)", "modifiers": "private", "return": "CMLMolecule", "signature": "CMLMolecule cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer, boolean setIDs)", "full_signature": "private CMLMolecule cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer, boolean setIDs)", "class_method_signature": "Convertor.cdkPDBPolymerToCMLMolecule(IPDBPolymer pdbPolymer, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkMonomerToCMLMolecule", "parameters": "(IMonomer monomer)", "modifiers": "public", "return": "CMLMolecule", "signature": "CMLMolecule cdkMonomerToCMLMolecule(IMonomer monomer)", "full_signature": "public CMLMolecule cdkMonomerToCMLMolecule(IMonomer monomer)", "class_method_signature": "Convertor.cdkMonomerToCMLMolecule(IMonomer monomer)", "testcase": false, "constructor": false}, {"identifier": "cdkMonomerToCMLMolecule", "parameters": "(IMonomer monomer, boolean setIDs)", "modifiers": "private", "return": "CMLMolecule", "signature": "CMLMolecule cdkMonomerToCMLMolecule(IMonomer monomer, boolean setIDs)", "full_signature": "private CMLMolecule cdkMonomerToCMLMolecule(IMonomer monomer, boolean setIDs)", "class_method_signature": "Convertor.cdkMonomerToCMLMolecule(IMonomer monomer, boolean setIDs)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomContainerToCMLMolecule", "parameters": "(IAtomContainer structure)", "modifiers": "public", "return": "CMLMolecule", "signature": "CMLMolecule cdkAtomContainerToCMLMolecule(IAtomContainer structure)", "full_signature": "public CMLMolecule cdkAtomContainerToCMLMolecule(IAtomContainer structure)", "class_method_signature": "Convertor.cdkAtomContainerToCMLMolecule(IAtomContainer structure)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomContainerToCMLMolecule", "parameters": "(IAtomContainer structure, boolean setIDs, boolean isRef)", "modifiers": "private", "return": "CMLMolecule", "signature": "CMLMolecule cdkAtomContainerToCMLMolecule(IAtomContainer structure, boolean setIDs, boolean isRef)", "full_signature": "private CMLMolecule cdkAtomContainerToCMLMolecule(IAtomContainer structure, boolean setIDs, boolean isRef)", "class_method_signature": "Convertor.cdkAtomContainerToCMLMolecule(IAtomContainer structure, boolean setIDs, boolean isRef)", "testcase": false, "constructor": false}, {"identifier": "addDictRef", "parameters": "(IChemObject object, CMLElement cmlElement)", "modifiers": "private", "return": "boolean", "signature": "boolean addDictRef(IChemObject object, CMLElement cmlElement)", "full_signature": "private boolean addDictRef(IChemObject object, CMLElement cmlElement)", "class_method_signature": "Convertor.addDictRef(IChemObject object, CMLElement cmlElement)", "testcase": false, "constructor": false}, {"identifier": "addAtomID", "parameters": "(IAtom cdkAtom, CMLAtom cmlAtom)", "modifiers": "private", "return": "boolean", "signature": "boolean addAtomID(IAtom cdkAtom, CMLAtom cmlAtom)", "full_signature": "private boolean addAtomID(IAtom cdkAtom, CMLAtom cmlAtom)", "class_method_signature": "Convertor.addAtomID(IAtom cdkAtom, CMLAtom cmlAtom)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomToCMLAtom", "parameters": "(IAtom cdkAtom)", "modifiers": "public", "return": "CMLAtom", "signature": "CMLAtom cdkAtomToCMLAtom(IAtom cdkAtom)", "full_signature": "public CMLAtom cdkAtomToCMLAtom(IAtom cdkAtom)", "class_method_signature": "Convertor.cdkAtomToCMLAtom(IAtom cdkAtom)", "testcase": false, "constructor": false}, {"identifier": "cdkAtomToCMLAtom", "parameters": "(IAtomContainer container, IAtom cdkAtom)", "modifiers": "public", "return": "CMLAtom", "signature": "CMLAtom cdkAtomToCMLAtom(IAtomContainer container, IAtom cdkAtom)", "full_signature": "public CMLAtom cdkAtomToCMLAtom(IAtomContainer container, IAtom cdkAtom)", "class_method_signature": "Convertor.cdkAtomToCMLAtom(IAtomContainer container, IAtom cdkAtom)", "testcase": false, "constructor": false}, {"identifier": "cdkBondToCMLBond", "parameters": "(IBond cdkBond)", "modifiers": "public", "return": "CMLBond", "signature": "CMLBond cdkBondToCMLBond(IBond cdkBond)", "full_signature": "public CMLBond cdkBondToCMLBond(IBond cdkBond)", "class_method_signature": "Convertor.cdkBondToCMLBond(IBond cdkBond)", "testcase": false, "constructor": false}, {"identifier": "writeProperties", "parameters": "(IChemObject object, CMLElement cmlElement)", "modifiers": "private", "return": "void", "signature": "void writeProperties(IChemObject object, CMLElement cmlElement)", "full_signature": "private void writeProperties(IChemObject object, CMLElement cmlElement)", "class_method_signature": "Convertor.writeProperties(IChemObject object, CMLElement cmlElement)", "testcase": false, "constructor": false}, {"identifier": "mapFractionalCoordsToCML", "parameters": "(CMLAtom cmlAtom, IAtom cdkAtom)", "modifiers": "private", "return": "void", "signature": "void mapFractionalCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "full_signature": "private void mapFractionalCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "class_method_signature": "Convertor.mapFractionalCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "testcase": false, "constructor": false}, {"identifier": "map3DCoordsToCML", "parameters": "(CMLAtom cmlAtom, IAtom cdkAtom)", "modifiers": "private", "return": "void", "signature": "void map3DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "full_signature": "private void map3DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "class_method_signature": "Convertor.map3DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "testcase": false, "constructor": false}, {"identifier": "map2DCoordsToCML", "parameters": "(CMLAtom cmlAtom, IAtom cdkAtom)", "modifiers": "private", "return": "void", "signature": "void map2DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "full_signature": "private void map2DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "class_method_signature": "Convertor.map2DCoordsToCML(CMLAtom cmlAtom, IAtom cdkAtom)", "testcase": false, "constructor": false}, {"identifier": "checkPrefix", "parameters": "(CMLElement element)", "modifiers": "private", "return": "void", "signature": "void checkPrefix(CMLElement element)", "full_signature": "private void checkPrefix(CMLElement element)", "class_method_signature": "Convertor.checkPrefix(CMLElement element)", "testcase": false, "constructor": false}], "file": "storage/libiocml/src/main/java/org/openscience/cdk/libio/cml/Convertor.java"}, "focal_method": {"identifier": "cdkBondToCMLBond", "parameters": "(IBond cdkBond)", "modifiers": "public", "return": "CMLBond", "body": "public CMLBond cdkBondToCMLBond(IBond cdkBond) {\n        CMLBond cmlBond = new CMLBond();\n        this.checkPrefix(cmlBond);\n        if (cdkBond.getID() == null || cdkBond.getID().length() == 0) {\n            cmlBond.setId(\"b\" + cdkBond.hashCode());\n        } else {\n            cmlBond.setId(cdkBond.getID());\n        }\n\n        String[] atomRefArray = new String[cdkBond.getAtomCount()];\n        for (int i = 0; i < cdkBond.getAtomCount(); i++) {\n            String atomID = cdkBond.getAtom(i).getID();\n            if (atomID == null || atomID.length() == 0) {\n                atomRefArray[i] = \"a\" + Integer.valueOf(cdkBond.getAtom(i).hashCode()).toString();\n            } else {\n                atomRefArray[i] = atomID;\n            }\n        }\n        if (atomRefArray.length == 2) {\n            cmlBond.setAtomRefs2(atomRefArray);\n        } else {\n            cmlBond.setAtomRefs(atomRefArray);\n        }\n\n        IBond.Order border = cdkBond.getOrder();\n        if (border == Order.SINGLE) {\n            cmlBond.setOrder(\"S\");\n        } else if (border == Order.DOUBLE) {\n            cmlBond.setOrder(\"D\");\n        } else if (border == Order.TRIPLE) {\n            cmlBond.setOrder(\"T\");\n        } else {\n            CMLScalar scalar = new CMLScalar();\n            this.checkPrefix(scalar);\n            //            scalar.setDataType(\"xsd:float\");\n            scalar.setDictRef(\"cdk:bondOrder\");\n            scalar.setTitle(\"order\");\n            scalar.setValue(cdkBond.getOrder().numeric());\n            cmlBond.appendChild(scalar);\n        }\n        if (cdkBond.getFlag(CDKConstants.ISAROMATIC)) {\n            CMLBondType bType = new CMLBondType();\n            bType.setDictRef(\"cdk:aromaticBond\");\n            cmlBond.appendChild(bType);\n        }\n\n        if (cdkBond.getStereo() == IBond.Stereo.UP || cdkBond.getStereo() == IBond.Stereo.DOWN) {\n            CMLBondStereo bondStereo = new CMLBondStereo();\n            this.checkPrefix(bondStereo);\n            if (cdkBond.getStereo() == IBond.Stereo.UP) {\n                bondStereo.setDictRef(\"cml:W\");\n                bondStereo.setXMLContent(\"W\");\n            } else {\n                bondStereo.setDictRef(\"cml:H\");\n                bondStereo.setXMLContent(\"H\");\n            }\n            cmlBond.appendChild(bondStereo);\n        }\n        if (cdkBond.getProperties().size() > 0) writeProperties(cdkBond, cmlBond);\n\n        Iterator<String> elements = customizers.keySet().iterator();\n        while (elements.hasNext()) {\n            ICMLCustomizer customizer = customizers.get(elements.next());\n            try {\n                customizer.customize(cdkBond, cmlBond);\n            } catch (Exception exception) {\n                logger.error(\"Error while customizing CML output with customizer: \", customizer.getClass().getName());\n                logger.debug(exception);\n            }\n        }\n\n        return cmlBond;\n    }", "signature": "CMLBond cdkBondToCMLBond(IBond cdkBond)", "full_signature": "public CMLBond cdkBondToCMLBond(IBond cdkBond)", "class_method_signature": "Convertor.cdkBondToCMLBond(IBond cdkBond)", "testcase": false, "constructor": false, "invocations": ["checkPrefix", "getID", "length", "getID", "setId", "hashCode", "setId", "getID", "getAtomCount", "getAtomCount", "getID", "getAtom", "length", "toString", "valueOf", "hashCode", "getAtom", "setAtomRefs2", "setAtomRefs", "getOrder", "setOrder", "setOrder", "setOrder", "checkPrefix", "setDictRef", "setTitle", "setValue", "numeric", "getOrder", "appendChild", "getFlag", "setDictRef", "appendChild", "getStereo", "getStereo", "checkPrefix", "getStereo", "setDictRef", "setXMLContent", "setDictRef", "setXMLContent", "appendChild", "size", "getProperties", "writeProperties", "iterator", "keySet", "hasNext", "get", "next", "customize", "error", "getName", "getClass", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}