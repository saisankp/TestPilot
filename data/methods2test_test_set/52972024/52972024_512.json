{"test_class": {"identifier": "EmbeddedSensorReceiverTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private ITime timeMock;", "modifier": "private", "type": "ITime", "declarator": "timeMock", "var_name": "timeMock"}, {"original_string": "private ITimer timerMock;", "modifier": "private", "type": "ITimer", "declarator": "timerMock", "var_name": "timerMock"}, {"original_string": "private IEmbeddedSensorStrategy<?> sensorStrategyMock;", "modifier": "private", "type": "IEmbeddedSensorStrategy<?>", "declarator": "sensorStrategyMock", "var_name": "sensorStrategyMock"}, {"original_string": "private IResolveDependencyStrategy periodStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "periodStrategyMock", "var_name": "periodStrategyMock"}, {"original_string": "private IEmbeddedSensorObservationPeriod periods[];", "modifier": "private", "type": "IEmbeddedSensorObservationPeriod", "declarator": "periods[]", "var_name": "periods"}, {"original_string": "private IMessageProcessor processors[];", "modifier": "private", "type": "IMessageProcessor", "declarator": "processors[]", "var_name": "processors"}, {"original_string": "private IMessageBusHandler messageBusHandlerMock;", "modifier": "private", "type": "IMessageBusHandler", "declarator": "messageBusHandlerMock", "var_name": "messageBusHandlerMock"}, {"original_string": "private ArgumentCaptor<ITask> taskCaptor;", "modifier": "private", "type": "ArgumentCaptor<ITask>", "declarator": "taskCaptor", "var_name": "taskCaptor"}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/test/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/EmbeddedSensorReceiverTest.java"}, "test_case": {"identifier": "Should_work", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_work()\n            throws Exception {\n        when(timeMock.currentTimeMillis()).thenReturn(1000L);\n\n        IObject args = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                (\"{\" +\n                        \"'period':'PT1M',\" +\n                        \"'strategy':'the sensor strategy',\" +\n                        \"'statisticsChain':'theStatisticsChain',\" +\n                        \"'limit':100\" +\n                        \"}\").replace('\\'','\"'));\n\n        EmbeddedSensorReceiver r = new EmbeddedSensorReceiver(args);\n\n        verify(periodStrategyMock).resolve(eq(1000L), eq(61000L), eq(100L), same(sensorStrategyMock));\n\n        when(timeMock.currentTimeMillis()).thenReturn(2000L);\n\n        r.receive(processors[0]);\n\n        verify(periods[0]).recordProcessor(same(processors[0]), eq(2000L));\n        verify(periods[0]).isTimeCompleted(2000L);\n        verifyNoMoreInteractions(periods[0]);\n        reset(periods[0]);\n\n        when(timeMock.currentTimeMillis()).thenReturn(62000L);\n        when(periods[0].isTimeCompleted(62000L)).thenReturn(true);\n        when(periods[0].nextPeriod(62000L)).thenReturn(periods[1]);\n\n        r.receive(processors[1]);\n\n        verify(periods[1]).recordProcessor(processors[1], 62000L);\n        verify(timerMock).schedule(taskCaptor.capture(), eq(62000L + 1000L));\n        verify(messageBusHandlerMock, times(0)).handle(any(), any());\n        when(periods[0].createMessage()).thenReturn(mock(IObject.class));\n\n        taskCaptor.getValue().execute();\n\n        verify(messageBusHandlerMock).handle(same(periods[0].createMessage()), eq(\"theStatisticsChain__0\"));\n    }", "signature": "void Should_work()", "full_signature": "@Test public void Should_work()", "class_method_signature": "EmbeddedSensorReceiverTest.Should_work()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "currentTimeMillis", "resolve", "getOrAdd", "replace", "resolve", "verify", "eq", "eq", "eq", "same", "thenReturn", "when", "currentTimeMillis", "receive", "recordProcessor", "verify", "same", "eq", "isTimeCompleted", "verify", "verifyNoMoreInteractions", "reset", "thenReturn", "when", "currentTimeMillis", "thenReturn", "when", "isTimeCompleted", "thenReturn", "when", "nextPeriod", "receive", "recordProcessor", "verify", "schedule", "verify", "capture", "eq", "handle", "verify", "times", "any", "any", "thenReturn", "when", "createMessage", "mock", "execute", "getValue", "handle", "verify", "same", "createMessage", "eq"]}, "focal_class": {"identifier": "EmbeddedSensorReceiver", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private static final long DEFAULT_COMMIT_DELAY = 1000;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_COMMIT_DELAY = 1000", "var_name": "DEFAULT_COMMIT_DELAY"}, {"original_string": "private long observationStart;", "modifier": "private", "type": "long", "declarator": "observationStart", "var_name": "observationStart"}, {"original_string": "private long observationPeriod;", "modifier": "private", "type": "long", "declarator": "observationPeriod", "var_name": "observationPeriod"}, {"original_string": "private long maxPeriodItems;", "modifier": "private", "type": "long", "declarator": "maxPeriodItems", "var_name": "maxPeriodItems"}, {"original_string": "private IEmbeddedSensorStrategy<?> strategy;", "modifier": "private", "type": "IEmbeddedSensorStrategy<?>", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private final AtomicReference<IEmbeddedSensorObservationPeriod> currentPeriod = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<IEmbeddedSensorObservationPeriod>", "declarator": "currentPeriod = new AtomicReference<>()", "var_name": "currentPeriod"}, {"original_string": "private Object statisticsChainId;", "modifier": "private", "type": "Object", "declarator": "statisticsChainId", "var_name": "statisticsChainId"}, {"original_string": "private final ITimer timer;", "modifier": "private final", "type": "ITimer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private final ITime systemTime;", "modifier": "private final", "type": "ITime", "declarator": "systemTime", "var_name": "systemTime"}, {"original_string": "private long commitDelay = DEFAULT_COMMIT_DELAY;", "modifier": "private", "type": "long", "declarator": "commitDelay = DEFAULT_COMMIT_DELAY", "var_name": "commitDelay"}, {"original_string": "private final IFieldName periodFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "periodFieldName", "var_name": "periodFieldName"}, {"original_string": "private final IFieldName startFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "startFieldName", "var_name": "startFieldName"}, {"original_string": "private final IFieldName limitFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "limitFieldName", "var_name": "limitFieldName"}, {"original_string": "private final IFieldName strategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "strategyFieldName", "var_name": "strategyFieldName"}, {"original_string": "private final IFieldName statisticsChainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "statisticsChainFieldName", "var_name": "statisticsChainFieldName"}], "methods": [{"identifier": "EmbeddedSensorReceiver", "parameters": "(final IObject args)", "modifiers": "public", "return": "", "signature": " EmbeddedSensorReceiver(final IObject args)", "full_signature": "public  EmbeddedSensorReceiver(final IObject args)", "class_method_signature": "EmbeddedSensorReceiver.EmbeddedSensorReceiver(final IObject args)", "testcase": false, "constructor": true}, {"identifier": "commitPeriod", "parameters": "(final IEmbeddedSensorObservationPeriod period, final IEmbeddedSensorObservationPeriod nextPeriod)", "modifiers": "private", "return": "void", "signature": "void commitPeriod(final IEmbeddedSensorObservationPeriod period, final IEmbeddedSensorObservationPeriod nextPeriod)", "full_signature": "private void commitPeriod(final IEmbeddedSensorObservationPeriod period, final IEmbeddedSensorObservationPeriod nextPeriod)", "class_method_signature": "EmbeddedSensorReceiver.commitPeriod(final IEmbeddedSensorObservationPeriod period, final IEmbeddedSensorObservationPeriod nextPeriod)", "testcase": false, "constructor": false}, {"identifier": "getCurrentPeriod", "parameters": "(final long time)", "modifiers": "private", "return": "IEmbeddedSensorObservationPeriod", "signature": "IEmbeddedSensorObservationPeriod getCurrentPeriod(final long time)", "full_signature": "private IEmbeddedSensorObservationPeriod getCurrentPeriod(final long time)", "class_method_signature": "EmbeddedSensorReceiver.getCurrentPeriod(final long time)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "EmbeddedSensorReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Statistics/EmbeddedSensor/src/main/java/info/smart_tools/smartactors/statistics/sensors/embedded_sensor/EmbeddedSensorReceiver.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException, AsynchronousOperationException {\n        try {\n            final long cTime = systemTime.currentTimeMillis();\n            final IEmbeddedSensorObservationPeriod period = getCurrentPeriod(cTime);\n            boolean commit = period.recordProcessor(processor, cTime);\n\n            if (commit) {\n                commitPeriod(period, period.nextPeriod(cTime));\n            }\n        } catch (TaskScheduleException | EmbeddedSensorStrategyException | InvalidArgumentException | ResolutionException e) {\n            throw new MessageReceiveException(e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "EmbeddedSensorReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getCurrentPeriod", "recordProcessor", "commitPeriod", "nextPeriod"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}