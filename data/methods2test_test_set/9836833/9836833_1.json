{"test_class": {"identifier": "FactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-factory/src/test/java/restx/factory/FactoryTest.java"}, "test_case": {"identifier": "should_get_default_instance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_default_instance() throws Exception {\n        Factory factory = Factory.getInstance();\n\n        assertThat(factory).isNotNull().isSameAs(Factory.getInstance());\n    }", "signature": "void should_get_default_instance()", "full_signature": "@Test public void should_get_default_instance()", "class_method_signature": "FactoryTest.should_get_default_instance()", "testcase": true, "constructor": false, "invocations": ["getInstance", "isSameAs", "isNotNull", "assertThat", "getInstance"]}, "focal_class": {"identifier": "Factory", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "public static final String METRICS_REGISTRY = \"MetricRegistry\";", "modifier": "public static final", "type": "String", "declarator": "METRICS_REGISTRY = \"MetricRegistry\"", "var_name": "METRICS_REGISTRY"}, {"original_string": "public static final String HEALTH_CHECK_REGISTRY = \"HealthChekcRegistry\";", "modifier": "public static final", "type": "String", "declarator": "HEALTH_CHECK_REGISTRY = \"HealthChekcRegistry\"", "var_name": "HEALTH_CHECK_REGISTRY"}, {"original_string": "public static final Comparator<MachineEngine<?>> ENGINE_COMPARATOR = new Comparator<MachineEngine<?>>() {\n        @Override\n        public int compare(MachineEngine<?> o1, MachineEngine<?> o2) {\n            return compareByPriorityAndName(o1.getPriority(), o1.getName(), o2.getPriority(), o2.getName());\n        }\n    };", "modifier": "public static final", "type": "Comparator<MachineEngine<?>>", "declarator": "ENGINE_COMPARATOR = new Comparator<MachineEngine<?>>() {\n        @Override\n        public int compare(MachineEngine<?> o1, MachineEngine<?> o2) {\n            return compareByPriorityAndName(o1.getPriority(), o1.getName(), o2.getPriority(), o2.getName());\n        }\n    }", "var_name": "ENGINE_COMPARATOR"}, {"original_string": "public static final Comparator<NamedComponent<?>> NAMED_COMPONENT_COMPARATOR = new Comparator<NamedComponent<?>>() {\n        @Override\n        public int compare(NamedComponent<?> o1, NamedComponent<?> o2) {\n            return compareByPriorityAndName(o1.getPriority(), o1.getName(), o2.getPriority(), o2.getName());\n        }\n    };", "modifier": "public static final", "type": "Comparator<NamedComponent<?>>", "declarator": "NAMED_COMPONENT_COMPARATOR = new Comparator<NamedComponent<?>>() {\n        @Override\n        public int compare(NamedComponent<?> o1, NamedComponent<?> o2) {\n            return compareByPriorityAndName(o1.getPriority(), o1.getName(), o2.getPriority(), o2.getName());\n        }\n    }", "var_name": "NAMED_COMPONENT_COMPARATOR"}, {"original_string": "private static final String SERVICE_LOADER = \"ServiceLoader\";", "modifier": "private static final", "type": "String", "declarator": "SERVICE_LOADER = \"ServiceLoader\"", "var_name": "SERVICE_LOADER"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(Factory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Factory.class)", "var_name": "logger"}, {"original_string": "private static final Name<Factory> FACTORY_NAME = Name.of(Factory.class, \"FACTORY\");", "modifier": "private static final", "type": "Name<Factory>", "declarator": "FACTORY_NAME = Name.of(Factory.class, \"FACTORY\")", "var_name": "FACTORY_NAME"}, {"original_string": "private static final Name<MetricRegistry> METRICS_NAME = Name.of(MetricRegistry.class, METRICS_REGISTRY);", "modifier": "private static final", "type": "Name<MetricRegistry>", "declarator": "METRICS_NAME = Name.of(MetricRegistry.class, METRICS_REGISTRY)", "var_name": "METRICS_NAME"}, {"original_string": "private static final Comparator<ComponentCustomizer> customizerComparator = new Comparator<ComponentCustomizer>() {\n        @Override\n        public int compare(ComponentCustomizer o1, ComponentCustomizer o2) {\n            return o1.priority() - o2.priority();\n        }\n    };", "modifier": "private static final", "type": "Comparator<ComponentCustomizer>", "declarator": "customizerComparator = new Comparator<ComponentCustomizer>() {\n        @Override\n        public int compare(ComponentCustomizer o1, ComponentCustomizer o2) {\n            return o1.priority() - o2.priority();\n        }\n    }", "var_name": "customizerComparator"}, {"original_string": "private static final AtomicLong ID = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "ID = new AtomicLong()", "var_name": "ID"}, {"original_string": "private static final ConcurrentMap<String, Factory> factories = Maps.newConcurrentMap();", "modifier": "private static final", "type": "ConcurrentMap<String, Factory>", "declarator": "factories = Maps.newConcurrentMap()", "var_name": "factories"}, {"original_string": "private final boolean usedServiceLoader;", "modifier": "private final", "type": "boolean", "declarator": "usedServiceLoader", "var_name": "usedServiceLoader"}, {"original_string": "private final ImmutableList<FactoryMachine> machines;", "modifier": "private final", "type": "ImmutableList<FactoryMachine>", "declarator": "machines", "var_name": "machines"}, {"original_string": "private final ImmutableMultimap<String, FactoryMachine> machinesByBuilder;", "modifier": "private final", "type": "ImmutableMultimap<String, FactoryMachine>", "declarator": "machinesByBuilder", "var_name": "machinesByBuilder"}, {"original_string": "private final Warehouse warehouse;", "modifier": "private final", "type": "Warehouse", "declarator": "warehouse", "var_name": "warehouse"}, {"original_string": "private final ImmutableList<ComponentCustomizerEngine> customizerEngines;", "modifier": "private final", "type": "ImmutableList<ComponentCustomizerEngine>", "declarator": "customizerEngines", "var_name": "customizerEngines"}, {"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final Object dumper = new Object() { public String toString() { return Factory.this.dump(); } };", "modifier": "private final", "type": "Object", "declarator": "dumper = new Object() { public String toString() { return Factory.this.dump(); } }", "var_name": "dumper"}, {"original_string": "private final Set<Name> deactivatedComponents = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<Name>", "declarator": "deactivatedComponents = new CopyOnWriteArraySet<>()", "var_name": "deactivatedComponents"}, {"original_string": "private final Set<Name> activatedComponents = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<Name>", "declarator": "activatedComponents = new CopyOnWriteArraySet<>()", "var_name": "activatedComponents"}, {"original_string": "private MetricRegistry metrics;", "modifier": "private", "type": "MetricRegistry", "declarator": "metrics", "var_name": "metrics"}], "methods": [{"identifier": "compareByPriorityAndName", "parameters": "(int p1, Name<?> n1, int p2, Name<?> n2)", "modifiers": "private static", "return": "int", "signature": "int compareByPriorityAndName(int p1, Name<?> n1, int p2, Name<?> n2)", "full_signature": "private static int compareByPriorityAndName(int p1, Name<?> n1, int p2, Name<?> n2)", "class_method_signature": "Factory.compareByPriorityAndName(int p1, Name<?> n1, int p2, Name<?> n2)", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "(String key)", "modifiers": "public static", "return": "Optional<Factory>", "signature": "Optional<Factory> getFactory(String key)", "full_signature": "public static Optional<Factory> getFactory(String key)", "class_method_signature": "Factory.getFactory(String key)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String key, Factory factory)", "modifiers": "public static", "return": "Factory", "signature": "Factory register(String key, Factory factory)", "full_signature": "public static Factory register(String key, Factory factory)", "class_method_signature": "Factory.register(String key, Factory factory)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(String key, Factory factory)", "modifiers": "public static", "return": "boolean", "signature": "boolean unregister(String key, Factory factory)", "full_signature": "public static boolean unregister(String key, Factory factory)", "class_method_signature": "Factory.unregister(String key, Factory factory)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "Factory", "signature": "Factory newInstance()", "full_signature": "public static Factory newInstance()", "class_method_signature": "Factory.newInstance()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "Factory", "signature": "Factory getInstance()", "full_signature": "public static Factory getInstance()", "class_method_signature": "Factory.getInstance()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "Factory.builder()", "testcase": false, "constructor": false}, {"identifier": "activationKey", "parameters": "(Class<T> aClass, String name)", "modifiers": "public static", "return": "String", "signature": "String activationKey(Class<T> aClass, String name)", "full_signature": "public static String activationKey(Class<T> aClass, String name)", "class_method_signature": "Factory.activationKey(Class<T> aClass, String name)", "testcase": false, "constructor": false}, {"identifier": "Factory", "parameters": "(boolean usedServiceLoader, Multimap<String, FactoryMachine> machines,\n                    ImmutableList<ComponentCustomizerEngine> customizerEngines, Warehouse warehouse)", "modifiers": "private", "return": "", "signature": " Factory(boolean usedServiceLoader, Multimap<String, FactoryMachine> machines,\n                    ImmutableList<ComponentCustomizerEngine> customizerEngines, Warehouse warehouse)", "full_signature": "private  Factory(boolean usedServiceLoader, Multimap<String, FactoryMachine> machines,\n                    ImmutableList<ComponentCustomizerEngine> customizerEngines, Warehouse warehouse)", "class_method_signature": "Factory.Factory(boolean usedServiceLoader, Multimap<String, FactoryMachine> machines,\n                    ImmutableList<ComponentCustomizerEngine> customizerEngines, Warehouse warehouse)", "testcase": false, "constructor": true}, {"identifier": "concat", "parameters": "(FactoryMachine machine)", "modifiers": "public", "return": "Factory", "signature": "Factory concat(FactoryMachine machine)", "full_signature": "public Factory concat(FactoryMachine machine)", "class_method_signature": "Factory.concat(FactoryMachine machine)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Factory.getId()", "testcase": false, "constructor": false}, {"identifier": "getWarehouse", "parameters": "()", "modifiers": "public", "return": "Warehouse", "signature": "Warehouse getWarehouse()", "full_signature": "public Warehouse getWarehouse()", "class_method_signature": "Factory.getWarehouse()", "testcase": false, "constructor": false}, {"identifier": "getNbMachines", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNbMachines()", "full_signature": "public int getNbMachines()", "class_method_signature": "Factory.getNbMachines()", "testcase": false, "constructor": false}, {"identifier": "queryByName", "parameters": "(Name<T> name)", "modifiers": "public", "return": "Query<T>", "signature": "Query<T> queryByName(Name<T> name)", "full_signature": "public Query<T> queryByName(Name<T> name)", "class_method_signature": "Factory.queryByName(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "queryByClass", "parameters": "(Class<T> componentClass)", "modifiers": "public", "return": "Query<T>", "signature": "Query<T> queryByClass(Class<T> componentClass)", "full_signature": "public Query<T> queryByClass(Class<T> componentClass)", "class_method_signature": "Factory.queryByClass(Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "(Class<T> componentClass)", "modifiers": "public", "return": "T", "signature": "T getComponent(Class<T> componentClass)", "full_signature": "public T getComponent(Class<T> componentClass)", "class_method_signature": "Factory.getComponent(Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "(Name<T> componentName)", "modifiers": "public", "return": "T", "signature": "T getComponent(Name<T> componentName)", "full_signature": "public T getComponent(Name<T> componentName)", "class_method_signature": "Factory.getComponent(Name<T> componentName)", "testcase": false, "constructor": false}, {"identifier": "getComponents", "parameters": "(Class<T> componentClass)", "modifiers": "public", "return": "Set<T>", "signature": "Set<T> getComponents(Class<T> componentClass)", "full_signature": "public Set<T> getComponents(Class<T> componentClass)", "class_method_signature": "Factory.getComponents(Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "()", "modifiers": "public", "return": "Factory", "signature": "Factory and()", "full_signature": "public Factory and()", "class_method_signature": "Factory.and()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "Factory", "signature": "Factory start()", "full_signature": "public Factory start()", "class_method_signature": "Factory.start()", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "()", "modifiers": "public", "return": "Factory", "signature": "Factory prepare()", "full_signature": "public Factory prepare()", "class_method_signature": "Factory.prepare()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "Factory.close()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Factory.toString()", "testcase": false, "constructor": false}, {"identifier": "dumper", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object dumper()", "full_signature": "public Object dumper()", "class_method_signature": "Factory.dumper()", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String dump()", "full_signature": "public String dump()", "class_method_signature": "Factory.dump()", "testcase": false, "constructor": false}, {"identifier": "dumpDeactivatedComponents", "parameters": "(StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void dumpDeactivatedComponents(StringBuilder sb)", "full_signature": "private void dumpDeactivatedComponents(StringBuilder sb)", "class_method_signature": "Factory.dumpDeactivatedComponents(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "dumpBuidableComponents", "parameters": "(StringBuilder sb)", "modifiers": "private", "return": "void", "signature": "void dumpBuidableComponents(StringBuilder sb)", "full_signature": "private void dumpBuidableComponents(StringBuilder sb)", "class_method_signature": "Factory.dumpBuidableComponents(StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "findUndeclaredMachines", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> findUndeclaredMachines()", "full_signature": "private Set<String> findUndeclaredMachines()", "class_method_signature": "Factory.findUndeclaredMachines()", "testcase": false, "constructor": false}, {"identifier": "findAllMachinesListing", "parameters": "(Name<?> name)", "modifiers": "private", "return": "List<FactoryMachine>", "signature": "List<FactoryMachine> findAllMachinesListing(Name<?> name)", "full_signature": "private List<FactoryMachine> findAllMachinesListing(Name<?> name)", "class_method_signature": "Factory.findAllMachinesListing(Name<?> name)", "testcase": false, "constructor": false}, {"identifier": "findAllMachinesFor", "parameters": "(Name<?> name)", "modifiers": "private", "return": "Iterable<FactoryMachine>", "signature": "Iterable<FactoryMachine> findAllMachinesFor(Name<?> name)", "full_signature": "private Iterable<FactoryMachine> findAllMachinesFor(Name<?> name)", "class_method_signature": "Factory.findAllMachinesFor(Name<?> name)", "testcase": false, "constructor": false}, {"identifier": "findAllEnginesFor", "parameters": "(final Name<T> name)", "modifiers": "private", "return": "Iterable<MachineEngine<T>>", "signature": "Iterable<MachineEngine<T>> findAllEnginesFor(final Name<T> name)", "full_signature": "private Iterable<MachineEngine<T>> findAllEnginesFor(final Name<T> name)", "class_method_signature": "Factory.findAllEnginesFor(final Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "findMachineEngineFor", "parameters": "(Name<T> name)", "modifiers": "private", "return": "Optional<MachineEngine<T>>", "signature": "Optional<MachineEngine<T>> findMachineEngineFor(Name<T> name)", "full_signature": "private Optional<MachineEngine<T>> findMachineEngineFor(Name<T> name)", "class_method_signature": "Factory.findMachineEngineFor(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "getMachineEngineFor", "parameters": "(Name<T> name)", "modifiers": "private", "return": "MachineEngine<T>", "signature": "MachineEngine<T> getMachineEngineFor(Name<T> name)", "full_signature": "private MachineEngine<T> getMachineEngineFor(Name<T> name)", "class_method_signature": "Factory.getMachineEngineFor(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "collectAllBuildableNames", "parameters": "(Class<T> componentClass)", "modifiers": "private", "return": "Set<Name<T>>", "signature": "Set<Name<T>> collectAllBuildableNames(Class<T> componentClass)", "full_signature": "private Set<Name<T>> collectAllBuildableNames(Class<T> componentClass)", "class_method_signature": "Factory.collectAllBuildableNames(Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "buildAndStore", "parameters": "(Query<T> query, MachineEngine<T> engine)", "modifiers": "private", "return": "Optional<NamedComponent<T>>", "signature": "Optional<NamedComponent<T>> buildAndStore(Query<T> query, MachineEngine<T> engine)", "full_signature": "private Optional<NamedComponent<T>> buildAndStore(Query<T> query, MachineEngine<T> engine)", "class_method_signature": "Factory.buildAndStore(Query<T> query, MachineEngine<T> engine)", "testcase": false, "constructor": false}, {"identifier": "buildBuildingBoxesClosure", "parameters": "(BuildingBox<?> buildingBox)", "modifiers": "private", "return": "Deque<BuildingBox<?>>", "signature": "Deque<BuildingBox<?>> buildBuildingBoxesClosure(BuildingBox<?> buildingBox)", "full_signature": "private Deque<BuildingBox<?>> buildBuildingBoxesClosure(BuildingBox<?> buildingBox)", "class_method_signature": "Factory.buildBuildingBoxesClosure(BuildingBox<?> buildingBox)", "testcase": false, "constructor": false}, {"identifier": "buildBuildingBoxClosureForQuery", "parameters": "(\n            Map<Name<?>, BuildingBox<?>> dependenciesByName,\n            Queue<BuildingBox<?>> dependenciesToSatisfy, BuildingBox<?> buildingBox, Query<D> query)", "modifiers": "private", "return": "void", "signature": "void buildBuildingBoxClosureForQuery(\n            Map<Name<?>, BuildingBox<?>> dependenciesByName,\n            Queue<BuildingBox<?>> dependenciesToSatisfy, BuildingBox<?> buildingBox, Query<D> query)", "full_signature": "private void buildBuildingBoxClosureForQuery(\n            Map<Name<?>, BuildingBox<?>> dependenciesByName,\n            Queue<BuildingBox<?>> dependenciesToSatisfy, BuildingBox<?> buildingBox, Query<D> query)", "class_method_signature": "Factory.buildBuildingBoxClosureForQuery(\n            Map<Name<?>, BuildingBox<?>> dependenciesByName,\n            Queue<BuildingBox<?>> dependenciesToSatisfy, BuildingBox<?> buildingBox, Query<D> query)", "testcase": false, "constructor": false}, {"identifier": "getDependencyBuildingBox", "parameters": "(Map<Name<?>, BuildingBox<?>> dependenciesByName, Name<D> n)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "BuildingBox<D>", "signature": "BuildingBox<D> getDependencyBuildingBox(Map<Name<?>, BuildingBox<?>> dependenciesByName, Name<D> n)", "full_signature": "@SuppressWarnings(\"unchecked\") private BuildingBox<D> getDependencyBuildingBox(Map<Name<?>, BuildingBox<?>> dependenciesByName, Name<D> n)", "class_method_signature": "Factory.getDependencyBuildingBox(Map<Name<?>, BuildingBox<?>> dependenciesByName, Name<D> n)", "testcase": false, "constructor": false}, {"identifier": "findSimilarNamesByNamedType", "parameters": "(Class componentClass)", "modifiers": "private", "return": "Set<Name>", "signature": "Set<Name> findSimilarNamesByNamedType(Class componentClass)", "full_signature": "private Set<Name> findSimilarNamesByNamedType(Class componentClass)", "class_method_signature": "Factory.findSimilarNamesByNamedType(Class componentClass)", "testcase": false, "constructor": false}, {"identifier": "satisfyBoms", "parameters": "(Deque<BuildingBox<?>> dependencies)", "modifiers": "private", "return": "void", "signature": "void satisfyBoms(Deque<BuildingBox<?>> dependencies)", "full_signature": "private void satisfyBoms(Deque<BuildingBox<?>> dependencies)", "class_method_signature": "Factory.satisfyBoms(Deque<BuildingBox<?>> dependencies)", "testcase": false, "constructor": false}, {"identifier": "buildAndStore", "parameters": "(BuildingBox<T> buildingBox)", "modifiers": "private", "return": "Optional<NamedComponent<T>>", "signature": "Optional<NamedComponent<T>> buildAndStore(BuildingBox<T> buildingBox)", "full_signature": "private Optional<NamedComponent<T>> buildAndStore(BuildingBox<T> buildingBox)", "class_method_signature": "Factory.buildAndStore(BuildingBox<T> buildingBox)", "testcase": false, "constructor": false}, {"identifier": "buildCircularDependencyLog", "parameters": "(StringBuilder circularDependencyLog, BuildingBox buildingBox, ImmutableSet<Name> alreadyDisplayedComponents)", "modifiers": "private", "return": "void", "signature": "void buildCircularDependencyLog(StringBuilder circularDependencyLog, BuildingBox buildingBox, ImmutableSet<Name> alreadyDisplayedComponents)", "full_signature": "private void buildCircularDependencyLog(StringBuilder circularDependencyLog, BuildingBox buildingBox, ImmutableSet<Name> alreadyDisplayedComponents)", "class_method_signature": "Factory.buildCircularDependencyLog(StringBuilder circularDependencyLog, BuildingBox buildingBox, ImmutableSet<Name> alreadyDisplayedComponents)", "testcase": false, "constructor": false}, {"identifier": "buildAndStore", "parameters": "(Name<T> name, MachineEngine<T> engine, SatisfiedBOM satisfiedBOM)", "modifiers": "private", "return": "Optional<NamedComponent<T>>", "signature": "Optional<NamedComponent<T>> buildAndStore(Name<T> name, MachineEngine<T> engine, SatisfiedBOM satisfiedBOM)", "full_signature": "private Optional<NamedComponent<T>> buildAndStore(Name<T> name, MachineEngine<T> engine, SatisfiedBOM satisfiedBOM)", "class_method_signature": "Factory.buildAndStore(Name<T> name, MachineEngine<T> engine, SatisfiedBOM satisfiedBOM)", "testcase": false, "constructor": false}, {"identifier": "customizerEngines", "parameters": "()", "modifiers": "private", "return": "Iterable<ComponentCustomizerEngine>", "signature": "Iterable<ComponentCustomizerEngine> customizerEngines()", "full_signature": "private Iterable<ComponentCustomizerEngine> customizerEngines()", "class_method_signature": "Factory.customizerEngines()", "testcase": false, "constructor": false}, {"identifier": "checkSatisfy", "parameters": "(Name<T> name)", "modifiers": "private", "return": "void", "signature": "void checkSatisfy(Name<T> name)", "full_signature": "private void checkSatisfy(Name<T> name)", "class_method_signature": "Factory.checkSatisfy(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "getBillOfMaterialsFor", "parameters": "(Name<T> name)", "modifiers": "private", "return": "BillOfMaterials", "signature": "BillOfMaterials getBillOfMaterialsFor(Name<T> name)", "full_signature": "private BillOfMaterials getBillOfMaterialsFor(Name<T> name)", "class_method_signature": "Factory.getBillOfMaterialsFor(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "nameBuildableComponents", "parameters": "(FactoryMachine machine, Class<T> componentClass)", "modifiers": "private", "return": "Set<Name<T>>", "signature": "Set<Name<T>> nameBuildableComponents(FactoryMachine machine, Class<T> componentClass)", "full_signature": "private Set<Name<T>> nameBuildableComponents(FactoryMachine machine, Class<T> componentClass)", "class_method_signature": "Factory.nameBuildableComponents(FactoryMachine machine, Class<T> componentClass)", "testcase": false, "constructor": false}, {"identifier": "canBuild", "parameters": "(FactoryMachine machine, Name<T> name)", "modifiers": "private", "return": "boolean", "signature": "boolean canBuild(FactoryMachine machine, Name<T> name)", "full_signature": "private boolean canBuild(FactoryMachine machine, Name<T> name)", "class_method_signature": "Factory.canBuild(FactoryMachine machine, Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "checkActive", "parameters": "(Name<T> name)", "modifiers": "private", "return": "boolean", "signature": "boolean checkActive(Name<T> name)", "full_signature": "private boolean checkActive(Name<T> name)", "class_method_signature": "Factory.checkActive(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "machineNotFoundMessage", "parameters": "(Name<T> name)", "modifiers": "private", "return": "String", "signature": "String machineNotFoundMessage(Name<T> name)", "full_signature": "private String machineNotFoundMessage(Name<T> name)", "class_method_signature": "Factory.machineNotFoundMessage(Name<T> name)", "testcase": false, "constructor": false}, {"identifier": "machineNotFoundMessage", "parameters": "(Object what, Set similarNames)", "modifiers": "private", "return": "String", "signature": "String machineNotFoundMessage(Object what, Set similarNames)", "full_signature": "private String machineNotFoundMessage(Object what, Set similarNames)", "class_method_signature": "Factory.machineNotFoundMessage(Object what, Set similarNames)", "testcase": false, "constructor": false}, {"identifier": "uncheckedAddIfPresent", "parameters": "(Set components, Optional c)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void uncheckedAddIfPresent(Set components, Optional c)", "full_signature": "@SuppressWarnings(\"unchecked\") private void uncheckedAddIfPresent(Set components, Optional c)", "class_method_signature": "Factory.uncheckedAddIfPresent(Set components, Optional c)", "testcase": false, "constructor": false}], "file": "restx-factory/src/main/java/restx/factory/Factory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "Factory", "body": "public static Factory getInstance() {\n        Optional<Factory> factory = getFactory(\"__DEFAULT__\");\n        if (factory.isPresent()) {\n            return factory.get();\n        } else {\n            return register(\"__DEFAULT__\", Factory.builder().addFromServiceLoader().build());\n        }\n    }", "signature": "Factory getInstance()", "full_signature": "public static Factory getInstance()", "class_method_signature": "Factory.getInstance()", "testcase": false, "constructor": false, "invocations": ["getFactory", "isPresent", "get", "register", "build", "addFromServiceLoader", "builder"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}