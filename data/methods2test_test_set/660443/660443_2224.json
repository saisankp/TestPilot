{"test_class": {"identifier": "AminoAcidsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "storage/pdb/src/test/java/org/openscience/cdk/templates/AminoAcidsTest.java"}, "test_case": {"identifier": "testCreateAAs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateAAs() {\n        IAminoAcid[] aas = AminoAcids.createAAs();\n        Assert.assertNotNull(aas);\n        Assert.assertEquals(20, aas.length);\n        for (int i = 0; i < 20; i++) {\n            Assert.assertNotNull(aas[i]);\n            Assert.assertFalse(0 == aas[i].getAtomCount());\n            Assert.assertFalse(0 == aas[i].getBondCount());\n            Assert.assertNotNull(aas[i].getMonomerName());\n            Assert.assertNotNull(aas[i].getProperty(AminoAcids.RESIDUE_NAME_SHORT));\n            Assert.assertNotNull(aas[i].getProperty(AminoAcids.RESIDUE_NAME));\n        }\n    }", "signature": "void testCreateAAs()", "full_signature": "@Test public void testCreateAAs()", "class_method_signature": "AminoAcidsTest.testCreateAAs()", "testcase": true, "constructor": false, "invocations": ["createAAs", "assertNotNull", "assertEquals", "assertNotNull", "assertFalse", "getAtomCount", "assertFalse", "getBondCount", "assertNotNull", "getMonomerName", "assertNotNull", "getProperty", "assertNotNull", "getProperty"]}, "focal_class": {"identifier": "AminoAcids", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ILoggingTool LOGGER = LoggingToolFactory.createLoggingTool(AminoAcids.class);", "modifier": "private static final", "type": "ILoggingTool", "declarator": "LOGGER = LoggingToolFactory.createLoggingTool(AminoAcids.class)", "var_name": "LOGGER"}, {"original_string": "private static AminoAcid[] aminoAcids         = null;", "modifier": "private static", "type": "AminoAcid[]", "declarator": "aminoAcids         = null", "var_name": "aminoAcids"}, {"original_string": "public final static String RESIDUE_NAME       = \"residueName\";", "modifier": "public final static", "type": "String", "declarator": "RESIDUE_NAME       = \"residueName\"", "var_name": "RESIDUE_NAME"}, {"original_string": "public final static String RESIDUE_NAME_SHORT = \"residueNameShort\";", "modifier": "public final static", "type": "String", "declarator": "RESIDUE_NAME_SHORT = \"residueNameShort\"", "var_name": "RESIDUE_NAME_SHORT"}, {"original_string": "public final static String NO_ATOMS           = \"noOfAtoms\";", "modifier": "public final static", "type": "String", "declarator": "NO_ATOMS           = \"noOfAtoms\"", "var_name": "NO_ATOMS"}, {"original_string": "public final static String NO_BONDS           = \"noOfBonds\";", "modifier": "public final static", "type": "String", "declarator": "NO_BONDS           = \"noOfBonds\"", "var_name": "NO_BONDS"}, {"original_string": "public final static String ID                 = \"id\";", "modifier": "public final static", "type": "String", "declarator": "ID                 = \"id\"", "var_name": "ID"}], "methods": [{"identifier": "aaBondInfo", "parameters": "()", "modifiers": "public static", "return": "int[][]", "signature": "int[][] aaBondInfo()", "full_signature": "public static int[][] aaBondInfo()", "class_method_signature": "AminoAcids.aaBondInfo()", "testcase": false, "constructor": false}, {"identifier": "createAAs", "parameters": "()", "modifiers": "public synchronized static", "return": "AminoAcid[]", "signature": "AminoAcid[] createAAs()", "full_signature": "public synchronized static AminoAcid[] createAAs()", "class_method_signature": "AminoAcids.createAAs()", "testcase": false, "constructor": false}, {"identifier": "getHashMapBySingleCharCode", "parameters": "()", "modifiers": "public static", "return": "Map<String, IAminoAcid>", "signature": "Map<String, IAminoAcid> getHashMapBySingleCharCode()", "full_signature": "public static Map<String, IAminoAcid> getHashMapBySingleCharCode()", "class_method_signature": "AminoAcids.getHashMapBySingleCharCode()", "testcase": false, "constructor": false}, {"identifier": "getHashMapByThreeLetterCode", "parameters": "()", "modifiers": "public static", "return": "Map<String, IAminoAcid>", "signature": "Map<String, IAminoAcid> getHashMapByThreeLetterCode()", "full_signature": "public static Map<String, IAminoAcid> getHashMapByThreeLetterCode()", "class_method_signature": "AminoAcids.getHashMapByThreeLetterCode()", "testcase": false, "constructor": false}, {"identifier": "convertThreeLetterCodeToOneLetterCode", "parameters": "(String threeLetterCode)", "modifiers": "public static", "return": "String", "signature": "String convertThreeLetterCodeToOneLetterCode(String threeLetterCode)", "full_signature": "public static String convertThreeLetterCodeToOneLetterCode(String threeLetterCode)", "class_method_signature": "AminoAcids.convertThreeLetterCodeToOneLetterCode(String threeLetterCode)", "testcase": false, "constructor": false}, {"identifier": "convertOneLetterCodeToThreeLetterCode", "parameters": "(String oneLetterCode)", "modifiers": "public static", "return": "String", "signature": "String convertOneLetterCodeToThreeLetterCode(String oneLetterCode)", "full_signature": "public static String convertOneLetterCodeToThreeLetterCode(String oneLetterCode)", "class_method_signature": "AminoAcids.convertOneLetterCodeToThreeLetterCode(String oneLetterCode)", "testcase": false, "constructor": false}], "file": "storage/pdb/src/main/java/org/openscience/cdk/templates/AminoAcids.java"}, "focal_method": {"identifier": "createAAs", "parameters": "()", "modifiers": "public synchronized static", "return": "AminoAcid[]", "body": "public synchronized static AminoAcid[] createAAs() {\n        if (aminoAcids != null) {\n            return aminoAcids;\n        }\n\n        // amino-acids only have benzene aromaticity so we can run a simple\n        // alternating pi-bond arom model to keep things in a consistent state\n        Aromaticity arom = new Aromaticity(ElectronDonation.cdk(),\n                                           Cycles.all(6));\n\n        // Create set of AtomContainers\n        aminoAcids = new AminoAcid[20];\n\n        IChemFile list = new ChemFile();\n        CMLReader reader = new CMLReader(AminoAcids.class.getClassLoader().getResourceAsStream(\n                \"org/openscience/cdk/templates/data/list_aminoacids.cml\"));\n        try {\n            list = (IChemFile) reader.read(list);\n            List<IAtomContainer> containersList = ChemFileManipulator.getAllAtomContainers(list);\n            Iterator<IAtomContainer> iterator = containersList.iterator();\n            int counter = 0;\n            while (iterator.hasNext()) {\n                IAtomContainer ac = (IAtomContainer) iterator.next();\n                LOGGER.debug(\"Adding AA: \", ac);\n                // convert into an AminoAcid\n                AminoAcid aminoAcid = new AminoAcid();\n                Iterator<IAtom> atoms = ac.atoms().iterator();\n                Iterator<Object> props = ac.getProperties().keySet().iterator();\n                while (props.hasNext()) {\n                    Object next = props.next();\n                    LOGGER.debug(\"Prop class: \" + next.getClass().getName());\n                    LOGGER.debug(\"Prop: \" + next.toString());\n                    if (next instanceof DictRef) {\n                        DictRef dictRef = (DictRef) next;\n                        // logger.debug(\"DictRef type: \" + dictRef.getType());\n                        if (dictRef.getType().equals(\"pdb:residueName\")) {\n                            aminoAcid.setProperty(RESIDUE_NAME, ac.getProperty(dictRef).toString().toUpperCase());\n                            aminoAcid.setMonomerName(ac.getProperty(dictRef).toString());\n                        } else if (dictRef.getType().equals(\"pdb:oneLetterCode\")) {\n                            aminoAcid.setProperty(RESIDUE_NAME_SHORT, ac.getProperty(dictRef));\n                        } else if (dictRef.getType().equals(\"pdb:id\")) {\n                            aminoAcid.setProperty(ID, ac.getProperty(dictRef));\n                            LOGGER.debug(\"Set AA ID to: \" + ac.getProperty(dictRef));\n                        } else {\n                            LOGGER.error(\"Cannot deal with dictRef!\");\n                        }\n                    }\n                }\n                while (atoms.hasNext()) {\n                    IAtom atom = (IAtom) atoms.next();\n                    String dictRef = (String) atom.getProperty(\"org.openscience.cdk.dict\");\n                    if (dictRef != null && dictRef.equals(\"pdb:nTerminus\")) {\n                        aminoAcid.addNTerminus(atom);\n                    } else if (dictRef != null && dictRef.equals(\"pdb:cTerminus\")) {\n                        aminoAcid.addCTerminus(atom);\n                    } else {\n                        aminoAcid.addAtom(atom);\n                    }\n                }\n                Iterator<IBond> bonds = ac.bonds().iterator();\n                while (bonds.hasNext()) {\n                    IBond bond = (IBond) bonds.next();\n                    aminoAcid.addBond(bond);\n                }\n                AminoAcidManipulator.removeAcidicOxygen(aminoAcid);\n                aminoAcid.setProperty(NO_ATOMS, \"\" + aminoAcid.getAtomCount());\n                aminoAcid.setProperty(NO_BONDS, \"\" + aminoAcid.getBondCount());\n\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(aminoAcid);\n                arom.apply(aminoAcid);\n\n                if (counter < aminoAcids.length) {\n                    aminoAcids[counter] = aminoAcid;\n                } else {\n                    LOGGER.error(\"Could not store AminoAcid! Array too short!\");\n                }\n                counter++;\n            }\n            reader.close();\n        } catch (CDKException | IOException exception) {\n            LOGGER.error(\"Failed reading file: \", exception.getMessage());\n            LOGGER.debug(exception);\n        }\n\n        return aminoAcids;\n    }", "signature": "AminoAcid[] createAAs()", "full_signature": "public synchronized static AminoAcid[] createAAs()", "class_method_signature": "AminoAcids.createAAs()", "testcase": false, "constructor": false, "invocations": ["cdk", "all", "getResourceAsStream", "getClassLoader", "read", "getAllAtomContainers", "iterator", "hasNext", "next", "debug", "iterator", "atoms", "iterator", "keySet", "getProperties", "hasNext", "next", "debug", "getName", "getClass", "debug", "toString", "equals", "getType", "setProperty", "toUpperCase", "toString", "getProperty", "setMonomerName", "toString", "getProperty", "equals", "getType", "setProperty", "getProperty", "equals", "getType", "setProperty", "getProperty", "debug", "getProperty", "error", "hasNext", "next", "getProperty", "equals", "addNTerminus", "equals", "addCTerminus", "addAtom", "iterator", "bonds", "hasNext", "next", "addBond", "removeAcidicOxygen", "setProperty", "getAtomCount", "setProperty", "getBondCount", "percieveAtomTypesAndConfigureAtoms", "apply", "error", "close", "error", "getMessage", "debug"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}