{"test_class": {"identifier": "DebugAtomTypeTest", "superclass": "extends AbstractAtomTypeTest", "interfaces": "", "fields": [], "file": "base/datadebug/src/test/java/org/openscience/cdk/debug/DebugAtomTypeTest.java"}, "test_case": {"identifier": "testCompare_DiffBondOrderSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare_DiffBondOrderSum() {\n        DebugAtomType at1 = new DebugAtomType(\"C\");\n        DebugAtomType at2 = new DebugAtomType(\"C\");\n        at1.setBondOrderSum(1.5);\n        at2.setBondOrderSum(2.0);\n        Assert.assertFalse(at1.compare(at2));\n    }", "signature": "void testCompare_DiffBondOrderSum()", "full_signature": "@Test public void testCompare_DiffBondOrderSum()", "class_method_signature": "DebugAtomTypeTest.testCompare_DiffBondOrderSum()", "testcase": true, "constructor": false, "invocations": ["setBondOrderSum", "setBondOrderSum", "assertFalse", "compare"]}, "focal_class": {"identifier": "DebugAtomType", "superclass": "extends AtomType", "interfaces": "implements IAtomType", "fields": [{"original_string": "private static final long serialVersionUID = 1427549696666679540L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1427549696666679540L", "var_name": "serialVersionUID"}, {"original_string": "ILoggingTool              logger           = LoggingToolFactory.createLoggingTool(DebugAtomType.class);", "modifier": "", "type": "ILoggingTool", "declarator": "logger           = LoggingToolFactory.createLoggingTool(DebugAtomType.class)", "var_name": "logger"}], "methods": [{"identifier": "DebugAtomType", "parameters": "(String elementSymbol)", "modifiers": "public", "return": "", "signature": " DebugAtomType(String elementSymbol)", "full_signature": "public  DebugAtomType(String elementSymbol)", "class_method_signature": "DebugAtomType.DebugAtomType(String elementSymbol)", "testcase": false, "constructor": true}, {"identifier": "DebugAtomType", "parameters": "(String identifier, String elementSymbol)", "modifiers": "public", "return": "", "signature": " DebugAtomType(String identifier, String elementSymbol)", "full_signature": "public  DebugAtomType(String identifier, String elementSymbol)", "class_method_signature": "DebugAtomType.DebugAtomType(String identifier, String elementSymbol)", "testcase": false, "constructor": true}, {"identifier": "DebugAtomType", "parameters": "(IElement element)", "modifiers": "public", "return": "", "signature": " DebugAtomType(IElement element)", "full_signature": "public  DebugAtomType(IElement element)", "class_method_signature": "DebugAtomType.DebugAtomType(IElement element)", "testcase": false, "constructor": true}, {"identifier": "getAtomicNumber", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getAtomicNumber()", "full_signature": "@Override public Integer getAtomicNumber()", "class_method_signature": "DebugAtomType.getAtomicNumber()", "testcase": false, "constructor": false}, {"identifier": "setAtomicNumber", "parameters": "(Integer atomicNumber)", "modifiers": "@Override public", "return": "void", "signature": "void setAtomicNumber(Integer atomicNumber)", "full_signature": "@Override public void setAtomicNumber(Integer atomicNumber)", "class_method_signature": "DebugAtomType.setAtomicNumber(Integer atomicNumber)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "DebugAtomType.getSymbol()", "testcase": false, "constructor": false}, {"identifier": "setSymbol", "parameters": "(String symbol)", "modifiers": "@Override public", "return": "void", "signature": "void setSymbol(String symbol)", "full_signature": "@Override public void setSymbol(String symbol)", "class_method_signature": "DebugAtomType.setSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(IChemObjectListener col)", "full_signature": "@Override public void addListener(IChemObjectListener col)", "class_method_signature": "DebugAtomType.addListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "getListenerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getListenerCount()", "full_signature": "@Override public int getListenerCount()", "class_method_signature": "DebugAtomType.getListenerCount()", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(IChemObjectListener col)", "full_signature": "@Override public void removeListener(IChemObjectListener col)", "class_method_signature": "DebugAtomType.removeListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged()", "full_signature": "@Override public void notifyChanged()", "class_method_signature": "DebugAtomType.notifyChanged()", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "(IChemObjectChangeEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged(IChemObjectChangeEvent evt)", "full_signature": "@Override public void notifyChanged(IChemObjectChangeEvent evt)", "class_method_signature": "DebugAtomType.notifyChanged(IChemObjectChangeEvent evt)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(Object description, Object property)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(Object description, Object property)", "full_signature": "@Override public void setProperty(Object description, Object property)", "class_method_signature": "DebugAtomType.setProperty(Object description, Object property)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "void", "signature": "void removeProperty(Object description)", "full_signature": "@Override public void removeProperty(Object description)", "class_method_signature": "DebugAtomType.removeProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "T", "signature": "T getProperty(Object description)", "full_signature": "@Override public T getProperty(Object description)", "class_method_signature": "DebugAtomType.getProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Map<Object, Object>", "signature": "Map<Object, Object> getProperties()", "full_signature": "@Override public Map<Object, Object> getProperties()", "class_method_signature": "DebugAtomType.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "DebugAtomType.getID()", "testcase": false, "constructor": false}, {"identifier": "setID", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void setID(String identifier)", "full_signature": "@Override public void setID(String identifier)", "class_method_signature": "DebugAtomType.setID(String identifier)", "testcase": false, "constructor": false}, {"identifier": "setFlag", "parameters": "(int flagType, boolean flagValue)", "modifiers": "@Override public", "return": "void", "signature": "void setFlag(int flagType, boolean flagValue)", "full_signature": "@Override public void setFlag(int flagType, boolean flagValue)", "class_method_signature": "DebugAtomType.setFlag(int flagType, boolean flagValue)", "testcase": false, "constructor": false}, {"identifier": "getFlag", "parameters": "(int flagType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getFlag(int flagType)", "full_signature": "@Override public boolean getFlag(int flagType)", "class_method_signature": "DebugAtomType.getFlag(int flagType)", "testcase": false, "constructor": false}, {"identifier": "addProperties", "parameters": "(Map<Object, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addProperties(Map<Object, Object> properties)", "full_signature": "@Override public void addProperties(Map<Object, Object> properties)", "class_method_signature": "DebugAtomType.addProperties(Map<Object, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(boolean[] flagsNew)", "modifiers": "@Override public", "return": "void", "signature": "void setFlags(boolean[] flagsNew)", "full_signature": "@Override public void setFlags(boolean[] flagsNew)", "class_method_signature": "DebugAtomType.setFlags(boolean[] flagsNew)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "@Override public", "return": "boolean[]", "signature": "boolean[] getFlags()", "full_signature": "@Override public boolean[] getFlags()", "class_method_signature": "DebugAtomType.getFlags()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "DebugAtomType.clone()", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "@Override public", "return": "IChemObjectBuilder", "signature": "IChemObjectBuilder getBuilder()", "full_signature": "@Override public IChemObjectBuilder getBuilder()", "class_method_signature": "DebugAtomType.getBuilder()", "testcase": false, "constructor": false}, {"identifier": "setNaturalAbundance", "parameters": "(Double naturalAbundance)", "modifiers": "@Override public", "return": "void", "signature": "void setNaturalAbundance(Double naturalAbundance)", "full_signature": "@Override public void setNaturalAbundance(Double naturalAbundance)", "class_method_signature": "DebugAtomType.setNaturalAbundance(Double naturalAbundance)", "testcase": false, "constructor": false}, {"identifier": "setExactMass", "parameters": "(Double exactMass)", "modifiers": "@Override public", "return": "void", "signature": "void setExactMass(Double exactMass)", "full_signature": "@Override public void setExactMass(Double exactMass)", "class_method_signature": "DebugAtomType.setExactMass(Double exactMass)", "testcase": false, "constructor": false}, {"identifier": "getNaturalAbundance", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getNaturalAbundance()", "full_signature": "@Override public Double getNaturalAbundance()", "class_method_signature": "DebugAtomType.getNaturalAbundance()", "testcase": false, "constructor": false}, {"identifier": "getExactMass", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getExactMass()", "full_signature": "@Override public Double getExactMass()", "class_method_signature": "DebugAtomType.getExactMass()", "testcase": false, "constructor": false}, {"identifier": "getMassNumber", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getMassNumber()", "full_signature": "@Override public Integer getMassNumber()", "class_method_signature": "DebugAtomType.getMassNumber()", "testcase": false, "constructor": false}, {"identifier": "setMassNumber", "parameters": "(Integer massNumber)", "modifiers": "@Override public", "return": "void", "signature": "void setMassNumber(Integer massNumber)", "full_signature": "@Override public void setMassNumber(Integer massNumber)", "class_method_signature": "DebugAtomType.setMassNumber(Integer massNumber)", "testcase": false, "constructor": false}, {"identifier": "setAtomTypeName", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void setAtomTypeName(String identifier)", "full_signature": "@Override public void setAtomTypeName(String identifier)", "class_method_signature": "DebugAtomType.setAtomTypeName(String identifier)", "testcase": false, "constructor": false}, {"identifier": "setMaxBondOrder", "parameters": "(IBond.Order maxBondOrder)", "modifiers": "@Override public", "return": "void", "signature": "void setMaxBondOrder(IBond.Order maxBondOrder)", "full_signature": "@Override public void setMaxBondOrder(IBond.Order maxBondOrder)", "class_method_signature": "DebugAtomType.setMaxBondOrder(IBond.Order maxBondOrder)", "testcase": false, "constructor": false}, {"identifier": "setBondOrderSum", "parameters": "(Double bondOrderSum)", "modifiers": "@Override public", "return": "void", "signature": "void setBondOrderSum(Double bondOrderSum)", "full_signature": "@Override public void setBondOrderSum(Double bondOrderSum)", "class_method_signature": "DebugAtomType.setBondOrderSum(Double bondOrderSum)", "testcase": false, "constructor": false}, {"identifier": "getAtomTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAtomTypeName()", "full_signature": "@Override public String getAtomTypeName()", "class_method_signature": "DebugAtomType.getAtomTypeName()", "testcase": false, "constructor": false}, {"identifier": "getMaxBondOrder", "parameters": "()", "modifiers": "@Override public", "return": "IBond.Order", "signature": "IBond.Order getMaxBondOrder()", "full_signature": "@Override public IBond.Order getMaxBondOrder()", "class_method_signature": "DebugAtomType.getMaxBondOrder()", "testcase": false, "constructor": false}, {"identifier": "getBondOrderSum", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getBondOrderSum()", "full_signature": "@Override public Double getBondOrderSum()", "class_method_signature": "DebugAtomType.getBondOrderSum()", "testcase": false, "constructor": false}, {"identifier": "setFormalCharge", "parameters": "(Integer charge)", "modifiers": "@Override public", "return": "void", "signature": "void setFormalCharge(Integer charge)", "full_signature": "@Override public void setFormalCharge(Integer charge)", "class_method_signature": "DebugAtomType.setFormalCharge(Integer charge)", "testcase": false, "constructor": false}, {"identifier": "getFormalCharge", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getFormalCharge()", "full_signature": "@Override public Integer getFormalCharge()", "class_method_signature": "DebugAtomType.getFormalCharge()", "testcase": false, "constructor": false}, {"identifier": "setFormalNeighbourCount", "parameters": "(Integer count)", "modifiers": "@Override public", "return": "void", "signature": "void setFormalNeighbourCount(Integer count)", "full_signature": "@Override public void setFormalNeighbourCount(Integer count)", "class_method_signature": "DebugAtomType.setFormalNeighbourCount(Integer count)", "testcase": false, "constructor": false}, {"identifier": "getFormalNeighbourCount", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getFormalNeighbourCount()", "full_signature": "@Override public Integer getFormalNeighbourCount()", "class_method_signature": "DebugAtomType.getFormalNeighbourCount()", "testcase": false, "constructor": false}, {"identifier": "setHybridization", "parameters": "(IAtomType.Hybridization hybridization)", "modifiers": "@Override public", "return": "void", "signature": "void setHybridization(IAtomType.Hybridization hybridization)", "full_signature": "@Override public void setHybridization(IAtomType.Hybridization hybridization)", "class_method_signature": "DebugAtomType.setHybridization(IAtomType.Hybridization hybridization)", "testcase": false, "constructor": false}, {"identifier": "getHybridization", "parameters": "()", "modifiers": "@Override public", "return": "IAtomType.Hybridization", "signature": "IAtomType.Hybridization getHybridization()", "full_signature": "@Override public IAtomType.Hybridization getHybridization()", "class_method_signature": "DebugAtomType.getHybridization()", "testcase": false, "constructor": false}, {"identifier": "setCovalentRadius", "parameters": "(Double radius)", "modifiers": "@Override public", "return": "void", "signature": "void setCovalentRadius(Double radius)", "full_signature": "@Override public void setCovalentRadius(Double radius)", "class_method_signature": "DebugAtomType.setCovalentRadius(Double radius)", "testcase": false, "constructor": false}, {"identifier": "getCovalentRadius", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getCovalentRadius()", "full_signature": "@Override public Double getCovalentRadius()", "class_method_signature": "DebugAtomType.getCovalentRadius()", "testcase": false, "constructor": false}, {"identifier": "setValency", "parameters": "(Integer valency)", "modifiers": "@Override public", "return": "void", "signature": "void setValency(Integer valency)", "full_signature": "@Override public void setValency(Integer valency)", "class_method_signature": "DebugAtomType.setValency(Integer valency)", "testcase": false, "constructor": false}, {"identifier": "getValency", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getValency()", "full_signature": "@Override public Integer getValency()", "class_method_signature": "DebugAtomType.getValency()", "testcase": false, "constructor": false}], "file": "base/datadebug/src/main/java/org/openscience/cdk/debug/DebugAtomType.java"}, "focal_method": {"identifier": "setBondOrderSum", "parameters": "(Double bondOrderSum)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setBondOrderSum(Double bondOrderSum) {\n        logger.debug(\"Setting bond order sum: \", bondOrderSum);\n        super.setBondOrderSum(bondOrderSum);\n    }", "signature": "void setBondOrderSum(Double bondOrderSum)", "full_signature": "@Override public void setBondOrderSum(Double bondOrderSum)", "class_method_signature": "DebugAtomType.setBondOrderSum(Double bondOrderSum)", "testcase": false, "constructor": false, "invocations": ["debug", "setBondOrderSum"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}