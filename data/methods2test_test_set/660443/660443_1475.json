{"test_class": {"identifier": "FractionalPSADescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(FractionalPSADescriptorTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(FractionalPSADescriptorTest.class)", "var_name": "logger"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/FractionalPSADescriptorTest.java"}, "test_case": {"identifier": "testDescriptors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDescriptors() throws Exception {\n        String fnmol = \"data/cdd/pyridineacid.mol\";\n        MDLV2000Reader mdl = new MDLV2000Reader(this.getClass().getClassLoader().getResourceAsStream(fnmol));\n        AtomContainer mol = new AtomContainer();\n        mdl.read(mol);\n        mdl.close();\n\n        FractionalPSADescriptor fpsa = new FractionalPSADescriptor();\n        DescriptorValue results = fpsa.calculate(mol);\n\n        // note: test currently assumes that just one descriptor is calculated\n        String[] names = results.getNames();\n        if (names.length != 1 || !names[0].equals(\"tpsaEfficiency\"))\n            throw new CDKException(\"Only expecting 'tpsaEfficiency'\");\n        DoubleResult value = (DoubleResult) results.getValue();\n        double tpsaEfficiency = value.doubleValue();\n        final double ANSWER = 0.4036, ANSWER_LO = ANSWER * 0.999, ANSWER_HI = ANSWER * 1.001; // (we can tolerate rounding errors)\n        if (tpsaEfficiency < ANSWER_LO || tpsaEfficiency > ANSWER_HI) {\n            throw new CDKException(\"Got \" + tpsaEfficiency + \", expected \" + ANSWER);\n        }\n    }", "signature": "void testDescriptors()", "full_signature": "@Test public void testDescriptors()", "class_method_signature": "FractionalPSADescriptorTest.testDescriptors()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "close", "calculate", "getNames", "equals", "getValue", "doubleValue"]}, "focal_class": {"identifier": "FractionalPSADescriptor", "superclass": "", "interfaces": "implements IMolecularDescriptor", "fields": [], "methods": [{"identifier": "FractionalPSADescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FractionalPSADescriptor()", "full_signature": "public  FractionalPSADescriptor()", "class_method_signature": "FractionalPSADescriptor.FractionalPSADescriptor()", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(IChemObjectBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(IChemObjectBuilder builder)", "full_signature": "@Override public void initialise(IChemObjectBuilder builder)", "class_method_signature": "FractionalPSADescriptor.initialise(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "FractionalPSADescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "FractionalPSADescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "FractionalPSADescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "FractionalPSADescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "FractionalPSADescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer mol)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer mol)", "class_method_signature": "FractionalPSADescriptor.calculate(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "FractionalPSADescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "FractionalPSADescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "FractionalPSADescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/FractionalPSADescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer mol)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer mol) {\n        try {\n            mol = mol.clone();\n        } catch (CloneNotSupportedException ex) {\n        }\n        double polar = 0, weight = 0;\n        try {\n            // type & assign implicit hydrogens\n            IChemObjectBuilder builder = mol.getBuilder();\n            CDKAtomTypeMatcher matcher = CDKAtomTypeMatcher.getInstance(builder);\n            for (IAtom atom : mol.atoms()) {\n                IAtomType type = matcher.findMatchingAtomType(mol, atom);\n                AtomTypeManipulator.configure(atom, type);\n            }\n            CDKHydrogenAdder adder = CDKHydrogenAdder.getInstance(builder);\n            adder.addImplicitHydrogens(mol);\n\n            // polar surface area: chain it off the TPSADescriptor\n            TPSADescriptor tpsa = new TPSADescriptor();\n            DescriptorValue value = tpsa.calculate(mol);\n            polar = ((DoubleResult) value.getValue()).doubleValue();\n\n            //  molecular weight\n            for (IAtom atom : mol.atoms()) {\n                weight += Isotopes.getInstance().getMajorIsotope(atom.getSymbol()).getExactMass();\n                Integer hcount = atom.getImplicitHydrogenCount();\n                if (hcount != CDKConstants.UNSET) weight += hcount * 1.00782504;\n            }\n        } catch (CDKException | IOException exception) {\n            return getDummyDescriptorValue(exception);\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                weight == 0 ? 0 : polar / weight), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer mol)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer mol)", "class_method_signature": "FractionalPSADescriptor.calculate(IAtomContainer mol)", "testcase": false, "constructor": false, "invocations": ["clone", "getBuilder", "getInstance", "atoms", "findMatchingAtomType", "configure", "getInstance", "addImplicitHydrogens", "calculate", "doubleValue", "getValue", "atoms", "getExactMass", "getMajorIsotope", "getInstance", "getSymbol", "getImplicitHydrogenCount", "getDummyDescriptorValue", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}