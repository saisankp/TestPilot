{"test_class": {"identifier": "AstNodeFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AstNodeFactory nodeFactory;", "modifier": "private", "type": "AstNodeFactory", "declarator": "nodeFactory", "var_name": "nodeFactory"}, {"original_string": "private AstNode rootNode;", "modifier": "private", "type": "AstNode", "declarator": "rootNode", "var_name": "rootNode"}], "file": "sequencers/modeshape-sequencer-ddl/src/test/java/org/modeshape/sequencer/ddl/node/AstNodeFactoryTest.java"}, "test_case": {"identifier": "shouldCreateChildNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateChildNode() {\n        String name = \"myNodeName\";\n\n        nodeFactory.node(name, rootNode, StandardDdlLexicon.TYPE_CREATE_TABLE_STATEMENT);\n\n        assertThat(rootNode.getChildCount(), is(1));\n        assertEquals(rootNode.getProperty(JcrConstants.JCR_MIXIN_TYPES), StandardDdlLexicon.STATEMENTS_CONTAINER);\n        assertEquals(rootNode.getChild(0).getProperty(JcrConstants.JCR_MIXIN_TYPES),\n                     StandardDdlLexicon.TYPE_CREATE_TABLE_STATEMENT);\n        assertThat(rootNode.getChild(0).getName(), is(name));\n    }", "signature": "void shouldCreateChildNode()", "full_signature": "@Test public void shouldCreateChildNode()", "class_method_signature": "AstNodeFactoryTest.shouldCreateChildNode()", "testcase": true, "constructor": false, "invocations": ["node", "assertThat", "getChildCount", "is", "assertEquals", "getProperty", "assertEquals", "getProperty", "getChild", "assertThat", "getName", "getChild", "is"]}, "focal_class": {"identifier": "AstNodeFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "node", "parameters": "( String name )", "modifiers": "public", "return": "AstNode", "signature": "AstNode node( String name )", "full_signature": "public AstNode node( String name )", "class_method_signature": "AstNodeFactory.node( String name )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( String name,\n                         AstNode parent,\n                         Object... types )", "modifiers": "public", "return": "AstNode", "signature": "AstNode node( String name,\n                         AstNode parent,\n                         Object... types )", "full_signature": "public AstNode node( String name,\n                         AstNode parent,\n                         Object... types )", "class_method_signature": "AstNodeFactory.node( String name,\n                         AstNode parent,\n                         Object... types )", "testcase": false, "constructor": false}, {"identifier": "node", "parameters": "( String name,\n                         AstNode parent,\n                         String type )", "modifiers": "public", "return": "AstNode", "signature": "AstNode node( String name,\n                         AstNode parent,\n                         String type )", "full_signature": "public AstNode node( String name,\n                         AstNode parent,\n                         String type )", "class_method_signature": "AstNodeFactory.node( String name,\n                         AstNode parent,\n                         String type )", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "( AstNode node,\n                         String type )", "modifiers": "public", "return": "void", "signature": "void setType( AstNode node,\n                         String type )", "full_signature": "public void setType( AstNode node,\n                         String type )", "class_method_signature": "AstNodeFactory.setType( AstNode node,\n                         String type )", "testcase": false, "constructor": false}, {"identifier": "getChildrenForType", "parameters": "( AstNode astNode,\n                                             String nodeType )", "modifiers": "public", "return": "List<AstNode>", "signature": "List<AstNode> getChildrenForType( AstNode astNode,\n                                             String nodeType )", "full_signature": "public List<AstNode> getChildrenForType( AstNode astNode,\n                                             String nodeType )", "class_method_signature": "AstNodeFactory.getChildrenForType( AstNode astNode,\n                                             String nodeType )", "testcase": false, "constructor": false}, {"identifier": "getChildforNameAndType", "parameters": "( AstNode astNode,\n                                           String name,\n                                           String nodeType )", "modifiers": "public", "return": "AstNode", "signature": "AstNode getChildforNameAndType( AstNode astNode,\n                                           String name,\n                                           String nodeType )", "full_signature": "public AstNode getChildforNameAndType( AstNode astNode,\n                                           String name,\n                                           String nodeType )", "class_method_signature": "AstNodeFactory.getChildforNameAndType( AstNode astNode,\n                                           String name,\n                                           String nodeType )", "testcase": false, "constructor": false}, {"identifier": "hasMixinType", "parameters": "( AstNode node,\n                                 String mixinType )", "modifiers": "public", "return": "boolean", "signature": "boolean hasMixinType( AstNode node,\n                                 String mixinType )", "full_signature": "public boolean hasMixinType( AstNode node,\n                                 String mixinType )", "class_method_signature": "AstNodeFactory.hasMixinType( AstNode node,\n                                 String mixinType )", "testcase": false, "constructor": false}], "file": "sequencers/modeshape-sequencer-ddl/src/main/java/org/modeshape/sequencer/ddl/node/AstNodeFactory.java"}, "focal_method": {"identifier": "node", "parameters": "( String name )", "modifiers": "public", "return": "AstNode", "body": "public AstNode node( String name ) {\n        CheckArg.isNotNull(name, \"name\");\n        AstNode node = new AstNode(name);\n        node.setProperty(JCR_PRIMARY_TYPE, NT_UNSTRUCTURED);\n        return node;\n    }", "signature": "AstNode node( String name )", "full_signature": "public AstNode node( String name )", "class_method_signature": "AstNodeFactory.node( String name )", "testcase": false, "constructor": false, "invocations": ["isNotNull", "setProperty"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}