{"test_class": {"identifier": "NaiveBayesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger log = LoggerFactory.getLogger( NaiveBayesTest.class );", "modifier": "static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( NaiveBayesTest.class )", "var_name": "log"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/classifier/bayes/NaiveBayesTest.java"}, "test_case": {"identifier": "testPredict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPredict() {\n\t\t//fail(\"Not yet implemented\");\n\t}", "signature": "void testPredict()", "full_signature": "@Test public void testPredict()", "class_method_signature": "NaiveBayesTest.testPredict()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "NaiveBayes", "superclass": "extends AbstractClassifier<Data,String>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1095437834368310484L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1095437834368310484L", "var_name": "serialVersionUID"}, {"original_string": "static Logger log = LoggerFactory.getLogger( NaiveBayes.class );", "modifier": "static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger( NaiveBayes.class )", "var_name": "log"}, {"original_string": "String labelAttribute = null;", "modifier": "", "type": "String", "declarator": "labelAttribute = null", "var_name": "labelAttribute"}, {"original_string": "Double laplaceCorrection = 0.0001;", "modifier": "", "type": "Double", "declarator": "laplaceCorrection = 0.0001", "var_name": "laplaceCorrection"}, {"original_string": "Double confidenceGap = new Double( 0.0d );", "modifier": "", "type": "Double", "declarator": "confidenceGap = new Double( 0.0d )", "var_name": "confidenceGap"}, {"original_string": "Boolean wop = false;", "modifier": "", "type": "Boolean", "declarator": "wop = false", "var_name": "wop"}, {"original_string": "Distribution<String> classDistribution = null;", "modifier": "", "type": "Distribution<String>", "declarator": "classDistribution = null", "var_name": "classDistribution"}, {"original_string": "Map<String,Distribution<?>> distributions = new HashMap<String,Distribution<?>>();", "modifier": "", "type": "Map<String,Distribution<?>>", "declarator": "distributions = new HashMap<String,Distribution<?>>()", "var_name": "distributions"}], "methods": [{"identifier": "NaiveBayes", "parameters": "()", "modifiers": "public", "return": "", "signature": " NaiveBayes()", "full_signature": "public  NaiveBayes()", "class_method_signature": "NaiveBayes.NaiveBayes()", "testcase": false, "constructor": true}, {"identifier": "NaiveBayes", "parameters": "( String labelAttribute )", "modifiers": "public", "return": "", "signature": " NaiveBayes( String labelAttribute )", "full_signature": "public  NaiveBayes( String labelAttribute )", "class_method_signature": "NaiveBayes.NaiveBayes( String labelAttribute )", "testcase": false, "constructor": true}, {"identifier": "getLabelAttribute", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLabelAttribute()", "full_signature": "public String getLabelAttribute()", "class_method_signature": "NaiveBayes.getLabelAttribute()", "testcase": false, "constructor": false}, {"identifier": "setLabelAttribute", "parameters": "(String labelAttribute)", "modifiers": "public", "return": "void", "signature": "void setLabelAttribute(String labelAttribute)", "full_signature": "public void setLabelAttribute(String labelAttribute)", "class_method_signature": "NaiveBayes.setLabelAttribute(String labelAttribute)", "testcase": false, "constructor": false}, {"identifier": "getLaplaceCorrection", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getLaplaceCorrection()", "full_signature": "public Double getLaplaceCorrection()", "class_method_signature": "NaiveBayes.getLaplaceCorrection()", "testcase": false, "constructor": false}, {"identifier": "setLaplaceCorrection", "parameters": "(Double laplaceCorrection)", "modifiers": "public", "return": "void", "signature": "void setLaplaceCorrection(Double laplaceCorrection)", "full_signature": "public void setLaplaceCorrection(Double laplaceCorrection)", "class_method_signature": "NaiveBayes.setLaplaceCorrection(Double laplaceCorrection)", "testcase": false, "constructor": false}, {"identifier": "getConfidenceGap", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getConfidenceGap()", "full_signature": "public Double getConfidenceGap()", "class_method_signature": "NaiveBayes.getConfidenceGap()", "testcase": false, "constructor": false}, {"identifier": "setConfidenceGap", "parameters": "(Double confidenceGap)", "modifiers": "public", "return": "void", "signature": "void setConfidenceGap(Double confidenceGap)", "full_signature": "public void setConfidenceGap(Double confidenceGap)", "class_method_signature": "NaiveBayes.setConfidenceGap(Double confidenceGap)", "testcase": false, "constructor": false}, {"identifier": "getWop", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean getWop()", "full_signature": "public Boolean getWop()", "class_method_signature": "NaiveBayes.getWop()", "testcase": false, "constructor": false}, {"identifier": "setWop", "parameters": "(Boolean wop)", "modifiers": "public", "return": "void", "signature": "void setWop(Boolean wop)", "full_signature": "public void setWop(Boolean wop)", "class_method_signature": "NaiveBayes.setWop(Boolean wop)", "testcase": false, "constructor": false}, {"identifier": "vote", "parameters": "(Data item)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Map<String,Double>", "signature": "Map<String,Double> vote(Data item)", "full_signature": "@SuppressWarnings(\"unchecked\") public Map<String,Double> vote(Data item)", "class_method_signature": "NaiveBayes.vote(Data item)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "( Data item )", "modifiers": "@Override public", "return": "String", "signature": "String predict( Data item )", "full_signature": "@Override public String predict( Data item )", "class_method_signature": "NaiveBayes.predict( Data item )", "testcase": false, "constructor": false}, {"identifier": "getNominalCondition", "parameters": "( String attribute, Data item )", "modifiers": "public", "return": "String", "signature": "String getNominalCondition( String attribute, Data item )", "full_signature": "public String getNominalCondition( String attribute, Data item )", "class_method_signature": "NaiveBayes.getNominalCondition( String attribute, Data item )", "testcase": false, "constructor": false}, {"identifier": "learn", "parameters": "(Data item)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void learn(Data item)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void learn(Data item)", "class_method_signature": "NaiveBayes.learn(Data item)", "testcase": false, "constructor": false}, {"identifier": "getClassDistribution", "parameters": "()", "modifiers": "public", "return": "Distribution<String>", "signature": "Distribution<String> getClassDistribution()", "full_signature": "public Distribution<String> getClassDistribution()", "class_method_signature": "NaiveBayes.getClassDistribution()", "testcase": false, "constructor": false}, {"identifier": "getNumericalDistributions", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<Distribution<Double>>", "signature": "List<Distribution<Double>> getNumericalDistributions()", "full_signature": "@SuppressWarnings(\"unchecked\") public List<Distribution<Double>> getNumericalDistributions()", "class_method_signature": "NaiveBayes.getNumericalDistributions()", "testcase": false, "constructor": false}, {"identifier": "createNominalDistribution", "parameters": "()", "modifiers": "public", "return": "Distribution<String>", "signature": "Distribution<String> createNominalDistribution()", "full_signature": "public Distribution<String> createNominalDistribution()", "class_method_signature": "NaiveBayes.createNominalDistribution()", "testcase": false, "constructor": false}, {"identifier": "createNumericalDistribution", "parameters": "()", "modifiers": "public", "return": "Distribution<Double>", "signature": "Distribution<Double> createNumericalDistribution()", "full_signature": "public Distribution<Double> createNumericalDistribution()", "class_method_signature": "NaiveBayes.createNumericalDistribution()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/classifier/bayes/NaiveBayes.java"}, "focal_method": {"identifier": "predict", "parameters": "( Data item )", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String predict( Data item ){\n\t\tMap<String,Double> probs = this.vote( item );\n\t\tDouble max = 0.0d;\n\t\tString maxClass = null;\n\t\tDouble confidence = 0.0d;\n\n\t\tfor( String clazz : probs.keySet() ){\n\t\t\tDouble likelihood = probs.get( clazz );\n\t\t\tlog.debug( \"probability for {} is {}\", clazz, likelihood );\n\t\t\t//item.put( LearnerUtils.hide( \"pred(\" + clazz + \")\" ), likelihood );\n\t\t\tif( maxClass == null || likelihood > max ){\n\t\t\t\tmaxClass = clazz;\n\t\t\t\tif( max != null )\n\t\t\t\t\tconfidence = 1.0d - Math.abs( likelihood - max );\n\t\t\t\telse\n\t\t\t\t\tconfidence = 1.0d;\n\t\t\t\tmax = likelihood;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlog.info( \"Predicting class {}, label is: {}, confidence-gap: \" + confidence + \" wop=\" + wop, maxClass, item.get( labelAttribute ) );\n\t\treturn maxClass;\n\t}", "signature": "String predict( Data item )", "full_signature": "@Override public String predict( Data item )", "class_method_signature": "NaiveBayes.predict( Data item )", "testcase": false, "constructor": false, "invocations": ["vote", "keySet", "get", "debug", "abs", "info", "get"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}