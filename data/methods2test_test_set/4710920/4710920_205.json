{"test_class": {"identifier": "RpcUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/RpcUtilsTest.java"}, "test_case": {"identifier": "testGetReturnType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReturnType() {\n        Class<?> demoServiceClass = DemoService.class;\n        String serviceName = demoServiceClass.getName();\n        Invoker invoker = mock(Invoker.class);\n        given(invoker.getUrl()).willReturn(URL.valueOf(\"test://127.0.0.1:1/org.apache.dubbo.rpc.support.DemoService?interface=org.apache.dubbo.rpc.support.DemoService\"));\n\n        // void sayHello(String name);\n        RpcInvocation inv = new RpcInvocation(\"sayHello\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        Class<?> returnType = RpcUtils.getReturnType(inv);\n        Assertions.assertNull(returnType);\n\n        //String echo(String text);\n        RpcInvocation inv1 = new RpcInvocation(\"echo\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        Class<?> returnType1 = RpcUtils.getReturnType(inv1);\n        Assertions.assertNotNull(returnType1);\n        Assertions.assertEquals(String.class, returnType1);\n\n        //int getSize(String[] strs);\n        RpcInvocation inv2 = new RpcInvocation(\"getSize\", serviceName, \"\", new Class<?>[]{String[].class}, null, null, invoker, null);\n        Class<?> returnType2 = RpcUtils.getReturnType(inv2);\n        Assertions.assertNotNull(returnType2);\n        Assertions.assertEquals(int.class, returnType2);\n\n        //Person getPerson(Person person);\n        RpcInvocation inv3 = new RpcInvocation(\"getPerson\", serviceName, \"\", new Class<?>[]{Person.class}, null, null, invoker, null);\n        Class<?> returnType3 = RpcUtils.getReturnType(inv3);\n        Assertions.assertNotNull(returnType3);\n        Assertions.assertEquals(Person.class, returnType3);\n\n        //List<String> testReturnType1(String str);\n        RpcInvocation inv4 = new RpcInvocation(\"testReturnType1\", serviceName, \"\", new Class<?>[]{String.class}, null, null, invoker, null);\n        Class<?> returnType4 = RpcUtils.getReturnType(inv4);\n        Assertions.assertNotNull(returnType4);\n        Assertions.assertEquals(List.class, returnType4);\n\n    }", "signature": "void testGetReturnType()", "full_signature": "@Test public void testGetReturnType()", "class_method_signature": "RpcUtilsTest.testGetReturnType()", "testcase": true, "constructor": false, "invocations": ["getName", "mock", "willReturn", "given", "getUrl", "valueOf", "getReturnType", "assertNull", "getReturnType", "assertNotNull", "assertEquals", "getReturnType", "assertNotNull", "assertEquals", "getReturnType", "assertNotNull", "assertEquals", "getReturnType", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "RpcUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RpcUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RpcUtils.class)", "var_name": "logger"}, {"original_string": "private static final AtomicLong INVOKE_ID = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "INVOKE_ID = new AtomicLong(0)", "var_name": "INVOKE_ID"}], "methods": [{"identifier": "getReturnType", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getReturnType(Invocation invocation)", "full_signature": "public static Class<?> getReturnType(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnType(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getReturnTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getReturnTypes(Invocation invocation)", "full_signature": "public static Type[] getReturnTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getInvocationId", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "Long", "signature": "Long getInvocationId(Invocation inv)", "full_signature": "public static Long getInvocationId(Invocation inv)", "class_method_signature": "RpcUtils.getInvocationId(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "attachInvocationIdIfAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "void", "signature": "void attachInvocationIdIfAsync(URL url, Invocation inv)", "full_signature": "public static void attachInvocationIdIfAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.attachInvocationIdIfAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isAttachInvocationId", "parameters": "(URL url, Invocation invocation)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAttachInvocationId(URL url, Invocation invocation)", "full_signature": "private static boolean isAttachInvocationId(URL url, Invocation invocation)", "class_method_signature": "RpcUtils.isAttachInvocationId(URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "String", "signature": "String getMethodName(Invocation invocation)", "full_signature": "public static String getMethodName(Invocation invocation)", "class_method_signature": "RpcUtils.getMethodName(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Object[]", "signature": "Object[] getArguments(Invocation invocation)", "full_signature": "public static Object[] getArguments(Invocation invocation)", "class_method_signature": "RpcUtils.getArguments(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getParameterTypes", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getParameterTypes(Invocation invocation)", "full_signature": "public static Class<?>[] getParameterTypes(Invocation invocation)", "class_method_signature": "RpcUtils.getParameterTypes(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isAsync", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsync(URL url, Invocation inv)", "full_signature": "public static boolean isAsync(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isAsync(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isReturnTypeFuture", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReturnTypeFuture(Invocation inv)", "full_signature": "public static boolean isReturnTypeFuture(Invocation inv)", "class_method_signature": "RpcUtils.isReturnTypeFuture(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericAsync", "parameters": "(Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericAsync(Invocation inv)", "full_signature": "public static boolean isGenericAsync(Invocation inv)", "class_method_signature": "RpcUtils.isGenericAsync(Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isGenericCall", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericCall(String parameterTypesDesc, String method)", "full_signature": "public static boolean isGenericCall(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isGenericCall(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "isEcho", "parameters": "(String parameterTypesDesc, String method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEcho(String parameterTypesDesc, String method)", "full_signature": "public static boolean isEcho(String parameterTypesDesc, String method)", "class_method_signature": "RpcUtils.isEcho(String parameterTypesDesc, String method)", "testcase": false, "constructor": false}, {"identifier": "getInvokeMode", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "InvokeMode", "signature": "InvokeMode getInvokeMode(URL url, Invocation inv)", "full_signature": "public static InvokeMode getInvokeMode(URL url, Invocation inv)", "class_method_signature": "RpcUtils.getInvokeMode(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "isOneway", "parameters": "(URL url, Invocation inv)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOneway(URL url, Invocation inv)", "full_signature": "public static boolean isOneway(URL url, Invocation inv)", "class_method_signature": "RpcUtils.isOneway(URL url, Invocation inv)", "testcase": false, "constructor": false}, {"identifier": "getMethodByService", "parameters": "(Invocation invocation, String service)", "modifiers": "private static", "return": "Method", "signature": "Method getMethodByService(Invocation invocation, String service)", "full_signature": "private static Method getMethodByService(Invocation invocation, String service)", "class_method_signature": "RpcUtils.getMethodByService(Invocation invocation, String service)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(Invocation invocation, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(Invocation invocation, long defaultTimeout)", "full_signature": "public static long getTimeout(Invocation invocation, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(Invocation invocation, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(URL url, String methodName, RpcContext context, long defaultTimeout)", "modifiers": "public static", "return": "long", "signature": "long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "full_signature": "public static long getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "class_method_signature": "RpcUtils.getTimeout(URL url, String methodName, RpcContext context, long defaultTimeout)", "testcase": false, "constructor": false}, {"identifier": "convertToNumber", "parameters": "(Object obj, long defaultTimeout)", "modifiers": "private static", "return": "long", "signature": "long convertToNumber(Object obj, long defaultTimeout)", "full_signature": "private static long convertToNumber(Object obj, long defaultTimeout)", "class_method_signature": "RpcUtils.convertToNumber(Object obj, long defaultTimeout)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/RpcUtils.java"}, "focal_method": {"identifier": "getReturnType", "parameters": "(Invocation invocation)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getReturnType(Invocation invocation) {\n        try {\n            if (invocation != null && invocation.getInvoker() != null\n                    && invocation.getInvoker().getUrl() != null\n                    && invocation.getInvoker().getInterface() != GenericService.class\n                    && !invocation.getMethodName().startsWith(\"$\")) {\n                String service = invocation.getInvoker().getUrl().getServiceInterface();\n                if (StringUtils.isNotEmpty(service)) {\n                    Method method = getMethodByService(invocation, service);\n                    return method.getReturnType();\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        }\n        return null;\n    }", "signature": "Class<?> getReturnType(Invocation invocation)", "full_signature": "public static Class<?> getReturnType(Invocation invocation)", "class_method_signature": "RpcUtils.getReturnType(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getInvoker", "getUrl", "getInvoker", "getInterface", "getInvoker", "startsWith", "getMethodName", "getServiceInterface", "getUrl", "getInvoker", "isNotEmpty", "getMethodByService", "getReturnType", "warn", "getMessage"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}