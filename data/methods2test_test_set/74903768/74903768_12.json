{"test_class": {"identifier": "CryptoContainerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "@Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule public final", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "crypto-lib/src/test/java/ee/ria/DigiDoc/crypto/CryptoContainerTest.java"}, "test_case": {"identifier": "isContainerFileName_cdocExtensionCaseSensitive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isContainerFileName_cdocExtensionCaseSensitive() {\n        assertThat(CryptoContainer.isContainerFileName(\"some-file.cDoC\"))\n                .isTrue();\n    }", "signature": "void isContainerFileName_cdocExtensionCaseSensitive()", "full_signature": "@Test public void isContainerFileName_cdocExtensionCaseSensitive()", "class_method_signature": "CryptoContainerTest.isContainerFileName_cdocExtensionCaseSensitive()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isContainerFileName"]}, "focal_class": {"identifier": "CryptoContainer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXTENSION = \"cdoc\";", "modifier": "private static final", "type": "String", "declarator": "EXTENSION = \"cdoc\"", "var_name": "EXTENSION"}], "methods": [{"identifier": "file", "parameters": "()", "modifiers": "public abstract", "return": "File", "signature": "File file()", "full_signature": "public abstract File file()", "class_method_signature": "CryptoContainer.file()", "testcase": false, "constructor": false}, {"identifier": "dataFiles", "parameters": "()", "modifiers": "public abstract", "return": "ImmutableList<File>", "signature": "ImmutableList<File> dataFiles()", "full_signature": "public abstract ImmutableList<File> dataFiles()", "class_method_signature": "CryptoContainer.dataFiles()", "testcase": false, "constructor": false}, {"identifier": "recipients", "parameters": "()", "modifiers": "public abstract", "return": "ImmutableList<Certificate>", "signature": "ImmutableList<Certificate> recipients()", "full_signature": "public abstract ImmutableList<Certificate> recipients()", "class_method_signature": "CryptoContainer.recipients()", "testcase": false, "constructor": false}, {"identifier": "decrypted", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean decrypted()", "full_signature": "public abstract boolean decrypted()", "class_method_signature": "CryptoContainer.decrypted()", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(DecryptToken decryptToken, Certificate authCertificate,\n                                   String pin1, File dataFilesDirectory)", "modifiers": "public", "return": "CryptoContainer", "signature": "CryptoContainer decrypt(DecryptToken decryptToken, Certificate authCertificate,\n                                   String pin1, File dataFilesDirectory)", "full_signature": "public CryptoContainer decrypt(DecryptToken decryptToken, Certificate authCertificate,\n                                   String pin1, File dataFilesDirectory)", "class_method_signature": "CryptoContainer.decrypt(DecryptToken decryptToken, Certificate authCertificate,\n                                   String pin1, File dataFilesDirectory)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(File file)", "modifiers": "@WorkerThread public static", "return": "CryptoContainer", "signature": "CryptoContainer open(File file)", "full_signature": "@WorkerThread public static CryptoContainer open(File file)", "class_method_signature": "CryptoContainer.open(File file)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients, File file)", "modifiers": "@WorkerThread public static", "return": "CryptoContainer", "signature": "CryptoContainer encrypt(ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients, File file)", "full_signature": "@WorkerThread public static CryptoContainer encrypt(ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients, File file)", "class_method_signature": "CryptoContainer.encrypt(ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients, File file)", "testcase": false, "constructor": false}, {"identifier": "isContainerFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isContainerFileName(String fileName)", "full_signature": "public static boolean isContainerFileName(String fileName)", "class_method_signature": "CryptoContainer.isContainerFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "createContainerFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "String", "signature": "String createContainerFileName(String fileName)", "full_signature": "public static String createContainerFileName(String fileName)", "class_method_signature": "CryptoContainer.createContainerFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(File file, ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients,\n                                          boolean decrypted)", "modifiers": "private static", "return": "CryptoContainer", "signature": "CryptoContainer create(File file, ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients,\n                                          boolean decrypted)", "full_signature": "private static CryptoContainer create(File file, ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients,\n                                          boolean decrypted)", "class_method_signature": "CryptoContainer.create(File file, ImmutableList<File> dataFiles,\n                                          ImmutableList<Certificate> recipients,\n                                          boolean decrypted)", "testcase": false, "constructor": false}], "file": "crypto-lib/src/main/java/ee/ria/DigiDoc/crypto/CryptoContainer.java"}, "focal_method": {"identifier": "isContainerFileName", "parameters": "(String fileName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isContainerFileName(String fileName) {\n        return getFileExtension(fileName).toLowerCase(Locale.US).equals(EXTENSION);\n    }", "signature": "boolean isContainerFileName(String fileName)", "full_signature": "public static boolean isContainerFileName(String fileName)", "class_method_signature": "CryptoContainer.isContainerFileName(String fileName)", "testcase": false, "constructor": false, "invocations": ["equals", "toLowerCase", "getFileExtension"]}, "repository": {"repo_id": 74903768, "url": "https://github.com/open-eid/MOPP-Android", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 9, "size": 526035, "license": "licensed"}}