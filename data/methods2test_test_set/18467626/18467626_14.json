{"test_class": {"identifier": "TrackUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/devnied/emvnfccard/utils/TrackUtilsTest.java"}, "test_case": {"identifier": "track1FormatTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void track1FormatTest() {\n\t\tEmvTrack1 track1 = TrackUtils\n\t\t\t\t.extractTrack1Data(\n\t\t\t\t\t\tBytesUtils\n\t\t\t\t\t\t\t\t.fromString(\"42353231313131313131313131313131315E202F2020202020202020202020202020202020202020202020205E31363038323032303030303030303030303030312020303030202020202030\"));\n\n\t\tAssertions.assertThat(track1).isNotNull();\n\t\tAssertions.assertThat(track1.getCardNumber()).isEqualTo(\"5211111111111111\");\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"MM/yyyy\");\n\t\tAssertions.assertThat(sdf.format(track1.getExpireDate())).isEqualTo(\"08/2016\");\n\t\tAssertions.assertThat(track1.getHolderFirstname()).isNull();\n\t\tAssertions.assertThat(track1.getHolderLastname()).isNull();\n\t\tAssertions.assertThat(track1.getService()).isNotNull();\n\t\tAssertions.assertThat(track1.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.INTERNATIONNAL_ICC);\n\t\tAssertions.assertThat(track1.getService().getServiceCode1().getInterchange()).isNotNull();\n\t\tAssertions.assertThat(track1.getService().getServiceCode1().getTechnology()).isNotNull();\n\t\tAssertions.assertThat(track1.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.NORMAL);\n\t\tAssertions.assertThat(track1.getService().getServiceCode2().getAuthorizationProcessing()).isNotNull();\n\t\tAssertions.assertThat(track1.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.GOODS_SERVICES);\n\t\tAssertions.assertThat(track1.getService().getServiceCode3().getAllowedServices()).isNotNull();\n\t\tAssertions.assertThat(track1.getService().getServiceCode3().getPinRequirements()).isNotNull();\n\t}", "signature": "void track1FormatTest()", "full_signature": "@Test public void track1FormatTest()", "class_method_signature": "TrackUtilsTest.track1FormatTest()", "testcase": true, "constructor": false, "invocations": ["extractTrack1Data", "fromString", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getCardNumber", "isEqualTo", "assertThat", "format", "getExpireDate", "isNull", "assertThat", "getHolderFirstname", "isNull", "assertThat", "getHolderLastname", "isNotNull", "assertThat", "getService", "isEqualTo", "assertThat", "getServiceCode1", "getService", "isNotNull", "assertThat", "getInterchange", "getServiceCode1", "getService", "isNotNull", "assertThat", "getTechnology", "getServiceCode1", "getService", "isEqualTo", "assertThat", "getServiceCode2", "getService", "isNotNull", "assertThat", "getAuthorizationProcessing", "getServiceCode2", "getService", "isEqualTo", "assertThat", "getServiceCode3", "getService", "isNotNull", "assertThat", "getAllowedServices", "getServiceCode3", "getService", "isNotNull", "assertThat", "getPinRequirements", "getServiceCode3", "getService"]}, "focal_class": {"identifier": "TrackUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TrackUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TrackUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final String CARD_HOLDER_NAME_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "CARD_HOLDER_NAME_SEPARATOR = \"/\"", "var_name": "CARD_HOLDER_NAME_SEPARATOR"}, {"original_string": "private static final Pattern TRACK2_EQUIVALENT_PATTERN = Pattern.compile(\"([0-9]{1,19})D([0-9]{4})([0-9]{3})?(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRACK2_EQUIVALENT_PATTERN = Pattern.compile(\"([0-9]{1,19})D([0-9]{4})([0-9]{3})?(.*)\")", "var_name": "TRACK2_EQUIVALENT_PATTERN"}, {"original_string": "private static final Pattern TRACK1_PATTERN = Pattern\n\t\t\t.compile(\"%?([A-Z])([0-9]{1,19})(\\\\?[0-9])?\\\\^([^\\\\^]{2,26})\\\\^([0-9]{4}|\\\\^)([0-9]{3}|\\\\^)([^\\\\?]+)\\\\??\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRACK1_PATTERN = Pattern\n\t\t\t.compile(\"%?([A-Z])([0-9]{1,19})(\\\\?[0-9])?\\\\^([^\\\\^]{2,26})\\\\^([0-9]{4}|\\\\^)([0-9]{3}|\\\\^)([^\\\\?]+)\\\\??\")", "var_name": "TRACK1_PATTERN"}], "methods": [{"identifier": "extractTrack2EquivalentData", "parameters": "(final byte[] pRawTrack2)", "modifiers": "public static", "return": "EmvTrack2", "signature": "EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "full_signature": "public static EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "class_method_signature": "TrackUtils.extractTrack2EquivalentData(final byte[] pRawTrack2)", "testcase": false, "constructor": false}, {"identifier": "extractTrack1Data", "parameters": "(final byte[] pRawTrack1)", "modifiers": "public static", "return": "EmvTrack1", "signature": "EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "full_signature": "public static EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "class_method_signature": "TrackUtils.extractTrack1Data(final byte[] pRawTrack1)", "testcase": false, "constructor": false}, {"identifier": "TrackUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TrackUtils()", "full_signature": "private  TrackUtils()", "class_method_signature": "TrackUtils.TrackUtils()", "testcase": false, "constructor": true}], "file": "library/src/main/java/com/github/devnied/emvnfccard/utils/TrackUtils.java"}, "focal_method": {"identifier": "extractTrack1Data", "parameters": "(final byte[] pRawTrack1)", "modifiers": "public static", "return": "EmvTrack1", "body": "public static EmvTrack1 extractTrack1Data(final byte[] pRawTrack1) {\n\t\tEmvTrack1 ret = null;\n\n\t\tif (pRawTrack1 != null) {\n\t\t\tEmvTrack1 track1 = new EmvTrack1();\n\t\t\ttrack1.setRaw(pRawTrack1);\n\t\t\tMatcher m = TRACK1_PATTERN.matcher(new String(pRawTrack1));\n\t\t\t// Check pattern\n\t\t\tif (m.find()) {\n\t\t\t\t// Set format code\n\t\t\t\ttrack1.setFormatCode(m.group(1));\n\t\t\t\t// Set card number\n\t\t\t\ttrack1.setCardNumber(m.group(2));\n\t\t\t\t// Extract holder name\n\t\t\t\tString[] name = StringUtils.split(m.group(4).trim(), CARD_HOLDER_NAME_SEPARATOR);\n\t\t\t\tif (name != null && name.length == 2) {\n\t\t\t\t\ttrack1.setHolderLastname(StringUtils.trimToNull(name[0]));\n\t\t\t\t\ttrack1.setHolderFirstname(StringUtils.trimToNull(name[1]));\n\t\t\t\t}\n\t\t\t\t// Read expire date\n\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyMM\", Locale.getDefault());\n\t\t\t\ttry {\n\t\t\t\t\ttrack1.setExpireDate(DateUtils.truncate(sdf.parse(m.group(5)), Calendar.MONTH));\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\tLOGGER.error(\"Unparsable expire card date : {}\", e.getMessage());\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t\t// Read service\n\t\t\t\ttrack1.setService(new Service(m.group(6)));\n\t\t\t\tret = track1;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "signature": "EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "full_signature": "public static EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "class_method_signature": "TrackUtils.extractTrack1Data(final byte[] pRawTrack1)", "testcase": false, "constructor": false, "invocations": ["setRaw", "matcher", "find", "setFormatCode", "group", "setCardNumber", "group", "split", "trim", "group", "setHolderLastname", "trimToNull", "setHolderFirstname", "trimToNull", "getDefault", "setExpireDate", "truncate", "parse", "group", "error", "getMessage", "setService", "group"]}, "repository": {"repo_id": 18467626, "url": "https://github.com/devnied/EMV-NFC-Paycard-Enrollment", "language": "Java", "is_fork": false, "fork_count": 425, "stargazer_count": 934, "size": 4233, "license": "licensed"}}