{"test_class": {"identifier": "DefaultMessagesProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultMessagesProvider provider;", "modifier": "private", "type": "DefaultMessagesProvider", "declarator": "provider", "var_name": "provider"}, {"original_string": "private Definition definition;", "modifier": "private", "type": "Definition", "declarator": "definition", "var_name": "definition"}, {"original_string": "private DocumentBuilder documentBuilder;", "modifier": "private", "type": "DocumentBuilder", "declarator": "documentBuilder", "var_name": "documentBuilder"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/wsdl/wsdl11/provider/DefaultMessagesProviderTest.java"}, "test_case": {"identifier": "testAddMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddMessages() throws Exception {\n\t\tString definitionNamespace = \"http://springframework.org/spring-ws\";\n\t\tdefinition.addNamespace(\"tns\", definitionNamespace);\n\t\tdefinition.setTargetNamespace(definitionNamespace);\n\t\tString schemaNamespace = \"http://www.springframework.org/spring-ws/schema\";\n\t\tdefinition.addNamespace(\"schema\", schemaNamespace);\n\n\t\tResource resource = new ClassPathResource(\"schema.xsd\", getClass());\n\t\tDocument schemaDocument = documentBuilder.parse(SaxUtils.createInputSource(resource));\n\t\tTypes types = definition.createTypes();\n\t\tdefinition.setTypes(types);\n\t\tSchema schema = (Schema) definition.getExtensionRegistry().createExtension(Types.class,\n\t\t\t\tnew QName(\"http://www.w3.org/2001/XMLSchema\", \"schema\"));\n\t\ttypes.addExtensibilityElement(schema);\n\t\tschema.setElement(schemaDocument.getDocumentElement());\n\n\t\tprovider.addMessages(definition);\n\n\t\tAssert.assertEquals(\"Invalid amount of messages created\", 3, definition.getMessages().size());\n\n\t\tMessage message = definition.getMessage(new QName(definitionNamespace, \"GetOrderRequest\"));\n\t\tAssert.assertNotNull(\"Message not created\", message);\n\t\tPart part = message.getPart(\"GetOrderRequest\");\n\t\tAssert.assertNotNull(\"Part not created\", part);\n\t\tAssert.assertEquals(\"Invalid element on part\", new QName(schemaNamespace, \"GetOrderRequest\"),\n\t\t\t\tpart.getElementName());\n\n\t\tmessage = definition.getMessage(new QName(definitionNamespace, \"GetOrderResponse\"));\n\t\tAssert.assertNotNull(\"Message not created\", message);\n\t\tpart = message.getPart(\"GetOrderResponse\");\n\t\tAssert.assertNotNull(\"Part not created\", part);\n\t\tAssert.assertEquals(\"Invalid element on part\", new QName(schemaNamespace, \"GetOrderResponse\"),\n\t\t\t\tpart.getElementName());\n\n\t\tmessage = definition.getMessage(new QName(definitionNamespace, \"GetOrderFault\"));\n\t\tAssert.assertNotNull(\"Message not created\", message);\n\t\tpart = message.getPart(\"GetOrderFault\");\n\t\tAssert.assertNotNull(\"Part not created\", part);\n\t\tAssert.assertEquals(\"Invalid element on part\", new QName(schemaNamespace, \"GetOrderFault\"), part.getElementName());\n\t}", "signature": "void testAddMessages()", "full_signature": "@Test public void testAddMessages()", "class_method_signature": "DefaultMessagesProviderTest.testAddMessages()", "testcase": true, "constructor": false, "invocations": ["addNamespace", "setTargetNamespace", "addNamespace", "getClass", "parse", "createInputSource", "createTypes", "setTypes", "createExtension", "getExtensionRegistry", "addExtensibilityElement", "setElement", "getDocumentElement", "addMessages", "assertEquals", "size", "getMessages", "getMessage", "assertNotNull", "getPart", "assertNotNull", "assertEquals", "getElementName", "getMessage", "assertNotNull", "getPart", "assertNotNull", "assertEquals", "getElementName", "getMessage", "assertNotNull", "getPart", "assertNotNull", "assertEquals", "getElementName"]}, "focal_class": {"identifier": "DefaultMessagesProvider", "superclass": "", "interfaces": "implements MessagesProvider", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog(DefaultMessagesProvider.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(DefaultMessagesProvider.class)", "var_name": "logger"}], "methods": [{"identifier": "addMessages", "parameters": "(Definition definition)", "modifiers": "@Override public", "return": "void", "signature": "void addMessages(Definition definition)", "full_signature": "@Override public void addMessages(Definition definition)", "class_method_signature": "DefaultMessagesProvider.addMessages(Definition definition)", "testcase": false, "constructor": false}, {"identifier": "createMessages", "parameters": "(Definition definition, Element schemaElement)", "modifiers": "private", "return": "void", "signature": "void createMessages(Definition definition, Element schemaElement)", "full_signature": "private void createMessages(Definition definition, Element schemaElement)", "class_method_signature": "DefaultMessagesProvider.createMessages(Definition definition, Element schemaElement)", "testcase": false, "constructor": false}, {"identifier": "getElementName", "parameters": "(Element element)", "modifiers": "protected", "return": "String", "signature": "String getElementName(Element element)", "full_signature": "protected String getElementName(Element element)", "class_method_signature": "DefaultMessagesProvider.getElementName(Element element)", "testcase": false, "constructor": false}, {"identifier": "isMessageElement", "parameters": "(Element element)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMessageElement(Element element)", "full_signature": "protected boolean isMessageElement(Element element)", "class_method_signature": "DefaultMessagesProvider.isMessageElement(Element element)", "testcase": false, "constructor": false}, {"identifier": "populateMessage", "parameters": "(Definition definition, Message message, QName elementName)", "modifiers": "protected", "return": "void", "signature": "void populateMessage(Definition definition, Message message, QName elementName)", "full_signature": "protected void populateMessage(Definition definition, Message message, QName elementName)", "class_method_signature": "DefaultMessagesProvider.populateMessage(Definition definition, Message message, QName elementName)", "testcase": false, "constructor": false}, {"identifier": "populatePart", "parameters": "(Definition definition, Part part, QName elementName)", "modifiers": "protected", "return": "void", "signature": "void populatePart(Definition definition, Part part, QName elementName)", "full_signature": "protected void populatePart(Definition definition, Part part, QName elementName)", "class_method_signature": "DefaultMessagesProvider.populatePart(Definition definition, Part part, QName elementName)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/wsdl/wsdl11/provider/DefaultMessagesProvider.java"}, "focal_method": {"identifier": "addMessages", "parameters": "(Definition definition)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void addMessages(Definition definition) throws WSDLException {\n\t\tTypes types = definition.getTypes();\n\t\tAssert.notNull(types, \"No types element present in definition\");\n\t\tfor (Iterator<?> iterator = types.getExtensibilityElements().iterator(); iterator.hasNext();) {\n\t\t\tExtensibilityElement extensibilityElement = (ExtensibilityElement) iterator.next();\n\t\t\tif (extensibilityElement instanceof Schema) {\n\t\t\t\tSchema schema = (Schema) extensibilityElement;\n\t\t\t\tif (schema.getElement() != null) {\n\t\t\t\t\tcreateMessages(definition, schema.getElement());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (definition.getMessages().isEmpty() && logger.isWarnEnabled()) {\n\t\t\tlogger.warn(\"No messages were created, make sure the referenced schema(s) contain elements\");\n\t\t}\n\t}", "signature": "void addMessages(Definition definition)", "full_signature": "@Override public void addMessages(Definition definition)", "class_method_signature": "DefaultMessagesProvider.addMessages(Definition definition)", "testcase": false, "constructor": false, "invocations": ["getTypes", "notNull", "iterator", "getExtensibilityElements", "hasNext", "next", "getElement", "createMessages", "getElement", "isEmpty", "getMessages", "isWarnEnabled", "warn"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}