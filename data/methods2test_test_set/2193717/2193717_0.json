{"test_class": {"identifier": "TestConvertClassToReflectedTypeMatcher", "superclass": "", "interfaces": "", "fields": [], "file": "fluent-reflection/src/test/java/com/lexicalscope/fluentreflection/TestConvertClassToReflectedTypeMatcher.java"}, "test_case": {"identifier": "classConvertedToMatcherForReflectedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void classConvertedToMatcherForReflectedType() throws Exception {\n        final Matcher<FluentAccess<?>> matcherUnderTest =\n                new ConvertClassToReflectedTypeMatcher().convert(ExampleClass.class);\n\n        assertThat(type(ExampleClass.class), matcherUnderTest);\n    }", "signature": "void classConvertedToMatcherForReflectedType()", "full_signature": "@Test public void classConvertedToMatcherForReflectedType()", "class_method_signature": "TestConvertClassToReflectedTypeMatcher.classConvertedToMatcherForReflectedType()", "testcase": true, "constructor": false, "invocations": ["convert", "assertThat", "type"]}, "focal_class": {"identifier": "ConvertClassToReflectedTypeMatcher", "superclass": "", "interfaces": "implements Converter<Class<?>, Matcher<FluentAccess<?>>>", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Class<?> from)", "modifiers": "@Override public", "return": "Matcher<FluentAccess<?>>", "signature": "Matcher<FluentAccess<?>> convert(final Class<?> from)", "full_signature": "@Override public Matcher<FluentAccess<?>> convert(final Class<?> from)", "class_method_signature": "ConvertClassToReflectedTypeMatcher.convert(final Class<?> from)", "testcase": false, "constructor": false}], "file": "fluent-reflection/src/main/java/com/lexicalscope/fluentreflection/ConvertClassToReflectedTypeMatcher.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Class<?> from)", "modifiers": "@Override public", "return": "Matcher<FluentAccess<?>>", "body": "@Override\n    public Matcher<FluentAccess<?>> convert(final Class<?> from) {\n        return reflectingOn(from);\n    }", "signature": "Matcher<FluentAccess<?>> convert(final Class<?> from)", "full_signature": "@Override public Matcher<FluentAccess<?>> convert(final Class<?> from)", "class_method_signature": "ConvertClassToReflectedTypeMatcher.convert(final Class<?> from)", "testcase": false, "constructor": false, "invocations": ["reflectingOn"]}, "repository": {"repo_id": 2193717, "url": "https://github.com/lexicalscope/fluent-reflection", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 8596, "license": "licensed"}}