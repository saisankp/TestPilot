{"test_class": {"identifier": "CompoundKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "columnfamily/src/test/java/com/puresoltechnologies/ductiledb/columnfamily/CompoundKeyTest.java"}, "test_case": {"identifier": "testTooManyKeyParts", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testTooManyKeyParts() {\n\tbyte[][] keyParts = new byte[256][];\n\tfor (int i = 0; i < 256; ++i) {\n\t    keyParts[i] = new byte[] { (byte) i };\n\t}\n\tCompoundKey.encode(keyParts);\n    }", "signature": "void testTooManyKeyParts()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testTooManyKeyParts()", "class_method_signature": "CompoundKeyTest.testTooManyKeyParts()", "testcase": true, "constructor": false, "invocations": ["encode"]}, "focal_class": {"identifier": "CompoundKey", "superclass": "extends Key", "interfaces": "", "fields": [{"original_string": "List<byte[]> parts = new ArrayList<>();", "modifier": "", "type": "List<byte[]>", "declarator": "parts = new ArrayList<>()", "var_name": "parts"}], "methods": [{"identifier": "decode", "parameters": "(byte[] key)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] decode(byte[] key)", "full_signature": "public static byte[][] decode(byte[] key)", "class_method_signature": "CompoundKey.decode(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[]... keyParts)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(byte[]... keyParts)", "full_signature": "public static byte[] encode(byte[]... keyParts)", "class_method_signature": "CompoundKey.encode(byte[]... keyParts)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(byte[]... keyParts)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey create(byte[]... keyParts)", "full_signature": "public static CompoundKey create(byte[]... keyParts)", "class_method_signature": "CompoundKey.create(byte[]... keyParts)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(byte[] compoundKey)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey of(byte[] compoundKey)", "full_signature": "public static CompoundKey of(byte[] compoundKey)", "class_method_signature": "CompoundKey.of(byte[] compoundKey)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Key... keyParts)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey create(Key... keyParts)", "full_signature": "public static CompoundKey create(Key... keyParts)", "class_method_signature": "CompoundKey.create(Key... keyParts)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Key compoundKey)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey of(Key compoundKey)", "full_signature": "public static CompoundKey of(Key compoundKey)", "class_method_signature": "CompoundKey.of(Key compoundKey)", "testcase": false, "constructor": false}, {"identifier": "CompoundKey", "parameters": "(boolean encoded, byte[]... keyParts)", "modifiers": "private", "return": "", "signature": " CompoundKey(boolean encoded, byte[]... keyParts)", "full_signature": "private  CompoundKey(boolean encoded, byte[]... keyParts)", "class_method_signature": "CompoundKey.CompoundKey(boolean encoded, byte[]... keyParts)", "testcase": false, "constructor": true}, {"identifier": "getPartNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPartNum()", "full_signature": "public int getPartNum()", "class_method_signature": "CompoundKey.getPartNum()", "testcase": false, "constructor": false}, {"identifier": "getPart", "parameters": "(int i)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPart(int i)", "full_signature": "public byte[] getPart(int i)", "class_method_signature": "CompoundKey.getPart(int i)", "testcase": false, "constructor": false}], "file": "columnfamily/src/main/java/com/puresoltechnologies/ductiledb/columnfamily/CompoundKey.java"}, "focal_method": {"identifier": "encode", "parameters": "(byte[]... keyParts)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] encode(byte[]... keyParts) {\n\tif ((keyParts.length == 0) || (keyParts.length > 255)) {\n\t    throw new IllegalArgumentException(\n\t\t    \"The number of key pars needs to be greater than zero and less than or equal 255.\");\n\t}\n\tint keySize = 1; // 1 byte for number parts\n\tfor (byte[] keyPart : keyParts) {\n\t    keySize += 4 + keyPart.length;\n\t}\n\tbyte[] key = new byte[keySize];\n\tkey[0] = (byte) keyParts.length;\n\tint pos = 1;\n\tfor (byte[] keyPart : keyParts) {\n\t    System.arraycopy(Bytes.fromInt(keyPart.length), 0, key, pos, 4);\n\t    pos += 4;\n\t    System.arraycopy(keyPart, 0, key, pos, keyPart.length);\n\t    pos += keyPart.length;\n\t}\n\treturn key;\n    }", "signature": "byte[] encode(byte[]... keyParts)", "full_signature": "public static byte[] encode(byte[]... keyParts)", "class_method_signature": "CompoundKey.encode(byte[]... keyParts)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "fromInt", "arraycopy"]}, "repository": {"repo_id": 45098765, "url": "https://github.com/PureSolTechnologies/DuctileDB", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 12564, "license": "licensed"}}