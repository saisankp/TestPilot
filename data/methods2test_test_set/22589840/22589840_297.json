{"test_class": {"identifier": "MailChannelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MailChannel mailChannelTestObject;", "modifier": "private", "type": "MailChannel", "declarator": "mailChannelTestObject", "var_name": "mailChannelTestObject"}, {"original_string": "private MailService mailServiceMock;", "modifier": "private", "type": "MailService", "declarator": "mailServiceMock", "var_name": "mailServiceMock"}, {"original_string": "private Subscriber subscriber;", "modifier": "private", "type": "Subscriber", "declarator": "subscriber", "var_name": "subscriber"}, {"original_string": "private List<NotificationEventTO> eventTOs = new ArrayList<NotificationEventTO>();", "modifier": "private", "type": "List<NotificationEventTO>", "declarator": "eventTOs = new ArrayList<NotificationEventTO>()", "var_name": "eventTOs"}], "file": "olat7.8/src/test/java/org/olat/lms/core/notification/impl/channel/MailChannelTest.java"}, "test_case": {"identifier": "send_successfull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void send_successfull() throws Exception {\n        doNothing().when(mailServiceMock).sendMailWithTemplate(any(TemplateMailTO.class));\n        mailChannelTestObject.send(subscriber, eventTOs);\n    }", "signature": "void send_successfull()", "full_signature": "@Test public void send_successfull()", "class_method_signature": "MailChannelTest.send_successfull()", "testcase": true, "constructor": false, "invocations": ["sendMailWithTemplate", "when", "doNothing", "any", "send"]}, "focal_class": {"identifier": "MailChannel", "superclass": "", "interfaces": "implements Channel", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    private MailService mailService;", "modifier": "@Autowired\n    private", "type": "MailService", "declarator": "mailService", "var_name": "mailService"}, {"original_string": "@Autowired\n    private EmailBuilder emailBuilder;", "modifier": "@Autowired\n    private", "type": "EmailBuilder", "declarator": "emailBuilder", "var_name": "emailBuilder"}], "methods": [{"identifier": "setMailService", "parameters": "(MailService mailService)", "modifiers": "public", "return": "void", "signature": "void setMailService(MailService mailService)", "full_signature": "public void setMailService(MailService mailService)", "class_method_signature": "MailChannel.setMailService(MailService mailService)", "testcase": false, "constructor": false}, {"identifier": "setEmailBuilder", "parameters": "(EmailBuilder emailBuilder)", "modifiers": "public", "return": "void", "signature": "void setEmailBuilder(EmailBuilder emailBuilder)", "full_signature": "public void setEmailBuilder(EmailBuilder emailBuilder)", "class_method_signature": "MailChannel.setEmailBuilder(EmailBuilder emailBuilder)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Subscriber subscriber, List<NotificationEventTO> events)", "modifiers": "@Retryable public", "return": "void", "signature": "void send(Subscriber subscriber, List<NotificationEventTO> events)", "full_signature": "@Retryable public void send(Subscriber subscriber, List<NotificationEventTO> events)", "class_method_signature": "MailChannel.send(Subscriber subscriber, List<NotificationEventTO> events)", "testcase": false, "constructor": false}, {"identifier": "getChannelName", "parameters": "()", "modifiers": "public", "return": "Subscriber.Channel", "signature": "Subscriber.Channel getChannelName()", "full_signature": "public Subscriber.Channel getChannelName()", "class_method_signature": "MailChannel.getChannelName()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/notification/impl/channel/MailChannel.java"}, "focal_method": {"identifier": "send", "parameters": "(Subscriber subscriber, List<NotificationEventTO> events)", "modifiers": "@Retryable public", "return": "void", "body": "@Retryable\n    public void send(Subscriber subscriber, List<NotificationEventTO> events) throws Exception {\n        String emailAddress = subscriber.getIdentity().getAttributes().getEmail();\n        try {\n            mailService.sendMailWithTemplate(emailBuilder.getTemplateMailTO(emailAddress, events));\n        } catch (MailException e) {\n            String message = e.getMessage();\n            if (message != null && !message.isEmpty() && message.indexOf(\"Invalid Addresses\") > 0) {\n                // bypass the retry\n                log.error(\"Invalid Addresses detected !!! \", e);\n                throw new InvalidAddressException(e, emailAddress);\n            }\n            throw e;\n        }\n    }", "signature": "void send(Subscriber subscriber, List<NotificationEventTO> events)", "full_signature": "@Retryable public void send(Subscriber subscriber, List<NotificationEventTO> events)", "class_method_signature": "MailChannel.send(Subscriber subscriber, List<NotificationEventTO> events)", "testcase": false, "constructor": false, "invocations": ["getEmail", "getAttributes", "getIdentity", "sendMailWithTemplate", "getTemplateMailTO", "getMessage", "isEmpty", "indexOf", "error"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}