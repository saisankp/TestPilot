{"test_class": {"identifier": "TransformProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DataStore bugs;", "modifier": "", "type": "DataStore", "declarator": "bugs", "var_name": "bugs"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/TransformProcessTest.java"}, "test_case": {"identifier": "testSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSum() throws Exception {\n        SimpleFeatureSource source = bugs.getFeatureSource(\"bugsites\");\n\n        \n        TransformProcess process = new TransformProcess();\n        \n        String definition = \"the_geom=the_geom\\nnumber=cat\";\n        SimpleFeatureCollection origional = source.getFeatures();\n        SimpleFeatureCollection result = process.execute( origional, definition );\n        \n        assertEquals( origional.size(), result.size() );\n        \n        SimpleFeatureType schema = result.getSchema();\n        AttributeDescriptor number = schema.getDescriptor(\"number\");\n        assertTrue( Long.class.isAssignableFrom( number.getType().getBinding() ) );\n\n    }", "signature": "void testSum()", "full_signature": "@Test public void testSum()", "class_method_signature": "TransformProcessTest.testSum()", "testcase": true, "constructor": false, "invocations": ["getFeatureSource", "getFeatures", "execute", "assertEquals", "size", "size", "getSchema", "getDescriptor", "assertTrue", "isAssignableFrom", "getBinding", "getType"]}, "focal_class": {"identifier": "TransformProcess", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "private static final String DEF_DELIMITER = \";\";", "modifier": "private static final", "type": "String", "declarator": "DEF_DELIMITER = \";\"", "var_name": "DEF_DELIMITER"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "modifiers": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "full_signature": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "class_method_signature": "TransformProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "testcase": false, "constructor": false}, {"identifier": "executeList", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "modifiers": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "full_signature": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public SimpleFeatureCollection executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "class_method_signature": "TransformProcess.executeList(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"List of Definitions for the output feature attributes\") List<Definition> transform)", "testcase": false, "constructor": false}, {"identifier": "toDefinition", "parameters": "(String definition)", "modifiers": "public static", "return": "List<Definition>", "signature": "List<Definition> toDefinition(String definition)", "full_signature": "public static List<Definition> toDefinition(String definition)", "class_method_signature": "TransformProcess.toDefinition(String definition)", "testcase": false, "constructor": false}, {"identifier": "splitDefinitions", "parameters": "(String defList)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitDefinitions(String defList)", "full_signature": "private static String[] splitDefinitions(String defList)", "class_method_signature": "TransformProcess.splitDefinitions(String defList)", "testcase": false, "constructor": false}, {"identifier": "toReShapeFeatureType", "parameters": "(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "full_signature": "public static SimpleFeatureType toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "class_method_signature": "TransformProcess.toReShapeFeatureType(SimpleFeatureCollection delegate,\n            List<Definition> definitionList)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/TransformProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "modifiers": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)\n            throws ProcessException {\n        if (transform == null) {\n            return features; // no change\n        }\n        List<Definition> list = toDefinition(transform);\n        return executeList(features, list);\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "full_signature": "@DescribeResult(name = \"result\", description = \"Transformed feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "class_method_signature": "TransformProcess.execute(\n            @DescribeParameter(name = \"features\", description = \"Input feature collection\") SimpleFeatureCollection features,\n            @DescribeParameter(name = \"transform\", description = \"The transform specification, as a list of specifiers of the form name=expression, delimited by newlines or semicolons.\") String transform)", "testcase": false, "constructor": false, "invocations": ["toDefinition", "executeList"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}