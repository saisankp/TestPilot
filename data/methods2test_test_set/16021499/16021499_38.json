{"test_class": {"identifier": "DocViewFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File dir;", "modifier": "private", "type": "File", "declarator": "dir", "var_name": "dir"}, {"original_string": "private File docViewFile;", "modifier": "private", "type": "File", "declarator": "docViewFile", "var_name": "docViewFile"}], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/fs/io/DocViewFormatTest.java"}, "test_case": {"identifier": "testFormatting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatting() throws IOException {\n        List<Pattern> patterns = Collections.singletonList(Pattern.compile(\".+\\\\.xml\"));\n        DocViewFormat format = new DocViewFormat();\n        assertFalse(\"malformed.xml is expected to be malformed\", format.format(dir, patterns, false).isEmpty());\n        try (InputStream input = this.getClass().getResourceAsStream(\"DocViewFormat/formatted.xml\")) {\n            final String expected = IOUtils.toString(input, StandardCharsets.UTF_8);\n            final String result = FileUtils.readFileToString(docViewFile, StandardCharsets.UTF_8);\n            assertEquals(expected, result);\n        }\n        assertTrue(\"malformed.xml is expected to be formatted\", format.format(dir, patterns, true).isEmpty());\n    }", "signature": "void testFormatting()", "full_signature": "@Test public void testFormatting()", "class_method_signature": "DocViewFormatTest.testFormatting()", "testcase": true, "constructor": false, "invocations": ["singletonList", "compile", "assertFalse", "isEmpty", "format", "getResourceAsStream", "getClass", "toString", "readFileToString", "assertEquals", "assertTrue", "isEmpty", "format"]}, "focal_class": {"identifier": "DocViewFormat", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final OutputFormat format;", "modifier": "private final", "type": "OutputFormat", "declarator": "format", "var_name": "format"}, {"original_string": "private WeakReference<ByteArrayOutputStream> formattingBuffer;", "modifier": "private", "type": "WeakReference<ByteArrayOutputStream>", "declarator": "formattingBuffer", "var_name": "formattingBuffer"}], "methods": [{"identifier": "DocViewFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " DocViewFormat()", "full_signature": "public  DocViewFormat()", "class_method_signature": "DocViewFormat.DocViewFormat()", "testcase": false, "constructor": true}, {"identifier": "getXmlOutputFormat", "parameters": "()", "modifiers": "public", "return": "OutputFormat", "signature": "OutputFormat getXmlOutputFormat()", "full_signature": "public OutputFormat getXmlOutputFormat()", "class_method_signature": "DocViewFormat.getXmlOutputFormat()", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(File file, boolean dryRun)", "modifiers": "public", "return": "boolean", "signature": "boolean format(File file, boolean dryRun)", "full_signature": "public boolean format(File file, boolean dryRun)", "class_method_signature": "DocViewFormat.format(File file, boolean dryRun)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(File directory, List<Pattern> filenamePatterns, final boolean dryRun)", "modifiers": "public", "return": "List<String>", "signature": "List<String> format(File directory, List<Pattern> filenamePatterns, final boolean dryRun)", "full_signature": "public List<String> format(File directory, List<Pattern> filenamePatterns, final boolean dryRun)", "class_method_signature": "DocViewFormat.format(File directory, List<Pattern> filenamePatterns, final boolean dryRun)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(File file, Checksum original, Checksum formatted)", "modifiers": "private", "return": "byte[]", "signature": "byte[] format(File file, Checksum original, Checksum formatted)", "full_signature": "private byte[] format(File file, Checksum original, Checksum formatted)", "class_method_signature": "DocViewFormat.format(File file, Checksum original, Checksum formatted)", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/fs/io/DocViewFormat.java"}, "focal_method": {"identifier": "format", "parameters": "(File file, boolean dryRun)", "modifiers": "public", "return": "boolean", "body": "public boolean format(File file, boolean dryRun) throws IOException {\n        CRC32 originalCrc32 = new CRC32();\n        CRC32 formattedCrc32 = new CRC32();\n        byte[] formatted = format(file, originalCrc32, formattedCrc32);\n\n        final boolean changed = originalCrc32.getValue() != formattedCrc32.getValue();\n        if (changed && !dryRun) {\n            try (OutputStream out = new BufferedOutputStream(new FileOutputStream(file))) {\n                IOUtils.copy(new ByteArrayInputStream(formatted), out);\n            }\n        }\n        return changed;\n    }", "signature": "boolean format(File file, boolean dryRun)", "full_signature": "public boolean format(File file, boolean dryRun)", "class_method_signature": "DocViewFormat.format(File file, boolean dryRun)", "testcase": false, "constructor": false, "invocations": ["format", "getValue", "getValue", "copy"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}