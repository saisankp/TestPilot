{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/messagebus-util/src/test/java/org/opendaylight/controller/messagebus/app/util/UtilTest.java"}, "test_case": {"identifier": "testExpandQname", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpandQname() {\n        // match no path because the list of the allowed paths is empty\n        {\n            final List<SchemaPath> paths = new ArrayList<>();\n            final Pattern regexPattern = Pattern.compile(\".*\"); // match everything\n            final List<SchemaPath> matchingPaths = Util.expandQname(paths, regexPattern);\n            assertTrue(matchingPaths.isEmpty());\n        }\n\n        // match no path because of regex pattern\n        {\n            final List<SchemaPath> paths = createSchemaPathList();\n            final Pattern regexPattern = Pattern.compile(\"^@.*\");\n            final List<SchemaPath> matchingPaths = Util.expandQname(paths, regexPattern);\n            assertTrue(matchingPaths.isEmpty());\n        }\n\n        // match all paths\n        {\n            final List<SchemaPath> paths = createSchemaPathList();\n            final Pattern regexPattern = Pattern.compile(\".*\");\n            final List<SchemaPath> matchingPaths = Util.expandQname(paths, regexPattern);\n            assertTrue(matchingPaths.contains(paths.get(0)));\n            assertTrue(matchingPaths.contains(paths.get(1)));\n            assertEquals(paths.size(), matchingPaths.size());\n        }\n\n        // match one path only\n        {\n            final List<SchemaPath> paths = createSchemaPathList();\n            final Pattern regexPattern = Pattern.compile(\".*yyy$\");\n            final List<SchemaPath> matchingPaths = Util.expandQname(paths, regexPattern);\n            assertTrue(matchingPaths.contains(paths.get(1)));\n            assertEquals(1, matchingPaths.size());\n        }\n    }", "signature": "void testExpandQname()", "full_signature": "@Test public void testExpandQname()", "class_method_signature": "UtilTest.testExpandQname()", "testcase": true, "constructor": false, "invocations": ["compile", "expandQname", "assertTrue", "isEmpty", "createSchemaPathList", "compile", "expandQname", "assertTrue", "isEmpty", "createSchemaPathList", "compile", "expandQname", "assertTrue", "contains", "get", "assertTrue", "contains", "get", "assertEquals", "size", "size", "createSchemaPathList", "compile", "expandQname", "assertTrue", "contains", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "resultRpcSuccessFor", "parameters": "(final T output)", "modifiers": "public static", "return": "ListenableFuture<RpcResult<T>>", "signature": "ListenableFuture<RpcResult<T>> resultRpcSuccessFor(final T output)", "full_signature": "public static ListenableFuture<RpcResult<T>> resultRpcSuccessFor(final T output)", "class_method_signature": "Util.resultRpcSuccessFor(final T output)", "testcase": false, "constructor": false}, {"identifier": "expandQname", "parameters": "(final List<SchemaPath> list, final Pattern pattern)", "modifiers": "public static", "return": "List<SchemaPath>", "signature": "List<SchemaPath> expandQname(final List<SchemaPath> list, final Pattern pattern)", "full_signature": "public static List<SchemaPath> expandQname(final List<SchemaPath> list, final Pattern pattern)", "class_method_signature": "Util.expandQname(final List<SchemaPath> list, final Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "wildcardToRegex", "parameters": "(final String wildcard)", "modifiers": "public static", "return": "String", "signature": "String wildcardToRegex(final String wildcard)", "full_signature": "public static String wildcardToRegex(final String wildcard)", "class_method_signature": "Util.wildcardToRegex(final String wildcard)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/messagebus-util/src/main/java/org/opendaylight/controller/messagebus/app/util/Util.java"}, "focal_method": {"identifier": "expandQname", "parameters": "(final List<SchemaPath> list, final Pattern pattern)", "modifiers": "public static", "return": "List<SchemaPath>", "body": "public static List<SchemaPath> expandQname(final List<SchemaPath> list, final Pattern pattern) {\n        final List<SchemaPath> matchingQnames = new ArrayList<>();\n\n        for (final SchemaPath notification : list) {\n            final String namespace = notification.getLastComponent().getNamespace().toString();\n            if (pattern.matcher(namespace).matches()) {\n                matchingQnames.add(notification);\n            }\n        }\n        return matchingQnames;\n    }", "signature": "List<SchemaPath> expandQname(final List<SchemaPath> list, final Pattern pattern)", "full_signature": "public static List<SchemaPath> expandQname(final List<SchemaPath> list, final Pattern pattern)", "class_method_signature": "Util.expandQname(final List<SchemaPath> list, final Pattern pattern)", "testcase": false, "constructor": false, "invocations": ["toString", "getNamespace", "getLastComponent", "matches", "matcher", "add"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}