{"test_class": {"identifier": "MDMoleculeTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDMoleculeTest.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDMoleculeTest.class)", "var_name": "logger"}], "file": "storage/libiomd/src/test/java/org/openscience/cdk/libio/md/MDMoleculeTest.java"}, "test_case": {"identifier": "testMDMolecule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMDMolecule() {\n\n        MDMolecule mol = new MDMolecule();\n        mol.addAtom(new Atom(\"C\")); // 0\n        mol.addAtom(new Atom(\"C\")); // 1\n        mol.addAtom(new Atom(\"C\")); // 2\n        mol.addAtom(new Atom(\"C\")); // 3\n        mol.addAtom(new Atom(\"C\")); // 4\n        mol.addAtom(new Atom(\"C\")); // 5\n\n        mol.addBond(0, 1, IBond.Order.SINGLE); // 1\n        mol.addBond(1, 2, IBond.Order.DOUBLE); // 2\n        mol.addBond(2, 3, IBond.Order.SINGLE); // 3\n        mol.addBond(3, 4, IBond.Order.DOUBLE); // 4\n        mol.addBond(4, 5, IBond.Order.SINGLE); // 5\n        mol.addBond(5, 0, IBond.Order.DOUBLE); // 6\n\n        //Create 2 residues\n        AtomContainer ac = new AtomContainer();\n        ac.addAtom(mol.getAtom(0));\n        ac.addAtom(mol.getAtom(1));\n        ac.addAtom(mol.getAtom(2));\n        Residue res1 = new Residue(ac, 0, mol);\n        res1.setName(\"myResidue1\");\n        mol.addResidue(res1);\n\n        AtomContainer ac2 = new AtomContainer();\n        ac2.addAtom(mol.getAtom(3));\n        ac2.addAtom(mol.getAtom(4));\n        ac2.addAtom(mol.getAtom(5));\n        Residue res2 = new Residue(ac2, 1, mol);\n        res2.setName(\"myResidue2\");\n        mol.addResidue(res2);\n\n        //Test residue creation\n        Assert.assertEquals(res1.getParentMolecule(), mol);\n        Assert.assertEquals(res2.getParentMolecule(), mol);\n        Assert.assertEquals(res1.getAtomCount(), 3);\n        Assert.assertEquals(res2.getAtomCount(), 3);\n        Assert.assertEquals(res1.getName(), \"myResidue1\");\n        Assert.assertEquals(res2.getName(), \"myResidue2\");\n        Assert.assertNotNull(mol.getResidues());\n        Assert.assertEquals(mol.getResidues().size(), 2);\n        Assert.assertEquals(mol.getResidues().get(0), res1);\n        Assert.assertEquals(mol.getResidues().get(1), res2);\n\n        //Create 2 chargegroups\n        AtomContainer ac3 = new AtomContainer();\n        ac3.addAtom(mol.getAtom(0));\n        ac3.addAtom(mol.getAtom(1));\n        ChargeGroup chg1 = new ChargeGroup(ac3, 0, mol);\n        mol.addChargeGroup(chg1);\n\n        AtomContainer ac4 = new AtomContainer();\n        ac4.addAtom(mol.getAtom(2));\n        ac4.addAtom(mol.getAtom(3));\n        ac4.addAtom(mol.getAtom(4));\n        ac4.addAtom(mol.getAtom(5));\n        ChargeGroup chg2 = new ChargeGroup(ac4, 1, mol);\n        mol.addChargeGroup(chg2);\n\n        //Test chargegroup creation\n        Assert.assertEquals(chg1.getParentMolecule(), mol);\n        Assert.assertEquals(chg2.getParentMolecule(), mol);\n        Assert.assertEquals(chg1.getAtomCount(), 2);\n        Assert.assertEquals(chg2.getAtomCount(), 4);\n\n        Assert.assertNotNull(mol.getChargeGroups());\n        Assert.assertEquals(mol.getChargeGroups().size(), 2);\n        Assert.assertEquals(mol.getChargeGroups().get(0), chg1);\n        Assert.assertEquals(mol.getChargeGroups().get(1), chg2);\n\n    }", "signature": "void testMDMolecule()", "full_signature": "@Test public void testMDMolecule()", "class_method_signature": "MDMoleculeTest.testMDMolecule()", "testcase": true, "constructor": false, "invocations": ["addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addAtom", "getAtom", "addAtom", "getAtom", "addAtom", "getAtom", "setName", "addResidue", "addAtom", "getAtom", "addAtom", "getAtom", "addAtom", "getAtom", "setName", "addResidue", "assertEquals", "getParentMolecule", "assertEquals", "getParentMolecule", "assertEquals", "getAtomCount", "assertEquals", "getAtomCount", "assertEquals", "getName", "assertEquals", "getName", "assertNotNull", "getResidues", "assertEquals", "size", "getResidues", "assertEquals", "get", "getResidues", "assertEquals", "get", "getResidues", "addAtom", "getAtom", "addAtom", "getAtom", "addChargeGroup", "addAtom", "getAtom", "addAtom", "getAtom", "addAtom", "getAtom", "addAtom", "getAtom", "addChargeGroup", "assertEquals", "getParentMolecule", "assertEquals", "getParentMolecule", "assertEquals", "getAtomCount", "assertEquals", "getAtomCount", "assertNotNull", "getChargeGroups", "assertEquals", "size", "getChargeGroups", "assertEquals", "get", "getChargeGroups", "assertEquals", "get", "getChargeGroups"]}, "focal_class": {"identifier": "MDMolecule", "superclass": "extends AtomContainer", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3129626782945020908L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3129626782945020908L", "var_name": "serialVersionUID"}, {"original_string": "private List<Residue>              residues;", "modifier": "private", "type": "List<Residue>", "declarator": "residues", "var_name": "residues"}, {"original_string": "private List<ChargeGroup>          chargeGroups;", "modifier": "private", "type": "List<ChargeGroup>", "declarator": "chargeGroups", "var_name": "chargeGroups"}], "methods": [{"identifier": "MDMolecule", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDMolecule()", "full_signature": "public  MDMolecule()", "class_method_signature": "MDMolecule.MDMolecule()", "testcase": false, "constructor": true}, {"identifier": "MDMolecule", "parameters": "(IAtomContainer container)", "modifiers": "public", "return": "", "signature": " MDMolecule(IAtomContainer container)", "full_signature": "public  MDMolecule(IAtomContainer container)", "class_method_signature": "MDMolecule.MDMolecule(IAtomContainer container)", "testcase": false, "constructor": true}, {"identifier": "getResidues", "parameters": "()", "modifiers": "public", "return": "List<Residue>", "signature": "List<Residue> getResidues()", "full_signature": "public List<Residue> getResidues()", "class_method_signature": "MDMolecule.getResidues()", "testcase": false, "constructor": false}, {"identifier": "setResidues", "parameters": "(List<Residue> residues)", "modifiers": "public", "return": "void", "signature": "void setResidues(List<Residue> residues)", "full_signature": "public void setResidues(List<Residue> residues)", "class_method_signature": "MDMolecule.setResidues(List<Residue> residues)", "testcase": false, "constructor": false}, {"identifier": "addResidue", "parameters": "(Residue residue)", "modifiers": "public", "return": "void", "signature": "void addResidue(Residue residue)", "full_signature": "public void addResidue(Residue residue)", "class_method_signature": "MDMolecule.addResidue(Residue residue)", "testcase": false, "constructor": false}, {"identifier": "getChargeGroups", "parameters": "()", "modifiers": "public", "return": "List<ChargeGroup>", "signature": "List<ChargeGroup> getChargeGroups()", "full_signature": "public List<ChargeGroup> getChargeGroups()", "class_method_signature": "MDMolecule.getChargeGroups()", "testcase": false, "constructor": false}, {"identifier": "setChargeGroups", "parameters": "(List<ChargeGroup> chargeGroups)", "modifiers": "public", "return": "void", "signature": "void setChargeGroups(List<ChargeGroup> chargeGroups)", "full_signature": "public void setChargeGroups(List<ChargeGroup> chargeGroups)", "class_method_signature": "MDMolecule.setChargeGroups(List<ChargeGroup> chargeGroups)", "testcase": false, "constructor": false}, {"identifier": "addChargeGroup", "parameters": "(ChargeGroup chargeGroup)", "modifiers": "public", "return": "void", "signature": "void addChargeGroup(ChargeGroup chargeGroup)", "full_signature": "public void addChargeGroup(ChargeGroup chargeGroup)", "class_method_signature": "MDMolecule.addChargeGroup(ChargeGroup chargeGroup)", "testcase": false, "constructor": false}], "file": "storage/libiomd/src/main/java/org/openscience/cdk/libio/md/MDMolecule.java"}, "focal_method": {"identifier": "MDMolecule", "parameters": "()", "modifiers": "public", "return": "", "body": "public MDMolecule() {\n        super();\n    }", "signature": " MDMolecule()", "full_signature": "public  MDMolecule()", "class_method_signature": "MDMolecule.MDMolecule()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}