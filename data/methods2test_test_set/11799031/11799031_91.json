{"test_class": {"identifier": "XMLUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String testXml = new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\")\n        .append(\"<parentNode>\")\n        .append(\"<childNode>\").append(\"1\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"2\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"3\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"true\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"false\").append(\"</childNode>\")\n        .append(\"</parentNode>\").toString();", "modifier": "", "type": "String", "declarator": "testXml = new StringBuilder(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\")\n        .append(\"<parentNode>\")\n        .append(\"<childNode>\").append(\"1\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"2\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"3\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"true\").append(\"</childNode>\")\n        .append(\"<childNode>\").append(\"false\").append(\"</childNode>\")\n        .append(\"</parentNode>\").toString()", "var_name": "testXml"}], "file": "gdp-common-utilities/src/test/java/gov/usgs/cida/gdp/utilities/XMLUtilsTest.java"}, "test_case": {"identifier": "createNodeUsingXPathExpressionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createNodeUsingXPathExpressionTest() throws XPathExpressionException, UnsupportedEncodingException {\n        Node result = XMLUtils.createNodeUsingXPathExpression(\"/parentNode/childNode[1]\", testXml);\n        assertThat(result.getTextContent(), equalTo(\"1\"));\n\n        result = XMLUtils.createNodeUsingXPathExpression(\"/parentNode/childNode[2]\", testXml);\n        assertThat(result.getTextContent(), equalTo(\"2\"));\n    }", "signature": "void createNodeUsingXPathExpressionTest()", "full_signature": "@Test public void createNodeUsingXPathExpressionTest()", "class_method_signature": "XMLUtilsTest.createNodeUsingXPathExpressionTest()", "testcase": true, "constructor": false, "invocations": ["createNodeUsingXPathExpression", "assertThat", "getTextContent", "equalTo", "createNodeUsingXPathExpression", "assertThat", "getTextContent", "equalTo"]}, "focal_class": {"identifier": "XMLUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = LoggerFactory.getLogger(XMLUtils.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(XMLUtils.class)", "var_name": "log"}], "methods": [{"identifier": "XMLUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLUtils()", "full_signature": "private  XMLUtils()", "class_method_signature": "XMLUtils.XMLUtils()", "testcase": false, "constructor": true}, {"identifier": "transformXML", "parameters": "(final InputStream xml, final InputStream xslt)", "modifiers": "public static", "return": "String", "signature": "String transformXML(final InputStream xml, final InputStream xslt)", "full_signature": "public static String transformXML(final InputStream xml, final InputStream xslt)", "class_method_signature": "XMLUtils.transformXML(final InputStream xml, final InputStream xslt)", "testcase": false, "constructor": false}, {"identifier": "createPrettyXML", "parameters": "(Document document)", "modifiers": "public static", "return": "String", "signature": "String createPrettyXML(Document document)", "full_signature": "public static String createPrettyXML(Document document)", "class_method_signature": "XMLUtils.createPrettyXML(Document document)", "testcase": false, "constructor": false}, {"identifier": "createXPathExpression", "parameters": "(final String expression)", "modifiers": "public static", "return": "XPathExpression", "signature": "XPathExpression createXPathExpression(final String expression)", "full_signature": "public static XPathExpression createXPathExpression(final String expression)", "class_method_signature": "XMLUtils.createXPathExpression(final String expression)", "testcase": false, "constructor": false}, {"identifier": "createBooleanUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean createBooleanUsingXPathExpression(String expression, String xml)", "full_signature": "public static Boolean createBooleanUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createBooleanUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}, {"identifier": "createNodeListUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "NodeList", "signature": "NodeList createNodeListUsingXPathExpression(String expression, String xml)", "full_signature": "public static NodeList createNodeListUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createNodeListUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}, {"identifier": "createNodeUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "Node", "signature": "Node createNodeUsingXPathExpression(String expression, String xml)", "full_signature": "public static Node createNodeUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createNodeUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false}], "file": "gdp-common-utilities/src/main/java/gov/usgs/cida/gdp/utilities/XMLUtils.java"}, "focal_method": {"identifier": "createNodeUsingXPathExpression", "parameters": "(String expression, String xml)", "modifiers": "public static", "return": "Node", "body": "public static Node createNodeUsingXPathExpression(String expression, String xml) throws XPathExpressionException, UnsupportedEncodingException {\n        return (Node) XMLUtils.createXPathExpression(expression).evaluate(new InputSource(new ByteArrayInputStream(xml.getBytes(\"utf-8\"))), XPathConstants.NODE);\n    }", "signature": "Node createNodeUsingXPathExpression(String expression, String xml)", "full_signature": "public static Node createNodeUsingXPathExpression(String expression, String xml)", "class_method_signature": "XMLUtils.createNodeUsingXPathExpression(String expression, String xml)", "testcase": false, "constructor": false, "invocations": ["evaluate", "createXPathExpression", "getBytes"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}