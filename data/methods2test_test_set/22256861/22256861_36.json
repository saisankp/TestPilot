{"test_class": {"identifier": "SmileCorrectionAuxdataTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/smilecorr/SmileCorrectionAuxdataTest.java"}, "test_case": {"identifier": "testAuxDataIsInstall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuxDataIsInstall() throws Exception {\n        Path auxDataPath = SmileCorrectionAuxdata.installAuxdata();\n        List<Path> collect = Files.list(auxDataPath).collect(Collectors.toList());\n\n        assertTrue(auxDataPath.isAbsolute());\n        assertTrue(collect.stream().anyMatch(path -> path.getFileName().toString().equals(\"band_info_olci.txt\")));\n        assertTrue(collect.stream().anyMatch(path -> path.getFileName().toString().equals(\"band_value.txt\")));\n    }", "signature": "void testAuxDataIsInstall()", "full_signature": "@Test public void testAuxDataIsInstall()", "class_method_signature": "SmileCorrectionAuxdataTest.testAuxDataIsInstall()", "testcase": true, "constructor": false, "invocations": ["installAuxdata", "collect", "list", "toList", "assertTrue", "isAbsolute", "assertTrue", "anyMatch", "stream", "equals", "toString", "getFileName", "assertTrue", "anyMatch", "stream", "equals", "toString", "getFileName"]}, "focal_class": {"identifier": "SmileCorrectionAuxdata", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CENTRAL_WAVELEN_FR_FILENAME = \"central_wavelen_fr.txt\";", "modifier": "private static final", "type": "String", "declarator": "CENTRAL_WAVELEN_FR_FILENAME = \"central_wavelen_fr.txt\"", "var_name": "CENTRAL_WAVELEN_FR_FILENAME"}, {"original_string": "private static final String CENTRAL_WAVELEN_RR_FILENAME = \"central_wavelen_rr.txt\";", "modifier": "private static final", "type": "String", "declarator": "CENTRAL_WAVELEN_RR_FILENAME = \"central_wavelen_rr.txt\"", "var_name": "CENTRAL_WAVELEN_RR_FILENAME"}, {"original_string": "private static final String SUN_SPECTRAL_FLUX_FR_FILENAME = \"sun_spectral_flux_fr.txt\";", "modifier": "private static final", "type": "String", "declarator": "SUN_SPECTRAL_FLUX_FR_FILENAME = \"sun_spectral_flux_fr.txt\"", "var_name": "SUN_SPECTRAL_FLUX_FR_FILENAME"}, {"original_string": "private static final String SUN_SPECTRAL_FLUX_RR_FILENAME = \"sun_spectral_flux_rr.txt\";", "modifier": "private static final", "type": "String", "declarator": "SUN_SPECTRAL_FLUX_RR_FILENAME = \"sun_spectral_flux_rr.txt\"", "var_name": "SUN_SPECTRAL_FLUX_RR_FILENAME"}, {"original_string": "private static final int NUM_DETECTORS_FR = 3700;", "modifier": "private static final", "type": "int", "declarator": "NUM_DETECTORS_FR = 3700", "var_name": "NUM_DETECTORS_FR"}, {"original_string": "private static final int NUM_DETECTORS_RR = 925;", "modifier": "private static final", "type": "int", "declarator": "NUM_DETECTORS_RR = 925", "var_name": "NUM_DETECTORS_RR"}, {"original_string": "private int[] bandIndices;", "modifier": "private", "type": "int[]", "declarator": "bandIndices", "var_name": "bandIndices"}, {"original_string": "private boolean[] landRefCorrectionSwitches;", "modifier": "private", "type": "boolean[]", "declarator": "landRefCorrectionSwitches", "var_name": "landRefCorrectionSwitches"}, {"original_string": "private boolean[] waterRefCorrectionSwitches;", "modifier": "private", "type": "boolean[]", "declarator": "waterRefCorrectionSwitches", "var_name": "waterRefCorrectionSwitches"}, {"original_string": "private int[] waterLowerBands;", "modifier": "private", "type": "int[]", "declarator": "waterLowerBands", "var_name": "waterLowerBands"}, {"original_string": "private int[] waterUpperBands;", "modifier": "private", "type": "int[]", "declarator": "waterUpperBands", "var_name": "waterUpperBands"}, {"original_string": "private int[] landLowerBands;", "modifier": "private", "type": "int[]", "declarator": "landLowerBands", "var_name": "landLowerBands"}, {"original_string": "private int[] landUpperBands;", "modifier": "private", "type": "int[]", "declarator": "landUpperBands", "var_name": "landUpperBands"}, {"original_string": "private float[] refCentralWaveLengths;", "modifier": "private", "type": "float[]", "declarator": "refCentralWaveLengths", "var_name": "refCentralWaveLengths"}, {"original_string": "private float[] solarIrradiances;", "modifier": "private", "type": "float[]", "declarator": "solarIrradiances", "var_name": "solarIrradiances"}, {"original_string": "private double[][] detectorWavelengths;", "modifier": "private", "type": "double[][]", "declarator": "detectorWavelengths", "var_name": "detectorWavelengths"}, {"original_string": "private double[][] detectorSunSpectralFluxes;", "modifier": "private", "type": "double[][]", "declarator": "detectorSunSpectralFluxes", "var_name": "detectorSunSpectralFluxes"}], "methods": [{"identifier": "SmileCorrectionAuxdata", "parameters": "(Sensor sensor)", "modifiers": "public", "return": "", "signature": " SmileCorrectionAuxdata(Sensor sensor)", "full_signature": "public  SmileCorrectionAuxdata(Sensor sensor)", "class_method_signature": "SmileCorrectionAuxdata.SmileCorrectionAuxdata(Sensor sensor)", "testcase": false, "constructor": true}, {"identifier": "loadFluxWaven", "parameters": "(String productType)", "modifiers": "public", "return": "void", "signature": "void loadFluxWaven(String productType)", "full_signature": "public void loadFluxWaven(String productType)", "class_method_signature": "SmileCorrectionAuxdata.loadFluxWaven(String productType)", "testcase": false, "constructor": false}, {"identifier": "loadRRAuxdata", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void loadRRAuxdata()", "full_signature": "public void loadRRAuxdata()", "class_method_signature": "SmileCorrectionAuxdata.loadRRAuxdata()", "testcase": false, "constructor": false}, {"identifier": "loadFRAuxdata", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void loadFRAuxdata()", "full_signature": "public void loadFRAuxdata()", "class_method_signature": "SmileCorrectionAuxdata.loadFRAuxdata()", "testcase": false, "constructor": false}, {"identifier": "getBandIndices", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getBandIndices()", "full_signature": "public int[] getBandIndices()", "class_method_signature": "SmileCorrectionAuxdata.getBandIndices()", "testcase": false, "constructor": false}, {"identifier": "getWaterRefCorrectionSwitches", "parameters": "()", "modifiers": "public", "return": "boolean[]", "signature": "boolean[] getWaterRefCorrectionSwitches()", "full_signature": "public boolean[] getWaterRefCorrectionSwitches()", "class_method_signature": "SmileCorrectionAuxdata.getWaterRefCorrectionSwitches()", "testcase": false, "constructor": false}, {"identifier": "getLandRefCorrectionSwitches", "parameters": "()", "modifiers": "public", "return": "boolean[]", "signature": "boolean[] getLandRefCorrectionSwitches()", "full_signature": "public boolean[] getLandRefCorrectionSwitches()", "class_method_signature": "SmileCorrectionAuxdata.getLandRefCorrectionSwitches()", "testcase": false, "constructor": false}, {"identifier": "getWaterLowerBands", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getWaterLowerBands()", "full_signature": "public int[] getWaterLowerBands()", "class_method_signature": "SmileCorrectionAuxdata.getWaterLowerBands()", "testcase": false, "constructor": false}, {"identifier": "getWaterUpperBands", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getWaterUpperBands()", "full_signature": "public int[] getWaterUpperBands()", "class_method_signature": "SmileCorrectionAuxdata.getWaterUpperBands()", "testcase": false, "constructor": false}, {"identifier": "getLandLowerBands", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getLandLowerBands()", "full_signature": "public int[] getLandLowerBands()", "class_method_signature": "SmileCorrectionAuxdata.getLandLowerBands()", "testcase": false, "constructor": false}, {"identifier": "getLandUpperBands", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getLandUpperBands()", "full_signature": "public int[] getLandUpperBands()", "class_method_signature": "SmileCorrectionAuxdata.getLandUpperBands()", "testcase": false, "constructor": false}, {"identifier": "getRefCentralWaveLengths", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] getRefCentralWaveLengths()", "full_signature": "public float[] getRefCentralWaveLengths()", "class_method_signature": "SmileCorrectionAuxdata.getRefCentralWaveLengths()", "testcase": false, "constructor": false}, {"identifier": "getSolarIrradiances", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] getSolarIrradiances()", "full_signature": "public float[] getSolarIrradiances()", "class_method_signature": "SmileCorrectionAuxdata.getSolarIrradiances()", "testcase": false, "constructor": false}, {"identifier": "getDetectorWavelengths", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getDetectorWavelengths()", "full_signature": "public double[][] getDetectorWavelengths()", "class_method_signature": "SmileCorrectionAuxdata.getDetectorWavelengths()", "testcase": false, "constructor": false}, {"identifier": "getDetectorSunSpectralFluxes", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getDetectorSunSpectralFluxes()", "full_signature": "public double[][] getDetectorSunSpectralFluxes()", "class_method_signature": "SmileCorrectionAuxdata.getDetectorSunSpectralFluxes()", "testcase": false, "constructor": false}, {"identifier": "loadAuxdata", "parameters": "(String bandInfoFileName)", "modifiers": "public static", "return": "List<String[]>", "signature": "List<String[]> loadAuxdata(String bandInfoFileName)", "full_signature": "public static List<String[]> loadAuxdata(String bandInfoFileName)", "class_method_signature": "SmileCorrectionAuxdata.loadAuxdata(String bandInfoFileName)", "testcase": false, "constructor": false}, {"identifier": "auxDataInFlatTable", "parameters": "(List<String[]> loadAuxdata, int columnLen)", "modifiers": "public static", "return": "double[][]", "signature": "double[][] auxDataInFlatTable(List<String[]> loadAuxdata, int columnLen)", "full_signature": "public static double[][] auxDataInFlatTable(List<String[]> loadAuxdata, int columnLen)", "class_method_signature": "SmileCorrectionAuxdata.auxDataInFlatTable(List<String[]> loadAuxdata, int columnLen)", "testcase": false, "constructor": false}, {"identifier": "loadDetectorData", "parameters": "(final String detectorWavelengthsFilename,\n                                  final String detectorSunSpectralFluxesFilename,\n                                  final int numRows,\n                                  final int numCols)", "modifiers": "private", "return": "void", "signature": "void loadDetectorData(final String detectorWavelengthsFilename,\n                                  final String detectorSunSpectralFluxesFilename,\n                                  final int numRows,\n                                  final int numCols)", "full_signature": "private void loadDetectorData(final String detectorWavelengthsFilename,\n                                  final String detectorSunSpectralFluxesFilename,\n                                  final int numRows,\n                                  final int numCols)", "class_method_signature": "SmileCorrectionAuxdata.loadDetectorData(final String detectorWavelengthsFilename,\n                                  final String detectorSunSpectralFluxesFilename,\n                                  final int numRows,\n                                  final int numCols)", "testcase": false, "constructor": false}, {"identifier": "loadFlatAuxDataFile", "parameters": "(final String auxFileName, final int numRows, final int numCols)", "modifiers": "private", "return": "double[][]", "signature": "double[][] loadFlatAuxDataFile(final String auxFileName, final int numRows, final int numCols)", "full_signature": "private double[][] loadFlatAuxDataFile(final String auxFileName, final int numRows, final int numCols)", "class_method_signature": "SmileCorrectionAuxdata.loadFlatAuxDataFile(final String auxFileName, final int numRows, final int numCols)", "testcase": false, "constructor": false}, {"identifier": "openFlatAuxDataFile", "parameters": "(String fileName)", "modifiers": "private", "return": "BufferedReader", "signature": "BufferedReader openFlatAuxDataFile(String fileName)", "full_signature": "private BufferedReader openFlatAuxDataFile(String fileName)", "class_method_signature": "SmileCorrectionAuxdata.openFlatAuxDataFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "readFlatAuxDataFile", "parameters": "(double[][] xrWLs, BufferedReader reader)", "modifiers": "private static", "return": "void", "signature": "void readFlatAuxDataFile(double[][] xrWLs, BufferedReader reader)", "full_signature": "private static void readFlatAuxDataFile(double[][] xrWLs, BufferedReader reader)", "class_method_signature": "SmileCorrectionAuxdata.readFlatAuxDataFile(double[][] xrWLs, BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "installAuxdata", "parameters": "()", "modifiers": "static", "return": "Path", "signature": "Path installAuxdata()", "full_signature": "static Path installAuxdata()", "class_method_signature": "SmileCorrectionAuxdata.installAuxdata()", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/smilecorr/SmileCorrectionAuxdata.java"}, "focal_method": {"identifier": "installAuxdata", "parameters": "()", "modifiers": "static", "return": "Path", "body": "static Path installAuxdata() throws IOException {\n        OperatorSpiRegistry operatorSpiRegistry = GPF.getDefaultInstance().getOperatorSpiRegistry();\n        OperatorSpi spi = operatorSpiRegistry.getOperatorSpi(\"SmileCorrection.Olci\");\n        String version = \"v\" + spi.getOperatorDescriptor().getVersion();\n        Path auxdataDirectory = SystemUtils.getAuxDataPath().resolve(\"olci/smile/\" + version);\n        final Path sourceDirPath = ResourceInstaller.findModuleCodeBasePath(SmileCorrectionAuxdata.class).resolve(\"auxdata/smile\");\n        final ResourceInstaller resourceInstaller = new ResourceInstaller(sourceDirPath, auxdataDirectory);\n        resourceInstaller.install(\".*\", ProgressMonitor.NULL);\n        return auxdataDirectory;\n    }", "signature": "Path installAuxdata()", "full_signature": "static Path installAuxdata()", "class_method_signature": "SmileCorrectionAuxdata.installAuxdata()", "testcase": false, "constructor": false, "invocations": ["getOperatorSpiRegistry", "getDefaultInstance", "getOperatorSpi", "getVersion", "getOperatorDescriptor", "resolve", "getAuxDataPath", "resolve", "findModuleCodeBasePath", "install"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}