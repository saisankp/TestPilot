{"test_class": {"identifier": "Ed448PublicKeyDelegateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PublicKeyDelegate delegate = new Ed448PublicKeyDelegate(HashAlgorithm.SHAKE_256);", "modifier": "private", "type": "PublicKeyDelegate", "declarator": "delegate = new Ed448PublicKeyDelegate(HashAlgorithm.SHAKE_256)", "var_name": "delegate"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed448/Ed448PublicKeyDelegateTest.java"}, "test_case": {"identifier": "success_GeneratePublicKeySeed_via_SHAKE_512_from_hex_string_2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_GeneratePublicKeySeed_via_SHAKE_512_from_hex_string_2() {\n        PrivateKey privateKey = PrivateKey.newInstance(HexEncoder.getBytes(\n                \"c4eab05d357007c632f3dbb48489924d\" +\n                        \"552b08fe0c353a0d4a1f00acda2c463a\" +\n                        \"fbea67c5e8d2877c5e3bc397a659949e\" +\n                        \"f8021e954e0a12274e\"));\n\n        byte[] seed = delegate.generatePublicKeySeed(privateKey);\n\n        assertThat(HexEncoder.getString(seed), is(\n                \"43ba28f430cdff456ae531545f7ecd0a\" +\n                        \"c834a55d9358c0372bfa0c6c6798c086\" +\n                        \"6aea01eb00742802b8438ea4cb82169c\" +\n                        \"235160627b4c3a9480\"));\n    }", "signature": "void success_GeneratePublicKeySeed_via_SHAKE_512_from_hex_string_2()", "full_signature": "@Test public void success_GeneratePublicKeySeed_via_SHAKE_512_from_hex_string_2()", "class_method_signature": "Ed448PublicKeyDelegateTest.success_GeneratePublicKeySeed_via_SHAKE_512_from_hex_string_2()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBytes", "generatePublicKeySeed", "assertThat", "getString", "is"]}, "focal_class": {"identifier": "Ed448PublicKeyDelegate", "superclass": "", "interfaces": "implements PublicKeyDelegate, HashDelegate", "fields": [{"original_string": "private static final Curve448 CURVE = Curve448.getInstance();", "modifier": "private static final", "type": "Curve448", "declarator": "CURVE = Curve448.getInstance()", "var_name": "CURVE"}, {"original_string": "private final HashAlgorithm hashAlgorithm;", "modifier": "private final", "type": "HashAlgorithm", "declarator": "hashAlgorithm", "var_name": "hashAlgorithm"}], "methods": [{"identifier": "Ed448PublicKeyDelegate", "parameters": "(HashAlgorithm hashAlgorithm)", "modifiers": "public", "return": "", "signature": " Ed448PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "full_signature": "public  Ed448PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "class_method_signature": "Ed448PublicKeyDelegate.Ed448PublicKeyDelegate(HashAlgorithm hashAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed448PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "hashPrivateKey", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] hashPrivateKey(PrivateKey privateKey)", "full_signature": "@Override public byte[] hashPrivateKey(PrivateKey privateKey)", "class_method_signature": "Ed448PublicKeyDelegate.hashPrivateKey(PrivateKey privateKey)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed448/Ed448PublicKeyDelegate.java"}, "focal_method": {"identifier": "generatePublicKeySeed", "parameters": "(PrivateKey privateKey)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] generatePublicKeySeed(PrivateKey privateKey) {\n        if (!(privateKey instanceof PrivateKeyEd448)) {\n            throw new IllegalArgumentException(\"Public key on Curve448 must be \" +\n                    CURVE.getPublicKeyByteLength() + \" byte length. Length: \" + privateKey.getRaw().length);\n        }\n\n        BigInteger s = privateKey.getScalarSeed(this);\n\n        Point point = CURVE.getBasePoint().scalarMultiply(s);\n        return point.encode().getValue();\n    }", "signature": "byte[] generatePublicKeySeed(PrivateKey privateKey)", "full_signature": "@Override public byte[] generatePublicKeySeed(PrivateKey privateKey)", "class_method_signature": "Ed448PublicKeyDelegate.generatePublicKeySeed(PrivateKey privateKey)", "testcase": false, "constructor": false, "invocations": ["getPublicKeyByteLength", "getRaw", "getScalarSeed", "scalarMultiply", "getBasePoint", "getValue", "encode"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}