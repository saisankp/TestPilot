{"test_class": {"identifier": "DataFrameAssertsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib-junit5/src/test/java/com/nhl/dflib/junit5/DataFrameAssertsTest.java"}, "test_case": {"identifier": "testExpectRows_Mismatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpectRows_Mismatch() {\n\n        DataFrame df = DataFrame.newFrame(\"a\").foldByRow(\"a\", \"b\");\n\n        try {\n            new DataFrameAsserts(df, \"a\")\n                    .expectRow(0, \"a\")\n                    .expectRow(1, \"c\");\n\n            throw new RuntimeException(\"Must have failed comparision\");\n        } catch (AssertionFailedError f) {\n            assertEquals(\"c\", f.getExpected().getValue());\n            assertEquals(\"b\", f.getActual().getValue());\n        }\n    }", "signature": "void testExpectRows_Mismatch()", "full_signature": "@Test public void testExpectRows_Mismatch()", "class_method_signature": "DataFrameAssertsTest.testExpectRows_Mismatch()", "testcase": true, "constructor": false, "invocations": ["foldByRow", "newFrame", "expectRow", "expectRow", "assertEquals", "getValue", "getExpected", "assertEquals", "getValue", "getActual"]}, "focal_class": {"identifier": "DataFrameAsserts", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] expectedColumns;", "modifier": "private", "type": "String[]", "declarator": "expectedColumns", "var_name": "expectedColumns"}, {"original_string": "private DataFrame df;", "modifier": "private", "type": "DataFrame", "declarator": "df", "var_name": "df"}], "methods": [{"identifier": "DataFrameAsserts", "parameters": "(DataFrame df, Index expectedColumns)", "modifiers": "public", "return": "", "signature": " DataFrameAsserts(DataFrame df, Index expectedColumns)", "full_signature": "public  DataFrameAsserts(DataFrame df, Index expectedColumns)", "class_method_signature": "DataFrameAsserts.DataFrameAsserts(DataFrame df, Index expectedColumns)", "testcase": false, "constructor": true}, {"identifier": "DataFrameAsserts", "parameters": "(DataFrame df, List<String> expectedColumns)", "modifiers": "public", "return": "", "signature": " DataFrameAsserts(DataFrame df, List<String> expectedColumns)", "full_signature": "public  DataFrameAsserts(DataFrame df, List<String> expectedColumns)", "class_method_signature": "DataFrameAsserts.DataFrameAsserts(DataFrame df, List<String> expectedColumns)", "testcase": false, "constructor": true}, {"identifier": "DataFrameAsserts", "parameters": "(DataFrame df, String... expectedColumns)", "modifiers": "public", "return": "", "signature": " DataFrameAsserts(DataFrame df, String... expectedColumns)", "full_signature": "public  DataFrameAsserts(DataFrame df, String... expectedColumns)", "class_method_signature": "DataFrameAsserts.DataFrameAsserts(DataFrame df, String... expectedColumns)", "testcase": false, "constructor": true}, {"identifier": "expectHeight", "parameters": "(int expectedHeight)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectHeight(int expectedHeight)", "full_signature": "public DataFrameAsserts expectHeight(int expectedHeight)", "class_method_signature": "DataFrameAsserts.expectHeight(int expectedHeight)", "testcase": false, "constructor": false}, {"identifier": "expectIntColumns", "parameters": "(int... positions)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectIntColumns(int... positions)", "full_signature": "public DataFrameAsserts expectIntColumns(int... positions)", "class_method_signature": "DataFrameAsserts.expectIntColumns(int... positions)", "testcase": false, "constructor": false}, {"identifier": "expectIntColumns", "parameters": "(String... labels)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectIntColumns(String... labels)", "full_signature": "public DataFrameAsserts expectIntColumns(String... labels)", "class_method_signature": "DataFrameAsserts.expectIntColumns(String... labels)", "testcase": false, "constructor": false}, {"identifier": "expectLongColumns", "parameters": "(int... positions)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectLongColumns(int... positions)", "full_signature": "public DataFrameAsserts expectLongColumns(int... positions)", "class_method_signature": "DataFrameAsserts.expectLongColumns(int... positions)", "testcase": false, "constructor": false}, {"identifier": "expectLongColumns", "parameters": "(String... labels)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectLongColumns(String... labels)", "full_signature": "public DataFrameAsserts expectLongColumns(String... labels)", "class_method_signature": "DataFrameAsserts.expectLongColumns(String... labels)", "testcase": false, "constructor": false}, {"identifier": "expectDoubleColumns", "parameters": "(int... positions)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectDoubleColumns(int... positions)", "full_signature": "public DataFrameAsserts expectDoubleColumns(int... positions)", "class_method_signature": "DataFrameAsserts.expectDoubleColumns(int... positions)", "testcase": false, "constructor": false}, {"identifier": "expectDoubleColumns", "parameters": "(String... labels)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectDoubleColumns(String... labels)", "full_signature": "public DataFrameAsserts expectDoubleColumns(String... labels)", "class_method_signature": "DataFrameAsserts.expectDoubleColumns(String... labels)", "testcase": false, "constructor": false}, {"identifier": "expectBooleanColumns", "parameters": "(int... positions)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectBooleanColumns(int... positions)", "full_signature": "public DataFrameAsserts expectBooleanColumns(int... positions)", "class_method_signature": "DataFrameAsserts.expectBooleanColumns(int... positions)", "testcase": false, "constructor": false}, {"identifier": "expectBooleanColumns", "parameters": "(String... labels)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectBooleanColumns(String... labels)", "full_signature": "public DataFrameAsserts expectBooleanColumns(String... labels)", "class_method_signature": "DataFrameAsserts.expectBooleanColumns(String... labels)", "testcase": false, "constructor": false}, {"identifier": "expectColumn", "parameters": "(int pos, Object... expectedValues)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectColumn(int pos, Object... expectedValues)", "full_signature": "public DataFrameAsserts expectColumn(int pos, Object... expectedValues)", "class_method_signature": "DataFrameAsserts.expectColumn(int pos, Object... expectedValues)", "testcase": false, "constructor": false}, {"identifier": "expectColumn", "parameters": "(String column, Object... expectedValues)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectColumn(String column, Object... expectedValues)", "full_signature": "public DataFrameAsserts expectColumn(String column, Object... expectedValues)", "class_method_signature": "DataFrameAsserts.expectColumn(String column, Object... expectedValues)", "testcase": false, "constructor": false}, {"identifier": "expectRow", "parameters": "(int pos, Object... expectedValues)", "modifiers": "public", "return": "DataFrameAsserts", "signature": "DataFrameAsserts expectRow(int pos, Object... expectedValues)", "full_signature": "public DataFrameAsserts expectRow(int pos, Object... expectedValues)", "class_method_signature": "DataFrameAsserts.expectRow(int pos, Object... expectedValues)", "testcase": false, "constructor": false}, {"identifier": "assertRow", "parameters": "(int pos, Consumer<?>... valueAsserts)", "modifiers": "@SafeVarargs public final", "return": "DataFrameAsserts", "signature": "DataFrameAsserts assertRow(int pos, Consumer<?>... valueAsserts)", "full_signature": "@SafeVarargs public final DataFrameAsserts assertRow(int pos, Consumer<?>... valueAsserts)", "class_method_signature": "DataFrameAsserts.assertRow(int pos, Consumer<?>... valueAsserts)", "testcase": false, "constructor": false}, {"identifier": "expectArrayRow", "parameters": "(String column, Object expected, Object actual)", "modifiers": "private", "return": "void", "signature": "void expectArrayRow(String column, Object expected, Object actual)", "full_signature": "private void expectArrayRow(String column, Object expected, Object actual)", "class_method_signature": "DataFrameAsserts.expectArrayRow(String column, Object expected, Object actual)", "testcase": false, "constructor": false}], "file": "dflib-junit5/src/main/java/com/nhl/dflib/junit5/DataFrameAsserts.java"}, "focal_method": {"identifier": "expectRow", "parameters": "(int pos, Object... expectedValues)", "modifiers": "public", "return": "DataFrameAsserts", "body": "public DataFrameAsserts expectRow(int pos, Object... expectedValues) {\n\n        assertTrue(pos < df.height(), () -> \"Row position \" + pos + \" is outside the DataFrame range of 0..\" + (df.height() - 1));\n\n        // handling nulls in \"vararg\" specifics... caller passing a \"null\" results in null array instead of a single\n        // element array with null... need to fix that\n        Object[] expectedNormal = expectedValues != null ? expectedValues : new Object[]{null};\n\n        for (int i = 0; i < expectedColumns.length; i++) {\n\n            String column = expectedColumns[i];\n            Object expected = expectedNormal[i];\n            Object actual = df.getColumn(i).get(pos);\n\n            if (expected == null) {\n                assertNull(actual, \"Unexpected value in '\" + column + \"'\");\n            } else if (expected.getClass().isArray()) {\n                assertTrue(actual.getClass().isArray(), \"Was expecting array in '\" + column + \"'\");\n                expectArrayRow(column, expected, actual);\n            } else {\n                assertEquals(expected, actual, \"Unexpected value in '\" + column + \"'\");\n            }\n        }\n\n        return this;\n    }", "signature": "DataFrameAsserts expectRow(int pos, Object... expectedValues)", "full_signature": "public DataFrameAsserts expectRow(int pos, Object... expectedValues)", "class_method_signature": "DataFrameAsserts.expectRow(int pos, Object... expectedValues)", "testcase": false, "constructor": false, "invocations": ["assertTrue", "height", "height", "get", "getColumn", "assertNull", "isArray", "getClass", "assertTrue", "isArray", "getClass", "expectArrayRow", "assertEquals"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}