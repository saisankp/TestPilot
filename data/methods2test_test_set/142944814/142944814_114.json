{"test_class": {"identifier": "TransactionTemplateTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final ContextStorage<Context> contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance());", "modifier": "protected final", "type": "ContextStorage<Context>", "declarator": "contextStorage = new UnmodifiableContextStorage(\n      EmptyContext.getInstance())", "var_name": "contextStorage"}], "file": "core/transport/src/test/java/hera/client/TransactionTemplateTest.java"}, "test_case": {"identifier": "testGetTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTransaction() throws Exception {\n    // given\n    final TransactionTemplate transactionTemplate = new TransactionTemplate(contextStorage);\n    final Requester mockRequester = mock(Requester.class);\n    final Transaction expected = anyTransaction;\n    when(mockRequester.request(ArgumentMatchers.<Invocation<?>>any()))\n        .thenReturn(expected);\n    transactionTemplate.requester = mockRequester;\n\n    // then\n    final Transaction actual = transactionTemplate.getTransaction(anyTxHash);\n    assertEquals(expected, actual);\n  }", "signature": "void testGetTransaction()", "full_signature": "@Test public void testGetTransaction()", "class_method_signature": "TransactionTemplateTest.testGetTransaction()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "request", "any", "getTransaction", "assertEquals"]}, "focal_class": {"identifier": "TransactionTemplate", "superclass": "extends AbstractTemplate", "interfaces": "implements TransactionOperation", "fields": [{"original_string": "protected final TransactionMethods transactionMethods = new TransactionMethods();", "modifier": "protected final", "type": "TransactionMethods", "declarator": "transactionMethods = new TransactionMethods()", "var_name": "transactionMethods"}, {"original_string": "protected final RequestMethod<Transaction> convertedTransactionMethod =\n      new RequestMethod<Transaction>() {\n\n        @Getter\n        protected final String name = TRANSACTION_TX;\n\n        @Override\n        protected Transaction runInternal(final List<Object> parameters) throws Exception {\n          final Transaction inBlock = transactionMethods.getTransactionInBlock().invoke(parameters);\n          if (null != inBlock) {\n            return inBlock;\n          }\n\n          return transactionMethods.getTransactionInMemPool().invoke(parameters);\n        }\n      };", "modifier": "protected final", "type": "RequestMethod<Transaction>", "declarator": "convertedTransactionMethod =\n      new RequestMethod<Transaction>() {\n\n        @Getter\n        protected final String name = TRANSACTION_TX;\n\n        @Override\n        protected Transaction runInternal(final List<Object> parameters) throws Exception {\n          final Transaction inBlock = transactionMethods.getTransactionInBlock().invoke(parameters);\n          if (null != inBlock) {\n            return inBlock;\n          }\n\n          return transactionMethods.getTransactionInMemPool().invoke(parameters);\n        }\n      }", "var_name": "convertedTransactionMethod"}], "methods": [{"identifier": "TransactionTemplate", "parameters": "(final ContextStorage<Context> contextStorage)", "modifiers": "", "return": "", "signature": " TransactionTemplate(final ContextStorage<Context> contextStorage)", "full_signature": "  TransactionTemplate(final ContextStorage<Context> contextStorage)", "class_method_signature": "TransactionTemplate.TransactionTemplate(final ContextStorage<Context> contextStorage)", "testcase": false, "constructor": true}, {"identifier": "getTransaction", "parameters": "(final TxHash txHash)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction getTransaction(final TxHash txHash)", "full_signature": "@Override public Transaction getTransaction(final TxHash txHash)", "class_method_signature": "TransactionTemplate.getTransaction(final TxHash txHash)", "testcase": false, "constructor": false}, {"identifier": "getTxReceipt", "parameters": "(TxHash txHash)", "modifiers": "@Override public", "return": "TxReceipt", "signature": "TxReceipt getTxReceipt(TxHash txHash)", "full_signature": "@Override public TxReceipt getTxReceipt(TxHash txHash)", "class_method_signature": "TransactionTemplate.getTxReceipt(TxHash txHash)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final Transaction transaction)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash commit(final Transaction transaction)", "full_signature": "@Override public TxHash commit(final Transaction transaction)", "class_method_signature": "TransactionTemplate.commit(final Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "sendTx", "parameters": "(final Signer signer, final AccountAddress recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash sendTx(final Signer signer, final AccountAddress recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "full_signature": "@Override public TxHash sendTx(final Signer signer, final AccountAddress recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "class_method_signature": "TransactionTemplate.sendTx(final Signer signer, final AccountAddress recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "testcase": false, "constructor": false}, {"identifier": "sendTx", "parameters": "(final Signer signer, final Name recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash sendTx(final Signer signer, final Name recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "full_signature": "@Override public TxHash sendTx(final Signer signer, final Name recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "class_method_signature": "TransactionTemplate.sendTx(final Signer signer, final Name recipient, final Aer amount,\n      final long nonce, final Fee fee, final BytesValue payload)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/TransactionTemplate.java"}, "focal_method": {"identifier": "getTransaction", "parameters": "(final TxHash txHash)", "modifiers": "@Override public", "return": "Transaction", "body": "@Override\n  public Transaction getTransaction(final TxHash txHash) {\n    return request(convertedTransactionMethod, Arrays.<Object>asList(txHash));\n  }", "signature": "Transaction getTransaction(final TxHash txHash)", "full_signature": "@Override public Transaction getTransaction(final TxHash txHash)", "class_method_signature": "TransactionTemplate.getTransaction(final TxHash txHash)", "testcase": false, "constructor": false, "invocations": ["request", "asList"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}