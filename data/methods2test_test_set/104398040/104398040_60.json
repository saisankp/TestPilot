{"test_class": {"identifier": "XmlIndentationTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/xml/XmlIndentationTest.java"}, "test_case": {"identifier": "notXmlFileTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void notXmlFileTest() {\n        XmlIndentation xmlIndentation = new XmlIndentation().relative(\"blah/bli\");\n        TUExecutionResult executionResult = xmlIndentation.execution(transformedAppFolder, transformationContext);\n        Assert.assertEquals(executionResult.getType(), TUExecutionResult.Type.ERROR);\n        Assert.assertEquals(executionResult.getException().getClass(), TransformationUtilityException.class);\n        Assert.assertEquals(executionResult.getException().getMessage(), \"File blah/bli is not recognized as a valid XML file\");\n        Assert.assertNull(executionResult.getValue());\n    }", "signature": "void notXmlFileTest()", "full_signature": "@Test public void notXmlFileTest()", "class_method_signature": "XmlIndentationTest.notXmlFileTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException", "assertNull", "getValue"]}, "focal_class": {"identifier": "XmlIndentation", "superclass": "extends TransformationUtility<XmlIndentation>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Returns the indentation used in XML file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Returns the indentation used in XML file %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private static XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();", "modifier": "private static", "type": "XMLInputFactory", "declarator": "xmlInputFactory = XMLInputFactory.newInstance()", "var_name": "xmlInputFactory"}], "methods": [{"identifier": "getFirst", "parameters": "(File xmlFile)", "modifiers": "public static", "return": "String", "signature": "String getFirst(File xmlFile)", "full_signature": "public static String getFirst(File xmlFile)", "class_method_signature": "XmlIndentation.getFirst(File xmlFile)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "XmlIndentation.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "XmlIndentation.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/xml/XmlIndentation.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "body": "@Override\n    protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        TUExecutionResult result = null;\n\n        try {\n            File xmlFile = getAbsoluteFile(transformedAppFolder, transformationContext);\n            String indentation = getFirst(xmlFile);\n            if (indentation == null) {\n                result = TUExecutionResult.nullResult(this);\n            } else {\n                result = TUExecutionResult.value(this, indentation);\n            }\n        } catch (FileNotFoundException e) {\n            String message = \"File \" + getRelativePath() + \" does not exist\";\n            TransformationUtilityException tuex = new TransformationUtilityException(message, e);\n            result = TUExecutionResult.error(this, tuex);\n        } catch (WstxUnexpectedCharException e) {\n            String message = \"File \" + getRelativePath() + \" is not recognized as a valid XML file\";\n            TransformationUtilityException tuex = new TransformationUtilityException(message, e);\n            result = TUExecutionResult.error(this, tuex);\n        } catch (Exception e) {\n            result = TUExecutionResult.error(this, e);\n        }\n\n        return result;\n    }", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "XmlIndentation.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "getFirst", "nullResult", "value", "getRelativePath", "error", "getRelativePath", "error", "error"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}