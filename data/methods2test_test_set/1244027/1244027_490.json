{"test_class": {"identifier": "BasicNamespaceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BasicNamespace ns1;", "modifier": "private", "type": "BasicNamespace", "declarator": "ns1", "var_name": "ns1"}, {"original_string": "private BasicNamespace ns2;", "modifier": "private", "type": "BasicNamespace", "declarator": "ns2", "var_name": "ns2"}, {"original_string": "private BasicNamespace ns3;", "modifier": "private", "type": "BasicNamespace", "declarator": "ns3", "var_name": "ns3"}, {"original_string": "private BasicNamespace ns4;", "modifier": "private", "type": "BasicNamespace", "declarator": "ns4", "var_name": "ns4"}, {"original_string": "private BasicNamespace ns5;", "modifier": "private", "type": "BasicNamespace", "declarator": "ns5", "var_name": "ns5"}, {"original_string": "private String validUri1;", "modifier": "private", "type": "String", "declarator": "validUri1", "var_name": "validUri1"}, {"original_string": "private String validUri2;", "modifier": "private", "type": "String", "declarator": "validUri2", "var_name": "validUri2"}, {"original_string": "private String validUri3;", "modifier": "private", "type": "String", "declarator": "validUri3", "var_name": "validUri3"}, {"original_string": "private String validPrefix1;", "modifier": "private", "type": "String", "declarator": "validPrefix1", "var_name": "validPrefix1"}, {"original_string": "private String validPrefix2;", "modifier": "private", "type": "String", "declarator": "validPrefix2", "var_name": "validPrefix2"}, {"original_string": "private String validPrefix3;", "modifier": "private", "type": "String", "declarator": "validPrefix3", "var_name": "validPrefix3"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/BasicNamespaceTest.java"}, "test_case": {"identifier": "shouldHaveSamePrefixPassedIntoConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHaveSamePrefixPassedIntoConstructor() {\n        assertThat(ns1.getPrefix(), is(validPrefix1));\n        assertThat(ns2.getPrefix(), is(validPrefix1));\n        assertThat(ns3.getPrefix(), is(validPrefix2));\n        assertThat(ns4.getPrefix(), is(validPrefix2));\n        assertThat(ns5.getPrefix(), is(validPrefix3));\n    }", "signature": "void shouldHaveSamePrefixPassedIntoConstructor()", "full_signature": "@Test public void shouldHaveSamePrefixPassedIntoConstructor()", "class_method_signature": "BasicNamespaceTest.shouldHaveSamePrefixPassedIntoConstructor()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getPrefix", "is", "assertThat", "getPrefix", "is", "assertThat", "getPrefix", "is", "assertThat", "getPrefix", "is", "assertThat", "getPrefix", "is"]}, "focal_class": {"identifier": "BasicNamespace", "superclass": "", "interfaces": "implements NamespaceRegistry.Namespace", "fields": [{"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final String namespaceUri;", "modifier": "private final", "type": "String", "declarator": "namespaceUri", "var_name": "namespaceUri"}], "methods": [{"identifier": "BasicNamespace", "parameters": "( String prefix,\n                           String namespaceUri )", "modifiers": "public", "return": "", "signature": " BasicNamespace( String prefix,\n                           String namespaceUri )", "full_signature": "public  BasicNamespace( String prefix,\n                           String namespaceUri )", "class_method_signature": "BasicNamespace.BasicNamespace( String prefix,\n                           String namespaceUri )", "testcase": false, "constructor": true}, {"identifier": "getNamespaceUri", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNamespaceUri()", "full_signature": "@Override public String getNamespaceUri()", "class_method_signature": "BasicNamespace.getNamespaceUri()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "BasicNamespace.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasicNamespace.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "( Namespace that )", "modifiers": "@Override public", "return": "int", "signature": "int compareTo( Namespace that )", "full_signature": "@Override public int compareTo( Namespace that )", "class_method_signature": "BasicNamespace.compareTo( Namespace that )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "BasicNamespace.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasicNamespace.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/BasicNamespace.java"}, "focal_method": {"identifier": "getPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPrefix() {\n        return prefix;\n    }", "signature": "String getPrefix()", "full_signature": "@Override public String getPrefix()", "class_method_signature": "BasicNamespace.getPrefix()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}