{"test_class": {"identifier": "LicenseResolverTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private List<Artifact> artifacts;", "modifier": "private", "type": "List<Artifact>", "declarator": "artifacts", "var_name": "artifacts"}, {"original_string": "private LicenseResolver licenseResolver;", "modifier": "private", "type": "LicenseResolver", "declarator": "licenseResolver", "var_name": "licenseResolver"}, {"original_string": "private LicenseStatement configuredLicense;", "modifier": "private", "type": "LicenseStatement", "declarator": "configuredLicense", "var_name": "configuredLicense"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/processors/LicenseResolverTest.java"}, "test_case": {"identifier": "licenseResolverTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void licenseResolverTest() {\n\n        licenseResolver.process(artifacts);\n\n        assertThat(artifacts.size()).isEqualTo(3);\n        assertThat(ArtifactLicenseUtils.getFinalLicenses(artifacts.get(0)))\n                .isNotEqualTo(configuredLicense);\n        assertThat(ArtifactLicenseUtils.getFinalLicenses(artifacts.get(1)))\n                .isEqualTo(configuredLicense);\n    }", "signature": "void licenseResolverTest()", "full_signature": "@Test public void licenseResolverTest()", "class_method_signature": "LicenseResolverTest.licenseResolverTest()", "testcase": true, "constructor": false, "invocations": ["process", "isEqualTo", "assertThat", "size", "isNotEqualTo", "assertThat", "getFinalLicenses", "get", "isEqualTo", "assertThat", "getFinalLicenses", "get"]}, "focal_class": {"identifier": "LicenseResolver", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private Map<ArtifactSelector, LicenseInformation> configuredLicenses;", "modifier": "private", "type": "Map<ArtifactSelector, LicenseInformation>", "declarator": "configuredLicenses", "var_name": "configuredLicenses"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LicenseResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LicenseResolver.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "LicenseResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " LicenseResolver()", "full_signature": "public  LicenseResolver()", "class_method_signature": "LicenseResolver.LicenseResolver()", "testcase": false, "constructor": true}, {"identifier": "resolveLicenses", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "private", "return": "void", "signature": "void resolveLicenses(Collection<Artifact> artifacts)", "full_signature": "private void resolveLicenses(Collection<Artifact> artifacts)", "class_method_signature": "LicenseResolver.resolveLicenses(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "findConfiguredLicense", "parameters": "(Artifact artifact, Map<ArtifactSelector, LicenseInformation> configuration)", "modifiers": "private", "return": "Optional<LicenseInformation>", "signature": "Optional<LicenseInformation> findConfiguredLicense(Artifact artifact, Map<ArtifactSelector, LicenseInformation> configuration)", "full_signature": "private Optional<LicenseInformation> findConfiguredLicense(Artifact artifact, Map<ArtifactSelector, LicenseInformation> configuration)", "class_method_signature": "LicenseResolver.findConfiguredLicense(Artifact artifact, Map<ArtifactSelector, LicenseInformation> configuration)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> artifacts)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> artifacts)", "class_method_signature": "LicenseResolver.process(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String,String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String,String> configMap)", "full_signature": "@Override public void configure(Map<String,String> configMap)", "class_method_signature": "LicenseResolver.configure(Map<String,String> configMap)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/processors/LicenseResolver.java"}, "focal_method": {"identifier": "LicenseResolver", "parameters": "()", "modifiers": "public", "return": "", "body": "public LicenseResolver() {\n        this.workflowStepOrder = 500;\n    }", "signature": " LicenseResolver()", "full_signature": "public  LicenseResolver()", "class_method_signature": "LicenseResolver.LicenseResolver()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}