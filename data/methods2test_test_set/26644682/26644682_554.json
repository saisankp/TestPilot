{"test_class": {"identifier": "XlsSchemaParserTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(XlsSerializerTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(XlsSerializerTest.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private XlsSchemaParser parser;", "modifier": "@Autowired\n    private", "type": "XlsSchemaParser", "declarator": "parser", "var_name": "parser"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/xls/XlsSchemaParserTest.java"}, "test_case": {"identifier": "read_xls_TDP_", "parameters": "()", "modifiers": "@Test(expected = TDPException.class) public", "return": "void", "body": "@Test(expected = TDPException.class)\n    public void read_xls_TDP_() throws Exception {\n        String fileName = \"many column.xlsx\";\n\n        try (InputStream inputStream = this.getClass().getResourceAsStream(fileName)) {\n            parser.parse(getRequest(inputStream, \"#852\")).getSheetContents().get(0).getColumnMetadatas();\n        }\n    }", "signature": "void read_xls_TDP_()", "full_signature": "@Test(expected = TDPException.class) public void read_xls_TDP_()", "class_method_signature": "XlsSchemaParserTest.read_xls_TDP_()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getColumnMetadatas", "get", "getSheetContents", "parse", "getRequest"]}, "focal_class": {"identifier": "XlsSchemaParser", "superclass": "", "interfaces": "implements SchemaParser", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XlsSchemaParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XlsSchemaParser.class)", "var_name": "LOGGER"}, {"original_string": "private static final String BLANK = \"blank\";", "modifier": "private static final", "type": "String", "declarator": "BLANK = \"blank\"", "var_name": "BLANK"}, {"original_string": "@Value(\"${dataset.import.xls.size.column.max:1000}\")\n    private int maxNumberOfColumns;", "modifier": "@Value(\"${dataset.import.xls.size.column.max:1000}\")\n    private", "type": "int", "declarator": "maxNumberOfColumns", "var_name": "maxNumberOfColumns"}], "methods": [{"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "XlsSchemaParser.parse(Request request)", "testcase": false, "constructor": false}, {"identifier": "parseAllSheets", "parameters": "(Request request)", "modifiers": "protected", "return": "List<Schema.SheetContent>", "signature": "List<Schema.SheetContent> parseAllSheets(Request request)", "full_signature": "protected List<Schema.SheetContent> parseAllSheets(Request request)", "class_method_signature": "XlsSchemaParser.parseAllSheets(Request request)", "testcase": false, "constructor": false}, {"identifier": "parseAllSheetsStream", "parameters": "(Request request)", "modifiers": "private", "return": "List<Schema.SheetContent>", "signature": "List<Schema.SheetContent> parseAllSheetsStream(Request request)", "full_signature": "private List<Schema.SheetContent> parseAllSheetsStream(Request request)", "class_method_signature": "XlsSchemaParser.parseAllSheetsStream(Request request)", "testcase": false, "constructor": false}, {"identifier": "getTotalColumnsNumber", "parameters": "(StreamingSheet sheet)", "modifiers": "private", "return": "int", "signature": "int getTotalColumnsNumber(StreamingSheet sheet)", "full_signature": "private int getTotalColumnsNumber(StreamingSheet sheet)", "class_method_signature": "XlsSchemaParser.getTotalColumnsNumber(StreamingSheet sheet)", "testcase": false, "constructor": false}, {"identifier": "completeWithEmptyColumnsMetadata", "parameters": "(List<ColumnMetadata> columnsMetadata, int maxColNumber)", "modifiers": "private", "return": "void", "signature": "void completeWithEmptyColumnsMetadata(List<ColumnMetadata> columnsMetadata, int maxColNumber)", "full_signature": "private void completeWithEmptyColumnsMetadata(List<ColumnMetadata> columnsMetadata, int maxColNumber)", "class_method_signature": "XlsSchemaParser.completeWithEmptyColumnsMetadata(List<ColumnMetadata> columnsMetadata, int maxColNumber)", "testcase": false, "constructor": false}, {"identifier": "createMetadataFromFirstNonEmptyRowAndInitSheet", "parameters": "(Sheet sheet)", "modifiers": "private", "return": "List<ColumnMetadata>", "signature": "List<ColumnMetadata> createMetadataFromFirstNonEmptyRowAndInitSheet(Sheet sheet)", "full_signature": "private List<ColumnMetadata> createMetadataFromFirstNonEmptyRowAndInitSheet(Sheet sheet)", "class_method_signature": "XlsSchemaParser.createMetadataFromFirstNonEmptyRowAndInitSheet(Sheet sheet)", "testcase": false, "constructor": false}, {"identifier": "parseAllSheetsOldFormat", "parameters": "(Request request)", "modifiers": "private", "return": "List<Schema.SheetContent>", "signature": "List<Schema.SheetContent> parseAllSheetsOldFormat(Request request)", "full_signature": "private List<Schema.SheetContent> parseAllSheetsOldFormat(Request request)", "class_method_signature": "XlsSchemaParser.parseAllSheetsOldFormat(Request request)", "testcase": false, "constructor": false}, {"identifier": "parsePerSheet", "parameters": "(Sheet sheet, String datasetId, FormulaEvaluator formulaEvaluator)", "modifiers": "private", "return": "List<ColumnMetadata>", "signature": "List<ColumnMetadata> parsePerSheet(Sheet sheet, String datasetId, FormulaEvaluator formulaEvaluator)", "full_signature": "private List<ColumnMetadata> parsePerSheet(Sheet sheet, String datasetId, FormulaEvaluator formulaEvaluator)", "class_method_signature": "XlsSchemaParser.parsePerSheet(Sheet sheet, String datasetId, FormulaEvaluator formulaEvaluator)", "testcase": false, "constructor": false}, {"identifier": "guessColumnType", "parameters": "(Integer colId, SortedMap<Integer, String> columnRows, int averageHeaderSize)", "modifiers": "private", "return": "Type", "signature": "Type guessColumnType(Integer colId, SortedMap<Integer, String> columnRows, int averageHeaderSize)", "full_signature": "private Type guessColumnType(Integer colId, SortedMap<Integer, String> columnRows, int averageHeaderSize)", "class_method_signature": "XlsSchemaParser.guessColumnType(Integer colId, SortedMap<Integer, String> columnRows, int averageHeaderSize)", "testcase": false, "constructor": false}, {"identifier": "collectSheetTypeMatrix", "parameters": "(Sheet sheet,\n            FormulaEvaluator formulaEvaluator)", "modifiers": "private", "return": "SortedMap<Integer, SortedMap<Integer, String>>", "signature": "SortedMap<Integer, SortedMap<Integer, String>> collectSheetTypeMatrix(Sheet sheet,\n            FormulaEvaluator formulaEvaluator)", "full_signature": "private SortedMap<Integer, SortedMap<Integer, String>> collectSheetTypeMatrix(Sheet sheet,\n            FormulaEvaluator formulaEvaluator)", "class_method_signature": "XlsSchemaParser.collectSheetTypeMatrix(Sheet sheet,\n            FormulaEvaluator formulaEvaluator)", "testcase": false, "constructor": false}, {"identifier": "getTypeFromNumericCell", "parameters": "(Cell cell)", "modifiers": "private", "return": "String", "signature": "String getTypeFromNumericCell(Cell cell)", "full_signature": "private String getTypeFromNumericCell(Cell cell)", "class_method_signature": "XlsSchemaParser.getTypeFromNumericCell(Cell cell)", "testcase": false, "constructor": false}, {"identifier": "guessHeaderSize", "parameters": "(Map<Integer, SortedMap<Integer, String>> cellsTypeMatrix)", "modifiers": "private", "return": "int", "signature": "int guessHeaderSize(Map<Integer, SortedMap<Integer, String>> cellsTypeMatrix)", "full_signature": "private int guessHeaderSize(Map<Integer, SortedMap<Integer, String>> cellsTypeMatrix)", "class_method_signature": "XlsSchemaParser.guessHeaderSize(Map<Integer, SortedMap<Integer, String>> cellsTypeMatrix)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/xls/XlsSchemaParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "body": "@Override\n    public Schema parse(Request request) {\n        final Marker marker = Markers.dataset(request.getMetadata().getId());\n        LOGGER.debug(marker, \"parsing {} \");\n        try {\n            List<Schema.SheetContent> sheetContents = parseAllSheets(request);\n            Schema result;\n            if (!sheetContents.isEmpty()) {\n                // only one sheet\n                if (sheetContents.size() == 1) {\n                    result = Schema.Builder\n                            .parserResult() //\n                            .sheetContents(sheetContents) //\n                            .draft(false) //\n                            .sheetName(sheetContents.get(0).getName()) //\n                            .build();\n                } else {\n                    // multiple sheet, set draft flag on\n                    result = Schema.Builder\n                            .parserResult() //\n                            .sheetContents(sheetContents) //\n                            .draft(true) //\n                            .sheetName(sheetContents.get(0).getName()) //\n                            .build();\n                }\n            }\n            // nothing to parse\n            else {\n                throw new TDPException(DataSetErrorCodes.UNABLE_TO_READ_DATASET_CONTENT);\n            }\n            return result;\n        } catch (TDPException e) {\n            throw e;\n        } catch (Exception e) {\n            LOGGER.debug(marker, \"IOException during parsing xls request :\" + e.getMessage(), e);\n            throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n        }\n\n    }", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "XlsSchemaParser.parse(Request request)", "testcase": false, "constructor": false, "invocations": ["dataset", "getId", "getMetadata", "debug", "parseAllSheets", "isEmpty", "size", "build", "sheetName", "draft", "sheetContents", "parserResult", "getName", "get", "build", "sheetName", "draft", "sheetContents", "parserResult", "getName", "get", "debug", "getMessage"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}