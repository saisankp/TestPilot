{"test_class": {"identifier": "ExternalKeyProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExternalKeyProxy subject;", "modifier": "private", "type": "ExternalKeyProxy", "declarator": "subject", "var_name": "subject"}, {"original_string": "private EncryptionProvider encryptionProvider;", "modifier": "private", "type": "EncryptionProvider", "declarator": "encryptionProvider", "var_name": "encryptionProvider"}, {"original_string": "private EncryptionKeyMetadata encryptionKeyMetadata;", "modifier": "private", "type": "EncryptionKeyMetadata", "declarator": "encryptionKeyMetadata", "var_name": "encryptionKeyMetadata"}, {"original_string": "private EncryptionKeyCanary encryptionKeyCanary;", "modifier": "private", "type": "EncryptionKeyCanary", "declarator": "encryptionKeyCanary", "var_name": "encryptionKeyCanary"}], "file": "components/encryption/src/test/java/org/cloudfoundry/credhub/services/ExternalKeyProxyTest.java"}, "test_case": {"identifier": "matchesCanary_shouldReturnFalse_IfTheInternalKeyWasWrong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void matchesCanary_shouldReturnFalse_IfTheInternalKeyWasWrong() throws Exception {\n    when(encryptionProvider.decrypt(any(), any(), any())).thenThrow(AEADBadTagException.class);\n\n    subject = new ExternalKeyProxy(encryptionKeyMetadata, encryptionProvider);\n    assertFalse(subject.matchesCanary(encryptionKeyCanary));\n  }", "signature": "void matchesCanary_shouldReturnFalse_IfTheInternalKeyWasWrong()", "full_signature": "@Test public void matchesCanary_shouldReturnFalse_IfTheInternalKeyWasWrong()", "class_method_signature": "ExternalKeyProxyTest.matchesCanary_shouldReturnFalse_IfTheInternalKeyWasWrong()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "decrypt", "any", "any", "any", "assertFalse", "matchesCanary"]}, "focal_class": {"identifier": "ExternalKeyProxy", "superclass": "", "interfaces": "implements KeyProxy", "fields": [{"original_string": "private final List<Byte> salt;", "modifier": "private final", "type": "List<Byte>", "declarator": "salt", "var_name": "salt"}, {"original_string": "private final EncryptionProvider encryptionProvider;", "modifier": "private final", "type": "EncryptionProvider", "declarator": "encryptionProvider", "var_name": "encryptionProvider"}, {"original_string": "private final EncryptionKeyMetadata encryptionKeyMetadata;", "modifier": "private final", "type": "EncryptionKeyMetadata", "declarator": "encryptionKeyMetadata", "var_name": "encryptionKeyMetadata"}], "methods": [{"identifier": "ExternalKeyProxy", "parameters": "(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionProvider encryptionProvider)", "modifiers": "", "return": "", "signature": " ExternalKeyProxy(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionProvider encryptionProvider)", "full_signature": "  ExternalKeyProxy(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionProvider encryptionProvider)", "class_method_signature": "ExternalKeyProxy.ExternalKeyProxy(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionProvider encryptionProvider)", "testcase": false, "constructor": true}, {"identifier": "getKey", "parameters": "()", "modifiers": "@Override public", "return": "Key", "signature": "Key getKey()", "full_signature": "@Override public Key getKey()", "class_method_signature": "ExternalKeyProxy.getKey()", "testcase": false, "constructor": false}, {"identifier": "matchesCanary", "parameters": "(final EncryptionKeyCanary canary)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matchesCanary(final EncryptionKeyCanary canary)", "full_signature": "@Override public boolean matchesCanary(final EncryptionKeyCanary canary)", "class_method_signature": "ExternalKeyProxy.matchesCanary(final EncryptionKeyCanary canary)", "testcase": false, "constructor": false}, {"identifier": "matchesCanary", "parameters": "(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionKeyCanary canary)", "modifiers": "protected", "return": "boolean", "signature": "boolean matchesCanary(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionKeyCanary canary)", "full_signature": "protected boolean matchesCanary(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionKeyCanary canary)", "class_method_signature": "ExternalKeyProxy.matchesCanary(final EncryptionKeyMetadata encryptionKeyMetadata, final EncryptionKeyCanary canary)", "testcase": false, "constructor": false}, {"identifier": "getSalt", "parameters": "()", "modifiers": "@Override public", "return": "List<Byte>", "signature": "List<Byte> getSalt()", "full_signature": "@Override public List<Byte> getSalt()", "class_method_signature": "ExternalKeyProxy.getSalt()", "testcase": false, "constructor": false}], "file": "components/encryption/src/main/java/org/cloudfoundry/credhub/services/ExternalKeyProxy.java"}, "focal_method": {"identifier": "matchesCanary", "parameters": "(final EncryptionKeyCanary canary)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean matchesCanary(final EncryptionKeyCanary canary) {\n    return matchesCanary(encryptionKeyMetadata, canary);\n  }", "signature": "boolean matchesCanary(final EncryptionKeyCanary canary)", "full_signature": "@Override public boolean matchesCanary(final EncryptionKeyCanary canary)", "class_method_signature": "ExternalKeyProxy.matchesCanary(final EncryptionKeyCanary canary)", "testcase": false, "constructor": false, "invocations": ["matchesCanary"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}