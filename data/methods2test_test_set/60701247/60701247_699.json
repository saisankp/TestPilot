{"test_class": {"identifier": "RpcNetworkConnectionsModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FAKE_REQUEST_PAYLOAD_ID = \"payloadRequest\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_REQUEST_PAYLOAD_ID = \"payloadRequest\"", "var_name": "FAKE_REQUEST_PAYLOAD_ID"}, {"original_string": "private static final String FAKE_RESPONSE_PAYLOAD_ID = \"payloadResponse\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_RESPONSE_PAYLOAD_ID = \"payloadResponse\"", "var_name": "FAKE_RESPONSE_PAYLOAD_ID"}, {"original_string": "private static final String FAKE_REQUEST_HEADERS = \"User-Agent = Customized\\n Accept = text/plain\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_REQUEST_HEADERS = \"User-Agent = Customized\\n Accept = text/plain\"", "var_name": "FAKE_REQUEST_HEADERS"}, {"original_string": "private static final ImmutableList<HttpData> FAKE_DATA =\n    new ImmutableList.Builder<HttpData>()\n      // Finished request (1-6)\n      .add(TestHttpData.newBuilder(1, 1, 6, new HttpData.JavaThread(1, \"threadA\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 1)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 1)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(1))\n             .build())\n      // Finished request (2-5)\n      .add(TestHttpData.newBuilder(2, 2, 5, new HttpData.JavaThread(2, \"threadB\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 2)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 2)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(2))\n             .build())\n      // Unfinished request (3-?)\n      .add(TestHttpData.newBuilder(3, 3, 0, 0, 0, 0, new HttpData.JavaThread(3, \"threadC\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             // No request / response payload, hasn't started uploading yet\n             .build())\n      // Unfinished request (4-?)\n      .add(TestHttpData.newBuilder(4, 4, 5, 0, 0, 0, new HttpData.JavaThread(4, \"threadD\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             // No response payload, hasn't finished downloading yet\n             .build())\n      // Finished request (8-12)\n      .add(TestHttpData.newBuilder(5, 8, 9, 10, 12, 12, new HttpData.JavaThread(5, \"threadE\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 5)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 5)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(5))\n             .build())\n      .build();", "modifier": "private static final", "type": "ImmutableList<HttpData>", "declarator": "FAKE_DATA =\n    new ImmutableList.Builder<HttpData>()\n      // Finished request (1-6)\n      .add(TestHttpData.newBuilder(1, 1, 6, new HttpData.JavaThread(1, \"threadA\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 1)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 1)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(1))\n             .build())\n      // Finished request (2-5)\n      .add(TestHttpData.newBuilder(2, 2, 5, new HttpData.JavaThread(2, \"threadB\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 2)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 2)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(2))\n             .build())\n      // Unfinished request (3-?)\n      .add(TestHttpData.newBuilder(3, 3, 0, 0, 0, 0, new HttpData.JavaThread(3, \"threadC\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             // No request / response payload, hasn't started uploading yet\n             .build())\n      // Unfinished request (4-?)\n      .add(TestHttpData.newBuilder(4, 4, 5, 0, 0, 0, new HttpData.JavaThread(4, \"threadD\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             // No response payload, hasn't finished downloading yet\n             .build())\n      // Finished request (8-12)\n      .add(TestHttpData.newBuilder(5, 8, 9, 10, 12, 12, new HttpData.JavaThread(5, \"threadE\"))\n             .setRequestFields(FAKE_REQUEST_HEADERS)\n             .setRequestPayloadId(FAKE_REQUEST_PAYLOAD_ID + 5)\n             .setResponsePayloadId(FAKE_RESPONSE_PAYLOAD_ID + 5)\n             .setResponsePayloadSize(TestHttpData.fakeContentSize(5))\n             .build())\n      .build()", "var_name": "FAKE_DATA"}, {"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private FakeTransportService myTransportService = new FakeTransportService(myTimer, false);", "modifier": "private", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer, false)", "var_name": "myTransportService"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"RpcNetworkConnectionsModelTest\", myTransportService, new FakeProfilerService(myTimer),\n                        FakeNetworkService.newBuilder().setHttpDataList(FAKE_DATA).build());", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"RpcNetworkConnectionsModelTest\", myTransportService, new FakeProfilerService(myTimer),\n                        FakeNetworkService.newBuilder().setHttpDataList(FAKE_DATA).build())", "var_name": "myGrpcChannel"}, {"original_string": "private boolean myUseNewEventPipeline;", "modifier": "private", "type": "boolean", "declarator": "myUseNewEventPipeline", "var_name": "myUseNewEventPipeline"}, {"original_string": "private NetworkConnectionsModel myModel;", "modifier": "private", "type": "NetworkConnectionsModel", "declarator": "myModel", "var_name": "myModel"}], "file": "profilers/testSrc/com/android/tools/profilers/network/RpcNetworkConnectionsModelTest.java"}, "test_case": {"identifier": "notFoundBytes_ReturnsEmptyByteString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void notFoundBytes_ReturnsEmptyByteString() {\n    assertThat(myModel.requestBytes(\"invalid id\")).isEqualTo(ByteString.EMPTY);\n  }", "signature": "void notFoundBytes_ReturnsEmptyByteString()", "full_signature": "@Test public void notFoundBytes_ReturnsEmptyByteString()", "class_method_signature": "RpcNetworkConnectionsModelTest.notFoundBytes_ReturnsEmptyByteString()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "requestBytes"]}, "focal_class": {"identifier": "RpcNetworkConnectionsModel", "superclass": "", "interfaces": "implements NetworkConnectionsModel", "fields": [{"original_string": "@NotNull private final TransportServiceGrpc.TransportServiceBlockingStub myTransportService;", "modifier": "@NotNull private final", "type": "TransportServiceGrpc.TransportServiceBlockingStub", "declarator": "myTransportService", "var_name": "myTransportService"}, {"original_string": "@NotNull private final Common.Session mySession;", "modifier": "@NotNull private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}], "methods": [{"identifier": "RpcNetworkConnectionsModel", "parameters": "(@NotNull TransportServiceGrpc.TransportServiceBlockingStub transportService,\n                                    @NotNull Common.Session session)", "modifiers": "public", "return": "", "signature": " RpcNetworkConnectionsModel(@NotNull TransportServiceGrpc.TransportServiceBlockingStub transportService,\n                                    @NotNull Common.Session session)", "full_signature": "public  RpcNetworkConnectionsModel(@NotNull TransportServiceGrpc.TransportServiceBlockingStub transportService,\n                                    @NotNull Common.Session session)", "class_method_signature": "RpcNetworkConnectionsModel.RpcNetworkConnectionsModel(@NotNull TransportServiceGrpc.TransportServiceBlockingStub transportService,\n                                    @NotNull Common.Session session)", "testcase": false, "constructor": true}, {"identifier": "getData", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@NotNull @Override public", "return": "List<HttpData>", "signature": "List<HttpData> getData(@NotNull Range timeCurrentRangeUs)", "full_signature": "@NotNull @Override public List<HttpData> getData(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "RpcNetworkConnectionsModel.getData(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false}, {"identifier": "requestBytes", "parameters": "(@NotNull String id)", "modifiers": "@NotNull @Override public", "return": "ByteString", "signature": "ByteString requestBytes(@NotNull String id)", "full_signature": "@NotNull @Override public ByteString requestBytes(@NotNull String id)", "class_method_signature": "RpcNetworkConnectionsModel.requestBytes(@NotNull String id)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/network/RpcNetworkConnectionsModel.java"}, "focal_method": {"identifier": "requestBytes", "parameters": "(@NotNull String id)", "modifiers": "@NotNull @Override public", "return": "ByteString", "body": "@NotNull\n  @Override\n  public ByteString requestBytes(@NotNull String id) {\n    if (StringUtil.isEmpty(id)) {\n      return ByteString.EMPTY;\n    }\n\n    BytesRequest request = BytesRequest.newBuilder()\n      .setStreamId(mySession.getStreamId())\n      .setId(id)\n      .build();\n\n    BytesResponse response = myTransportService.getBytes(request);\n    return response.getContents();\n  }", "signature": "ByteString requestBytes(@NotNull String id)", "full_signature": "@NotNull @Override public ByteString requestBytes(@NotNull String id)", "class_method_signature": "RpcNetworkConnectionsModel.requestBytes(@NotNull String id)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "build", "setId", "setStreamId", "newBuilder", "getStreamId", "getBytes", "getContents"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}