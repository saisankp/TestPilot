{"test_class": {"identifier": "MultipleMediaSourceTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/MultipleMediaSourceTest.java"}, "test_case": {"identifier": "getSegmentsDurationForTwoFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSegmentsDurationForTwoFiles() throws RuntimeException {\n        MediaSource trackWithAudioDuration100 = create.mediaSource().with(\n                create.audioFormat().withDuration(100).construct())\n            .construct();\n        MediaSource trackWithAudioDuration200 = create.mediaSource().with(\n            create.audioFormat().withDuration(200).construct())\n            .construct();\n\n        MultipleMediaSource multipleMediaSource=create.multipleMediaSource()\n            .with(trackWithAudioDuration100)\n            .with(trackWithAudioDuration200)\n            .construct();\n\n        assertEquals(300, multipleMediaSource.getSegmentsDurationInMicroSec());\n    }", "signature": "void getSegmentsDurationForTwoFiles()", "full_signature": "@Test public void getSegmentsDurationForTwoFiles()", "class_method_signature": "MultipleMediaSourceTest.getSegmentsDurationForTwoFiles()", "testcase": true, "constructor": false, "invocations": ["construct", "with", "mediaSource", "construct", "withDuration", "audioFormat", "construct", "with", "mediaSource", "construct", "withDuration", "audioFormat", "construct", "with", "with", "multipleMediaSource", "assertEquals", "getSegmentsDurationInMicroSec"]}, "focal_class": {"identifier": "MultipleMediaSource", "superclass": "", "interfaces": "implements IMediaSource", "fields": [{"original_string": "private LinkedList<MediaFile> mediaFiles = new LinkedList<MediaFile>();", "modifier": "private", "type": "LinkedList<MediaFile>", "declarator": "mediaFiles = new LinkedList<MediaFile>()", "var_name": "mediaFiles"}, {"original_string": "private Iterator<MediaFile> mediaFileIterator = null;", "modifier": "private", "type": "Iterator<MediaFile>", "declarator": "mediaFileIterator = null", "var_name": "mediaFileIterator"}, {"original_string": "private MediaFile currentMediaFile = null;", "modifier": "private", "type": "MediaFile", "declarator": "currentMediaFile = null", "var_name": "currentMediaFile"}, {"original_string": "private Hashtable<Integer, Long> sampleTimeOffsets = new Hashtable<Integer, Long>();", "modifier": "private", "type": "Hashtable<Integer, Long>", "declarator": "sampleTimeOffsets = new Hashtable<Integer, Long>()", "var_name": "sampleTimeOffsets"}, {"original_string": "private Hashtable<Integer, Long> currentSampleTimes = new Hashtable<Integer, Long>();", "modifier": "private", "type": "Hashtable<Integer, Long>", "declarator": "currentSampleTimes = new Hashtable<Integer, Long>()", "var_name": "currentSampleTimes"}, {"original_string": "private CommandQueue commandQueue = new CommandQueue();", "modifier": "private", "type": "CommandQueue", "declarator": "commandQueue = new CommandQueue()", "var_name": "commandQueue"}, {"original_string": "private boolean isLastFile = true;", "modifier": "private", "type": "boolean", "declarator": "isLastFile = true", "var_name": "isLastFile"}, {"original_string": "private int connectedPluginsCount = 0;", "modifier": "private", "type": "int", "declarator": "connectedPluginsCount = 0", "var_name": "connectedPluginsCount"}, {"original_string": "private int nextFileRequest = 0;", "modifier": "private", "type": "int", "declarator": "nextFileRequest = 0", "var_name": "nextFileRequest"}, {"original_string": "private Dictionary<Integer, Integer> trackIdMap = new Hashtable<Integer, Integer>();", "modifier": "private", "type": "Dictionary<Integer, Integer>", "declarator": "trackIdMap = new Hashtable<Integer, Integer>()", "var_name": "trackIdMap"}], "methods": [{"identifier": "getOutputCommandQueue", "parameters": "()", "modifiers": "@Override public", "return": "CommandQueue", "signature": "CommandQueue getOutputCommandQueue()", "full_signature": "@Override public CommandQueue getOutputCommandQueue()", "class_method_signature": "MultipleMediaSource.getOutputCommandQueue()", "testcase": false, "constructor": false}, {"identifier": "fillCommandQueues", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fillCommandQueues()", "full_signature": "@Override public void fillCommandQueues()", "class_method_signature": "MultipleMediaSource.fillCommandQueues()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MultipleMediaSource.close()", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void pull(Frame frame)", "full_signature": "@Override public void pull(Frame frame)", "class_method_signature": "MultipleMediaSource.pull(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "nextFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextFile()", "full_signature": "public void nextFile()", "class_method_signature": "MultipleMediaSource.nextFile()", "testcase": false, "constructor": false}, {"identifier": "getMediaFormatByType", "parameters": "(MediaFormatType mediaFormatType)", "modifiers": "@Override public", "return": "MediaFormat", "signature": "MediaFormat getMediaFormatByType(MediaFormatType mediaFormatType)", "full_signature": "@Override public MediaFormat getMediaFormatByType(MediaFormatType mediaFormatType)", "class_method_signature": "MultipleMediaSource.getMediaFormatByType(MediaFormatType mediaFormatType)", "testcase": false, "constructor": false}, {"identifier": "pullFrameFromMediaSource", "parameters": "(Frame frame)", "modifiers": "private", "return": "void", "signature": "void pullFrameFromMediaSource(Frame frame)", "full_signature": "private void pullFrameFromMediaSource(Frame frame)", "class_method_signature": "MultipleMediaSource.pullFrameFromMediaSource(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "mapTrackId", "parameters": "(int sourceTrackId)", "modifiers": "private", "return": "int", "signature": "int mapTrackId(int sourceTrackId)", "full_signature": "private int mapTrackId(int sourceTrackId)", "class_method_signature": "MultipleMediaSource.mapTrackId(int sourceTrackId)", "testcase": false, "constructor": false}, {"identifier": "safeGet", "parameters": "(Long value)", "modifiers": "private", "return": "long", "signature": "long safeGet(Long value)", "full_signature": "private long safeGet(Long value)", "class_method_signature": "MultipleMediaSource.safeGet(Long value)", "testcase": false, "constructor": false}, {"identifier": "switchToNextFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void switchToNextFile()", "full_signature": "private void switchToNextFile()", "class_method_signature": "MultipleMediaSource.switchToNextFile()", "testcase": false, "constructor": false}, {"identifier": "isLastFrame", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isLastFrame()", "full_signature": "private boolean isLastFrame()", "class_method_signature": "MultipleMediaSource.isLastFrame()", "testcase": false, "constructor": false}, {"identifier": "isLastFile", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLastFile()", "full_signature": "public boolean isLastFile()", "class_method_signature": "MultipleMediaSource.isLastFile()", "testcase": false, "constructor": false}, {"identifier": "incrementConnectedPluginsCount", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void incrementConnectedPluginsCount()", "full_signature": "@Override public void incrementConnectedPluginsCount()", "class_method_signature": "MultipleMediaSource.incrementConnectedPluginsCount()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "MultipleMediaSource.start()", "testcase": false, "constructor": false}, {"identifier": "files", "parameters": "()", "modifiers": "public", "return": "List<MediaFile>", "signature": "List<MediaFile> files()", "full_signature": "public List<MediaFile> files()", "class_method_signature": "MultipleMediaSource.files()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MediaFile mediaFile)", "modifiers": "public", "return": "void", "signature": "void add(MediaFile mediaFile)", "full_signature": "public void add(MediaFile mediaFile)", "class_method_signature": "MultipleMediaSource.add(MediaFile mediaFile)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(MediaFile mediaFile)", "modifiers": "private", "return": "void", "signature": "void validate(MediaFile mediaFile)", "full_signature": "private void validate(MediaFile mediaFile)", "class_method_signature": "MultipleMediaSource.validate(MediaFile mediaFile)", "testcase": false, "constructor": false}, {"identifier": "getMaxCurrentTimeOffset", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxCurrentTimeOffset()", "full_signature": "public long getMaxCurrentTimeOffset()", "class_method_signature": "MultipleMediaSource.getMaxCurrentTimeOffset()", "testcase": false, "constructor": false}, {"identifier": "hasData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void hasData()", "full_signature": "private void hasData()", "class_method_signature": "MultipleMediaSource.hasData()", "testcase": false, "constructor": false}, {"identifier": "queueCommand", "parameters": "(Command command)", "modifiers": "private", "return": "void", "signature": "void queueCommand(Command command)", "full_signature": "private void queueCommand(Command command)", "class_method_signature": "MultipleMediaSource.queueCommand(Command command)", "testcase": false, "constructor": false}, {"identifier": "getTrackIdByMediaType", "parameters": "(MediaFormatType mediaFormatType)", "modifiers": "@Override public", "return": "int", "signature": "int getTrackIdByMediaType(MediaFormatType mediaFormatType)", "full_signature": "@Override public int getTrackIdByMediaType(MediaFormatType mediaFormatType)", "class_method_signature": "MultipleMediaSource.getTrackIdByMediaType(MediaFormatType mediaFormatType)", "testcase": false, "constructor": false}, {"identifier": "selectTrack", "parameters": "(int trackId)", "modifiers": "@Override public", "return": "void", "signature": "void selectTrack(int trackId)", "full_signature": "@Override public void selectTrack(int trackId)", "class_method_signature": "MultipleMediaSource.selectTrack(int trackId)", "testcase": false, "constructor": false}, {"identifier": "setTrackMap", "parameters": "(int source, int target)", "modifiers": "public", "return": "void", "signature": "void setTrackMap(int source, int target)", "full_signature": "public void setTrackMap(int source, int target)", "class_method_signature": "MultipleMediaSource.setTrackMap(int source, int target)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "MultipleMediaSource.stop()", "testcase": false, "constructor": false}, {"identifier": "canConnectFirst", "parameters": "(IInputRaw connector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConnectFirst(IInputRaw connector)", "full_signature": "@Override public boolean canConnectFirst(IInputRaw connector)", "class_method_signature": "MultipleMediaSource.canConnectFirst(IInputRaw connector)", "testcase": false, "constructor": false}, {"identifier": "getSegmentsDurationInMicroSec", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSegmentsDurationInMicroSec()", "full_signature": "public long getSegmentsDurationInMicroSec()", "class_method_signature": "MultipleMediaSource.getSegmentsDurationInMicroSec()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(MediaFile mediaFile)", "modifiers": "public", "return": "void", "signature": "void remove(MediaFile mediaFile)", "full_signature": "public void remove(MediaFile mediaFile)", "class_method_signature": "MultipleMediaSource.remove(MediaFile mediaFile)", "testcase": false, "constructor": false}, {"identifier": "insertAt", "parameters": "(int index, MediaFile mediaFile)", "modifiers": "public", "return": "void", "signature": "void insertAt(int index, MediaFile mediaFile)", "full_signature": "public void insertAt(int index, MediaFile mediaFile)", "class_method_signature": "MultipleMediaSource.insertAt(int index, MediaFile mediaFile)", "testcase": false, "constructor": false}, {"identifier": "getOutputResolution", "parameters": "()", "modifiers": "@Override public", "return": "Resolution", "signature": "Resolution getOutputResolution()", "full_signature": "@Override public Resolution getOutputResolution()", "class_method_signature": "MultipleMediaSource.getOutputResolution()", "testcase": false, "constructor": false}, {"identifier": "hasTrack", "parameters": "(MediaFormatType mediaFormatType)", "modifiers": "public", "return": "boolean", "signature": "boolean hasTrack(MediaFormatType mediaFormatType)", "full_signature": "public boolean hasTrack(MediaFormatType mediaFormatType)", "class_method_signature": "MultipleMediaSource.hasTrack(MediaFormatType mediaFormatType)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void verify()", "full_signature": "public void verify()", "class_method_signature": "MultipleMediaSource.verify()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/MultipleMediaSource.java"}, "focal_method": {"identifier": "getSegmentsDurationInMicroSec", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getSegmentsDurationInMicroSec() {\n        long totalDuration = 0;\n        for (MediaFile mediaFile : mediaFiles) {\n            totalDuration += mediaFile.getSegmentsDurationInMicroSec();\n        }\n        return totalDuration;\n    }", "signature": "long getSegmentsDurationInMicroSec()", "full_signature": "public long getSegmentsDurationInMicroSec()", "class_method_signature": "MultipleMediaSource.getSegmentsDurationInMicroSec()", "testcase": false, "constructor": false, "invocations": ["getSegmentsDurationInMicroSec"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}