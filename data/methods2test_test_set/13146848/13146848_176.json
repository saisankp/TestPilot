{"test_class": {"identifier": "IOUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private String largeFilename = repeat(\"a\u0e27\", 300) + \".pdf\";", "modifier": "private", "type": "String", "declarator": "largeFilename = repeat(\"a\u0e27\", 300) + \".pdf\";", "var_name": "largeFilename"}], "file": "sejda-model/src/test/java/org/sejda/core/support/io/IOUtilsTest.java"}, "test_case": {"identifier": "noNPEIfParentIsMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void noNPEIfParentIsMissing() throws TaskIOException {\n        assertNotNull(IOUtils.createTemporaryBuffer(new FileTaskOutput(new File(\"test.pdf\"))));\n    }", "signature": "void noNPEIfParentIsMissing()", "full_signature": "@Test public void noNPEIfParentIsMissing()", "class_method_signature": "IOUtilsTest.noNPEIfParentIsMissing()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "createTemporaryBuffer"]}, "focal_class": {"identifier": "IOUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(IOUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(IOUtils.class)", "var_name": "LOG"}, {"original_string": "private static final String BUFFER_NAME = \"sejdaTmp\";", "modifier": "private static final", "type": "String", "declarator": "BUFFER_NAME = \"sejdaTmp\"", "var_name": "BUFFER_NAME"}, {"original_string": "private static final int TEMP_DIR_ATTEMPTS = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEMP_DIR_ATTEMPTS = 1000", "var_name": "TEMP_DIR_ATTEMPTS"}], "methods": [{"identifier": "IOUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " IOUtils()", "full_signature": "private  IOUtils()", "class_method_signature": "IOUtils.IOUtils()", "testcase": false, "constructor": true}, {"identifier": "createTemporaryBuffer", "parameters": "(TaskOutput taskOut)", "modifiers": "public static", "return": "File", "signature": "File createTemporaryBuffer(TaskOutput taskOut)", "full_signature": "public static File createTemporaryBuffer(TaskOutput taskOut)", "class_method_signature": "IOUtils.createTemporaryBuffer(TaskOutput taskOut)", "testcase": false, "constructor": false}, {"identifier": "tmpFile", "parameters": "(Path location)", "modifiers": "private static", "return": "Path", "signature": "Path tmpFile(Path location)", "full_signature": "private static Path tmpFile(Path location)", "class_method_signature": "IOUtils.tmpFile(Path location)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryBuffer", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTemporaryBuffer()", "full_signature": "public static File createTemporaryBuffer()", "class_method_signature": "IOUtils.createTemporaryBuffer()", "testcase": false, "constructor": false}, {"identifier": "createTemporaryBuffer", "parameters": "(String extension)", "modifiers": "public static", "return": "File", "signature": "File createTemporaryBuffer(String extension)", "full_signature": "public static File createTemporaryBuffer(String extension)", "class_method_signature": "IOUtils.createTemporaryBuffer(String extension)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryBufferWithName", "parameters": "(String filename)", "modifiers": "public static", "return": "File", "signature": "File createTemporaryBufferWithName(String filename)", "full_signature": "public static File createTemporaryBufferWithName(String filename)", "class_method_signature": "IOUtils.createTemporaryBufferWithName(String filename)", "testcase": false, "constructor": false}, {"identifier": "createTemporaryFolder", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File createTemporaryFolder()", "full_signature": "public static File createTemporaryFolder()", "class_method_signature": "IOUtils.createTemporaryFolder()", "testcase": false, "constructor": false}, {"identifier": "findNewNameThatDoesNotExist", "parameters": "(File output)", "modifiers": "public static", "return": "File", "signature": "File findNewNameThatDoesNotExist(File output)", "full_signature": "public static File findNewNameThatDoesNotExist(File output)", "class_method_signature": "IOUtils.findNewNameThatDoesNotExist(File output)", "testcase": false, "constructor": false}, {"identifier": "shortenFilename", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String shortenFilename(String name)", "full_signature": "public static String shortenFilename(String name)", "class_method_signature": "IOUtils.shortenFilename(String name)", "testcase": false, "constructor": false}, {"identifier": "toSafeFilename", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String toSafeFilename(String input)", "full_signature": "public static String toSafeFilename(String input)", "class_method_signature": "IOUtils.toSafeFilename(String input)", "testcase": false, "constructor": false}, {"identifier": "toStrictFilename", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String toStrictFilename(String input)", "full_signature": "public static String toStrictFilename(String input)", "class_method_signature": "IOUtils.toStrictFilename(String input)", "testcase": false, "constructor": false}, {"identifier": "shortenFilenameCharLength", "parameters": "(String input, int maxCharLength)", "modifiers": "static", "return": "String", "signature": "String shortenFilenameCharLength(String input, int maxCharLength)", "full_signature": "static String shortenFilenameCharLength(String input, int maxCharLength)", "class_method_signature": "IOUtils.shortenFilenameCharLength(String input, int maxCharLength)", "testcase": false, "constructor": false}, {"identifier": "shortenFilenameBytesLength", "parameters": "(String input, int maxBytesLength, Charset charset)", "modifiers": "static", "return": "String", "signature": "String shortenFilenameBytesLength(String input, int maxBytesLength, Charset charset)", "full_signature": "static String shortenFilenameBytesLength(String input, int maxBytesLength, Charset charset)", "class_method_signature": "IOUtils.shortenFilenameBytesLength(String input, int maxBytesLength, Charset charset)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/core/support/io/IOUtils.java"}, "focal_method": {"identifier": "createTemporaryBuffer", "parameters": "(TaskOutput taskOut)", "modifiers": "public static", "return": "File", "body": "public static File createTemporaryBuffer(TaskOutput taskOut) throws TaskIOException {\n        TmpBufferLocationFinder bufferLocationFinder = new TmpBufferLocationFinder();\n        try {\n            taskOut.accept(bufferLocationFinder);\n            File buffer = tmpFile(bufferLocationFinder.bufferLocation).toFile();\n            buffer.deleteOnExit();\n            return buffer;\n        } catch (TaskOutputVisitException | IOException e) {\n            // sometimes the above fails, eg: java.nio.file.AccessDeniedException: C:\\\\Users\\\\edi\\\\OneDrive\\\\Docs\\\\.sejdaTmp123124312312312.tmp\n            // so try again this time in the temp dir\n            try {\n                return createTemporaryBuffer();\n            } catch (TaskIOException ex) {\n                throw new TaskIOException(\"Unable to create temporary buffer\", ex);\n            }\n        }\n    }", "signature": "File createTemporaryBuffer(TaskOutput taskOut)", "full_signature": "public static File createTemporaryBuffer(TaskOutput taskOut)", "class_method_signature": "IOUtils.createTemporaryBuffer(TaskOutput taskOut)", "testcase": false, "constructor": false, "invocations": ["accept", "toFile", "tmpFile", "deleteOnExit", "createTemporaryBuffer"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}