{"test_class": {"identifier": "TestMathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BigInteger modulus = new BigInteger(\"113\");", "modifier": "private", "type": "BigInteger", "declarator": "modulus = new BigInteger(\"113\")", "var_name": "modulus"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestMathUtils.java"}, "test_case": {"identifier": "testSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSum() {\n    List<BigInteger> summands = Arrays.asList(\n        BigInteger.ONE,\n        BigInteger.ZERO,\n        modulus.subtract(BigInteger.TEN).mod(modulus),\n        new BigInteger(\"42\").mod(modulus)\n    );\n    BigInteger expected = BigInteger.ONE.add(BigInteger.ZERO)\n        .add(modulus.subtract(BigInteger.TEN).mod(modulus)).add(new BigInteger(\"42\").mod(modulus))\n        .mod(modulus);\n    assertEquals(expected, MathUtils.sum(summands, modulus));\n  }", "signature": "void testSum()", "full_signature": "@Test public void testSum()", "class_method_signature": "TestMathUtils.testSum()", "testcase": true, "constructor": false, "invocations": ["asList", "mod", "subtract", "mod", "mod", "add", "add", "add", "mod", "subtract", "mod", "assertEquals", "sum"]}, "focal_class": {"identifier": "MathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigInteger TWO = BigInteger.valueOf(2);", "modifier": "private static final", "type": "BigInteger", "declarator": "TWO = BigInteger.valueOf(2)", "var_name": "TWO"}], "methods": [{"identifier": "MathUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MathUtils()", "full_signature": "private  MathUtils()", "class_method_signature": "MathUtils.MathUtils()", "testcase": false, "constructor": true}, {"identifier": "isQuadraticResidue", "parameters": "(BigInteger value, BigInteger modulus)", "modifiers": "public static", "return": "boolean", "signature": "boolean isQuadraticResidue(BigInteger value, BigInteger modulus)", "full_signature": "public static boolean isQuadraticResidue(BigInteger value, BigInteger modulus)", "class_method_signature": "MathUtils.isQuadraticResidue(BigInteger value, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "modularSqrt", "parameters": "(BigInteger value, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "full_signature": "public static BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "class_method_signature": "MathUtils.modularSqrt(BigInteger value, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(List<BigInteger> summands, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "full_signature": "public static BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "class_method_signature": "MathUtils.sum(List<BigInteger> summands, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "getNonQuadraticResidue", "parameters": "(BigInteger modulus)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger getNonQuadraticResidue(BigInteger modulus)", "full_signature": "private static BigInteger getNonQuadraticResidue(BigInteger modulus)", "class_method_signature": "MathUtils.getNonQuadraticResidue(BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "expressAsProductOfPowerOfTwo", "parameters": "(BigInteger value)", "modifiers": "private static", "return": "Pair<BigInteger, Integer>", "signature": "Pair<BigInteger, Integer> expressAsProductOfPowerOfTwo(BigInteger value)", "full_signature": "private static Pair<BigInteger, Integer> expressAsProductOfPowerOfTwo(BigInteger value)", "class_method_signature": "MathUtils.expressAsProductOfPowerOfTwo(BigInteger value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/MathUtils.java"}, "focal_method": {"identifier": "sum", "parameters": "(List<BigInteger> summands, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger sum(List<BigInteger> summands, BigInteger modulus) {\n    return summands.stream()\n        .reduce(BigInteger::add)\n        .orElse(BigInteger.ZERO)\n        .mod(modulus);\n  }", "signature": "BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "full_signature": "public static BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "class_method_signature": "MathUtils.sum(List<BigInteger> summands, BigInteger modulus)", "testcase": false, "constructor": false, "invocations": ["mod", "orElse", "reduce", "stream"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}