{"test_class": {"identifier": "ChainStateImplTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IReceiverChain[] chainMocks;", "modifier": "private", "type": "IReceiverChain[]", "declarator": "chainMocks", "var_name": "chainMocks"}, {"original_string": "private IResolveDependencyStrategy[] modStrategyMocks;", "modifier": "private", "type": "IResolveDependencyStrategy[]", "declarator": "modStrategyMocks", "var_name": "modStrategyMocks"}, {"original_string": "private IObject[] modArgMocks;", "modifier": "private", "type": "IObject[]", "declarator": "modArgMocks", "var_name": "modArgMocks"}], "file": "CoreFeatures/MessageProcessing/ChainStorage/src/test/java/info/smart_tools/smartactors/message_processing/chain_storage/impl/ChainStateImplTest.java"}, "test_case": {"identifier": "Should_throwWhenTryingToRollbackNonExistModification", "parameters": "()", "modifiers": "@Test(expected = ChainModificationException.class) public", "return": "void", "body": "@Test(expected = ChainModificationException.class)\n    public void Should_throwWhenTryingToRollbackNonExistModification()\n            throws Exception {\n        new ChainStateImpl(chainMocks[0]).rollback(new Object());\n    }", "signature": "void Should_throwWhenTryingToRollbackNonExistModification()", "full_signature": "@Test(expected = ChainModificationException.class) public void Should_throwWhenTryingToRollbackNonExistModification()", "class_method_signature": "ChainStateImplTest.Should_throwWhenTryingToRollbackNonExistModification()", "testcase": true, "constructor": false, "invocations": ["rollback"]}, "focal_class": {"identifier": "ChainStateImpl", "superclass": "", "interfaces": "implements IChainState", "fields": [{"original_string": "private IReceiverChain current;", "modifier": "private", "type": "IReceiverChain", "declarator": "current", "var_name": "current"}, {"original_string": "private LinkedHashMap<Object, Modification> modifications = new LinkedHashMap<>();", "modifier": "private", "type": "LinkedHashMap<Object, Modification>", "declarator": "modifications = new LinkedHashMap<>()", "var_name": "modifications"}, {"original_string": "private final IFieldName modificationFN;", "modifier": "private final", "type": "IFieldName", "declarator": "modificationFN", "var_name": "modificationFN"}], "methods": [{"identifier": "ChainStateImpl", "parameters": "(final IReceiverChain initial)", "modifiers": "public", "return": "", "signature": " ChainStateImpl(final IReceiverChain initial)", "full_signature": "public  ChainStateImpl(final IReceiverChain initial)", "class_method_signature": "ChainStateImpl.ChainStateImpl(final IReceiverChain initial)", "testcase": false, "constructor": true}, {"identifier": "applyModification", "parameters": "(final IReceiverChain chain, final IObject modification)", "modifiers": "private", "return": "IReceiverChain", "signature": "IReceiverChain applyModification(final IReceiverChain chain, final IObject modification)", "full_signature": "private IReceiverChain applyModification(final IReceiverChain chain, final IObject modification)", "class_method_signature": "ChainStateImpl.applyModification(final IReceiverChain chain, final IObject modification)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final IObject modification)", "modifiers": "@Override public", "return": "Object", "signature": "Object update(final IObject modification)", "full_signature": "@Override public Object update(final IObject modification)", "class_method_signature": "ChainStateImpl.update(final IObject modification)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(final Object modId)", "modifiers": "@Override public", "return": "void", "signature": "void rollback(final Object modId)", "full_signature": "@Override public void rollback(final Object modId)", "class_method_signature": "ChainStateImpl.rollback(final Object modId)", "testcase": false, "constructor": false}, {"identifier": "getCurrent", "parameters": "()", "modifiers": "@Override public", "return": "IReceiverChain", "signature": "IReceiverChain getCurrent()", "full_signature": "@Override public IReceiverChain getCurrent()", "class_method_signature": "ChainStateImpl.getCurrent()", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ChainStorage/src/main/java/info/smart_tools/smartactors/message_processing/chain_storage/impl/ChainStateImpl.java"}, "focal_method": {"identifier": "rollback", "parameters": "(final Object modId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void rollback(final Object modId) throws ChainModificationException {\n        try {\n            Modification rbMod = modifications.get(modId);\n            Modification prevMod = null;\n            LinkedHashMap<Object, Modification> newModifications = new LinkedHashMap<>();\n\n            if (null == rbMod) {\n                throw new ChainModificationException(\"Invalid modification id.\");\n            }\n\n            Iterator<Map.Entry<Object, Modification>> modIter = modifications.entrySet().iterator();\n\n            while (modIter.hasNext()) {\n                Map.Entry<Object, Modification> modEntry = modIter.next();\n\n                if (modEntry.getValue() == rbMod) {\n                    break;\n                }\n\n                prevMod = modEntry.getValue();\n\n                newModifications.put(modEntry.getKey(), modEntry.getValue());\n            }\n\n            while (modIter.hasNext()) {\n                Map.Entry<Object, Modification> modEntry = modIter.next();\n\n                prevMod = new Modification(\n                        modEntry.getValue().getDescription(),\n                        applyModification(prevMod.getResult(), modEntry.getValue().getDescription())\n                );\n\n                newModifications.put(modEntry.getKey(), prevMod);\n            }\n\n            current = prevMod.getResult();\n            modifications = newModifications;\n        } catch (ResolutionException | ReadValueException | InvalidArgumentException e) {\n            throw new ChainModificationException(e);\n        }\n    }", "signature": "void rollback(final Object modId)", "full_signature": "@Override public void rollback(final Object modId)", "class_method_signature": "ChainStateImpl.rollback(final Object modId)", "testcase": false, "constructor": false, "invocations": ["get", "iterator", "entrySet", "hasNext", "next", "getValue", "getValue", "put", "getKey", "getValue", "hasNext", "next", "getDescription", "getValue", "applyModification", "getResult", "getDescription", "getValue", "put", "getKey", "getResult"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}