{"test_class": {"identifier": "MolecularFormulaManipulatorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private IsotopeFactory                  ifac;", "modifier": "private", "type": "IsotopeFactory", "declarator": "ifac", "var_name": "ifac"}], "file": "tool/formula/src/test/java/org/openscience/cdk/tools/manipulator/MolecularFormulaManipulatorTest.java"}, "test_case": {"identifier": "noNullPointerExceptionForMassOfRGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void noNullPointerExceptionForMassOfRGroups() throws Exception {\n        IMolecularFormula formula = new MolecularFormula();\n        formula.addIsotope(new Isotope(\"C\"));\n        formula.addIsotope(new Isotope(\"H\"), 3);\n        formula.addIsotope(new Isotope(\"R\"));\n        assertThat(MolecularFormulaManipulator.getTotalMassNumber(formula),\n                   closeTo(15.0, 0.01));\n    }", "signature": "void noNullPointerExceptionForMassOfRGroups()", "full_signature": "@Test public void noNullPointerExceptionForMassOfRGroups()", "class_method_signature": "MolecularFormulaManipulatorTest.noNullPointerExceptionForMassOfRGroups()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "addIsotope", "addIsotope", "assertThat", "getTotalMassNumber", "closeTo"]}, "focal_class": {"identifier": "MolecularFormulaManipulator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MolWeight                = AtomContainerManipulator.MolWeight;", "modifier": "public static final", "type": "int", "declarator": "MolWeight                = AtomContainerManipulator.MolWeight", "var_name": "MolWeight"}, {"original_string": "public static final int MolWeightIgnoreSpecified = AtomContainerManipulator.MolWeightIgnoreSpecified;", "modifier": "public static final", "type": "int", "declarator": "MolWeightIgnoreSpecified = AtomContainerManipulator.MolWeightIgnoreSpecified", "var_name": "MolWeightIgnoreSpecified"}, {"original_string": "public static final int MonoIsotopic             = AtomContainerManipulator.MonoIsotopic;", "modifier": "public static final", "type": "int", "declarator": "MonoIsotopic             = AtomContainerManipulator.MonoIsotopic", "var_name": "MonoIsotopic"}, {"original_string": "public static final int MostAbundant             = AtomContainerManipulator.MostAbundant;", "modifier": "public static final", "type": "int", "declarator": "MostAbundant             = AtomContainerManipulator.MostAbundant", "var_name": "MostAbundant"}, {"original_string": "public static final Comparator<IIsotope> NAT_ABUN_COMP = new Comparator<IIsotope>() {\n        @Override\n        public int compare(IIsotope o1, IIsotope o2) {\n            return -Double.compare(o1.getNaturalAbundance(),\n                                   o2.getNaturalAbundance());\n        }\n    };", "modifier": "public static final", "type": "Comparator<IIsotope>", "declarator": "NAT_ABUN_COMP = new Comparator<IIsotope>() {\n        @Override\n        public int compare(IIsotope o1, IIsotope o2) {\n            return -Double.compare(o1.getNaturalAbundance(),\n                                   o2.getNaturalAbundance());\n        }\n    }", "var_name": "NAT_ABUN_COMP"}, {"original_string": "private static final char HYPHEN = '-';", "modifier": "private static final", "type": "char", "declarator": "HYPHEN = '-'", "var_name": "HYPHEN"}, {"original_string": "private static final char MINUS  = '\u2013';", "modifier": "private static final", "type": "char", "declarator": "MINUS  = '\u2013';", "var_name": "MINUS"}, {"original_string": "private static final String HYPHEN_STR = \"-\";", "modifier": "private static final", "type": "String", "declarator": "HYPHEN_STR = \"-\"", "var_name": "HYPHEN_STR"}, {"original_string": "private static final String MINUS_STR  = \"\u2013\";", "modifier": "private static final", "type": "String", "declarator": "MINUS_STR  = \"\u2013\";", "var_name": "MINUS_STR"}], "methods": [{"identifier": "getAtomCount", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "int", "signature": "int getAtomCount(IMolecularFormula formula)", "full_signature": "public static int getAtomCount(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getAtomCount(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getElementCount", "parameters": "(IMolecularFormula formula, IElement element)", "modifiers": "public static", "return": "int", "signature": "int getElementCount(IMolecularFormula formula, IElement element)", "full_signature": "public static int getElementCount(IMolecularFormula formula, IElement element)", "class_method_signature": "MolecularFormulaManipulator.getElementCount(IMolecularFormula formula, IElement element)", "testcase": false, "constructor": false}, {"identifier": "getElementCount", "parameters": "(IMolecularFormula formula, IIsotope isotope)", "modifiers": "public static", "return": "int", "signature": "int getElementCount(IMolecularFormula formula, IIsotope isotope)", "full_signature": "public static int getElementCount(IMolecularFormula formula, IIsotope isotope)", "class_method_signature": "MolecularFormulaManipulator.getElementCount(IMolecularFormula formula, IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "getElementCount", "parameters": "(IMolecularFormula formula, String symbol)", "modifiers": "public static", "return": "int", "signature": "int getElementCount(IMolecularFormula formula, String symbol)", "full_signature": "public static int getElementCount(IMolecularFormula formula, String symbol)", "class_method_signature": "MolecularFormulaManipulator.getElementCount(IMolecularFormula formula, String symbol)", "testcase": false, "constructor": false}, {"identifier": "getIsotopes", "parameters": "(IMolecularFormula formula, IElement element)", "modifiers": "public static", "return": "List<IIsotope>", "signature": "List<IIsotope> getIsotopes(IMolecularFormula formula, IElement element)", "full_signature": "public static List<IIsotope> getIsotopes(IMolecularFormula formula, IElement element)", "class_method_signature": "MolecularFormulaManipulator.getIsotopes(IMolecularFormula formula, IElement element)", "testcase": false, "constructor": false}, {"identifier": "elements", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "List<IElement>", "signature": "List<IElement> elements(IMolecularFormula formula)", "full_signature": "public static List<IElement> elements(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.elements(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "containsElement", "parameters": "(IMolecularFormula formula, IElement element)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsElement(IMolecularFormula formula, IElement element)", "full_signature": "public static boolean containsElement(IMolecularFormula formula, IElement element)", "class_method_signature": "MolecularFormulaManipulator.containsElement(IMolecularFormula formula, IElement element)", "testcase": false, "constructor": false}, {"identifier": "removeElement", "parameters": "(IMolecularFormula formula, IElement element)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula removeElement(IMolecularFormula formula, IElement element)", "full_signature": "public static IMolecularFormula removeElement(IMolecularFormula formula, IElement element)", "class_method_signature": "MolecularFormulaManipulator.removeElement(IMolecularFormula formula, IElement element)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne)", "modifiers": "public static", "return": "String", "signature": "String getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne)", "full_signature": "public static String getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne)", "class_method_signature": "MolecularFormulaManipulator.getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne)", "testcase": false, "constructor": false}, {"identifier": "appendElement", "parameters": "(StringBuilder sb, Integer mass, int elem, int count)", "modifiers": "private static", "return": "void", "signature": "void appendElement(StringBuilder sb, Integer mass, int elem, int count)", "full_signature": "private static void appendElement(StringBuilder sb, Integer mass, int elem, int count)", "class_method_signature": "MolecularFormulaManipulator.appendElement(StringBuilder sb, Integer mass, int elem, int count)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne, boolean setMassNumber)", "modifiers": "public static", "return": "String", "signature": "String getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne, boolean setMassNumber)", "full_signature": "public static String getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne, boolean setMassNumber)", "class_method_signature": "MolecularFormulaManipulator.getString(IMolecularFormula formula, String[] orderElements,\n                                   boolean setOne, boolean setMassNumber)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "String", "signature": "String getString(IMolecularFormula formula)", "full_signature": "public static String getString(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getString(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(IMolecularFormula formula, boolean setOne)", "modifiers": "public static", "return": "String", "signature": "String getString(IMolecularFormula formula, boolean setOne)", "full_signature": "public static String getString(IMolecularFormula formula, boolean setOne)", "class_method_signature": "MolecularFormulaManipulator.getString(IMolecularFormula formula, boolean setOne)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(IMolecularFormula formula, boolean setOne, boolean setMassNumber)", "modifiers": "public static", "return": "String", "signature": "String getString(IMolecularFormula formula, boolean setOne, boolean setMassNumber)", "full_signature": "public static String getString(IMolecularFormula formula, boolean setOne, boolean setMassNumber)", "class_method_signature": "MolecularFormulaManipulator.getString(IMolecularFormula formula, boolean setOne, boolean setMassNumber)", "testcase": false, "constructor": false}, {"identifier": "putInOrder", "parameters": "(String[] orderElements, IMolecularFormula formula)", "modifiers": "public static", "return": "List<IIsotope>", "signature": "List<IIsotope> putInOrder(String[] orderElements, IMolecularFormula formula)", "full_signature": "public static List<IIsotope> putInOrder(String[] orderElements, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.putInOrder(String[] orderElements, IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getHillString", "parameters": "(IMolecularFormula formula)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String getHillString(IMolecularFormula formula)", "full_signature": "@Deprecated public static String getHillString(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getHillString(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getHTML", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "String", "signature": "String getHTML(IMolecularFormula formula)", "full_signature": "public static String getHTML(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getHTML(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getHTML", "parameters": "(IMolecularFormula formula, boolean chargeB, boolean isotopeB)", "modifiers": "public static", "return": "String", "signature": "String getHTML(IMolecularFormula formula, boolean chargeB, boolean isotopeB)", "full_signature": "public static String getHTML(IMolecularFormula formula, boolean chargeB, boolean isotopeB)", "class_method_signature": "MolecularFormulaManipulator.getHTML(IMolecularFormula formula, boolean chargeB, boolean isotopeB)", "testcase": false, "constructor": false}, {"identifier": "getHTML", "parameters": "(IMolecularFormula formula, String[] orderElements, boolean showCharge, boolean showIsotopes)", "modifiers": "public static", "return": "String", "signature": "String getHTML(IMolecularFormula formula, String[] orderElements, boolean showCharge, boolean showIsotopes)", "full_signature": "public static String getHTML(IMolecularFormula formula, String[] orderElements, boolean showCharge, boolean showIsotopes)", "class_method_signature": "MolecularFormulaManipulator.getHTML(IMolecularFormula formula, String[] orderElements, boolean showCharge, boolean showIsotopes)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(String stringMF, IChemObjectBuilder builder)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(String stringMF, IChemObjectBuilder builder)", "full_signature": "public static IMolecularFormula getMolecularFormula(String stringMF, IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(String stringMF, IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getMajorIsotopeMolecularFormula", "parameters": "(String stringMF, IChemObjectBuilder builder)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMajorIsotopeMolecularFormula(String stringMF, IChemObjectBuilder builder)", "full_signature": "public static IMolecularFormula getMajorIsotopeMolecularFormula(String stringMF, IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaManipulator.getMajorIsotopeMolecularFormula(String stringMF, IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(String stringMF, boolean assumeMajorIsotope,\n            IChemObjectBuilder builder)", "modifiers": "private static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(String stringMF, boolean assumeMajorIsotope,\n            IChemObjectBuilder builder)", "full_signature": "private static IMolecularFormula getMolecularFormula(String stringMF, boolean assumeMajorIsotope,\n            IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(String stringMF, boolean assumeMajorIsotope,\n            IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(String stringMF, IMolecularFormula formula)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(String stringMF, IMolecularFormula formula)", "full_signature": "public static IMolecularFormula getMolecularFormula(String stringMF, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(String stringMF, IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "isUpper", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isUpper(char c)", "full_signature": "private static boolean isUpper(char c)", "class_method_signature": "MolecularFormulaManipulator.isUpper(char c)", "testcase": false, "constructor": false}, {"identifier": "isLower", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLower(char c)", "full_signature": "private static boolean isLower(char c)", "class_method_signature": "MolecularFormulaManipulator.isLower(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "private static boolean isDigit(char c)", "class_method_signature": "MolecularFormulaManipulator.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isSign", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSign(char c)", "full_signature": "private static boolean isSign(char c)", "class_method_signature": "MolecularFormulaManipulator.isSign(char c)", "testcase": false, "constructor": false}, {"identifier": "parseIsotope", "parameters": "(CharIter iter,\n                                        IMolecularFormula mf,\n                                        boolean setMajor)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseIsotope(CharIter iter,\n                                        IMolecularFormula mf,\n                                        boolean setMajor)", "full_signature": "private static boolean parseIsotope(CharIter iter,\n                                        IMolecularFormula mf,\n                                        boolean setMajor)", "class_method_signature": "MolecularFormulaManipulator.parseIsotope(CharIter iter,\n                                        IMolecularFormula mf,\n                                        boolean setMajor)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(String stringMF, IMolecularFormula formula,\n            boolean assumeMajorIsotope)", "modifiers": "private static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(String stringMF, IMolecularFormula formula,\n            boolean assumeMajorIsotope)", "full_signature": "private static IMolecularFormula getMolecularFormula(String stringMF, IMolecularFormula formula,\n            boolean assumeMajorIsotope)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(String stringMF, IMolecularFormula formula,\n            boolean assumeMajorIsotope)", "testcase": false, "constructor": false}, {"identifier": "parseCharge", "parameters": "(CharIter iter)", "modifiers": "private static", "return": "int", "signature": "int parseCharge(CharIter iter)", "full_signature": "private static int parseCharge(CharIter iter)", "class_method_signature": "MolecularFormulaManipulator.parseCharge(CharIter iter)", "testcase": false, "constructor": false}, {"identifier": "findChargePosition", "parameters": "(String formula)", "modifiers": "private static", "return": "int", "signature": "int findChargePosition(String formula)", "full_signature": "private static int findChargePosition(String formula)", "class_method_signature": "MolecularFormulaManipulator.findChargePosition(String formula)", "testcase": false, "constructor": false}, {"identifier": "getTotalExactMass", "parameters": "(IMolecularFormula formula)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double getTotalExactMass(IMolecularFormula formula)", "full_signature": "@Deprecated public static double getTotalExactMass(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getTotalExactMass(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "correctMass", "parameters": "(double mass, Integer charge)", "modifiers": "private static", "return": "double", "signature": "double correctMass(double mass, Integer charge)", "full_signature": "private static double correctMass(double mass, Integer charge)", "class_method_signature": "MolecularFormulaManipulator.correctMass(double mass, Integer charge)", "testcase": false, "constructor": false}, {"identifier": "getTotalMassNumber", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "double", "signature": "double getTotalMassNumber(IMolecularFormula formula)", "full_signature": "public static double getTotalMassNumber(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getTotalMassNumber(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getExactMass", "parameters": "(IsotopeFactory isofact, IIsotope atom)", "modifiers": "private static", "return": "double", "signature": "double getExactMass(IsotopeFactory isofact, IIsotope atom)", "full_signature": "private static double getExactMass(IsotopeFactory isofact, IIsotope atom)", "class_method_signature": "MolecularFormulaManipulator.getExactMass(IsotopeFactory isofact, IIsotope atom)", "testcase": false, "constructor": false}, {"identifier": "getMassOrAvg", "parameters": "(IsotopeFactory isofact, IIsotope atom)", "modifiers": "private static", "return": "double", "signature": "double getMassOrAvg(IsotopeFactory isofact, IIsotope atom)", "full_signature": "private static double getMassOrAvg(IsotopeFactory isofact, IIsotope atom)", "class_method_signature": "MolecularFormulaManipulator.getMassOrAvg(IsotopeFactory isofact, IIsotope atom)", "testcase": false, "constructor": false}, {"identifier": "getMass", "parameters": "(IMolecularFormula mf, int flav)", "modifiers": "public static", "return": "double", "signature": "double getMass(IMolecularFormula mf, int flav)", "full_signature": "public static double getMass(IMolecularFormula mf, int flav)", "class_method_signature": "MolecularFormulaManipulator.getMass(IMolecularFormula mf, int flav)", "testcase": false, "constructor": false}, {"identifier": "getMass", "parameters": "(IMolecularFormula mf)", "modifiers": "public static", "return": "double", "signature": "double getMass(IMolecularFormula mf)", "full_signature": "public static double getMass(IMolecularFormula mf)", "class_method_signature": "MolecularFormulaManipulator.getMass(IMolecularFormula mf)", "testcase": false, "constructor": false}, {"identifier": "getNaturalExactMass", "parameters": "(IMolecularFormula formula)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double getNaturalExactMass(IMolecularFormula formula)", "full_signature": "@Deprecated public static double getNaturalExactMass(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getNaturalExactMass(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getMajorIsotopeMass", "parameters": "(IMolecularFormula formula)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double getMajorIsotopeMass(IMolecularFormula formula)", "full_signature": "@Deprecated public static double getMajorIsotopeMass(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getMajorIsotopeMass(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getTotalNaturalAbundance", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "double", "signature": "double getTotalNaturalAbundance(IMolecularFormula formula)", "full_signature": "public static double getTotalNaturalAbundance(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getTotalNaturalAbundance(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getDBE", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "double", "signature": "double getDBE(IMolecularFormula formula)", "full_signature": "public static double getDBE(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getDBE(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(IAtomContainer atomContainer)", "full_signature": "public static IMolecularFormula getMolecularFormula(IAtomContainer atomContainer)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getMolecularFormula", "parameters": "(IAtomContainer atomContainer, IMolecularFormula formula)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMolecularFormula(IAtomContainer atomContainer, IMolecularFormula formula)", "full_signature": "public static IMolecularFormula getMolecularFormula(IAtomContainer atomContainer, IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getMolecularFormula(IAtomContainer atomContainer, IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getAtomContainer", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer getAtomContainer(IMolecularFormula formula)", "full_signature": "public static IAtomContainer getAtomContainer(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getAtomContainer(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getAtomContainer", "parameters": "(IMolecularFormula formula, IAtomContainer atomContainer)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer getAtomContainer(IMolecularFormula formula, IAtomContainer atomContainer)", "full_signature": "public static IAtomContainer getAtomContainer(IMolecularFormula formula, IAtomContainer atomContainer)", "class_method_signature": "MolecularFormulaManipulator.getAtomContainer(IMolecularFormula formula, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getAtomContainer", "parameters": "(String formulaString, IChemObjectBuilder builder)", "modifiers": "public static", "return": "IAtomContainer", "signature": "IAtomContainer getAtomContainer(String formulaString, IChemObjectBuilder builder)", "full_signature": "public static IAtomContainer getAtomContainer(String formulaString, IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaManipulator.getAtomContainer(String formulaString, IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "generateOrderEle", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] generateOrderEle()", "full_signature": "public static String[] generateOrderEle()", "class_method_signature": "MolecularFormulaManipulator.generateOrderEle()", "testcase": false, "constructor": false}, {"identifier": "generateOrderEle_Hill_NoCarbons", "parameters": "()", "modifiers": "private static", "return": "String[]", "signature": "String[] generateOrderEle_Hill_NoCarbons()", "full_signature": "private static String[] generateOrderEle_Hill_NoCarbons()", "class_method_signature": "MolecularFormulaManipulator.generateOrderEle_Hill_NoCarbons()", "testcase": false, "constructor": false}, {"identifier": "generateOrderEle_Hill_WithCarbons", "parameters": "()", "modifiers": "private static", "return": "String[]", "signature": "String[] generateOrderEle_Hill_WithCarbons()", "full_signature": "private static String[] generateOrderEle_Hill_WithCarbons()", "class_method_signature": "MolecularFormulaManipulator.generateOrderEle_Hill_WithCarbons()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(IMolecularFormula formula1, IMolecularFormula formula2)", "modifiers": "public static", "return": "boolean", "signature": "boolean compare(IMolecularFormula formula1, IMolecularFormula formula2)", "full_signature": "public static boolean compare(IMolecularFormula formula1, IMolecularFormula formula2)", "class_method_signature": "MolecularFormulaManipulator.compare(IMolecularFormula formula1, IMolecularFormula formula2)", "testcase": false, "constructor": false}, {"identifier": "getHeavyElements", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "List<IElement>", "signature": "List<IElement> getHeavyElements(IMolecularFormula formula)", "full_signature": "public static List<IElement> getHeavyElements(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getHeavyElements(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "simplifyMolecularFormula", "parameters": "(String formula)", "modifiers": "public static", "return": "String", "signature": "String simplifyMolecularFormula(String formula)", "full_signature": "public static String simplifyMolecularFormula(String formula)", "class_method_signature": "MolecularFormulaManipulator.simplifyMolecularFormula(String formula)", "testcase": false, "constructor": false}, {"identifier": "breakExtractor", "parameters": "(String formula)", "modifiers": "private static", "return": "String", "signature": "String breakExtractor(String formula)", "full_signature": "private static String breakExtractor(String formula)", "class_method_signature": "MolecularFormulaManipulator.breakExtractor(String formula)", "testcase": false, "constructor": false}, {"identifier": "multipleExtractor", "parameters": "(String formula)", "modifiers": "private static", "return": "String", "signature": "String multipleExtractor(String formula)", "full_signature": "private static String multipleExtractor(String formula)", "class_method_signature": "MolecularFormulaManipulator.multipleExtractor(String formula)", "testcase": false, "constructor": false}, {"identifier": "muliplier", "parameters": "(String formula, int factor)", "modifiers": "private static", "return": "String", "signature": "String muliplier(String formula, int factor)", "full_signature": "private static String muliplier(String formula, int factor)", "class_method_signature": "MolecularFormulaManipulator.muliplier(String formula, int factor)", "testcase": false, "constructor": false}, {"identifier": "adjustProtonation", "parameters": "(IMolecularFormula mf, int hcnt)", "modifiers": "public static", "return": "boolean", "signature": "boolean adjustProtonation(IMolecularFormula mf, int hcnt)", "full_signature": "public static boolean adjustProtonation(IMolecularFormula mf, int hcnt)", "class_method_signature": "MolecularFormulaManipulator.adjustProtonation(IMolecularFormula mf, int hcnt)", "testcase": false, "constructor": false}, {"identifier": "addIsotopeDist", "parameters": "(IMolecularFormula mf,\n                                          IIsotope[] isotopes,\n                                          int idx, int count)", "modifiers": "private static", "return": "boolean", "signature": "boolean addIsotopeDist(IMolecularFormula mf,\n                                          IIsotope[] isotopes,\n                                          int idx, int count)", "full_signature": "private static boolean addIsotopeDist(IMolecularFormula mf,\n                                          IIsotope[] isotopes,\n                                          int idx, int count)", "class_method_signature": "MolecularFormulaManipulator.addIsotopeDist(IMolecularFormula mf,\n                                          IIsotope[] isotopes,\n                                          int idx, int count)", "testcase": false, "constructor": false}, {"identifier": "getMostAbundant", "parameters": "(IMolecularFormula mf)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMostAbundant(IMolecularFormula mf)", "full_signature": "public static IMolecularFormula getMostAbundant(IMolecularFormula mf)", "class_method_signature": "MolecularFormulaManipulator.getMostAbundant(IMolecularFormula mf)", "testcase": false, "constructor": false}, {"identifier": "getMostAbundant", "parameters": "(IAtomContainer mol)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMostAbundant(IAtomContainer mol)", "full_signature": "public static IMolecularFormula getMostAbundant(IAtomContainer mol)", "class_method_signature": "MolecularFormulaManipulator.getMostAbundant(IAtomContainer mol)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/tools/manipulator/MolecularFormulaManipulator.java"}, "focal_method": {"identifier": "getTotalMassNumber", "parameters": "(IMolecularFormula formula)", "modifiers": "public static", "return": "double", "body": "public static double getTotalMassNumber(IMolecularFormula formula) {\n        double mass = 0.0;\n        for (IIsotope isotope : formula.isotopes()) {\n            try {\n                IIsotope isotope2 = Isotopes.getInstance().getMajorIsotope(isotope.getSymbol());\n                if (isotope2 != null) {\n                    mass += isotope2.getMassNumber() * formula.getIsotopeCount(isotope);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return mass;\n    }", "signature": "double getTotalMassNumber(IMolecularFormula formula)", "full_signature": "public static double getTotalMassNumber(IMolecularFormula formula)", "class_method_signature": "MolecularFormulaManipulator.getTotalMassNumber(IMolecularFormula formula)", "testcase": false, "constructor": false, "invocations": ["isotopes", "getMajorIsotope", "getInstance", "getSymbol", "getMassNumber", "getIsotopeCount", "printStackTrace"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}