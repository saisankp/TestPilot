{"test_class": {"identifier": "AtomicPositiveIntegerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AtomicPositiveInteger i1 = new AtomicPositiveInteger();", "modifier": "private", "type": "AtomicPositiveInteger", "declarator": "i1 = new AtomicPositiveInteger()", "var_name": "i1"}, {"original_string": "private AtomicPositiveInteger i2 = new AtomicPositiveInteger(127);", "modifier": "private", "type": "AtomicPositiveInteger", "declarator": "i2 = new AtomicPositiveInteger(127)", "var_name": "i2"}, {"original_string": "private AtomicPositiveInteger i3 = new AtomicPositiveInteger(Integer.MAX_VALUE);", "modifier": "private", "type": "AtomicPositiveInteger", "declarator": "i3 = new AtomicPositiveInteger(Integer.MAX_VALUE)", "var_name": "i3"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/AtomicPositiveIntegerTest.java"}, "test_case": {"identifier": "testDecrementAndGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecrementAndGet() throws Exception {\n        int get = i1.decrementAndGet();\n        assertEquals(Integer.MAX_VALUE, get);\n        assertEquals(Integer.MAX_VALUE, i1.get());\n\n        get = i2.decrementAndGet();\n        assertEquals(126, get);\n        assertEquals(126, i2.get());\n\n        get = i3.decrementAndGet();\n        assertEquals(Integer.MAX_VALUE - 1, get);\n        assertEquals(Integer.MAX_VALUE - 1, i3.get());\n    }", "signature": "void testDecrementAndGet()", "full_signature": "@Test public void testDecrementAndGet()", "class_method_signature": "AtomicPositiveIntegerTest.testDecrementAndGet()", "testcase": true, "constructor": false, "invocations": ["decrementAndGet", "assertEquals", "assertEquals", "get", "decrementAndGet", "assertEquals", "assertEquals", "get", "decrementAndGet", "assertEquals", "assertEquals", "get"]}, "focal_class": {"identifier": "AtomicPositiveInteger", "superclass": "extends Number", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3038533876489105940L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3038533876489105940L", "var_name": "serialVersionUID"}, {"original_string": "private static final AtomicIntegerFieldUpdater<AtomicPositiveInteger> INDEX_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(AtomicPositiveInteger.class, \"index\");", "modifier": "private static final", "type": "AtomicIntegerFieldUpdater<AtomicPositiveInteger>", "declarator": "INDEX_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(AtomicPositiveInteger.class, \"index\")", "var_name": "INDEX_UPDATER"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private volatile int index = 0;", "modifier": "@SuppressWarnings(\"unused\")\n    private volatile", "type": "int", "declarator": "index = 0", "var_name": "index"}], "methods": [{"identifier": "AtomicPositiveInteger", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomicPositiveInteger()", "full_signature": "public  AtomicPositiveInteger()", "class_method_signature": "AtomicPositiveInteger.AtomicPositiveInteger()", "testcase": false, "constructor": true}, {"identifier": "AtomicPositiveInteger", "parameters": "(int initialValue)", "modifiers": "public", "return": "", "signature": " AtomicPositiveInteger(int initialValue)", "full_signature": "public  AtomicPositiveInteger(int initialValue)", "class_method_signature": "AtomicPositiveInteger.AtomicPositiveInteger(int initialValue)", "testcase": false, "constructor": true}, {"identifier": "getAndIncrement", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getAndIncrement()", "full_signature": "public final int getAndIncrement()", "class_method_signature": "AtomicPositiveInteger.getAndIncrement()", "testcase": false, "constructor": false}, {"identifier": "getAndDecrement", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int getAndDecrement()", "full_signature": "public final int getAndDecrement()", "class_method_signature": "AtomicPositiveInteger.getAndDecrement()", "testcase": false, "constructor": false}, {"identifier": "incrementAndGet", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int incrementAndGet()", "full_signature": "public final int incrementAndGet()", "class_method_signature": "AtomicPositiveInteger.incrementAndGet()", "testcase": false, "constructor": false}, {"identifier": "decrementAndGet", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int decrementAndGet()", "full_signature": "public final int decrementAndGet()", "class_method_signature": "AtomicPositiveInteger.decrementAndGet()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public final", "return": "int", "signature": "int get()", "full_signature": "public final int get()", "class_method_signature": "AtomicPositiveInteger.get()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int newValue)", "modifiers": "public final", "return": "void", "signature": "void set(int newValue)", "full_signature": "public final void set(int newValue)", "class_method_signature": "AtomicPositiveInteger.set(int newValue)", "testcase": false, "constructor": false}, {"identifier": "getAndSet", "parameters": "(int newValue)", "modifiers": "public final", "return": "int", "signature": "int getAndSet(int newValue)", "full_signature": "public final int getAndSet(int newValue)", "class_method_signature": "AtomicPositiveInteger.getAndSet(int newValue)", "testcase": false, "constructor": false}, {"identifier": "getAndAdd", "parameters": "(int delta)", "modifiers": "public final", "return": "int", "signature": "int getAndAdd(int delta)", "full_signature": "public final int getAndAdd(int delta)", "class_method_signature": "AtomicPositiveInteger.getAndAdd(int delta)", "testcase": false, "constructor": false}, {"identifier": "addAndGet", "parameters": "(int delta)", "modifiers": "public final", "return": "int", "signature": "int addAndGet(int delta)", "full_signature": "public final int addAndGet(int delta)", "class_method_signature": "AtomicPositiveInteger.addAndGet(int delta)", "testcase": false, "constructor": false}, {"identifier": "compareAndSet", "parameters": "(int expect, int update)", "modifiers": "public final", "return": "boolean", "signature": "boolean compareAndSet(int expect, int update)", "full_signature": "public final boolean compareAndSet(int expect, int update)", "class_method_signature": "AtomicPositiveInteger.compareAndSet(int expect, int update)", "testcase": false, "constructor": false}, {"identifier": "weakCompareAndSet", "parameters": "(int expect, int update)", "modifiers": "public final", "return": "boolean", "signature": "boolean weakCompareAndSet(int expect, int update)", "full_signature": "public final boolean weakCompareAndSet(int expect, int update)", "class_method_signature": "AtomicPositiveInteger.weakCompareAndSet(int expect, int update)", "testcase": false, "constructor": false}, {"identifier": "byteValue", "parameters": "()", "modifiers": "@Override public", "return": "byte", "signature": "byte byteValue()", "full_signature": "@Override public byte byteValue()", "class_method_signature": "AtomicPositiveInteger.byteValue()", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short shortValue()", "full_signature": "@Override public short shortValue()", "class_method_signature": "AtomicPositiveInteger.shortValue()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "AtomicPositiveInteger.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "AtomicPositiveInteger.longValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "AtomicPositiveInteger.floatValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "AtomicPositiveInteger.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AtomicPositiveInteger.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AtomicPositiveInteger.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AtomicPositiveInteger.equals(Object obj)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java"}, "focal_method": {"identifier": "decrementAndGet", "parameters": "()", "modifiers": "public final", "return": "int", "body": "public final int decrementAndGet() {\n        return INDEX_UPDATER.decrementAndGet(this) & Integer.MAX_VALUE;\n    }", "signature": "int decrementAndGet()", "full_signature": "public final int decrementAndGet()", "class_method_signature": "AtomicPositiveInteger.decrementAndGet()", "testcase": false, "constructor": false, "invocations": ["decrementAndGet"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}