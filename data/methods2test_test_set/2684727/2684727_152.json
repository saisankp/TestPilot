{"test_class": {"identifier": "IntentImportInformationInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    IntentImportInformationInteractor interactor;", "modifier": "@InjectMocks", "type": "IntentImportInformationInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    IntentImportProcessor intentImportProcessor;", "modifier": "@Mock", "type": "IntentImportProcessor", "declarator": "intentImportProcessor", "var_name": "intentImportProcessor"}, {"original_string": "@Mock\n    PermissionStatusChecker permissionStatusChecker;", "modifier": "@Mock", "type": "PermissionStatusChecker", "declarator": "permissionStatusChecker", "var_name": "permissionStatusChecker"}, {"original_string": "@Mock\n    ActivityPermissionsRequester<SmartReceiptsActivity> permissionRequester;", "modifier": "@Mock", "type": "ActivityPermissionsRequester<SmartReceiptsActivity>", "declarator": "permissionRequester", "var_name": "permissionRequester"}, {"original_string": "Intent intent = new Intent(Intent.ACTION_SEND);", "modifier": "", "type": "Intent", "declarator": "intent = new Intent(Intent.ACTION_SEND)", "var_name": "intent"}], "file": "app/src/test/java/co/smartreceipts/android/imports/intents/widget/info/IntentImportInformationInteractorTest.java"}, "test_case": {"identifier": "processEmptyMaybe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processEmptyMaybe() {\n        when(intentImportProcessor.process(intent)).thenReturn(Maybe.empty());\n        interactor.process(intent).test()\n                .assertValue(UiIndicator.idle())\n                .assertComplete()\n                .assertNoErrors();\n\n        verifyZeroInteractions(permissionRequester);\n    }", "signature": "void processEmptyMaybe()", "full_signature": "@Test public void processEmptyMaybe()", "class_method_signature": "IntentImportInformationInteractorTest.processEmptyMaybe()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "process", "empty", "assertNoErrors", "assertComplete", "assertValue", "test", "process", "idle", "verifyZeroInteractions"]}, "focal_class": {"identifier": "IntentImportInformationInteractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INTENT_INFORMATION_SHOW = \"co.smartreceipts.android.INTENT_CONSUMED\";", "modifier": "private static final", "type": "String", "declarator": "INTENT_INFORMATION_SHOW = \"co.smartreceipts.android.INTENT_CONSUMED\"", "var_name": "INTENT_INFORMATION_SHOW"}, {"original_string": "public static final String READ_PERMISSION = Manifest.permission.READ_EXTERNAL_STORAGE;", "modifier": "public static final", "type": "String", "declarator": "READ_PERMISSION = Manifest.permission.READ_EXTERNAL_STORAGE", "var_name": "READ_PERMISSION"}, {"original_string": "private final IntentImportProcessor intentImportProcessor;", "modifier": "private final", "type": "IntentImportProcessor", "declarator": "intentImportProcessor", "var_name": "intentImportProcessor"}, {"original_string": "private final PermissionStatusChecker permissionStatusChecker;", "modifier": "private final", "type": "PermissionStatusChecker", "declarator": "permissionStatusChecker", "var_name": "permissionStatusChecker"}, {"original_string": "private final PermissionRequester permissionRequester;", "modifier": "private final", "type": "PermissionRequester", "declarator": "permissionRequester", "var_name": "permissionRequester"}], "methods": [{"identifier": "IntentImportInformationInteractor", "parameters": "(@NonNull IntentImportProcessor intentImportProcessor,\n                                             @NonNull PermissionStatusChecker permissionStatusChecker,\n                                             @NonNull ActivityPermissionsRequester<SmartReceiptsActivity> permissionRequester)", "modifiers": "@Inject public", "return": "", "signature": " IntentImportInformationInteractor(@NonNull IntentImportProcessor intentImportProcessor,\n                                             @NonNull PermissionStatusChecker permissionStatusChecker,\n                                             @NonNull ActivityPermissionsRequester<SmartReceiptsActivity> permissionRequester)", "full_signature": "@Inject public  IntentImportInformationInteractor(@NonNull IntentImportProcessor intentImportProcessor,\n                                             @NonNull PermissionStatusChecker permissionStatusChecker,\n                                             @NonNull ActivityPermissionsRequester<SmartReceiptsActivity> permissionRequester)", "class_method_signature": "IntentImportInformationInteractor.IntentImportInformationInteractor(@NonNull IntentImportProcessor intentImportProcessor,\n                                             @NonNull PermissionStatusChecker permissionStatusChecker,\n                                             @NonNull ActivityPermissionsRequester<SmartReceiptsActivity> permissionRequester)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(@NonNull final Intent intent)", "modifiers": "@NonNull public", "return": "Observable<UiIndicator<IntentImportResult>>", "signature": "Observable<UiIndicator<IntentImportResult>> process(@NonNull final Intent intent)", "full_signature": "@NonNull public Observable<UiIndicator<IntentImportResult>> process(@NonNull final Intent intent)", "class_method_signature": "IntentImportInformationInteractor.process(@NonNull final Intent intent)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/imports/intents/widget/info/IntentImportInformationInteractor.java"}, "focal_method": {"identifier": "process", "parameters": "(@NonNull final Intent intent)", "modifiers": "@NonNull public", "return": "Observable<UiIndicator<IntentImportResult>>", "body": "@NonNull\n    public Observable<UiIndicator<IntentImportResult>> process(@NonNull final Intent intent) {\n        if (intent.hasExtra(INTENT_INFORMATION_SHOW)) {\n            return Observable.just(UiIndicator.idle());\n        } else {\n            return intentImportProcessor.process(intent)\n                    .flatMap(intentImportResult -> {\n                        if (intentImportResult.getUri().toString().startsWith(ContentResolver.SCHEME_CONTENT)) {\n                            return Maybe.just(intentImportResult);\n                        } else {\n                            final IntentImportResult intentImportResultReference = intentImportResult;\n                            return permissionStatusChecker.isPermissionGranted(READ_PERMISSION)\n                                    .subscribeOn(AndroidSchedulers.mainThread())\n                                    .flatMapMaybe(isGranted -> {\n                                        if (isGranted) {\n                                            return Maybe.just(intentImportResult);\n                                        } else {\n                                            return permissionRequester.request(READ_PERMISSION)\n                                                    .flatMapMaybe(permissionAuthorizationResponse -> {\n                                                        if (permissionAuthorizationResponse.wasGranted()) {\n                                                            return Maybe.just(intentImportResultReference);\n                                                        } else {\n                                                            permissionRequester.markRequestConsumed(READ_PERMISSION);\n                                                            return Maybe.error(new PermissionsNotGrantedException(\"User failed to grant READ permission\", READ_PERMISSION));\n                                                        }\n                                                    });\n                                        }\n                                    });\n                        }\n                    })\n                    .doOnSuccess(ignored -> intent.putExtra(INTENT_INFORMATION_SHOW, true))\n                    .toObservable()\n                    .map(UiIndicator::success)\n                    .startWith(UiIndicator.idle());\n        }\n    }", "signature": "Observable<UiIndicator<IntentImportResult>> process(@NonNull final Intent intent)", "full_signature": "@NonNull public Observable<UiIndicator<IntentImportResult>> process(@NonNull final Intent intent)", "class_method_signature": "IntentImportInformationInteractor.process(@NonNull final Intent intent)", "testcase": false, "constructor": false, "invocations": ["hasExtra", "just", "idle", "startWith", "map", "toObservable", "doOnSuccess", "flatMap", "process", "startsWith", "toString", "getUri", "just", "flatMapMaybe", "subscribeOn", "isPermissionGranted", "mainThread", "just", "flatMapMaybe", "request", "wasGranted", "just", "markRequestConsumed", "error", "putExtra", "idle"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}