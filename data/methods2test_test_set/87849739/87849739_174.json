{"test_class": {"identifier": "PolicyIdReferencePlaceholderResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ActorSystem actorSystem = ActorSystem.create(\"test\", ConfigFactory.load(\"test\"));", "modifier": "private static final", "type": "ActorSystem", "declarator": "actorSystem = ActorSystem.create(\"test\", ConfigFactory.load(\"test\"))", "var_name": "actorSystem"}, {"original_string": "private TestProbe conciergeForwarderActorProbe;", "modifier": "private", "type": "TestProbe", "declarator": "conciergeForwarderActorProbe", "var_name": "conciergeForwarderActorProbe"}, {"original_string": "private PolicyIdReferencePlaceholderResolver sut;", "modifier": "private", "type": "PolicyIdReferencePlaceholderResolver", "declarator": "sut", "var_name": "sut"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(\"namespace:myThing\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"namespace:myThing\")", "var_name": "THING_ID"}], "file": "services/concierge/enforcement/src/test/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/references/PolicyIdReferencePlaceholderResolverTest.java"}, "test_case": {"identifier": "resolvePolicyIdFromThingThrowsExceptionIfResponseIsNotExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolvePolicyIdFromThingThrowsExceptionIfResponseIsNotExpected() {\n\n        final ReferencePlaceholder referencePlaceholder =\n                ReferencePlaceholder.fromCharSequence(\"{{ ref:things/\" + THING_ID + \"/policyId }}\")\n                        .orElseThrow(IllegalStateException::new);\n\n        final CompletionStage<String> policyIdCS = sut.resolve(referencePlaceholder, DittoHeaders.empty());\n\n        final RetrieveThing retrieveThing = conciergeForwarderActorProbe.expectMsgClass(RetrieveThing.class);\n        assertThat((CharSequence) retrieveThing.getThingEntityId()).isEqualTo(THING_ID);\n        assertThat(retrieveThing.getSelectedFields()).contains(JsonFieldSelector.newInstance(\"policyId\"));\n\n        conciergeForwarderActorProbe.reply(\"someThingUnexpected\");\n\n        Awaitility.await()\n                .atMost(org.awaitility.Duration.ONE_SECOND)\n                .until(() -> policyIdCS.toCompletableFuture().isDone());\n        assertThat(policyIdCS.toCompletableFuture())\n                .hasFailedWithThrowableThat()\n                .isInstanceOf(GatewayInternalErrorException.class);\n    }", "signature": "void resolvePolicyIdFromThingThrowsExceptionIfResponseIsNotExpected()", "full_signature": "@Test public void resolvePolicyIdFromThingThrowsExceptionIfResponseIsNotExpected()", "class_method_signature": "PolicyIdReferencePlaceholderResolverTest.resolvePolicyIdFromThingThrowsExceptionIfResponseIsNotExpected()", "testcase": true, "constructor": false, "invocations": ["orElseThrow", "fromCharSequence", "resolve", "empty", "expectMsgClass", "isEqualTo", "assertThat", "getThingEntityId", "contains", "assertThat", "getSelectedFields", "newInstance", "reply", "until", "atMost", "await", "isDone", "toCompletableFuture", "isInstanceOf", "hasFailedWithThrowableThat", "assertThat", "toCompletableFuture"]}, "focal_class": {"identifier": "PolicyIdReferencePlaceholderResolver", "superclass": "", "interfaces": "implements ReferencePlaceholderResolver<String>", "fields": [{"original_string": "private static final DittoLogger LOGGER = DittoLoggerFactory.getLogger(PolicyIdReferencePlaceholderResolver.class);", "modifier": "private static final", "type": "DittoLogger", "declarator": "LOGGER = DittoLoggerFactory.getLogger(PolicyIdReferencePlaceholderResolver.class)", "var_name": "LOGGER"}, {"original_string": "private final Duration retrieveEntityTimeoutDuration;", "modifier": "private final", "type": "Duration", "declarator": "retrieveEntityTimeoutDuration", "var_name": "retrieveEntityTimeoutDuration"}, {"original_string": "private final ActorRef conciergeForwarderActor;", "modifier": "private final", "type": "ActorRef", "declarator": "conciergeForwarderActor", "var_name": "conciergeForwarderActor"}, {"original_string": "private final Map<ReferencePlaceholder.ReferencedEntityType, ResolveEntityReferenceStrategy>\n            supportedEntityTypesToActionMap = new EnumMap<>(ReferencePlaceholder.ReferencedEntityType.class);", "modifier": "private final", "type": "Map<ReferencePlaceholder.ReferencedEntityType, ResolveEntityReferenceStrategy>", "declarator": "supportedEntityTypesToActionMap = new EnumMap<>(ReferencePlaceholder.ReferencedEntityType.class)", "var_name": "supportedEntityTypesToActionMap"}, {"original_string": "private final Set<CharSequence> supportedEntityTypeNames;", "modifier": "private final", "type": "Set<CharSequence>", "declarator": "supportedEntityTypeNames", "var_name": "supportedEntityTypeNames"}], "methods": [{"identifier": "PolicyIdReferencePlaceholderResolver", "parameters": "(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "modifiers": "private", "return": "", "signature": " PolicyIdReferencePlaceholderResolver(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "full_signature": "private  PolicyIdReferencePlaceholderResolver(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.PolicyIdReferencePlaceholderResolver(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "testcase": false, "constructor": true}, {"identifier": "initializeSupportedEntityTypeReferences", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeSupportedEntityTypeReferences()", "full_signature": "private void initializeSupportedEntityTypeReferences()", "class_method_signature": "PolicyIdReferencePlaceholderResolver.initializeSupportedEntityTypeReferences()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "CompletionStage<String>", "signature": "CompletionStage<String> resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Override public CompletionStage<String> resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "handlePolicyIdReference", "parameters": "(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "CompletionStage<String>", "signature": "CompletionStage<String> handlePolicyIdReference(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "full_signature": "private CompletionStage<String> handlePolicyIdReference(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.handlePolicyIdReference(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "handleRetrieveThingResponse", "parameters": "(final Object response,\n            final ReferencePlaceholder referencePlaceholder, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "String", "signature": "String handleRetrieveThingResponse(final Object response,\n            final ReferencePlaceholder referencePlaceholder, final DittoHeaders dittoHeaders)", "full_signature": "private static String handleRetrieveThingResponse(final Object response,\n            final ReferencePlaceholder referencePlaceholder, final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.handleRetrieveThingResponse(final Object response,\n            final ReferencePlaceholder referencePlaceholder, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "unknownFieldException", "parameters": "(\n            final ReferencePlaceholder placeholder, final DittoHeaders headers)", "modifiers": "private static", "return": "GatewayPlaceholderReferenceUnknownFieldException", "signature": "GatewayPlaceholderReferenceUnknownFieldException unknownFieldException(\n            final ReferencePlaceholder placeholder, final DittoHeaders headers)", "full_signature": "private static GatewayPlaceholderReferenceUnknownFieldException unknownFieldException(\n            final ReferencePlaceholder placeholder, final DittoHeaders headers)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.unknownFieldException(\n            final ReferencePlaceholder placeholder, final DittoHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "notSupportedException", "parameters": "(\n            final CharSequence referencedEntityType, final DittoHeaders headers)", "modifiers": "private", "return": "GatewayPlaceholderReferenceNotSupportedException", "signature": "GatewayPlaceholderReferenceNotSupportedException notSupportedException(\n            final CharSequence referencedEntityType, final DittoHeaders headers)", "full_signature": "private GatewayPlaceholderReferenceNotSupportedException notSupportedException(\n            final CharSequence referencedEntityType, final DittoHeaders headers)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.notSupportedException(\n            final CharSequence referencedEntityType, final DittoHeaders headers)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "modifiers": "public static", "return": "PolicyIdReferencePlaceholderResolver", "signature": "PolicyIdReferencePlaceholderResolver of(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "full_signature": "public static PolicyIdReferencePlaceholderResolver of(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.of(final ActorRef conciergeForwarderActor,\n            final Duration retrieveEntityTimeoutDuration)", "testcase": false, "constructor": false}], "file": "services/concierge/enforcement/src/main/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/references/PolicyIdReferencePlaceholderResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "CompletionStage<String>", "body": "@Override\n    public CompletionStage<String> resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders) {\n\n        final ResolveEntityReferenceStrategy resolveEntityReferenceStrategy =\n                supportedEntityTypesToActionMap.get(referencePlaceholder.getReferencedEntityType());\n\n        try (final AutoCloseableSlf4jLogger logger = LOGGER.setCorrelationId(dittoHeaders)) {\n            if (null == resolveEntityReferenceStrategy) {\n                final String referencedEntityType = referencePlaceholder.getReferencedEntityType().name();\n                logger.info(\"Could not find a placeholder replacement strategy for entity type <{}> in supported\" +\n                        \" entity types: {}\", referencedEntityType, supportedEntityTypeNames);\n                throw notSupportedException(referencedEntityType, dittoHeaders);\n            }\n            logger.debug(\"Will resolve entity reference for placeholder: <{}>\", referencePlaceholder);\n        }\n        return resolveEntityReferenceStrategy.handleEntityPolicyIdReference(referencePlaceholder, dittoHeaders);\n    }", "signature": "CompletionStage<String> resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Override public CompletionStage<String> resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "PolicyIdReferencePlaceholderResolver.resolve(final ReferencePlaceholder referencePlaceholder,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["get", "getReferencedEntityType", "setCorrelationId", "name", "getReferencedEntityType", "info", "notSupportedException", "debug", "handleEntityPolicyIdReference"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}