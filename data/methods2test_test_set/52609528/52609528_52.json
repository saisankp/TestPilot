{"test_class": {"identifier": "QueueClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private QueueClient queueClient;", "modifier": "private", "type": "QueueClient", "declarator": "queueClient", "var_name": "queueClient"}, {"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(5);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(5)", "var_name": "rule"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/QueueClientTest.java"}, "test_case": {"identifier": "testDeleteLockWithRedisquesFail", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteLockWithRedisquesFail(TestContext context){\n        Async async = context.async();\n\n        /*\n         * consume event bus messages directed to redisques and verify message content.\n         * reply with 'failed' for unlock\n         */\n        vertx.eventBus().localConsumer(Address.redisquesAddress(), (Handler<Message<JsonObject>>) message -> {\n            validateMessage(context, message, QueueOperation.deleteLock, \"myQueueToUnlock\");\n            message.reply(new JsonObject().put(STATUS, ERROR));\n        });\n\n        queueClient.deleteLock(\"myQueueToUnlock\").setHandler(event -> {\n            context.assertTrue(event.failed());\n            context.assertTrue(event.cause().getMessage().contains(\"Failed to delete lock for queue myQueueToUnlock\"));\n            async.complete();\n        });\n    }", "signature": "void testDeleteLockWithRedisquesFail(TestContext context)", "full_signature": "@Test public void testDeleteLockWithRedisquesFail(TestContext context)", "class_method_signature": "QueueClientTest.testDeleteLockWithRedisquesFail(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "localConsumer", "eventBus", "redisquesAddress", "validateMessage", "reply", "put", "setHandler", "deleteLock", "assertTrue", "failed", "assertTrue", "contains", "getMessage", "cause", "complete"]}, "focal_class": {"identifier": "QueueClient", "superclass": "", "interfaces": "implements RequestQueue", "fields": [{"original_string": "public static final String QUEUE_TIMESTAMP = \"queueTimestamp\";", "modifier": "public static final", "type": "String", "declarator": "QUEUE_TIMESTAMP = \"queueTimestamp\"", "var_name": "QUEUE_TIMESTAMP"}, {"original_string": "public static final Logger log = LoggerFactory.getLogger(QueueClient.class);", "modifier": "public static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueueClient.class)", "var_name": "log"}, {"original_string": "private MonitoringHandler monitoringHandler;", "modifier": "private", "type": "MonitoringHandler", "declarator": "monitoringHandler", "var_name": "monitoringHandler"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}], "methods": [{"identifier": "QueueClient", "parameters": "(Vertx vertx, MonitoringHandler monitoringHandler)", "modifiers": "public", "return": "", "signature": " QueueClient(Vertx vertx, MonitoringHandler monitoringHandler)", "full_signature": "public  QueueClient(Vertx vertx, MonitoringHandler monitoringHandler)", "class_method_signature": "QueueClient.QueueClient(Vertx vertx, MonitoringHandler monitoringHandler)", "testcase": false, "constructor": true}, {"identifier": "getRedisquesAddress", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getRedisquesAddress()", "full_signature": "protected String getRedisquesAddress()", "class_method_signature": "QueueClient.getRedisquesAddress()", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(final HttpServerRequest request, Buffer buffer, final String queue)", "modifiers": "@Override public", "return": "void", "signature": "void enqueue(final HttpServerRequest request, Buffer buffer, final String queue)", "full_signature": "@Override public void enqueue(final HttpServerRequest request, Buffer buffer, final String queue)", "class_method_signature": "QueueClient.enqueue(final HttpServerRequest request, Buffer buffer, final String queue)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(final HttpServerRequest request, MultiMap headers, Buffer buffer, final String queue)", "modifiers": "@Override public", "return": "void", "signature": "void enqueue(final HttpServerRequest request, MultiMap headers, Buffer buffer, final String queue)", "full_signature": "@Override public void enqueue(final HttpServerRequest request, MultiMap headers, Buffer buffer, final String queue)", "class_method_signature": "QueueClient.enqueue(final HttpServerRequest request, MultiMap headers, Buffer buffer, final String queue)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(HttpRequest request, final String queue)", "modifiers": "@Override public", "return": "void", "signature": "void enqueue(HttpRequest request, final String queue)", "full_signature": "@Override public void enqueue(HttpRequest request, final String queue)", "class_method_signature": "QueueClient.enqueue(HttpRequest request, final String queue)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(HttpRequest request, final String queue, final Handler<Void> doneHandler)", "modifiers": "@Override public", "return": "void", "signature": "void enqueue(HttpRequest request, final String queue, final Handler<Void> doneHandler)", "full_signature": "@Override public void enqueue(HttpRequest request, final String queue, final Handler<Void> doneHandler)", "class_method_signature": "QueueClient.enqueue(HttpRequest request, final String queue, final Handler<Void> doneHandler)", "testcase": false, "constructor": false}, {"identifier": "lockedEnqueue", "parameters": "(HttpRequest queuedRequest, String queue, String lockRequestedBy, Handler<Void> doneHandler)", "modifiers": "@Override public", "return": "void", "signature": "void lockedEnqueue(HttpRequest queuedRequest, String queue, String lockRequestedBy, Handler<Void> doneHandler)", "full_signature": "@Override public void lockedEnqueue(HttpRequest queuedRequest, String queue, String lockRequestedBy, Handler<Void> doneHandler)", "class_method_signature": "QueueClient.lockedEnqueue(HttpRequest queuedRequest, String queue, String lockRequestedBy, Handler<Void> doneHandler)", "testcase": false, "constructor": false}, {"identifier": "deleteLock", "parameters": "(String queue)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> deleteLock(String queue)", "full_signature": "@Override public Future<Void> deleteLock(String queue)", "class_method_signature": "QueueClient.deleteLock(String queue)", "testcase": false, "constructor": false}, {"identifier": "deleteAllQueueItems", "parameters": "(String queue, boolean unlock)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> deleteAllQueueItems(String queue, boolean unlock)", "full_signature": "@Override public Future<Void> deleteAllQueueItems(String queue, boolean unlock)", "class_method_signature": "QueueClient.deleteAllQueueItems(String queue, boolean unlock)", "testcase": false, "constructor": false}, {"identifier": "enqueueFuture", "parameters": "(HttpRequest queuedRequest, String queue)", "modifiers": "@Override public", "return": "Future<Void>", "signature": "Future<Void> enqueueFuture(HttpRequest queuedRequest, String queue)", "full_signature": "@Override public Future<Void> enqueueFuture(HttpRequest queuedRequest, String queue)", "class_method_signature": "QueueClient.enqueueFuture(HttpRequest queuedRequest, String queue)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(final HttpServerRequest request, HttpRequest queuedRequest, final String queue)", "modifiers": "private", "return": "void", "signature": "void enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue)", "full_signature": "private void enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue)", "class_method_signature": "QueueClient.enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(final HttpServerRequest request, HttpRequest queuedRequest, final String queue, final Handler<Void> doneHandler)", "modifiers": "private", "return": "void", "signature": "void enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue, final Handler<Void> doneHandler)", "full_signature": "private void enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue, final Handler<Void> doneHandler)", "class_method_signature": "QueueClient.enqueue(final HttpServerRequest request, HttpRequest queuedRequest, final String queue, final Handler<Void> doneHandler)", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/QueueClient.java"}, "focal_method": {"identifier": "deleteLock", "parameters": "(String queue)", "modifiers": "@Override public", "return": "Future<Void>", "body": "@Override\n    public Future<Void> deleteLock(String queue) {\n        Future<Void> future = Future.future();\n        vertx.eventBus().send(getRedisquesAddress(), buildDeleteLockOperation(queue), (Handler<AsyncResult<Message<JsonObject>>>) event -> {\n            if (event.failed()) {\n                future.fail(event.cause());\n                return;\n            }\n            if (OK.equals(event.result().body().getString(STATUS))) {\n                future.complete();\n                return;\n            }\n            future.fail(\"Failed to delete lock for queue \" + queue);\n        });\n        return future;\n    }", "signature": "Future<Void> deleteLock(String queue)", "full_signature": "@Override public Future<Void> deleteLock(String queue)", "class_method_signature": "QueueClient.deleteLock(String queue)", "testcase": false, "constructor": false, "invocations": ["future", "send", "eventBus", "getRedisquesAddress", "buildDeleteLockOperation", "failed", "fail", "cause", "equals", "getString", "body", "result", "complete", "fail"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}