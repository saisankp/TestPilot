{"test_class": {"identifier": "UnsafeTest", "superclass": "", "interfaces": "", "fields": [], "file": "webbeans-impl/src/test/java/org/apache/webbeans/proxy/UnsafeTest.java"}, "test_case": {"identifier": "ensureUnsafeIsAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ensureUnsafeIsAvailable()\n    {\n        final Unsafe unsafe = new Unsafe();\n        final SpyConstructor obj = unsafe.unsafeNewInstance(SpyConstructor.class);\n        assertNotNull(obj);\n        assertFalse(obj.called);\n    }", "signature": "void ensureUnsafeIsAvailable()", "full_signature": "@Test public void ensureUnsafeIsAvailable()", "class_method_signature": "UnsafeTest.ensureUnsafeIsAvailable()", "testcase": true, "constructor": false, "invocations": ["unsafeNewInstance", "assertNotNull", "assertFalse"]}, "focal_class": {"identifier": "Unsafe", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Object unsafe;", "modifier": "private", "type": "Object", "declarator": "unsafe", "var_name": "unsafe"}, {"original_string": "private Object internalUnsafe;", "modifier": "private", "type": "Object", "declarator": "internalUnsafe", "var_name": "internalUnsafe"}, {"original_string": "private Method unsafeAllocateInstance;", "modifier": "private", "type": "Method", "declarator": "unsafeAllocateInstance", "var_name": "unsafeAllocateInstance"}, {"original_string": "private final AtomicReference<Method> unsafeDefineClass = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<Method>", "declarator": "unsafeDefineClass = new AtomicReference<>()", "var_name": "unsafeDefineClass"}], "methods": [{"identifier": "Unsafe", "parameters": "()", "modifiers": "public", "return": "", "signature": " Unsafe()", "full_signature": "public  Unsafe()", "class_method_signature": "Unsafe.Unsafe()", "testcase": false, "constructor": true}, {"identifier": "defineAndLoadClass", "parameters": "(ClassLoader classLoader, String proxyName, byte[] proxyBytes)", "modifiers": "public", "return": "Class<T>", "signature": "Class<T> defineAndLoadClass(ClassLoader classLoader, String proxyName, byte[] proxyBytes)", "full_signature": "public Class<T> defineAndLoadClass(ClassLoader classLoader, String proxyName, byte[] proxyBytes)", "class_method_signature": "Unsafe.defineAndLoadClass(ClassLoader classLoader, String proxyName, byte[] proxyBytes)", "testcase": false, "constructor": false}, {"identifier": "unsafeDefineClass", "parameters": "()", "modifiers": "private", "return": "Method", "signature": "Method unsafeDefineClass()", "full_signature": "private Method unsafeDefineClass()", "class_method_signature": "Unsafe.unsafeDefineClass()", "testcase": false, "constructor": false}, {"identifier": "unsafeNewInstance", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T unsafeNewInstance(Class<T> clazz)", "full_signature": "public T unsafeNewInstance(Class<T> clazz)", "class_method_signature": "Unsafe.unsafeNewInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getUnsafeClass", "parameters": "()", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getUnsafeClass()", "full_signature": "private Class<?> getUnsafeClass()", "class_method_signature": "Unsafe.getUnsafeClass()", "testcase": false, "constructor": false}], "file": "webbeans-impl/src/main/java/org/apache/webbeans/proxy/Unsafe.java"}, "focal_method": {"identifier": "unsafeNewInstance", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "T", "body": "public <T> T unsafeNewInstance(Class<T> clazz)\n    {\n        try\n        {\n            if (unsafeAllocateInstance != null)\n            {\n                return (T) unsafeAllocateInstance.invoke(unsafe, clazz);\n            }\n            else\n            {\n                try\n                {\n                    return clazz.getConstructor().newInstance();\n                }\n                catch (final Exception e)\n                {\n                    throw new IllegalStateException(\"Failed to allocateInstance of Proxy class \" + clazz.getName(), e);\n                }\n            }\n        }\n        catch (IllegalAccessException e)\n        {\n            throw new IllegalStateException(\"Failed to allocateInstance of Proxy class \" + clazz.getName(), e);\n        }\n        catch (InvocationTargetException e)\n        {\n            Throwable throwable = e.getTargetException() != null ? e.getTargetException() : e;\n            throw new IllegalStateException(\"Failed to allocateInstance of Proxy class \" + clazz.getName(),\n                    throwable);\n        }\n    }", "signature": "T unsafeNewInstance(Class<T> clazz)", "full_signature": "public T unsafeNewInstance(Class<T> clazz)", "class_method_signature": "Unsafe.unsafeNewInstance(Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["invoke", "newInstance", "getConstructor", "getName", "getName", "getTargetException", "getTargetException", "getName"]}, "repository": {"repo_id": 1302095, "url": "https://github.com/apache/openwebbeans", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 45, "size": 23214, "license": "licensed"}}