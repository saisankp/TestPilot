{"test_class": {"identifier": "ActivationProvisionListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<Pair<String, String>> activationTrace = new ArrayList<>();", "modifier": "private final", "type": "List<Pair<String, String>>", "declarator": "activationTrace = new ArrayList<>()", "var_name": "activationTrace"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/guice/internal/ActivationProvisionListenerTest.java"}, "test_case": {"identifier": "testServiceReordering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServiceReordering() throws Exception {\n        LifecycleInjector injector = InjectorBuilder.fromModules(\n                new ContainerEventBusModule(),\n                new AbstractModule() {\n                    @Override\n                    protected void configure() {\n                        bind(TitusRuntime.class).toInstance(TitusRuntimes.internal());\n                        bind(ActivationProvisionListenerTest.class).toInstance(ActivationProvisionListenerTest.this);\n                        bind(ServiceB.class).asEagerSingleton();\n                        bind(ServiceA.class).asEagerSingleton();\n                    }\n                }).createInjector();\n\n        ActivationLifecycle activationLifecycle = injector.getInstance(ActivationLifecycle.class);\n        activationLifecycle.activate();\n\n        assertThat(activationTrace).containsExactlyInAnyOrder(\n                Pair.of(\"serviceA\", \"ACTIVATED\"),\n                Pair.of(\"serviceB\", \"ACTIVATED\")\n        );\n    }", "signature": "void testServiceReordering()", "full_signature": "@Test public void testServiceReordering()", "class_method_signature": "ActivationProvisionListenerTest.testServiceReordering()", "testcase": true, "constructor": false, "invocations": ["createInjector", "fromModules", "toInstance", "bind", "internal", "toInstance", "bind", "asEagerSingleton", "bind", "asEagerSingleton", "bind", "getInstance", "activate", "containsExactlyInAnyOrder", "assertThat", "of", "of"]}, "focal_class": {"identifier": "ActivationProvisionListener", "superclass": "", "interfaces": "implements ActivationLifecycle, ProvisionListener", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ActivationProvisionListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ActivationProvisionListener.class)", "var_name": "logger"}, {"original_string": "private final Set<ServiceHolder> services = new CopyOnWriteArraySet<>();", "modifier": "private final", "type": "Set<ServiceHolder>", "declarator": "services = new CopyOnWriteArraySet<>()", "var_name": "services"}, {"original_string": "private long activationTime = -1;", "modifier": "private", "type": "long", "declarator": "activationTime = -1", "var_name": "activationTime"}], "methods": [{"identifier": "onProvision", "parameters": "(ProvisionInvocation<T> provision)", "modifiers": "@Override public", "return": "void", "signature": "void onProvision(ProvisionInvocation<T> provision)", "full_signature": "@Override public void onProvision(ProvisionInvocation<T> provision)", "class_method_signature": "ActivationProvisionListener.onProvision(ProvisionInvocation<T> provision)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "(T instance)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive(T instance)", "full_signature": "@Override public boolean isActive(T instance)", "class_method_signature": "ActivationProvisionListener.isActive(T instance)", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "ActivationProvisionListener.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void deactivate()", "full_signature": "@Override public void deactivate()", "class_method_signature": "ActivationProvisionListener.deactivate()", "testcase": false, "constructor": false}, {"identifier": "getActivationTimeMs", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getActivationTimeMs()", "full_signature": "@Override public long getActivationTimeMs()", "class_method_signature": "ActivationProvisionListener.getActivationTimeMs()", "testcase": false, "constructor": false}, {"identifier": "getServiceActionTimesMs", "parameters": "()", "modifiers": "@Override public", "return": "List<Pair<String, Long>>", "signature": "List<Pair<String, Long>> getServiceActionTimesMs()", "full_signature": "@Override public List<Pair<String, Long>> getServiceActionTimesMs()", "class_method_signature": "ActivationProvisionListener.getServiceActionTimesMs()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/guice/internal/ActivationProvisionListener.java"}, "focal_method": {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void activate() {\n        long startTime = System.currentTimeMillis();\n        logger.info(\"Activating services\");\n\n        services.forEach(ServiceHolder::activate);\n\n        this.activationTime = System.currentTimeMillis() - startTime;\n        logger.info(\"Service activation finished in {}[ms]\", activationTime);\n    }", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "ActivationProvisionListener.activate()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "info", "forEach", "currentTimeMillis", "info"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}