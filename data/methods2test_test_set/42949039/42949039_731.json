{"test_class": {"identifier": "JsonHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/JsonHelperTest.java"}, "test_case": {"identifier": "testGetKeyValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetKeyValue() throws Exception\n    {\n        // Create a JSON object with one key value pair.\n        JSONParser jsonParser = new JSONParser();\n        JSONObject jsonObject = (JSONObject) jsonParser.parse(String.format(\"{\\\"%s\\\" : \\\"%s\\\"}\", KEY, VALUE));\n\n        // Get and validate the key value.\n        assertEquals(VALUE, jsonHelper.getKeyValue(jsonObject, KEY, String.class));\n\n        // Try to get a value for a non-existing key.\n        try\n        {\n            jsonHelper.getKeyValue(jsonObject, I_DO_NOT_EXIST, String.class);\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"Failed to get \\\"%s\\\" key value from JSON object.\", I_DO_NOT_EXIST), e.getMessage());\n        }\n\n        // Try to get a value that cannot be cast to the specified class type.\n        try\n        {\n            jsonHelper.getKeyValue(jsonObject, KEY, BigDecimal.class);\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"Failed to cast \\\"%s\\\" key value to %s.\", VALUE, BigDecimal.class.getName()), e.getMessage());\n        }\n    }", "signature": "void testGetKeyValue()", "full_signature": "@Test public void testGetKeyValue()", "class_method_signature": "JsonHelperTest.testGetKeyValue()", "testcase": true, "constructor": false, "invocations": ["parse", "format", "assertEquals", "getKeyValue", "getKeyValue", "fail", "assertEquals", "format", "getMessage", "getKeyValue", "fail", "assertEquals", "format", "getName", "getMessage"]}, "focal_class": {"identifier": "JsonHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getKeyValue", "parameters": "(JSONObject jsonObject, Object key, Class<T> classType)", "modifiers": "public", "return": "T", "signature": "T getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "full_signature": "public T getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "class_method_signature": "JsonHelper.getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "testcase": false, "constructor": false}, {"identifier": "objectToJson", "parameters": "(Object object)", "modifiers": "public", "return": "String", "signature": "String objectToJson(Object object)", "full_signature": "public String objectToJson(Object object)", "class_method_signature": "JsonHelper.objectToJson(Object object)", "testcase": false, "constructor": false}, {"identifier": "unmarshallJsonToListOfObjects", "parameters": "(Class<T> classType, String jsonContent)", "modifiers": "public", "return": "List<T>", "signature": "List<T> unmarshallJsonToListOfObjects(Class<T> classType, String jsonContent)", "full_signature": "public List<T> unmarshallJsonToListOfObjects(Class<T> classType, String jsonContent)", "class_method_signature": "JsonHelper.unmarshallJsonToListOfObjects(Class<T> classType, String jsonContent)", "testcase": false, "constructor": false}, {"identifier": "unmarshallJsonToObject", "parameters": "(Class<T> classType, String jsonContent)", "modifiers": "public", "return": "T", "signature": "T unmarshallJsonToObject(Class<T> classType, String jsonContent)", "full_signature": "public T unmarshallJsonToObject(Class<T> classType, String jsonContent)", "class_method_signature": "JsonHelper.unmarshallJsonToObject(Class<T> classType, String jsonContent)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/JsonHelper.java"}, "focal_method": {"identifier": "getKeyValue", "parameters": "(JSONObject jsonObject, Object key, Class<T> classType)", "modifiers": "public", "return": "T", "body": "public <T> T getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)\n    {\n        Object result = jsonObject.get(key);\n\n        if (result == null)\n        {\n            throw new IllegalArgumentException(String.format(\"Failed to get \\\"%s\\\" key value from JSON object.\", key.toString()));\n        }\n\n        try\n        {\n            return classType.cast(result);\n        }\n        catch (ClassCastException e)\n        {\n            throw new IllegalArgumentException(String.format(\"Failed to cast \\\"%s\\\" key value to %s.\", result.toString(), classType.getName()), e);\n        }\n    }", "signature": "T getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "full_signature": "public T getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "class_method_signature": "JsonHelper.getKeyValue(JSONObject jsonObject, Object key, Class<T> classType)", "testcase": false, "constructor": false, "invocations": ["get", "format", "toString", "cast", "format", "toString", "getName"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}