{"test_class": {"identifier": "TestDeferredResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ByteArrayOutputStream loggerOutputStream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "loggerOutputStream", "var_name": "loggerOutputStream"}, {"original_string": "private java.util.logging.Handler logHandler;", "modifier": "private", "type": "java.util.logging.Handler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private boolean isExceptionLoggingEnabledInitial;", "modifier": "private", "type": "boolean", "declarator": "isExceptionLoggingEnabledInitial", "var_name": "isExceptionLoggingEnabledInitial"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestDeferredResult.java"}, "test_case": {"identifier": "testHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandle() throws Throwable {\n        TestContext ctx = new TestContext(1, TestContext.DEFAULT_WAIT_DURATION);\n        AtomicInteger invocations = new AtomicInteger();\n        DeferredResult<Integer> original = new DeferredResult<>();\n        DeferredResult<Integer> result = original\n                .handle((x, ex) -> {\n                    Assert.assertNull(ex);\n                    invocations.incrementAndGet();\n                    return x + 1;\n                });\n        result.whenComplete(ctx.getCompletionDeferred());\n        runAfter(10, () -> original.complete(1));\n        ctx.await();\n        Assert.assertEquals(1, invocations.get());\n        Assert.assertEquals(2, result.getNow(exceptionSupplier()).intValue());\n    }", "signature": "void testHandle()", "full_signature": "@Test public void testHandle()", "class_method_signature": "TestDeferredResult.testHandle()", "testcase": true, "constructor": false, "invocations": ["handle", "assertNull", "incrementAndGet", "whenComplete", "getCompletionDeferred", "runAfter", "complete", "await", "assertEquals", "get", "assertEquals", "intValue", "getNow", "exceptionSupplier"]}, "focal_class": {"identifier": "DeferredResult", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(DeferredResult.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DeferredResult.class.getName())", "var_name": "LOG"}, {"original_string": "private static boolean IS_UNCAUGHT_EXCEPTION_LOGGING_ENABLED = XenonConfiguration.bool(\n            DeferredResult.class,\n            \"isUncaughtExceptionLoggingEnabled\", false);", "modifier": "private static", "type": "boolean", "declarator": "IS_UNCAUGHT_EXCEPTION_LOGGING_ENABLED = XenonConfiguration.bool(\n            DeferredResult.class,\n            \"isUncaughtExceptionLoggingEnabled\", false)", "var_name": "IS_UNCAUGHT_EXCEPTION_LOGGING_ENABLED"}, {"original_string": "private final CompletableFuture<T> completableFuture;", "modifier": "private final", "type": "CompletableFuture<T>", "declarator": "completableFuture", "var_name": "completableFuture"}, {"original_string": "private boolean isLastInChain;", "modifier": "private", "type": "boolean", "declarator": "isLastInChain", "var_name": "isLastInChain"}], "methods": [{"identifier": "completed", "parameters": "(U value)", "modifiers": "public static", "return": "DeferredResult<U>", "signature": "DeferredResult<U> completed(U value)", "full_signature": "public static DeferredResult<U> completed(U value)", "class_method_signature": "DeferredResult.completed(U value)", "testcase": false, "constructor": false}, {"identifier": "failed", "parameters": "(Throwable ex)", "modifiers": "public static", "return": "DeferredResult<U>", "signature": "DeferredResult<U> failed(Throwable ex)", "full_signature": "public static DeferredResult<U> failed(Throwable ex)", "class_method_signature": "DeferredResult.failed(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "allOf", "parameters": "(DeferredResult<?>... deferredResults)", "modifiers": "public static", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> allOf(DeferredResult<?>... deferredResults)", "full_signature": "public static DeferredResult<Void> allOf(DeferredResult<?>... deferredResults)", "class_method_signature": "DeferredResult.allOf(DeferredResult<?>... deferredResults)", "testcase": false, "constructor": false}, {"identifier": "allOf", "parameters": "(List<DeferredResult<U>> deferredResults)", "modifiers": "public static", "return": "DeferredResult<List<U>>", "signature": "DeferredResult<List<U>> allOf(List<DeferredResult<U>> deferredResults)", "full_signature": "public static DeferredResult<List<U>> allOf(List<DeferredResult<U>> deferredResults)", "class_method_signature": "DeferredResult.allOf(List<DeferredResult<U>> deferredResults)", "testcase": false, "constructor": false}, {"identifier": "anyOf", "parameters": "(DeferredResult<?>... deferredResults)", "modifiers": "public static", "return": "DeferredResult<?>", "signature": "DeferredResult<?> anyOf(DeferredResult<?>... deferredResults)", "full_signature": "public static DeferredResult<?> anyOf(DeferredResult<?>... deferredResults)", "class_method_signature": "DeferredResult.anyOf(DeferredResult<?>... deferredResults)", "testcase": false, "constructor": false}, {"identifier": "anyOf", "parameters": "(List<DeferredResult<U>> deferredResults)", "modifiers": "public static", "return": "DeferredResult<U>", "signature": "DeferredResult<U> anyOf(List<DeferredResult<U>> deferredResults)", "full_signature": "public static DeferredResult<U> anyOf(List<DeferredResult<U>> deferredResults)", "class_method_signature": "DeferredResult.anyOf(List<DeferredResult<U>> deferredResults)", "testcase": false, "constructor": false}, {"identifier": "DeferredResult", "parameters": "()", "modifiers": "public", "return": "", "signature": " DeferredResult()", "full_signature": "public  DeferredResult()", "class_method_signature": "DeferredResult.DeferredResult()", "testcase": false, "constructor": true}, {"identifier": "DeferredResult", "parameters": "(CompletableFuture<T> completableFuture)", "modifiers": "public", "return": "", "signature": " DeferredResult(CompletableFuture<T> completableFuture)", "full_signature": "public  DeferredResult(CompletableFuture<T> completableFuture)", "class_method_signature": "DeferredResult.DeferredResult(CompletableFuture<T> completableFuture)", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(CompletableFuture<U> completableFuture)", "modifiers": "protected", "return": "DeferredResult<U>", "signature": "DeferredResult<U> wrap(CompletableFuture<U> completableFuture)", "full_signature": "protected DeferredResult<U> wrap(CompletableFuture<U> completableFuture)", "class_method_signature": "DeferredResult.wrap(CompletableFuture<U> completableFuture)", "testcase": false, "constructor": false}, {"identifier": "handleExceptionLogging", "parameters": "(DeferredResult<U> dr)", "modifiers": "private", "return": "DeferredResult<U>", "signature": "DeferredResult<U> handleExceptionLogging(DeferredResult<U> dr)", "full_signature": "private DeferredResult<U> handleExceptionLogging(DeferredResult<U> dr)", "class_method_signature": "DeferredResult.handleExceptionLogging(DeferredResult<U> dr)", "testcase": false, "constructor": false}, {"identifier": "thenApply", "parameters": "(Function<? super T, ? extends U> fn)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> thenApply(Function<? super T, ? extends U> fn)", "full_signature": "public DeferredResult<U> thenApply(Function<? super T, ? extends U> fn)", "class_method_signature": "DeferredResult.thenApply(Function<? super T, ? extends U> fn)", "testcase": false, "constructor": false}, {"identifier": "thenApplyAsync", "parameters": "(Function<? super T, ? extends U> fn,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> thenApplyAsync(Function<? super T, ? extends U> fn,\n            Executor executor)", "full_signature": "public DeferredResult<U> thenApplyAsync(Function<? super T, ? extends U> fn,\n            Executor executor)", "class_method_signature": "DeferredResult.thenApplyAsync(Function<? super T, ? extends U> fn,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "thenAccept", "parameters": "(Consumer<? super T> action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenAccept(Consumer<? super T> action)", "full_signature": "public DeferredResult<Void> thenAccept(Consumer<? super T> action)", "class_method_signature": "DeferredResult.thenAccept(Consumer<? super T> action)", "testcase": false, "constructor": false}, {"identifier": "thenAcceptAsync", "parameters": "(Consumer<? super T> action, Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)", "full_signature": "public DeferredResult<Void> thenAcceptAsync(Consumer<? super T> action, Executor executor)", "class_method_signature": "DeferredResult.thenAcceptAsync(Consumer<? super T> action, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "thenRun", "parameters": "(Runnable action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenRun(Runnable action)", "full_signature": "public DeferredResult<Void> thenRun(Runnable action)", "class_method_signature": "DeferredResult.thenRun(Runnable action)", "testcase": false, "constructor": false}, {"identifier": "thenRunAsync", "parameters": "(Runnable action, Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenRunAsync(Runnable action, Executor executor)", "full_signature": "public DeferredResult<Void> thenRunAsync(Runnable action, Executor executor)", "class_method_signature": "DeferredResult.thenRunAsync(Runnable action, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "thenCombine", "parameters": "(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn)", "modifiers": "public", "return": "DeferredResult<V>", "signature": "DeferredResult<V> thenCombine(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn)", "full_signature": "public DeferredResult<V> thenCombine(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn)", "class_method_signature": "DeferredResult.thenCombine(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn)", "testcase": false, "constructor": false}, {"identifier": "thenCombineAsync", "parameters": "(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)", "modifiers": "public", "return": "DeferredResult<V>", "signature": "DeferredResult<V> thenCombineAsync(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)", "full_signature": "public DeferredResult<V> thenCombineAsync(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)", "class_method_signature": "DeferredResult.thenCombineAsync(DeferredResult<? extends U> other,\n            BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "thenAcceptBoth", "parameters": "(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenAcceptBoth(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action)", "full_signature": "public DeferredResult<Void> thenAcceptBoth(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action)", "class_method_signature": "DeferredResult.thenAcceptBoth(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action)", "testcase": false, "constructor": false}, {"identifier": "thenAcceptBothAsync", "parameters": "(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action, Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> thenAcceptBothAsync(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action, Executor executor)", "full_signature": "public DeferredResult<Void> thenAcceptBothAsync(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action, Executor executor)", "class_method_signature": "DeferredResult.thenAcceptBothAsync(DeferredResult<? extends U> other,\n            BiConsumer<? super T, ? super U> action, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "runAfterBoth", "parameters": "(DeferredResult<?> other, Runnable action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> runAfterBoth(DeferredResult<?> other, Runnable action)", "full_signature": "public DeferredResult<Void> runAfterBoth(DeferredResult<?> other, Runnable action)", "class_method_signature": "DeferredResult.runAfterBoth(DeferredResult<?> other, Runnable action)", "testcase": false, "constructor": false}, {"identifier": "runAfterBothAsync", "parameters": "(DeferredResult<?> other, Runnable action,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> runAfterBothAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "full_signature": "public DeferredResult<Void> runAfterBothAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "class_method_signature": "DeferredResult.runAfterBothAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "applyToEither", "parameters": "(DeferredResult<? extends T> other,\n            Function<? super T, U> fn)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> applyToEither(DeferredResult<? extends T> other,\n            Function<? super T, U> fn)", "full_signature": "public DeferredResult<U> applyToEither(DeferredResult<? extends T> other,\n            Function<? super T, U> fn)", "class_method_signature": "DeferredResult.applyToEither(DeferredResult<? extends T> other,\n            Function<? super T, U> fn)", "testcase": false, "constructor": false}, {"identifier": "applyToEitherAsync", "parameters": "(DeferredResult<? extends T> other,\n            Function<? super T, U> fn,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> applyToEitherAsync(DeferredResult<? extends T> other,\n            Function<? super T, U> fn,\n            Executor executor)", "full_signature": "public DeferredResult<U> applyToEitherAsync(DeferredResult<? extends T> other,\n            Function<? super T, U> fn,\n            Executor executor)", "class_method_signature": "DeferredResult.applyToEitherAsync(DeferredResult<? extends T> other,\n            Function<? super T, U> fn,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "acceptEither", "parameters": "(DeferredResult<? extends T> other,\n            Consumer<? super T> action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> acceptEither(DeferredResult<? extends T> other,\n            Consumer<? super T> action)", "full_signature": "public DeferredResult<Void> acceptEither(DeferredResult<? extends T> other,\n            Consumer<? super T> action)", "class_method_signature": "DeferredResult.acceptEither(DeferredResult<? extends T> other,\n            Consumer<? super T> action)", "testcase": false, "constructor": false}, {"identifier": "acceptEitherAsync", "parameters": "(DeferredResult<? extends T> other,\n            Consumer<? super T> action,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> acceptEitherAsync(DeferredResult<? extends T> other,\n            Consumer<? super T> action,\n            Executor executor)", "full_signature": "public DeferredResult<Void> acceptEitherAsync(DeferredResult<? extends T> other,\n            Consumer<? super T> action,\n            Executor executor)", "class_method_signature": "DeferredResult.acceptEitherAsync(DeferredResult<? extends T> other,\n            Consumer<? super T> action,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "runAfterEither", "parameters": "(DeferredResult<?> other, Runnable action)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> runAfterEither(DeferredResult<?> other, Runnable action)", "full_signature": "public DeferredResult<Void> runAfterEither(DeferredResult<?> other, Runnable action)", "class_method_signature": "DeferredResult.runAfterEither(DeferredResult<?> other, Runnable action)", "testcase": false, "constructor": false}, {"identifier": "runAfterEitherAsync", "parameters": "(DeferredResult<?> other, Runnable action,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<Void>", "signature": "DeferredResult<Void> runAfterEitherAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "full_signature": "public DeferredResult<Void> runAfterEitherAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "class_method_signature": "DeferredResult.runAfterEitherAsync(DeferredResult<?> other, Runnable action,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "thenCompose", "parameters": "(Function<? super T, ? extends DeferredResult<U>> fn)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> thenCompose(Function<? super T, ? extends DeferredResult<U>> fn)", "full_signature": "public DeferredResult<U> thenCompose(Function<? super T, ? extends DeferredResult<U>> fn)", "class_method_signature": "DeferredResult.thenCompose(Function<? super T, ? extends DeferredResult<U>> fn)", "testcase": false, "constructor": false}, {"identifier": "thenComposeAsync", "parameters": "(\n            Function<? super T, ? extends DeferredResult<U>> fn,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> thenComposeAsync(\n            Function<? super T, ? extends DeferredResult<U>> fn,\n            Executor executor)", "full_signature": "public DeferredResult<U> thenComposeAsync(\n            Function<? super T, ? extends DeferredResult<U>> fn,\n            Executor executor)", "class_method_signature": "DeferredResult.thenComposeAsync(\n            Function<? super T, ? extends DeferredResult<U>> fn,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "exceptionally", "parameters": "(Function<Throwable, ? extends T> fn)", "modifiers": "public", "return": "DeferredResult<T>", "signature": "DeferredResult<T> exceptionally(Function<Throwable, ? extends T> fn)", "full_signature": "public DeferredResult<T> exceptionally(Function<Throwable, ? extends T> fn)", "class_method_signature": "DeferredResult.exceptionally(Function<Throwable, ? extends T> fn)", "testcase": false, "constructor": false}, {"identifier": "whenComplete", "parameters": "(BiConsumer<? super T, ? super Throwable> action)", "modifiers": "public", "return": "DeferredResult<T>", "signature": "DeferredResult<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)", "full_signature": "public DeferredResult<T> whenComplete(BiConsumer<? super T, ? super Throwable> action)", "class_method_signature": "DeferredResult.whenComplete(BiConsumer<? super T, ? super Throwable> action)", "testcase": false, "constructor": false}, {"identifier": "whenCompleteAsync", "parameters": "(BiConsumer<? super T, ? super Throwable> action,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<T>", "signature": "DeferredResult<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action,\n            Executor executor)", "full_signature": "public DeferredResult<T> whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action,\n            Executor executor)", "class_method_signature": "DeferredResult.whenCompleteAsync(BiConsumer<? super T, ? super Throwable> action,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(BiFunction<? super T, Throwable, ? extends U> fn)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)", "full_signature": "public DeferredResult<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)", "class_method_signature": "DeferredResult.handle(BiFunction<? super T, Throwable, ? extends U> fn)", "testcase": false, "constructor": false}, {"identifier": "handleAsync", "parameters": "(BiFunction<? super T, Throwable, ? extends U> fn,\n            Executor executor)", "modifiers": "public", "return": "DeferredResult<U>", "signature": "DeferredResult<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn,\n            Executor executor)", "full_signature": "public DeferredResult<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn,\n            Executor executor)", "class_method_signature": "DeferredResult.handleAsync(BiFunction<? super T, Throwable, ? extends U> fn,\n            Executor executor)", "testcase": false, "constructor": false}, {"identifier": "getNow", "parameters": "(T valueIfAbsent)", "modifiers": "public", "return": "T", "signature": "T getNow(T valueIfAbsent)", "full_signature": "public T getNow(T valueIfAbsent)", "class_method_signature": "DeferredResult.getNow(T valueIfAbsent)", "testcase": false, "constructor": false}, {"identifier": "getNow", "parameters": "(Supplier<? extends T> valueSupplierIfAbsent)", "modifiers": "public", "return": "T", "signature": "T getNow(Supplier<? extends T> valueSupplierIfAbsent)", "full_signature": "public T getNow(Supplier<? extends T> valueSupplierIfAbsent)", "class_method_signature": "DeferredResult.getNow(Supplier<? extends T> valueSupplierIfAbsent)", "testcase": false, "constructor": false}, {"identifier": "isDone", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDone()", "full_signature": "public boolean isDone()", "class_method_signature": "DeferredResult.isDone()", "testcase": false, "constructor": false}, {"identifier": "toCompletionStage", "parameters": "()", "modifiers": "public", "return": "CompletionStage<T>", "signature": "CompletionStage<T> toCompletionStage()", "full_signature": "public CompletionStage<T> toCompletionStage()", "class_method_signature": "DeferredResult.toCompletionStage()", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(T value)", "modifiers": "public", "return": "boolean", "signature": "boolean complete(T value)", "full_signature": "public boolean complete(T value)", "class_method_signature": "DeferredResult.complete(T value)", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(Throwable ex)", "modifiers": "public", "return": "boolean", "signature": "boolean fail(Throwable ex)", "full_signature": "public boolean fail(Throwable ex)", "class_method_signature": "DeferredResult.fail(Throwable ex)", "testcase": false, "constructor": false}, {"identifier": "whenCompleteNotify", "parameters": "(Operation operation)", "modifiers": "public", "return": "DeferredResult<T>", "signature": "DeferredResult<T> whenCompleteNotify(Operation operation)", "full_signature": "public DeferredResult<T> whenCompleteNotify(Operation operation)", "class_method_signature": "DeferredResult.whenCompleteNotify(Operation operation)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/DeferredResult.java"}, "focal_method": {"identifier": "handle", "parameters": "(BiFunction<? super T, Throwable, ? extends U> fn)", "modifiers": "public", "return": "DeferredResult<U>", "body": "public <U> DeferredResult<U> handle(BiFunction<? super T, Throwable, ? extends U> fn) {\n        return wrap(this.completableFuture.handle(fn));\n    }", "signature": "DeferredResult<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)", "full_signature": "public DeferredResult<U> handle(BiFunction<? super T, Throwable, ? extends U> fn)", "class_method_signature": "DeferredResult.handle(BiFunction<? super T, Throwable, ? extends U> fn)", "testcase": false, "constructor": false, "invocations": ["wrap", "handle"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}