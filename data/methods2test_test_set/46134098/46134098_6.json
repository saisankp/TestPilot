{"test_class": {"identifier": "POResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/po/input.po\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/po/input.po\")", "var_name": "INPUT_FILE"}, {"original_string": "private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/po/write-output.po\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/po/write-output.po\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "private static final File MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-1.pot\")", "var_name": "MERGE_INPUT_1_FILE"}, {"original_string": "private static final File MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "MERGE_INPUT_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-input-2.pot\")", "var_name": "MERGE_INPUT_2_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_1_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-1.pot\")", "var_name": "EXPECTED_MERGE_1_FILE"}, {"original_string": "private static final File EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\");", "modifier": "private static final", "type": "File", "declarator": "EXPECTED_MERGE_2_FILE = new File(\"src/test/resource/resfilter/pot/merge-output-2.pot\")", "var_name": "EXPECTED_MERGE_2_FILE"}, {"original_string": "private static final Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static final", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static LanguageBundle MERGE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "MERGE_BUNDLE", "var_name": "MERGE_BUNDLE"}, {"original_string": "private static final POResource res = new POResource();", "modifier": "private static final", "type": "POResource", "declarator": "res = new POResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/POResourceTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws IOException, ResourceFilterException {\n        File tempFile = File.createTempFile(this.getClass().getSimpleName(), \".pot\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile)) {\n            res.write(os, WRITE_BUNDLE, null);\n            os.flush();\n            // pot files contain a header, this has info which may change,\n            // therefore, ignore it by setting n=19 in compareFiles()\n            assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile, 19));\n        }\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "POResourceTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "getSimpleName", "getClass", "deleteOnExit", "write", "flush", "assertTrue", "compareFiles"]}, "focal_class": {"identifier": "POResource", "superclass": "extends POTResource", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "POResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "POResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/POResource.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options) throws IOException, ResourceFilterException {\n\n        List<ResourceString> resStrings = languageBundle.getSortedResourceStrings();\n\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outStream, CHAR_SET));\n\n        BreakIterator brkItr = Utils.getWordBreakIterator(options);\n\n        // write header\n        writer.write(getHeader());\n\n        // write entries\n        for (ResourceString res : resStrings) {\n            writer.newLine();\n            writer.write(formatMessage(UNTRANSLATED_STRING_PREFIX, res.getKey(), brkItr));\n            writer.write(formatMessage(TRANSLATED_STRING_PREFIX, res.getValue(), brkItr));\n        }\n\n        writer.flush();\n    }", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "POResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["getSortedResourceStrings", "getWordBreakIterator", "write", "getHeader", "newLine", "write", "formatMessage", "getKey", "write", "formatMessage", "getValue", "flush"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}