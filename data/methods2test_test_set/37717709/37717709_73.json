{"test_class": {"identifier": "TestScriptStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [{"original_string": "private static final String SCRIPT;", "modifier": "private static final", "type": "String", "declarator": "SCRIPT", "var_name": "SCRIPT"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestScriptStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws JVoiceXMLEvent, Exception {\n        final VoiceXmlDocument doc = createDocument();\n        final Vxml vxml = doc.getVxml();\n        final Script script = vxml.appendChild(Script.class);\n        script.addCdata(SCRIPT);\n\n        final ScriptStrategy strategy = new ScriptStrategy();\n        executeTagStrategy(script, strategy);\n\n        final DataModel model = getDataModel();\n        Mockito.verify(model).evaluateExpression(SCRIPT, Object.class);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestScriptStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createDocument", "getVxml", "appendChild", "addCdata", "executeTagStrategy", "getDataModel", "evaluateExpression", "verify"]}, "focal_class": {"identifier": "ScriptStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(ScriptStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(ScriptStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final Collection<String> EVAL_ATTRIBUTES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "EVAL_ATTRIBUTES", "var_name": "EVAL_ATTRIBUTES"}, {"original_string": "private URI src;", "modifier": "private", "type": "URI", "declarator": "src", "var_name": "src"}], "methods": [{"identifier": "ScriptStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " ScriptStrategy()", "full_signature": "  ScriptStrategy()", "class_method_signature": "ScriptStrategy.ScriptStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "ScriptStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "void", "signature": "void validateAttributes(final DataModel model)", "full_signature": "@Override public void validateAttributes(final DataModel model)", "class_method_signature": "ScriptStrategy.validateAttributes(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "ScriptStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "processExternalScript", "parameters": "(\n            final VoiceXmlInterpreterContext context, final DataModel model)", "modifiers": "private", "return": "void", "signature": "void processExternalScript(\n            final VoiceXmlInterpreterContext context, final DataModel model)", "full_signature": "private void processExternalScript(\n            final VoiceXmlInterpreterContext context, final DataModel model)", "class_method_signature": "ScriptStrategy.processExternalScript(\n            final VoiceXmlInterpreterContext context, final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "processInternalScript", "parameters": "(final String script,\n            final DataModel model)", "modifiers": "private", "return": "void", "signature": "void processInternalScript(final String script,\n            final DataModel model)", "full_signature": "private void processInternalScript(final String script,\n            final DataModel model)", "class_method_signature": "ScriptStrategy.processInternalScript(final String script,\n            final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "getFetchAttributes", "parameters": "()", "modifiers": "private", "return": "FetchAttributes", "signature": "FetchAttributes getFetchAttributes()", "full_signature": "private FetchAttributes getFetchAttributes()", "class_method_signature": "ScriptStrategy.getFetchAttributes()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/ScriptStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "body": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        // This should be done in the validate, but there we do not\n        // have the node to check if an inline script exists.\n        final String script = node.getTextContent().trim();\n        if ((script.length() == 0) && (src == null)) {\n            throw new BadFetchError(\n                    \"Exactly one of \\\"src\\\", \\\"srcexpr\\\", or an inline script \"\n                            + \"must be specified!\");\n        }\n\n        final DataModel model = context.getDataModel();\n        if (src == null) {\n            processInternalScript(script, model);\n        } else {\n            processExternalScript(context, model);\n        }\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "ScriptStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["trim", "getTextContent", "length", "getDataModel", "processInternalScript", "processExternalScript"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}