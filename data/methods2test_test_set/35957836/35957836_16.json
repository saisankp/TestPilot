{"test_class": {"identifier": "StatisticsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String ORGANIZATION1 = \"org1\", ORGANIZATION2 = \"org2\", ORGANIZATION3 = \"org3\";", "modifier": "private final", "type": "String", "declarator": "ORGANIZATION1 = \"org1\"", "var_name": "ORGANIZATION1"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/service/StatisticsServiceTest.java"}, "test_case": {"identifier": "testAggregateEmptyStatistics", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testAggregateEmptyStatistics() {\n\t\tStatisticsService.aggregateStatistics(new ArrayList<>());\n\t}", "signature": "void testAggregateEmptyStatistics()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testAggregateEmptyStatistics()", "class_method_signature": "StatisticsServiceTest.testAggregateEmptyStatistics()", "testcase": true, "constructor": false, "invocations": ["aggregateStatistics"]}, "focal_class": {"identifier": "StatisticsService", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getStatistics", "parameters": "(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "modifiers": "public static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "full_signature": "public static Collection<Statistics> getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "class_method_signature": "StatisticsService.getStatistics(StatisticsRepository repository, Collection<String> organizations, String startDate, String endDate)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsByDate", "parameters": "(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "modifiers": "private static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "full_signature": "private static Collection<Statistics> getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "class_method_signature": "StatisticsService.getStatisticsByDate(StatisticsRepository repository, Collection<String> orgs, String startDate, String endDate)", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "modifiers": "private static", "return": "List<List<Statistics>>", "signature": "List<List<Statistics>> collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "full_signature": "private static List<List<Statistics>> collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "class_method_signature": "StatisticsService.collectStatistics(StatisticsRepository repository, Collection<String> organizations, Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "aggregateStatistics", "parameters": "(Collection<Statistics> statistics)", "modifiers": "public static", "return": "Statistics", "signature": "Statistics aggregateStatistics(Collection<Statistics> statistics)", "full_signature": "public static Statistics aggregateStatistics(Collection<Statistics> statistics)", "class_method_signature": "StatisticsService.aggregateStatistics(Collection<Statistics> statistics)", "testcase": false, "constructor": false}, {"identifier": "aggregateHistoricalStatistics", "parameters": "(List<List<Statistics>> statisticsLists)", "modifiers": "public static", "return": "Collection<Statistics>", "signature": "Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "full_signature": "public static Collection<Statistics> aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "class_method_signature": "StatisticsService.aggregateHistoricalStatistics(List<List<Statistics>> statisticsLists)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer sum, Integer value)", "modifiers": "private static", "return": "Integer", "signature": "Integer add(Integer sum, Integer value)", "full_signature": "private static Integer add(Integer sum, Integer value)", "class_method_signature": "StatisticsService.add(Integer sum, Integer value)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/service/StatisticsService.java"}, "focal_method": {"identifier": "aggregateStatistics", "parameters": "(Collection<Statistics> statistics)", "modifiers": "public static", "return": "Statistics", "body": "public static Statistics aggregateStatistics(Collection<Statistics> statistics) throws IllegalArgumentException{\n\t\t\n\t\tif(statistics==null || statistics.size()==0){\n\t\t\tthrow new IllegalArgumentException(\"Illegal number of statistics to aggregate\");\n\t\t}\n\t\t\n\t\tString delimeter = \", \";\n\n\t\tif(statistics.size()==1) return statistics.iterator().next();\n\t\t\n\t\tInteger contributers = 0, externalContributors = 0, forks = 0, size = 0, stars = 0, members = 0, privateProjects = 0, languages = 0,\n\t\t\t\tpublicProjects = 0, tags = 0, teams = 0;\n\n\t\t\n\t\tDate snapshotDate = null;\n\n\t\tSet<String> organizationList = new HashSet<>();\n\t\t\n\t\t//aggregate data\n\t\tfor (Statistics s : statistics) {\n\t\t\tcontributers = add(contributers, s.getAllContributorsCount());\n\t\t\texternalContributors = add(externalContributors, s.getExternalContributorsCount());\n\t\t\tforks = add(forks, s.getAllForksCount());\n\t\t\tsize = add(size, s.getAllSizeCount());\n\t\t\tstars = add(stars, s.getAllStarsCount());\n\t\t\tmembers = add(members, s.getMembersCount());\n\t\t\tprivateProjects = add(privateProjects, s.getPrivateProjectCount());\n\t\t\tlanguages = add(languages, s.getProgramLanguagesCount());\n\t\t\tpublicProjects = add(publicProjects, s.getPublicProjectCount());\n\t\t\ttags = add(tags, s.getTagsCount());\n\t\t\tteams = add(teams, s.getTeamsCount());\n\n\t\t\torganizationList.add(s.getOrganizationName());\n\t\t\t\n\t\t\t\n\t\t\tif(snapshotDate==null) snapshotDate = s.getSnapshotDate();\n\t\t\t\n\t\t\telse if(snapshotDate.before(s.getSnapshotDate())) snapshotDate = s.getSnapshotDate();\n\t\t}\n\t\t\n\t\tString organizations = null;\n\t\t\n\t\tfor(String org : organizationList){\n\t\t\tif (organizations == null)\n\t\t\torganizations = org;\n\t\telse\n\t\t\torganizations += delimeter + org;\n\t\t}\n\t\t\n\t\t//save aggregated values in new statistics object\n\t\tStatistics s = new Statistics(new Double(Math.random()*10000).intValue() , snapshotDate);\n\t\ts.setAllContributorsCount(contributers);\n\t\ts.setExternalContributorsCount(externalContributors);\n\t\ts.setAllForksCount(forks);\n\t\ts.setAllSizeCount(size);\n\t\ts.setAllStarsCount(stars);\n\t\ts.setMembersCount(members);\n\t\ts.setOrganizationName(organizations);\n\t\ts.setPrivateProjectCount(privateProjects);\n\t\ts.setProgramLanguagesCount(languages);\n\t\ts.setPublicProjectCount(publicProjects);\n\t\ts.setTagsCount(tags);\n\t\ts.setTeamsCount(teams);\n\n\t\treturn s;\n\t}", "signature": "Statistics aggregateStatistics(Collection<Statistics> statistics)", "full_signature": "public static Statistics aggregateStatistics(Collection<Statistics> statistics)", "class_method_signature": "StatisticsService.aggregateStatistics(Collection<Statistics> statistics)", "testcase": false, "constructor": false, "invocations": ["size", "size", "next", "iterator", "add", "getAllContributorsCount", "add", "getExternalContributorsCount", "add", "getAllForksCount", "add", "getAllSizeCount", "add", "getAllStarsCount", "add", "getMembersCount", "add", "getPrivateProjectCount", "add", "getProgramLanguagesCount", "add", "getPublicProjectCount", "add", "getTagsCount", "add", "getTeamsCount", "add", "getOrganizationName", "getSnapshotDate", "before", "getSnapshotDate", "getSnapshotDate", "intValue", "random", "setAllContributorsCount", "setExternalContributorsCount", "setAllForksCount", "setAllSizeCount", "setAllStarsCount", "setMembersCount", "setOrganizationName", "setPrivateProjectCount", "setProgramLanguagesCount", "setPublicProjectCount", "setTagsCount", "setTeamsCount"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}