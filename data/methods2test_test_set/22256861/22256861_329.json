{"test_class": {"identifier": "OWTClassificationOpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float[] MERIS_WAVELENGTHS = new float[]{412, 442, 490, 510, 560, 620, 665, 681, 709, 754, 761, 779, 865, 885, 900};", "modifier": "private static final", "type": "float[]", "declarator": "MERIS_WAVELENGTHS = new float[]{412, 442, 490, 510, 560, 620, 665, 681, 709, 754, 761, 779, 865, 885, 900}", "var_name": "MERIS_WAVELENGTHS"}], "file": "s3tbx-owt-classification/src/test/java/org/esa/s3tbx/owt/OWTClassificationOpTest.java"}, "test_case": {"identifier": "testGetBestBandName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBestBandName() throws Exception {\n        final Band band1 = new Band(\"reflec_10\", ProductData.TYPE_FLOAT32, 10, 10);\n        band1.setSpectralBandIndex(1);\n        band1.setSpectralWavelength(195.0f);\n        final Band band2 = new Band(\"reflec_20\", ProductData.TYPE_FLOAT32, 10, 10);\n        band2.setSpectralBandIndex(2);\n        band2.setSpectralWavelength(204.0f);\n\n        final String bestBandName1 = OWTClassificationOp.getBestBandName(\"reflec\", 198, new Band[]{band1, band2});\n        final String bestBandName2 = OWTClassificationOp.getBestBandName(\"reflec\", 201, new Band[]{band1, band2});\n\n        assertEquals(\"reflec_10\", bestBandName1);\n        assertEquals(\"reflec_20\", bestBandName2);\n    }", "signature": "void testGetBestBandName()", "full_signature": "@Test public void testGetBestBandName()", "class_method_signature": "OWTClassificationOpTest.testGetBestBandName()", "testcase": true, "constructor": false, "invocations": ["setSpectralBandIndex", "setSpectralWavelength", "setSpectralBandIndex", "setSpectralWavelength", "getBestBandName", "getBestBandName", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "OWTClassificationOp", "superclass": "extends PixelOperator", "interfaces": "", "fields": [{"original_string": "private static final int DOMINANT_CLASS_NO_DATA_VALUE = -1;", "modifier": "private static final", "type": "int", "declarator": "DOMINANT_CLASS_NO_DATA_VALUE = -1", "var_name": "DOMINANT_CLASS_NO_DATA_VALUE"}, {"original_string": "private static final int CLASS_SUM_NO_DATA_VALUE = -1;", "modifier": "private static final", "type": "int", "declarator": "CLASS_SUM_NO_DATA_VALUE = -1", "var_name": "CLASS_SUM_NO_DATA_VALUE"}, {"original_string": "@SourceProduct(alias = \"source\")\n    private Product sourceProduct;", "modifier": "@SourceProduct(alias = \"source\")\n    private", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@Parameter(label = \"OWT Type\", defaultValue = \"COASTAL\")\n    private OWT_TYPE owtType;", "modifier": "@Parameter(label = \"OWT Type\", defaultValue = \"COASTAL\")\n    private", "type": "OWT_TYPE", "declarator": "owtType", "var_name": "owtType"}, {"original_string": "@Parameter(defaultValue = \"reflec\")\n    private String reflectancesPrefix;", "modifier": "@Parameter(defaultValue = \"reflec\")\n    private", "type": "String", "declarator": "reflectancesPrefix", "var_name": "reflectancesPrefix"}, {"original_string": "@Parameter(defaultValue = \"RADIANCE_REFLECTANCES\")\n    private ReflectanceEnum inputReflectanceIs;", "modifier": "@Parameter(defaultValue = \"RADIANCE_REFLECTANCES\")\n    private", "type": "ReflectanceEnum", "declarator": "inputReflectanceIs", "var_name": "inputReflectanceIs"}, {"original_string": "@Parameter(defaultValue = \"false\")\n    private boolean writeInputReflectances;", "modifier": "@Parameter(defaultValue = \"false\")\n    private", "type": "boolean", "declarator": "writeInputReflectances", "var_name": "writeInputReflectances"}, {"original_string": "private OWTClassification owtClassification;", "modifier": "private", "type": "OWTClassification", "declarator": "owtClassification", "var_name": "owtClassification"}, {"original_string": "private Auxdata auxdata;", "modifier": "private", "type": "Auxdata", "declarator": "auxdata", "var_name": "auxdata"}], "methods": [{"identifier": "setTargetSamplesToInvalid", "parameters": "(WritableSample[] targetSamples, int numClassSamples)", "modifiers": "private", "return": "void", "signature": "void setTargetSamplesToInvalid(WritableSample[] targetSamples, int numClassSamples)", "full_signature": "private void setTargetSamplesToInvalid(WritableSample[] targetSamples, int numClassSamples)", "class_method_signature": "OWTClassificationOp.setTargetSamplesToInvalid(WritableSample[] targetSamples, int numClassSamples)", "testcase": false, "constructor": false}, {"identifier": "normalizeSpectra", "parameters": "(double[] rrsBelowWater)", "modifiers": "private", "return": "void", "signature": "void normalizeSpectra(double[] rrsBelowWater)", "full_signature": "private void normalizeSpectra(double[] rrsBelowWater)", "class_method_signature": "OWTClassificationOp.normalizeSpectra(double[] rrsBelowWater)", "testcase": false, "constructor": false}, {"identifier": "addClassBands", "parameters": "(String bandNamePrefix, Product targetProduct)", "modifiers": "private", "return": "void", "signature": "void addClassBands(String bandNamePrefix, Product targetProduct)", "full_signature": "private void addClassBands(String bandNamePrefix, Product targetProduct)", "class_method_signature": "OWTClassificationOp.addClassBands(String bandNamePrefix, Product targetProduct)", "testcase": false, "constructor": false}, {"identifier": "getSourceBandName", "parameters": "(String reflectancesPrefix, float wavelength)", "modifiers": "private", "return": "String", "signature": "String getSourceBandName(String reflectancesPrefix, float wavelength)", "full_signature": "private String getSourceBandName(String reflectancesPrefix, float wavelength)", "class_method_signature": "OWTClassificationOp.getSourceBandName(String reflectancesPrefix, float wavelength)", "testcase": false, "constructor": false}, {"identifier": "mustDefineTargetSample", "parameters": "(Band band)", "modifiers": "private static", "return": "boolean", "signature": "boolean mustDefineTargetSample(Band band)", "full_signature": "private static boolean mustDefineTargetSample(Band band)", "class_method_signature": "OWTClassificationOp.mustDefineTargetSample(Band band)", "testcase": false, "constructor": false}, {"identifier": "areSourceSamplesValid", "parameters": "(int x, int y, Sample[] sourceSamples)", "modifiers": "private", "return": "boolean", "signature": "boolean areSourceSamplesValid(int x, int y, Sample[] sourceSamples)", "full_signature": "private boolean areSourceSamplesValid(int x, int y, Sample[] sourceSamples)", "class_method_signature": "OWTClassificationOp.areSourceSamplesValid(int x, int y, Sample[] sourceSamples)", "testcase": false, "constructor": false}, {"identifier": "convertToSubsurfaceWaterRrs", "parameters": "(double merisL2Reflec)", "modifiers": "private", "return": "double", "signature": "double convertToSubsurfaceWaterRrs(double merisL2Reflec)", "full_signature": "private double convertToSubsurfaceWaterRrs(double merisL2Reflec)", "class_method_signature": "OWTClassificationOp.convertToSubsurfaceWaterRrs(double merisL2Reflec)", "testcase": false, "constructor": false}, {"identifier": "trapz", "parameters": "(double[] x, double[] y)", "modifiers": "static", "return": "double", "signature": "double trapz(double[] x, double[] y)", "full_signature": "static double trapz(double[] x, double[] y)", "class_method_signature": "OWTClassificationOp.trapz(double[] x, double[] y)", "testcase": false, "constructor": false}, {"identifier": "normalizeClassMemberships", "parameters": "(double[] memberships)", "modifiers": "static", "return": "double[]", "signature": "double[] normalizeClassMemberships(double[] memberships)", "full_signature": "static double[] normalizeClassMemberships(double[] memberships)", "class_method_signature": "OWTClassificationOp.normalizeClassMemberships(double[] memberships)", "testcase": false, "constructor": false}, {"identifier": "getBestBandName", "parameters": "(String reflectancesPrefix, float wavelength, Band[] bands)", "modifiers": "static", "return": "String", "signature": "String getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "full_signature": "static String getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "class_method_signature": "OWTClassificationOp.getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "testcase": false, "constructor": false}, {"identifier": "prepareInputs", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void prepareInputs()", "full_signature": "@Override protected void prepareInputs()", "class_method_signature": "OWTClassificationOp.prepareInputs()", "testcase": false, "constructor": false}, {"identifier": "configureTargetProduct", "parameters": "(ProductConfigurer productConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetProduct(ProductConfigurer productConfigurer)", "full_signature": "@Override protected void configureTargetProduct(ProductConfigurer productConfigurer)", "class_method_signature": "OWTClassificationOp.configureTargetProduct(ProductConfigurer productConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureSourceSamples", "parameters": "(SourceSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "class_method_signature": "OWTClassificationOp.configureSourceSamples(SourceSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "configureTargetSamples", "parameters": "(TargetSampleConfigurer sampleConfigurer)", "modifiers": "@Override protected", "return": "void", "signature": "void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "full_signature": "@Override protected void configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "class_method_signature": "OWTClassificationOp.configureTargetSamples(TargetSampleConfigurer sampleConfigurer)", "testcase": false, "constructor": false}, {"identifier": "computePixel", "parameters": "(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "modifiers": "@Override protected", "return": "void", "signature": "void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "full_signature": "@Override protected void computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "class_method_signature": "OWTClassificationOp.computePixel(int x, int y, Sample[] sourceSamples, WritableSample[] targetSamples)", "testcase": false, "constructor": false}], "file": "s3tbx-owt-classification/src/main/java/org/esa/s3tbx/owt/OWTClassificationOp.java"}, "focal_method": {"identifier": "getBestBandName", "parameters": "(String reflectancesPrefix, float wavelength, Band[] bands)", "modifiers": "static", "return": "String", "body": "static String getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands) {\n        String bestBandName = null;\n        double maxDistance = 10.0;\n        double wavelengthDist = Double.MAX_VALUE;\n        for (Band band : bands) {\n            float spectralWavelength = band.getSpectralWavelength();\n            boolean isSpectralBand = spectralWavelength > 0;\n            if (isSpectralBand && band.getName().startsWith(reflectancesPrefix)) {\n                float currentWavelengthDist = Math.abs(spectralWavelength - wavelength);\n                if (currentWavelengthDist < wavelengthDist && currentWavelengthDist < maxDistance) {\n                    wavelengthDist = currentWavelengthDist;\n                    bestBandName = band.getName();\n                }\n            }\n        }\n        return bestBandName;\n    }", "signature": "String getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "full_signature": "static String getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "class_method_signature": "OWTClassificationOp.getBestBandName(String reflectancesPrefix, float wavelength, Band[] bands)", "testcase": false, "constructor": false, "invocations": ["getSpectralWavelength", "startsWith", "getName", "abs", "getName"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}