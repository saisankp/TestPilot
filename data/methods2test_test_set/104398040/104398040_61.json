{"test_class": {"identifier": "XmlXPathRetrieveTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/xml/XmlXPathRetrieveTest.java"}, "test_case": {"identifier": "invalidXPathExpressionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidXPathExpressionTest() {\n        final String XPATH_EXPRESSION = \"@#$123456\";\n        try {\n            new XmlXPathRetrieve().setXPathExpression(XPATH_EXPRESSION);\n            fail(\"Exception was supposed to be thrown but was not\");\n        } catch (TransformationDefinitionException e) {\n            assertEquals(e.getMessage(), \"XPath expression '@#$123456' didn't compile correctly.\");\n        }\n    }", "signature": "void invalidXPathExpressionTest()", "full_signature": "@Test public void invalidXPathExpressionTest()", "class_method_signature": "XmlXPathRetrieveTest.invalidXPathExpressionTest()", "testcase": true, "constructor": false, "invocations": ["setXPathExpression", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "XmlXPathRetrieve", "superclass": "extends TransformationUtility<XmlXPathRetrieve>", "interfaces": "", "fields": [{"original_string": "private String xpathExpressionString;", "modifier": "private", "type": "String", "declarator": "xpathExpressionString", "var_name": "xpathExpressionString"}, {"original_string": "private XPathExpression xpathExpression;", "modifier": "private", "type": "XPathExpression", "declarator": "xpathExpression", "var_name": "xpathExpression"}, {"original_string": "private QName returnDataType;", "modifier": "private", "type": "QName", "declarator": "returnDataType", "var_name": "returnDataType"}, {"original_string": "private static final String DESCRIPTION = \"Retrieve the XML data based on the given XPath query %s and XML file %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Retrieve the XML data based on the given XPath query %s and XML file %s\"", "var_name": "DESCRIPTION"}], "methods": [{"identifier": "XmlXPathRetrieve", "parameters": "()", "modifiers": "public", "return": "", "signature": " XmlXPathRetrieve()", "full_signature": "public  XmlXPathRetrieve()", "class_method_signature": "XmlXPathRetrieve.XmlXPathRetrieve()", "testcase": false, "constructor": true}, {"identifier": "XmlXPathRetrieve", "parameters": "(String xpathExpressionString)", "modifiers": "public", "return": "", "signature": " XmlXPathRetrieve(String xpathExpressionString)", "full_signature": "public  XmlXPathRetrieve(String xpathExpressionString)", "class_method_signature": "XmlXPathRetrieve.XmlXPathRetrieve(String xpathExpressionString)", "testcase": false, "constructor": true}, {"identifier": "XmlXPathRetrieve", "parameters": "(String xpathExpressionString, QName returnDataType)", "modifiers": "public", "return": "", "signature": " XmlXPathRetrieve(String xpathExpressionString, QName returnDataType)", "full_signature": "public  XmlXPathRetrieve(String xpathExpressionString, QName returnDataType)", "class_method_signature": "XmlXPathRetrieve.XmlXPathRetrieve(String xpathExpressionString, QName returnDataType)", "testcase": false, "constructor": true}, {"identifier": "setXPathExpression", "parameters": "(String xpathExpressionString)", "modifiers": "public", "return": "XmlXPathRetrieve", "signature": "XmlXPathRetrieve setXPathExpression(String xpathExpressionString)", "full_signature": "public XmlXPathRetrieve setXPathExpression(String xpathExpressionString)", "class_method_signature": "XmlXPathRetrieve.setXPathExpression(String xpathExpressionString)", "testcase": false, "constructor": false}, {"identifier": "setXPathExpression", "parameters": "(String xpathExpressionString, QName returnDataType)", "modifiers": "public", "return": "XmlXPathRetrieve", "signature": "XmlXPathRetrieve setXPathExpression(String xpathExpressionString, QName returnDataType)", "full_signature": "public XmlXPathRetrieve setXPathExpression(String xpathExpressionString, QName returnDataType)", "class_method_signature": "XmlXPathRetrieve.setXPathExpression(String xpathExpressionString, QName returnDataType)", "testcase": false, "constructor": false}, {"identifier": "getXPathExpressionString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getXPathExpressionString()", "full_signature": "public String getXPathExpressionString()", "class_method_signature": "XmlXPathRetrieve.getXPathExpressionString()", "testcase": false, "constructor": false}, {"identifier": "getReturnDataType", "parameters": "()", "modifiers": "public", "return": "QName", "signature": "QName getReturnDataType()", "full_signature": "public QName getReturnDataType()", "class_method_signature": "XmlXPathRetrieve.getReturnDataType()", "testcase": false, "constructor": false}, {"identifier": "setReturnDataType", "parameters": "(QName returnDataType)", "modifiers": "public", "return": "void", "signature": "void setReturnDataType(QName returnDataType)", "full_signature": "public void setReturnDataType(QName returnDataType)", "class_method_signature": "XmlXPathRetrieve.setReturnDataType(QName returnDataType)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "XmlXPathRetrieve.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TUExecutionResult", "signature": "TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TUExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "XmlXPathRetrieve.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "checkXPathCompile", "parameters": "(String expression)", "modifiers": "private", "return": "XPathExpression", "signature": "XPathExpression checkXPathCompile(String expression)", "full_signature": "private XPathExpression checkXPathCompile(String expression)", "class_method_signature": "XmlXPathRetrieve.checkXPathCompile(String expression)", "testcase": false, "constructor": false}, {"identifier": "isReturnTypeValid", "parameters": "(QName returnType)", "modifiers": "private", "return": "boolean", "signature": "boolean isReturnTypeValid(QName returnType)", "full_signature": "private boolean isReturnTypeValid(QName returnType)", "class_method_signature": "XmlXPathRetrieve.isReturnTypeValid(QName returnType)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/xml/XmlXPathRetrieve.java"}, "focal_method": {"identifier": "setXPathExpression", "parameters": "(String xpathExpressionString)", "modifiers": "public", "return": "XmlXPathRetrieve", "body": "public XmlXPathRetrieve setXPathExpression(String xpathExpressionString) {\n        setXPathExpression(xpathExpressionString, returnDataType);\n        return this;\n    }", "signature": "XmlXPathRetrieve setXPathExpression(String xpathExpressionString)", "full_signature": "public XmlXPathRetrieve setXPathExpression(String xpathExpressionString)", "class_method_signature": "XmlXPathRetrieve.setXPathExpression(String xpathExpressionString)", "testcase": false, "constructor": false, "invocations": ["setXPathExpression"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}