{"test_class": {"identifier": "PrefixIndexTest", "superclass": "", "interfaces": "", "fields": [], "file": "splitmap/src/test/java/com/openkappa/splitmap/PrefixIndexTest.java"}, "test_case": {"identifier": "ifValueDoesntExisteGetNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void ifValueDoesntExisteGetNull() {\n    PrefixIndex<String> index = new PrefixIndex<>();\n    assertNull(index.get((short) 0));\n  }", "signature": "void ifValueDoesntExisteGetNull()", "full_signature": "@Test public void ifValueDoesntExisteGetNull()", "class_method_signature": "PrefixIndexTest.ifValueDoesntExisteGetNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "get"]}, "focal_class": {"identifier": "PrefixIndex", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int PARTITIONS;", "modifier": "static final", "type": "int", "declarator": "PARTITIONS", "var_name": "PARTITIONS"}, {"original_string": "static final int PARTITION_SIZE;", "modifier": "static final", "type": "int", "declarator": "PARTITION_SIZE", "var_name": "PARTITION_SIZE"}, {"original_string": "private static final long[] PROTOTYPE = new long[1 << 10];", "modifier": "private static final", "type": "long[]", "declarator": "PROTOTYPE = new long[1 << 10]", "var_name": "PROTOTYPE"}, {"original_string": "private final long[] keys;", "modifier": "private final", "type": "long[]", "declarator": "keys", "var_name": "keys"}, {"original_string": "private final ChunkedArray<T> values;", "modifier": "private final", "type": "ChunkedArray<T>", "declarator": "values", "var_name": "values"}, {"original_string": "private final int offset;", "modifier": "private final", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private final int range;", "modifier": "private final", "type": "int", "declarator": "range", "var_name": "range"}], "methods": [{"identifier": "PrefixIndex", "parameters": "()", "modifiers": "public", "return": "", "signature": " PrefixIndex()", "full_signature": "public  PrefixIndex()", "class_method_signature": "PrefixIndex.PrefixIndex()", "testcase": false, "constructor": true}, {"identifier": "PrefixIndex", "parameters": "(long[] keys)", "modifiers": "public", "return": "", "signature": " PrefixIndex(long[] keys)", "full_signature": "public  PrefixIndex(long[] keys)", "class_method_signature": "PrefixIndex.PrefixIndex(long[] keys)", "testcase": false, "constructor": true}, {"identifier": "PrefixIndex", "parameters": "(long[] keys, ChunkedArray<T> values, int offset, int range)", "modifiers": "", "return": "", "signature": " PrefixIndex(long[] keys, ChunkedArray<T> values, int offset, int range)", "full_signature": "  PrefixIndex(long[] keys, ChunkedArray<T> values, int offset, int range)", "class_method_signature": "PrefixIndex.PrefixIndex(long[] keys, ChunkedArray<T> values, int offset, int range)", "testcase": false, "constructor": true}, {"identifier": "PrefixIndex", "parameters": "(int offset, int range)", "modifiers": "", "return": "", "signature": " PrefixIndex(int offset, int range)", "full_signature": "  PrefixIndex(int offset, int range)", "class_method_signature": "PrefixIndex.PrefixIndex(int offset, int range)", "testcase": false, "constructor": true}, {"identifier": "getMinChunkIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMinChunkIndex()", "full_signature": "public int getMinChunkIndex()", "class_method_signature": "PrefixIndex.getMinChunkIndex()", "testcase": false, "constructor": false}, {"identifier": "getMaxChunkIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxChunkIndex()", "full_signature": "public int getMaxChunkIndex()", "class_method_signature": "PrefixIndex.getMaxChunkIndex()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "PrefixIndex.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(short key)", "modifiers": "public", "return": "T", "signature": "T get(short key)", "full_signature": "public T get(short key)", "class_method_signature": "PrefixIndex.get(short key)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(short key, T value)", "modifiers": "public", "return": "void", "signature": "void insert(short key, T value)", "full_signature": "public void insert(short key, T value)", "class_method_signature": "PrefixIndex.insert(short key, T value)", "testcase": false, "constructor": false}, {"identifier": "streamUniformPartitions", "parameters": "()", "modifiers": "public", "return": "Stream<PrefixIndex<T>>", "signature": "Stream<PrefixIndex<T>> streamUniformPartitions()", "full_signature": "public Stream<PrefixIndex<T>> streamUniformPartitions()", "class_method_signature": "PrefixIndex.streamUniformPartitions()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(KeyValueConsumer<T> consumer)", "modifiers": "public", "return": "void", "signature": "void forEach(KeyValueConsumer<T> consumer)", "full_signature": "public void forEach(KeyValueConsumer<T> consumer)", "class_method_signature": "PrefixIndex.forEach(KeyValueConsumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(ReductionProcedure<Model, Output, Result, T> procedure)", "modifiers": "public", "return": "ReductionContext<Model, Output, Result>", "signature": "ReductionContext<Model, Output, Result> reduce(ReductionProcedure<Model, Output, Result, T> procedure)", "full_signature": "public ReductionContext<Model, Output, Result> reduce(ReductionProcedure<Model, Output, Result, T> procedure)", "class_method_signature": "PrefixIndex.reduce(ReductionProcedure<Model, Output, Result, T> procedure)", "testcase": false, "constructor": false}, {"identifier": "reduceDouble", "parameters": "(ReductionProcedure<?, Output, Double, T> procedure)", "modifiers": "public", "return": "double", "signature": "double reduceDouble(ReductionProcedure<?, Output, Double, T> procedure)", "full_signature": "public double reduceDouble(ReductionProcedure<?, Output, Double, T> procedure)", "class_method_signature": "PrefixIndex.reduceDouble(ReductionProcedure<?, Output, Double, T> procedure)", "testcase": false, "constructor": false}, {"identifier": "reduceDouble", "parameters": "(double initial, IntFunction<U> mapKey, ToDoubleBiFunction<T, U> mapValue, DoubleBinaryOperator reduce)", "modifiers": "public", "return": "double", "signature": "double reduceDouble(double initial, IntFunction<U> mapKey, ToDoubleBiFunction<T, U> mapValue, DoubleBinaryOperator reduce)", "full_signature": "public double reduceDouble(double initial, IntFunction<U> mapKey, ToDoubleBiFunction<T, U> mapValue, DoubleBinaryOperator reduce)", "class_method_signature": "PrefixIndex.reduceDouble(double initial, IntFunction<U> mapKey, ToDoubleBiFunction<T, U> mapValue, DoubleBinaryOperator reduce)", "testcase": false, "constructor": false}, {"identifier": "reduceDouble", "parameters": "(double initial, ToDoubleFunction<T> map, DoubleBinaryOperator reduce)", "modifiers": "public", "return": "double", "signature": "double reduceDouble(double initial, ToDoubleFunction<T> map, DoubleBinaryOperator reduce)", "full_signature": "public double reduceDouble(double initial, ToDoubleFunction<T> map, DoubleBinaryOperator reduce)", "class_method_signature": "PrefixIndex.reduceDouble(double initial, ToDoubleFunction<T> map, DoubleBinaryOperator reduce)", "testcase": false, "constructor": false}, {"identifier": "reduceLong", "parameters": "(ReductionProcedure<?, Output, Long, T> procedure)", "modifiers": "public", "return": "long", "signature": "long reduceLong(ReductionProcedure<?, Output, Long, T> procedure)", "full_signature": "public long reduceLong(ReductionProcedure<?, Output, Long, T> procedure)", "class_method_signature": "PrefixIndex.reduceLong(ReductionProcedure<?, Output, Long, T> procedure)", "testcase": false, "constructor": false}, {"identifier": "reduceLong", "parameters": "(long initial, ToLongFunction<T> map, LongBinaryOperator reduce)", "modifiers": "public", "return": "long", "signature": "long reduceLong(long initial, ToLongFunction<T> map, LongBinaryOperator reduce)", "full_signature": "public long reduceLong(long initial, ToLongFunction<T> map, LongBinaryOperator reduce)", "class_method_signature": "PrefixIndex.reduceLong(long initial, ToLongFunction<T> map, LongBinaryOperator reduce)", "testcase": false, "constructor": false}, {"identifier": "reduceInt", "parameters": "(ReductionProcedure<?, Output, Integer, T> procedure)", "modifiers": "public", "return": "int", "signature": "int reduceInt(ReductionProcedure<?, Output, Integer, T> procedure)", "full_signature": "public int reduceInt(ReductionProcedure<?, Output, Integer, T> procedure)", "class_method_signature": "PrefixIndex.reduceInt(ReductionProcedure<?, Output, Integer, T> procedure)", "testcase": false, "constructor": false}, {"identifier": "reduceInt", "parameters": "(int initial, ToIntFunction<T> map, IntBinaryOperator reduce)", "modifiers": "public", "return": "int", "signature": "int reduceInt(int initial, ToIntFunction<T> map, IntBinaryOperator reduce)", "full_signature": "public int reduceInt(int initial, ToIntFunction<T> map, IntBinaryOperator reduce)", "class_method_signature": "PrefixIndex.reduceInt(int initial, ToIntFunction<T> map, IntBinaryOperator reduce)", "testcase": false, "constructor": false}, {"identifier": "writeChunk", "parameters": "(int wordIndex, long word, T[] chunk)", "modifiers": "public", "return": "void", "signature": "void writeChunk(int wordIndex, long word, T[] chunk)", "full_signature": "public void writeChunk(int wordIndex, long word, T[] chunk)", "class_method_signature": "PrefixIndex.writeChunk(int wordIndex, long word, T[] chunk)", "testcase": false, "constructor": false}, {"identifier": "transferChunk", "parameters": "(int wordIndex, long word, T[] chunk)", "modifiers": "public", "return": "void", "signature": "void transferChunk(int wordIndex, long word, T[] chunk)", "full_signature": "public void transferChunk(int wordIndex, long word, T[] chunk)", "class_method_signature": "PrefixIndex.transferChunk(int wordIndex, long word, T[] chunk)", "testcase": false, "constructor": false}, {"identifier": "computeKeyWord", "parameters": "(int wordIndex, long value, LongBinaryOperator op)", "modifiers": "public", "return": "long", "signature": "long computeKeyWord(int wordIndex, long value, LongBinaryOperator op)", "full_signature": "public long computeKeyWord(int wordIndex, long value, LongBinaryOperator op)", "class_method_signature": "PrefixIndex.computeKeyWord(int wordIndex, long value, LongBinaryOperator op)", "testcase": false, "constructor": false}, {"identifier": "readKeyWord", "parameters": "(int wordIndex)", "modifiers": "public", "return": "long", "signature": "long readKeyWord(int wordIndex)", "full_signature": "public long readKeyWord(int wordIndex)", "class_method_signature": "PrefixIndex.readKeyWord(int wordIndex)", "testcase": false, "constructor": false}, {"identifier": "readChunk", "parameters": "(int chunkIndex, T[] ouptut)", "modifiers": "public", "return": "boolean", "signature": "boolean readChunk(int chunkIndex, T[] ouptut)", "full_signature": "public boolean readChunk(int chunkIndex, T[] ouptut)", "class_method_signature": "PrefixIndex.readChunk(int chunkIndex, T[] ouptut)", "testcase": false, "constructor": false}, {"identifier": "getChunkNoCopy", "parameters": "(int chunkIndex)", "modifiers": "", "return": "T[]", "signature": "T[] getChunkNoCopy(int chunkIndex)", "full_signature": " T[] getChunkNoCopy(int chunkIndex)", "class_method_signature": "PrefixIndex.getChunkNoCopy(int chunkIndex)", "testcase": false, "constructor": false}], "file": "splitmap/src/main/java/com/openkappa/splitmap/PrefixIndex.java"}, "focal_method": {"identifier": "get", "parameters": "(short key)", "modifiers": "public", "return": "T", "body": "public T get(short key) {\n    int pos = key & 0xFFFF;\n    int wordIndex = pos >>> 6;\n    assert wordIndex >= offset && wordIndex <= offset + range;\n    if ((keys[wordIndex] & (1L << pos)) != 0) {\n      return values.get(pos);\n    }\n    return null;\n  }", "signature": "T get(short key)", "full_signature": "public T get(short key)", "class_method_signature": "PrefixIndex.get(short key)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 120205336, "url": "https://github.com/richardstartin/splitmap", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 253, "license": "licensed"}}