{"test_class": {"identifier": "AesEaxKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AesEaxKeyManager manager = new AesEaxKeyManager();", "modifier": "private final", "type": "AesEaxKeyManager", "declarator": "manager = new AesEaxKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<AesEaxKeyFormat, AesEaxKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<AesEaxKeyFormat, AesEaxKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}, {"original_string": "PublicTestVector[] publicTestVectors = {\n    new PublicTestVector(\n        \"Test Case 1\",\n        \"233952dee4d5ed5f9b9c6d6ff80ff478\",\n        \"\",\n        \"6bfb914fd07eae6b\",\n        \"62ec67f9c3a4a407fcb2a8c49031a8b3\",\n        \"\",\n        \"e037830e8389f27b025a2d6527e79d01\"),\n    new PublicTestVector(\n        \"Test Case 2\",\n        \"91945d3f4dcbee0bf45ef52255f095a4\",\n        \"f7fb\",\n        \"fa3bfd4806eb53fa\",\n        \"becaf043b0a23d843194ba972c66debd\",\n        \"19dd\",\n        \"5c4c9331049d0bdab0277408f67967e5\"),\n    new PublicTestVector(\n        \"Test Case 3\",\n        \"01f74ad64077f2e704c0f60ada3dd523\",\n        \"1a47cb4933\",\n        \"234a3463c1264ac6\",\n        \"70c3db4f0d26368400a10ed05d2bff5e\",\n        \"d851d5bae0\",\n        \"3a59f238a23e39199dc9266626c40f80\"),\n    new PublicTestVector(\n        \"Test Case 4\",\n        \"d07cf6cbb7f313bdde66b727afd3c5e8\",\n        \"481c9e39b1\",\n        \"33cce2eabff5a79d\",\n        \"8408dfff3c1a2b1292dc199e46b7d617\",\n        \"632a9d131a\",\n        \"d4c168a4225d8e1ff755939974a7bede\"),\n    new PublicTestVector(\n        \"Test Case 5\",\n        \"35b6d0580005bbc12b0587124557d2c2\",\n        \"40d0c07da5e4\",\n        \"aeb96eaebe2970e9\",\n        \"fdb6b06676eedc5c61d74276e1f8e816\",\n        \"071dfe16c675\",\n        \"cb0677e536f73afe6a14b74ee49844dd\"),\n    new PublicTestVector(\n        \"Test Case 6\",\n        \"bd8e6e11475e60b268784c38c62feb22\",\n        \"4de3b35c3fc039245bd1fb7d\",\n        \"d4482d1ca78dce0f\",\n        \"6eac5c93072d8e8513f750935e46da1b\",\n        \"835bb4f15d743e350e728414\",\n        \"abb8644fd6ccb86947c5e10590210a4f\"),\n    new PublicTestVector(\n        \"Test Case 7\",\n        \"7c77d6e813bed5ac98baa417477a2e7d\",\n        \"8b0a79306c9ce7ed99dae4f87f8dd61636\",\n        \"65d2017990d62528\",\n        \"1a8c98dcd73d38393b2bf1569deefc19\",\n        \"02083e3979da014812f59f11d52630da30\",\n        \"137327d10649b0aa6e1c181db617d7f2\"),\n    new PublicTestVector(\n        \"Test Case 8\",\n        \"5fff20cafab119ca2fc73549e20f5b0d\",\n        \"1bda122bce8a8dbaf1877d962b8592dd2d56\",\n        \"54b9f04e6a09189a\",\n        \"dde59b97d722156d4d9aff2bc7559826\",\n        \"2ec47b2c4954a489afc7ba4897edcdae8cc3\",\n        \"3b60450599bd02c96382902aef7f832a\"),\n    new PublicTestVector(\n        \"Test Case 9\",\n        \"a4a4782bcffd3ec5e7ef6d8c34a56123\",\n        \"6cf36720872b8513f6eab1a8a44438d5ef11\",\n        \"899a175897561d7e\",\n        \"b781fcf2f75fa5a8de97a9ca48e522ec\",\n        \"0de18fd0fdd91e7af19f1d8ee8733938b1e8\",\n        \"e7f6d2231618102fdb7fe55ff1991700\"),\n    new PublicTestVector(\n        \"Test Case 10\",\n        \"8395fcf1e95bebd697bd010bc766aac3\",\n        \"ca40d7446e545ffaed3bd12a740a659ffbbb3ceab7\",\n        \"126735fcc320d25a\",\n        \"22e7add93cfc6393c57ec0b3c17d6b44\",\n        \"cb8920f87a6c75cff39627b56e3ed197c552d295a7\",\n        \"cfc46afc253b4652b1af3795b124ab6e\"),\n  };", "modifier": "", "type": "PublicTestVector[]", "declarator": "publicTestVectors = {\n    new PublicTestVector(\n        \"Test Case 1\",\n        \"233952dee4d5ed5f9b9c6d6ff80ff478\",\n        \"\",\n        \"6bfb914fd07eae6b\",\n        \"62ec67f9c3a4a407fcb2a8c49031a8b3\",\n        \"\",\n        \"e037830e8389f27b025a2d6527e79d01\"),\n    new PublicTestVector(\n        \"Test Case 2\",\n        \"91945d3f4dcbee0bf45ef52255f095a4\",\n        \"f7fb\",\n        \"fa3bfd4806eb53fa\",\n        \"becaf043b0a23d843194ba972c66debd\",\n        \"19dd\",\n        \"5c4c9331049d0bdab0277408f67967e5\"),\n    new PublicTestVector(\n        \"Test Case 3\",\n        \"01f74ad64077f2e704c0f60ada3dd523\",\n        \"1a47cb4933\",\n        \"234a3463c1264ac6\",\n        \"70c3db4f0d26368400a10ed05d2bff5e\",\n        \"d851d5bae0\",\n        \"3a59f238a23e39199dc9266626c40f80\"),\n    new PublicTestVector(\n        \"Test Case 4\",\n        \"d07cf6cbb7f313bdde66b727afd3c5e8\",\n        \"481c9e39b1\",\n        \"33cce2eabff5a79d\",\n        \"8408dfff3c1a2b1292dc199e46b7d617\",\n        \"632a9d131a\",\n        \"d4c168a4225d8e1ff755939974a7bede\"),\n    new PublicTestVector(\n        \"Test Case 5\",\n        \"35b6d0580005bbc12b0587124557d2c2\",\n        \"40d0c07da5e4\",\n        \"aeb96eaebe2970e9\",\n        \"fdb6b06676eedc5c61d74276e1f8e816\",\n        \"071dfe16c675\",\n        \"cb0677e536f73afe6a14b74ee49844dd\"),\n    new PublicTestVector(\n        \"Test Case 6\",\n        \"bd8e6e11475e60b268784c38c62feb22\",\n        \"4de3b35c3fc039245bd1fb7d\",\n        \"d4482d1ca78dce0f\",\n        \"6eac5c93072d8e8513f750935e46da1b\",\n        \"835bb4f15d743e350e728414\",\n        \"abb8644fd6ccb86947c5e10590210a4f\"),\n    new PublicTestVector(\n        \"Test Case 7\",\n        \"7c77d6e813bed5ac98baa417477a2e7d\",\n        \"8b0a79306c9ce7ed99dae4f87f8dd61636\",\n        \"65d2017990d62528\",\n        \"1a8c98dcd73d38393b2bf1569deefc19\",\n        \"02083e3979da014812f59f11d52630da30\",\n        \"137327d10649b0aa6e1c181db617d7f2\"),\n    new PublicTestVector(\n        \"Test Case 8\",\n        \"5fff20cafab119ca2fc73549e20f5b0d\",\n        \"1bda122bce8a8dbaf1877d962b8592dd2d56\",\n        \"54b9f04e6a09189a\",\n        \"dde59b97d722156d4d9aff2bc7559826\",\n        \"2ec47b2c4954a489afc7ba4897edcdae8cc3\",\n        \"3b60450599bd02c96382902aef7f832a\"),\n    new PublicTestVector(\n        \"Test Case 9\",\n        \"a4a4782bcffd3ec5e7ef6d8c34a56123\",\n        \"6cf36720872b8513f6eab1a8a44438d5ef11\",\n        \"899a175897561d7e\",\n        \"b781fcf2f75fa5a8de97a9ca48e522ec\",\n        \"0de18fd0fdd91e7af19f1d8ee8733938b1e8\",\n        \"e7f6d2231618102fdb7fe55ff1991700\"),\n    new PublicTestVector(\n        \"Test Case 10\",\n        \"8395fcf1e95bebd697bd010bc766aac3\",\n        \"ca40d7446e545ffaed3bd12a740a659ffbbb3ceab7\",\n        \"126735fcc320d25a\",\n        \"22e7add93cfc6393c57ec0b3c17d6b44\",\n        \"cb8920f87a6c75cff39627b56e3ed197c552d295a7\",\n        \"cfc46afc253b4652b1af3795b124ab6e\"),\n  }", "var_name": "publicTestVectors"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AesEaxKeyManagerTest.java"}, "test_case": {"identifier": "testAes128EaxTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAes128EaxTemplate() throws Exception {\n    KeyTemplate template = AesEaxKeyManager.aes128EaxTemplate();\n    assertEquals(new AesEaxKeyManager().getKeyType(), template.getTypeUrl());\n    assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType());\n    AesEaxKeyFormat format =\n        AesEaxKeyFormat.parseFrom(\n            ByteString.copyFrom(template.getValue()), ExtensionRegistryLite.getEmptyRegistry());\n    assertEquals(16, format.getKeySize());\n    assertTrue(format.hasParams());\n    assertEquals(16, format.getParams().getIvSize());\n  }", "signature": "void testAes128EaxTemplate()", "full_signature": "@Test public void testAes128EaxTemplate()", "class_method_signature": "AesEaxKeyManagerTest.testAes128EaxTemplate()", "testcase": true, "constructor": false, "invocations": ["aes128EaxTemplate", "assertEquals", "getKeyType", "getTypeUrl", "assertEquals", "getOutputPrefixType", "parseFrom", "copyFrom", "getValue", "getEmptyRegistry", "assertEquals", "getKeySize", "assertTrue", "hasParams", "assertEquals", "getIvSize", "getParams"]}, "focal_class": {"identifier": "AesEaxKeyManager", "superclass": "extends KeyTypeManager<AesEaxKey>", "interfaces": "", "fields": [], "methods": [{"identifier": "AesEaxKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesEaxKeyManager()", "full_signature": "  AesEaxKeyManager()", "class_method_signature": "AesEaxKeyManager.AesEaxKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesEaxKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesEaxKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesEaxKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesEaxKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesEaxKey key)", "full_signature": "@Override public void validateKey(AesEaxKey key)", "class_method_signature": "AesEaxKeyManager.validateKey(AesEaxKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesEaxKey", "signature": "AesEaxKey parseKey(ByteString byteString)", "full_signature": "@Override public AesEaxKey parseKey(ByteString byteString)", "class_method_signature": "AesEaxKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesEaxKeyFormat, AesEaxKey>", "signature": "KeyFactory<AesEaxKeyFormat, AesEaxKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesEaxKeyFormat, AesEaxKey> keyFactory()", "class_method_signature": "AesEaxKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesEaxKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes128EaxTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes128EaxTemplate()", "full_signature": "public static final KeyTemplate aes128EaxTemplate()", "class_method_signature": "AesEaxKeyManager.aes128EaxTemplate()", "testcase": false, "constructor": false}, {"identifier": "rawAes128EaxTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawAes128EaxTemplate()", "full_signature": "public static final KeyTemplate rawAes128EaxTemplate()", "class_method_signature": "AesEaxKeyManager.rawAes128EaxTemplate()", "testcase": false, "constructor": false}, {"identifier": "aes256EaxTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256EaxTemplate()", "full_signature": "public static final KeyTemplate aes256EaxTemplate()", "class_method_signature": "AesEaxKeyManager.aes256EaxTemplate()", "testcase": false, "constructor": false}, {"identifier": "rawAes256EaxTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawAes256EaxTemplate()", "full_signature": "public static final KeyTemplate rawAes256EaxTemplate()", "class_method_signature": "AesEaxKeyManager.rawAes256EaxTemplate()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      int keySize, int ivSize, KeyTemplate.OutputPrefixType prefixType)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      int keySize, int ivSize, KeyTemplate.OutputPrefixType prefixType)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      int keySize, int ivSize, KeyTemplate.OutputPrefixType prefixType)", "class_method_signature": "AesEaxKeyManager.createKeyTemplate(\n      int keySize, int ivSize, KeyTemplate.OutputPrefixType prefixType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AesEaxKeyManager.java"}, "focal_method": {"identifier": "aes128EaxTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate aes128EaxTemplate() {\n    return createKeyTemplate(16, 16, KeyTemplate.OutputPrefixType.TINK);\n  }", "signature": "KeyTemplate aes128EaxTemplate()", "full_signature": "public static final KeyTemplate aes128EaxTemplate()", "class_method_signature": "AesEaxKeyManager.aes128EaxTemplate()", "testcase": false, "constructor": false, "invocations": ["createKeyTemplate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}