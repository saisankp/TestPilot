{"test_class": {"identifier": "EdmmConverterTest", "superclass": "extends EdmmDependantTest", "interfaces": "", "fields": [], "file": "org.eclipse.winery.common/src/test/java/org/eclipse/winery/common/edmm/EdmmConverterTest.java"}, "test_case": {"identifier": "transformTopologyWithOperations", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void transformTopologyWithOperations() {\n        // region *** build the TopologyTemplate ***\n        TTopologyTemplate topology = new TTopologyTemplate();\n        topology.addNodeTemplate(nodeTemplates.get(\"test_node_4\"));\n        // endregion\n\n        TServiceTemplate serviceTemplate = new TServiceTemplate();\n        serviceTemplate.setTopologyTemplate(topology);\n\n        EdmmConverter edmmConverter = new EdmmConverter(nodeTypes, relationshipTypes, nodeTypeImplementations,\n            relationshipTypeImplementations, artifactTemplates, edmmTypeExtendsMapping, edmm1to1Mapping, false);\n        EntityGraph transform = edmmConverter.transform(serviceTemplate);\n\n        assertNotNull(transform);\n        assertEquals(12, transform.vertexSet().size());\n\n        Optional<Entity> operations = transform.getEntity(Arrays.asList(\"0\", \"components\", \"test_node_4\", \"operations\"));\n        assertTrue(operations.isPresent());\n        Optional<Entity> start = transform.getEntity(Arrays.asList(\"0\", \"components\", \"test_node_4\", \"operations\", \"start\"));\n        assertTrue(start.isPresent());\n        assertTrue(start.get() instanceof ScalarEntity);\n        assertEquals(\"/artifacttemplates/https%3A%2F%2Fex.org%2Ftosca%2Fto%2Fedmm/startTestNode4/files/script.sh\", ((ScalarEntity) start.get()).getValue());\n        Optional<Entity> stop = transform.getEntity(Arrays.asList(\"0\", \"components\", \"test_node_4\", \"operations\", \"stop\"));\n        assertTrue(stop.isPresent());\n        assertTrue(stop.get() instanceof ScalarEntity);\n        assertEquals(\"/artifacttemplates/https%3A%2F%2Fex.org%2Ftosca%2Fto%2Fedmm/startTestNode4/files/script.sh\", ((ScalarEntity) stop.get()).getValue());\n    }", "signature": "void transformTopologyWithOperations()", "full_signature": "@Test void transformTopologyWithOperations()", "class_method_signature": "EdmmConverterTest.transformTopologyWithOperations()", "testcase": true, "constructor": false, "invocations": ["addNodeTemplate", "get", "setTopologyTemplate", "transform", "assertNotNull", "assertEquals", "size", "vertexSet", "getEntity", "asList", "assertTrue", "isPresent", "getEntity", "asList", "assertTrue", "isPresent", "assertTrue", "get", "assertEquals", "getValue", "get", "getEntity", "asList", "assertTrue", "isPresent", "assertTrue", "get", "assertEquals", "getValue", "get"]}, "focal_class": {"identifier": "EdmmConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<QName, TNodeType> nodeTypes;", "modifier": "private final", "type": "Map<QName, TNodeType>", "declarator": "nodeTypes", "var_name": "nodeTypes"}, {"original_string": "private final Map<QName, TRelationshipType> relationshipTypes;", "modifier": "private final", "type": "Map<QName, TRelationshipType>", "declarator": "relationshipTypes", "var_name": "relationshipTypes"}, {"original_string": "private final Map<QName, TNodeTypeImplementation> nodeTypeImplementations;", "modifier": "private final", "type": "Map<QName, TNodeTypeImplementation>", "declarator": "nodeTypeImplementations", "var_name": "nodeTypeImplementations"}, {"original_string": "private final Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations;", "modifier": "private final", "type": "Map<QName, TRelationshipTypeImplementation>", "declarator": "relationshipTypeImplementations", "var_name": "relationshipTypeImplementations"}, {"original_string": "private final Map<QName, TArtifactTemplate> artifactTemplates;", "modifier": "private final", "type": "Map<QName, TArtifactTemplate>", "declarator": "artifactTemplates", "var_name": "artifactTemplates"}, {"original_string": "private final Map<QName, EdmmType> edmmTypeMappings;", "modifier": "private final", "type": "Map<QName, EdmmType>", "declarator": "edmmTypeMappings", "var_name": "edmmTypeMappings"}, {"original_string": "private final Map<QName, EdmmType> oneToOneMappings;", "modifier": "private final", "type": "Map<QName, EdmmType>", "declarator": "oneToOneMappings", "var_name": "oneToOneMappings"}, {"original_string": "private final boolean useAbsolutePaths;", "modifier": "private final", "type": "boolean", "declarator": "useAbsolutePaths", "var_name": "useAbsolutePaths"}], "methods": [{"identifier": "EdmmConverter", "parameters": "(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates,\n                         Map<QName, EdmmType> edmmTypeMappings, Map<QName, EdmmType> oneToOneMappings)", "modifiers": "public", "return": "", "signature": " EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates,\n                         Map<QName, EdmmType> edmmTypeMappings, Map<QName, EdmmType> oneToOneMappings)", "full_signature": "public  EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates,\n                         Map<QName, EdmmType> edmmTypeMappings, Map<QName, EdmmType> oneToOneMappings)", "class_method_signature": "EdmmConverter.EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates,\n                         Map<QName, EdmmType> edmmTypeMappings, Map<QName, EdmmType> oneToOneMappings)", "testcase": false, "constructor": true}, {"identifier": "EdmmConverter", "parameters": "(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates, Map<QName, EdmmType> edmmTypeMappings,\n                         Map<QName, EdmmType> oneToOneMappings, boolean useAbsolutePaths)", "modifiers": "public", "return": "", "signature": " EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates, Map<QName, EdmmType> edmmTypeMappings,\n                         Map<QName, EdmmType> oneToOneMappings, boolean useAbsolutePaths)", "full_signature": "public  EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates, Map<QName, EdmmType> edmmTypeMappings,\n                         Map<QName, EdmmType> oneToOneMappings, boolean useAbsolutePaths)", "class_method_signature": "EdmmConverter.EdmmConverter(Map<QName, TNodeType> nodeTypes, Map<QName, TRelationshipType> relationshipTypes,\n                         Map<QName, TNodeTypeImplementation> nodeTypeImplementations,\n                         Map<QName, TRelationshipTypeImplementation> relationshipTypeImplementations,\n                         Map<QName, TArtifactTemplate> artifactTemplates, Map<QName, EdmmType> edmmTypeMappings,\n                         Map<QName, EdmmType> oneToOneMappings, boolean useAbsolutePaths)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(TServiceTemplate serviceTemplate)", "modifiers": "public", "return": "EntityGraph", "signature": "EntityGraph transform(TServiceTemplate serviceTemplate)", "full_signature": "public EntityGraph transform(TServiceTemplate serviceTemplate)", "class_method_signature": "EdmmConverter.transform(TServiceTemplate serviceTemplate)", "testcase": false, "constructor": false}, {"identifier": "createRelation", "parameters": "(TRelationshipTemplate relationship, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createRelation(TRelationshipTemplate relationship, EntityGraph entityGraph)", "full_signature": "private void createRelation(TRelationshipTemplate relationship, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createRelation(TRelationshipTemplate relationship, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createNode", "parameters": "(TNodeTemplate nodeTemplate, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createNode(TNodeTemplate nodeTemplate, EntityGraph entityGraph)", "full_signature": "private void createNode(TNodeTemplate nodeTemplate, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createNode(TNodeTemplate nodeTemplate, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createArtifact", "parameters": "(TNodeTemplate nodeTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createArtifact(TNodeTemplate nodeTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "full_signature": "private void createArtifact(TNodeTemplate nodeTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createArtifact(TNodeTemplate nodeTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createPathReferenceEntity", "parameters": "(EntityGraph entityGraph, String givenPath, EntityId entityId)", "modifiers": "private", "return": "void", "signature": "void createPathReferenceEntity(EntityGraph entityGraph, String givenPath, EntityId entityId)", "full_signature": "private void createPathReferenceEntity(EntityGraph entityGraph, String givenPath, EntityId entityId)", "class_method_signature": "EdmmConverter.createPathReferenceEntity(EntityGraph entityGraph, String givenPath, EntityId entityId)", "testcase": false, "constructor": false}, {"identifier": "createProperties", "parameters": "(TEntityTemplate toscaTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createProperties(TEntityTemplate toscaTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "full_signature": "private void createProperties(TEntityTemplate toscaTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createProperties(TEntityTemplate toscaTemplate, EntityId componentNodeId, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createType", "parameters": "(TEntityType toscaType, EntityId parentEntityId, EntityGraph entityGraph)", "modifiers": "private", "return": "EntityId", "signature": "EntityId createType(TEntityType toscaType, EntityId parentEntityId, EntityGraph entityGraph)", "full_signature": "private EntityId createType(TEntityType toscaType, EntityId parentEntityId, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createType(TEntityType toscaType, EntityId parentEntityId, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createPropertiesDefinition", "parameters": "(TEntityType toscaType, EntityId typeEntityId, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createPropertiesDefinition(TEntityType toscaType, EntityId typeEntityId, EntityGraph entityGraph)", "full_signature": "private void createPropertiesDefinition(TEntityType toscaType, EntityId typeEntityId, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createPropertiesDefinition(TEntityType toscaType, EntityId typeEntityId, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "createOperations", "parameters": "(TEntityType type, EntityId nodeTypeEntityId, EntityGraph entityGraph)", "modifiers": "private", "return": "void", "signature": "void createOperations(TEntityType type, EntityId nodeTypeEntityId, EntityGraph entityGraph)", "full_signature": "private void createOperations(TEntityType type, EntityId nodeTypeEntityId, EntityGraph entityGraph)", "class_method_signature": "EdmmConverter.createOperations(TEntityType type, EntityId nodeTypeEntityId, EntityGraph entityGraph)", "testcase": false, "constructor": false}, {"identifier": "getImplementationForOperation", "parameters": "(TEntityTypeImplementation implementation,\n                                                 String interfaceName, String operationName)", "modifiers": "private", "return": "String", "signature": "String getImplementationForOperation(TEntityTypeImplementation implementation,\n                                                 String interfaceName, String operationName)", "full_signature": "private String getImplementationForOperation(TEntityTypeImplementation implementation,\n                                                 String interfaceName, String operationName)", "class_method_signature": "EdmmConverter.getImplementationForOperation(TEntityTypeImplementation implementation,\n                                                 String interfaceName, String operationName)", "testcase": false, "constructor": false}, {"identifier": "normalizeQName", "parameters": "(QName qName)", "modifiers": "private", "return": "String", "signature": "String normalizeQName(QName qName)", "full_signature": "private String normalizeQName(QName qName)", "class_method_signature": "EdmmConverter.normalizeQName(QName qName)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/edmm/EdmmConverter.java"}, "focal_method": {"identifier": "transform", "parameters": "(TServiceTemplate serviceTemplate)", "modifiers": "public", "return": "EntityGraph", "body": "public EntityGraph transform(TServiceTemplate serviceTemplate) {\n        EntityGraph entityGraph = new EntityGraph();\n\n        List<TNodeTemplate> nodeTemplates = serviceTemplate.getTopologyTemplate().getNodeTemplates();\n        List<TRelationshipTemplate> relationshipTemplates = serviceTemplate.getTopologyTemplate().getRelationshipTemplates();\n        if (!nodeTemplates.isEmpty()) {\n            entityGraph.addEntity(new MappingEntity(EntityGraph.COMPONENTS, entityGraph));\n        }\n\n        nodeTemplates.forEach(nodeTemplate -> createNode(nodeTemplate, entityGraph));\n        relationshipTemplates.forEach(relationship -> createRelation(relationship, entityGraph));\n\n        return entityGraph;\n    }", "signature": "EntityGraph transform(TServiceTemplate serviceTemplate)", "full_signature": "public EntityGraph transform(TServiceTemplate serviceTemplate)", "class_method_signature": "EdmmConverter.transform(TServiceTemplate serviceTemplate)", "testcase": false, "constructor": false, "invocations": ["getNodeTemplates", "getTopologyTemplate", "getRelationshipTemplates", "getTopologyTemplate", "isEmpty", "addEntity", "forEach", "createNode", "forEach", "createRelation"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}