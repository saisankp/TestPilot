{"test_class": {"identifier": "SymbolicLookupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final ImmutableMap<String,TestSymbol> map = SymbolicLookup.map(TestSymbol.values());", "modifier": "final", "type": "ImmutableMap<String,TestSymbol>", "declarator": "map = SymbolicLookup.map(TestSymbol.values())", "var_name": "map"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/query/criterion/SymbolicLookupTest.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void apply() {\n        final SymbolicLookup lookup = new SymbolicLookup();\n        for (TestSymbol t : TestSymbol.values()) {\n            assertEquals(t.symbol(), lookup.apply(t));\n        }\n    }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "SymbolicLookupTest.apply()", "testcase": true, "constructor": false, "invocations": ["values", "assertEquals", "symbol", "apply"]}, "focal_class": {"identifier": "SymbolicLookup", "superclass": "", "interfaces": "implements Function<Symbolic, String>", "fields": [], "methods": [{"identifier": "apply", "parameters": "(Symbolic symbolic)", "modifiers": "public", "return": "String", "signature": "String apply(Symbolic symbolic)", "full_signature": "public String apply(Symbolic symbolic)", "class_method_signature": "SymbolicLookup.apply(Symbolic symbolic)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(T[] values)", "modifiers": "public static", "return": "ImmutableMap<String,T>", "signature": "ImmutableMap<String,T> map(T[] values)", "full_signature": "public static ImmutableMap<String,T> map(T[] values)", "class_method_signature": "SymbolicLookup.map(T[] values)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String symbol,\n            ImmutableMap<String, T> map, Class<T> clss)", "modifiers": "public static", "return": "T", "signature": "T resolve(String symbol,\n            ImmutableMap<String, T> map, Class<T> clss)", "full_signature": "public static T resolve(String symbol,\n            ImmutableMap<String, T> map, Class<T> clss)", "class_method_signature": "SymbolicLookup.resolve(String symbol,\n            ImmutableMap<String, T> map, Class<T> clss)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/query/criterion/SymbolicLookup.java"}, "focal_method": {"identifier": "apply", "parameters": "(Symbolic symbolic)", "modifiers": "public", "return": "String", "body": "public String apply(Symbolic symbolic) {\n        return symbolic.symbol();\n    }", "signature": "String apply(Symbolic symbolic)", "full_signature": "public String apply(Symbolic symbolic)", "class_method_signature": "SymbolicLookup.apply(Symbolic symbolic)", "testcase": false, "constructor": false, "invocations": ["symbol"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}