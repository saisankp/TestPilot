{"test_class": {"identifier": "SpanContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SpanContext context = new SpanContext();", "modifier": "private final", "type": "SpanContext", "declarator": "context = new SpanContext()", "var_name": "context"}], "file": "telemetry-lib/src/test/java/com/yammer/telemetry/tracing/SpanContextTest.java"}, "test_case": {"identifier": "testEndingSpanWhenNonePresentRaisesEmptyStackException", "parameters": "()", "modifiers": "@Test(expected = EmptyStackException.class) public", "return": "void", "body": "@Test(expected = EmptyStackException.class)\n    public void testEndingSpanWhenNonePresentRaisesEmptyStackException() {\n        context.endSpan(new EnabledSpan(BigInteger.ONE, BigInteger.TEN, Optional.<BigInteger>absent(), \"unknown\", TraceLevel.INHERIT));\n    }", "signature": "void testEndingSpanWhenNonePresentRaisesEmptyStackException()", "full_signature": "@Test(expected = EmptyStackException.class) public void testEndingSpanWhenNonePresentRaisesEmptyStackException()", "class_method_signature": "SpanContextTest.testEndingSpanWhenNonePresentRaisesEmptyStackException()", "testcase": true, "constructor": false, "invocations": ["endSpan", "absent"]}, "focal_class": {"identifier": "SpanContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Stack<Span> spans;", "modifier": "private final", "type": "Stack<Span>", "declarator": "spans", "var_name": "spans"}], "methods": [{"identifier": "SpanContext", "parameters": "()", "modifiers": "", "return": "", "signature": " SpanContext()", "full_signature": "  SpanContext()", "class_method_signature": "SpanContext.SpanContext()", "testcase": false, "constructor": true}, {"identifier": "captureSpans", "parameters": "()", "modifiers": "", "return": "ImmutableList<Span>", "signature": "ImmutableList<Span> captureSpans()", "full_signature": " ImmutableList<Span> captureSpans()", "class_method_signature": "SpanContext.captureSpans()", "testcase": false, "constructor": false}, {"identifier": "currentSpan", "parameters": "()", "modifiers": "public", "return": "Optional<Span>", "signature": "Optional<Span> currentSpan()", "full_signature": "public Optional<Span> currentSpan()", "class_method_signature": "SpanContext.currentSpan()", "testcase": false, "constructor": false}, {"identifier": "currentTraceId", "parameters": "()", "modifiers": "public", "return": "Optional<BigInteger>", "signature": "Optional<BigInteger> currentTraceId()", "full_signature": "public Optional<BigInteger> currentTraceId()", "class_method_signature": "SpanContext.currentTraceId()", "testcase": false, "constructor": false}, {"identifier": "currentSpanId", "parameters": "()", "modifiers": "public", "return": "Optional<BigInteger>", "signature": "Optional<BigInteger> currentSpanId()", "full_signature": "public Optional<BigInteger> currentSpanId()", "class_method_signature": "SpanContext.currentSpanId()", "testcase": false, "constructor": false}, {"identifier": "startSpan", "parameters": "(Span span)", "modifiers": "public", "return": "void", "signature": "void startSpan(Span span)", "full_signature": "public void startSpan(Span span)", "class_method_signature": "SpanContext.startSpan(Span span)", "testcase": false, "constructor": false}, {"identifier": "endSpan", "parameters": "(Span span)", "modifiers": "public", "return": "void", "signature": "void endSpan(Span span)", "full_signature": "public void endSpan(Span span)", "class_method_signature": "SpanContext.endSpan(Span span)", "testcase": false, "constructor": false}, {"identifier": "currentTraceLevel", "parameters": "()", "modifiers": "public", "return": "TraceLevel", "signature": "TraceLevel currentTraceLevel()", "full_signature": "public TraceLevel currentTraceLevel()", "class_method_signature": "SpanContext.currentTraceLevel()", "testcase": false, "constructor": false}], "file": "telemetry-lib/src/main/java/com/yammer/telemetry/tracing/SpanContext.java"}, "focal_method": {"identifier": "endSpan", "parameters": "(Span span)", "modifiers": "public", "return": "void", "body": "public void endSpan(Span span) {\n        if (spans.isEmpty()) {\n            SpanHelper.LOG.warning(\"Ending span \" + span.getName() + \":\" + span.getSpanId() + \" when no spans exist in SpanContext\");\n        }\n        Span poppedSpan = spans.pop();\n\n        int extraPops = 0;\n        while (!Objects.equals(poppedSpan, span)) {\n            extraPops++;\n            poppedSpan = spans.pop();\n        }\n\n        if (extraPops > 0) {\n            SpanHelper.LOG.warning(\"Popped \" + extraPops + \" unclosed Spans\");\n        }\n    }", "signature": "void endSpan(Span span)", "full_signature": "public void endSpan(Span span)", "class_method_signature": "SpanContext.endSpan(Span span)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "warning", "getName", "getSpanId", "pop", "equals", "pop", "warning"]}, "repository": {"repo_id": 11585818, "url": "https://github.com/yammer/telemetry", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 20, "size": 990, "license": "licensed"}}