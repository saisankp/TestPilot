{"test_class": {"identifier": "SpelExpressionTest", "superclass": "extends SpelTestCase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/el/spel/SpelExpressionTest.java"}, "test_case": {"identifier": "testProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProperty() {\n\t\t//map\n        Map<String,Object> m = New.hashMap(\"a\",\"b\");\n        assertEquals(\"b\", eval(\"['a']\", m));\n\n        //getter\n\t\tGetter getter = new Getter() {\n\t\t\t@Override\n\t\t\tpublic Object get(String name) {\n\t\t\t\treturn m.get(name);\n\t\t\t}\n\t\t};\n\t\tMap<String, Object> vars = New.hashMap(\"o\", getter);\n\t\tassertEquals(\"b\", eval(\"o['a']\", vars));\n    }", "signature": "void testProperty()", "full_signature": "@Test public void testProperty()", "class_method_signature": "SpelExpressionTest.testProperty()", "testcase": true, "constructor": false, "invocations": ["hashMap", "assertEquals", "eval", "get", "hashMap", "assertEquals", "eval"]}, "focal_class": {"identifier": "SpelExpression", "superclass": "extends AbstractExpression", "interfaces": "", "fields": [{"original_string": "protected final AstExpr expr;", "modifier": "protected final", "type": "AstExpr", "declarator": "expr", "var_name": "expr"}], "methods": [{"identifier": "SpelExpression", "parameters": "(AstExpr expr)", "modifiers": "public", "return": "", "signature": " SpelExpression(AstExpr expr)", "full_signature": "public  SpelExpression(AstExpr expr)", "class_method_signature": "SpelExpression.SpelExpression(AstExpr expr)", "testcase": false, "constructor": true}, {"identifier": "eval", "parameters": "(Object context, Map<String, Object> vars)", "modifiers": "@Override protected", "return": "Object", "signature": "Object eval(Object context, Map<String, Object> vars)", "full_signature": "@Override protected Object eval(Object context, Map<String, Object> vars)", "class_method_signature": "SpelExpression.eval(Object context, Map<String, Object> vars)", "testcase": false, "constructor": false}, {"identifier": "eval", "parameters": "(ElEvalContext context)", "modifiers": "public", "return": "Object", "signature": "Object eval(ElEvalContext context)", "full_signature": "public Object eval(ElEvalContext context)", "class_method_signature": "SpelExpression.eval(ElEvalContext context)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SpelExpression.toString()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/el/spel/SpelExpression.java"}, "focal_method": {"identifier": "eval", "parameters": "(Object context, Map<String, Object> vars)", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object eval(Object context, Map<String, Object> vars) {\n\t    return expr.eval(new DefaultElEvalContext(context, vars));\n    }", "signature": "Object eval(Object context, Map<String, Object> vars)", "full_signature": "@Override protected Object eval(Object context, Map<String, Object> vars)", "class_method_signature": "SpelExpression.eval(Object context, Map<String, Object> vars)", "testcase": false, "constructor": false, "invocations": ["eval"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}