{"test_class": {"identifier": "RAWvernaActivityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RAWvernaActivityConfigurationBean configBean;", "modifier": "private", "type": "RAWvernaActivityConfigurationBean", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "private RAWvernaActivity activity = new RAWvernaActivity();", "modifier": "private", "type": "RAWvernaActivity", "declarator": "activity = new RAWvernaActivity()", "var_name": "activity"}], "file": "photohawk-taverna/photohawk-activity/src/test/java/at/ac/tuwien/photohawk/taverna/RAWvernaActivityTest.java"}, "test_case": {"identifier": "executeAsynch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeAsynch() throws Exception {\n        activity.configure(configBean);\n\n        Map<String, Object> inputs = new HashMap<String, Object>();\n        inputs.put(\"firstInput\", \"hello\");\n\n        Map<String, Class<?>> expectedOutputTypes = new HashMap<String, Class<?>>();\n        expectedOutputTypes.put(\"simpleOutput\", String.class);\n        expectedOutputTypes.put(\"moreOutputs\", String.class);\n\n        Map<String, Object> outputs = ActivityInvoker.invokeAsyncActivity(activity, inputs, expectedOutputTypes);\n\n        assertEquals(\"Unexpected outputs\", 2, outputs.size());\n        assertEquals(\"simple\", outputs.get(\"simpleOutput\"));\n        assertEquals(Arrays.asList(\"Value 1\", \"Value 2\"), outputs.get(\"moreOutputs\"));\n\n    }", "signature": "void executeAsynch()", "full_signature": "@Test public void executeAsynch()", "class_method_signature": "RAWvernaActivityTest.executeAsynch()", "testcase": true, "constructor": false, "invocations": ["configure", "put", "put", "put", "invokeAsyncActivity", "assertEquals", "size", "assertEquals", "get", "assertEquals", "asList", "get"]}, "focal_class": {"identifier": "RAWvernaActivity", "superclass": "extends AbstractAsynchronousActivity<RAWvernaActivityConfigurationBean>", "interfaces": "implements\n    AsynchronousActivity<RAWvernaActivityConfigurationBean>", "fields": [{"original_string": "private static final String IN_FIRST_INPUT = \"firstInput\";", "modifier": "private static final", "type": "String", "declarator": "IN_FIRST_INPUT = \"firstInput\"", "var_name": "IN_FIRST_INPUT"}, {"original_string": "private static final String IN_EXTRA_DATA = \"extraData\";", "modifier": "private static final", "type": "String", "declarator": "IN_EXTRA_DATA = \"extraData\"", "var_name": "IN_EXTRA_DATA"}, {"original_string": "private static final String OUT_MORE_OUTPUTS = \"moreOutputs\";", "modifier": "private static final", "type": "String", "declarator": "OUT_MORE_OUTPUTS = \"moreOutputs\"", "var_name": "OUT_MORE_OUTPUTS"}, {"original_string": "private static final String OUT_SIMPLE_OUTPUT = \"simpleOutput\";", "modifier": "private static final", "type": "String", "declarator": "OUT_SIMPLE_OUTPUT = \"simpleOutput\"", "var_name": "OUT_SIMPLE_OUTPUT"}, {"original_string": "private static final String OUT_REPORT = \"report\";", "modifier": "private static final", "type": "String", "declarator": "OUT_REPORT = \"report\"", "var_name": "OUT_REPORT"}, {"original_string": "private RAWvernaActivityConfigurationBean configBean;", "modifier": "private", "type": "RAWvernaActivityConfigurationBean", "declarator": "configBean", "var_name": "configBean"}], "methods": [{"identifier": "configure", "parameters": "(RAWvernaActivityConfigurationBean configBean)", "modifiers": "@Override public", "return": "void", "signature": "void configure(RAWvernaActivityConfigurationBean configBean)", "full_signature": "@Override public void configure(RAWvernaActivityConfigurationBean configBean)", "class_method_signature": "RAWvernaActivity.configure(RAWvernaActivityConfigurationBean configBean)", "testcase": false, "constructor": false}, {"identifier": "configurePorts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void configurePorts()", "full_signature": "protected void configurePorts()", "class_method_signature": "RAWvernaActivity.configurePorts()", "testcase": false, "constructor": false}, {"identifier": "executeAsynch", "parameters": "(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "class_method_signature": "RAWvernaActivity.executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "RAWvernaActivityConfigurationBean", "signature": "RAWvernaActivityConfigurationBean getConfiguration()", "full_signature": "@Override public RAWvernaActivityConfigurationBean getConfiguration()", "class_method_signature": "RAWvernaActivity.getConfiguration()", "testcase": false, "constructor": false}], "file": "photohawk-taverna/photohawk-activity/src/main/java/at/ac/tuwien/photohawk/taverna/RAWvernaActivity.java"}, "focal_method": {"identifier": "executeAsynch", "parameters": "(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback) {\n        // Don't execute service directly now, request to be run ask to be run\n        // from thread pool and return asynchronously\n        callback.requestRun(new Runnable() {\n\n            public void run() {\n                InvocationContext context = callback.getContext();\n                ReferenceService referenceService = context.getReferenceService();\n                // Resolve inputs\n                String firstInput = (String) referenceService.renderIdentifier(inputs.get(IN_FIRST_INPUT),\n                    String.class, context);\n\n                // Support our configuration-dependendent input\n                boolean optionalPorts = configBean.getExampleString().equals(\"specialCase\");\n\n                List<byte[]> special = null;\n                // We'll also allow IN_EXTRA_DATA to be optionally not provided\n                if (optionalPorts && inputs.containsKey(IN_EXTRA_DATA)) {\n                    // Resolve as a list of byte[]\n                    special = (List<byte[]>) referenceService.renderIdentifier(inputs.get(IN_EXTRA_DATA), byte[].class,\n                        context);\n                }\n\n                // TODO: Do the actual service invocation\n                // try {\n                // results = this.service.invoke(firstInput, special)\n                // } catch (ServiceException ex) {\n                // callback.fail(\"Could not invoke RAWverna service \" +\n                // configBean.getExampleUri(),\n                // ex);\n                // // Make sure we don't call callback.receiveResult later\n                // return;\n                // }\n\n                // Register outputs\n                Map<String, T2Reference> outputs = new HashMap<String, T2Reference>();\n                String simpleValue = \"simple\";\n                T2Reference simpleRef = referenceService.register(simpleValue, 0, true, context);\n                outputs.put(OUT_SIMPLE_OUTPUT, simpleRef);\n\n                // For list outputs, only need to register the top level list\n                List<String> moreValues = new ArrayList<String>();\n                moreValues.add(\"Value 1\");\n                moreValues.add(\"Value 2\");\n                T2Reference moreRef = referenceService.register(moreValues, 1, true, context);\n                outputs.put(OUT_MORE_OUTPUTS, moreRef);\n\n                if (optionalPorts) {\n                    // Populate our optional output port\n                    // NOTE: Need to return output values for all defined output\n                    // ports\n                    String report = \"Everything OK\";\n                    outputs.put(OUT_REPORT, referenceService.register(report, 0, true, context));\n                }\n\n                // return map of output data, with empty index array as this is\n                // the only and final result (this index parameter is used if\n                // pipelining output)\n                callback.receiveResult(outputs, new int[0]);\n            }\n        });\n    }", "signature": "void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "class_method_signature": "RAWvernaActivity.executeAsynch(final Map<String, T2Reference> inputs, final AsynchronousActivityCallback callback)", "testcase": false, "constructor": false, "invocations": ["requestRun", "getContext", "getReferenceService", "renderIdentifier", "get", "equals", "getExampleString", "containsKey", "renderIdentifier", "get", "register", "put", "add", "add", "register", "put", "put", "register", "receiveResult"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}