{"test_class": {"identifier": "SubjectMatterExpertDaoImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private CredStashHelper credStashHelper;", "modifier": "@Mock\n    private", "type": "CredStashHelper", "declarator": "credStashHelper", "var_name": "credStashHelper"}, {"original_string": "@Mock\n    private LdapOperations ldapOperations;", "modifier": "@Mock\n    private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}, {"original_string": "@InjectMocks\n    private SubjectMatterExpertDaoImpl subjectMatterExpertDaoImpl;", "modifier": "@InjectMocks\n    private", "type": "SubjectMatterExpertDaoImpl", "declarator": "subjectMatterExpertDaoImpl", "var_name": "subjectMatterExpertDaoImpl"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/impl/SubjectMatterExpertDaoImplTest.java"}, "test_case": {"identifier": "testGetSubjectMatterExpertByKeyUserNoExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSubjectMatterExpertByKeyUserNoExists() throws Exception\n    {\n        // Create a subject matter expert key.\n        SubjectMatterExpertKey subjectMatterExpertKey = new SubjectMatterExpertKey(USER_ID);\n\n        // Create subject matter expert contact details initialised with test data.\n        SubjectMatterExpertContactDetails subjectMatterExpertContactDetails =\n            new SubjectMatterExpertContactDetails(USER_FULL_NAME, USER_JOB_TITLE, USER_EMAIL_ADDRESS, USER_TELEPHONE_NUMBER);\n\n        // Mock the external calls.\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_URL)).thenReturn(LDAP_URL);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_BASE)).thenReturn(LDAP_BASE);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_USER_DN)).thenReturn(LDAP_USER_DN);\n        when(configurationHelper.getProperty(ConfigurationValue.CREDSTASH_HERD_ENCRYPTION_CONTEXT)).thenReturn(CREDSTASH_ENCRYPTION_CONTEXT);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_USER_CREDENTIAL_NAME)).thenReturn(USER_CREDENTIAL_NAME);\n        when(credStashHelper.getCredentialFromCredStash(CREDSTASH_ENCRYPTION_CONTEXT, USER_CREDENTIAL_NAME)).thenReturn(PASSWORD);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_ID)).thenReturn(LDAP_ATTRIBUTE_USER_ID);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_FULL_NAME)).thenReturn(LDAP_ATTRIBUTE_USER_FULL_NAME);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_JOB_TITLE)).thenReturn(LDAP_ATTRIBUTE_USER_JOB_TITLE);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_EMAIL_ADDRESS)).thenReturn(LDAP_ATTRIBUTE_USER_EMAIL_ADDRESS);\n        when(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_TELEPHONE_NUMBER)).thenReturn(LDAP_ATTRIBUTE_USER_TELEPHONE_NUMBER);\n        when(\n            ldapOperations.search(any(LdapTemplate.class), any(LdapQuery.class), any(SubjectMatterExpertDaoImpl.SubjectMatterExpertContactDetailsMapper.class)))\n            .thenReturn(Collections.emptyList());\n\n        // Call the method under test.\n        SubjectMatterExpertContactDetails result = subjectMatterExpertDaoImpl.getSubjectMatterExpertByKey(subjectMatterExpertKey);\n\n        // Validate the results.\n        assertNull(result);\n\n        // Verify the external calls.\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_URL);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_BASE);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_USER_DN);\n        verify(configurationHelper).getProperty(ConfigurationValue.CREDSTASH_HERD_ENCRYPTION_CONTEXT);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_USER_CREDENTIAL_NAME);\n        verify(credStashHelper).getCredentialFromCredStash(CREDSTASH_ENCRYPTION_CONTEXT, USER_CREDENTIAL_NAME);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_ID);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_FULL_NAME);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_JOB_TITLE);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_EMAIL_ADDRESS);\n        verify(configurationHelper).getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_TELEPHONE_NUMBER);\n        verify(ldapOperations)\n            .search(any(LdapTemplate.class), any(LdapQuery.class), any(SubjectMatterExpertDaoImpl.SubjectMatterExpertContactDetailsMapper.class));\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testGetSubjectMatterExpertByKeyUserNoExists()", "full_signature": "@Test public void testGetSubjectMatterExpertByKeyUserNoExists()", "class_method_signature": "SubjectMatterExpertDaoImplTest.testGetSubjectMatterExpertByKeyUserNoExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getCredentialFromCredStash", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "thenReturn", "when", "search", "any", "any", "any", "emptyList", "getSubjectMatterExpertByKey", "assertNull", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getCredentialFromCredStash", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "getProperty", "verify", "search", "verify", "any", "any", "any", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "SubjectMatterExpertDaoImpl", "superclass": "", "interfaces": "implements SubjectMatterExpertDao", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SubjectMatterExpertDaoImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SubjectMatterExpertDaoImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private CredStashHelper credStashHelper;", "modifier": "@Autowired\n    private", "type": "CredStashHelper", "declarator": "credStashHelper", "var_name": "credStashHelper"}, {"original_string": "@Autowired\n    private LdapOperations ldapOperations;", "modifier": "@Autowired\n    private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}], "methods": [{"identifier": "getSubjectMatterExpertByKey", "parameters": "(SubjectMatterExpertKey subjectMatterExpertKey)", "modifiers": "@Override public", "return": "SubjectMatterExpertContactDetails", "signature": "SubjectMatterExpertContactDetails getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "full_signature": "@Override public SubjectMatterExpertContactDetails getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "class_method_signature": "SubjectMatterExpertDaoImpl.getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/impl/SubjectMatterExpertDaoImpl.java"}, "focal_method": {"identifier": "getSubjectMatterExpertByKey", "parameters": "(SubjectMatterExpertKey subjectMatterExpertKey)", "modifiers": "@Override public", "return": "SubjectMatterExpertContactDetails", "body": "@Override\n    public SubjectMatterExpertContactDetails getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)\n    {\n        // Get LDAP specific configuration settings.\n        final String ldapUrl = configurationHelper.getProperty(ConfigurationValue.LDAP_URL);\n        final String ldapBase = configurationHelper.getProperty(ConfigurationValue.LDAP_BASE);\n        final String ldapUserDn = configurationHelper.getProperty(ConfigurationValue.LDAP_USER_DN);\n        final String credStashEncryptionContext = configurationHelper.getProperty(ConfigurationValue.CREDSTASH_HERD_ENCRYPTION_CONTEXT);\n        final String ldapUserCredentialName = configurationHelper.getProperty(ConfigurationValue.LDAP_USER_CREDENTIAL_NAME);\n\n        // Log configuration values being used to create LDAP context source.\n        LOGGER.info(\"Creating LDAP context source using the following parameters: {}=\\\"{}\\\" {}=\\\"{}\\\" {}=\\\"{}\\\" {}=\\\"{}\\\" {}=\\\"{}\\\"...\",\n            ConfigurationValue.LDAP_URL.getKey(), ldapUrl, ConfigurationValue.LDAP_BASE.getKey(), ldapBase, ConfigurationValue.LDAP_USER_DN.getKey(),\n            ldapUserDn, ConfigurationValue.CREDSTASH_HERD_ENCRYPTION_CONTEXT.getKey(), credStashEncryptionContext,\n            ConfigurationValue.LDAP_USER_CREDENTIAL_NAME.getKey(), ldapUserCredentialName);\n\n        // Retrieve LDAP user password from the credstash.\n        String ldapUserPassword;\n        try\n        {\n            ldapUserPassword = credStashHelper.getCredentialFromCredStash(credStashEncryptionContext, ldapUserCredentialName);\n        }\n        catch (CredStashGetCredentialFailedException e)\n        {\n            throw new IllegalStateException(e);\n        }\n\n        // Create and initialize an LDAP context source.\n        LdapContextSource contextSource = new LdapContextSource();\n        contextSource.setUrl(ldapUrl);\n        contextSource.setBase(ldapBase);\n        contextSource.setUserDn(ldapUserDn);\n        contextSource.setPassword(ldapUserPassword);\n        contextSource.afterPropertiesSet();\n\n        // Create an LDAP template.\n        LdapTemplate ldapTemplate = new LdapTemplate(contextSource);\n\n        // Create an LDAP query.\n        LdapQuery ldapQuery = query().where(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_ID)).is(subjectMatterExpertKey.getUserId());\n\n        // Create a subject matter expert contact details mapper.\n        SubjectMatterExpertContactDetailsMapper subjectMatterExpertContactDetailsMapper =\n            new SubjectMatterExpertContactDetailsMapper(configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_FULL_NAME),\n                configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_JOB_TITLE),\n                configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_EMAIL_ADDRESS),\n                configurationHelper.getProperty(ConfigurationValue.LDAP_ATTRIBUTE_USER_TELEPHONE_NUMBER));\n\n        // Gets information for the specified subject matter expert.\n        List<SubjectMatterExpertContactDetails> subjectMatterExpertContactDetailsList =\n            ldapOperations.search(ldapTemplate, ldapQuery, subjectMatterExpertContactDetailsMapper);\n\n        // Return the results.\n        return CollectionUtils.isNotEmpty(subjectMatterExpertContactDetailsList) ? subjectMatterExpertContactDetailsList.get(0) : null;\n    }", "signature": "SubjectMatterExpertContactDetails getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "full_signature": "@Override public SubjectMatterExpertContactDetails getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "class_method_signature": "SubjectMatterExpertDaoImpl.getSubjectMatterExpertByKey(SubjectMatterExpertKey subjectMatterExpertKey)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "getProperty", "getProperty", "info", "getKey", "getKey", "getKey", "getKey", "getKey", "getCredentialFromCredStash", "setUrl", "setBase", "setUserDn", "setPassword", "afterPropertiesSet", "is", "where", "query", "getProperty", "getUserId", "getProperty", "getProperty", "getProperty", "getProperty", "search", "isNotEmpty", "get"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}