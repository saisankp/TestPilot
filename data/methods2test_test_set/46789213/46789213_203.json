{"test_class": {"identifier": "TestSocketNetwork", "superclass": "extends AbstractCloseableNetworkTest", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/network/socket/TestSocketNetwork.java"}, "test_case": {"identifier": "testStoppedSender", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n  public void testStoppedSender()\n      throws NoSuchFieldException, SecurityException, IllegalArgumentException,\n      IllegalAccessException {\n    networks = createNetworks(2);\n    Field f1 = networks.get(1).getClass().getDeclaredField(\"senders\");\n    f1.setAccessible(true);\n    @SuppressWarnings(\"unchecked\")\n    Sender sender = ((HashMap<Integer, Sender>) f1.get(networks.get(1))).get(2);\n    sender.stop();\n    networks.get(1).send(2, new byte[] { 0x01 });\n    f1.setAccessible(false);\n  }", "signature": "void testStoppedSender()", "full_signature": "@Test(expected = RuntimeException.class) public void testStoppedSender()", "class_method_signature": "TestSocketNetwork.testStoppedSender()", "testcase": true, "constructor": false, "invocations": ["createNetworks", "getDeclaredField", "getClass", "get", "setAccessible", "get", "get", "get", "stop", "send", "get", "setAccessible"]}, "focal_class": {"identifier": "SocketNetwork", "superclass": "", "interfaces": "implements CloseableNetwork", "fields": [{"original_string": "private static final Duration RECEIVE_TIMEOUT = Duration.ofMillis(100);", "modifier": "private static final", "type": "Duration", "declarator": "RECEIVE_TIMEOUT = Duration.ofMillis(100)", "var_name": "RECEIVE_TIMEOUT"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SocketNetwork.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SocketNetwork.class)", "var_name": "logger"}, {"original_string": "private final BlockingQueue<byte[]> selfQueue;", "modifier": "private final", "type": "BlockingQueue<byte[]>", "declarator": "selfQueue", "var_name": "selfQueue"}, {"original_string": "private final NetworkConfiguration conf;", "modifier": "private final", "type": "NetworkConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private boolean alive;", "modifier": "private", "type": "boolean", "declarator": "alive", "var_name": "alive"}, {"original_string": "private final Collection<Socket> sockets;", "modifier": "private final", "type": "Collection<Socket>", "declarator": "sockets", "var_name": "sockets"}, {"original_string": "private final Map<Integer, Sender> senders;", "modifier": "private final", "type": "Map<Integer, Sender>", "declarator": "senders", "var_name": "senders"}, {"original_string": "private final Map<Integer, Receiver> receivers;", "modifier": "private final", "type": "Map<Integer, Receiver>", "declarator": "receivers", "var_name": "receivers"}], "methods": [{"identifier": "SocketNetwork", "parameters": "(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "modifiers": "public", "return": "", "signature": " SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "full_signature": "public  SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "class_method_signature": "SocketNetwork.SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "testcase": false, "constructor": true}, {"identifier": "SocketNetwork", "parameters": "(NetworkConfiguration conf)", "modifiers": "public", "return": "", "signature": " SocketNetwork(NetworkConfiguration conf)", "full_signature": "public  SocketNetwork(NetworkConfiguration conf)", "class_method_signature": "SocketNetwork.SocketNetwork(NetworkConfiguration conf)", "testcase": false, "constructor": true}, {"identifier": "startCommunication", "parameters": "(Map<Integer, Socket> sockets)", "modifiers": "private", "return": "void", "signature": "void startCommunication(Map<Integer, Socket> sockets)", "full_signature": "private void startCommunication(Map<Integer, Socket> sockets)", "class_method_signature": "SocketNetwork.startCommunication(Map<Integer, Socket> sockets)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(int partyId, byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void send(int partyId, byte[] data)", "full_signature": "@Override public void send(int partyId, byte[] data)", "class_method_signature": "SocketNetwork.send(int partyId, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(final int partyId)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] receive(final int partyId)", "full_signature": "@Override public byte[] receive(final int partyId)", "class_method_signature": "SocketNetwork.receive(final int partyId)", "testcase": false, "constructor": false}, {"identifier": "inRange", "parameters": "(final int partyId)", "modifiers": "private", "return": "void", "signature": "void inRange(final int partyId)", "full_signature": "private void inRange(final int partyId)", "class_method_signature": "SocketNetwork.inRange(final int partyId)", "testcase": false, "constructor": false}, {"identifier": "closeCommunication", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeCommunication()", "full_signature": "private void closeCommunication()", "class_method_signature": "SocketNetwork.closeCommunication()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SocketNetwork.close()", "testcase": false, "constructor": false}, {"identifier": "getNoOfParties", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNoOfParties()", "full_signature": "@Override public int getNoOfParties()", "class_method_signature": "SocketNetwork.getNoOfParties()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/network/socket/SocketNetwork.java"}, "focal_method": {"identifier": "send", "parameters": "(int partyId, byte[] data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void send(int partyId, byte[] data) {\n    if (partyId == conf.getMyId()) {\n      this.selfQueue.add(data);\n    } else {\n      inRange(partyId);\n      if (!senders.get(partyId).isRunning()) {\n        throw new RuntimeException(\n            \"P\" + conf.getMyId() + \": Unable to send to P\" + partyId + \". Sender not running\");\n      }\n      this.senders.get(partyId).queueMessage(data);\n    }\n  }", "signature": "void send(int partyId, byte[] data)", "full_signature": "@Override public void send(int partyId, byte[] data)", "class_method_signature": "SocketNetwork.send(int partyId, byte[] data)", "testcase": false, "constructor": false, "invocations": ["getMyId", "add", "inRange", "isRunning", "get", "getMyId", "queueMessage", "get"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}