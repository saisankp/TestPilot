{"test_class": {"identifier": "LicenseSupportTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/runtime/src/test/java/org/eclipse/sw360/antenna/util/LicenseSupportTest.java"}, "test_case": {"identifier": "testSPDXParsing5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSPDXParsing5() {\n        final LicenseInformation licenseInformation = LicenseSupport.fromSPDXExpression(\"((MIT AND BSD) AND (EPL OR GPL AND APACHE-2.0))\");\n        assertThat(licenseInformation.getLicenses().size())\n                .isEqualTo(5);\n        assertThat(licenseInformation.evaluate())\n                .isEqualTo(\"( MIT AND BSD AND ( EPL OR ( GPL AND APACHE-2.0 ) ) )\");\n\n        LicenseStatement licenseStatement = (LicenseStatement) licenseInformation;\n        assertThat(licenseStatement.getOp())\n                .isEqualTo(LicenseOperator.AND);\n        final LicenseInformation licenseInformation1 = LicenseSupport.fromSPDXExpression(licenseInformation.evaluate());\n        assertThat(licenseInformation)\n                .isEqualTo(licenseInformation1);\n    }", "signature": "void testSPDXParsing5()", "full_signature": "@Test public void testSPDXParsing5()", "class_method_signature": "LicenseSupportTest.testSPDXParsing5()", "testcase": true, "constructor": false, "invocations": ["fromSPDXExpression", "isEqualTo", "assertThat", "size", "getLicenses", "isEqualTo", "assertThat", "evaluate", "isEqualTo", "assertThat", "getOp", "fromSPDXExpression", "evaluate", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "LicenseSupport", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "mapLicenses", "parameters": "(Collection<String> licenses)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation mapLicenses(Collection<String> licenses)", "full_signature": "public static LicenseInformation mapLicenses(Collection<String> licenses)", "class_method_signature": "LicenseSupport.mapLicenses(Collection<String> licenses)", "testcase": false, "constructor": false}, {"identifier": "mapLicenses", "parameters": "(Collection<String> licenses, LicenseOperator operator)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation mapLicenses(Collection<String> licenses, LicenseOperator operator)", "full_signature": "public static LicenseInformation mapLicenses(Collection<String> licenses, LicenseOperator operator)", "class_method_signature": "LicenseSupport.mapLicenses(Collection<String> licenses, LicenseOperator operator)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXExpression", "parameters": "(String spdxExpressionString)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXExpression(String spdxExpressionString)", "full_signature": "public static LicenseInformation fromSPDXExpression(String spdxExpressionString)", "class_method_signature": "LicenseSupport.fromSPDXExpression(String spdxExpressionString)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXExpression", "parameters": "(SpdxExpression spdxExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXExpression(SpdxExpression spdxExpression)", "full_signature": "public static LicenseInformation fromSPDXExpression(SpdxExpression spdxExpression)", "class_method_signature": "LicenseSupport.fromSPDXExpression(SpdxExpression spdxExpression)", "testcase": false, "constructor": false}, {"identifier": "parseSpdxExpression", "parameters": "(String expression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation parseSpdxExpression(String expression)", "full_signature": "public static LicenseInformation parseSpdxExpression(String expression)", "class_method_signature": "LicenseSupport.parseSpdxExpression(String expression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxWithLicense", "parameters": "(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "modifiers": "private static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "full_signature": "private static LicenseInformation fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "class_method_signature": "LicenseSupport.fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxLicenseReferenceExpression", "parameters": "(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "full_signature": "public static LicenseInformation fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "class_method_signature": "LicenseSupport.fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxLicenseIdExpression", "parameters": "(SpdxLicenseIdExpression spdxLicenseIdExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "full_signature": "public static LicenseInformation fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "class_method_signature": "LicenseSupport.fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXCompoundExpression", "parameters": "(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "full_signature": "public static LicenseInformation fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "class_method_signature": "LicenseSupport.fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "testcase": false, "constructor": false}, {"identifier": "checkCompoundChild", "parameters": "(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "modifiers": "private static", "return": "LicenseInformation", "signature": "LicenseInformation checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "full_signature": "private static LicenseInformation checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "class_method_signature": "LicenseSupport.checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/eclipse/sw360/antenna/util/LicenseSupport.java"}, "focal_method": {"identifier": "fromSPDXExpression", "parameters": "(String spdxExpressionString)", "modifiers": "public static", "return": "LicenseInformation", "body": "public static LicenseInformation fromSPDXExpression(String spdxExpressionString) {\n        SpdxExpression spdxExpression = SpdxExpression.parse(spdxExpressionString);\n        return fromSPDXExpression(spdxExpression);\n    }", "signature": "LicenseInformation fromSPDXExpression(String spdxExpressionString)", "full_signature": "public static LicenseInformation fromSPDXExpression(String spdxExpressionString)", "class_method_signature": "LicenseSupport.fromSPDXExpression(String spdxExpressionString)", "testcase": false, "constructor": false, "invocations": ["parse", "fromSPDXExpression"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}