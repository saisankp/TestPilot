{"test_class": {"identifier": "XlsImExporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder tmpFolder= new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "tmpFolder= new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "kilt-core/src/test/java/de/poiu/kilt/importexport/XlsImExporterTest.java"}, "test_case": {"identifier": "testExportXls", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExportXls() throws URISyntaxException, IOException {\n\n    // - preparation\n\n    //FIXME: Should these resources lie below de.poiu.kilt.internal?\n    //       Or even below de.poiu.kilt.internal.XlsImExporterTest?\n\n    final Path propertiesRootDirectory= Paths.get(Resources.getResource(\"\").toURI());\n    final Set<File> resourceBundleFiles= ImmutableSet.of(\n      propertiesRootDirectory.resolve(\"i18n/messages.properties\").toFile(),\n      propertiesRootDirectory.resolve(\"i18n/messages_de.properties\").toFile());\n\n    final FileMatcher fileMatcher= this.createFileMatcher(propertiesRootDirectory, resourceBundleFiles);\n\n    final File xlsFile= this.tmpFolder.newFile(\"i18n.xlsx\");\n    xlsFile.delete();\n\n    // - test\n\n    XlsImExporter.exportXls(fileMatcher, UTF_8, xlsFile);\n\n    // - verification\n\n    final XlsFile readXlsFile= new XlsFile(xlsFile);\n    final Map<I18nBundleKey, Collection<Translation>> readContent= readXlsFile.getContent();\n    final XlsFile expectedXlsFile= new XlsFile(new File(Resources.getResource(\"i18n_expected.xlsx\").toURI()));\n    final Map<I18nBundleKey, Collection<Translation>> expectedContent= expectedXlsFile.getContent();\n\n    assertThat(readContent).hasSameSizeAs(expectedContent);\n    assertThat(readContent).containsOnlyKeys(FluentIterable.from(expectedContent.keySet()).toArray(I18nBundleKey.class));\n    for (final I18nBundleKey bundleKey : readContent.keySet()) {\n      assertThat(readContent.get(bundleKey)).containsOnly(FluentIterable.from(expectedContent.get(bundleKey)).toArray(Translation.class));\n    }\n    //actually only this check is necessary\n    assertThat(readContent).isEqualTo(expectedContent);\n  }", "signature": "void testExportXls()", "full_signature": "@Test public void testExportXls()", "class_method_signature": "XlsImExporterTest.testExportXls()", "testcase": true, "constructor": false, "invocations": ["get", "toURI", "getResource", "of", "toFile", "resolve", "toFile", "resolve", "createFileMatcher", "newFile", "delete", "exportXls", "getContent", "toURI", "getResource", "getContent", "hasSameSizeAs", "assertThat", "containsOnlyKeys", "assertThat", "toArray", "from", "keySet", "keySet", "containsOnly", "assertThat", "get", "toArray", "from", "get", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "XlsImExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}], "methods": [{"identifier": "importXls", "parameters": "(final FileMatcher fileMatcher,\n                               final File xlsFile,\n                               final Charset propertyFileEncoding,\n                               final MissingKeyAction missingKeyAction)", "modifiers": "public static", "return": "void", "signature": "void importXls(final FileMatcher fileMatcher,\n                               final File xlsFile,\n                               final Charset propertyFileEncoding,\n                               final MissingKeyAction missingKeyAction)", "full_signature": "public static void importXls(final FileMatcher fileMatcher,\n                               final File xlsFile,\n                               final Charset propertyFileEncoding,\n                               final MissingKeyAction missingKeyAction)", "class_method_signature": "XlsImExporter.importXls(final FileMatcher fileMatcher,\n                               final File xlsFile,\n                               final Charset propertyFileEncoding,\n                               final MissingKeyAction missingKeyAction)", "testcase": false, "constructor": false}, {"identifier": "exportXls", "parameters": "(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "modifiers": "public static", "return": "void", "signature": "void exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "full_signature": "public static void exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "class_method_signature": "XlsImExporter.exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "testcase": false, "constructor": false}, {"identifier": "getFileForBundle", "parameters": "(final File propertiesRootDirectory, final String bundleBasename, final Language language)", "modifiers": "private static", "return": "File", "signature": "File getFileForBundle(final File propertiesRootDirectory, final String bundleBasename, final Language language)", "full_signature": "private static File getFileForBundle(final File propertiesRootDirectory, final String bundleBasename, final Language language)", "class_method_signature": "XlsImExporter.getFileForBundle(final File propertiesRootDirectory, final String bundleBasename, final Language language)", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/importexport/XlsImExporter.java"}, "focal_method": {"identifier": "exportXls", "parameters": "(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "modifiers": "public static", "return": "void", "body": "public static void exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile) {\n    final Set<File> propertyFiles= fileMatcher.findMatchingFiles();\n    LOGGER.log(Level.INFO, \"Exporting the following files to XLS(X): {}\", propertyFiles);\n\n    final ResourceBundleContentHelper fbcHelper= new ResourceBundleContentHelper(fileMatcher.getRoot());\n    final Map<String, Map<Language, File>> bundleNameToFilesMap= fbcHelper.toBundleNameToFilesMap(propertyFiles);\n\n    final XlsFile xlsFileObject= new XlsFile(xlsFile);\n\n    bundleNameToFilesMap.entrySet().forEach((entry) -> {\n      final String bundleName= entry.getKey();\n      final Map<Language, File> bundleTranslations= entry.getValue();\n\n      final ResourceBundleContent resourceBundleContent= ResourceBundleContent.forName(bundleName)\n        .fromFiles(bundleTranslations, propertyFileEncoding !=null ? propertyFileEncoding : UTF_8);\n\n      resourceBundleContent.getContent().asMap().entrySet().forEach((e) -> {\n        final String propertyKey= e.getKey();\n        final Collection<Translation> translations= e.getValue();\n\n        xlsFileObject.setValue(new I18nBundleKey(bundleName, propertyKey), translations);\n      });\n    });\n\n    xlsFileObject.save();\n  }", "signature": "void exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "full_signature": "public static void exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "class_method_signature": "XlsImExporter.exportXls(final FileMatcher fileMatcher,\n                               final Charset propertyFileEncoding,\n                               final File xlsFile)", "testcase": false, "constructor": false, "invocations": ["findMatchingFiles", "log", "getRoot", "toBundleNameToFilesMap", "forEach", "entrySet", "getKey", "getValue", "fromFiles", "forName", "forEach", "entrySet", "asMap", "getContent", "getKey", "getValue", "setValue", "save"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}