{"test_class": {"identifier": "CubeSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DataSource dataSource = DataSource.of(\"provider\", \"\");", "modifier": "private final", "type": "DataSource", "declarator": "dataSource = DataSource.of(\"provider\", \"\")", "var_name": "dataSource"}, {"original_string": "private final DataSet col = DataSet.builder(dataSource, DataSet.Kind.COLLECTION).put(\"sector\", \"industry\").build();", "modifier": "private final", "type": "DataSet", "declarator": "col = DataSet.builder(dataSource, DataSet.Kind.COLLECTION).put(\"sector\", \"industry\").build()", "var_name": "col"}, {"original_string": "private final DataSet series = DataSet.builder(dataSource, DataSet.Kind.SERIES).put(\"sector\", \"industry\").put(\"region\", \"be\").build();", "modifier": "private final", "type": "DataSet", "declarator": "series = DataSet.builder(dataSource, DataSet.Kind.SERIES).put(\"sector\", \"industry\").put(\"region\", \"be\").build()", "var_name": "series"}, {"original_string": "private final IParam<DataSet, CubeId> cubeIdParam = CubeSupport.idByName(SECTOR_REGION);", "modifier": "private final", "type": "IParam<DataSet, CubeId>", "declarator": "cubeIdParam = CubeSupport.idByName(SECTOR_REGION)", "var_name": "cubeIdParam"}], "file": "jtss/src/test/java/ec/tss/tsproviders/cube/CubeSupportTest.java"}, "test_case": {"identifier": "testidBySeparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testidBySeparator() {\n        assertThat(CubeSupport.idBySeparator(SECTOR_REGION, \".\", \"id\")).satisfies(o -> {\n            assertThat(o.defaultValue()).isEqualTo(SECTOR_REGION);\n            assertThat(o.get(DataSet.builder(dataSource, DataSet.Kind.COLLECTION).put(\"id\", \"industry\").build())).isEqualTo(INDUSTRY);\n            assertThat(o.get(DataSet.builder(dataSource, DataSet.Kind.SERIES).put(\"id\", \"industry.be\").build())).isEqualTo(INDUSTRY_BE);\n        });\n    }", "signature": "void testidBySeparator()", "full_signature": "@Test public void testidBySeparator()", "class_method_signature": "CubeSupportTest.testidBySeparator()", "testcase": true, "constructor": false, "invocations": ["satisfies", "assertThat", "idBySeparator", "isEqualTo", "assertThat", "defaultValue", "isEqualTo", "assertThat", "get", "build", "put", "builder", "isEqualTo", "assertThat", "get", "build", "put", "builder"]}, "focal_class": {"identifier": "CubeSupport", "superclass": "", "interfaces": "implements HasDataHierarchy, HasTsCursor, HasDataDisplayName", "fields": [{"original_string": "private final Resource resource;", "modifier": "private final", "type": "Resource", "declarator": "resource", "var_name": "resource"}], "methods": [{"identifier": "of", "parameters": "(@NonNull Resource resource)", "modifiers": "@NonNull public static", "return": "CubeSupport", "signature": "CubeSupport of(@NonNull Resource resource)", "full_signature": "@NonNull public static CubeSupport of(@NonNull Resource resource)", "class_method_signature": "CubeSupport.of(@NonNull Resource resource)", "testcase": false, "constructor": false}, {"identifier": "CubeSupport", "parameters": "(Resource resource)", "modifiers": "private", "return": "", "signature": " CubeSupport(Resource resource)", "full_signature": "private  CubeSupport(Resource resource)", "class_method_signature": "CubeSupport.CubeSupport(Resource resource)", "testcase": false, "constructor": true}, {"identifier": "children", "parameters": "(DataSource dataSource)", "modifiers": "@Override public", "return": "List<DataSet>", "signature": "List<DataSet> children(DataSource dataSource)", "full_signature": "@Override public List<DataSet> children(DataSource dataSource)", "class_method_signature": "CubeSupport.children(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "(DataSet parent)", "modifiers": "@Override public", "return": "List<DataSet>", "signature": "List<DataSet> children(DataSet parent)", "full_signature": "@Override public List<DataSet> children(DataSet parent)", "class_method_signature": "CubeSupport.children(DataSet parent)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(DataSource dataSource, TsInformationType type)", "modifiers": "@Override public", "return": "TsCursor<DataSet>", "signature": "TsCursor<DataSet> getData(DataSource dataSource, TsInformationType type)", "full_signature": "@Override public TsCursor<DataSet> getData(DataSource dataSource, TsInformationType type)", "class_method_signature": "CubeSupport.getData(DataSource dataSource, TsInformationType type)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(DataSet dataSet, TsInformationType type)", "modifiers": "@Override public", "return": "TsCursor<DataSet>", "signature": "TsCursor<DataSet> getData(DataSet dataSet, TsInformationType type)", "full_signature": "@Override public TsCursor<DataSet> getData(DataSet dataSet, TsInformationType type)", "class_method_signature": "CubeSupport.getData(DataSet dataSet, TsInformationType type)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "(DataSource dataSource)", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName(DataSource dataSource)", "full_signature": "@Override public String getDisplayName(DataSource dataSource)", "class_method_signature": "CubeSupport.getDisplayName(DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "(DataSet dataSet)", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName(DataSet dataSet)", "full_signature": "@Override public String getDisplayName(DataSet dataSet)", "class_method_signature": "CubeSupport.getDisplayName(DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "getDisplayNodeName", "parameters": "(DataSet dataSet)", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayNodeName(DataSet dataSet)", "full_signature": "@Override public String getDisplayNodeName(DataSet dataSet)", "class_method_signature": "CubeSupport.getDisplayNodeName(DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "idByName", "parameters": "(@NonNull CubeId root)", "modifiers": "@NonNull public static", "return": "IParam<DataSet, CubeId>", "signature": "IParam<DataSet, CubeId> idByName(@NonNull CubeId root)", "full_signature": "@NonNull public static IParam<DataSet, CubeId> idByName(@NonNull CubeId root)", "class_method_signature": "CubeSupport.idByName(@NonNull CubeId root)", "testcase": false, "constructor": false}, {"identifier": "idBySeparator", "parameters": "(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "modifiers": "@NonNull public static", "return": "IParam<DataSet, CubeId>", "signature": "IParam<DataSet, CubeId> idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "full_signature": "@NonNull public static IParam<DataSet, CubeId> idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "class_method_signature": "CubeSupport.idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "testcase": false, "constructor": false}, {"identifier": "asTsProvider", "parameters": "(\n            @NonNull String providerName,\n            @NonNull Logger logger,\n            @NonNull CubeSupport cubeSupport,\n            @NonNull HasDataMoniker monikerSupport,\n            @NonNull Runnable cacheCleaner)", "modifiers": "@NonNull public static", "return": "ITsProvider", "signature": "ITsProvider asTsProvider(\n            @NonNull String providerName,\n            @NonNull Logger logger,\n            @NonNull CubeSupport cubeSupport,\n            @NonNull HasDataMoniker monikerSupport,\n            @NonNull Runnable cacheCleaner)", "full_signature": "@NonNull public static ITsProvider asTsProvider(\n            @NonNull String providerName,\n            @NonNull Logger logger,\n            @NonNull CubeSupport cubeSupport,\n            @NonNull HasDataMoniker monikerSupport,\n            @NonNull Runnable cacheCleaner)", "class_method_signature": "CubeSupport.asTsProvider(\n            @NonNull String providerName,\n            @NonNull Logger logger,\n            @NonNull CubeSupport cubeSupport,\n            @NonNull HasDataMoniker monikerSupport,\n            @NonNull Runnable cacheCleaner)", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "(DataSet.Builder builder, IteratorWithIO<CubeId> values, IParam<DataSet, CubeId> idParam)", "modifiers": "private static", "return": "List<DataSet>", "signature": "List<DataSet> children(DataSet.Builder builder, IteratorWithIO<CubeId> values, IParam<DataSet, CubeId> idParam)", "full_signature": "private static List<DataSet> children(DataSet.Builder builder, IteratorWithIO<CubeId> values, IParam<DataSet, CubeId> idParam)", "class_method_signature": "CubeSupport.children(DataSet.Builder builder, IteratorWithIO<CubeId> values, IParam<DataSet, CubeId> idParam)", "testcase": false, "constructor": false}, {"identifier": "toDataSetFunc", "parameters": "(DataSet.Builder builder, IParam<DataSet, CubeId> dimValuesParam)", "modifiers": "private static", "return": "Function<CubeId, DataSet>", "signature": "Function<CubeId, DataSet> toDataSetFunc(DataSet.Builder builder, IParam<DataSet, CubeId> dimValuesParam)", "full_signature": "private static Function<CubeId, DataSet> toDataSetFunc(DataSet.Builder builder, IParam<DataSet, CubeId> dimValuesParam)", "class_method_signature": "CubeSupport.toDataSetFunc(DataSet.Builder builder, IParam<DataSet, CubeId> dimValuesParam)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/cube/CubeSupport.java"}, "focal_method": {"identifier": "idBySeparator", "parameters": "(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "modifiers": "@NonNull public static", "return": "IParam<DataSet, CubeId>", "body": "@NonNull\n    public static IParam<DataSet, CubeId> idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name) {\n        return new BySeparatorParam(Objects.requireNonNull(separator), Objects.requireNonNull(root), Objects.requireNonNull(name));\n    }", "signature": "IParam<DataSet, CubeId> idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "full_signature": "@NonNull public static IParam<DataSet, CubeId> idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "class_method_signature": "CubeSupport.idBySeparator(@NonNull CubeId root, @NonNull String separator, @NonNull String name)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}