{"test_class": {"identifier": "PackageUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/PackageUtilTest.java"}, "test_case": {"identifier": "getClassesInPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getClassesInPackage() throws IOException {\n        // null\n        assertNull(PackageUtil.getClassesInPackage(null));\n        assertNull(PackageUtil.getClassesInPackage(\"\"));\n        assertNull(PackageUtil.getClassesInPackage(\"     \"));\n\n        assertNull(PackageUtil.getClassesInPackage(null, null, null));\n        assertNull(PackageUtil.getClassesInPackage(\"\", null, null));\n        assertNull(PackageUtil.getClassesInPackage(\"     \", null, null));\n        assertNull(PackageUtil\n                .getClassesInPackage(null, Arrays.asList(new String[] { \"com.baidu.unbiz.common\" }), null));\n        assertNull(PackageUtil.getClassesInPackage(\"\", Arrays.asList(new String[] { \"com.baidu.unbiz.common\" }), null));\n        assertNull(PackageUtil.getClassesInPackage(\"     \", Arrays.asList(new String[] { \"com.baidu.unbiz.common\" }),\n                null));\n\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getClassesInPackage(\"com.baidu.beidou.xxx\")));\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getClassesInPackage(\"notexist\")));\n\n        List<String> utils = PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common\");\n        assertTrue(CollectionUtil.isNotEmpty(utils));\n\n        List<String> subUtils = PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\");\n        assertTrue(CollectionUtil.isNotEmpty(subUtils));\n        assertTrue(CollectionUtil.isNotEmpty(utils));\n        assertTrue(subUtils.size() > utils.size());\n        assertTrue(subUtils.containsAll(utils));\n\n        assertEquals(PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\"),\n                PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\", null, null));\n        assertEquals(PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\"),\n                PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\", Arrays.asList(new String[] { \".*\" }), null));\n\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\",\n                Arrays.asList(new String[] { \".*\" }), Arrays.asList(new String[] { \".*\" }))));\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\", null,\n                Arrays.asList(new String[] { \".*\" }))));\n\n        List<String> includeTests =\n                PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\", Arrays.asList(new String[] { \".*Test\" }),\n                        null);\n        assertTrue(CollectionUtil.isNotEmpty(includeTests));\n        List<String> excludeTests =\n                PackageUtil.getClassesInPackage(\"com.baidu.unbiz.common.*\", null,\n                        Arrays.asList(new String[] { \".*Test\" }));\n        assertTrue(CollectionUtil.isNotEmpty(excludeTests));\n        assertEquals(subUtils.size(), includeTests.size() + excludeTests.size());\n\n        List<String> langs = PackageUtil.getClassesInPackage(\"org.slf4j\");\n        assertTrue(CollectionUtil.isNotEmpty(langs));\n        List<String> subLangs = PackageUtil.getClassesInPackage(\"org.slf4j.*\");\n        assertTrue(CollectionUtil.isNotEmpty(subLangs));\n        // FIXME\n        assertEquals(subLangs, langs);\n    }", "signature": "void getClassesInPackage()", "full_signature": "@Test public void getClassesInPackage()", "class_method_signature": "PackageUtilTest.getClassesInPackage()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "assertNull", "getClassesInPackage", "asList", "assertNull", "getClassesInPackage", "asList", "assertNull", "getClassesInPackage", "asList", "assertTrue", "isEmpty", "getClassesInPackage", "assertTrue", "isEmpty", "getClassesInPackage", "getClassesInPackage", "assertTrue", "isNotEmpty", "getClassesInPackage", "assertTrue", "isNotEmpty", "assertTrue", "isNotEmpty", "assertTrue", "size", "size", "assertTrue", "containsAll", "assertEquals", "getClassesInPackage", "getClassesInPackage", "assertEquals", "getClassesInPackage", "getClassesInPackage", "asList", "assertTrue", "isEmpty", "getClassesInPackage", "asList", "asList", "assertTrue", "isEmpty", "getClassesInPackage", "asList", "getClassesInPackage", "asList", "assertTrue", "isNotEmpty", "getClassesInPackage", "asList", "assertTrue", "isNotEmpty", "assertEquals", "size", "size", "size", "getClassesInPackage", "assertTrue", "isNotEmpty", "getClassesInPackage", "assertTrue", "isNotEmpty", "assertEquals"]}, "focal_class": {"identifier": "PackageUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> EMPTY_LIST = Collections.emptyList();", "modifier": "private static final", "type": "List<String>", "declarator": "EMPTY_LIST = Collections.emptyList()", "var_name": "EMPTY_LIST"}], "methods": [{"identifier": "getResourceInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getResourceInPackage(String packageName)", "full_signature": "public static List<String> getResourceInPackage(String packageName)", "class_method_signature": "PackageUtil.getResourceInPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getClassesInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getClassesInPackage(String packageName)", "full_signature": "public static List<String> getClassesInPackage(String packageName)", "class_method_signature": "PackageUtil.getClassesInPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getClassesInPackage", "parameters": "(String packageName, List<String> included, List<String> excluded)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "full_signature": "public static List<String> getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "class_method_signature": "PackageUtil.getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "testcase": false, "constructor": false}, {"identifier": "findClassesInJarPackage", "parameters": "(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "full_signature": "private static void findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "class_method_signature": "PackageUtil.findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "findClassesInDirPackage", "parameters": "(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "full_signature": "private static void findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "class_method_signature": "PackageUtil.findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "filterClass", "parameters": "(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "full_signature": "private static void filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "class_method_signature": "PackageUtil.filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "findResourceInJarPackage", "parameters": "(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "modifiers": "private static", "return": "void", "signature": "void findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "full_signature": "private static void findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "class_method_signature": "PackageUtil.findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "testcase": false, "constructor": false}, {"identifier": "findResourceInDirPackage", "parameters": "(String packageName, String packagePath, List<String> resources)", "modifiers": "private static", "return": "void", "signature": "void findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "full_signature": "private static void findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "class_method_signature": "PackageUtil.findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "testcase": false, "constructor": false}, {"identifier": "getPackagePath", "parameters": "(String packageName)", "modifiers": "private static", "return": "String", "signature": "String getPackagePath(String packageName)", "full_signature": "private static String getPackagePath(String packageName)", "class_method_signature": "PackageUtil.getPackagePath(String packageName)", "testcase": false, "constructor": false}, {"identifier": "isIncluded", "parameters": "(String name, List<String> included, List<String> excluded)", "modifiers": "private static", "return": "boolean", "signature": "boolean isIncluded(String name, List<String> included, List<String> excluded)", "full_signature": "private static boolean isIncluded(String name, List<String> included, List<String> excluded)", "class_method_signature": "PackageUtil.isIncluded(String name, List<String> included, List<String> excluded)", "testcase": false, "constructor": false}, {"identifier": "isMatched", "parameters": "(String name, List<String> list)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMatched(String name, List<String> list)", "full_signature": "private static boolean isMatched(String name, List<String> list)", "class_method_signature": "PackageUtil.isMatched(String name, List<String> list)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Package", "signature": "Package getPackage(Class<?> clazz)", "full_signature": "public static Package getPackage(Class<?> clazz)", "class_method_signature": "PackageUtil.getPackage(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPackageNameForObject", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getPackageNameForObject(Object object)", "full_signature": "public static String getPackageNameForObject(Object object)", "class_method_signature": "PackageUtil.getPackageNameForObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getPackageName(Class<?> clazz)", "full_signature": "public static String getPackageName(Class<?> clazz)", "class_method_signature": "PackageUtil.getPackageName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "(String javaClassName)", "modifiers": "public static", "return": "String", "signature": "String getPackageName(String javaClassName)", "full_signature": "public static String getPackageName(String javaClassName)", "class_method_signature": "PackageUtil.getPackageName(String javaClassName)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForObjectClass", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForObjectClass(Object object)", "full_signature": "public static String getResourceNameForObjectClass(Object object)", "class_method_signature": "PackageUtil.getResourceNameForObjectClass(Object object)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForClass(Class<?> clazz)", "full_signature": "public static String getResourceNameForClass(Class<?> clazz)", "class_method_signature": "PackageUtil.getResourceNameForClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForClass", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForClass(String className)", "full_signature": "public static String getResourceNameForClass(String className)", "class_method_signature": "PackageUtil.getResourceNameForClass(String className)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForObjectPackage", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForObjectPackage(Object object)", "full_signature": "public static String getResourceNameForObjectPackage(Object object)", "class_method_signature": "PackageUtil.getResourceNameForObjectPackage(Object object)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForPackage", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForPackage(Class<?> clazz)", "full_signature": "public static String getResourceNameForPackage(Class<?> clazz)", "class_method_signature": "PackageUtil.getResourceNameForPackage(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForPackage", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForPackage(String className)", "full_signature": "public static String getResourceNameForPackage(String className)", "class_method_signature": "PackageUtil.getResourceNameForPackage(String className)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/PackageUtil.java"}, "focal_method": {"identifier": "getClassesInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getClassesInPackage(String packageName) throws IOException {\n        return getClassesInPackage(packageName, null, null);\n    }", "signature": "List<String> getClassesInPackage(String packageName)", "full_signature": "public static List<String> getClassesInPackage(String packageName)", "class_method_signature": "PackageUtil.getClassesInPackage(String packageName)", "testcase": false, "constructor": false, "invocations": ["getClassesInPackage"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}