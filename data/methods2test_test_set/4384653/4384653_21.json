{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "clara/src/test/java/org/vaadin/teemu/clara/util/ReflectionUtilsTest.java"}, "test_case": {"identifier": "test_findMethodsByRegexAndType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_findMethodsByRegexAndType() {\n        assertEquals(\n                1,\n                findMethods(SubClassToExamine.class, \"setFoo(.*)\", String.class)\n                        .size());\n    }", "signature": "void test_findMethodsByRegexAndType()", "full_signature": "@Test public void test_findMethodsByRegexAndType()", "class_method_signature": "ReflectionUtilsTest.test_findMethodsByRegexAndType()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "findMethods"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ReflectionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectionUtils()", "full_signature": "private  ReflectionUtils()", "class_method_signature": "ReflectionUtils.ReflectionUtils()", "testcase": false, "constructor": true}, {"identifier": "findMethods", "parameters": "(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "full_signature": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "class_method_signature": "ReflectionUtils.findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "testcase": false, "constructor": false}, {"identifier": "findMethods", "parameters": "(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "full_signature": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "class_method_signature": "ReflectionUtils.findMethods(Class<?> clazz, String nameRegex,\n            Class<?>... paramTypes)", "testcase": false, "constructor": false}, {"identifier": "isComponent", "parameters": "(Class<?> componentClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isComponent(Class<?> componentClass)", "full_signature": "public static boolean isComponent(Class<?> componentClass)", "class_method_signature": "ReflectionUtils.isComponent(Class<?> componentClass)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredFields", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllDeclaredFields(Class<?> type)", "full_signature": "public static List<Field> getAllDeclaredFields(Class<?> type)", "class_method_signature": "ReflectionUtils.getAllDeclaredFields(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredFieldsAnnotatedWith", "parameters": "(Class<?> type,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static List<Field> getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.getAllDeclaredFieldsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredMethods", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllDeclaredMethods(Class<?> type)", "full_signature": "public static List<Method> getAllDeclaredMethods(Class<?> type)", "class_method_signature": "ReflectionUtils.getAllDeclaredMethods(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredMethodsAnnotatedWith", "parameters": "(Class<?> type,\n            Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "full_signature": "public static List<Method> getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.getAllDeclaredMethodsAnnotatedWith(Class<?> type,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "filterByAnnotationType", "parameters": "(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "modifiers": "private static", "return": "void", "signature": "void filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "full_signature": "private static void filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "class_method_signature": "ReflectionUtils.filterByAnnotationType(List<? extends AnnotatedElement> fields,\n            Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}], "file": "clara/src/main/java/org/vaadin/teemu/clara/util/ReflectionUtils.java"}, "focal_method": {"identifier": "findMethods", "parameters": "(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "modifiers": "public static", "return": "List<Method>", "body": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams) {\n        // Create the Pattern and Matcher outside the loop to optimize\n        // performance (and possibly memory usage).\n        Pattern p = Pattern.compile(nameRegex);\n        Matcher m = p.matcher(\"\");\n\n        List<Method> methods = new ArrayList<Method>();\n        for (Method method : clazz.getMethods()) {\n            if (numberOfParams.matches(method.getParameterTypes().length)\n                    && m.reset(method.getName()).matches()) {\n                methods.add(method);\n            }\n        }\n        return methods;\n    }", "signature": "List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "full_signature": "public static List<Method> findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "class_method_signature": "ReflectionUtils.findMethods(Class<?> clazz, String nameRegex,\n            ParamCount numberOfParams)", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "getMethods", "matches", "getParameterTypes", "matches", "reset", "getName", "add"]}, "repository": {"repo_id": 4384653, "url": "https://github.com/tehapo/Clara", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 38, "size": 7395, "license": "licensed"}}