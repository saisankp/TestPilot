{"test_class": {"identifier": "DotRegularExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DotRegularExpression dotRegularExpression;", "modifier": "private", "type": "DotRegularExpression", "declarator": "dotRegularExpression", "var_name": "dotRegularExpression"}], "file": "algs/src/test/java/com/github/pedrovgs/problem34/DotRegularExpressionTest.java"}, "test_case": {"identifier": "shouldReturnAnEmptyArrayIfPatternDoesNotMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnAnEmptyArrayIfPatternDoesNotMatch() {\n    String pattern = \"p.d\";\n    String[] words = { \"ana\", \"test1\", \"test2\" };\n\n    String[] result = dotRegularExpression.evaluate(words, pattern);\n\n    assertEquals(0, result.length);\n  }", "signature": "void shouldReturnAnEmptyArrayIfPatternDoesNotMatch()", "full_signature": "@Test public void shouldReturnAnEmptyArrayIfPatternDoesNotMatch()", "class_method_signature": "DotRegularExpressionTest.shouldReturnAnEmptyArrayIfPatternDoesNotMatch()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertEquals"]}, "focal_class": {"identifier": "DotRegularExpression", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(String[] words, String pattern)", "modifiers": "public", "return": "String[]", "signature": "String[] evaluate(String[] words, String pattern)", "full_signature": "public String[] evaluate(String[] words, String pattern)", "class_method_signature": "DotRegularExpression.evaluate(String[] words, String pattern)", "testcase": false, "constructor": false}, {"identifier": "matchDotRegularExpression", "parameters": "(String word, String pattern)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchDotRegularExpression(String word, String pattern)", "full_signature": "private static boolean matchDotRegularExpression(String word, String pattern)", "class_method_signature": "DotRegularExpression.matchDotRegularExpression(String word, String pattern)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem34/DotRegularExpression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String[] words, String pattern)", "modifiers": "public", "return": "String[]", "body": "public String[] evaluate(String[] words, String pattern) {\n    if (words == null || pattern == null) {\n      throw new IllegalArgumentException(\"You can't pass null objects as input.\");\n    }\n    List<String> result = new ArrayList<String>();\n    for (String word : words) {\n      if (matchDotRegularExpression(word, pattern)) {\n        result.add(word);\n      }\n    }\n    return result.toArray(new String[result.size()]);\n  }", "signature": "String[] evaluate(String[] words, String pattern)", "full_signature": "public String[] evaluate(String[] words, String pattern)", "class_method_signature": "DotRegularExpression.evaluate(String[] words, String pattern)", "testcase": false, "constructor": false, "invocations": ["matchDotRegularExpression", "add", "toArray", "size"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}