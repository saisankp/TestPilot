{"test_class": {"identifier": "HadoopConfigurationPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "util-hadoop/src/test/java/com/google/cloud/hadoop/util/HadoopConfigurationPropertyTest.java"}, "test_case": {"identifier": "getStringCollection_throwsExceptionOnNonCollectionProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getStringCollection_throwsExceptionOnNonCollectionProperty() {\n    Configuration config = new Configuration();\n    HadoopConfigurationProperty<String> stringKey =\n        new HadoopConfigurationProperty<>(\"actual.key\", \"default-string\");\n    HadoopConfigurationProperty<Integer> integerKey =\n        new HadoopConfigurationProperty<>(\"actual.key\", 1);\n    HadoopConfigurationProperty<Collection<String>> collectionKey =\n        new HadoopConfigurationProperty<>(\"collection.key\", ImmutableList.of(\"key1\", \"key2\"));\n\n    assertThrows(IllegalStateException.class, () -> stringKey.getStringCollection(config));\n    assertThrows(IllegalStateException.class, () -> integerKey.getStringCollection(config));\n    assertThat(collectionKey.getStringCollection(config)).containsExactly(\"key1\", \"key2\").inOrder();\n  }", "signature": "void getStringCollection_throwsExceptionOnNonCollectionProperty()", "full_signature": "@Test public void getStringCollection_throwsExceptionOnNonCollectionProperty()", "class_method_signature": "HadoopConfigurationPropertyTest.getStringCollection_throwsExceptionOnNonCollectionProperty()", "testcase": true, "constructor": false, "invocations": ["of", "assertThrows", "getStringCollection", "assertThrows", "getStringCollection", "inOrder", "containsExactly", "assertThat", "getStringCollection"]}, "focal_class": {"identifier": "HadoopConfigurationProperty", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "private static final Joiner COMMA_JOINER = Joiner.on(',');", "modifier": "private static final", "type": "Joiner", "declarator": "COMMA_JOINER = Joiner.on(',')", "var_name": "COMMA_JOINER"}, {"original_string": "private static final Splitter COMMA_SPLITTER = Splitter.on(',');", "modifier": "private static final", "type": "Splitter", "declarator": "COMMA_SPLITTER = Splitter.on(',')", "var_name": "COMMA_SPLITTER"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final List<String> deprecatedKeys;", "modifier": "private final", "type": "List<String>", "declarator": "deprecatedKeys", "var_name": "deprecatedKeys"}, {"original_string": "private final T defaultValue;", "modifier": "private final", "type": "T", "declarator": "defaultValue", "var_name": "defaultValue"}, {"original_string": "private List<String> keyPrefixes = ImmutableList.of(\"\");", "modifier": "private", "type": "List<String>", "declarator": "keyPrefixes = ImmutableList.of(\"\")", "var_name": "keyPrefixes"}], "methods": [{"identifier": "HadoopConfigurationProperty", "parameters": "(String key)", "modifiers": "public", "return": "", "signature": " HadoopConfigurationProperty(String key)", "full_signature": "public  HadoopConfigurationProperty(String key)", "class_method_signature": "HadoopConfigurationProperty.HadoopConfigurationProperty(String key)", "testcase": false, "constructor": true}, {"identifier": "HadoopConfigurationProperty", "parameters": "(String key, T defaultValue, String... deprecatedKeys)", "modifiers": "public", "return": "", "signature": " HadoopConfigurationProperty(String key, T defaultValue, String... deprecatedKeys)", "full_signature": "public  HadoopConfigurationProperty(String key, T defaultValue, String... deprecatedKeys)", "class_method_signature": "HadoopConfigurationProperty.HadoopConfigurationProperty(String key, T defaultValue, String... deprecatedKeys)", "testcase": false, "constructor": true}, {"identifier": "withPrefixes", "parameters": "(List<String> keyPrefixes)", "modifiers": "public", "return": "HadoopConfigurationProperty<T>", "signature": "HadoopConfigurationProperty<T> withPrefixes(List<String> keyPrefixes)", "full_signature": "public HadoopConfigurationProperty<T> withPrefixes(List<String> keyPrefixes)", "class_method_signature": "HadoopConfigurationProperty.withPrefixes(List<String> keyPrefixes)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "HadoopConfigurationProperty.getKey()", "testcase": false, "constructor": false}, {"identifier": "getDeprecatedKeys", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDeprecatedKeys()", "full_signature": "public List<String> getDeprecatedKeys()", "class_method_signature": "HadoopConfigurationProperty.getDeprecatedKeys()", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getDefault()", "full_signature": "public T getDefault()", "class_method_signature": "HadoopConfigurationProperty.getDefault()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Configuration config, BiFunction<String, T, T> getterFn)", "modifiers": "public", "return": "T", "signature": "T get(Configuration config, BiFunction<String, T, T> getterFn)", "full_signature": "public T get(Configuration config, BiFunction<String, T, T> getterFn)", "class_method_signature": "HadoopConfigurationProperty.get(Configuration config, BiFunction<String, T, T> getterFn)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "(Configuration config)", "modifiers": "public", "return": "String", "signature": "String getPassword(Configuration config)", "full_signature": "public String getPassword(Configuration config)", "class_method_signature": "HadoopConfigurationProperty.getPassword(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getStringCollection", "parameters": "(Configuration config)", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getStringCollection(Configuration config)", "full_signature": "public Collection<String> getStringCollection(Configuration config)", "class_method_signature": "HadoopConfigurationProperty.getStringCollection(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getPropsWithPrefix", "parameters": "(Configuration config)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Map<String, String>", "signature": "Map<String, String> getPropsWithPrefix(Configuration config)", "full_signature": "@SuppressWarnings(\"unchecked\") public Map<String, String> getPropsWithPrefix(Configuration config)", "class_method_signature": "HadoopConfigurationProperty.getPropsWithPrefix(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getLookupKey", "parameters": "(\n      Configuration config,\n      String key,\n      List<String> deprecatedKeys,\n      BiFunction<Configuration, String, Boolean> checkFn)", "modifiers": "private", "return": "String", "signature": "String getLookupKey(\n      Configuration config,\n      String key,\n      List<String> deprecatedKeys,\n      BiFunction<Configuration, String, Boolean> checkFn)", "full_signature": "private String getLookupKey(\n      Configuration config,\n      String key,\n      List<String> deprecatedKeys,\n      BiFunction<Configuration, String, Boolean> checkFn)", "class_method_signature": "HadoopConfigurationProperty.getLookupKey(\n      Configuration config,\n      String key,\n      List<String> deprecatedKeys,\n      BiFunction<Configuration, String, Boolean> checkFn)", "testcase": false, "constructor": false}, {"identifier": "logProperty", "parameters": "(String key, S value)", "modifiers": "private static", "return": "S", "signature": "S logProperty(String key, S value)", "full_signature": "private static S logProperty(String key, S value)", "class_method_signature": "HadoopConfigurationProperty.logProperty(String key, S value)", "testcase": false, "constructor": false}], "file": "util-hadoop/src/main/java/com/google/cloud/hadoop/util/HadoopConfigurationProperty.java"}, "focal_method": {"identifier": "getStringCollection", "parameters": "(Configuration config)", "modifiers": "public", "return": "Collection<String>", "body": "public Collection<String> getStringCollection(Configuration config) {\n    checkState(\n        defaultValue == null || defaultValue instanceof Collection, \"Not a collection property\");\n    String lookupKey = getLookupKey(config, key, deprecatedKeys, (c, k) -> c.get(k) != null);\n    String valueString =\n        config.get(\n            lookupKey,\n            defaultValue == null ? null : COMMA_JOINER.join((Collection<?>) defaultValue));\n    List<String> value = COMMA_SPLITTER.splitToList(nullToEmpty(valueString));\n    return logProperty(lookupKey, value);\n  }", "signature": "Collection<String> getStringCollection(Configuration config)", "full_signature": "public Collection<String> getStringCollection(Configuration config)", "class_method_signature": "HadoopConfigurationProperty.getStringCollection(Configuration config)", "testcase": false, "constructor": false, "invocations": ["checkState", "getLookupKey", "get", "get", "join", "splitToList", "nullToEmpty", "logProperty"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}