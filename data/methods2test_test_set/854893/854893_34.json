{"test_class": {"identifier": "OutputStreamBitChannelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private OutputStream out;", "modifier": "@Mock\n    private", "type": "OutputStream", "declarator": "out", "var_name": "out"}], "file": "preon-io/src/test/java/org/codehaus/preon/channel/OutputStreamBitChannelTest.java"}, "test_case": {"identifier": "shouldAcceptIntsAndBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAcceptIntsAndBytes() throws IOException {\n        OutputStreamBitChannel channel = new OutputStreamBitChannel(out);\n        channel.write(12, (int) 0xfff, ByteOrder.BigEndian); // 1111 1111 1111\n        channel.write(5, (byte) 0x0); // 0000 0\n        verify(out).write((byte) Integer.parseInt(\"11111111\", 2));\n        verify(out).write((byte) Integer.parseInt(\"11110000\", 2));\n        verifyNoMoreInteractions(out);\n    }", "signature": "void shouldAcceptIntsAndBytes()", "full_signature": "@Test public void shouldAcceptIntsAndBytes()", "class_method_signature": "OutputStreamBitChannelTest.shouldAcceptIntsAndBytes()", "testcase": true, "constructor": false, "invocations": ["write", "write", "write", "verify", "parseInt", "write", "verify", "parseInt", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "OutputStreamBitChannel", "superclass": "", "interfaces": "implements BitChannel, Closeable", "fields": [{"original_string": "private static final byte[] MASK_UPPER = new byte[]{\n            (byte) Integer.parseInt(\"00000000\", 2),\n            (byte) Integer.parseInt(\"00000001\", 2),\n            (byte) Integer.parseInt(\"00000011\", 2),\n            (byte) Integer.parseInt(\"00000111\", 2),\n            (byte) Integer.parseInt(\"00001111\", 2),\n            (byte) Integer.parseInt(\"00011111\", 2),\n            (byte) Integer.parseInt(\"00111111\", 2),\n            (byte) Integer.parseInt(\"01111111\", 2),\n            (byte) Integer.parseInt(\"11111111\", 2)};", "modifier": "private static final", "type": "byte[]", "declarator": "MASK_UPPER = new byte[]{\n            (byte) Integer.parseInt(\"00000000\", 2),\n            (byte) Integer.parseInt(\"00000001\", 2),\n            (byte) Integer.parseInt(\"00000011\", 2),\n            (byte) Integer.parseInt(\"00000111\", 2),\n            (byte) Integer.parseInt(\"00001111\", 2),\n            (byte) Integer.parseInt(\"00011111\", 2),\n            (byte) Integer.parseInt(\"00111111\", 2),\n            (byte) Integer.parseInt(\"01111111\", 2),\n            (byte) Integer.parseInt(\"11111111\", 2)}", "var_name": "MASK_UPPER"}, {"original_string": "private final OutputStream out;", "modifier": "private final", "type": "OutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private int bitPos;", "modifier": "private", "type": "int", "declarator": "bitPos", "var_name": "bitPos"}, {"original_string": "private byte buffer;", "modifier": "private", "type": "byte", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "OutputStreamBitChannel", "parameters": "(@Nonnull OutputStream out)", "modifiers": "public", "return": "", "signature": " OutputStreamBitChannel(@Nonnull OutputStream out)", "full_signature": "public  OutputStreamBitChannel(@Nonnull OutputStream out)", "class_method_signature": "OutputStreamBitChannel.OutputStreamBitChannel(@Nonnull OutputStream out)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void write(boolean value)", "full_signature": "public void write(boolean value)", "class_method_signature": "OutputStreamBitChannel.write(boolean value)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnegative int nrbits, byte value)", "modifiers": "public", "return": "void", "signature": "void write(@Nonnegative int nrbits, byte value)", "full_signature": "public void write(@Nonnegative int nrbits, byte value)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnegative int nrbits, byte value)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnegative int nrbits, int value, ByteOrder byteOrder)", "modifiers": "public", "return": "void", "signature": "void write(@Nonnegative int nrbits, int value, ByteOrder byteOrder)", "full_signature": "public void write(@Nonnegative int nrbits, int value, ByteOrder byteOrder)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnegative int nrbits, int value, ByteOrder byteOrder)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnegative int nrbits, long value, ByteOrder byteOrder)", "modifiers": "public", "return": "void", "signature": "void write(@Nonnegative int nrbits, long value, ByteOrder byteOrder)", "full_signature": "public void write(@Nonnegative int nrbits, long value, ByteOrder byteOrder)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnegative int nrbits, long value, ByteOrder byteOrder)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnegative int nrbits, short value, ByteOrder byteOrder)", "modifiers": "public", "return": "void", "signature": "void write(@Nonnegative int nrbits, short value, ByteOrder byteOrder)", "full_signature": "public void write(@Nonnegative int nrbits, short value, ByteOrder byteOrder)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnegative int nrbits, short value, ByteOrder byteOrder)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnull byte[] src, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void write(@Nonnull byte[] src, int offset, int length)", "full_signature": "public void write(@Nonnull byte[] src, int offset, int length)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnull byte[] src, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@Nonnull ByteBuffer buffer)", "modifiers": "public", "return": "long", "signature": "long write(@Nonnull ByteBuffer buffer)", "full_signature": "public long write(@Nonnull ByteBuffer buffer)", "class_method_signature": "OutputStreamBitChannel.write(@Nonnull ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "getRelativeBitPos", "parameters": "()", "modifiers": "public @Nonnegative", "return": "int", "signature": "int getRelativeBitPos()", "full_signature": "public @Nonnegative int getRelativeBitPos()", "class_method_signature": "OutputStreamBitChannel.getRelativeBitPos()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "OutputStreamBitChannel.close()", "testcase": false, "constructor": false}], "file": "preon-io/src/main/java/org/codehaus/preon/channel/OutputStreamBitChannel.java"}, "focal_method": {"identifier": "write", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "body": "public void write(boolean value) throws IOException {\n        if (value) {\n            buffer = (byte) (0xff & ((buffer << 1) | 0x01));\n        } else {\n            buffer = (byte) (0xff & (buffer << 1));\n        }\n        if (++bitPos == 8) {\n            bitPos = 0;\n            out.write(buffer);\n            buffer = 0;\n        }\n    }", "signature": "void write(boolean value)", "full_signature": "public void write(boolean value)", "class_method_signature": "OutputStreamBitChannel.write(boolean value)", "testcase": false, "constructor": false, "invocations": ["write"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}