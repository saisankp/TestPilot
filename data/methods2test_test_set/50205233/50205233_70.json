{"test_class": {"identifier": "JacksonReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "debezium-core/src/test/java/io/debezium/document/JacksonReaderTest.java"}, "test_case": {"identifier": "canParseDocumentWithUnescapedControlCharacter", "parameters": "()", "modifiers": "@Test @FixFor(\"DBZ-657\") public", "return": "void", "body": "@Test\n    @FixFor(\"DBZ-657\")\n    public void canParseDocumentWithUnescapedControlCharacter() throws Exception {\n        Document document = JacksonReader.DEFAULT_INSTANCE.read(\n                // { \" a CR b \" : 1 2 3 }\n                new String(new byte[]{ 123, 34, 97, 13, 98, 34, 58, 49, 50, 51, 125 }));\n\n        assertThat((Object) document).isEqualTo(Document.create(\"a\\rb\", 123));\n    }", "signature": "void canParseDocumentWithUnescapedControlCharacter()", "full_signature": "@Test @FixFor(\"DBZ-657\") public void canParseDocumentWithUnescapedControlCharacter()", "class_method_signature": "JacksonReaderTest.canParseDocumentWithUnescapedControlCharacter()", "testcase": true, "constructor": false, "invocations": ["read", "isEqualTo", "assertThat", "create"]}, "focal_class": {"identifier": "JacksonReader", "superclass": "", "interfaces": "implements DocumentReader, ArrayReader", "fields": [{"original_string": "public static final JacksonReader DEFAULT_INSTANCE = new JacksonReader(false);", "modifier": "public static final", "type": "JacksonReader", "declarator": "DEFAULT_INSTANCE = new JacksonReader(false)", "var_name": "DEFAULT_INSTANCE"}, {"original_string": "public static final JacksonReader FLOAT_NUMBERS_AS_TEXT_INSTANCE = new JacksonReader(true);", "modifier": "public static final", "type": "JacksonReader", "declarator": "FLOAT_NUMBERS_AS_TEXT_INSTANCE = new JacksonReader(true)", "var_name": "FLOAT_NUMBERS_AS_TEXT_INSTANCE"}, {"original_string": "private static final JsonFactory factory;", "modifier": "private static final", "type": "JsonFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final boolean handleFloatNumbersAsText;", "modifier": "private final", "type": "boolean", "declarator": "handleFloatNumbersAsText", "var_name": "handleFloatNumbersAsText"}], "methods": [{"identifier": "JacksonReader", "parameters": "(boolean handleFloatNumbersAsText)", "modifiers": "private", "return": "", "signature": " JacksonReader(boolean handleFloatNumbersAsText)", "full_signature": "private  JacksonReader(boolean handleFloatNumbersAsText)", "class_method_signature": "JacksonReader.JacksonReader(boolean handleFloatNumbersAsText)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(InputStream jsonStream)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(InputStream jsonStream)", "full_signature": "@Override public Document read(InputStream jsonStream)", "class_method_signature": "JacksonReader.read(InputStream jsonStream)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Reader jsonReader)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(Reader jsonReader)", "full_signature": "@Override public Document read(Reader jsonReader)", "class_method_signature": "JacksonReader.read(Reader jsonReader)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String json)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(String json)", "full_signature": "@Override public Document read(String json)", "class_method_signature": "JacksonReader.read(String json)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(File jsonFile)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(File jsonFile)", "full_signature": "@Override public Document read(File jsonFile)", "class_method_signature": "JacksonReader.read(File jsonFile)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(URL jsonUrl)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(URL jsonUrl)", "full_signature": "@Override public Document read(URL jsonUrl)", "class_method_signature": "JacksonReader.read(URL jsonUrl)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] rawBytes)", "modifiers": "@Override public", "return": "Document", "signature": "Document read(byte[] rawBytes)", "full_signature": "@Override public Document read(byte[] rawBytes)", "class_method_signature": "JacksonReader.read(byte[] rawBytes)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(InputStream jsonStream)", "modifiers": "@Override public", "return": "Array", "signature": "Array readArray(InputStream jsonStream)", "full_signature": "@Override public Array readArray(InputStream jsonStream)", "class_method_signature": "JacksonReader.readArray(InputStream jsonStream)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(Reader jsonReader)", "modifiers": "@Override public", "return": "Array", "signature": "Array readArray(Reader jsonReader)", "full_signature": "@Override public Array readArray(Reader jsonReader)", "class_method_signature": "JacksonReader.readArray(Reader jsonReader)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(URL jsonUrl)", "modifiers": "@Override public", "return": "Array", "signature": "Array readArray(URL jsonUrl)", "full_signature": "@Override public Array readArray(URL jsonUrl)", "class_method_signature": "JacksonReader.readArray(URL jsonUrl)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(File jsonFile)", "modifiers": "@Override public", "return": "Array", "signature": "Array readArray(File jsonFile)", "full_signature": "@Override public Array readArray(File jsonFile)", "class_method_signature": "JacksonReader.readArray(File jsonFile)", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "(String jsonArray)", "modifiers": "@Override public", "return": "Array", "signature": "Array readArray(String jsonArray)", "full_signature": "@Override public Array readArray(String jsonArray)", "class_method_signature": "JacksonReader.readArray(String jsonArray)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(JsonParser parser)", "modifiers": "private", "return": "Document", "signature": "Document parse(JsonParser parser)", "full_signature": "private Document parse(JsonParser parser)", "class_method_signature": "JacksonReader.parse(JsonParser parser)", "testcase": false, "constructor": false}, {"identifier": "parseDocument", "parameters": "(JsonParser parser, boolean nested)", "modifiers": "private", "return": "Document", "signature": "Document parseDocument(JsonParser parser, boolean nested)", "full_signature": "private Document parseDocument(JsonParser parser, boolean nested)", "class_method_signature": "JacksonReader.parseDocument(JsonParser parser, boolean nested)", "testcase": false, "constructor": false}, {"identifier": "parseArray", "parameters": "(JsonParser parser, boolean nested)", "modifiers": "private", "return": "Array", "signature": "Array parseArray(JsonParser parser, boolean nested)", "full_signature": "private Array parseArray(JsonParser parser, boolean nested)", "class_method_signature": "JacksonReader.parseArray(JsonParser parser, boolean nested)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/document/JacksonReader.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream jsonStream)", "modifiers": "@Override public", "return": "Document", "body": "@Override\n    public Document read(InputStream jsonStream) throws IOException {\n        return parse(factory.createParser(jsonStream));\n    }", "signature": "Document read(InputStream jsonStream)", "full_signature": "@Override public Document read(InputStream jsonStream)", "class_method_signature": "JacksonReader.read(InputStream jsonStream)", "testcase": false, "constructor": false, "invocations": ["parse", "createParser"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}