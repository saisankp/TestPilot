{"test_class": {"identifier": "OctTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TreeNodeListenerStub<DefaultOctTreeNode<Object>> listener =\n\t\tnew TreeNodeListenerStub<>();", "modifier": "private final", "type": "TreeNodeListenerStub<DefaultOctTreeNode<Object>>", "declarator": "listener =\n\t\tnew TreeNodeListenerStub<>()", "var_name": "listener"}, {"original_string": "private DefaultOctTreeNode<Object> root;", "modifier": "private", "type": "DefaultOctTreeNode<Object>", "declarator": "root", "var_name": "root"}, {"original_string": "private DefaultOctTreeNode<Object> child1;", "modifier": "private", "type": "DefaultOctTreeNode<Object>", "declarator": "child1", "var_name": "child1"}, {"original_string": "private DefaultOctTreeNode<Object> child2;", "modifier": "private", "type": "DefaultOctTreeNode<Object>", "declarator": "child2", "var_name": "child2"}, {"original_string": "private DefaultOctTreeNode<Object> node;", "modifier": "private", "type": "DefaultOctTreeNode<Object>", "declarator": "node", "var_name": "node"}, {"original_string": "private DefaultOctTreeNode<Object> newNode;", "modifier": "private", "type": "DefaultOctTreeNode<Object>", "declarator": "newNode", "var_name": "newNode"}], "file": "core/maths/mathtree/src/test/java/org/arakhne/afc/math/tree/node/OctTreeNodeTest.java"}, "test_case": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getChildCount() {\n\t\tassertEquals(8, this.root.getChildCount());\n\t\tassertEquals(8, this.child1.getChildCount());\n\t\tassertEquals(8, this.child2.getChildCount());\n\t\tassertEquals(8, this.node.getChildCount());\n\t}", "signature": "void getChildCount()", "full_signature": "@Test public void getChildCount()", "class_method_signature": "OctTreeNodeTest.getChildCount()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount", "assertEquals", "getChildCount"]}, "focal_class": {"identifier": "OctTreeNode", "superclass": "extends AbstractTreeNode<D, N>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -6184547894654511018L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6184547894654511018L", "var_name": "serialVersionUID"}, {"original_string": "private N child1;", "modifier": "private", "type": "N", "declarator": "child1", "var_name": "child1"}, {"original_string": "private N child2;", "modifier": "private", "type": "N", "declarator": "child2", "var_name": "child2"}, {"original_string": "private N child3;", "modifier": "private", "type": "N", "declarator": "child3", "var_name": "child3"}, {"original_string": "private N child4;", "modifier": "private", "type": "N", "declarator": "child4", "var_name": "child4"}, {"original_string": "private N child5;", "modifier": "private", "type": "N", "declarator": "child5", "var_name": "child5"}, {"original_string": "private N child6;", "modifier": "private", "type": "N", "declarator": "child6", "var_name": "child6"}, {"original_string": "private N child7;", "modifier": "private", "type": "N", "declarator": "child7", "var_name": "child7"}, {"original_string": "private N child8;", "modifier": "private", "type": "N", "declarator": "child8", "var_name": "child8"}], "methods": [{"identifier": "OctTreeNode", "parameters": "()", "modifiers": "public", "return": "", "signature": " OctTreeNode()", "full_signature": "public  OctTreeNode()", "class_method_signature": "OctTreeNode.OctTreeNode()", "testcase": false, "constructor": true}, {"identifier": "OctTreeNode", "parameters": "(Collection<D> data)", "modifiers": "public", "return": "", "signature": " OctTreeNode(Collection<D> data)", "full_signature": "public  OctTreeNode(Collection<D> data)", "class_method_signature": "OctTreeNode.OctTreeNode(Collection<D> data)", "testcase": false, "constructor": true}, {"identifier": "OctTreeNode", "parameters": "(D data)", "modifiers": "public", "return": "", "signature": " OctTreeNode(D data)", "full_signature": "public  OctTreeNode(D data)", "class_method_signature": "OctTreeNode.OctTreeNode(D data)", "testcase": false, "constructor": true}, {"identifier": "OctTreeNode", "parameters": "(boolean useLinkedList)", "modifiers": "public", "return": "", "signature": " OctTreeNode(boolean useLinkedList)", "full_signature": "public  OctTreeNode(boolean useLinkedList)", "class_method_signature": "OctTreeNode.OctTreeNode(boolean useLinkedList)", "testcase": false, "constructor": true}, {"identifier": "OctTreeNode", "parameters": "(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "modifiers": "public", "return": "", "signature": " OctTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "full_signature": "public  OctTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "class_method_signature": "OctTreeNode.OctTreeNode(boolean useLinkedList, boolean copyDataCollection, List<D> data)", "testcase": false, "constructor": true}, {"identifier": "OctTreeNode", "parameters": "(boolean useLinkedList, D data)", "modifiers": "public", "return": "", "signature": " OctTreeNode(boolean useLinkedList, D data)", "full_signature": "public  OctTreeNode(boolean useLinkedList, D data)", "class_method_signature": "OctTreeNode.OctTreeNode(boolean useLinkedList, D data)", "testcase": false, "constructor": true}, {"identifier": "getPartitionEnumeration", "parameters": "()", "modifiers": "@Pure @Override public", "return": "Class<? extends Enum<?>>", "signature": "Class<? extends Enum<?>> getPartitionEnumeration()", "full_signature": "@Pure @Override public Class<? extends Enum<?>> getPartitionEnumeration()", "class_method_signature": "OctTreeNode.getPartitionEnumeration()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "@SuppressWarnings(\"checkstyle:npathcomplexity\") private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "@SuppressWarnings(\"checkstyle:npathcomplexity\") private void readObject(ObjectInputStream in)", "class_method_signature": "OctTreeNode.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) public", "return": "void", "signature": "void clear()", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:magicnumber\"}) public void clear()", "class_method_signature": "OctTreeNode.clear()", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Pure @Override @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "int", "signature": "int getChildCount()", "full_signature": "@Pure @Override @SuppressWarnings(\"checkstyle:magicnumber\") public int getChildCount()", "class_method_signature": "OctTreeNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getNotNullChildCount", "parameters": "()", "modifiers": "@Pure @Override public", "return": "int", "signature": "int getNotNullChildCount()", "full_signature": "@Pure @Override public int getNotNullChildCount()", "class_method_signature": "OctTreeNode.getNotNullChildCount()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(N child)", "modifiers": "@Pure @Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public", "return": "int", "signature": "int indexOf(N child)", "full_signature": "@Pure @Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public int indexOf(N child)", "class_method_signature": "OctTreeNode.indexOf(N child)", "testcase": false, "constructor": false}, {"identifier": "zoneOf", "parameters": "(N child)", "modifiers": "@Pure public final", "return": "OctTreeZone", "signature": "OctTreeZone zoneOf(N child)", "full_signature": "@Pure public final OctTreeZone zoneOf(N child)", "class_method_signature": "OctTreeNode.zoneOf(N child)", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(int index)", "modifiers": "@Pure @Override @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public", "return": "N", "signature": "N getChildAt(int index)", "full_signature": "@Pure @Override @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public N getChildAt(int index)", "class_method_signature": "OctTreeNode.getChildAt(int index)", "testcase": false, "constructor": false}, {"identifier": "getChildAt", "parameters": "(OctTreeZone zone)", "modifiers": "@Pure public final", "return": "N", "signature": "N getChildAt(OctTreeZone zone)", "full_signature": "@Pure public final N getChildAt(OctTreeZone zone)", "class_method_signature": "OctTreeNode.getChildAt(OctTreeZone zone)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, int index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean moveTo(N newParent, int index)", "full_signature": "@Override public boolean moveTo(N newParent, int index)", "class_method_signature": "OctTreeNode.moveTo(N newParent, int index)", "testcase": false, "constructor": false}, {"identifier": "moveTo", "parameters": "(N newParent, OctTreeZone zone)", "modifiers": "public", "return": "boolean", "signature": "boolean moveTo(N newParent, OctTreeZone zone)", "full_signature": "public boolean moveTo(N newParent, OctTreeZone zone)", "class_method_signature": "OctTreeNode.moveTo(N newParent, OctTreeZone zone)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(int index, N newChild)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public", "return": "boolean", "signature": "boolean setChildAt(int index, N newChild)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:returncount\", \"checkstyle:magicnumber\"}) public boolean setChildAt(int index, N newChild)", "class_method_signature": "OctTreeNode.setChildAt(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAt", "parameters": "(OctTreeZone zone, N newChild)", "modifiers": "public final", "return": "boolean", "signature": "boolean setChildAt(OctTreeZone zone, N newChild)", "full_signature": "public final boolean setChildAt(OctTreeZone zone, N newChild)", "class_method_signature": "OctTreeNode.setChildAt(OctTreeZone zone, N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChildAtWithoutEventFiring", "parameters": "(int index, N newChild)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:magicnumber\"}) protected", "return": "void", "signature": "void setChildAtWithoutEventFiring(int index, N newChild)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\", \"checkstyle:magicnumber\"}) protected void setChildAtWithoutEventFiring(int index, N newChild)", "class_method_signature": "OctTreeNode.setChildAtWithoutEventFiring(int index, N newChild)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(N child)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"}) public", "return": "boolean", "signature": "boolean removeChild(N child)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:returncount\", \"checkstyle:cyclomaticcomplexity\"}) public boolean removeChild(N child)", "class_method_signature": "OctTreeNode.removeChild(N child)", "testcase": false, "constructor": false}, {"identifier": "setChild1", "parameters": "(N newChild)", "modifiers": "private", "return": "boolean", "signature": "boolean setChild1(N newChild)", "full_signature": "private boolean setChild1(N newChild)", "class_method_signature": "OctTreeNode.setChild1(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild2", "parameters": "(N newChild)", "modifiers": "private", "return": "boolean", "signature": "boolean setChild2(N newChild)", "full_signature": "private boolean setChild2(N newChild)", "class_method_signature": "OctTreeNode.setChild2(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild3", "parameters": "(N newChild)", "modifiers": "private", "return": "boolean", "signature": "boolean setChild3(N newChild)", "full_signature": "private boolean setChild3(N newChild)", "class_method_signature": "OctTreeNode.setChild3(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild4", "parameters": "(N newChild)", "modifiers": "private", "return": "boolean", "signature": "boolean setChild4(N newChild)", "full_signature": "private boolean setChild4(N newChild)", "class_method_signature": "OctTreeNode.setChild4(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild5", "parameters": "(N newChild)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "boolean", "signature": "boolean setChild5(N newChild)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private boolean setChild5(N newChild)", "class_method_signature": "OctTreeNode.setChild5(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild6", "parameters": "(N newChild)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "boolean", "signature": "boolean setChild6(N newChild)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private boolean setChild6(N newChild)", "class_method_signature": "OctTreeNode.setChild6(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild7", "parameters": "(N newChild)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "boolean", "signature": "boolean setChild7(N newChild)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private boolean setChild7(N newChild)", "class_method_signature": "OctTreeNode.setChild7(N newChild)", "testcase": false, "constructor": false}, {"identifier": "setChild8", "parameters": "(N newChild)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") private", "return": "boolean", "signature": "boolean setChild8(N newChild)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") private boolean setChild8(N newChild)", "class_method_signature": "OctTreeNode.setChild8(N newChild)", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "@Pure @Override @SuppressWarnings(\"checkstyle:booleanexpressioncomplexity\") public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "@Pure @Override @SuppressWarnings(\"checkstyle:booleanexpressioncomplexity\") public boolean isLeaf()", "class_method_signature": "OctTreeNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(Object[] array)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:magicnumber\", \"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public", "return": "void", "signature": "void getChildren(Object[] array)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:magicnumber\", \"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public void getChildren(Object[] array)", "class_method_signature": "OctTreeNode.getChildren(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "getMinHeight", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public", "return": "int", "signature": "int getMinHeight()", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public int getMinHeight()", "class_method_signature": "OctTreeNode.getMinHeight()", "testcase": false, "constructor": false}, {"identifier": "getMaxHeight", "parameters": "()", "modifiers": "@Pure @Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public", "return": "int", "signature": "int getMaxHeight()", "full_signature": "@Pure @Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) public int getMaxHeight()", "class_method_signature": "OctTreeNode.getMaxHeight()", "testcase": false, "constructor": false}, {"identifier": "getHeights", "parameters": "(int currentHeight, List<Integer> heights)", "modifiers": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) protected", "return": "void", "signature": "void getHeights(int currentHeight, List<Integer> heights)", "full_signature": "@Override @SuppressWarnings({\"checkstyle:npathcomplexity\", \"checkstyle:cyclomaticcomplexity\"}) protected void getHeights(int currentHeight, List<Integer> heights)", "class_method_signature": "OctTreeNode.getHeights(int currentHeight, List<Integer> heights)", "testcase": false, "constructor": false}], "file": "core/maths/mathtree/src/main/java/org/arakhne/afc/math/tree/node/OctTreeNode.java"}, "focal_method": {"identifier": "getChildCount", "parameters": "()", "modifiers": "@Pure @Override @SuppressWarnings(\"checkstyle:magicnumber\") public", "return": "int", "body": "@Pure\n\t@Override\n\t@SuppressWarnings(\"checkstyle:magicnumber\")\n\tpublic int getChildCount() {\n\t\treturn 8;\n\t}", "signature": "int getChildCount()", "full_signature": "@Pure @Override @SuppressWarnings(\"checkstyle:magicnumber\") public int getChildCount()", "class_method_signature": "OctTreeNode.getChildCount()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}