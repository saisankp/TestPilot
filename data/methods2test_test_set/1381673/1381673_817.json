{"test_class": {"identifier": "RuleModelVisitorTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitorTest.java"}, "test_case": {"identifier": "testSingleFieldConstraintPredicate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleFieldConstraintPredicate() {\n\n        Map<InterpolationVariable, Integer> variableMap = new HashMap<>();\n        RuleModelVisitor visitor = new RuleModelVisitor(variableMap);\n\n        SingleFieldConstraint singleFieldConstraint = new SingleFieldConstraint();\n        singleFieldConstraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n        singleFieldConstraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");\n\n        visitor.visit(singleFieldConstraint);\n\n        assertEquals(1, variableMap.keySet().size());\n\n        InterpolationVariable interpolationVariable = variableMap.keySet().iterator().next();\n        assertEquals(\"param1\", interpolationVariable.getVarName());\n        assertEquals(\"Object\", interpolationVariable.getDataType());\n        assertNull(interpolationVariable.getFactField());\n        assertNull(interpolationVariable.getOperator());\n    }", "signature": "void testSingleFieldConstraintPredicate()", "full_signature": "@Test public void testSingleFieldConstraintPredicate()", "class_method_signature": "RuleModelVisitorTest.testSingleFieldConstraintPredicate()", "testcase": true, "constructor": false, "invocations": ["setConstraintValueType", "setValue", "visit", "assertEquals", "size", "keySet", "next", "iterator", "keySet", "assertEquals", "getVarName", "assertEquals", "getDataType", "assertNull", "getFactField", "assertNull", "getOperator"]}, "focal_class": {"identifier": "RuleModelVisitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IFactPattern factPattern;", "modifier": "private", "type": "IFactPattern", "declarator": "factPattern", "var_name": "factPattern"}, {"original_string": "private RuleModel model = new RuleModel();", "modifier": "private", "type": "RuleModel", "declarator": "model = new RuleModel()", "var_name": "model"}, {"original_string": "private Map<InterpolationVariable, Integer> vars;", "modifier": "private", "type": "Map<InterpolationVariable, Integer>", "declarator": "vars", "var_name": "vars"}], "methods": [{"identifier": "RuleModelVisitor", "parameters": "()", "modifiers": "public", "return": "", "signature": " RuleModelVisitor()", "full_signature": "public  RuleModelVisitor()", "class_method_signature": "RuleModelVisitor.RuleModelVisitor()", "testcase": false, "constructor": true}, {"identifier": "RuleModelVisitor", "parameters": "(Map<InterpolationVariable, Integer> vars)", "modifiers": "public", "return": "", "signature": " RuleModelVisitor(Map<InterpolationVariable, Integer> vars)", "full_signature": "public  RuleModelVisitor(Map<InterpolationVariable, Integer> vars)", "class_method_signature": "RuleModelVisitor.RuleModelVisitor(Map<InterpolationVariable, Integer> vars)", "testcase": false, "constructor": true}, {"identifier": "RuleModelVisitor", "parameters": "(IPattern pattern,\n                            Map<InterpolationVariable, Integer> vars)", "modifiers": "public", "return": "", "signature": " RuleModelVisitor(IPattern pattern,\n                            Map<InterpolationVariable, Integer> vars)", "full_signature": "public  RuleModelVisitor(IPattern pattern,\n                            Map<InterpolationVariable, Integer> vars)", "class_method_signature": "RuleModelVisitor.RuleModelVisitor(IPattern pattern,\n                            Map<InterpolationVariable, Integer> vars)", "testcase": false, "constructor": true}, {"identifier": "RuleModelVisitor", "parameters": "(IAction action,\n                            Map<InterpolationVariable, Integer> vars)", "modifiers": "public", "return": "", "signature": " RuleModelVisitor(IAction action,\n                            Map<InterpolationVariable, Integer> vars)", "full_signature": "public  RuleModelVisitor(IAction action,\n                            Map<InterpolationVariable, Integer> vars)", "class_method_signature": "RuleModelVisitor.RuleModelVisitor(IAction action,\n                            Map<InterpolationVariable, Integer> vars)", "testcase": false, "constructor": true}, {"identifier": "RuleModelVisitor", "parameters": "(IPattern[] lhs,\n                            Map<InterpolationVariable, Integer> vars)", "modifiers": "public", "return": "", "signature": " RuleModelVisitor(IPattern[] lhs,\n                            Map<InterpolationVariable, Integer> vars)", "full_signature": "public  RuleModelVisitor(IPattern[] lhs,\n                            Map<InterpolationVariable, Integer> vars)", "class_method_signature": "RuleModelVisitor.RuleModelVisitor(IPattern[] lhs,\n                            Map<InterpolationVariable, Integer> vars)", "testcase": false, "constructor": true}, {"identifier": "RuleModelVisitor", "parameters": "(IAction[] rhs,\n                            Map<InterpolationVariable, Integer> vars)", "modifiers": "public", "return": "", "signature": " RuleModelVisitor(IAction[] rhs,\n                            Map<InterpolationVariable, Integer> vars)", "full_signature": "public  RuleModelVisitor(IAction[] rhs,\n                            Map<InterpolationVariable, Integer> vars)", "class_method_signature": "RuleModelVisitor.RuleModelVisitor(IAction[] rhs,\n                            Map<InterpolationVariable, Integer> vars)", "testcase": false, "constructor": true}, {"identifier": "parseStringPattern", "parameters": "(String text)", "modifiers": "private", "return": "void", "signature": "void parseStringPattern(String text)", "full_signature": "private void parseStringPattern(String text)", "class_method_signature": "RuleModelVisitor.parseStringPattern(String text)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Object o)", "modifiers": "public", "return": "void", "signature": "void visit(Object o)", "full_signature": "public void visit(Object o)", "class_method_signature": "RuleModelVisitor.visit(Object o)", "testcase": false, "constructor": false}, {"identifier": "visitActionFieldList", "parameters": "(ActionInsertFact afl)", "modifiers": "private", "return": "void", "signature": "void visitActionFieldList(ActionInsertFact afl)", "full_signature": "private void visitActionFieldList(ActionInsertFact afl)", "class_method_signature": "RuleModelVisitor.visitActionFieldList(ActionInsertFact afl)", "testcase": false, "constructor": false}, {"identifier": "visitActionFieldList", "parameters": "(ActionSetField afl)", "modifiers": "private", "return": "void", "signature": "void visitActionFieldList(ActionSetField afl)", "full_signature": "private void visitActionFieldList(ActionSetField afl)", "class_method_signature": "RuleModelVisitor.visitActionFieldList(ActionSetField afl)", "testcase": false, "constructor": false}, {"identifier": "visitActionFieldList", "parameters": "(ActionUpdateField afl)", "modifiers": "private", "return": "void", "signature": "void visitActionFieldList(ActionUpdateField afl)", "full_signature": "private void visitActionFieldList(ActionUpdateField afl)", "class_method_signature": "RuleModelVisitor.visitActionFieldList(ActionUpdateField afl)", "testcase": false, "constructor": false}, {"identifier": "visitCompositeFactPattern", "parameters": "(CompositeFactPattern pattern)", "modifiers": "private", "return": "void", "signature": "void visitCompositeFactPattern(CompositeFactPattern pattern)", "full_signature": "private void visitCompositeFactPattern(CompositeFactPattern pattern)", "class_method_signature": "RuleModelVisitor.visitCompositeFactPattern(CompositeFactPattern pattern)", "testcase": false, "constructor": false}, {"identifier": "visitCompositeFieldConstraint", "parameters": "(CompositeFieldConstraint cfc)", "modifiers": "private", "return": "void", "signature": "void visitCompositeFieldConstraint(CompositeFieldConstraint cfc)", "full_signature": "private void visitCompositeFieldConstraint(CompositeFieldConstraint cfc)", "class_method_signature": "RuleModelVisitor.visitCompositeFieldConstraint(CompositeFieldConstraint cfc)", "testcase": false, "constructor": false}, {"identifier": "visitDSLSentence", "parameters": "(final DSLSentence sentence)", "modifiers": "private", "return": "void", "signature": "void visitDSLSentence(final DSLSentence sentence)", "full_signature": "private void visitDSLSentence(final DSLSentence sentence)", "class_method_signature": "RuleModelVisitor.visitDSLSentence(final DSLSentence sentence)", "testcase": false, "constructor": false}, {"identifier": "visitFactPattern", "parameters": "(FactPattern pattern)", "modifiers": "private", "return": "void", "signature": "void visitFactPattern(FactPattern pattern)", "full_signature": "private void visitFactPattern(FactPattern pattern)", "class_method_signature": "RuleModelVisitor.visitFactPattern(FactPattern pattern)", "testcase": false, "constructor": false}, {"identifier": "visitFreeFormLine", "parameters": "(FreeFormLine ffl)", "modifiers": "private", "return": "void", "signature": "void visitFreeFormLine(FreeFormLine ffl)", "full_signature": "private void visitFreeFormLine(FreeFormLine ffl)", "class_method_signature": "RuleModelVisitor.visitFreeFormLine(FreeFormLine ffl)", "testcase": false, "constructor": false}, {"identifier": "visitFromAccumulateCompositeFactPattern", "parameters": "(FromAccumulateCompositeFactPattern pattern)", "modifiers": "private", "return": "void", "signature": "void visitFromAccumulateCompositeFactPattern(FromAccumulateCompositeFactPattern pattern)", "full_signature": "private void visitFromAccumulateCompositeFactPattern(FromAccumulateCompositeFactPattern pattern)", "class_method_signature": "RuleModelVisitor.visitFromAccumulateCompositeFactPattern(FromAccumulateCompositeFactPattern pattern)", "testcase": false, "constructor": false}, {"identifier": "visitFromCollectCompositeFactPattern", "parameters": "(FromCollectCompositeFactPattern pattern)", "modifiers": "private", "return": "void", "signature": "void visitFromCollectCompositeFactPattern(FromCollectCompositeFactPattern pattern)", "full_signature": "private void visitFromCollectCompositeFactPattern(FromCollectCompositeFactPattern pattern)", "class_method_signature": "RuleModelVisitor.visitFromCollectCompositeFactPattern(FromCollectCompositeFactPattern pattern)", "testcase": false, "constructor": false}, {"identifier": "visitFromCompositeFactPattern", "parameters": "(FromCompositeFactPattern pattern)", "modifiers": "private", "return": "void", "signature": "void visitFromCompositeFactPattern(FromCompositeFactPattern pattern)", "full_signature": "private void visitFromCompositeFactPattern(FromCompositeFactPattern pattern)", "class_method_signature": "RuleModelVisitor.visitFromCompositeFactPattern(FromCompositeFactPattern pattern)", "testcase": false, "constructor": false}, {"identifier": "visitRuleModel", "parameters": "(RuleModel model)", "modifiers": "private", "return": "void", "signature": "void visitRuleModel(RuleModel model)", "full_signature": "private void visitRuleModel(RuleModel model)", "class_method_signature": "RuleModelVisitor.visitRuleModel(RuleModel model)", "testcase": false, "constructor": false}, {"identifier": "visitSingleFieldConstraint", "parameters": "(SingleFieldConstraint sfc)", "modifiers": "private", "return": "void", "signature": "void visitSingleFieldConstraint(SingleFieldConstraint sfc)", "full_signature": "private void visitSingleFieldConstraint(SingleFieldConstraint sfc)", "class_method_signature": "RuleModelVisitor.visitSingleFieldConstraint(SingleFieldConstraint sfc)", "testcase": false, "constructor": false}, {"identifier": "visitSingleFieldConstraint", "parameters": "(SingleFieldConstraintEBLeftSide sfexp)", "modifiers": "private", "return": "void", "signature": "void visitSingleFieldConstraint(SingleFieldConstraintEBLeftSide sfexp)", "full_signature": "private void visitSingleFieldConstraint(SingleFieldConstraintEBLeftSide sfexp)", "class_method_signature": "RuleModelVisitor.visitSingleFieldConstraint(SingleFieldConstraintEBLeftSide sfexp)", "testcase": false, "constructor": false}, {"identifier": "visitTemplateVariableAware", "parameters": "(final TemplateAware templateAware)", "modifiers": "private", "return": "void", "signature": "void visitTemplateVariableAware(final TemplateAware templateAware)", "full_signature": "private void visitTemplateVariableAware(final TemplateAware templateAware)", "class_method_signature": "RuleModelVisitor.visitTemplateVariableAware(final TemplateAware templateAware)", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java"}, "focal_method": {"identifier": "visit", "parameters": "(Object o)", "modifiers": "public", "return": "void", "body": "public void visit(Object o) {\n        if (o == null) {\n            return;\n        }\n        if (o instanceof RuleModel) {\n            visitRuleModel((RuleModel) o);\n        } else if (o instanceof FactPattern) {\n            visitFactPattern((FactPattern) o);\n        } else if (o instanceof CompositeFieldConstraint) {\n            visitCompositeFieldConstraint((CompositeFieldConstraint) o);\n        } else if (o instanceof SingleFieldConstraintEBLeftSide) {\n            visitSingleFieldConstraint((SingleFieldConstraintEBLeftSide) o);\n        } else if (o instanceof SingleFieldConstraint) {\n            visitSingleFieldConstraint((SingleFieldConstraint) o);\n        } else if (o instanceof CompositeFactPattern) {\n            visitCompositeFactPattern((CompositeFactPattern) o);\n        } else if (o instanceof FreeFormLine) {\n            visitFreeFormLine((FreeFormLine) o);\n        } else if (o instanceof FromAccumulateCompositeFactPattern) {\n            visitFromAccumulateCompositeFactPattern((FromAccumulateCompositeFactPattern) o);\n        } else if (o instanceof FromCollectCompositeFactPattern) {\n            visitFromCollectCompositeFactPattern((FromCollectCompositeFactPattern) o);\n        } else if (o instanceof FromCompositeFactPattern) {\n            visitFromCompositeFactPattern((FromCompositeFactPattern) o);\n        } else if (o instanceof DSLSentence) {\n            visitDSLSentence((DSLSentence) o);\n        } else if (o instanceof ActionInsertFact) {\n            visitActionFieldList((ActionInsertFact) o);\n        } else if (o instanceof ActionUpdateField) {\n            visitActionFieldList((ActionUpdateField) o);\n        } else if (o instanceof ActionSetField) {\n            visitActionFieldList((ActionSetField) o);\n        } else if (o instanceof TemplateAware) {\n            visitTemplateVariableAware((TemplateAware) o);\n        }\n    }", "signature": "void visit(Object o)", "full_signature": "public void visit(Object o)", "class_method_signature": "RuleModelVisitor.visit(Object o)", "testcase": false, "constructor": false, "invocations": ["visitRuleModel", "visitFactPattern", "visitCompositeFieldConstraint", "visitSingleFieldConstraint", "visitSingleFieldConstraint", "visitCompositeFactPattern", "visitFreeFormLine", "visitFromAccumulateCompositeFactPattern", "visitFromCollectCompositeFactPattern", "visitFromCompositeFactPattern", "visitDSLSentence", "visitActionFieldList", "visitActionFieldList", "visitActionFieldList", "visitTemplateVariableAware"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}