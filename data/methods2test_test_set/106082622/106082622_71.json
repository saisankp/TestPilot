{"test_class": {"identifier": "UserControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/configuration/user/UserControllerTest.java"}, "test_case": {"identifier": "testIndex", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void testIndex() throws Exception {\n        // Hit index.\n        mockMvc\n            .perform(get(\"/configuration/user\").with(user(adminUserDetails)))\n            //.andDo(print())\n            .andExpect(status().isOk())\n            // Validate user 1\n            .andExpect(content().string(containsString(adminUser.getEmail())))\n            .andExpect(content().string(containsString(adminUser.getDisplayName())))\n\n            // Validate user 2\n            .andExpect(content().string(containsString(nonAdminUser.getEmail())))\n            .andExpect(content().string(containsString(nonAdminUser.getDisplayName())));\n    }", "signature": "void testIndex()", "full_signature": "@Test @Transactional public void testIndex()", "class_method_signature": "UserControllerTest.testIndex()", "testcase": true, "constructor": false, "invocations": ["andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "with", "get", "user", "isOk", "status", "string", "content", "containsString", "getEmail", "string", "content", "containsString", "getDisplayName", "string", "content", "containsString", "getEmail", "string", "content", "containsString", "getDisplayName"]}, "focal_class": {"identifier": "UserController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UserRepository userRepository;", "modifier": "@Autowired\n    private", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}, {"original_string": "@Autowired\n    private UserManager userManager;", "modifier": "@Autowired\n    private", "type": "UserManager", "declarator": "userManager", "var_name": "userManager"}, {"original_string": "@Autowired\n    private AppProperties appProperties;", "modifier": "@Autowired\n    private", "type": "AppProperties", "declarator": "appProperties", "var_name": "appProperties"}], "methods": [{"identifier": "index", "parameters": "(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "signature": "String index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "class_method_signature": "UserController.index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(final UserForm userForm, final Model model, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public", "return": "String", "signature": "String createUser(final UserForm userForm, final Model model, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public String createUser(final UserForm userForm, final Model model, final RedirectAttributes redirectAttributes)", "class_method_signature": "UserController.createUser(final UserForm userForm, final Model model, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "getUserRoleOptions", "parameters": "()", "modifiers": "private", "return": "List<UserRole>", "signature": "List<UserRole> getUserRoleOptions()", "full_signature": "private List<UserRole> getUserRoleOptions()", "class_method_signature": "UserController.getUserRoleOptions()", "testcase": false, "constructor": false}, {"identifier": "editUserForm", "parameters": "(\n        @PathVariable final Long id,\n        final UserForm userForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "modifiers": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public", "return": "String", "signature": "String editUserForm(\n        @PathVariable final Long id,\n        final UserForm userForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "full_signature": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public String editUserForm(\n        @PathVariable final Long id,\n        final UserForm userForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "class_method_signature": "UserController.editUserForm(\n        @PathVariable final Long id,\n        final UserForm userForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(\n        @Valid final UserForm userForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "modifiers": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public", "return": "String", "signature": "String update(\n        @Valid final UserForm userForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "full_signature": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public String update(\n        @Valid final UserForm userForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "class_method_signature": "UserController.update(\n        @Valid final UserForm userForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public", "return": "String", "signature": "String delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public String delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "UserController.delete(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "setupBreadCrumbs", "parameters": "(final Model model, final String name, final String url)", "modifiers": "private", "return": "void", "signature": "void setupBreadCrumbs(final Model model, final String name, final String url)", "full_signature": "private void setupBreadCrumbs(final Model model, final String name, final String url)", "class_method_signature": "UserController.setupBreadCrumbs(final Model model, final String name, final String url)", "testcase": false, "constructor": false}, {"identifier": "redirectIfUsingLdapAuthentication", "parameters": "(final RedirectAttributes redirectAttributes)", "modifiers": "private", "return": "boolean", "signature": "boolean redirectIfUsingLdapAuthentication(final RedirectAttributes redirectAttributes)", "full_signature": "private boolean redirectIfUsingLdapAuthentication(final RedirectAttributes redirectAttributes)", "class_method_signature": "UserController.redirectIfUsingLdapAuthentication(final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/configuration/user/UserController.java"}, "focal_method": {"identifier": "index", "parameters": "(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "body": "@RequestMapping(path = \"\", method = RequestMethod.GET)\n    public String index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    ) {\n        // Setup breadcrumbs\n        setupBreadCrumbs(model, null, null);\n\n        // Check for LDAP auth method and restrict access.\n        if (redirectIfUsingLdapAuthentication(redirectAttributes)) {\n            return \"redirect:/\";\n        }\n\n        final Datatable.Builder<User> builder = Datatable.newBuilder(User.class)\n            .withRepository(userRepository)\n            .withPageable(pageable)\n            .withRequestParams(allParams)\n            .withUrl(\"/configuration/user\")\n            .withLabel(\"Users\")\n            // Only show active users.\n            .withConstraint(\"isActive\", true, ConstraintOperator.EQUALS)\n            // With Create Link\n            .withCreateLink(\"/configuration/user/create\")\n            // Email Column\n            .withColumn(DatatableColumn.newBuilder(User.class)\n                .withFieldName(\"email\")\n                .withLabel(\"Email\")\n                .withRenderFunction(User::getEmail)\n                .withIsSortable(true)\n                .build())\n            // Name Column\n            .withColumn(DatatableColumn.newBuilder(User.class)\n                .withFieldName(\"displayName\")\n                .withLabel(\"Name\")\n                .withRenderFunction(User::getDisplayName)\n                .withIsSortable(true)\n                .build())\n            // Role Column\n            .withColumn(DatatableColumn.newBuilder(User.class)\n                .withFieldName(\"role\")\n                .withLabel(\"Role\")\n                .withRenderFunction((user) -> {\n                    switch (user.getRole()) {\n                        case ROLE_ADMIN:\n                            return \"Admin\";\n                        case ROLE_USER:\n                            return \"User\";\n                        default:\n                            return \"Unknown\";\n                    }\n                })\n                .withIsSortable(true)\n                .build())\n            // Action Column\n            .withColumn(DatatableColumn.newBuilder(User.class)\n                .withLabel(\"Action\")\n                .withFieldName(\"id\")\n                .withIsSortable(false)\n                .withHeaderAlignRight()\n                .withRenderTemplate(ActionTemplate.newBuilder(User.class)\n                    // Edit Link\n                    .withEditLink(User.class, (record) -> \"/configuration/user/edit/\" + record.getId())\n                    // Delete Link\n                    .withDeleteLink(User.class, (record) -> \"/configuration/user/delete/\" + record.getId())\n                    .build())\n                .build())\n            .withSearch(\"email\", \"displayName\");\n            // TODO fix filters with enums\n//            .withFilter(DatatableFilter.newBuilder()\n//                .withField(\"role\")\n//                .withLabel(\"Role\")\n//                .withOption(UserRole.ROLE_ADMIN.name(), \"Admin\")\n//                .withOption(UserRole.ROLE_USER.name(), \"User\")\n//                .build()\n//            );\n\n        // Add datatable attribute\n        model.addAttribute(\"datatable\", builder.build());\n        return \"configuration/user/index\";\n    }", "signature": "String index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "class_method_signature": "UserController.index(\n        final Model model,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams,\n        final RedirectAttributes redirectAttributes\n    )", "testcase": false, "constructor": false, "invocations": ["setupBreadCrumbs", "redirectIfUsingLdapAuthentication", "withSearch", "withColumn", "withColumn", "withColumn", "withColumn", "withCreateLink", "withConstraint", "withLabel", "withUrl", "withRequestParams", "withPageable", "withRepository", "newBuilder", "build", "withIsSortable", "withRenderFunction", "withLabel", "withFieldName", "newBuilder", "build", "withIsSortable", "withRenderFunction", "withLabel", "withFieldName", "newBuilder", "build", "withIsSortable", "withRenderFunction", "withLabel", "withFieldName", "newBuilder", "getRole", "build", "withRenderTemplate", "withHeaderAlignRight", "withIsSortable", "withFieldName", "withLabel", "newBuilder", "build", "withDeleteLink", "withEditLink", "newBuilder", "getId", "getId", "addAttribute", "build"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}