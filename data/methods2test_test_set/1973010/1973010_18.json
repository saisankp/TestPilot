{"test_class": {"identifier": "ClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/ClientTest.java"}, "test_case": {"identifier": "testPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPut() throws Exception {\n    TableAdapter primaryTable = createMock(TableAdapter.class);\n\n    Client c = PowerMock.createPartialMock(Client.class, \"getIndices\",\n        \"getDatabaseAdapter\");\n    CKeyValue keyValue = new CKeyValue(\"rowid\".getBytes(), \"f\".getBytes(),\n        \"q\".getBytes(), \"v\".getBytes());\n    ArrayList<CKeyValue> keyValueList = new ArrayList<CKeyValue>();\n    keyValueList.add(keyValue);\n\n    // used for main test and for setup\n    Put put = new Put(keyValueList);\n    Put put2 = new Put(keyValue);\n    put.hashCode();\n    put2.equals(\"\");\n\n    // MOCKING\n    // mock out the index\n    Index mockIndex = EasyMock.createMock(Index.class);\n    EasyMock.expect(c.getIndices()).andReturn(new Index[] { mockIndex });\n    EasyMock.expect(mockIndex.getColumnFamily()).andReturn(\"f\".getBytes());\n    EasyMock.expect(mockIndex.getColumnQualifier()).andReturn(\"q\".getBytes());\n    mockIndex.handlePut(EasyMock.anyObject(Put.class));\n\n    // mock out the db\n    DatabaseAdapter databaseAdapter = EasyMock\n        .createMock(DatabaseAdapter.class);\n    EasyMock.expect(databaseAdapter.verify()).andReturn(true);\n    PowerMock.expectPrivate(c, \"getDatabaseAdapter\").andReturn(databaseAdapter);\n    EasyMock.expect(databaseAdapter.getTableAdapter(\"foo\")).andReturn(\n        primaryTable);\n\n    primaryTable.put(put);\n\n    PowerMock.replayAll(mockIndex, primaryTable, databaseAdapter);\n\n    c.put(\"foo\", put);\n    // c.createRecord(recordID, sourceID, fieldValues);\n    EasyMock.verify(primaryTable);\n  }", "signature": "void testPut()", "full_signature": "@Test public void testPut()", "class_method_signature": "ClientTest.testPut()", "testcase": true, "constructor": false, "invocations": ["createMock", "createPartialMock", "getBytes", "getBytes", "getBytes", "getBytes", "add", "hashCode", "equals", "createMock", "andReturn", "expect", "getIndices", "andReturn", "expect", "getColumnFamily", "getBytes", "andReturn", "expect", "getColumnQualifier", "getBytes", "handlePut", "anyObject", "createMock", "andReturn", "expect", "verify", "andReturn", "expectPrivate", "andReturn", "expect", "getTableAdapter", "put", "replayAll", "put", "verify"]}, "focal_class": {"identifier": "Client", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DATABASE_ADAPTER_CONF_KEY = \"culvert.database.adapter\";", "modifier": "private static final", "type": "String", "declarator": "DATABASE_ADAPTER_CONF_KEY = \"culvert.database.adapter\"", "var_name": "DATABASE_ADAPTER_CONF_KEY"}, {"original_string": "private static final String INDEXES_CONF_KEY = \"culvert.indices.names\";", "modifier": "private static final", "type": "String", "declarator": "INDEXES_CONF_KEY = \"culvert.indices.names\"", "var_name": "INDEXES_CONF_KEY"}, {"original_string": "private static final String DATABASE_ADAPTER_CONF_PREFIX = \"culvert.database.conf\";", "modifier": "private static final", "type": "String", "declarator": "DATABASE_ADAPTER_CONF_PREFIX = \"culvert.database.conf\"", "var_name": "DATABASE_ADAPTER_CONF_PREFIX"}, {"original_string": "private final Configuration configuration;", "modifier": "private final", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}], "methods": [{"identifier": "Client", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " Client(Configuration conf)", "full_signature": "public  Client(Configuration conf)", "class_method_signature": "Client.Client(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(String tableName, Put put)", "modifiers": "public", "return": "void", "signature": "void put(String tableName, Put put)", "full_signature": "public void put(String tableName, Put put)", "class_method_signature": "Client.put(String tableName, Put put)", "testcase": false, "constructor": false}, {"identifier": "getIndexMap", "parameters": "()", "modifiers": "public", "return": "HashMap<String, Index>", "signature": "HashMap<String, Index> getIndexMap()", "full_signature": "public HashMap<String, Index> getIndexMap()", "class_method_signature": "Client.getIndexMap()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Constraint query)", "modifiers": "public", "return": "Iterator<Result>", "signature": "Iterator<Result> query(Constraint query)", "full_signature": "public Iterator<Result> query(Constraint query)", "class_method_signature": "Client.query(Constraint query)", "testcase": false, "constructor": false}, {"identifier": "indexClassConfKey", "parameters": "(String indexName)", "modifiers": "private static", "return": "String", "signature": "String indexClassConfKey(String indexName)", "full_signature": "private static String indexClassConfKey(String indexName)", "class_method_signature": "Client.indexClassConfKey(String indexName)", "testcase": false, "constructor": false}, {"identifier": "indexConfPrefix", "parameters": "(String indexName)", "modifiers": "private static", "return": "String", "signature": "String indexConfPrefix(String indexName)", "full_signature": "private static String indexConfPrefix(String indexName)", "class_method_signature": "Client.indexConfPrefix(String indexName)", "testcase": false, "constructor": false}, {"identifier": "getIndices", "parameters": "()", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndices()", "full_signature": "public Index[] getIndices()", "class_method_signature": "Client.getIndices()", "testcase": false, "constructor": false}, {"identifier": "getIndicesForTable", "parameters": "(String tableName)", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndicesForTable(String tableName)", "full_signature": "public Index[] getIndicesForTable(String tableName)", "class_method_signature": "Client.getIndicesForTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getIndexByName", "parameters": "(String string)", "modifiers": "public", "return": "Index", "signature": "Index getIndexByName(String string)", "full_signature": "public Index getIndexByName(String string)", "class_method_signature": "Client.getIndexByName(String string)", "testcase": false, "constructor": false}, {"identifier": "getIndicesForColumn", "parameters": "(String table, byte[] family,\n      byte[] qualifier)", "modifiers": "public", "return": "Index[]", "signature": "Index[] getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "full_signature": "public Index[] getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "class_method_signature": "Client.getIndicesForColumn(String table, byte[] family,\n      byte[] qualifier)", "testcase": false, "constructor": false}, {"identifier": "addIndex", "parameters": "(Index index)", "modifiers": "public", "return": "void", "signature": "void addIndex(Index index)", "full_signature": "public void addIndex(Index index)", "class_method_signature": "Client.addIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "public Configuration getConf()", "class_method_signature": "Client.getConf()", "testcase": false, "constructor": false}, {"identifier": "setDatabase", "parameters": "(DatabaseAdapter db, Configuration conf)", "modifiers": "public static", "return": "void", "signature": "void setDatabase(DatabaseAdapter db, Configuration conf)", "full_signature": "public static void setDatabase(DatabaseAdapter db, Configuration conf)", "class_method_signature": "Client.setDatabase(DatabaseAdapter db, Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseAdapter", "parameters": "()", "modifiers": "private", "return": "DatabaseAdapter", "signature": "DatabaseAdapter getDatabaseAdapter()", "full_signature": "private DatabaseAdapter getDatabaseAdapter()", "class_method_signature": "Client.getDatabaseAdapter()", "testcase": false, "constructor": false}, {"identifier": "setDatabaseAdapter", "parameters": "(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "modifiers": "public static", "return": "void", "signature": "void setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "full_signature": "public static void setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "class_method_signature": "Client.setDatabaseAdapter(Configuration conf,\n      Class<? extends DatabaseAdapter> adapterClass)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(String tableName)", "full_signature": "public boolean tableExists(String tableName)", "class_method_signature": "Client.tableExists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean verify()", "full_signature": "public boolean verify()", "class_method_signature": "Client.verify()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/Client.java"}, "focal_method": {"identifier": "put", "parameters": "(String tableName, Put put)", "modifiers": "public", "return": "void", "body": "public void put(String tableName, Put put) {\n    // Get the KeyValue list\n    Iterable<CKeyValue> keyValueList = put.getKeyValueList();\n    List<CKeyValue> indexValues = new ArrayList<CKeyValue>();\n    // for each index, add only the keyvalues that should be indexed\n    for (Index index : getIndices()) {\n      indexValues.clear();\n      for (CKeyValue keyValue : keyValueList) {\n        if (Bytes.compareTo(index.getColumnFamily(), keyValue.getFamily()) == 0) {\n          if (Bytes.compareTo(index.getColumnQualifier(),\n              keyValue.getQualifier()) == 0) {\n            indexValues.add(keyValue);\n          }\n        }\n      }\n      index.handlePut(new Put(indexValues));\n    }\n    // TODO this is obviously not performant for every put\n    // we should probably do some caching here\n    DatabaseAdapter db = getDatabaseAdapter();\n    if (!db.verify())\n      throw new RuntimeException(\n          \"Could not connect to the database to make the put of the actual value. Index may be corrupt.\");\n    db.getTableAdapter(tableName).put(put);\n  }", "signature": "void put(String tableName, Put put)", "full_signature": "public void put(String tableName, Put put)", "class_method_signature": "Client.put(String tableName, Put put)", "testcase": false, "constructor": false, "invocations": ["getKeyValueList", "getIndices", "clear", "compareTo", "getColumnFamily", "getFamily", "compareTo", "getColumnQualifier", "getQualifier", "add", "handlePut", "getDatabaseAdapter", "verify", "put", "getTableAdapter"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}