{"test_class": {"identifier": "TanimotoTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/similarity/TanimotoTest.java"}, "test_case": {"identifier": "method1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void method1() throws CDKException {\n        ICountFingerprint fp1 = new IntArrayCountFingerprint(new HashMap<String, Integer>() {\n\n            {\n                put(\"A\", 3);\n            }\n        });\n        ICountFingerprint fp2 = new IntArrayCountFingerprint(new HashMap<String, Integer>() {\n\n            {\n                put(\"A\", 4);\n            }\n        });\n        Assert.assertEquals(0.923, Tanimoto.method1(fp1, fp2), 0.001);\n    }", "signature": "void method1()", "full_signature": "@Test public void method1()", "class_method_signature": "TanimotoTest.method1()", "testcase": true, "constructor": false, "invocations": ["put", "put", "assertEquals", "method1"]}, "focal_class": {"identifier": "Tanimoto", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Tanimoto", "parameters": "()", "modifiers": "private", "return": "", "signature": " Tanimoto()", "full_signature": "private  Tanimoto()", "class_method_signature": "Tanimoto.Tanimoto()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(BitSet bitset1, BitSet bitset2)", "modifiers": "public static", "return": "float", "signature": "float calculate(BitSet bitset1, BitSet bitset2)", "full_signature": "public static float calculate(BitSet bitset1, BitSet bitset2)", "class_method_signature": "Tanimoto.calculate(BitSet bitset1, BitSet bitset2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "modifiers": "public static", "return": "double", "signature": "double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "full_signature": "public static double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "class_method_signature": "Tanimoto.calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(double[] features1, double[] features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(double[] features1, double[] features2)", "full_signature": "public static float calculate(double[] features1, double[] features2)", "class_method_signature": "Tanimoto.calculate(double[] features1, double[] features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Map<String, Integer> features1, Map<String, Integer> features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "full_signature": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "class_method_signature": "Tanimoto.calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method1", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method1(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method2", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method2(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/similarity/Tanimoto.java"}, "focal_method": {"identifier": "method1", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "body": "public static double method1(ICountFingerprint fp1, ICountFingerprint fp2) {\n        long xy = 0, x = 0, y = 0;\n        for (int i = 0; i < fp1.numOfPopulatedbins(); i++) {\n            int hash = fp1.getHash(i);\n            for (int j = 0; j < fp2.numOfPopulatedbins(); j++) {\n                if (hash == fp2.getHash(j)) {\n                    xy += fp1.getCount(i) * fp2.getCount(j);\n                }\n            }\n            x += fp1.getCount(i) * fp1.getCount(i);\n        }\n        for (int j = 0; j < fp2.numOfPopulatedbins(); j++) {\n            y += fp2.getCount(j) * fp2.getCount(j);\n        }\n        return ((double) xy / (x + y - xy));\n    }", "signature": "double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method1(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false, "invocations": ["numOfPopulatedbins", "getHash", "numOfPopulatedbins", "getHash", "getCount", "getCount", "getCount", "getCount", "numOfPopulatedbins", "getCount", "getCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}