{"test_class": {"identifier": "TestTimeParser", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.xml/src/test/java/org/jvoicexml/xml/TestTimeParser.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() {\n        final TimeParser parser1 = new TimeParser(\"10s\");\n        Assert.assertEquals(10000, parser1.parse());\n        final TimeParser parser2 = new TimeParser(\"2.7s\");\n        Assert.assertEquals(2700, parser2.parse());\n        final TimeParser parser3 = new TimeParser(\".5s\");\n        Assert.assertEquals(500, parser3.parse());\n        final TimeParser parser4 = new TimeParser(\"850ms\");\n        Assert.assertEquals(850, parser4.parse());\n        final TimeParser parser5 = new TimeParser(\"+1.5s\");\n        Assert.assertEquals(1500, parser5.parse());\n        final TimeParser parser6 = new TimeParser(\"20\");\n        Assert.assertEquals(-1, parser6.parse());\n        final TimeParser parser7 = new TimeParser(\"abcs\");\n        Assert.assertEquals(-1, parser7.parse());\n        final TimeParser parser8 = new TimeParser(null);\n        Assert.assertEquals(0, parser8.parse());\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "TestTimeParser.testParse()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse", "assertEquals", "parse"]}, "focal_class": {"identifier": "TimeParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MSECS_PER_SEC = 1000;", "modifier": "private static final", "type": "int", "declarator": "MSECS_PER_SEC = 1000", "var_name": "MSECS_PER_SEC"}, {"original_string": "private final String time;", "modifier": "private final", "type": "String", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "TimeParser", "parameters": "(final String str)", "modifiers": "public", "return": "", "signature": " TimeParser(final String str)", "full_signature": "public  TimeParser(final String str)", "class_method_signature": "TimeParser.TimeParser(final String str)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long parse()", "full_signature": "public long parse()", "class_method_signature": "TimeParser.parse()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.xml/src/main/java/org/jvoicexml/xml/TimeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long parse() {\n        if (time == null) {\n            return 0;\n        }\n        final boolean isSeconds;\n        if (time.endsWith(\"ms\")) {\n            isSeconds = false;\n        } else if (time.endsWith(\"s\")) {\n            isSeconds = true;\n        } else {\n            return -1;\n        }\n        final String timeValue;\n        final long factor;\n        if (isSeconds) {\n            timeValue = time.substring(0, time.length() - 1);\n            factor = MSECS_PER_SEC;\n        } else {\n            timeValue = time.substring(0, time.length() - \"ms\".length());\n            factor = 1;\n        }\n        final BigDecimal number;\n        try {\n            number = new BigDecimal(timeValue);\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n        float flt = number.floatValue();\n        return (long) (flt * factor);\n    }", "signature": "long parse()", "full_signature": "public long parse()", "class_method_signature": "TimeParser.parse()", "testcase": false, "constructor": false, "invocations": ["endsWith", "endsWith", "substring", "length", "substring", "length", "length", "floatValue"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}