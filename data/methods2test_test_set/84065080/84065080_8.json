{"test_class": {"identifier": "GraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugface-core/src/test/java/org/plugface/core/internal/di/GraphTest.java"}, "test_case": {"identifier": "shouldDetectCircularDependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDetectCircularDependencies() {\n        final Graph graph = new Graph();\n        final Node<Integer> intNode = new Node<>(Integer.class);\n        final Node<Float> floatNode = new Node<>(Float.class);\n\n        try {\n            graph.addEdge(intNode, floatNode).addEdge(floatNode, intNode);\n            fail(\"It should have thrown a CircularDependencyException\");\n        } catch (Exception e) {\n            assertThat(e, instanceOf(CircularDependencyException.class));\n        }\n    }", "signature": "void shouldDetectCircularDependencies()", "full_signature": "@Test public void shouldDetectCircularDependencies()", "class_method_signature": "GraphTest.shouldDetectCircularDependencies()", "testcase": true, "constructor": false, "invocations": ["addEdge", "addEdge", "fail", "assertThat", "instanceOf"]}, "focal_class": {"identifier": "Graph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Set<Node> all = new HashSet<>();", "modifier": "private", "type": "Set<Node>", "declarator": "all = new HashSet<>()", "var_name": "all"}, {"original_string": "private Map<Node, List<Node>> adj = new HashMap<>();", "modifier": "private", "type": "Map<Node, List<Node>>", "declarator": "adj = new HashMap<>()", "var_name": "adj"}], "methods": [{"identifier": "addLeaf", "parameters": "(Node<?> node)", "modifiers": "public", "return": "Graph", "signature": "Graph addLeaf(Node<?> node)", "full_signature": "public Graph addLeaf(Node<?> node)", "class_method_signature": "Graph.addLeaf(Node<?> node)", "testcase": false, "constructor": false}, {"identifier": "addEdges", "parameters": "(Node<?> node, Collection<Node<?>> adjs)", "modifiers": "public", "return": "Graph", "signature": "Graph addEdges(Node<?> node, Collection<Node<?>> adjs)", "full_signature": "public Graph addEdges(Node<?> node, Collection<Node<?>> adjs)", "class_method_signature": "Graph.addEdges(Node<?> node, Collection<Node<?>> adjs)", "testcase": false, "constructor": false}, {"identifier": "addEdge", "parameters": "(Node<?> node, Node<?> adj)", "modifiers": "public", "return": "Graph", "signature": "Graph addEdge(Node<?> node, Node<?> adj)", "full_signature": "public Graph addEdge(Node<?> node, Node<?> adj)", "class_method_signature": "Graph.addEdge(Node<?> node, Node<?> adj)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Node<?> node)", "modifiers": "private", "return": "void", "signature": "void register(Node<?> node)", "full_signature": "private void register(Node<?> node)", "class_method_signature": "Graph.register(Node<?> node)", "testcase": false, "constructor": false}, {"identifier": "checkCircularDependency", "parameters": "(Node<?> node, Node<?> adj)", "modifiers": "private", "return": "void", "signature": "void checkCircularDependency(Node<?> node, Node<?> adj)", "full_signature": "private void checkCircularDependency(Node<?> node, Node<?> adj)", "class_method_signature": "Graph.checkCircularDependency(Node<?> node, Node<?> adj)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "()", "modifiers": "public", "return": "Collection<Node<?>>", "signature": "Collection<Node<?>> resolve()", "full_signature": "public Collection<Node<?>> resolve()", "class_method_signature": "Graph.resolve()", "testcase": false, "constructor": false}, {"identifier": "topologicalSort", "parameters": "()", "modifiers": "private", "return": "Collection<Node<?>>", "signature": "Collection<Node<?>> topologicalSort()", "full_signature": "private Collection<Node<?>> topologicalSort()", "class_method_signature": "Graph.topologicalSort()", "testcase": false, "constructor": false}, {"identifier": "doTopologicalSort", "parameters": "(Node<?> node, Map<Node, Boolean> visited, Stack<Node> stack)", "modifiers": "private", "return": "void", "signature": "void doTopologicalSort(Node<?> node, Map<Node, Boolean> visited, Stack<Node> stack)", "full_signature": "private void doTopologicalSort(Node<?> node, Map<Node, Boolean> visited, Stack<Node> stack)", "class_method_signature": "Graph.doTopologicalSort(Node<?> node, Map<Node, Boolean> visited, Stack<Node> stack)", "testcase": false, "constructor": false}], "file": "plugface-core/src/main/java/org/plugface/core/internal/di/Graph.java"}, "focal_method": {"identifier": "addEdge", "parameters": "(Node<?> node, Node<?> adj)", "modifiers": "public", "return": "Graph", "body": "public Graph addEdge(Node<?> node, Node<?> adj) {\n        Objects.requireNonNull(node, \"Cannot attach an edge to a null node\");\n        if (Objects.equals(node, adj)) {\n            throw new IllegalArgumentException(\"Cannot connect a node to itself\");\n        }\n        register(node);\n        register(adj);\n        checkCircularDependency(node, adj);\n        this.adj.get(node).add(adj);\n        return this;\n    }", "signature": "Graph addEdge(Node<?> node, Node<?> adj)", "full_signature": "public Graph addEdge(Node<?> node, Node<?> adj)", "class_method_signature": "Graph.addEdge(Node<?> node, Node<?> adj)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "equals", "register", "register", "checkCircularDependency", "add", "get"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}