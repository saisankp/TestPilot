{"test_class": {"identifier": "RandomStringUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n    private final static Logger LOGGER = LoggerFactory.getLogger(RandomStringUtilsTest.class);", "modifier": "@SuppressWarnings(\"unused\")\n    private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RandomStringUtilsTest.class)", "var_name": "LOGGER"}], "file": "Core/src/test/java/org/openestate/is24/restapi/utils/RandomStringUtilsTest.java"}, "test_case": {"identifier": "testRandomLetters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRandomLetters() {\n        for (int length = 1; length < 10; length++) {\n            String value = RandomStringUtils.randomLetters(length);\n            //LOGGER.debug( \"random alpha string: \" + value );\n\n            Assert.assertEquals(\n                    \"random string has a length of \" + length,\n                    length, value.length());\n\n            Assert.assertTrue(\n                    \"random string is alpha\",\n                    isAsciiAlpha(value));\n        }\n    }", "signature": "void testRandomLetters()", "full_signature": "@Test public void testRandomLetters()", "class_method_signature": "RandomStringUtilsTest.testRandomLetters()", "testcase": true, "constructor": false, "invocations": ["randomLetters", "assertEquals", "length", "assertTrue", "isAsciiAlpha"]}, "focal_class": {"identifier": "RandomStringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n    private final static Logger LOGGER = LoggerFactory.getLogger(RandomStringUtils.class);", "modifier": "@SuppressWarnings(\"unused\")\n    private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RandomStringUtils.class)", "var_name": "LOGGER"}, {"original_string": "private final static CharacterPredicate NUMBERS = new CharacterPredicate() {\n        @Override\n        public boolean test(int codePoint) {\n            // Accept code point from 0x30 to 0x39,\n            // which represents a decimal digit in Unicode.\n            return codePoint >= 0x30 && codePoint <= 0x39;\n        }\n    };", "modifier": "private final static", "type": "CharacterPredicate", "declarator": "NUMBERS = new CharacterPredicate() {\n        @Override\n        public boolean test(int codePoint) {\n            // Accept code point from 0x30 to 0x39,\n            // which represents a decimal digit in Unicode.\n            return codePoint >= 0x30 && codePoint <= 0x39;\n        }\n    }", "var_name": "NUMBERS"}, {"original_string": "private final static CharacterPredicate LETTERS = new CharacterPredicate() {\n        @Override\n        public boolean test(int codePoint) {\n            // Accept code point from 0x41 to 0x5a or 0x61 to 0x7a,\n            // which represents latin-1 characters in Unicode.\n            return (codePoint >= 0x41 && codePoint <= 0x5a)\n                    || (codePoint >= 0x61 && codePoint <= 0x7a);\n        }\n    };", "modifier": "private final static", "type": "CharacterPredicate", "declarator": "LETTERS = new CharacterPredicate() {\n        @Override\n        public boolean test(int codePoint) {\n            // Accept code point from 0x41 to 0x5a or 0x61 to 0x7a,\n            // which represents latin-1 characters in Unicode.\n            return (codePoint >= 0x41 && codePoint <= 0x5a)\n                    || (codePoint >= 0x61 && codePoint <= 0x7a);\n        }\n    }", "var_name": "LETTERS"}], "methods": [{"identifier": "RandomStringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " RandomStringUtils()", "full_signature": "private  RandomStringUtils()", "class_method_signature": "RandomStringUtils.RandomStringUtils()", "testcase": false, "constructor": true}, {"identifier": "random", "parameters": "(int length)", "modifiers": "public static", "return": "String", "signature": "String random(int length)", "full_signature": "public static String random(int length)", "class_method_signature": "RandomStringUtils.random(int length)", "testcase": false, "constructor": false}, {"identifier": "randomLetters", "parameters": "(int length)", "modifiers": "public static", "return": "String", "signature": "String randomLetters(int length)", "full_signature": "public static String randomLetters(int length)", "class_method_signature": "RandomStringUtils.randomLetters(int length)", "testcase": false, "constructor": false}, {"identifier": "randomNumeric", "parameters": "(int length)", "modifiers": "public static", "return": "String", "signature": "String randomNumeric(int length)", "full_signature": "public static String randomNumeric(int length)", "class_method_signature": "RandomStringUtils.randomNumeric(int length)", "testcase": false, "constructor": false}], "file": "Core/src/main/java/org/openestate/is24/restapi/utils/RandomStringUtils.java"}, "focal_method": {"identifier": "randomLetters", "parameters": "(int length)", "modifiers": "public static", "return": "String", "body": "public static String randomLetters(int length) {\n        return new RandomStringGenerator.Builder()\n                .filteredBy(LETTERS)\n                .build().generate(length);\n    }", "signature": "String randomLetters(int length)", "full_signature": "public static String randomLetters(int length)", "class_method_signature": "RandomStringUtils.randomLetters(int length)", "testcase": false, "constructor": false, "invocations": ["generate", "build", "filteredBy"]}, "repository": {"repo_id": 21267129, "url": "https://github.com/OpenEstate/OpenEstate-IS24-REST", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 4173, "license": "licensed"}}