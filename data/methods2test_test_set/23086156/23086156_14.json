{"test_class": {"identifier": "DependencyProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DependencyProvider underTest;", "modifier": "private", "type": "DependencyProvider", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private WithDepsPlugin withDepsPlugin;", "modifier": "private", "type": "WithDepsPlugin", "declarator": "withDepsPlugin", "var_name": "withDepsPlugin"}, {"original_string": "private RequiredPlugin1 requiredPlugin1;", "modifier": "private", "type": "RequiredPlugin1", "declarator": "requiredPlugin1", "var_name": "requiredPlugin1"}, {"original_string": "private RequiredPlugin2 requiredPlugin2;", "modifier": "private", "type": "RequiredPlugin2", "declarator": "requiredPlugin2", "var_name": "requiredPlugin2"}, {"original_string": "private DependentPlugin dependentPlugin;", "modifier": "private", "type": "DependentPlugin", "declarator": "dependentPlugin", "var_name": "dependentPlugin"}], "file": "core/src/test/java/io/nuun/kernel/core/internal/DependencyProviderTest.java"}, "test_case": {"identifier": "test_provide_facet_not_required_dependency", "parameters": "()", "modifiers": "@Test(expected = KernelException.class) public", "return": "void", "body": "@Test(expected = KernelException.class)\n    public void test_provide_facet_not_required_dependency()\n    {\n        underTest.getFacets(NoDepsPlugin.class, Facet1.class);\n    }", "signature": "void test_provide_facet_not_required_dependency()", "full_signature": "@Test(expected = KernelException.class) public void test_provide_facet_not_required_dependency()", "class_method_signature": "DependencyProviderTest.test_provide_facet_not_required_dependency()", "testcase": true, "constructor": false, "invocations": ["getFacets"]}, "focal_class": {"identifier": "DependencyProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PluginRegistry pluginRegistry;", "modifier": "private final", "type": "PluginRegistry", "declarator": "pluginRegistry", "var_name": "pluginRegistry"}, {"original_string": "private final FacetRegistry facetRegistry;", "modifier": "private final", "type": "FacetRegistry", "declarator": "facetRegistry", "var_name": "facetRegistry"}], "methods": [{"identifier": "DependencyProvider", "parameters": "(PluginRegistry pluginRegistry, FacetRegistry facetRegistry)", "modifiers": "public", "return": "", "signature": " DependencyProvider(PluginRegistry pluginRegistry, FacetRegistry facetRegistry)", "full_signature": "public  DependencyProvider(PluginRegistry pluginRegistry, FacetRegistry facetRegistry)", "class_method_signature": "DependencyProvider.DependencyProvider(PluginRegistry pluginRegistry, FacetRegistry facetRegistry)", "testcase": false, "constructor": true}, {"identifier": "getDependenciesOf", "parameters": "(Class<? extends Plugin> pluginClass)", "modifiers": "public", "return": "List<Plugin>", "signature": "List<Plugin> getDependenciesOf(Class<? extends Plugin> pluginClass)", "full_signature": "public List<Plugin> getDependenciesOf(Class<? extends Plugin> pluginClass)", "class_method_signature": "DependencyProvider.getDependenciesOf(Class<? extends Plugin> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getRequiredPluginsOf", "parameters": "(Class<? extends Plugin> pluginClass)", "modifiers": "public", "return": "List<Plugin>", "signature": "List<Plugin> getRequiredPluginsOf(Class<? extends Plugin> pluginClass)", "full_signature": "public List<Plugin> getRequiredPluginsOf(Class<? extends Plugin> pluginClass)", "class_method_signature": "DependencyProvider.getRequiredPluginsOf(Class<? extends Plugin> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getDependentPluginsOf", "parameters": "(Class<? extends Plugin> pluginClass)", "modifiers": "public", "return": "List<Plugin>", "signature": "List<Plugin> getDependentPluginsOf(Class<? extends Plugin> pluginClass)", "full_signature": "public List<Plugin> getDependentPluginsOf(Class<? extends Plugin> pluginClass)", "class_method_signature": "DependencyProvider.getDependentPluginsOf(Class<? extends Plugin> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getDependenciesOf", "parameters": "(Class<? extends Plugin> pluginClass, DependencyType dependencyType)", "modifiers": "private", "return": "List<Plugin>", "signature": "List<Plugin> getDependenciesOf(Class<? extends Plugin> pluginClass, DependencyType dependencyType)", "full_signature": "private List<Plugin> getDependenciesOf(Class<? extends Plugin> pluginClass, DependencyType dependencyType)", "class_method_signature": "DependencyProvider.getDependenciesOf(Class<? extends Plugin> pluginClass, DependencyType dependencyType)", "testcase": false, "constructor": false}, {"identifier": "getDependencyClasses", "parameters": "(Plugin plugin, DependencyType dependencyType)", "modifiers": "private", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getDependencyClasses(Plugin plugin, DependencyType dependencyType)", "full_signature": "private Collection<Class<?>> getDependencyClasses(Plugin plugin, DependencyType dependencyType)", "class_method_signature": "DependencyProvider.getDependencyClasses(Plugin plugin, DependencyType dependencyType)", "testcase": false, "constructor": false}, {"identifier": "getFacets", "parameters": "(Class<? extends Plugin> pluginClass, Class<T> facet)", "modifiers": "public", "return": "List<T>", "signature": "List<T> getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "full_signature": "public List<T> getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "class_method_signature": "DependencyProvider.getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "testcase": false, "constructor": false}, {"identifier": "getFacet", "parameters": "(Class<? extends Plugin> pluginClass, Class<T> facet)", "modifiers": "public", "return": "T", "signature": "T getFacet(Class<? extends Plugin> pluginClass, Class<T> facet)", "full_signature": "public T getFacet(Class<? extends Plugin> pluginClass, Class<T> facet)", "class_method_signature": "DependencyProvider.getFacet(Class<? extends Plugin> pluginClass, Class<T> facet)", "testcase": false, "constructor": false}, {"identifier": "assertExplicitDependency", "parameters": "(Class<? extends Plugin> pluginClass, Class<T> facet)", "modifiers": "private", "return": "void", "signature": "void assertExplicitDependency(Class<? extends Plugin> pluginClass, Class<T> facet)", "full_signature": "private void assertExplicitDependency(Class<? extends Plugin> pluginClass, Class<T> facet)", "class_method_signature": "DependencyProvider.assertExplicitDependency(Class<? extends Plugin> pluginClass, Class<T> facet)", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/nuun/kernel/core/internal/DependencyProvider.java"}, "focal_method": {"identifier": "getFacets", "parameters": "(Class<? extends Plugin> pluginClass, Class<T> facet)", "modifiers": "public", "return": "List<T>", "body": "public <T> List<T> getFacets(Class<? extends Plugin> pluginClass, Class<T> facet) {\n        assertExplicitDependency(pluginClass, facet);\n        return facetRegistry.getFacets(facet);\n    }", "signature": "List<T> getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "full_signature": "public List<T> getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "class_method_signature": "DependencyProvider.getFacets(Class<? extends Plugin> pluginClass, Class<T> facet)", "testcase": false, "constructor": false, "invocations": ["assertExplicitDependency", "getFacets"]}, "repository": {"repo_id": 23086156, "url": "https://github.com/nuun-io/kernel", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 1114, "license": "licensed"}}