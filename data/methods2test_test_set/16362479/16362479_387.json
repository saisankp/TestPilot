{"test_class": {"identifier": "LocalReadWriteProxyTransactionTest", "superclass": "extends LocalProxyTransactionTest<LocalReadWriteProxyTransaction>", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CursorAwareDataTreeModification modification;", "modifier": "@Mock\n    private", "type": "CursorAwareDataTreeModification", "declarator": "modification", "var_name": "modification"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/LocalReadWriteProxyTransactionTest.java"}, "test_case": {"identifier": "testReadOnlyView", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadOnlyView() {\n        Assert.assertEquals(modification, transaction.readOnlyView());\n    }", "signature": "void testReadOnlyView()", "full_signature": "@Test public void testReadOnlyView()", "class_method_signature": "LocalReadWriteProxyTransactionTest.testReadOnlyView()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "readOnlyView"]}, "focal_class": {"identifier": "LocalReadWriteProxyTransaction", "superclass": "extends LocalProxyTransaction", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LocalReadWriteProxyTransaction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LocalReadWriteProxyTransaction.class)", "var_name": "LOG"}, {"original_string": "private final CursorAwareDataTreeModification modification;", "modifier": "private final", "type": "CursorAwareDataTreeModification", "declarator": "modification", "var_name": "modification"}, {"original_string": "private Supplier<? extends RuntimeException> closedException;", "modifier": "private", "type": "Supplier<? extends RuntimeException>", "declarator": "closedException", "var_name": "closedException"}, {"original_string": "private CursorAwareDataTreeModification sealedModification;", "modifier": "private", "type": "CursorAwareDataTreeModification", "declarator": "sealedModification", "var_name": "sealedModification"}, {"original_string": "private Exception recordedFailure;", "modifier": "private", "type": "Exception", "declarator": "recordedFailure", "var_name": "recordedFailure"}], "methods": [{"identifier": "LocalReadWriteProxyTransaction", "parameters": "(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "modifiers": "", "return": "", "signature": " LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "full_signature": "  LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "class_method_signature": "LocalReadWriteProxyTransaction.LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier,\n        final DataTreeSnapshot snapshot)", "testcase": false, "constructor": true}, {"identifier": "LocalReadWriteProxyTransaction", "parameters": "(final ProxyHistory parent, final TransactionIdentifier identifier)", "modifiers": "", "return": "", "signature": " LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "full_signature": "  LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "class_method_signature": "LocalReadWriteProxyTransaction.LocalReadWriteProxyTransaction(final ProxyHistory parent, final TransactionIdentifier identifier)", "testcase": false, "constructor": true}, {"identifier": "isSnapshotOnly", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean isSnapshotOnly()", "full_signature": "@Override boolean isSnapshotOnly()", "class_method_signature": "LocalReadWriteProxyTransaction.isSnapshotOnly()", "testcase": false, "constructor": false}, {"identifier": "readOnlyView", "parameters": "()", "modifiers": "@Override", "return": "CursorAwareDataTreeSnapshot", "signature": "CursorAwareDataTreeSnapshot readOnlyView()", "full_signature": "@Override CursorAwareDataTreeSnapshot readOnlyView()", "class_method_signature": "LocalReadWriteProxyTransaction.readOnlyView()", "testcase": false, "constructor": false}, {"identifier": "doDelete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void doDelete(final YangInstanceIdentifier path)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") void doDelete(final YangInstanceIdentifier path)", "class_method_signature": "LocalReadWriteProxyTransaction.doDelete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "doMerge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") void doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "LocalReadWriteProxyTransaction.doMerge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "doWrite", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") void doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "LocalReadWriteProxyTransaction.doWrite(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "abortedException", "parameters": "()", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException abortedException()", "full_signature": "private RuntimeException abortedException()", "class_method_signature": "LocalReadWriteProxyTransaction.abortedException()", "testcase": false, "constructor": false}, {"identifier": "submittedException", "parameters": "()", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException submittedException()", "full_signature": "private RuntimeException submittedException()", "class_method_signature": "LocalReadWriteProxyTransaction.submittedException()", "testcase": false, "constructor": false}, {"identifier": "commitRequest", "parameters": "(final boolean coordinated)", "modifiers": "@Override", "return": "CommitLocalTransactionRequest", "signature": "CommitLocalTransactionRequest commitRequest(final boolean coordinated)", "full_signature": "@Override CommitLocalTransactionRequest commitRequest(final boolean coordinated)", "class_method_signature": "LocalReadWriteProxyTransaction.commitRequest(final boolean coordinated)", "testcase": false, "constructor": false}, {"identifier": "sealModification", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sealModification()", "full_signature": "private void sealModification()", "class_method_signature": "LocalReadWriteProxyTransaction.sealModification()", "testcase": false, "constructor": false}, {"identifier": "sealOnly", "parameters": "()", "modifiers": "@Override", "return": "boolean", "signature": "boolean sealOnly()", "full_signature": "@Override boolean sealOnly()", "class_method_signature": "LocalReadWriteProxyTransaction.sealOnly()", "testcase": false, "constructor": false}, {"identifier": "sealAndSend", "parameters": "(final OptionalLong enqueuedTicks)", "modifiers": "@Override", "return": "boolean", "signature": "boolean sealAndSend(final OptionalLong enqueuedTicks)", "full_signature": "@Override boolean sealAndSend(final OptionalLong enqueuedTicks)", "class_method_signature": "LocalReadWriteProxyTransaction.sealAndSend(final OptionalLong enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "flushState", "parameters": "()", "modifiers": "@Override", "return": "Optional<ModifyTransactionRequest>", "signature": "Optional<ModifyTransactionRequest> flushState()", "full_signature": "@Override Optional<ModifyTransactionRequest> flushState()", "class_method_signature": "LocalReadWriteProxyTransaction.flushState()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "", "return": "DataTreeSnapshot", "signature": "DataTreeSnapshot getSnapshot()", "full_signature": " DataTreeSnapshot getSnapshot()", "class_method_signature": "LocalReadWriteProxyTransaction.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "applyForwardedModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "modifiers": "@Override", "return": "void", "signature": "void applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "full_signature": "@Override void applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadWriteProxyTransaction.applyForwardedModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "replayModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "@Override", "return": "void", "signature": "void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "@Override void replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "LocalReadWriteProxyTransaction.replayModifyTransactionRequest(final ModifyTransactionRequest request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "commonModifyTransactionRequest", "parameters": "(final ModifyTransactionRequest request,\n            final @Nullable Consumer<Response<?, ?>> callback,\n            final BiConsumer<TransactionRequest<?>, Consumer<Response<?, ?>>> sendMethod)", "modifiers": "private", "return": "void", "signature": "void commonModifyTransactionRequest(final ModifyTransactionRequest request,\n            final @Nullable Consumer<Response<?, ?>> callback,\n            final BiConsumer<TransactionRequest<?>, Consumer<Response<?, ?>>> sendMethod)", "full_signature": "private void commonModifyTransactionRequest(final ModifyTransactionRequest request,\n            final @Nullable Consumer<Response<?, ?>> callback,\n            final BiConsumer<TransactionRequest<?>, Consumer<Response<?, ?>>> sendMethod)", "class_method_signature": "LocalReadWriteProxyTransaction.commonModifyTransactionRequest(final ModifyTransactionRequest request,\n            final @Nullable Consumer<Response<?, ?>> callback,\n            final BiConsumer<TransactionRequest<?>, Consumer<Response<?, ?>>> sendMethod)", "testcase": false, "constructor": false}, {"identifier": "handleReplayedLocalRequest", "parameters": "(final AbstractLocalTransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long now)", "modifiers": "@Override", "return": "void", "signature": "void handleReplayedLocalRequest(final AbstractLocalTransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long now)", "full_signature": "@Override void handleReplayedLocalRequest(final AbstractLocalTransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long now)", "class_method_signature": "LocalReadWriteProxyTransaction.handleReplayedLocalRequest(final AbstractLocalTransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long now)", "testcase": false, "constructor": false}, {"identifier": "handleReplayedRemoteRequest", "parameters": "(final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "modifiers": "@Override", "return": "void", "signature": "void handleReplayedRemoteRequest(final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "full_signature": "@Override void handleReplayedRemoteRequest(final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "class_method_signature": "LocalReadWriteProxyTransaction.handleReplayedRemoteRequest(final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback, final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "handleForwardedRemoteRequest", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "modifiers": "@Override", "return": "void", "signature": "void handleForwardedRemoteRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "full_signature": "@Override void handleForwardedRemoteRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadWriteProxyTransaction.handleForwardedRemoteRequest(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "forwardToLocal", "parameters": "(final LocalProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "modifiers": "@Override", "return": "void", "signature": "void forwardToLocal(final LocalProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "full_signature": "@Override void forwardToLocal(final LocalProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadWriteProxyTransaction.forwardToLocal(final LocalProxyTransaction successor, final TransactionRequest<?> request,\n            final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "sendAbort", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "modifiers": "@Override", "return": "void", "signature": "void sendAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "full_signature": "@Override void sendAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadWriteProxyTransaction.sendAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "enqueueAbort", "parameters": "(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "modifiers": "@Override", "return": "void", "signature": "void enqueueAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "full_signature": "@Override void enqueueAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "class_method_signature": "LocalReadWriteProxyTransaction.enqueueAbort(final TransactionRequest<?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "getModification", "parameters": "()", "modifiers": "private @NonNull", "return": "CursorAwareDataTreeModification", "signature": "CursorAwareDataTreeModification getModification()", "full_signature": "private @NonNull CursorAwareDataTreeModification getModification()", "class_method_signature": "LocalReadWriteProxyTransaction.getModification()", "testcase": false, "constructor": false}, {"identifier": "sendRebased", "parameters": "(final CommitLocalTransactionRequest request, final Consumer<Response<?, ?>> callback)", "modifiers": "private", "return": "void", "signature": "void sendRebased(final CommitLocalTransactionRequest request, final Consumer<Response<?, ?>> callback)", "full_signature": "private void sendRebased(final CommitLocalTransactionRequest request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "LocalReadWriteProxyTransaction.sendRebased(final CommitLocalTransactionRequest request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "rebaseCommit", "parameters": "(final CommitLocalTransactionRequest request)", "modifiers": "private", "return": "CommitLocalTransactionRequest", "signature": "CommitLocalTransactionRequest rebaseCommit(final CommitLocalTransactionRequest request)", "full_signature": "private CommitLocalTransactionRequest rebaseCommit(final CommitLocalTransactionRequest request)", "class_method_signature": "LocalReadWriteProxyTransaction.rebaseCommit(final CommitLocalTransactionRequest request)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/LocalReadWriteProxyTransaction.java"}, "focal_method": {"identifier": "readOnlyView", "parameters": "()", "modifiers": "@Override", "return": "CursorAwareDataTreeSnapshot", "body": "@Override\n    CursorAwareDataTreeSnapshot readOnlyView() {\n        return getModification();\n    }", "signature": "CursorAwareDataTreeSnapshot readOnlyView()", "full_signature": "@Override CursorAwareDataTreeSnapshot readOnlyView()", "class_method_signature": "LocalReadWriteProxyTransaction.readOnlyView()", "testcase": false, "constructor": false, "invocations": ["getModification"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}