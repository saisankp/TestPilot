{"test_class": {"identifier": "KeePassFileTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/domain/KeePassFileTest.java"}, "test_case": {"identifier": "shouldMarshallObjectToXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldMarshallObjectToXml() throws Exception {\n        Times times = new TimesBuilder()\n                .creationTime(CalendarHandler.createCalendar(2016, 1, 15))\n                .expires(true)\n                .expiryTime(CalendarHandler.createCalendar(2016, 1, 16))\n                .lastAccessTime(CalendarHandler.createCalendar(2016, 1, 17))\n                .lastModificationTime(CalendarHandler.createCalendar(2016, 1, 18))\n                .locationChanged(CalendarHandler.createCalendar(2016, 1, 19))\n                .usageCount(23)\n                .build();\n\n        Entry entryOne = new EntryBuilder(\"SomeTitle\")\n                .notes(\"MyNote\")\n                .password(\"MyPasswd\")\n                .url(\"http://test.com\")\n                .username(\"MyUser\")\n                .uuid(UUID.fromString(\"87d4f441-a5ec-4ce0-8ca9-82a5079d28ef\"))\n                .customIconUuid(UUID.fromString(\"87d4f441-a5ec-4ce0-8ca9-82a5079d28ef\"))\n                .iconId(23)\n                .iconData(new byte[1])\n                .addTag(\"tag\")\n                .foregroundColor(\"#FFFFFF\")\n                .backgroundColor(\"#000000\")\n                .build();\n\n        Group group = new GroupBuilder(UUID.fromString(\"87d4f441-a5ec-4ce0-8ca9-82a5079d28ef\"))\n                .addEntry(entryOne).times(times)\n                .name(\"Test\")\n                .build();\n\n        Meta meta = new MetaBuilder(\"SomeDb\")\n                .databaseDescription(\"some description\")\n                .databaseDescriptionChanged(CalendarHandler.createCalendar(2016, 1, 15))\n                .databaseNameChanged(CalendarHandler.createCalendar(2016, 1, 16))\n                .generator(\"OpenKeePass\")\n                .historyMaxItems(10)\n                .historyMaxSize(20)\n                .maintenanceHistoryDays(30)\n                .recycleBinChanged(CalendarHandler.createCalendar(2016, 1, 17))\n                .recycleBinEnabled(true)\n                .recycleBinUuid(UUID.fromString(\"87d4f441-a5ec-4ce0-8ca9-82a5079d28ef\"))\n                .build();\n\n        KeePassFile keePassFile = new KeePassFileBuilder(meta)\n                .addTopGroups(group)\n                .build();\n\n        String rootUuid = Base64.toBase64String(ByteUtils.uuidToBytes(keePassFile.getRoot().getUuid()));\n\n        ByteArrayOutputStream bos = new SimpleXmlParser().toXml(keePassFile);\n\n        String xml = XmlStringCleaner.cleanXmlString(new String(bos.toByteArray()));\n        Assert.assertEquals(\n                \"<KeePassFile><Meta><Generator>OpenKeePass</Generator><DatabaseName>SomeDb</DatabaseName><DatabaseDescription>some description</DatabaseDescription><DatabaseNameChanged>2016-01-16T00:00:00</DatabaseNameChanged><DatabaseDescriptionChanged>2016-01-15T00:00:00</DatabaseDescriptionChanged><MaintenanceHistoryDays>30</MaintenanceHistoryDays><RecycleBinUUID>h9T0QaXsTOCMqYKlB50o7w==</RecycleBinUUID><RecycleBinChanged>2016-01-17T00:00:00</RecycleBinChanged><RecycleBinEnabled>True</RecycleBinEnabled><HistoryMaxItems>10</HistoryMaxItems><HistoryMaxSize>20</HistoryMaxSize></Meta><Root><UUID>\"\n                        + rootUuid\n                        + \"</UUID><IconID>49</IconID><IsExpanded>False</IsExpanded><Group><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Name>Test</Name><IconID>49</IconID><Times><LastModificationTime>2016-01-18T00:00:00</LastModificationTime><CreationTime>2016-01-15T00:00:00</CreationTime><LastAccessTime>2016-01-17T00:00:00</LastAccessTime><ExpiryTime>2016-01-16T00:00:00</ExpiryTime><Expires>True</Expires><UsageCount>23</UsageCount><LocationChanged>2016-01-19T00:00:00</LocationChanged></Times><IsExpanded>False</IsExpanded><Entry><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><IconID>23</IconID><CustomIconUUID>h9T0QaXsTOCMqYKlB50o7w==</CustomIconUUID><ForegroundColor>#FFFFFF</ForegroundColor><BackgroundColor>#000000</BackgroundColor><Tags>tag</Tags><String><Key>Notes</Key><Value Protected='False'>MyNote</Value></String><String><Key>Password</Key><Value Protected='True'>MyPasswd</Value></String><String><Key>Title</Key><Value Protected='False'>SomeTitle</Value></String><String><Key>UserName</Key><Value Protected='False'>MyUser</Value></String><String><Key>URL</Key><Value Protected='False'>http://test.com</Value></String></Entry></Group></Root></KeePassFile>\",\n                xml);\n    }", "signature": "void shouldMarshallObjectToXml()", "full_signature": "@Test public void shouldMarshallObjectToXml()", "class_method_signature": "KeePassFileTest.shouldMarshallObjectToXml()", "testcase": true, "constructor": false, "invocations": ["build", "usageCount", "locationChanged", "lastModificationTime", "lastAccessTime", "expiryTime", "expires", "creationTime", "createCalendar", "createCalendar", "createCalendar", "createCalendar", "createCalendar", "build", "backgroundColor", "foregroundColor", "addTag", "iconData", "iconId", "customIconUuid", "uuid", "username", "url", "password", "notes", "fromString", "fromString", "build", "name", "times", "addEntry", "fromString", "build", "recycleBinUuid", "recycleBinEnabled", "recycleBinChanged", "maintenanceHistoryDays", "historyMaxSize", "historyMaxItems", "generator", "databaseNameChanged", "databaseDescriptionChanged", "databaseDescription", "createCalendar", "createCalendar", "createCalendar", "fromString", "build", "addTopGroups", "toBase64String", "uuidToBytes", "getUuid", "getRoot", "toXml", "cleanXmlString", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "KeePassFile", "superclass": "", "interfaces": "implements KeePassFileElement", "fields": [{"original_string": "@Element(name = \"Meta\")\n    private Meta meta;", "modifier": "@Element(name = \"Meta\")\n    private", "type": "Meta", "declarator": "meta", "var_name": "meta"}, {"original_string": "@Element(name = \"Root\")\n    private Group root;", "modifier": "@Element(name = \"Root\")\n    private", "type": "Group", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "KeePassFile", "parameters": "()", "modifiers": "", "return": "", "signature": " KeePassFile()", "full_signature": "  KeePassFile()", "class_method_signature": "KeePassFile.KeePassFile()", "testcase": false, "constructor": true}, {"identifier": "KeePassFile", "parameters": "(KeePassFileContract keePassFileContract)", "modifiers": "public", "return": "", "signature": " KeePassFile(KeePassFileContract keePassFileContract)", "full_signature": "public  KeePassFile(KeePassFileContract keePassFileContract)", "class_method_signature": "KeePassFile.KeePassFile(KeePassFileContract keePassFileContract)", "testcase": false, "constructor": true}, {"identifier": "getMeta", "parameters": "()", "modifiers": "public", "return": "Meta", "signature": "Meta getMeta()", "full_signature": "public Meta getMeta()", "class_method_signature": "KeePassFile.getMeta()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Group", "signature": "Group getRoot()", "full_signature": "public Group getRoot()", "class_method_signature": "KeePassFile.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getTopGroups", "parameters": "()", "modifiers": "public", "return": "List<Group>", "signature": "List<Group> getTopGroups()", "full_signature": "public List<Group> getTopGroups()", "class_method_signature": "KeePassFile.getTopGroups()", "testcase": false, "constructor": false}, {"identifier": "getTopEntries", "parameters": "()", "modifiers": "public", "return": "List<Entry>", "signature": "List<Entry> getTopEntries()", "full_signature": "public List<Entry> getTopEntries()", "class_method_signature": "KeePassFile.getTopEntries()", "testcase": false, "constructor": false}, {"identifier": "getEntryByTitle", "parameters": "(String title)", "modifiers": "public", "return": "Entry", "signature": "Entry getEntryByTitle(String title)", "full_signature": "public Entry getEntryByTitle(String title)", "class_method_signature": "KeePassFile.getEntryByTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "getEntriesByTitle", "parameters": "(final String title, final boolean matchExactly)", "modifiers": "public", "return": "List<Entry>", "signature": "List<Entry> getEntriesByTitle(final String title, final boolean matchExactly)", "full_signature": "public List<Entry> getEntriesByTitle(final String title, final boolean matchExactly)", "class_method_signature": "KeePassFile.getEntriesByTitle(final String title, final boolean matchExactly)", "testcase": false, "constructor": false}, {"identifier": "getGroupsByName", "parameters": "(final String name, final boolean matchExactly)", "modifiers": "public", "return": "List<Group>", "signature": "List<Group> getGroupsByName(final String name, final boolean matchExactly)", "full_signature": "public List<Group> getGroupsByName(final String name, final boolean matchExactly)", "class_method_signature": "KeePassFile.getGroupsByName(final String name, final boolean matchExactly)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "public", "return": "List<Entry>", "signature": "List<Entry> getEntries()", "full_signature": "public List<Entry> getEntries()", "class_method_signature": "KeePassFile.getEntries()", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "public", "return": "List<Group>", "signature": "List<Group> getGroups()", "full_signature": "public List<Group> getGroups()", "class_method_signature": "KeePassFile.getGroups()", "testcase": false, "constructor": false}, {"identifier": "getGroupByName", "parameters": "(String name)", "modifiers": "public", "return": "Group", "signature": "Group getGroupByName(String name)", "full_signature": "public Group getGroupByName(String name)", "class_method_signature": "KeePassFile.getGroupByName(String name)", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "(Group parentGroup, List<Entry> entries)", "modifiers": "private", "return": "void", "signature": "void getEntries(Group parentGroup, List<Entry> entries)", "full_signature": "private void getEntries(Group parentGroup, List<Entry> entries)", "class_method_signature": "KeePassFile.getEntries(Group parentGroup, List<Entry> entries)", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "(Group parentGroup, List<Group> groups)", "modifiers": "private", "return": "void", "signature": "void getGroups(Group parentGroup, List<Group> groups)", "full_signature": "private void getGroups(Group parentGroup, List<Group> groups)", "class_method_signature": "KeePassFile.getGroups(Group parentGroup, List<Group> groups)", "testcase": false, "constructor": false}, {"identifier": "getEntryByUUID", "parameters": "(final UUID UUID)", "modifiers": "public", "return": "Entry", "signature": "Entry getEntryByUUID(final UUID UUID)", "full_signature": "public Entry getEntryByUUID(final UUID UUID)", "class_method_signature": "KeePassFile.getEntryByUUID(final UUID UUID)", "testcase": false, "constructor": false}, {"identifier": "getGroupByUUID", "parameters": "(final UUID UUID)", "modifiers": "public", "return": "Group", "signature": "Group getGroupByUUID(final UUID UUID)", "full_signature": "public Group getGroupByUUID(final UUID UUID)", "class_method_signature": "KeePassFile.getGroupByUUID(final UUID UUID)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/KeePassFile.java"}, "focal_method": {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "Group", "body": "public Group getRoot() {\n        return root;\n    }", "signature": "Group getRoot()", "full_signature": "public Group getRoot()", "class_method_signature": "KeePassFile.getRoot()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}