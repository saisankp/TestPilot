{"test_class": {"identifier": "DFTTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "double[] timeseries1;", "modifier": "", "type": "double[]", "declarator": "timeseries1", "var_name": "timeseries1"}, {"original_string": "double[] timeseries2;", "modifier": "", "type": "double[]", "declarator": "timeseries2", "var_name": "timeseries2"}, {"original_string": "TimeSeriesDataset2 dataset;", "modifier": "", "type": "TimeSeriesDataset2", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/filter/DFTTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFit() {\n\t\tDFT testDFT = new DFT();\n\t\t//testDFT.setMeanCorrected(true);\n\t\t//\t\ttestDFT.setNumberOfDisieredCoefficients(7);\n\t\ttestDFT.setNumberOfDisieredCoefficients(2);\n\t\ttestDFT.fit(this.dataset);\n\t\tTimeSeriesDataset2 output = null;\n\t\t//\t\tthrown.expect(IllegalArgumentException.class);\n\t\tSlidingWindowBuilder slide = new SlidingWindowBuilder();\n\t\tslide.setDefaultWindowSize(3);\n\t\tfor(double[][] matrix : this.dataset.getValueMatrices()) {\n\t\t\tfor(double[] instance : matrix) {\n\t\t\t\tTimeSeriesDataset2 tmp2= testDFT.rekursivDFT(slide.specialFitTransform(instance));\n\t\t\t\tfor(double[][] m : tmp2.getValueMatrices()) {\n\t\t\t\t\tfor(double[] i : m) {\n\t\t\t\t\t\tSystem.out.println(Arrays.toString(i));\n\t\t\t\t\t\tSystem.out.println(\"------------------------------------------------\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"------------------------------------------------\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"------------------------------------------------\");\n\t\t\t}\n\t\t}\n\t\toutput = testDFT.transform(this.dataset);\n\t\tSystem.out.println(\"iterativ\");\n\t\tSystem.out.println(\"------------------------------------------------\");\n\n\t\tfor(double[][] m : output.getValueMatrices()) {\n\t\t\tfor(double[] i : m) {\n\t\t\t\tSystem.out.println(Arrays.toString(i));\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println(\"iterativ slides\");\n\t\tSystem.out.println(\"------------------------------------------------\");\n\t\tfor(double[][] matrix : this.dataset.getValueMatrices()) {\n\t\t\tfor(double[] instance : matrix) {\n\t\t\t\tTimeSeriesDataset2 tmp2= testDFT.fitTransform((slide.specialFitTransform(instance)));\n\t\t\t\tSystem.out.println(tmp2.getNumberOfVariables());\n\t\t\t\tfor(double[][] m : tmp2.getValueMatrices()) {\n\t\t\t\t\tfor(double[] i : m) {\n\t\t\t\t\t\tSystem.out.println(Arrays.toString(i));\n\t\t\t\t\t\tSystem.out.println(\"------------------------------------------------\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"-----------hallo-------------------------------------\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"-----------DataSetFinished------------------------------------\");\n\t\t\t}\n\t\t}\n\n\t\tassertEquals(1,output.getValues(0)[0][0], 1.0E-5);\n\t\tassertEquals(0, output.getValues(0)[0][1], 1.0E-5);\n\n\n\t}", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "DFTTest.testFit()", "testcase": true, "constructor": false, "invocations": ["setNumberOfDisieredCoefficients", "fit", "setDefaultWindowSize", "getValueMatrices", "rekursivDFT", "specialFitTransform", "getValueMatrices", "println", "toString", "println", "println", "println", "transform", "println", "println", "getValueMatrices", "println", "toString", "println", "println", "getValueMatrices", "fitTransform", "specialFitTransform", "println", "getNumberOfVariables", "getValueMatrices", "println", "toString", "println", "println", "println", "assertEquals", "getValues", "assertEquals", "getValues"]}, "focal_class": {"identifier": "DFT", "superclass": "extends AFilter", "interfaces": "", "fields": [{"original_string": "private static final String MSG_EMPTYINPUT = \"The input can not be empty\";", "modifier": "private static final", "type": "String", "declarator": "MSG_EMPTYINPUT = \"The input can not be empty\"", "var_name": "MSG_EMPTYINPUT"}, {"original_string": "private List<double[][]> dftCoefficients = new ArrayList<>();", "modifier": "private", "type": "List<double[][]>", "declarator": "dftCoefficients = new ArrayList<>()", "var_name": "dftCoefficients"}, {"original_string": "private double[][] dftCoefficientsMatrix;", "modifier": "private", "type": "double[][]", "declarator": "dftCoefficientsMatrix", "var_name": "dftCoefficientsMatrix"}, {"original_string": "private double[] dftCoefficientsInstance;", "modifier": "private", "type": "double[]", "declarator": "dftCoefficientsInstance", "var_name": "dftCoefficientsInstance"}, {"original_string": "private int numberOfDisieredCoefficients = 10;", "modifier": "private", "type": "int", "declarator": "numberOfDisieredCoefficients = 10", "var_name": "numberOfDisieredCoefficients"}, {"original_string": "private boolean fittedInstance = false;", "modifier": "private", "type": "boolean", "declarator": "fittedInstance = false", "var_name": "fittedInstance"}, {"original_string": "private boolean fittedMatrix = false;", "modifier": "private", "type": "boolean", "declarator": "fittedMatrix = false", "var_name": "fittedMatrix"}, {"original_string": "private boolean fitted = false;", "modifier": "private", "type": "boolean", "declarator": "fitted = false", "var_name": "fitted"}, {"original_string": "private boolean meanCorrected = false;", "modifier": "private", "type": "boolean", "declarator": "meanCorrected = false", "var_name": "meanCorrected"}, {"original_string": "private int startingpoint = 0;", "modifier": "private", "type": "int", "declarator": "startingpoint = 0", "var_name": "startingpoint"}, {"original_string": "private boolean rekursivFirstInstance;", "modifier": "private", "type": "boolean", "declarator": "rekursivFirstInstance", "var_name": "rekursivFirstInstance"}], "methods": [{"identifier": "setNumberOfDisieredCoefficients", "parameters": "(final int numberOfDisieredCoefficients)", "modifiers": "public", "return": "void", "signature": "void setNumberOfDisieredCoefficients(final int numberOfDisieredCoefficients)", "full_signature": "public void setNumberOfDisieredCoefficients(final int numberOfDisieredCoefficients)", "class_method_signature": "DFT.setNumberOfDisieredCoefficients(final int numberOfDisieredCoefficients)", "testcase": false, "constructor": false}, {"identifier": "setMeanCorrected", "parameters": "(final boolean meanCorrected)", "modifiers": "public", "return": "void", "signature": "void setMeanCorrected(final boolean meanCorrected)", "full_signature": "public void setMeanCorrected(final boolean meanCorrected)", "class_method_signature": "DFT.setMeanCorrected(final boolean meanCorrected)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 transform(final TimeSeriesDataset2 input)", "full_signature": "@Override public TimeSeriesDataset2 transform(final TimeSeriesDataset2 input)", "class_method_signature": "DFT.transform(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final TimeSeriesDataset2 input)", "full_signature": "@Override public void fit(final TimeSeriesDataset2 input)", "class_method_signature": "DFT.fit(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] transform(final double[] input)", "full_signature": "@Override public double[] transform(final double[] input)", "class_method_signature": "DFT.transform(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final double[] input)", "full_signature": "@Override public void fit(final double[] input)", "class_method_signature": "DFT.fit(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "fitTransform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] fitTransform(final double[] input)", "full_signature": "@Override public double[] fitTransform(final double[] input)", "class_method_signature": "DFT.fitTransform(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] transform(final double[][] input)", "full_signature": "@Override public double[][] transform(final double[][] input)", "class_method_signature": "DFT.transform(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final double[][] input)", "full_signature": "@Override public void fit(final double[][] input)", "class_method_signature": "DFT.fit(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "fitTransform", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] fitTransform(final double[][] input)", "full_signature": "@Override public double[][] fitTransform(final double[][] input)", "class_method_signature": "DFT.fitTransform(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "rekursivDFT", "parameters": "(final double[][] input)", "modifiers": "public", "return": "double[][]", "signature": "double[][] rekursivDFT(final double[][] input)", "full_signature": "public double[][] rekursivDFT(final double[][] input)", "class_method_signature": "DFT.rekursivDFT(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "conversion", "parameters": "(final Complex[][] input)", "modifiers": "private", "return": "double[][]", "signature": "double[][] conversion(final Complex[][] input)", "full_signature": "private double[][] conversion(final Complex[][] input)", "class_method_signature": "DFT.conversion(final Complex[][] input)", "testcase": false, "constructor": false}, {"identifier": "vFormular", "parameters": "(final int coefficient, final int legthOfinstance)", "modifiers": "private", "return": "Complex", "signature": "Complex vFormular(final int coefficient, final int legthOfinstance)", "full_signature": "private Complex vFormular(final int coefficient, final int legthOfinstance)", "class_method_signature": "DFT.vFormular(final int coefficient, final int legthOfinstance)", "testcase": false, "constructor": false}, {"identifier": "rekursivDFT", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "public", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 rekursivDFT(final TimeSeriesDataset2 input)", "full_signature": "public TimeSeriesDataset2 rekursivDFT(final TimeSeriesDataset2 input)", "class_method_signature": "DFT.rekursivDFT(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/filter/DFT.java"}, "focal_method": {"identifier": "fit", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void fit(final TimeSeriesDataset2 input) {\n\n\t\tif (input.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"This method can not work with an empty dataset.\");\n\t\t}\n\t\tthis.dftCoefficients.clear();\n\n\t\tfor (int matrix = 0; matrix < input.getNumberOfVariables(); matrix++) {\n\t\t\tthis.fitTransform(input.getValues(matrix));\n\t\t\tthis.fittedMatrix = false;\n\t\t\tthis.dftCoefficients.add(this.dftCoefficientsMatrix);\n\t\t}\n\n\t\tthis.fitted = true;\n\t}", "signature": "void fit(final TimeSeriesDataset2 input)", "full_signature": "@Override public void fit(final TimeSeriesDataset2 input)", "class_method_signature": "DFT.fit(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "clear", "getNumberOfVariables", "fitTransform", "getValues", "add"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}