{"test_class": {"identifier": "OccurrenceTest", "superclass": "extends net.ontopia.topicmaps.core.OccurrenceTest", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/impl/rdbms/OccurrenceTest.java"}, "test_case": {"identifier": "testIssue494", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIssue494() throws Exception {\n    // bug is only triggered if the value is committed\n    topicmap.getStore().commit();\n    Assert.assertNotNull(\"Bug 494: empty occurrence value returned as null\", occurrence.getValue());\n  }", "signature": "void testIssue494()", "full_signature": "@Test public void testIssue494()", "class_method_signature": "OccurrenceTest.testIssue494()", "testcase": true, "constructor": false, "invocations": ["commit", "getStore", "assertNotNull", "getValue"]}, "focal_class": {"identifier": "Occurrence", "superclass": "extends TMObject", "interfaces": "implements OccurrenceIF", "fields": [{"original_string": "public static final String CLASS_INDICATOR = \"O\";", "modifier": "public static final", "type": "String", "declarator": "CLASS_INDICATOR = \"O\"", "var_name": "CLASS_INDICATOR"}, {"original_string": "protected static final int LF_topic = 2;", "modifier": "protected static final", "type": "int", "declarator": "LF_topic = 2", "var_name": "LF_topic"}, {"original_string": "protected static final int LF_scope = 3;", "modifier": "protected static final", "type": "int", "declarator": "LF_scope = 3", "var_name": "LF_scope"}, {"original_string": "protected static final int LF_type = 4;", "modifier": "protected static final", "type": "int", "declarator": "LF_type = 4", "var_name": "LF_type"}, {"original_string": "protected static final int LF_datatype = 5;", "modifier": "protected static final", "type": "int", "declarator": "LF_datatype = 5", "var_name": "LF_datatype"}, {"original_string": "protected static final int LF_length = 6;", "modifier": "protected static final", "type": "int", "declarator": "LF_length = 6", "var_name": "LF_length"}, {"original_string": "protected static final int LF_hashcode = 7;", "modifier": "protected static final", "type": "int", "declarator": "LF_hashcode = 7", "var_name": "LF_hashcode"}, {"original_string": "protected static final int LF_value = 8;", "modifier": "protected static final", "type": "int", "declarator": "LF_value = 8", "var_name": "LF_value"}, {"original_string": "protected static final int LF_reifier = 9;", "modifier": "protected static final", "type": "int", "declarator": "LF_reifier = 9", "var_name": "LF_reifier"}, {"original_string": "protected static final String[] fields = {\"sources\", \"topicmap\", \"topic\", \"scope\", \"type\", \"datatype\", \"length\", \"hashcode\", \"value\", \"reifier\"};", "modifier": "protected static final", "type": "String[]", "declarator": "fields = {\"sources\", \"topicmap\", \"topic\", \"scope\", \"type\", \"datatype\", \"length\", \"hashcode\", \"value\", \"reifier\"}", "var_name": "fields"}], "methods": [{"identifier": "detach", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void detach()", "full_signature": "@Override public void detach()", "class_method_signature": "Occurrence.detach()", "testcase": false, "constructor": false}, {"identifier": "Occurrence", "parameters": "()", "modifiers": "public", "return": "", "signature": " Occurrence()", "full_signature": "public  Occurrence()", "class_method_signature": "Occurrence.Occurrence()", "testcase": false, "constructor": true}, {"identifier": "Occurrence", "parameters": "(TransactionIF txn)", "modifiers": "public", "return": "", "signature": " Occurrence(TransactionIF txn)", "full_signature": "public  Occurrence(TransactionIF txn)", "class_method_signature": "Occurrence.Occurrence(TransactionIF txn)", "testcase": false, "constructor": true}, {"identifier": "_p_getFieldCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int _p_getFieldCount()", "full_signature": "@Override public int _p_getFieldCount()", "class_method_signature": "Occurrence._p_getFieldCount()", "testcase": false, "constructor": false}, {"identifier": "getClassIndicator", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getClassIndicator()", "full_signature": "@Override public String getClassIndicator()", "class_method_signature": "Occurrence.getClassIndicator()", "testcase": false, "constructor": false}, {"identifier": "getObjectId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getObjectId()", "full_signature": "@Override public String getObjectId()", "class_method_signature": "Occurrence.getObjectId()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "Occurrence.remove()", "testcase": false, "constructor": false}, {"identifier": "getTopic", "parameters": "()", "modifiers": "@Override public", "return": "TopicIF", "signature": "TopicIF getTopic()", "full_signature": "@Override public TopicIF getTopic()", "class_method_signature": "Occurrence.getTopic()", "testcase": false, "constructor": false}, {"identifier": "setTopic", "parameters": "(TopicIF topic)", "modifiers": "protected", "return": "void", "signature": "void setTopic(TopicIF topic)", "full_signature": "protected void setTopic(TopicIF topic)", "class_method_signature": "Occurrence.setTopic(TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "setTopicMap", "parameters": "(TopicMap topicmap)", "modifiers": "protected", "return": "void", "signature": "void setTopicMap(TopicMap topicmap)", "full_signature": "protected void setTopicMap(TopicMap topicmap)", "class_method_signature": "Occurrence.setTopicMap(TopicMap topicmap)", "testcase": false, "constructor": false}, {"identifier": "getDataType", "parameters": "()", "modifiers": "@Override public", "return": "LocatorIF", "signature": "LocatorIF getDataType()", "full_signature": "@Override public LocatorIF getDataType()", "class_method_signature": "Occurrence.getDataType()", "testcase": false, "constructor": false}, {"identifier": "setDataType", "parameters": "(LocatorIF datatype)", "modifiers": "protected", "return": "void", "signature": "void setDataType(LocatorIF datatype)", "full_signature": "protected void setDataType(LocatorIF datatype)", "class_method_signature": "Occurrence.setDataType(LocatorIF datatype)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getValue()", "full_signature": "@Override public String getValue()", "class_method_signature": "Occurrence.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(String value)", "full_signature": "@Override public void setValue(String value)", "class_method_signature": "Occurrence.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value, LocatorIF datatype)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(String value, LocatorIF datatype)", "full_signature": "@Override public void setValue(String value, LocatorIF datatype)", "class_method_signature": "Occurrence.setValue(String value, LocatorIF datatype)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Object value, LocatorIF datatype, long length, long hashcode)", "modifiers": "private", "return": "void", "signature": "void setValue(Object value, LocatorIF datatype, long length, long hashcode)", "full_signature": "private void setValue(Object value, LocatorIF datatype, long length, long hashcode)", "class_method_signature": "Occurrence.setValue(Object value, LocatorIF datatype, long length, long hashcode)", "testcase": false, "constructor": false}, {"identifier": "getReader", "parameters": "()", "modifiers": "@Override public", "return": "Reader", "signature": "Reader getReader()", "full_signature": "@Override public Reader getReader()", "class_method_signature": "Occurrence.getReader()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader value, long length, LocatorIF datatype)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader value, long length, LocatorIF datatype)", "full_signature": "@Override public void setReader(Reader value, long length, LocatorIF datatype)", "class_method_signature": "Occurrence.setReader(Reader value, long length, LocatorIF datatype)", "testcase": false, "constructor": false}, {"identifier": "getLocator", "parameters": "()", "modifiers": "@Override public", "return": "LocatorIF", "signature": "LocatorIF getLocator()", "full_signature": "@Override public LocatorIF getLocator()", "class_method_signature": "Occurrence.getLocator()", "testcase": false, "constructor": false}, {"identifier": "setLocator", "parameters": "(LocatorIF locator)", "modifiers": "@Override public", "return": "void", "signature": "void setLocator(LocatorIF locator)", "full_signature": "@Override public void setLocator(LocatorIF locator)", "class_method_signature": "Occurrence.setLocator(LocatorIF locator)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLength()", "full_signature": "@Override public long getLength()", "class_method_signature": "Occurrence.getLength()", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "@Override public", "return": "Collection<TopicIF>", "signature": "Collection<TopicIF> getScope()", "full_signature": "@Override public Collection<TopicIF> getScope()", "class_method_signature": "Occurrence.getScope()", "testcase": false, "constructor": false}, {"identifier": "addTheme", "parameters": "(TopicIF theme)", "modifiers": "@Override public", "return": "void", "signature": "void addTheme(TopicIF theme)", "full_signature": "@Override public void addTheme(TopicIF theme)", "class_method_signature": "Occurrence.addTheme(TopicIF theme)", "testcase": false, "constructor": false}, {"identifier": "removeTheme", "parameters": "(TopicIF theme)", "modifiers": "@Override public", "return": "void", "signature": "void removeTheme(TopicIF theme)", "full_signature": "@Override public void removeTheme(TopicIF theme)", "class_method_signature": "Occurrence.removeTheme(TopicIF theme)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "TopicIF", "signature": "TopicIF getType()", "full_signature": "@Override public TopicIF getType()", "class_method_signature": "Occurrence.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(TopicIF type)", "modifiers": "@Override public", "return": "void", "signature": "void setType(TopicIF type)", "full_signature": "@Override public void setType(TopicIF type)", "class_method_signature": "Occurrence.setType(TopicIF type)", "testcase": false, "constructor": false}, {"identifier": "getReifier", "parameters": "()", "modifiers": "@Override public", "return": "TopicIF", "signature": "TopicIF getReifier()", "full_signature": "@Override public TopicIF getReifier()", "class_method_signature": "Occurrence.getReifier()", "testcase": false, "constructor": false}, {"identifier": "setReifier", "parameters": "(TopicIF _reifier)", "modifiers": "@Override public", "return": "void", "signature": "void setReifier(TopicIF _reifier)", "full_signature": "@Override public void setReifier(TopicIF _reifier)", "class_method_signature": "Occurrence.setReifier(TopicIF _reifier)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Occurrence.toString()", "testcase": false, "constructor": false}, {"identifier": "syncAfterMerge", "parameters": "(IdentityIF source, IdentityIF target)", "modifiers": "@Override public", "return": "void", "signature": "void syncAfterMerge(IdentityIF source, IdentityIF target)", "full_signature": "@Override public void syncAfterMerge(IdentityIF source, IdentityIF target)", "class_method_signature": "Occurrence.syncAfterMerge(IdentityIF source, IdentityIF target)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/impl/rdbms/Occurrence.java"}, "focal_method": {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String getValue() {\n    Object value = loadField(LF_value);\n    if (value instanceof String) {\n      return (String) value;\n    } else if (value instanceof OnDemandValue) {\n      OnDemandValue odv = (OnDemandValue)value;\n      try {\n        Reader r = (Reader)odv.getValue(_p_getTransaction());\n        try {\n          return IOUtils.toString(r);\n        } finally {\n          r.close();\n        }\n      } catch (IOException e) {\n        throw new OntopiaRuntimeException(e);\n      }\n    } else if (value != null) {\n      throw new OntopiaRuntimeException(\"Occurrence value cannot be non-null at this point: \" + value);\n    } else {\n      return null; // FIXME: or possibly something else\n    }\n  }", "signature": "String getValue()", "full_signature": "@Override public String getValue()", "class_method_signature": "Occurrence.getValue()", "testcase": false, "constructor": false, "invocations": ["loadField", "getValue", "_p_getTransaction", "toString", "close"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}