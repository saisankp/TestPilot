{"test_class": {"identifier": "MergingConfigProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_PATH = \"/configs/default.yaml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PATH = \"/configs/default.yaml\"", "var_name": "DEFAULT_PATH"}, {"original_string": "private static final String OVERRIDE_PATH = \"/configs/override.yaml\";", "modifier": "private static final", "type": "String", "declarator": "OVERRIDE_PATH = \"/configs/override.yaml\"", "var_name": "OVERRIDE_PATH"}, {"original_string": "private static final String JUST_A_STRING_PATH = \"/configs/just_a_string.yaml\";", "modifier": "private static final", "type": "String", "declarator": "JUST_A_STRING_PATH = \"/configs/just_a_string.yaml\"", "var_name": "JUST_A_STRING_PATH"}, {"original_string": "private static final String DOESNT_EXIST_PATH = \"/configs/doesnt_exist.yaml\";", "modifier": "private static final", "type": "String", "declarator": "DOESNT_EXIST_PATH = \"/configs/doesnt_exist.yaml\"", "var_name": "DOESNT_EXIST_PATH"}, {"original_string": "private static final YAMLFactory YAML_FACTORY = new YAMLFactory();", "modifier": "private static final", "type": "YAMLFactory", "declarator": "YAML_FACTORY = new YAMLFactory()", "var_name": "YAML_FACTORY"}, {"original_string": "ObjectMapper objectMapper = Jackson.newObjectMapper()\n      .setSerializationInclusion(Include.NON_NULL)\n      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "modifier": "", "type": "ObjectMapper", "declarator": "objectMapper = Jackson.newObjectMapper()\n      .setSerializationInclusion(Include.NON_NULL)\n      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)", "var_name": "objectMapper"}], "file": "BaragonService/src/test/java/com/hubspot/baragon/service/config/MergingConfigProviderTest.java"}, "test_case": {"identifier": "itThrowsExnOnNotFoundDefaultPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void itThrowsExnOnNotFoundDefaultPath() throws Exception {\n    Assertions.assertThrows(FileNotFoundException.class, () ->\n        buildConfigSourceProvider(DOESNT_EXIST_PATH)\n            .open(OVERRIDE_PATH));\n  }", "signature": "void itThrowsExnOnNotFoundDefaultPath()", "full_signature": "@Test public void itThrowsExnOnNotFoundDefaultPath()", "class_method_signature": "MergingConfigProviderTest.itThrowsExnOnNotFoundDefaultPath()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "open", "buildConfigSourceProvider"]}, "focal_class": {"identifier": "MergingConfigProvider", "superclass": "", "interfaces": "implements ConfigurationSourceProvider", "fields": [{"original_string": "private final ConfigurationSourceProvider delegate;", "modifier": "private final", "type": "ConfigurationSourceProvider", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final String defaultConfigPath;", "modifier": "private final", "type": "String", "declarator": "defaultConfigPath", "var_name": "defaultConfigPath"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private final YAMLFactory yamlFactory;", "modifier": "private final", "type": "YAMLFactory", "declarator": "yamlFactory", "var_name": "yamlFactory"}], "methods": [{"identifier": "MergingConfigProvider", "parameters": "(ConfigurationSourceProvider delegate, String defaultConfigPath, ObjectMapper objectMapper, YAMLFactory yamlFactory)", "modifiers": "public", "return": "", "signature": " MergingConfigProvider(ConfigurationSourceProvider delegate, String defaultConfigPath, ObjectMapper objectMapper, YAMLFactory yamlFactory)", "full_signature": "public  MergingConfigProvider(ConfigurationSourceProvider delegate, String defaultConfigPath, ObjectMapper objectMapper, YAMLFactory yamlFactory)", "class_method_signature": "MergingConfigProvider.MergingConfigProvider(ConfigurationSourceProvider delegate, String defaultConfigPath, ObjectMapper objectMapper, YAMLFactory yamlFactory)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "(String path)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream open(String path)", "full_signature": "@Override public InputStream open(String path)", "class_method_signature": "MergingConfigProvider.open(String path)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(ObjectNode original, ObjectNode override)", "modifiers": "private", "return": "void", "signature": "void merge(ObjectNode original, ObjectNode override)", "full_signature": "private void merge(ObjectNode original, ObjectNode override)", "class_method_signature": "MergingConfigProvider.merge(ObjectNode original, ObjectNode override)", "testcase": false, "constructor": false}, {"identifier": "readFromPath", "parameters": "(String path)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode readFromPath(String path)", "full_signature": "private JsonNode readFromPath(String path)", "class_method_signature": "MergingConfigProvider.readFromPath(String path)", "testcase": false, "constructor": false}], "file": "BaragonService/src/main/java/com/hubspot/baragon/service/config/MergingConfigProvider.java"}, "focal_method": {"identifier": "open", "parameters": "(String path)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n  public InputStream open(String path) throws IOException {\n    JsonNode originalNode = readFromPath(defaultConfigPath);\n    JsonNode overrideNode = readFromPath(path);\n\n    if (originalNode.isObject() && overrideNode.isObject()) {\n      ObjectNode original = (ObjectNode) originalNode;\n      ObjectNode override = (ObjectNode) overrideNode;\n\n      merge(original, override);\n      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n      objectMapper.writeTree(yamlFactory.createGenerator(outputStream), original);\n\n      return new ByteArrayInputStream(outputStream.toByteArray());\n    } else {\n      throw new IllegalArgumentException(\"Both configuration files must be objects\");\n    }\n  }", "signature": "InputStream open(String path)", "full_signature": "@Override public InputStream open(String path)", "class_method_signature": "MergingConfigProvider.open(String path)", "testcase": false, "constructor": false, "invocations": ["readFromPath", "readFromPath", "isObject", "isObject", "merge", "writeTree", "createGenerator", "toByteArray"]}, "repository": {"repo_id": 14145875, "url": "https://github.com/HubSpot/Baragon", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 101, "size": 9251, "license": "licensed"}}