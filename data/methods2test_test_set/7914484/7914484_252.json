{"test_class": {"identifier": "TraxUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-xml/src/test/java/org/springframework/xml/transform/TraxUtilsTest.java"}, "test_case": {"identifier": "testDoWithInvalidSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDoWithInvalidSource() throws Exception {\n\t\tSource source = new Source() {\n\n\t\t\tpublic void setSystemId(String systemId) {}\n\n\t\t\tpublic String getSystemId() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tTraxUtils.doWithSource(source, null);\n\t\t\tAssert.fail(\"IllegalArgumentException expected\");\n\t\t} catch (IllegalArgumentException ex) {\n\t\t\t// expected\n\t\t}\n\t}", "signature": "void testDoWithInvalidSource()", "full_signature": "@Test public void testDoWithInvalidSource()", "class_method_signature": "TraxUtilsTest.testDoWithInvalidSource()", "testcase": true, "constructor": false, "invocations": ["doWithSource", "fail"]}, "focal_class": {"identifier": "TraxUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getDocument", "parameters": "(DOMSource source)", "modifiers": "public static", "return": "Document", "signature": "Document getDocument(DOMSource source)", "full_signature": "public static Document getDocument(DOMSource source)", "class_method_signature": "TraxUtils.getDocument(DOMSource source)", "testcase": false, "constructor": false}, {"identifier": "doWithSource", "parameters": "(Source source, SourceCallback callback)", "modifiers": "public static", "return": "void", "signature": "void doWithSource(Source source, SourceCallback callback)", "full_signature": "public static void doWithSource(Source source, SourceCallback callback)", "class_method_signature": "TraxUtils.doWithSource(Source source, SourceCallback callback)", "testcase": false, "constructor": false}, {"identifier": "doWithResult", "parameters": "(Result result, ResultCallback callback)", "modifiers": "public static", "return": "void", "signature": "void doWithResult(Result result, ResultCallback callback)", "full_signature": "public static void doWithResult(Result result, ResultCallback callback)", "class_method_signature": "TraxUtils.doWithResult(Result result, ResultCallback callback)", "testcase": false, "constructor": false}], "file": "spring-xml/src/main/java/org/springframework/xml/transform/TraxUtils.java"}, "focal_method": {"identifier": "doWithSource", "parameters": "(Source source, SourceCallback callback)", "modifiers": "public static", "return": "void", "body": "public static void doWithSource(Source source, SourceCallback callback) throws Exception {\n\t\tif (source instanceof DOMSource) {\n\t\t\tcallback.domSource(((DOMSource) source).getNode());\n\t\t\treturn;\n\t\t} else if (StaxUtils.isStaxSource(source)) {\n\t\t\tXMLStreamReader streamReader = StaxUtils.getXMLStreamReader(source);\n\t\t\tif (streamReader != null) {\n\t\t\t\tcallback.staxSource(streamReader);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tXMLEventReader eventReader = StaxUtils.getXMLEventReader(source);\n\t\t\t\tif (eventReader != null) {\n\t\t\t\t\tcallback.staxSource(eventReader);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (source instanceof SAXSource) {\n\t\t\tSAXSource saxSource = (SAXSource) source;\n\t\t\tcallback.saxSource(saxSource.getXMLReader(), saxSource.getInputSource());\n\t\t\treturn;\n\t\t} else if (source instanceof StreamSource) {\n\t\t\tStreamSource streamSource = (StreamSource) source;\n\t\t\tif (streamSource.getInputStream() != null) {\n\t\t\t\tcallback.streamSource(streamSource.getInputStream());\n\t\t\t\treturn;\n\t\t\t} else if (streamSource.getReader() != null) {\n\t\t\t\tcallback.streamSource(streamSource.getReader());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (StringUtils.hasLength(source.getSystemId())) {\n\t\t\tString systemId = source.getSystemId();\n\t\t\tcallback.source(systemId);\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n\t\t}\n\t}", "signature": "void doWithSource(Source source, SourceCallback callback)", "full_signature": "public static void doWithSource(Source source, SourceCallback callback)", "class_method_signature": "TraxUtils.doWithSource(Source source, SourceCallback callback)", "testcase": false, "constructor": false, "invocations": ["domSource", "getNode", "isStaxSource", "getXMLStreamReader", "staxSource", "getXMLEventReader", "staxSource", "saxSource", "getXMLReader", "getInputSource", "getInputStream", "streamSource", "getInputStream", "getReader", "streamSource", "getReader", "hasLength", "getSystemId", "getSystemId", "source", "getClass"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}