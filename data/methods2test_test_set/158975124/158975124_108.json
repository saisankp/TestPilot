{"test_class": {"identifier": "IoTDBConfigDynamicAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static final", "type": "IoTDBConfig", "declarator": "CONFIG = IoTDBDescriptor.getInstance().getConfig()", "var_name": "CONFIG"}, {"original_string": "private long oldTsFileThreshold = CONFIG.getTsFileSizeThreshold();", "modifier": "private", "type": "long", "declarator": "oldTsFileThreshold = CONFIG.getTsFileSizeThreshold()", "var_name": "oldTsFileThreshold"}, {"original_string": "private int oldMaxMemTableNumber = CONFIG.getMaxMemtableNumber();", "modifier": "private", "type": "int", "declarator": "oldMaxMemTableNumber = CONFIG.getMaxMemtableNumber()", "var_name": "oldMaxMemTableNumber"}, {"original_string": "private long oldGroupSizeInByte = CONFIG.getMemtableSizeThreshold();", "modifier": "private", "type": "long", "declarator": "oldGroupSizeInByte = CONFIG.getMemtableSizeThreshold()", "var_name": "oldGroupSizeInByte"}], "file": "server/src/test/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapterTest.java"}, "test_case": {"identifier": "addOrDeleteTimeSeries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addOrDeleteTimeSeries() throws ConfigAdjusterException {\n    int totalTimeseries = 0;\n    for (int i = 1; i < 100; i++) {\n      IoTDBConfigDynamicAdapter.getInstance().addOrDeleteStorageGroup(1);\n    }\n    IoTDB.metaManager.setMaxSeriesNumberAmongStorageGroup(100);\n    for (int i = 1; i < 1000000; i++) {\n      try {\n        IoTDBConfigDynamicAdapter.getInstance().addOrDeleteTimeSeries(1);\n\n        if (i % 10 == 0) {\n          IoTDB.metaManager.setMaxSeriesNumberAmongStorageGroup(i);\n        }\n        totalTimeseries += 1;\n        assertEquals(IoTDBConfigDynamicAdapter.getInstance().getCurrentMemTableSize(),\n            CONFIG.getMemtableSizeThreshold());\n        assertEquals(IoTDBConfigDynamicAdapter.getInstance().getTotalTimeseries(),\n            totalTimeseries);\n      } catch (ConfigAdjusterException e) {\n        assertEquals(String.format(ConfigAdjusterException.ERROR_MSG_FORMAT,\n            IoTDBConfigDynamicAdapter.ADD_TIMESERIES), e.getMessage());\n        assertEquals(IoTDBConfigDynamicAdapter.getInstance().getTotalTimeseries(),\n            totalTimeseries);\n        break;\n      }\n    }\n  }", "signature": "void addOrDeleteTimeSeries()", "full_signature": "@Test public void addOrDeleteTimeSeries()", "class_method_signature": "IoTDBConfigDynamicAdapterTest.addOrDeleteTimeSeries()", "testcase": true, "constructor": false, "invocations": ["addOrDeleteStorageGroup", "getInstance", "setMaxSeriesNumberAmongStorageGroup", "addOrDeleteTimeSeries", "getInstance", "setMaxSeriesNumberAmongStorageGroup", "assertEquals", "getCurrentMemTableSize", "getInstance", "getMemtableSizeThreshold", "assertEquals", "getTotalTimeseries", "getInstance", "assertEquals", "format", "getMessage", "assertEquals", "getTotalTimeseries", "getInstance"]}, "focal_class": {"identifier": "IoTDBConfigDynamicAdapter", "superclass": "", "interfaces": "implements IDynamicAdapter", "fields": [{"original_string": "public static final String CREATE_STORAGE_GROUP = \"create storage group\";", "modifier": "public static final", "type": "String", "declarator": "CREATE_STORAGE_GROUP = \"create storage group\"", "var_name": "CREATE_STORAGE_GROUP"}, {"original_string": "public static final String ADD_TIMESERIES = \"add timeseries\";", "modifier": "public static final", "type": "String", "declarator": "ADD_TIMESERIES = \"add timeseries\"", "var_name": "ADD_TIMESERIES"}, {"original_string": "static final int MEM_TABLE_AVERAGE_QUEUE_LEN = 5;", "modifier": "static final", "type": "int", "declarator": "MEM_TABLE_AVERAGE_QUEUE_LEN = 5", "var_name": "MEM_TABLE_AVERAGE_QUEUE_LEN"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(IoTDBConfigDynamicAdapter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(IoTDBConfigDynamicAdapter.class)", "var_name": "LOGGER"}, {"original_string": "private static final IoTDBConfig CONFIG = IoTDBDescriptor.getInstance().getConfig();", "modifier": "private static final", "type": "IoTDBConfig", "declarator": "CONFIG = IoTDBDescriptor.getInstance().getConfig()", "var_name": "CONFIG"}, {"original_string": "private static final long TIMESERIES_METADATA_SIZE_IN_BYTE = 2L * 1024;", "modifier": "private static final", "type": "long", "declarator": "TIMESERIES_METADATA_SIZE_IN_BYTE = 2L * 1024", "var_name": "TIMESERIES_METADATA_SIZE_IN_BYTE"}, {"original_string": "private static final double WAL_MEMORY_RATIO = 0.1;", "modifier": "private static final", "type": "double", "declarator": "WAL_MEMORY_RATIO = 0.1", "var_name": "WAL_MEMORY_RATIO"}, {"original_string": "public static final int MEMTABLE_NUM_FOR_EACH_PARTITION = 4;", "modifier": "public static final", "type": "int", "declarator": "MEMTABLE_NUM_FOR_EACH_PARTITION = 4", "var_name": "MEMTABLE_NUM_FOR_EACH_PARTITION"}, {"original_string": "private static long allocateMemoryForWrite = CONFIG.getAllocateMemoryForWrite();", "modifier": "private static", "type": "long", "declarator": "allocateMemoryForWrite = CONFIG.getAllocateMemoryForWrite()", "var_name": "allocateMemoryForWrite"}, {"original_string": "private static long CHUNK_METADATA_SIZE_IN_BYTE = 1536L;", "modifier": "private static", "type": "long", "declarator": "CHUNK_METADATA_SIZE_IN_BYTE = 1536L", "var_name": "CHUNK_METADATA_SIZE_IN_BYTE"}, {"original_string": "private long staticMemory;", "modifier": "private", "type": "long", "declarator": "staticMemory", "var_name": "staticMemory"}, {"original_string": "private int totalStorageGroup;", "modifier": "private", "type": "int", "declarator": "totalStorageGroup", "var_name": "totalStorageGroup"}, {"original_string": "private int totalTimeseries;", "modifier": "private", "type": "int", "declarator": "totalTimeseries", "var_name": "totalTimeseries"}, {"original_string": "private int maxMemTableNum = MEM_TABLE_AVERAGE_QUEUE_LEN;", "modifier": "private", "type": "int", "declarator": "maxMemTableNum = MEM_TABLE_AVERAGE_QUEUE_LEN", "var_name": "maxMemTableNum"}, {"original_string": "private long currentMemTableSize;", "modifier": "private", "type": "long", "declarator": "currentMemTableSize", "var_name": "currentMemTableSize"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}], "methods": [{"identifier": "IoTDBConfigDynamicAdapter", "parameters": "()", "modifiers": "private", "return": "", "signature": " IoTDBConfigDynamicAdapter()", "full_signature": "private  IoTDBConfigDynamicAdapter()", "class_method_signature": "IoTDBConfigDynamicAdapter.IoTDBConfigDynamicAdapter()", "testcase": false, "constructor": true}, {"identifier": "setChunkMetadataSizeInByte", "parameters": "(long chunkMetadataSizeInByte)", "modifiers": "public static", "return": "void", "signature": "void setChunkMetadataSizeInByte(long chunkMetadataSizeInByte)", "full_signature": "public static void setChunkMetadataSizeInByte(long chunkMetadataSizeInByte)", "class_method_signature": "IoTDBConfigDynamicAdapter.setChunkMetadataSizeInByte(long chunkMetadataSizeInByte)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "IoTDBConfigDynamicAdapter", "signature": "IoTDBConfigDynamicAdapter getInstance()", "full_signature": "public static IoTDBConfigDynamicAdapter getInstance()", "class_method_signature": "IoTDBConfigDynamicAdapter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "tryToAdaptParameters", "parameters": "()", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean tryToAdaptParameters()", "full_signature": "@Override public synchronized boolean tryToAdaptParameters()", "class_method_signature": "IoTDBConfigDynamicAdapter.tryToAdaptParameters()", "testcase": false, "constructor": false}, {"identifier": "calcMemTableSize", "parameters": "(double ratio)", "modifiers": "private", "return": "long", "signature": "long calcMemTableSize(double ratio)", "full_signature": "private long calcMemTableSize(double ratio)", "class_method_signature": "IoTDBConfigDynamicAdapter.calcMemTableSize(double ratio)", "testcase": false, "constructor": false}, {"identifier": "calcTsFileSizeThreshold", "parameters": "(long memTableSize, double ratio)", "modifiers": "private", "return": "long", "signature": "long calcTsFileSizeThreshold(long memTableSize, double ratio)", "full_signature": "private long calcTsFileSizeThreshold(long memTableSize, double ratio)", "class_method_signature": "IoTDBConfigDynamicAdapter.calcTsFileSizeThreshold(long memTableSize, double ratio)", "testcase": false, "constructor": false}, {"identifier": "getMemTableSizeFloorThreshold", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getMemTableSizeFloorThreshold()", "full_signature": "private long getMemTableSizeFloorThreshold()", "class_method_signature": "IoTDBConfigDynamicAdapter.getMemTableSizeFloorThreshold()", "testcase": false, "constructor": false}, {"identifier": "addOrDeleteStorageGroup", "parameters": "(int diff)", "modifiers": "@Override public", "return": "void", "signature": "void addOrDeleteStorageGroup(int diff)", "full_signature": "@Override public void addOrDeleteStorageGroup(int diff)", "class_method_signature": "IoTDBConfigDynamicAdapter.addOrDeleteStorageGroup(int diff)", "testcase": false, "constructor": false}, {"identifier": "addOrDeleteTimeSeries", "parameters": "(int diff)", "modifiers": "@Override public", "return": "void", "signature": "void addOrDeleteTimeSeries(int diff)", "full_signature": "@Override public void addOrDeleteTimeSeries(int diff)", "class_method_signature": "IoTDBConfigDynamicAdapter.addOrDeleteTimeSeries(int diff)", "testcase": false, "constructor": false}, {"identifier": "setInitialized", "parameters": "(boolean initialized)", "modifiers": "public", "return": "void", "signature": "void setInitialized(boolean initialized)", "full_signature": "public void setInitialized(boolean initialized)", "class_method_signature": "IoTDBConfigDynamicAdapter.setInitialized(boolean initialized)", "testcase": false, "constructor": false}, {"identifier": "getCurrentMemTableSize", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getCurrentMemTableSize()", "full_signature": " long getCurrentMemTableSize()", "class_method_signature": "IoTDBConfigDynamicAdapter.getCurrentMemTableSize()", "testcase": false, "constructor": false}, {"identifier": "getTotalTimeseries", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalTimeseries()", "full_signature": "public int getTotalTimeseries()", "class_method_signature": "IoTDBConfigDynamicAdapter.getTotalTimeseries()", "testcase": false, "constructor": false}, {"identifier": "getTotalStorageGroup", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalStorageGroup()", "full_signature": "public int getTotalStorageGroup()", "class_method_signature": "IoTDBConfigDynamicAdapter.getTotalStorageGroup()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "IoTDBConfigDynamicAdapter.reset()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/conf/adapter/IoTDBConfigDynamicAdapter.java"}, "focal_method": {"identifier": "addOrDeleteTimeSeries", "parameters": "(int diff)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void addOrDeleteTimeSeries(int diff) throws ConfigAdjusterException {\n    if (!CONFIG.isEnableParameterAdapter()) {\n      return;\n    }\n    totalTimeseries += diff;\n    staticMemory += diff * TIMESERIES_METADATA_SIZE_IN_BYTE;\n    if (!tryToAdaptParameters()) {\n      totalTimeseries -= diff;\n      staticMemory -= diff * TIMESERIES_METADATA_SIZE_IN_BYTE;\n      throw new ConfigAdjusterException(ADD_TIMESERIES);\n    }\n  }", "signature": "void addOrDeleteTimeSeries(int diff)", "full_signature": "@Override public void addOrDeleteTimeSeries(int diff)", "class_method_signature": "IoTDBConfigDynamicAdapter.addOrDeleteTimeSeries(int diff)", "testcase": false, "constructor": false, "invocations": ["isEnableParameterAdapter", "tryToAdaptParameters"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}