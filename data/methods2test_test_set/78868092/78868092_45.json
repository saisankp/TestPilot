{"test_class": {"identifier": "SubscriptionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final SubscriptionService subscriptionService = new SubscriptionService();", "modifier": "@InjectMocks\n    private final", "type": "SubscriptionService", "declarator": "subscriptionService = new SubscriptionService()", "var_name": "subscriptionService"}, {"original_string": "@Mock\n    private SeyrenRepository seyrenRepository;", "modifier": "@Mock\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "file": "services/src/test/java/com/vsct/supervision/notification/service/SubscriptionServiceTest.java"}, "test_case": {"identifier": "updateSubscriptionFailIfNoDayToSendAlert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateSubscriptionFailIfNoDayToSendAlert() throws Exception {\n        Subscription subscription = TestUtils.getDefaultSubscription();\n\n        subscription.setMo(false);\n        subscription.setTu(false);\n        subscription.setWe(false);\n        subscription.setTh(false);\n        subscription.setFr(false);\n        subscription.setSa(false);\n        subscription.setSu(false);\n\n        try {\n            subscriptionService.updateSubscription(subscription, TestUtils.DEFAULT_ALARM_ID);\n            fail(\"Update a subscription set no alerting day should throw an exception\");\n        } catch (CerebroException ce) {\n            assertEquals(ErrorCode.SUBSCRIPTION_INVALID, ce.getErrorCode());\n        }\n    }", "signature": "void updateSubscriptionFailIfNoDayToSendAlert()", "full_signature": "@Test public void updateSubscriptionFailIfNoDayToSendAlert()", "class_method_signature": "SubscriptionServiceTest.updateSubscriptionFailIfNoDayToSendAlert()", "testcase": true, "constructor": false, "invocations": ["getDefaultSubscription", "setMo", "setTu", "setWe", "setTh", "setFr", "setSa", "setSu", "updateSubscription", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "SubscriptionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SubscriptionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SubscriptionService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SeyrenRepository seyrenRepository;", "modifier": "@Autowired\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "methods": [{"identifier": "getSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription getSubscription(String alarmId, String subscriptionId)", "full_signature": "public Subscription getSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.getSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "addSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void addSubscription(Subscription subscription, String alarmId)", "full_signature": "public void addSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.addSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "searchSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription searchSubscription(Subscription subscription, String alarmId)", "full_signature": "public Subscription searchSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.searchSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "updateSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void updateSubscription(Subscription subscription, String alarmId)", "full_signature": "public void updateSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.updateSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "validateSubscription", "parameters": "(Subscription subscription)", "modifiers": "private", "return": "void", "signature": "void validateSubscription(Subscription subscription)", "full_signature": "private void validateSubscription(Subscription subscription)", "class_method_signature": "SubscriptionService.validateSubscription(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "validateUpdateSubscription", "parameters": "(Subscription current, Subscription updated)", "modifiers": "private", "return": "void", "signature": "void validateUpdateSubscription(Subscription current, Subscription updated)", "full_signature": "private void validateUpdateSubscription(Subscription current, Subscription updated)", "class_method_signature": "SubscriptionService.validateUpdateSubscription(Subscription current, Subscription updated)", "testcase": false, "constructor": false}, {"identifier": "isLastSubscriptionActiveToDisable", "parameters": "(Subscription current, Subscription updated, Alarm alarm)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "full_signature": "private boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "class_method_signature": "SubscriptionService.isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "deleteSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "SubscriptionService.DeletedSubscriptionStatus", "signature": "SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "full_signature": "public SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.deleteSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/service/SubscriptionService.java"}, "focal_method": {"identifier": "updateSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "body": "public void updateSubscription(Subscription subscription, String alarmId) {\n        Alarm alarm = seyrenRepository.getAlarm(alarmId);\n        Optional<Subscription> actualSub = alarm.getSubscriptions().stream().filter(s -> s.getId().equals(subscription.getId())).findAny();\n        if (!actualSub.isPresent()) {\n            throw new CerebroException(ErrorCode.SUBSCRIPTION_UNKNOWN,\n                \"The subscription passed as parameter does not exist in the Alarm \" + alarmId);\n        }\n\n        validateUpdateSubscription(actualSub.get(), subscription);\n\n        if (alarm.isEnabled()) {\n            if (isLastSubscriptionActiveToDisable(actualSub.get(), subscription, alarm)) {\n                alarm.setEnabled(false);\n                seyrenRepository.updateAlarm(alarm);\n            }\n        } else if (!actualSub.get().isEnabled() && subscription.isEnabled()) {\n            alarm.setEnabled(true);\n            seyrenRepository.updateAlarm(alarm);\n        }\n\n        seyrenRepository.updateSubscription(subscription, alarmId);\n    }", "signature": "void updateSubscription(Subscription subscription, String alarmId)", "full_signature": "public void updateSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.updateSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false, "invocations": ["getAlarm", "findAny", "filter", "stream", "getSubscriptions", "equals", "getId", "getId", "isPresent", "validateUpdateSubscription", "get", "isEnabled", "isLastSubscriptionActiveToDisable", "get", "setEnabled", "updateAlarm", "isEnabled", "get", "isEnabled", "setEnabled", "updateAlarm", "updateSubscription"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}