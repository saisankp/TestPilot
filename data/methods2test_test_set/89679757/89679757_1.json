{"test_class": {"identifier": "MultiChainAddressGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/digitalvotingpass/utilities/MultiChainAddressGeneratorTest.java"}, "test_case": {"identifier": "testGetAddress2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAddress2() throws Exception {\n        String[] version = new String[]{ \"00\", \"8c\", \"b5\", \"d6\"};\n        String addresschecksum = \"5afce7b2\";\n\n        MultiChainAddressGenerator generator = new MultiChainAddressGenerator();\n        String pubKey = \"6c284c42d95e4933513d663a8a2e4cf0e41bcb7f8397bd065e6e3f2d4176e95f66c317bf612bec0207f3954783fd361a71118eea680655607953a1aceddf045c7133e99f35a9391c5c28d5d82c12b148\";\n        byte[] keybytes = Util.hexStringToByteArray(pubKey);\n        String address = generator.getPublicAddress(version, addresschecksum, keybytes);\n        assertEquals(address, \"1BNgsh92p1wFmKiQVPs9fNyriG72wygs9esHV8\");\n    }", "signature": "void testGetAddress2()", "full_signature": "@Test public void testGetAddress2()", "class_method_signature": "MultiChainAddressGeneratorTest.testGetAddress2()", "testcase": true, "constructor": false, "invocations": ["hexStringToByteArray", "getPublicAddress", "assertEquals"]}, "focal_class": {"identifier": "MultiChainAddressGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPublicAddress", "parameters": "(String[] version, String addressChecksum, byte[] pubKey)", "modifiers": "public static", "return": "String", "signature": "String getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "full_signature": "public static String getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "class_method_signature": "MultiChainAddressGenerator.getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "testcase": false, "constructor": false}, {"identifier": "getPublicAddress", "parameters": "(String[] version, String addressChecksum, PublicKey pubKey)", "modifiers": "public static", "return": "String", "signature": "String getPublicAddress(String[] version, String addressChecksum, PublicKey pubKey)", "full_signature": "public static String getPublicAddress(String[] version, String addressChecksum, PublicKey pubKey)", "class_method_signature": "MultiChainAddressGenerator.getPublicAddress(String[] version, String addressChecksum, PublicKey pubKey)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/digitalvotingpass/utilities/MultiChainAddressGenerator.java"}, "focal_method": {"identifier": "getPublicAddress", "parameters": "(String[] version, String addressChecksum, byte[] pubKey)", "modifiers": "public static", "return": "String", "body": "public static String getPublicAddress(String[] version, String addressChecksum, byte[] pubKey) {\n        //Step 3\n        MessageDigest digest;\n        try {\n            digest = MessageDigest.getInstance(\"SHA-256\");\n            digest.reset();\n            byte[] hash = digest.digest(pubKey);\n\n            //Step 4\n            RIPEMD160Digest ripemd = new RIPEMD160Digest();\n            ripemd.update(hash, 0, hash.length);\n            byte[] out = new byte[20];\n            ripemd.doFinal(out, 0);\n            String hashStr = Util.byteArrayToHexString(out);\n\n            //Step 5\n            String step5 = \"\";\n            if (BuildConfig.DEBUG && version.length != 4) throw new AssertionError(\"Version length != 4\");\n            for (int i = 0; i < 4; i++) { //Assumes version.length == 4\n                step5 += version[i] + hashStr.substring((i*10),(i*10)+10);\n            }\n            digest.reset();\n\n            //Step 6\n            byte[] step6 = digest.digest(Util.hexStringToByteArray(step5));\n            digest.reset();\n\n            //Step 7\n            byte[] step7 = digest.digest(step6);\n            digest.reset();\n\n            //Step 8\n            byte[] checksum = new byte[]{ step7[0],step7[1],step7[2],step7[3] };\n\n            //Step 9\n            byte[] byteAddressChecksum = Util.hexStringToByteArray(addressChecksum);\n            byte[] xor = new byte[4];\n            for (int i = 0; i < 4; i++) {\n                int xorvalue = (int)checksum[i] ^ (int)byteAddressChecksum[i];\n                xor[i] = (byte)(0xff & xorvalue);\n            }\n\n            //Step 10\n            String addressbytes = step5 + Util.byteArrayToHexString(xor);\n\n            //Step 11\n            String address = Base58.encode(Util.hexStringToByteArray(addressbytes));\n            return address;\n        } catch (NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n            return null;\n        }\n    }", "signature": "String getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "full_signature": "public static String getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "class_method_signature": "MultiChainAddressGenerator.getPublicAddress(String[] version, String addressChecksum, byte[] pubKey)", "testcase": false, "constructor": false, "invocations": ["getInstance", "reset", "digest", "update", "doFinal", "byteArrayToHexString", "substring", "reset", "digest", "hexStringToByteArray", "reset", "digest", "reset", "hexStringToByteArray", "byteArrayToHexString", "encode", "hexStringToByteArray", "printStackTrace"]}, "repository": {"repo_id": 89679757, "url": "https://github.com/digital-voting-pass/polling-station-app", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 34, "size": 58794, "license": "licensed"}}