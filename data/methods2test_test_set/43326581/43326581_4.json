{"test_class": {"identifier": "ProjectDatabaseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String dbName = DatabaseSettings.COUCH_DB_DATABASE;", "modifier": "private static final", "type": "String", "declarator": "dbName = DatabaseSettings.COUCH_DB_DATABASE", "var_name": "dbName"}, {"original_string": "private static final String attachmentDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS;", "modifier": "private static final", "type": "String", "declarator": "attachmentDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS", "var_name": "attachmentDbName"}, {"original_string": "private static final String attachmentsDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS;", "modifier": "private static final", "type": "String", "declarator": "attachmentsDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS", "var_name": "attachmentsDbName"}, {"original_string": "private static final User user1 = new User().setEmail(\"user1\").setDepartment(\"AB CD EF\");", "modifier": "private static final", "type": "User", "declarator": "user1 = new User().setEmail(\"user1\").setDepartment(\"AB CD EF\")", "var_name": "user1"}, {"original_string": "private static final User user2 = new User().setEmail(\"user2\").setDepartment(\"AB CD FE\");", "modifier": "private static final", "type": "User", "declarator": "user2 = new User().setEmail(\"user2\").setDepartment(\"AB CD FE\")", "var_name": "user2"}, {"original_string": "private static final User user3 = new User().setEmail(\"user3\").setDepartment(\"AB CD EF\");", "modifier": "private static final", "type": "User", "declarator": "user3 = new User().setEmail(\"user3\").setDepartment(\"AB CD EF\")", "var_name": "user3"}, {"original_string": "ProjectModerator moderator = Mockito.mock(ProjectModerator.class);", "modifier": "", "type": "ProjectModerator", "declarator": "moderator = Mockito.mock(ProjectModerator.class)", "var_name": "moderator"}, {"original_string": "ProjectDatabaseHandler handler;", "modifier": "", "type": "ProjectDatabaseHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "ComponentDatabaseHandler componentHandler;", "modifier": "", "type": "ComponentDatabaseHandler", "declarator": "componentHandler", "var_name": "componentHandler"}], "file": "backend/src-common/src/test/java/org/eclipse/sw360/datahandler/db/ProjectDatabaseHandlerTest.java"}, "test_case": {"identifier": "testReleaseIdToProjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReleaseIdToProjects() throws Exception {\n        Project p1 = handler.getProjectById(\"P1\", user1);\n        p1.setLinkedProjects(ImmutableMap.<String, ProjectRelationship>builder().put(\"P2\", ProjectRelationship.CONTAINED).build());\n        handler.updateProject(p1, user1);\n        Project p2 = handler.getProjectById(\"P2\", user2);\n\n        SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects = handler.releaseIdToProjects(p1, user1);\n\n        Set<String> releaseIds = releaseIdToProjects.keySet();\n\n        assertThat(releaseIds, containsInAnyOrder(\"r1\", \"r2\",\"r3\",\"r4\",\"r5\",\"r6\"));\n        assertThat(releaseIdToProjects.get(\"r1\"), containsInAnyOrder(createTuple(p1),createTuple(p2)));\n        assertThat(releaseIdToProjects.get(\"r2\"), containsInAnyOrder(createTuple(p1),createTuple(p2)));\n        assertThat(releaseIdToProjects.get(\"r3\"), containsInAnyOrder(createTuple(p1),createTuple(p2)));\n        assertThat(releaseIdToProjects.get(\"r4\"), containsInAnyOrder(createTuple(p1)));\n        assertThat(releaseIdToProjects.get(\"r5\"), containsInAnyOrder(createTuple(p1)));\n        assertThat(releaseIdToProjects.get(\"r6\"), containsInAnyOrder(createTuple(p1)));\n\n    }", "signature": "void testReleaseIdToProjects()", "full_signature": "@Test public void testReleaseIdToProjects()", "class_method_signature": "ProjectDatabaseHandlerTest.testReleaseIdToProjects()", "testcase": true, "constructor": false, "invocations": ["getProjectById", "setLinkedProjects", "build", "put", "builder", "updateProject", "getProjectById", "releaseIdToProjects", "keySet", "assertThat", "containsInAnyOrder", "assertThat", "get", "containsInAnyOrder", "createTuple", "createTuple", "assertThat", "get", "containsInAnyOrder", "createTuple", "createTuple", "assertThat", "get", "containsInAnyOrder", "createTuple", "createTuple", "assertThat", "get", "containsInAnyOrder", "createTuple", "assertThat", "get", "containsInAnyOrder", "createTuple", "assertThat", "get", "containsInAnyOrder", "createTuple"]}, "focal_class": {"identifier": "ProjectDatabaseHandler", "superclass": "extends AttachmentAwareDatabaseHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ProjectDatabaseHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ProjectDatabaseHandler.class)", "var_name": "log"}, {"original_string": "private static final int DELETION_SANITY_CHECK_THRESHOLD = 5;", "modifier": "private static final", "type": "int", "declarator": "DELETION_SANITY_CHECK_THRESHOLD = 5", "var_name": "DELETION_SANITY_CHECK_THRESHOLD"}, {"original_string": "private static final String DUMMY_NEW_PROJECT_ID = \"newproject\";", "modifier": "private static final", "type": "String", "declarator": "DUMMY_NEW_PROJECT_ID = \"newproject\"", "var_name": "DUMMY_NEW_PROJECT_ID"}, {"original_string": "private final ProjectRepository repository;", "modifier": "private final", "type": "ProjectRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final ProjectVulnerabilityRatingRepository pvrRepository;", "modifier": "private final", "type": "ProjectVulnerabilityRatingRepository", "declarator": "pvrRepository", "var_name": "pvrRepository"}, {"original_string": "private final ProjectModerator moderator;", "modifier": "private final", "type": "ProjectModerator", "declarator": "moderator", "var_name": "moderator"}, {"original_string": "private final AttachmentConnector attachmentConnector;", "modifier": "private final", "type": "AttachmentConnector", "declarator": "attachmentConnector", "var_name": "attachmentConnector"}, {"original_string": "private final ComponentDatabaseHandler componentDatabaseHandler;", "modifier": "private final", "type": "ComponentDatabaseHandler", "declarator": "componentDatabaseHandler", "var_name": "componentDatabaseHandler"}, {"original_string": "private final MailUtil mailUtil = new MailUtil();", "modifier": "private final", "type": "MailUtil", "declarator": "mailUtil = new MailUtil()", "var_name": "mailUtil"}, {"original_string": "private static final java.time.Duration ALL_PROJECTS_ID_MAP_CACHE_LIFETIME = java.time.Duration.ofMinutes(2);", "modifier": "private static final", "type": "java.time.Duration", "declarator": "ALL_PROJECTS_ID_MAP_CACHE_LIFETIME = java.time.Duration.ofMinutes(2)", "var_name": "ALL_PROJECTS_ID_MAP_CACHE_LIFETIME"}, {"original_string": "private Map<String, Project> cachedAllProjectsIdMap;", "modifier": "private", "type": "Map<String, Project>", "declarator": "cachedAllProjectsIdMap", "var_name": "cachedAllProjectsIdMap"}, {"original_string": "private Instant cachedAllProjectsIdMapLoadingInstant;", "modifier": "private", "type": "Instant", "declarator": "cachedAllProjectsIdMapLoadingInstant", "var_name": "cachedAllProjectsIdMapLoadingInstant"}], "methods": [{"identifier": "ProjectDatabaseHandler", "parameters": "(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName)", "modifiers": "public", "return": "", "signature": " ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName)", "full_signature": "public  ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName)", "class_method_signature": "ProjectDatabaseHandler.ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName)", "testcase": false, "constructor": true}, {"identifier": "ProjectDatabaseHandler", "parameters": "(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName, ProjectModerator moderator, ComponentDatabaseHandler componentDatabaseHandler)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName, ProjectModerator moderator, ComponentDatabaseHandler componentDatabaseHandler)", "full_signature": "@VisibleForTesting public  ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName, ProjectModerator moderator, ComponentDatabaseHandler componentDatabaseHandler)", "class_method_signature": "ProjectDatabaseHandler.ProjectDatabaseHandler(Supplier<HttpClient> httpClient, String dbName, String attachmentDbName, ProjectModerator moderator, ComponentDatabaseHandler componentDatabaseHandler)", "testcase": false, "constructor": true}, {"identifier": "getMyProjectsSummary", "parameters": "(String user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getMyProjectsSummary(String user)", "full_signature": "public List<Project> getMyProjectsSummary(String user)", "class_method_signature": "ProjectDatabaseHandler.getMyProjectsSummary(String user)", "testcase": false, "constructor": false}, {"identifier": "getBUProjectsSummary", "parameters": "(String organisation)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getBUProjectsSummary(String organisation)", "full_signature": "public List<Project> getBUProjectsSummary(String organisation)", "class_method_signature": "ProjectDatabaseHandler.getBUProjectsSummary(String organisation)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleProjectsSummary", "parameters": "(User user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getAccessibleProjectsSummary(User user)", "full_signature": "public List<Project> getAccessibleProjectsSummary(User user)", "class_method_signature": "ProjectDatabaseHandler.getAccessibleProjectsSummary(User user)", "testcase": false, "constructor": false}, {"identifier": "searchByName", "parameters": "(String name, User user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> searchByName(String name, User user)", "full_signature": "public List<Project> searchByName(String name, User user)", "class_method_signature": "ProjectDatabaseHandler.searchByName(String name, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectById", "parameters": "(String id, User user)", "modifiers": "public", "return": "Project", "signature": "Project getProjectById(String id, User user)", "full_signature": "public Project getProjectById(String id, User user)", "class_method_signature": "ProjectDatabaseHandler.getProjectById(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "addProject", "parameters": "(Project project, User user)", "modifiers": "public", "return": "AddDocumentRequestSummary", "signature": "AddDocumentRequestSummary addProject(Project project, User user)", "full_signature": "public AddDocumentRequestSummary addProject(Project project, User user)", "class_method_signature": "ProjectDatabaseHandler.addProject(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "isDuplicate", "parameters": "(Project project)", "modifiers": "private", "return": "boolean", "signature": "boolean isDuplicate(Project project)", "full_signature": "private boolean isDuplicate(Project project)", "class_method_signature": "ProjectDatabaseHandler.isDuplicate(Project project)", "testcase": false, "constructor": false}, {"identifier": "updateProject", "parameters": "(Project project, User user)", "modifiers": "public", "return": "RequestStatus", "signature": "RequestStatus updateProject(Project project, User user)", "full_signature": "public RequestStatus updateProject(Project project, User user)", "class_method_signature": "ProjectDatabaseHandler.updateProject(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "changePassesSanityCheck", "parameters": "(Project updated, Project current)", "modifiers": "private", "return": "boolean", "signature": "boolean changePassesSanityCheck(Project updated, Project current)", "full_signature": "private boolean changePassesSanityCheck(Project updated, Project current)", "class_method_signature": "ProjectDatabaseHandler.changePassesSanityCheck(Project updated, Project current)", "testcase": false, "constructor": false}, {"identifier": "prepareProject", "parameters": "(Project project)", "modifiers": "private", "return": "void", "signature": "void prepareProject(Project project)", "full_signature": "private void prepareProject(Project project)", "class_method_signature": "ProjectDatabaseHandler.prepareProject(Project project)", "testcase": false, "constructor": false}, {"identifier": "updateProjectFromAdditionsAndDeletions", "parameters": "(Project projectAdditions, Project projectDeletions, User user)", "modifiers": "public", "return": "RequestStatus", "signature": "RequestStatus updateProjectFromAdditionsAndDeletions(Project projectAdditions, Project projectDeletions, User user)", "full_signature": "public RequestStatus updateProjectFromAdditionsAndDeletions(Project projectAdditions, Project projectDeletions, User user)", "class_method_signature": "ProjectDatabaseHandler.updateProjectFromAdditionsAndDeletions(Project projectAdditions, Project projectDeletions, User user)", "testcase": false, "constructor": false}, {"identifier": "copyImmutableFields", "parameters": "(Project destination, Project source)", "modifiers": "private", "return": "void", "signature": "void copyImmutableFields(Project destination, Project source)", "full_signature": "private void copyImmutableFields(Project destination, Project source)", "class_method_signature": "ProjectDatabaseHandler.copyImmutableFields(Project destination, Project source)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(String id, User user)", "modifiers": "public", "return": "RequestStatus", "signature": "RequestStatus deleteProject(String id, User user)", "full_signature": "public RequestStatus deleteProject(String id, User user)", "class_method_signature": "ProjectDatabaseHandler.deleteProject(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "checkIfInUse", "parameters": "(String projectId)", "modifiers": "public", "return": "boolean", "signature": "boolean checkIfInUse(String projectId)", "full_signature": "public boolean checkIfInUse(String projectId)", "class_method_signature": "ProjectDatabaseHandler.checkIfInUse(String projectId)", "testcase": false, "constructor": false}, {"identifier": "removeProjectAndCleanUp", "parameters": "(Project project)", "modifiers": "private", "return": "void", "signature": "void removeProjectAndCleanUp(Project project)", "full_signature": "private void removeProjectAndCleanUp(Project project)", "class_method_signature": "ProjectDatabaseHandler.removeProjectAndCleanUp(Project project)", "testcase": false, "constructor": false}, {"identifier": "getLinkedProjects", "parameters": "(Project project, boolean deep, User user)", "modifiers": "public", "return": "List<ProjectLink>", "signature": "List<ProjectLink> getLinkedProjects(Project project, boolean deep, User user)", "full_signature": "public List<ProjectLink> getLinkedProjects(Project project, boolean deep, User user)", "class_method_signature": "ProjectDatabaseHandler.getLinkedProjects(Project project, boolean deep, User user)", "testcase": false, "constructor": false}, {"identifier": "preloadLinkedProjects", "parameters": "(Project project, User user)", "modifiers": "private", "return": "Map<String, Project>", "signature": "Map<String, Project> preloadLinkedProjects(Project project, User user)", "full_signature": "private Map<String, Project> preloadLinkedProjects(Project project, User user)", "class_method_signature": "ProjectDatabaseHandler.preloadLinkedProjects(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "preloadLinkedReleases", "parameters": "(Map<String, Project> projectMap)", "modifiers": "private", "return": "Map<String, Release>", "signature": "Map<String, Release> preloadLinkedReleases(Map<String, Project> projectMap)", "full_signature": "private Map<String, Release> preloadLinkedReleases(Map<String, Project> projectMap)", "class_method_signature": "ProjectDatabaseHandler.preloadLinkedReleases(Map<String, Project> projectMap)", "testcase": false, "constructor": false}, {"identifier": "getLinkedProjects", "parameters": "(Map<String, ProjectRelationship> relations)", "modifiers": "public", "return": "List<ProjectLink>", "signature": "List<ProjectLink> getLinkedProjects(Map<String, ProjectRelationship> relations)", "full_signature": "public List<ProjectLink> getLinkedProjects(Map<String, ProjectRelationship> relations)", "class_method_signature": "ProjectDatabaseHandler.getLinkedProjects(Map<String, ProjectRelationship> relations)", "testcase": false, "constructor": false}, {"identifier": "iterateProjectRelationShips", "parameters": "(Map<String, ProjectRelationship> relations, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "modifiers": "private", "return": "List<ProjectLink>", "signature": "List<ProjectLink> iterateProjectRelationShips(Map<String, ProjectRelationship> relations, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "full_signature": "private List<ProjectLink> iterateProjectRelationShips(Map<String, ProjectRelationship> relations, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "class_method_signature": "ProjectDatabaseHandler.iterateProjectRelationShips(Map<String, ProjectRelationship> relations, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "testcase": false, "constructor": false}, {"identifier": "createProjectLink", "parameters": "(String id, ProjectRelationship relationship, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "modifiers": "private", "return": "Optional<ProjectLink>", "signature": "Optional<ProjectLink> createProjectLink(String id, ProjectRelationship relationship, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "full_signature": "private Optional<ProjectLink> createProjectLink(String id, ProjectRelationship relationship, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "class_method_signature": "ProjectDatabaseHandler.createProjectLink(String id, ProjectRelationship relationship, String parentNodeId, Deque<String> visitedIds, Map<String, Project> projectMap, Map<String, Release> releaseMap, int maxDepth)", "testcase": false, "constructor": false}, {"identifier": "fillMainlineStates", "parameters": "(List<ReleaseLink> linkedReleases, Map<String, ProjectReleaseRelationship> releaseIdToUsage)", "modifiers": "private", "return": "void", "signature": "void fillMainlineStates(List<ReleaseLink> linkedReleases, Map<String, ProjectReleaseRelationship> releaseIdToUsage)", "full_signature": "private void fillMainlineStates(List<ReleaseLink> linkedReleases, Map<String, ProjectReleaseRelationship> releaseIdToUsage)", "class_method_signature": "ProjectDatabaseHandler.fillMainlineStates(List<ReleaseLink> linkedReleases, Map<String, ProjectReleaseRelationship> releaseIdToUsage)", "testcase": false, "constructor": false}, {"identifier": "generateNodeId", "parameters": "(String id)", "modifiers": "private", "return": "String", "signature": "String generateNodeId(String id)", "full_signature": "private String generateNodeId(String id)", "class_method_signature": "ProjectDatabaseHandler.generateNodeId(String id)", "testcase": false, "constructor": false}, {"identifier": "searchByReleaseId", "parameters": "(String id, User user)", "modifiers": "public", "return": "Set<Project>", "signature": "Set<Project> searchByReleaseId(String id, User user)", "full_signature": "public Set<Project> searchByReleaseId(String id, User user)", "class_method_signature": "ProjectDatabaseHandler.searchByReleaseId(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "searchByReleaseId", "parameters": "(Set<String> ids, User user)", "modifiers": "public", "return": "Set<Project>", "signature": "Set<Project> searchByReleaseId(Set<String> ids, User user)", "full_signature": "public Set<Project> searchByReleaseId(Set<String> ids, User user)", "class_method_signature": "ProjectDatabaseHandler.searchByReleaseId(Set<String> ids, User user)", "testcase": false, "constructor": false}, {"identifier": "searchLinkingProjects", "parameters": "(String id, User user)", "modifiers": "public", "return": "Set<Project>", "signature": "Set<Project> searchLinkingProjects(String id, User user)", "full_signature": "public Set<Project> searchLinkingProjects(String id, User user)", "class_method_signature": "ProjectDatabaseHandler.searchLinkingProjects(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectForEdit", "parameters": "(String id, User user)", "modifiers": "public", "return": "Project", "signature": "Project getProjectForEdit(String id, User user)", "full_signature": "public Project getProjectForEdit(String id, User user)", "class_method_signature": "ProjectDatabaseHandler.getProjectForEdit(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectsById", "parameters": "(List<String> id, User user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getProjectsById(List<String> id, User user)", "full_signature": "public List<Project> getProjectsById(List<String> id, User user)", "class_method_signature": "ProjectDatabaseHandler.getProjectsById(List<String> id, User user)", "testcase": false, "constructor": false}, {"identifier": "getCountByReleaseIds", "parameters": "(Set<String> ids)", "modifiers": "public", "return": "int", "signature": "int getCountByReleaseIds(Set<String> ids)", "full_signature": "public int getCountByReleaseIds(Set<String> ids)", "class_method_signature": "ProjectDatabaseHandler.getCountByReleaseIds(Set<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getCountByProjectId", "parameters": "(String id)", "modifiers": "public", "return": "int", "signature": "int getCountByProjectId(String id)", "full_signature": "public int getCountByProjectId(String id)", "class_method_signature": "ProjectDatabaseHandler.getCountByProjectId(String id)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleProjects", "parameters": "(User user)", "modifiers": "public", "return": "Set<Project>", "signature": "Set<Project> getAccessibleProjects(User user)", "full_signature": "public Set<Project> getAccessibleProjects(User user)", "class_method_signature": "ProjectDatabaseHandler.getAccessibleProjects(User user)", "testcase": false, "constructor": false}, {"identifier": "getDuplicateProjects", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getDuplicateProjects()", "full_signature": "public Map<String, List<String>> getDuplicateProjects()", "class_method_signature": "ProjectDatabaseHandler.getDuplicateProjects()", "testcase": false, "constructor": false}, {"identifier": "getProjectVulnerabilityRatingByProjectId", "parameters": "(String projectId)", "modifiers": "public", "return": "List<ProjectVulnerabilityRating>", "signature": "List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId)", "full_signature": "public List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId)", "class_method_signature": "ProjectDatabaseHandler.getProjectVulnerabilityRatingByProjectId(String projectId)", "testcase": false, "constructor": false}, {"identifier": "updateProjectVulnerabilityRating", "parameters": "(ProjectVulnerabilityRating link)", "modifiers": "public", "return": "RequestStatus", "signature": "RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating link)", "full_signature": "public RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating link)", "class_method_signature": "ProjectDatabaseHandler.updateProjectVulnerabilityRating(ProjectVulnerabilityRating link)", "testcase": false, "constructor": false}, {"identifier": "fillClearingStateSummary", "parameters": "(List<Project> projects, User user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> fillClearingStateSummary(List<Project> projects, User user)", "full_signature": "public List<Project> fillClearingStateSummary(List<Project> projects, User user)", "class_method_signature": "ProjectDatabaseHandler.fillClearingStateSummary(List<Project> projects, User user)", "testcase": false, "constructor": false}, {"identifier": "getReleaseClearingStatuses", "parameters": "(String projectId, User user)", "modifiers": "public", "return": "List<ReleaseClearingStatusData>", "signature": "List<ReleaseClearingStatusData> getReleaseClearingStatuses(String projectId, User user)", "full_signature": "public List<ReleaseClearingStatusData> getReleaseClearingStatuses(String projectId, User user)", "class_method_signature": "ProjectDatabaseHandler.getReleaseClearingStatuses(String projectId, User user)", "testcase": false, "constructor": false}, {"identifier": "releaseIdToProjects", "parameters": "(Project project, User user)", "modifiers": "", "return": "SetMultimap<String, ProjectWithReleaseRelationTuple>", "signature": "SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user)", "full_signature": " SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user)", "class_method_signature": "ProjectDatabaseHandler.releaseIdToProjects(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "releaseIdToProjects", "parameters": "(Project project, User user, Set<String> visitedProjectIds, Multimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects)", "modifiers": "private", "return": "void", "signature": "void releaseIdToProjects(Project project, User user, Set<String> visitedProjectIds, Multimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects)", "full_signature": "private void releaseIdToProjects(Project project, User user, Set<String> visitedProjectIds, Multimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects)", "class_method_signature": "ProjectDatabaseHandler.releaseIdToProjects(Project project, User user, Set<String> visitedProjectIds, Multimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects)", "testcase": false, "constructor": false}, {"identifier": "nothingTodo", "parameters": "(Project project, Set<String> visitedProjectIds)", "modifiers": "private", "return": "boolean", "signature": "boolean nothingTodo(Project project, Set<String> visitedProjectIds)", "full_signature": "private boolean nothingTodo(Project project, Set<String> visitedProjectIds)", "class_method_signature": "ProjectDatabaseHandler.nothingTodo(Project project, Set<String> visitedProjectIds)", "testcase": false, "constructor": false}, {"identifier": "alreadyBeenHere", "parameters": "(String id, Set<String> visitedProjectIds)", "modifiers": "private", "return": "boolean", "signature": "boolean alreadyBeenHere(String id, Set<String> visitedProjectIds)", "full_signature": "private boolean alreadyBeenHere(String id, Set<String> visitedProjectIds)", "class_method_signature": "ProjectDatabaseHandler.alreadyBeenHere(String id, Set<String> visitedProjectIds)", "testcase": false, "constructor": false}, {"identifier": "fillClearingStateSummaryIncludingSubprojects", "parameters": "(List<Project> projects, User user)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "full_signature": "public List<Project> fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "class_method_signature": "ProjectDatabaseHandler.fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "testcase": false, "constructor": false}, {"identifier": "getRefreshedAllProjectsIdMap", "parameters": "()", "modifiers": "private synchronized", "return": "Map<String, Project>", "signature": "Map<String, Project> getRefreshedAllProjectsIdMap()", "full_signature": "private synchronized Map<String, Project> getRefreshedAllProjectsIdMap()", "class_method_signature": "ProjectDatabaseHandler.getRefreshedAllProjectsIdMap()", "testcase": false, "constructor": false}, {"identifier": "getReleaseIdsOfProjectTree", "parameters": "(Project project, Set<String> visitedProjectIds,\n            Map<String, Project> allProjectsIdMap, User user, List<RequestedAction> permissionsFilter)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getReleaseIdsOfProjectTree(Project project, Set<String> visitedProjectIds,\n            Map<String, Project> allProjectsIdMap, User user, List<RequestedAction> permissionsFilter)", "full_signature": "private Set<String> getReleaseIdsOfProjectTree(Project project, Set<String> visitedProjectIds,\n            Map<String, Project> allProjectsIdMap, User user, List<RequestedAction> permissionsFilter)", "class_method_signature": "ProjectDatabaseHandler.getReleaseIdsOfProjectTree(Project project, Set<String> visitedProjectIds,\n            Map<String, Project> allProjectsIdMap, User user, List<RequestedAction> permissionsFilter)", "testcase": false, "constructor": false}, {"identifier": "sendMailNotificationsForNewProject", "parameters": "(Project project, String user)", "modifiers": "private", "return": "void", "signature": "void sendMailNotificationsForNewProject(Project project, String user)", "full_signature": "private void sendMailNotificationsForNewProject(Project project, String user)", "class_method_signature": "ProjectDatabaseHandler.sendMailNotificationsForNewProject(Project project, String user)", "testcase": false, "constructor": false}, {"identifier": "sendMailNotificationsForProjectUpdate", "parameters": "(Project project, String user)", "modifiers": "private", "return": "void", "signature": "void sendMailNotificationsForProjectUpdate(Project project, String user)", "full_signature": "private void sendMailNotificationsForProjectUpdate(Project project, String user)", "class_method_signature": "ProjectDatabaseHandler.sendMailNotificationsForProjectUpdate(Project project, String user)", "testcase": false, "constructor": false}], "file": "backend/src-common/src/main/java/org/eclipse/sw360/datahandler/db/ProjectDatabaseHandler.java"}, "focal_method": {"identifier": "releaseIdToProjects", "parameters": "(Project project, User user)", "modifiers": "", "return": "SetMultimap<String, ProjectWithReleaseRelationTuple>", "body": "SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user) throws SW360Exception {\n        Set<String> visitedProjectIds = new HashSet<>();\n        SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects = HashMultimap.create();\n\n        releaseIdToProjects(project, user, visitedProjectIds, releaseIdToProjects);\n        return releaseIdToProjects;\n    }", "signature": "SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user)", "full_signature": " SetMultimap<String, ProjectWithReleaseRelationTuple> releaseIdToProjects(Project project, User user)", "class_method_signature": "ProjectDatabaseHandler.releaseIdToProjects(Project project, User user)", "testcase": false, "constructor": false, "invocations": ["create", "releaseIdToProjects"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}