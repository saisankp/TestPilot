{"test_class": {"identifier": "DatabaseBackupListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DatabaseBackupListener<Object> mListener;", "modifier": "", "type": "DatabaseBackupListener<Object>", "declarator": "mListener", "var_name": "mListener"}, {"original_string": "@Mock\n    DriveDatabaseManager mDriveDatabaseManager;", "modifier": "@Mock", "type": "DriveDatabaseManager", "declarator": "mDriveDatabaseManager", "var_name": "mDriveDatabaseManager"}], "file": "app/src/test/java/co/smartreceipts/android/sync/drive/listeners/DatabaseBackupListenerTest.java"}, "test_case": {"identifier": "onSyncUpdateSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onSyncUpdateSuccess() {\n        mListener.onUpdateSuccess(new Object(), new Object(), new DatabaseOperationMetadata(OperationFamilyType.Sync));\n        verify(mDriveDatabaseManager, never()).syncDatabase();\n    }", "signature": "void onSyncUpdateSuccess()", "full_signature": "@Test public void onSyncUpdateSuccess()", "class_method_signature": "DatabaseBackupListenerTest.onSyncUpdateSuccess()", "testcase": true, "constructor": false, "invocations": ["onUpdateSuccess", "syncDatabase", "verify", "never"]}, "focal_class": {"identifier": "DatabaseBackupListener", "superclass": "extends StubTableEventsListener<ModelType>", "interfaces": "", "fields": [{"original_string": "protected final DriveDatabaseManager mDriveDatabaseManager;", "modifier": "protected final", "type": "DriveDatabaseManager", "declarator": "mDriveDatabaseManager", "var_name": "mDriveDatabaseManager"}], "methods": [{"identifier": "DatabaseBackupListener", "parameters": "(@NonNull DriveDatabaseManager driveDatabaseManager)", "modifiers": "public", "return": "", "signature": " DatabaseBackupListener(@NonNull DriveDatabaseManager driveDatabaseManager)", "full_signature": "public  DatabaseBackupListener(@NonNull DriveDatabaseManager driveDatabaseManager)", "class_method_signature": "DatabaseBackupListener.DatabaseBackupListener(@NonNull DriveDatabaseManager driveDatabaseManager)", "testcase": false, "constructor": true}, {"identifier": "onInsertSuccess", "parameters": "(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override public", "return": "void", "signature": "void onInsertSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override public void onInsertSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DatabaseBackupListener.onInsertSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "onUpdateSuccess", "parameters": "(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override public", "return": "void", "signature": "void onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override public void onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DatabaseBackupListener.onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "onDeleteSuccess", "parameters": "(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override public", "return": "void", "signature": "void onDeleteSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override public void onDeleteSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DatabaseBackupListener.onDeleteSuccess(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/sync/drive/listeners/DatabaseBackupListener.java"}, "focal_method": {"identifier": "onUpdateSuccess", "parameters": "(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        if (databaseOperationMetadata.getOperationFamilyType() != OperationFamilyType.Sync) {\n            mDriveDatabaseManager.syncDatabase();\n        }\n    }", "signature": "void onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@Override public void onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "DatabaseBackupListener.onUpdateSuccess(@NonNull ModelType oldT, @NonNull ModelType newT, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["getOperationFamilyType", "syncDatabase"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}