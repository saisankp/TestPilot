{"test_class": {"identifier": "TestDoublyLinkedList", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/util/TestDoublyLinkedList.java"}, "test_case": {"identifier": "testRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemove()\n    {\n        DoublyLinkedList<Integer> list = new DoublyLinkedList<Integer>();\n        ListNode2<Integer> node1 = list.add(1);\n        list.remove(node1);\n\n        node1 = list.add(1);\n        ListNode2<Integer> node2 = list.add(2);\n        list.remove(node1);\n        assertEquals(1, list.size());\n        assertEquals(new Integer(2), list.first());\n        assertEquals(node2, list.head());\n        assertArrayEquals(new Integer[]{2}, list.toArray());\n        list.remove(node2);\n        assertIsEmpty(list);\n\n        node1 = list.add(1);\n        node2 = list.add(2);\n        list.remove(node2);\n        assertEquals(1, list.size());\n        assertEquals(new Integer(1), list.first());\n        assertEquals(node1, list.head());\n        assertArrayEquals(new Integer[]{1}, list.toArray());\n\n        node2 = list.add(2);\n        list.add(3);\n        assertEquals(3, list.size());\n        assertArrayEquals(new Integer[]{1, 2, 3}, list.toArray());\n        list.remove(node2);\n        assertEquals(2, list.size());\n        assertEquals(node1, list.tail());\n        assertEquals(new Integer(3), list.last());\n        assertArrayEquals(new Integer[]{1, 3}, list.toArray());\n    }", "signature": "void testRemove()", "full_signature": "@Test public void testRemove()", "class_method_signature": "TestDoublyLinkedList.testRemove()", "testcase": true, "constructor": false, "invocations": ["add", "remove", "add", "add", "remove", "assertEquals", "size", "assertEquals", "first", "assertEquals", "head", "assertArrayEquals", "toArray", "remove", "assertIsEmpty", "add", "add", "remove", "assertEquals", "size", "assertEquals", "first", "assertEquals", "head", "assertArrayEquals", "toArray", "add", "add", "assertEquals", "size", "assertArrayEquals", "toArray", "remove", "assertEquals", "size", "assertEquals", "tail", "assertEquals", "last", "assertArrayEquals", "toArray"]}, "focal_class": {"identifier": "DoublyLinkedList", "superclass": "", "interfaces": "implements Iterable<T>", "fields": [{"original_string": "protected int size;", "modifier": "protected", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "protected ListNode2<T> tail;", "modifier": "protected", "type": "ListNode2<T>", "declarator": "tail", "var_name": "tail"}, {"original_string": "protected ListNode2<T> head;", "modifier": "protected", "type": "ListNode2<T>", "declarator": "head", "var_name": "head"}], "methods": [{"identifier": "add", "parameters": "(T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> add(T value)", "full_signature": "public ListNode2<T> add(T value)", "class_method_signature": "DoublyLinkedList.add(T value)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> enqueue(T value)", "full_signature": "public ListNode2<T> enqueue(T value)", "class_method_signature": "DoublyLinkedList.enqueue(T value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ListNode2<T> node)", "modifiers": "public", "return": "void", "signature": "void add(ListNode2<T> node)", "full_signature": "public void add(ListNode2<T> node)", "class_method_signature": "DoublyLinkedList.add(ListNode2<T> node)", "testcase": false, "constructor": false}, {"identifier": "addAfter", "parameters": "(ListNode2<T> node, T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> addAfter(ListNode2<T> node, T value)", "full_signature": "public ListNode2<T> addAfter(ListNode2<T> node, T value)", "class_method_signature": "DoublyLinkedList.addAfter(ListNode2<T> node, T value)", "testcase": false, "constructor": false}, {"identifier": "addAfter", "parameters": "(ListNode2<T> node, ListNode2<T> newNode)", "modifiers": "public", "return": "void", "signature": "void addAfter(ListNode2<T> node, ListNode2<T> newNode)", "full_signature": "public void addAfter(ListNode2<T> node, ListNode2<T> newNode)", "class_method_signature": "DoublyLinkedList.addAfter(ListNode2<T> node, ListNode2<T> newNode)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ListNode2<T> node)", "modifiers": "public", "return": "void", "signature": "void remove(ListNode2<T> node)", "full_signature": "public void remove(ListNode2<T> node)", "class_method_signature": "DoublyLinkedList.remove(ListNode2<T> node)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "DoublyLinkedList.size()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "DoublyLinkedList.iterator()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T first()", "full_signature": "public T first()", "class_method_signature": "DoublyLinkedList.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T last()", "full_signature": "public T last()", "class_method_signature": "DoublyLinkedList.last()", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "()", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> head()", "full_signature": "public ListNode2<T> head()", "class_method_signature": "DoublyLinkedList.head()", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "()", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> tail()", "full_signature": "public ListNode2<T> tail()", "class_method_signature": "DoublyLinkedList.tail()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DoublyLinkedList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T[]", "signature": "T[] toArray()", "full_signature": "@SuppressWarnings(\"unchecked\") public T[] toArray()", "class_method_signature": "DoublyLinkedList.toArray()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/util/DoublyLinkedList.java"}, "focal_method": {"identifier": "remove", "parameters": "(ListNode2<T> node)", "modifiers": "public", "return": "void", "body": "public void remove(ListNode2<T> node)\n    {\n        if (node == tail)\n        {\n            tail = node.next;\n        }\n        else\n        {\n            node.prev.next = node.next;\n        }\n\n        if (node == head)\n        {\n            head = node.prev;\n        }\n        else\n        {\n            node.next.prev = node.prev;\n        }\n        size--;\n    }", "signature": "void remove(ListNode2<T> node)", "full_signature": "public void remove(ListNode2<T> node)", "class_method_signature": "DoublyLinkedList.remove(ListNode2<T> node)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}