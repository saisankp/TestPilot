{"test_class": {"identifier": "LocationsHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "fds-lambda-locations-ingestion/src/test/java/com/provectus/fds/ingestion/LocationsHandlerTest.java"}, "test_case": {"identifier": "shouldConvertLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConvertLocation() throws IOException {\n        Location expected = getLocation();\n\n        assertEquals(expected, JsonUtils.read(JsonUtils.write(expected), Location.class));\n    }", "signature": "void shouldConvertLocation()", "full_signature": "@Test public void shouldConvertLocation()", "class_method_signature": "LocationsHandlerTest.shouldConvertLocation()", "testcase": true, "constructor": false, "invocations": ["getLocation", "assertEquals", "read", "write"]}, "focal_class": {"identifier": "LocationsHandler", "superclass": "", "interfaces": "implements RequestHandler<KinesisEvent, List<String>>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LocationsHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LocationsHandler.class)", "var_name": "logger"}, {"original_string": "private static final String OK = \"OK\";", "modifier": "private static final", "type": "String", "declarator": "OK = \"OK\"", "var_name": "OK"}, {"original_string": "private static final String FAILED = \"FAILED\";", "modifier": "private static final", "type": "String", "declarator": "FAILED = \"FAILED\"", "var_name": "FAILED"}, {"original_string": "private static final String STREAM_NAME = \"STREAM_NAME\";", "modifier": "private static final", "type": "String", "declarator": "STREAM_NAME = \"STREAM_NAME\"", "var_name": "STREAM_NAME"}, {"original_string": "private static final String AWS_REGION = \"AWS_REGION\";", "modifier": "private static final", "type": "String", "declarator": "AWS_REGION = \"AWS_REGION\"", "var_name": "AWS_REGION"}, {"original_string": "private static final String RECORD_MAX_BUFFERED_TIME = \"RECORD_MAX_BUFFERED_TIME\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_MAX_BUFFERED_TIME = \"RECORD_MAX_BUFFERED_TIME\"", "var_name": "RECORD_MAX_BUFFERED_TIME"}, {"original_string": "private static final String MAX_CONNECTIONS = \"MAX_CONNECTIONS\";", "modifier": "private static final", "type": "String", "declarator": "MAX_CONNECTIONS = \"MAX_CONNECTIONS\"", "var_name": "MAX_CONNECTIONS"}, {"original_string": "private static final String REQUEST_TIMEOUT = \"REQUEST_TIMEOUT\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_TIMEOUT = \"REQUEST_TIMEOUT\"", "var_name": "REQUEST_TIMEOUT"}, {"original_string": "private static final String AGGREGATION_ENABLED = \"AGGREGATION_ENABLED\";", "modifier": "private static final", "type": "String", "declarator": "AGGREGATION_ENABLED = \"AGGREGATION_ENABLED\"", "var_name": "AGGREGATION_ENABLED"}, {"original_string": "private static final String AGGREGATION_MAX_COUNT = \"AGGREGATION_MAX_COUNT\";", "modifier": "private static final", "type": "String", "declarator": "AGGREGATION_MAX_COUNT = \"AGGREGATION_MAX_COUNT\"", "var_name": "AGGREGATION_MAX_COUNT"}, {"original_string": "private static final String AGGREGATION_MAX_SIZE = \"AGGREGATION_MAX_SIZE\";", "modifier": "private static final", "type": "String", "declarator": "AGGREGATION_MAX_SIZE = \"AGGREGATION_MAX_SIZE\"", "var_name": "AGGREGATION_MAX_SIZE"}, {"original_string": "private static final String PREFIX = \"locations/\";", "modifier": "private static final", "type": "String", "declarator": "PREFIX = \"locations/\"", "var_name": "PREFIX"}, {"original_string": "private static final String SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \",\"", "var_name": "SEPARATOR"}, {"original_string": "private final String streamName = System.getenv().getOrDefault(STREAM_NAME, \"locations\");", "modifier": "private final", "type": "String", "declarator": "streamName = System.getenv().getOrDefault(STREAM_NAME, \"locations\")", "var_name": "streamName"}, {"original_string": "private final String region = System.getenv().getOrDefault(AWS_REGION, \"us-west-2\");", "modifier": "private final", "type": "String", "declarator": "region = System.getenv().getOrDefault(AWS_REGION, \"us-west-2\")", "var_name": "region"}, {"original_string": "private final long recordMaxBufferedTime = Long.parseLong(System.getenv().getOrDefault(RECORD_MAX_BUFFERED_TIME, \"100\"));", "modifier": "private final", "type": "long", "declarator": "recordMaxBufferedTime = Long.parseLong(System.getenv().getOrDefault(RECORD_MAX_BUFFERED_TIME, \"100\"))", "var_name": "recordMaxBufferedTime"}, {"original_string": "private final long maxConnections = Long.parseLong(System.getenv().getOrDefault(MAX_CONNECTIONS, \"24\"));", "modifier": "private final", "type": "long", "declarator": "maxConnections = Long.parseLong(System.getenv().getOrDefault(MAX_CONNECTIONS, \"24\"))", "var_name": "maxConnections"}, {"original_string": "private final long requestTimeout = Long.parseLong(System.getenv().getOrDefault(REQUEST_TIMEOUT, \"600\"));", "modifier": "private final", "type": "long", "declarator": "requestTimeout = Long.parseLong(System.getenv().getOrDefault(REQUEST_TIMEOUT, \"600\"))", "var_name": "requestTimeout"}, {"original_string": "private final boolean aggregationEnabled = Boolean.parseBoolean(System.getenv().getOrDefault(AGGREGATION_ENABLED, \"true\"));", "modifier": "private final", "type": "boolean", "declarator": "aggregationEnabled = Boolean.parseBoolean(System.getenv().getOrDefault(AGGREGATION_ENABLED, \"true\"))", "var_name": "aggregationEnabled"}, {"original_string": "private final long getAggregationMaxCount = Long.parseLong(System.getenv().getOrDefault(AGGREGATION_MAX_COUNT, \"4294967295\"));", "modifier": "private final", "type": "long", "declarator": "getAggregationMaxCount = Long.parseLong(System.getenv().getOrDefault(AGGREGATION_MAX_COUNT, \"4294967295\"))", "var_name": "getAggregationMaxCount"}, {"original_string": "private final long getAggregationMaxSize = Long.parseLong(System.getenv().getOrDefault(AGGREGATION_MAX_SIZE, \"51200\"));", "modifier": "private final", "type": "long", "declarator": "getAggregationMaxSize = Long.parseLong(System.getenv().getOrDefault(AGGREGATION_MAX_SIZE, \"51200\"))", "var_name": "getAggregationMaxSize"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final KinesisProducer producer;", "modifier": "private final", "type": "KinesisProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "private final FutureCallback<UserRecordResult> callback;", "modifier": "private final", "type": "FutureCallback<UserRecordResult>", "declarator": "callback", "var_name": "callback"}], "methods": [{"identifier": "LocationsHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocationsHandler()", "full_signature": "public  LocationsHandler()", "class_method_signature": "LocationsHandler.LocationsHandler()", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(KinesisEvent event, Context context)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> handleRequest(KinesisEvent event, Context context)", "full_signature": "@Override public List<String> handleRequest(KinesisEvent event, Context context)", "class_method_signature": "LocationsHandler.handleRequest(KinesisEvent event, Context context)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(S3Event s3Event)", "modifiers": "private", "return": "String", "signature": "String handleRequest(S3Event s3Event)", "full_signature": "private String handleRequest(S3Event s3Event)", "class_method_signature": "LocationsHandler.handleRequest(S3Event s3Event)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Location location)", "modifiers": "private", "return": "void", "signature": "void write(Location location)", "full_signature": "private void write(Location location)", "class_method_signature": "LocationsHandler.write(Location location)", "testcase": false, "constructor": false}], "file": "fds-lambda-locations-ingestion/src/main/java/com/provectus/fds/ingestion/LocationsHandler.java"}, "focal_method": {"identifier": "write", "parameters": "(Location location)", "modifiers": "private", "return": "void", "body": "private void write(Location location) {\n        try {\n            Futures.addCallback(\n                    producer.addUserRecord(\n                            streamName,\n                            location.getAppUID(),\n                            ByteBuffer.wrap(JsonUtils.write(location))),\n                    callback);\n        } catch (JsonProcessingException e) {\n            logger.error(\"Can't prepare location for writing\", e);\n        }\n    }", "signature": "void write(Location location)", "full_signature": "private void write(Location location)", "class_method_signature": "LocationsHandler.write(Location location)", "testcase": false, "constructor": false, "invocations": ["addCallback", "addUserRecord", "getAppUID", "wrap", "write", "error"]}, "repository": {"repo_id": 156757718, "url": "https://github.com/provectus/streaming-data-platform", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 12, "size": 616, "license": "licensed"}}