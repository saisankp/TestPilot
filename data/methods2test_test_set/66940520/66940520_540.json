{"test_class": {"identifier": "ListMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/common/ListMapTest.java"}, "test_case": {"identifier": "testGetListMapKeyValueMapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetListMapKeyValueMapper()\n    {\n        DataElementGroupSet groupSetA = new DataElementGroupSet( \"GroupSetA\" );\n        DataElementGroupSet groupSetB = new DataElementGroupSet( \"GroupSetB\" );\n        DataElementGroupSet groupSetC = new DataElementGroupSet( \"GroupSetC\" );\n        DataElementGroupSet groupSetZ = new DataElementGroupSet( \"GroupSetZ\" );\n        \n        DataElementGroup groupA = new DataElementGroup( \"GroupA\" );\n        DataElementGroup groupB = new DataElementGroup( \"GroupB\" );\n        DataElementGroup groupC = new DataElementGroup( \"GroupC\" );\n        DataElementGroup groupD = new DataElementGroup( \"GroupD\" );\n        DataElementGroup groupE = new DataElementGroup( \"GroupE\" );\n        DataElementGroup groupF = new DataElementGroup( \"GroupF\" );\n        \n        groupA.getGroupSets().add( groupSetA );\n        groupB.getGroupSets().add( groupSetB );\n        groupC.getGroupSets().add( groupSetC );\n        groupD.getGroupSets().add( groupSetA );\n        groupE.getGroupSets().add( groupSetB );\n        groupF.getGroupSets().add( groupSetA );\n        \n        List<DataElementGroup> groups = Lists.newArrayList( groupA, groupB, groupC, groupD, groupE, groupF );\n                        \n        ListMap<DataElementGroupSet, Long> map = ListMap.getListMap( groups, group -> group.getGroupSets().iterator().next(), group -> group.getId() );\n        \n        assertEquals( Lists.newArrayList( groupA.getId(), groupD.getId(), groupF.getId() ), map.get( groupSetA ) );\n        assertEquals( Lists.newArrayList( groupB.getId(), groupE.getId() ), map.get( groupSetB ) );\n        assertEquals( Lists.newArrayList( groupC.getId() ), map.get( groupSetC ) );\n        assertNull( map.get( groupSetZ ) );\n    }", "signature": "void testGetListMapKeyValueMapper()", "full_signature": "@Test public void testGetListMapKeyValueMapper()", "class_method_signature": "ListMapTest.testGetListMapKeyValueMapper()", "testcase": true, "constructor": false, "invocations": ["add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "add", "getGroupSets", "newArrayList", "getListMap", "next", "iterator", "getGroupSets", "getId", "assertEquals", "newArrayList", "getId", "getId", "getId", "get", "assertEquals", "newArrayList", "getId", "getId", "get", "assertEquals", "newArrayList", "getId", "get", "assertNull", "get"]}, "focal_class": {"identifier": "ListMap", "superclass": "extends HashMap<T, List<V>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 4880664228933342003L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4880664228933342003L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "ListMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " ListMap()", "full_signature": "public  ListMap()", "class_method_signature": "ListMap.ListMap()", "testcase": false, "constructor": true}, {"identifier": "ListMap", "parameters": "( ListMap<T, V> listMap )", "modifiers": "public", "return": "", "signature": " ListMap( ListMap<T, V> listMap )", "full_signature": "public  ListMap( ListMap<T, V> listMap )", "class_method_signature": "ListMap.ListMap( ListMap<T, V> listMap )", "testcase": false, "constructor": true}, {"identifier": "putValue", "parameters": "( T key, V value )", "modifiers": "public", "return": "List<V>", "signature": "List<V> putValue( T key, V value )", "full_signature": "public List<V> putValue( T key, V value )", "class_method_signature": "ListMap.putValue( T key, V value )", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "( T key, Collection<V> values )", "modifiers": "public", "return": "List<V>", "signature": "List<V> putValues( T key, Collection<V> values )", "full_signature": "public List<V> putValues( T key, Collection<V> values )", "class_method_signature": "ListMap.putValues( T key, Collection<V> values )", "testcase": false, "constructor": false}, {"identifier": "putValueMap", "parameters": "( Map<T, V> map )", "modifiers": "public", "return": "void", "signature": "void putValueMap( Map<T, V> map )", "full_signature": "public void putValueMap( Map<T, V> map )", "class_method_signature": "ListMap.putValueMap( Map<T, V> map )", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "( ListMap<T, V> map )", "modifiers": "public", "return": "void", "signature": "void putAll( ListMap<T, V> map )", "full_signature": "public void putAll( ListMap<T, V> map )", "class_method_signature": "ListMap.putAll( ListMap<T, V> map )", "testcase": false, "constructor": false}, {"identifier": "allValues", "parameters": "()", "modifiers": "public", "return": "Collection<V>", "signature": "Collection<V> allValues()", "full_signature": "public Collection<V> allValues()", "class_method_signature": "ListMap.allValues()", "testcase": false, "constructor": false}, {"identifier": "uniqueValues", "parameters": "( )", "modifiers": "public", "return": "Set<V>", "signature": "Set<V> uniqueValues( )", "full_signature": "public Set<V> uniqueValues( )", "class_method_signature": "ListMap.uniqueValues( )", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "( T key, V value )", "modifiers": "public", "return": "boolean", "signature": "boolean containsValue( T key, V value )", "full_signature": "public boolean containsValue( T key, V value )", "class_method_signature": "ListMap.containsValue( T key, V value )", "testcase": false, "constructor": false}, {"identifier": "getListMap", "parameters": "( List<V> values, Function<V, T> keyMapper )", "modifiers": "public static", "return": "ListMap<T, V>", "signature": "ListMap<T, V> getListMap( List<V> values, Function<V, T> keyMapper )", "full_signature": "public static ListMap<T, V> getListMap( List<V> values, Function<V, T> keyMapper )", "class_method_signature": "ListMap.getListMap( List<V> values, Function<V, T> keyMapper )", "testcase": false, "constructor": false}, {"identifier": "getListMap", "parameters": "( List<V> values, Function<V, T> keyMapper, Function<V, U> valueMapper )", "modifiers": "public static", "return": "ListMap<T, U>", "signature": "ListMap<T, U> getListMap( List<V> values, Function<V, T> keyMapper, Function<V, U> valueMapper )", "full_signature": "public static ListMap<T, U> getListMap( List<V> values, Function<V, T> keyMapper, Function<V, U> valueMapper )", "class_method_signature": "ListMap.getListMap( List<V> values, Function<V, T> keyMapper, Function<V, U> valueMapper )", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "( ListMap<T, V> a, ListMap<T, V> b )", "modifiers": "public static", "return": "ListMap<T, V>", "signature": "ListMap<T, V> union( ListMap<T, V> a, ListMap<T, V> b )", "full_signature": "public static ListMap<T, V> union( ListMap<T, V> a, ListMap<T, V> b )", "class_method_signature": "ListMap.union( ListMap<T, V> a, ListMap<T, V> b )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/ListMap.java"}, "focal_method": {"identifier": "getListMap", "parameters": "( List<V> values, Function<V, T> keyMapper )", "modifiers": "public static", "return": "ListMap<T, V>", "body": "public static <T, V> ListMap<T, V> getListMap( List<V> values, Function<V, T> keyMapper )\n    {\n        ListMap<T, V> map = new ListMap<>();\n\n        for ( V value : values )\n        {\n            T key = keyMapper.apply( value );\n\n            map.putValue( key, value );\n        }\n\n        return map;\n    }", "signature": "ListMap<T, V> getListMap( List<V> values, Function<V, T> keyMapper )", "full_signature": "public static ListMap<T, V> getListMap( List<V> values, Function<V, T> keyMapper )", "class_method_signature": "ListMap.getListMap( List<V> values, Function<V, T> keyMapper )", "testcase": false, "constructor": false, "invocations": ["apply", "putValue"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}