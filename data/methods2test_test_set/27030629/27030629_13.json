{"test_class": {"identifier": "UserDataRepositoryTest", "superclass": "extends ApplicationTestCase", "interfaces": "", "fields": [{"original_string": "private static final int FAKE_USER_ID = 123;", "modifier": "private static final", "type": "int", "declarator": "FAKE_USER_ID = 123", "var_name": "FAKE_USER_ID"}, {"original_string": "@InjectMocks\n    private UserDataRepository userDataRepository;", "modifier": "@InjectMocks\n    private", "type": "UserDataRepository", "declarator": "userDataRepository", "var_name": "userDataRepository"}, {"original_string": "@Mock\n    UserCache mockUserCache;", "modifier": "@Mock", "type": "UserCache", "declarator": "mockUserCache", "var_name": "mockUserCache"}, {"original_string": "@Mock\n    private UserEntityDataMapper mockUserEntityDataMapper;", "modifier": "@Mock\n    private", "type": "UserEntityDataMapper", "declarator": "mockUserEntityDataMapper", "var_name": "mockUserEntityDataMapper"}, {"original_string": "@Mock\n    CloudUserDataStore cloudUserDataStore;", "modifier": "@Mock", "type": "CloudUserDataStore", "declarator": "cloudUserDataStore", "var_name": "cloudUserDataStore"}, {"original_string": "@Mock\n    DiskUserDataStore diskUserDataStore;", "modifier": "@Mock", "type": "DiskUserDataStore", "declarator": "diskUserDataStore", "var_name": "diskUserDataStore"}, {"original_string": "@Mock\n    private UserEntity mockUserEntity;", "modifier": "@Mock\n    private", "type": "UserEntity", "declarator": "mockUserEntity", "var_name": "mockUserEntity"}, {"original_string": "@Mock\n    private User mockUser;", "modifier": "@Mock\n    private", "type": "User", "declarator": "mockUser", "var_name": "mockUser"}, {"original_string": "@Mock\n    private UserRepository.UserDetailsCallback mockUserDetailsRepositoryCallback;", "modifier": "@Mock\n    private", "type": "UserRepository.UserDetailsCallback", "declarator": "mockUserDetailsRepositoryCallback", "var_name": "mockUserDetailsRepositoryCallback"}, {"original_string": "@Mock\n    private UserRepository.UserListCallback mockUserListRepositoryCallback;", "modifier": "@Mock\n    private", "type": "UserRepository.UserListCallback", "declarator": "mockUserListRepositoryCallback", "var_name": "mockUserListRepositoryCallback"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "Data/src/test/java/com/example/data/repository/UserDataRepositoryTest.java"}, "test_case": {"identifier": "testGetUserByIdError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUserByIdError() {\n        doAnswer(new Answer() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                ((UserDataStore.UserDetailsCallback) invocation.getArguments()[1]).onError(\n                        any(Exception.class));\n                return null;\n            }\n        }).when(cloudUserDataStore).getUserEntityDetails(anyInt(),\n                any(UserDataStore.UserDetailsCallback.class));\n\n        userDataRepository.getUserById(FAKE_USER_ID, mockUserDetailsRepositoryCallback);\n\n        verify(mockUserDetailsRepositoryCallback).onError(any(RepositoryErrorBundle.class));\n        verifyZeroInteractions(mockUserEntityDataMapper);\n    }", "signature": "void testGetUserByIdError()", "full_signature": "@Test public void testGetUserByIdError()", "class_method_signature": "UserDataRepositoryTest.testGetUserByIdError()", "testcase": true, "constructor": false, "invocations": ["getUserEntityDetails", "when", "doAnswer", "onError", "getArguments", "any", "anyInt", "any", "getUserById", "onError", "verify", "any", "verifyZeroInteractions"]}, "focal_class": {"identifier": "UserDataRepository", "superclass": "", "interfaces": "implements UserRepository", "fields": [{"original_string": "@Bean\n    protected UserEntityDataMapper userEntityDataMapper;", "modifier": "@Bean\n    protected", "type": "UserEntityDataMapper", "declarator": "userEntityDataMapper", "var_name": "userEntityDataMapper"}, {"original_string": "@Bean(UserCacheImpl.class)\n    protected UserCache userCache;", "modifier": "@Bean(UserCacheImpl.class)\n    protected", "type": "UserCache", "declarator": "userCache", "var_name": "userCache"}, {"original_string": "@Bean\n    protected CloudUserDataStore cloudUserDataStore;", "modifier": "@Bean\n    protected", "type": "CloudUserDataStore", "declarator": "cloudUserDataStore", "var_name": "cloudUserDataStore"}, {"original_string": "@Bean\n    protected DiskUserDataStore diskUserDataStore;", "modifier": "@Bean\n    protected", "type": "DiskUserDataStore", "declarator": "diskUserDataStore", "var_name": "diskUserDataStore"}], "methods": [{"identifier": "getUserList", "parameters": "(final UserListCallback userListCallback)", "modifiers": "@Override public", "return": "void", "signature": "void getUserList(final UserListCallback userListCallback)", "full_signature": "@Override public void getUserList(final UserListCallback userListCallback)", "class_method_signature": "UserDataRepository.getUserList(final UserListCallback userListCallback)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(final int userId, final UserDetailsCallback userCallback)", "modifiers": "@Override public", "return": "void", "signature": "void getUserById(final int userId, final UserDetailsCallback userCallback)", "full_signature": "@Override public void getUserById(final int userId, final UserDetailsCallback userCallback)", "class_method_signature": "UserDataRepository.getUserById(final int userId, final UserDetailsCallback userCallback)", "testcase": false, "constructor": false}, {"identifier": "putUserEntityInCache", "parameters": "(UserEntity userEntity)", "modifiers": "private", "return": "void", "signature": "void putUserEntityInCache(UserEntity userEntity)", "full_signature": "private void putUserEntityInCache(UserEntity userEntity)", "class_method_signature": "UserDataRepository.putUserEntityInCache(UserEntity userEntity)", "testcase": false, "constructor": false}], "file": "Data/src/main/java/com/example/data/repository/UserDataRepository.java"}, "focal_method": {"identifier": "getUserById", "parameters": "(final int userId, final UserDetailsCallback userCallback)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void getUserById(final int userId, final UserDetailsCallback userCallback) {\n        UserDataStore userDataStore;\n        if (!this.userCache.isExpired() && this.userCache.isCached(userId)) {\n            userDataStore = diskUserDataStore;\n        } else {\n            userDataStore = cloudUserDataStore;\n        }\n        userDataStore.getUserEntityDetails(userId, new UserDataStore.UserDetailsCallback() {\n            @Override\n            public void onUserEntityLoaded(UserEntity userEntity) {\n                UserDataRepository.this.putUserEntityInCache(userEntity);\n                User user = UserDataRepository.this.userEntityDataMapper.transform(userEntity);\n                if (user != null) {\n                    userCallback.onUserLoaded(user);\n                } else {\n                    userCallback.onError(new RepositoryErrorBundle(ErrorBundle.Error.UserNotFound));\n                }\n            }\n\n            @Override\n            public void onError(Exception exception) {\n                userCallback.onError(new RepositoryErrorBundle(ErrorBundle.Error.UnexpectedException, exception));\n            }\n        });\n    }", "signature": "void getUserById(final int userId, final UserDetailsCallback userCallback)", "full_signature": "@Override public void getUserById(final int userId, final UserDetailsCallback userCallback)", "class_method_signature": "UserDataRepository.getUserById(final int userId, final UserDetailsCallback userCallback)", "testcase": false, "constructor": false, "invocations": ["isExpired", "isCached", "getUserEntityDetails", "putUserEntityInCache", "transform", "onUserLoaded", "onError", "onError"]}, "repository": {"repo_id": 27030629, "url": "https://github.com/nenick/AndroidAppDevelopment", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 17, "size": 6155, "license": "licensed"}}