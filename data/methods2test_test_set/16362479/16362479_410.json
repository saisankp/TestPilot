{"test_class": {"identifier": "ClientBackedTransactionChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClientBackedTransactionChain chain;", "modifier": "private", "type": "ClientBackedTransactionChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "@Mock\n    private ClientLocalHistory history;", "modifier": "@Mock\n    private", "type": "ClientLocalHistory", "declarator": "history", "var_name": "history"}, {"original_string": "@Mock\n    private ClientSnapshot snapshot;", "modifier": "@Mock\n    private", "type": "ClientSnapshot", "declarator": "snapshot", "var_name": "snapshot"}, {"original_string": "@Mock\n    private ClientTransaction transaction;", "modifier": "@Mock\n    private", "type": "ClientTransaction", "declarator": "transaction", "var_name": "transaction"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ClientBackedTransactionChainTest.java"}, "test_case": {"identifier": "testNewWriteOnlyTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewWriteOnlyTransaction() {\n        Assert.assertNotNull(chain.newWriteOnlyTransaction());\n        Mockito.verify(history).createTransaction();\n    }", "signature": "void testNewWriteOnlyTransaction()", "full_signature": "@Test public void testNewWriteOnlyTransaction()", "class_method_signature": "ClientBackedTransactionChainTest.testNewWriteOnlyTransaction()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "newWriteOnlyTransaction", "createTransaction", "verify"]}, "focal_class": {"identifier": "ClientBackedTransactionChain", "superclass": "", "interfaces": "implements DOMStoreTransactionChain", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ClientBackedTransactionChain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ClientBackedTransactionChain.class)", "var_name": "LOG"}, {"original_string": "@GuardedBy(\"this\")\n    private final Map<AbstractClientHandle<?>, Boolean> openSnapshots = new WeakHashMap<>();", "modifier": "@GuardedBy(\"this\")\n    private final", "type": "Map<AbstractClientHandle<?>, Boolean>", "declarator": "openSnapshots = new WeakHashMap<>()", "var_name": "openSnapshots"}, {"original_string": "private final ClientLocalHistory history;", "modifier": "private final", "type": "ClientLocalHistory", "declarator": "history", "var_name": "history"}, {"original_string": "private final boolean debugAllocation;", "modifier": "private final", "type": "boolean", "declarator": "debugAllocation", "var_name": "debugAllocation"}], "methods": [{"identifier": "ClientBackedTransactionChain", "parameters": "(final ClientLocalHistory history, final boolean debugAllocation)", "modifiers": "", "return": "", "signature": " ClientBackedTransactionChain(final ClientLocalHistory history, final boolean debugAllocation)", "full_signature": "  ClientBackedTransactionChain(final ClientLocalHistory history, final boolean debugAllocation)", "class_method_signature": "ClientBackedTransactionChain.ClientBackedTransactionChain(final ClientLocalHistory history, final boolean debugAllocation)", "testcase": false, "constructor": true}, {"identifier": "newReadOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadTransaction", "signature": "DOMStoreReadTransaction newReadOnlyTransaction()", "full_signature": "@Override public DOMStoreReadTransaction newReadOnlyTransaction()", "class_method_signature": "ClientBackedTransactionChain.newReadOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "newReadWriteTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreReadWriteTransaction", "signature": "DOMStoreReadWriteTransaction newReadWriteTransaction()", "full_signature": "@Override public DOMStoreReadWriteTransaction newReadWriteTransaction()", "class_method_signature": "ClientBackedTransactionChain.newReadWriteTransaction()", "testcase": false, "constructor": false}, {"identifier": "newWriteOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreWriteTransaction", "signature": "DOMStoreWriteTransaction newWriteOnlyTransaction()", "full_signature": "@Override public DOMStoreWriteTransaction newWriteOnlyTransaction()", "class_method_signature": "ClientBackedTransactionChain.newWriteOnlyTransaction()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "ClientBackedTransactionChain.close()", "testcase": false, "constructor": false}, {"identifier": "snapshotClosed", "parameters": "(final ClientSnapshot clientTransaction)", "modifiers": "synchronized", "return": "void", "signature": "void snapshotClosed(final ClientSnapshot clientTransaction)", "full_signature": "synchronized void snapshotClosed(final ClientSnapshot clientTransaction)", "class_method_signature": "ClientBackedTransactionChain.snapshotClosed(final ClientSnapshot clientTransaction)", "testcase": false, "constructor": false}, {"identifier": "createSnapshot", "parameters": "()", "modifiers": "private", "return": "ClientSnapshot", "signature": "ClientSnapshot createSnapshot()", "full_signature": "private ClientSnapshot createSnapshot()", "class_method_signature": "ClientBackedTransactionChain.createSnapshot()", "testcase": false, "constructor": false}, {"identifier": "createTransaction", "parameters": "()", "modifiers": "private", "return": "ClientTransaction", "signature": "ClientTransaction createTransaction()", "full_signature": "private ClientTransaction createTransaction()", "class_method_signature": "ClientBackedTransactionChain.createTransaction()", "testcase": false, "constructor": false}, {"identifier": "allocationContext", "parameters": "()", "modifiers": "private", "return": "Throwable", "signature": "Throwable allocationContext()", "full_signature": "private Throwable allocationContext()", "class_method_signature": "ClientBackedTransactionChain.allocationContext()", "testcase": false, "constructor": false}, {"identifier": "recordSnapshot", "parameters": "(final T snapshot)", "modifiers": "private synchronized", "return": "T", "signature": "T recordSnapshot(final T snapshot)", "full_signature": "private synchronized T recordSnapshot(final T snapshot)", "class_method_signature": "ClientBackedTransactionChain.recordSnapshot(final T snapshot)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ClientBackedTransactionChain.java"}, "focal_method": {"identifier": "newWriteOnlyTransaction", "parameters": "()", "modifiers": "@Override public", "return": "DOMStoreWriteTransaction", "body": "@Override\n    public DOMStoreWriteTransaction newWriteOnlyTransaction() {\n        return new ClientBackedWriteTransaction(createTransaction(), allocationContext());\n    }", "signature": "DOMStoreWriteTransaction newWriteOnlyTransaction()", "full_signature": "@Override public DOMStoreWriteTransaction newWriteOnlyTransaction()", "class_method_signature": "ClientBackedTransactionChain.newWriteOnlyTransaction()", "testcase": false, "constructor": false, "invocations": ["createTransaction", "allocationContext"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}