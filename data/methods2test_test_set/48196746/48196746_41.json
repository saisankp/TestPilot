{"test_class": {"identifier": "LocationMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "code-assert-core/src/test/java/guru/nidi/codeassert/config/LocationMatcherTest.java"}, "test_case": {"identifier": "classMethodInner", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void classMethodInner() {\n        final LocationMatcher m = new LocationMatcher(Location.of(\"Cl#me\"));\n        assertFalse(m.matches(\"pa\", \"Cl$bla\", \"me\"));\n    }", "signature": "void classMethodInner()", "full_signature": "@Test void classMethodInner()", "class_method_signature": "LocationMatcherTest.classMethodInner()", "testcase": true, "constructor": false, "invocations": ["of", "assertFalse", "matches"]}, "focal_class": {"identifier": "LocationMatcher", "superclass": "", "interfaces": "implements Comparable<LocationMatcher>", "fields": [{"original_string": "private final Location loc;", "modifier": "private final", "type": "Location", "declarator": "loc", "var_name": "loc"}], "methods": [{"identifier": "LocationMatcher", "parameters": "(Location location)", "modifiers": "public", "return": "", "signature": " LocationMatcher(Location location)", "full_signature": "public  LocationMatcher(Location location)", "class_method_signature": "LocationMatcher.LocationMatcher(Location location)", "testcase": false, "constructor": true}, {"identifier": "matchesPackage", "parameters": "(String packageName)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesPackage(String packageName)", "full_signature": "public boolean matchesPackage(String packageName)", "class_method_signature": "LocationMatcher.matchesPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "matchesClass", "parameters": "(String className)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesClass(String className)", "full_signature": "public boolean matchesClass(String className)", "class_method_signature": "LocationMatcher.matchesClass(String className)", "testcase": false, "constructor": false}, {"identifier": "matchesPackageClass", "parameters": "(String packageName, String className)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesPackageClass(String packageName, String className)", "full_signature": "public boolean matchesPackageClass(String packageName, String className)", "class_method_signature": "LocationMatcher.matchesPackageClass(String packageName, String className)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String packageName, String className, String methodName)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(String packageName, String className, String methodName)", "full_signature": "public boolean matches(String packageName, String className, String methodName)", "class_method_signature": "LocationMatcher.matches(String packageName, String className, String methodName)", "testcase": false, "constructor": false}, {"identifier": "matchesLanguage", "parameters": "(Language language)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesLanguage(Language language)", "full_signature": "public boolean matchesLanguage(Language language)", "class_method_signature": "LocationMatcher.matchesLanguage(Language language)", "testcase": false, "constructor": false}, {"identifier": "specificity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int specificity()", "full_signature": "public int specificity()", "class_method_signature": "LocationMatcher.specificity()", "testcase": false, "constructor": false}, {"identifier": "specificity", "parameters": "(String pattern)", "modifiers": "private", "return": "int", "signature": "int specificity(String pattern)", "full_signature": "private int specificity(String pattern)", "class_method_signature": "LocationMatcher.specificity(String pattern)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPattern()", "full_signature": "public String getPattern()", "class_method_signature": "LocationMatcher.getPattern()", "testcase": false, "constructor": false}, {"identifier": "matchesAll", "parameters": "(String pattern)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesAll(String pattern)", "full_signature": "private boolean matchesAll(String pattern)", "class_method_signature": "LocationMatcher.matchesAll(String pattern)", "testcase": false, "constructor": false}, {"identifier": "matchesClassPattern", "parameters": "(String pat, String name)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesClassPattern(String pat, String name)", "full_signature": "private boolean matchesClassPattern(String pat, String name)", "class_method_signature": "LocationMatcher.matchesClassPattern(String pat, String name)", "testcase": false, "constructor": false}, {"identifier": "matchesPattern", "parameters": "(String pat, String name)", "modifiers": "static", "return": "boolean", "signature": "boolean matchesPattern(String pat, String name)", "full_signature": "static boolean matchesPattern(String pat, String name)", "class_method_signature": "LocationMatcher.matchesPattern(String pat, String name)", "testcase": false, "constructor": false}, {"identifier": "doMatchesPattern", "parameters": "(char start, char end, String pat, String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean doMatchesPattern(char start, char end, String pat, String name)", "full_signature": "private static boolean doMatchesPattern(char start, char end, String pat, String name)", "class_method_signature": "LocationMatcher.doMatchesPattern(char start, char end, String pat, String name)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "LocationMatcher.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LocationMatcher.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LocationMatcher.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(LocationMatcher p)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(LocationMatcher p)", "full_signature": "@Override public int compareTo(LocationMatcher p)", "class_method_signature": "LocationMatcher.compareTo(LocationMatcher p)", "testcase": false, "constructor": false}], "file": "code-assert-core/src/main/java/guru/nidi/codeassert/config/LocationMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String packageName, String className, String methodName)", "modifiers": "public", "return": "boolean", "body": "public boolean matches(String packageName, String className, String methodName) {\n        final boolean matchesClass = matchesAll(loc.method)\n                ? matchesClassPattern(loc.clazz, className)\n                : matchesPattern(loc.clazz, className);\n        return matchesPattern(loc.pack, packageName) && matchesClass && matchesPattern(loc.method, methodName);\n    }", "signature": "boolean matches(String packageName, String className, String methodName)", "full_signature": "public boolean matches(String packageName, String className, String methodName)", "class_method_signature": "LocationMatcher.matches(String packageName, String className, String methodName)", "testcase": false, "constructor": false, "invocations": ["matchesAll", "matchesClassPattern", "matchesPattern", "matchesPattern", "matchesPattern"]}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}