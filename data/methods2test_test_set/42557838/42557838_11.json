{"test_class": {"identifier": "HeadersSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Serializer<Headers> headersSerializer = new HeadersSerializer();", "modifier": "private static", "type": "Serializer<Headers>", "declarator": "headersSerializer = new HeadersSerializer()", "var_name": "headersSerializer"}], "file": "http/src/test/java/ro/polak/http/protocol/serializer/impl/HeadersSerializerTest.java"}, "test_case": {"identifier": "shouldSerializeResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSerializeResponse() {\n        Headers headers = new Headers();\n        headers.setHeader(\"Header\", \"Value\");\n        headers.setHeader(\"SomeOtherHeader\", \"123\");\n\n        assertThat(headersSerializer.serialize(headers), anyOf(\n                is(\"SomeOtherHeader: 123\\r\\nHeader: Value\\r\\n\\r\\n\"),\n                is(\"Header: Value\\r\\nSomeOtherHeader: 123\\r\\n\\r\\n\")\n        ));\n    }", "signature": "void shouldSerializeResponse()", "full_signature": "@Test public void shouldSerializeResponse()", "class_method_signature": "HeadersSerializerTest.shouldSerializeResponse()", "testcase": true, "constructor": false, "invocations": ["setHeader", "setHeader", "assertThat", "serialize", "anyOf", "is", "is"]}, "focal_class": {"identifier": "HeadersSerializer", "superclass": "", "interfaces": "implements Serializer<Headers>", "fields": [{"original_string": "private static final String NEW_LINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private static final String KEY_VALUE_SEPARATOR = \": \";", "modifier": "private static final", "type": "String", "declarator": "KEY_VALUE_SEPARATOR = \": \"", "var_name": "KEY_VALUE_SEPARATOR"}], "methods": [{"identifier": "serialize", "parameters": "(final Headers headers)", "modifiers": "@Override public", "return": "String", "signature": "String serialize(final Headers headers)", "full_signature": "@Override public String serialize(final Headers headers)", "class_method_signature": "HeadersSerializer.serialize(final Headers headers)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/serializer/impl/HeadersSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(final Headers headers)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String serialize(final Headers headers) {\n        Set<String> names = headers.keySet();\n        StringBuilder sb = new StringBuilder();\n        for (String name : names) {\n            sb.append(name)\n                    .append(KEY_VALUE_SEPARATOR)\n                    .append(headers.getHeader(name))\n                    .append(NEW_LINE);\n        }\n        sb.append(NEW_LINE);\n\n        return sb.toString();\n    }", "signature": "String serialize(final Headers headers)", "full_signature": "@Override public String serialize(final Headers headers)", "class_method_signature": "HeadersSerializer.serialize(final Headers headers)", "testcase": false, "constructor": false, "invocations": ["keySet", "append", "append", "append", "append", "getHeader", "append", "toString"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}