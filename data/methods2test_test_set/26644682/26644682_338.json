{"test_class": {"identifier": "BeanConversionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BeanConversionService conversionService = new BeanConversionService();", "modifier": "private final", "type": "BeanConversionService", "declarator": "conversionService = new BeanConversionService()", "var_name": "conversionService"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/conversions/BeanConversionServiceTest.java"}, "test_case": {"identifier": "shouldBeNullForNullObjectToConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeNullForNullObjectToConvert() throws Exception {\n        assertNull(conversionService.convert(null, Object.class));\n    }", "signature": "void shouldBeNullForNullObjectToConvert()", "full_signature": "@Test public void shouldBeNullForNullObjectToConvert()", "class_method_signature": "BeanConversionServiceTest.shouldBeNullForNullObjectToConvert()", "testcase": true, "constructor": false, "invocations": ["assertNull", "convert"]}, "focal_class": {"identifier": "BeanConversionService", "superclass": "", "interfaces": "implements ConversionService", "fields": [{"original_string": "private final Map<Class<?>, Registration<Object>> registrations = new HashMap<>();", "modifier": "private final", "type": "Map<Class<?>, Registration<Object>>", "declarator": "registrations = new HashMap<>()", "var_name": "registrations"}, {"original_string": "@Autowired(required = false)\n    private Tracer tracer;", "modifier": "@Autowired(required = false)\n    private", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private static final Map<String, List<String>> discardedPropertiesCache = new HashMap<>();", "modifier": "private static final", "type": "Map<String, List<String>>", "declarator": "discardedPropertiesCache = new HashMap<>()", "var_name": "discardedPropertiesCache"}], "methods": [{"identifier": "copyBean", "parameters": "(Object source, Object converted)", "modifiers": "private static", "return": "void", "signature": "void copyBean(Object source, Object converted)", "full_signature": "private static void copyBean(Object source, Object converted)", "class_method_signature": "BeanConversionService.copyBean(Object source, Object converted)", "testcase": false, "constructor": false}, {"identifier": "getDiscardedProperties", "parameters": "(Object source, Object converted)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getDiscardedProperties(Object source, Object converted)", "full_signature": "private static List<String> getDiscardedProperties(Object source, Object converted)", "class_method_signature": "BeanConversionService.getDiscardedProperties(Object source, Object converted)", "testcase": false, "constructor": false}, {"identifier": "fromBean", "parameters": "(Class<T> source)", "modifiers": "public static", "return": "RegistrationBuilder<T>", "signature": "RegistrationBuilder<T> fromBean(Class<T> source)", "full_signature": "public static RegistrationBuilder<T> fromBean(Class<T> source)", "class_method_signature": "BeanConversionService.fromBean(Class<T> source)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Registration<?> registration)", "modifiers": "public", "return": "void", "signature": "void register(Registration<?> registration)", "full_signature": "public void register(Registration<?> registration)", "class_method_signature": "BeanConversionService.register(Registration<?> registration)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(Class<?> modelClass)", "modifiers": "public", "return": "boolean", "signature": "boolean has(Class<?> modelClass)", "full_signature": "public boolean has(Class<?> modelClass)", "class_method_signature": "BeanConversionService.has(Class<?> modelClass)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "BeanConversionService.clear()", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "full_signature": "@Override public boolean canConvert(TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "class_method_signature": "BeanConversionService.canConvert(TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(Class<?> aClass, Class<?> aClass1)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(Class<?> aClass, Class<?> aClass1)", "full_signature": "@Override public boolean canConvert(Class<?> aClass, Class<?> aClass1)", "class_method_signature": "BeanConversionService.canConvert(Class<?> aClass, Class<?> aClass1)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "modifiers": "public", "return": "T", "signature": "T convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "full_signature": "public T convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "class_method_signature": "BeanConversionService.convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object source, @SpanTag(\"target\") Class<U> targetClass)", "modifiers": "@Override @NewSpan(\"conversion\") public", "return": "U", "signature": "U convert(Object source, @SpanTag(\"target\") Class<U> targetClass)", "full_signature": "@Override @NewSpan(\"conversion\") public U convert(Object source, @SpanTag(\"target\") Class<U> targetClass)", "class_method_signature": "BeanConversionService.convert(Object source, @SpanTag(\"target\") Class<U> targetClass)", "testcase": false, "constructor": false}, {"identifier": "getRegistrationsForSourceClass", "parameters": "(Class<?> currentSourceClass)", "modifiers": "private", "return": "List<Registration<Object>>", "signature": "List<Registration<Object>> getRegistrationsForSourceClass(Class<?> currentSourceClass)", "full_signature": "private List<Registration<Object>> getRegistrationsForSourceClass(Class<?> currentSourceClass)", "class_method_signature": "BeanConversionService.getRegistrationsForSourceClass(Class<?> currentSourceClass)", "testcase": false, "constructor": false}, {"identifier": "getRegistrationFunctions", "parameters": "(Class<U> targetClass,\n            Registration<T> registration)", "modifiers": "private", "return": "List<BiFunction<T, U, U>>", "signature": "List<BiFunction<T, U, U>> getRegistrationFunctions(Class<U> targetClass,\n            Registration<T> registration)", "full_signature": "private List<BiFunction<T, U, U>> getRegistrationFunctions(Class<U> targetClass,\n            Registration<T> registration)", "class_method_signature": "BeanConversionService.getRegistrationFunctions(Class<U> targetClass,\n            Registration<T> registration)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object o, TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Object o, TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "full_signature": "@Override public Object convert(Object o, TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "class_method_signature": "BeanConversionService.convert(Object o, TypeDescriptor typeDescriptor, TypeDescriptor typeDescriptor1)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/conversions/BeanConversionService.java"}, "focal_method": {"identifier": "convert", "parameters": "(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "modifiers": "public", "return": "T", "body": "public <U, T> T convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert) {\n        T current = convert(source, aClass);\n        for (BiFunction<U, T, T> function : onTheFlyConvert) {\n            current = function.apply(source, current);\n        }\n        return current;\n    }", "signature": "T convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "full_signature": "public T convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "class_method_signature": "BeanConversionService.convert(U source, Class<T> aClass, BiFunction<U, T, T>... onTheFlyConvert)", "testcase": false, "constructor": false, "invocations": ["convert", "apply"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}