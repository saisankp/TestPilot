{"test_class": {"identifier": "SesameModelWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "com.mobi.rdf.impl.sesame/src/test/java/com/mobi/rdf/core/impl/sesame/SesameModelWrapperTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        IRI s = new SimpleIRI(\"http://test.com/s\");\n        IRI p = new SimpleIRI(\"http://test.com/p\");\n        IRI o = new SimpleIRI(\"http://test.com/o\");\n        Literal o2 = new SimpleLiteral(\"Mobi\");\n        BNode b = new SimpleBNode(\"_:mobi1\");\n        BNode b2 = new SimpleBNode(\"_:mobi2\");\n        IRI c1 = new SimpleIRI(\"http://test.com/c1\");\n\n        SesameModelWrapper model1 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model2 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model3 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model4 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model5 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model6 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model7 = new SesameModelWrapper(new LinkedHashModel());\n        SesameModelWrapper model8 = new SesameModelWrapper(new LinkedHashModel());\n\n        model1.add(s, p, o);\n        model2.add(s, p, o);\n\n        model3.add(s, p, o);\n        model3.add(s, p, o, c1);\n        model4.add(s, p, o);\n        model4.add(s, p, o, c1);\n\n        model5.add(s, p, o);\n        model5.add(s, p, b);\n        model5.add(b, p, o2);\n        model6.add(s, p, o);\n        model6.add(s, p, b);\n        model6.add(b, p, o2);\n\n        model7.add(s, p, b);\n        model7.add(b, p, o2);\n        model8.add(s, p, b2);\n        model8.add(b2, p, o2);\n\n        assertEquals(model1, model2);\n        assertEquals(model3, model4);\n        assertNotEquals(model1, model3);\n        assertEquals(model5, model6);\n        assertEquals(model7, model8);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "SesameModelWrapperTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "assertEquals", "assertNotEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SesameModelWrapper", "superclass": "extends AbstractStatementSet", "interfaces": "implements Model", "fields": [{"original_string": "private static final long serialVersionUID = -4290503637573113943L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4290503637573113943L", "var_name": "serialVersionUID"}, {"original_string": "private static final ValueFactory MOBI_VF = SimpleValueFactory.getInstance();", "modifier": "private static final", "type": "ValueFactory", "declarator": "MOBI_VF = SimpleValueFactory.getInstance()", "var_name": "MOBI_VF"}, {"original_string": "private org.eclipse.rdf4j.model.Model sesameModel;", "modifier": "private", "type": "org.eclipse.rdf4j.model.Model", "declarator": "sesameModel", "var_name": "sesameModel"}], "methods": [{"identifier": "SesameModelWrapper", "parameters": "()", "modifiers": "protected", "return": "", "signature": " SesameModelWrapper()", "full_signature": "protected  SesameModelWrapper()", "class_method_signature": "SesameModelWrapper.SesameModelWrapper()", "testcase": false, "constructor": true}, {"identifier": "SesameModelWrapper", "parameters": "(org.eclipse.rdf4j.model.Model model)", "modifiers": "protected", "return": "", "signature": " SesameModelWrapper(org.eclipse.rdf4j.model.Model model)", "full_signature": "protected  SesameModelWrapper(org.eclipse.rdf4j.model.Model model)", "class_method_signature": "SesameModelWrapper.SesameModelWrapper(org.eclipse.rdf4j.model.Model model)", "testcase": false, "constructor": true}, {"identifier": "setDelegate", "parameters": "(org.eclipse.rdf4j.model.Model model)", "modifiers": "protected", "return": "void", "signature": "void setDelegate(org.eclipse.rdf4j.model.Model model)", "full_signature": "protected void setDelegate(org.eclipse.rdf4j.model.Model model)", "class_method_signature": "SesameModelWrapper.setDelegate(org.eclipse.rdf4j.model.Model model)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object, Resource... context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object, Resource... context)", "full_signature": "@Override public boolean add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object, Resource... context)", "class_method_signature": "SesameModelWrapper.add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object, Resource... context)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(Resource... context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean clear(Resource... context)", "full_signature": "@Override public boolean clear(Resource... context)", "class_method_signature": "SesameModelWrapper.clear(Resource... context)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Resource subject, IRI predicate, Value object, Resource... context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Resource subject, IRI predicate, Value object, Resource... context)", "full_signature": "@Override public boolean contains(Resource subject, IRI predicate, Value object, Resource... context)", "class_method_signature": "SesameModelWrapper.contains(Resource subject, IRI predicate, Value object, Resource... context)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Resource subject, IRI predicate, Value object, Resource... context)", "modifiers": "@Override public", "return": "Model", "signature": "Model filter(Resource subject, IRI predicate, Value object, Resource... context)", "full_signature": "@Override public Model filter(Resource subject, IRI predicate, Value object, Resource... context)", "class_method_signature": "SesameModelWrapper.filter(Resource subject, IRI predicate, Value object, Resource... context)", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Set<Namespace>", "signature": "Set<Namespace> getNamespaces()", "full_signature": "@Override public Set<Namespace> getNamespaces()", "class_method_signature": "SesameModelWrapper.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Resource subject, IRI predicate, Value object, Resource... context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Resource subject, IRI predicate, Value object, Resource... context)", "full_signature": "@Override public boolean remove(Resource subject, IRI predicate, Value object, Resource... context)", "class_method_signature": "SesameModelWrapper.remove(Resource subject, IRI predicate, Value object, Resource... context)", "testcase": false, "constructor": false}, {"identifier": "removeNamespace", "parameters": "(@Nonnull String prefix)", "modifiers": "@Override public", "return": "Optional<Namespace>", "signature": "Optional<Namespace> removeNamespace(@Nonnull String prefix)", "full_signature": "@Override public Optional<Namespace> removeNamespace(@Nonnull String prefix)", "class_method_signature": "SesameModelWrapper.removeNamespace(@Nonnull String prefix)", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(@Nonnull Namespace namespace)", "modifiers": "@Override public", "return": "void", "signature": "void setNamespace(@Nonnull Namespace namespace)", "full_signature": "@Override public void setNamespace(@Nonnull Namespace namespace)", "class_method_signature": "SesameModelWrapper.setNamespace(@Nonnull Namespace namespace)", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(@Nonnull String prefix, @Nonnull String name)", "modifiers": "@Override public", "return": "Namespace", "signature": "Namespace setNamespace(@Nonnull String prefix, @Nonnull String name)", "full_signature": "@Override public Namespace setNamespace(@Nonnull String prefix, @Nonnull String name)", "class_method_signature": "SesameModelWrapper.setNamespace(@Nonnull String prefix, @Nonnull String name)", "testcase": false, "constructor": false}, {"identifier": "unmodifiable", "parameters": "()", "modifiers": "@Override public", "return": "Model", "signature": "Model unmodifiable()", "full_signature": "@Override public Model unmodifiable()", "class_method_signature": "SesameModelWrapper.unmodifiable()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "SesameModelWrapper.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "SesameModelWrapper.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(@Nonnull Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(@Nonnull Object o)", "full_signature": "@Override public boolean contains(@Nonnull Object o)", "class_method_signature": "SesameModelWrapper.contains(@Nonnull Object o)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public @Nonnull", "return": "Iterator<Statement>", "signature": "Iterator<Statement> iterator()", "full_signature": "@Override public @Nonnull Iterator<Statement> iterator()", "class_method_signature": "SesameModelWrapper.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Nonnull Statement statement)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(@Nonnull Statement statement)", "full_signature": "@Override public boolean add(@Nonnull Statement statement)", "class_method_signature": "SesameModelWrapper.add(@Nonnull Statement statement)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@Nonnull Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(@Nonnull Object o)", "full_signature": "@Override public boolean remove(@Nonnull Object o)", "class_method_signature": "SesameModelWrapper.remove(@Nonnull Object o)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "SesameModelWrapper.clear()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SesameModelWrapper.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SesameModelWrapper.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getSesameModel", "parameters": "()", "modifiers": "protected", "return": "org.eclipse.rdf4j.model.Model", "signature": "org.eclipse.rdf4j.model.Model getSesameModel()", "full_signature": "protected org.eclipse.rdf4j.model.Model getSesameModel()", "class_method_signature": "SesameModelWrapper.getSesameModel()", "testcase": false, "constructor": false}], "file": "com.mobi.rdf.impl.sesame/src/main/java/com/mobi/rdf/core/impl/sesame/SesameModelWrapper.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o instanceof SesameModelWrapper) {\n            SesameModelWrapper model = (SesameModelWrapper) o;\n            return Models.isomorphic(this.sesameModel, model.getSesameModel());\n        }\n        return false;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SesameModelWrapper.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["isomorphic", "getSesameModel"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}