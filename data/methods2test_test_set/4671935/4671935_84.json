{"test_class": {"identifier": "NMEATest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/NMEATest.java"}, "test_case": {"identifier": "parseDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseDate() {\n        // Parse DDMMYY into milliseconds since epoch\n        assertEquals(1524182400000L, NMEA.parseDate(\"200418\"));\n        assertEquals(0L, NMEA.parseDate(null));\n        assertEquals(0L, NMEA.parseDate(\"\"));\n        assertEquals(0L, NMEA.parseDate(\"X\"));\n    }", "signature": "void parseDate()", "full_signature": "@Test public void parseDate()", "class_method_signature": "NMEATest.parseDate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseDate", "assertEquals", "parseDate", "assertEquals", "parseDate", "assertEquals", "parseDate"]}, "focal_class": {"identifier": "NMEA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"NMEA\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"NMEA\"", "var_name": "TAG"}, {"original_string": "private static final Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));", "modifier": "private static final", "type": "Calendar", "declarator": "cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"))", "var_name": "cal"}], "methods": [{"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "parsePowerLevel", "parameters": "(@NonNull String[] split)", "modifiers": "static", "return": "float", "signature": "float parsePowerLevel(@NonNull String[] split)", "full_signature": "static float parsePowerLevel(@NonNull String[] split)", "class_method_signature": "NMEA.parsePowerLevel(@NonNull String[] split)", "testcase": false, "constructor": false}, {"identifier": "cleanNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String", "signature": "String cleanNmea(@NonNull String nmea)", "full_signature": "@NonNull static String cleanNmea(@NonNull String nmea)", "class_method_signature": "NMEA.cleanNmea(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/NMEA.java"}, "focal_method": {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "body": "static long parseDate(@Nullable String date) {\n        if (date == null || date.isEmpty()) {\n            return 0;\n        } else {\n            if (date.length() == 6) {\n                final int day = Integer.parseInt(date.substring(0, 2));\n                final int month = Integer.parseInt(date.substring(2, 4)) - 1; // january is 0 not 1\n                int year = 1900 + Integer.parseInt(date.substring(4, 6));\n                if (year < 1970) year += 100;\n                cal.set(Calendar.MILLISECOND, 0);\n                cal.set(year, month, day, 0, 0, 0);\n                return cal.getTime().getTime();\n            } else {\n                Log.e(TAG, \"Date format error \" + date);\n                return 0;\n            }\n        }\n    }", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "parseInt", "substring", "parseInt", "substring", "parseInt", "substring", "set", "set", "getTime", "getTime", "e"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}