{"test_class": {"identifier": "ALOGPDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private CDKHydrogenAdder hydrogenAdder;", "modifier": "private", "type": "CDKHydrogenAdder", "declarator": "hydrogenAdder", "var_name": "hydrogenAdder"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ALOGPDescriptorTest.java"}, "test_case": {"identifier": "testChloroButane", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChloroButane() throws Exception {\n        IAtomContainer mol = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainer.class);\n        IAtom c1 = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"C\");\n        IAtom c2 = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"C\");\n        IAtom c3 = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"C\");\n        IAtom cl = DefaultChemObjectBuilder.getInstance().newInstance(IAtom.class, \"Cl\");\n        mol.addAtom(c1);\n        mol.addAtom(c2);\n        mol.addAtom(c3);\n        mol.addAtom(cl);\n        mol.addBond(new Bond(c1, c2));\n        mol.addBond(new Bond(c2, c3));\n        mol.addBond(new Bond(c3, cl));\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        CDKHydrogenAdder.getInstance(SilentChemObjectBuilder.getInstance())\n                        .addImplicitHydrogens(mol);\n\n        DescriptorValue v = descriptor.calculate(mol);\n        Assert.assertEquals(1.719, ((DoubleArrayResult) v.getValue()).get(0), 0.01);\n        Assert.assertEquals(20.585, ((DoubleArrayResult) v.getValue()).get(2), 0.01);\n    }", "signature": "void testChloroButane()", "full_signature": "@Test public void testChloroButane()", "class_method_signature": "ALOGPDescriptorTest.testChloroButane()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getInstance", "newInstance", "getInstance", "newInstance", "getInstance", "newInstance", "getInstance", "newInstance", "getInstance", "addAtom", "addAtom", "addAtom", "addAtom", "addBond", "addBond", "addBond", "percieveAtomTypesAndConfigureAtoms", "addImplicitHydrogens", "getInstance", "getInstance", "calculate", "assertEquals", "get", "getValue", "assertEquals", "get", "getValue"]}, "focal_class": {"identifier": "ALOGPDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(ALOGPDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ALOGPDescriptor.class)", "var_name": "logger"}, {"original_string": "IAtomContainer atomContainer;", "modifier": "", "type": "IAtomContainer", "declarator": "atomContainer", "var_name": "atomContainer"}, {"original_string": "IRingSet       rs;", "modifier": "", "type": "IRingSet", "declarator": "rs", "var_name": "rs"}, {"original_string": "String[]       fragment;", "modifier": "", "type": "String[]", "declarator": "fragment", "var_name": "fragment"}, {"original_string": "AtomicProperties ap;", "modifier": "", "type": "AtomicProperties", "declarator": "ap", "var_name": "ap"}, {"original_string": "public int[] frags = new int[121];", "modifier": "public", "type": "int[]", "declarator": "frags = new int[121]", "var_name": "frags"}, {"original_string": "public int[] alogpfrag;", "modifier": "public", "type": "int[]", "declarator": "alogpfrag", "var_name": "alogpfrag"}, {"original_string": "final static double[] FRAGVAL = new double[121];", "modifier": "final static", "type": "double[]", "declarator": "FRAGVAL = new double[121]", "var_name": "FRAGVAL"}, {"original_string": "final static double[] REFRACVAL = new double[121];", "modifier": "final static", "type": "double[]", "declarator": "REFRACVAL = new double[121]", "var_name": "REFRACVAL"}, {"original_string": "String unassignedAtoms = \"\";", "modifier": "", "type": "String", "declarator": "unassignedAtoms = \"\"", "var_name": "unassignedAtoms"}, {"original_string": "double alogp  = 0.0;", "modifier": "", "type": "double", "declarator": "alogp  = 0.0", "var_name": "alogp"}, {"original_string": "double amr    = 0.0;", "modifier": "", "type": "double", "declarator": "amr    = 0.0", "var_name": "amr"}, {"original_string": "double alogp2 = 0.0;", "modifier": "", "type": "double", "declarator": "alogp2 = 0.0", "var_name": "alogp2"}, {"original_string": "private static final String[] STRINGS = new String[]{\"ALogP\", \"ALogp2\", \"AMR\"};", "modifier": "private static final", "type": "String[]", "declarator": "STRINGS = new String[]{\"ALogP\", \"ALogp2\", \"AMR\"}", "var_name": "STRINGS"}], "methods": [{"identifier": "ALOGPDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ALOGPDescriptor()", "full_signature": "public  ALOGPDescriptor()", "class_method_signature": "ALOGPDescriptor.ALOGPDescriptor()", "testcase": false, "constructor": true}, {"identifier": "findUnassignedAtoms", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void findUnassignedAtoms()", "full_signature": "private void findUnassignedAtoms()", "class_method_signature": "ALOGPDescriptor.findUnassignedAtoms()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "modifiers": "private", "return": "double[]", "signature": "double[] calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "full_signature": "private double[] calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "class_method_signature": "ALOGPDescriptor.calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "testcase": false, "constructor": false}, {"identifier": "isHetero", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean isHetero(IAtom atom)", "full_signature": "private static boolean isHetero(IAtom atom)", "class_method_signature": "ALOGPDescriptor.isHetero(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "calcGroup001_005", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup001_005(int i)", "full_signature": "private void calcGroup001_005(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup001_005(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup002_006_007", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup002_006_007(int i)", "full_signature": "private void calcGroup002_006_007(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup002_006_007(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup003_008_009_010", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup003_008_009_010(int i)", "full_signature": "private void calcGroup003_008_009_010(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup003_008_009_010(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup004_011_to_014", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup004_011_to_014(int i)", "full_signature": "private void calcGroup004_011_to_014(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup004_011_to_014(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup015", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup015(int i)", "full_signature": "private void calcGroup015(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup015(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup016_018_036_037", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup016_018_036_037(int i)", "full_signature": "private void calcGroup016_018_036_037(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup016_018_036_037(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup017_019_020_038_to_041", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup017_019_020_038_to_041(int i)", "full_signature": "private void calcGroup017_019_020_038_to_041(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup017_019_020_038_to_041(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup021_to_023_040", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup021_to_023_040(int i)", "full_signature": "private void calcGroup021_to_023_040(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup021_to_023_040(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup024_027_030_033_042", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup024_027_030_033_042(int i)", "full_signature": "private void calcGroup024_027_030_033_042(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup024_027_030_033_042(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup025_026_028_029_031_032_034_035_043_044", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup025_026_028_029_031_032_034_035_043_044(int i)", "full_signature": "private void calcGroup025_026_028_029_031_032_034_035_043_044(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup025_026_028_029_031_032_034_035_043_044(int i)", "testcase": false, "constructor": false}, {"identifier": "isPyrroleLikeHetero", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean isPyrroleLikeHetero(IAtom atom)", "full_signature": "private boolean isPyrroleLikeHetero(IAtom atom)", "class_method_signature": "ALOGPDescriptor.isPyrroleLikeHetero(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getHAtomType", "parameters": "(IAtom atom, List connectedAtoms)", "modifiers": "private", "return": "int", "signature": "int getHAtomType(IAtom atom, List connectedAtoms)", "full_signature": "private int getHAtomType(IAtom atom, List connectedAtoms)", "class_method_signature": "ALOGPDescriptor.getHAtomType(IAtom atom, List connectedAtoms)", "testcase": false, "constructor": false}, {"identifier": "calcGroup056_57", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup056_57(int i)", "full_signature": "private void calcGroup056_57(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup056_57(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup058_61", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup058_61(int i)", "full_signature": "private void calcGroup058_61(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup058_61(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup059_060_063", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup059_060_063(int i)", "full_signature": "private void calcGroup059_060_063(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup059_060_063(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup066_to_079", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup066_to_079(int i)", "full_signature": "private void calcGroup066_to_079(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup066_to_079(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup081_to_085", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup081_to_085(int i)", "full_signature": "private void calcGroup081_to_085(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup081_to_085(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup086_to_090", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup086_to_090(int i)", "full_signature": "private void calcGroup086_to_090(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup086_to_090(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup091_to_095", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup091_to_095(int i)", "full_signature": "private void calcGroup091_to_095(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup091_to_095(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup096_to_100", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup096_to_100(int i)", "full_signature": "private void calcGroup096_to_100(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup096_to_100(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup101_to_104", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup101_to_104(int i)", "full_signature": "private void calcGroup101_to_104(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup101_to_104(int i)", "testcase": false, "constructor": false}, {"identifier": "isBondedToHydrogenOnly", "parameters": "(IAtom ai)", "modifiers": "private", "return": "boolean", "signature": "boolean isBondedToHydrogenOnly(IAtom ai)", "full_signature": "private boolean isBondedToHydrogenOnly(IAtom ai)", "class_method_signature": "ALOGPDescriptor.isBondedToHydrogenOnly(IAtom ai)", "testcase": false, "constructor": false}, {"identifier": "calcGroup106", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup106(int i)", "full_signature": "private void calcGroup106(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup106(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup107", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup107(int i)", "full_signature": "private void calcGroup107(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup107(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup108", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup108(int i)", "full_signature": "private void calcGroup108(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup108(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup109", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup109(int i)", "full_signature": "private void calcGroup109(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup109(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup110", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup110(int i)", "full_signature": "private void calcGroup110(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup110(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup111", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup111(int i)", "full_signature": "private void calcGroup111(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup111(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup112", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup112(int i)", "full_signature": "private void calcGroup112(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup112(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup115", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup115(int i)", "full_signature": "private void calcGroup115(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup115(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup116_117_120", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup116_117_120(int i)", "full_signature": "private void calcGroup116_117_120(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup116_117_120(int i)", "testcase": false, "constructor": false}, {"identifier": "calcGroup118_119", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void calcGroup118_119(int i)", "full_signature": "private void calcGroup118_119(int i)", "class_method_signature": "ALOGPDescriptor.calcGroup118_119(int i)", "testcase": false, "constructor": false}, {"identifier": "inSameAromaticRing", "parameters": "(IAtomContainer atomContainer, IAtom atom1, IAtom atom2, IRingSet rs)", "modifiers": "private", "return": "boolean", "signature": "boolean inSameAromaticRing(IAtomContainer atomContainer, IAtom atom1, IAtom atom2, IRingSet rs)", "full_signature": "private boolean inSameAromaticRing(IAtomContainer atomContainer, IAtom atom1, IAtom atom2, IRingSet rs)", "class_method_signature": "ALOGPDescriptor.inSameAromaticRing(IAtomContainer atomContainer, IAtom atom1, IAtom atom2, IRingSet rs)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ALOGPDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "ALOGPDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "ALOGPDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ALOGPDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ALOGPDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ALOGPDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ALOGPDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ALOGPDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ALOGPDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ALOGPDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "modifiers": "private", "return": "double[]", "body": "private double[] calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs) throws CDKException {\n        this.atomContainer = atomContainer;\n        this.fragment = fragment;\n        this.rs = rs;\n        alogp = 0.0;\n        amr = 0.0;\n        alogp2 = 0.0;\n\n        alogpfrag = new int[atomContainer.getAtomCount()];\n\n        for (int i = 1; i <= 120; i++) {\n            frags[i] = 0;\n        }\n\n        for (int i = 0; i < atomContainer.getAtomCount(); i++) {\n            // alogpfrag[i] = 0; // not needed (new array initalized above)\n            try {\n                if (fragment[i] != null) {\n                    calcGroup001_005(i);\n                    calcGroup002_006_007(i);\n                    calcGroup003_008_009_010(i);\n                    calcGroup004_011_to_014(i);\n                    calcGroup015(i);\n                    calcGroup016_018_036_037(i);\n                    calcGroup017_019_020_038_to_041(i);\n                    calcGroup021_to_023_040(i);\n                    calcGroup024_027_030_033_042(i);\n                    calcGroup025_026_028_029_031_032_034_035_043_044(i);\n                    calcGroup056_57(i);\n                    calcGroup058_61(i);\n                    calcGroup059_060_063(i);\n                    calcGroup066_to_079(i);\n                    calcGroup081_to_085(i);\n                    calcGroup086_to_090(i);\n                    calcGroup091_to_095(i);\n                    calcGroup096_to_100(i);\n                    calcGroup101_to_104(i);\n                    calcGroup106(i);\n                    calcGroup107(i);\n                    calcGroup108(i);\n                    calcGroup109(i);\n                    calcGroup110(i);\n                    calcGroup111(i);\n                    calcGroup112(i);\n                    calcGroup115(i);\n                    calcGroup116_117_120(i);\n                    calcGroup118_119(i);\n                }\n            } catch (Exception e) {\n                throw new CDKException(e.toString(), e);\n            }\n        } // end i atom loop\n\n        logger.debug(\"\\nFound fragments and frequencies \");\n\n        for (int i = 1; i <= 120; i++) {\n            alogp += FRAGVAL[i] * frags[i];\n            amr += REFRACVAL[i] * frags[i];\n            if (frags[i] > 0) {\n                logger.debug(\"frag \" + i + \"  --> \" + frags[i]);\n            }\n        }\n        alogp2 = alogp * alogp;\n\n        this.findUnassignedAtoms();\n\n        return new double[]{alogp, alogp2, amr};\n\n    }", "signature": "double[] calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "full_signature": "private double[] calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "class_method_signature": "ALOGPDescriptor.calculate(IAtomContainer atomContainer, String[] fragment, IRingSet rs)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getAtomCount", "calcGroup001_005", "calcGroup002_006_007", "calcGroup003_008_009_010", "calcGroup004_011_to_014", "calcGroup015", "calcGroup016_018_036_037", "calcGroup017_019_020_038_to_041", "calcGroup021_to_023_040", "calcGroup024_027_030_033_042", "calcGroup025_026_028_029_031_032_034_035_043_044", "calcGroup056_57", "calcGroup058_61", "calcGroup059_060_063", "calcGroup066_to_079", "calcGroup081_to_085", "calcGroup086_to_090", "calcGroup091_to_095", "calcGroup096_to_100", "calcGroup101_to_104", "calcGroup106", "calcGroup107", "calcGroup108", "calcGroup109", "calcGroup110", "calcGroup111", "calcGroup112", "calcGroup115", "calcGroup116_117_120", "calcGroup118_119", "toString", "debug", "debug", "findUnassignedAtoms"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}