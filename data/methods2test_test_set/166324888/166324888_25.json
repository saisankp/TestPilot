{"test_class": {"identifier": "CreateWalletPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "private  CreateWalletContract.View view;", "modifier": "private", "type": "CreateWalletContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "private CreateWalletPresenter presenter;", "modifier": "private", "type": "CreateWalletPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/CreateWalletPresenterTest.java"}, "test_case": {"identifier": "testCreateOrdinaryWallet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateOrdinaryWallet(){\n        String name = \"Ella\";\n        String password = \"123456\";\n        String repeatPassword = \"1234567\";\n\n        presenter.createWallet(name,password,repeatPassword,WalletType.ORDINARY_WALLET);\n\n        Mockito.verify(view).showPasswordError(null,true);\n    }", "signature": "void testCreateOrdinaryWallet()", "full_signature": "@Test public void testCreateOrdinaryWallet()", "class_method_signature": "CreateWalletPresenterTest.testCreateOrdinaryWallet()", "testcase": true, "constructor": false, "invocations": ["createWallet", "showPasswordError", "verify"]}, "focal_class": {"identifier": "CreateWalletPresenter", "superclass": "extends BasePresenter<CreateWalletContract.View>", "interfaces": "implements CreateWalletContract.Presenter", "fields": [], "methods": [{"identifier": "loadDBWalletNumber", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadDBWalletNumber()", "full_signature": "@Override public void loadDBWalletNumber()", "class_method_signature": "CreateWalletPresenter.loadDBWalletNumber()", "testcase": false, "constructor": false}, {"identifier": "createWallet", "parameters": "(String name, String password, String repeatPassword,  @WalletType int walletType)", "modifiers": "@SuppressLint(\"CheckResult\") @Override public", "return": "void", "signature": "void createWallet(String name, String password, String repeatPassword,  @WalletType int walletType)", "full_signature": "@SuppressLint(\"CheckResult\") @Override public void createWallet(String name, String password, String repeatPassword,  @WalletType int walletType)", "class_method_signature": "CreateWalletPresenter.createWallet(String name, String password, String repeatPassword,  @WalletType int walletType)", "testcase": false, "constructor": false}, {"identifier": "createOrdinaryWallet", "parameters": "(String name,String password)", "modifiers": "private", "return": "void", "signature": "void createOrdinaryWallet(String name,String password)", "full_signature": "private void createOrdinaryWallet(String name,String password)", "class_method_signature": "CreateWalletPresenter.createOrdinaryWallet(String name,String password)", "testcase": false, "constructor": false}, {"identifier": "createHDWallet", "parameters": "(String name,String password)", "modifiers": "private", "return": "void", "signature": "void createHDWallet(String name,String password)", "full_signature": "private void createHDWallet(String name,String password)", "class_method_signature": "CreateWalletPresenter.createHDWallet(String name,String password)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/CreateWalletPresenter.java"}, "focal_method": {"identifier": "createOrdinaryWallet", "parameters": "(String name,String password)", "modifiers": "private", "return": "void", "body": "private void createOrdinaryWallet(String name,String password){\n\n        WalletManager.getInstance()\n                .createWallet(name, password)\n                .doOnSuccess(new Consumer<Wallet>() {\n                    @Override\n                    public void accept(Wallet walletEntity) throws Exception {\n                        //walletEntity.setBackedUpPrompt(true);\n\n                        WalletDao.insertWalletInfo(walletEntity.buildWalletInfoEntity());\n                        WalletManager.getInstance().addAndSelectedWalletStatusNotice(walletEntity);\n                        //WalletManager.getInstance().addWallet(walletEntity);\n\n                        PreferenceTool.putBoolean(Constants.Preference.KEY_OPERATE_MENU_FLAG, false);\n                    }\n                })\n                .compose(RxUtils.getSingleSchedulerTransformer())\n                .compose(RxUtils.bindToLifecycle(getView()))\n                .compose(LoadingTransformer.bindToSingleLifecycle(currentActivity()))\n                .subscribe(new Consumer<Wallet>() {\n                    @Override\n                    public void accept(Wallet walletEntity) throws Exception {\n                        if (isViewAttached()) {\n                            //EventPublisher.getInstance().sendWalletNumberChangeEvent();\n                            BackupWalletActivity.actionStart(currentActivity(), walletEntity);\n                            currentActivity().finish();\n                        }\n                    }\n                }, new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        if (isViewAttached() && throwable instanceof CustomThrowable) {\n                            CustomThrowable customThrowable = (CustomThrowable) throwable;\n                            if (customThrowable.getDetailMsgRes() != -1) {\n                                showLongToast(customThrowable.getDetailMsgRes());\n                            }\n                        }\n                    }\n                });\n\n    }", "signature": "void createOrdinaryWallet(String name,String password)", "full_signature": "private void createOrdinaryWallet(String name,String password)", "class_method_signature": "CreateWalletPresenter.createOrdinaryWallet(String name,String password)", "testcase": false, "constructor": false, "invocations": ["subscribe", "compose", "compose", "compose", "doOnSuccess", "createWallet", "getInstance", "insertWalletInfo", "buildWalletInfoEntity", "addAndSelectedWalletStatusNotice", "getInstance", "putBoolean", "getSingleSchedulerTransformer", "bindToLifecycle", "getView", "bindToSingleLifecycle", "currentActivity", "isViewAttached", "actionStart", "currentActivity", "finish", "currentActivity", "isViewAttached", "getDetailMsgRes", "showLongToast", "getDetailMsgRes"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}