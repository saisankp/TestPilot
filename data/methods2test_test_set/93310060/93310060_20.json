{"test_class": {"identifier": "SimpleMongoLockTest", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired\n  private MongoTemplate mongoTemplate;", "modifier": "@Autowired\n  private", "type": "MongoTemplate", "declarator": "mongoTemplate", "var_name": "mongoTemplate"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "distributed-lock-mongo/src/test/java/com/github/alturkovic/lock/mongo/impl/SimpleMongoLockTest.java"}, "test_case": {"identifier": "shouldLock", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldLock() {\n    final var expectedExpiration = LocalDateTime.now().plus(1000, ChronoUnit.MILLIS);\n\n    final var token = lock.acquire(Collections.singletonList(\"1\"), \"locks\", 1000);\n    assertThat(token).isEqualTo(\"abc\");\n\n    final var document = mongoTemplate.findById(\"1\", LockDocument.class, \"locks\");\n    assertThat(document.getToken()).isEqualTo(\"abc\");\n    assertThat(document.getExpireAt()).isCloseTo(expectedExpiration, new TemporalUnitWithinOffset(100, ChronoUnit.MILLIS));\n  }", "signature": "void shouldLock()", "full_signature": "@Test public void shouldLock()", "class_method_signature": "SimpleMongoLockTest.shouldLock()", "testcase": true, "constructor": false, "invocations": ["plus", "now", "acquire", "singletonList", "isEqualTo", "assertThat", "findById", "isEqualTo", "assertThat", "getToken", "isCloseTo", "assertThat", "getExpireAt"]}, "focal_class": {"identifier": "SimpleMongoLock", "superclass": "extends AbstractSimpleLock", "interfaces": "", "fields": [{"original_string": "private final MongoTemplate mongoTemplate;", "modifier": "private final", "type": "MongoTemplate", "declarator": "mongoTemplate", "var_name": "mongoTemplate"}], "methods": [{"identifier": "SimpleMongoLock", "parameters": "(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "modifiers": "public", "return": "", "signature": " SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "full_signature": "public  SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "class_method_signature": "SimpleMongoLock.SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "testcase": false, "constructor": true}, {"identifier": "acquire", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "String", "signature": "String acquire(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected String acquire(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleMongoLock.acquire(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleMongoLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean refresh(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected boolean refresh(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleMongoLock.refresh(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}], "file": "distributed-lock-mongo/src/main/java/com/github/alturkovic/lock/mongo/impl/SimpleMongoLock.java"}, "focal_method": {"identifier": "acquire", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "String", "body": "@Override\n  protected String acquire(final String key, final String storeId, final String token, final long expiration) {\n    final var query = Query.query(Criteria.where(\"_id\").is(key));\n    final var update = new Update()\n      .setOnInsert(\"_id\", key)\n      .setOnInsert(\"expireAt\", LocalDateTime.now().plus(expiration, ChronoUnit.MILLIS))\n      .setOnInsert(\"token\", token);\n\n    final var options = new FindAndModifyOptions().upsert(true).returnNew(true);\n    final var doc = mongoTemplate.findAndModify(query, update, options, LockDocument.class, storeId);\n\n    final var locked = doc.getToken().equals(token);\n    log.debug(\"Tried to acquire lock for key {} with token {} in store {}. Locked: {}\", key, token, storeId, locked);\n    return locked ? token : null;\n  }", "signature": "String acquire(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected String acquire(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleMongoLock.acquire(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false, "invocations": ["query", "is", "where", "setOnInsert", "setOnInsert", "setOnInsert", "plus", "now", "returnNew", "upsert", "findAndModify", "equals", "getToken", "debug"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}