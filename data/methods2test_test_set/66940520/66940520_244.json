{"test_class": {"identifier": "QueryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "@Rule\n    public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/query/QueryUtilsTest.java"}, "test_case": {"identifier": "testTransformCollectionValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformCollectionValue()\n    {\n        assertEquals( \"('x','y')\", QueryUtils.convertCollectionValue( \"[x,y]\" ) );\n\n        assertEquals( \"(1,2)\", QueryUtils.convertCollectionValue( \"[1,2]\" ) );\n    }", "signature": "void testTransformCollectionValue()", "full_signature": "@Test public void testTransformCollectionValue()", "class_method_signature": "QueryUtilsTest.testTransformCollectionValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convertCollectionValue", "assertEquals", "convertCollectionValue"]}, "focal_class": {"identifier": "QueryUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseValue", "parameters": "( Class<T> klass, Object objectValue )", "modifiers": "public static", "return": "T", "signature": "T parseValue( Class<T> klass, Object objectValue )", "full_signature": "public static T parseValue( Class<T> klass, Object objectValue )", "class_method_signature": "QueryUtils.parseValue( Class<T> klass, Object objectValue )", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "T", "signature": "T parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static T parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "class_method_signature": "QueryUtils.parseValue( Class<T> klass, Class<?> secondaryKlass, Object objectValue )", "testcase": false, "constructor": false}, {"identifier": "getEnumValue", "parameters": "( Class<T> klass, String value )", "modifiers": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) public static", "return": "T", "signature": "T getEnumValue( Class<T> klass, String value )", "full_signature": "@SuppressWarnings( { \"unchecked\", \"rawtypes\" } ) public static T getEnumValue( Class<T> klass, String value )", "class_method_signature": "QueryUtils.getEnumValue( Class<T> klass, String value )", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "( String value )", "modifiers": "public static", "return": "Object", "signature": "Object parseValue( String value )", "full_signature": "public static Object parseValue( String value )", "class_method_signature": "QueryUtils.parseValue( String value )", "testcase": false, "constructor": false}, {"identifier": "parseSelectFields", "parameters": "( List<String> fields )", "modifiers": "public static", "return": "String", "signature": "String parseSelectFields( List<String> fields )", "full_signature": "public static String parseSelectFields( List<String> fields )", "class_method_signature": "QueryUtils.parseSelectFields( List<String> fields )", "testcase": false, "constructor": false}, {"identifier": "convertCollectionValue", "parameters": "( String value )", "modifiers": "public static", "return": "String", "signature": "String convertCollectionValue( String value )", "full_signature": "public static String convertCollectionValue( String value )", "class_method_signature": "QueryUtils.convertCollectionValue( String value )", "testcase": false, "constructor": false}, {"identifier": "parseFilterOperator", "parameters": "( String operator, String value )", "modifiers": "public static", "return": "String", "signature": "String parseFilterOperator( String operator, String value )", "full_signature": "public static String parseFilterOperator( String operator, String value )", "class_method_signature": "QueryUtils.parseFilterOperator( String operator, String value )", "testcase": false, "constructor": false}, {"identifier": "convertOrderStrings", "parameters": "( @Nullable Collection<String> orders, @Nonnull Schema schema )", "modifiers": "@Nonnull public static", "return": "List<Order>", "signature": "List<Order> convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "full_signature": "@Nonnull public static List<Order> convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "class_method_signature": "QueryUtils.convertOrderStrings( @Nullable Collection<String> orders, @Nonnull Schema schema )", "testcase": false, "constructor": false}, {"identifier": "validProperty", "parameters": "( Property property )", "modifiers": "private static", "return": "boolean", "signature": "boolean validProperty( Property property )", "full_signature": "private static boolean validProperty( Property property )", "class_method_signature": "QueryUtils.validProperty( Property property )", "testcase": false, "constructor": false}, {"identifier": "validDirection", "parameters": "( String direction )", "modifiers": "private static", "return": "boolean", "signature": "boolean validDirection( String direction )", "full_signature": "private static boolean validDirection( String direction )", "class_method_signature": "QueryUtils.validDirection( String direction )", "testcase": false, "constructor": false}, {"identifier": "getSingleResult", "parameters": "( TypedQuery<T> query )", "modifiers": "public static", "return": "T", "signature": "T getSingleResult( TypedQuery<T> query )", "full_signature": "public static T getSingleResult( TypedQuery<T> query )", "class_method_signature": "QueryUtils.getSingleResult( TypedQuery<T> query )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/query/QueryUtils.java"}, "focal_method": {"identifier": "convertCollectionValue", "parameters": "( String value )", "modifiers": "public static", "return": "String", "body": "public static String convertCollectionValue( String value )\n    {\n        if ( StringUtils.isEmpty( value ) )\n        {\n            throw new QueryParserException( \"Value is null\" );\n        }\n\n        if ( !value.startsWith( \"[\" ) || !value.endsWith( \"]\" ) )\n        {\n            throw new QueryParserException( \"Invalid query value\" );\n        }\n\n        String[] split = value.substring( 1, value.length() - 1 ).split( \",\" );\n        List<String> items = Lists.newArrayList( split );\n        String str = \"(\";\n\n        for ( int i = 0; i < items.size(); i++ )\n        {\n            Object item = QueryUtils.parseValue( items.get( i ) );\n            if ( item != null )\n            {\n                str += item;\n                if ( i < items.size() - 1 )\n                {\n                    str += \",\";\n                }\n            }\n        }\n\n        str += \")\";\n\n        return str;\n    }", "signature": "String convertCollectionValue( String value )", "full_signature": "public static String convertCollectionValue( String value )", "class_method_signature": "QueryUtils.convertCollectionValue( String value )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "startsWith", "endsWith", "split", "substring", "length", "newArrayList", "size", "parseValue", "get", "size"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}