{"test_class": {"identifier": "AlternativeViolationPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/AlternativeViolationPredicateTest.java"}, "test_case": {"identifier": "filtersSubsequentAlternativeViolations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filtersSubsequentAlternativeViolations() {\n        TestAUGBuilder commonPart = buildAUG().withActionNode(\"m()\");\n        Violation violation1 = someViolation(buildOverlap(extend(commonPart).withActionNode(\"n()\")).withNodes(\"m()\", \"n()\"));\n        Violation violation2 = someViolation(buildOverlap(extend(commonPart).withActionNode(\"f()\")).withNodes(\"m()\", \"f()\"));\n        Violation violation3 = someViolation(buildOverlap(extend(commonPart).withActionNode(\"x()\")).withNodes(\"m()\", \"x()\"));\n\n        assertThat(Stream.of(violation1, violation2, violation3).filter(firstAlternativeViolation()).count(), is(1L));\n    }", "signature": "void filtersSubsequentAlternativeViolations()", "full_signature": "@Test public void filtersSubsequentAlternativeViolations()", "class_method_signature": "AlternativeViolationPredicateTest.filtersSubsequentAlternativeViolations()", "testcase": true, "constructor": false, "invocations": ["withActionNode", "buildAUG", "someViolation", "withNodes", "buildOverlap", "withActionNode", "extend", "someViolation", "withNodes", "buildOverlap", "withActionNode", "extend", "someViolation", "withNodes", "buildOverlap", "withActionNode", "extend", "assertThat", "count", "filter", "of", "firstAlternativeViolation", "is"]}, "focal_class": {"identifier": "AlternativeViolationPredicate", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "firstAlternativeViolation", "parameters": "()", "modifiers": "public static", "return": "Predicate<Violation>", "signature": "Predicate<Violation> firstAlternativeViolation()", "full_signature": "public static Predicate<Violation> firstAlternativeViolation()", "class_method_signature": "AlternativeViolationPredicate.firstAlternativeViolation()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/AlternativeViolationPredicate.java"}, "focal_method": {"identifier": "firstAlternativeViolation", "parameters": "()", "modifiers": "public static", "return": "Predicate<Violation>", "body": "public static Predicate<Violation> firstAlternativeViolation() {\n        Set<Node> coveredNodes = new HashSet<>();\n        return violation -> {\n            Set<Node> mappedTargetNodes = violation.getOverlap().getMappedTargetNodes().stream()\n                    .filter(node -> node instanceof MethodCallNode)\n                    .collect(Collectors.toSet());\n            if (mappedTargetNodes.stream().anyMatch(coveredNodes::contains)) {\n                return false;\n            } else {\n                coveredNodes.addAll(mappedTargetNodes);\n                return true;\n            }\n        };\n    }", "signature": "Predicate<Violation> firstAlternativeViolation()", "full_signature": "public static Predicate<Violation> firstAlternativeViolation()", "class_method_signature": "AlternativeViolationPredicate.firstAlternativeViolation()", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "stream", "getMappedTargetNodes", "getOverlap", "toSet", "anyMatch", "stream", "addAll"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}