{"test_class": {"identifier": "OakpalPlanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OakpalPlanTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OakpalPlanTest.class)", "var_name": "LOGGER"}, {"original_string": "private final String BASE_PATH = \"src/test/resources/OakpalPlanTest\";", "modifier": "private final", "type": "String", "declarator": "BASE_PATH = \"src/test/resources/OakpalPlanTest\"", "var_name": "BASE_PATH"}, {"original_string": "private final String CHECK_NOTHING = \"OakpalPlanTest/checkNothing.js\";", "modifier": "private final", "type": "String", "declarator": "CHECK_NOTHING = \"OakpalPlanTest/checkNothing.js\"", "var_name": "CHECK_NOTHING"}, {"original_string": "private final File base = new File(BASE_PATH);", "modifier": "private final", "type": "File", "declarator": "base = new File(BASE_PATH)", "var_name": "base"}, {"original_string": "private URL baseUrl;", "modifier": "private", "type": "URL", "declarator": "baseUrl", "var_name": "baseUrl"}, {"original_string": "private NamePathResolver resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS);", "modifier": "private", "type": "NamePathResolver", "declarator": "resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS)", "var_name": "resolver"}, {"original_string": "private static final String NS_FOO_PREFIX = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_PREFIX = \"foo\"", "var_name": "NS_FOO_PREFIX"}, {"original_string": "private static final String NS_BAR_PREFIX = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_PREFIX = \"bar\"", "var_name": "NS_BAR_PREFIX"}, {"original_string": "private static final String NS_FOO_URI = \"http://foo.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_URI = \"http://foo.com\"", "var_name": "NS_FOO_URI"}, {"original_string": "private static final String NS_BAR_URI = \"http://bar.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_URI = \"http://bar.com\"", "var_name": "NS_BAR_URI"}, {"original_string": "private static final List<JcrNs> ns = Arrays.asList(\n            JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI),\n            JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI)\n    );", "modifier": "private static final", "type": "List<JcrNs>", "declarator": "ns = Arrays.asList(\n            JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI),\n            JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI)\n    )", "var_name": "ns"}], "file": "core/src/test/java/net/adamcin/oakpal/core/OakpalPlanTest.java"}, "test_case": {"identifier": "testBuilder_withJcrNodetypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuilder_withJcrNodetypes() {\n        final JsonObject json = obj()\n                .key(\"nt:foo1\", key(\"@\", arr(\"mixin\")))\n                .key(\"nt:foo2\", key(\"@\", arr(\"mixin\")))\n                .get();\n        final List<QNodeTypeDefinition> expectTypes = JsonCnd.getQTypesFromJson(json, getMapping());\n        assertEquals(\"nodetypes should be\", expectTypes, builder()\n                .withJcrNodetypes(expectTypes).build().getJcrNodetypes());\n    }", "signature": "void testBuilder_withJcrNodetypes()", "full_signature": "@Test public void testBuilder_withJcrNodetypes()", "class_method_signature": "OakpalPlanTest.testBuilder_withJcrNodetypes()", "testcase": true, "constructor": false, "invocations": ["get", "key", "key", "obj", "key", "arr", "key", "arr", "getQTypesFromJson", "getMapping", "assertEquals", "getJcrNodetypes", "build", "withJcrNodetypes", "builder"]}, "focal_class": {"identifier": "OakpalPlan", "superclass": "", "interfaces": "implements JsonObjectConvertible", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String runModes() {\n            return \"runModes\";\n        }\n\n        @Override\n        public String checklists() {\n            return \"checklists\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String repoInitUrls() {\n            return \"repoInitUrls\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String preInstallUrls() {\n            return \"preInstallUrls\";\n        }\n\n        @Override\n        public String enablePreInstallHooks() {\n            return \"enablePreInstallHooks\";\n        }\n\n        @Override\n        public String installHookPolicy() {\n            return \"installHookPolicy\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String runModes() {\n            return \"runModes\";\n        }\n\n        @Override\n        public String checklists() {\n            return \"checklists\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String repoInitUrls() {\n            return \"repoInitUrls\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String preInstallUrls() {\n            return \"preInstallUrls\";\n        }\n\n        @Override\n        public String enablePreInstallHooks() {\n            return \"enablePreInstallHooks\";\n        }\n\n        @Override\n        public String installHookPolicy() {\n            return \"installHookPolicy\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OakpalPlan.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OakpalPlan.class)", "var_name": "LOGGER"}, {"original_string": "public static final URL EMPTY_PLAN_URL = OakpalPlan.class.getResource(\"empty-plan.json\");", "modifier": "public static final", "type": "URL", "declarator": "EMPTY_PLAN_URL = OakpalPlan.class.getResource(\"empty-plan.json\")", "var_name": "EMPTY_PLAN_URL"}, {"original_string": "public static final URL BASIC_PLAN_URL = OakpalPlan.class.getResource(\"basic-plan.json\");", "modifier": "public static final", "type": "URL", "declarator": "BASIC_PLAN_URL = OakpalPlan.class.getResource(\"basic-plan.json\")", "var_name": "BASIC_PLAN_URL"}, {"original_string": "public static final String DEFAULT_PLAN_NAME = \"plan.json\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_PLAN_NAME = \"plan.json\"", "var_name": "DEFAULT_PLAN_NAME"}, {"original_string": "private final URL base;", "modifier": "private final", "type": "URL", "declarator": "base", "var_name": "base"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final JsonObject originalJson;", "modifier": "private final", "type": "JsonObject", "declarator": "originalJson", "var_name": "originalJson"}, {"original_string": "private final List<String> runModes;", "modifier": "private final", "type": "List<String>", "declarator": "runModes", "var_name": "runModes"}, {"original_string": "private final List<String> checklists;", "modifier": "private final", "type": "List<String>", "declarator": "checklists", "var_name": "checklists"}, {"original_string": "private final List<URL> preInstallUrls;", "modifier": "private final", "type": "List<URL>", "declarator": "preInstallUrls", "var_name": "preInstallUrls"}, {"original_string": "private final List<JcrNs> jcrNamespaces;", "modifier": "private final", "type": "List<JcrNs>", "declarator": "jcrNamespaces", "var_name": "jcrNamespaces"}, {"original_string": "private final List<QNodeTypeDefinition> jcrNodetypes;", "modifier": "private final", "type": "List<QNodeTypeDefinition>", "declarator": "jcrNodetypes", "var_name": "jcrNodetypes"}, {"original_string": "private final List<PrivilegeDefinition> jcrPrivileges;", "modifier": "private final", "type": "List<PrivilegeDefinition>", "declarator": "jcrPrivileges", "var_name": "jcrPrivileges"}, {"original_string": "private final List<ForcedRoot> forcedRoots;", "modifier": "private final", "type": "List<ForcedRoot>", "declarator": "forcedRoots", "var_name": "forcedRoots"}, {"original_string": "private final List<CheckSpec> checks;", "modifier": "private final", "type": "List<CheckSpec>", "declarator": "checks", "var_name": "checks"}, {"original_string": "private final boolean enablePreInstallHooks;", "modifier": "private final", "type": "boolean", "declarator": "enablePreInstallHooks", "var_name": "enablePreInstallHooks"}, {"original_string": "private final InstallHookPolicy installHookPolicy;", "modifier": "private final", "type": "InstallHookPolicy", "declarator": "installHookPolicy", "var_name": "installHookPolicy"}, {"original_string": "private final List<URL> repoInitUrls;", "modifier": "private final", "type": "List<URL>", "declarator": "repoInitUrls", "var_name": "repoInitUrls"}, {"original_string": "private final List<String> repoInits;", "modifier": "private final", "type": "List<String>", "declarator": "repoInits", "var_name": "repoInits"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "OakpalPlan.keys()", "testcase": false, "constructor": false}, {"identifier": "OakpalPlan", "parameters": "(final @Nullable URL base,\n                       final @Nullable JsonObject originalJson,\n                       final @NotNull String name,\n                       final @NotNull List<String> runModes,\n                       final @NotNull List<String> checklists,\n                       final @NotNull List<URL> preInstallUrls,\n                       final @NotNull List<JcrNs> jcrNamespaces,\n                       final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n                       final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n                       final @NotNull List<ForcedRoot> forcedRoots,\n                       final @NotNull List<CheckSpec> checks,\n                       final boolean enablePreInstallHooks,\n                       final @Nullable InstallHookPolicy installHookPolicy,\n                       final @NotNull List<URL> repoInitUrls,\n                       final @NotNull List<String> repoInits)", "modifiers": "private", "return": "", "signature": " OakpalPlan(final @Nullable URL base,\n                       final @Nullable JsonObject originalJson,\n                       final @NotNull String name,\n                       final @NotNull List<String> runModes,\n                       final @NotNull List<String> checklists,\n                       final @NotNull List<URL> preInstallUrls,\n                       final @NotNull List<JcrNs> jcrNamespaces,\n                       final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n                       final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n                       final @NotNull List<ForcedRoot> forcedRoots,\n                       final @NotNull List<CheckSpec> checks,\n                       final boolean enablePreInstallHooks,\n                       final @Nullable InstallHookPolicy installHookPolicy,\n                       final @NotNull List<URL> repoInitUrls,\n                       final @NotNull List<String> repoInits)", "full_signature": "private  OakpalPlan(final @Nullable URL base,\n                       final @Nullable JsonObject originalJson,\n                       final @NotNull String name,\n                       final @NotNull List<String> runModes,\n                       final @NotNull List<String> checklists,\n                       final @NotNull List<URL> preInstallUrls,\n                       final @NotNull List<JcrNs> jcrNamespaces,\n                       final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n                       final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n                       final @NotNull List<ForcedRoot> forcedRoots,\n                       final @NotNull List<CheckSpec> checks,\n                       final boolean enablePreInstallHooks,\n                       final @Nullable InstallHookPolicy installHookPolicy,\n                       final @NotNull List<URL> repoInitUrls,\n                       final @NotNull List<String> repoInits)", "class_method_signature": "OakpalPlan.OakpalPlan(final @Nullable URL base,\n                       final @Nullable JsonObject originalJson,\n                       final @NotNull String name,\n                       final @NotNull List<String> runModes,\n                       final @NotNull List<String> checklists,\n                       final @NotNull List<URL> preInstallUrls,\n                       final @NotNull List<JcrNs> jcrNamespaces,\n                       final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n                       final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n                       final @NotNull List<ForcedRoot> forcedRoots,\n                       final @NotNull List<CheckSpec> checks,\n                       final boolean enablePreInstallHooks,\n                       final @Nullable InstallHookPolicy installHookPolicy,\n                       final @NotNull List<URL> repoInitUrls,\n                       final @NotNull List<String> repoInits)", "testcase": false, "constructor": true}, {"identifier": "getBase", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getBase()", "full_signature": "public URL getBase()", "class_method_signature": "OakpalPlan.getBase()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "OakpalPlan.getName()", "testcase": false, "constructor": false}, {"identifier": "getOriginalJson", "parameters": "()", "modifiers": "public", "return": "JsonObject", "signature": "JsonObject getOriginalJson()", "full_signature": "public JsonObject getOriginalJson()", "class_method_signature": "OakpalPlan.getOriginalJson()", "testcase": false, "constructor": false}, {"identifier": "getRunModes", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRunModes()", "full_signature": "public List<String> getRunModes()", "class_method_signature": "OakpalPlan.getRunModes()", "testcase": false, "constructor": false}, {"identifier": "getChecklists", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getChecklists()", "full_signature": "public List<String> getChecklists()", "class_method_signature": "OakpalPlan.getChecklists()", "testcase": false, "constructor": false}, {"identifier": "getPreInstallUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getPreInstallUrls()", "full_signature": "public List<URL> getPreInstallUrls()", "class_method_signature": "OakpalPlan.getPreInstallUrls()", "testcase": false, "constructor": false}, {"identifier": "getJcrNamespaces", "parameters": "()", "modifiers": "public", "return": "List<JcrNs>", "signature": "List<JcrNs> getJcrNamespaces()", "full_signature": "public List<JcrNs> getJcrNamespaces()", "class_method_signature": "OakpalPlan.getJcrNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getJcrNodetypes", "parameters": "()", "modifiers": "public", "return": "List<QNodeTypeDefinition>", "signature": "List<QNodeTypeDefinition> getJcrNodetypes()", "full_signature": "public List<QNodeTypeDefinition> getJcrNodetypes()", "class_method_signature": "OakpalPlan.getJcrNodetypes()", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivileges", "parameters": "()", "modifiers": "public", "return": "List<PrivilegeDefinition>", "signature": "List<PrivilegeDefinition> getJcrPrivileges()", "full_signature": "public List<PrivilegeDefinition> getJcrPrivileges()", "class_method_signature": "OakpalPlan.getJcrPrivileges()", "testcase": false, "constructor": false}, {"identifier": "getForcedRoots", "parameters": "()", "modifiers": "public", "return": "List<ForcedRoot>", "signature": "List<ForcedRoot> getForcedRoots()", "full_signature": "public List<ForcedRoot> getForcedRoots()", "class_method_signature": "OakpalPlan.getForcedRoots()", "testcase": false, "constructor": false}, {"identifier": "getChecks", "parameters": "()", "modifiers": "public", "return": "List<CheckSpec>", "signature": "List<CheckSpec> getChecks()", "full_signature": "public List<CheckSpec> getChecks()", "class_method_signature": "OakpalPlan.getChecks()", "testcase": false, "constructor": false}, {"identifier": "isEnablePreInstallHooks", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnablePreInstallHooks()", "full_signature": "public boolean isEnablePreInstallHooks()", "class_method_signature": "OakpalPlan.isEnablePreInstallHooks()", "testcase": false, "constructor": false}, {"identifier": "getInstallHookPolicy", "parameters": "()", "modifiers": "public", "return": "InstallHookPolicy", "signature": "InstallHookPolicy getInstallHookPolicy()", "full_signature": "public InstallHookPolicy getInstallHookPolicy()", "class_method_signature": "OakpalPlan.getInstallHookPolicy()", "testcase": false, "constructor": false}, {"identifier": "getRepoInitUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getRepoInitUrls()", "full_signature": "public List<URL> getRepoInitUrls()", "class_method_signature": "OakpalPlan.getRepoInitUrls()", "testcase": false, "constructor": false}, {"identifier": "getRepoInits", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRepoInits()", "full_signature": "public List<String> getRepoInits()", "class_method_signature": "OakpalPlan.getRepoInits()", "testcase": false, "constructor": false}, {"identifier": "relativizeToBaseParent", "parameters": "(final @NotNull URI baseUri, final @NotNull URI uri)", "modifiers": "static", "return": "URI", "signature": "URI relativizeToBaseParent(final @NotNull URI baseUri, final @NotNull URI uri)", "full_signature": "static URI relativizeToBaseParent(final @NotNull URI baseUri, final @NotNull URI uri)", "class_method_signature": "OakpalPlan.relativizeToBaseParent(final @NotNull URI baseUri, final @NotNull URI uri)", "testcase": false, "constructor": false}, {"identifier": "relativizeUrlsForJson", "parameters": "(final @Nullable URL base,\n                                              final @NotNull List<URL> urls,\n                                              final @NotNull String jsonKey)", "modifiers": "static", "return": "List<String>", "signature": "List<String> relativizeUrlsForJson(final @Nullable URL base,\n                                              final @NotNull List<URL> urls,\n                                              final @NotNull String jsonKey)", "full_signature": "static List<String> relativizeUrlsForJson(final @Nullable URL base,\n                                              final @NotNull List<URL> urls,\n                                              final @NotNull String jsonKey)", "class_method_signature": "OakpalPlan.relativizeUrlsForJson(final @Nullable URL base,\n                                              final @NotNull List<URL> urls,\n                                              final @NotNull String jsonKey)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "OakpalPlan.toJson()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "OakpalPlan.toString()", "testcase": false, "constructor": false}, {"identifier": "toInitStage", "parameters": "()", "modifiers": "", "return": "InitStage", "signature": "InitStage toInitStage()", "full_signature": " InitStage toInitStage()", "class_method_signature": "OakpalPlan.toInitStage()", "testcase": false, "constructor": false}, {"identifier": "toOakMachineBuilder", "parameters": "(final @Nullable ErrorListener errorListener,\n                                                  final @NotNull ClassLoader classLoader)", "modifiers": "public", "return": "OakMachine.Builder", "signature": "OakMachine.Builder toOakMachineBuilder(final @Nullable ErrorListener errorListener,\n                                                  final @NotNull ClassLoader classLoader)", "full_signature": "public OakMachine.Builder toOakMachineBuilder(final @Nullable ErrorListener errorListener,\n                                                  final @NotNull ClassLoader classLoader)", "class_method_signature": "OakpalPlan.toOakMachineBuilder(final @Nullable ErrorListener errorListener,\n                                                  final @NotNull ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "initResourceBundle", "parameters": "(final ViolationReporter reporter, final Locale locale, final ClassLoader classLoader)", "modifiers": "", "return": "void", "signature": "void initResourceBundle(final ViolationReporter reporter, final Locale locale, final ClassLoader classLoader)", "full_signature": " void initResourceBundle(final ViolationReporter reporter, final Locale locale, final ClassLoader classLoader)", "class_method_signature": "OakpalPlan.initResourceBundle(final ViolationReporter reporter, final Locale locale, final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull Builder builder,\n                                       final @NotNull JsonObject json)", "modifiers": "private static", "return": "OakpalPlan", "signature": "OakpalPlan fromJson(final @NotNull Builder builder,\n                                       final @NotNull JsonObject json)", "full_signature": "private static OakpalPlan fromJson(final @NotNull Builder builder,\n                                       final @NotNull JsonObject json)", "class_method_signature": "OakpalPlan.fromJson(final @NotNull Builder builder,\n                                       final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull JsonObject json)", "modifiers": "public static", "return": "OakpalPlan", "signature": "OakpalPlan fromJson(final @NotNull JsonObject json)", "full_signature": "public static OakpalPlan fromJson(final @NotNull JsonObject json)", "class_method_signature": "OakpalPlan.fromJson(final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull URL jsonUrl)", "modifiers": "public static", "return": "Result<OakpalPlan>", "signature": "Result<OakpalPlan> fromJson(final @NotNull URL jsonUrl)", "full_signature": "public static Result<OakpalPlan> fromJson(final @NotNull URL jsonUrl)", "class_method_signature": "OakpalPlan.fromJson(final @NotNull URL jsonUrl)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/OakpalPlan.java"}, "focal_method": {"identifier": "getJcrNodetypes", "parameters": "()", "modifiers": "public", "return": "List<QNodeTypeDefinition>", "body": "public List<QNodeTypeDefinition> getJcrNodetypes() {\n        return jcrNodetypes;\n    }", "signature": "List<QNodeTypeDefinition> getJcrNodetypes()", "full_signature": "public List<QNodeTypeDefinition> getJcrNodetypes()", "class_method_signature": "OakpalPlan.getJcrNodetypes()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}