{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "mucommander-commons-util/src/test/java/com/mucommander/commons/util/StringUtilsTest.java"}, "test_case": {"identifier": "testParseIntDef", "parameters": "(String input, int def, int expected)", "modifiers": "@Test(dataProvider = \"parseIntDef\") public", "return": "void", "body": "@Test(dataProvider = \"parseIntDef\")\n    public void testParseIntDef(String input, int def, int expected) {\n        assert StringUtils.parseIntDef(input, def) == expected;\n    }", "signature": "void testParseIntDef(String input, int def, int expected)", "full_signature": "@Test(dataProvider = \"parseIntDef\") public void testParseIntDef(String input, int def, int expected)", "class_method_signature": "StringUtilsTest.testParseIntDef(String input, int def, int expected)", "testcase": true, "constructor": false, "invocations": ["parseIntDef"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}], "methods": [{"identifier": "StringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtils()", "full_signature": "private  StringUtils()", "class_method_signature": "StringUtils.StringUtils()", "testcase": false, "constructor": true}, {"identifier": "endsWithIgnoreCase", "parameters": "(String a, String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithIgnoreCase(String a, String b)", "full_signature": "public static boolean endsWithIgnoreCase(String a, String b)", "class_method_signature": "StringUtils.endsWithIgnoreCase(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "matchesIgnoreCase", "parameters": "(String a, String b, int posA)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesIgnoreCase(String a, String b, int posA)", "full_signature": "public static boolean matchesIgnoreCase(String a, String b, int posA)", "class_method_signature": "StringUtils.matchesIgnoreCase(String a, String b, int posA)", "testcase": false, "constructor": false}, {"identifier": "endsWithIgnoreCase", "parameters": "(String a, char[] b)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithIgnoreCase(String a, char[] b)", "full_signature": "public static boolean endsWithIgnoreCase(String a, char[] b)", "class_method_signature": "StringUtils.endsWithIgnoreCase(String a, char[] b)", "testcase": false, "constructor": false}, {"identifier": "matchesIgnoreCase", "parameters": "(String a, char[] b, int posA)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesIgnoreCase(String a, char[] b, int posA)", "full_signature": "public static boolean matchesIgnoreCase(String a, char[] b, int posA)", "class_method_signature": "StringUtils.matchesIgnoreCase(String a, char[] b, int posA)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(String a, char[] b)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWith(String a, char[] b)", "full_signature": "public static boolean endsWith(String a, char[] b)", "class_method_signature": "StringUtils.endsWith(String a, char[] b)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(String a, char[] b, int posA)", "modifiers": "public static", "return": "boolean", "signature": "boolean matches(String a, char[] b, int posA)", "full_signature": "public static boolean matches(String a, char[] b, int posA)", "class_method_signature": "StringUtils.matches(String a, char[] b, int posA)", "testcase": false, "constructor": false}, {"identifier": "startsWithIgnoreCase", "parameters": "(String a, String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithIgnoreCase(String a, String b)", "full_signature": "public static boolean startsWithIgnoreCase(String a, String b)", "class_method_signature": "StringUtils.startsWithIgnoreCase(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String s1, String s2, Locale locale)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String s1, String s2, Locale locale)", "full_signature": "public static boolean equals(String s1, String s2, Locale locale)", "class_method_signature": "StringUtils.equals(String s1, String s2, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String s1, String s2, boolean caseSensitive)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String s1, String s2, boolean caseSensitive)", "full_signature": "public static boolean equals(String s1, String s2, boolean caseSensitive)", "class_method_signature": "StringUtils.equals(String s1, String s2, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "parseIntDef", "parameters": "(String s, int def)", "modifiers": "public static", "return": "int", "signature": "int parseIntDef(String s, int def)", "full_signature": "public static int parseIntDef(String s, int def)", "class_method_signature": "StringUtils.parseIntDef(String s, int def)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String s)", "full_signature": "public static String capitalize(String s)", "class_method_signature": "StringUtils.capitalize(String s)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(String s[])", "modifiers": "public static", "return": "String", "signature": "String flatten(String s[])", "full_signature": "public static String flatten(String s[])", "class_method_signature": "StringUtils.flatten(String s[])", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(String s[], String separator)", "modifiers": "public static", "return": "String", "signature": "String flatten(String s[], String separator)", "full_signature": "public static String flatten(String s[], String separator)", "class_method_signature": "StringUtils.flatten(String s[], String separator)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(String string)", "full_signature": "public static boolean isNullOrEmpty(String string)", "class_method_signature": "StringUtils.isNullOrEmpty(String string)", "testcase": false, "constructor": false}], "file": "mucommander-commons-util/src/main/java/com/mucommander/commons/util/StringUtils.java"}, "focal_method": {"identifier": "parseIntDef", "parameters": "(String s, int def)", "modifiers": "public static", "return": "int", "body": "public static int parseIntDef(String s, int def) {\n        try {\n            return Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n            return def;\n        }\n    }", "signature": "int parseIntDef(String s, int def)", "full_signature": "public static int parseIntDef(String s, int def)", "class_method_signature": "StringUtils.parseIntDef(String s, int def)", "testcase": false, "constructor": false, "invocations": ["parseInt"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}