{"test_class": {"identifier": "ScaleInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 1e-50;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-50", "var_name": "DELTA"}], "file": "api/src/test/java/org/geomajas/configuration/client/ScaleInfoTest.java"}, "test_case": {"identifier": "testSerializeAndBack", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSerializeAndBack() throws IOException, ClassNotFoundException {\n\t\tScaleInfo info = new ScaleInfo(1, 100);\n\t\tAssert.assertEquals(37.7952, info.getPixelPerUnit(), 0.0001);\n\t\tScaleInfo copy = new ScaleInfo(info);\n\t\tAssert.assertEquals(37.7952, copy.getPixelPerUnit(), 0.0001);\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tJBossObjectOutputStream out = new JBossObjectOutputStream(baos);\n\t\tout.writeObject(info);\n\t\tout.flush();\n\t\tout.close();\n\t\tJBossObjectInputStream in = new JBossObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));\n\t\tScaleInfo clone = (ScaleInfo) in.readObject();\n\t\tAssert.assertNotSame(info, clone);\n\t\tAssert.assertEquals(37.7952, clone.getPixelPerUnit(), 0.0001);\n\n\t}", "signature": "void testSerializeAndBack()", "full_signature": "@Test public void testSerializeAndBack()", "class_method_signature": "ScaleInfoTest.testSerializeAndBack()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPixelPerUnit", "assertEquals", "getPixelPerUnit", "writeObject", "flush", "close", "toByteArray", "readObject", "assertNotSame", "assertEquals", "getPixelPerUnit"]}, "focal_class": {"identifier": "ScaleInfo", "superclass": "", "interfaces": "implements IsInfo", "fields": [{"original_string": "private static final long serialVersionUID = 170L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 170L", "var_name": "serialVersionUID"}, {"original_string": "private double pixelPerUnit;", "modifier": "private", "type": "double", "declarator": "pixelPerUnit", "var_name": "pixelPerUnit"}, {"original_string": "private double numerator;", "modifier": "private", "type": "double", "declarator": "numerator", "var_name": "numerator"}, {"original_string": "private double denominator;", "modifier": "private", "type": "double", "declarator": "denominator", "var_name": "denominator"}, {"original_string": "private boolean pixelPerUnitBased;", "modifier": "private", "type": "boolean", "declarator": "pixelPerUnitBased", "var_name": "pixelPerUnitBased"}, {"original_string": "private double conversionFactor = PIXEL_PER_METER;", "modifier": "private", "type": "double", "declarator": "conversionFactor = PIXEL_PER_METER", "var_name": "conversionFactor"}, {"original_string": "public static final double PIXEL_PER_METER = 96 / 0.0254;", "modifier": "public static final", "type": "double", "declarator": "PIXEL_PER_METER = 96 / 0.0254", "var_name": "PIXEL_PER_METER"}, {"original_string": "public static final double MINIMUM_PIXEL_PER_UNIT = 1e-25;", "modifier": "public static final", "type": "double", "declarator": "MINIMUM_PIXEL_PER_UNIT = 1e-25", "var_name": "MINIMUM_PIXEL_PER_UNIT"}, {"original_string": "public static final double MAXIMUM_PIXEL_PER_UNIT = 1e25;", "modifier": "public static final", "type": "double", "declarator": "MAXIMUM_PIXEL_PER_UNIT = 1e25", "var_name": "MAXIMUM_PIXEL_PER_UNIT"}], "methods": [{"identifier": "ScaleInfo", "parameters": "()", "modifiers": "public", "return": "", "signature": " ScaleInfo()", "full_signature": "public  ScaleInfo()", "class_method_signature": "ScaleInfo.ScaleInfo()", "testcase": false, "constructor": true}, {"identifier": "ScaleInfo", "parameters": "(double pixelPerUnit)", "modifiers": "public", "return": "", "signature": " ScaleInfo(double pixelPerUnit)", "full_signature": "public  ScaleInfo(double pixelPerUnit)", "class_method_signature": "ScaleInfo.ScaleInfo(double pixelPerUnit)", "testcase": false, "constructor": true}, {"identifier": "ScaleInfo", "parameters": "(double numerator, double denominator)", "modifiers": "public", "return": "", "signature": " ScaleInfo(double numerator, double denominator)", "full_signature": "public  ScaleInfo(double numerator, double denominator)", "class_method_signature": "ScaleInfo.ScaleInfo(double numerator, double denominator)", "testcase": false, "constructor": true}, {"identifier": "ScaleInfo", "parameters": "(ScaleInfo other)", "modifiers": "public", "return": "", "signature": " ScaleInfo(ScaleInfo other)", "full_signature": "public  ScaleInfo(ScaleInfo other)", "class_method_signature": "ScaleInfo.ScaleInfo(ScaleInfo other)", "testcase": false, "constructor": true}, {"identifier": "getPixelPerUnit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPixelPerUnit()", "full_signature": "public double getPixelPerUnit()", "class_method_signature": "ScaleInfo.getPixelPerUnit()", "testcase": false, "constructor": false}, {"identifier": "setPixelPerUnit", "parameters": "(double pixelPerUnit)", "modifiers": "public", "return": "void", "signature": "void setPixelPerUnit(double pixelPerUnit)", "full_signature": "public void setPixelPerUnit(double pixelPerUnit)", "class_method_signature": "ScaleInfo.setPixelPerUnit(double pixelPerUnit)", "testcase": false, "constructor": false}, {"identifier": "isPixelPerUnitBased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPixelPerUnitBased()", "full_signature": "public boolean isPixelPerUnitBased()", "class_method_signature": "ScaleInfo.isPixelPerUnitBased()", "testcase": false, "constructor": false}, {"identifier": "setPixelPerUnitBased", "parameters": "(boolean pixelPerUnitBased)", "modifiers": "public", "return": "void", "signature": "void setPixelPerUnitBased(boolean pixelPerUnitBased)", "full_signature": "public void setPixelPerUnitBased(boolean pixelPerUnitBased)", "class_method_signature": "ScaleInfo.setPixelPerUnitBased(boolean pixelPerUnitBased)", "testcase": false, "constructor": false}, {"identifier": "getNumerator", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNumerator()", "full_signature": "public double getNumerator()", "class_method_signature": "ScaleInfo.getNumerator()", "testcase": false, "constructor": false}, {"identifier": "setNumerator", "parameters": "(double numerator)", "modifiers": "public", "return": "void", "signature": "void setNumerator(double numerator)", "full_signature": "public void setNumerator(double numerator)", "class_method_signature": "ScaleInfo.setNumerator(double numerator)", "testcase": false, "constructor": false}, {"identifier": "getDenominator", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDenominator()", "full_signature": "public double getDenominator()", "class_method_signature": "ScaleInfo.getDenominator()", "testcase": false, "constructor": false}, {"identifier": "setDenominator", "parameters": "(double denominator)", "modifiers": "public", "return": "void", "signature": "void setDenominator(double denominator)", "full_signature": "public void setDenominator(double denominator)", "class_method_signature": "ScaleInfo.setDenominator(double denominator)", "testcase": false, "constructor": false}, {"identifier": "getConversionFactor", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getConversionFactor()", "full_signature": "public double getConversionFactor()", "class_method_signature": "ScaleInfo.getConversionFactor()", "testcase": false, "constructor": false}, {"identifier": "setConversionFactor", "parameters": "(double conversionFactor)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setConversionFactor(double conversionFactor)", "full_signature": "@Deprecated public void setConversionFactor(double conversionFactor)", "class_method_signature": "ScaleInfo.setConversionFactor(double conversionFactor)", "testcase": false, "constructor": false}, {"identifier": "postConstruct", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void postConstruct()", "full_signature": "@PostConstruct protected void postConstruct()", "class_method_signature": "ScaleInfo.postConstruct()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/geomajas/configuration/client/ScaleInfo.java"}, "focal_method": {"identifier": "getPixelPerUnit", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getPixelPerUnit() {\n\t\treturn pixelPerUnit;\n\t}", "signature": "double getPixelPerUnit()", "full_signature": "public double getPixelPerUnit()", "class_method_signature": "ScaleInfo.getPixelPerUnit()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}