{"test_class": {"identifier": "CollectionNamePluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CollectionNamePlugin plugin;", "modifier": "private", "type": "CollectionNamePlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/Database-plugins/PluginCollectionName/src/test/java/info/smart_tools/smartactors/database_plugins/collection_name_plugin/CollectionNamePluginTest.java"}, "test_case": {"identifier": "ShouldThrowPluginException_When_BootstrapItemThrowsException", "parameters": "()", "modifiers": "@Test(expected = PluginException.class) public", "return": "void", "body": "@Test(expected = PluginException.class)\n    public void ShouldThrowPluginException_When_BootstrapItemThrowsException() throws Exception {\n\n        whenNew(BootstrapItem.class).withArguments(\"CollectionNamePlugin\").thenThrow(new InvalidArgumentException(\"\"));\n        plugin.load();\n    }", "signature": "void ShouldThrowPluginException_When_BootstrapItemThrowsException()", "full_signature": "@Test(expected = PluginException.class) public void ShouldThrowPluginException_When_BootstrapItemThrowsException()", "class_method_signature": "CollectionNamePluginTest.ShouldThrowPluginException_When_BootstrapItemThrowsException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "withArguments", "whenNew", "load"]}, "focal_class": {"identifier": "CollectionNamePlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "CollectionNamePlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " CollectionNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  CollectionNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "CollectionNamePlugin.CollectionNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CollectionNamePlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-plugins/PluginCollectionName/src/main/java/info/smart_tools/smartactors/database_plugins/collection_name_plugin/CollectionNamePlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CollectionNamePlugin\");\n            item\n//                .after(\"IOC\")\n//                .before(\"starter\")\n                .process(() -> {\n                    try {\n                        IKey collectionNameKey = Keys.getOrAdd(CollectionName.class.getCanonicalName());\n                        IOC.register(collectionNameKey, new ResolveByNameIocStrategy(\n                            (args) -> {\n                                String name = String.valueOf(args[0]);\n                                try {\n                                    return CollectionName.fromString(name);\n                                } catch (StorageException e) {\n                                    throw new RuntimeException(\"Can't resolve collection name: \", e);\n                                }\n                            }));\n                    } catch (ResolutionException e) {\n                        throw new ActionExecuteException(\"CollectionName plugin can't load: can't get CollectionName key\", e);\n                    } catch (InvalidArgumentException e) {\n                        throw new ActionExecuteException(\"CollectionName plugin can't load: can't create strategy\", e);\n                    } catch (RegistrationException e) {\n                        throw new ActionExecuteException(\"CollectionName plugin can't load: can't register new strategy\", e);\n                    }\n                });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load collection name plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "CollectionNamePlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "getOrAdd", "getCanonicalName", "register", "valueOf", "fromString", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}