{"test_class": {"identifier": "QueueingThreadPoolExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CORE_POOL_TIMEOUT = 10000;", "modifier": "private static final", "type": "int", "declarator": "CORE_POOL_TIMEOUT = 10000", "var_name": "CORE_POOL_TIMEOUT"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/common/QueueingThreadPoolExecutorTest.java"}, "test_case": {"identifier": "testCreateInstanceInvalidArgsPoolSize0", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateInstanceInvalidArgsPoolSize0() {\n        assertThrows(IllegalArgumentException.class, () -> QueueingThreadPoolExecutor.createInstance(\"test\", 0));\n    }", "signature": "void testCreateInstanceInvalidArgsPoolSize0()", "full_signature": "@Test public void testCreateInstanceInvalidArgsPoolSize0()", "class_method_signature": "QueueingThreadPoolExecutorTest.testCreateInstanceInvalidArgsPoolSize0()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "createInstance"]}, "focal_class": {"identifier": "QueueingThreadPoolExecutor", "superclass": "extends ThreadPoolExecutor", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(QueueingThreadPoolExecutor.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(QueueingThreadPoolExecutor.class)", "var_name": "logger"}, {"original_string": "static final int CORE_THREAD_POOL_SIZE = 1;", "modifier": "static final", "type": "int", "declarator": "CORE_THREAD_POOL_SIZE = 1", "var_name": "CORE_THREAD_POOL_SIZE"}, {"original_string": "private final BlockingQueue<Runnable> taskQueue = new LinkedTransferQueue<>();", "modifier": "private final", "type": "BlockingQueue<Runnable>", "declarator": "taskQueue = new LinkedTransferQueue<>()", "var_name": "taskQueue"}, {"original_string": "private volatile Thread queueThread;", "modifier": "private volatile", "type": "Thread", "declarator": "queueThread", "var_name": "queueThread"}, {"original_string": "private final ReadWriteLock queueThreadLock = new ReentrantReadWriteLock(true);", "modifier": "private final", "type": "ReadWriteLock", "declarator": "queueThreadLock = new ReentrantReadWriteLock(true)", "var_name": "queueThreadLock"}, {"original_string": "private final Object semaphore = new Object();", "modifier": "private final", "type": "Object", "declarator": "semaphore = new Object()", "var_name": "semaphore"}, {"original_string": "private final String threadPoolName;", "modifier": "private final", "type": "String", "declarator": "threadPoolName", "var_name": "threadPoolName"}], "methods": [{"identifier": "QueueingThreadPoolExecutor", "parameters": "(String name, int threadPoolSize)", "modifiers": "protected", "return": "", "signature": " QueueingThreadPoolExecutor(String name, int threadPoolSize)", "full_signature": "protected  QueueingThreadPoolExecutor(String name, int threadPoolSize)", "class_method_signature": "QueueingThreadPoolExecutor.QueueingThreadPoolExecutor(String name, int threadPoolSize)", "testcase": false, "constructor": true}, {"identifier": "QueueingThreadPoolExecutor", "parameters": "(String threadPoolName, ThreadFactory threadFactory, int threadPoolSize,\n            RejectedExecutionHandler rejectionHandler)", "modifiers": "private", "return": "", "signature": " QueueingThreadPoolExecutor(String threadPoolName, ThreadFactory threadFactory, int threadPoolSize,\n            RejectedExecutionHandler rejectionHandler)", "full_signature": "private  QueueingThreadPoolExecutor(String threadPoolName, ThreadFactory threadFactory, int threadPoolSize,\n            RejectedExecutionHandler rejectionHandler)", "class_method_signature": "QueueingThreadPoolExecutor.QueueingThreadPoolExecutor(String threadPoolName, ThreadFactory threadFactory, int threadPoolSize,\n            RejectedExecutionHandler rejectionHandler)", "testcase": false, "constructor": true}, {"identifier": "createInstance", "parameters": "(String name, int threadPoolSize)", "modifiers": "public static", "return": "QueueingThreadPoolExecutor", "signature": "QueueingThreadPoolExecutor createInstance(String name, int threadPoolSize)", "full_signature": "public static QueueingThreadPoolExecutor createInstance(String name, int threadPoolSize)", "class_method_signature": "QueueingThreadPoolExecutor.createInstance(String name, int threadPoolSize)", "testcase": false, "constructor": false}, {"identifier": "addToQueue", "parameters": "(Runnable runnable)", "modifiers": "protected", "return": "void", "signature": "void addToQueue(Runnable runnable)", "full_signature": "protected void addToQueue(Runnable runnable)", "class_method_signature": "QueueingThreadPoolExecutor.addToQueue(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "afterExecute", "parameters": "(Runnable r, Throwable t)", "modifiers": "@Override protected", "return": "void", "signature": "void afterExecute(Runnable r, Throwable t)", "full_signature": "@Override protected void afterExecute(Runnable r, Throwable t)", "class_method_signature": "QueueingThreadPoolExecutor.afterExecute(Runnable r, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "setRejectedExecutionHandler", "parameters": "(RejectedExecutionHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void setRejectedExecutionHandler(RejectedExecutionHandler handler)", "full_signature": "@Override public void setRejectedExecutionHandler(RejectedExecutionHandler handler)", "class_method_signature": "QueueingThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler handler)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "()", "modifiers": "@Override public", "return": "BlockingQueue<Runnable>", "signature": "BlockingQueue<Runnable> getQueue()", "full_signature": "@Override public BlockingQueue<Runnable> getQueue()", "class_method_signature": "QueueingThreadPoolExecutor.getQueue()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "QueueingThreadPoolExecutor.execute(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "createNewQueueThread", "parameters": "()", "modifiers": "private", "return": "Thread", "signature": "Thread createNewQueueThread()", "full_signature": "private Thread createNewQueueThread()", "class_method_signature": "QueueingThreadPoolExecutor.createNewQueueThread()", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/common/QueueingThreadPoolExecutor.java"}, "focal_method": {"identifier": "createInstance", "parameters": "(String name, int threadPoolSize)", "modifiers": "public static", "return": "QueueingThreadPoolExecutor", "body": "public static QueueingThreadPoolExecutor createInstance(String name, int threadPoolSize) {\n        return new QueueingThreadPoolExecutor(name, threadPoolSize);\n    }", "signature": "QueueingThreadPoolExecutor createInstance(String name, int threadPoolSize)", "full_signature": "public static QueueingThreadPoolExecutor createInstance(String name, int threadPoolSize)", "class_method_signature": "QueueingThreadPoolExecutor.createInstance(String name, int threadPoolSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}