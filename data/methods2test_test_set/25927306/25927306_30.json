{"test_class": {"identifier": "OidTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/asn1/OidTypeTest.java"}, "test_case": {"identifier": "decode", "parameters": "(final byte[] bytes, final String expected)", "modifiers": "@Test(groups = \"asn1\", dataProvider = \"oids\") public", "return": "void", "body": "@Test(groups = \"asn1\", dataProvider = \"oids\")\n  public void decode(final byte[] bytes, final String expected)\n    throws Exception\n  {\n    Assert.assertEquals(OidType.decode(new DefaultDERBuffer(bytes)), expected);\n  }", "signature": "void decode(final byte[] bytes, final String expected)", "full_signature": "@Test(groups = \"asn1\", dataProvider = \"oids\") public void decode(final byte[] bytes, final String expected)", "class_method_signature": "OidTypeTest.decode(final byte[] bytes, final String expected)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decode"]}, "focal_class": {"identifier": "OidType", "superclass": "extends AbstractDERType", "interfaces": "implements DEREncoder", "fields": [{"original_string": "private final byte[] derItem;", "modifier": "private final", "type": "byte[]", "declarator": "derItem", "var_name": "derItem"}], "methods": [{"identifier": "OidType", "parameters": "(final String item)", "modifiers": "public", "return": "", "signature": " OidType(final String item)", "full_signature": "public  OidType(final String item)", "class_method_signature": "OidType.OidType(final String item)", "testcase": false, "constructor": true}, {"identifier": "OidType", "parameters": "(final int[] item)", "modifiers": "public", "return": "", "signature": " OidType(final int[] item)", "full_signature": "public  OidType(final int[] item)", "class_method_signature": "OidType.OidType(final int[] item)", "testcase": false, "constructor": true}, {"identifier": "OidType", "parameters": "(final DERTag tag, final String item)", "modifiers": "public", "return": "", "signature": " OidType(final DERTag tag, final String item)", "full_signature": "public  OidType(final DERTag tag, final String item)", "class_method_signature": "OidType.OidType(final DERTag tag, final String item)", "testcase": false, "constructor": true}, {"identifier": "OidType", "parameters": "(final DERTag tag, final int[] item)", "modifiers": "public", "return": "", "signature": " OidType(final DERTag tag, final int[] item)", "full_signature": "public  OidType(final DERTag tag, final int[] item)", "class_method_signature": "OidType.OidType(final DERTag tag, final int[] item)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encode()", "full_signature": "@Override public byte[] encode()", "class_method_signature": "OidType.encode()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "public static", "return": "String", "signature": "String decode(final DERBuffer encoded)", "full_signature": "public static String decode(final DERBuffer encoded)", "class_method_signature": "OidType.decode(final DERBuffer encoded)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(final int[] oid)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBytes(final int[] oid)", "full_signature": "public static byte[] toBytes(final int[] oid)", "class_method_signature": "OidType.toBytes(final int[] oid)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(final int[] oid)", "modifiers": "protected static", "return": "void", "signature": "void isValid(final int[] oid)", "full_signature": "protected static void isValid(final int[] oid)", "class_method_signature": "OidType.isValid(final int[] oid)", "testcase": false, "constructor": false}, {"identifier": "toBytes", "parameters": "(final int component)", "modifiers": "protected static", "return": "byte[]", "signature": "byte[] toBytes(final int component)", "full_signature": "protected static byte[] toBytes(final int component)", "class_method_signature": "OidType.toBytes(final int component)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(final DERBuffer buffer)", "modifiers": "protected static", "return": "int", "signature": "int readInt(final DERBuffer buffer)", "full_signature": "protected static int readInt(final DERBuffer buffer)", "class_method_signature": "OidType.readInt(final DERBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String oid)", "modifiers": "public static", "return": "int[]", "signature": "int[] parse(final String oid)", "full_signature": "public static int[] parse(final String oid)", "class_method_signature": "OidType.parse(final String oid)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/asn1/OidType.java"}, "focal_method": {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "public static", "return": "String", "body": "public static String decode(final DERBuffer encoded)\n  {\n    final StringBuilder sb = new StringBuilder();\n    final int firstId = encoded.get();\n    // CheckStyle:MagicNumber OFF\n    if (firstId < 40) {\n      sb.append(\"0\").append(\".\").append(firstId).append(\".\");\n    } else if (firstId < 80) {\n      sb.append(\"1\").append(\".\").append(firstId - 40).append(\".\");\n    } else {\n      sb.append(\"2\").append(\".\").append(firstId - 80).append(\".\");\n    }\n    // CheckStyle:MagicNumber ON\n    while (encoded.hasRemaining()) {\n      sb.append(readInt(encoded)).append(\".\");\n    }\n    sb.setLength(sb.length() - 1);\n    return sb.toString();\n  }", "signature": "String decode(final DERBuffer encoded)", "full_signature": "public static String decode(final DERBuffer encoded)", "class_method_signature": "OidType.decode(final DERBuffer encoded)", "testcase": false, "constructor": false, "invocations": ["get", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "hasRemaining", "append", "append", "readInt", "setLength", "length", "toString"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}