{"test_class": {"identifier": "ETCFork3MTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/config/blockchain/ETCFork3MTest.java"}, "test_case": {"identifier": "testDifficultyWithExplosionShouldBeImpactedByBlockTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifficultyWithExplosionShouldBeImpactedByBlockTimestamp() throws Exception {\n        ETCFork3M etcFork3M = new ETCFork3M(new TestBlockchainConfig());\n\n        BlockHeader parent = new BlockHeaderBuilder(new byte[]{11, 12}, 2_500_000, 8_388_608)\n                .withTimestamp(0)\n                .build();\n        BlockHeader current = new BlockHeaderBuilder(parent.getHash(), 2_500_001, -1)\n                .withTimestamp(10 * 60) // 10 minutes later, longer time: lowers difficulty\n                .build();\n\n        BigInteger difficulty = etcFork3M.calcDifficulty(current, parent);\n        assertEquals(BigInteger.valueOf(276582400), difficulty);\n\n\n        parent = new BlockHeaderBuilder(new byte[]{11, 12}, 2_500_000, 8_388_608)\n                .withTimestamp(0)\n                .build();\n        current = new BlockHeaderBuilder(parent.getHash(), 2_500_001, -1)\n                .withTimestamp(5) // 5 seconds later, shorter time: higher difficulty\n                .build();\n\n        difficulty = etcFork3M.calcDifficulty(current, parent);\n        assertEquals(BigInteger.valueOf(276828160), difficulty);\n    }", "signature": "void testDifficultyWithExplosionShouldBeImpactedByBlockTimestamp()", "full_signature": "@Test public void testDifficultyWithExplosionShouldBeImpactedByBlockTimestamp()", "class_method_signature": "ETCFork3MTest.testDifficultyWithExplosionShouldBeImpactedByBlockTimestamp()", "testcase": true, "constructor": false, "invocations": ["build", "withTimestamp", "build", "withTimestamp", "getHash", "calcDifficulty", "assertEquals", "valueOf", "build", "withTimestamp", "build", "withTimestamp", "getHash", "calcDifficulty", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "ETCFork3M", "superclass": "extends Eip160HFConfig", "interfaces": "", "fields": [], "methods": [{"identifier": "ETCFork3M", "parameters": "(BlockchainConfig parent)", "modifiers": "public", "return": "", "signature": " ETCFork3M(BlockchainConfig parent)", "full_signature": "public  ETCFork3M(BlockchainConfig parent)", "class_method_signature": "ETCFork3M.ETCFork3M(BlockchainConfig parent)", "testcase": false, "constructor": true}, {"identifier": "getChainId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getChainId()", "full_signature": "@Override public Integer getChainId()", "class_method_signature": "ETCFork3M.getChainId()", "testcase": false, "constructor": false}, {"identifier": "eip161", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean eip161()", "full_signature": "@Override public boolean eip161()", "class_method_signature": "ETCFork3M.eip161()", "testcase": false, "constructor": false}, {"identifier": "calcDifficulty", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "full_signature": "@Override public BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}, {"identifier": "getCalcDifficultyMultiplier", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "full_signature": "@Override public BigInteger getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.getCalcDifficultyMultiplier(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}, {"identifier": "getExplosion", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "protected", "return": "int", "signature": "int getExplosion(BlockHeader curBlock, BlockHeader parent)", "full_signature": "protected int getExplosion(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.getExplosion(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/blockchain/ETCFork3M.java"}, "focal_method": {"identifier": "calcDifficulty", "parameters": "(BlockHeader curBlock, BlockHeader parent)", "modifiers": "@Override public", "return": "BigInteger", "body": "@Override\n    public BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent) {\n        BigInteger pd = parent.getDifficultyBI();\n        BigInteger quotient = pd.divide(getConstants().getDIFFICULTY_BOUND_DIVISOR());\n\n        BigInteger sign = getCalcDifficultyMultiplier(curBlock, parent);\n\n        BigInteger fromParent = pd.add(quotient.multiply(sign));\n        BigInteger difficulty = max(getConstants().getMINIMUM_DIFFICULTY(), fromParent);\n\n        int explosion = getExplosion(curBlock, parent);\n\n        if (explosion >= 0) {\n            difficulty = max(getConstants().getMINIMUM_DIFFICULTY(), difficulty.add(BigInteger.ONE.shiftLeft(explosion)));\n        }\n\n        return difficulty;\n    }", "signature": "BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "full_signature": "@Override public BigInteger calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "class_method_signature": "ETCFork3M.calcDifficulty(BlockHeader curBlock, BlockHeader parent)", "testcase": false, "constructor": false, "invocations": ["getDifficultyBI", "divide", "getDIFFICULTY_BOUND_DIVISOR", "getConstants", "getCalcDifficultyMultiplier", "add", "multiply", "max", "getMINIMUM_DIFFICULTY", "getConstants", "getExplosion", "max", "getMINIMUM_DIFFICULTY", "getConstants", "add", "shiftLeft"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}