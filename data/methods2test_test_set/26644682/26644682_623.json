{"test_class": {"identifier": "TransformerFactoryTest", "superclass": "extends TransformationBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TransformerFactory factory;", "modifier": "@Autowired\n    private", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/api/transformer/TransformerFactoryTest.java"}, "test_case": {"identifier": "getExporter_csv_exporter_should_write_csv_format", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExporter_csv_exporter_should_write_csv_format() throws Exception {\n        // given\n        Map<String, String> arguments = new HashMap<>();\n        arguments.put(ExportFormat.PREFIX + CSVFormat.ParametersCSV.FIELDS_DELIMITER, \";\");\n        arguments.put(ExportFormat.PREFIX + CSVFormat.ParametersCSV.ENCLOSURE_MODE,\n                CSVFormat.ParametersCSV.ENCLOSURE_ALL_FIELDS);\n        final OutputStream outputStream = new ByteArrayOutputStream();\n        final Configuration configuration = Configuration\n                .builder() //\n                .args(arguments) //\n                .format(CSV) //\n                .output(outputStream) //\n                .actions(IOUtils.toString(TransformerFactoryTest.class.getResourceAsStream(\"upper_case_firstname.json\"),\n                        UTF_8)) //\n                .build();\n        final Transformer transformer = factory.get(configuration);\n        final String expectedCsv = IOUtils.toString(\n                TransformerFactoryTest.class.getResourceAsStream(\"expected_export_preparation_uppercase_firstname.csv\"),\n                UTF_8);\n\n        final InputStream inputStream =\n                TransformerFactoryTest.class.getResourceAsStream(\"../../format/export_dataset.json\");\n        try (JsonParser parser = mapper.getFactory().createParser(inputStream)) {\n            final DataSet dataSet = mapper.readerFor(DataSet.class).readValue(parser);\n\n            // when\n            transformer.buildExecutable(dataSet, configuration).execute();\n            // then\n            assertThat(outputStream.toString()).isEqualTo(expectedCsv);\n        }\n\n    }", "signature": "void getExporter_csv_exporter_should_write_csv_format()", "full_signature": "@Test public void getExporter_csv_exporter_should_write_csv_format()", "class_method_signature": "TransformerFactoryTest.getExporter_csv_exporter_should_write_csv_format()", "testcase": true, "constructor": false, "invocations": ["put", "put", "build", "actions", "output", "format", "args", "builder", "toString", "getResourceAsStream", "get", "toString", "getResourceAsStream", "getResourceAsStream", "createParser", "getFactory", "readValue", "readerFor", "execute", "buildExecutable", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "TransformerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "TransformerFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " TransformerFactory()", "full_signature": "private  TransformerFactory()", "class_method_signature": "TransformerFactory.TransformerFactory()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "Transformer", "signature": "Transformer get(Configuration configuration)", "full_signature": "public Transformer get(Configuration configuration)", "class_method_signature": "TransformerFactory.get(Configuration configuration)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/api/transformer/TransformerFactory.java"}, "focal_method": {"identifier": "get", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "Transformer", "body": "public Transformer get(Configuration configuration) {\n        List<Transformer> electedTransformers = context\n                .getBeansOfType(Transformer.class)\n                .values()\n                .stream() //\n                .filter(transformer -> transformer.accept(configuration)) //\n                .collect(Collectors.toList());\n        if (electedTransformers.isEmpty()) {\n            throw new IllegalStateException(\"No transformers eligible for configuration.\");\n        }\n        if (electedTransformers.size() > 1) {\n            throw new IllegalStateException(\"Too many transformers eligible for configuration (got \"\n                    + electedTransformers.size() + \": \" + Arrays.toString(electedTransformers.toArray()) + \")\");\n        }\n        return electedTransformers.get(0);\n    }", "signature": "Transformer get(Configuration configuration)", "full_signature": "public Transformer get(Configuration configuration)", "class_method_signature": "TransformerFactory.get(Configuration configuration)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "stream", "values", "getBeansOfType", "accept", "toList", "isEmpty", "size", "size", "toString", "toArray", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}