{"test_class": {"identifier": "ResourceExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/rest/ResourceExceptionTest.java"}, "test_case": {"identifier": "testCodeForSymbol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCodeForSymbol() {\n        assertEquals(ResourceException.codeForSymbol(\"ok\"), 200);\n        assertEquals(ResourceException.codeForSymbol(\"CREATED\"), 201);\n        assertEquals(ResourceException.codeForSymbol(\"ACCEPTED\"), 202);\n        assertEquals(ResourceException.codeForSymbol(\"NO_CONTENT\"), 204);\n        assertEquals(ResourceException.codeForSymbol(\"MOVED_PERMANENTLY\"), 301);\n        assertEquals(ResourceException.codeForSymbol(\"FOUND\"), 302);\n        assertEquals(ResourceException.codeForSymbol(\"SEE_OTHER\"), 303);\n        assertEquals(ResourceException.codeForSymbol(\"NOT_MODIFIED\"), 304);\n        assertEquals(ResourceException.codeForSymbol(\"TEMPORARY_REDIRECT\"), 307);\n        assertEquals(ResourceException.codeForSymbol(\"BAD_REQUEST\"), 400);\n        assertEquals(ResourceException.codeForSymbol(\"FORBIDDEN\"), 403);\n        assertEquals(ResourceException.codeForSymbol(\"UNAUTHORIZED\"), 401);\n        assertEquals(ResourceException.codeForSymbol(\"NOT_FOUND\"), 404);\n        assertEquals(ResourceException.codeForSymbol(\"CONFLICT\"), 409);\n        assertEquals(ResourceException.codeForSymbol(\"GONE\"), 410);\n        assertEquals(ResourceException.codeForSymbol(\"PRECONDITION_FAILED\"), 412);\n        assertEquals(ResourceException.codeForSymbol(\"UNSUPPORTED_MEDIA_TYPE\"), 415);\n        assertEquals(ResourceException.codeForSymbol(\"INTERNAL_SERVER_ERROR\"), 500);\n        assertEquals(ResourceException.codeForSymbol(\"NOT_IMPLEMENTED\"), 501);\n        assertEquals(ResourceException.codeForSymbol(\"SERVICE_UNAVAILABLE\"), 503);\n        assertEquals(ResourceException.codeForSymbol(\"UNAUTHORIZED\"), 401);\n        assertEquals(ResourceException.codeForSymbol(\"1111\"), 1111);\n        assertEquals(ResourceException.codeForSymbol(\"abc\"), 0);\n    }", "signature": "void testCodeForSymbol()", "full_signature": "@Test public void testCodeForSymbol()", "class_method_signature": "ResourceExceptionTest.testCodeForSymbol()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol", "assertEquals", "codeForSymbol"]}, "focal_class": {"identifier": "ResourceException", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 2289910486634456175L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2289910486634456175L", "var_name": "serialVersionUID"}, {"original_string": "public final static int OK = 200;", "modifier": "public final static", "type": "int", "declarator": "OK = 200", "var_name": "OK"}, {"original_string": "public final static int CREATED = 201;", "modifier": "public final static", "type": "int", "declarator": "CREATED = 201", "var_name": "CREATED"}, {"original_string": "public final static int ACCEPTED = 202;", "modifier": "public final static", "type": "int", "declarator": "ACCEPTED = 202", "var_name": "ACCEPTED"}, {"original_string": "public final static int NO_CONTENT = 204;", "modifier": "public final static", "type": "int", "declarator": "NO_CONTENT = 204", "var_name": "NO_CONTENT"}, {"original_string": "public final static int MOVED_PERMANENTLY = 301;", "modifier": "public final static", "type": "int", "declarator": "MOVED_PERMANENTLY = 301", "var_name": "MOVED_PERMANENTLY"}, {"original_string": "public final static int FOUND = 302;", "modifier": "public final static", "type": "int", "declarator": "FOUND = 302", "var_name": "FOUND"}, {"original_string": "public final static int SEE_OTHER = 303;", "modifier": "public final static", "type": "int", "declarator": "SEE_OTHER = 303", "var_name": "SEE_OTHER"}, {"original_string": "public final static int NOT_MODIFIED = 304;", "modifier": "public final static", "type": "int", "declarator": "NOT_MODIFIED = 304", "var_name": "NOT_MODIFIED"}, {"original_string": "public final static int TEMPORARY_REDIRECT = 307;", "modifier": "public final static", "type": "int", "declarator": "TEMPORARY_REDIRECT = 307", "var_name": "TEMPORARY_REDIRECT"}, {"original_string": "public final static int BAD_REQUEST = 400;", "modifier": "public final static", "type": "int", "declarator": "BAD_REQUEST = 400", "var_name": "BAD_REQUEST"}, {"original_string": "public final static int UNAUTHORIZED = 401;", "modifier": "public final static", "type": "int", "declarator": "UNAUTHORIZED = 401", "var_name": "UNAUTHORIZED"}, {"original_string": "public final static int FORBIDDEN = 403;", "modifier": "public final static", "type": "int", "declarator": "FORBIDDEN = 403", "var_name": "FORBIDDEN"}, {"original_string": "public final static int NOT_FOUND = 404;", "modifier": "public final static", "type": "int", "declarator": "NOT_FOUND = 404", "var_name": "NOT_FOUND"}, {"original_string": "public final static int CONFLICT = 409;", "modifier": "public final static", "type": "int", "declarator": "CONFLICT = 409", "var_name": "CONFLICT"}, {"original_string": "public final static int GONE = 410;", "modifier": "public final static", "type": "int", "declarator": "GONE = 410", "var_name": "GONE"}, {"original_string": "public final static int PRECONDITION_FAILED = 412;", "modifier": "public final static", "type": "int", "declarator": "PRECONDITION_FAILED = 412", "var_name": "PRECONDITION_FAILED"}, {"original_string": "public final static int UNSUPPORTED_MEDIA_TYPE = 415;", "modifier": "public final static", "type": "int", "declarator": "UNSUPPORTED_MEDIA_TYPE = 415", "var_name": "UNSUPPORTED_MEDIA_TYPE"}, {"original_string": "public final static int INTERNAL_SERVER_ERROR = 500;", "modifier": "public final static", "type": "int", "declarator": "INTERNAL_SERVER_ERROR = 500", "var_name": "INTERNAL_SERVER_ERROR"}, {"original_string": "public final static int NOT_IMPLEMENTED = 501;", "modifier": "public final static", "type": "int", "declarator": "NOT_IMPLEMENTED = 501", "var_name": "NOT_IMPLEMENTED"}, {"original_string": "public final static int SERVICE_UNAVAILABLE = 503;", "modifier": "public final static", "type": "int", "declarator": "SERVICE_UNAVAILABLE = 503", "var_name": "SERVICE_UNAVAILABLE"}, {"original_string": "int code;", "modifier": "", "type": "int", "declarator": "code", "var_name": "code"}, {"original_string": "Object data;", "modifier": "", "type": "Object", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "codeForSymbol", "parameters": "(String sym)", "modifiers": "public static", "return": "int", "signature": "int codeForSymbol(String sym)", "full_signature": "public static int codeForSymbol(String sym)", "class_method_signature": "ResourceException.codeForSymbol(String sym)", "testcase": false, "constructor": false}, {"identifier": "symbolForCode", "parameters": "(int code)", "modifiers": "public static", "return": "String", "signature": "String symbolForCode(int code)", "full_signature": "public static String symbolForCode(int code)", "class_method_signature": "ResourceException.symbolForCode(int code)", "testcase": false, "constructor": false}, {"identifier": "ResourceException", "parameters": "(int code)", "modifiers": "public", "return": "", "signature": " ResourceException(int code)", "full_signature": "public  ResourceException(int code)", "class_method_signature": "ResourceException.ResourceException(int code)", "testcase": false, "constructor": true}, {"identifier": "ResourceException", "parameters": "(int code, Object data)", "modifiers": "public", "return": "", "signature": " ResourceException(int code, Object data)", "full_signature": "public  ResourceException(int code, Object data)", "class_method_signature": "ResourceException.ResourceException(int code, Object data)", "testcase": false, "constructor": true}, {"identifier": "getCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCode()", "full_signature": "public int getCode()", "class_method_signature": "ResourceException.getCode()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getData()", "full_signature": "public Object getData()", "class_method_signature": "ResourceException.getData()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(Class<T> cl)", "modifiers": "public", "return": "T", "signature": "T getData(Class<T> cl)", "full_signature": "public T getData(Class<T> cl)", "class_method_signature": "ResourceException.getData(Class<T> cl)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/ResourceException.java"}, "focal_method": {"identifier": "codeForSymbol", "parameters": "(String sym)", "modifiers": "public static", "return": "int", "body": "public static int codeForSymbol(String sym) {\n        String symbol = sym.toUpperCase();\n        if (symbol.contains(\"OK\")) {\n            return OK;\n        } else if (\"CREATED\".equals(symbol)) {\n            return CREATED;\n        } else if (\"ACCEPTED\".equals(symbol)) {\n            return ACCEPTED;\n        } else if (\"NO_CONTENT\".equals(symbol)) {\n            return NO_CONTENT;\n        } else if (\"MOVED_PERMANENTLY\".equals(symbol)) {\n            return MOVED_PERMANENTLY;\n        } else if (\"FOUND\".equals(symbol)) {\n            return FOUND;\n        } else if (\"SEE_OTHER\".equals(symbol)) {\n            return SEE_OTHER;\n        } else if (\"NOT_MODIFIED\".equals(symbol)) {\n            return NOT_MODIFIED;\n        } else if (\"TEMPORARY_REDIRECT\".equals(symbol)) {\n            return TEMPORARY_REDIRECT;\n        } else if (\"BAD_REQUEST\".equals(symbol)) {\n            return BAD_REQUEST;\n        } else if (\"UNAUTHORIZED\".equals(symbol)) {\n            return UNAUTHORIZED;\n        } else if (\"FORBIDDEN\".equals(symbol)) {\n            return FORBIDDEN;\n        } else if (\"NOT_FOUND\".equals(symbol)) {\n            return NOT_FOUND;\n        } else if (\"CONFLICT\".equals(symbol)) {\n            return CONFLICT;\n        } else if (\"GONE\".equals(symbol)) {\n            return GONE;\n        } else if (\"PRECONDITION_FAILED\".equals(symbol)) {\n            return PRECONDITION_FAILED;\n        } else if (\"INTERNAL_SERVER_ERROR\".equals(symbol)) {\n            return INTERNAL_SERVER_ERROR;\n        } else if (\"NOT_IMPLEMENTED\".equals(symbol)) {\n            return NOT_IMPLEMENTED;\n        } else if (\"UNSUPPORTED_MEDIA_TYPE\".equals(symbol)) {\n            return UNSUPPORTED_MEDIA_TYPE;\n        } else if (\"SERVICE_UNAVAILABLE\".equals(symbol)) {\n            return SERVICE_UNAVAILABLE;\n        } else {\n            try {\n                return Integer.parseInt(sym);\n            } catch (NumberFormatException ignored) {\n            }\n        }\n        return 0;\n    }", "signature": "int codeForSymbol(String sym)", "full_signature": "public static int codeForSymbol(String sym)", "class_method_signature": "ResourceException.codeForSymbol(String sym)", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "contains", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "parseInt"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}