{"test_class": {"identifier": "OutlierSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/tramo/OutlierSpecTest.java"}, "test_case": {"identifier": "testSetDeltaTCLowerBound", "parameters": "()", "modifiers": "@Test(expected = TramoException.class) public", "return": "void", "body": "@Test(expected = TramoException.class)\n    public void testSetDeltaTCLowerBound() {\n        OutlierSpec spec = new OutlierSpec();\n        spec.setCriticalValue(.2);\n    }", "signature": "void testSetDeltaTCLowerBound()", "full_signature": "@Test(expected = TramoException.class) public void testSetDeltaTCLowerBound()", "class_method_signature": "OutlierSpecTest.testSetDeltaTCLowerBound()", "testcase": true, "constructor": false, "invocations": ["setCriticalValue"]}, "focal_class": {"identifier": "OutlierSpec", "superclass": "", "interfaces": "implements Cloneable, InformationSetSerializable", "fields": [{"original_string": "public static final String SPAN = \"span\",\n            TYPES = \"types\",\n            VA = \"va\",\n            EML = \"eml\",\n            DELTATC = \"deltatc\";", "modifier": "public static final", "type": "String", "declarator": "SPAN = \"span\"", "var_name": "SPAN"}, {"original_string": "private ArrayList<OutlierType> types_;", "modifier": "private", "type": "ArrayList<OutlierType>", "declarator": "types_", "var_name": "types_"}, {"original_string": "private double tc_ = DEF_DELTATC;", "modifier": "private", "type": "double", "declarator": "tc_ = DEF_DELTATC", "var_name": "tc_"}, {"original_string": "private boolean eml_ = false;", "modifier": "private", "type": "boolean", "declarator": "eml_ = false", "var_name": "eml_"}, {"original_string": "private double cv_ = 0;", "modifier": "private", "type": "double", "declarator": "cv_ = 0", "var_name": "cv_"}, {"original_string": "private TsPeriodSelector span_;", "modifier": "private", "type": "TsPeriodSelector", "declarator": "span_", "var_name": "span_"}, {"original_string": "public static final double DEF_DELTATC = .7;", "modifier": "public static final", "type": "double", "declarator": "DEF_DELTATC = .7", "var_name": "DEF_DELTATC"}, {"original_string": "public static final boolean DEF_EML = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEF_EML = false", "var_name": "DEF_EML"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "OutlierSpec.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "OutlierSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " OutlierSpec()", "full_signature": "public  OutlierSpec()", "class_method_signature": "OutlierSpec.OutlierSpec()", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "OutlierSpec.reset()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "OutlierSpec", "signature": "OutlierSpec clone()", "full_signature": "@Override public OutlierSpec clone()", "class_method_signature": "OutlierSpec.clone()", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "OutlierType[]", "signature": "OutlierType[] getTypes()", "full_signature": "public OutlierType[] getTypes()", "class_method_signature": "OutlierSpec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "setTypes", "parameters": "(OutlierType[] types)", "modifiers": "public", "return": "void", "signature": "void setTypes(OutlierType[] types)", "full_signature": "public void setTypes(OutlierType[] types)", "class_method_signature": "OutlierSpec.setTypes(OutlierType[] types)", "testcase": false, "constructor": false}, {"identifier": "clearTypes", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearTypes()", "full_signature": "public void clearTypes()", "class_method_signature": "OutlierSpec.clearTypes()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(OutlierType type)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(OutlierType type)", "full_signature": "public boolean contains(OutlierType type)", "class_method_signature": "OutlierSpec.contains(OutlierType type)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(OutlierType type)", "modifiers": "public", "return": "void", "signature": "void add(OutlierType type)", "full_signature": "public void add(OutlierType type)", "class_method_signature": "OutlierSpec.add(OutlierType type)", "testcase": false, "constructor": false}, {"identifier": "addRange", "parameters": "(Collection<OutlierType> types)", "modifiers": "public", "return": "void", "signature": "void addRange(Collection<OutlierType> types)", "full_signature": "public void addRange(Collection<OutlierType> types)", "class_method_signature": "OutlierSpec.addRange(Collection<OutlierType> types)", "testcase": false, "constructor": false}, {"identifier": "getDeltaTC", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeltaTC()", "full_signature": "public double getDeltaTC()", "class_method_signature": "OutlierSpec.getDeltaTC()", "testcase": false, "constructor": false}, {"identifier": "setDeltaTC", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setDeltaTC(double value)", "full_signature": "public void setDeltaTC(double value)", "class_method_signature": "OutlierSpec.setDeltaTC(double value)", "testcase": false, "constructor": false}, {"identifier": "getCriticalValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCriticalValue()", "full_signature": "public double getCriticalValue()", "class_method_signature": "OutlierSpec.getCriticalValue()", "testcase": false, "constructor": false}, {"identifier": "setCriticalValue", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setCriticalValue(double value)", "full_signature": "public void setCriticalValue(double value)", "class_method_signature": "OutlierSpec.setCriticalValue(double value)", "testcase": false, "constructor": false}, {"identifier": "getSpan", "parameters": "()", "modifiers": "public", "return": "TsPeriodSelector", "signature": "TsPeriodSelector getSpan()", "full_signature": "public TsPeriodSelector getSpan()", "class_method_signature": "OutlierSpec.getSpan()", "testcase": false, "constructor": false}, {"identifier": "setSpan", "parameters": "(TsPeriodSelector value)", "modifiers": "public", "return": "void", "signature": "void setSpan(TsPeriodSelector value)", "full_signature": "public void setSpan(TsPeriodSelector value)", "class_method_signature": "OutlierSpec.setSpan(TsPeriodSelector value)", "testcase": false, "constructor": false}, {"identifier": "isEML", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEML()", "full_signature": "public boolean isEML()", "class_method_signature": "OutlierSpec.isEML()", "testcase": false, "constructor": false}, {"identifier": "setEML", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setEML(boolean value)", "full_signature": "public void setEML(boolean value)", "class_method_signature": "OutlierSpec.setEML(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getAIO", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAIO()", "full_signature": "public int getAIO()", "class_method_signature": "OutlierSpec.getAIO()", "testcase": false, "constructor": false}, {"identifier": "setAIO", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void setAIO(int value)", "full_signature": "public void setAIO(int value)", "class_method_signature": "OutlierSpec.setAIO(int value)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "OutlierSpec.isDefault()", "testcase": false, "constructor": false}, {"identifier": "isUsed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsed()", "full_signature": "public boolean isUsed()", "class_method_signature": "OutlierSpec.isUsed()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "OutlierSpec.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(OutlierSpec other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(OutlierSpec other)", "full_signature": "private boolean equals(OutlierSpec other)", "class_method_signature": "OutlierSpec.equals(OutlierSpec other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "OutlierSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(OutlierType outlierType)", "modifiers": "public", "return": "void", "signature": "void remove(OutlierType outlierType)", "full_signature": "public void remove(OutlierType outlierType)", "class_method_signature": "OutlierSpec.remove(OutlierType outlierType)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "OutlierSpec.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "OutlierSpec.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/tramo/OutlierSpec.java"}, "focal_method": {"identifier": "setCriticalValue", "parameters": "(double value)", "modifiers": "public", "return": "void", "body": "public void setCriticalValue(double value) {\n        if (value != 0 && value < 2) {\n            throw new TramoException(\"Critical value should be not be smaller than 2.0\");\n        }\n        cv_ = value;\n    }", "signature": "void setCriticalValue(double value)", "full_signature": "public void setCriticalValue(double value)", "class_method_signature": "OutlierSpec.setCriticalValue(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}