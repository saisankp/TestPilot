{"test_class": {"identifier": "ServiceTemplateResourceTest", "superclass": "extends AbstractResourceTest", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResourceTest.java"}, "test_case": {"identifier": "injectNodeTemplates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void injectNodeTemplates() throws Exception {\n        this.setRevisionTo(\"d535f69bf50b2c4eda437be46b7ba1f85c4ff3bc\");\n        this.assertPost(\"servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Fponyuniverse%252Finjector/FoodandHouseInjectionTest/injector/replace\", \"servicetemplates/ServiceTemplateResource-injectNodeTemplates-input2.json\");\n    }", "signature": "void injectNodeTemplates()", "full_signature": "@Test public void injectNodeTemplates()", "class_method_signature": "ServiceTemplateResourceTest.injectNodeTemplates()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "assertPost"]}, "focal_class": {"identifier": "ServiceTemplateResource", "superclass": "extends AbstractComponentInstanceResourceContainingATopology", "interfaces": "implements IHasName", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ServiceTemplateResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ServiceTemplateResource.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "ServiceTemplateResource", "parameters": "(ServiceTemplateId id)", "modifiers": "public", "return": "", "signature": " ServiceTemplateResource(ServiceTemplateId id)", "full_signature": "public  ServiceTemplateResource(ServiceTemplateId id)", "class_method_signature": "ServiceTemplateResource.ServiceTemplateResource(ServiceTemplateId id)", "testcase": false, "constructor": true}, {"identifier": "getServiceTemplate", "parameters": "()", "modifiers": "public", "return": "TServiceTemplate", "signature": "TServiceTemplate getServiceTemplate()", "full_signature": "public TServiceTemplate getServiceTemplate()", "class_method_signature": "ServiceTemplateResource.getServiceTemplate()", "testcase": false, "constructor": false}, {"identifier": "setTopology", "parameters": "(TTopologyTemplate topologyTemplate, String type)", "modifiers": "@Override public", "return": "void", "signature": "void setTopology(TTopologyTemplate topologyTemplate, String type)", "full_signature": "@Override public void setTopology(TTopologyTemplate topologyTemplate, String type)", "class_method_signature": "ServiceTemplateResource.setTopology(TTopologyTemplate topologyTemplate, String type)", "testcase": false, "constructor": false}, {"identifier": "getTopologyTemplateResource", "parameters": "()", "modifiers": "@Path(\"topologytemplate/\") public", "return": "TopologyTemplateResource", "signature": "TopologyTemplateResource getTopologyTemplateResource()", "full_signature": "@Path(\"topologytemplate/\") public TopologyTemplateResource getTopologyTemplateResource()", "class_method_signature": "ServiceTemplateResource.getTopologyTemplateResource()", "testcase": false, "constructor": false}, {"identifier": "getPlansResource", "parameters": "()", "modifiers": "@Path(\"plans/\") public", "return": "PlansResource", "signature": "PlansResource getPlansResource()", "full_signature": "@Path(\"plans/\") public PlansResource getPlansResource()", "class_method_signature": "ServiceTemplateResource.getPlansResource()", "testcase": false, "constructor": false}, {"identifier": "getSelfServicePortalResource", "parameters": "()", "modifiers": "@Path(\"selfserviceportal/\") public", "return": "SelfServicePortalResource", "signature": "SelfServicePortalResource getSelfServicePortalResource()", "full_signature": "@Path(\"selfserviceportal/\") public SelfServicePortalResource getSelfServicePortalResource()", "class_method_signature": "ServiceTemplateResource.getSelfServicePortalResource()", "testcase": false, "constructor": false}, {"identifier": "getBoundaryDefinitionsResource", "parameters": "()", "modifiers": "@Path(\"boundarydefinitions/\") public", "return": "BoundaryDefinitionsResource", "signature": "BoundaryDefinitionsResource getBoundaryDefinitionsResource()", "full_signature": "@Path(\"boundarydefinitions/\") public BoundaryDefinitionsResource getBoundaryDefinitionsResource()", "class_method_signature": "ServiceTemplateResource.getBoundaryDefinitionsResource()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ServiceTemplateResource.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Override public", "return": "Response", "signature": "Response setName(String name)", "full_signature": "@Override public Response setName(String name)", "class_method_signature": "ServiceTemplateResource.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getSubstitutableNodeTypeAsResponse", "parameters": "()", "modifiers": "@GET @ApiOperation(value = \"Returns the associated node type, which can be substituted by this service template.\") @ApiResponses(value = { @ApiResponse(code = 200, response = QName.class, message = \"QName of the form {namespace}localName\") }) @Path(\"substitutableNodeType\") @Produces(MediaType.TEXT_PLAIN) public", "return": "Response", "signature": "Response getSubstitutableNodeTypeAsResponse()", "full_signature": "@GET @ApiOperation(value = \"Returns the associated node type, which can be substituted by this service template.\") @ApiResponses(value = { @ApiResponse(code = 200, response = QName.class, message = \"QName of the form {namespace}localName\") }) @Path(\"substitutableNodeType\") @Produces(MediaType.TEXT_PLAIN) public Response getSubstitutableNodeTypeAsResponse()", "class_method_signature": "ServiceTemplateResource.getSubstitutableNodeTypeAsResponse()", "testcase": false, "constructor": false}, {"identifier": "getSubstitutableNodeType", "parameters": "()", "modifiers": "public", "return": "QName", "signature": "QName getSubstitutableNodeType()", "full_signature": "public QName getSubstitutableNodeType()", "class_method_signature": "ServiceTemplateResource.getSubstitutableNodeType()", "testcase": false, "constructor": false}, {"identifier": "deleteSubstitutableNodeType", "parameters": "()", "modifiers": "@DELETE @ApiOperation(value = \"Removes the association to substitutable node type\") @Path(\"substitutableNodeType\") public", "return": "Response", "signature": "Response deleteSubstitutableNodeType()", "full_signature": "@DELETE @ApiOperation(value = \"Removes the association to substitutable node type\") @Path(\"substitutableNodeType\") public Response deleteSubstitutableNodeType()", "class_method_signature": "ServiceTemplateResource.deleteSubstitutableNodeType()", "testcase": false, "constructor": false}, {"identifier": "getInjectorOptions", "parameters": "()", "modifiers": "@GET @Path(\"injector/options\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public", "return": "Response", "signature": "Response getInjectorOptions()", "full_signature": "@GET @Path(\"injector/options\") @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public Response getInjectorOptions()", "class_method_signature": "ServiceTemplateResource.getInjectorOptions()", "testcase": false, "constructor": false}, {"identifier": "injectNodeTemplates", "parameters": "(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"injector/replace\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public", "return": "Response", "signature": "Response injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"injector/replace\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public Response injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "class_method_signature": "ServiceTemplateResource.injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "complianceChecking", "parameters": "(@Context UriInfo uriInfo)", "modifiers": "@Path(\"constraintchecking\") @Produces(MediaType.APPLICATION_XML) @POST public", "return": "Response", "signature": "Response complianceChecking(@Context UriInfo uriInfo)", "full_signature": "@Path(\"constraintchecking\") @Produces(MediaType.APPLICATION_XML) @POST public Response complianceChecking(@Context UriInfo uriInfo)", "class_method_signature": "ServiceTemplateResource.complianceChecking(@Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "substitute", "parameters": "()", "modifiers": "@Path(\"substitute\") @Produces(MediaType.APPLICATION_JSON) @GET public", "return": "ServiceTemplateId", "signature": "ServiceTemplateId substitute()", "full_signature": "@Path(\"substitute\") @Produces(MediaType.APPLICATION_JSON) @GET public ServiceTemplateId substitute()", "class_method_signature": "ServiceTemplateResource.substitute()", "testcase": false, "constructor": false}, {"identifier": "createNewStatefulVersion", "parameters": "()", "modifiers": "@POST() @Path(\"createnewstatefulversion\") @Produces( {MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML}) public", "return": "Response", "signature": "Response createNewStatefulVersion()", "full_signature": "@POST() @Path(\"createnewstatefulversion\") @Produces( {MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML}) public Response createNewStatefulVersion()", "class_method_signature": "ServiceTemplateResource.createNewStatefulVersion()", "testcase": false, "constructor": false}, {"identifier": "threatModeling", "parameters": "()", "modifiers": "@Path(\"threatmodeling\") @Produces(MediaType.APPLICATION_JSON) @GET public", "return": "ThreatAssessment", "signature": "ThreatAssessment threatModeling()", "full_signature": "@Path(\"threatmodeling\") @Produces(MediaType.APPLICATION_JSON) @GET public ThreatAssessment threatModeling()", "class_method_signature": "ServiceTemplateResource.threatModeling()", "testcase": false, "constructor": false}, {"identifier": "createNewElement", "parameters": "()", "modifiers": "@Override protected", "return": "TExtensibleElements", "signature": "TExtensibleElements createNewElement()", "full_signature": "@Override protected TExtensibleElements createNewElement()", "class_method_signature": "ServiceTemplateResource.createNewElement()", "testcase": false, "constructor": false}, {"identifier": "synchronizeReferences", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void synchronizeReferences()", "full_signature": "@Override public void synchronizeReferences()", "class_method_signature": "ServiceTemplateResource.synchronizeReferences()", "testcase": false, "constructor": false}, {"identifier": "getParameterResource", "parameters": "()", "modifiers": "@Path(\"parameters\") public", "return": "ParameterResource", "signature": "ParameterResource getParameterResource()", "full_signature": "@Path(\"parameters\") public ParameterResource getParameterResource()", "class_method_signature": "ServiceTemplateResource.getParameterResource()", "testcase": false, "constructor": false}, {"identifier": "getToscaLightCompatibility", "parameters": "()", "modifiers": "@Path(\"toscalight\") @Produces(MediaType.APPLICATION_JSON) @GET public", "return": "Map<String, Object>", "signature": "Map<String, Object> getToscaLightCompatibility()", "full_signature": "@Path(\"toscalight\") @Produces(MediaType.APPLICATION_JSON) @GET public Map<String, Object> getToscaLightCompatibility()", "class_method_signature": "ServiceTemplateResource.getToscaLightCompatibility()", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResource.java"}, "focal_method": {"identifier": "injectNodeTemplates", "parameters": "(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"injector/replace\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public", "return": "Response", "body": "@POST\n    @Path(\"injector/replace\")\n    @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON})\n    @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON})\n    public Response injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo) throws Exception {\n\n        if (injectorReplaceData.hostInjections != null) {\n            Collection<TTopologyTemplate> hostInjectorTopologyTemplates = injectorReplaceData.hostInjections.values();\n            hostInjectorTopologyTemplates.forEach(t -> {\n                try {\n                    ModelUtilities.patchAnyAttributes(t.getNodeTemplates());\n                } catch (IOException e) {\n                    LOGGER.error(\"XML was invalid\", e);\n                }\n            });\n        }\n        if (injectorReplaceData.connectionInjections != null) {\n            Collection<TTopologyTemplate> connectionInjectorTopologyTemplates = injectorReplaceData.connectionInjections.values();\n            connectionInjectorTopologyTemplates.forEach(t -> {\n                try {\n                    ModelUtilities.patchAnyAttributes(t.getNodeTemplates());\n                } catch (IOException e) {\n                    LOGGER.error(\"XML was invalid\", e);\n                }\n            });\n        }\n\n        Splitting splitting = new Splitting();\n        TTopologyTemplate matchedHostsTopologyTemplate;\n        TTopologyTemplate matchedConnectedTopologyTemplate;\n\n        //Test Method findOpenRequirements\n        Map<TRequirement, String> requirementsAndMatchingBasisCapabilityTypes =\n            splitting.getOpenRequirementsAndMatchingBasisCapabilityTypeNames(this.getServiceTemplate().getTopologyTemplate());\n        // Output check\n        for (TRequirement req : requirementsAndMatchingBasisCapabilityTypes.keySet()) {\n            System.out.println(\"open Requirement: \" + req.getId());\n            System.out.println(\"matchingbasisType: \" + requirementsAndMatchingBasisCapabilityTypes.get(req));\n        }\n        // End Output check\n\n        if (requirementsAndMatchingBasisCapabilityTypes.containsValue(\"Container\")) {\n            matchedHostsTopologyTemplate = splitting.injectNodeTemplates(this.getServiceTemplate().getTopologyTemplate(), injectorReplaceData.hostInjections, InjectRemoval.REMOVE_REPLACED_AND_SUCCESSORS);\n\n            if (requirementsAndMatchingBasisCapabilityTypes.containsValue(\"Endpoint\")) {\n                matchedConnectedTopologyTemplate = splitting.injectConnectionNodeTemplates(matchedHostsTopologyTemplate, injectorReplaceData.connectionInjections);\n            } else {\n                matchedConnectedTopologyTemplate = matchedHostsTopologyTemplate;\n            }\n        } else if (requirementsAndMatchingBasisCapabilityTypes.containsValue(\"Endpoint\")) {\n            matchedConnectedTopologyTemplate = splitting.injectConnectionNodeTemplates(this.getServiceTemplate().getTopologyTemplate(), injectorReplaceData.connectionInjections);\n        } else {\n            throw new SplittingException(\"No open Requirements which can be matched\");\n        }\n\n        TTopologyTemplate daSpecifiedTopology = matchedConnectedTopologyTemplate;\n\n        //Start additional functionality Driver Injection\n        if (!DASpecification.getNodeTemplatesWithAbstractDAs(matchedConnectedTopologyTemplate).isEmpty() &&\n            DASpecification.getNodeTemplatesWithAbstractDAs(matchedConnectedTopologyTemplate) != null) {\n            daSpecifiedTopology = DriverInjection.injectDriver(matchedConnectedTopologyTemplate);\n        }\n        //End additional functionality Driver Injection\n\n        this.getServiceTemplate().setTopologyTemplate(daSpecifiedTopology);\n\n        LOGGER.debug(\"Persisting...\");\n        RestUtils.persist(this);\n        LOGGER.debug(\"Persisted.\");\n\n        //No renaming of the Service Template allowed because of the plans\n\n        URI url = uriInfo.getBaseUri().resolve(RestUtils.getAbsoluteURL(id));\n        LOGGER.debug(\"URI of the old and new service template {}\", url.toString());\n        return Response.created(url).build();\n    }", "signature": "Response injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"injector/replace\") @Consumes( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) @Produces( {MediaType.APPLICATION_XML, MediaType.TEXT_XML, MediaType.APPLICATION_JSON}) public Response injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "class_method_signature": "ServiceTemplateResource.injectNodeTemplates(InjectorReplaceData injectorReplaceData, @Context UriInfo uriInfo)", "testcase": false, "constructor": false, "invocations": ["values", "forEach", "patchAnyAttributes", "getNodeTemplates", "error", "values", "forEach", "patchAnyAttributes", "getNodeTemplates", "error", "getOpenRequirementsAndMatchingBasisCapabilityTypeNames", "getTopologyTemplate", "getServiceTemplate", "keySet", "println", "getId", "println", "get", "containsValue", "injectNodeTemplates", "getTopologyTemplate", "getServiceTemplate", "containsValue", "injectConnectionNodeTemplates", "containsValue", "injectConnectionNodeTemplates", "getTopologyTemplate", "getServiceTemplate", "isEmpty", "getNodeTemplatesWithAbstractDAs", "getNodeTemplatesWithAbstractDAs", "injectDriver", "setTopologyTemplate", "getServiceTemplate", "debug", "persist", "debug", "resolve", "getBaseUri", "getAbsoluteURL", "debug", "toString", "build", "created"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}