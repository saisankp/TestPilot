{"test_class": {"identifier": "CommonUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/CommonUtilsTest.java"}, "test_case": {"identifier": "parseBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseBoolean() {\n        Assert.assertTrue(CommonUtils.parseBoolean(null, true));\n        Assert.assertTrue(CommonUtils.parseBoolean(\"true\", true));\n        Assert.assertFalse(CommonUtils.parseBoolean(\"falSE\", true));\n        Assert.assertFalse(CommonUtils.parseBoolean(\"xxx\", true));\n\n        Assert.assertFalse(CommonUtils.parseBoolean(null, false));\n        Assert.assertTrue(CommonUtils.parseBoolean(\"trUe\", false));\n        Assert.assertFalse(CommonUtils.parseBoolean(\"falSE\", false));\n        Assert.assertFalse(CommonUtils.parseBoolean(\"xxx\", false));\n    }", "signature": "void parseBoolean()", "full_signature": "@Test public void parseBoolean()", "class_method_signature": "CommonUtilsTest.parseBoolean()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "parseBoolean", "assertTrue", "parseBoolean", "assertFalse", "parseBoolean", "assertFalse", "parseBoolean", "assertFalse", "parseBoolean", "assertTrue", "parseBoolean", "assertFalse", "parseBoolean", "assertFalse", "parseBoolean"]}, "focal_class": {"identifier": "CommonUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "putToConcurrentMap", "parameters": "(ConcurrentMap<K, V> map, K key, V value)", "modifiers": "public static", "return": "V", "signature": "V putToConcurrentMap(ConcurrentMap<K, V> map, K key, V value)", "full_signature": "public static V putToConcurrentMap(ConcurrentMap<K, V> map, K key, V value)", "class_method_signature": "CommonUtils.putToConcurrentMap(ConcurrentMap<K, V> map, K key, V value)", "testcase": false, "constructor": false}, {"identifier": "isTrue", "parameters": "(String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTrue(String b)", "full_signature": "public static boolean isTrue(String b)", "class_method_signature": "CommonUtils.isTrue(String b)", "testcase": false, "constructor": false}, {"identifier": "isTrue", "parameters": "(Boolean b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTrue(Boolean b)", "full_signature": "public static boolean isTrue(Boolean b)", "class_method_signature": "CommonUtils.isTrue(Boolean b)", "testcase": false, "constructor": false}, {"identifier": "isFalse", "parameters": "(Boolean b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFalse(Boolean b)", "full_signature": "public static boolean isFalse(Boolean b)", "class_method_signature": "CommonUtils.isFalse(Boolean b)", "testcase": false, "constructor": false}, {"identifier": "isFalse", "parameters": "(String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFalse(String b)", "full_signature": "public static boolean isFalse(String b)", "class_method_signature": "CommonUtils.isFalse(String b)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection collection)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Collection collection)", "full_signature": "public static boolean isEmpty(Collection collection)", "class_method_signature": "CommonUtils.isEmpty(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Collection collection)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Collection collection)", "full_signature": "public static boolean isNotEmpty(Collection collection)", "class_method_signature": "CommonUtils.isNotEmpty(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Map map)", "full_signature": "public static boolean isEmpty(Map map)", "class_method_signature": "CommonUtils.isEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Map map)", "full_signature": "public static boolean isNotEmpty(Map map)", "class_method_signature": "CommonUtils.isNotEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Object[] array)", "full_signature": "public static boolean isEmpty(Object[] array)", "class_method_signature": "CommonUtils.isEmpty(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Object[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Object[] array)", "full_signature": "public static boolean isNotEmpty(Object[] array)", "class_method_signature": "CommonUtils.isNotEmpty(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "parseNum", "parameters": "(T num, T defaultInt)", "modifiers": "public static", "return": "T", "signature": "T parseNum(T num, T defaultInt)", "full_signature": "public static T parseNum(T num, T defaultInt)", "class_method_signature": "CommonUtils.parseNum(T num, T defaultInt)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String num, int defaultInt)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String num, int defaultInt)", "full_signature": "public static int parseInt(String num, int defaultInt)", "class_method_signature": "CommonUtils.parseInt(String num, int defaultInt)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(String num, long defaultLong)", "modifiers": "public static", "return": "long", "signature": "long parseLong(String num, long defaultLong)", "full_signature": "public static long parseLong(String num, long defaultLong)", "class_method_signature": "CommonUtils.parseLong(String num, long defaultLong)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(String bool, boolean defaultInt)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseBoolean(String bool, boolean defaultInt)", "full_signature": "public static boolean parseBoolean(String bool, boolean defaultInt)", "class_method_signature": "CommonUtils.parseBoolean(String bool, boolean defaultInt)", "testcase": false, "constructor": false}, {"identifier": "parseInts", "parameters": "(String nums, String sperator)", "modifiers": "public static", "return": "int[]", "signature": "int[] parseInts(String nums, String sperator)", "full_signature": "public static int[] parseInts(String nums, String sperator)", "class_method_signature": "CommonUtils.parseInts(String nums, String sperator)", "testcase": false, "constructor": false}, {"identifier": "listEquals", "parameters": "(List<T> left, List<T> right)", "modifiers": "public static", "return": "boolean", "signature": "boolean listEquals(List<T> left, List<T> right)", "full_signature": "public static boolean listEquals(List<T> left, List<T> right)", "class_method_signature": "CommonUtils.listEquals(List<T> left, List<T> right)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection collection, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Collection collection, String separator)", "full_signature": "public static String join(Collection collection, String separator)", "class_method_signature": "CommonUtils.join(Collection collection, String separator)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/CommonUtils.java"}, "focal_method": {"identifier": "parseBoolean", "parameters": "(String bool, boolean defaultInt)", "modifiers": "public static", "return": "boolean", "body": "public static boolean parseBoolean(String bool, boolean defaultInt) {\n        if (bool == null) {\n            return defaultInt;\n        } else {\n            return Boolean.parseBoolean(bool);\n        }\n    }", "signature": "boolean parseBoolean(String bool, boolean defaultInt)", "full_signature": "public static boolean parseBoolean(String bool, boolean defaultInt)", "class_method_signature": "CommonUtils.parseBoolean(String bool, boolean defaultInt)", "testcase": false, "constructor": false, "invocations": ["parseBoolean"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}