{"test_class": {"identifier": "RedisClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  RedisCommandExecutor commandExecutor;", "modifier": "@Mock", "type": "RedisCommandExecutor", "declarator": "commandExecutor", "var_name": "commandExecutor"}, {"original_string": "@Mock\n  RedisCommandResult commandResult;", "modifier": "@Mock", "type": "RedisCommandResult", "declarator": "commandResult", "var_name": "commandResult"}, {"original_string": "RedisClient redisClient;", "modifier": "", "type": "RedisClient", "declarator": "redisClient", "var_name": "redisClient"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/client/RedisClientTest.java"}, "test_case": {"identifier": "flushdb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void flushdb() throws ConnectionException, IOException {\n    doReturn(\"OK\").when(commandResult).getStatus();\n    redisClient.flushdb();\n    verify(redisClient).runVoidCommand(RedisCommands.FLUSHDB);\n    verify(commandExecutor).execute(RedisCommands.FLUSHDB);\n  }", "signature": "void flushdb()", "full_signature": "@Test public void flushdb()", "class_method_signature": "RedisClientTest.flushdb()", "testcase": true, "constructor": false, "invocations": ["getStatus", "when", "doReturn", "flushdb", "runVoidCommand", "verify", "execute", "verify"]}, "focal_class": {"identifier": "RedisClient", "superclass": "", "interfaces": "implements Client", "fields": [{"original_string": "private static final String STATUS_OK = \"OK\";", "modifier": "private static final", "type": "String", "declarator": "STATUS_OK = \"OK\"", "var_name": "STATUS_OK"}, {"original_string": "final CommandResult commandResult;", "modifier": "final", "type": "CommandResult", "declarator": "commandResult", "var_name": "commandResult"}, {"original_string": "final CommandExecutor commandExecutor;", "modifier": "final", "type": "CommandExecutor", "declarator": "commandExecutor", "var_name": "commandExecutor"}, {"original_string": "final Transaction transaction = new RedisTransaction();", "modifier": "final", "type": "Transaction", "declarator": "transaction = new RedisTransaction()", "var_name": "transaction"}], "methods": [{"identifier": "RedisClient", "parameters": "(final RedisCommandExecutor redisCommandExecutor,\n      final RedisCommandResult redisCommandResult)", "modifiers": "", "return": "", "signature": " RedisClient(final RedisCommandExecutor redisCommandExecutor,\n      final RedisCommandResult redisCommandResult)", "full_signature": "  RedisClient(final RedisCommandExecutor redisCommandExecutor,\n      final RedisCommandResult redisCommandResult)", "class_method_signature": "RedisClient.RedisClient(final RedisCommandExecutor redisCommandExecutor,\n      final RedisCommandResult redisCommandResult)", "testcase": false, "constructor": true}, {"identifier": "RedisClient", "parameters": "(final Connection connection)", "modifiers": "public", "return": "", "signature": " RedisClient(final Connection connection)", "full_signature": "public  RedisClient(final Connection connection)", "class_method_signature": "RedisClient.RedisClient(final Connection connection)", "testcase": false, "constructor": true}, {"identifier": "RedisClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " RedisClient()", "full_signature": "public  RedisClient()", "class_method_signature": "RedisClient.RedisClient()", "testcase": false, "constructor": true}, {"identifier": "RedisClient", "parameters": "(final String host)", "modifiers": "public", "return": "", "signature": " RedisClient(final String host)", "full_signature": "public  RedisClient(final String host)", "class_method_signature": "RedisClient.RedisClient(final String host)", "testcase": false, "constructor": true}, {"identifier": "RedisClient", "parameters": "(final String host, final int port)", "modifiers": "public", "return": "", "signature": " RedisClient(final String host, final int port)", "full_signature": "public  RedisClient(final String host, final int port)", "class_method_signature": "RedisClient.RedisClient(final String host, final int port)", "testcase": false, "constructor": true}, {"identifier": "runVoidCommand", "parameters": "(final ByteCommand command, final byte[]... args)", "modifiers": "protected", "return": "void", "signature": "void runVoidCommand(final ByteCommand command, final byte[]... args)", "full_signature": "protected void runVoidCommand(final ByteCommand command, final byte[]... args)", "class_method_signature": "RedisClient.runVoidCommand(final ByteCommand command, final byte[]... args)", "testcase": false, "constructor": false}, {"identifier": "ping", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void ping()", "full_signature": "@Override public void ping()", "class_method_signature": "RedisClient.ping()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final byte[] key, final byte[] value)", "modifiers": "@Override public", "return": "void", "signature": "void set(final byte[] key, final byte[] value)", "full_signature": "@Override public void set(final byte[] key, final byte[] value)", "class_method_signature": "RedisClient.set(final byte[] key, final byte[] value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final byte[] key, final byte[] value, final long expiryInMillis)", "modifiers": "@Override public", "return": "void", "signature": "void set(final byte[] key, final byte[] value, final long expiryInMillis)", "full_signature": "@Override public void set(final byte[] key, final byte[] value, final long expiryInMillis)", "class_method_signature": "RedisClient.set(final byte[] key, final byte[] value, final long expiryInMillis)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(final long longToBeConverted)", "modifiers": "public", "return": "byte[]", "signature": "byte[] longToBytes(final long longToBeConverted)", "full_signature": "public byte[] longToBytes(final long longToBeConverted)", "class_method_signature": "RedisClient.longToBytes(final long longToBeConverted)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(final byte[] key)", "full_signature": "@Override public byte[] get(final byte[] key)", "class_method_signature": "RedisClient.get(final byte[] key)", "testcase": false, "constructor": false}, {"identifier": "expire", "parameters": "(final byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] expire(final byte[] key)", "full_signature": "@Override public byte[] expire(final byte[] key)", "class_method_signature": "RedisClient.expire(final byte[] key)", "testcase": false, "constructor": false}, {"identifier": "flushdb", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flushdb()", "full_signature": "@Override public void flushdb()", "class_method_signature": "RedisClient.flushdb()", "testcase": false, "constructor": false}, {"identifier": "dbsize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int dbsize()", "full_signature": "@Override public int dbsize()", "class_method_signature": "RedisClient.dbsize()", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/client/RedisClient.java"}, "focal_method": {"identifier": "flushdb", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void flushdb() throws ConnectionException, IOException {\n    runVoidCommand(RedisCommands.FLUSHDB);\n  }", "signature": "void flushdb()", "full_signature": "@Override public void flushdb()", "class_method_signature": "RedisClient.flushdb()", "testcase": false, "constructor": false, "invocations": ["runVoidCommand"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}