{"test_class": {"identifier": "ReadyLocalTransactionSerializerTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/messages/ReadyLocalTransactionSerializerTest.java"}, "test_case": {"identifier": "testToAndFromBinary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToAndFromBinary() throws NotSerializableException {\n        DataTree dataTree = new InMemoryDataTreeFactory().create(\n            DataTreeConfiguration.DEFAULT_OPERATIONAL, TestModel.createTestContext());\n        DataTreeModification modification = dataTree.takeSnapshot().newModification();\n\n        ContainerNode writeData = ImmutableNodes.containerNode(TestModel.TEST_QNAME);\n        new WriteModification(TestModel.TEST_PATH, writeData).apply(modification);\n        MapNode mergeData = ImmutableNodes.mapNodeBuilder(TestModel.OUTER_LIST_QNAME).build();\n        new MergeModification(TestModel.OUTER_LIST_PATH, mergeData).apply(modification);\n\n        final SortedSet<String> shardNames = ImmutableSortedSet.of(\"one\", \"two\");\n        TransactionIdentifier txId = nextTransactionId();\n        ReadyLocalTransaction readyMessage = new ReadyLocalTransaction(txId, modification, true,\n                Optional.of(shardNames));\n\n        final ExtendedActorSystem system = (ExtendedActorSystem) ExtendedActorSystem.create(\"test\");\n        final Object deserialized;\n        try {\n            final ReadyLocalTransactionSerializer serializer = new ReadyLocalTransactionSerializer(system);\n            final byte[] bytes = serializer.toBinary(readyMessage);\n            deserialized = serializer.fromBinary(bytes, ReadyLocalTransaction.class);\n        } finally {\n            TestKit.shutdownActorSystem(system);\n        }\n\n        assertNotNull(\"fromBinary returned null\", deserialized);\n        assertEquals(\"fromBinary return type\", BatchedModifications.class, deserialized.getClass());\n        BatchedModifications batched = (BatchedModifications)deserialized;\n        assertEquals(\"getTransactionID\", txId, batched.getTransactionId());\n        assertEquals(\"getVersion\", DataStoreVersions.CURRENT_VERSION, batched.getVersion());\n        assertTrue(\"isReady\", batched.isReady());\n        assertTrue(\"isDoCommitOnReady\", batched.isDoCommitOnReady());\n        assertTrue(\"participatingShardNames present\", batched.getParticipatingShardNames().isPresent());\n        assertEquals(\"participatingShardNames\", shardNames, batched.getParticipatingShardNames().get());\n\n        List<Modification> batchedMods = batched.getModifications();\n        assertEquals(\"getModifications size\", 2, batchedMods.size());\n\n        Modification mod = batchedMods.get(0);\n        assertEquals(\"Modification type\", WriteModification.class, mod.getClass());\n        assertEquals(\"Modification getPath\", TestModel.TEST_PATH, ((WriteModification)mod).getPath());\n        assertEquals(\"Modification getData\", writeData, ((WriteModification)mod).getData());\n\n        mod = batchedMods.get(1);\n        assertEquals(\"Modification type\", MergeModification.class, mod.getClass());\n        assertEquals(\"Modification getPath\", TestModel.OUTER_LIST_PATH, ((MergeModification)mod).getPath());\n        assertEquals(\"Modification getData\", mergeData, ((MergeModification)mod).getData());\n    }", "signature": "void testToAndFromBinary()", "full_signature": "@Test public void testToAndFromBinary()", "class_method_signature": "ReadyLocalTransactionSerializerTest.testToAndFromBinary()", "testcase": true, "constructor": false, "invocations": ["create", "createTestContext", "newModification", "takeSnapshot", "containerNode", "apply", "build", "mapNodeBuilder", "apply", "of", "nextTransactionId", "of", "create", "toBinary", "fromBinary", "shutdownActorSystem", "assertNotNull", "assertEquals", "getClass", "assertEquals", "getTransactionId", "assertEquals", "getVersion", "assertTrue", "isReady", "assertTrue", "isDoCommitOnReady", "assertTrue", "isPresent", "getParticipatingShardNames", "assertEquals", "get", "getParticipatingShardNames", "getModifications", "assertEquals", "size", "get", "assertEquals", "getClass", "assertEquals", "getPath", "assertEquals", "getData", "get", "assertEquals", "getClass", "assertEquals", "getPath", "assertEquals", "getData"]}, "focal_class": {"identifier": "ReadyLocalTransactionSerializer", "superclass": "extends JSerializer", "interfaces": "", "fields": [{"original_string": "private final ExtendedActorSystem system;", "modifier": "private final", "type": "ExtendedActorSystem", "declarator": "system", "var_name": "system"}], "methods": [{"identifier": "ReadyLocalTransactionSerializer", "parameters": "(final ExtendedActorSystem system)", "modifiers": "public", "return": "", "signature": " ReadyLocalTransactionSerializer(final ExtendedActorSystem system)", "full_signature": "public  ReadyLocalTransactionSerializer(final ExtendedActorSystem system)", "class_method_signature": "ReadyLocalTransactionSerializer.ReadyLocalTransactionSerializer(final ExtendedActorSystem system)", "testcase": false, "constructor": true}, {"identifier": "identifier", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int identifier()", "full_signature": "@Override public int identifier()", "class_method_signature": "ReadyLocalTransactionSerializer.identifier()", "testcase": false, "constructor": false}, {"identifier": "includeManifest", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean includeManifest()", "full_signature": "@Override public boolean includeManifest()", "class_method_signature": "ReadyLocalTransactionSerializer.includeManifest()", "testcase": false, "constructor": false}, {"identifier": "toBinary", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toBinary(final Object obj)", "full_signature": "@Override public byte[] toBinary(final Object obj)", "class_method_signature": "ReadyLocalTransactionSerializer.toBinary(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "fromBinaryJava", "parameters": "(final byte[] bytes, final Class<?> clazz)", "modifiers": "@Override public", "return": "Object", "signature": "Object fromBinaryJava(final byte[] bytes, final Class<?> clazz)", "full_signature": "@Override public Object fromBinaryJava(final byte[] bytes, final Class<?> clazz)", "class_method_signature": "ReadyLocalTransactionSerializer.fromBinaryJava(final byte[] bytes, final Class<?> clazz)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/messages/ReadyLocalTransactionSerializer.java"}, "focal_method": {"identifier": "toBinary", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] toBinary(final Object obj) {\n        checkArgument(obj instanceof ReadyLocalTransaction, \"Unsupported object type %s\", obj.getClass());\n        final ReadyLocalTransaction readyLocal = (ReadyLocalTransaction) obj;\n        final BatchedModifications batched = new BatchedModifications(readyLocal.getTransactionId(),\n                readyLocal.getRemoteVersion());\n        batched.setDoCommitOnReady(readyLocal.isDoCommitOnReady());\n        batched.setTotalMessagesSent(1);\n        batched.setReady(readyLocal.getParticipatingShardNames());\n\n        readyLocal.getModification().applyToCursor(new BatchedCursor(batched));\n\n        return SerializationUtils.serialize(batched);\n    }", "signature": "byte[] toBinary(final Object obj)", "full_signature": "@Override public byte[] toBinary(final Object obj)", "class_method_signature": "ReadyLocalTransactionSerializer.toBinary(final Object obj)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getClass", "getTransactionId", "getRemoteVersion", "setDoCommitOnReady", "isDoCommitOnReady", "setTotalMessagesSent", "setReady", "getParticipatingShardNames", "applyToCursor", "getModification", "serialize"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}