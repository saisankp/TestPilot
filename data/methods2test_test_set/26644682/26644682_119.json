{"test_class": {"identifier": "PreparationControllerTest", "superclass": "extends BasePreparationTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}, {"original_string": "@Rule\n    public LocalizationRule rule = new LocalizationRule(Locale.US);", "modifier": "@Rule\n    public", "type": "LocalizationRule", "declarator": "rule = new LocalizationRule(Locale.US)", "var_name": "rule"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/service/PreparationControllerTest.java"}, "test_case": {"identifier": "shouldLocatePreparation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldLocatePreparation() throws Exception {\n        // given\n        final Folder bar = folderRepository.addFolder(home.getId(), \"/foo/bar\");\n        final String barEntry =\n                clientTest.createPreparation(createTestPreparation(\"youpi\", \"4824\"), bar.getId()).getId();\n\n        // when\n        final Response response = given() //\n                .when() //\n                .expect()\n                .statusCode(200)\n                .log()\n                .ifError() //\n                .get(\"/preparations/{id}/folder\", barEntry);\n\n        // then\n        assertThat(response.getStatusCode(), is(200));\n        try (InputStream responseAsInputStream = response.asInputStream()) {\n            final Folder actual = mapper.readValue(responseAsInputStream, Folder.class);\n            assertEquals(bar.getId(), actual.getId());\n        }\n    }", "signature": "void shouldLocatePreparation()", "full_signature": "@Test public void shouldLocatePreparation()", "class_method_signature": "PreparationControllerTest.shouldLocatePreparation()", "testcase": true, "constructor": false, "invocations": ["addFolder", "getId", "getId", "createPreparation", "createTestPreparation", "getId", "get", "ifError", "log", "statusCode", "expect", "when", "given", "assertThat", "getStatusCode", "is", "asInputStream", "readValue", "assertEquals", "getId", "getId"]}, "focal_class": {"identifier": "PreparationController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = getLogger(PreparationController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(PreparationController.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private PreparationService preparationService;", "modifier": "@Autowired\n    private", "type": "PreparationService", "declarator": "preparationService", "var_name": "preparationService"}, {"original_string": "@Autowired\n    private BeanConversionService beanConversionService;", "modifier": "@Autowired\n    private", "type": "BeanConversionService", "declarator": "beanConversionService", "var_name": "beanConversionService"}], "methods": [{"identifier": "create", "parameters": "(@ApiParam(\"preparation\") @RequestBody @Valid final Preparation preparation,\n            @ApiParam(value = \"The folderId path to create the entry.\") @RequestParam String folderId)", "modifiers": "@RequestMapping(value = \"/preparations\", method = POST) @ApiOperation(value = \"Create a preparation\", notes = \"Returns the id of the created preparation.\") @Timed public", "return": "String", "signature": "String create(@ApiParam(\"preparation\") @RequestBody @Valid final Preparation preparation,\n            @ApiParam(value = \"The folderId path to create the entry.\") @RequestParam String folderId)", "full_signature": "@RequestMapping(value = \"/preparations\", method = POST) @ApiOperation(value = \"Create a preparation\", notes = \"Returns the id of the created preparation.\") @Timed public String create(@ApiParam(\"preparation\") @RequestBody @Valid final Preparation preparation,\n            @ApiParam(value = \"The folderId path to create the entry.\") @RequestParam String folderId)", "class_method_signature": "PreparationController.create(@ApiParam(\"preparation\") @RequestBody @Valid final Preparation preparation,\n            @ApiParam(value = \"The folderId path to create the entry.\") @RequestParam String folderId)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/preparations\", method = GET) @ApiOperation(value = \"List all preparations id\", notes = \"Returns the list of preparations ids the current user is allowed to see. Creation date is always displayed in UTC time zone. See 'preparations/all' to get all details at once.\") @Timed public", "return": "Stream<String>", "signature": "Stream<String> list(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/preparations\", method = GET) @ApiOperation(value = \"List all preparations id\", notes = \"Returns the list of preparations ids the current user is allowed to see. Creation date is always displayed in UTC time zone. See 'preparations/all' to get all details at once.\") @Timed public Stream<String> list(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "class_method_signature": "PreparationController.list(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "listAll", "parameters": "(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/preparations/details\", method = GET) @ApiOperation(value = \"List all preparations\", notes = \"Returns the list of preparations details the current user is allowed to see. Creation date is always displayed in UTC time zone. This operation return all details on the preparations.\") @Timed public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listAll(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/preparations/details\", method = GET) @ApiOperation(value = \"List all preparations\", notes = \"Returns the list of preparations details the current user is allowed to see. Creation date is always displayed in UTC time zone. This operation return all details on the preparations.\") @Timed public Stream<PreparationDTO> listAll(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "class_method_signature": "PreparationController.listAll(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "listSummary", "parameters": "(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/preparations/summaries\", method = GET) @ApiOperation(value = \"List all preparations\", notes = \"Returns the list of preparations summaries the current user is allowed to see. Creation date is always displayed in UTC time zone.\") @Timed public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listSummary(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/preparations/summaries\", method = GET) @ApiOperation(value = \"List all preparations\", notes = \"Returns the list of preparations summaries the current user is allowed to see. Creation date is always displayed in UTC time zone.\") @Timed public Stream<PreparationDTO> listSummary(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "class_method_signature": "PreparationController.listSummary(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path (<folder path>/<preparation name>).\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key (by name or date).\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc).\") @RequestParam(defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "searchPreparations", "parameters": "(\n            @RequestParam(required = false) @ApiParam(\"dataSetId\") String dataSetId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Id of the folder where to look for preparations\") String folderId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Path of the folder where to look for preparations\") String folderPath,\n            @RequestParam(required = false) @ApiParam(\"name\") String name,\n            @RequestParam(defaultValue = \"true\") @ApiParam(\"exactMatch\") boolean exactMatch,\n            @RequestParam(defaultValue = \"lastModificationDate\") @ApiParam(\n                    value = \"Sort key (by name or date).\") Sort sort,\n            @RequestParam(defaultValue = \"desc\") @ApiParam(value = \"Order for sort key (desc or asc).\") Order order)", "modifiers": "@RequestMapping(value = \"/preparations/search\", method = GET) @ApiOperation(value = \"Search for preparations details\", notes = \"Returns the list of preparations details that match the search criteria.\") @Timed public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> searchPreparations(\n            @RequestParam(required = false) @ApiParam(\"dataSetId\") String dataSetId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Id of the folder where to look for preparations\") String folderId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Path of the folder where to look for preparations\") String folderPath,\n            @RequestParam(required = false) @ApiParam(\"name\") String name,\n            @RequestParam(defaultValue = \"true\") @ApiParam(\"exactMatch\") boolean exactMatch,\n            @RequestParam(defaultValue = \"lastModificationDate\") @ApiParam(\n                    value = \"Sort key (by name or date).\") Sort sort,\n            @RequestParam(defaultValue = \"desc\") @ApiParam(value = \"Order for sort key (desc or asc).\") Order order)", "full_signature": "@RequestMapping(value = \"/preparations/search\", method = GET) @ApiOperation(value = \"Search for preparations details\", notes = \"Returns the list of preparations details that match the search criteria.\") @Timed public Stream<PreparationDTO> searchPreparations(\n            @RequestParam(required = false) @ApiParam(\"dataSetId\") String dataSetId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Id of the folder where to look for preparations\") String folderId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Path of the folder where to look for preparations\") String folderPath,\n            @RequestParam(required = false) @ApiParam(\"name\") String name,\n            @RequestParam(defaultValue = \"true\") @ApiParam(\"exactMatch\") boolean exactMatch,\n            @RequestParam(defaultValue = \"lastModificationDate\") @ApiParam(\n                    value = \"Sort key (by name or date).\") Sort sort,\n            @RequestParam(defaultValue = \"desc\") @ApiParam(value = \"Order for sort key (desc or asc).\") Order order)", "class_method_signature": "PreparationController.searchPreparations(\n            @RequestParam(required = false) @ApiParam(\"dataSetId\") String dataSetId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Id of the folder where to look for preparations\") String folderId,\n            @RequestParam(required = false) @ApiParam(\n                    value = \"Path of the folder where to look for preparations\") String folderPath,\n            @RequestParam(required = false) @ApiParam(\"name\") String name,\n            @RequestParam(defaultValue = \"true\") @ApiParam(\"exactMatch\") boolean exactMatch,\n            @RequestParam(defaultValue = \"lastModificationDate\") @ApiParam(\n                    value = \"Sort key (by name or date).\") Sort sort,\n            @RequestParam(defaultValue = \"desc\") @ApiParam(value = \"Order for sort key (desc or asc).\") Order order)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to copy\") String preparationId,\n            @ApiParam(value = \"The name of the copied preparation.\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"The folder path to create the copy.\") @RequestParam() String destination)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a preparation\", produces = TEXT_PLAIN_VALUE, notes = \"Copy the preparation to the new name / folder and returns the new id.\") @Timed public", "return": "String", "signature": "String copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to copy\") String preparationId,\n            @ApiParam(value = \"The name of the copied preparation.\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"The folder path to create the copy.\") @RequestParam() String destination)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a preparation\", produces = TEXT_PLAIN_VALUE, notes = \"Copy the preparation to the new name / folder and returns the new id.\") @Timed public String copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to copy\") String preparationId,\n            @ApiParam(value = \"The name of the copied preparation.\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"The folder path to create the copy.\") @RequestParam() String destination)", "class_method_signature": "PreparationController.copy(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to copy\") String preparationId,\n            @ApiParam(value = \"The name of the copied preparation.\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"The folder path to create the copy.\") @RequestParam() String destination)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to move\") String preparationId,\n            @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam String folder,\n            @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam String destination,\n            @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\") String newName)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/move\", method = PUT) @ApiOperation(value = \"Move a preparation\", notes = \"Move a preparation to an other folder.\") @Timed public", "return": "void", "signature": "void move(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to move\") String preparationId,\n            @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam String folder,\n            @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam String destination,\n            @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\") String newName)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/move\", method = PUT) @ApiOperation(value = \"Move a preparation\", notes = \"Move a preparation to an other folder.\") @Timed public void move(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to move\") String preparationId,\n            @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam String folder,\n            @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam String destination,\n            @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\") String newName)", "class_method_signature": "PreparationController.move(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\",\n                    value = \"Id of the preparation to move\") String preparationId,\n            @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam String folder,\n            @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam String destination,\n            @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\") String newName)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to delete\") String id)", "modifiers": "@RequestMapping(value = \"/preparations/{id}\", method = RequestMethod.DELETE) @ApiOperation(value = \"Delete a preparation by id\", notes = \"Delete a preparation content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing preparation id returns empty content.\") @Timed public", "return": "void", "signature": "void delete(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to delete\") String id)", "full_signature": "@RequestMapping(value = \"/preparations/{id}\", method = RequestMethod.DELETE) @ApiOperation(value = \"Delete a preparation by id\", notes = \"Delete a preparation content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing preparation id returns empty content.\") @Timed public void delete(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to delete\") String id)", "class_method_signature": "PreparationController.delete(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to delete\") String id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@ApiParam(\"id\") @PathVariable(\"id\") String id,\n            @RequestBody @ApiParam(\"preparation\") final PreparationDTO preparation)", "modifiers": "@RequestMapping(value = \"/preparations/{id}\", method = PUT) @ApiOperation(value = \"Create a preparation\", notes = \"Returns the id of the updated preparation.\") @Timed public", "return": "String", "signature": "String update(@ApiParam(\"id\") @PathVariable(\"id\") String id,\n            @RequestBody @ApiParam(\"preparation\") final PreparationDTO preparation)", "full_signature": "@RequestMapping(value = \"/preparations/{id}\", method = PUT) @ApiOperation(value = \"Create a preparation\", notes = \"Returns the id of the updated preparation.\") @Timed public String update(@ApiParam(\"id\") @PathVariable(\"id\") String id,\n            @RequestBody @ApiParam(\"preparation\") final PreparationDTO preparation)", "class_method_signature": "PreparationController.update(@ApiParam(\"id\") @PathVariable(\"id\") String id,\n            @RequestBody @ApiParam(\"preparation\") final PreparationDTO preparation)", "testcase": false, "constructor": false}, {"identifier": "updateStepMetadata", "parameters": "(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId,\n            @RequestBody @ApiParam(\"rowMetadata\") final RowMetadata rowMetadata)", "modifiers": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = PUT, produces = TEXT_PLAIN_VALUE, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a preparation steps\", notes = \"Returns the id of the updated step.\") @Timed public", "return": "String", "signature": "String updateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId,\n            @RequestBody @ApiParam(\"rowMetadata\") final RowMetadata rowMetadata)", "full_signature": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = PUT, produces = TEXT_PLAIN_VALUE, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a preparation steps\", notes = \"Returns the id of the updated step.\") @Timed public String updateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId,\n            @RequestBody @ApiParam(\"rowMetadata\") final RowMetadata rowMetadata)", "class_method_signature": "PreparationController.updateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId,\n            @RequestBody @ApiParam(\"rowMetadata\") final RowMetadata rowMetadata)", "testcase": false, "constructor": false}, {"identifier": "invalidateStepMetadata", "parameters": "(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "modifiers": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = DELETE) @ApiOperation(value = \"Deletes the metadata associated with step\") @Timed public", "return": "void", "signature": "void invalidateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "full_signature": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = DELETE) @ApiOperation(value = \"Deletes the metadata associated with step\") @Timed public void invalidateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "class_method_signature": "PreparationController.invalidateStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "getStepMetadata", "parameters": "(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "modifiers": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a preparation steps\", notes = \"Returns the id of the updated step.\") @Timed public", "return": "RowMetadata", "signature": "RowMetadata getStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "full_signature": "@RequestMapping(value = \"/preparations/steps/{stepId}/metadata\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a preparation steps\", notes = \"Returns the id of the updated step.\") @Timed public RowMetadata getStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "class_method_signature": "PreparationController.getStepMetadata(@ApiParam(\"stepId\") @PathVariable(\"stepId\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "copyStepsFrom", "parameters": "(@ApiParam(value = \"the preparation id to update\") @PathVariable(\"id\") String id,\n            @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/steps/copy\", method = PUT) @ApiOperation(value = \"Copy the steps from another preparation\", notes = \"Copy the steps from another preparation if this one has no steps.\") @Timed public", "return": "void", "signature": "void copyStepsFrom(@ApiParam(value = \"the preparation id to update\") @PathVariable(\"id\") String id,\n            @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/steps/copy\", method = PUT) @ApiOperation(value = \"Copy the steps from another preparation\", notes = \"Copy the steps from another preparation if this one has no steps.\") @Timed public void copyStepsFrom(@ApiParam(value = \"the preparation id to update\") @PathVariable(\"id\") String id,\n            @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "class_method_signature": "PreparationController.copyStepsFrom(@ApiParam(value = \"the preparation id to update\") @PathVariable(\"id\") String id,\n            @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "testcase": false, "constructor": false}, {"identifier": "getDetails", "parameters": "( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/details\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public", "return": "PreparationDTO", "signature": "PreparationDTO getDetails( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/details\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public PreparationDTO getDetails( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "class_method_signature": "PreparationController.getDetails( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "getDetailsFull", "parameters": "( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/details/full\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public", "return": "PreparationDetailsDTO", "signature": "PreparationDetailsDTO getDetailsFull( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/details/full\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public PreparationDetailsDTO getDetailsFull( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "class_method_signature": "PreparationController.getDetailsFull( //\n            @ApiParam(\"id\") @PathVariable(\"id\") String id, //\n            @ApiParam(value = \"stepId\", defaultValue = \"head\") @RequestParam(value = \"stepId\",\n                    defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "modifiers": "@RequestMapping(value = \"/preparations/{id}\", method = GET) @ApiOperation(value = \"Get preparation\", notes = \"Return the preparation with provided id.\") @Timed public", "return": "PreparationDTO", "signature": "PreparationDTO get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "full_signature": "@RequestMapping(value = \"/preparations/{id}\", method = GET) @ApiOperation(value = \"Get preparation\", notes = \"Return the preparation with provided id.\") @Timed public PreparationDTO get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "class_method_signature": "PreparationController.get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "searchLocation", "parameters": "(@ApiParam(value = \"the preparation id\") @PathVariable(\"id\") String id)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/folder\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public", "return": "Folder", "signature": "Folder searchLocation(@ApiParam(value = \"the preparation id\") @PathVariable(\"id\") String id)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/folder\", method = GET) @ApiOperation(value = \"Get preparation details\", notes = \"Return the details of the preparation with provided id.\") @Timed public Folder searchLocation(@ApiParam(value = \"the preparation id\") @PathVariable(\"id\") String id)", "class_method_signature": "PreparationController.searchLocation(@ApiParam(value = \"the preparation id\") @PathVariable(\"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "getSteps", "parameters": "(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/steps\", method = GET) @ApiOperation(value = \"Get all preparation steps id\", notes = \"Return the steps of the preparation with provided id.\") @Timed public", "return": "List<String>", "signature": "List<String> getSteps(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/steps\", method = GET) @ApiOperation(value = \"Get all preparation steps id\", notes = \"Return the steps of the preparation with provided id.\") @Timed public List<String> getSteps(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "class_method_signature": "PreparationController.getSteps(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "updateAction", "parameters": "(@PathVariable(\"id\") final String preparationId,\n            @PathVariable(\"stepId\") final String stepToModifyId, @RequestBody final AppendStep newStep)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/actions/{stepId}\", method = PUT) @ApiOperation(value = \"Updates an action in a preparation\", notes = \"Modifies an action in preparation's steps.\") @Timed public", "return": "void", "signature": "void updateAction(@PathVariable(\"id\") final String preparationId,\n            @PathVariable(\"stepId\") final String stepToModifyId, @RequestBody final AppendStep newStep)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/actions/{stepId}\", method = PUT) @ApiOperation(value = \"Updates an action in a preparation\", notes = \"Modifies an action in preparation's steps.\") @Timed public void updateAction(@PathVariable(\"id\") final String preparationId,\n            @PathVariable(\"stepId\") final String stepToModifyId, @RequestBody final AppendStep newStep)", "class_method_signature": "PreparationController.updateAction(@PathVariable(\"id\") final String preparationId,\n            @PathVariable(\"stepId\") final String stepToModifyId, @RequestBody final AppendStep newStep)", "testcase": false, "constructor": false}, {"identifier": "deleteAction", "parameters": "(@PathVariable(\"id\") final String id, @PathVariable(\"stepId\") final String stepToDeleteId)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/actions/{stepId}\", method = DELETE) @ApiOperation(value = \"Delete an action in a preparation\", notes = \"Delete a step and all following steps from a preparation\") @Timed public", "return": "void", "signature": "void deleteAction(@PathVariable(\"id\") final String id, @PathVariable(\"stepId\") final String stepToDeleteId)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/actions/{stepId}\", method = DELETE) @ApiOperation(value = \"Delete an action in a preparation\", notes = \"Delete a step and all following steps from a preparation\") @Timed public void deleteAction(@PathVariable(\"id\") final String id, @PathVariable(\"stepId\") final String stepToDeleteId)", "class_method_signature": "PreparationController.deleteAction(@PathVariable(\"id\") final String id, @PathVariable(\"stepId\") final String stepToDeleteId)", "testcase": false, "constructor": false}, {"identifier": "setPreparationHead", "parameters": "(@PathVariable(\"id\") final String preparationId, //\n            @PathVariable(\"headId\") final String headId)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/head/{headId}\", method = PUT) @ApiOperation(value = \"Move preparation head\", notes = \"Set head to the specified head id\") @Timed public", "return": "void", "signature": "void setPreparationHead(@PathVariable(\"id\") final String preparationId, //\n            @PathVariable(\"headId\") final String headId)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/head/{headId}\", method = PUT) @ApiOperation(value = \"Move preparation head\", notes = \"Set head to the specified head id\") @Timed public void setPreparationHead(@PathVariable(\"id\") final String preparationId, //\n            @PathVariable(\"headId\") final String headId)", "class_method_signature": "PreparationController.setPreparationHead(@PathVariable(\"id\") final String preparationId, //\n            @PathVariable(\"headId\") final String headId)", "testcase": false, "constructor": false}, {"identifier": "getVersionedAction", "parameters": "(@ApiParam(\"id\") @PathVariable(\"id\") final String id,\n            @ApiParam(\"version\") @PathVariable(\"version\") final String version)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/actions/{version}\", method = GET) @ApiOperation(value = \"Get all the actions of a preparation at given version.\", notes = \"Returns the action JSON at version.\") @Timed public", "return": "List<Action>", "signature": "List<Action> getVersionedAction(@ApiParam(\"id\") @PathVariable(\"id\") final String id,\n            @ApiParam(\"version\") @PathVariable(\"version\") final String version)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/actions/{version}\", method = GET) @ApiOperation(value = \"Get all the actions of a preparation at given version.\", notes = \"Returns the action JSON at version.\") @Timed public List<Action> getVersionedAction(@ApiParam(\"id\") @PathVariable(\"id\") final String id,\n            @ApiParam(\"version\") @PathVariable(\"version\") final String version)", "class_method_signature": "PreparationController.getVersionedAction(@ApiParam(\"id\") @PathVariable(\"id\") final String id,\n            @ApiParam(\"version\") @PathVariable(\"version\") final String version)", "testcase": false, "constructor": false}, {"identifier": "listErrors", "parameters": "()", "modifiers": "@RequestMapping(value = \"/preparations/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all preparation related error codes.\", notes = \"Returns the list of all preparation related error codes.\") @Timed public", "return": "Iterable<JsonErrorCodeDescription>", "signature": "Iterable<JsonErrorCodeDescription> listErrors()", "full_signature": "@RequestMapping(value = \"/preparations/errors\", method = RequestMethod.GET) @ApiOperation(value = \"Get all preparation related error codes.\", notes = \"Returns the list of all preparation related error codes.\") @Timed public Iterable<JsonErrorCodeDescription> listErrors()", "class_method_signature": "PreparationController.listErrors()", "testcase": false, "constructor": false}, {"identifier": "lockPreparation", "parameters": "(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "modifiers": "@RequestMapping(value = \"/preparations/{preparationId}/lock\", method = PUT) @ApiOperation(value = \"Lock the specified preparation.\", notes = \"Returns a locked resource.\") @Timed public", "return": "void", "signature": "void lockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "full_signature": "@RequestMapping(value = \"/preparations/{preparationId}/lock\", method = PUT) @ApiOperation(value = \"Lock the specified preparation.\", notes = \"Returns a locked resource.\") @Timed public void lockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "class_method_signature": "PreparationController.lockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "unlockPreparation", "parameters": "(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "modifiers": "@RequestMapping(value = \"/preparations/{preparationId}/unlock\", method = PUT) @ApiOperation(value = \"Unlock the specified preparation.\", notes = \"Returns a locked resource.\") @Timed public", "return": "void", "signature": "void unlockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "full_signature": "@RequestMapping(value = \"/preparations/{preparationId}/unlock\", method = PUT) @ApiOperation(value = \"Unlock the specified preparation.\", notes = \"Returns a locked resource.\") @Timed public void unlockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "class_method_signature": "PreparationController.unlockPreparation(@ApiParam(\"preparationId\") @PathVariable(\"preparationId\") final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "preparationsThatUseDataset", "parameters": "(@ApiParam(\"datasetId\") @PathVariable(\"datasetId\") final String datasetId)", "modifiers": "@RequestMapping(value = \"/preparations/use/dataset/{datasetId}\", method = HEAD) @ApiOperation(value = \"Check if dataset is used by a preparation.\", notes = \"Returns no content, the response code is the meaning.\") @Timed public", "return": "ResponseEntity<Void>", "signature": "ResponseEntity<Void> preparationsThatUseDataset(@ApiParam(\"datasetId\") @PathVariable(\"datasetId\") final String datasetId)", "full_signature": "@RequestMapping(value = \"/preparations/use/dataset/{datasetId}\", method = HEAD) @ApiOperation(value = \"Check if dataset is used by a preparation.\", notes = \"Returns no content, the response code is the meaning.\") @Timed public ResponseEntity<Void> preparationsThatUseDataset(@ApiParam(\"datasetId\") @PathVariable(\"datasetId\") final String datasetId)", "class_method_signature": "PreparationController.preparationsThatUseDataset(@ApiParam(\"datasetId\") @PathVariable(\"datasetId\") final String datasetId)", "testcase": false, "constructor": false}, {"identifier": "moveStep", "parameters": "(@PathVariable(\"id\") final String preparationId,\n            @ApiParam(value = \"The id of the step we want to move.\") @PathVariable String stepId,\n            @ApiParam(value = \"The step that will become the parent of stepId\") @RequestParam String parentStepId)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/steps/{stepId}/order\", method = POST) @ApiOperation(value = \"Moves a step within a preparation after a specified step\", notes = \"Moves a step within a preparation after a specified step.\") @Timed public", "return": "void", "signature": "void moveStep(@PathVariable(\"id\") final String preparationId,\n            @ApiParam(value = \"The id of the step we want to move.\") @PathVariable String stepId,\n            @ApiParam(value = \"The step that will become the parent of stepId\") @RequestParam String parentStepId)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/steps/{stepId}/order\", method = POST) @ApiOperation(value = \"Moves a step within a preparation after a specified step\", notes = \"Moves a step within a preparation after a specified step.\") @Timed public void moveStep(@PathVariable(\"id\") final String preparationId,\n            @ApiParam(value = \"The id of the step we want to move.\") @PathVariable String stepId,\n            @ApiParam(value = \"The step that will become the parent of stepId\") @RequestParam String parentStepId)", "class_method_signature": "PreparationController.moveStep(@PathVariable(\"id\") final String preparationId,\n            @ApiParam(value = \"The id of the step we want to move.\") @PathVariable String stepId,\n            @ApiParam(value = \"The step that will become the parent of stepId\") @RequestParam String parentStepId)", "testcase": false, "constructor": false}, {"identifier": "addPreparationAction", "parameters": "(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final List<AppendStep> steps)", "modifiers": "@RequestMapping(value = \"/preparations/{id}/actions\", method = POST) @ApiOperation(value = \"Adds an action at the end of preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final List<AppendStep> steps)", "full_signature": "@RequestMapping(value = \"/preparations/{id}/actions\", method = POST) @ApiOperation(value = \"Adds an action at the end of preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final List<AppendStep> steps)", "class_method_signature": "PreparationController.addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final List<AppendStep> steps)", "testcase": false, "constructor": false}, {"identifier": "getStep", "parameters": "(@PathVariable(\"id\") final String stepId)", "modifiers": "@RequestMapping(value = \"/steps/{id}\", method = GET) @ApiOperation(value = \"Retrieve a specific step.\", notes = \"Just find the step for this ID.\") @Timed public", "return": "Step", "signature": "Step getStep(@PathVariable(\"id\") final String stepId)", "full_signature": "@RequestMapping(value = \"/steps/{id}\", method = GET) @ApiOperation(value = \"Retrieve a specific step.\", notes = \"Just find the step for this ID.\") @Timed public Step getStep(@PathVariable(\"id\") final String stepId)", "class_method_signature": "PreparationController.getStep(@PathVariable(\"id\") final String stepId)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/service/PreparationController.java"}, "focal_method": {"identifier": "get", "parameters": "(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "modifiers": "@RequestMapping(value = \"/preparations/{id}\", method = GET) @ApiOperation(value = \"Get preparation\", notes = \"Return the preparation with provided id.\") @Timed public", "return": "PreparationDTO", "body": "@RequestMapping(value = \"/preparations/{id}\", method = GET)\n    @ApiOperation(value = \"Get preparation\", notes = \"Return the preparation with provided id.\")\n    @Timed\n    public PreparationDTO get(@ApiParam(\"id\") @PathVariable(\"id\") String id) {\n        return preparationService.getPreparation(id);\n    }", "signature": "PreparationDTO get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "full_signature": "@RequestMapping(value = \"/preparations/{id}\", method = GET) @ApiOperation(value = \"Get preparation\", notes = \"Return the preparation with provided id.\") @Timed public PreparationDTO get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "class_method_signature": "PreparationController.get(@ApiParam(\"id\") @PathVariable(\"id\") String id)", "testcase": false, "constructor": false, "invocations": ["getPreparation"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}