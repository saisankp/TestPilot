{"test_class": {"identifier": "AntennaCLIFrontendTest", "superclass": "extends AbstractAntennaCLIFrontendTest", "interfaces": "", "fields": [], "file": "assembly/cli/src/test/java/org/eclipse/sw360/antenna/frontend/cli/AntennaCLIFrontendTest.java"}, "test_case": {"identifier": "testExecutionUsingMainMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecutionUsingMainMethod()\n            throws Exception {\n        assumeTrue(isRunExecutionTest());\n        protoypeExecutionTest(() -> {\n            Path pom = testData.getProjectPom();\n            String[] args;\n            if (hasPropertiesFile()) {\n                Path propertiesFile = testData.getPropertiesFile();\n                args = new String[]{ pom.toAbsolutePath().toString(), propertiesFile.toAbsolutePath().toString() };\n            } else {\n                args = new String[]{ pom.toAbsolutePath().toString() };\n            }\n            AntennaCLIFrontend.main(args);\n        }, tf -> null);\n    }", "signature": "void testExecutionUsingMainMethod()", "full_signature": "@Test public void testExecutionUsingMainMethod()", "class_method_signature": "AntennaCLIFrontendTest.testExecutionUsingMainMethod()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "isRunExecutionTest", "protoypeExecutionTest", "getProjectPom", "hasPropertiesFile", "getPropertiesFile", "toString", "toAbsolutePath", "toString", "toAbsolutePath", "toString", "toAbsolutePath", "main"]}, "focal_class": {"identifier": "AntennaCLIFrontend", "superclass": "extends AbstractAntennaCLIFrontend", "interfaces": "", "fields": [], "methods": [{"identifier": "AntennaCLIFrontend", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " AntennaCLIFrontend(File file)", "full_signature": "public  AntennaCLIFrontend(File file)", "class_method_signature": "AntennaCLIFrontend.AntennaCLIFrontend(File file)", "testcase": false, "constructor": true}, {"identifier": "AntennaCLIFrontend", "parameters": "(File pomFile, File propertiesFile)", "modifiers": "public", "return": "", "signature": " AntennaCLIFrontend(File pomFile, File propertiesFile)", "full_signature": "public  AntennaCLIFrontend(File pomFile, File propertiesFile)", "class_method_signature": "AntennaCLIFrontend.AntennaCLIFrontend(File pomFile, File propertiesFile)", "testcase": false, "constructor": true}, {"identifier": "getPluginDescendantArtifactIdName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getPluginDescendantArtifactIdName()", "full_signature": "@Override protected String getPluginDescendantArtifactIdName()", "class_method_signature": "AntennaCLIFrontend.getPluginDescendantArtifactIdName()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AntennaCLIFrontend.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "enableDebugLogging", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void enableDebugLogging()", "full_signature": "private static void enableDebugLogging()", "class_method_signature": "AntennaCLIFrontend.enableDebugLogging()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "AntennaCLIFrontend.printUsage()", "testcase": false, "constructor": false}], "file": "assembly/cli/src/main/java/org/eclipse/sw360/antenna/frontend/cli/AntennaCLIFrontend.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n        AntennaCLIOptions options = AntennaCLIOptions.parse(args);\n        if (options.isShowHelp()) {\n            printUsage();\n            System.exit(1);\n        }\n\n        if (options.isDebugLog()) {\n            enableDebugLogging();\n        }\n\n        try {\n            Path pomFilePath = Paths.get(options.getConfigFilePath()).toAbsolutePath();\n\n            if (!pomFilePath.toFile().exists()) {\n                throw new IllegalArgumentException(\"Cannot find \" + pomFilePath.toString());\n            }\n\n            AntennaCLIFrontend frontend;\n\n            if (options.getPropertiesFilePath() != null) {\n                Path propertiesFilePath = Paths.get(options.getPropertiesFilePath()).toAbsolutePath();\n                if (!propertiesFilePath.toFile().exists()) {\n                    throw new IllegalArgumentException(\"Cannot find \" + propertiesFilePath.toString());\n                }\n                frontend = new AntennaCLIFrontend(pomFilePath.toFile(), propertiesFilePath.toFile());\n            } else {\n                frontend = new AntennaCLIFrontend(pomFilePath.toFile());\n            }\n\n            frontend.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error: \" + e.getMessage());\n            System.exit(1);\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AntennaCLIFrontend.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["parse", "isShowHelp", "printUsage", "exit", "isDebugLog", "enableDebugLogging", "toAbsolutePath", "get", "getConfigFilePath", "exists", "toFile", "toString", "getPropertiesFilePath", "toAbsolutePath", "get", "getPropertiesFilePath", "exists", "toFile", "toString", "toFile", "toFile", "toFile", "execute", "printStackTrace", "println", "getMessage", "exit"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}