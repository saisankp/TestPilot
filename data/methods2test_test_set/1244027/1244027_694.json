{"test_class": {"identifier": "AbstractValueFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final TextDecoder CUSTOM_DECODER = new NoOpEncoder();", "modifier": "public static final", "type": "TextDecoder", "declarator": "CUSTOM_DECODER = new NoOpEncoder()", "var_name": "CUSTOM_DECODER"}, {"original_string": "private AbstractValueFactory<String> factory;", "modifier": "private", "type": "AbstractValueFactory<String>", "declarator": "factory", "var_name": "factory"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/AbstractValueFactoryTest.java"}, "test_case": {"identifier": "shouldReturnSuppliedTextEncoderWhenNonNullPassedToGetEncoder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnSuppliedTextEncoderWhenNonNullPassedToGetEncoder() {\n        assertThat(factory.getDecoder(), is(sameInstance(ValueFactory.DEFAULT_DECODER)));\n        assertThat(factory.getDecoder(null), is(sameInstance(ValueFactory.DEFAULT_DECODER)));\n        assertThat(factory.getDecoder(CUSTOM_DECODER), is(sameInstance(CUSTOM_DECODER)));\n    }", "signature": "void shouldReturnSuppliedTextEncoderWhenNonNullPassedToGetEncoder()", "full_signature": "@Test public void shouldReturnSuppliedTextEncoderWhenNonNullPassedToGetEncoder()", "class_method_signature": "AbstractValueFactoryTest.shouldReturnSuppliedTextEncoderWhenNonNullPassedToGetEncoder()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getDecoder", "is", "sameInstance", "assertThat", "getDecoder", "is", "sameInstance", "assertThat", "getDecoder", "is", "sameInstance"]}, "focal_class": {"identifier": "AbstractValueFactory", "superclass": "", "interfaces": "implements ValueFactory<T>", "fields": [{"original_string": "protected final TextDecoder decoder;", "modifier": "protected final", "type": "TextDecoder", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "protected final PropertyType propertyType;", "modifier": "protected final", "type": "PropertyType", "declarator": "propertyType", "var_name": "propertyType"}, {"original_string": "protected final ValueFactories valueFactories;", "modifier": "protected final", "type": "ValueFactories", "declarator": "valueFactories", "var_name": "valueFactories"}], "methods": [{"identifier": "AbstractValueFactory", "parameters": "( PropertyType type,\n                                    TextDecoder decoder,\n                                    ValueFactories valueFactories )", "modifiers": "protected", "return": "", "signature": " AbstractValueFactory( PropertyType type,\n                                    TextDecoder decoder,\n                                    ValueFactories valueFactories )", "full_signature": "protected  AbstractValueFactory( PropertyType type,\n                                    TextDecoder decoder,\n                                    ValueFactories valueFactories )", "class_method_signature": "AbstractValueFactory.AbstractValueFactory( PropertyType type,\n                                    TextDecoder decoder,\n                                    ValueFactories valueFactories )", "testcase": false, "constructor": true}, {"identifier": "getStringValueFactory", "parameters": "()", "modifiers": "protected", "return": "ValueFactory<String>", "signature": "ValueFactory<String> getStringValueFactory()", "full_signature": "protected ValueFactory<String> getStringValueFactory()", "class_method_signature": "AbstractValueFactory.getStringValueFactory()", "testcase": false, "constructor": false}, {"identifier": "getDecoder", "parameters": "()", "modifiers": "public", "return": "TextDecoder", "signature": "TextDecoder getDecoder()", "full_signature": "public TextDecoder getDecoder()", "class_method_signature": "AbstractValueFactory.getDecoder()", "testcase": false, "constructor": false}, {"identifier": "getDecoder", "parameters": "( TextDecoder decoder )", "modifiers": "protected", "return": "TextDecoder", "signature": "TextDecoder getDecoder( TextDecoder decoder )", "full_signature": "protected TextDecoder getDecoder( TextDecoder decoder )", "class_method_signature": "AbstractValueFactory.getDecoder( TextDecoder decoder )", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "()", "modifiers": "@Override public", "return": "PropertyType", "signature": "PropertyType getPropertyType()", "full_signature": "@Override public PropertyType getPropertyType()", "class_method_signature": "AbstractValueFactory.getPropertyType()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Object value )", "modifiers": "@Override public", "return": "T", "signature": "T create( Object value )", "full_signature": "@Override public T create( Object value )", "class_method_signature": "AbstractValueFactory.create( Object value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BigDecimal[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( BigDecimal[] values )", "full_signature": "@Override public T[] create( BigDecimal[] values )", "class_method_signature": "AbstractValueFactory.create( BigDecimal[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( boolean[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( boolean[] values )", "full_signature": "@Override public T[] create( boolean[] values )", "class_method_signature": "AbstractValueFactory.create( boolean[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( byte[][] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( byte[][] values )", "full_signature": "@Override public T[] create( byte[][] values )", "class_method_signature": "AbstractValueFactory.create( byte[][] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Calendar[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Calendar[] values )", "full_signature": "@Override public T[] create( Calendar[] values )", "class_method_signature": "AbstractValueFactory.create( Calendar[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Date[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Date[] values )", "full_signature": "@Override public T[] create( Date[] values )", "class_method_signature": "AbstractValueFactory.create( Date[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( DateTime[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( DateTime[] values )", "full_signature": "@Override public T[] create( DateTime[] values )", "class_method_signature": "AbstractValueFactory.create( DateTime[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( double[] values )", "full_signature": "@Override public T[] create( double[] values )", "class_method_signature": "AbstractValueFactory.create( double[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( float[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( float[] values )", "full_signature": "@Override public T[] create( float[] values )", "class_method_signature": "AbstractValueFactory.create( float[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( int[] values )", "full_signature": "@Override public T[] create( int[] values )", "class_method_signature": "AbstractValueFactory.create( int[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( long[] values )", "full_signature": "@Override public T[] create( long[] values )", "class_method_signature": "AbstractValueFactory.create( long[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Name[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Name[] values )", "full_signature": "@Override public T[] create( Name[] values )", "class_method_signature": "AbstractValueFactory.create( Name[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Object[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Object[] values )", "full_signature": "@Override public T[] create( Object[] values )", "class_method_signature": "AbstractValueFactory.create( Object[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Path[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Path[] values )", "full_signature": "@Override public T[] create( Path[] values )", "class_method_signature": "AbstractValueFactory.create( Path[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Reference[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( Reference[] values )", "full_signature": "@Override public T[] create( Reference[] values )", "class_method_signature": "AbstractValueFactory.create( Reference[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String[] values,\n                       TextDecoder decoder )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( String[] values,\n                       TextDecoder decoder )", "full_signature": "@Override public T[] create( String[] values,\n                       TextDecoder decoder )", "class_method_signature": "AbstractValueFactory.create( String[] values,\n                       TextDecoder decoder )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( String[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( String[] values )", "full_signature": "@Override public T[] create( String[] values )", "class_method_signature": "AbstractValueFactory.create( String[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( URI[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( URI[] values )", "full_signature": "@Override public T[] create( URI[] values )", "class_method_signature": "AbstractValueFactory.create( URI[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( UUID[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( UUID[] values )", "full_signature": "@Override public T[] create( UUID[] values )", "class_method_signature": "AbstractValueFactory.create( UUID[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( NodeKey[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( NodeKey[] values )", "full_signature": "@Override public T[] create( NodeKey[] values )", "class_method_signature": "AbstractValueFactory.create( NodeKey[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( BinaryValue[] values )", "modifiers": "@Override public", "return": "T[]", "signature": "T[] create( BinaryValue[] values )", "full_signature": "@Override public T[] create( BinaryValue[] values )", "class_method_signature": "AbstractValueFactory.create( BinaryValue[] values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( Iterator<?> values )", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> create( Iterator<?> values )", "full_signature": "@Override public Iterator<T> create( Iterator<?> values )", "class_method_signature": "AbstractValueFactory.create( Iterator<?> values )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( final Iterable<?> valueIterable )", "modifiers": "@Override public", "return": "Iterable<T>", "signature": "Iterable<T> create( final Iterable<?> valueIterable )", "full_signature": "@Override public Iterable<T> create( final Iterable<?> valueIterable )", "class_method_signature": "AbstractValueFactory.create( final Iterable<?> valueIterable )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( InputStream stream, String hint )", "modifiers": "@Override public", "return": "T", "signature": "T create( InputStream stream, String hint )", "full_signature": "@Override public T create( InputStream stream, String hint )", "class_method_signature": "AbstractValueFactory.create( InputStream stream, String hint )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/AbstractValueFactory.java"}, "focal_method": {"identifier": "getDecoder", "parameters": "()", "modifiers": "public", "return": "TextDecoder", "body": "public TextDecoder getDecoder() {\n        return this.decoder;\n    }", "signature": "TextDecoder getDecoder()", "full_signature": "public TextDecoder getDecoder()", "class_method_signature": "AbstractValueFactory.getDecoder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}