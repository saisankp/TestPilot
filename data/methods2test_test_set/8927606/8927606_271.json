{"test_class": {"identifier": "CompareStringPipeTest", "superclass": "extends PipeTestBase<CompareStringPipe>", "interfaces": "", "fields": [{"original_string": "String key1 = \"key1\";", "modifier": "", "type": "String", "declarator": "key1 = \"key1\"", "var_name": "key1"}, {"original_string": "String key2 = \"key2\";", "modifier": "", "type": "String", "declarator": "key2 = \"key2\"", "var_name": "key2"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/CompareStringPipeTest.java"}, "test_case": {"identifier": "setSessionKey1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void setSessionKey1() {\n\t\tString dummyKey = \"kappa123\";\n\t\tpipe.setSessionKey1(dummyKey);\n\t\tString retrievedKey = pipe.getSessionKey1();\n\t\tassertEquals(dummyKey, retrievedKey);\n\t}", "signature": "void setSessionKey1()", "full_signature": "@Test public void setSessionKey1()", "class_method_signature": "CompareStringPipeTest.setSessionKey1()", "testcase": true, "constructor": false, "invocations": ["setSessionKey1", "getSessionKey1", "assertEquals"]}, "focal_class": {"identifier": "CompareStringPipe", "superclass": "extends AbstractPipe", "interfaces": "", "fields": [{"original_string": "private final static String LESSTHANFORWARD = \"lessthan\";", "modifier": "private final static", "type": "String", "declarator": "LESSTHANFORWARD = \"lessthan\"", "var_name": "LESSTHANFORWARD"}, {"original_string": "private final static String GREATERTHANFORWARD = \"greaterthan\";", "modifier": "private final static", "type": "String", "declarator": "GREATERTHANFORWARD = \"greaterthan\"", "var_name": "GREATERTHANFORWARD"}, {"original_string": "private final static String EQUALSFORWARD = \"equals\";", "modifier": "private final static", "type": "String", "declarator": "EQUALSFORWARD = \"equals\"", "var_name": "EQUALSFORWARD"}, {"original_string": "private final static String OPERAND1 = \"operand1\";", "modifier": "private final static", "type": "String", "declarator": "OPERAND1 = \"operand1\"", "var_name": "OPERAND1"}, {"original_string": "private final static String OPERAND2 = \"operand2\";", "modifier": "private final static", "type": "String", "declarator": "OPERAND2 = \"operand2\"", "var_name": "OPERAND2"}, {"original_string": "private final static String IGNOREPATTERNS = \"ignorepatterns\";", "modifier": "private final static", "type": "String", "declarator": "IGNOREPATTERNS = \"ignorepatterns\"", "var_name": "IGNOREPATTERNS"}, {"original_string": "private String sessionKey1 = null;", "modifier": "private", "type": "String", "declarator": "sessionKey1 = null", "var_name": "sessionKey1"}, {"original_string": "private String sessionKey2 = null;", "modifier": "private", "type": "String", "declarator": "sessionKey2 = null", "var_name": "sessionKey2"}, {"original_string": "private boolean xml = false;", "modifier": "private", "type": "boolean", "declarator": "xml = false", "var_name": "xml"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "CompareStringPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "CompareStringPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "ignoreBetween", "parameters": "(String source, String after, String before)", "modifiers": "private", "return": "String", "signature": "String ignoreBetween(String source, String after, String before)", "full_signature": "private String ignoreBetween(String source, String after, String before)", "class_method_signature": "CompareStringPipe.ignoreBetween(String source, String after, String before)", "testcase": false, "constructor": false}, {"identifier": "getParameterValue", "parameters": "(ParameterValueList pvl, String parameterName)", "modifiers": "private", "return": "String", "signature": "String getParameterValue(ParameterValueList pvl, String parameterName)", "full_signature": "private String getParameterValue(ParameterValueList pvl, String parameterName)", "class_method_signature": "CompareStringPipe.getParameterValue(ParameterValueList pvl, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "setSessionKey1", "parameters": "(String string)", "modifiers": "@IbisDoc({\"reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand1\") public", "return": "void", "signature": "void setSessionKey1(String string)", "full_signature": "@IbisDoc({\"reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand1\") public void setSessionKey1(String string)", "class_method_signature": "CompareStringPipe.setSessionKey1(String string)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey1", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey1()", "full_signature": "public String getSessionKey1()", "class_method_signature": "CompareStringPipe.getSessionKey1()", "testcase": false, "constructor": false}, {"identifier": "setSessionKey2", "parameters": "(String string)", "modifiers": "@IbisDoc({\"reference to the other session variables to be compared. Do not use, but use Parameter operand2 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand2\") public", "return": "void", "signature": "void setSessionKey2(String string)", "full_signature": "@IbisDoc({\"reference to the other session variables to be compared. Do not use, but use Parameter operand2 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand2\") public void setSessionKey2(String string)", "class_method_signature": "CompareStringPipe.setSessionKey2(String string)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey2", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey2()", "full_signature": "public String getSessionKey2()", "class_method_signature": "CompareStringPipe.getSessionKey2()", "testcase": false, "constructor": false}, {"identifier": "isXml", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isXml()", "full_signature": "public boolean isXml()", "class_method_signature": "CompareStringPipe.isXml()", "testcase": false, "constructor": false}, {"identifier": "setXml", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code> the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form\", \"false\"}) public", "return": "void", "signature": "void setXml(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code> the string values to compare are considered to be xml strings and before the actual compare both xml strings are transformed to a canonical form\", \"false\"}) public void setXml(boolean b)", "class_method_signature": "CompareStringPipe.setXml(boolean b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/CompareStringPipe.java"}, "focal_method": {"identifier": "setSessionKey1", "parameters": "(String string)", "modifiers": "@IbisDoc({\"reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand1\") public", "return": "void", "body": "@IbisDoc({\"reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead\", \"\"})\n\t@Deprecated\n\t@ConfigurationWarning(\"Please use the parameter operand1\")\n\tpublic void setSessionKey1(String string) {\n\t\tsessionKey1 = string;\n\t}", "signature": "void setSessionKey1(String string)", "full_signature": "@IbisDoc({\"reference to one of the session variables to be compared. Do not use, but use Parameter operand1 instead\", \"\"}) @Deprecated @ConfigurationWarning(\"Please use the parameter operand1\") public void setSessionKey1(String string)", "class_method_signature": "CompareStringPipe.setSessionKey1(String string)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}