{"test_class": {"identifier": "RawObjectCreatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IKey fieldNameKey;", "modifier": "private", "type": "IKey", "declarator": "fieldNameKey", "var_name": "fieldNameKey"}, {"original_string": "private IKey routeFromObjectNameKey;", "modifier": "private", "type": "IKey", "declarator": "routeFromObjectNameKey", "var_name": "routeFromObjectNameKey"}, {"original_string": "private IKey dependencyKey;", "modifier": "private", "type": "IKey", "declarator": "dependencyKey", "var_name": "dependencyKey"}, {"original_string": "private IRouter routerMock;", "modifier": "private", "type": "IRouter", "declarator": "routerMock", "var_name": "routerMock"}, {"original_string": "private IObject descriptionMock;", "modifier": "private", "type": "IObject", "declarator": "descriptionMock", "var_name": "descriptionMock"}, {"original_string": "private IFieldName dependencyFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "dependencyFieldName", "var_name": "dependencyFieldName"}, {"original_string": "private IFieldName nameFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "nameFieldName", "var_name": "nameFieldName"}], "file": "CoreFeatures/MessageProcessing-plugins/PluginStandardObjectCreators/src/test/java/info/smart_tools/smartactors/message_processing_plugins/standard_object_creators_plugin/RawObjectCreatorTest.java"}, "test_case": {"identifier": "Should_throw_When_dependencyIsNotReceiver", "parameters": "()", "modifiers": "@Test(expected = ObjectCreationException.class) public", "return": "void", "body": "@Test(expected = ObjectCreationException.class)\n    public void Should_throw_When_dependencyIsNotReceiver()\n            throws Exception {\n        IRoutedObjectCreator creator = new RawObjectCreator();\n        Object notReceiverMock = mock(Object.class);\n\n        when(descriptionMock.getValue(same(dependencyFieldName))).thenReturn(\"dependency_1\");\n        when(descriptionMock.getValue(same(nameFieldName))).thenReturn(\"name_1\");\n        when(Keys.getOrAdd(\"dependency_1\")).thenReturn(dependencyKey);\n        when(IOC.resolve(same(dependencyKey), same(descriptionMock))).thenReturn(notReceiverMock);\n        when(IOC.resolve(same(routeFromObjectNameKey), eq(\"name_1\"))).thenReturn(\"route_1\");\n\n        creator.createObject(routerMock, descriptionMock);\n    }", "signature": "void Should_throw_When_dependencyIsNotReceiver()", "full_signature": "@Test(expected = ObjectCreationException.class) public void Should_throw_When_dependencyIsNotReceiver()", "class_method_signature": "RawObjectCreatorTest.Should_throw_When_dependencyIsNotReceiver()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getValue", "same", "thenReturn", "when", "getValue", "same", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "resolve", "same", "same", "thenReturn", "when", "resolve", "same", "eq", "createObject"]}, "focal_class": {"identifier": "RawObjectCreator", "superclass": "", "interfaces": "implements IRoutedObjectCreator", "fields": [{"original_string": "private final IFieldName dependencyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "dependencyFieldName", "var_name": "dependencyFieldName"}, {"original_string": "private final IFieldName nameFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "nameFieldName", "var_name": "nameFieldName"}], "methods": [{"identifier": "RawObjectCreator", "parameters": "()", "modifiers": "public", "return": "", "signature": " RawObjectCreator()", "full_signature": "public  RawObjectCreator()", "class_method_signature": "RawObjectCreator.RawObjectCreator()", "testcase": false, "constructor": true}, {"identifier": "createObject", "parameters": "(final IRouter router, final IObject description)", "modifiers": "@Override public", "return": "void", "signature": "void createObject(final IRouter router, final IObject description)", "full_signature": "@Override public void createObject(final IRouter router, final IObject description)", "class_method_signature": "RawObjectCreator.createObject(final IRouter router, final IObject description)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing-plugins/PluginStandardObjectCreators/src/main/java/info/smart_tools/smartactors/message_processing_plugins/standard_object_creators_plugin/RawObjectCreator.java"}, "focal_method": {"identifier": "createObject", "parameters": "(final IRouter router, final IObject description)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void createObject(final IRouter router, final IObject description)\n            throws ObjectCreationException, InvalidArgumentException {\n        if (null == router) {\n            throw new InvalidArgumentException(\"Router should not be null.\");\n        }\n\n        if (null == description) {\n            throw new InvalidArgumentException(\"Description should not be null.\");\n        }\n\n        try {\n            Object address = IOC.resolve(Keys.getOrAdd(\"route_from_object_name\"), description.getValue(nameFieldName));\n            Object receiver = IOC.resolve(Keys.getOrAdd(String.valueOf(description.getValue(dependencyFieldName))), description);\n\n            if (!(receiver instanceof IMessageReceiver)) {\n                throw new ObjectCreationException(\"Resolved dependency does not implement receiver interface.\");\n            }\n\n            router.register(address, (IMessageReceiver) receiver);\n        } catch (ReadValueException | InvalidArgumentException | ResolutionException e) {\n            throw new ObjectCreationException(\"Error occurred creating the receiver.\", e);\n        }\n    }", "signature": "void createObject(final IRouter router, final IObject description)", "full_signature": "@Override public void createObject(final IRouter router, final IObject description)", "class_method_signature": "RawObjectCreator.createObject(final IRouter router, final IObject description)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "valueOf", "getValue", "register"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}