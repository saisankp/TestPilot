{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/org/codeandmagic/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "testFuzzySearch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFuzzySearch() {\n\t\tfinal float[] base = new float[] { 1, 4, 4, 5, 7.3f, 8, 10, 23.4f, 23.4f, 34 };\n\t\tfinal float[] nullBase = null;\n\t\tfinal float[] emptyBase = new float[0];\n\n\t\t// empty arrays\n\t\tassertEquals(-1, ArrayUtils.fuzzySearch(nullBase, 5, true));\n\t\tassertEquals(-1, ArrayUtils.fuzzySearch(emptyBase, 5, false));\n\n\t\t// value outside the array\n\t\tassertEquals(0, ArrayUtils.fuzzySearch(base, 0.1f, true));\n\t\tassertEquals(-1, ArrayUtils.fuzzySearch(base, 0.1f, false));\n\t\tassertEquals(-1, ArrayUtils.fuzzySearch(base, 101, true));\n\t\tassertEquals(base.length - 1, ArrayUtils.fuzzySearch(base, 101, false));\n\n\t\t// normal case\n\t\tassertEquals(3, ArrayUtils.fuzzySearch(base, 5, true));\n\n\t\t// toTheRight in case of exact match\n\t\tassertEquals(1, ArrayUtils.fuzzySearch(base, 4, true));\n\t\tassertEquals(2, ArrayUtils.fuzzySearch(base, 4, false));\n\n\t\t// fuzzy match\n\t\tassertEquals(4, ArrayUtils.fuzzySearch(base, 7, true));\n\t\tassertEquals(3, ArrayUtils.fuzzySearch(base, 7, false));\n\t}", "signature": "void testFuzzySearch()", "full_signature": "@Test public void testFuzzySearch()", "class_method_signature": "ArrayUtilsTest.testFuzzySearch()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch", "assertEquals", "fuzzySearch"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fuzzyIntervalSearch", "parameters": "(final float[] base, final float startValue, final float endValue)", "modifiers": "public static", "return": "int[]", "signature": "int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "full_signature": "public static int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "class_method_signature": "ArrayUtils.fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "testcase": false, "constructor": false}, {"identifier": "searchStartAndEnd", "parameters": "(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "modifiers": "private static", "return": "int[]", "signature": "int[] searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "full_signature": "private static int[] searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "class_method_signature": "ArrayUtils.searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "testcase": false, "constructor": false}, {"identifier": "fuzzySearch", "parameters": "(final float[] base, final float value, final boolean orGreater)", "modifiers": "public static", "return": "int", "signature": "int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "full_signature": "public static int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "class_method_signature": "ArrayUtils.fuzzySearch(final float[] base, final float value, final boolean orGreater)", "testcase": false, "constructor": false}, {"identifier": "fuzzySearch", "parameters": "(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "modifiers": "private static", "return": "int", "signature": "int fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "full_signature": "private static int fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "class_method_signature": "ArrayUtils.fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "testcase": false, "constructor": false}], "file": "src/org/codeandmagic/util/ArrayUtils.java"}, "focal_method": {"identifier": "fuzzySearch", "parameters": "(final float[] base, final float value, final boolean orGreater)", "modifiers": "public static", "return": "int", "body": "public static int fuzzySearch(final float[] base, final float value, final boolean orGreater) {\n\n\t\t// no point in searching an empty array\n\t\tif (base == null || base.length == 0)\n\t\t\treturn -1;\n\n\t\t// quick check if the searched value is inside\n\t\tif (value < base[0]) {\n\t\t\tif (orGreater)\n\t\t\t\treturn 0;\n\t\t\telse\n\t\t\t\treturn -1;\n\t\t}\n\n\t\tfinal int last = base.length - 1;\n\t\tif (value > base[last]) {\n\t\t\tif (orGreater)\n\t\t\t\treturn -1;\n\t\t\telse\n\t\t\t\treturn last;\n\t\t}\n\n\t\treturn fuzzySearch(base, value, 0, base.length - 1, orGreater);\n\t}", "signature": "int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "full_signature": "public static int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "class_method_signature": "ArrayUtils.fuzzySearch(final float[] base, final float value, final boolean orGreater)", "testcase": false, "constructor": false, "invocations": ["fuzzySearch"]}, "repository": {"repo_id": 772158, "url": "https://github.com/evelyne24/Thoth", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 1893, "license": "licensed"}}