{"test_class": {"identifier": "QueueCircuitBreakerConfigurationResourceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String CONFIGURATION_URI = \"/playground/server/admin/v1/circuitbreaker\";", "modifier": "private final", "type": "String", "declarator": "CONFIGURATION_URI = \"/playground/server/admin/v1/circuitbreaker\"", "var_name": "CONFIGURATION_URI"}, {"original_string": "private final String INITIAL_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INITIAL_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_circuitbreaker_resource\", true)", "var_name": "INITIAL_CONFIG_RESOURCE"}, {"original_string": "private final String VALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "VALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_circuitbreaker_resource\", true)", "var_name": "VALID_CONFIG_RESOURCE"}, {"original_string": "private final String INVALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_circuitbreaker_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INVALID_CONFIG_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_circuitbreaker_resource\", true)", "var_name": "INVALID_CONFIG_RESOURCE"}], "file": "gateleen-queue/src/test/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/configuration/QueueCircuitBreakerConfigurationResourceManagerTest.java"}, "test_case": {"identifier": "testValidContentShouldBeStoredInStorage", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidContentShouldBeStoredInStorage(TestContext context){\n        Async async = context.async();\n        QueueCircuitBreakerConfigurationResourceManager manager = new QueueCircuitBreakerConfigurationResourceManager(vertx, storage, CONFIGURATION_URI);\n\n        final DummyHttpServerResponse response = new DummyHttpServerResponse();\n        class UpdateConfigResourceWithValidDataRequest extends ConfigResourcePUTRequest {\n            @Override\n            public HttpServerRequest bodyHandler(Handler<Buffer> bodyHandler) {\n                bodyHandler.handle(Buffer.buffer(VALID_CONFIG_RESOURCE));\n                return this;\n            }\n\n            @Override\n            public HttpServerResponse response() {\n                return response;\n            }\n        }\n\n        storage.get(CONFIGURATION_URI, result -> {\n            context.assertEquals(INITIAL_CONFIG_RESOURCE, result.toString());\n            context.assertTrue(manager.handleConfigurationResource(new UpdateConfigResourceWithValidDataRequest()));\n            storage.get(CONFIGURATION_URI, updatedResult -> {\n                context.assertEquals(VALID_CONFIG_RESOURCE, updatedResult.toString());\n                async.complete();\n            });\n        });\n    }", "signature": "void testValidContentShouldBeStoredInStorage(TestContext context)", "full_signature": "@Test public void testValidContentShouldBeStoredInStorage(TestContext context)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManagerTest.testValidContentShouldBeStoredInStorage(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "handle", "buffer", "get", "assertEquals", "toString", "assertTrue", "handleConfigurationResource", "get", "assertEquals", "toString", "complete"]}, "focal_class": {"identifier": "QueueCircuitBreakerConfigurationResourceManager", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private static final String UPDATE_ADDRESS = \"gateleen.queue-circuit-breaker.config-updated\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_ADDRESS = \"gateleen.queue-circuit-breaker.config-updated\"", "var_name": "UPDATE_ADDRESS"}, {"original_string": "private boolean logConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logConfigurationResourceChanges = false", "var_name": "logConfigurationResourceChanges"}, {"original_string": "private final String circuitBreakerConfigUri;", "modifier": "private final", "type": "String", "declarator": "circuitBreakerConfigUri", "var_name": "circuitBreakerConfigUri"}, {"original_string": "private final ResourceStorage storage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(QueueCircuitBreakerConfigurationResourceManager.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(QueueCircuitBreakerConfigurationResourceManager.class)", "var_name": "log"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private QueueCircuitBreakerConfigurationResource configurationResource;", "modifier": "private", "type": "QueueCircuitBreakerConfigurationResource", "declarator": "configurationResource", "var_name": "configurationResource"}, {"original_string": "private final List<Refreshable> refreshables;", "modifier": "private final", "type": "List<Refreshable>", "declarator": "refreshables", "var_name": "refreshables"}, {"original_string": "private final String configResourceSchema;", "modifier": "private final", "type": "String", "declarator": "configResourceSchema", "var_name": "configResourceSchema"}], "methods": [{"identifier": "QueueCircuitBreakerConfigurationResourceManager", "parameters": "(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "modifiers": "public", "return": "", "signature": " QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "full_signature": "public  QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.QueueCircuitBreakerConfigurationResourceManager(Vertx vertx, ResourceStorage storage, String circuitBreakerConfigUri)", "testcase": false, "constructor": true}, {"identifier": "getConfigurationResource", "parameters": "()", "modifiers": "public", "return": "QueueCircuitBreakerConfigurationResource", "signature": "QueueCircuitBreakerConfigurationResource getConfigurationResource()", "full_signature": "public QueueCircuitBreakerConfigurationResource getConfigurationResource()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.getConfigurationResource()", "testcase": false, "constructor": false}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "addRefreshable", "parameters": "(Refreshable refreshable)", "modifiers": "public", "return": "void", "signature": "void addRefreshable(Refreshable refreshable)", "full_signature": "public void addRefreshable(Refreshable refreshable)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.addRefreshable(Refreshable refreshable)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handleConfigurationResource(final HttpServerRequest request)", "full_signature": "public boolean handleConfigurationResource(final HttpServerRequest request)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.handleConfigurationResource(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "notifyRefreshables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyRefreshables()", "full_signature": "private void notifyRefreshables()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.notifyRefreshables()", "testcase": false, "constructor": false}, {"identifier": "updateConfigurationResource", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateConfigurationResource()", "full_signature": "private void updateConfigurationResource()", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.updateConfigurationResource()", "testcase": false, "constructor": false}, {"identifier": "extractConfigurationValues", "parameters": "(Buffer configResourceBuffer)", "modifiers": "private", "return": "void", "signature": "void extractConfigurationValues(Buffer configResourceBuffer)", "full_signature": "private void extractConfigurationValues(Buffer configResourceBuffer)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.extractConfigurationValues(Buffer configResourceBuffer)", "testcase": false, "constructor": false}], "file": "gateleen-queue/src/main/java/org/swisspush/gateleen/queue/queuing/circuitbreaker/configuration/QueueCircuitBreakerConfigurationResourceManager.java"}, "focal_method": {"identifier": "handleConfigurationResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean handleConfigurationResource(final HttpServerRequest request) {\n        if (request.uri().equals(circuitBreakerConfigUri) && HttpMethod.PUT == request.method()) {\n            request.bodyHandler(configResourceBuffer -> {\n                try {\n                    extractConfigurationValues(configResourceBuffer);\n                } catch (ValidationException validationException) {\n                    log.error(\"Could not parse circuit breaker configuration resource: \" + validationException.toString());\n                    ResponseStatusCodeLogUtil.info(request, StatusCode.BAD_REQUEST, QueueCircuitBreakerConfigurationResourceManager.class);\n                    request.response().setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());\n                    request.response().setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage() + \" \" + validationException.getMessage());\n                    if(validationException.getValidationDetails() != null){\n                        request.response().headers().add(\"content-type\", \"application/json\");\n                        request.response().end(validationException.getValidationDetails().encode());\n                    } else {\n                        request.response().end(validationException.getMessage());\n                    }\n                    return;\n                }\n                storage.put(circuitBreakerConfigUri, configResourceBuffer, status -> {\n                    if (status == OK.getStatusCode()) {\n                        if(logConfigurationResourceChanges){\n                            RequestLogger.logRequest(vertx.eventBus(), request, OK.getStatusCode(), configResourceBuffer);\n                        }\n                        vertx.eventBus().publish(UPDATE_ADDRESS, true);\n                    } else {\n                        request.response().setStatusCode(status);\n                    }\n                    ResponseStatusCodeLogUtil.info(request, StatusCode.fromCode(status), QueueCircuitBreakerConfigurationResourceManager.class);\n                    request.response().end();\n                });\n            });\n            return true;\n        }\n\n        if (request.uri().equals(circuitBreakerConfigUri) && HttpMethod.DELETE == request.method()) {\n            getConfigurationResource().reset();\n            log.info(\"reset circuit breaker configuration resource\");\n            notifyRefreshables();\n        }\n\n        return false;\n    }", "signature": "boolean handleConfigurationResource(final HttpServerRequest request)", "full_signature": "public boolean handleConfigurationResource(final HttpServerRequest request)", "class_method_signature": "QueueCircuitBreakerConfigurationResourceManager.handleConfigurationResource(final HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["equals", "uri", "method", "bodyHandler", "extractConfigurationValues", "error", "toString", "info", "setStatusCode", "response", "getStatusCode", "setStatusMessage", "response", "getStatusMessage", "getMessage", "getValidationDetails", "add", "headers", "response", "end", "response", "encode", "getValidationDetails", "end", "response", "getMessage", "put", "getStatusCode", "logRequest", "eventBus", "getStatusCode", "publish", "eventBus", "setStatusCode", "response", "info", "fromCode", "end", "response", "equals", "uri", "method", "reset", "getConfigurationResource", "info", "notifyRefreshables"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}