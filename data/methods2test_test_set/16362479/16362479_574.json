{"test_class": {"identifier": "PruningDataTreeModificationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final QName INVALID_TEST_QNAME = QName.create(TestModel.TEST_QNAME, \"invalid\");", "modifier": "static final", "type": "QName", "declarator": "INVALID_TEST_QNAME = QName.create(TestModel.TEST_QNAME, \"invalid\")", "var_name": "INVALID_TEST_QNAME"}, {"original_string": "static final YangInstanceIdentifier INVALID_TEST_PATH = YangInstanceIdentifier.of(INVALID_TEST_QNAME);", "modifier": "static final", "type": "YangInstanceIdentifier", "declarator": "INVALID_TEST_PATH = YangInstanceIdentifier.of(INVALID_TEST_QNAME)", "var_name": "INVALID_TEST_PATH"}, {"original_string": "private static EffectiveModelContext SCHEMA_CONTEXT;", "modifier": "private static", "type": "EffectiveModelContext", "declarator": "SCHEMA_CONTEXT", "var_name": "SCHEMA_CONTEXT"}, {"original_string": "private static DataSchemaContextTree CONTEXT_TREE;", "modifier": "private static", "type": "DataSchemaContextTree", "declarator": "CONTEXT_TREE", "var_name": "CONTEXT_TREE"}, {"original_string": "@Mock\n    private DataTreeModification mockModification;", "modifier": "@Mock\n    private", "type": "DataTreeModification", "declarator": "mockModification", "var_name": "mockModification"}, {"original_string": "private DataTree dataTree;", "modifier": "private", "type": "DataTree", "declarator": "dataTree", "var_name": "dataTree"}, {"original_string": "private DataTreeModification realModification;", "modifier": "private", "type": "DataTreeModification", "declarator": "realModification", "var_name": "realModification"}, {"original_string": "private DataTreeModification proxyModification;", "modifier": "private", "type": "DataTreeModification", "declarator": "proxyModification", "var_name": "proxyModification"}, {"original_string": "private PruningDataTreeModification pruningDataTreeModification;", "modifier": "private", "type": "PruningDataTreeModification", "declarator": "pruningDataTreeModification", "var_name": "pruningDataTreeModification"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/utils/PruningDataTreeModificationTest.java"}, "test_case": {"identifier": "testMergeWithInvalidChildNodeNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeWithInvalidChildNodeNames() throws DataValidationFailedException {\n        ContainerNode augContainer = ImmutableContainerNodeBuilder.create().withNodeIdentifier(\n                new YangInstanceIdentifier.NodeIdentifier(AUG_CONTAINER)).withChild(\n                        ImmutableNodes.containerNode(AUG_INNER_CONTAINER)).build();\n\n        DataContainerChild<?, ?> outerNode = outerNode(outerNodeEntry(1, innerNode(\"one\", \"two\")));\n        ContainerNode normalizedNode = ImmutableContainerNodeBuilder.create()\n                .withNodeIdentifier(new YangInstanceIdentifier.NodeIdentifier(TEST_QNAME)).withChild(outerNode)\n                .withChild(augContainer).withChild(ImmutableNodes.leafNode(AUG_QNAME, \"aug\")).build();\n\n        YangInstanceIdentifier path = TestModel.TEST_PATH;\n\n        pruningDataTreeModification.merge(path, normalizedNode);\n\n        dataTree.commit(getCandidate());\n\n        ContainerNode prunedNode = ImmutableContainerNodeBuilder.create().withNodeIdentifier(\n                new YangInstanceIdentifier.NodeIdentifier(TEST_QNAME)).withChild(outerNode).build();\n\n        Optional<NormalizedNode<?, ?>> actual = dataTree.takeSnapshot().readNode(path);\n        assertTrue(\"After pruning present\", actual.isPresent());\n        assertEquals(\"After pruning\", prunedNode, actual.get());\n    }", "signature": "void testMergeWithInvalidChildNodeNames()", "full_signature": "@Test public void testMergeWithInvalidChildNodeNames()", "class_method_signature": "PruningDataTreeModificationTest.testMergeWithInvalidChildNodeNames()", "testcase": true, "constructor": false, "invocations": ["build", "withChild", "withNodeIdentifier", "create", "containerNode", "outerNode", "outerNodeEntry", "innerNode", "build", "withChild", "withChild", "withChild", "withNodeIdentifier", "create", "leafNode", "merge", "commit", "getCandidate", "build", "withChild", "withNodeIdentifier", "create", "readNode", "takeSnapshot", "assertTrue", "isPresent", "assertEquals", "get"]}, "focal_class": {"identifier": "PruningDataTreeModification", "superclass": "extends ForwardingObject", "interfaces": "implements DataTreeModification", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PruningDataTreeModification.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PruningDataTreeModification.class)", "var_name": "LOG"}, {"original_string": "private final ReusableNormalizedNodePruner pruner;", "modifier": "private final", "type": "ReusableNormalizedNodePruner", "declarator": "pruner", "var_name": "pruner"}, {"original_string": "private final DataTree dataTree;", "modifier": "private final", "type": "DataTree", "declarator": "dataTree", "var_name": "dataTree"}, {"original_string": "private DataTreeModification delegate;", "modifier": "private", "type": "DataTreeModification", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "PruningDataTreeModification", "parameters": "(final DataTreeModification delegate, final DataTree dataTree,\n            final ReusableNormalizedNodePruner pruner)", "modifiers": "", "return": "", "signature": " PruningDataTreeModification(final DataTreeModification delegate, final DataTree dataTree,\n            final ReusableNormalizedNodePruner pruner)", "full_signature": "  PruningDataTreeModification(final DataTreeModification delegate, final DataTree dataTree,\n            final ReusableNormalizedNodePruner pruner)", "class_method_signature": "PruningDataTreeModification.PruningDataTreeModification(final DataTreeModification delegate, final DataTree dataTree,\n            final ReusableNormalizedNodePruner pruner)", "testcase": false, "constructor": true}, {"identifier": "delegate", "parameters": "()", "modifiers": "@Override protected final", "return": "DataTreeModification", "signature": "DataTreeModification delegate()", "full_signature": "@Override protected final DataTreeModification delegate()", "class_method_signature": "PruningDataTreeModification.delegate()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveModelContext", "parameters": "()", "modifiers": "@Override public final", "return": "EffectiveModelContext", "signature": "EffectiveModelContext getEffectiveModelContext()", "full_signature": "@Override public final EffectiveModelContext getEffectiveModelContext()", "class_method_signature": "PruningDataTreeModification.getEffectiveModelContext()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public final", "return": "void", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "@Override public final void delete(final YangInstanceIdentifier path)", "class_method_signature": "PruningDataTreeModification.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "pruneAndMergeNode", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "final", "return": "void", "signature": "void pruneAndMergeNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "final void pruneAndMergeNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "PruningDataTreeModification.pruneAndMergeNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "pruneAndWriteNode", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "final", "return": "void", "signature": "void pruneAndWriteNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "final void pruneAndWriteNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "PruningDataTreeModification.pruneAndWriteNode(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void ready()", "full_signature": "@Override public final void ready()", "class_method_signature": "PruningDataTreeModification.ready()", "testcase": false, "constructor": false}, {"identifier": "applyToCursor", "parameters": "(final DataTreeModificationCursor dataTreeModificationCursor)", "modifiers": "@Override public final", "return": "void", "signature": "void applyToCursor(final DataTreeModificationCursor dataTreeModificationCursor)", "full_signature": "@Override public final void applyToCursor(final DataTreeModificationCursor dataTreeModificationCursor)", "class_method_signature": "PruningDataTreeModification.applyToCursor(final DataTreeModificationCursor dataTreeModificationCursor)", "testcase": false, "constructor": false}, {"identifier": "readNode", "parameters": "(final YangInstanceIdentifier yangInstanceIdentifier)", "modifiers": "@Override public final", "return": "Optional<NormalizedNode<?, ?>>", "signature": "Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "full_signature": "@Override public final Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "class_method_signature": "PruningDataTreeModification.readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "testcase": false, "constructor": false}, {"identifier": "newModification", "parameters": "()", "modifiers": "@Override public final", "return": "DataTreeModification", "signature": "DataTreeModification newModification()", "full_signature": "@Override public final DataTreeModification newModification()", "class_method_signature": "PruningDataTreeModification.newModification()", "testcase": false, "constructor": false}, {"identifier": "pruneNormalizedNode", "parameters": "(final YangInstanceIdentifier path,\n            final NormalizedNode<?, ?> input)", "modifiers": "@VisibleForTesting final", "return": "NormalizedNode<?, ?>", "signature": "NormalizedNode<?, ?> pruneNormalizedNode(final YangInstanceIdentifier path,\n            final NormalizedNode<?, ?> input)", "full_signature": "@VisibleForTesting final NormalizedNode<?, ?> pruneNormalizedNode(final YangInstanceIdentifier path,\n            final NormalizedNode<?, ?> input)", "class_method_signature": "PruningDataTreeModification.pruneNormalizedNode(final YangInstanceIdentifier path,\n            final NormalizedNode<?, ?> input)", "testcase": false, "constructor": false}, {"identifier": "createNew", "parameters": "(DataTreeModification delegate, DataTree dataTree,\n            ReusableNormalizedNodePruner pruner)", "modifiers": "abstract", "return": "PruningDataTreeModification", "signature": "PruningDataTreeModification createNew(DataTreeModification delegate, DataTree dataTree,\n            ReusableNormalizedNodePruner pruner)", "full_signature": "abstract PruningDataTreeModification createNew(DataTreeModification delegate, DataTree dataTree,\n            ReusableNormalizedNodePruner pruner)", "class_method_signature": "PruningDataTreeModification.createNew(DataTreeModification delegate, DataTree dataTree,\n            ReusableNormalizedNodePruner pruner)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/utils/PruningDataTreeModification.java"}, "focal_method": {"identifier": "readNode", "parameters": "(final YangInstanceIdentifier yangInstanceIdentifier)", "modifiers": "@Override public final", "return": "Optional<NormalizedNode<?, ?>>", "body": "@Override\n    public final Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier yangInstanceIdentifier) {\n        return delegate.readNode(yangInstanceIdentifier);\n    }", "signature": "Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "full_signature": "@Override public final Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "class_method_signature": "PruningDataTreeModification.readNode(final YangInstanceIdentifier yangInstanceIdentifier)", "testcase": false, "constructor": false, "invocations": ["readNode"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}