{"test_class": {"identifier": "OracleSpParameterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Direction, String> expectedDirections;", "modifier": "private", "type": "Map<Direction, String>", "declarator": "expectedDirections", "var_name": "expectedDirections"}, {"original_string": "private SpGeneratorOutput output;", "modifier": "private", "type": "SpGeneratorOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private OracleBooleanSpTestsFactory factory;", "modifier": "private", "type": "OracleBooleanSpTestsFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private OracleSpParameter pin;", "modifier": "private", "type": "OracleSpParameter", "declarator": "pin", "var_name": "pin"}, {"original_string": "private Map<String, OracleSpParameter> spParams;", "modifier": "private", "type": "Map<String, OracleSpParameter>", "declarator": "spParams", "var_name": "spParams"}], "file": "dbfit-java/oracle/src/test/java/dbfit/util/oracle/OracleSpParameterTest.java"}, "test_case": {"identifier": "boolArgInCallShouldBeWrapped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void boolArgInCallShouldBeWrapped() {\n        OracleSpParameter arg = spParams.get(SP_ARG_BOOL_IN);\n\n        assertEquals(\"z_chr2bool( ? )\", arg.getCallArgument());\n    }", "signature": "void boolArgInCallShouldBeWrapped()", "full_signature": "@Test public void boolArgInCallShouldBeWrapped()", "class_method_signature": "OracleSpParameterTest.boolArgInCallShouldBeWrapped()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals", "getCallArgument"]}, "focal_class": {"identifier": "OracleSpParameter", "superclass": "extends OracleSpParameterBase", "interfaces": "", "fields": [], "methods": [{"identifier": "newInstance", "parameters": "(String paramName, Direction direction,\n                            String dataType)", "modifiers": "public static", "return": "OracleSpParameter", "signature": "OracleSpParameter newInstance(String paramName, Direction direction,\n                            String dataType)", "full_signature": "public static OracleSpParameter newInstance(String paramName, Direction direction,\n                            String dataType)", "class_method_signature": "OracleSpParameter.newInstance(String paramName, Direction direction,\n                            String dataType)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String paramName, Direction direction,\n                            String dataType, String prefix)", "modifiers": "public static", "return": "OracleSpParameter", "signature": "OracleSpParameter newInstance(String paramName, Direction direction,\n                            String dataType, String prefix)", "full_signature": "public static OracleSpParameter newInstance(String paramName, Direction direction,\n                            String dataType, String prefix)", "class_method_signature": "OracleSpParameter.newInstance(String paramName, Direction direction,\n                            String dataType, String prefix)", "testcase": false, "constructor": false}, {"identifier": "OracleSpParameter", "parameters": "(String paramName, Direction direction, String dataType,\n                                String prefix)", "modifiers": "protected", "return": "", "signature": " OracleSpParameter(String paramName, Direction direction, String dataType,\n                                String prefix)", "full_signature": "protected  OracleSpParameter(String paramName, Direction direction, String dataType,\n                                String prefix)", "class_method_signature": "OracleSpParameter.OracleSpParameter(String paramName, Direction direction, String dataType,\n                                String prefix)", "testcase": false, "constructor": true}, {"identifier": "needsArgumentTypeChange", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean needsArgumentTypeChange()", "full_signature": "private boolean needsArgumentTypeChange()", "class_method_signature": "OracleSpParameter.needsArgumentTypeChange()", "testcase": false, "constructor": false}, {"identifier": "getWrapperArgumentType", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getWrapperArgumentType()", "full_signature": "private String getWrapperArgumentType()", "class_method_signature": "OracleSpParameter.getWrapperArgumentType()", "testcase": false, "constructor": false}, {"identifier": "getShortDirectionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getShortDirectionName()", "full_signature": "public String getShortDirectionName()", "class_method_signature": "OracleSpParameter.getShortDirectionName()", "testcase": false, "constructor": false}, {"identifier": "getWrapperArgumentName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getWrapperArgumentName()", "full_signature": "private String getWrapperArgumentName()", "class_method_signature": "OracleSpParameter.getWrapperArgumentName()", "testcase": false, "constructor": false}, {"identifier": "getWrapperVarName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWrapperVarName()", "full_signature": "public String getWrapperVarName()", "class_method_signature": "OracleSpParameter.getWrapperVarName()", "testcase": false, "constructor": false}, {"identifier": "declareArgumentOrReturnValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void declareArgumentOrReturnValue()", "full_signature": "private void declareArgumentOrReturnValue()", "class_method_signature": "OracleSpParameter.declareArgumentOrReturnValue()", "testcase": false, "constructor": false}, {"identifier": "declareArgument", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void declareArgument()", "full_signature": "public void declareArgument()", "class_method_signature": "OracleSpParameter.declareArgument()", "testcase": false, "constructor": false}, {"identifier": "declareReturnValue", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void declareReturnValue()", "full_signature": "public void declareReturnValue()", "class_method_signature": "OracleSpParameter.declareReturnValue()", "testcase": false, "constructor": false}, {"identifier": "initializeVariable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeVariable()", "full_signature": "private void initializeVariable()", "class_method_signature": "OracleSpParameter.initializeVariable()", "testcase": false, "constructor": false}, {"identifier": "declareVariable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void declareVariable()", "full_signature": "public void declareVariable()", "class_method_signature": "OracleSpParameter.declareVariable()", "testcase": false, "constructor": false}, {"identifier": "assignOutputVariable", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void assignOutputVariable()", "full_signature": "public void assignOutputVariable()", "class_method_signature": "OracleSpParameter.assignOutputVariable()", "testcase": false, "constructor": false}, {"identifier": "getCallArgument", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCallArgument()", "full_signature": "public String getCallArgument()", "class_method_signature": "OracleSpParameter.getCallArgument()", "testcase": false, "constructor": false}, {"identifier": "getCallArgument", "parameters": "(String varname)", "modifiers": "private", "return": "String", "signature": "String getCallArgument(String varname)", "full_signature": "private String getCallArgument(String varname)", "class_method_signature": "OracleSpParameter.getCallArgument(String varname)", "testcase": false, "constructor": false}, {"identifier": "genSpCallArgumentWithinWrapper", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void genSpCallArgumentWithinWrapper()", "full_signature": "public void genSpCallArgumentWithinWrapper()", "class_method_signature": "OracleSpParameter.genSpCallArgumentWithinWrapper()", "testcase": false, "constructor": false}, {"identifier": "chr2bool", "parameters": "(String arg)", "modifiers": "private", "return": "String", "signature": "String chr2bool(String arg)", "full_signature": "private String chr2bool(String arg)", "class_method_signature": "OracleSpParameter.chr2bool(String arg)", "testcase": false, "constructor": false}, {"identifier": "bool2chr", "parameters": "(String arg)", "modifiers": "private", "return": "String", "signature": "String bool2chr(String arg)", "full_signature": "private String bool2chr(String arg)", "class_method_signature": "OracleSpParameter.bool2chr(String arg)", "testcase": false, "constructor": false}], "file": "dbfit-java/oracle/src/main/java/dbfit/util/oracle/OracleSpParameter.java"}, "focal_method": {"identifier": "getCallArgument", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getCallArgument() {\n        return getCallArgument(\"?\");\n    }", "signature": "String getCallArgument()", "full_signature": "public String getCallArgument()", "class_method_signature": "OracleSpParameter.getCallArgument()", "testcase": false, "constructor": false, "invocations": ["getCallArgument"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}