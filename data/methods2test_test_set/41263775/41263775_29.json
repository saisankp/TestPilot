{"test_class": {"identifier": "FlagsEnabledTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/option/FlagsEnabledTest.java"}, "test_case": {"identifier": "testFlagsEnabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlagsEnabled() {\n        QueryOptions queryOptions = queryOptions(enableFlags(\"a\", \"b\"));\n        assertTrue(isFlagEnabled(queryOptions, \"a\"));\n        assertTrue(isFlagEnabled(queryOptions, \"b\"));\n        assertFalse(isFlagEnabled(queryOptions, \"c\"));\n    }", "signature": "void testFlagsEnabled()", "full_signature": "@Test public void testFlagsEnabled()", "class_method_signature": "FlagsEnabledTest.testFlagsEnabled()", "testcase": true, "constructor": false, "invocations": ["queryOptions", "enableFlags", "assertTrue", "isFlagEnabled", "assertTrue", "isFlagEnabled", "assertFalse", "isFlagEnabled"]}, "focal_class": {"identifier": "FlagsEnabled", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Set<Object> flags = new HashSet<Object>();", "modifier": "final", "type": "Set<Object>", "declarator": "flags = new HashSet<Object>()", "var_name": "flags"}], "methods": [{"identifier": "add", "parameters": "(Object flag)", "modifiers": "public", "return": "void", "signature": "void add(Object flag)", "full_signature": "public void add(Object flag)", "class_method_signature": "FlagsEnabled.add(Object flag)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object flag)", "modifiers": "public", "return": "void", "signature": "void remove(Object flag)", "full_signature": "public void remove(Object flag)", "class_method_signature": "FlagsEnabled.remove(Object flag)", "testcase": false, "constructor": false}, {"identifier": "isFlagEnabled", "parameters": "(Object flag)", "modifiers": "public", "return": "boolean", "signature": "boolean isFlagEnabled(Object flag)", "full_signature": "public boolean isFlagEnabled(Object flag)", "class_method_signature": "FlagsEnabled.isFlagEnabled(Object flag)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FlagsEnabled.toString()", "testcase": false, "constructor": false}, {"identifier": "forQueryOptions", "parameters": "(final QueryOptions queryOptions)", "modifiers": "public static", "return": "FlagsEnabled", "signature": "FlagsEnabled forQueryOptions(final QueryOptions queryOptions)", "full_signature": "public static FlagsEnabled forQueryOptions(final QueryOptions queryOptions)", "class_method_signature": "FlagsEnabled.forQueryOptions(final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "isFlagEnabled", "parameters": "(QueryOptions queryOptions, Object flag)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFlagEnabled(QueryOptions queryOptions, Object flag)", "full_signature": "public static boolean isFlagEnabled(QueryOptions queryOptions, Object flag)", "class_method_signature": "FlagsEnabled.isFlagEnabled(QueryOptions queryOptions, Object flag)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/option/FlagsEnabled.java"}, "focal_method": {"identifier": "isFlagEnabled", "parameters": "(Object flag)", "modifiers": "public", "return": "boolean", "body": "public boolean isFlagEnabled(Object flag) {\n        return flags.contains(flag);\n    }", "signature": "boolean isFlagEnabled(Object flag)", "full_signature": "public boolean isFlagEnabled(Object flag)", "class_method_signature": "FlagsEnabled.isFlagEnabled(Object flag)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}