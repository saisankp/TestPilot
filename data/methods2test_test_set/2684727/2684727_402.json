{"test_class": {"identifier": "S3ClientFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "S3ClientFactory s3ClientFactory;", "modifier": "", "type": "S3ClientFactory", "declarator": "s3ClientFactory", "var_name": "s3ClientFactory"}, {"original_string": "@Mock\n    CognitoManagerImpl cognitoManager;", "modifier": "@Mock", "type": "CognitoManagerImpl", "declarator": "cognitoManager", "var_name": "cognitoManager"}, {"original_string": "@Mock\n    CognitoCachingCredentialsProvider cognitoCachingCredentialsProvider;", "modifier": "@Mock", "type": "CognitoCachingCredentialsProvider", "declarator": "cognitoCachingCredentialsProvider", "var_name": "cognitoCachingCredentialsProvider"}], "file": "aws/src/test/java/co/smartreceipts/aws/s3/S3ClientFactoryTest.java"}, "test_case": {"identifier": "getAmazonS3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAmazonS3() {\n        s3ClientFactory.getAmazonS3().test()\n                .assertComplete()\n                .assertNoErrors();\n\n        final Optional<AmazonS3Client> s3Client = s3ClientFactory.getAmazonS3().blockingFirst();\n        assertTrue(s3Client.isPresent());\n    }", "signature": "void getAmazonS3()", "full_signature": "@Test public void getAmazonS3()", "class_method_signature": "S3ClientFactoryTest.getAmazonS3()", "testcase": true, "constructor": false, "invocations": ["assertNoErrors", "assertComplete", "test", "getAmazonS3", "blockingFirst", "getAmazonS3", "assertTrue", "isPresent"]}, "focal_class": {"identifier": "S3ClientFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CognitoManager cognitoManager;", "modifier": "private final", "type": "CognitoManager", "declarator": "cognitoManager", "var_name": "cognitoManager"}, {"original_string": "private ReplaySubject<Optional<AmazonS3Client>> amazonS3ReplaySubject;", "modifier": "private", "type": "ReplaySubject<Optional<AmazonS3Client>>", "declarator": "amazonS3ReplaySubject", "var_name": "amazonS3ReplaySubject"}, {"original_string": "private Disposable amazonS3Disposable;", "modifier": "private", "type": "Disposable", "declarator": "amazonS3Disposable", "var_name": "amazonS3Disposable"}], "methods": [{"identifier": "S3ClientFactory", "parameters": "(@NonNull CognitoManager cognitoManager)", "modifiers": "public", "return": "", "signature": " S3ClientFactory(@NonNull CognitoManager cognitoManager)", "full_signature": "public  S3ClientFactory(@NonNull CognitoManager cognitoManager)", "class_method_signature": "S3ClientFactory.S3ClientFactory(@NonNull CognitoManager cognitoManager)", "testcase": false, "constructor": true}, {"identifier": "getAmazonS3", "parameters": "()", "modifiers": "@NonNull synchronized", "return": "Observable<Optional<AmazonS3Client>>", "signature": "Observable<Optional<AmazonS3Client>> getAmazonS3()", "full_signature": "@NonNull synchronized Observable<Optional<AmazonS3Client>> getAmazonS3()", "class_method_signature": "S3ClientFactory.getAmazonS3()", "testcase": false, "constructor": false}], "file": "aws/src/main/java/co/smartreceipts/aws/s3/S3ClientFactory.java"}, "focal_method": {"identifier": "getAmazonS3", "parameters": "()", "modifiers": "@NonNull synchronized", "return": "Observable<Optional<AmazonS3Client>>", "body": "@NonNull\n    synchronized Observable<Optional<AmazonS3Client>> getAmazonS3() {\n        if (amazonS3ReplaySubject == null) {\n            amazonS3ReplaySubject = ReplaySubject.createWithSize(1);\n\n            if (cognitoManager instanceof CognitoManagerImpl) {\n                amazonS3Disposable = ((CognitoManagerImpl)cognitoManager).getCognitoCachingCredentialsProvider()\n                        .<Optional<AmazonS3Client>>map(cognitoCachingCredentialsProvider -> {\n                            if (cognitoCachingCredentialsProvider.isPresent()) {\n                                return Optional.of(new AmazonS3Client(\n                                        cognitoCachingCredentialsProvider.get(), Region.getRegion(Regions.US_EAST_1)));\n                            } else {\n                                return Optional.absent();\n                            }\n                        })\n                        .subscribe(amazonS3ClientOptional -> {\n                                    amazonS3ReplaySubject.onNext(amazonS3ClientOptional);\n                                    if (amazonS3ClientOptional.isPresent()) {\n                                        amazonS3ReplaySubject.onComplete();\n                                        if (amazonS3Disposable != null) {\n                                            amazonS3Disposable.dispose();\n                                        }\n                                    }\n                                }, throwable -> amazonS3ReplaySubject.onError(throwable),\n                                () -> amazonS3ReplaySubject.onComplete());\n\n            }\n        }\n        return amazonS3ReplaySubject;\n    }", "signature": "Observable<Optional<AmazonS3Client>> getAmazonS3()", "full_signature": "@NonNull synchronized Observable<Optional<AmazonS3Client>> getAmazonS3()", "class_method_signature": "S3ClientFactory.getAmazonS3()", "testcase": false, "constructor": false, "invocations": ["createWithSize", "subscribe", "map", "getCognitoCachingCredentialsProvider", "isPresent", "of", "get", "getRegion", "absent", "onNext", "isPresent", "onComplete", "dispose", "onError", "onComplete"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}