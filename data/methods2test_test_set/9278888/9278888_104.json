{"test_class": {"identifier": "HttpHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(10L).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(10L).build()", "var_name": "context"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "@Mock SpanCustomizer spanCustomizer;", "modifier": "@Mock", "type": "SpanCustomizer", "declarator": "spanCustomizer", "var_name": "spanCustomizer"}, {"original_string": "@Mock HttpRequest request;", "modifier": "@Mock", "type": "HttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock HttpResponse response;", "modifier": "@Mock", "type": "HttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock HttpRequestParser requestParser;", "modifier": "@Mock", "type": "HttpRequestParser", "declarator": "requestParser", "var_name": "requestParser"}, {"original_string": "@Mock HttpResponseParser responseParser;", "modifier": "@Mock", "type": "HttpResponseParser", "declarator": "responseParser", "var_name": "responseParser"}, {"original_string": "HttpHandler handler;", "modifier": "", "type": "HttpHandler", "declarator": "handler", "var_name": "handler"}], "file": "instrumentation/http/src/test/java/brave/http/HttpHandlerTest.java"}, "test_case": {"identifier": "handleFinish_parsesTagsWithCustomizer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void handleFinish_parsesTagsWithCustomizer() {\n    when(span.customizer()).thenReturn(spanCustomizer);\n\n    handler.handleFinish(response, span);\n\n    verify(responseParser).parse(response, context, spanCustomizer);\n  }", "signature": "void handleFinish_parsesTagsWithCustomizer()", "full_signature": "@Test public void handleFinish_parsesTagsWithCustomizer()", "class_method_signature": "HttpHandlerTest.handleFinish_parsesTagsWithCustomizer()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "customizer", "handleFinish", "parse", "verify"]}, "focal_class": {"identifier": "HttpHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Object NULL_SENTINEL = new Object();", "modifier": "static final", "type": "Object", "declarator": "NULL_SENTINEL = new Object()", "var_name": "NULL_SENTINEL"}, {"original_string": "final HttpRequestParser requestParser;", "modifier": "final", "type": "HttpRequestParser", "declarator": "requestParser", "var_name": "requestParser"}, {"original_string": "final HttpResponseParser responseParser;", "modifier": "final", "type": "HttpResponseParser", "declarator": "responseParser", "var_name": "responseParser"}], "methods": [{"identifier": "HttpHandler", "parameters": "(HttpRequestParser requestParser, HttpResponseParser responseParser)", "modifiers": "", "return": "", "signature": " HttpHandler(HttpRequestParser requestParser, HttpResponseParser responseParser)", "full_signature": "  HttpHandler(HttpRequestParser requestParser, HttpResponseParser responseParser)", "class_method_signature": "HttpHandler.HttpHandler(HttpRequestParser requestParser, HttpResponseParser responseParser)", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(HttpRequest request, Span span)", "modifiers": "", "return": "Span", "signature": "Span handleStart(HttpRequest request, Span span)", "full_signature": " Span handleStart(HttpRequest request, Span span)", "class_method_signature": "HttpHandler.handleStart(HttpRequest request, Span span)", "testcase": false, "constructor": false}, {"identifier": "parseRequest", "parameters": "(HttpRequest request, Span span)", "modifiers": "", "return": "void", "signature": "void parseRequest(HttpRequest request, Span span)", "full_signature": " void parseRequest(HttpRequest request, Span span)", "class_method_signature": "HttpHandler.parseRequest(HttpRequest request, Span span)", "testcase": false, "constructor": false}, {"identifier": "parseResponse", "parameters": "(HttpResponse response, Span span)", "modifiers": "", "return": "void", "signature": "void parseResponse(HttpResponse response, Span span)", "full_signature": " void parseResponse(HttpResponse response, Span span)", "class_method_signature": "HttpHandler.parseResponse(HttpResponse response, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleFinish", "parameters": "(HttpResponse response, Span span)", "modifiers": "", "return": "void", "signature": "void handleFinish(HttpResponse response, Span span)", "full_signature": " void handleFinish(HttpResponse response, Span span)", "class_method_signature": "HttpHandler.handleFinish(HttpResponse response, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/http/src/main/java/brave/http/HttpHandler.java"}, "focal_method": {"identifier": "handleFinish", "parameters": "(HttpResponse response, Span span)", "modifiers": "", "return": "void", "body": "void handleFinish(HttpResponse response, Span span) {\n    if (response == null) throw new NullPointerException(\"response == null\");\n    if (span == null) throw new NullPointerException(\"span == null\");\n    if (span.isNoop()) return;\n\n    if (response.error() != null) {\n      span.error(response.error()); // Ensures MutableSpan.error() for SpanHandler\n    }\n\n    try {\n      parseResponse(response, span);\n    } catch (Throwable t) {\n      propagateIfFatal(t);\n      Platform.get().log(\"error parsing response {0}\", response, t);\n    } finally {\n      long finishTimestamp = response.finishTimestamp();\n      if (finishTimestamp == 0L) {\n        span.finish();\n      } else {\n        span.finish(finishTimestamp);\n      }\n    }\n  }", "signature": "void handleFinish(HttpResponse response, Span span)", "full_signature": " void handleFinish(HttpResponse response, Span span)", "class_method_signature": "HttpHandler.handleFinish(HttpResponse response, Span span)", "testcase": false, "constructor": false, "invocations": ["isNoop", "error", "error", "error", "parseResponse", "propagateIfFatal", "log", "get", "finishTimestamp", "finish", "finish"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}