{"test_class": {"identifier": "TableFieldMappingResourceTest", "superclass": "extends ResourceTest", "interfaces": "", "fields": [{"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private QueryStore queryStore;", "modifier": "private", "type": "QueryStore", "declarator": "queryStore", "var_name": "queryStore"}], "file": "real-time/foxtrot/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableFieldMappingResourceTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() throws Exception {\n        queryStore.save(TestUtils.TEST_TABLE_NAME, TestUtils.getMappingDocuments(mapper));\n        Thread.sleep(500);\n\n        Set<FieldTypeMapping> mappings = new HashSet<FieldTypeMapping>();\n        mappings.add(new FieldTypeMapping(\"word\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"data.data\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"header.hello\", FieldType.STRING));\n        mappings.add(new FieldTypeMapping(\"head.hello\", FieldType.LONG));\n\n        TableFieldMapping tableFieldMapping = new TableFieldMapping(TestUtils.TEST_TABLE_NAME, mappings);\n        String response = client().resource(String.format(\"/v1/tables/%s/fields\", TestUtils.TEST_TABLE_NAME))\n                .get(String.class);\n\n        TableFieldMapping mapping = mapper.readValue(response, TableFieldMapping.class);\n        assertEquals(tableFieldMapping.getTable(), mapping.getTable());\n        assertTrue(tableFieldMapping.getMappings().equals(mapping.getMappings()));\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "TableFieldMappingResourceTest.testGet()", "testcase": true, "constructor": false, "invocations": ["save", "getMappingDocuments", "sleep", "add", "add", "add", "add", "get", "resource", "client", "format", "readValue", "assertEquals", "getTable", "getTable", "assertTrue", "equals", "getMappings", "getMappings"]}, "focal_class": {"identifier": "TableFieldMappingResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TableFieldMappingResource.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TableFieldMappingResource.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private QueryStore queryStore;", "modifier": "private", "type": "QueryStore", "declarator": "queryStore", "var_name": "queryStore"}], "methods": [{"identifier": "TableFieldMappingResource", "parameters": "(QueryStore queryStore)", "modifiers": "public", "return": "", "signature": " TableFieldMappingResource(QueryStore queryStore)", "full_signature": "public  TableFieldMappingResource(QueryStore queryStore)", "class_method_signature": "TableFieldMappingResource.TableFieldMappingResource(QueryStore queryStore)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(@PathParam(\"name\") final String table)", "modifiers": "@GET public", "return": "Response", "signature": "Response get(@PathParam(\"name\") final String table)", "full_signature": "@GET public Response get(@PathParam(\"name\") final String table)", "class_method_signature": "TableFieldMappingResource.get(@PathParam(\"name\") final String table)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/TableFieldMappingResource.java"}, "focal_method": {"identifier": "get", "parameters": "(@PathParam(\"name\") final String table)", "modifiers": "@GET public", "return": "Response", "body": "@GET\n    public Response get(@PathParam(\"name\") final String table) {\n        try {\n            return Response.ok(queryStore.getFieldMappings(table)).build();\n        } catch (QueryStoreException ex) {\n            logger.error(\"Unable to fetch Table Metadata \" , ex);\n            throw new WebApplicationException(Response.serverError()\n                    .entity(Collections.singletonMap(\"error\", \"Metadata Fetch Failed\")).build());\n        }\n    }", "signature": "Response get(@PathParam(\"name\") final String table)", "full_signature": "@GET public Response get(@PathParam(\"name\") final String table)", "class_method_signature": "TableFieldMappingResource.get(@PathParam(\"name\") final String table)", "testcase": false, "constructor": false, "invocations": ["build", "ok", "getFieldMappings", "error", "build", "entity", "serverError", "singletonMap"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}