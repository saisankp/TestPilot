{"test_class": {"identifier": "ModuleUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/axway/grapes/commons/utils/ModuleUtilsTest.java"}, "test_case": {"identifier": "testGetThirdPartyLibraries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetThirdPartyLibraries(){\n        final Module module = DataModelFactory.createModule(\"module1\", \"1.0.0-SNAPSHOT\");\n        final Artifact artifact1 = DataModelFactory.createArtifact(\"com.my.company.test\", \"dependency1\", \"1.0.0-SNAPSHOT\", null, \"jar\", \"jar\");\n        final Dependency dependency1 = DataModelFactory.createDependency(artifact1, Scope.COMPILE);\n\n        final Artifact artifact2 = DataModelFactory.createArtifact(\"org.all\", \"dependency1\", \"1.0.0-SNAPSHOT\", null, \"jar\", \"jar\");\n        final Dependency dependency2 = DataModelFactory.createDependency(artifact2, Scope.COMPILE);\n\n        module.addDependency(dependency1);\n        module.addDependency(dependency2);\n\n        final List<String> corporateFilters = new ArrayList<String>();\n        corporateFilters.add(\"com.my.company\");\n\n        final List<Dependency> dependencies = ModuleUtils.getThirdPartyLibraries(module, corporateFilters);\n        assertNotNull(dependencies);\n        assertEquals(1, dependencies.size());\n        assertEquals(dependency2, dependencies.get(0));\n    }", "signature": "void testGetThirdPartyLibraries()", "full_signature": "@Test public void testGetThirdPartyLibraries()", "class_method_signature": "ModuleUtilsTest.testGetThirdPartyLibraries()", "testcase": true, "constructor": false, "invocations": ["createModule", "createArtifact", "createDependency", "createArtifact", "createDependency", "addDependency", "addDependency", "add", "getThirdPartyLibraries", "assertNotNull", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "ModuleUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ModuleUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ModuleUtils()", "full_signature": "private  ModuleUtils()", "class_method_signature": "ModuleUtils.ModuleUtils()", "testcase": false, "constructor": true}, {"identifier": "getAllArtifacts", "parameters": "(final Module module)", "modifiers": "public static", "return": "List<Artifact>", "signature": "List<Artifact> getAllArtifacts(final Module module)", "full_signature": "public static List<Artifact> getAllArtifacts(final Module module)", "class_method_signature": "ModuleUtils.getAllArtifacts(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getAllDependencies", "parameters": "(final Module module)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getAllDependencies(final Module module)", "full_signature": "public static List<Dependency> getAllDependencies(final Module module)", "class_method_signature": "ModuleUtils.getAllDependencies(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getAllDependencies", "parameters": "(final Module module, final List<String> producedArtifacts)", "modifiers": "public static", "return": "Set<Dependency>", "signature": "Set<Dependency> getAllDependencies(final Module module, final List<String> producedArtifacts)", "full_signature": "public static Set<Dependency> getAllDependencies(final Module module, final List<String> producedArtifacts)", "class_method_signature": "ModuleUtils.getAllDependencies(final Module module, final List<String> producedArtifacts)", "testcase": false, "constructor": false}, {"identifier": "getCorporateDependencies", "parameters": "(final Module module, final List<String> corporateFilters)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getCorporateDependencies(final Module module, final List<String> corporateFilters)", "full_signature": "public static List<Dependency> getCorporateDependencies(final Module module, final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.getCorporateDependencies(final Module module, final List<String> corporateFilters)", "testcase": false, "constructor": false}, {"identifier": "getThirdPartyLibraries", "parameters": "(final Module module, final List<String> corporateFilters)", "modifiers": "public static", "return": "List<Dependency>", "signature": "List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "full_signature": "public static List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "testcase": false, "constructor": false}, {"identifier": "generateCorporatePattern", "parameters": "(final List<String> corporateFilters)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern generateCorporatePattern(final List<String> corporateFilters)", "full_signature": "private static Pattern generateCorporatePattern(final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.generateCorporatePattern(final List<String> corporateFilters)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/axway/grapes/commons/utils/ModuleUtils.java"}, "focal_method": {"identifier": "getThirdPartyLibraries", "parameters": "(final Module module, final List<String> corporateFilters)", "modifiers": "public static", "return": "List<Dependency>", "body": "public static List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters) {\n        final List<Dependency> thirdParty = new ArrayList<Dependency>();\n        final Pattern corporatePattern = generateCorporatePattern(corporateFilters);\n\n        for(final Dependency dependency: getAllDependencies(module)){\n            if(!dependency.getTarget().getGavc().matches(corporatePattern.pattern())){\n                thirdParty.add(dependency);\n            }\n        }\n\n        return thirdParty;\n    }", "signature": "List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "full_signature": "public static List<Dependency> getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "class_method_signature": "ModuleUtils.getThirdPartyLibraries(final Module module, final List<String> corporateFilters)", "testcase": false, "constructor": false, "invocations": ["generateCorporatePattern", "getAllDependencies", "matches", "getGavc", "getTarget", "pattern", "add"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}