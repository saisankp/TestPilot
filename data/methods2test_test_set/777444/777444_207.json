{"test_class": {"identifier": "TabularDataExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_VALUE = \"value1\";", "modifier": "private static final", "type": "String", "declarator": "TEST_VALUE = \"value1\"", "var_name": "TEST_VALUE"}, {"original_string": "TabularDataExtractor extractor = new TabularDataExtractor();", "modifier": "", "type": "TabularDataExtractor", "declarator": "extractor = new TabularDataExtractor()", "var_name": "extractor"}, {"original_string": "ObjectToJsonConverter converter;", "modifier": "", "type": "ObjectToJsonConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/json/TabularDataExtractorTest.java"}, "test_case": {"identifier": "extractGenericTabularDataWithIntegerAndObjectNamePath", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void extractGenericTabularDataWithIntegerAndObjectNamePath() throws OpenDataException, AttributeNotFoundException, MalformedObjectNameException {\n        TabularTypeAndJson taj = new TabularTypeAndJson(\n                new String[] { \"bundleId\", \"oName\" },\n                new CompositeTypeAndJson(\n                        LONG,\"bundleId\",null,\n                        OBJECTNAME,\"oName\",null,\n                        BOOLEAN,\"active\",null\n                ));\n        TabularData data = new TabularDataSupport(taj.getType());\n        data.put(new CompositeDataSupport(\n                taj.getType().getRowType(),\n                new String[]{\"bundleId\", \"oName\", \"active\"},\n                new Object[]{10L,new ObjectName(\"test:type=bundle\"), false}\n        ));\n        JSONObject result = (JSONObject) extract(true, data, \"10\", \"test:type=bundle\");\n        assertEquals(result.size(),3);\n        assertEquals(result.get(\"bundleId\"),10L);\n        assertEquals(result.get(\"active\"),false);\n    }", "signature": "void extractGenericTabularDataWithIntegerAndObjectNamePath()", "full_signature": "@Test void extractGenericTabularDataWithIntegerAndObjectNamePath()", "class_method_signature": "TabularDataExtractorTest.extractGenericTabularDataWithIntegerAndObjectNamePath()", "testcase": true, "constructor": false, "invocations": ["getType", "put", "getRowType", "getType", "extract", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "TabularDataExtractor", "superclass": "", "interfaces": "implements Extractor", "fields": [], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getType()", "full_signature": "public Class getType()", "class_method_signature": "TabularDataExtractor.getType()", "testcase": false, "constructor": false}, {"identifier": "extractObject", "parameters": "(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts,boolean pJsonify)", "modifiers": "public", "return": "Object", "signature": "Object extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts,boolean pJsonify)", "full_signature": "public Object extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts,boolean pJsonify)", "class_method_signature": "TabularDataExtractor.extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts,boolean pJsonify)", "testcase": false, "constructor": false}, {"identifier": "checkForMxBeanMap", "parameters": "(TabularType pType)", "modifiers": "private", "return": "boolean", "signature": "boolean checkForMxBeanMap(TabularType pType)", "full_signature": "private boolean checkForMxBeanMap(TabularType pType)", "class_method_signature": "TabularDataExtractor.checkForMxBeanMap(TabularType pType)", "testcase": false, "constructor": false}, {"identifier": "convertTabularDataToJson", "parameters": "(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "modifiers": "private", "return": "Object", "signature": "Object convertTabularDataToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "full_signature": "private Object convertTabularDataToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "class_method_signature": "TabularDataExtractor.convertTabularDataToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "testcase": false, "constructor": false}, {"identifier": "hasComplexKeys", "parameters": "(TabularType pType)", "modifiers": "private", "return": "boolean", "signature": "boolean hasComplexKeys(TabularType pType)", "full_signature": "private boolean hasComplexKeys(TabularType pType)", "class_method_signature": "TabularDataExtractor.hasComplexKeys(TabularType pType)", "testcase": false, "constructor": false}, {"identifier": "convertToMaps", "parameters": "(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "modifiers": "private", "return": "Object", "signature": "Object convertToMaps(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "full_signature": "private Object convertToMaps(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "class_method_signature": "TabularDataExtractor.convertToMaps(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "testcase": false, "constructor": false}, {"identifier": "convertTabularDataDirectly", "parameters": "(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "modifiers": "private", "return": "Object", "signature": "Object convertTabularDataDirectly(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "full_signature": "private Object convertTabularDataDirectly(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "class_method_signature": "TabularDataExtractor.convertTabularDataDirectly(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "testcase": false, "constructor": false}, {"identifier": "getNextMap", "parameters": "(JSONObject pJsonObject, Object pKey)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject getNextMap(JSONObject pJsonObject, Object pKey)", "full_signature": "private JSONObject getNextMap(JSONObject pJsonObject, Object pKey)", "class_method_signature": "TabularDataExtractor.getNextMap(JSONObject pJsonObject, Object pKey)", "testcase": false, "constructor": false}, {"identifier": "extractCompositeDataFromPath", "parameters": "(TabularData pTd, Stack<String> pPathStack)", "modifiers": "private", "return": "CompositeData", "signature": "CompositeData extractCompositeDataFromPath(TabularData pTd, Stack<String> pPathStack)", "full_signature": "private CompositeData extractCompositeDataFromPath(TabularData pTd, Stack<String> pPathStack)", "class_method_signature": "TabularDataExtractor.extractCompositeDataFromPath(TabularData pTd, Stack<String> pPathStack)", "testcase": false, "constructor": false}, {"identifier": "checkPathFitsIndexNames", "parameters": "(Stack<String> pPathStack, List<String> pIndexNames)", "modifiers": "private", "return": "void", "signature": "void checkPathFitsIndexNames(Stack<String> pPathStack, List<String> pIndexNames)", "full_signature": "private void checkPathFitsIndexNames(Stack<String> pPathStack, List<String> pIndexNames)", "class_method_signature": "TabularDataExtractor.checkPathFitsIndexNames(Stack<String> pPathStack, List<String> pIndexNames)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(CompositeType rowType, String key, String value)", "modifiers": "private", "return": "Object", "signature": "Object getKey(CompositeType rowType, String key, String value)", "full_signature": "private Object getKey(CompositeType rowType, String key, String value)", "class_method_signature": "TabularDataExtractor.getKey(CompositeType rowType, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "convertMxBeanMapToJson", "parameters": "(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "modifiers": "private", "return": "Object", "signature": "Object convertMxBeanMapToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "full_signature": "private Object convertMxBeanMapToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "class_method_signature": "TabularDataExtractor.convertMxBeanMapToJson(TabularData pTd, Stack<String> pExtraArgs, ObjectToJsonConverter pConverter)", "testcase": false, "constructor": false}, {"identifier": "setObjectValue", "parameters": "(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "modifiers": "public", "return": "Object", "signature": "Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "full_signature": "public Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "class_method_signature": "TabularDataExtractor.setObjectValue(StringToObjectConverter pConverter, Object pInner, String pAttribute, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "canSetValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSetValue()", "full_signature": "public boolean canSetValue()", "class_method_signature": "TabularDataExtractor.canSetValue()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/json/TabularDataExtractor.java"}, "focal_method": {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class", "body": "public Class getType() {\n        return TabularData.class;\n    }", "signature": "Class getType()", "full_signature": "public Class getType()", "class_method_signature": "TabularDataExtractor.getType()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}