{"test_class": {"identifier": "BatchWindowAvgTest", "superclass": "", "interfaces": "", "fields": [], "file": "contrib/src/test/java/macrobase/analysis/transform/aggregate/BatchWindowAvgTest.java"}, "test_case": {"identifier": "testAggregate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAggregate() throws Exception {\n        List<Datum> data = new ArrayList<>();\n        for (int i = 0; i < 10; i ++) {\n            Datum d = new Datum(new ArrayList<>(), new ArrayRealVector(2));\n            d.metrics().setEntry(0, i);\n            d.metrics().setEntry(1, 1);\n            data.add(d);\n        }\n\n        BatchWindowAvg windowAvg = new BatchWindowAvg();\n        Datum avg = windowAvg.aggregate(data);\n        assertEquals(avg.metrics().getEntry(0), 4.5, 1e-5);\n        assertEquals(avg.metrics().getEntry(1), 1, 1e-5);\n\n        /* Test datum with time column */\n        MacroBaseConf conf = new MacroBaseConf().set(MacroBaseConf.TIME_COLUMN, 0);\n        windowAvg = new BatchWindowAvg(conf);\n        avg = windowAvg.aggregate(data);\n        assert(avg.metrics().getEntry(0) == 0);\n        assertEquals(avg.metrics().getEntry(1), 1, 1e-5);\n    }", "signature": "void testAggregate()", "full_signature": "@Test public void testAggregate()", "class_method_signature": "BatchWindowAvgTest.testAggregate()", "testcase": true, "constructor": false, "invocations": ["setEntry", "metrics", "setEntry", "metrics", "add", "aggregate", "assertEquals", "getEntry", "metrics", "assertEquals", "getEntry", "metrics", "set", "aggregate", "getEntry", "metrics", "assertEquals", "getEntry", "metrics"]}, "focal_class": {"identifier": "BatchWindowAvg", "superclass": "extends BatchWindowAggregate", "interfaces": "", "fields": [], "methods": [{"identifier": "BatchWindowAvg", "parameters": "()", "modifiers": "public", "return": "", "signature": " BatchWindowAvg()", "full_signature": "public  BatchWindowAvg()", "class_method_signature": "BatchWindowAvg.BatchWindowAvg()", "testcase": false, "constructor": true}, {"identifier": "BatchWindowAvg", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " BatchWindowAvg(MacroBaseConf conf)", "full_signature": "public  BatchWindowAvg(MacroBaseConf conf)", "class_method_signature": "BatchWindowAvg.BatchWindowAvg(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "aggregate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "Datum", "signature": "Datum aggregate(List<Datum> data)", "full_signature": "public Datum aggregate(List<Datum> data)", "class_method_signature": "BatchWindowAvg.aggregate(List<Datum> data)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/transform/aggregate/BatchWindowAvg.java"}, "focal_method": {"identifier": "aggregate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "Datum", "body": "public Datum aggregate(List<Datum> data) {\n        if (data.isEmpty())\n            return new Datum(new ArrayList<>(), new ArrayRealVector(dim));\n\n        dim = data.get(0).metrics().getDimension();\n        double[] results = new double[dim];\n        for (Datum d : data) {\n            RealVector metrics = d.metrics();\n            for (int i = 0; i < dim; i ++) {\n                if (timeColumn != null && i == timeColumn)\n                    continue;\n                results[i] += metrics.getEntry(i) / data.size();\n            }\n        }\n\n        return new Datum(new ArrayList<>(), new ArrayRealVector(results));\n    }", "signature": "Datum aggregate(List<Datum> data)", "full_signature": "public Datum aggregate(List<Datum> data)", "class_method_signature": "BatchWindowAvg.aggregate(List<Datum> data)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getDimension", "metrics", "get", "metrics", "getEntry", "size"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}