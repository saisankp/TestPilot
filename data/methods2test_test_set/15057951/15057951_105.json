{"test_class": {"identifier": "BetweenMatcherTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BetweenMatcherType<String> type = new BetweenMatcherType<String>();", "modifier": "private final", "type": "BetweenMatcherType<String>", "declarator": "type = new BetweenMatcherType<String>()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/matchers/type/BetweenMatcherTypeTest.java"}, "test_case": {"identifier": "shouldTrimAllWhitespacesFromRangeBeginningAndEndBeforePassingToTypeDecoding", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldTrimAllWhitespacesFromRangeBeginningAndEndBeforePassingToTypeDecoding() {\n        // given\n        BetweenMatcher matcher = new BetweenMatcher(true, true, \"~\");\n\n        // when\n        Range<String> decoded = type.decode(\"  A ~ B  \", null, matcher);\n\n        // then\n        assertThat(decoded.from()).isEqualTo(\"A\");\n        assertThat(decoded.to()).isEqualTo(\"B\");\n    }", "signature": "void shouldTrimAllWhitespacesFromRangeBeginningAndEndBeforePassingToTypeDecoding()", "full_signature": "@Test public void shouldTrimAllWhitespacesFromRangeBeginningAndEndBeforePassingToTypeDecoding()", "class_method_signature": "BetweenMatcherTypeTest.shouldTrimAllWhitespacesFromRangeBeginningAndEndBeforePassingToTypeDecoding()", "testcase": true, "constructor": false, "invocations": ["decode", "isEqualTo", "assertThat", "from", "isEqualTo", "assertThat", "to"]}, "focal_class": {"identifier": "BetweenMatcherType", "superclass": "", "interfaces": "implements MatcherType<Range<C>>", "fields": [{"original_string": "private final SimpleMatcherType simpleType = new SimpleMatcherType();", "modifier": "private final", "type": "SimpleMatcherType", "declarator": "simpleType = new SimpleMatcherType()", "var_name": "simpleType"}], "methods": [{"identifier": "decode", "parameters": "(String value, Type<?> type, Matcher matcher)", "modifiers": "@Override public", "return": "Range<C>", "signature": "Range<C> decode(String value, Type<?> type, Matcher matcher)", "full_signature": "@Override public Range<C> decode(String value, Type<?> type, Matcher matcher)", "class_method_signature": "BetweenMatcherType.decode(String value, Type<?> type, Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "findSeparator", "parameters": "(String pattern, char[] separators)", "modifiers": "private", "return": "char", "signature": "char findSeparator(String pattern, char[] separators)", "full_signature": "private char findSeparator(String pattern, char[] separators)", "class_method_signature": "BetweenMatcherType.findSeparator(String pattern, char[] separators)", "testcase": false, "constructor": false}, {"identifier": "decodeValue", "parameters": "(String value, Type<?> type)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Object", "signature": "Object decodeValue(String value, Type<?> type)", "full_signature": "@SuppressWarnings(\"unchecked\") private Object decodeValue(String value, Type<?> type)", "class_method_signature": "BetweenMatcherType.decodeValue(String value, Type<?> type)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Range<C> object, Type<?> type, Matcher matcher)", "modifiers": "@Override public", "return": "String", "signature": "String encode(Range<C> object, Type<?> type, Matcher matcher)", "full_signature": "@Override public String encode(Range<C> object, Type<?> type, Matcher matcher)", "class_method_signature": "BetweenMatcherType.encode(Range<C> object, Type<?> type, Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "findSeparator", "parameters": "(String encodedFrom, String encodedTo, char[] separators)", "modifiers": "private", "return": "char", "signature": "char findSeparator(String encodedFrom, String encodedTo, char[] separators)", "full_signature": "private char findSeparator(String encodedFrom, String encodedTo, char[] separators)", "class_method_signature": "BetweenMatcherType.findSeparator(String encodedFrom, String encodedTo, char[] separators)", "testcase": false, "constructor": false}, {"identifier": "encodeValue", "parameters": "(Object value, Type<?> type)", "modifiers": "private", "return": "String", "signature": "String encodeValue(Object value, Type<?> type)", "full_signature": "private String encodeValue(Object value, Type<?> type)", "class_method_signature": "BetweenMatcherType.encodeValue(Object value, Type<?> type)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/matchers/type/BetweenMatcherType.java"}, "focal_method": {"identifier": "decode", "parameters": "(String value, Type<?> type, Matcher matcher)", "modifiers": "@Override public", "return": "Range<C>", "body": "@Override\n    public Range<C> decode(String value, Type<?> type, Matcher matcher) {\n        BetweenMatcher betweenMatcher = (BetweenMatcher) matcher;\n        char separator = findSeparator(value, betweenMatcher.separators());\n\n        String[] values = EngineUtil.split2(value, separator);\n        String from = values[0].trim();\n        String to = values[1].trim();\n\n        return new Range<C>(decodeValue(from, type), decodeValue(to, type));\n    }", "signature": "Range<C> decode(String value, Type<?> type, Matcher matcher)", "full_signature": "@Override public Range<C> decode(String value, Type<?> type, Matcher matcher)", "class_method_signature": "BetweenMatcherType.decode(String value, Type<?> type, Matcher matcher)", "testcase": false, "constructor": false, "invocations": ["findSeparator", "separators", "split2", "trim", "trim", "decodeValue", "decodeValue"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}