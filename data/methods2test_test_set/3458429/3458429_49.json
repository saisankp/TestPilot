{"test_class": {"identifier": "HttpURITest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/model/HttpURITest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testParse() {\n        HttpURI uri = new HttpURI();\n\n        uri.parse(\"*\");\n        assertNull(uri.getHost());\n        assertEquals(\"*\", uri.getPath());\n\n        uri.parse(\"/foo/bar\");\n        assertNull(uri.getHost());\n        assertEquals(\"/foo/bar\", uri.getPath());\n\n        uri.parse(\"//foo/bar\");\n        assertEquals(\"foo\", uri.getHost());\n        assertEquals(\"/bar\", uri.getPath());\n\n        uri.parse(\"http://foo/bar\");\n        assertEquals(\"foo\", uri.getHost());\n        assertEquals(\"/bar\", uri.getPath());\n    }", "signature": "void testParse()", "full_signature": "@Test void testParse()", "class_method_signature": "HttpURITest.testParse()", "testcase": true, "constructor": false, "invocations": ["parse", "assertNull", "getHost", "assertEquals", "getPath", "parse", "assertNull", "getHost", "assertEquals", "getPath", "parse", "assertEquals", "getHost", "assertEquals", "getPath", "parse", "assertEquals", "getHost", "assertEquals", "getPath"]}, "focal_class": {"identifier": "HttpURI", "superclass": "", "interfaces": "", "fields": [{"original_string": "String uri;", "modifier": "", "type": "String", "declarator": "uri", "var_name": "uri"}, {"original_string": "String decodedPath;", "modifier": "", "type": "String", "declarator": "decodedPath", "var_name": "decodedPath"}, {"original_string": "private String scheme;", "modifier": "private", "type": "String", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "private String user;", "modifier": "private", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private String param;", "modifier": "private", "type": "String", "declarator": "param", "var_name": "param"}, {"original_string": "private String query;", "modifier": "private", "type": "String", "declarator": "query", "var_name": "query"}, {"original_string": "private String fragment;", "modifier": "private", "type": "String", "declarator": "fragment", "var_name": "fragment"}], "methods": [{"identifier": "HttpURI", "parameters": "()", "modifiers": "public", "return": "", "signature": " HttpURI()", "full_signature": "public  HttpURI()", "class_method_signature": "HttpURI.HttpURI()", "testcase": false, "constructor": true}, {"identifier": "HttpURI", "parameters": "(String scheme, String host, int port, String path, String param, String query, String fragment)", "modifiers": "public", "return": "", "signature": " HttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "full_signature": "public  HttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "class_method_signature": "HttpURI.HttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "testcase": false, "constructor": true}, {"identifier": "HttpURI", "parameters": "(HttpURI uri)", "modifiers": "public", "return": "", "signature": " HttpURI(HttpURI uri)", "full_signature": "public  HttpURI(HttpURI uri)", "class_method_signature": "HttpURI.HttpURI(HttpURI uri)", "testcase": false, "constructor": true}, {"identifier": "HttpURI", "parameters": "(String uri)", "modifiers": "public", "return": "", "signature": " HttpURI(String uri)", "full_signature": "public  HttpURI(String uri)", "class_method_signature": "HttpURI.HttpURI(String uri)", "testcase": false, "constructor": true}, {"identifier": "HttpURI", "parameters": "(URI uri)", "modifiers": "public", "return": "", "signature": " HttpURI(URI uri)", "full_signature": "public  HttpURI(URI uri)", "class_method_signature": "HttpURI.HttpURI(URI uri)", "testcase": false, "constructor": true}, {"identifier": "HttpURI", "parameters": "(String scheme, String host, int port, String pathQuery)", "modifiers": "public", "return": "", "signature": " HttpURI(String scheme, String host, int port, String pathQuery)", "full_signature": "public  HttpURI(String scheme, String host, int port, String pathQuery)", "class_method_signature": "HttpURI.HttpURI(String scheme, String host, int port, String pathQuery)", "testcase": false, "constructor": true}, {"identifier": "createHttpURI", "parameters": "(String scheme, String host, int port, String path, String param, String query, String fragment)", "modifiers": "public static", "return": "HttpURI", "signature": "HttpURI createHttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "full_signature": "public static HttpURI createHttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "class_method_signature": "HttpURI.createHttpURI(String scheme, String host, int port, String path, String param, String query, String fragment)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String uri)", "modifiers": "public", "return": "void", "signature": "void parse(String uri)", "full_signature": "public void parse(String uri)", "class_method_signature": "HttpURI.parse(String uri)", "testcase": false, "constructor": false}, {"identifier": "parseRequestTarget", "parameters": "(String method, String uri)", "modifiers": "public", "return": "void", "signature": "void parseRequestTarget(String method, String uri)", "full_signature": "public void parseRequestTarget(String method, String uri)", "class_method_signature": "HttpURI.parseRequestTarget(String method, String uri)", "testcase": false, "constructor": false}, {"identifier": "parseConnect", "parameters": "(String uri)", "modifiers": "@Deprecated public", "return": "void", "signature": "void parseConnect(String uri)", "full_signature": "@Deprecated public void parseConnect(String uri)", "class_method_signature": "HttpURI.parseConnect(String uri)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String uri, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void parse(String uri, int offset, int length)", "full_signature": "public void parse(String uri, int offset, int length)", "class_method_signature": "HttpURI.parse(String uri, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(State state, final String uri, final int offset, final int end)", "modifiers": "private", "return": "void", "signature": "void parse(State state, final String uri, final int offset, final int end)", "full_signature": "private void parse(State state, final String uri, final int offset, final int end)", "class_method_signature": "HttpURI.parse(State state, final String uri, final int offset, final int end)", "testcase": false, "constructor": false}, {"identifier": "getScheme", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScheme()", "full_signature": "public String getScheme()", "class_method_signature": "HttpURI.getScheme()", "testcase": false, "constructor": false}, {"identifier": "setScheme", "parameters": "(String scheme)", "modifiers": "public", "return": "void", "signature": "void setScheme(String scheme)", "full_signature": "public void setScheme(String scheme)", "class_method_signature": "HttpURI.setScheme(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "HttpURI.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "HttpURI.getPort()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPath()", "full_signature": "public String getPath()", "class_method_signature": "HttpURI.getPath()", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void setPath(String path)", "full_signature": "public void setPath(String path)", "class_method_signature": "HttpURI.setPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getDecodedPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDecodedPath()", "full_signature": "public String getDecodedPath()", "class_method_signature": "HttpURI.getDecodedPath()", "testcase": false, "constructor": false}, {"identifier": "getParam", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getParam()", "full_signature": "public String getParam()", "class_method_signature": "HttpURI.getParam()", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQuery()", "full_signature": "public String getQuery()", "class_method_signature": "HttpURI.getQuery()", "testcase": false, "constructor": false}, {"identifier": "setQuery", "parameters": "(String query)", "modifiers": "public", "return": "void", "signature": "void setQuery(String query)", "full_signature": "public void setQuery(String query)", "class_method_signature": "HttpURI.setQuery(String query)", "testcase": false, "constructor": false}, {"identifier": "hasQuery", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasQuery()", "full_signature": "public boolean hasQuery()", "class_method_signature": "HttpURI.hasQuery()", "testcase": false, "constructor": false}, {"identifier": "getFragment", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFragment()", "full_signature": "public String getFragment()", "class_method_signature": "HttpURI.getFragment()", "testcase": false, "constructor": false}, {"identifier": "decodeQueryTo", "parameters": "(MultiMap<String> parameters)", "modifiers": "public", "return": "void", "signature": "void decodeQueryTo(MultiMap<String> parameters)", "full_signature": "public void decodeQueryTo(MultiMap<String> parameters)", "class_method_signature": "HttpURI.decodeQueryTo(MultiMap<String> parameters)", "testcase": false, "constructor": false}, {"identifier": "decodeQueryTo", "parameters": "(MultiMap<String> parameters, String encoding)", "modifiers": "public", "return": "void", "signature": "void decodeQueryTo(MultiMap<String> parameters, String encoding)", "full_signature": "public void decodeQueryTo(MultiMap<String> parameters, String encoding)", "class_method_signature": "HttpURI.decodeQueryTo(MultiMap<String> parameters, String encoding)", "testcase": false, "constructor": false}, {"identifier": "decodeQueryTo", "parameters": "(MultiMap<String> parameters, Charset encoding)", "modifiers": "public", "return": "void", "signature": "void decodeQueryTo(MultiMap<String> parameters, Charset encoding)", "full_signature": "public void decodeQueryTo(MultiMap<String> parameters, Charset encoding)", "class_method_signature": "HttpURI.decodeQueryTo(MultiMap<String> parameters, Charset encoding)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "HttpURI.clear()", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "public boolean isAbsolute()", "class_method_signature": "HttpURI.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "HttpURI.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "HttpURI.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "setAuthority", "parameters": "(String host, int port)", "modifiers": "public", "return": "void", "signature": "void setAuthority(String host, int port)", "full_signature": "public void setAuthority(String host, int port)", "class_method_signature": "HttpURI.setAuthority(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI toURI()", "full_signature": "public URI toURI()", "class_method_signature": "HttpURI.toURI()", "testcase": false, "constructor": false}, {"identifier": "getPathQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPathQuery()", "full_signature": "public String getPathQuery()", "class_method_signature": "HttpURI.getPathQuery()", "testcase": false, "constructor": false}, {"identifier": "setPathQuery", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void setPathQuery(String path)", "full_signature": "public void setPathQuery(String path)", "class_method_signature": "HttpURI.setPathQuery(String path)", "testcase": false, "constructor": false}, {"identifier": "getAuthority", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuthority()", "full_signature": "public String getAuthority()", "class_method_signature": "HttpURI.getAuthority()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUser()", "full_signature": "public String getUser()", "class_method_signature": "HttpURI.getUser()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/model/HttpURI.java"}, "focal_method": {"identifier": "parse", "parameters": "(String uri)", "modifiers": "public", "return": "void", "body": "public void parse(String uri) {\n        clear();\n        this.uri = uri;\n        parse(State.START, uri, 0, uri.length());\n    }", "signature": "void parse(String uri)", "full_signature": "public void parse(String uri)", "class_method_signature": "HttpURI.parse(String uri)", "testcase": false, "constructor": false, "invocations": ["clear", "parse", "length"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}