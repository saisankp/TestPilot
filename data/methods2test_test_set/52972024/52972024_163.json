{"test_class": {"identifier": "MDPasswordEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IEncoder encoder;", "modifier": "private", "type": "IEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private ICharSequenceCodec charSequenceCodec;", "modifier": "private", "type": "ICharSequenceCodec", "declarator": "charSequenceCodec", "var_name": "charSequenceCodec"}, {"original_string": "private IPasswordEncoder passwordEncoder;", "modifier": "private", "type": "IPasswordEncoder", "declarator": "passwordEncoder", "var_name": "passwordEncoder"}, {"original_string": "private final String password = \"testPassword\";", "modifier": "private final", "type": "String", "declarator": "password = \"testPassword\"", "var_name": "password"}, {"original_string": "private final String encodePassword = \"testPasswordEncode\";", "modifier": "private final", "type": "String", "declarator": "encodePassword = \"testPasswordEncode\"", "var_name": "encodePassword"}, {"original_string": "private final String charSequenceEncodePassword = \"testPasswordCharSequenceEncode\";", "modifier": "private final", "type": "String", "declarator": "charSequenceEncodePassword = \"testPasswordCharSequenceEncode\"", "var_name": "charSequenceEncodePassword"}], "file": "CoreFeatures/Security/MDPasswordEncoder/src/test/java/info/smart_tools/smartactors/security/encoding/MDPasswordEncoderTest.java"}, "test_case": {"identifier": "encodePasswordTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encodePasswordTest() throws EncodingException, DecodingException {\n        resetVerifyMockObject();\n\n        String result = passwordEncoder.encode(password);\n\n        assertNotEquals(result, null);\n        assertEquals(result, charSequenceEncodePassword);\n\n        verify(encoder, times(1)).encode(anyObject());\n        verify(charSequenceCodec, times(1)).encode(password);\n        verify(charSequenceCodec).decode(eq(encodePassword.getBytes()));\n    }", "signature": "void encodePasswordTest()", "full_signature": "@Test public void encodePasswordTest()", "class_method_signature": "MDPasswordEncoderTest.encodePasswordTest()", "testcase": true, "constructor": false, "invocations": ["resetVerifyMockObject", "encode", "assertNotEquals", "assertEquals", "encode", "verify", "times", "anyObject", "encode", "verify", "times", "decode", "verify", "eq", "getBytes"]}, "focal_class": {"identifier": "MDPasswordEncoder", "superclass": "", "interfaces": "implements IPasswordEncoder", "fields": [{"original_string": "private final String algorithm;", "modifier": "private final", "type": "String", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "private final IEncoder encoder;", "modifier": "private final", "type": "IEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private final ICharSequenceCodec charSequenceCodec;", "modifier": "private final", "type": "ICharSequenceCodec", "declarator": "charSequenceCodec", "var_name": "charSequenceCodec"}, {"original_string": "private int iterations;", "modifier": "private", "type": "int", "declarator": "iterations", "var_name": "iterations"}], "methods": [{"identifier": "MDPasswordEncoder", "parameters": "(\n            final String algorithm,\n            final IEncoder encoder,\n            final ICharSequenceCodec charSequenceCodec\n    )", "modifiers": "private", "return": "", "signature": " MDPasswordEncoder(\n            final String algorithm,\n            final IEncoder encoder,\n            final ICharSequenceCodec charSequenceCodec\n    )", "full_signature": "private  MDPasswordEncoder(\n            final String algorithm,\n            final IEncoder encoder,\n            final ICharSequenceCodec charSequenceCodec\n    )", "class_method_signature": "MDPasswordEncoder.MDPasswordEncoder(\n            final String algorithm,\n            final IEncoder encoder,\n            final ICharSequenceCodec charSequenceCodec\n    )", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n            @Nonnull final String algorithm,\n            @Nonnull final IEncoder encoder,\n            @Nonnull final ICharSequenceCodec charSequenceCodec\n    )", "modifiers": "public static", "return": "MDPasswordEncoder", "signature": "MDPasswordEncoder create(\n            @Nonnull final String algorithm,\n            @Nonnull final IEncoder encoder,\n            @Nonnull final ICharSequenceCodec charSequenceCodec\n    )", "full_signature": "public static MDPasswordEncoder create(\n            @Nonnull final String algorithm,\n            @Nonnull final IEncoder encoder,\n            @Nonnull final ICharSequenceCodec charSequenceCodec\n    )", "class_method_signature": "MDPasswordEncoder.create(\n            @Nonnull final String algorithm,\n            @Nonnull final IEncoder encoder,\n            @Nonnull final ICharSequenceCodec charSequenceCodec\n    )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(@Nonnull final String password)", "modifiers": "@Override public", "return": "String", "signature": "String encode(@Nonnull final String password)", "full_signature": "@Override public String encode(@Nonnull final String password)", "class_method_signature": "MDPasswordEncoder.encode(@Nonnull final String password)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(@Nonnull final String password, @Nonnull final String salt)", "modifiers": "@Override public", "return": "String", "signature": "String encode(@Nonnull final String password, @Nonnull final String salt)", "full_signature": "@Override public String encode(@Nonnull final String password, @Nonnull final String salt)", "class_method_signature": "MDPasswordEncoder.encode(@Nonnull final String password, @Nonnull final String salt)", "testcase": false, "constructor": false}, {"identifier": "setIterations", "parameters": "(final int iterations)", "modifiers": "@Override public", "return": "void", "signature": "void setIterations(final int iterations)", "full_signature": "@Override public void setIterations(final int iterations)", "class_method_signature": "MDPasswordEncoder.setIterations(final int iterations)", "testcase": false, "constructor": false}, {"identifier": "mergePasswordAndSalt", "parameters": "(final String password, final String salt)", "modifiers": "private", "return": "String", "signature": "String mergePasswordAndSalt(final String password, final String salt)", "full_signature": "private String mergePasswordAndSalt(final String password, final String salt)", "class_method_signature": "MDPasswordEncoder.mergePasswordAndSalt(final String password, final String salt)", "testcase": false, "constructor": false}, {"identifier": "getMessageDigest", "parameters": "()", "modifiers": "private", "return": "MessageDigest", "signature": "MessageDigest getMessageDigest()", "full_signature": "private MessageDigest getMessageDigest()", "class_method_signature": "MDPasswordEncoder.getMessageDigest()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Security/MDPasswordEncoder/src/main/java/info/smart_tools/smartactors/security/encoding/MDPasswordEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(@Nonnull final String password)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encode(@Nonnull final String password) throws EncodingException {\n        try {\n            MessageDigest messageDigest = getMessageDigest();\n\n            byte[] digest = messageDigest.digest(charSequenceCodec.encode(password));\n            for (int i = 1; i < iterations; i++) {\n                digest = messageDigest.digest(digest);\n            }\n\n            return charSequenceCodec.decode(encoder.encode(digest));\n        } catch (Exception e) {\n            throw new EncodingException(\"Password encoding has been failed because: \" + e.getMessage(), e);\n        }\n    }", "signature": "String encode(@Nonnull final String password)", "full_signature": "@Override public String encode(@Nonnull final String password)", "class_method_signature": "MDPasswordEncoder.encode(@Nonnull final String password)", "testcase": false, "constructor": false, "invocations": ["getMessageDigest", "digest", "encode", "digest", "decode", "encode", "getMessage"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}