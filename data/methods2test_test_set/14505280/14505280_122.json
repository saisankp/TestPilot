{"test_class": {"identifier": "RestControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\t@Qualifier(\"/rest/**\")\n\tRestController restController;", "modifier": "@Autowired\n\t@Qualifier(\"/rest/**\")", "type": "RestController", "declarator": "restController", "var_name": "restController"}, {"original_string": "@Autowired\n\tprivate SecurityManager securityManager;", "modifier": "@Autowired\n\tprivate", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}, {"original_string": "@Autowired\n\tprivate GeoService geoservice;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoservice", "var_name": "geoservice"}, {"original_string": "@Autowired\n\t@Qualifier(\"rest.server.mvc.GeoJsonView\")\n\tprivate View view;", "modifier": "@Autowired\n\t@Qualifier(\"rest.server.mvc.GeoJsonView\")\n\tprivate", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "private HandlerAdapter adapter;", "modifier": "private", "type": "HandlerAdapter", "declarator": "adapter", "var_name": "adapter"}], "file": "plugin/face-rest/face-rest/src/test/java/org/geomajas/rest/server/mvc/RestControllerTest.java"}, "test_case": {"identifier": "testReadOneFeature", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReadOneFeature() throws Exception {\n\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\trequest.setRequestURI(\"/rest/beans/1.json\");\n\t\trequest.setMethod(\"GET\");\n\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tModelAndView mav = adapter.handle(request, response, restController);\n\n\t\tObject o = mav.getModel().get(RestController.FEATURE_COLLECTION);\n\t\tAssert.assertTrue(o instanceof InternalFeature);\n\t\tInternalFeature feature = (InternalFeature) o;\n\n\t\tAssert.assertEquals(\"bean1\", feature.getAttributes().get(\"stringAttr\").getValue());\n\t\tAssert.assertEquals(true, feature.getAttributes().get(\"booleanAttr\").getValue());\n\t\tAssert.assertEquals(\"100,23\", feature.getAttributes().get(\"currencyAttr\").getValue());\n\t\tCalendar c = Calendar.getInstance();\n\t\tc.set(2010, 1, 23, 0, 0, 0);\n\t\tc.set(Calendar.MILLISECOND, 0);\n\t\tAssert.assertEquals(c.getTime(), feature.getAttributes().get(\"dateAttr\").getValue());\n\t\tAssert.assertEquals(123.456, feature.getAttributes().get(\"doubleAttr\").getValue());\n\t\tAssert.assertEquals(456.789F, feature.getAttributes().get(\"floatAttr\").getValue());\n\t\tAssert.assertEquals(\"http://www.geomajas.org/image1\",\n\t\t\t\tfixSlash(feature.getAttributes().get(\"imageUrlAttr\").getValue().toString()));\n\t\tAssert.assertEquals(789, feature.getAttributes().get(\"integerAttr\").getValue());\n\t\tAssert.assertEquals(123456789L, feature.getAttributes().get(\"longAttr\").getValue());\n\t\tAssert.assertEquals((short) 123, feature.getAttributes().get(\"shortAttr\").getValue());\n\t\tAssert.assertEquals(\"http://www.geomajas.org/url1\",\n\t\t\t\tfixSlash(feature.getAttributes().get(\"urlAttr\").getValue().toString()));\n\n\t\tview.render(mav.getModel(), request, response);\n\t\tresponse.flushBuffer();\n\t\tObject json = new JSONParser().parse(response.getContentAsString());\n\t\tString isodate = GeoJSONUtil.DATE_FORMAT.format(c.getTime());\n\t\tAssert.assertTrue(json instanceof JSONObject);\n\t\tAssert.assertEquals(\"{\\\"type\\\":\\\"Feature\\\",\" + \"\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\"\n\t\t\t\t+ \"\\\"coordinates\\\":[[[[0.0,0.0],[1,0.0],[1,1],[0.0,1],[0.0,0.0]]]]},\" + \"\\\"properties\\\":{\"\n\t\t\t\t+ \"\\\"stringAttr\\\":\\\"bean1\\\",\" + \"\\\"booleanAttr\\\":true,\" + \"\\\"currencyAttr\\\":\\\"100,23\\\",\"\n\t\t\t\t+ \"\\\"dateAttr\\\":\\\"\" + isodate + \"\\\",\" + \"\\\"doubleAttr\\\":123.456,\\\"floatAttr\\\":456.789,\"\n\t\t\t\t+ \"\\\"imageUrlAttr\\\":\\\"http://www.geomajas.org/image1\\\",\"\n\t\t\t\t+ \"\\\"integerAttr\\\":789,\\\"longAttr\\\":123456789,\" + \"\\\"shortAttr\\\":123,\"\n\t\t\t\t+ \"\\\"urlAttr\\\":\\\"http://www.geomajas.org/url1\\\"},\" + \"\\\"id\\\":\\\"1\\\"}\",\n\t\t\t\tfixSlash(response.getContentAsString()));\n\t}", "signature": "void testReadOneFeature()", "full_signature": "@Test public void testReadOneFeature()", "class_method_signature": "RestControllerTest.testReadOneFeature()", "testcase": true, "constructor": false, "invocations": ["setRequestURI", "setMethod", "handle", "get", "getModel", "assertTrue", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "getInstance", "set", "set", "assertEquals", "getTime", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "fixSlash", "toString", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "getValue", "get", "getAttributes", "assertEquals", "fixSlash", "toString", "getValue", "get", "getAttributes", "render", "getModel", "flushBuffer", "parse", "getContentAsString", "format", "getTime", "assertTrue", "assertEquals", "fixSlash", "getContentAsString"]}, "focal_class": {"identifier": "RestController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate VectorLayerService vectorLayerService;", "modifier": "@Autowired\n\tprivate", "type": "VectorLayerService", "declarator": "vectorLayerService", "var_name": "vectorLayerService"}, {"original_string": "@Autowired\n\tprivate FilterService filterService;", "modifier": "@Autowired\n\tprivate", "type": "FilterService", "declarator": "filterService", "var_name": "filterService"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "public static final String TEXT_VIEW = \"rest.server.mvc.TextView\";", "modifier": "public static final", "type": "String", "declarator": "TEXT_VIEW = \"rest.server.mvc.TextView\"", "var_name": "TEXT_VIEW"}, {"original_string": "public static final String GEOJSON_VIEW = \"rest.server.mvc.GeoJsonView\";", "modifier": "public static final", "type": "String", "declarator": "GEOJSON_VIEW = \"rest.server.mvc.GeoJsonView\"", "var_name": "GEOJSON_VIEW"}, {"original_string": "public static final String KML_VIEW = \"rest.server.mvc.KmlView\";", "modifier": "public static final", "type": "String", "declarator": "KML_VIEW = \"rest.server.mvc.KmlView\"", "var_name": "KML_VIEW"}, {"original_string": "public static final String SHAPE_VIEW = \"rest.server.mvc.ShpView\";", "modifier": "public static final", "type": "String", "declarator": "SHAPE_VIEW = \"rest.server.mvc.ShpView\"", "var_name": "SHAPE_VIEW"}, {"original_string": "public static final String FEATURE_COLLECTION = \"FeatureCollection\";", "modifier": "public static final", "type": "String", "declarator": "FEATURE_COLLECTION = \"FeatureCollection\"", "var_name": "FEATURE_COLLECTION"}, {"original_string": "public static final String VECTOR_LAYER_INFO = \"VectorLayerInfo\";", "modifier": "public static final", "type": "String", "declarator": "VECTOR_LAYER_INFO = \"VectorLayerInfo\"", "var_name": "VECTOR_LAYER_INFO"}, {"original_string": "public static final String VECTOR_LAYER_ID = \"VectorLayerId\";", "modifier": "public static final", "type": "String", "declarator": "VECTOR_LAYER_ID = \"VectorLayerId\"", "var_name": "VECTOR_LAYER_ID"}, {"original_string": "public static final String ATTRIBUTES = \"Attrs\";", "modifier": "public static final", "type": "String", "declarator": "ATTRIBUTES = \"Attrs\"", "var_name": "ATTRIBUTES"}], "methods": [{"identifier": "readOneFeature", "parameters": "(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "modifiers": "@RequestMapping(value = \"/rest/{layerId}/{featureId}.{format}\", method = RequestMethod.GET) public", "return": "String", "signature": "String readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "full_signature": "@RequestMapping(value = \"/rest/{layerId}/{featureId}.{format}\", method = RequestMethod.GET) public String readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "class_method_signature": "RestController.readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "testcase": false, "constructor": false}, {"identifier": "readFeatures", "parameters": "(@PathVariable String layerId,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs,\n\t\t\t@RequestParam(value = \"box\", required = false) Envelope box,\n\t\t\t@RequestParam(value = \"bbox\", required = false) Envelope bbox,\n\t\t\t@RequestParam(value = \"maxFeatures\", required = false) Integer maxFeatures,\n\t\t\t@RequestParam(value = \"limit\", required = false) Integer limit,\n\t\t\t@RequestParam(value = \"offset\", required = false) Integer offset,\n\t\t\t@RequestParam(value = \"order_by\", required = false) String orderBy,\n\t\t\t@RequestParam(value = \"dir\", required = false) FeatureOrder dir,\n\t\t\t@RequestParam(value = \"queryable\", required = false) String queryable,\n\t\t\t@RequestParam(value = \"format\", required = false, defaultValue = \"json\") String format,\n\t\t\t@RequestParam(value = \"epsg\", required = false) String epsg,\n\t\t\tWebRequest request, Model model)", "modifiers": "@RequestMapping(value = \"/rest/{layerId}\", method = RequestMethod.GET) public", "return": "String", "signature": "String readFeatures(@PathVariable String layerId,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs,\n\t\t\t@RequestParam(value = \"box\", required = false) Envelope box,\n\t\t\t@RequestParam(value = \"bbox\", required = false) Envelope bbox,\n\t\t\t@RequestParam(value = \"maxFeatures\", required = false) Integer maxFeatures,\n\t\t\t@RequestParam(value = \"limit\", required = false) Integer limit,\n\t\t\t@RequestParam(value = \"offset\", required = false) Integer offset,\n\t\t\t@RequestParam(value = \"order_by\", required = false) String orderBy,\n\t\t\t@RequestParam(value = \"dir\", required = false) FeatureOrder dir,\n\t\t\t@RequestParam(value = \"queryable\", required = false) String queryable,\n\t\t\t@RequestParam(value = \"format\", required = false, defaultValue = \"json\") String format,\n\t\t\t@RequestParam(value = \"epsg\", required = false) String epsg,\n\t\t\tWebRequest request, Model model)", "full_signature": "@RequestMapping(value = \"/rest/{layerId}\", method = RequestMethod.GET) public String readFeatures(@PathVariable String layerId,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs,\n\t\t\t@RequestParam(value = \"box\", required = false) Envelope box,\n\t\t\t@RequestParam(value = \"bbox\", required = false) Envelope bbox,\n\t\t\t@RequestParam(value = \"maxFeatures\", required = false) Integer maxFeatures,\n\t\t\t@RequestParam(value = \"limit\", required = false) Integer limit,\n\t\t\t@RequestParam(value = \"offset\", required = false) Integer offset,\n\t\t\t@RequestParam(value = \"order_by\", required = false) String orderBy,\n\t\t\t@RequestParam(value = \"dir\", required = false) FeatureOrder dir,\n\t\t\t@RequestParam(value = \"queryable\", required = false) String queryable,\n\t\t\t@RequestParam(value = \"format\", required = false, defaultValue = \"json\") String format,\n\t\t\t@RequestParam(value = \"epsg\", required = false) String epsg,\n\t\t\tWebRequest request, Model model)", "class_method_signature": "RestController.readFeatures(@PathVariable String layerId,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs,\n\t\t\t@RequestParam(value = \"box\", required = false) Envelope box,\n\t\t\t@RequestParam(value = \"bbox\", required = false) Envelope bbox,\n\t\t\t@RequestParam(value = \"maxFeatures\", required = false) Integer maxFeatures,\n\t\t\t@RequestParam(value = \"limit\", required = false) Integer limit,\n\t\t\t@RequestParam(value = \"offset\", required = false) Integer offset,\n\t\t\t@RequestParam(value = \"order_by\", required = false) String orderBy,\n\t\t\t@RequestParam(value = \"dir\", required = false) FeatureOrder dir,\n\t\t\t@RequestParam(value = \"queryable\", required = false) String queryable,\n\t\t\t@RequestParam(value = \"format\", required = false, defaultValue = \"json\") String format,\n\t\t\t@RequestParam(value = \"epsg\", required = false) String epsg,\n\t\t\tWebRequest request, Model model)", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "(String fileType)", "modifiers": "private", "return": "String", "signature": "String getView(String fileType)", "full_signature": "private String getView(String fileType)", "class_method_signature": "RestController.getView(String fileType)", "testcase": false, "constructor": false}, {"identifier": "createUpdateFeatures", "parameters": "()", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView createUpdateFeatures()", "full_signature": "public ModelAndView createUpdateFeatures()", "class_method_signature": "RestController.createUpdateFeatures()", "testcase": false, "constructor": false}, {"identifier": "updateFeature", "parameters": "()", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView updateFeature()", "full_signature": "public ModelAndView updateFeature()", "class_method_signature": "RestController.updateFeature()", "testcase": false, "constructor": false}, {"identifier": "deleteFeature", "parameters": "()", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView deleteFeature()", "full_signature": "public ModelAndView deleteFeature()", "class_method_signature": "RestController.deleteFeature()", "testcase": false, "constructor": false}, {"identifier": "countFeatures", "parameters": "()", "modifiers": "public", "return": "ModelAndView", "signature": "ModelAndView countFeatures()", "full_signature": "public ModelAndView countFeatures()", "class_method_signature": "RestController.countFeatures()", "testcase": false, "constructor": false}, {"identifier": "initBinder", "parameters": "(WebDataBinder binder)", "modifiers": "@InitBinder public", "return": "void", "signature": "void initBinder(WebDataBinder binder)", "full_signature": "@InitBinder public void initBinder(WebDataBinder binder)", "class_method_signature": "RestController.initBinder(WebDataBinder binder)", "testcase": false, "constructor": false}, {"identifier": "getIncludes", "parameters": "(Boolean noGeom)", "modifiers": "private", "return": "int", "signature": "int getIncludes(Boolean noGeom)", "full_signature": "private int getIncludes(Boolean noGeom)", "class_method_signature": "RestController.getIncludes(Boolean noGeom)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(Integer offset)", "modifiers": "private", "return": "int", "signature": "int getOffset(Integer offset)", "full_signature": "private int getOffset(Integer offset)", "class_method_signature": "RestController.getOffset(Integer offset)", "testcase": false, "constructor": false}, {"identifier": "getLimit", "parameters": "(Integer... limit)", "modifiers": "private", "return": "int", "signature": "int getLimit(Integer... limit)", "full_signature": "private int getLimit(Integer... limit)", "class_method_signature": "RestController.getLimit(Integer... limit)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(List<Filter> filters)", "modifiers": "private", "return": "Filter", "signature": "Filter and(List<Filter> filters)", "full_signature": "private Filter and(List<Filter> filters)", "class_method_signature": "RestController.and(List<Filter> filters)", "testcase": false, "constructor": false}, {"identifier": "createBBoxFilter", "parameters": "(String layerId, Crs crs, Envelope... bbox)", "modifiers": "private", "return": "Filter", "signature": "Filter createBBoxFilter(String layerId, Crs crs, Envelope... bbox)", "full_signature": "private Filter createBBoxFilter(String layerId, Crs crs, Envelope... bbox)", "class_method_signature": "RestController.createBBoxFilter(String layerId, Crs crs, Envelope... bbox)", "testcase": false, "constructor": false}, {"identifier": "createAttributeFilter", "parameters": "(String attributeName, String operation, String value)", "modifiers": "private", "return": "Filter", "signature": "Filter createAttributeFilter(String attributeName, String operation, String value)", "full_signature": "private Filter createAttributeFilter(String attributeName, String operation, String value)", "class_method_signature": "RestController.createAttributeFilter(String attributeName, String operation, String value)", "testcase": false, "constructor": false}, {"identifier": "createComparator", "parameters": "(VectorLayer layer, final String attributeName,\n\t\t\tfinal FeatureOrder order)", "modifiers": "private", "return": "Comparator<? super InternalFeature>", "signature": "Comparator<? super InternalFeature> createComparator(VectorLayer layer, final String attributeName,\n\t\t\tfinal FeatureOrder order)", "full_signature": "private Comparator<? super InternalFeature> createComparator(VectorLayer layer, final String attributeName,\n\t\t\tfinal FeatureOrder order)", "class_method_signature": "RestController.createComparator(VectorLayer layer, final String attributeName,\n\t\t\tfinal FeatureOrder order)", "testcase": false, "constructor": false}], "file": "plugin/face-rest/face-rest/src/main/java/org/geomajas/rest/server/mvc/RestController.java"}, "focal_method": {"identifier": "readOneFeature", "parameters": "(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "modifiers": "@RequestMapping(value = \"/rest/{layerId}/{featureId}.{format}\", method = RequestMethod.GET) public", "return": "String", "body": "@RequestMapping(value = \"/rest/{layerId}/{featureId}.{format}\", method = RequestMethod.GET)\n\tpublic String readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model) throws RestException {\n\t\tList<InternalFeature> features;\n\t\ttry {\n\t\t\tfeatures = vectorLayerService.getFeatures(layerId, null, filterService\n\t\t\t\t\t.createFidFilter(new String[] { featureId }), null, getIncludes(noGeom));\n\t\t} catch (GeomajasException e) {\n\t\t\tthrow new RestException(e, RestException.PROBLEM_READING_LAYERSERVICE, layerId);\n\t\t}\n\t\tif (features.size() != 1) {\n\t\t\tthrow new RestException(RestException.FEATURE_NOT_FOUND, featureId, layerId);\n\t\t}\n\t\tList<String> attributes = null;\n\t\tif (attrs != null) {\n\t\t\tattributes = Arrays.asList(attrs.split(\",\"));\n\t\t}\n\n\t\tmodel.addAttribute(FEATURE_COLLECTION, features.get(0));\n\t\tmodel.addAttribute(VECTOR_LAYER_INFO, features.get(0).getLayer().getLayerInfo());\n\t\tmodel.addAttribute(ATTRIBUTES, attributes);\n\t\tmodel.addAttribute(VECTOR_LAYER_ID, layerId);\n\t\treturn getView(format);\n\t}", "signature": "String readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "full_signature": "@RequestMapping(value = \"/rest/{layerId}/{featureId}.{format}\", method = RequestMethod.GET) public String readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "class_method_signature": "RestController.readOneFeature(@PathVariable String layerId, @PathVariable String featureId,\n\t\t\t@PathVariable String format,\n\t\t\t@RequestParam(value = \"no_geom\", required = false) boolean noGeom,\n\t\t\t@RequestParam(value = \"attrs\", required = false) String attrs, Model model)", "testcase": false, "constructor": false, "invocations": ["getFeatures", "createFidFilter", "getIncludes", "size", "asList", "split", "addAttribute", "get", "addAttribute", "getLayerInfo", "getLayer", "get", "addAttribute", "addAttribute", "getView"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}