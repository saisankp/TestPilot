{"test_class": {"identifier": "TreeToListByLevelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TreeToListByLevel toList;", "modifier": "private", "type": "TreeToListByLevel", "declarator": "toList", "var_name": "toList"}], "file": "algs/src/test/java/com/github/pedrovgs/problem66/TreeToListByLevelTest.java"}, "test_case": {"identifier": "shouldReturnEmptyListIfTreeIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnEmptyListIfTreeIsNull() {\n    List<BinaryNode> result = toList.transform(null);\n\n    assertTrue(result.isEmpty());\n  }", "signature": "void shouldReturnEmptyListIfTreeIsNull()", "full_signature": "@Test public void shouldReturnEmptyListIfTreeIsNull()", "class_method_signature": "TreeToListByLevelTest.shouldReturnEmptyListIfTreeIsNull()", "testcase": true, "constructor": false, "invocations": ["transform", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "TreeToListByLevel", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "transform", "parameters": "(BinaryNode tree)", "modifiers": "public", "return": "List<BinaryNode>", "signature": "List<BinaryNode> transform(BinaryNode tree)", "full_signature": "public List<BinaryNode> transform(BinaryNode tree)", "class_method_signature": "TreeToListByLevel.transform(BinaryNode tree)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem66/TreeToListByLevel.java"}, "focal_method": {"identifier": "transform", "parameters": "(BinaryNode tree)", "modifiers": "public", "return": "List<BinaryNode>", "body": "public List<BinaryNode> transform(BinaryNode tree) {\n    if (tree == null) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<BinaryNode> nodesByLevel = new LinkedList<BinaryNode>();\n    Queue<BinaryNode> stack = new LinkedList<BinaryNode>();\n    stack.add(tree);\n    while (!stack.isEmpty()) {\n      BinaryNode node = stack.remove();\n      nodesByLevel.add(node);\n      if (node.getLeft() != null) {\n        stack.add(node.getLeft());\n      }\n      if (node.getRight() != null) {\n        stack.add(node.getRight());\n      }\n    }\n    return nodesByLevel;\n  }", "signature": "List<BinaryNode> transform(BinaryNode tree)", "full_signature": "public List<BinaryNode> transform(BinaryNode tree)", "class_method_signature": "TreeToListByLevel.transform(BinaryNode tree)", "testcase": false, "constructor": false, "invocations": ["add", "isEmpty", "remove", "add", "getLeft", "add", "getLeft", "getRight", "add", "getRight"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}