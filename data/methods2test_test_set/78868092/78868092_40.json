{"test_class": {"identifier": "SubscriptionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final SubscriptionService subscriptionService = new SubscriptionService();", "modifier": "@InjectMocks\n    private final", "type": "SubscriptionService", "declarator": "subscriptionService = new SubscriptionService()", "var_name": "subscriptionService"}, {"original_string": "@Mock\n    private SeyrenRepository seyrenRepository;", "modifier": "@Mock\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "file": "services/src/test/java/com/vsct/supervision/notification/service/SubscriptionServiceTest.java"}, "test_case": {"identifier": "deleteSubscriptionFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteSubscriptionFail() throws Exception {\n        when(seyrenRepository.deleteSubscription(TestUtils.DEFAULT_ALARM_ID, TestUtils.DEFAULT_SUBSCRIPTION_ID)).thenReturn(false);\n\n        try {\n            subscriptionService.deleteSubscription(TestUtils.DEFAULT_ALARM_ID, TestUtils.DEFAULT_SUBSCRIPTION_ID);\n        } catch (CerebroException ce) {\n            assertEquals(ErrorCode.SUBSCRIPTION_DELETE_ERROR, ce.getErrorCode());\n        }\n\n        verify(seyrenRepository).deleteSubscription(TestUtils.DEFAULT_ALARM_ID, TestUtils.DEFAULT_SUBSCRIPTION_ID);\n        verifyNoMoreInteractions(seyrenRepository);\n    }", "signature": "void deleteSubscriptionFail()", "full_signature": "@Test public void deleteSubscriptionFail()", "class_method_signature": "SubscriptionServiceTest.deleteSubscriptionFail()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "deleteSubscription", "deleteSubscription", "assertEquals", "getErrorCode", "deleteSubscription", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SubscriptionService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SubscriptionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SubscriptionService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SeyrenRepository seyrenRepository;", "modifier": "@Autowired\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "methods": [{"identifier": "getSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription getSubscription(String alarmId, String subscriptionId)", "full_signature": "public Subscription getSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.getSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}, {"identifier": "addSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void addSubscription(Subscription subscription, String alarmId)", "full_signature": "public void addSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.addSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "searchSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "Subscription", "signature": "Subscription searchSubscription(Subscription subscription, String alarmId)", "full_signature": "public Subscription searchSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.searchSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "updateSubscription", "parameters": "(Subscription subscription, String alarmId)", "modifiers": "public", "return": "void", "signature": "void updateSubscription(Subscription subscription, String alarmId)", "full_signature": "public void updateSubscription(Subscription subscription, String alarmId)", "class_method_signature": "SubscriptionService.updateSubscription(Subscription subscription, String alarmId)", "testcase": false, "constructor": false}, {"identifier": "validateSubscription", "parameters": "(Subscription subscription)", "modifiers": "private", "return": "void", "signature": "void validateSubscription(Subscription subscription)", "full_signature": "private void validateSubscription(Subscription subscription)", "class_method_signature": "SubscriptionService.validateSubscription(Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "validateUpdateSubscription", "parameters": "(Subscription current, Subscription updated)", "modifiers": "private", "return": "void", "signature": "void validateUpdateSubscription(Subscription current, Subscription updated)", "full_signature": "private void validateUpdateSubscription(Subscription current, Subscription updated)", "class_method_signature": "SubscriptionService.validateUpdateSubscription(Subscription current, Subscription updated)", "testcase": false, "constructor": false}, {"identifier": "isLastSubscriptionActiveToDisable", "parameters": "(Subscription current, Subscription updated, Alarm alarm)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "full_signature": "private boolean isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "class_method_signature": "SubscriptionService.isLastSubscriptionActiveToDisable(Subscription current, Subscription updated, Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "deleteSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "SubscriptionService.DeletedSubscriptionStatus", "signature": "SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "full_signature": "public SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.deleteSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/service/SubscriptionService.java"}, "focal_method": {"identifier": "deleteSubscription", "parameters": "(String alarmId, String subscriptionId)", "modifiers": "public", "return": "SubscriptionService.DeletedSubscriptionStatus", "body": "public SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId) {\n        LOGGER.info(\"Delete subscription {} for alarm {}\", subscriptionId, alarmId);\n\n        if (this.seyrenRepository.deleteSubscription(alarmId, subscriptionId)) {\n            Alarm alarm = seyrenRepository.getAlarm(alarmId);\n            if (alarm.getSubscriptions().isEmpty()) {\n                if (seyrenRepository.deleteAlarm(alarmId)) {\n                    return SubscriptionService.DeletedSubscriptionStatus.ALARM_DELETED;\n                }\n                throw new CerebroException(ErrorCode.SEYREN_ERROR, \"Delete alarm '\" + alarmId + \"'has fail\");\n            }\n            return SubscriptionService.DeletedSubscriptionStatus.OK;\n        }\n\n        throw new CerebroException(ErrorCode.SUBSCRIPTION_DELETE_ERROR,\n            \"Delete subscription '\" + subscriptionId + \"' on alarm '\" + alarmId + \"' has fail\");\n    }", "signature": "SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "full_signature": "public SubscriptionService.DeletedSubscriptionStatus deleteSubscription(String alarmId, String subscriptionId)", "class_method_signature": "SubscriptionService.deleteSubscription(String alarmId, String subscriptionId)", "testcase": false, "constructor": false, "invocations": ["info", "deleteSubscription", "getAlarm", "isEmpty", "getSubscriptions", "deleteAlarm"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}