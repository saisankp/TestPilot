{"test_class": {"identifier": "ProjectHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String dbName = DatabaseSettings.COUCH_DB_DATABASE;", "modifier": "private static final", "type": "String", "declarator": "dbName = DatabaseSettings.COUCH_DB_DATABASE", "var_name": "dbName"}, {"original_string": "private static final String attachmentDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS;", "modifier": "private static final", "type": "String", "declarator": "attachmentDbName = DatabaseSettings.COUCH_DB_ATTACHMENTS", "var_name": "attachmentDbName"}, {"original_string": "private static final User user1 = new User().setEmail(\"user1\").setDepartment(\"AB CD EF\");", "modifier": "private static final", "type": "User", "declarator": "user1 = new User().setEmail(\"user1\").setDepartment(\"AB CD EF\")", "var_name": "user1"}, {"original_string": "private static final User user2 = new User().setEmail(\"user2\").setDepartment(\"AB CD FE\");", "modifier": "private static final", "type": "User", "declarator": "user2 = new User().setEmail(\"user2\").setDepartment(\"AB CD FE\")", "var_name": "user2"}, {"original_string": "private static final User user3 = new User().setEmail(\"user3\").setDepartment(\"AB CD EF\");", "modifier": "private static final", "type": "User", "declarator": "user3 = new User().setEmail(\"user3\").setDepartment(\"AB CD EF\")", "var_name": "user3"}, {"original_string": "ProjectHandler handler;", "modifier": "", "type": "ProjectHandler", "declarator": "handler", "var_name": "handler"}], "file": "backend/src/src-projects/src/test/java/org/eclipse/sw360/projects/ProjectHandlerTest.java"}, "test_case": {"identifier": "testGetProjectByIdUser3_2", "parameters": "()", "modifiers": "@Test(expected = SW360Exception.class) public", "return": "void", "body": "@Test(expected = SW360Exception.class)\n    public void testGetProjectByIdUser3_2() throws Exception {\n        handler.getProjectById(\"P3\", user2);\n    }", "signature": "void testGetProjectByIdUser3_2()", "full_signature": "@Test(expected = SW360Exception.class) public void testGetProjectByIdUser3_2()", "class_method_signature": "ProjectHandlerTest.testGetProjectByIdUser3_2()", "testcase": true, "constructor": false, "invocations": ["getProjectById"]}, "focal_class": {"identifier": "ProjectHandler", "superclass": "", "interfaces": "implements ProjectService.Iface", "fields": [{"original_string": "private final ProjectDatabaseHandler handler;", "modifier": "private final", "type": "ProjectDatabaseHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private final ProjectSearchHandler searchHandler;", "modifier": "private final", "type": "ProjectSearchHandler", "declarator": "searchHandler", "var_name": "searchHandler"}], "methods": [{"identifier": "ProjectHandler", "parameters": "()", "modifiers": "", "return": "", "signature": " ProjectHandler()", "full_signature": "  ProjectHandler()", "class_method_signature": "ProjectHandler.ProjectHandler()", "testcase": false, "constructor": true}, {"identifier": "refineSearch", "parameters": "(String text, Map<String, Set<String>> subQueryRestrictions, User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> refineSearch(String text, Map<String, Set<String>> subQueryRestrictions, User user)", "full_signature": "@Override public List<Project> refineSearch(String text, Map<String, Set<String>> subQueryRestrictions, User user)", "class_method_signature": "ProjectHandler.refineSearch(String text, Map<String, Set<String>> subQueryRestrictions, User user)", "testcase": false, "constructor": false}, {"identifier": "getMyProjects", "parameters": "(String user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> getMyProjects(String user)", "full_signature": "@Override public List<Project> getMyProjects(String user)", "class_method_signature": "ProjectHandler.getMyProjects(String user)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleProjectsSummary", "parameters": "(User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> getAccessibleProjectsSummary(User user)", "full_signature": "@Override public List<Project> getAccessibleProjectsSummary(User user)", "class_method_signature": "ProjectHandler.getAccessibleProjectsSummary(User user)", "testcase": false, "constructor": false}, {"identifier": "getAccessibleProjects", "parameters": "(User user)", "modifiers": "@Override public", "return": "Set<Project>", "signature": "Set<Project> getAccessibleProjects(User user)", "full_signature": "@Override public Set<Project> getAccessibleProjects(User user)", "class_method_signature": "ProjectHandler.getAccessibleProjects(User user)", "testcase": false, "constructor": false}, {"identifier": "searchByName", "parameters": "(String name, User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> searchByName(String name, User user)", "full_signature": "@Override public List<Project> searchByName(String name, User user)", "class_method_signature": "ProjectHandler.searchByName(String name, User user)", "testcase": false, "constructor": false}, {"identifier": "searchByReleaseId", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "Set<Project>", "signature": "Set<Project> searchByReleaseId(String id, User user)", "full_signature": "@Override public Set<Project> searchByReleaseId(String id, User user)", "class_method_signature": "ProjectHandler.searchByReleaseId(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "searchByReleaseIds", "parameters": "(Set<String> ids, User user)", "modifiers": "@Override public", "return": "Set<Project>", "signature": "Set<Project> searchByReleaseIds(Set<String> ids, User user)", "full_signature": "@Override public Set<Project> searchByReleaseIds(Set<String> ids, User user)", "class_method_signature": "ProjectHandler.searchByReleaseIds(Set<String> ids, User user)", "testcase": false, "constructor": false}, {"identifier": "searchLinkingProjects", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "Set<Project>", "signature": "Set<Project> searchLinkingProjects(String id, User user)", "full_signature": "@Override public Set<Project> searchLinkingProjects(String id, User user)", "class_method_signature": "ProjectHandler.searchLinkingProjects(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectById", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "Project", "signature": "Project getProjectById(String id, User user)", "full_signature": "@Override public Project getProjectById(String id, User user)", "class_method_signature": "ProjectHandler.getProjectById(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectsById", "parameters": "(List<String> id, User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> getProjectsById(List<String> id, User user)", "full_signature": "@Override public List<Project> getProjectsById(List<String> id, User user)", "class_method_signature": "ProjectHandler.getProjectsById(List<String> id, User user)", "testcase": false, "constructor": false}, {"identifier": "getProjectByIdForEdit", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "Project", "signature": "Project getProjectByIdForEdit(String id, User user)", "full_signature": "@Override public Project getProjectByIdForEdit(String id, User user)", "class_method_signature": "ProjectHandler.getProjectByIdForEdit(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getCountByReleaseIds", "parameters": "(Set<String> ids)", "modifiers": "@Override public", "return": "int", "signature": "int getCountByReleaseIds(Set<String> ids)", "full_signature": "@Override public int getCountByReleaseIds(Set<String> ids)", "class_method_signature": "ProjectHandler.getCountByReleaseIds(Set<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getCountByProjectId", "parameters": "(String id)", "modifiers": "@Override public", "return": "int", "signature": "int getCountByProjectId(String id)", "full_signature": "@Override public int getCountByProjectId(String id)", "class_method_signature": "ProjectHandler.getCountByProjectId(String id)", "testcase": false, "constructor": false}, {"identifier": "addProject", "parameters": "(Project project, User user)", "modifiers": "@Override public", "return": "AddDocumentRequestSummary", "signature": "AddDocumentRequestSummary addProject(Project project, User user)", "full_signature": "@Override public AddDocumentRequestSummary addProject(Project project, User user)", "class_method_signature": "ProjectHandler.addProject(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "updateProject", "parameters": "(Project project, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus updateProject(Project project, User user)", "full_signature": "@Override public RequestStatus updateProject(Project project, User user)", "class_method_signature": "ProjectHandler.updateProject(Project project, User user)", "testcase": false, "constructor": false}, {"identifier": "updateProjectFromModerationRequest", "parameters": "(Project projectAdditions, Project projectDeletions, User user)", "modifiers": "public", "return": "RequestStatus", "signature": "RequestStatus updateProjectFromModerationRequest(Project projectAdditions, Project projectDeletions, User user)", "full_signature": "public RequestStatus updateProjectFromModerationRequest(Project projectAdditions, Project projectDeletions, User user)", "class_method_signature": "ProjectHandler.updateProjectFromModerationRequest(Project projectAdditions, Project projectDeletions, User user)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus deleteProject(String id, User user)", "full_signature": "@Override public RequestStatus deleteProject(String id, User user)", "class_method_signature": "ProjectHandler.deleteProject(String id, User user)", "testcase": false, "constructor": false}, {"identifier": "getLinkedProjectsOfProject", "parameters": "(Project project, boolean deep, User user)", "modifiers": "@Override public", "return": "List<ProjectLink>", "signature": "List<ProjectLink> getLinkedProjectsOfProject(Project project, boolean deep, User user)", "full_signature": "@Override public List<ProjectLink> getLinkedProjectsOfProject(Project project, boolean deep, User user)", "class_method_signature": "ProjectHandler.getLinkedProjectsOfProject(Project project, boolean deep, User user)", "testcase": false, "constructor": false}, {"identifier": "getLinkedProjectsById", "parameters": "(String id, boolean deep, User user)", "modifiers": "@Override public", "return": "List<ProjectLink>", "signature": "List<ProjectLink> getLinkedProjectsById(String id, boolean deep, User user)", "full_signature": "@Override public List<ProjectLink> getLinkedProjectsById(String id, boolean deep, User user)", "class_method_signature": "ProjectHandler.getLinkedProjectsById(String id, boolean deep, User user)", "testcase": false, "constructor": false}, {"identifier": "getLinkedProjects", "parameters": "(Map<String, ProjectRelationship> relations, User user)", "modifiers": "@Override public", "return": "List<ProjectLink>", "signature": "List<ProjectLink> getLinkedProjects(Map<String, ProjectRelationship> relations, User user)", "full_signature": "@Override public List<ProjectLink> getLinkedProjects(Map<String, ProjectRelationship> relations, User user)", "class_method_signature": "ProjectHandler.getLinkedProjects(Map<String, ProjectRelationship> relations, User user)", "testcase": false, "constructor": false}, {"identifier": "getDuplicateProjects", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getDuplicateProjects()", "full_signature": "@Override public Map<String, List<String>> getDuplicateProjects()", "class_method_signature": "ProjectHandler.getDuplicateProjects()", "testcase": false, "constructor": false}, {"identifier": "fillClearingStateSummary", "parameters": "(List<Project> projects, User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> fillClearingStateSummary(List<Project> projects, User user)", "full_signature": "@Override public List<Project> fillClearingStateSummary(List<Project> projects, User user)", "class_method_signature": "ProjectHandler.fillClearingStateSummary(List<Project> projects, User user)", "testcase": false, "constructor": false}, {"identifier": "fillClearingStateSummaryIncludingSubprojects", "parameters": "(List<Project> projects, User user)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "full_signature": "@Override public List<Project> fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "class_method_signature": "ProjectHandler.fillClearingStateSummaryIncludingSubprojects(List<Project> projects, User user)", "testcase": false, "constructor": false}, {"identifier": "getReleaseClearingStatuses", "parameters": "(String projectId, User user)", "modifiers": "@Override public", "return": "List<ReleaseClearingStatusData>", "signature": "List<ReleaseClearingStatusData> getReleaseClearingStatuses(String projectId, User user)", "full_signature": "@Override public List<ReleaseClearingStatusData> getReleaseClearingStatuses(String projectId, User user)", "class_method_signature": "ProjectHandler.getReleaseClearingStatuses(String projectId, User user)", "testcase": false, "constructor": false}, {"identifier": "removeAttachmentFromProject", "parameters": "(String projectId, User user, String attachmentContentId)", "modifiers": "@Override public", "return": "RequestStatus", "signature": "RequestStatus removeAttachmentFromProject(String projectId, User user, String attachmentContentId)", "full_signature": "@Override public RequestStatus removeAttachmentFromProject(String projectId, User user, String attachmentContentId)", "class_method_signature": "ProjectHandler.removeAttachmentFromProject(String projectId, User user, String attachmentContentId)", "testcase": false, "constructor": false}, {"identifier": "projectIsUsed", "parameters": "(String projectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean projectIsUsed(String projectId)", "full_signature": "@Override public boolean projectIsUsed(String projectId)", "class_method_signature": "ProjectHandler.projectIsUsed(String projectId)", "testcase": false, "constructor": false}], "file": "backend/src/src-projects/src/main/java/org/eclipse/sw360/projects/ProjectHandler.java"}, "focal_method": {"identifier": "getProjectById", "parameters": "(String id, User user)", "modifiers": "@Override public", "return": "Project", "body": "@Override\n    public Project getProjectById(String id, User user) throws TException {\n        assertUser(user);\n        assertId(id);\n\n        Project project = handler.getProjectById(id, user);\n        assertNotNull(project);\n\n        return project;\n    }", "signature": "Project getProjectById(String id, User user)", "full_signature": "@Override public Project getProjectById(String id, User user)", "class_method_signature": "ProjectHandler.getProjectById(String id, User user)", "testcase": false, "constructor": false, "invocations": ["assertUser", "assertId", "getProjectById", "assertNotNull"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}