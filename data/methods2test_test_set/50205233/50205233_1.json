{"test_class": {"identifier": "SourceInfoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int avroSchemaCacheSize = 1000;", "modifier": "private static", "type": "int", "declarator": "avroSchemaCacheSize = 1000", "var_name": "avroSchemaCacheSize"}, {"original_string": "private static final AvroData avroData = new AvroData(avroSchemaCacheSize);", "modifier": "private static final", "type": "AvroData", "declarator": "avroData = new AvroData(avroSchemaCacheSize)", "var_name": "avroData"}, {"original_string": "private static final String FILENAME = \"mysql-bin.00001\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME = \"mysql-bin.00001\"", "var_name": "FILENAME"}, {"original_string": "private static final String GTID_SET = \"gtid-set\";", "modifier": "private static final", "type": "String", "declarator": "GTID_SET = \"gtid-set\"", "var_name": "GTID_SET"}, {"original_string": "private static final String SERVER_NAME = \"my-server\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_NAME = \"my-server\"", "var_name": "SERVER_NAME"}, {"original_string": "private SourceInfo source;", "modifier": "private", "type": "SourceInfo", "declarator": "source", "var_name": "source"}, {"original_string": "private boolean inTxn = false;", "modifier": "private", "type": "boolean", "declarator": "inTxn = false", "var_name": "inTxn"}, {"original_string": "private long positionOfBeginEvent = 0L;", "modifier": "private", "type": "long", "declarator": "positionOfBeginEvent = 0L", "var_name": "positionOfBeginEvent"}, {"original_string": "private int eventNumberInTxn = 0;", "modifier": "private", "type": "int", "declarator": "eventNumberInTxn = 0", "var_name": "eventNumberInTxn"}], "file": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/SourceInfoTest.java"}, "test_case": {"identifier": "shouldAdvanceSourceInfoFromNonZeroPositionAndRowZeroForEventsWithMultipleRow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAdvanceSourceInfoFromNonZeroPositionAndRowZeroForEventsWithMultipleRow() {\n        sourceWith(offset(100, 0));\n\n        // Try a transactions with just one event ...\n        handleTransactionBegin(150, 2);\n        handleNextEvent(200, 10, withRowCount(3));\n        handleTransactionCommit(210, 2);\n\n        handleTransactionBegin(210, 2);\n        handleNextEvent(220, 10, withRowCount(4));\n        handleTransactionCommit(230, 3);\n\n        handleTransactionBegin(240, 2);\n        handleNextEvent(250, 50, withRowCount(5));\n        handleTransactionCommit(300, 4);\n\n        // Try a transactions with multiple events ...\n        handleTransactionBegin(340, 2);\n        handleNextEvent(350, 20, withRowCount(6));\n        handleNextEvent(370, 30, withRowCount(1));\n        handleNextEvent(400, 40, withRowCount(3));\n        handleTransactionCommit(440, 4);\n\n        handleTransactionBegin(500, 2);\n        handleNextEvent(510, 20, withRowCount(8));\n        handleNextEvent(540, 15, withRowCount(9));\n        handleNextEvent(560, 10, withRowCount(1));\n        handleTransactionCommit(580, 4);\n\n        // Try another single event transaction ...\n        handleTransactionBegin(600, 2);\n        handleNextEvent(610, 50, withRowCount(1));\n        handleTransactionCommit(660, 4);\n\n        // Try event outside of a transaction ...\n        handleNextEvent(670, 10, withRowCount(5));\n\n        // Try another single event transaction ...\n        handleTransactionBegin(700, 2);\n        handleNextEvent(710, 50, withRowCount(3));\n        handleTransactionCommit(760, 4);\n    }", "signature": "void shouldAdvanceSourceInfoFromNonZeroPositionAndRowZeroForEventsWithMultipleRow()", "full_signature": "@Test public void shouldAdvanceSourceInfoFromNonZeroPositionAndRowZeroForEventsWithMultipleRow()", "class_method_signature": "SourceInfoTest.shouldAdvanceSourceInfoFromNonZeroPositionAndRowZeroForEventsWithMultipleRow()", "testcase": true, "constructor": false, "invocations": ["sourceWith", "offset", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleNextEvent", "withRowCount", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleNextEvent", "withRowCount", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleTransactionCommit", "handleNextEvent", "withRowCount", "handleTransactionBegin", "handleNextEvent", "withRowCount", "handleTransactionCommit"]}, "focal_class": {"identifier": "SourceInfo", "superclass": "extends AbstractSourceInfo", "interfaces": "", "fields": [{"original_string": "public static final String SERVER_ID_KEY = \"server_id\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_ID_KEY = \"server_id\"", "var_name": "SERVER_ID_KEY"}, {"original_string": "public static final String SERVER_PARTITION_KEY = \"server\";", "modifier": "public static final", "type": "String", "declarator": "SERVER_PARTITION_KEY = \"server\"", "var_name": "SERVER_PARTITION_KEY"}, {"original_string": "public static final String GTID_SET_KEY = \"gtids\";", "modifier": "public static final", "type": "String", "declarator": "GTID_SET_KEY = \"gtids\"", "var_name": "GTID_SET_KEY"}, {"original_string": "public static final String GTID_KEY = \"gtid\";", "modifier": "public static final", "type": "String", "declarator": "GTID_KEY = \"gtid\"", "var_name": "GTID_KEY"}, {"original_string": "public static final String EVENTS_TO_SKIP_OFFSET_KEY = \"event\";", "modifier": "public static final", "type": "String", "declarator": "EVENTS_TO_SKIP_OFFSET_KEY = \"event\"", "var_name": "EVENTS_TO_SKIP_OFFSET_KEY"}, {"original_string": "public static final String BINLOG_FILENAME_OFFSET_KEY = \"file\";", "modifier": "public static final", "type": "String", "declarator": "BINLOG_FILENAME_OFFSET_KEY = \"file\"", "var_name": "BINLOG_FILENAME_OFFSET_KEY"}, {"original_string": "public static final String BINLOG_POSITION_OFFSET_KEY = \"pos\";", "modifier": "public static final", "type": "String", "declarator": "BINLOG_POSITION_OFFSET_KEY = \"pos\"", "var_name": "BINLOG_POSITION_OFFSET_KEY"}, {"original_string": "public static final String BINLOG_ROW_IN_EVENT_OFFSET_KEY = \"row\";", "modifier": "public static final", "type": "String", "declarator": "BINLOG_ROW_IN_EVENT_OFFSET_KEY = \"row\"", "var_name": "BINLOG_ROW_IN_EVENT_OFFSET_KEY"}, {"original_string": "public static final String TIMESTAMP_KEY = \"ts_sec\";", "modifier": "public static final", "type": "String", "declarator": "TIMESTAMP_KEY = \"ts_sec\"", "var_name": "TIMESTAMP_KEY"}, {"original_string": "public static final String THREAD_KEY = \"thread\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_KEY = \"thread\"", "var_name": "THREAD_KEY"}, {"original_string": "public static final String QUERY_KEY = \"query\";", "modifier": "public static final", "type": "String", "declarator": "QUERY_KEY = \"query\"", "var_name": "QUERY_KEY"}, {"original_string": "public static final String DATABASE_WHITELIST_KEY = \"database_whitelist\";", "modifier": "public static final", "type": "String", "declarator": "DATABASE_WHITELIST_KEY = \"database_whitelist\"", "var_name": "DATABASE_WHITELIST_KEY"}, {"original_string": "public static final String DATABASE_INCLUDE_LIST_KEY = \"database_include_list\";", "modifier": "public static final", "type": "String", "declarator": "DATABASE_INCLUDE_LIST_KEY = \"database_include_list\"", "var_name": "DATABASE_INCLUDE_LIST_KEY"}, {"original_string": "public static final String DATABASE_BLACKLIST_KEY = \"database_blacklist\";", "modifier": "public static final", "type": "String", "declarator": "DATABASE_BLACKLIST_KEY = \"database_blacklist\"", "var_name": "DATABASE_BLACKLIST_KEY"}, {"original_string": "public static final String DATABASE_EXCLUDE_LIST_KEY = \"database_exclude_list\";", "modifier": "public static final", "type": "String", "declarator": "DATABASE_EXCLUDE_LIST_KEY = \"database_exclude_list\"", "var_name": "DATABASE_EXCLUDE_LIST_KEY"}, {"original_string": "public static final String TABLE_WHITELIST_KEY = \"table_whitelist\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_WHITELIST_KEY = \"table_whitelist\"", "var_name": "TABLE_WHITELIST_KEY"}, {"original_string": "public static final String TABLE_INCLUDE_LIST_KEY = \"table_include_list\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_INCLUDE_LIST_KEY = \"table_include_list\"", "var_name": "TABLE_INCLUDE_LIST_KEY"}, {"original_string": "public static final String TABLE_BLACKLIST_KEY = \"table_blacklist\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_BLACKLIST_KEY = \"table_blacklist\"", "var_name": "TABLE_BLACKLIST_KEY"}, {"original_string": "public static final String TABLE_EXCLUDE_LIST_KEY = \"table_exclude_list\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_EXCLUDE_LIST_KEY = \"table_exclude_list\"", "var_name": "TABLE_EXCLUDE_LIST_KEY"}, {"original_string": "public static final String RESTART_PREFIX = \"RESTART_\";", "modifier": "public static final", "type": "String", "declarator": "RESTART_PREFIX = \"RESTART_\"", "var_name": "RESTART_PREFIX"}, {"original_string": "private String currentGtidSet;", "modifier": "private", "type": "String", "declarator": "currentGtidSet", "var_name": "currentGtidSet"}, {"original_string": "private String currentGtid;", "modifier": "private", "type": "String", "declarator": "currentGtid", "var_name": "currentGtid"}, {"original_string": "private String currentBinlogFilename;", "modifier": "private", "type": "String", "declarator": "currentBinlogFilename", "var_name": "currentBinlogFilename"}, {"original_string": "private long currentBinlogPosition = 0L;", "modifier": "private", "type": "long", "declarator": "currentBinlogPosition = 0L", "var_name": "currentBinlogPosition"}, {"original_string": "private int currentRowNumber = 0;", "modifier": "private", "type": "int", "declarator": "currentRowNumber = 0", "var_name": "currentRowNumber"}, {"original_string": "private long currentEventLengthInBytes = 0;", "modifier": "private", "type": "long", "declarator": "currentEventLengthInBytes = 0", "var_name": "currentEventLengthInBytes"}, {"original_string": "private String restartGtidSet;", "modifier": "private", "type": "String", "declarator": "restartGtidSet", "var_name": "restartGtidSet"}, {"original_string": "private String restartBinlogFilename;", "modifier": "private", "type": "String", "declarator": "restartBinlogFilename", "var_name": "restartBinlogFilename"}, {"original_string": "private long restartBinlogPosition = 0L;", "modifier": "private", "type": "long", "declarator": "restartBinlogPosition = 0L", "var_name": "restartBinlogPosition"}, {"original_string": "private long restartEventsToSkip = 0;", "modifier": "private", "type": "long", "declarator": "restartEventsToSkip = 0", "var_name": "restartEventsToSkip"}, {"original_string": "private int restartRowsToSkip = 0;", "modifier": "private", "type": "int", "declarator": "restartRowsToSkip = 0", "var_name": "restartRowsToSkip"}, {"original_string": "private boolean inTransaction = false;", "modifier": "private", "type": "boolean", "declarator": "inTransaction = false", "var_name": "inTransaction"}, {"original_string": "private long serverId = 0;", "modifier": "private", "type": "long", "declarator": "serverId = 0", "var_name": "serverId"}, {"original_string": "private long binlogTimestampSeconds = 0;", "modifier": "private", "type": "long", "declarator": "binlogTimestampSeconds = 0", "var_name": "binlogTimestampSeconds"}, {"original_string": "private long threadId = -1L;", "modifier": "private", "type": "long", "declarator": "threadId = -1L", "var_name": "threadId"}, {"original_string": "private final Map<String, String> sourcePartition;", "modifier": "private final", "type": "Map<String, String>", "declarator": "sourcePartition", "var_name": "sourcePartition"}, {"original_string": "private boolean lastSnapshot = true;", "modifier": "private", "type": "boolean", "declarator": "lastSnapshot = true", "var_name": "lastSnapshot"}, {"original_string": "private boolean nextSnapshot = false;", "modifier": "private", "type": "boolean", "declarator": "nextSnapshot = false", "var_name": "nextSnapshot"}, {"original_string": "private String currentQuery = null;", "modifier": "private", "type": "String", "declarator": "currentQuery = null", "var_name": "currentQuery"}, {"original_string": "private String databaseIncludeList;", "modifier": "private", "type": "String", "declarator": "databaseIncludeList", "var_name": "databaseIncludeList"}, {"original_string": "private String databaseExcludeList;", "modifier": "private", "type": "String", "declarator": "databaseExcludeList", "var_name": "databaseExcludeList"}, {"original_string": "private String tableIncludeList;", "modifier": "private", "type": "String", "declarator": "tableIncludeList", "var_name": "tableIncludeList"}, {"original_string": "private String tableExcludeList;", "modifier": "private", "type": "String", "declarator": "tableExcludeList", "var_name": "tableExcludeList"}, {"original_string": "private Set<TableId> tableIds;", "modifier": "private", "type": "Set<TableId>", "declarator": "tableIds", "var_name": "tableIds"}, {"original_string": "private String databaseName;", "modifier": "private", "type": "String", "declarator": "databaseName", "var_name": "databaseName"}], "methods": [{"identifier": "SourceInfo", "parameters": "(MySqlConnectorConfig connectorConfig)", "modifiers": "public", "return": "", "signature": " SourceInfo(MySqlConnectorConfig connectorConfig)", "full_signature": "public  SourceInfo(MySqlConnectorConfig connectorConfig)", "class_method_signature": "SourceInfo.SourceInfo(MySqlConnectorConfig connectorConfig)", "testcase": false, "constructor": true}, {"identifier": "setQuery", "parameters": "(final String query)", "modifiers": "public", "return": "void", "signature": "void setQuery(final String query)", "full_signature": "public void setQuery(final String query)", "class_method_signature": "SourceInfo.setQuery(final String query)", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQuery()", "full_signature": "public String getQuery()", "class_method_signature": "SourceInfo.getQuery()", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> partition()", "full_signature": "public Map<String, String> partition()", "class_method_signature": "SourceInfo.partition()", "testcase": false, "constructor": false}, {"identifier": "setBinlogStartPoint", "parameters": "(String binlogFilename, long positionOfFirstEvent)", "modifiers": "public", "return": "void", "signature": "void setBinlogStartPoint(String binlogFilename, long positionOfFirstEvent)", "full_signature": "public void setBinlogStartPoint(String binlogFilename, long positionOfFirstEvent)", "class_method_signature": "SourceInfo.setBinlogStartPoint(String binlogFilename, long positionOfFirstEvent)", "testcase": false, "constructor": false}, {"identifier": "setEventPosition", "parameters": "(long positionOfCurrentEvent, long eventSizeInBytes)", "modifiers": "public", "return": "void", "signature": "void setEventPosition(long positionOfCurrentEvent, long eventSizeInBytes)", "full_signature": "public void setEventPosition(long positionOfCurrentEvent, long eventSizeInBytes)", "class_method_signature": "SourceInfo.setEventPosition(long positionOfCurrentEvent, long eventSizeInBytes)", "testcase": false, "constructor": false}, {"identifier": "offset", "parameters": "()", "modifiers": "public", "return": "Map<String, ?>", "signature": "Map<String, ?> offset()", "full_signature": "public Map<String, ?> offset()", "class_method_signature": "SourceInfo.offset()", "testcase": false, "constructor": false}, {"identifier": "offsetForRow", "parameters": "(int eventRowNumber, int totalNumberOfRows)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> offsetForRow(int eventRowNumber, int totalNumberOfRows)", "full_signature": "public Map<String, Object> offsetForRow(int eventRowNumber, int totalNumberOfRows)", "class_method_signature": "SourceInfo.offsetForRow(int eventRowNumber, int totalNumberOfRows)", "testcase": false, "constructor": false}, {"identifier": "offsetUsingPosition", "parameters": "(long rowsToSkip)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> offsetUsingPosition(long rowsToSkip)", "full_signature": "private Map<String, Object> offsetUsingPosition(long rowsToSkip)", "class_method_signature": "SourceInfo.offsetUsingPosition(long rowsToSkip)", "testcase": false, "constructor": false}, {"identifier": "databaseEvent", "parameters": "(String databaseName)", "modifiers": "public", "return": "void", "signature": "void databaseEvent(String databaseName)", "full_signature": "public void databaseEvent(String databaseName)", "class_method_signature": "SourceInfo.databaseEvent(String databaseName)", "testcase": false, "constructor": false}, {"identifier": "tableEvent", "parameters": "(Set<TableId> tableIds)", "modifiers": "public", "return": "void", "signature": "void tableEvent(Set<TableId> tableIds)", "full_signature": "public void tableEvent(Set<TableId> tableIds)", "class_method_signature": "SourceInfo.tableEvent(Set<TableId> tableIds)", "testcase": false, "constructor": false}, {"identifier": "tableEvent", "parameters": "(TableId tableId)", "modifiers": "public", "return": "void", "signature": "void tableEvent(TableId tableId)", "full_signature": "public void tableEvent(TableId tableId)", "class_method_signature": "SourceInfo.tableEvent(TableId tableId)", "testcase": false, "constructor": false}, {"identifier": "isSnapshotInEffect", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshotInEffect()", "full_signature": "public boolean isSnapshotInEffect()", "class_method_signature": "SourceInfo.isSnapshotInEffect()", "testcase": false, "constructor": false}, {"identifier": "startNextTransaction", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startNextTransaction()", "full_signature": "public void startNextTransaction()", "class_method_signature": "SourceInfo.startNextTransaction()", "testcase": false, "constructor": false}, {"identifier": "completeEvent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void completeEvent()", "full_signature": "public void completeEvent()", "class_method_signature": "SourceInfo.completeEvent()", "testcase": false, "constructor": false}, {"identifier": "eventsToSkipUponRestart", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long eventsToSkipUponRestart()", "full_signature": "public long eventsToSkipUponRestart()", "class_method_signature": "SourceInfo.eventsToSkipUponRestart()", "testcase": false, "constructor": false}, {"identifier": "commitTransaction", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commitTransaction()", "full_signature": "public void commitTransaction()", "class_method_signature": "SourceInfo.commitTransaction()", "testcase": false, "constructor": false}, {"identifier": "startGtid", "parameters": "(String gtid, String gtidSet)", "modifiers": "public", "return": "void", "signature": "void startGtid(String gtid, String gtidSet)", "full_signature": "public void startGtid(String gtid, String gtidSet)", "class_method_signature": "SourceInfo.startGtid(String gtid, String gtidSet)", "testcase": false, "constructor": false}, {"identifier": "setCompletedGtidSet", "parameters": "(String gtidSet)", "modifiers": "public", "return": "void", "signature": "void setCompletedGtidSet(String gtidSet)", "full_signature": "public void setCompletedGtidSet(String gtidSet)", "class_method_signature": "SourceInfo.setCompletedGtidSet(String gtidSet)", "testcase": false, "constructor": false}, {"identifier": "setBinlogServerId", "parameters": "(long serverId)", "modifiers": "public", "return": "void", "signature": "void setBinlogServerId(long serverId)", "full_signature": "public void setBinlogServerId(long serverId)", "class_method_signature": "SourceInfo.setBinlogServerId(long serverId)", "testcase": false, "constructor": false}, {"identifier": "setBinlogTimestampSeconds", "parameters": "(long timestampInSeconds)", "modifiers": "public", "return": "void", "signature": "void setBinlogTimestampSeconds(long timestampInSeconds)", "full_signature": "public void setBinlogTimestampSeconds(long timestampInSeconds)", "class_method_signature": "SourceInfo.setBinlogTimestampSeconds(long timestampInSeconds)", "testcase": false, "constructor": false}, {"identifier": "setBinlogThread", "parameters": "(long threadId)", "modifiers": "public", "return": "void", "signature": "void setBinlogThread(long threadId)", "full_signature": "public void setBinlogThread(long threadId)", "class_method_signature": "SourceInfo.setBinlogThread(long threadId)", "testcase": false, "constructor": false}, {"identifier": "startSnapshot", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startSnapshot()", "full_signature": "public void startSnapshot()", "class_method_signature": "SourceInfo.startSnapshot()", "testcase": false, "constructor": false}, {"identifier": "markLastSnapshot", "parameters": "(Configuration config)", "modifiers": "public", "return": "void", "signature": "void markLastSnapshot(Configuration config)", "full_signature": "public void markLastSnapshot(Configuration config)", "class_method_signature": "SourceInfo.markLastSnapshot(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "completeSnapshot", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void completeSnapshot()", "full_signature": "public void completeSnapshot()", "class_method_signature": "SourceInfo.completeSnapshot()", "testcase": false, "constructor": false}, {"identifier": "setFilterDataFromConfig", "parameters": "(Configuration config)", "modifiers": "public", "return": "void", "signature": "void setFilterDataFromConfig(Configuration config)", "full_signature": "public void setFilterDataFromConfig(Configuration config)", "class_method_signature": "SourceInfo.setFilterDataFromConfig(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "maybeSetFilterDataFromConfig", "parameters": "(Configuration config)", "modifiers": "public", "return": "void", "signature": "void maybeSetFilterDataFromConfig(Configuration config)", "full_signature": "public void maybeSetFilterDataFromConfig(Configuration config)", "class_method_signature": "SourceInfo.maybeSetFilterDataFromConfig(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "hasFilterInfo", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasFilterInfo()", "full_signature": "public boolean hasFilterInfo()", "class_method_signature": "SourceInfo.hasFilterInfo()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseIncludeList", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDatabaseIncludeList()", "full_signature": "public String getDatabaseIncludeList()", "class_method_signature": "SourceInfo.getDatabaseIncludeList()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseExcludeList", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDatabaseExcludeList()", "full_signature": "public String getDatabaseExcludeList()", "class_method_signature": "SourceInfo.getDatabaseExcludeList()", "testcase": false, "constructor": false}, {"identifier": "getTableIncludeList", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableIncludeList()", "full_signature": "public String getTableIncludeList()", "class_method_signature": "SourceInfo.getTableIncludeList()", "testcase": false, "constructor": false}, {"identifier": "getTableExcludeList", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTableExcludeList()", "full_signature": "public String getTableExcludeList()", "class_method_signature": "SourceInfo.getTableExcludeList()", "testcase": false, "constructor": false}, {"identifier": "setOffset", "parameters": "(Map<String, ?> sourceOffset)", "modifiers": "public", "return": "void", "signature": "void setOffset(Map<String, ?> sourceOffset)", "full_signature": "public void setOffset(Map<String, ?> sourceOffset)", "class_method_signature": "SourceInfo.setOffset(Map<String, ?> sourceOffset)", "testcase": false, "constructor": false}, {"identifier": "offsetsHaveFilterInfo", "parameters": "(Map<String, ?> sourceOffset)", "modifiers": "public static", "return": "boolean", "signature": "boolean offsetsHaveFilterInfo(Map<String, ?> sourceOffset)", "full_signature": "public static boolean offsetsHaveFilterInfo(Map<String, ?> sourceOffset)", "class_method_signature": "SourceInfo.offsetsHaveFilterInfo(Map<String, ?> sourceOffset)", "testcase": false, "constructor": false}, {"identifier": "longOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private", "return": "long", "signature": "long longOffsetValue(Map<String, ?> values, String key)", "full_signature": "private long longOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.longOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "booleanOffsetValue", "parameters": "(Map<String, ?> values, String key)", "modifiers": "private", "return": "boolean", "signature": "boolean booleanOffsetValue(Map<String, ?> values, String key)", "full_signature": "private boolean booleanOffsetValue(Map<String, ?> values, String key)", "class_method_signature": "SourceInfo.booleanOffsetValue(Map<String, ?> values, String key)", "testcase": false, "constructor": false}, {"identifier": "gtidSet", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String gtidSet()", "full_signature": "public String gtidSet()", "class_method_signature": "SourceInfo.gtidSet()", "testcase": false, "constructor": false}, {"identifier": "binlogFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String binlogFilename()", "full_signature": "public String binlogFilename()", "class_method_signature": "SourceInfo.binlogFilename()", "testcase": false, "constructor": false}, {"identifier": "binlogPosition", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long binlogPosition()", "full_signature": "public long binlogPosition()", "class_method_signature": "SourceInfo.binlogPosition()", "testcase": false, "constructor": false}, {"identifier": "restartBinlogPosition", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long restartBinlogPosition()", "full_signature": "protected long restartBinlogPosition()", "class_method_signature": "SourceInfo.restartBinlogPosition()", "testcase": false, "constructor": false}, {"identifier": "rowsToSkipUponRestart", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int rowsToSkipUponRestart()", "full_signature": "public int rowsToSkipUponRestart()", "class_method_signature": "SourceInfo.rowsToSkipUponRestart()", "testcase": false, "constructor": false}, {"identifier": "getServerId", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getServerId()", "full_signature": " long getServerId()", "class_method_signature": "SourceInfo.getServerId()", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getThreadId()", "full_signature": " long getThreadId()", "class_method_signature": "SourceInfo.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "table", "parameters": "()", "modifiers": "", "return": "String", "signature": "String table()", "full_signature": " String table()", "class_method_signature": "SourceInfo.table()", "testcase": false, "constructor": false}, {"identifier": "getCurrentGtid", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCurrentGtid()", "full_signature": " String getCurrentGtid()", "class_method_signature": "SourceInfo.getCurrentGtid()", "testcase": false, "constructor": false}, {"identifier": "isLastSnapshot", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isLastSnapshot()", "full_signature": " boolean isLastSnapshot()", "class_method_signature": "SourceInfo.isLastSnapshot()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBinlogFilename", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getCurrentBinlogFilename()", "full_signature": " String getCurrentBinlogFilename()", "class_method_signature": "SourceInfo.getCurrentBinlogFilename()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBinlogPosition", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getCurrentBinlogPosition()", "full_signature": " long getCurrentBinlogPosition()", "class_method_signature": "SourceInfo.getCurrentBinlogPosition()", "testcase": false, "constructor": false}, {"identifier": "getBinlogTimestampSeconds", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getBinlogTimestampSeconds()", "full_signature": " long getBinlogTimestampSeconds()", "class_method_signature": "SourceInfo.getBinlogTimestampSeconds()", "testcase": false, "constructor": false}, {"identifier": "getCurrentRowNumber", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getCurrentRowNumber()", "full_signature": " int getCurrentRowNumber()", "class_method_signature": "SourceInfo.getCurrentRowNumber()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SourceInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "createDocumentFromOffset", "parameters": "(Map<String, ?> offset)", "modifiers": "public static", "return": "Document", "signature": "Document createDocumentFromOffset(Map<String, ?> offset)", "full_signature": "public static Document createDocumentFromOffset(Map<String, ?> offset)", "class_method_signature": "SourceInfo.createDocumentFromOffset(Map<String, ?> offset)", "testcase": false, "constructor": false}, {"identifier": "isPositionAtOrBefore", "parameters": "(Document recorded, Document desired, Predicate<String> gtidFilter)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPositionAtOrBefore(Document recorded, Document desired, Predicate<String> gtidFilter)", "full_signature": "public static boolean isPositionAtOrBefore(Document recorded, Document desired, Predicate<String> gtidFilter)", "class_method_signature": "SourceInfo.isPositionAtOrBefore(Document recorded, Document desired, Predicate<String> gtidFilter)", "testcase": false, "constructor": false}, {"identifier": "timestamp", "parameters": "()", "modifiers": "@Override protected", "return": "Instant", "signature": "Instant timestamp()", "full_signature": "@Override protected Instant timestamp()", "class_method_signature": "SourceInfo.timestamp()", "testcase": false, "constructor": false}, {"identifier": "snapshot", "parameters": "()", "modifiers": "@Override protected", "return": "SnapshotRecord", "signature": "SnapshotRecord snapshot()", "full_signature": "@Override protected SnapshotRecord snapshot()", "class_method_signature": "SourceInfo.snapshot()", "testcase": false, "constructor": false}, {"identifier": "database", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String database()", "full_signature": "@Override protected String database()", "class_method_signature": "SourceInfo.database()", "testcase": false, "constructor": false}], "file": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/SourceInfo.java"}, "focal_method": {"identifier": "offset", "parameters": "()", "modifiers": "public", "return": "Map<String, ?>", "body": "public Map<String, ?> offset() {\n        return offsetUsingPosition(this.restartRowsToSkip);\n    }", "signature": "Map<String, ?> offset()", "full_signature": "public Map<String, ?> offset()", "class_method_signature": "SourceInfo.offset()", "testcase": false, "constructor": false, "invocations": ["offsetUsingPosition"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}