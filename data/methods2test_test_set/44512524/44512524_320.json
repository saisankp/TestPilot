{"test_class": {"identifier": "BenchmarkUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/util/BenchmarkUtilsTest.java"}, "test_case": {"identifier": "testPutIfAbsent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPutIfAbsent() {\n    Map<String, Integer> map = Maps.newHashMap();\n    BenchmarkUtils.putIfAbsent(map, \"key1\", 1);\n    assertThat(map.get(\"key1\")).isEqualTo(1);\n    BenchmarkUtils.putIfAbsent(map, \"key1\", 2);\n    assertThat(map.get(\"key1\")).isEqualTo(1);\n    BenchmarkUtils.putIfAbsent(map, \"key2\", 3);\n    assertThat(map.get(\"key2\")).isEqualTo(3);\n  }", "signature": "void testPutIfAbsent()", "full_signature": "@Test public void testPutIfAbsent()", "class_method_signature": "BenchmarkUtilsTest.testPutIfAbsent()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "putIfAbsent", "isEqualTo", "assertThat", "get", "putIfAbsent", "isEqualTo", "assertThat", "get", "putIfAbsent", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "BenchmarkUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(BenchmarkUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(BenchmarkUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "BenchmarkUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " BenchmarkUtils()", "full_signature": "private  BenchmarkUtils()", "class_method_signature": "BenchmarkUtils.BenchmarkUtils()", "testcase": false, "constructor": true}, {"identifier": "max", "parameters": "(Iterable<Double> iterable)", "modifiers": "public static", "return": "double", "signature": "double max(Iterable<Double> iterable)", "full_signature": "public static double max(Iterable<Double> iterable)", "class_method_signature": "BenchmarkUtils.max(Iterable<Double> iterable)", "testcase": false, "constructor": false}, {"identifier": "avg", "parameters": "(Iterable<Double> iterable)", "modifiers": "public static", "return": "double", "signature": "double avg(Iterable<Double> iterable)", "full_signature": "public static double avg(Iterable<Double> iterable)", "class_method_signature": "BenchmarkUtils.avg(Iterable<Double> iterable)", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(Map map, Object key, Object val)", "modifiers": "public static", "return": "void", "signature": "void putIfAbsent(Map map, Object key, Object val)", "full_signature": "public static void putIfAbsent(Map map, Object key, Object val)", "class_method_signature": "BenchmarkUtils.putIfAbsent(Map map, Object key, Object val)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(Map map, Object key, int def)", "modifiers": "public static", "return": "int", "signature": "int getInt(Map map, Object key, int def)", "full_signature": "public static int getInt(Map map, Object key, int def)", "class_method_signature": "BenchmarkUtils.getInt(Map map, Object key, int def)", "testcase": false, "constructor": false}, {"identifier": "ifAckEnabled", "parameters": "(Config config)", "modifiers": "public static", "return": "boolean", "signature": "boolean ifAckEnabled(Config config)", "full_signature": "public static boolean ifAckEnabled(Config config)", "class_method_signature": "BenchmarkUtils.ifAckEnabled(Config config)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/util/BenchmarkUtils.java"}, "focal_method": {"identifier": "putIfAbsent", "parameters": "(Map map, Object key, Object val)", "modifiers": "public static", "return": "void", "body": "public static void putIfAbsent(Map map, Object key, Object val) {\n    if (!map.containsKey(key)) {\n      map.put(key, val);\n    }\n  }", "signature": "void putIfAbsent(Map map, Object key, Object val)", "full_signature": "public static void putIfAbsent(Map map, Object key, Object val)", "class_method_signature": "BenchmarkUtils.putIfAbsent(Map map, Object key, Object val)", "testcase": false, "constructor": false, "invocations": ["containsKey", "put"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}