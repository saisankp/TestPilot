{"test_class": {"identifier": "RequestMonitorTest", "superclass": "extends AbstractRequestMonitorTest", "interfaces": "", "fields": [], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/RequestMonitorTest.java"}, "test_case": {"identifier": "testRecordException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRecordException() throws Exception {\n\t\tfinal MonitoredRequest monitoredRequest = createMonitoredRequest();\n\t\tdoThrow(new RuntimeException(\"test\")).when(monitoredRequest).execute();\n\t\ttry {\n\t\t\trequestMonitor.monitor(monitoredRequest);\n\t\t} catch (Exception e) {\n\t\t}\n\t\tassertEquals(\"java.lang.RuntimeException\", tags.get(\"exception.class\"));\n\t\tassertEquals(\"test\", tags.get(\"exception.message\"));\n\t\tassertNotNull(tags.get(\"exception.stack_trace\"));\n\t}", "signature": "void testRecordException()", "full_signature": "@Test public void testRecordException()", "class_method_signature": "RequestMonitorTest.testRecordException()", "testcase": true, "constructor": false, "invocations": ["createMonitoredRequest", "execute", "when", "doThrow", "monitor", "assertEquals", "get", "assertEquals", "get", "assertNotNull", "get"]}, "focal_class": {"identifier": "RequestMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MetricName internalOverheadMetricName = name(\"internal_overhead_request_monitor\").build();", "modifier": "private final", "type": "MetricName", "declarator": "internalOverheadMetricName = name(\"internal_overhead_request_monitor\").build()", "var_name": "internalOverheadMetricName"}, {"original_string": "private Metric2Registry metricRegistry;", "modifier": "private", "type": "Metric2Registry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private CorePlugin corePlugin;", "modifier": "private", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private static final ThreadLocal<Map<Span, Scope>> currentScopeMapThreadLocal = new ThreadLocal<Map<Span, Scope>>();", "modifier": "private static final", "type": "ThreadLocal<Map<Span, Scope>>", "declarator": "currentScopeMapThreadLocal = new ThreadLocal<Map<Span, Scope>>()", "var_name": "currentScopeMapThreadLocal"}], "methods": [{"identifier": "RequestMonitor", "parameters": "(ConfigurationRegistry configuration, Metric2Registry registry)", "modifiers": "public", "return": "", "signature": " RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "full_signature": "public  RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "class_method_signature": "RequestMonitor.RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry)", "testcase": false, "constructor": true}, {"identifier": "RequestMonitor", "parameters": "(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "modifiers": "private", "return": "", "signature": " RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "full_signature": "private  RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "class_method_signature": "RequestMonitor.RequestMonitor(ConfigurationRegistry configuration, Metric2Registry registry, TracingPlugin tracingPlugin)", "testcase": false, "constructor": true}, {"identifier": "monitorStart", "parameters": "(MonitoredRequest monitoredRequest)", "modifiers": "public", "return": "SpanContextInformation", "signature": "SpanContextInformation monitorStart(MonitoredRequest monitoredRequest)", "full_signature": "public SpanContextInformation monitorStart(MonitoredRequest monitoredRequest)", "class_method_signature": "RequestMonitor.monitorStart(MonitoredRequest monitoredRequest)", "testcase": false, "constructor": false}, {"identifier": "monitorStart", "parameters": "(MonitoredRequest monitoredRequest, boolean activateSpan)", "modifiers": "private", "return": "SpanContextInformation", "signature": "SpanContextInformation monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "full_signature": "private SpanContextInformation monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "class_method_signature": "RequestMonitor.monitorStart(MonitoredRequest monitoredRequest, boolean activateSpan)", "testcase": false, "constructor": false}, {"identifier": "getSpanContextInformation", "parameters": "(long start, Span span)", "modifiers": "private", "return": "SpanContextInformation", "signature": "SpanContextInformation getSpanContextInformation(long start, Span span)", "full_signature": "private SpanContextInformation getSpanContextInformation(long start, Span span)", "class_method_signature": "RequestMonitor.getSpanContextInformation(long start, Span span)", "testcase": false, "constructor": false}, {"identifier": "monitorStop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void monitorStop()", "full_signature": "public void monitorStop()", "class_method_signature": "RequestMonitor.monitorStop()", "testcase": false, "constructor": false}, {"identifier": "monitorStop", "parameters": "(Scope scope, Span span)", "modifiers": "private", "return": "void", "signature": "void monitorStop(Scope scope, Span span)", "full_signature": "private void monitorStop(Scope scope, Span span)", "class_method_signature": "RequestMonitor.monitorStop(Scope scope, Span span)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "(MonitoredRequest monitoredRequest)", "modifiers": "public", "return": "SpanContextInformation", "signature": "SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "full_signature": "public SpanContextInformation monitor(MonitoredRequest monitoredRequest)", "class_method_signature": "RequestMonitor.monitor(MonitoredRequest monitoredRequest)", "testcase": false, "constructor": false}, {"identifier": "recordException", "parameters": "(Exception e)", "modifiers": "public", "return": "void", "signature": "void recordException(Exception e)", "full_signature": "public void recordException(Exception e)", "class_method_signature": "RequestMonitor.recordException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "trackOverhead", "parameters": "(long overhead1, long overhead2)", "modifiers": "private", "return": "void", "signature": "void trackOverhead(long overhead1, long overhead2)", "full_signature": "private void trackOverhead(long overhead1, long overhead2)", "class_method_signature": "RequestMonitor.trackOverhead(long overhead1, long overhead2)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/RequestMonitor.java"}, "focal_method": {"identifier": "recordException", "parameters": "(Exception e)", "modifiers": "public", "return": "void", "body": "public void recordException(Exception e) {\n\t\tif (! corePlugin.isStagemonitorActive()) {\n\t\t\treturn;\n\t\t}\n\t\tfinal Span activeSpan = tracingPlugin.getTracer().scopeManager().activeSpan();\n\t\tif (activeSpan != null) {\n\t\t\tSpanUtils.setException(activeSpan, e, tracingPlugin.getIgnoreExceptions(), tracingPlugin.getUnnestExceptions());\n\t\t}\n\t}", "signature": "void recordException(Exception e)", "full_signature": "public void recordException(Exception e)", "class_method_signature": "RequestMonitor.recordException(Exception e)", "testcase": false, "constructor": false, "invocations": ["isStagemonitorActive", "activeSpan", "scopeManager", "getTracer", "setException", "getIgnoreExceptions", "getUnnestExceptions"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}