{"test_class": {"identifier": "ShortTypeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(ShortTypeConverterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(ShortTypeConverterTest.class)", "var_name": "logger"}, {"original_string": "private TypeConverter[] pcs = new TypeConverter[] {\n        new ShortTypeConverter(),\n        new ShortPrimitiveTypeConverter()\n    };", "modifier": "private", "type": "TypeConverter[]", "declarator": "pcs = new TypeConverter[] {\n        new ShortTypeConverter(),\n        new ShortPrimitiveTypeConverter()\n    }", "var_name": "pcs"}], "file": "ch-commons-xbean/src/test/java/com/cloudhopper/commons/xbean/type/ShortTypeConverterTest.java"}, "test_case": {"identifier": "validConversions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validConversions() throws Exception {\n        for (TypeConverter pc : pcs) {\n            // check that the registry has this class\n            Object obj = pc.convert(\"0\");\n            Assert.assertEquals(obj, TypeConverterUtil.convert(\"0\", obj.getClass()));\n            Assert.assertEquals(Short.valueOf((short)0), pc.convert(\"0\"));\n            // min and max value of a short\n            Assert.assertEquals(Short.valueOf((short)-32768), pc.convert(\"-32768\"));\n            Assert.assertEquals(Short.valueOf((short)32767), pc.convert(\"32767\"));\n            // hex versions\n            Assert.assertEquals(Short.valueOf((short)0), pc.convert(\"0x0\"));\n            Assert.assertEquals(Short.valueOf((short)0), pc.convert(\"0X0\"));\n            Assert.assertEquals(Short.valueOf((short)32767), pc.convert(\"0x7FFF\"));\n            Assert.assertEquals(Short.valueOf((short)0xFFFF), pc.convert(\"0xFFFF\"));\n        }\n    }", "signature": "void validConversions()", "full_signature": "@Test public void validConversions()", "class_method_signature": "ShortTypeConverterTest.validConversions()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "convert", "getClass", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert", "assertEquals", "valueOf", "convert"]}, "focal_class": {"identifier": "ShortTypeConverter", "superclass": "extends ShortPrimitiveTypeConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(String value)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(String value)", "full_signature": "@Override public Object convert(String value)", "class_method_signature": "ShortTypeConverter.convert(String value)", "testcase": false, "constructor": false}], "file": "ch-commons-xbean/src/main/java/com/cloudhopper/commons/xbean/type/ShortTypeConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convert(String value) throws ConversionException {\n        return (Short)super.convert(value);\n    }", "signature": "Object convert(String value)", "full_signature": "@Override public Object convert(String value)", "class_method_signature": "ShortTypeConverter.convert(String value)", "testcase": false, "constructor": false, "invocations": ["convert"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}