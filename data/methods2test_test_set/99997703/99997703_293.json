{"test_class": {"identifier": "MutableAbsoluteProbabilityChooserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT = \"DEFAULT\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT = \"DEFAULT\"", "var_name": "DEFAULT"}, {"original_string": "private static final String VALUE_1 = \"VALUE_1\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_1 = \"VALUE_1\"", "var_name": "VALUE_1"}, {"original_string": "private static final String VALUE_2 = \"VALUE_2\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_2 = \"VALUE_2\"", "var_name": "VALUE_2"}, {"original_string": "private static final String VALUE_3 = \"VALUE_3\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_3 = \"VALUE_3\"", "var_name": "VALUE_3"}, {"original_string": "private MutableAbsoluteProbabilityChooser<String> chooser = new MutableAbsoluteProbabilityChooser<>(DEFAULT);", "modifier": "private", "type": "MutableAbsoluteProbabilityChooser<String>", "declarator": "chooser = new MutableAbsoluteProbabilityChooser<>(DEFAULT)", "var_name": "chooser"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/random/MutableAbsoluteProbabilityChooserTest.java"}, "test_case": {"identifier": "whenOutcomeProbabilityOverridden_thenUsesNewProbability", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void whenOutcomeProbabilityOverridden_thenUsesNewProbability() {\n        chooser.setProbability(VALUE_1, 0.5);\n        testInRange(0, 0.5, VALUE_1);\n        testInRange(0.5, 1, DEFAULT);\n\n        chooser.setProbability(VALUE_1, 0.7);\n        testInRange(0, 0.7, VALUE_1);\n        testInRange(0.7, 1, DEFAULT);\n    }", "signature": "void whenOutcomeProbabilityOverridden_thenUsesNewProbability()", "full_signature": "@Test void whenOutcomeProbabilityOverridden_thenUsesNewProbability()", "class_method_signature": "MutableAbsoluteProbabilityChooserTest.whenOutcomeProbabilityOverridden_thenUsesNewProbability()", "testcase": true, "constructor": false, "invocations": ["setProbability", "testInRange", "testInRange", "setProbability", "testInRange", "testInRange"]}, "focal_class": {"identifier": "MutableAbsoluteProbabilityChooser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double ROUNDING_TOLERANCE = 1e-12;", "modifier": "public static final", "type": "double", "declarator": "ROUNDING_TOLERANCE = 1e-12", "var_name": "ROUNDING_TOLERANCE"}, {"original_string": "private final Map<T, Double> outcomesToProbability = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<T, Double>", "declarator": "outcomesToProbability = new LinkedHashMap<>()", "var_name": "outcomesToProbability"}, {"original_string": "private final T defaultOutcome;", "modifier": "private final", "type": "T", "declarator": "defaultOutcome", "var_name": "defaultOutcome"}], "methods": [{"identifier": "MutableAbsoluteProbabilityChooser", "parameters": "(T defaultOutcome)", "modifiers": "public", "return": "", "signature": " MutableAbsoluteProbabilityChooser(T defaultOutcome)", "full_signature": "public  MutableAbsoluteProbabilityChooser(T defaultOutcome)", "class_method_signature": "MutableAbsoluteProbabilityChooser.MutableAbsoluteProbabilityChooser(T defaultOutcome)", "testcase": false, "constructor": true}, {"identifier": "setProbability", "parameters": "(T outcome, @Nonnegative double probability)", "modifiers": "public", "return": "void", "signature": "void setProbability(T outcome, @Nonnegative double probability)", "full_signature": "public void setProbability(T outcome, @Nonnegative double probability)", "class_method_signature": "MutableAbsoluteProbabilityChooser.setProbability(T outcome, @Nonnegative double probability)", "testcase": false, "constructor": false}, {"identifier": "removeOutcome", "parameters": "(T outcome)", "modifiers": "public", "return": "void", "signature": "void removeOutcome(T outcome)", "full_signature": "public void removeOutcome(T outcome)", "class_method_signature": "MutableAbsoluteProbabilityChooser.removeOutcome(T outcome)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "MutableAbsoluteProbabilityChooser.clear()", "testcase": false, "constructor": false}, {"identifier": "choose", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T choose()", "full_signature": "public T choose()", "class_method_signature": "MutableAbsoluteProbabilityChooser.choose()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/random/MutableAbsoluteProbabilityChooser.java"}, "focal_method": {"identifier": "setProbability", "parameters": "(T outcome, @Nonnegative double probability)", "modifiers": "public", "return": "void", "body": "public void setProbability(T outcome, @Nonnegative double probability) {\n        Preconditions.checkArgument(!outcome.equals(defaultOutcome), \"Attempted to set the probability of the default result %s\", defaultOutcome);\n        Preconditions.checkArgument(probability >= 0, \"Attempted to set probability for outcome %s to invalid value %s (must be >= 0)\", outcome, probability);\n        if (probability == 0) {\n            outcomesToProbability.remove(outcome);\n        } else {\n            double newTotalProbability = outcomesToProbability.values().stream().reduce(0.0, Double::sum)\n                    + probability\n                    - outcomesToProbability.getOrDefault(outcome, 0.0);\n            Preconditions.checkState(newTotalProbability <= 1 + ROUNDING_TOLERANCE, \"Sum of probabilities for all outcomes has exceeded 1\");\n            outcomesToProbability.put(outcome, probability);\n        }\n    }", "signature": "void setProbability(T outcome, @Nonnegative double probability)", "full_signature": "public void setProbability(T outcome, @Nonnegative double probability)", "class_method_signature": "MutableAbsoluteProbabilityChooser.setProbability(T outcome, @Nonnegative double probability)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "equals", "checkArgument", "remove", "reduce", "stream", "values", "getOrDefault", "checkState", "put"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}