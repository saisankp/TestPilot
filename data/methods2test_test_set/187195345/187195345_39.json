{"test_class": {"identifier": "OpenLRProtoEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "OpenLRProtoEncoder openLREncoder = new OpenLRProtoEncoder();", "modifier": "", "type": "OpenLRProtoEncoder", "declarator": "openLREncoder = new OpenLRProtoEncoder()", "var_name": "openLREncoder"}], "file": "proto/src/test/java/openlr/proto/OpenLRProtoEncoderTest.java"}, "test_case": {"identifier": "testUnsupportedLocationType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsupportedLocationType() {\n        GeoCoordinates geoCoordinates = new GeoCoordinatesProtoImpl(1, 2);\n        RawCircleLocRef rawLocationReference = new RawCircleLocRef(\"1\", geoCoordinates, 100);\n\n        LocationReference locationReference = openLREncoder.encodeData(rawLocationReference);\n\n        assertFalse(locationReference.isValid());\n        assertEquals(locationReference.getReturnCode(), OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);\n    }", "signature": "void testUnsupportedLocationType()", "full_signature": "@Test public void testUnsupportedLocationType()", "class_method_signature": "OpenLRProtoEncoderTest.testUnsupportedLocationType()", "testcase": true, "constructor": false, "invocations": ["encodeData", "assertFalse", "isValid", "assertEquals", "getReturnCode"]}, "focal_class": {"identifier": "OpenLRProtoEncoder", "superclass": "", "interfaces": "implements PhysicalEncoder", "fields": [{"original_string": "private LocationTypeEncoderRegistry locationTypeEncoderRegistry = LocationTypeEncoderRegistry.create();", "modifier": "private", "type": "LocationTypeEncoderRegistry", "declarator": "locationTypeEncoderRegistry = LocationTypeEncoderRegistry.create()", "var_name": "locationTypeEncoderRegistry"}], "methods": [{"identifier": "encodeData", "parameters": "(RawLocationReference rawLocRef)", "modifiers": "@Override public", "return": "LocationReference", "signature": "LocationReference encodeData(RawLocationReference rawLocRef)", "full_signature": "@Override public LocationReference encodeData(RawLocationReference rawLocRef)", "class_method_signature": "OpenLRProtoEncoder.encodeData(RawLocationReference rawLocRef)", "testcase": false, "constructor": false}, {"identifier": "encodeData", "parameters": "(RawLocationReference rawLocRef, int version)", "modifiers": "@Override public", "return": "LocationReference", "signature": "LocationReference encodeData(RawLocationReference rawLocRef, int version)", "full_signature": "@Override public LocationReference encodeData(RawLocationReference rawLocRef, int version)", "class_method_signature": "OpenLRProtoEncoder.encodeData(RawLocationReference rawLocRef, int version)", "testcase": false, "constructor": false}, {"identifier": "getSupportedVersions", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getSupportedVersions()", "full_signature": "@Override public int[] getSupportedVersions()", "class_method_signature": "OpenLRProtoEncoder.getSupportedVersions()", "testcase": false, "constructor": false}, {"identifier": "getDataFormatIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDataFormatIdentifier()", "full_signature": "@Override public String getDataFormatIdentifier()", "class_method_signature": "OpenLRProtoEncoder.getDataFormatIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getDataClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getDataClass()", "full_signature": "@Override public Class<?> getDataClass()", "class_method_signature": "OpenLRProtoEncoder.getDataClass()", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/OpenLRProtoEncoder.java"}, "focal_method": {"identifier": "encodeData", "parameters": "(RawLocationReference rawLocRef)", "modifiers": "@Override public", "return": "LocationReference", "body": "@Override\n    public LocationReference encodeData(RawLocationReference rawLocRef) {\n        LocationReferenceEncoder locationReferenceEncoder = locationTypeEncoderRegistry.getEncoder(rawLocRef.getLocationType());\n\n        if (locationReferenceEncoder == null) {\n            return new LocationReferenceProtoImpl(\n                    rawLocRef.getID(),\n                    rawLocRef.getLocationType(),\n                    OpenLRProtoStatusCode.UNSUPPORTED_LOCATION_TYPE);\n        }\n\n        try {\n            return locationReferenceEncoder.encode(rawLocRef);\n        }\n        catch (OpenLRProtoException e) {\n            return new LocationReferenceProtoImpl(\n                    rawLocRef.getID(),\n                    rawLocRef.getLocationType(),\n                    e.getErrorCode());\n        }\n    }", "signature": "LocationReference encodeData(RawLocationReference rawLocRef)", "full_signature": "@Override public LocationReference encodeData(RawLocationReference rawLocRef)", "class_method_signature": "OpenLRProtoEncoder.encodeData(RawLocationReference rawLocRef)", "testcase": false, "constructor": false, "invocations": ["getEncoder", "getLocationType", "getID", "getLocationType", "encode", "getID", "getLocationType", "getErrorCode"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}