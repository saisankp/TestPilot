{"test_class": {"identifier": "CentrifugeImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "centrifuge-core/src/test/java/com/salesforce/centrifuge/CentrifugeImplTest.java"}, "test_case": {"identifier": "testRegisterMbean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterMbean() throws Exception {\n        final CentrifugeImpl centrifuge = new CentrifugeImpl(new CentrifugeConfig());\n        final String mbeanName = centrifuge.getMbeanName();\n        try {\n            ManagementFactory.getPlatformMBeanServer().getMBeanInfo(new ObjectName(mbeanName));\n            fail();\n        } catch (InstanceNotFoundException ignored) {}\n        centrifuge.registerMbean();\n        assertNotNull(ManagementFactory.getPlatformMBeanServer().getMBeanInfo(new ObjectName(mbeanName)));\n    }", "signature": "void testRegisterMbean()", "full_signature": "@Test public void testRegisterMbean()", "class_method_signature": "CentrifugeImplTest.testRegisterMbean()", "testcase": true, "constructor": false, "invocations": ["getMbeanName", "getMBeanInfo", "getPlatformMBeanServer", "fail", "registerMbean", "assertNotNull", "getMBeanInfo", "getPlatformMBeanServer"]}, "focal_class": {"identifier": "CentrifugeImpl", "superclass": "", "interfaces": "implements Centrifuge", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CentrifugeImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CentrifugeImpl.class)", "var_name": "logger"}, {"original_string": "private final CentrifugeConfig config;", "modifier": "private final", "type": "CentrifugeConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final List<WarmerContainer> warmerContainers = Collections.synchronizedList(new ArrayList<>());", "modifier": "private final", "type": "List<WarmerContainer>", "declarator": "warmerContainers = Collections.synchronizedList(new ArrayList<>())", "var_name": "warmerContainers"}, {"original_string": "private ScheduledExecutorService executorService = null;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executorService = null", "var_name": "executorService"}, {"original_string": "private WarmerWatcher watcher;", "modifier": "private", "type": "WarmerWatcher", "declarator": "watcher", "var_name": "watcher"}, {"original_string": "private long startTimestampMillis = 0;", "modifier": "private", "type": "long", "declarator": "startTimestampMillis = 0", "var_name": "startTimestampMillis"}, {"original_string": "private long startTimestampNanos = 0;", "modifier": "private", "type": "long", "declarator": "startTimestampNanos = 0", "var_name": "startTimestampNanos"}], "methods": [{"identifier": "CentrifugeImpl", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\")", "return": "", "signature": " CentrifugeImpl()", "full_signature": "@SuppressWarnings(\"unused\")  CentrifugeImpl()", "class_method_signature": "CentrifugeImpl.CentrifugeImpl()", "testcase": false, "constructor": true}, {"identifier": "CentrifugeImpl", "parameters": "(final CentrifugeConfig config)", "modifiers": "public", "return": "", "signature": " CentrifugeImpl(final CentrifugeConfig config)", "full_signature": "public  CentrifugeImpl(final CentrifugeConfig config)", "class_method_signature": "CentrifugeImpl.CentrifugeImpl(final CentrifugeConfig config)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "CentrifugeImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "CentrifugeImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "isWarm", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWarm()", "full_signature": "@Override public boolean isWarm()", "class_method_signature": "CentrifugeImpl.isWarm()", "testcase": false, "constructor": false}, {"identifier": "registerMbean", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void registerMbean()", "full_signature": "@Override public void registerMbean()", "class_method_signature": "CentrifugeImpl.registerMbean()", "testcase": false, "constructor": false}, {"identifier": "getWarmers", "parameters": "()", "modifiers": "@Override public", "return": "List<WarmerContainer>", "signature": "List<WarmerContainer> getWarmers()", "full_signature": "@Override public List<WarmerContainer> getWarmers()", "class_method_signature": "CentrifugeImpl.getWarmers()", "testcase": false, "constructor": false}, {"identifier": "registerWarmer", "parameters": "(final WarmerConfig warmerConfig)", "modifiers": "@Override public", "return": "void", "signature": "void registerWarmer(final WarmerConfig warmerConfig)", "full_signature": "@Override public void registerWarmer(final WarmerConfig warmerConfig)", "class_method_signature": "CentrifugeImpl.registerWarmer(final WarmerConfig warmerConfig)", "testcase": false, "constructor": false}, {"identifier": "getMbeanName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getMbeanName()", "full_signature": " String getMbeanName()", "class_method_signature": "CentrifugeImpl.getMbeanName()", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doStart()", "full_signature": "private void doStart()", "class_method_signature": "CentrifugeImpl.doStart()", "testcase": false, "constructor": false}], "file": "centrifuge-core/src/main/java/com/salesforce/centrifuge/CentrifugeImpl.java"}, "focal_method": {"identifier": "registerMbean", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void registerMbean() {\n        try {\n            final String mbeanName = getMbeanName();\n            logger.info(LOGGER_PREFIX + \"registering mbean: {}\", mbeanName);\n            ManagementFactory.getPlatformMBeanServer().registerMBean(\n                    new CentrifugeController(this), new ObjectName(mbeanName)\n            );\n        } catch (Throwable e) {\n            logger.warn(LOGGER_PREFIX + \"failed to register centrifuge mbean\");\n        }\n    }", "signature": "void registerMbean()", "full_signature": "@Override public void registerMbean()", "class_method_signature": "CentrifugeImpl.registerMbean()", "testcase": false, "constructor": false, "invocations": ["getMbeanName", "info", "registerMBean", "getPlatformMBeanServer", "warn"]}, "repository": {"repo_id": 149647886, "url": "https://github.com/salesforce/centrifuge", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 14, "size": 98, "license": "licensed"}}