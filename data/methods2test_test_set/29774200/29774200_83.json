{"test_class": {"identifier": "TeamCityPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GenericSoftwareClient genericSoftwareClient;", "modifier": "@Mock", "type": "GenericSoftwareClient", "declarator": "genericSoftwareClient", "var_name": "genericSoftwareClient"}, {"original_string": "TeamCityPlugin plugin;", "modifier": "", "type": "TeamCityPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "static URL teamcityUrl;", "modifier": "static", "type": "URL", "declarator": "teamcityUrl", "var_name": "teamcityUrl"}, {"original_string": "private Map<String, String> properties = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "properties = new HashMap<>()", "var_name": "properties"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/teamcity/TeamCityPluginTest.java"}, "test_case": {"identifier": "should_thrown_an_exception_when_passing_null_to_is_jenkins_instance", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()\n            throws SoftwareNotFoundException {\n        new TeamCityPlugin().getSoftwareId(null, properties);\n    }", "signature": "void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "full_signature": "@Test(expected = NullPointerException.class) public void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "class_method_signature": "TeamCityPluginTest.should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "testcase": true, "constructor": false, "invocations": ["getSoftwareId"]}, "focal_class": {"identifier": "TeamCityPlugin", "superclass": "", "interfaces": "implements VisuwallPlugin<TeamCityConnection>", "fields": [], "methods": [{"identifier": "getConnection", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "TeamCityConnection", "signature": "TeamCityConnection getConnection(URL url, Map<String, String> properties)", "full_signature": "@Override public TeamCityConnection getConnection(URL url, Map<String, String> properties)", "class_method_signature": "TeamCityPlugin.getConnection(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "getConnectionClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<TeamCityConnection>", "signature": "Class<TeamCityConnection> getConnectionClass()", "full_signature": "@Override public Class<TeamCityConnection> getConnectionClass()", "class_method_signature": "TeamCityPlugin.getConnectionClass()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "TeamCityPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "TeamCityPlugin.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "TeamCityPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "createSoftwareId", "parameters": "(TeamCityServer teamCityServer)", "modifiers": "private", "return": "SoftwareId", "signature": "SoftwareId createSoftwareId(TeamCityServer teamCityServer)", "full_signature": "private SoftwareId createSoftwareId(TeamCityServer teamCityServer)", "class_method_signature": "TeamCityPlugin.createSoftwareId(TeamCityServer teamCityServer)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(TeamCityServer server)", "modifiers": "private", "return": "String", "signature": "String getVersion(TeamCityServer server)", "full_signature": "private String getVersion(TeamCityServer server)", "class_method_signature": "TeamCityPlugin.getVersion(TeamCityServer server)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TeamCityPlugin.toString()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesWithDefaultValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getPropertiesWithDefaultValue()", "full_signature": "@Override public Map<String, String> getPropertiesWithDefaultValue()", "class_method_signature": "TeamCityPlugin.getPropertiesWithDefaultValue()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/teamcity/TeamCityPlugin.java"}, "focal_method": {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "body": "@Override\n    public SoftwareId getSoftwareId(URL url, Map<String, String> properties) throws SoftwareNotFoundException {\n        Preconditions.checkNotNull(url, \"url is mandatory\");\n        try {\n            GenericSoftwareClient genericSoftwareClient = new GenericSoftwareClient(\"guest\", \"\");\n            if (properties.get(\"login\") != null) {\n                genericSoftwareClient = new GenericSoftwareClient(properties.get(\"login\"), properties.get(\"password\"));\n            }\n            TeamCityServer teamCityServer = genericSoftwareClient.resource(url + \"/app/rest/server\", TeamCityServer.class);\n            return createSoftwareId(teamCityServer);\n        } catch (ResourceNotFoundException e) {\n            throw new SoftwareNotFoundException(\"Url \" + url + \" is not compatible with TeamCity\", e);\n        }\n    }", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "TeamCityPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "get", "get", "get", "resource", "createSoftwareId"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}