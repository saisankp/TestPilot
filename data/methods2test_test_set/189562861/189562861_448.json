{"test_class": {"identifier": "AnnotationPropertyValuesAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n\n        MockEnvironment mockEnvironment = new MockEnvironment();\n\n        mockEnvironment.setProperty(\"version\", \"1.0.0\");\n\n        mockEnvironment.setProperty(\"url\", \"   dubbo://localhost:12345\");\n\n        Field field = ReflectionUtils.findField(TestBean.class, \"demoService\");\n\n        Reference reference = AnnotationUtils.getAnnotation(field, Reference.class);\n\n        AnnotationPropertyValuesAdapter propertyValues = new AnnotationPropertyValuesAdapter(reference, mockEnvironment);\n\n        ReferenceBean referenceBean = new ReferenceBean();\n\n        DataBinder dataBinder = new DataBinder(referenceBean);\n\n        dataBinder.setDisallowedFields(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");\n\n        DefaultConversionService conversionService = new DefaultConversionService();\n\n        conversionService.addConverter(new Converter<String[], String>() {\n            @Override\n            public String convert(String[] source) {\n                return arrayToCommaDelimitedString(source);\n            }\n        });\n\n        conversionService.addConverter(new Converter<String[], Map<String, String>>() {\n            @Override\n            public Map<String, String> convert(String[] source) {\n                return CollectionUtils.toStringMap(source);\n            }\n        });\n\n\n        dataBinder.setConversionService(conversionService);\n\n\n        dataBinder.bind(propertyValues);\n\n//        System.out.println(referenceBean);\n\n        Assert.assertEquals(DemoService.class, referenceBean.getInterfaceClass());\n        Assert.assertEquals(\"com.alibaba.dubbo.config.spring.api.DemoService\", referenceBean.getInterface());\n        Assert.assertEquals(\"1.0.0\", referenceBean.getVersion());\n        Assert.assertEquals(\"group\", referenceBean.getGroup());\n        Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n        Assert.assertEquals(\"client\", referenceBean.getClient());\n        Assert.assertEquals(true, referenceBean.isGeneric());\n        Assert.assertEquals(true, referenceBean.isInjvm());\n        Assert.assertEquals(false, referenceBean.isCheck());\n        Assert.assertEquals(true, referenceBean.isInit());\n        Assert.assertEquals(true, referenceBean.getLazy());\n        Assert.assertEquals(true, referenceBean.getStubevent());\n        Assert.assertEquals(\"reconnect\", referenceBean.getReconnect());\n        Assert.assertEquals(true, referenceBean.getSticky());\n\n        Assert.assertEquals(\"javassist\", referenceBean.getProxy());\n\n        Assert.assertEquals(\"stub\", referenceBean.getStub());\n        Assert.assertEquals(\"failover\", referenceBean.getCluster());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getConnections());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getCallbacks());\n        Assert.assertEquals(\"onconnect\", referenceBean.getOnconnect());\n        Assert.assertEquals(\"ondisconnect\", referenceBean.getOndisconnect());\n        Assert.assertEquals(\"owner\", referenceBean.getOwner());\n        Assert.assertEquals(\"layer\", referenceBean.getLayer());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getRetries());\n        Assert.assertEquals(\"random\", referenceBean.getLoadbalance());\n        Assert.assertEquals(true, referenceBean.isAsync());\n        Assert.assertEquals(Integer.valueOf(1), referenceBean.getActives());\n        Assert.assertEquals(true, referenceBean.getSent());\n        Assert.assertEquals(\"mock\", referenceBean.getMock());\n        Assert.assertEquals(\"validation\", referenceBean.getValidation());\n        Assert.assertEquals(Integer.valueOf(2), referenceBean.getTimeout());\n        Assert.assertEquals(\"cache\", referenceBean.getCache());\n        Assert.assertEquals(\"default,default\", referenceBean.getFilter());\n        Assert.assertEquals(\"default,default\", referenceBean.getListener());\n\n        Map<String, String> data = new LinkedHashMap<String, String>();\n        data.put(\"key1\", \"value1\");\n\n        Assert.assertEquals(data, referenceBean.getParameters());\n        // Bean compare\n        Assert.assertEquals(null, referenceBean.getApplication());\n        Assert.assertEquals(null, referenceBean.getModule());\n        Assert.assertEquals(null, referenceBean.getConsumer());\n        Assert.assertEquals(null, referenceBean.getMonitor());\n        Assert.assertEquals(null, referenceBean.getRegistry());\n\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "AnnotationPropertyValuesAdapterTest.test()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "findField", "getAnnotation", "setDisallowedFields", "addConverter", "arrayToCommaDelimitedString", "addConverter", "toStringMap", "setConversionService", "bind", "assertEquals", "getInterfaceClass", "assertEquals", "getInterface", "assertEquals", "getVersion", "assertEquals", "getGroup", "assertEquals", "getUrl", "assertEquals", "getClient", "assertEquals", "isGeneric", "assertEquals", "isInjvm", "assertEquals", "isCheck", "assertEquals", "isInit", "assertEquals", "getLazy", "assertEquals", "getStubevent", "assertEquals", "getReconnect", "assertEquals", "getSticky", "assertEquals", "getProxy", "assertEquals", "getStub", "assertEquals", "getCluster", "assertEquals", "valueOf", "getConnections", "assertEquals", "valueOf", "getCallbacks", "assertEquals", "getOnconnect", "assertEquals", "getOndisconnect", "assertEquals", "getOwner", "assertEquals", "getLayer", "assertEquals", "valueOf", "getRetries", "assertEquals", "getLoadbalance", "assertEquals", "isAsync", "assertEquals", "valueOf", "getActives", "assertEquals", "getSent", "assertEquals", "getMock", "assertEquals", "getValidation", "assertEquals", "valueOf", "getTimeout", "assertEquals", "getCache", "assertEquals", "getFilter", "assertEquals", "getListener", "put", "assertEquals", "getParameters", "assertEquals", "getApplication", "assertEquals", "getModule", "assertEquals", "getConsumer", "assertEquals", "getMonitor", "assertEquals", "getRegistry"]}, "focal_class": {"identifier": "AnnotationPropertyValuesAdapter", "superclass": "", "interfaces": "implements PropertyValues", "fields": [{"original_string": "private final Annotation annotation;", "modifier": "private final", "type": "Annotation", "declarator": "annotation", "var_name": "annotation"}, {"original_string": "private final PropertyResolver propertyResolver;", "modifier": "private final", "type": "PropertyResolver", "declarator": "propertyResolver", "var_name": "propertyResolver"}, {"original_string": "private final boolean ignoreDefaultValue;", "modifier": "private final", "type": "boolean", "declarator": "ignoreDefaultValue", "var_name": "ignoreDefaultValue"}, {"original_string": "private final PropertyValues delegate;", "modifier": "private final", "type": "PropertyValues", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "AnnotationPropertyValuesAdapter", "parameters": "(Annotation annotation, PropertyResolver propertyResolver, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "modifiers": "public", "return": "", "signature": " AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "full_signature": "public  AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "class_method_signature": "AnnotationPropertyValuesAdapter.AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "testcase": false, "constructor": true}, {"identifier": "AnnotationPropertyValuesAdapter", "parameters": "(Annotation annotation, PropertyResolver propertyResolver, String... ignoreAttributeNames)", "modifiers": "public", "return": "", "signature": " AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, String... ignoreAttributeNames)", "full_signature": "public  AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, String... ignoreAttributeNames)", "class_method_signature": "AnnotationPropertyValuesAdapter.AnnotationPropertyValuesAdapter(Annotation annotation, PropertyResolver propertyResolver, String... ignoreAttributeNames)", "testcase": false, "constructor": true}, {"identifier": "adapt", "parameters": "(Annotation annotation, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "modifiers": "private", "return": "PropertyValues", "signature": "PropertyValues adapt(Annotation annotation, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "full_signature": "private PropertyValues adapt(Annotation annotation, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "class_method_signature": "AnnotationPropertyValuesAdapter.adapt(Annotation annotation, boolean ignoreDefaultValue, String... ignoreAttributeNames)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "()", "modifiers": "public", "return": "Annotation", "signature": "Annotation getAnnotation()", "full_signature": "public Annotation getAnnotation()", "class_method_signature": "AnnotationPropertyValuesAdapter.getAnnotation()", "testcase": false, "constructor": false}, {"identifier": "isIgnoreDefaultValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreDefaultValue()", "full_signature": "public boolean isIgnoreDefaultValue()", "class_method_signature": "AnnotationPropertyValuesAdapter.isIgnoreDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getPropertyValues", "parameters": "()", "modifiers": "@Override public", "return": "PropertyValue[]", "signature": "PropertyValue[] getPropertyValues()", "full_signature": "@Override public PropertyValue[] getPropertyValues()", "class_method_signature": "AnnotationPropertyValuesAdapter.getPropertyValues()", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(String propertyName)", "modifiers": "@Override public", "return": "PropertyValue", "signature": "PropertyValue getPropertyValue(String propertyName)", "full_signature": "@Override public PropertyValue getPropertyValue(String propertyName)", "class_method_signature": "AnnotationPropertyValuesAdapter.getPropertyValue(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "changesSince", "parameters": "(PropertyValues old)", "modifiers": "@Override public", "return": "PropertyValues", "signature": "PropertyValues changesSince(PropertyValues old)", "full_signature": "@Override public PropertyValues changesSince(PropertyValues old)", "class_method_signature": "AnnotationPropertyValuesAdapter.changesSince(PropertyValues old)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String propertyName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(String propertyName)", "full_signature": "@Override public boolean contains(String propertyName)", "class_method_signature": "AnnotationPropertyValuesAdapter.contains(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "AnnotationPropertyValuesAdapter.isEmpty()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapter.java"}, "focal_method": {"identifier": "getAnnotation", "parameters": "()", "modifiers": "public", "return": "Annotation", "body": "public Annotation getAnnotation() {\n        return annotation;\n    }", "signature": "Annotation getAnnotation()", "full_signature": "public Annotation getAnnotation()", "class_method_signature": "AnnotationPropertyValuesAdapter.getAnnotation()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}