{"test_class": {"identifier": "AnnotationBasedSanitizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/model/sanitizer/internal/AnnotationBasedSanitizerTest.java"}, "test_case": {"identifier": "testAtLeastOption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAtLeastOption() throws Exception {\n        Root root = new Root(\n                \"root1\",\n                new Child(\"child1\", 2, 5),\n                new NullableChild(\"child2\")\n        );\n        Root sanitized = apply(root);\n        assertThat(sanitized.getChild().getMax()).isEqualTo(10);\n    }", "signature": "void testAtLeastOption()", "full_signature": "@Test public void testAtLeastOption()", "class_method_signature": "AnnotationBasedSanitizerTest.testAtLeastOption()", "testcase": true, "constructor": false, "invocations": ["apply", "isEqualTo", "assertThat", "getMax", "getChild"]}, "focal_class": {"identifier": "AnnotationBasedSanitizer", "superclass": "extends AbstractFieldSanitizer<Object>", "interfaces": "", "fields": [{"original_string": "private static final SanitizerInfo EMPTY_SANITIZER_INFO = new SanitizerInfo(false, null, null, -1, -1);", "modifier": "private static final", "type": "SanitizerInfo", "declarator": "EMPTY_SANITIZER_INFO = new SanitizerInfo(false, null, null, -1, -1)", "var_name": "EMPTY_SANITIZER_INFO"}, {"original_string": "private final static ConcurrentMap<Field, SanitizerInfo> FIELD_SANITIZER_INFOS = new ConcurrentHashMap<>();", "modifier": "private final static", "type": "ConcurrentMap<Field, SanitizerInfo>", "declarator": "FIELD_SANITIZER_INFOS = new ConcurrentHashMap<>()", "var_name": "FIELD_SANITIZER_INFOS"}, {"original_string": "private final ExpressionParser parser = new SpelExpressionParser();", "modifier": "private final", "type": "ExpressionParser", "declarator": "parser = new SpelExpressionParser()", "var_name": "parser"}, {"original_string": "private final EvaluationContext spelContext;", "modifier": "private final", "type": "EvaluationContext", "declarator": "spelContext", "var_name": "spelContext"}, {"original_string": "private final Function<Class<?>, Boolean> innerEntityPredicate;", "modifier": "private final", "type": "Function<Class<?>, Boolean>", "declarator": "innerEntityPredicate", "var_name": "innerEntityPredicate"}], "methods": [{"identifier": "AnnotationBasedSanitizer", "parameters": "(EvaluationContext spelContext,\n                                    Function<Class<?>, Boolean> innerEntityPredicate)", "modifiers": "public", "return": "", "signature": " AnnotationBasedSanitizer(EvaluationContext spelContext,\n                                    Function<Class<?>, Boolean> innerEntityPredicate)", "full_signature": "public  AnnotationBasedSanitizer(EvaluationContext spelContext,\n                                    Function<Class<?>, Boolean> innerEntityPredicate)", "class_method_signature": "AnnotationBasedSanitizer.AnnotationBasedSanitizer(EvaluationContext spelContext,\n                                    Function<Class<?>, Boolean> innerEntityPredicate)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> apply(Object entity)", "full_signature": "@Override public Optional<Object> apply(Object entity)", "class_method_signature": "AnnotationBasedSanitizer.apply(Object entity)", "testcase": false, "constructor": false}, {"identifier": "sanitizeFieldValue", "parameters": "(Field field, Object value, Object context)", "modifiers": "@Override protected", "return": "Optional<Object>", "signature": "Optional<Object> sanitizeFieldValue(Field field, Object value, Object context)", "full_signature": "@Override protected Optional<Object> sanitizeFieldValue(Field field, Object value, Object context)", "class_method_signature": "AnnotationBasedSanitizer.sanitizeFieldValue(Field field, Object value, Object context)", "testcase": false, "constructor": false}, {"identifier": "sanitizeNotNumericValue", "parameters": "(Object value, SanitizerInfo sanitizerInfo)", "modifiers": "private", "return": "Optional<Object>", "signature": "Optional<Object> sanitizeNotNumericValue(Object value, SanitizerInfo sanitizerInfo)", "full_signature": "private Optional<Object> sanitizeNotNumericValue(Object value, SanitizerInfo sanitizerInfo)", "class_method_signature": "AnnotationBasedSanitizer.sanitizeNotNumericValue(Object value, SanitizerInfo sanitizerInfo)", "testcase": false, "constructor": false}, {"identifier": "sanitizeNumericValue", "parameters": "(Field field, Object value, SanitizerInfo sanitizerInfo)", "modifiers": "private", "return": "Optional<Object>", "signature": "Optional<Object> sanitizeNumericValue(Field field, Object value, SanitizerInfo sanitizerInfo)", "full_signature": "private Optional<Object> sanitizeNumericValue(Field field, Object value, SanitizerInfo sanitizerInfo)", "class_method_signature": "AnnotationBasedSanitizer.sanitizeNumericValue(Field field, Object value, SanitizerInfo sanitizerInfo)", "testcase": false, "constructor": false}, {"identifier": "adjust", "parameters": "(T value, SanitizerInfo sanitizerInfo)", "modifiers": "private", "return": "Optional<T>", "signature": "Optional<T> adjust(T value, SanitizerInfo sanitizerInfo)", "full_signature": "private Optional<T> adjust(T value, SanitizerInfo sanitizerInfo)", "class_method_signature": "AnnotationBasedSanitizer.adjust(T value, SanitizerInfo sanitizerInfo)", "testcase": false, "constructor": false}, {"identifier": "getSanitizerInfo", "parameters": "(Field field)", "modifiers": "private", "return": "SanitizerInfo", "signature": "SanitizerInfo getSanitizerInfo(Field field)", "full_signature": "private SanitizerInfo getSanitizerInfo(Field field)", "class_method_signature": "AnnotationBasedSanitizer.getSanitizerInfo(Field field)", "testcase": false, "constructor": false}, {"identifier": "buildSanitizerInfo", "parameters": "(Field field, FieldSanitizer annotation)", "modifiers": "private", "return": "SanitizerInfo", "signature": "SanitizerInfo buildSanitizerInfo(Field field, FieldSanitizer annotation)", "full_signature": "private SanitizerInfo buildSanitizerInfo(Field field, FieldSanitizer annotation)", "class_method_signature": "AnnotationBasedSanitizer.buildSanitizerInfo(Field field, FieldSanitizer annotation)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/model/sanitizer/internal/AnnotationBasedSanitizer.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object entity)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> apply(Object entity) {\n        return apply(entity, NOTHING);\n    }", "signature": "Optional<Object> apply(Object entity)", "full_signature": "@Override public Optional<Object> apply(Object entity)", "class_method_signature": "AnnotationBasedSanitizer.apply(Object entity)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}