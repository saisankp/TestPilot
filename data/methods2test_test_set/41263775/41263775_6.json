{"test_class": {"identifier": "InTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/InTest.java"}, "test_case": {"identifier": "testInNone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInNone() {\n        // Create an indexed collection (note: could alternatively use CQEngine.copyFrom() existing collection)...\n        IndexedCollection<Car> cars = new ConcurrentIndexedCollection<Car>();\n\n        Attribute<Car, String> NAME = new SimpleNullableAttribute<Car, String>(\"name\") {\n            public String getValue(Car car, QueryOptions queryOptions) {\n                return car.name;\n            }\n        };\n        cars.addIndex(NavigableIndex.onAttribute(NAME));\n\n        // Add some objects to the collection...\n        cars.add(new Car(1, \"ford\", null, null));\n        cars.add(new Car(2, \"honda\", null, null));\n        cars.add(new Car(3, \"toyota\", null, null));\n\n        Assert.assertEquals(cars.retrieve(in(NAME)).size(), 0);\n        Assert.assertEquals(cars.retrieve(in(NAME, new ArrayList<String>())).size(), 0);\n    }", "signature": "void testInNone()", "full_signature": "@Test public void testInNone()", "class_method_signature": "InTest.testInNone()", "testcase": true, "constructor": false, "invocations": ["addIndex", "onAttribute", "add", "add", "add", "assertEquals", "size", "retrieve", "in", "assertEquals", "size", "retrieve", "in"]}, "focal_class": {"identifier": "In", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [{"original_string": "private final Set<A> values;", "modifier": "private final", "type": "Set<A>", "declarator": "values", "var_name": "values"}, {"original_string": "private final boolean disjoint;", "modifier": "private final", "type": "boolean", "declarator": "disjoint", "var_name": "disjoint"}], "methods": [{"identifier": "In", "parameters": "(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "modifiers": "public", "return": "", "signature": " In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "full_signature": "public  In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "class_method_signature": "In.In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "Set<A>", "signature": "Set<A> getValues()", "full_signature": "public Set<A> getValues()", "class_method_signature": "In.getValues()", "testcase": false, "constructor": false}, {"identifier": "isDisjoint", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisjoint()", "full_signature": "public boolean isDisjoint()", "class_method_signature": "In.isDisjoint()", "testcase": false, "constructor": false}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "In.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "In.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override protected int calcHashCode()", "class_method_signature": "In.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "In.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "In.toString()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/In.java"}, "focal_method": {"identifier": "In", "parameters": "(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "modifiers": "public", "return": "", "body": "public In(Attribute<O, A> attribute, boolean disjoint, Set<A> values) {\n        super(attribute);\n        if (values == null || values.size() == 0){\n            throw new IllegalArgumentException(\"The IN query must have at least one value.\");\n        }\n        this.values = values;\n        this.disjoint = disjoint;\n    }", "signature": " In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "full_signature": "public  In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "class_method_signature": "In.In(Attribute<O, A> attribute, boolean disjoint, Set<A> values)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}