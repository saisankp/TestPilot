{"test_class": {"identifier": "JsonCndTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JsonCndTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JsonCndTest.class)", "var_name": "LOGGER"}, {"original_string": "private NamePathResolver resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS);", "modifier": "private", "type": "NamePathResolver", "declarator": "resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS)", "var_name": "resolver"}, {"original_string": "private static final String NS_FOO_PREFIX = \"foo\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_PREFIX = \"foo\"", "var_name": "NS_FOO_PREFIX"}, {"original_string": "private static final String NS_BAR_PREFIX = \"bar\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_PREFIX = \"bar\"", "var_name": "NS_BAR_PREFIX"}, {"original_string": "private static final String NS_FOO_URI = \"http://foo.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_FOO_URI = \"http://foo.com\"", "var_name": "NS_FOO_URI"}, {"original_string": "private static final String NS_BAR_URI = \"http://bar.com\";", "modifier": "private static final", "type": "String", "declarator": "NS_BAR_URI = \"http://bar.com\"", "var_name": "NS_BAR_URI"}, {"original_string": "private static final List<JcrNs> ns = Arrays.asList(\n            JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI),\n            JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI)\n    );", "modifier": "private static final", "type": "List<JcrNs>", "declarator": "ns = Arrays.asList(\n            JcrNs.create(NS_BAR_PREFIX, NS_BAR_URI),\n            JcrNs.create(NS_FOO_PREFIX, NS_FOO_URI)\n    )", "var_name": "ns"}, {"original_string": "private static final File baseDir = new File(\"src/test/resources/JsonCndTest\");", "modifier": "private static final", "type": "File", "declarator": "baseDir = new File(\"src/test/resources/JsonCndTest\")", "var_name": "baseDir"}], "file": "core/src/test/java/net/adamcin/oakpal/core/JsonCndTest.java"}, "test_case": {"identifier": "testNamedBy_privileges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNamedBy_privileges() {\n        List<PrivilegeDefinition> defs = JsonCnd.getPrivilegesFromJson(obj()\n                .key(\"jcr:canDo\", obj())\n                .key(\"jcr:willDo\", obj()\n                        .key(JsonCnd.PRIVILEGE_KEY_ABSTRACT, false))\n                .key(\"jcr:wouldDoBut\", obj()\n                        .key(JsonCnd.PRIVILEGE_KEY_ABSTRACT, true))\n                .key(\"jcr:none\", obj()\n                        .key(JsonCnd.PRIVILEGE_KEY_CONTAINS, arr()))\n                .key(\"jcr:rw\", obj()\n                        .key(JsonCnd.PRIVILEGE_KEY_CONTAINS,\n                                arr(\"jcr:read\", \"jcr:write\", \"jcr:addChildNodes\")))\n                .key(\"jcr:mightRw\", obj()\n                        .key(JsonCnd.PRIVILEGE_KEY_ABSTRACT, true)\n                        .key(JsonCnd.PRIVILEGE_KEY_CONTAINS,\n                                arr(\"jcr:read\", \"jcr:write\", \"jcr:removeNode\")))\n                .get(), getMapping());\n\n        final List<String> jcrNames = Arrays.asList(\"jcr:canDo\", \"jcr:willDo\", \"jcr:wouldDoBut\", \"jcr:none\", \"jcr:rw\",\n                \"jcr:mightRw\", \"jcr:read\", \"jcr:write\", \"jcr:addChildNodes\", \"jcr:removeNode\");\n\n        final Set<Name> expectNamedBy = jcrNames.stream().map(uncheck1(resolver::getQName)).collect(Collectors.toSet());\n        final Set<Name> actualNamedBy = defs.stream().flatMap(JsonCnd::namedBy).collect(Collectors.toSet());\n        assertEquals(\"expect namedBy\", expectNamedBy, actualNamedBy);\n    }", "signature": "void testNamedBy_privileges()", "full_signature": "@Test public void testNamedBy_privileges()", "class_method_signature": "JsonCndTest.testNamedBy_privileges()", "testcase": true, "constructor": false, "invocations": ["getPrivilegesFromJson", "get", "key", "key", "key", "key", "key", "key", "obj", "obj", "key", "obj", "key", "obj", "key", "obj", "arr", "key", "obj", "arr", "key", "key", "obj", "arr", "getMapping", "asList", "collect", "map", "stream", "uncheck1", "toSet", "collect", "flatMap", "stream", "toSet", "assertEquals"]}, "focal_class": {"identifier": "JsonCnd", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JsonCnd.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JsonCnd.class)", "var_name": "LOGGER"}, {"original_string": "static final NodeState INITIAL_CONTENT = createInitialContent();", "modifier": "static final", "type": "NodeState", "declarator": "INITIAL_CONTENT = createInitialContent()", "var_name": "INITIAL_CONTENT"}, {"original_string": "public static final NamespaceMapping BUILTIN_MAPPINGS = new NamespaceMapping(\n            new RegistryNamespaceResolver(\n                    new ReadOnlyNamespaceRegistry(\n                            new ImmutableRoot(INITIAL_CONTENT))));", "modifier": "public static final", "type": "NamespaceMapping", "declarator": "BUILTIN_MAPPINGS = new NamespaceMapping(\n            new RegistryNamespaceResolver(\n                    new ReadOnlyNamespaceRegistry(\n                            new ImmutableRoot(INITIAL_CONTENT))))", "var_name": "BUILTIN_MAPPINGS"}, {"original_string": "static final NamePathResolver BUILTIN_RESOLVER = new DefaultNamePathResolver(BUILTIN_MAPPINGS);", "modifier": "static final", "type": "NamePathResolver", "declarator": "BUILTIN_RESOLVER = new DefaultNamePathResolver(BUILTIN_MAPPINGS)", "var_name": "BUILTIN_RESOLVER"}, {"original_string": "public static final List<String> BUILTIN_NODETYPES = Collections.unmodifiableList(\n            StreamSupport.stream(INITIAL_CONTENT\n                    .getChildNode(JcrConstants.JCR_SYSTEM)\n                    .getChildNode(NodeTypeConstants.JCR_NODE_TYPES)\n                    .getChildNodeNames().spliterator(), false)\n                    .collect(Collectors.toList()));", "modifier": "public static final", "type": "List<String>", "declarator": "BUILTIN_NODETYPES = Collections.unmodifiableList(\n            StreamSupport.stream(INITIAL_CONTENT\n                    .getChildNode(JcrConstants.JCR_SYSTEM)\n                    .getChildNode(NodeTypeConstants.JCR_NODE_TYPES)\n                    .getChildNodeNames().spliterator(), false)\n                    .collect(Collectors.toList()))", "var_name": "BUILTIN_NODETYPES"}, {"original_string": "public static final List<String> BUILTIN_PRIVILEGES = Collections.unmodifiableList(\n            Stream.concat(Stream.of(PrivilegeConstants.JCR_ALL),\n                    Stream.concat(\n                            PrivilegeConstants.NON_AGGREGATE_PRIVILEGES.stream(),\n                            PrivilegeConstants.AGGREGATE_PRIVILEGES.keySet().stream()))\n                    .collect(Collectors.toList()));", "modifier": "public static final", "type": "List<String>", "declarator": "BUILTIN_PRIVILEGES = Collections.unmodifiableList(\n            Stream.concat(Stream.of(PrivilegeConstants.JCR_ALL),\n                    Stream.concat(\n                            PrivilegeConstants.NON_AGGREGATE_PRIVILEGES.stream(),\n                            PrivilegeConstants.AGGREGATE_PRIVILEGES.keySet().stream()))\n                    .collect(Collectors.toList()))", "var_name": "BUILTIN_PRIVILEGES"}, {"original_string": "static final String PRIVILEGE_KEY_ABSTRACT = \"abstract\";", "modifier": "static final", "type": "String", "declarator": "PRIVILEGE_KEY_ABSTRACT = \"abstract\"", "var_name": "PRIVILEGE_KEY_ABSTRACT"}, {"original_string": "static final String PRIVILEGE_KEY_CONTAINS = \"contains\";", "modifier": "static final", "type": "String", "declarator": "PRIVILEGE_KEY_CONTAINS = \"contains\"", "var_name": "PRIVILEGE_KEY_CONTAINS"}, {"original_string": "static final String TOKEN_RESIDUAL = \"*\";", "modifier": "static final", "type": "String", "declarator": "TOKEN_RESIDUAL = \"*\"", "var_name": "TOKEN_RESIDUAL"}, {"original_string": "static final Name QNAME_RESIDUAL = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, TOKEN_RESIDUAL);", "modifier": "static final", "type": "Name", "declarator": "QNAME_RESIDUAL = NameFactoryImpl.getInstance().create(Name.NS_DEFAULT_URI, TOKEN_RESIDUAL)", "var_name": "QNAME_RESIDUAL"}, {"original_string": "static final transient Comparator<String> COMPARATOR_PUSH_RESIDUALS;", "modifier": "static final transient", "type": "Comparator<String>", "declarator": "COMPARATOR_PUSH_RESIDUALS", "var_name": "COMPARATOR_PUSH_RESIDUALS"}, {"original_string": "private static final String[] UNKNOWN_TOKENS = {\"?\"};", "modifier": "private static final", "type": "String[]", "declarator": "UNKNOWN_TOKENS = {\"?\"}", "var_name": "UNKNOWN_TOKENS"}, {"original_string": "private static final List<String> fullQueryOps = Arrays.asList(\n            Lexer.QUEROPS_EQUAL,\n            Lexer.QUEROPS_NOTEQUAL,\n            Lexer.QUEROPS_LESSTHAN,\n            Lexer.QUEROPS_LESSTHANOREQUAL,\n            Lexer.QUEROPS_GREATERTHAN,\n            Lexer.QUEROPS_GREATERTHANOREQUAL,\n            Lexer.QUEROPS_LIKE);", "modifier": "private static final", "type": "List<String>", "declarator": "fullQueryOps = Arrays.asList(\n            Lexer.QUEROPS_EQUAL,\n            Lexer.QUEROPS_NOTEQUAL,\n            Lexer.QUEROPS_LESSTHAN,\n            Lexer.QUEROPS_LESSTHANOREQUAL,\n            Lexer.QUEROPS_GREATERTHAN,\n            Lexer.QUEROPS_GREATERTHANOREQUAL,\n            Lexer.QUEROPS_LIKE)", "var_name": "fullQueryOps"}], "methods": [{"identifier": "createInitialContent", "parameters": "()", "modifiers": "private static", "return": "NodeState", "signature": "NodeState createInitialContent()", "full_signature": "private static NodeState createInitialContent()", "class_method_signature": "JsonCnd.createInitialContent()", "testcase": false, "constructor": false}, {"identifier": "JsonCnd", "parameters": "()", "modifiers": "private", "return": "", "signature": " JsonCnd()", "full_signature": "private  JsonCnd()", "class_method_signature": "JsonCnd.JsonCnd()", "testcase": false, "constructor": true}, {"identifier": "getQTypesFromJson", "parameters": "(final @NotNull JsonObject json,\n                      final @NotNull NamespaceMapping mapping)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "List<QNodeTypeDefinition>", "signature": "List<QNodeTypeDefinition> getQTypesFromJson(final @NotNull JsonObject json,\n                      final @NotNull NamespaceMapping mapping)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static List<QNodeTypeDefinition> getQTypesFromJson(final @NotNull JsonObject json,\n                      final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.getQTypesFromJson(final @NotNull JsonObject json,\n                      final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "getPrivilegesFromJson", "parameters": "(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "List<PrivilegeDefinition>", "signature": "List<PrivilegeDefinition> getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static List<PrivilegeDefinition> getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final @NotNull List<QNodeTypeDefinition> ntDefs,\n                                    final @NotNull NamespaceMapping mapping)", "modifiers": "public static", "return": "JsonObject", "signature": "JsonObject toJson(final @NotNull List<QNodeTypeDefinition> ntDefs,\n                                    final @NotNull NamespaceMapping mapping)", "full_signature": "public static JsonObject toJson(final @NotNull List<QNodeTypeDefinition> ntDefs,\n                                    final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.toJson(final @NotNull List<QNodeTypeDefinition> ntDefs,\n                                    final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "privilegesToJson", "parameters": "(final @NotNull List<PrivilegeDefinition> privDefs,\n                                             final @NotNull NamespaceMapping mapping)", "modifiers": "public static", "return": "JsonValue", "signature": "JsonValue privilegesToJson(final @NotNull List<PrivilegeDefinition> privDefs,\n                                             final @NotNull NamespaceMapping mapping)", "full_signature": "public static JsonValue privilegesToJson(final @NotNull List<PrivilegeDefinition> privDefs,\n                                             final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.privilegesToJson(final @NotNull List<PrivilegeDefinition> privDefs,\n                                             final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "toJcrNsList", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                          final @NotNull NamespaceMappingRequest request)", "modifiers": "public static", "return": "List<JcrNs>", "signature": "List<JcrNs> toJcrNsList(final @NotNull NamespaceMapping mapping,\n                                          final @NotNull NamespaceMappingRequest request)", "full_signature": "public static List<JcrNs> toJcrNsList(final @NotNull NamespaceMapping mapping,\n                                          final @NotNull NamespaceMappingRequest request)", "class_method_signature": "JsonCnd.toJcrNsList(final @NotNull NamespaceMapping mapping,\n                                          final @NotNull NamespaceMappingRequest request)", "testcase": false, "constructor": false}, {"identifier": "adaptToQ", "parameters": "(final @NotNull Session session)", "modifiers": "public static", "return": "Function<NodeTypeDefinition, QNodeTypeDefinition>", "signature": "Function<NodeTypeDefinition, QNodeTypeDefinition> adaptToQ(final @NotNull Session session)", "full_signature": "public static Function<NodeTypeDefinition, QNodeTypeDefinition> adaptToQ(final @NotNull Session session)", "class_method_signature": "JsonCnd.adaptToQ(final @NotNull Session session)", "testcase": false, "constructor": false}, {"identifier": "namedBy", "parameters": "(final @NotNull QNodeTypeDefinition def)", "modifiers": "public static", "return": "Stream<Name>", "signature": "Stream<Name> namedBy(final @NotNull QNodeTypeDefinition def)", "full_signature": "public static Stream<Name> namedBy(final @NotNull QNodeTypeDefinition def)", "class_method_signature": "JsonCnd.namedBy(final @NotNull QNodeTypeDefinition def)", "testcase": false, "constructor": false}, {"identifier": "namedBy", "parameters": "(final @NotNull PrivilegeDefinition def)", "modifiers": "public static", "return": "Stream<Name>", "signature": "Stream<Name> namedBy(final @NotNull PrivilegeDefinition def)", "full_signature": "public static Stream<Name> namedBy(final @NotNull PrivilegeDefinition def)", "class_method_signature": "JsonCnd.namedBy(final @NotNull PrivilegeDefinition def)", "testcase": false, "constructor": false}, {"identifier": "toNamespaceMapping", "parameters": "(final List<JcrNs> jcrNsList)", "modifiers": "public static", "return": "NamespaceMapping", "signature": "NamespaceMapping toNamespaceMapping(final List<JcrNs> jcrNsList)", "full_signature": "public static NamespaceMapping toNamespaceMapping(final List<JcrNs> jcrNsList)", "class_method_signature": "JsonCnd.toNamespaceMapping(final List<JcrNs> jcrNsList)", "testcase": false, "constructor": false}, {"identifier": "jcrNameOrResidual", "parameters": "(final @NotNull NamePathResolver resolver)", "modifiers": "static", "return": "Fun.ThrowingFunction<Name, String>", "signature": "Fun.ThrowingFunction<Name, String> jcrNameOrResidual(final @NotNull NamePathResolver resolver)", "full_signature": "static Fun.ThrowingFunction<Name, String> jcrNameOrResidual(final @NotNull NamePathResolver resolver)", "class_method_signature": "JsonCnd.jcrNameOrResidual(final @NotNull NamePathResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "qNameOrResidual", "parameters": "(final @NotNull NamePathResolver resolver)", "modifiers": "static", "return": "Fun.ThrowingFunction<String, Name>", "signature": "Fun.ThrowingFunction<String, Name> qNameOrResidual(final @NotNull NamePathResolver resolver)", "full_signature": "static Fun.ThrowingFunction<String, Name> qNameOrResidual(final @NotNull NamePathResolver resolver)", "class_method_signature": "JsonCnd.qNameOrResidual(final @NotNull NamePathResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "nodeTypeDefinitionMapper", "parameters": "(final @NotNull NamePathResolver resolver)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") static", "return": "Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition>", "signature": "Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition> nodeTypeDefinitionMapper(final @NotNull NamePathResolver resolver)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") static Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition> nodeTypeDefinitionMapper(final @NotNull NamePathResolver resolver)", "class_method_signature": "JsonCnd.nodeTypeDefinitionMapper(final @NotNull NamePathResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "qDefinitionMapper", "parameters": "(final @NotNull NamespaceMapping mapping)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") static", "return": "Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition>", "signature": "Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition> qDefinitionMapper(final @NotNull NamespaceMapping mapping)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") static Fun.ThrowingBiFunction<String, JsonObject, QNodeTypeDefinition> qDefinitionMapper(final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.qDefinitionMapper(final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "privDefinitionMapper", "parameters": "(final @NotNull NamespaceMapping mapping)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") static", "return": "Fun.ThrowingBiFunction<String, JsonObject, PrivilegeDefinition>", "signature": "Fun.ThrowingBiFunction<String, JsonObject, PrivilegeDefinition> privDefinitionMapper(final @NotNull NamespaceMapping mapping)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") static Fun.ThrowingBiFunction<String, JsonObject, PrivilegeDefinition> privDefinitionMapper(final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.privDefinitionMapper(final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "qValueString", "parameters": "(final @NotNull QValue qValue,\n                               final @NotNull NamePathResolver resolver)", "modifiers": "static", "return": "String", "signature": "String qValueString(final @NotNull QValue qValue,\n                               final @NotNull NamePathResolver resolver)", "full_signature": "static String qValueString(final @NotNull QValue qValue,\n                               final @NotNull NamePathResolver resolver)", "class_method_signature": "JsonCnd.qValueString(final @NotNull QValue qValue,\n                               final @NotNull NamePathResolver resolver)", "testcase": false, "constructor": false}, {"identifier": "streamNsPrefix", "parameters": "(final @NotNull String name)", "modifiers": "public static @NotNull", "return": "Stream<String>", "signature": "Stream<String> streamNsPrefix(final @NotNull String name)", "full_signature": "public static @NotNull Stream<String> streamNsPrefix(final @NotNull String name)", "class_method_signature": "JsonCnd.streamNsPrefix(final @NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "readNodeTypes", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                                          final @NotNull List<URL> cndUrls)", "modifiers": "public static", "return": "List<Result<NodeTypeSet>>", "signature": "List<Result<NodeTypeSet>> readNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                          final @NotNull List<URL> cndUrls)", "full_signature": "public static List<Result<NodeTypeSet>> readNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                          final @NotNull List<URL> cndUrls)", "class_method_signature": "JsonCnd.readNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                          final @NotNull List<URL> cndUrls)", "testcase": false, "constructor": false}, {"identifier": "aggregateNodeTypes", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                                 final @NotNull List<NodeTypeSet> nodeTypeSets)", "modifiers": "public static", "return": "NodeTypeSet", "signature": "NodeTypeSet aggregateNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                 final @NotNull List<NodeTypeSet> nodeTypeSets)", "full_signature": "public static NodeTypeSet aggregateNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                 final @NotNull List<NodeTypeSet> nodeTypeSets)", "class_method_signature": "JsonCnd.aggregateNodeTypes(final @NotNull NamespaceMapping mapping,\n                                                 final @NotNull List<NodeTypeSet> nodeTypeSets)", "testcase": false, "constructor": false}, {"identifier": "internalReadAllTo", "parameters": "(final @NotNull NamePathResolver resolver,\n                      final @NotNull B builder,\n                      final @NotNull JsonValue parentValue,\n                      final @NotNull K[] tokens)", "modifiers": "static", "return": "void", "signature": "void internalReadAllTo(final @NotNull NamePathResolver resolver,\n                      final @NotNull B builder,\n                      final @NotNull JsonValue parentValue,\n                      final @NotNull K[] tokens)", "full_signature": "static void internalReadAllTo(final @NotNull NamePathResolver resolver,\n                      final @NotNull B builder,\n                      final @NotNull JsonValue parentValue,\n                      final @NotNull K[] tokens)", "class_method_signature": "JsonCnd.internalReadAllTo(final @NotNull NamePathResolver resolver,\n                      final @NotNull B builder,\n                      final @NotNull JsonValue parentValue,\n                      final @NotNull K[] tokens)", "testcase": false, "constructor": false}, {"identifier": "internalJsonContainsAnyLexToken", "parameters": "(final @NotNull JsonObject json)", "modifiers": "private static", "return": "Predicate<K>", "signature": "Predicate<K> internalJsonContainsAnyLexToken(final @NotNull JsonObject json)", "full_signature": "private static Predicate<K> internalJsonContainsAnyLexToken(final @NotNull JsonObject json)", "class_method_signature": "JsonCnd.internalJsonContainsAnyLexToken(final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "internalJsonLookupByAnyLexToken", "parameters": "(final @NotNull K key, final @NotNull JsonObject json)", "modifiers": "private static", "return": "JsonValue", "signature": "JsonValue internalJsonLookupByAnyLexToken(final @NotNull K key, final @NotNull JsonObject json)", "full_signature": "private static JsonValue internalJsonLookupByAnyLexToken(final @NotNull K key, final @NotNull JsonObject json)", "class_method_signature": "JsonCnd.internalJsonLookupByAnyLexToken(final @NotNull K key, final @NotNull JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "internalWriteAllJson", "parameters": "(final @NotNull D def,\n                         final @NotNull NamePathResolver resolver,\n                         final @NotNull K[] tokens)", "modifiers": "static", "return": "JsonValue", "signature": "JsonValue internalWriteAllJson(final @NotNull D def,\n                         final @NotNull NamePathResolver resolver,\n                         final @NotNull K[] tokens)", "full_signature": "static JsonValue internalWriteAllJson(final @NotNull D def,\n                         final @NotNull NamePathResolver resolver,\n                         final @NotNull K[] tokens)", "class_method_signature": "JsonCnd.internalWriteAllJson(final @NotNull D def,\n                         final @NotNull NamePathResolver resolver,\n                         final @NotNull K[] tokens)", "testcase": false, "constructor": false}, {"identifier": "normalizeQueryOperators", "parameters": "(final @NotNull String[] candidates)", "modifiers": "private static", "return": "Stream<String>", "signature": "Stream<String> normalizeQueryOperators(final @NotNull String[] candidates)", "full_signature": "private static Stream<String> normalizeQueryOperators(final @NotNull String[] candidates)", "class_method_signature": "JsonCnd.normalizeQueryOperators(final @NotNull String[] candidates)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/JsonCnd.java"}, "focal_method": {"identifier": "getPrivilegesFromJson", "parameters": "(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "List<PrivilegeDefinition>", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public static List<PrivilegeDefinition>\n    getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping) {\n        if (json.getValueType() == JsonValue.ValueType.ARRAY) {\n            return JavaxJson.mapArrayOfStrings(json.asJsonArray(),\n                    zipKeysWithValueFunc(constantly1(() -> JsonValue.EMPTY_JSON_OBJECT)), true)\n                    .stream()\n                    .map(mapEntry(uncheck2(privDefinitionMapper(mapping))))\n                    .collect(Collectors.toList());\n        } else if (json.getValueType() == JsonValue.ValueType.OBJECT) {\n            return JavaxJson.mapObjectValues(json.asJsonObject(), uncheck2(privDefinitionMapper(mapping)), true);\n        } else {\n            return Collections.emptyList();\n        }\n    }", "signature": "List<PrivilegeDefinition> getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static List<PrivilegeDefinition> getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "class_method_signature": "JsonCnd.getPrivilegesFromJson(final @NotNull JsonValue json,\n                          final @NotNull NamespaceMapping mapping)", "testcase": false, "constructor": false, "invocations": ["getValueType", "collect", "map", "stream", "mapArrayOfStrings", "asJsonArray", "zipKeysWithValueFunc", "constantly1", "mapEntry", "uncheck2", "privDefinitionMapper", "toList", "getValueType", "mapObjectValues", "asJsonObject", "uncheck2", "privDefinitionMapper", "emptyList"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}