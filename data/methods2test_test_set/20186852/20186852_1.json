{"test_class": {"identifier": "SelectUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "db/org.tinygroup.jsqlparser/src/test/java/org/tinygroup/jsqlparser/util/SelectUtilsTest.java"}, "test_case": {"identifier": "testAddJoin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddJoin() throws JSQLParserException {\n\t\tSelect select = (Select)CCJSqlParserUtil.parse(\"select a from mytable\");\n\t\tfinal EqualsTo equalsTo = new EqualsTo();\n\t\tequalsTo.setLeftExpression(new Column(\"a\"));\n\t\tequalsTo.setRightExpression(new Column(\"b\"));\n\t\tJoin addJoin = SelectUtils.addJoin(select, new Table(\"mytable2\"), equalsTo);\n\t\taddJoin.setLeft(true);\n\t\tassertEquals(\"SELECT a FROM mytable LEFT JOIN mytable2 ON a = b\", select.toString());\n\t}", "signature": "void testAddJoin()", "full_signature": "@Test public void testAddJoin()", "class_method_signature": "SelectUtilsTest.testAddJoin()", "testcase": true, "constructor": false, "invocations": ["parse", "setLeftExpression", "setRightExpression", "addJoin", "setLeft", "assertEquals", "toString"]}, "focal_class": {"identifier": "SelectUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SelectUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " SelectUtils()", "full_signature": "private  SelectUtils()", "class_method_signature": "SelectUtils.SelectUtils()", "testcase": false, "constructor": true}, {"identifier": "buildSelectFromTableAndExpressions", "parameters": "(Table table, Expression ... expr)", "modifiers": "public static", "return": "Select", "signature": "Select buildSelectFromTableAndExpressions(Table table, Expression ... expr)", "full_signature": "public static Select buildSelectFromTableAndExpressions(Table table, Expression ... expr)", "class_method_signature": "SelectUtils.buildSelectFromTableAndExpressions(Table table, Expression ... expr)", "testcase": false, "constructor": false}, {"identifier": "buildSelectFromTableAndExpressions", "parameters": "(Table table, String ... expr)", "modifiers": "public static", "return": "Select", "signature": "Select buildSelectFromTableAndExpressions(Table table, String ... expr)", "full_signature": "public static Select buildSelectFromTableAndExpressions(Table table, String ... expr)", "class_method_signature": "SelectUtils.buildSelectFromTableAndExpressions(Table table, String ... expr)", "testcase": false, "constructor": false}, {"identifier": "buildSelectFromTableAndSelectItems", "parameters": "(Table table, SelectItem ... selectItems)", "modifiers": "public static", "return": "Select", "signature": "Select buildSelectFromTableAndSelectItems(Table table, SelectItem ... selectItems)", "full_signature": "public static Select buildSelectFromTableAndSelectItems(Table table, SelectItem ... selectItems)", "class_method_signature": "SelectUtils.buildSelectFromTableAndSelectItems(Table table, SelectItem ... selectItems)", "testcase": false, "constructor": false}, {"identifier": "buildSelectFromTable", "parameters": "(Table table)", "modifiers": "public static", "return": "Select", "signature": "Select buildSelectFromTable(Table table)", "full_signature": "public static Select buildSelectFromTable(Table table)", "class_method_signature": "SelectUtils.buildSelectFromTable(Table table)", "testcase": false, "constructor": false}, {"identifier": "addExpression", "parameters": "(Select select, final Expression expr)", "modifiers": "public static", "return": "void", "signature": "void addExpression(Select select, final Expression expr)", "full_signature": "public static void addExpression(Select select, final Expression expr)", "class_method_signature": "SelectUtils.addExpression(Select select, final Expression expr)", "testcase": false, "constructor": false}, {"identifier": "addJoin", "parameters": "(Select select, final Table table, final Expression onExpression)", "modifiers": "public static", "return": "Join", "signature": "Join addJoin(Select select, final Table table, final Expression onExpression)", "full_signature": "public static Join addJoin(Select select, final Table table, final Expression onExpression)", "class_method_signature": "SelectUtils.addJoin(Select select, final Table table, final Expression onExpression)", "testcase": false, "constructor": false}], "file": "db/org.tinygroup.jsqlparser/src/main/java/org/tinygroup/jsqlparser/util/SelectUtils.java"}, "focal_method": {"identifier": "addJoin", "parameters": "(Select select, final Table table, final Expression onExpression)", "modifiers": "public static", "return": "Join", "body": "public static Join addJoin(Select select, final Table table, final Expression onExpression) {\n\t\tif (select.getSelectBody() instanceof PlainSelect) {\n\t\t\tPlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\t\t\tList<Join> joins = plainSelect.getJoins();\n\t\t\tif (joins == null) {\n\t\t\t\tjoins = new ArrayList<Join>();\n\t\t\t\tplainSelect.setJoins(joins);\n\t\t\t}\n\t\t\tJoin join = new Join();\n\t\t\tjoin.setRightItem(table);\n\t\t\tjoin.setOnExpression(onExpression);\n\t\t\tjoins.add(join);\n\t\t\treturn join;\n\t\t}\n\t\tthrow new UnsupportedOperationException(\"Not supported yet.\");\n\t}", "signature": "Join addJoin(Select select, final Table table, final Expression onExpression)", "full_signature": "public static Join addJoin(Select select, final Table table, final Expression onExpression)", "class_method_signature": "SelectUtils.addJoin(Select select, final Table table, final Expression onExpression)", "testcase": false, "constructor": false, "invocations": ["getSelectBody", "getSelectBody", "getJoins", "setJoins", "setRightItem", "setOnExpression", "add"]}, "repository": {"repo_id": 20186852, "url": "https://github.com/TinyGroup/tiny", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 4712, "license": "licensed"}}