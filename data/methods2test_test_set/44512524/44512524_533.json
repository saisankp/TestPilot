{"test_class": {"identifier": "TestLinearCounting", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/TestLinearCounting.java"}, "test_case": {"identifier": "testBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuilder()\n    {\n        assertEquals(630, Builder.onePercentError(1).sizeof());\n        assertEquals(630, Builder.onePercentError(99).sizeof());\n        assertEquals(630, Builder.onePercentError(100).sizeof());\n        assertEquals(630, Builder.onePercentError(101).sizeof());\n        assertEquals(759, Builder.onePercentError(3375).sizeof());\n        assertEquals(995, Builder.onePercentError(9999).sizeof());\n        assertEquals(995, Builder.onePercentError(10000).sizeof());\n        assertEquals(996, Builder.onePercentError(10001).sizeof());\n        assertEquals(7501, Builder.onePercentError(305028).sizeof());\n        assertEquals(19272, Builder.onePercentError(1000000).sizeof());\n        assertEquals(23027, Builder.onePercentError(1250000).sizeof());\n        assertEquals(74962, Builder.onePercentError(5000000).sizeof());\n        assertEquals(81372, Builder.onePercentError(5500000).sizeof());\n        assertEquals(131030, Builder.onePercentError(9500000).sizeof());\n        assertEquals(137073, Builder.onePercentError(10000000).sizeof());\n        assertEquals(137073, Builder.onePercentError(10000001).sizeof());\n        assertEquals(355055, Builder.onePercentError(30000000).sizeof());\n        assertEquals(573038, Builder.onePercentError(50000000).sizeof());\n        assertEquals(822207, Builder.onePercentError(75000000).sizeof());\n        assertEquals(1071377, Builder.onePercentError(100000000).sizeof());\n        assertEquals(1167722, Builder.onePercentError(110000000).sizeof());\n        assertEquals(1264067, Builder.onePercentError(120000000).sizeof());\n        assertEquals(2500000, Builder.onePercentError(240000000).sizeof());\n    }", "signature": "void testBuilder()", "full_signature": "@Test public void testBuilder()", "class_method_signature": "TestLinearCounting.testBuilder()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError", "assertEquals", "sizeof", "onePercentError"]}, "focal_class": {"identifier": "LinearCounting", "superclass": "", "interfaces": "implements IRichCardinality", "fields": [{"original_string": "protected byte[] map;", "modifier": "protected", "type": "byte[]", "declarator": "map", "var_name": "map"}, {"original_string": "protected final int length;", "modifier": "protected final", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "protected int count;", "modifier": "protected", "type": "int", "declarator": "count", "var_name": "count"}], "methods": [{"identifier": "LinearCounting", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " LinearCounting(int size)", "full_signature": "public  LinearCounting(int size)", "class_method_signature": "LinearCounting.LinearCounting(int size)", "testcase": false, "constructor": true}, {"identifier": "LinearCounting", "parameters": "(byte[] map)", "modifiers": "public", "return": "", "signature": " LinearCounting(byte[] map)", "full_signature": "public  LinearCounting(byte[] map)", "class_method_signature": "LinearCounting.LinearCounting(byte[] map)", "testcase": false, "constructor": true}, {"identifier": "cardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long cardinality()", "full_signature": "@Override public long cardinality()", "class_method_signature": "LinearCounting.cardinality()", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "@Override public byte[] getBytes()", "class_method_signature": "LinearCounting.getBytes()", "testcase": false, "constructor": false}, {"identifier": "offerHashed", "parameters": "(long hashedLong)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(long hashedLong)", "full_signature": "@Override public boolean offerHashed(long hashedLong)", "class_method_signature": "LinearCounting.offerHashed(long hashedLong)", "testcase": false, "constructor": false}, {"identifier": "offerHashed", "parameters": "(int hashedInt)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offerHashed(int hashedInt)", "full_signature": "@Override public boolean offerHashed(int hashedInt)", "class_method_signature": "LinearCounting.offerHashed(int hashedInt)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(Object o)", "full_signature": "@Override public boolean offer(Object o)", "class_method_signature": "LinearCounting.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "sizeof", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int sizeof()", "full_signature": "@Override public int sizeof()", "class_method_signature": "LinearCounting.sizeof()", "testcase": false, "constructor": false}, {"identifier": "computeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int computeCount()", "full_signature": "public int computeCount()", "class_method_signature": "LinearCounting.computeCount()", "testcase": false, "constructor": false}, {"identifier": "getUtilization", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUtilization()", "full_signature": "public double getUtilization()", "class_method_signature": "LinearCounting.getUtilization()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCount()", "full_signature": "public int getCount()", "class_method_signature": "LinearCounting.getCount()", "testcase": false, "constructor": false}, {"identifier": "isSaturated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSaturated()", "full_signature": "public boolean isSaturated()", "class_method_signature": "LinearCounting.isSaturated()", "testcase": false, "constructor": false}, {"identifier": "mapAsBitString", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String mapAsBitString()", "full_signature": "protected String mapAsBitString()", "class_method_signature": "LinearCounting.mapAsBitString()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "LinearCounting.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false}, {"identifier": "mergeEstimators", "parameters": "(LinearCounting... estimators)", "modifiers": "public static", "return": "LinearCounting", "signature": "LinearCounting mergeEstimators(LinearCounting... estimators)", "full_signature": "public static LinearCounting mergeEstimators(LinearCounting... estimators)", "class_method_signature": "LinearCounting.mergeEstimators(LinearCounting... estimators)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/LinearCounting.java"}, "focal_method": {"identifier": "sizeof", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int sizeof()\n    {\n        return map.length;\n    }", "signature": "int sizeof()", "full_signature": "@Override public int sizeof()", "class_method_signature": "LinearCounting.sizeof()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}