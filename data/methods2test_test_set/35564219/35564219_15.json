{"test_class": {"identifier": "SavingStreamProviderTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/load/SavingStreamProviderTest.java"}, "test_case": {"identifier": "testUsesBitmapOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUsesBitmapOptions() throws IOException {\n        MirageRequest request = mock(MirageRequest.class);\n        UrlFactory factory = mock(UrlFactory.class);\n        InputStream inputStream = mock(InputStream.class);\n        when(factory.getStream(any(Uri.class))).thenReturn(inputStream);\n        when(request.urlFactory()).thenReturn(factory);\n        when(request.uri()).thenReturn(Uri.parse(\"http://www.sample.com/\"));\n        when(request.isRequestShouldSaveSource()).thenReturn(true);\n        when(request.keyMaker()).thenReturn(new SimpleKeyMaker());\n        when(request.isInSampleSizeDynamic()).thenReturn(true);\n        when(request.getResizeTargetDimen()).thenReturn(50);\n        when(request.isResizeSampleUndershoot()).thenReturn(true);\n\n        DiskCache diskCache = mock(DiskCache.class);\n        MemoryCache<String, Bitmap> memCache = mock(MemoryCache.class);\n        when(request.diskCache()).thenReturn(diskCache);\n        when(request.memoryCache()).thenReturn(memCache);\n\n        SavingStreamProvider provider = new SavingStreamProvider(request) {\n            @Override\n            protected InputStream stream() throws IOException {\n                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                Bitmap bitmap = Bitmap.createBitmap(400, 600, Bitmap.Config.ARGB_8888);\n                bitmap.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n                byte[] bitmapdata = bos.toByteArray();\n                ByteArrayInputStream bs = new ByteArrayInputStream(bitmapdata);\n                return bs;\n            }\n        };\n        when(request.provider()).thenReturn(provider);\n        provider.load();\n\n        verify(request, times(1)).inSampleSize(eq(2));\n    }", "signature": "void testUsesBitmapOptions()", "full_signature": "@Test public void testUsesBitmapOptions()", "class_method_signature": "SavingStreamProviderTest.testUsesBitmapOptions()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getStream", "any", "thenReturn", "when", "urlFactory", "thenReturn", "when", "uri", "parse", "thenReturn", "when", "isRequestShouldSaveSource", "thenReturn", "when", "keyMaker", "thenReturn", "when", "isInSampleSizeDynamic", "thenReturn", "when", "getResizeTargetDimen", "thenReturn", "when", "isResizeSampleUndershoot", "mock", "mock", "thenReturn", "when", "diskCache", "thenReturn", "when", "memoryCache", "createBitmap", "compress", "toByteArray", "thenReturn", "when", "provider", "load", "inSampleSize", "verify", "times", "eq"]}, "focal_class": {"identifier": "SavingStreamProvider", "superclass": "", "interfaces": "implements BitmapProvider", "fields": [{"original_string": "private final MirageRequest request;", "modifier": "private final", "type": "MirageRequest", "declarator": "request", "var_name": "request"}], "methods": [{"identifier": "SavingStreamProvider", "parameters": "(MirageRequest request)", "modifiers": "public", "return": "", "signature": " SavingStreamProvider(MirageRequest request)", "full_signature": "public  SavingStreamProvider(MirageRequest request)", "class_method_signature": "SavingStreamProvider.SavingStreamProvider(MirageRequest request)", "testcase": false, "constructor": true}, {"identifier": "stream", "parameters": "()", "modifiers": "abstract protected", "return": "InputStream", "signature": "InputStream stream()", "full_signature": "abstract protected InputStream stream()", "class_method_signature": "SavingStreamProvider.stream()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "Bitmap", "signature": "Bitmap load()", "full_signature": "@Override public Bitmap load()", "class_method_signature": "SavingStreamProvider.load()", "testcase": false, "constructor": false}, {"identifier": "loadBitmap", "parameters": "()", "modifiers": "private", "return": "Bitmap", "signature": "Bitmap loadBitmap()", "full_signature": "private Bitmap loadBitmap()", "class_method_signature": "SavingStreamProvider.loadBitmap()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String id()", "full_signature": "@Override public String id()", "class_method_signature": "SavingStreamProvider.id()", "testcase": false, "constructor": false}, {"identifier": "determineSampleSize", "parameters": "(BitmapFactory.Options outOpts)", "modifiers": "private", "return": "int", "signature": "int determineSampleSize(BitmapFactory.Options outOpts)", "full_signature": "private int determineSampleSize(BitmapFactory.Options outOpts)", "class_method_signature": "SavingStreamProvider.determineSampleSize(BitmapFactory.Options outOpts)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/load/SavingStreamProvider.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "Bitmap", "body": "@Override\n    public Bitmap load() throws IOException {\n        Bitmap bitmap;\n        try {\n            bitmap = loadBitmap();\n        } catch (OutOfMemoryError e) {\n            if (request.memoryCache() != null) request.memoryCache().clear();\n            System.gc();\n            try {\n                bitmap = loadBitmap();\n            } catch (OutOfMemoryError e2) {\n                throw e2;\n            }\n        }\n        return bitmap;\n    }", "signature": "Bitmap load()", "full_signature": "@Override public Bitmap load()", "class_method_signature": "SavingStreamProvider.load()", "testcase": false, "constructor": false, "invocations": ["loadBitmap", "memoryCache", "clear", "memoryCache", "gc", "loadBitmap"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}