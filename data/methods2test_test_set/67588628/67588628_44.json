{"test_class": {"identifier": "JavaCompilerInstanceSupplierFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JavaCompilerFacade compilerFacade = new JavaCompilerFacade(\n            JavaCompilerBeanPropertyReaderFactory.class.getClassLoader());", "modifier": "private final", "type": "JavaCompilerFacade", "declarator": "compilerFacade = new JavaCompilerFacade(\n            JavaCompilerBeanPropertyReaderFactory.class.getClassLoader())", "var_name": "compilerFacade"}, {"original_string": "private final Reflections reflections = new DefaultReflections();", "modifier": "private final", "type": "Reflections", "declarator": "reflections = new DefaultReflections()", "var_name": "reflections"}, {"original_string": "private InstanceSupplierFactory fallback = new ReflectionInstanceSupplierFactory(reflections);", "modifier": "private", "type": "InstanceSupplierFactory", "declarator": "fallback = new ReflectionInstanceSupplierFactory(reflections)", "var_name": "fallback"}], "file": "artemis-core/src/test/java/org/jnosql/artemis/reflection/JavaCompilerInstanceSupplierFactoryTest.java"}, "test_case": {"identifier": "shouldCreateInstanceSupplier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateInstanceSupplier() {\n        JavaCompilerInstanceSupplierFactory factory = new JavaCompilerInstanceSupplierFactory(compilerFacade, reflections, fallback);\n        InstanceSupplier instanceSupplier = factory.apply(Foo.class.getConstructors()[0]);\n        Assertions.assertNotNull(instanceSupplier);\n        Object value = instanceSupplier.get();\n        Assertions.assertTrue(value instanceof Foo);\n    }", "signature": "void shouldCreateInstanceSupplier()", "full_signature": "@Test public void shouldCreateInstanceSupplier()", "class_method_signature": "JavaCompilerInstanceSupplierFactoryTest.shouldCreateInstanceSupplier()", "testcase": true, "constructor": false, "invocations": ["apply", "getConstructors", "assertNotNull", "get", "assertTrue"]}, "focal_class": {"identifier": "JavaCompilerInstanceSupplierFactory", "superclass": "", "interfaces": "implements InstanceSupplierFactory", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(JavaCompilerInstanceSupplierFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JavaCompilerInstanceSupplierFactory.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String TEMPLATE_FILE = \"InstanceSupplier.template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_FILE = \"InstanceSupplier.template\"", "var_name": "TEMPLATE_FILE"}, {"original_string": "private static final String TEMPLATE = TemplateReader.INSTANCE.apply(TEMPLATE_FILE);", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE = TemplateReader.INSTANCE.apply(TEMPLATE_FILE)", "var_name": "TEMPLATE"}, {"original_string": "private final JavaCompilerFacade compilerFacade;", "modifier": "private final", "type": "JavaCompilerFacade", "declarator": "compilerFacade", "var_name": "compilerFacade"}, {"original_string": "private final Reflections reflections;", "modifier": "private final", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}, {"original_string": "private final InstanceSupplierFactory fallback;", "modifier": "private final", "type": "InstanceSupplierFactory", "declarator": "fallback", "var_name": "fallback"}], "methods": [{"identifier": "JavaCompilerInstanceSupplierFactory", "parameters": "(JavaCompilerFacade compilerFacade, Reflections reflections, InstanceSupplierFactory fallback)", "modifiers": "", "return": "", "signature": " JavaCompilerInstanceSupplierFactory(JavaCompilerFacade compilerFacade, Reflections reflections, InstanceSupplierFactory fallback)", "full_signature": "  JavaCompilerInstanceSupplierFactory(JavaCompilerFacade compilerFacade, Reflections reflections, InstanceSupplierFactory fallback)", "class_method_signature": "JavaCompilerInstanceSupplierFactory.JavaCompilerInstanceSupplierFactory(JavaCompilerFacade compilerFacade, Reflections reflections, InstanceSupplierFactory fallback)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Constructor<?> constructor)", "modifiers": "@Override public", "return": "InstanceSupplier", "signature": "InstanceSupplier apply(Constructor<?> constructor)", "full_signature": "@Override public InstanceSupplier apply(Constructor<?> constructor)", "class_method_signature": "JavaCompilerInstanceSupplierFactory.apply(Constructor<?> constructor)", "testcase": false, "constructor": false}], "file": "artemis-core/src/main/java/org/jnosql/artemis/reflection/JavaCompilerInstanceSupplierFactory.java"}, "focal_method": {"identifier": "apply", "parameters": "(Constructor<?> constructor)", "modifiers": "@Override public", "return": "InstanceSupplier", "body": "@Override\n    public InstanceSupplier apply(Constructor<?> constructor) {\n        Class<?> declaringClass = constructor.getDeclaringClass();\n        if (Modifier.isPublic(constructor.getModifiers())) {\n            String packageName = declaringClass.getPackage().getName();\n            String simpleName = declaringClass.getSimpleName() + \"$InstanceSupplier\";\n            String newInstance = declaringClass.getName();\n            String name = declaringClass.getName() + \"$InstanceSupplier\";\n            String javaSource = StringFormatter.INSTANCE.format(TEMPLATE, packageName, simpleName, newInstance);\n            InstanceJavaSource source = new InstanceJavaSource(name, simpleName, javaSource);\n            Class<? extends InstanceSupplier> supplier = compilerFacade.apply(source);\n            return reflections.newInstance(supplier);\n        }\n\n        LOGGER.fine(String.format(\"The constructor to the class %s is not public, using fallback with Reflectioin\",\n                declaringClass.getName()));\n        return fallback.apply(constructor);\n    }", "signature": "InstanceSupplier apply(Constructor<?> constructor)", "full_signature": "@Override public InstanceSupplier apply(Constructor<?> constructor)", "class_method_signature": "JavaCompilerInstanceSupplierFactory.apply(Constructor<?> constructor)", "testcase": false, "constructor": false, "invocations": ["getDeclaringClass", "isPublic", "getModifiers", "getName", "getPackage", "getSimpleName", "getName", "getName", "format", "apply", "newInstance", "fine", "format", "getName", "apply"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}