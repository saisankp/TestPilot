{"test_class": {"identifier": "AccountTest", "superclass": "", "interfaces": "", "fields": [], "file": "hexagonal/prepaid/src/test/java/com/hibicode/prepaid/domain/AccountTest.java"}, "test_case": {"identifier": "should_return_zero_no_recharge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_return_zero_no_recharge() {\n        Account account = new Account(\"1\", BigDecimal.ZERO);\n        assertEquals(BigDecimal.ZERO, account.balance());\n    }", "signature": "void should_return_zero_no_recharge()", "full_signature": "@Test public void should_return_zero_no_recharge()", "class_method_signature": "AccountTest.should_return_zero_no_recharge()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "balance"]}, "focal_class": {"identifier": "Account", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String number;", "modifier": "private", "type": "String", "declarator": "number", "var_name": "number"}, {"original_string": "private BigDecimal initialBalance;", "modifier": "private", "type": "BigDecimal", "declarator": "initialBalance", "var_name": "initialBalance"}, {"original_string": "private List<AccountActivity> activities = new ArrayList<>();", "modifier": "private", "type": "List<AccountActivity>", "declarator": "activities = new ArrayList<>()", "var_name": "activities"}], "methods": [{"identifier": "Account", "parameters": "(String number, BigDecimal initialBalance)", "modifiers": "public", "return": "", "signature": " Account(String number, BigDecimal initialBalance)", "full_signature": "public  Account(String number, BigDecimal initialBalance)", "class_method_signature": "Account.Account(String number, BigDecimal initialBalance)", "testcase": false, "constructor": true}, {"identifier": "getNumber", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNumber()", "full_signature": "public String getNumber()", "class_method_signature": "Account.getNumber()", "testcase": false, "constructor": false}, {"identifier": "getActivities", "parameters": "()", "modifiers": "public", "return": "List<AccountActivity>", "signature": "List<AccountActivity> getActivities()", "full_signature": "public List<AccountActivity> getActivities()", "class_method_signature": "Account.getActivities()", "testcase": false, "constructor": false}, {"identifier": "balance", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal balance()", "full_signature": "public BigDecimal balance()", "class_method_signature": "Account.balance()", "testcase": false, "constructor": false}, {"identifier": "recharge", "parameters": "(Recharge recharge)", "modifiers": "public", "return": "void", "signature": "void recharge(Recharge recharge)", "full_signature": "public void recharge(Recharge recharge)", "class_method_signature": "Account.recharge(Recharge recharge)", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "boolean", "signature": "boolean consume(BigDecimal value)", "full_signature": "public boolean consume(BigDecimal value)", "class_method_signature": "Account.consume(BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "hasEnoughBalance", "parameters": "(BigDecimal value)", "modifiers": "private", "return": "boolean", "signature": "boolean hasEnoughBalance(BigDecimal value)", "full_signature": "private boolean hasEnoughBalance(BigDecimal value)", "class_method_signature": "Account.hasEnoughBalance(BigDecimal value)", "testcase": false, "constructor": false}], "file": "hexagonal/prepaid/src/main/java/com/hibicode/prepaid/domain/Account.java"}, "focal_method": {"identifier": "balance", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "body": "public BigDecimal balance() {\n        return activities.stream()\n                .map(AccountActivity::getAmount)\n                .reduce(initialBalance, BigDecimal::add);\n    }", "signature": "BigDecimal balance()", "full_signature": "public BigDecimal balance()", "class_method_signature": "Account.balance()", "testcase": false, "constructor": false, "invocations": ["reduce", "map", "stream"]}, "repository": {"repo_id": 255292250, "url": "https://github.com/normandesjr/dev-circles-clean-architecture", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 9, "size": 21, "license": "licensed"}}