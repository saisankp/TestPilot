{"test_class": {"identifier": "DeprecatedFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter deprecatedFilter = new DeprecatedFilter();", "modifier": "", "type": "Filter", "declarator": "deprecatedFilter = new DeprecatedFilter()", "var_name": "deprecatedFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/DeprecatedFilterTest.java"}, "test_case": {"identifier": "testDeprecatedFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeprecatedFilter() {\n        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1&echo.\" + DEPRECATED_KEY + \"=true\");\n        LogUtil.start();\n        deprecatedFilter.invoke(new MyInvoker<DemoService>(url), new MockInvocation());\n        assertEquals(1,\n                LogUtil.findMessage(\"The service method org.apache.dubbo.rpc.support.DemoService.echo(String) is DEPRECATED\"));\n        LogUtil.stop();\n    }", "signature": "void testDeprecatedFilter()", "full_signature": "@Test public void testDeprecatedFilter()", "class_method_signature": "DeprecatedFilterTest.testDeprecatedFilter()", "testcase": true, "constructor": false, "invocations": ["valueOf", "start", "invoke", "assertEquals", "findMessage", "stop"]}, "focal_class": {"identifier": "DeprecatedFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeprecatedFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeprecatedFilter.class)", "var_name": "LOGGER"}, {"original_string": "private static final Set<String> LOGGED = new ConcurrentHashSet<String>();", "modifier": "private static final", "type": "Set<String>", "declarator": "LOGGED = new ConcurrentHashSet<String>()", "var_name": "LOGGED"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "DeprecatedFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getMethodSignature", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "String", "signature": "String getMethodSignature(Invocation invocation)", "full_signature": "private String getMethodSignature(Invocation invocation)", "class_method_signature": "DeprecatedFilter.getMethodSignature(Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/DeprecatedFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        String key = invoker.getInterface().getName() + \".\" + invocation.getMethodName();\n        if (!LOGGED.contains(key)) {\n            LOGGED.add(key);\n            if (invoker.getUrl().getMethodParameter(invocation.getMethodName(), DEPRECATED_KEY, false)) {\n                LOGGER.error(\"The service method \" + invoker.getInterface().getName() + \".\" + getMethodSignature(invocation) + \" is DEPRECATED! Declare from \" + invoker.getUrl());\n            }\n        }\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "DeprecatedFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getName", "getInterface", "getMethodName", "contains", "add", "getMethodParameter", "getUrl", "getMethodName", "error", "getName", "getInterface", "getMethodSignature", "getUrl", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}