{"test_class": {"identifier": "VectorAssemblerMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/dataproc/vector/VectorAssemblerMapperTest.java"}, "test_case": {"identifier": "testToDense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToDense() throws Exception {\n        TableSchema schema = new TableSchema(new String[]{\"c0\", \"c1\", \"c2\"},\n            new TypeInformation<?>[]{Types.STRING, Types.DOUBLE, Types.STRING});\n\n        TableSchema outSchema = new TableSchema(new String[]{\"c0\", \"c1\", \"c2\", \"out\"},\n            new TypeInformation<?>[]{Types.STRING, Types.DOUBLE, Types.STRING, VectorTypes.VECTOR});\n\n        Params params = new Params()\n            .set(VectorAssemblerParams.SELECTED_COLS, new String[]{\"c0\", \"c1\", \"c2\"})\n            .set(VectorAssemblerParams.OUTPUT_COL, \"out\");\n\n        VectorAssemblerMapper mapper = new VectorAssemblerMapper(schema, params);\n        /* join the DenseVector, the number and the SparseVector together. the forth field shows the result */\n        assertEquals(mapper.map(Row.of(new DenseVector(new double[]{3.0, 4.0}), 3.0, new SparseVector(3, new int[]{0, 2}, new double[]{1.0, 4.0}))).getField(3),\n            new DenseVector(new double[]{3.0, 4.0, 3.0, 1.0, 0.0, 4.0}));\n        assertEquals(mapper.getOutputSchema(), outSchema);\n    }", "signature": "void testToDense()", "full_signature": "@Test public void testToDense()", "class_method_signature": "VectorAssemblerMapperTest.testToDense()", "testcase": true, "constructor": false, "invocations": ["set", "set", "assertEquals", "getField", "map", "of", "assertEquals", "getOutputSchema"]}, "focal_class": {"identifier": "VectorAssemblerMapper", "superclass": "extends MISOMapper", "interfaces": "", "fields": [{"original_string": "private static final double RATIO = 1.5;", "modifier": "private static final", "type": "double", "declarator": "RATIO = 1.5", "var_name": "RATIO"}, {"original_string": "private HandleInvalidMethod handleInvalid;", "modifier": "private", "type": "HandleInvalidMethod", "declarator": "handleInvalid", "var_name": "handleInvalid"}], "methods": [{"identifier": "VectorAssemblerMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " VectorAssemblerMapper(TableSchema dataSchema, Params params)", "full_signature": "public  VectorAssemblerMapper(TableSchema dataSchema, Params params)", "class_method_signature": "VectorAssemblerMapper.VectorAssemblerMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "initOutputColType", "parameters": "()", "modifiers": "@Override protected", "return": "TypeInformation", "signature": "TypeInformation initOutputColType()", "full_signature": "@Override protected TypeInformation initOutputColType()", "class_method_signature": "VectorAssemblerMapper.initOutputColType()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Object[] input)", "modifiers": "@Override protected", "return": "Object", "signature": "Object map(Object[] input)", "full_signature": "@Override protected Object map(Object[] input)", "class_method_signature": "VectorAssemblerMapper.map(Object[] input)", "testcase": false, "constructor": false}, {"identifier": "appendVector", "parameters": "(Vector vec, Map<Integer, Double> map, int pos)", "modifiers": "private", "return": "int", "signature": "int appendVector(Vector vec, Map<Integer, Double> map, int pos)", "full_signature": "private int appendVector(Vector vec, Map<Integer, Double> map, int pos)", "class_method_signature": "VectorAssemblerMapper.appendVector(Vector vec, Map<Integer, Double> map, int pos)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/dataproc/vector/VectorAssemblerMapper.java"}, "focal_method": {"identifier": "map", "parameters": "(Object[] input)", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object map(Object[] input) {\n        if (null == input) {\n            return null;\n        }\n        int pos = 0;\n        Map<Integer, Double> map = new HashMap<>();\n        // getVector the data, and write it in List.\n        for (Object col : input) {\n            if (null != col) {\n                if (col instanceof Number) {\n                    map.put(pos++, ((Number)col).doubleValue());\n                } else if (col instanceof String) {\n                    Vector vec = VectorUtil.getVector(col);\n                    pos = appendVector(vec, map, pos);\n                } else if (col instanceof Vector) {\n                    pos = appendVector((Vector) col, map, pos);\n                } else {\n                    throw new UnsupportedOperationException(\"not support type of object.\");\n                }\n            } else {\n                switch (handleInvalid) {\n                    case ERROR:\n                        throw new NullPointerException(\"null value is found in vector assembler inputs.\");\n                    case SKIP:\n                        return null;\n                    default:\n                }\n            }\n        }\n\n\t\t/* form the vector, and finally toString it. */\n        Vector vec = new SparseVector(pos, map);\n\n        if (map.size() * RATIO > pos) {\n            vec = ((SparseVector)vec).toDenseVector();\n        }\n        return vec;\n    }", "signature": "Object map(Object[] input)", "full_signature": "@Override protected Object map(Object[] input)", "class_method_signature": "VectorAssemblerMapper.map(Object[] input)", "testcase": false, "constructor": false, "invocations": ["put", "doubleValue", "getVector", "appendVector", "appendVector", "size", "toDenseVector"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}