{"test_class": {"identifier": "AnnotationsDistillerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PDPage oldPage;", "modifier": "private", "type": "PDPage", "declarator": "oldPage", "var_name": "oldPage"}, {"original_string": "private PDPage newPage;", "modifier": "private", "type": "PDPage", "declarator": "newPage", "var_name": "newPage"}, {"original_string": "private LookupTable<PDPage> lookup;", "modifier": "private", "type": "LookupTable<PDPage>", "declarator": "lookup", "var_name": "lookup"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/AnnotationsDistillerTest.java"}, "test_case": {"identifier": "links_OnePageNotRelevantOneRelevant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void links_OnePageNotRelevantOneRelevant() {\n\n        PDPage destPage = new PDPage();\n        PDAnnotationLink annotation = new PDAnnotationLink();\n        PDPageDestination dest = new PDPageFitDestination();\n        dest.setPage(destPage);\n        annotation.setDestination(dest);\n\n        PDAnnotationLink annotation2 = new PDAnnotationLink();\n        PDPageDestination dest2 = new PDPageFitDestination();\n        dest2.setPage(oldPage);\n        annotation2.setDestination(dest2);\n\n        List<PDAnnotation> annotations = Arrays.asList(annotation, annotation2);\n        oldPage.setAnnotations(annotations);\n        PDDocument doc = new PDDocument();\n        doc.addPage(oldPage);\n        LookupTable<PDAnnotation> annotationsLookup = new AnnotationsDistiller(doc).retainRelevantAnnotations(lookup);\n        assertEquals(annotationsLookup.lookup(annotation2), newPage.getAnnotations().get(0));\n    }", "signature": "void links_OnePageNotRelevantOneRelevant()", "full_signature": "@Test public void links_OnePageNotRelevantOneRelevant()", "class_method_signature": "AnnotationsDistillerTest.links_OnePageNotRelevantOneRelevant()", "testcase": true, "constructor": false, "invocations": ["setPage", "setDestination", "setPage", "setDestination", "asList", "setAnnotations", "addPage", "retainRelevantAnnotations", "assertEquals", "lookup", "get", "getAnnotations"]}, "focal_class": {"identifier": "AnnotationsDistiller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AnnotationsDistiller.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AnnotationsDistiller.class)", "var_name": "LOG"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private LookupTable<PDAnnotation> annotationsLookup = new LookupTable<>();", "modifier": "private", "type": "LookupTable<PDAnnotation>", "declarator": "annotationsLookup = new LookupTable<>()", "var_name": "annotationsLookup"}], "methods": [{"identifier": "AnnotationsDistiller", "parameters": "(PDDocument document)", "modifiers": "public", "return": "", "signature": " AnnotationsDistiller(PDDocument document)", "full_signature": "public  AnnotationsDistiller(PDDocument document)", "class_method_signature": "AnnotationsDistiller.AnnotationsDistiller(PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "retainRelevantAnnotations", "parameters": "(LookupTable<PDPage> relevantPages)", "modifiers": "public", "return": "LookupTable<PDAnnotation>", "signature": "LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "full_signature": "public LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "class_method_signature": "AnnotationsDistiller.retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "testcase": false, "constructor": false}, {"identifier": "processLinkAnnotation", "parameters": "(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotationLink annotation)", "modifiers": "private", "return": "void", "signature": "void processLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotationLink annotation)", "full_signature": "private void processLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotationLink annotation)", "class_method_signature": "AnnotationsDistiller.processLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotationLink annotation)", "testcase": false, "constructor": false}, {"identifier": "processNonLinkAnnotation", "parameters": "(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotation annotation)", "modifiers": "private", "return": "void", "signature": "void processNonLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotation annotation)", "full_signature": "private void processNonLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotation annotation)", "class_method_signature": "AnnotationsDistiller.processNonLinkAnnotation(LookupTable<PDPage> relevantPages, Set<PDAnnotation> keptAnnotations,\n            PDAnnotation annotation)", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "(PDAnnotation annotation, LookupTable<PDPage> relevantPages)", "modifiers": "private", "return": "PDAnnotation", "signature": "PDAnnotation duplicate(PDAnnotation annotation, LookupTable<PDPage> relevantPages)", "full_signature": "private PDAnnotation duplicate(PDAnnotation annotation, LookupTable<PDPage> relevantPages)", "class_method_signature": "AnnotationsDistiller.duplicate(PDAnnotation annotation, LookupTable<PDPage> relevantPages)", "testcase": false, "constructor": false}, {"identifier": "getDestinationFrom", "parameters": "(PDAnnotationLink link)", "modifiers": "private", "return": "PDDestination", "signature": "PDDestination getDestinationFrom(PDAnnotationLink link)", "full_signature": "private PDDestination getDestinationFrom(PDAnnotationLink link)", "class_method_signature": "AnnotationsDistiller.getDestinationFrom(PDAnnotationLink link)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/AnnotationsDistiller.java"}, "focal_method": {"identifier": "retainRelevantAnnotations", "parameters": "(LookupTable<PDPage> relevantPages)", "modifiers": "public", "return": "LookupTable<PDAnnotation>", "body": "public LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages) {\n        LOG.debug(\"Filtering annotations\");\n        for (PDPage page : relevantPages.keys()) {\n            try {\n                Set<PDAnnotation> keptAnnotations = new LinkedHashSet<>();\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    PDAnnotation mapped = annotationsLookup.lookup(annotation);\n                    if (nonNull(mapped)) {\n                        keptAnnotations.add(mapped);\n                    } else {\n                        if (annotation instanceof PDAnnotationLink) {\n                            processLinkAnnotation(relevantPages, keptAnnotations, (PDAnnotationLink) annotation);\n                        } else {\n                            processNonLinkAnnotation(relevantPages, keptAnnotations, annotation);\n                        }\n                    }\n                }\n                relevantPages.lookup(page).setAnnotations(new ArrayList<>(keptAnnotations));\n            } catch (IOException e) {\n                LOG.warn(\"Failed to process annotations for page\", e);\n            }\n        }\n        return annotationsLookup;\n    }", "signature": "LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "full_signature": "public LookupTable<PDAnnotation> retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "class_method_signature": "AnnotationsDistiller.retainRelevantAnnotations(LookupTable<PDPage> relevantPages)", "testcase": false, "constructor": false, "invocations": ["debug", "keys", "getAnnotations", "lookup", "nonNull", "add", "processLinkAnnotation", "processNonLinkAnnotation", "setAnnotations", "lookup", "warn"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}