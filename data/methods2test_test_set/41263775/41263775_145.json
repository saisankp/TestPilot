{"test_class": {"identifier": "CompositePersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/persistence/composite/CompositePersistenceTest.java"}, "test_case": {"identifier": "testGetPrimaryKeyAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPrimaryKeyAttribute() throws Exception {\n        Persistence<Car, Integer> persistence1 = mockPersistence(\"persistence1\");\n        Persistence<Car, Integer> persistence2 = mockPersistence(\"persistence2\");\n        when(persistence1.getPrimaryKeyAttribute()).thenReturn(Car.CAR_ID);\n        when(persistence2.getPrimaryKeyAttribute()).thenReturn(Car.CAR_ID);\n\n        CompositePersistence<Car, Integer> compositePersistence = new CompositePersistence<Car, Integer>(persistence1, persistence2, noAdditionalPersistences());\n        assertEquals(Car.CAR_ID, compositePersistence.getPrimaryKeyAttribute());\n    }", "signature": "void testGetPrimaryKeyAttribute()", "full_signature": "@Test public void testGetPrimaryKeyAttribute()", "class_method_signature": "CompositePersistenceTest.testGetPrimaryKeyAttribute()", "testcase": true, "constructor": false, "invocations": ["mockPersistence", "mockPersistence", "thenReturn", "when", "getPrimaryKeyAttribute", "thenReturn", "when", "getPrimaryKeyAttribute", "noAdditionalPersistences", "assertEquals", "getPrimaryKeyAttribute"]}, "focal_class": {"identifier": "CompositePersistence", "superclass": "", "interfaces": "implements Persistence<O, A>", "fields": [{"original_string": "final Persistence<O, A> primaryPersistence;", "modifier": "final", "type": "Persistence<O, A>", "declarator": "primaryPersistence", "var_name": "primaryPersistence"}, {"original_string": "final Persistence<O, A> secondaryPersistence;", "modifier": "final", "type": "Persistence<O, A>", "declarator": "secondaryPersistence", "var_name": "secondaryPersistence"}, {"original_string": "final List<? extends Persistence<O, A>> additionalPersistences;", "modifier": "final", "type": "List<? extends Persistence<O, A>>", "declarator": "additionalPersistences", "var_name": "additionalPersistences"}, {"original_string": "final ConcurrentMap<Index<O>, Persistence<O, A>> indexPersistences = new ConcurrentHashMap<Index<O>, Persistence<O, A>>(1, 1.0F, 1);", "modifier": "final", "type": "ConcurrentMap<Index<O>, Persistence<O, A>>", "declarator": "indexPersistences = new ConcurrentHashMap<Index<O>, Persistence<O, A>>(1, 1.0F, 1)", "var_name": "indexPersistences"}], "methods": [{"identifier": "CompositePersistence", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "public", "return": "", "signature": " CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "public  CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.CompositePersistence(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": true}, {"identifier": "getPrimaryKeyAttribute", "parameters": "()", "modifiers": "@Override public", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> getPrimaryKeyAttribute()", "full_signature": "@Override public SimpleAttribute<O, A> getPrimaryKeyAttribute()", "class_method_signature": "CompositePersistence.getPrimaryKeyAttribute()", "testcase": false, "constructor": false}, {"identifier": "supportsIndex", "parameters": "(Index<O> index)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsIndex(Index<O> index)", "full_signature": "@Override public boolean supportsIndex(Index<O> index)", "class_method_signature": "CompositePersistence.supportsIndex(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndex", "parameters": "(Index<O> index)", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndex(Index<O> index)", "full_signature": "public Persistence<O, A> getPersistenceForIndex(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndex(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "createObjectStore", "parameters": "()", "modifiers": "@Override public", "return": "ObjectStore<O>", "signature": "ObjectStore<O> createObjectStore()", "full_signature": "@Override public ObjectStore<O> createObjectStore()", "class_method_signature": "CompositePersistence.createObjectStore()", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndexOrNullWithCaching", "parameters": "(Index<O> index)", "modifiers": "", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndexOrNullWithCaching(Index<O> index)", "full_signature": " Persistence<O, A> getPersistenceForIndexOrNullWithCaching(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndexOrNullWithCaching(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPersistenceForIndexOrNull", "parameters": "(Index<O> index)", "modifiers": "", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPersistenceForIndexOrNull(Index<O> index)", "full_signature": " Persistence<O, A> getPersistenceForIndexOrNull(Index<O> index)", "class_method_signature": "CompositePersistence.getPersistenceForIndexOrNull(Index<O> index)", "testcase": false, "constructor": false}, {"identifier": "getPrimaryPersistence", "parameters": "()", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getPrimaryPersistence()", "full_signature": "public Persistence<O, A> getPrimaryPersistence()", "class_method_signature": "CompositePersistence.getPrimaryPersistence()", "testcase": false, "constructor": false}, {"identifier": "getSecondaryPersistence", "parameters": "()", "modifiers": "public", "return": "Persistence<O, A>", "signature": "Persistence<O, A> getSecondaryPersistence()", "full_signature": "public Persistence<O, A> getSecondaryPersistence()", "class_method_signature": "CompositePersistence.getSecondaryPersistence()", "testcase": false, "constructor": false}, {"identifier": "getAdditionalPersistences", "parameters": "()", "modifiers": "public", "return": "List<? extends Persistence<O, A>>", "signature": "List<? extends Persistence<O, A>> getAdditionalPersistences()", "full_signature": "public List<? extends Persistence<O, A>> getAdditionalPersistences()", "class_method_signature": "CompositePersistence.getAdditionalPersistences()", "testcase": false, "constructor": false}, {"identifier": "validatePersistenceArguments", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "static", "return": "void", "signature": "void validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "static void validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.validatePersistenceArguments(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": false}, {"identifier": "validatePersistenceArgument", "parameters": "(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "modifiers": "static", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "full_signature": "static SimpleAttribute<O, A> validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "class_method_signature": "CompositePersistence.validatePersistenceArgument(Persistence<O, A> persistence, SimpleAttribute<O, A> primaryKeyAttribute)", "testcase": false, "constructor": false}, {"identifier": "openRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void openRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void openRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "CompositePersistence.openRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "closeRequestScopeResources", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "void", "signature": "void closeRequestScopeResources(QueryOptions queryOptions)", "full_signature": "@Override public void closeRequestScopeResources(QueryOptions queryOptions)", "class_method_signature": "CompositePersistence.closeRequestScopeResources(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "modifiers": "public static", "return": "CompositePersistence<O, A>", "signature": "CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "full_signature": "public static CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "class_method_signature": "CompositePersistence.of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence, List<? extends Persistence<O, A>> additionalPersistences)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "modifiers": "public static", "return": "CompositePersistence<O, A>", "signature": "CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "full_signature": "public static CompositePersistence<O, A> of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "class_method_signature": "CompositePersistence.of(Persistence<O, A> primaryPersistence, Persistence<O, A> secondaryPersistence)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/persistence/composite/CompositePersistence.java"}, "focal_method": {"identifier": "getPrimaryKeyAttribute", "parameters": "()", "modifiers": "@Override public", "return": "SimpleAttribute<O, A>", "body": "@Override\n    public SimpleAttribute<O, A> getPrimaryKeyAttribute() {\n        return primaryPersistence.getPrimaryKeyAttribute();\n    }", "signature": "SimpleAttribute<O, A> getPrimaryKeyAttribute()", "full_signature": "@Override public SimpleAttribute<O, A> getPrimaryKeyAttribute()", "class_method_signature": "CompositePersistence.getPrimaryKeyAttribute()", "testcase": false, "constructor": false, "invocations": ["getPrimaryKeyAttribute"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}