{"test_class": {"identifier": "MeanFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MeanFunction meanFunction;", "modifier": "private", "type": "MeanFunction", "declarator": "meanFunction", "var_name": "meanFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/MeanFunctionTest.java"}, "test_case": {"identifier": "invokeArrayWithIntegers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeArrayWithIntegers() {\n        FunctionTestUtil.assertResult(meanFunction.invoke(new Object[]{10, 20, 30}), BigDecimal.valueOf(20));\n        FunctionTestUtil.assertResult(meanFunction.invoke(new Object[]{10, 20, 30, -10, -20, -30}), BigDecimal.ZERO);\n        FunctionTestUtil.assertResult(meanFunction.invoke(new Object[]{0, 0, 1}), new BigDecimal(\"0.3333333333333333333333333333333333\"));\n    }", "signature": "void invokeArrayWithIntegers()", "full_signature": "@Test public void invokeArrayWithIntegers()", "class_method_signature": "MeanFunctionTest.invokeArrayWithIntegers()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "valueOf", "assertResult", "invoke", "assertResult", "invoke"]}, "focal_class": {"identifier": "MeanFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "private SumFunction sum = new SumFunction();", "modifier": "private", "type": "SumFunction", "declarator": "sum = new SumFunction()", "var_name": "sum"}], "methods": [{"identifier": "MeanFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " MeanFunction()", "full_signature": "public  MeanFunction()", "class_method_signature": "MeanFunction.MeanFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) List list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list)", "class_method_signature": "MeanFunction.invoke(@ParameterName( \"list\" ) List list)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) Number single)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) Number single)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) Number single)", "class_method_signature": "MeanFunction.invoke(@ParameterName( \"list\" ) Number single)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"n\" ) Object[] list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) Object[] list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) Object[] list)", "class_method_signature": "MeanFunction.invoke(@ParameterName( \"n\" ) Object[] list)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/MeanFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) List list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "body": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list) {\n        if ( list == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\"));\n        }\n\n        FEELFnResult<BigDecimal> s = sum.invoke( list );\n        \n        Function<FEELEvent, FEELFnResult<BigDecimal>> ifLeft = (event) -> {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"unable to sum the elements which is required to calculate the mean\"));\n        };\n        \n        Function<BigDecimal, FEELFnResult<BigDecimal>> ifRight = (sum) -> {\n            try {\n                return FEELFnResult.ofResult( sum.divide( BigDecimal.valueOf( list.size() ), MathContext.DECIMAL128 ) );\n            } catch (Exception e) {\n                return FEELFnResult.ofError( new InvalidParametersEvent(Severity.ERROR, \"unable to perform division to calculate the mean\", e) );\n            }\n        };\n        \n        return s.cata(ifLeft, ifRight);\n    }", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"list\" ) List list)", "class_method_signature": "MeanFunction.invoke(@ParameterName( \"list\" ) List list)", "testcase": false, "constructor": false, "invocations": ["ofError", "invoke", "ofError", "ofResult", "divide", "valueOf", "size", "ofError", "cata"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}