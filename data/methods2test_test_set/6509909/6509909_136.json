{"test_class": {"identifier": "HaikuReviewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HaikuReview haikuReview;", "modifier": "private", "type": "HaikuReview", "declarator": "haikuReview", "var_name": "haikuReview"}], "file": "haikuReview/20160222-paul-ian/src/test/java/HaikuReviewTest.java"}, "test_case": {"identifier": "givenACorrectHaiku_ReturnASplitHaiku", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void givenACorrectHaiku_ReturnASplitHaiku() {\n        String input = HaikuReview.INPUT_TWO;\n\n        String[] s = haikuReview.splitHaiku(input);\n\n        assertThat(s).hasSize(3);\n\n    }", "signature": "void givenACorrectHaiku_ReturnASplitHaiku()", "full_signature": "@Test public void givenACorrectHaiku_ReturnASplitHaiku()", "class_method_signature": "HaikuReviewTest.givenACorrectHaiku_ReturnASplitHaiku()", "testcase": true, "constructor": false, "invocations": ["splitHaiku", "hasSize", "assertThat"]}, "focal_class": {"identifier": "HaikuReview", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String INPUT_ONE = \"happy purple frog/eating bugs in the marshes/get indigestion\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_ONE = \"happy purple frog/eating bugs in the marshes/get indigestion\"", "var_name": "INPUT_ONE"}, {"original_string": "public static final String INPUT_TWO = \"computer programs/the bugs try to eat my code/i will not let them\";", "modifier": "public static final", "type": "String", "declarator": "INPUT_TWO = \"computer programs/the bugs try to eat my code/i will not let them\"", "var_name": "INPUT_TWO"}], "methods": [{"identifier": "isHaiku", "parameters": "(String input)", "modifiers": "public", "return": "boolean", "signature": "boolean isHaiku(String input)", "full_signature": "public boolean isHaiku(String input)", "class_method_signature": "HaikuReview.isHaiku(String input)", "testcase": false, "constructor": false}, {"identifier": "splitHaiku", "parameters": "(String input)", "modifiers": "", "return": "String[]", "signature": "String[] splitHaiku(String input)", "full_signature": " String[] splitHaiku(String input)", "class_method_signature": "HaikuReview.splitHaiku(String input)", "testcase": false, "constructor": false}, {"identifier": "numberOfSyllables", "parameters": "(String input)", "modifiers": "", "return": "int", "signature": "int numberOfSyllables(String input)", "full_signature": " int numberOfSyllables(String input)", "class_method_signature": "HaikuReview.numberOfSyllables(String input)", "testcase": false, "constructor": false}, {"identifier": "isVowel", "parameters": "(char letter)", "modifiers": "", "return": "boolean", "signature": "boolean isVowel(char letter)", "full_signature": " boolean isVowel(char letter)", "class_method_signature": "HaikuReview.isVowel(char letter)", "testcase": false, "constructor": false}, {"identifier": "hasThreeLines", "parameters": "(String haiku)", "modifiers": "", "return": "boolean", "signature": "boolean hasThreeLines(String haiku)", "full_signature": " boolean hasThreeLines(String haiku)", "class_method_signature": "HaikuReview.hasThreeLines(String haiku)", "testcase": false, "constructor": false}], "file": "haikuReview/20160222-paul-ian/src/main/java/HaikuReview.java"}, "focal_method": {"identifier": "splitHaiku", "parameters": "(String input)", "modifiers": "", "return": "String[]", "body": "String[] splitHaiku(String input) {\n        return input.split(\"/\");\n    }", "signature": "String[] splitHaiku(String input)", "full_signature": " String[] splitHaiku(String input)", "class_method_signature": "HaikuReview.splitHaiku(String input)", "testcase": false, "constructor": false, "invocations": ["split"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}