{"test_class": {"identifier": "PartialTChargePEOEDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "LonePairElectronChecker                 lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/PartialTChargePEOEDescriptorTest.java"}, "test_case": {"identifier": "testPartialTChargeDescriptor_Methoxyethylene", "parameters": "()", "modifiers": "@Test @Category(SlowTest.class) public", "return": "void", "body": "@Test\n    @Category(SlowTest.class)\n    public void testPartialTChargeDescriptor_Methoxyethylene() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        double[] testResult = {-0.1211, 0.0314, -0.3121, 0.0429, 0.056, 0.056, 0.0885, 0.056, 0.056, 0.056};/*\n                                                                                                             * from\n                                                                                                             * Petra\n                                                                                                             * online\n                                                                                                             * :\n                                                                                                             * http\n                                                                                                             * :\n                                                                                                             * /\n                                                                                                             * /\n                                                                                                             * www2\n                                                                                                             * .\n                                                                                                             * chemie\n                                                                                                             * .\n                                                                                                             * uni\n                                                                                                             * -\n                                                                                                             * erlangen\n                                                                                                             * .\n                                                                                                             * de\n                                                                                                             * /\n                                                                                                             * services\n                                                                                                             * /\n                                                                                                             * petra\n                                                                                                             * /\n                                                                                                             * smiles\n                                                                                                             * .\n                                                                                                             * phtml\n                                                                                                             */\n        IAtomicDescriptor descriptor = new PartialTChargePEOEDescriptor();\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(0, 1, IBond.Order.DOUBLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"O\"));\n        molecule.addBond(1, 2, IBond.Order.SINGLE);\n        molecule.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        molecule.addBond(2, 3, IBond.Order.SINGLE);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        addExplicitHydrogens(molecule);\n        lpcheck.saturate(molecule);\n\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            double result = ((DoubleResult) descriptor.calculate(molecule.getAtom(i), molecule).getValue())\n                    .doubleValue();\n\n            Assert.assertEquals(testResult[i], result, 0.05);\n        }\n    }", "signature": "void testPartialTChargeDescriptor_Methoxyethylene()", "full_signature": "@Test @Category(SlowTest.class) public void testPartialTChargeDescriptor_Methoxyethylene()", "class_method_signature": "PartialTChargePEOEDescriptorTest.testPartialTChargeDescriptor_Methoxyethylene()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "addAtom", "newInstance", "addBond", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "getAtomCount", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "PartialTChargePEOEDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[]          NAMES         = {\"pepeT\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES         = {\"pepeT\"}", "var_name": "NAMES"}, {"original_string": "private GasteigerMarsiliPartialCharges peoe          = null;", "modifier": "private", "type": "GasteigerMarsiliPartialCharges", "declarator": "peoe          = null", "var_name": "peoe"}, {"original_string": "private GasteigerPEPEPartialCharges    pepe          = null;", "modifier": "private", "type": "GasteigerPEPEPartialCharges", "declarator": "pepe          = null", "var_name": "pepe"}, {"original_string": "private int                            maxIterations = -1;", "modifier": "private", "type": "int", "declarator": "maxIterations = -1", "var_name": "maxIterations"}, {"original_string": "private int                            maxResonStruc = -1;", "modifier": "private", "type": "int", "declarator": "maxResonStruc = -1", "var_name": "maxResonStruc"}, {"original_string": "private boolean                        lpeChecker    = true;", "modifier": "private", "type": "boolean", "declarator": "lpeChecker    = true", "var_name": "lpeChecker"}], "methods": [{"identifier": "PartialTChargePEOEDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " PartialTChargePEOEDescriptor()", "full_signature": "public  PartialTChargePEOEDescriptor()", "class_method_signature": "PartialTChargePEOEDescriptor.PartialTChargePEOEDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "PartialTChargePEOEDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "PartialTChargePEOEDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "PartialTChargePEOEDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "PartialTChargePEOEDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "PartialTChargePEOEDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "PartialTChargePEOEDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "PartialTChargePEOEDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/PartialTChargePEOEDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer ac) {\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        Double originalCharge = atom.getCharge();\n        String originalAtomtypeName = atom.getAtomTypeName();\n        Integer originalNeighborCount = atom.getFormalNeighbourCount();\n        Integer originalValency = atom.getValency();\n        IAtomType.Hybridization originalHybridization = atom.getHybridization();\n        Double originalBondOrderSum = atom.getBondOrderSum();\n        Order originalMaxBondOrder = atom.getMaxBondOrder();\n        if (!isCachedAtomContainer(ac)) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n            } catch (CDKException e) {\n                new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), NAMES, e);\n            }\n\n            if (lpeChecker) {\n                LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                try {\n                    lpcheck.saturate(ac);\n                } catch (CDKException e) {\n                    new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                            Double.NaN), NAMES, e);\n                }\n            }\n\n            if (maxIterations != -1) pepe.setMaxGasteigerIters(maxIterations);\n            if (maxResonStruc != -1) pepe.setMaxResoStruc(maxResonStruc);\n\n            try {\n                peoe.assignGasteigerMarsiliSigmaPartialCharges(ac, true);\n                List<Double> peoeAtom = new ArrayList<Double>();\n                for (Iterator<IAtom> it = ac.atoms().iterator(); it.hasNext();)\n                    peoeAtom.add(it.next().getCharge());\n\n                for (Iterator<IAtom> it = ac.atoms().iterator(); it.hasNext();)\n                    it.next().setCharge(0.0);\n\n                pepe.assignGasteigerPiPartialCharges(ac, true);\n                for (int i = 0; i < ac.getAtomCount(); i++)\n                    cacheDescriptorValue(ac.getAtom(i), ac, new DoubleResult(peoeAtom.get(i)\n                            + ac.getAtom(i).getCharge()));\n\n            } catch (Exception e) {\n                new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), NAMES, e);\n            }\n        }\n        // restore original props\n        atom.setCharge(originalCharge);\n        atom.setAtomTypeName(originalAtomtypeName);\n        atom.setFormalNeighbourCount(originalNeighborCount);\n        atom.setValency(originalValency);\n        atom.setHybridization(originalHybridization);\n        atom.setMaxBondOrder(originalMaxBondOrder);\n        atom.setBondOrderSum(originalBondOrderSum);\n\n        return getCachedDescriptorValue(atom) != null ? new DescriptorValue(getSpecification(), getParameterNames(),\n                getParameters(), getCachedDescriptorValue(atom), NAMES) : null;\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "PartialTChargePEOEDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getCharge", "getAtomTypeName", "getFormalNeighbourCount", "getValency", "getHybridization", "getBondOrderSum", "getMaxBondOrder", "isCachedAtomContainer", "percieveAtomTypesAndConfigureAtoms", "getSpecification", "getParameterNames", "getParameters", "saturate", "getSpecification", "getParameterNames", "getParameters", "setMaxGasteigerIters", "setMaxResoStruc", "assignGasteigerMarsiliSigmaPartialCharges", "iterator", "atoms", "hasNext", "add", "getCharge", "next", "iterator", "atoms", "hasNext", "setCharge", "next", "assignGasteigerPiPartialCharges", "getAtomCount", "cacheDescriptorValue", "getAtom", "get", "getCharge", "getAtom", "getSpecification", "getParameterNames", "getParameters", "setCharge", "setAtomTypeName", "setFormalNeighbourCount", "setValency", "setHybridization", "setMaxBondOrder", "setBondOrderSum", "getCachedDescriptorValue", "getSpecification", "getParameterNames", "getParameters", "getCachedDescriptorValue"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}