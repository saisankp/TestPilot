{"test_class": {"identifier": "EurekaAgentStatusMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EurekaClient eurekaClient = mock(EurekaClient.class);", "modifier": "private final", "type": "EurekaClient", "declarator": "eurekaClient = mock(EurekaClient.class)", "var_name": "eurekaClient"}, {"original_string": "private final AgentComponentStub agentComponentStub = newAgentComponent()\n            .addInstanceGroup(agentServerGroup(\"f1\", Tier.Flex, 1, AwsInstanceType.M4_4XLarge));", "modifier": "private final", "type": "AgentComponentStub", "declarator": "agentComponentStub = newAgentComponent()\n            .addInstanceGroup(agentServerGroup(\"f1\", Tier.Flex, 1, AwsInstanceType.M4_4XLarge))", "var_name": "agentComponentStub"}, {"original_string": "private final AgentInstance instance = agentComponentStub.getFirstInstance();", "modifier": "private final", "type": "AgentInstance", "declarator": "instance = agentComponentStub.getFirstInstance()", "var_name": "instance"}, {"original_string": "private final AgentManagementService agentManagementService = agentComponentStub.getAgentManagementService();", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = agentComponentStub.getAgentManagementService()", "var_name": "agentManagementService"}, {"original_string": "private final EurekaAgentStatusMonitor monitor = new EurekaAgentStatusMonitor(eurekaClient, agentManagementService, new DefaultRegistry());", "modifier": "private final", "type": "EurekaAgentStatusMonitor", "declarator": "monitor = new EurekaAgentStatusMonitor(eurekaClient, agentManagementService, new DefaultRegistry())", "var_name": "monitor"}], "file": "titus-ext/eureka/src/test/java/com/netflix/titus/ext/eureka/agent/EurekaAgentStatusMonitorTest.java"}, "test_case": {"identifier": "testEurekaRegistrationChangesTriggerStatusUpdateInEventStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEurekaRegistrationChangesTriggerStatusUpdateInEventStream() {\n        ExtTestSubscriber<AgentStatus> testSubscriber = new ExtTestSubscriber<>();\n        monitor.monitor().subscribe(testSubscriber);\n\n        // UP\n        mockStatusInEureka(instance, InstanceStatus.UP);\n        assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy);\n\n        // DOWN\n        mockStatusInEureka(instance, InstanceStatus.DOWN);\n        assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Unhealthy);\n\n        // Back to UP\n        mockStatusInEureka(instance, InstanceStatus.UP);\n        assertThat(testSubscriber.takeNext().getStatusCode()).isEqualTo(AgentStatusCode.Healthy);\n    }", "signature": "void testEurekaRegistrationChangesTriggerStatusUpdateInEventStream()", "full_signature": "@Test public void testEurekaRegistrationChangesTriggerStatusUpdateInEventStream()", "class_method_signature": "EurekaAgentStatusMonitorTest.testEurekaRegistrationChangesTriggerStatusUpdateInEventStream()", "testcase": true, "constructor": false, "invocations": ["subscribe", "monitor", "mockStatusInEureka", "isEqualTo", "assertThat", "getStatusCode", "takeNext", "mockStatusInEureka", "isEqualTo", "assertThat", "getStatusCode", "takeNext", "mockStatusInEureka", "isEqualTo", "assertThat", "getStatusCode", "takeNext"]}, "focal_class": {"identifier": "EurekaAgentStatusMonitor", "superclass": "", "interfaces": "implements AgentStatusMonitor, EurekaEventListener", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(EurekaAgentStatusMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EurekaAgentStatusMonitor.class)", "var_name": "logger"}, {"original_string": "static final String SOURCE_ID = \"eureka\";", "modifier": "static final", "type": "String", "declarator": "SOURCE_ID = \"eureka\"", "var_name": "SOURCE_ID"}, {"original_string": "private final EurekaClient eurekaClient;", "modifier": "private final", "type": "EurekaClient", "declarator": "eurekaClient", "var_name": "eurekaClient"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final AgentStatusMonitorMetrics metrics;", "modifier": "private final", "type": "AgentStatusMonitorMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final ConcurrentMap<String, Pair<InstanceStatus, AgentStatus>> statusByInstanceId = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, Pair<InstanceStatus, AgentStatus>>", "declarator": "statusByInstanceId = new ConcurrentHashMap<>()", "var_name": "statusByInstanceId"}, {"original_string": "private final PublishSubject<AgentStatus> statusUpdateSubject = PublishSubject.create();", "modifier": "private final", "type": "PublishSubject<AgentStatus>", "declarator": "statusUpdateSubject = PublishSubject.create()", "var_name": "statusUpdateSubject"}], "methods": [{"identifier": "EurekaAgentStatusMonitor", "parameters": "(EurekaClient eurekaClient, AgentManagementService agentManagementService, Registry registry)", "modifiers": "@Inject public", "return": "", "signature": " EurekaAgentStatusMonitor(EurekaClient eurekaClient, AgentManagementService agentManagementService, Registry registry)", "full_signature": "@Inject public  EurekaAgentStatusMonitor(EurekaClient eurekaClient, AgentManagementService agentManagementService, Registry registry)", "class_method_signature": "EurekaAgentStatusMonitor.EurekaAgentStatusMonitor(EurekaClient eurekaClient, AgentManagementService agentManagementService, Registry registry)", "testcase": false, "constructor": true}, {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void enterActiveMode()", "full_signature": "@Activator public void enterActiveMode()", "class_method_signature": "EurekaAgentStatusMonitor.enterActiveMode()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "AgentStatus", "signature": "AgentStatus getStatus(String agentInstanceId)", "full_signature": "@Override public AgentStatus getStatus(String agentInstanceId)", "class_method_signature": "EurekaAgentStatusMonitor.getStatus(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "isHealthy", "parameters": "(String agentInstanceId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHealthy(String agentInstanceId)", "full_signature": "@Override public boolean isHealthy(String agentInstanceId)", "class_method_signature": "EurekaAgentStatusMonitor.isHealthy(String agentInstanceId)", "testcase": false, "constructor": false}, {"identifier": "monitor", "parameters": "()", "modifiers": "@Override public", "return": "Observable<AgentStatus>", "signature": "Observable<AgentStatus> monitor()", "full_signature": "@Override public Observable<AgentStatus> monitor()", "class_method_signature": "EurekaAgentStatusMonitor.monitor()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(EurekaEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(EurekaEvent event)", "full_signature": "@Override public void onEvent(EurekaEvent event)", "class_method_signature": "EurekaAgentStatusMonitor.onEvent(EurekaEvent event)", "testcase": false, "constructor": false}, {"identifier": "refreshAgentDiscoveryStatus", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshAgentDiscoveryStatus()", "full_signature": "private void refreshAgentDiscoveryStatus()", "class_method_signature": "EurekaAgentStatusMonitor.refreshAgentDiscoveryStatus()", "testcase": false, "constructor": false}, {"identifier": "updateInstanceStatus", "parameters": "(AgentInstance instance)", "modifiers": "private", "return": "void", "signature": "void updateInstanceStatus(AgentInstance instance)", "full_signature": "private void updateInstanceStatus(AgentInstance instance)", "class_method_signature": "EurekaAgentStatusMonitor.updateInstanceStatus(AgentInstance instance)", "testcase": false, "constructor": false}, {"identifier": "updateAndEmit", "parameters": "(AgentInstance instance, Optional<InstanceInfo> instanceInfo, InstanceStatus instanceStatus)", "modifiers": "private", "return": "void", "signature": "void updateAndEmit(AgentInstance instance, Optional<InstanceInfo> instanceInfo, InstanceStatus instanceStatus)", "full_signature": "private void updateAndEmit(AgentInstance instance, Optional<InstanceInfo> instanceInfo, InstanceStatus instanceStatus)", "class_method_signature": "EurekaAgentStatusMonitor.updateAndEmit(AgentInstance instance, Optional<InstanceInfo> instanceInfo, InstanceStatus instanceStatus)", "testcase": false, "constructor": false}], "file": "titus-ext/eureka/src/main/java/com/netflix/titus/ext/eureka/agent/EurekaAgentStatusMonitor.java"}, "focal_method": {"identifier": "monitor", "parameters": "()", "modifiers": "@Override public", "return": "Observable<AgentStatus>", "body": "@Override\n    public Observable<AgentStatus> monitor() {\n        return statusUpdateSubject.asObservable();\n    }", "signature": "Observable<AgentStatus> monitor()", "full_signature": "@Override public Observable<AgentStatus> monitor()", "class_method_signature": "EurekaAgentStatusMonitor.monitor()", "testcase": false, "constructor": false, "invocations": ["asObservable"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}