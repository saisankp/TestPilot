{"test_class": {"identifier": "FontUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static PDFont HELVETICA = FontUtils.HELVETICA;", "modifier": "private static", "type": "PDFont", "declarator": "HELVETICA = FontUtils.HELVETICA", "var_name": "HELVETICA"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/util/FontUtilsTest.java"}, "test_case": {"identifier": "testFindFontFor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindFontFor() {\n        assertNotNull(findFontFor(\"\u0e17\u0e14\u0e2a\u0e2d\u0e1a\")); // thai\n        assertNotNull(findFontFor(\"\u03b1\u03c5\u03c4\u03cc \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c4\u03b5\u03c3\u03c4\")); // greek\n        assertNotNull(findFontFor(\"\u0d35\u0d40\u0d1f\u0d4d\")); // malayalam\n        assertNotNull(findFontFor(\"\u092e\u093e\u0928\u0915\")); // hindi\n        assertNotNull(findFontFor(\"\u0c1c\")); // telugu\n        assertNotNull(findFontFor(\"\u0989\")); // bengali\n        assertNotNull(findFontFor(\"\u05e2\u05d1\u05e8\u05d9\u05ea\")); // hebrew\n        assertNotNull(findFontFor(\"latin \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\")); // latin\n        assertNotNull(findFontFor(\"\\uFFFD \\u2997\")); // symbols\n        assertNotNull(findFontFor(\"Newlines\\nare\\r\\nignored\")); // newlines\n        assertNotNull(findFontFor(\"\\u2984 \\u2583 \\u2738 \u2617\u2984\u2738\u2583 \")); // symbols\n        assertNotNull(findFontFor(\"\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a\")); // khmer\n        assertNotNull(findFontFor(\"\u1329\")); // ethiopic\n        assertNotNull(findFontFor(\"\u067e\u0646\u062c\u0627\u0628\u06cc, \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\")); // punjabi\n        assertNotNull(findFontFor(\"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\")); // tamil\n        assertNotNull(findFontFor(\"\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\")); // gujarati\n        assertNotNull(findFontFor(\"\u1014\\u103A\u1019\u102c\u1018\u102c\u101e\u102c\")); // myanmar\n        assertNotNull(findFontFor(\"\u0dc3\u0dd2\u0d82\u0dc4\u0dbd\")); // sinhalese\n        assertNotNull(findFontFor(\"\u182e\u1823\u1829\u182d\u1823\u182f\")); // mongolian\n        assertNotNull(findFontFor(\"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\")); // kannada\n        assertNotNull(findFontFor(\"\u0b13\u0b21\u0b3c\u0b3f\u0b06 \u0b2d\u0b3e\u0b37\u0b3e\")); // oryia\n        assertNotNull(findFontFor(\"\u0786\u07aa\u0782\u07b0\u078a\u07aa\u0782\u07a8\")); // thaana\n\n        // TODO: find a way to merge the armenian font into the big merged font with all others\n        // so forms can be filled with latin/armenian mixed values\n        // assertNotNull(findFontFor(\"Latin mixed with \u0570\u0561\u0575\u0565\u0580\u0567\u0576\"));\n    }", "signature": "void testFindFontFor()", "full_signature": "@Test public void testFindFontFor()", "class_method_signature": "FontUtilsTest.testFindFontFor()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor", "assertNotNull", "findFontFor"]}, "focal_class": {"identifier": "FontUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FontUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FontUtils.class)", "var_name": "LOG"}, {"original_string": "private static final Map<StandardType1Font, PDType1Font> STANDARD_TYPE1_FONTS;", "modifier": "private static final", "type": "Map<StandardType1Font, PDType1Font>", "declarator": "STANDARD_TYPE1_FONTS", "var_name": "STANDARD_TYPE1_FONTS"}, {"original_string": "public static PDFont HELVETICA = PDType1Font.HELVETICA;", "modifier": "public static", "type": "PDFont", "declarator": "HELVETICA = PDType1Font.HELVETICA", "var_name": "HELVETICA"}, {"original_string": "public static final FontResource[] TYPE0FONTS;", "modifier": "public static final", "type": "FontResource[]", "declarator": "TYPE0FONTS", "var_name": "TYPE0FONTS"}, {"original_string": "private static Map<PDDocument, Map<String, PDFont>> loadedFontCache = new HashMap<>();", "modifier": "private static", "type": "Map<PDDocument, Map<String, PDFont>>", "declarator": "loadedFontCache = new HashMap<>()", "var_name": "loadedFontCache"}], "methods": [{"identifier": "FontUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FontUtils()", "full_signature": "private  FontUtils()", "class_method_signature": "FontUtils.FontUtils()", "testcase": false, "constructor": true}, {"identifier": "getStandardType1Font", "parameters": "(StandardType1Font st1Font)", "modifiers": "public static", "return": "PDType1Font", "signature": "PDType1Font getStandardType1Font(StandardType1Font st1Font)", "full_signature": "public static PDType1Font getStandardType1Font(StandardType1Font st1Font)", "class_method_signature": "FontUtils.getStandardType1Font(StandardType1Font st1Font)", "testcase": false, "constructor": false}, {"identifier": "fontOrFallback", "parameters": "(String text, PDFont font, PDDocument document)", "modifiers": "public static", "return": "PDFont", "signature": "PDFont fontOrFallback(String text, PDFont font, PDDocument document)", "full_signature": "public static PDFont fontOrFallback(String text, PDFont font, PDDocument document)", "class_method_signature": "FontUtils.fontOrFallback(String text, PDFont font, PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "clearLoadedFontCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearLoadedFontCache()", "full_signature": "public static void clearLoadedFontCache()", "class_method_signature": "FontUtils.clearLoadedFontCache()", "testcase": false, "constructor": false}, {"identifier": "clearLoadedFontCache", "parameters": "(PDDocument document)", "modifiers": "public static", "return": "void", "signature": "void clearLoadedFontCache(PDDocument document)", "full_signature": "public static void clearLoadedFontCache(PDDocument document)", "class_method_signature": "FontUtils.clearLoadedFontCache(PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "loadFont", "parameters": "(PDDocument document, FontResource font)", "modifiers": "public static", "return": "PDFont", "signature": "PDFont loadFont(PDDocument document, FontResource font)", "full_signature": "public static PDFont loadFont(PDDocument document, FontResource font)", "class_method_signature": "FontUtils.loadFont(PDDocument document, FontResource font)", "testcase": false, "constructor": false}, {"identifier": "findFontFor", "parameters": "(PDDocument document, String text)", "modifiers": "public static final", "return": "PDFont", "signature": "PDFont findFontFor(PDDocument document, String text)", "full_signature": "public static final PDFont findFontFor(PDDocument document, String text)", "class_method_signature": "FontUtils.findFontFor(PDDocument document, String text)", "testcase": false, "constructor": false}, {"identifier": "isOnlyWhitespace", "parameters": "(String text)", "modifiers": "public static", "return": "boolean", "signature": "boolean isOnlyWhitespace(String text)", "full_signature": "public static boolean isOnlyWhitespace(String text)", "class_method_signature": "FontUtils.isOnlyWhitespace(String text)", "testcase": false, "constructor": false}, {"identifier": "removeWhitespace", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String removeWhitespace(String text)", "full_signature": "public static String removeWhitespace(String text)", "class_method_signature": "FontUtils.removeWhitespace(String text)", "testcase": false, "constructor": false}, {"identifier": "canDisplaySpace", "parameters": "(PDFont font)", "modifiers": "public static", "return": "boolean", "signature": "boolean canDisplaySpace(PDFont font)", "full_signature": "public static boolean canDisplaySpace(PDFont font)", "class_method_signature": "FontUtils.canDisplaySpace(PDFont font)", "testcase": false, "constructor": false}, {"identifier": "canDisplay", "parameters": "(String text, PDFont font)", "modifiers": "public static", "return": "boolean", "signature": "boolean canDisplay(String text, PDFont font)", "full_signature": "public static boolean canDisplay(String text, PDFont font)", "class_method_signature": "FontUtils.canDisplay(String text, PDFont font)", "testcase": false, "constructor": false}, {"identifier": "calculateBBoxHeight", "parameters": "(String text, PDFont font)", "modifiers": "public static", "return": "double", "signature": "double calculateBBoxHeight(String text, PDFont font)", "full_signature": "public static double calculateBBoxHeight(String text, PDFont font)", "class_method_signature": "FontUtils.calculateBBoxHeight(String text, PDFont font)", "testcase": false, "constructor": false}, {"identifier": "isBold", "parameters": "(PDFont font)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBold(PDFont font)", "full_signature": "public static boolean isBold(PDFont font)", "class_method_signature": "FontUtils.isBold(PDFont font)", "testcase": false, "constructor": false}, {"identifier": "isItalic", "parameters": "(PDFont font)", "modifiers": "public static", "return": "boolean", "signature": "boolean isItalic(PDFont font)", "full_signature": "public static boolean isItalic(PDFont font)", "class_method_signature": "FontUtils.isItalic(PDFont font)", "testcase": false, "constructor": false}, {"identifier": "wrapLines", "parameters": "(String rawLabel, PDFont font, float fontSize, double maxWidth,\n            PDDocument document)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> wrapLines(String rawLabel, PDFont font, float fontSize, double maxWidth,\n            PDDocument document)", "full_signature": "public static List<String> wrapLines(String rawLabel, PDFont font, float fontSize, double maxWidth,\n            PDDocument document)", "class_method_signature": "FontUtils.wrapLines(String rawLabel, PDFont font, float fontSize, double maxWidth,\n            PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "getSimpleStringWidth", "parameters": "(String text, PDFont font, double fontSize)", "modifiers": "public static", "return": "double", "signature": "double getSimpleStringWidth(String text, PDFont font, double fontSize)", "full_signature": "public static double getSimpleStringWidth(String text, PDFont font, double fontSize)", "class_method_signature": "FontUtils.getSimpleStringWidth(String text, PDFont font, double fontSize)", "testcase": false, "constructor": false}, {"identifier": "resolveFonts", "parameters": "(String label, PDFont font, PDDocument document)", "modifiers": "public static", "return": "List<TextWithFont>", "signature": "List<TextWithFont> resolveFonts(String label, PDFont font, PDDocument document)", "full_signature": "public static List<TextWithFont> resolveFonts(String label, PDFont font, PDDocument document)", "class_method_signature": "FontUtils.resolveFonts(String label, PDFont font, PDDocument document)", "testcase": false, "constructor": false}, {"identifier": "removeUnsupportedCharacters", "parameters": "(String text, PDDocument doc)", "modifiers": "public static", "return": "String", "signature": "String removeUnsupportedCharacters(String text, PDDocument doc)", "full_signature": "public static String removeUnsupportedCharacters(String text, PDDocument doc)", "class_method_signature": "FontUtils.removeUnsupportedCharacters(String text, PDDocument doc)", "testcase": false, "constructor": false}, {"identifier": "replaceUnsupportedCharacters", "parameters": "(String text, PDDocument doc, String replacement)", "modifiers": "public static", "return": "String", "signature": "String replaceUnsupportedCharacters(String text, PDDocument doc, String replacement)", "full_signature": "public static String replaceUnsupportedCharacters(String text, PDDocument doc, String replacement)", "class_method_signature": "FontUtils.replaceUnsupportedCharacters(String text, PDDocument doc, String replacement)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/util/FontUtils.java"}, "focal_method": {"identifier": "findFontFor", "parameters": "(PDDocument document, String text)", "modifiers": "public static final", "return": "PDFont", "body": "public static final PDFont findFontFor(PDDocument document, String text) {\n        for (FontResource font : TYPE0FONTS) {\n            PDFont loaded = loadFont(document, font);\n            if (canDisplay(text, loaded)) {\n                LOG.debug(\"Found suitable font {} to display '{}'\", loaded, text);\n                return loaded;\n            }\n        }\n        return null;\n    }", "signature": "PDFont findFontFor(PDDocument document, String text)", "full_signature": "public static final PDFont findFontFor(PDDocument document, String text)", "class_method_signature": "FontUtils.findFontFor(PDDocument document, String text)", "testcase": false, "constructor": false, "invocations": ["loadFont", "canDisplay", "debug"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}