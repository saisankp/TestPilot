{"test_class": {"identifier": "DifferenceStationaryModelHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double[] Y, X;", "modifier": "private static final", "type": "double[]", "declarator": "Y", "var_name": "Y"}, {"original_string": "private static final Matrix J;", "modifier": "private static final", "type": "Matrix", "declarator": "J", "var_name": "J"}, {"original_string": "private static final SarimaSpecification airline;", "modifier": "private static final", "type": "SarimaSpecification", "declarator": "airline", "var_name": "airline"}, {"original_string": "private static final TsDomain domain;", "modifier": "private static final", "type": "TsDomain", "declarator": "domain", "var_name": "domain"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/eco/DifferenceStationaryModelHelperTest.java"}, "test_case": {"identifier": "testLast0", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLast0() {\n        Matrix j = DifferenceStationaryModelHelper.last(12, 4);\n        assertTrue(j.getRowsCount() == 3);\n    }", "signature": "void testLast0()", "full_signature": "@Test public void testLast0()", "class_method_signature": "DifferenceStationaryModelHelperTest.testLast0()", "testcase": true, "constructor": false, "invocations": ["last", "assertTrue", "getRowsCount"]}, "focal_class": {"identifier": "DifferenceStationaryModelHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int n_;", "modifier": "private final", "type": "int", "declarator": "n_", "var_name": "n_"}, {"original_string": "private final Matrix J_;", "modifier": "private final", "type": "Matrix", "declarator": "J_", "var_name": "J_"}, {"original_string": "private final BackFilter Delta_;", "modifier": "private final", "type": "BackFilter", "declarator": "Delta_", "var_name": "Delta_"}, {"original_string": "private Matrix B_, D_;", "modifier": "private", "type": "Matrix", "declarator": "B_", "var_name": "B_"}, {"original_string": "private final DataBlock y_;", "modifier": "private final", "type": "DataBlock", "declarator": "y_", "var_name": "y_"}, {"original_string": "private DataBlock dy_;", "modifier": "private", "type": "DataBlock", "declarator": "dy_", "var_name": "dy_"}, {"original_string": "private final Matrix X_, DX_;", "modifier": "private final", "type": "Matrix", "declarator": "X_", "var_name": "X_"}, {"original_string": "private boolean valid_ = true;", "modifier": "private", "type": "boolean", "declarator": "valid_ = true", "var_name": "valid_"}], "methods": [{"identifier": "missings", "parameters": "(final IReadDataBlock data)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix missings(final IReadDataBlock data)", "full_signature": "public static Matrix missings(final IReadDataBlock data)", "class_method_signature": "DifferenceStationaryModelHelper.missings(final IReadDataBlock data)", "testcase": false, "constructor": false}, {"identifier": "missings", "parameters": "(final IReadDataBlock data, final int[] inits)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix missings(final IReadDataBlock data, final int[] inits)", "full_signature": "public static Matrix missings(final IReadDataBlock data, final int[] inits)", "class_method_signature": "DifferenceStationaryModelHelper.missings(final IReadDataBlock data, final int[] inits)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int[] inits, int c)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(int[] inits, int c)", "full_signature": "private static boolean contains(int[] inits, int c)", "class_method_signature": "DifferenceStationaryModelHelper.contains(int[] inits, int c)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(final int len, final int step)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix last(final int len, final int step)", "full_signature": "public static Matrix last(final int len, final int step)", "class_method_signature": "DifferenceStationaryModelHelper.last(final int len, final int step)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(final int len, final int step)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix first(final int len, final int step)", "full_signature": "public static Matrix first(final int len, final int step)", "class_method_signature": "DifferenceStationaryModelHelper.first(final int len, final int step)", "testcase": false, "constructor": false}, {"identifier": "aggregation", "parameters": "(final int len, final int nagg)", "modifiers": "public static", "return": "Matrix", "signature": "Matrix aggregation(final int len, final int nagg)", "full_signature": "public static Matrix aggregation(final int len, final int nagg)", "class_method_signature": "DifferenceStationaryModelHelper.aggregation(final int len, final int nagg)", "testcase": false, "constructor": false}, {"identifier": "searchDefaultInitialValues", "parameters": "(IReadDataBlock y, int d)", "modifiers": "public static", "return": "int[]", "signature": "int[] searchDefaultInitialValues(IReadDataBlock y, int d)", "full_signature": "public static int[] searchDefaultInitialValues(IReadDataBlock y, int d)", "class_method_signature": "DifferenceStationaryModelHelper.searchDefaultInitialValues(IReadDataBlock y, int d)", "testcase": false, "constructor": false}, {"identifier": "DifferenceStationaryModelHelper", "parameters": "(final DataBlock y, final Matrix X, final Matrix transformation, final BackFilter difference)", "modifiers": "public", "return": "", "signature": " DifferenceStationaryModelHelper(final DataBlock y, final Matrix X, final Matrix transformation, final BackFilter difference)", "full_signature": "public  DifferenceStationaryModelHelper(final DataBlock y, final Matrix X, final Matrix transformation, final BackFilter difference)", "class_method_signature": "DifferenceStationaryModelHelper.DifferenceStationaryModelHelper(final DataBlock y, final Matrix X, final Matrix transformation, final BackFilter difference)", "testcase": false, "constructor": true}, {"identifier": "DifferenceStationaryModelHelper", "parameters": "(final IModelProvider provider)", "modifiers": "public", "return": "", "signature": " DifferenceStationaryModelHelper(final IModelProvider provider)", "full_signature": "public  DifferenceStationaryModelHelper(final IModelProvider provider)", "class_method_signature": "DifferenceStationaryModelHelper.DifferenceStationaryModelHelper(final IModelProvider provider)", "testcase": false, "constructor": true}, {"identifier": "getB", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getB()", "full_signature": "public Matrix getB()", "class_method_signature": "DifferenceStationaryModelHelper.getB()", "testcase": false, "constructor": false}, {"identifier": "getD", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getD()", "full_signature": "public Matrix getD()", "class_method_signature": "DifferenceStationaryModelHelper.getD()", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Matrix Vw)", "modifiers": "public", "return": "ConcentratedLikelihood", "signature": "ConcentratedLikelihood compute(Matrix Vw)", "full_signature": "public ConcentratedLikelihood compute(Matrix Vw)", "class_method_signature": "DifferenceStationaryModelHelper.compute(Matrix Vw)", "testcase": false, "constructor": false}, {"identifier": "computeProjections", "parameters": "(Matrix Z, Matrix Vw)", "modifiers": "public", "return": "Matrix", "signature": "Matrix computeProjections(Matrix Z, Matrix Vw)", "full_signature": "public Matrix computeProjections(Matrix Z, Matrix Vw)", "class_method_signature": "DifferenceStationaryModelHelper.computeProjections(Matrix Z, Matrix Vw)", "testcase": false, "constructor": false}, {"identifier": "lcompute", "parameters": "(IModelProviderEx xprovider, IReadDataBlock p)", "modifiers": "", "return": "ConcentratedLikelihood", "signature": "ConcentratedLikelihood lcompute(IModelProviderEx xprovider, IReadDataBlock p)", "full_signature": " ConcentratedLikelihood lcompute(IModelProviderEx xprovider, IReadDataBlock p)", "class_method_signature": "DifferenceStationaryModelHelper.lcompute(IModelProviderEx xprovider, IReadDataBlock p)", "testcase": false, "constructor": false}, {"identifier": "delta", "parameters": "(SubMatrix m)", "modifiers": "private", "return": "void", "signature": "void delta(SubMatrix m)", "full_signature": "private void delta(SubMatrix m)", "class_method_signature": "DifferenceStationaryModelHelper.delta(SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void calc()", "full_signature": "private void calc()", "class_method_signature": "DifferenceStationaryModelHelper.calc()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "DifferenceStationaryModelHelper.clear()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/eco/DifferenceStationaryModelHelper.java"}, "focal_method": {"identifier": "last", "parameters": "(final int len, final int step)", "modifiers": "public static", "return": "Matrix", "body": "public static Matrix last(final int len, final int step) {\n        int nc = len, nr = nc / step;\n        Matrix J = new Matrix(nr, nc);\n        for (int r = 0, c = step - 1; r < nr; ++r, c += step) {\n            J.set(r, c, 1);\n        }\n        return J;\n    }", "signature": "Matrix last(final int len, final int step)", "full_signature": "public static Matrix last(final int len, final int step)", "class_method_signature": "DifferenceStationaryModelHelper.last(final int len, final int step)", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}