{"test_class": {"identifier": "FileComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AbstractFile[] files;", "modifier": "", "type": "AbstractFile[]", "declarator": "files", "var_name": "files"}, {"original_string": "private TestFile A;", "modifier": "private", "type": "TestFile", "declarator": "A", "var_name": "A"}, {"original_string": "private TestFile B;", "modifier": "private", "type": "TestFile", "declarator": "B", "var_name": "B"}, {"original_string": "private TestFile C;", "modifier": "private", "type": "TestFile", "declarator": "C", "var_name": "C"}, {"original_string": "private TestFile D;", "modifier": "private", "type": "TestFile", "declarator": "D", "var_name": "D"}], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/util/FileComparatorTest.java"}, "test_case": {"identifier": "testCompareDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareDate() {\n        Arrays.sort(files, new FileComparator(FileComparator.DATE_CRITERION, true, false, AbstractFile::getName));\n        assert A.equals(files[0]);\n        assert B.equals(files[1]);\n        assert C.equals(files[2]);\n        assert D.equals(files[3]);\n    }", "signature": "void testCompareDate()", "full_signature": "@Test public void testCompareDate()", "class_method_signature": "FileComparatorTest.testCompareDate()", "testcase": true, "constructor": false, "invocations": ["sort", "equals", "equals", "equals", "equals"]}, "focal_class": {"identifier": "FileComparator", "superclass": "", "interfaces": "implements Comparator<AbstractFile>", "fields": [{"original_string": "private int criterion;", "modifier": "private", "type": "int", "declarator": "criterion", "var_name": "criterion"}, {"original_string": "private boolean ascending;", "modifier": "private", "type": "boolean", "declarator": "ascending", "var_name": "ascending"}, {"original_string": "private boolean directoriesFirst;", "modifier": "private", "type": "boolean", "declarator": "directoriesFirst", "var_name": "directoriesFirst"}, {"original_string": "public final static int NAME_CRITERION = 0;", "modifier": "public final static", "type": "int", "declarator": "NAME_CRITERION = 0", "var_name": "NAME_CRITERION"}, {"original_string": "public final static int SIZE_CRITERION = 1;", "modifier": "public final static", "type": "int", "declarator": "SIZE_CRITERION = 1", "var_name": "SIZE_CRITERION"}, {"original_string": "public final static int DATE_CRITERION = 2;", "modifier": "public final static", "type": "int", "declarator": "DATE_CRITERION = 2", "var_name": "DATE_CRITERION"}, {"original_string": "public final static int EXTENSION_CRITERION = 3;", "modifier": "public final static", "type": "int", "declarator": "EXTENSION_CRITERION = 3", "var_name": "EXTENSION_CRITERION"}, {"original_string": "public final static int PERMISSIONS_CRITERION = 4;", "modifier": "public final static", "type": "int", "declarator": "PERMISSIONS_CRITERION = 4", "var_name": "PERMISSIONS_CRITERION"}, {"original_string": "public final static int OWNER_CRITERION = 5;", "modifier": "public final static", "type": "int", "declarator": "OWNER_CRITERION = 5", "var_name": "OWNER_CRITERION"}, {"original_string": "public final static int GROUP_CRITERION = 6;", "modifier": "public final static", "type": "int", "declarator": "GROUP_CRITERION = 6", "var_name": "GROUP_CRITERION"}, {"original_string": "private final static Pattern FILENAME_WITH_NUMBER_PATTERN = Pattern.compile(\"\\\\d+\");", "modifier": "private final static", "type": "Pattern", "declarator": "FILENAME_WITH_NUMBER_PATTERN = Pattern.compile(\"\\\\d+\")", "var_name": "FILENAME_WITH_NUMBER_PATTERN"}, {"original_string": "private Function<AbstractFile, String> nameFunc;", "modifier": "private", "type": "Function<AbstractFile, String>", "declarator": "nameFunc", "var_name": "nameFunc"}], "methods": [{"identifier": "FileComparator", "parameters": "(int criterion, boolean ascending, boolean directoriesFirst, Function<AbstractFile, String> nameFunc)", "modifiers": "public", "return": "", "signature": " FileComparator(int criterion, boolean ascending, boolean directoriesFirst, Function<AbstractFile, String> nameFunc)", "full_signature": "public  FileComparator(int criterion, boolean ascending, boolean directoriesFirst, Function<AbstractFile, String> nameFunc)", "class_method_signature": "FileComparator.FileComparator(int criterion, boolean ascending, boolean directoriesFirst, Function<AbstractFile, String> nameFunc)", "testcase": false, "constructor": true}, {"identifier": "getCharacterValue", "parameters": "(int c)", "modifiers": "private", "return": "int", "signature": "int getCharacterValue(int c)", "full_signature": "private int getCharacterValue(int c)", "class_method_signature": "FileComparator.getCharacterValue(int c)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingZeros", "parameters": "(String s)", "modifiers": "private", "return": "String", "signature": "String removeLeadingZeros(String s)", "full_signature": "private String removeLeadingZeros(String s)", "class_method_signature": "FileComparator.removeLeadingZeros(String s)", "testcase": false, "constructor": false}, {"identifier": "compareStrings", "parameters": "(String s1, String s2, boolean ignoreCase, boolean nullProtection)", "modifiers": "private", "return": "int", "signature": "int compareStrings(String s1, String s2, boolean ignoreCase, boolean nullProtection)", "full_signature": "private int compareStrings(String s1, String s2, boolean ignoreCase, boolean nullProtection)", "class_method_signature": "FileComparator.compareStrings(String s1, String s2, boolean ignoreCase, boolean nullProtection)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(AbstractFile f1, AbstractFile f2)", "modifiers": "public", "return": "int", "signature": "int compare(AbstractFile f1, AbstractFile f2)", "full_signature": "public int compare(AbstractFile f1, AbstractFile f2)", "class_method_signature": "FileComparator.compare(AbstractFile f1, AbstractFile f2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "FileComparator.equals(Object o)", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/util/FileComparator.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object o) {\n        if(! (o instanceof FileComparator))\n            return false;\n\n        FileComparator fc = (FileComparator)o;\n        return criterion ==fc.criterion && ascending==fc.ascending;\n    }", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "FileComparator.equals(Object o)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}