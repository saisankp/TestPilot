{"test_class": {"identifier": "TransformationEngineTest", "superclass": "extends TestHelper", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@InjectMocks\n    private TransformationEngine transformationEngine;", "modifier": "@InjectMocks\n    private", "type": "TransformationEngine", "declarator": "transformationEngine", "var_name": "transformationEngine"}], "file": "butterfly-core/src/test/java/com/paypal/butterfly/core/TransformationEngineTest.java"}, "test_case": {"identifier": "pendingManualChangesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void pendingManualChangesTest() throws IOException, URISyntaxException, InterruptedException {\n        File appFolder = new File(getClass().getResource(\"/test-app-3\").toURI());\n\n        File transformedAppFolder = Files.createTempDir();\n        FileUtils.copyDirectory(appFolder, transformedAppFolder);\n        System.out.printf(\"Transformed sample app folder: %s\\n\", transformedAppFolder.getAbsolutePath());\n\n        Application application = new ApplicationImpl(transformedAppFolder);\n        Configuration configuration = new ConfigurationImpl(null);\n\n        TransformationTemplate transformationTemplate = new JavaEEToSpringBoot();\n        AbstractTransformationRequest transformation = new TemplateTransformationRequest(application, transformationTemplate, configuration);\n\n        try {\n            transformationEngine.perform(transformation).get();\n            fail(\"An ApplicationValidationException was supposed to be thrown (since application had a pending manual instruction) but was not\");\n        } catch (ExecutionException executionException) {\n            Throwable cause = executionException.getCause();\n            assertTrue(cause instanceof ApplicationValidationException);\n            String exceptionMessage = String.format(\"This application has pending manual instructions. Perform manual instructions at the following file first, then remove it, and run Butterfly again: %s/%s\", transformedAppFolder.getAbsolutePath(), ManualInstructionsHandler.MANUAL_INSTRUCTIONS_MAIN_FILE);\n            assertEquals(cause.getMessage(), exceptionMessage);\n        }\n    }", "signature": "void pendingManualChangesTest()", "full_signature": "@Test public void pendingManualChangesTest()", "class_method_signature": "TransformationEngineTest.pendingManualChangesTest()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "getClass", "createTempDir", "copyDirectory", "printf", "getAbsolutePath", "get", "perform", "fail", "getCause", "assertTrue", "format", "getAbsolutePath", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "TransformationEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Collection<TransformationListener> transformationListeners;", "modifier": "private", "type": "Collection<TransformationListener>", "declarator": "transformationListeners", "var_name": "transformationListeners"}, {"original_string": "@Autowired\n    private ApplicationContext applicationContext;", "modifier": "@Autowired\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private ManualInstructionsHandler manualInstructionsHandler;", "modifier": "private", "type": "ManualInstructionsHandler", "declarator": "manualInstructionsHandler", "var_name": "manualInstructionsHandler"}, {"original_string": "private TransformationValidator validator;", "modifier": "private", "type": "TransformationValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private static final int MIN_THREAD_POOL_SIZE = Runtime.getRuntime().availableProcessors();", "modifier": "private static final", "type": "int", "declarator": "MIN_THREAD_POOL_SIZE = Runtime.getRuntime().availableProcessors()", "var_name": "MIN_THREAD_POOL_SIZE"}, {"original_string": "private static final int MAX_THREAD_POOL_SIZE = MIN_THREAD_POOL_SIZE * 2;", "modifier": "private static final", "type": "int", "declarator": "MAX_THREAD_POOL_SIZE = MIN_THREAD_POOL_SIZE * 2", "var_name": "MAX_THREAD_POOL_SIZE"}, {"original_string": "private ExecutorService executor = new ThreadPoolExecutor(MIN_THREAD_POOL_SIZE, MAX_THREAD_POOL_SIZE, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>());", "modifier": "private", "type": "ExecutorService", "declarator": "executor = new ThreadPoolExecutor(MIN_THREAD_POOL_SIZE, MAX_THREAD_POOL_SIZE, 5, TimeUnit.MINUTES, new LinkedBlockingQueue<>())", "var_name": "executor"}], "methods": [{"identifier": "setupListeners", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void setupListeners()", "full_signature": "@PostConstruct void setupListeners()", "class_method_signature": "TransformationEngine.setupListeners()", "testcase": false, "constructor": false}, {"identifier": "perform", "parameters": "(TransformationRequest transformationRequest)", "modifiers": "", "return": "CompletableFuture<TransformationResult>", "signature": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "full_signature": " CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "class_method_signature": "TransformationEngine.perform(TransformationRequest transformationRequest)", "testcase": false, "constructor": false}, {"identifier": "shutdownExecutor", "parameters": "()", "modifiers": "@PreDestroy", "return": "void", "signature": "void shutdownExecutor()", "full_signature": "@PreDestroy void shutdownExecutor()", "class_method_signature": "TransformationEngine.shutdownExecutor()", "testcase": false, "constructor": false}], "file": "butterfly-core/src/main/java/com/paypal/butterfly/core/TransformationEngine.java"}, "focal_method": {"identifier": "perform", "parameters": "(TransformationRequest transformationRequest)", "modifiers": "", "return": "CompletableFuture<TransformationResult>", "body": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest) {\n        return CompletableFuture.supplyAsync(\n                Transformer.createTransformer(transformationRequest, transformationListeners, manualInstructionsHandler, validator),\n                executor\n        );\n    }", "signature": "CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "full_signature": " CompletableFuture<TransformationResult> perform(TransformationRequest transformationRequest)", "class_method_signature": "TransformationEngine.perform(TransformationRequest transformationRequest)", "testcase": false, "constructor": false, "invocations": ["supplyAsync", "createTransformer"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}