{"test_class": {"identifier": "NoopSpanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Tracer tracer = Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE)\n    .clock(() -> {\n      throw new AssertionError();\n    })\n    .addSpanHandler(new SpanHandler() {\n      @Override public boolean begin(TraceContext context, MutableSpan span, TraceContext parent) {\n        throw new AssertionError();\n      }\n    })\n    .build().tracer();", "modifier": "", "type": "Tracer", "declarator": "tracer = Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE)\n    .clock(() -> {\n      throw new AssertionError();\n    })\n    .addSpanHandler(new SpanHandler() {\n      @Override public boolean begin(TraceContext context, MutableSpan span, TraceContext parent) {\n        throw new AssertionError();\n      }\n    })\n    .build().tracer()", "var_name": "tracer"}, {"original_string": "Span span = tracer.newTrace();", "modifier": "", "type": "Span", "declarator": "span = tracer.newTrace()", "var_name": "span"}], "file": "brave/src/test/java/brave/NoopSpanTest.java"}, "test_case": {"identifier": "isNoop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void isNoop() {\n    assertThat(span.isNoop()).isTrue();\n  }", "signature": "void isNoop()", "full_signature": "@Test public void isNoop()", "class_method_signature": "NoopSpanTest.isNoop()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isNoop"]}, "focal_class": {"identifier": "NoopSpan", "superclass": "extends Span", "interfaces": "", "fields": [{"original_string": "final TraceContext context;", "modifier": "final", "type": "TraceContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "NoopSpan", "parameters": "(TraceContext context)", "modifiers": "", "return": "", "signature": " NoopSpan(TraceContext context)", "full_signature": "  NoopSpan(TraceContext context)", "class_method_signature": "NoopSpan.NoopSpan(TraceContext context)", "testcase": false, "constructor": true}, {"identifier": "customizer", "parameters": "()", "modifiers": "@Override public", "return": "SpanCustomizer", "signature": "SpanCustomizer customizer()", "full_signature": "@Override public SpanCustomizer customizer()", "class_method_signature": "NoopSpan.customizer()", "testcase": false, "constructor": false}, {"identifier": "isNoop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNoop()", "full_signature": "@Override public boolean isNoop()", "class_method_signature": "NoopSpan.isNoop()", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "()", "modifiers": "@Override public", "return": "TraceContext", "signature": "TraceContext context()", "full_signature": "@Override public TraceContext context()", "class_method_signature": "NoopSpan.context()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "Span", "signature": "Span start()", "full_signature": "@Override public Span start()", "class_method_signature": "NoopSpan.start()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "Span", "signature": "Span start(long timestamp)", "full_signature": "@Override public Span start(long timestamp)", "class_method_signature": "NoopSpan.start(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(String name)", "modifiers": "@Override public", "return": "Span", "signature": "Span name(String name)", "full_signature": "@Override public Span name(String name)", "class_method_signature": "NoopSpan.name(String name)", "testcase": false, "constructor": false}, {"identifier": "kind", "parameters": "(Kind kind)", "modifiers": "@Override public", "return": "Span", "signature": "Span kind(Kind kind)", "full_signature": "@Override public Span kind(Kind kind)", "class_method_signature": "NoopSpan.kind(Kind kind)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span annotate(String value)", "full_signature": "@Override public Span annotate(String value)", "class_method_signature": "NoopSpan.annotate(String value)", "testcase": false, "constructor": false}, {"identifier": "annotate", "parameters": "(long timestamp, String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span annotate(long timestamp, String value)", "full_signature": "@Override public Span annotate(long timestamp, String value)", "class_method_signature": "NoopSpan.annotate(long timestamp, String value)", "testcase": false, "constructor": false}, {"identifier": "remoteServiceName", "parameters": "(String remoteServiceName)", "modifiers": "@Override public", "return": "Span", "signature": "Span remoteServiceName(String remoteServiceName)", "full_signature": "@Override public Span remoteServiceName(String remoteServiceName)", "class_method_signature": "NoopSpan.remoteServiceName(String remoteServiceName)", "testcase": false, "constructor": false}, {"identifier": "remoteIpAndPort", "parameters": "(String remoteIp, int port)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remoteIpAndPort(String remoteIp, int port)", "full_signature": "@Override public boolean remoteIpAndPort(String remoteIp, int port)", "class_method_signature": "NoopSpan.remoteIpAndPort(String remoteIp, int port)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "Span", "signature": "Span tag(String key, String value)", "full_signature": "@Override public Span tag(String key, String value)", "class_method_signature": "NoopSpan.tag(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(Throwable throwable)", "modifiers": "@Override public", "return": "Span", "signature": "Span error(Throwable throwable)", "full_signature": "@Override public Span error(Throwable throwable)", "class_method_signature": "NoopSpan.error(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finish()", "full_signature": "@Override public void finish()", "class_method_signature": "NoopSpan.finish()", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(long timestamp)", "modifiers": "@Override public", "return": "void", "signature": "void finish(long timestamp)", "full_signature": "@Override public void finish(long timestamp)", "class_method_signature": "NoopSpan.finish(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "abandon", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void abandon()", "full_signature": "@Override public void abandon()", "class_method_signature": "NoopSpan.abandon()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "NoopSpan.flush()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NoopSpan.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NoopSpan.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "isEqualToNoopOrLazySpan", "parameters": "(TraceContext context, Object o)", "modifiers": "static", "return": "boolean", "signature": "boolean isEqualToNoopOrLazySpan(TraceContext context, Object o)", "full_signature": "static boolean isEqualToNoopOrLazySpan(TraceContext context, Object o)", "class_method_signature": "NoopSpan.isEqualToNoopOrLazySpan(TraceContext context, Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NoopSpan.hashCode()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/NoopSpan.java"}, "focal_method": {"identifier": "isNoop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override public boolean isNoop() {\n    return true;\n  }", "signature": "boolean isNoop()", "full_signature": "@Override public boolean isNoop()", "class_method_signature": "NoopSpan.isNoop()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}