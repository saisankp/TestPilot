{"test_class": {"identifier": "AbstractArchiveTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/common/archive/AbstractArchiveTest.java"}, "test_case": {"identifier": "removeArchiveDominatedTest2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void removeArchiveDominatedTest2() {\n\t\tInjector injector = Guice.createInjector(new MockProblemModule());\n\t\tIndividualFactory factory = injector.getInstance(IndividualFactory.class);\n\n\t\tObjective o0 = new Objective(\"o0\");\n\t\tObjective o1 = new Objective(\"o1\");\n\n\t\tIndividual iArchived0 = factory.create();\n\t\tObjectives objectivesA0 = new Objectives();\n\t\tobjectivesA0.add(o0, 2);\n\t\tobjectivesA0.add(o1, 3);\n\t\tiArchived0.setObjectives(objectivesA0);\n\n\t\tIndividual iArchived1 = factory.create();\n\t\tObjectives objectivesA1 = new Objectives();\n\t\tobjectivesA1.add(o0, 3);\n\t\tobjectivesA1.add(o1, 2);\n\t\tiArchived1.setObjectives(objectivesA1);\n\n\t\tTestArchive archive = new TestArchive();\n\t\tarchive.addAll(iArchived0, iArchived1);\n\n\t\tIndividual i0 = factory.create();\n\t\tObjectives objectives0 = new Objectives();\n\t\tobjectives0.add(o0, 4);\n\t\tobjectives0.add(o1, 4);\n\t\ti0.setObjectives(objectives0);\n\n\t\tList<Individual> list = new ArrayList<>();\n\t\tlist.add(i0);\n\t\tarchive.removeArchiveDominated(list);\n\n\t\tAssert.assertTrue(list.isEmpty());\n\t\tAssert.assertEquals(2, archive.size());\n\t}", "signature": "void removeArchiveDominatedTest2()", "full_signature": "@Test public void removeArchiveDominatedTest2()", "class_method_signature": "AbstractArchiveTest.removeArchiveDominatedTest2()", "testcase": true, "constructor": false, "invocations": ["createInjector", "getInstance", "create", "add", "add", "setObjectives", "create", "add", "add", "setObjectives", "addAll", "create", "add", "add", "setObjectives", "add", "removeArchiveDominated", "assertTrue", "isEmpty", "assertEquals", "size"]}, "focal_class": {"identifier": "AbstractArchive", "superclass": "extends Archive", "interfaces": "", "fields": [], "methods": [{"identifier": "update", "parameters": "(Set<? extends Individual> individuals)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean update(Set<? extends Individual> individuals)", "full_signature": "@Override public boolean update(Set<? extends Individual> individuals)", "class_method_signature": "AbstractArchive.update(Set<? extends Individual> individuals)", "testcase": false, "constructor": false}, {"identifier": "removeDominatedCandidates", "parameters": "(List<Individual> candidates)", "modifiers": "protected", "return": "void", "signature": "void removeDominatedCandidates(List<Individual> candidates)", "full_signature": "protected void removeDominatedCandidates(List<Individual> candidates)", "class_method_signature": "AbstractArchive.removeDominatedCandidates(List<Individual> candidates)", "testcase": false, "constructor": false}, {"identifier": "removeArchiveDominated", "parameters": "(List<Individual> candidates)", "modifiers": "protected", "return": "void", "signature": "void removeArchiveDominated(List<Individual> candidates)", "full_signature": "protected void removeArchiveDominated(List<Individual> candidates)", "class_method_signature": "AbstractArchive.removeArchiveDominated(List<Individual> candidates)", "testcase": false, "constructor": false}, {"identifier": "updateWithNondominated", "parameters": "(Collection<Individual> candidates)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean updateWithNondominated(Collection<Individual> candidates)", "full_signature": "protected abstract boolean updateWithNondominated(Collection<Individual> candidates)", "class_method_signature": "AbstractArchive.updateWithNondominated(Collection<Individual> candidates)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/common/archive/AbstractArchive.java"}, "focal_method": {"identifier": "removeArchiveDominated", "parameters": "(List<Individual> candidates)", "modifiers": "protected", "return": "void", "body": "protected void removeArchiveDominated(List<Individual> candidates) {\n\t\tIterator<Individual> i1;\n\t\tIterator<Individual> i2;\n\t\tfor (i1 = candidates.iterator(); i1.hasNext();) {\n\t\t\tObjectives o1 = i1.next().getObjectives();\n\t\t\tfor (i2 = this.iterator(); i2.hasNext();) {\n\t\t\t\tObjectives o2 = i2.next().getObjectives();\n\t\t\t\tif (o2.weaklyDominates(o1)) {\n\t\t\t\t\ti1.remove();\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (o1.dominates(o2)) {\n\t\t\t\t\ti2.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void removeArchiveDominated(List<Individual> candidates)", "full_signature": "protected void removeArchiveDominated(List<Individual> candidates)", "class_method_signature": "AbstractArchive.removeArchiveDominated(List<Individual> candidates)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "getObjectives", "next", "iterator", "hasNext", "getObjectives", "next", "weaklyDominates", "remove", "dominates", "remove"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}