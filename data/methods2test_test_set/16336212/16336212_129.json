{"test_class": {"identifier": "ScheduledRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScheduledExecutorService scheduledExecutorService;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "scheduledExecutorService", "var_name": "scheduledExecutorService"}], "file": "common/src/test/java/org/glowroot/common/util/ScheduledRunnableTest.java"}, "test_case": {"identifier": "testCancelWithNoFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCancelWithNoFuture() {\n        // given\n        TestScheduledRunnable testScheduledRunnable = new TestScheduledRunnable();\n        // when\n        testScheduledRunnable.cancel();\n        // then\n        // do nothing\n    }", "signature": "void testCancelWithNoFuture()", "full_signature": "@Test public void testCancelWithNoFuture()", "class_method_signature": "ScheduledRunnableTest.testCancelWithNoFuture()", "testcase": true, "constructor": false, "invocations": ["cancel"]}, "focal_class": {"identifier": "ScheduledRunnable", "superclass": "", "interfaces": "implements Runnable, Cancellable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ScheduledRunnable.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ScheduledRunnable.class)", "var_name": "logger"}, {"original_string": "private volatile @MonotonicNonNull ScheduledFuture<?> future;", "modifier": "private volatile @MonotonicNonNull", "type": "ScheduledFuture<?>", "declarator": "future", "var_name": "future"}], "methods": [{"identifier": "scheduleWithFixedDelay", "parameters": "(ScheduledExecutorService scheduledExecutor,\n            long initialDelay, long period, TimeUnit unit)", "modifiers": "public", "return": "void", "signature": "void scheduleWithFixedDelay(ScheduledExecutorService scheduledExecutor,\n            long initialDelay, long period, TimeUnit unit)", "full_signature": "public void scheduleWithFixedDelay(ScheduledExecutorService scheduledExecutor,\n            long initialDelay, long period, TimeUnit unit)", "class_method_signature": "ScheduledRunnable.scheduleWithFixedDelay(ScheduledExecutorService scheduledExecutor,\n            long initialDelay, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ScheduledRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "ScheduledRunnable.cancel()", "testcase": false, "constructor": false}, {"identifier": "runInternal", "parameters": "()", "modifiers": "protected abstract", "return": "void", "signature": "void runInternal()", "full_signature": "protected abstract void runInternal()", "class_method_signature": "ScheduledRunnable.runInternal()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/glowroot/common/util/ScheduledRunnable.java"}, "focal_method": {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void cancel() {\n        if (future != null) {\n            future.cancel(false);\n        }\n    }", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "ScheduledRunnable.cancel()", "testcase": false, "constructor": false, "invocations": ["cancel"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}