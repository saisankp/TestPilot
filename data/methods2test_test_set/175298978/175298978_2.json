{"test_class": {"identifier": "CommitsAnalysisTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int projectId = 1;", "modifier": "private final", "type": "int", "declarator": "projectId = 1", "var_name": "projectId"}, {"original_string": "private final CommitDetails dummyDetails = new CommitDetails(GitDiff.EMPTY, Collections.emptyList());", "modifier": "private final", "type": "CommitDetails", "declarator": "dummyDetails = new CommitDetails(GitDiff.EMPTY, Collections.emptyList())", "var_name": "dummyDetails"}, {"original_string": "private Persistence persistence;", "modifier": "private", "type": "Persistence", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private CommitQueries commitQueries;", "modifier": "private", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private DeveloperQueries developerQueries;", "modifier": "private", "type": "DeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private Repository repository;", "modifier": "private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private CommitDetailsChecker detailsChecker;", "modifier": "private", "type": "CommitDetailsChecker", "declarator": "detailsChecker", "var_name": "detailsChecker"}, {"original_string": "private List<Map<String, Object>> paprikaCommitsList;", "modifier": "private", "type": "List<Map<String, Object>>", "declarator": "paprikaCommitsList", "var_name": "paprikaCommitsList"}, {"original_string": "private final Commit A = new Commit(\"a\", 0, new DateTime(1),\n            \"message1\", \"author@email.com\", Collections.emptyList());", "modifier": "private final", "type": "Commit", "declarator": "A = new Commit(\"a\", 0, new DateTime(1),\n            \"message1\", \"author@email.com\", Collections.emptyList())", "var_name": "A"}, {"original_string": "private final Commit B = new Commit(\"b\", 1, new DateTime(2),\n            \"message2\", \"author@email.com\", Collections.emptyList());", "modifier": "private final", "type": "Commit", "declarator": "B = new Commit(\"b\", 1, new DateTime(2),\n            \"message2\", \"author@email.com\", Collections.emptyList())", "var_name": "B"}, {"original_string": "private final Commit C = new Commit(\"c\", 2, new DateTime(3),\n            \"message3\", \"another_author@email.com\", Collections.emptyList());", "modifier": "private final", "type": "Commit", "declarator": "C = new Commit(\"c\", 2, new DateTime(3),\n            \"message3\", \"another_author@email.com\", Collections.emptyList())", "var_name": "C"}, {"original_string": "private final Commit D = new Commit(\"d\", 3, new DateTime(4),\n            \"message4\", \"another_author@email.com\", Collections.emptyList());", "modifier": "private final", "type": "Commit", "declarator": "D = new Commit(\"d\", 3, new DateTime(4),\n            \"message4\", \"another_author@email.com\", Collections.emptyList())", "var_name": "D"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/query/commit/CommitsAnalysisTest.java"}, "test_case": {"identifier": "testCommitNotInPaprika", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommitNotInPaprika() throws Exception {\n        addCommitInPaprika(A);\n        addCommitInRepository(A);\n        addCommitInPaprika(B);\n        addCommitInRepository(B);\n        // Simulate a failed commit in Paprika\n        addCommitInRepository(C);\n        addCommitInPaprika(D);\n        addCommitInRepository(D);\n        prepareGitLog(A, B, C, D);\n\n        getCommitsAnalysis().query();\n\n        verify(commitQueries, times(4)).commitInsertionStatement(anyInt(), any(Commit.class), any(GitDiff.class));\n        verify(commitQueries).commitInsertionStatement(projectId, A, dummyDetails.diff);\n        verify(commitQueries).commitInsertionStatement(projectId, B, dummyDetails.diff);\n        verify(commitQueries).commitInsertionStatement(projectId, C, dummyDetails.diff);\n        verify(commitQueries).commitInsertionStatement(projectId, D, dummyDetails.diff);\n\n        // Author insertion is brainlessly done at each encounter\n        verify(developerQueries, times(4)).developerInsertStatement(anyString());\n        verify(developerQueries, times(2)).developerInsertStatement(A.authorEmail);\n        verify(developerQueries, times(2)).developerInsertStatement(C.authorEmail);\n        verify(developerQueries, times(4)).projectDeveloperInsertStatement(eq(projectId), anyString());\n        verify(developerQueries, times(2)).projectDeveloperInsertStatement(projectId, A.authorEmail);\n        verify(developerQueries, times(2)).projectDeveloperInsertStatement(projectId, C.authorEmail);\n\n        // No GitRename handled\n        verify(commitQueries, times(0)).fileRenameInsertionStatement(eq(projectId), anyString(), any(GitRename.class));\n    }", "signature": "void testCommitNotInPaprika()", "full_signature": "@Test public void testCommitNotInPaprika()", "class_method_signature": "CommitsAnalysisTest.testCommitNotInPaprika()", "testcase": true, "constructor": false, "invocations": ["addCommitInPaprika", "addCommitInRepository", "addCommitInPaprika", "addCommitInRepository", "addCommitInRepository", "addCommitInPaprika", "addCommitInRepository", "prepareGitLog", "query", "getCommitsAnalysis", "commitInsertionStatement", "verify", "times", "anyInt", "any", "any", "commitInsertionStatement", "verify", "commitInsertionStatement", "verify", "commitInsertionStatement", "verify", "commitInsertionStatement", "verify", "developerInsertStatement", "verify", "times", "anyString", "developerInsertStatement", "verify", "times", "developerInsertStatement", "verify", "times", "projectDeveloperInsertStatement", "verify", "times", "eq", "anyString", "projectDeveloperInsertStatement", "verify", "times", "projectDeveloperInsertStatement", "verify", "times", "fileRenameInsertionStatement", "verify", "times", "eq", "anyString", "any"]}, "focal_class": {"identifier": "CommitsAnalysis", "superclass": "", "interfaces": "implements Query", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CommitsAnalysis.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CommitsAnalysis.class.getName())", "var_name": "logger"}, {"original_string": "public static final int BATCH_SIZE = 1000;", "modifier": "public static final", "type": "int", "declarator": "BATCH_SIZE = 1000", "var_name": "BATCH_SIZE"}, {"original_string": "private final int projectId;", "modifier": "private final", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private final Repository repository;", "modifier": "private final", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final Map<String, Commit> paprikaCommits;", "modifier": "private final", "type": "Map<String, Commit>", "declarator": "paprikaCommits", "var_name": "paprikaCommits"}, {"original_string": "private final CommitDetailsChecker detailsChecker;", "modifier": "private final", "type": "CommitDetailsChecker", "declarator": "detailsChecker", "var_name": "detailsChecker"}, {"original_string": "private final Persistence persistence;", "modifier": "private final", "type": "Persistence", "declarator": "persistence", "var_name": "persistence"}, {"original_string": "private final DeveloperQueries developerQueries;", "modifier": "private final", "type": "DeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private final CommitQueries commitQueries;", "modifier": "private final", "type": "CommitQueries", "declarator": "commitQueries", "var_name": "commitQueries"}, {"original_string": "private final boolean paprikaOnly;", "modifier": "private final", "type": "boolean", "declarator": "paprikaOnly", "var_name": "paprikaOnly"}], "methods": [{"identifier": "CommitsAnalysis", "parameters": "(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries)", "modifiers": "", "return": "", "signature": " CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries)", "full_signature": "  CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries)", "class_method_signature": "CommitsAnalysis.CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries)", "testcase": false, "constructor": true}, {"identifier": "CommitsAnalysis", "parameters": "(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries,\n                    boolean paprikaOnly)", "modifiers": "", "return": "", "signature": " CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries,\n                    boolean paprikaOnly)", "full_signature": "  CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries,\n                    boolean paprikaOnly)", "class_method_signature": "CommitsAnalysis.CommitsAnalysis(int projectId, Persistence persistence, Repository repository,\n                    Iterator<Map<String, Object>> commits,\n                    CommitDetailsChecker detailsChecker,\n                    DeveloperQueries developerQueries, CommitQueries commitQueries,\n                    boolean paprikaOnly)", "testcase": false, "constructor": true}, {"identifier": "mapPaprikaCommits", "parameters": "(Iterator<Map<String, Object>> commits)", "modifiers": "private static", "return": "Map<String, Commit>", "signature": "Map<String, Commit> mapPaprikaCommits(Iterator<Map<String, Object>> commits)", "full_signature": "private static Map<String, Commit> mapPaprikaCommits(Iterator<Map<String, Object>> commits)", "class_method_signature": "CommitsAnalysis.mapPaprikaCommits(Iterator<Map<String, Object>> commits)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "CommitsAnalysis.query()", "testcase": false, "constructor": false}, {"identifier": "choseCommitsSource", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> choseCommitsSource()", "full_signature": "private List<String> choseCommitsSource()", "class_method_signature": "CommitsAnalysis.choseCommitsSource()", "testcase": false, "constructor": false}, {"identifier": "fetchGitLog", "parameters": "()", "modifiers": "private", "return": "List<String>", "signature": "List<String> fetchGitLog()", "full_signature": "private List<String> fetchGitLog()", "class_method_signature": "CommitsAnalysis.fetchGitLog()", "testcase": false, "constructor": false}, {"identifier": "fillCommit", "parameters": "(String sha1)", "modifiers": "private", "return": "Commit", "signature": "Commit fillCommit(String sha1)", "full_signature": "private Commit fillCommit(String sha1)", "class_method_signature": "CommitsAnalysis.fillCommit(String sha1)", "testcase": false, "constructor": false}, {"identifier": "authorStatements", "parameters": "(String emailAddress)", "modifiers": "private", "return": "List<String>", "signature": "List<String> authorStatements(String emailAddress)", "full_signature": "private List<String> authorStatements(String emailAddress)", "class_method_signature": "CommitsAnalysis.authorStatements(String emailAddress)", "testcase": false, "constructor": false}, {"identifier": "commitStatement", "parameters": "(Commit commit, CommitDetails details)", "modifiers": "private", "return": "String", "signature": "String commitStatement(Commit commit, CommitDetails details)", "full_signature": "private String commitStatement(Commit commit, CommitDetails details)", "class_method_signature": "CommitsAnalysis.commitStatement(Commit commit, CommitDetails details)", "testcase": false, "constructor": false}, {"identifier": "fileRenameStatements", "parameters": "(Commit commit, CommitDetails details)", "modifiers": "private", "return": "List<String>", "signature": "List<String> fileRenameStatements(Commit commit, CommitDetails details)", "full_signature": "private List<String> fileRenameStatements(Commit commit, CommitDetails details)", "class_method_signature": "CommitsAnalysis.fileRenameStatements(Commit commit, CommitDetails details)", "testcase": false, "constructor": false}, {"identifier": "persistBatch", "parameters": "(List<String> commitStatements, List<String> authorStatements, List<String> renameStatements)", "modifiers": "private", "return": "void", "signature": "void persistBatch(List<String> commitStatements, List<String> authorStatements, List<String> renameStatements)", "full_signature": "private void persistBatch(List<String> commitStatements, List<String> authorStatements, List<String> renameStatements)", "class_method_signature": "CommitsAnalysis.persistBatch(List<String> commitStatements, List<String> authorStatements, List<String> renameStatements)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/query/commit/CommitsAnalysis.java"}, "focal_method": {"identifier": "query", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void query() throws QueryException {\n        List<String> commitStatements = new ArrayList<>();\n        List<String> authorStatements = new ArrayList<>();\n        List<String> renameStatements = new ArrayList<>();\n\n        int commitCount = 0;\n        CommitDetails details;\n        Commit currentCommit;\n        for (String commit : choseCommitsSource()) {\n            currentCommit = fillCommit(commit);\n\n            logger.debug(\"[\" + projectId + \"] => Analyzing commit: \" + currentCommit.sha);\n            details = detailsChecker.fetch(currentCommit.sha);\n\n            authorStatements.addAll(authorStatements(currentCommit.authorEmail));\n            // GitCommit will not contain the right ordinal.\n            commitStatements.add(commitStatement(currentCommit, details));\n            renameStatements.addAll(fileRenameStatements(currentCommit, details));\n\n            if (++commitCount % BATCH_SIZE == 0) {\n                logger.info(\"[\" + projectId + \"] Persist commit batch of size: \" + BATCH_SIZE);\n                persistBatch(commitStatements, authorStatements, renameStatements);\n                authorStatements.clear();\n                commitStatements.clear();\n                renameStatements.clear();\n            }\n        }\n        persistBatch(commitStatements, authorStatements, renameStatements);\n    }", "signature": "void query()", "full_signature": "@Override public void query()", "class_method_signature": "CommitsAnalysis.query()", "testcase": false, "constructor": false, "invocations": ["choseCommitsSource", "fillCommit", "debug", "fetch", "addAll", "authorStatements", "add", "commitStatement", "addAll", "fileRenameStatements", "info", "persistBatch", "clear", "clear", "clear", "persistBatch"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}