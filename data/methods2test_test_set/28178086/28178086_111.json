{"test_class": {"identifier": "ParsersTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/ParsersTest.java"}, "test_case": {"identifier": "testEnumParser", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnumParser() {\n        Parser<TsFrequency> p = Parsers.enumParser(TsFrequency.class);\n        assertCompliance(p);\n        assertThat(p.parse(\"Monthly\")).isEqualTo(TsFrequency.Monthly);\n        assertThat(p.parse(\"hello\")).isNull();\n    }", "signature": "void testEnumParser()", "full_signature": "@Test public void testEnumParser()", "class_method_signature": "ParsersTest.testEnumParser()", "testcase": true, "constructor": false, "invocations": ["enumParser", "assertCompliance", "isEqualTo", "assertThat", "parse", "isNull", "assertThat", "parse"]}, "focal_class": {"identifier": "Parsers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Parser<File> FILE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onFile());", "modifier": "private static final", "type": "Parser<File>", "declarator": "FILE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onFile())", "var_name": "FILE_PARSER"}, {"original_string": "private static final Parser<Integer> INT_PARSER = new Adapter<>(nbbrd.io.text.Parser.onInteger());", "modifier": "private static final", "type": "Parser<Integer>", "declarator": "INT_PARSER = new Adapter<>(nbbrd.io.text.Parser.onInteger())", "var_name": "INT_PARSER"}, {"original_string": "private static final Parser<Long> LONG_PARSER = new Adapter<>(nbbrd.io.text.Parser.onLong());", "modifier": "private static final", "type": "Parser<Long>", "declarator": "LONG_PARSER = new Adapter<>(nbbrd.io.text.Parser.onLong())", "var_name": "LONG_PARSER"}, {"original_string": "private static final Parser<Double> DOUBLE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onDouble());", "modifier": "private static final", "type": "Parser<Double>", "declarator": "DOUBLE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onDouble())", "var_name": "DOUBLE_PARSER"}, {"original_string": "private static final Parser<Boolean> BOOL_PARSER = new Adapter<>(nbbrd.io.text.Parser.onBoolean());", "modifier": "private static final", "type": "Parser<Boolean>", "declarator": "BOOL_PARSER = new Adapter<>(nbbrd.io.text.Parser.onBoolean())", "var_name": "BOOL_PARSER"}, {"original_string": "private static final Parser<Character> CHAR_PARSER = new Adapter<>(nbbrd.io.text.Parser.onCharacter());", "modifier": "private static final", "type": "Parser<Character>", "declarator": "CHAR_PARSER = new Adapter<>(nbbrd.io.text.Parser.onCharacter())", "var_name": "CHAR_PARSER"}, {"original_string": "private static final Parser<Charset> CHARSET_PARSER = new Adapter<>(nbbrd.io.text.Parser.onCharset());", "modifier": "private static final", "type": "Parser<Charset>", "declarator": "CHARSET_PARSER = new Adapter<>(nbbrd.io.text.Parser.onCharset())", "var_name": "CHARSET_PARSER"}, {"original_string": "private static final Parser<String> STRING_PARSER = new Adapter<>(nbbrd.io.text.Parser.onString());", "modifier": "private static final", "type": "Parser<String>", "declarator": "STRING_PARSER = new Adapter<>(nbbrd.io.text.Parser.onString())", "var_name": "STRING_PARSER"}, {"original_string": "private static final Parser<double[]> DOUBLE_ARRAY_PARSER = new Adapter<>(nbbrd.io.text.Parser.onDoubleArray());", "modifier": "private static final", "type": "Parser<double[]>", "declarator": "DOUBLE_ARRAY_PARSER = new Adapter<>(nbbrd.io.text.Parser.onDoubleArray())", "var_name": "DOUBLE_ARRAY_PARSER"}, {"original_string": "private static final Parser<String[]> STRING_ARRAY_PARSER = new Adapter<>(nbbrd.io.text.Parser.onStringArray());", "modifier": "private static final", "type": "Parser<String[]>", "declarator": "STRING_ARRAY_PARSER = new Adapter<>(nbbrd.io.text.Parser.onStringArray())", "var_name": "STRING_ARRAY_PARSER"}, {"original_string": "private static final Parser<Locale> LOCALE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onLocale());", "modifier": "private static final", "type": "Parser<Locale>", "declarator": "LOCALE_PARSER = new Adapter<>(nbbrd.io.text.Parser.onLocale())", "var_name": "LOCALE_PARSER"}], "methods": [{"identifier": "Parsers", "parameters": "()", "modifiers": "private", "return": "", "signature": " Parsers()", "full_signature": "private  Parsers()", "class_method_signature": "Parsers.Parsers()", "testcase": false, "constructor": true}, {"identifier": "parseFirstNotNull", "parameters": "(@NonNull CharSequence input, @NonNull Iterable<? extends IParser<T>> parsers)", "modifiers": "@Nullable public static", "return": "T", "signature": "T parseFirstNotNull(@NonNull CharSequence input, @NonNull Iterable<? extends IParser<T>> parsers)", "full_signature": "@Nullable public static T parseFirstNotNull(@NonNull CharSequence input, @NonNull Iterable<? extends IParser<T>> parsers)", "class_method_signature": "Parsers.parseFirstNotNull(@NonNull CharSequence input, @NonNull Iterable<? extends IParser<T>> parsers)", "testcase": false, "constructor": false}, {"identifier": "firstNotNull", "parameters": "(IParser<T>... parsers)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> firstNotNull(IParser<T>... parsers)", "full_signature": "@NonNull public static Parser<T> firstNotNull(IParser<T>... parsers)", "class_method_signature": "Parsers.firstNotNull(IParser<T>... parsers)", "testcase": false, "constructor": false}, {"identifier": "firstNotNull", "parameters": "(@NonNull ImmutableList<? extends IParser<T>> parsers)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> firstNotNull(@NonNull ImmutableList<? extends IParser<T>> parsers)", "full_signature": "@NonNull public static Parser<T> firstNotNull(@NonNull ImmutableList<? extends IParser<T>> parsers)", "class_method_signature": "Parsers.firstNotNull(@NonNull ImmutableList<? extends IParser<T>> parsers)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull Class<T> classToBeParsed)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> onJAXB(@NonNull Class<T> classToBeParsed)", "full_signature": "@NonNull public static Parser<T> onJAXB(@NonNull Class<T> classToBeParsed)", "class_method_signature": "Parsers.onJAXB(@NonNull Class<T> classToBeParsed)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull JAXBContext context)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> onJAXB(@NonNull JAXBContext context)", "full_signature": "@NonNull public static Parser<T> onJAXB(@NonNull JAXBContext context)", "class_method_signature": "Parsers.onJAXB(@NonNull JAXBContext context)", "testcase": false, "constructor": false}, {"identifier": "onJAXB", "parameters": "(@NonNull Unmarshaller unmarshaller)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> onJAXB(@NonNull Unmarshaller unmarshaller)", "full_signature": "@NonNull public static Parser<T> onJAXB(@NonNull Unmarshaller unmarshaller)", "class_method_signature": "Parsers.onJAXB(@NonNull Unmarshaller unmarshaller)", "testcase": false, "constructor": false}, {"identifier": "onStrictDatePattern", "parameters": "(@NonNull String datePattern, @NonNull Locale locale)", "modifiers": "@Deprecated public static", "return": "Parsers.@NonNull Parser<Date>", "signature": "Parsers.@NonNull Parser<Date> onStrictDatePattern(@NonNull String datePattern, @NonNull Locale locale)", "full_signature": "@Deprecated public static Parsers.@NonNull Parser<Date> onStrictDatePattern(@NonNull String datePattern, @NonNull Locale locale)", "class_method_signature": "Parsers.onStrictDatePattern(@NonNull String datePattern, @NonNull Locale locale)", "testcase": false, "constructor": false}, {"identifier": "onDateFormat", "parameters": "(@NonNull DateFormat dateFormat)", "modifiers": "@NonNull public static", "return": "Parser<Date>", "signature": "Parser<Date> onDateFormat(@NonNull DateFormat dateFormat)", "full_signature": "@NonNull public static Parser<Date> onDateFormat(@NonNull DateFormat dateFormat)", "class_method_signature": "Parsers.onDateFormat(@NonNull DateFormat dateFormat)", "testcase": false, "constructor": false}, {"identifier": "onNumberFormat", "parameters": "(@NonNull NumberFormat numberFormat)", "modifiers": "@NonNull public static", "return": "Parser<Number>", "signature": "Parser<Number> onNumberFormat(@NonNull NumberFormat numberFormat)", "full_signature": "@NonNull public static Parser<Number> onNumberFormat(@NonNull NumberFormat numberFormat)", "class_method_signature": "Parsers.onNumberFormat(@NonNull NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "onNull", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> onNull()", "full_signature": "@NonNull public static Parser<T> onNull()", "class_method_signature": "Parsers.onNull()", "testcase": false, "constructor": false}, {"identifier": "ofInstance", "parameters": "(@Nullable T instance)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> ofInstance(@Nullable T instance)", "full_signature": "@NonNull public static Parser<T> ofInstance(@Nullable T instance)", "class_method_signature": "Parsers.ofInstance(@Nullable T instance)", "testcase": false, "constructor": false}, {"identifier": "fileParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<File>", "signature": "Parser<File> fileParser()", "full_signature": "@NonNull public static Parser<File> fileParser()", "class_method_signature": "Parsers.fileParser()", "testcase": false, "constructor": false}, {"identifier": "intParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Integer>", "signature": "Parser<Integer> intParser()", "full_signature": "@NonNull public static Parser<Integer> intParser()", "class_method_signature": "Parsers.intParser()", "testcase": false, "constructor": false}, {"identifier": "longParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Long>", "signature": "Parser<Long> longParser()", "full_signature": "@NonNull public static Parser<Long> longParser()", "class_method_signature": "Parsers.longParser()", "testcase": false, "constructor": false}, {"identifier": "boolParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Boolean>", "signature": "Parser<Boolean> boolParser()", "full_signature": "@NonNull public static Parser<Boolean> boolParser()", "class_method_signature": "Parsers.boolParser()", "testcase": false, "constructor": false}, {"identifier": "charParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Character>", "signature": "Parser<Character> charParser()", "full_signature": "@NonNull public static Parser<Character> charParser()", "class_method_signature": "Parsers.charParser()", "testcase": false, "constructor": false}, {"identifier": "doubleParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Double>", "signature": "Parser<Double> doubleParser()", "full_signature": "@NonNull public static Parser<Double> doubleParser()", "class_method_signature": "Parsers.doubleParser()", "testcase": false, "constructor": false}, {"identifier": "charsetParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Charset>", "signature": "Parser<Charset> charsetParser()", "full_signature": "@NonNull public static Parser<Charset> charsetParser()", "class_method_signature": "Parsers.charsetParser()", "testcase": false, "constructor": false}, {"identifier": "enumParser", "parameters": "(@NonNull Class<T> enumClass)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> enumParser(@NonNull Class<T> enumClass)", "full_signature": "@NonNull public static Parser<T> enumParser(@NonNull Class<T> enumClass)", "class_method_signature": "Parsers.enumParser(@NonNull Class<T> enumClass)", "testcase": false, "constructor": false}, {"identifier": "stringParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<String>", "signature": "Parser<String> stringParser()", "full_signature": "@NonNull public static Parser<String> stringParser()", "class_method_signature": "Parsers.stringParser()", "testcase": false, "constructor": false}, {"identifier": "doubleArrayParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<double[]>", "signature": "Parser<double[]> doubleArrayParser()", "full_signature": "@NonNull public static Parser<double[]> doubleArrayParser()", "class_method_signature": "Parsers.doubleArrayParser()", "testcase": false, "constructor": false}, {"identifier": "stringArrayParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<String[]>", "signature": "Parser<String[]> stringArrayParser()", "full_signature": "@NonNull public static Parser<String[]> stringArrayParser()", "class_method_signature": "Parsers.stringArrayParser()", "testcase": false, "constructor": false}, {"identifier": "localeParser", "parameters": "()", "modifiers": "@NonNull public static", "return": "Parser<Locale>", "signature": "Parser<Locale> localeParser()", "full_signature": "@NonNull public static Parser<Locale> localeParser()", "class_method_signature": "Parsers.localeParser()", "testcase": false, "constructor": false}, {"identifier": "compose", "parameters": "(@NonNull IParser<X> parser, @NonNull Function<X, Y> after)", "modifiers": "@NonNull public static", "return": "Parser<Y>", "signature": "Parser<Y> compose(@NonNull IParser<X> parser, @NonNull Function<X, Y> after)", "full_signature": "@NonNull public static Parser<Y> compose(@NonNull IParser<X> parser, @NonNull Function<X, Y> after)", "class_method_signature": "Parsers.compose(@NonNull IParser<X> parser, @NonNull Function<X, Y> after)", "testcase": false, "constructor": false}, {"identifier": "onSplitter", "parameters": "(@NonNull Splitter splitter)", "modifiers": "@NonNull public static", "return": "Parser<List<String>>", "signature": "Parser<List<String>> onSplitter(@NonNull Splitter splitter)", "full_signature": "@NonNull public static Parser<List<String>> onSplitter(@NonNull Splitter splitter)", "class_method_signature": "Parsers.onSplitter(@NonNull Splitter splitter)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(@NonNull IParser<T> parser)", "modifiers": "@NonNull public static", "return": "Parser<T>", "signature": "Parser<T> wrap(@NonNull IParser<T> parser)", "full_signature": "@NonNull public static Parser<T> wrap(@NonNull IParser<T> parser)", "class_method_signature": "Parsers.wrap(@NonNull IParser<T> parser)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/Parsers.java"}, "focal_method": {"identifier": "enumParser", "parameters": "(@NonNull Class<T> enumClass)", "modifiers": "@NonNull public static", "return": "Parser<T>", "body": "@NonNull\n    public static <T extends Enum<T>> Parser<T> enumParser(@NonNull Class<T> enumClass) {\n        return new Adapter<>(nbbrd.io.text.Parser.onEnum(enumClass));\n    }", "signature": "Parser<T> enumParser(@NonNull Class<T> enumClass)", "full_signature": "@NonNull public static Parser<T> enumParser(@NonNull Class<T> enumClass)", "class_method_signature": "Parsers.enumParser(@NonNull Class<T> enumClass)", "testcase": false, "constructor": false, "invocations": ["onEnum"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}