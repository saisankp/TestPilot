{"test_class": {"identifier": "RetroProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final MockWebServer server = new MockWebServer();", "modifier": "@Rule\n    public final", "type": "MockWebServer", "declarator": "server = new MockWebServer()", "var_name": "server"}], "file": "retro-jus/src/test/java/io/apptik/comm/jus/retro/RetroProxyTest.java"}, "test_case": {"identifier": "baseHttpUrlPropagated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void baseHttpUrlPropagated() {\n        HttpUrl url = HttpUrl.parse(\"http://example.com/\");\n        RetroProxy retroProxy = new RetroProxy.Builder()\n                .baseUrl(url)\n                .build();\n        HttpUrl baseUrl = retroProxy.baseUrl();\n        assertThat(baseUrl).isNotNull();\n        assertThat(baseUrl).isSameAs(url);\n    }", "signature": "void baseHttpUrlPropagated()", "full_signature": "@Test public void baseHttpUrlPropagated()", "class_method_signature": "RetroProxyTest.baseHttpUrlPropagated()", "testcase": true, "constructor": false, "invocations": ["parse", "build", "baseUrl", "baseUrl", "isNotNull", "assertThat", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "RetroProxy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Method, MethodHandler<?>> methodHandlerCache = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<Method, MethodHandler<?>>", "declarator": "methodHandlerCache = new LinkedHashMap<>()", "var_name": "methodHandlerCache"}, {"original_string": "private final RequestQueue requestQueue;", "modifier": "private final", "type": "RequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private final HttpUrl baseUrl;", "modifier": "private final", "type": "HttpUrl", "declarator": "baseUrl", "var_name": "baseUrl"}, {"original_string": "private final List<Factory> converters;", "modifier": "private final", "type": "List<Factory>", "declarator": "converters", "var_name": "converters"}, {"original_string": "private final boolean validateEagerly;", "modifier": "private final", "type": "boolean", "declarator": "validateEagerly", "var_name": "validateEagerly"}, {"original_string": "private final boolean execManually;", "modifier": "private final", "type": "boolean", "declarator": "execManually", "var_name": "execManually"}], "methods": [{"identifier": "RetroProxy", "parameters": "(RequestQueue requestQueue, HttpUrl baseUrl, List<Factory> converters,\n                       boolean validateEagerly, boolean execManually)", "modifiers": "private", "return": "", "signature": " RetroProxy(RequestQueue requestQueue, HttpUrl baseUrl, List<Factory> converters,\n                       boolean validateEagerly, boolean execManually)", "full_signature": "private  RetroProxy(RequestQueue requestQueue, HttpUrl baseUrl, List<Factory> converters,\n                       boolean validateEagerly, boolean execManually)", "class_method_signature": "RetroProxy.RetroProxy(RequestQueue requestQueue, HttpUrl baseUrl, List<Factory> converters,\n                       boolean validateEagerly, boolean execManually)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final Class<T> service)", "modifiers": "@SuppressWarnings(\"unchecked\") // Single-interface proxy creation guarded by parameter safety. public", "return": "T", "signature": "T create(final Class<T> service)", "full_signature": "@SuppressWarnings(\"unchecked\") // Single-interface proxy creation guarded by parameter safety. public T create(final Class<T> service)", "class_method_signature": "RetroProxy.create(final Class<T> service)", "testcase": false, "constructor": false}, {"identifier": "eagerlyValidateMethods", "parameters": "(Class<?> service)", "modifiers": "private", "return": "void", "signature": "void eagerlyValidateMethods(Class<?> service)", "full_signature": "private void eagerlyValidateMethods(Class<?> service)", "class_method_signature": "RetroProxy.eagerlyValidateMethods(Class<?> service)", "testcase": false, "constructor": false}, {"identifier": "loadMethodHandler", "parameters": "(Method method)", "modifiers": "", "return": "MethodHandler<?>", "signature": "MethodHandler<?> loadMethodHandler(Method method)", "full_signature": " MethodHandler<?> loadMethodHandler(Method method)", "class_method_signature": "RetroProxy.loadMethodHandler(Method method)", "testcase": false, "constructor": false}, {"identifier": "requestQueue", "parameters": "()", "modifiers": "public", "return": "RequestQueue", "signature": "RequestQueue requestQueue()", "full_signature": "public RequestQueue requestQueue()", "class_method_signature": "RetroProxy.requestQueue()", "testcase": false, "constructor": false}, {"identifier": "execManually", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean execManually()", "full_signature": "public boolean execManually()", "class_method_signature": "RetroProxy.execManually()", "testcase": false, "constructor": false}, {"identifier": "baseUrl", "parameters": "()", "modifiers": "public", "return": "HttpUrl", "signature": "HttpUrl baseUrl()", "full_signature": "public HttpUrl baseUrl()", "class_method_signature": "RetroProxy.baseUrl()", "testcase": false, "constructor": false}, {"identifier": "converterFactories", "parameters": "()", "modifiers": "public", "return": "List<Factory>", "signature": "List<Factory> converterFactories()", "full_signature": "public List<Factory> converterFactories()", "class_method_signature": "RetroProxy.converterFactories()", "testcase": false, "constructor": false}, {"identifier": "requestConverter", "parameters": "(Type type, Annotation[] annotations)", "modifiers": "public", "return": "Converter<?, NetworkRequest>", "signature": "Converter<?, NetworkRequest> requestConverter(Type type, Annotation[] annotations)", "full_signature": "public Converter<?, NetworkRequest> requestConverter(Type type, Annotation[] annotations)", "class_method_signature": "RetroProxy.requestConverter(Type type, Annotation[] annotations)", "testcase": false, "constructor": false}, {"identifier": "responseConverter", "parameters": "(Type type, Annotation[] annotations)", "modifiers": "public", "return": "Converter<NetworkResponse, ?>", "signature": "Converter<NetworkResponse, ?> responseConverter(Type type, Annotation[] annotations)", "full_signature": "public Converter<NetworkResponse, ?> responseConverter(Type type, Annotation[] annotations)", "class_method_signature": "RetroProxy.responseConverter(Type type, Annotation[] annotations)", "testcase": false, "constructor": false}], "file": "retro-jus/src/main/java/io/apptik/comm/jus/retro/RetroProxy.java"}, "focal_method": {"identifier": "baseUrl", "parameters": "()", "modifiers": "public", "return": "HttpUrl", "body": "public HttpUrl baseUrl() {\n        return baseUrl;\n    }", "signature": "HttpUrl baseUrl()", "full_signature": "public HttpUrl baseUrl()", "class_method_signature": "RetroProxy.baseUrl()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}