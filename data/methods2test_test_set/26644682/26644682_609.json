{"test_class": {"identifier": "XlsWriterTest", "superclass": "extends BaseFormatTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TransformerFactory factory;", "modifier": "@Autowired\n    private", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private OutputStream outputStream;", "modifier": "private", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "protected TransformerWriter writer;", "modifier": "protected", "type": "TransformerWriter", "declarator": "writer", "var_name": "writer"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/format/XlsWriterTest.java"}, "test_case": {"identifier": "should_only_write_values_in_columns_order_TDP_3188", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void should_only_write_values_in_columns_order_TDP_3188() throws Exception {\n        final Map<String, String> values = new HashMap<>();\n        values.put(\"key\", \"value\");\n        DataSetRow row = new DataSetRow(new RowMetadata(), values);\n\n        writer.write(row);\n    }", "signature": "void should_only_write_values_in_columns_order_TDP_3188()", "full_signature": "@Test(expected = IllegalStateException.class) public void should_only_write_values_in_columns_order_TDP_3188()", "class_method_signature": "XlsWriterTest.should_only_write_values_in_columns_order_TDP_3188()", "testcase": true, "constructor": false, "invocations": ["put", "write"]}, "focal_class": {"identifier": "XlsWriter", "superclass": "", "interfaces": "implements TransformerWriter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XlsWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XlsWriter.class)", "var_name": "LOGGER"}, {"original_string": "private static final char BUFFER_CSV_SEPARATOR = ',';", "modifier": "private static final", "type": "char", "declarator": "BUFFER_CSV_SEPARATOR = ','", "var_name": "BUFFER_CSV_SEPARATOR"}, {"original_string": "private final OutputStream outputStream;", "modifier": "private final", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "private final SXSSFWorkbook workbook;", "modifier": "private final", "type": "SXSSFWorkbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "private final Sheet sheet;", "modifier": "private final", "type": "Sheet", "declarator": "sheet", "var_name": "sheet"}, {"original_string": "private ObjectBuffer<String[]> rowsBuffer;", "modifier": "private", "type": "ObjectBuffer<String[]>", "declarator": "rowsBuffer", "var_name": "rowsBuffer"}, {"original_string": "private RowMetadata writtenMetadata;", "modifier": "private", "type": "RowMetadata", "declarator": "writtenMetadata", "var_name": "writtenMetadata"}, {"original_string": "private int rowIdx = 0;", "modifier": "private", "type": "int", "declarator": "rowIdx = 0", "var_name": "rowIdx"}, {"original_string": "private boolean closed = false;", "modifier": "private", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "XlsWriter", "parameters": "(final OutputStream output)", "modifiers": "public", "return": "", "signature": " XlsWriter(final OutputStream output)", "full_signature": "public  XlsWriter(final OutputStream output)", "class_method_signature": "XlsWriter.XlsWriter(final OutputStream output)", "testcase": false, "constructor": true}, {"identifier": "XlsWriter", "parameters": "(final OutputStream output, Map<String, String> parameters)", "modifiers": "public", "return": "", "signature": " XlsWriter(final OutputStream output, Map<String, String> parameters)", "full_signature": "public  XlsWriter(final OutputStream output, Map<String, String> parameters)", "class_method_signature": "XlsWriter.XlsWriter(final OutputStream output, Map<String, String> parameters)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(DataSetRow row)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataSetRow row)", "full_signature": "@Override public void write(DataSetRow row)", "class_method_signature": "XlsWriter.write(DataSetRow row)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(RowMetadata metadata)", "modifiers": "@Override public", "return": "void", "signature": "void write(RowMetadata metadata)", "full_signature": "@Override public void write(RowMetadata metadata)", "class_method_signature": "XlsWriter.write(RowMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(RowMetadata metadata)", "modifiers": "private", "return": "void", "signature": "void writeHeader(RowMetadata metadata)", "full_signature": "private void writeHeader(RowMetadata metadata)", "class_method_signature": "XlsWriter.writeHeader(RowMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "internalWriteRow", "parameters": "(RowMetadata metadata, String[] nextRow)", "modifiers": "private", "return": "void", "signature": "void internalWriteRow(RowMetadata metadata, String[] nextRow)", "full_signature": "private void internalWriteRow(RowMetadata metadata, String[] nextRow)", "class_method_signature": "XlsWriter.internalWriteRow(RowMetadata metadata, String[] nextRow)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "XlsWriter.close()", "testcase": false, "constructor": false}, {"identifier": "safeCloseObjectBuffer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void safeCloseObjectBuffer()", "full_signature": "private void safeCloseObjectBuffer()", "class_method_signature": "XlsWriter.safeCloseObjectBuffer()", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/format/XlsWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(DataSetRow row)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(DataSetRow row) throws IOException {\n        if (!row.values().isEmpty() && row.getRowMetadata().getColumns().isEmpty()) {\n            throw new IllegalStateException(\n                    \" If a dataset row has some values it should at least have columns just before writing the result of a non json transformation.\");\n        }\n        // values need to be written in the same order as the columns\n        String[] rowValues = row.order().toArray(DataSetRow.SKIP_TDP_ID);\n        if (writtenMetadata == null) {\n            rowsBuffer.appendRow(rowValues);\n        } else {\n            internalWriteRow(writtenMetadata, rowValues);\n        }\n    }", "signature": "void write(DataSetRow row)", "full_signature": "@Override public void write(DataSetRow row)", "class_method_signature": "XlsWriter.write(DataSetRow row)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "values", "isEmpty", "getColumns", "getRowMetadata", "toArray", "order", "appendRow", "internalWriteRow"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}