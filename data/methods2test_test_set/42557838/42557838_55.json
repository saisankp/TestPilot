{"test_class": {"identifier": "LocaleParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final LocaleParser LOCALE_PARSER = new LocaleParser();", "modifier": "private static final", "type": "LocaleParser", "declarator": "LOCALE_PARSER = new LocaleParser()", "var_name": "LOCALE_PARSER"}], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/LocaleParserTest.java"}, "test_case": {"identifier": "shouldParseLocalesAndRespectWeights", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseLocalesAndRespectWeights() throws MalformedInputException {\n        String localeString = \"pl-PL,ru;q=0.2,en;q=0.4,ro;q=0.3,pl;q=0.8\";\n        List<Locale> locales = LOCALE_PARSER.parse(localeString);\n\n        assertThat(locales.get(0), is(new Locale(\"pl\")));\n        assertThat(locales.get(1), is(new Locale(\"en\")));\n        assertThat(locales.get(2), is(new Locale(\"ro\")));\n        assertThat(locales.get(3), is(new Locale(\"ru\")));\n    }", "signature": "void shouldParseLocalesAndRespectWeights()", "full_signature": "@Test public void shouldParseLocalesAndRespectWeights()", "class_method_signature": "LocaleParserTest.shouldParseLocalesAndRespectWeights()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "LocaleParser", "superclass": "", "interfaces": "implements Parser<List<Locale>>", "fields": [{"original_string": "private static final String LOCALE_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "LOCALE_SEPARATOR = \",\"", "var_name": "LOCALE_SEPARATOR"}, {"original_string": "private static final String WEIGHT_SEPARATOR = \";\";", "modifier": "private static final", "type": "String", "declarator": "WEIGHT_SEPARATOR = \";\"", "var_name": "WEIGHT_SEPARATOR"}, {"original_string": "private static final String WEIGHT_PREFIX = \"q=\";", "modifier": "private static final", "type": "String", "declarator": "WEIGHT_PREFIX = \"q=\"", "var_name": "WEIGHT_PREFIX"}], "methods": [{"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "List<Locale>", "signature": "List<Locale> parse(final String input)", "full_signature": "@Override public List<Locale> parse(final String input)", "class_method_signature": "LocaleParser.parse(final String input)", "testcase": false, "constructor": false}, {"identifier": "toLocales", "parameters": "(final List<LocaleWithWeight> localesWithWeight)", "modifiers": "private", "return": "List<Locale>", "signature": "List<Locale> toLocales(final List<LocaleWithWeight> localesWithWeight)", "full_signature": "private List<Locale> toLocales(final List<LocaleWithWeight> localesWithWeight)", "class_method_signature": "LocaleParser.toLocales(final List<LocaleWithWeight> localesWithWeight)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/LocaleParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "List<Locale>", "body": "@Override\n    public List<Locale> parse(final String input) throws MalformedInputException {\n        String[] localesStr = input.split(LOCALE_SEPARATOR);\n        List<LocaleWithWeight> localesWithWeight = new ArrayList<>();\n\n        for (String locale : localesStr) {\n            double weight = 1.0;\n            String[] localeParts = locale.split(WEIGHT_SEPARATOR);\n\n            if (localeParts.length == 0) {\n                continue;\n            }\n\n            if (localeParts[0].length() != 2) {\n                continue;\n            }\n\n            if (localeParts.length > 1 && localeParts[1].length() > 0) {\n                if (localeParts[1].startsWith(WEIGHT_PREFIX)) {\n                    weight = Double.parseDouble(localeParts[1].substring(2));\n                } else {\n                    continue;\n                }\n            }\n\n            localesWithWeight.add(new LocaleWithWeight(new Locale(localeParts[0]), weight));\n        }\n\n        return toLocales(localesWithWeight);\n    }", "signature": "List<Locale> parse(final String input)", "full_signature": "@Override public List<Locale> parse(final String input)", "class_method_signature": "LocaleParser.parse(final String input)", "testcase": false, "constructor": false, "invocations": ["split", "split", "length", "length", "startsWith", "parseDouble", "substring", "add", "toLocales"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}