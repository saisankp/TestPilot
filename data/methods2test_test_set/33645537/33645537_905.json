{"test_class": {"identifier": "KafkaSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KafkaSink.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KafkaSink.class)", "var_name": "LOGGER"}, {"original_string": "private AbstractSource source;", "modifier": "private", "type": "AbstractSource", "declarator": "source", "var_name": "source"}, {"original_string": "private Channel channel = new MemoryChannel();", "modifier": "private", "type": "Channel", "declarator": "channel = new MemoryChannel()", "var_name": "channel"}, {"original_string": "private Context context = new Context();", "modifier": "private", "type": "Context", "declarator": "context = new Context()", "var_name": "context"}, {"original_string": "private ChannelSelector rcs = new ReplicatingChannelSelector();", "modifier": "private", "type": "ChannelSelector", "declarator": "rcs = new ReplicatingChannelSelector()", "var_name": "rcs"}], "file": "big/src/test/java/org/apache/flume/plugins/KafkaSourceTest.java"}, "test_case": {"identifier": "testAppend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAppend() throws Exception {\n        LOGGER.info(\"Begin Seding message to Kafka................\");\n        source.start();\n\n        //send message\n        sendMessageToKafka();\n\n        Thread.sleep(5000);\n\n        //get message from channel\n        Transaction transaction = channel.getTransaction();\n\n        try{\n\n            transaction.begin();\n            Event event;\n            while ((event = channel.take()) != null) {\n                LOGGER.info(\"#get channel########\" + new String(event.getBody(), \"UTF-8\"));\n            }\n            transaction.commit();\n        } finally{\n            transaction.close();\n        }\n    }", "signature": "void testAppend()", "full_signature": "@Test public void testAppend()", "class_method_signature": "KafkaSourceTest.testAppend()", "testcase": true, "constructor": false, "invocations": ["info", "start", "sendMessageToKafka", "sleep", "getTransaction", "begin", "take", "info", "getBody", "commit", "close"]}, "focal_class": {"identifier": "KafkaSource", "superclass": "extends AbstractSource", "interfaces": "implements EventDrivenSource, Configurable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KafkaSink.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KafkaSink.class)", "var_name": "LOGGER"}, {"original_string": "private Properties parameters;", "modifier": "private", "type": "Properties", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private SourceCounter sourceCounter;", "modifier": "private", "type": "SourceCounter", "declarator": "sourceCounter", "var_name": "sourceCounter"}, {"original_string": "private ConsumerConnector consumerConnector;", "modifier": "private", "type": "ConsumerConnector", "declarator": "consumerConnector", "var_name": "consumerConnector"}], "methods": [{"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "KafkaSource.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "KafkaSource.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void stop()", "full_signature": "@Override public synchronized void stop()", "class_method_signature": "KafkaSource.stop()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void shutdown()", "full_signature": "private void shutdown()", "class_method_signature": "KafkaSource.shutdown()", "testcase": false, "constructor": false}], "file": "big/src/main/java/org/apache/flume/plugins/KafkaSource.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void start() {\n\n        super.start();\n        sourceCounter.start();\n        LOGGER.info(\"Kafka Source started...\");\n\n        // make config object\n        ConsumerConfig consumerConfig = new ConsumerConfig(this.parameters);\n        consumerConnector = kafka.consumer.Consumer.createJavaConsumerConnector(consumerConfig);\n\n        Map<String, Integer> topicCountMap = new HashMap<String, Integer>();\n\n        // flume-conf.properties\u4e2dconsumer.sources.s.custom.topic.name\u7684\u914d\u7f6e\u9879, \u548cproducer.sinks.r.custom.topic.name\u5fc5\u987b\u4e00\u6837\n        String topic = (String) this.parameters.get(KafkaFlumeConstans.CUSTOM_TOPIC_KEY_NAME);\n        // \u6bcf\u4e2aconsumer\u53ef\u4ee5\u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b\n        String threadCount = (String) this.parameters.get(KafkaFlumeConstans.CUSTOM_CONSUMER_THREAD_COUNT_KEY_NAME);\n\n        topicCountMap.put(topic, new Integer(threadCount));\n\n        // \u5bf9\u4e8e\u4e00\u4e2a\u6307\u5b9a\u7684topic, \u4e00\u4e2aconsumer\u53ef\u4ee5\u5f00\u542f\u591a\u4e2a\u7ebf\u7a0b\u53bb\u83b7\u53d6\u6570\u636e. \u8fd9\u6837\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5c31\u662f\u4e00\u4e2aKafkaStream\n        Map<String, List<KafkaStream<byte[], byte[]>>> consumerMap = consumerConnector\n                .createMessageStreams(topicCountMap);\n\n        List<KafkaStream<byte[], byte[]>> streams = consumerMap.get(topic);\n\n        // now launch all the threads \u7ebf\u7a0b\u6c60\n        this.executorService = Executors.newFixedThreadPool(Integer.parseInt(threadCount));\n\n        // now create an object to consume the messages\n        // \u6bcf\u4e00\u4e2aKafkaStream\u90fd\u542f\u52a8\u4e00\u4e2aConsumerWorker\u5de5\u4f5c\u7ebf\u7a0b\n        int tNumber = 0;\n        for (final KafkaStream stream : streams) {\n            this.executorService.submit(new ConsumerWorker(stream, tNumber, sourceCounter));\n            tNumber++;\n        }\n    }", "signature": "void start()", "full_signature": "@Override public synchronized void start()", "class_method_signature": "KafkaSource.start()", "testcase": false, "constructor": false, "invocations": ["start", "start", "info", "createJavaConsumerConnector", "get", "get", "put", "createMessageStreams", "get", "newFixedThreadPool", "parseInt", "submit"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}