{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MockMvc mockMvc;", "modifier": "@Autowired\n    private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Autowired\n    private TokenFactory tokenFactory;", "modifier": "@Autowired\n    private", "type": "TokenFactory", "declarator": "tokenFactory", "var_name": "tokenFactory"}, {"original_string": "@Autowired\n    private OAuth2Properties oAuth2Properties;", "modifier": "@Autowired\n    private", "type": "OAuth2Properties", "declarator": "oAuth2Properties", "var_name": "oAuth2Properties"}, {"original_string": "private ObjectMapper objectMapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private OAuth2AccessToken accessToken;", "modifier": "private", "type": "OAuth2AccessToken", "declarator": "accessToken", "var_name": "accessToken"}], "file": "lzpeng-boot-server/src/test/java/com/lzpeng/project/sys/controller/UserControllerTest.java"}, "test_case": {"identifier": "testSave", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSave() throws Exception {\n        User user = new User();\n        user.setUsername(\"af\");\n        user.setPassword(\"123456\");\n        String content = objectMapper.writeValueAsString(user);\n        String result = mockMvc.perform(post(\"/sys/user\")\n                .header(HttpHeaders.AUTHORIZATION, String.join(\" \", accessToken.getTokenType(), accessToken.getValue()))\n                .content(content) // @RequestBody \u89e3\u6790\n                .contentType(MediaType.APPLICATION_JSON_UTF8) // @RequestBody \u89e3\n//                .param(\"xxx\", \"xxx\")// @RequestParam \u89e3\u6790\n//                .contentType(MediaType.APPLICATION_FORM_URLENCODED) // @RequestParam \u89e3\u6790\n                .accept(MediaType.APPLICATION_JSON_UTF8)) // \u54cd\u5e94\u7c7b\u578b\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$.data.id\").isNotEmpty())\n                .andReturn().getResponse().getContentAsString();\n        log.info(\"{}\",result);\n    }", "signature": "void testSave()", "full_signature": "@Test public void testSave()", "class_method_signature": "UserControllerTest.testSave()", "testcase": true, "constructor": false, "invocations": ["setUsername", "setPassword", "writeValueAsString", "getContentAsString", "getResponse", "andReturn", "andExpect", "andExpect", "perform", "accept", "contentType", "content", "header", "post", "join", "getTokenType", "getValue", "isOk", "status", "isNotEmpty", "jsonPath", "info"]}, "focal_class": {"identifier": "UserController", "superclass": "extends LeftTreeRightTableControllerImpl<Department, User>", "interfaces": "", "fields": [{"original_string": "private static final String MODULE_NAME = \"sys\";", "modifier": "private static final", "type": "String", "declarator": "MODULE_NAME = \"sys\"", "var_name": "MODULE_NAME"}, {"original_string": "private static final String CLASS_NAME = \"user\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = \"user\"", "var_name": "CLASS_NAME"}, {"original_string": "private static final String LIST_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":list\";", "modifier": "private static final", "type": "String", "declarator": "LIST_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":list\"", "var_name": "LIST_PERM"}, {"original_string": "private static final String QUERY_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":query\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":query\"", "var_name": "QUERY_PERM"}, {"original_string": "private static final String ADD_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":add\";", "modifier": "private static final", "type": "String", "declarator": "ADD_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":add\"", "var_name": "ADD_PERM"}, {"original_string": "private static final String DELETE_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":delete\";", "modifier": "private static final", "type": "String", "declarator": "DELETE_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":delete\"", "var_name": "DELETE_PERM"}, {"original_string": "private static final String EDIT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":edit\";", "modifier": "private static final", "type": "String", "declarator": "EDIT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":edit\"", "var_name": "EDIT_PERM"}, {"original_string": "private static final String EXPORT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":export\";", "modifier": "private static final", "type": "String", "declarator": "EXPORT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":export\"", "var_name": "EXPORT_PERM"}, {"original_string": "private static final String IMPORT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":import\";", "modifier": "private static final", "type": "String", "declarator": "IMPORT_PERM = MODULE_NAME + \":\" +  CLASS_NAME + \":import\"", "var_name": "IMPORT_PERM"}, {"original_string": "@Autowired\n    private UserAuditor userAuditor;", "modifier": "@Autowired\n    private", "type": "UserAuditor", "declarator": "userAuditor", "var_name": "userAuditor"}, {"original_string": "private UserService userService;", "modifier": "private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "methods": [{"identifier": "setUserService", "parameters": "(UserService userService)", "modifiers": "@Autowired public", "return": "void", "signature": "void setUserService(UserService userService)", "full_signature": "@Autowired public void setUserService(UserService userService)", "class_method_signature": "UserController.setUserService(UserService userService)", "testcase": false, "constructor": false}, {"identifier": "getTableInfo", "parameters": "()", "modifiers": "@Override @GetMapping(\"/dict\") @ApiOperation(\"\u83b7\u53d6\u7528\u6237\u7684\u6570\u636e\u5b57\u5178\") @PreAuthorize(\"hasAnyAuthority('\" + LIST_PERM + \"')\") public", "return": "Result<TableInfo>", "signature": "Result<TableInfo> getTableInfo()", "full_signature": "@Override @GetMapping(\"/dict\") @ApiOperation(\"\u83b7\u53d6\u7528\u6237\u7684\u6570\u636e\u5b57\u5178\") @PreAuthorize(\"hasAnyAuthority('\" + LIST_PERM + \"')\") public Result<TableInfo> getTableInfo()", "class_method_signature": "UserController.getTableInfo()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@Valid @RequestBody User model)", "modifiers": "@Override @PostMapping @ApiOperation(\"\u4fdd\u5b58\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + ADD_PERM + \"')\") public", "return": "Result<User>", "signature": "Result<User> save(@Valid @RequestBody User model)", "full_signature": "@Override @PostMapping @ApiOperation(\"\u4fdd\u5b58\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + ADD_PERM + \"')\") public Result<User> save(@Valid @RequestBody User model)", "class_method_signature": "UserController.save(@Valid @RequestBody User model)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "modifiers": "@Override @DeleteMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u5220\u9664\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + DELETE_PERM + \"')\") public", "return": "Result<Void>", "signature": "Result<Void> delete(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "full_signature": "@Override @DeleteMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u5220\u9664\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + DELETE_PERM + \"')\") public Result<Void> delete(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "class_method_signature": "UserController.delete(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id, /*@Valid*/@RequestBody User model) {", "modifiers": "@Override @PutMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u66f4\u65b0\u7528\u6237\") // @PreAuthorize(\"hasAnyAuthority('sys:user:edit') or principal.id.equals(#id)\") @PreAuthorize(\"hasAnyAuthority('\" + EDIT_PERM + \"')\") public", "return": "Result<User>", "signature": "Result<User> update(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id, /*@Valid*/@RequestBody User model) {", "full_signature": "@Override @PutMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u66f4\u65b0\u7528\u6237\") // @PreAuthorize(\"hasAnyAuthority('sys:user:edit') or principal.id.equals(#id)\") @PreAuthorize(\"hasAnyAuthority('\" + EDIT_PERM + \"')\") public Result<User> update(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id, /*@Valid*/@RequestBody User model) {", "class_method_signature": "UserController.update(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id, /*@Valid*/@RequestBody User model) {", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(@ApiParam(value = \"\u9875\u7801\", required = true) @PathVariable(\"page\") int page, @ApiParam(value = \"\u6bcf\u9875\u6570\u636e\u6761\u6570\", required = true) @PathVariable(\"size\") int size, User model) {", "modifiers": "@Override @GetMapping(\"/{page:[0-9]+}/{size:[0-9]+}\") @ApiOperation(\"\u5206\u9875\u67e5\u8be2\u7528\u6237\u5217\u8868\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public", "return": "Result<QueryResult<User>>", "signature": "Result<QueryResult<User>> query(@ApiParam(value = \"\u9875\u7801\", required = true) @PathVariable(\"page\") int page, @ApiParam(value = \"\u6bcf\u9875\u6570\u636e\u6761\u6570\", required = true) @PathVariable(\"size\") int size, User model) {", "full_signature": "@Override @GetMapping(\"/{page:[0-9]+}/{size:[0-9]+}\") @ApiOperation(\"\u5206\u9875\u67e5\u8be2\u7528\u6237\u5217\u8868\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<QueryResult<User>> query(@ApiParam(value = \"\u9875\u7801\", required = true) @PathVariable(\"page\") int page, @ApiParam(value = \"\u6bcf\u9875\u6570\u636e\u6761\u6570\", required = true) @PathVariable(\"size\") int size, User model) {", "class_method_signature": "UserController.query(@ApiParam(value = \"\u9875\u7801\", required = true) @PathVariable(\"page\") int page, @ApiParam(value = \"\u6bcf\u9875\u6570\u636e\u6761\u6570\", required = true) @PathVariable(\"size\") int size, User model) {", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "modifiers": "@Override @GetMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u6839\u636eID\u67e5\u8be2\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public", "return": "Result<User>", "signature": "Result<User> findById(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "full_signature": "@Override @GetMapping(\"/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u6839\u636eID\u67e5\u8be2\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<User> findById(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "class_method_signature": "UserController.findById(@ApiParam(value = \"\u4e3b\u952eid\", required = true) @PathVariable(\"id\") String id) {", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(@Valid @RequestBody User model)", "modifiers": "@PostMapping(\"/register\") @ApiOperation(\"\u7528\u6237\u6ce8\u518c\") public", "return": "Result<User>", "signature": "Result<User> register(@Valid @RequestBody User model)", "full_signature": "@PostMapping(\"/register\") @ApiOperation(\"\u7528\u6237\u6ce8\u518c\") public Result<User> register(@Valid @RequestBody User model)", "class_method_signature": "UserController.register(@Valid @RequestBody User model)", "testcase": false, "constructor": false}, {"identifier": "getCurrentUser", "parameters": "()", "modifiers": "@GetMapping(\"/me\") @ApiOperation(\"\u6211\u7684\u4fe1\u606f\") @PreAuthorize(\"isAuthenticated()\") public", "return": "UserDetails", "signature": "UserDetails getCurrentUser()", "full_signature": "@GetMapping(\"/me\") @ApiOperation(\"\u6211\u7684\u4fe1\u606f\") @PreAuthorize(\"isAuthenticated()\") public UserDetails getCurrentUser()", "class_method_signature": "UserController.getCurrentUser()", "testcase": false, "constructor": false}, {"identifier": "batch", "parameters": "(@RequestBody BatchModel<User> batch)", "modifiers": "@Override @PostMapping(\"/batch\") @ApiOperation(\"\u6279\u91cf\u64cd\u4f5c\u6570\u636e\") @PreAuthorize(\"hasAuthority('\" + ADD_PERM +\"') and hasAuthority('\" + EDIT_PERM +\"') and hasAuthority('\" + DELETE_PERM +\"')\") public", "return": "Result", "signature": "Result batch(@RequestBody BatchModel<User> batch)", "full_signature": "@Override @PostMapping(\"/batch\") @ApiOperation(\"\u6279\u91cf\u64cd\u4f5c\u6570\u636e\") @PreAuthorize(\"hasAuthority('\" + ADD_PERM +\"') and hasAuthority('\" + EDIT_PERM +\"') and hasAuthority('\" + DELETE_PERM +\"')\") public Result batch(@RequestBody BatchModel<User> batch)", "class_method_signature": "UserController.batch(@RequestBody BatchModel<User> batch)", "testcase": false, "constructor": false}, {"identifier": "setRoles", "parameters": "(@ApiParam(\"\u7528\u6237id\") @PathVariable String id, @ApiParam(\"\u89d2\u8272id\u6570\u7ec4\") @RequestBody String[] roles) {", "modifiers": "@PostMapping(value = \"/setRoles/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u5206\u914d\u89d2\u8272\") @PreAuthorize(\"hasAnyRole('ADMIN')\") public", "return": "Result<User>", "signature": "Result<User> setRoles(@ApiParam(\"\u7528\u6237id\") @PathVariable String id, @ApiParam(\"\u89d2\u8272id\u6570\u7ec4\") @RequestBody String[] roles) {", "full_signature": "@PostMapping(value = \"/setRoles/{id:^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+$}\") @ApiOperation(\"\u5206\u914d\u89d2\u8272\") @PreAuthorize(\"hasAnyRole('ADMIN')\") public Result<User> setRoles(@ApiParam(\"\u7528\u6237id\") @PathVariable String id, @ApiParam(\"\u89d2\u8272id\u6570\u7ec4\") @RequestBody String[] roles) {", "class_method_signature": "UserController.setRoles(@ApiParam(\"\u7528\u6237id\") @PathVariable String id, @ApiParam(\"\u89d2\u8272id\u6570\u7ec4\") @RequestBody String[] roles) {", "testcase": false, "constructor": false}, {"identifier": "hasPermissions", "parameters": "(@ApiParam(\"\u6743\u9650\u7f16\u7801\u6570\u7ec4\") @RequestBody String[] permissions) {", "modifiers": "@PostMapping(value = \"/hasPermissions\") @ApiOperation(\"\u5224\u65ad\u662f\u5426\u6709\u6743\u9650\") @PreAuthorize(\"isAuthenticated()\") public", "return": "Result<String>", "signature": "Result<String> hasPermissions(@ApiParam(\"\u6743\u9650\u7f16\u7801\u6570\u7ec4\") @RequestBody String[] permissions) {", "full_signature": "@PostMapping(value = \"/hasPermissions\") @ApiOperation(\"\u5224\u65ad\u662f\u5426\u6709\u6743\u9650\") @PreAuthorize(\"isAuthenticated()\") public Result<String> hasPermissions(@ApiParam(\"\u6743\u9650\u7f16\u7801\u6570\u7ec4\") @RequestBody String[] permissions) {", "class_method_signature": "UserController.hasPermissions(@ApiParam(\"\u6743\u9650\u7f16\u7801\u6570\u7ec4\") @RequestBody String[] permissions) {", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(MultipartFile file)", "modifiers": "@Override @PostMapping(\"/import\") @ApiOperation(\"\u4ece\u6587\u4ef6\u5bfc\u5165\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + IMPORT_PERM + \"')\") public", "return": "Result<List<User>>", "signature": "Result<List<User>> importData(MultipartFile file)", "full_signature": "@Override @PostMapping(\"/import\") @ApiOperation(\"\u4ece\u6587\u4ef6\u5bfc\u5165\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + IMPORT_PERM + \"')\") public Result<List<User>> importData(MultipartFile file)", "class_method_signature": "UserController.importData(MultipartFile file)", "testcase": false, "constructor": false}, {"identifier": "exportData", "parameters": "(@RequestBody(required = false) List<String> ids, HttpServletResponse response)", "modifiers": "@Override @GetMapping(\"/export\") @ApiOperation(\"\u5bfc\u51fa\u7528\u6237\u5230\u6587\u4ef6\") @PreAuthorize(\"permitAll()\") public", "return": "void", "signature": "void exportData(@RequestBody(required = false) List<String> ids, HttpServletResponse response)", "full_signature": "@Override @GetMapping(\"/export\") @ApiOperation(\"\u5bfc\u51fa\u7528\u6237\u5230\u6587\u4ef6\") @PreAuthorize(\"permitAll()\") public void exportData(@RequestBody(required = false) List<String> ids, HttpServletResponse response)", "class_method_signature": "UserController.exportData(@RequestBody(required = false) List<String> ids, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "leftTreeData", "parameters": "()", "modifiers": "@Override @GetMapping(\"/leftTree\") @ApiOperation(\"\u83b7\u53d6\u5de6\u6811\u6570\u636e\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public", "return": "Result<List<Department>>", "signature": "Result<List<Department>> leftTreeData()", "full_signature": "@Override @GetMapping(\"/leftTree\") @ApiOperation(\"\u83b7\u53d6\u5de6\u6811\u6570\u636e\") @PreAuthorize(\"hasAnyAuthority('\" + QUERY_PERM + \"')\") public Result<List<Department>> leftTreeData()", "class_method_signature": "UserController.leftTreeData()", "testcase": false, "constructor": false}], "file": "lzpeng-boot-server/src/main/java/com/lzpeng/project/sys/controller/UserController.java"}, "focal_method": {"identifier": "save", "parameters": "(@Valid @RequestBody User model)", "modifiers": "@Override @PostMapping @ApiOperation(\"\u4fdd\u5b58\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + ADD_PERM + \"')\") public", "return": "Result<User>", "body": "@Override\n    @PostMapping\n    @ApiOperation(\"\u4fdd\u5b58\u7528\u6237\")\n    @PreAuthorize(\"hasAnyAuthority('\" + ADD_PERM + \"')\")\n    public Result<User> save(@Valid @RequestBody User model) {\n        return super.save(model);\n    }", "signature": "Result<User> save(@Valid @RequestBody User model)", "full_signature": "@Override @PostMapping @ApiOperation(\"\u4fdd\u5b58\u7528\u6237\") @PreAuthorize(\"hasAnyAuthority('\" + ADD_PERM + \"')\") public Result<User> save(@Valid @RequestBody User model)", "class_method_signature": "UserController.save(@Valid @RequestBody User model)", "testcase": false, "constructor": false, "invocations": ["save"]}, "repository": {"repo_id": 257335962, "url": "https://github.com/lzpeng723/minimal-boot", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 25, "size": 2632, "license": "licensed"}}