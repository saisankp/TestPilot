{"test_class": {"identifier": "ConjugatedPiSystemsDetectorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder      builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private static LonePairElectronChecker lpcheck;", "modifier": "private static", "type": "LonePairElectronChecker", "declarator": "lpcheck", "var_name": "lpcheck"}, {"original_string": "private static ILoggingTool            logger = LoggingToolFactory\n                                                          .createLoggingTool(ConjugatedPiSystemsDetectorTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory\n                                                          .createLoggingTool(ConjugatedPiSystemsDetectorTest.class)", "var_name": "logger"}], "file": "base/reaction/src/test/java/org/openscience/cdk/graph/invariant/ConjugatedPiSystemsDetectorTest.java"}, "test_case": {"identifier": "testDetectToluene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDetectToluene() throws Exception {\n        logger.info(\"Entering testDetectToluene.\");\n        IAtomContainer mol = null;\n        String filename = \"data/cml/toluene.cml\";\n        mol = readCMLMolecule(filename);\n\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        Aromaticity.cdkLegacy().apply(mol);\n\n        IAtomContainerSet acSet = ConjugatedPiSystemsDetector.detect(mol);\n\n        Assert.assertEquals(1, acSet.getAtomContainerCount());\n        IAtomContainer ac = acSet.getAtomContainer(0);\n        Assert.assertEquals(6, ac.getAtomCount());\n        Assert.assertEquals(6, ac.getBondCount());\n\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            Assert.assertTrue(mol.contains(ac.getAtom(i)));\n        }\n\n        for (int i = 0; i < ac.getBondCount(); i++) {\n            Assert.assertTrue(mol.contains(ac.getBond(i)));\n        }\n    }", "signature": "void testDetectToluene()", "full_signature": "@Test public void testDetectToluene()", "class_method_signature": "ConjugatedPiSystemsDetectorTest.testDetectToluene()", "testcase": true, "constructor": false, "invocations": ["info", "readCMLMolecule", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "detect", "assertEquals", "getAtomContainerCount", "getAtomContainer", "assertEquals", "getAtomCount", "assertEquals", "getBondCount", "getAtomCount", "assertTrue", "contains", "getAtom", "getBondCount", "assertTrue", "contains", "getBond"]}, "focal_class": {"identifier": "ConjugatedPiSystemsDetector", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "detect", "parameters": "(IAtomContainer ac)", "modifiers": "public static", "return": "IAtomContainerSet", "signature": "IAtomContainerSet detect(IAtomContainer ac)", "full_signature": "public static IAtomContainerSet detect(IAtomContainer ac)", "class_method_signature": "ConjugatedPiSystemsDetector.detect(IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "checkAtom", "parameters": "(IAtomContainer ac, IAtom currentAtom)", "modifiers": "private static", "return": "int", "signature": "int checkAtom(IAtomContainer ac, IAtom currentAtom)", "full_signature": "private static int checkAtom(IAtomContainer ac, IAtom currentAtom)", "class_method_signature": "ConjugatedPiSystemsDetector.checkAtom(IAtomContainer ac, IAtom currentAtom)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/graph/invariant/ConjugatedPiSystemsDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(IAtomContainer ac)", "modifiers": "public static", "return": "IAtomContainerSet", "body": "public static IAtomContainerSet detect(IAtomContainer ac) {\n        IAtomContainerSet piSystemSet = ac.getBuilder().newInstance(IAtomContainerSet.class);\n\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            IAtom atom = ac.getAtom(i);\n            atom.setFlag(CDKConstants.VISITED, false);\n        }\n\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            IAtom firstAtom = ac.getAtom(i);\n            // if this atom was already visited in a previous DFS, continue\n            if (firstAtom.getFlag(CDKConstants.VISITED) || checkAtom(ac, firstAtom) == -1) {\n                continue;\n            }\n            IAtomContainer piSystem = ac.getBuilder().newInstance(IAtomContainer.class);\n            Stack<IAtom> stack = new Stack<IAtom>();\n\n            piSystem.addAtom(firstAtom);\n            stack.push(firstAtom);\n            firstAtom.setFlag(CDKConstants.VISITED, true);\n            // Start DFS from firstAtom\n            while (!stack.empty()) {\n                //boolean addAtom = false;\n                IAtom currentAtom = stack.pop();\n                List<IAtom> atoms = ac.getConnectedAtomsList(currentAtom);\n                List<IBond> bonds = ac.getConnectedBondsList(currentAtom);\n\n                for (int j = 0; j < atoms.size(); j++) {\n                    IAtom atom = atoms.get(j);\n                    IBond bond = bonds.get(j);\n                    if (!atom.getFlag(CDKConstants.VISITED)) {\n                        int check = checkAtom(ac, atom);\n                        if (check == 1) {\n                            piSystem.addAtom(atom);\n                            piSystem.addBond(bond);\n                            continue;\n                            // do not mark atom as visited if cumulative double bond\n                        } else if (check == 0) {\n                            piSystem.addAtom(atom);\n                            piSystem.addBond(bond);\n                            stack.push(atom);\n                        }\n                        atom.setFlag(CDKConstants.VISITED, true);\n                    }\n                    // close rings with one bond\n                    else if (!piSystem.contains(bond) && piSystem.contains(atom)) {\n                        piSystem.addBond(bond);\n                    }\n                }\n            }\n\n            if (piSystem.getAtomCount() > 2) {\n                piSystemSet.addAtomContainer(piSystem);\n            }\n        }\n\n        return piSystemSet;\n    }", "signature": "IAtomContainerSet detect(IAtomContainer ac)", "full_signature": "public static IAtomContainerSet detect(IAtomContainer ac)", "class_method_signature": "ConjugatedPiSystemsDetector.detect(IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getBuilder", "getAtomCount", "getAtom", "setFlag", "getAtomCount", "getAtom", "getFlag", "checkAtom", "newInstance", "getBuilder", "addAtom", "push", "setFlag", "empty", "pop", "getConnectedAtomsList", "getConnectedBondsList", "size", "get", "get", "getFlag", "checkAtom", "addAtom", "addBond", "addAtom", "addBond", "push", "setFlag", "contains", "contains", "addBond", "getAtomCount", "addAtomContainer"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}