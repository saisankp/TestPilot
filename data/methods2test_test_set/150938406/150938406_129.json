{"test_class": {"identifier": "LdaUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/lda/LdaUtilTest.java"}, "test_case": {"identifier": "digammaTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void digammaTest() {\n\t\tdouble r = LdaUtil.digamma(1e-5);\n\t\tSystem.out.println(r);\n\t\tdouble r1 = LdaUtil.digamma(1e-100);\n\t\tSystem.out.println(r1);\n\t}", "signature": "void digammaTest()", "full_signature": "@Test public void digammaTest()", "class_method_signature": "LdaUtilTest.digammaTest()", "testcase": true, "constructor": false, "invocations": ["digamma", "println", "digamma", "println"]}, "focal_class": {"identifier": "LdaUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "digamma", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double digamma(double x)", "full_signature": "public static double digamma(double x)", "class_method_signature": "LdaUtil.digamma(double x)", "testcase": false, "constructor": false}, {"identifier": "digamma", "parameters": "(DenseMatrix x)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix digamma(DenseMatrix x)", "full_signature": "private static DenseMatrix digamma(DenseMatrix x)", "class_method_signature": "LdaUtil.digamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "trigamma", "parameters": "(double x)", "modifiers": "static", "return": "double", "signature": "double trigamma(double x)", "full_signature": "static double trigamma(double x)", "class_method_signature": "LdaUtil.trigamma(double x)", "testcase": false, "constructor": false}, {"identifier": "trigamma", "parameters": "(DenseMatrix x)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix trigamma(DenseMatrix x)", "full_signature": "static DenseMatrix trigamma(DenseMatrix x)", "class_method_signature": "LdaUtil.trigamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "lgamma", "parameters": "(double x)", "modifiers": "static", "return": "double", "signature": "double lgamma(double x)", "full_signature": "static double lgamma(double x)", "class_method_signature": "LdaUtil.lgamma(double x)", "testcase": false, "constructor": false}, {"identifier": "lgamma", "parameters": "(DenseMatrix x)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix lgamma(DenseMatrix x)", "full_signature": "static DenseMatrix lgamma(DenseMatrix x)", "class_method_signature": "LdaUtil.lgamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "dirichletExpectation", "parameters": "(DenseMatrix alpha)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix dirichletExpectation(DenseMatrix alpha)", "full_signature": "static DenseMatrix dirichletExpectation(DenseMatrix alpha)", "class_method_signature": "LdaUtil.dirichletExpectation(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "dirichletExpectationVec", "parameters": "(DenseMatrix alpha)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix dirichletExpectationVec(DenseMatrix alpha)", "full_signature": "static DenseMatrix dirichletExpectationVec(DenseMatrix alpha)", "class_method_signature": "LdaUtil.dirichletExpectationVec(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(DenseMatrix dm)", "modifiers": "public static", "return": "void", "signature": "void exp(DenseMatrix dm)", "full_signature": "public static void exp(DenseMatrix dm)", "class_method_signature": "LdaUtil.exp(DenseMatrix dm)", "testcase": false, "constructor": false}, {"identifier": "expDirichletExpectation", "parameters": "(DenseMatrix alpha)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix expDirichletExpectation(DenseMatrix alpha)", "full_signature": "public static DenseMatrix expDirichletExpectation(DenseMatrix alpha)", "class_method_signature": "LdaUtil.expDirichletExpectation(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "getTopicDistributionMethod", "parameters": "(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "modifiers": "public static", "return": "double[]", "signature": "double[] getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "full_signature": "public static double[] getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "class_method_signature": "LdaUtil.getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "testcase": false, "constructor": false}, {"identifier": "geneGamma", "parameters": "(int numTopic)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix geneGamma(int numTopic)", "full_signature": "static DenseMatrix geneGamma(int numTopic)", "class_method_signature": "LdaUtil.geneGamma(int numTopic)", "testcase": false, "constructor": false}, {"identifier": "getTopicDistributionMethod", "parameters": "(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "modifiers": "static", "return": "Tuple2<DenseMatrix, DenseMatrix>", "signature": "Tuple2<DenseMatrix, DenseMatrix> getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "full_signature": "static Tuple2<DenseMatrix, DenseMatrix> getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "class_method_signature": "LdaUtil.getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "testcase": false, "constructor": false}, {"identifier": "vectorToMatrix", "parameters": "(double[] vec)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix vectorToMatrix(double[] vec)", "full_signature": "private static DenseMatrix vectorToMatrix(double[] vec)", "class_method_signature": "LdaUtil.vectorToMatrix(double[] vec)", "testcase": false, "constructor": false}, {"identifier": "diffDenseMatrix", "parameters": "(DenseMatrix A, DenseMatrix B, int topicNum)", "modifiers": "private static", "return": "double", "signature": "double diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "full_signature": "private static double diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "class_method_signature": "LdaUtil.diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "testcase": false, "constructor": false}, {"identifier": "elementWiseProduct", "parameters": "(DenseMatrix matA, DenseMatrix matB)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "full_signature": "static DenseMatrix elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "class_method_signature": "LdaUtil.elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "elementWiseDivide", "parameters": "(DenseMatrix matA, DenseMatrix matB)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "full_signature": "static DenseMatrix elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "class_method_signature": "LdaUtil.elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "sumByCol", "parameters": "(DenseMatrix mat)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix sumByCol(DenseMatrix mat)", "full_signature": "private static DenseMatrix sumByCol(DenseMatrix mat)", "class_method_signature": "LdaUtil.sumByCol(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "sumByRow", "parameters": "(DenseMatrix mat)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix sumByRow(DenseMatrix mat)", "full_signature": "static DenseMatrix sumByRow(DenseMatrix mat)", "class_method_signature": "LdaUtil.sumByRow(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "setWordIdWeightTrain", "parameters": "(List<String> list)", "modifiers": "public static", "return": "HashMap<Integer, String>", "signature": "HashMap<Integer, String> setWordIdWeightTrain(List<String> list)", "full_signature": "public static HashMap<Integer, String> setWordIdWeightTrain(List<String> list)", "class_method_signature": "LdaUtil.setWordIdWeightTrain(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "setWordIdWeightPredict", "parameters": "(List<String> list)", "modifiers": "public static", "return": "HashMap<String, Tuple2<Integer, Double>>", "signature": "HashMap<String, Tuple2<Integer, Double>> setWordIdWeightPredict(List<String> list)", "full_signature": "public static HashMap<String, Tuple2<Integer, Double>> setWordIdWeightPredict(List<String> list)", "class_method_signature": "LdaUtil.setWordIdWeightPredict(List<String> list)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/lda/LdaUtil.java"}, "focal_method": {"identifier": "digamma", "parameters": "(double x)", "modifiers": "public static", "return": "double", "body": "public static double digamma(double x) {\n        return Gamma.digamma(x);\n    }", "signature": "double digamma(double x)", "full_signature": "public static double digamma(double x)", "class_method_signature": "LdaUtil.digamma(double x)", "testcase": false, "constructor": false, "invocations": ["digamma"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}