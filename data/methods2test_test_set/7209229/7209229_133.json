{"test_class": {"identifier": "TestDatabusCluster", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = Logger.getLogger(TestDatabusCluster.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDatabusCluster.class)", "var_name": "LOG"}, {"original_string": "static final int localZkPort = Utils.getAvailablePort(2192);", "modifier": "static final", "type": "int", "declarator": "localZkPort = Utils.getAvailablePort(2192)", "var_name": "localZkPort"}, {"original_string": "static final String zkAddr = \"localhost:\" + localZkPort;", "modifier": "static final", "type": "String", "declarator": "zkAddr = \"localhost:\" + localZkPort", "var_name": "zkAddr"}, {"original_string": "static final String clusterName = \"test-databus-cluster\";", "modifier": "static final", "type": "String", "declarator": "clusterName = \"test-databus-cluster\"", "var_name": "clusterName"}, {"original_string": "static List<ZkServer> _localZkServers = null;", "modifier": "static", "type": "List<ZkServer>", "declarator": "_localZkServers = null", "var_name": "_localZkServers"}], "file": "databus-cluster/databus-cluster-manager-impl/src/test/java/com/linkedin/databus/cluster/TestDatabusCluster.java"}, "test_case": {"identifier": "testDatabusCluster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDatabusCluster()\n\t{\n\t\trunBasicDatabusClusterExpt(false);\n\t}", "signature": "void testDatabusCluster()", "full_signature": "@Test public void testDatabusCluster()", "class_method_signature": "TestDatabusCluster.testDatabusCluster()", "testcase": true, "constructor": false, "invocations": ["runBasicDatabusClusterExpt"]}, "focal_class": {"identifier": "DatabusCluster", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = DatabusCluster.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = DatabusCluster.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public static final String DEFAULT_STATE_MODEL = \"OnlineOffline\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_STATE_MODEL = \"OnlineOffline\"", "var_name": "DEFAULT_STATE_MODEL"}, {"original_string": "public static final String DEFAULT_RESOURCE_NAME = \"default-resource\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_RESOURCE_NAME = \"default-resource\"", "var_name": "DEFAULT_RESOURCE_NAME"}, {"original_string": "public static final int DEFAULT_CLUSTER_CREATE_WAIT_MS = 1000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_CLUSTER_CREATE_WAIT_MS = 1000", "var_name": "DEFAULT_CLUSTER_CREATE_WAIT_MS"}, {"original_string": "private static final String HELIX_MANAGER_ZK_SESSION_TIMEOUT_KEY = \"zk.session.timeout\";", "modifier": "private static final", "type": "String", "declarator": "HELIX_MANAGER_ZK_SESSION_TIMEOUT_KEY = \"zk.session.timeout\"", "var_name": "HELIX_MANAGER_ZK_SESSION_TIMEOUT_KEY"}, {"original_string": "protected final ZkClient _zkClient;", "modifier": "protected final", "type": "ZkClient", "declarator": "_zkClient", "var_name": "_zkClient"}, {"original_string": "protected final ZKHelixAdmin _admin;", "modifier": "protected final", "type": "ZKHelixAdmin", "declarator": "_admin", "var_name": "_admin"}, {"original_string": "protected final String _clusterName;", "modifier": "protected final", "type": "String", "declarator": "_clusterName", "var_name": "_clusterName"}, {"original_string": "protected final String _zkAddr;", "modifier": "protected final", "type": "String", "declarator": "_zkAddr", "var_name": "_zkAddr"}, {"original_string": "protected final int _quorum;", "modifier": "protected final", "type": "int", "declarator": "_quorum", "var_name": "_quorum"}, {"original_string": "protected final int _numPartitions;", "modifier": "protected final", "type": "int", "declarator": "_numPartitions", "var_name": "_numPartitions"}, {"original_string": "protected final HashSet<DatabusClusterDataNotifier> _dataNotifiers;", "modifier": "protected final", "type": "HashSet<DatabusClusterDataNotifier>", "declarator": "_dataNotifiers", "var_name": "_dataNotifiers"}, {"original_string": "protected final DatabusHelixWatcher _watcher;", "modifier": "protected final", "type": "DatabusHelixWatcher", "declarator": "_watcher", "var_name": "_watcher"}, {"original_string": "private final int _zkConnectionTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "_zkConnectionTimeoutMs", "var_name": "_zkConnectionTimeoutMs"}, {"original_string": "private final int _zkSessionTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "_zkSessionTimeoutMs", "var_name": "_zkSessionTimeoutMs"}], "methods": [{"identifier": "DatabusCluster", "parameters": "(ClusterRegistrationStaticConfig config)", "modifiers": "public", "return": "", "signature": " DatabusCluster(ClusterRegistrationStaticConfig config)", "full_signature": "public  DatabusCluster(ClusterRegistrationStaticConfig config)", "class_method_signature": "DatabusCluster.DatabusCluster(ClusterRegistrationStaticConfig config)", "testcase": false, "constructor": true}, {"identifier": "updateHelixManagerZkSessionTimeout", "parameters": "(int timeoutMs)", "modifiers": "private static", "return": "void", "signature": "void updateHelixManagerZkSessionTimeout(int timeoutMs)", "full_signature": "private static void updateHelixManagerZkSessionTimeout(int timeoutMs)", "class_method_signature": "DatabusCluster.updateHelixManagerZkSessionTimeout(int timeoutMs)", "testcase": false, "constructor": false}, {"identifier": "getNumPartitionsInResource", "parameters": "(ZKHelixAdmin admin, String clusterName,String resourceName)", "modifiers": "static protected", "return": "int", "signature": "int getNumPartitionsInResource(ZKHelixAdmin admin, String clusterName,String resourceName)", "full_signature": "static protected int getNumPartitionsInResource(ZKHelixAdmin admin, String clusterName,String resourceName)", "class_method_signature": "DatabusCluster.getNumPartitionsInResource(ZKHelixAdmin admin, String clusterName,String resourceName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ZKHelixAdmin admin, ZkClient zkClient, String clusterName,\n            int numPartitions)", "modifiers": "static public", "return": "int", "signature": "int create(ZKHelixAdmin admin, ZkClient zkClient, String clusterName,\n            int numPartitions)", "full_signature": "static public int create(ZKHelixAdmin admin, ZkClient zkClient, String clusterName,\n            int numPartitions)", "class_method_signature": "DatabusCluster.create(ZKHelixAdmin admin, ZkClient zkClient, String clusterName,\n            int numPartitions)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "DatabusCluster.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "DatabusCluster.shutdown()", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(String id)", "modifiers": "public", "return": "DatabusClusterMember", "signature": "DatabusClusterMember addMember(String id)", "full_signature": "public DatabusClusterMember addMember(String id)", "class_method_signature": "DatabusCluster.addMember(String id)", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(String id,\n            DatabusClusterNotifier notifier)", "modifiers": "public", "return": "DatabusClusterMember", "signature": "DatabusClusterMember addMember(String id,\n            DatabusClusterNotifier notifier)", "full_signature": "public DatabusClusterMember addMember(String id,\n            DatabusClusterNotifier notifier)", "class_method_signature": "DatabusCluster.addMember(String id,\n            DatabusClusterNotifier notifier)", "testcase": false, "constructor": false}, {"identifier": "addDataNotifier", "parameters": "(DatabusClusterDataNotifier notifier)", "modifiers": "synchronized public", "return": "void", "signature": "void addDataNotifier(DatabusClusterDataNotifier notifier)", "full_signature": "synchronized public void addDataNotifier(DatabusClusterDataNotifier notifier)", "class_method_signature": "DatabusCluster.addDataNotifier(DatabusClusterDataNotifier notifier)", "testcase": false, "constructor": false}, {"identifier": "removeDataNotifier", "parameters": "(\n            DatabusClusterDataNotifier notifier)", "modifiers": "synchronized public", "return": "void", "signature": "void removeDataNotifier(\n            DatabusClusterDataNotifier notifier)", "full_signature": "synchronized public void removeDataNotifier(\n            DatabusClusterDataNotifier notifier)", "class_method_signature": "DatabusCluster.removeDataNotifier(\n            DatabusClusterDataNotifier notifier)", "testcase": false, "constructor": false}, {"identifier": "getNumPartitions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumPartitions()", "full_signature": "public int getNumPartitions()", "class_method_signature": "DatabusCluster.getNumPartitions()", "testcase": false, "constructor": false}, {"identifier": "getNumActiveMembers", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumActiveMembers()", "full_signature": "public int getNumActiveMembers()", "class_method_signature": "DatabusCluster.getNumActiveMembers()", "testcase": false, "constructor": false}, {"identifier": "getNumActivePartitions", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumActivePartitions()", "full_signature": "public int getNumActivePartitions()", "class_method_signature": "DatabusCluster.getNumActivePartitions()", "testcase": false, "constructor": false}, {"identifier": "getActivePartitions", "parameters": "()", "modifiers": "public", "return": "HashMap<Integer, String>", "signature": "HashMap<Integer, String> getActivePartitions()", "full_signature": "public HashMap<Integer, String> getActivePartitions()", "class_method_signature": "DatabusCluster.getActivePartitions()", "testcase": false, "constructor": false}, {"identifier": "getPartitionOwner", "parameters": "(int partition)", "modifiers": "public", "return": "String", "signature": "String getPartitionOwner(int partition)", "full_signature": "public String getPartitionOwner(int partition)", "class_method_signature": "DatabusCluster.getPartitionOwner(int partition)", "testcase": false, "constructor": false}, {"identifier": "getClusterName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClusterName()", "full_signature": "public String getClusterName()", "class_method_signature": "DatabusCluster.getClusterName()", "testcase": false, "constructor": false}, {"identifier": "getQuorum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQuorum()", "full_signature": "public int getQuorum()", "class_method_signature": "DatabusCluster.getQuorum()", "testcase": false, "constructor": false}, {"identifier": "DatabusCluster", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DatabusCluster()", "full_signature": "protected  DatabusCluster()", "class_method_signature": "DatabusCluster.DatabusCluster()", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DatabusCluster.toString()", "testcase": false, "constructor": false}], "file": "databus-cluster/databus-cluster-manager-impl/src/main/java/com/linkedin/databus/cluster/DatabusCluster.java"}, "focal_method": {"identifier": "DatabusCluster", "parameters": "(ClusterRegistrationStaticConfig config)", "modifiers": "public", "return": "", "body": "public DatabusCluster(ClusterRegistrationStaticConfig config) throws Exception\n    {\n        _zkAddr = config.getZkAddr();\n        _clusterName = config.getClusterName();\n        _quorum = (int)(config.getQuorum());\n        _numPartitions = (int)(config.getNumPartitions());\n\n        _zkSessionTimeoutMs = config.getZkSessionTimeoutMs();\n        _zkConnectionTimeoutMs = config.getZkConnectionTimeoutMs();\n\n        updateHelixManagerZkSessionTimeout(_zkSessionTimeoutMs);\n\n        _zkClient = new ZkClient(_zkAddr, _zkSessionTimeoutMs, _zkConnectionTimeoutMs, new ZNRecordSerializer());\n        _admin = new ZKHelixAdmin(_zkClient);\n        _dataNotifiers = new HashSet<DatabusClusterDataNotifier>(5);\n\n        //attempt to create a cluster\n        int part = create(_admin, _zkClient, _clusterName, _numPartitions);\n\n        //at this stage a cluster and resources should have been created, either by this instance or someone else\n        if (part >= 0)\n        {\n            if (_numPartitions != part)\n            {\n                String msg = \"Cannot create DatabusCluster!  Cluster exists with num partitions=\"\n                        + part\n                        + \". Tried to join with \"\n                        + _numPartitions\n                        + \" partitions\";\n                throw new DatabusClusterException(msg);\n            }\n        }\n        else\n        {\n            throw new DatabusClusterException(\"Cluster \" + _clusterName + \" could not be accessed. Num partitions returned -1\");\n        }\n\n        // initialize watcher after creating a cluster\n        _watcher = new DatabusHelixWatcher();\n    }", "signature": " DatabusCluster(ClusterRegistrationStaticConfig config)", "full_signature": "public  DatabusCluster(ClusterRegistrationStaticConfig config)", "class_method_signature": "DatabusCluster.DatabusCluster(ClusterRegistrationStaticConfig config)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}