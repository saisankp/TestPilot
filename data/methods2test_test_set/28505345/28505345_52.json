{"test_class": {"identifier": "HurlStackTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockHttpURLConnection mockConnection;", "modifier": "private", "type": "MockHttpURLConnection", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "private HurlStack hurlStack;", "modifier": "private", "type": "HurlStack", "declarator": "hurlStack", "var_name": "hurlStack"}], "file": "jus-java/src/test/java/io/apptik/comm/jus/stack/HurlStackTest.java"}, "test_case": {"identifier": "connectionForTraceRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void connectionForTraceRequest() throws Exception {\n        TestRequest.Trace request = new TestRequest.Trace();\n        assertEquals(request.getMethod(), Method.TRACE);\n\n        hurlStack.setConnectionParametersForRequest(mockConnection, request);\n        assertEquals(\"TRACE\", mockConnection.getRequestMethod());\n        assertFalse(mockConnection.getDoOutput());\n    }", "signature": "void connectionForTraceRequest()", "full_signature": "@Test public void connectionForTraceRequest()", "class_method_signature": "HurlStackTest.connectionForTraceRequest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMethod", "setConnectionParametersForRequest", "assertEquals", "getRequestMethod", "assertFalse", "getDoOutput"]}, "focal_class": {"identifier": "HurlStack", "superclass": "extends AbstractHttpStack", "interfaces": "", "fields": [{"original_string": "private final UrlRewriter mUrlRewriter;", "modifier": "private final", "type": "UrlRewriter", "declarator": "mUrlRewriter", "var_name": "mUrlRewriter"}, {"original_string": "private final SSLSocketFactory mSslSocketFactory;", "modifier": "private final", "type": "SSLSocketFactory", "declarator": "mSslSocketFactory", "var_name": "mSslSocketFactory"}, {"original_string": "boolean isFixedLengthStreamingMode = false;", "modifier": "", "type": "boolean", "declarator": "isFixedLengthStreamingMode = false", "var_name": "isFixedLengthStreamingMode"}], "methods": [{"identifier": "HurlStack", "parameters": "()", "modifiers": "public", "return": "", "signature": " HurlStack()", "full_signature": "public  HurlStack()", "class_method_signature": "HurlStack.HurlStack()", "testcase": false, "constructor": true}, {"identifier": "HurlStack", "parameters": "(UrlRewriter urlRewriter)", "modifiers": "public", "return": "", "signature": " HurlStack(UrlRewriter urlRewriter)", "full_signature": "public  HurlStack(UrlRewriter urlRewriter)", "class_method_signature": "HurlStack.HurlStack(UrlRewriter urlRewriter)", "testcase": false, "constructor": true}, {"identifier": "HurlStack", "parameters": "(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory)", "modifiers": "public", "return": "", "signature": " HurlStack(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory)", "full_signature": "public  HurlStack(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory)", "class_method_signature": "HurlStack.HurlStack(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory)", "testcase": false, "constructor": true}, {"identifier": "setFixedLengthStreamingMode", "parameters": "(boolean enabled)", "modifiers": "public", "return": "HurlStack", "signature": "HurlStack setFixedLengthStreamingMode(boolean enabled)", "full_signature": "public HurlStack setFixedLengthStreamingMode(boolean enabled)", "class_method_signature": "HurlStack.setFixedLengthStreamingMode(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "performRequest", "parameters": "(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "modifiers": "@Override public", "return": "NetworkResponse", "signature": "NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "full_signature": "@Override public NetworkResponse performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "class_method_signature": "HurlStack.performRequest(Request<?> request, Headers\n            additionalHeaders, ByteArrayPool byteArrayPool)", "testcase": false, "constructor": false}, {"identifier": "createConnection", "parameters": "(URL url)", "modifiers": "protected", "return": "HttpURLConnection", "signature": "HttpURLConnection createConnection(URL url)", "full_signature": "protected HttpURLConnection createConnection(URL url)", "class_method_signature": "HurlStack.createConnection(URL url)", "testcase": false, "constructor": false}, {"identifier": "openConnection", "parameters": "(URL url, Request<?> request)", "modifiers": "private", "return": "HttpURLConnection", "signature": "HttpURLConnection openConnection(URL url, Request<?> request)", "full_signature": "private HttpURLConnection openConnection(URL url, Request<?> request)", "class_method_signature": "HurlStack.openConnection(URL url, Request<?> request)", "testcase": false, "constructor": false}, {"identifier": "setConnectionParametersForRequest", "parameters": "(HttpURLConnection connection,\n                                           Request<?> request)", "modifiers": "", "return": "void", "signature": "void setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "full_signature": " void setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "class_method_signature": "HurlStack.setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "testcase": false, "constructor": false}, {"identifier": "addBodyIfExists", "parameters": "(HttpURLConnection connection, Request<?> request)", "modifiers": "private", "return": "void", "signature": "void addBodyIfExists(HttpURLConnection connection, Request<?> request)", "full_signature": "private void addBodyIfExists(HttpURLConnection connection, Request<?> request)", "class_method_signature": "HurlStack.addBodyIfExists(HttpURLConnection connection, Request<?> request)", "testcase": false, "constructor": false}], "file": "jus-java/src/main/java/io/apptik/comm/jus/stack/HurlStack.java"}, "focal_method": {"identifier": "setConnectionParametersForRequest", "parameters": "(HttpURLConnection connection,\n                                           Request<?> request)", "modifiers": "", "return": "void", "body": "void setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request) throws IOException {\n        switch (request.getMethod()) {\n            case Method.GET:\n                break;\n            case Method.DELETE:\n                connection.setRequestMethod(\"DELETE\");\n                break;\n            case Method.POST:\n                connection.setRequestMethod(\"POST\");\n                addBodyIfExists(connection, request);\n                break;\n            case Method.PUT:\n                connection.setRequestMethod(\"PUT\");\n                addBodyIfExists(connection, request);\n                break;\n            case Method.HEAD:\n                connection.setRequestMethod(\"HEAD\");\n                break;\n            case Method.OPTIONS:\n                connection.setRequestMethod(\"OPTIONS\");\n                break;\n            case Method.TRACE:\n                connection.setRequestMethod(\"TRACE\");\n                break;\n            case Method.PATCH:\n                connection.setRequestMethod(\"PATCH\");\n                addBodyIfExists(connection, request);\n                break;\n            default:\n                connection.setRequestMethod(request.getMethod());\n                addBodyIfExists(connection, request);\n                break;\n        }\n    }", "signature": "void setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "full_signature": " void setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "class_method_signature": "HurlStack.setConnectionParametersForRequest(HttpURLConnection connection,\n                                           Request<?> request)", "testcase": false, "constructor": false, "invocations": ["getMethod", "setRequestMethod", "setRequestMethod", "addBodyIfExists", "setRequestMethod", "addBodyIfExists", "setRequestMethod", "setRequestMethod", "setRequestMethod", "setRequestMethod", "addBodyIfExists", "setRequestMethod", "getMethod", "addBodyIfExists"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}