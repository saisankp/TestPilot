{"test_class": {"identifier": "GenericImplFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GenericImplFilter genericImplFilter = new GenericImplFilter();", "modifier": "private", "type": "GenericImplFilter", "declarator": "genericImplFilter = new GenericImplFilter()", "var_name": "genericImplFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/GenericImplFilterTest.java"}, "test_case": {"identifier": "testInvoke", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvoke() throws Exception {\n\n        RpcInvocation invocation = new RpcInvocation(\"getPerson\", \"org.apache.dubbo.rpc.support.DemoService\",\n                \"org.apache.dubbo.rpc.support.DemoService:dubbo\", new Class[]{Person.class}, new Object[]{new Person(\"dubbo\", 10)});\n\n\n        URL url = URL.valueOf(\"test://test:11/org.apache.dubbo.rpc.support.DemoService?\" +\n                \"accesslog=true&group=dubbo&version=1.1&generic=true\");\n        Invoker invoker = Mockito.mock(Invoker.class);\n\n        Map<String, Object> person = new HashMap<String, Object>();\n        person.put(\"name\", \"dubbo\");\n        person.put(\"age\", 10);\n\n        AppResponse mockRpcResult = new AppResponse(person);\n        when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));\n        when(invoker.getUrl()).thenReturn(url);\n        when(invoker.getInterface()).thenReturn(DemoService.class);\n\n        Result asyncResult = genericImplFilter.invoke(invoker, invocation);\n        Result result = asyncResult.get();\n        genericImplFilter.onResponse(result, invoker, invocation);\n\n        Assertions.assertEquals(Person.class, result.getValue().getClass());\n        Assertions.assertEquals(10, ((Person) result.getValue()).getAge());\n    }", "signature": "void testInvoke()", "full_signature": "@Test public void testInvoke()", "class_method_signature": "GenericImplFilterTest.testInvoke()", "testcase": true, "constructor": false, "invocations": ["valueOf", "mock", "put", "put", "thenReturn", "when", "invoke", "any", "newDefaultAsyncResult", "thenReturn", "when", "getUrl", "thenReturn", "when", "getInterface", "invoke", "get", "onResponse", "assertEquals", "getClass", "getValue", "assertEquals", "getAge", "getValue"]}, "focal_class": {"identifier": "GenericImplFilter", "superclass": "", "interfaces": "implements Filter, Filter.Listener", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GenericImplFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GenericImplFilter.class)", "var_name": "logger"}, {"original_string": "private static final Class<?>[] GENERIC_PARAMETER_TYPES = new Class<?>[]{String.class, String[].class, Object[].class};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "GENERIC_PARAMETER_TYPES = new Class<?>[]{String.class, String[].class, Object[].class}", "var_name": "GENERIC_PARAMETER_TYPES"}, {"original_string": "private static final String GENERIC_IMPL_MARKER = \"GENERIC_IMPL\";", "modifier": "private static final", "type": "String", "declarator": "GENERIC_IMPL_MARKER = \"GENERIC_IMPL\"", "var_name": "GENERIC_IMPL_MARKER"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "GenericImplFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String generic, String expected, String actual)", "modifiers": "private", "return": "void", "signature": "void error(String generic, String expected, String actual)", "full_signature": "private void error(String generic, String expected, String actual)", "class_method_signature": "GenericImplFilter.error(String generic, String expected, String actual)", "testcase": false, "constructor": false}, {"identifier": "onResponse", "parameters": "(Result appResponse, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "GenericImplFilter.onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "GenericImplFilter.onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isCallingGenericImpl", "parameters": "(String generic, Invocation invocation)", "modifiers": "private", "return": "boolean", "signature": "boolean isCallingGenericImpl(String generic, Invocation invocation)", "full_signature": "private boolean isCallingGenericImpl(String generic, Invocation invocation)", "class_method_signature": "GenericImplFilter.isCallingGenericImpl(String generic, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isMakingGenericCall", "parameters": "(String generic, Invocation invocation)", "modifiers": "private", "return": "boolean", "signature": "boolean isMakingGenericCall(String generic, Invocation invocation)", "full_signature": "private boolean isMakingGenericCall(String generic, Invocation invocation)", "class_method_signature": "GenericImplFilter.isMakingGenericCall(String generic, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/GenericImplFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        String generic = invoker.getUrl().getParameter(GENERIC_KEY);\n        // calling a generic impl service\n        if (isCallingGenericImpl(generic, invocation)) {\n            RpcInvocation invocation2 = new RpcInvocation(invocation);\n\n            /**\n             * Mark this invocation as a generic impl call, this value will be removed automatically before passing on the wire.\n             * See {@link RpcUtils#sieveUnnecessaryAttachments(Invocation)}\n             */\n            invocation2.put(GENERIC_IMPL_MARKER, true);\n\n            String methodName = invocation2.getMethodName();\n            Class<?>[] parameterTypes = invocation2.getParameterTypes();\n            Object[] arguments = invocation2.getArguments();\n\n            String[] types = new String[parameterTypes.length];\n            for (int i = 0; i < parameterTypes.length; i++) {\n                types[i] = ReflectUtils.getName(parameterTypes[i]);\n            }\n\n            Object[] args;\n            if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n                args = new Object[arguments.length];\n                for (int i = 0; i < arguments.length; i++) {\n                    args[i] = JavaBeanSerializeUtil.serialize(arguments[i], JavaBeanAccessor.METHOD);\n                }\n            } else {\n                args = PojoUtils.generalize(arguments);\n            }\n\n            if (RpcUtils.isReturnTypeFuture(invocation)) {\n                invocation2.setMethodName($INVOKE_ASYNC);\n            } else {\n                invocation2.setMethodName($INVOKE);\n            }\n            invocation2.setParameterTypes(GENERIC_PARAMETER_TYPES);\n            invocation2.setParameterTypesDesc(GENERIC_PARAMETER_DESC);\n            invocation2.setArguments(new Object[]{methodName, types, args});\n            return invoker.invoke(invocation2);\n        }\n        // making a generic call to a normal service\n        else if (isMakingGenericCall(generic, invocation)) {\n\n            Object[] args = (Object[]) invocation.getArguments()[2];\n            if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n\n                for (Object arg : args) {\n                    if (!(byte[].class == arg.getClass())) {\n                        error(generic, byte[].class.getName(), arg.getClass().getName());\n                    }\n                }\n            } else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n                for (Object arg : args) {\n                    if (!(arg instanceof JavaBeanDescriptor)) {\n                        error(generic, JavaBeanDescriptor.class.getName(), arg.getClass().getName());\n                    }\n                }\n            }\n\n            invocation.setAttachment(\n                    GENERIC_KEY, invoker.getUrl().getParameter(GENERIC_KEY));\n        }\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "GenericImplFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getUrl", "isCallingGenericImpl", "put", "getMethodName", "getParameterTypes", "getArguments", "getName", "isBeanGenericSerialization", "serialize", "generalize", "isReturnTypeFuture", "setMethodName", "setMethodName", "setParameterTypes", "setParameterTypesDesc", "setArguments", "invoke", "isMakingGenericCall", "getArguments", "isJavaGenericSerialization", "getClass", "error", "getName", "getName", "getClass", "isBeanGenericSerialization", "error", "getName", "getName", "getClass", "setAttachment", "getParameter", "getUrl", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}