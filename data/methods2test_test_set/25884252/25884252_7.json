{"test_class": {"identifier": "FreebaseHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/edu/tuberlin/dima/textmining/jedi/core/freebase/FreebaseHelperTest.java"}, "test_case": {"identifier": "testGetTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetTypes() throws Exception {\n\t\tFreebaseHelper freebaseHelper = new FreebaseHelper();\n\n\t\tFreebaseRelation typesForRelationFromFreebase = freebaseHelper.getTypesForRelationFromFreebase(\"ns:people.person.education..education.education.degree\");\n\n\t\tAssert.assertThat(typesForRelationFromFreebase.getDomain(), is(\"ns:people.person\"));\n\t\tAssert.assertThat(typesForRelationFromFreebase.getRange(), is(\"ns:education.educational_degree\"));\n\n\t\ttypesForRelationFromFreebase = freebaseHelper.getTypesForRelationFromFreebase(\"ns:people.person.education..education.education.institution\");\n\n\t\tAssert.assertThat(typesForRelationFromFreebase.getDomain(), is(\"ns:people.person\"));\n\t\tAssert.assertThat(typesForRelationFromFreebase.getRange(), is(\"ns:education.educational_institution\"));\n\n\t\ttypesForRelationFromFreebase = freebaseHelper.getTypesForRelationFromFreebase(\"ns:base.rugby.rugby_club.coaches_of_this_team..base.rugby.rugby_coaching_tenure.coach\");\n\n\t\tAssert.assertThat(typesForRelationFromFreebase.getDomain(), is(\"ns:base.rugby.rugby_club\"));\n\t\tAssert.assertThat(typesForRelationFromFreebase.getRange(), is(\"ns:base.rugby.rugby_coach\"));\n\n\t\ttypesForRelationFromFreebase = freebaseHelper.getTypesForRelationFromFreebase(\"ns:education.educational_institution.students_graduates..education.education.specialization\");\n\n\t\tAssert.assertThat(typesForRelationFromFreebase.getDomain(), is(\"ns:education.educational_institution\"));\n\t\tAssert.assertThat(typesForRelationFromFreebase.getRange(), is(\"ns:education.field_of_study\"));\n\n\t}", "signature": "void testGetTypes()", "full_signature": "@Test public void testGetTypes()", "class_method_signature": "FreebaseHelperTest.testGetTypes()", "testcase": true, "constructor": false, "invocations": ["getTypesForRelationFromFreebase", "assertThat", "getDomain", "is", "assertThat", "getRange", "is", "getTypesForRelationFromFreebase", "assertThat", "getDomain", "is", "assertThat", "getRange", "is", "getTypesForRelationFromFreebase", "assertThat", "getDomain", "is", "assertThat", "getRange", "is", "getTypesForRelationFromFreebase", "assertThat", "getDomain", "is", "assertThat", "getRange", "is"]}, "focal_class": {"identifier": "FreebaseHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FREEBASE_TOPIC_ENDPOINT = \"https://www.googleapis.com/freebase/v1/topic{id}?filter=/common/topic/description&filter=/type/object/guid&filter=/type/object/type&filter=/type/object/name&filter=/common/topic/alias&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_TOPIC_ENDPOINT = \"https://www.googleapis.com/freebase/v1/topic{id}?filter=/common/topic/description&filter=/type/object/guid&filter=/type/object/type&filter=/type/object/name&filter=/common/topic/alias&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_TOPIC_ENDPOINT"}, {"original_string": "private static final String FREEBASE_SEARCH_API = \"https://www.googleapis.com/freebase/v1/search?limit=1&scoring=entity&query={id}&prefixed=true&output=(%2Fcommon%2Ftopic%2Fdescription+type+name+%2Fcommon%2Ftopic%2Falias)&lang=en&indent=true&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_SEARCH_API = \"https://www.googleapis.com/freebase/v1/search?limit=1&scoring=entity&query={id}&prefixed=true&output=(%2Fcommon%2Ftopic%2Fdescription+type+name+%2Fcommon%2Ftopic%2Falias)&lang=en&indent=true&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_SEARCH_API"}, {"original_string": "private static final String FREEBASE_MQL_ENDPOINT = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22id%22%3A%20%22{id}%22%2C%20%22%2Fdataworld%2Fgardening_hint%2Freplaced_by%22%3A%20%5B%7B%22mid%22%3A%20null%20%7D%5D%20%7D%5D%0A%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_MQL_ENDPOINT = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22id%22%3A%20%22{id}%22%2C%20%22%2Fdataworld%2Fgardening_hint%2Freplaced_by%22%3A%20%5B%7B%22mid%22%3A%20null%20%7D%5D%20%7D%5D%0A%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_MQL_ENDPOINT"}, {"original_string": "private static final String FREEBASE_MQL_ENDPOINT_SUBRELATION_RELATION = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22mid%22%3A%20%22{id1}%22%2C%20%22{REL1}%22%3A%20%5B%7B%22{REL2}%22%3A%20%7B%22mid%22%3A%20%22{id2}%22%7D%7D%5D%7D%5D%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_MQL_ENDPOINT_SUBRELATION_RELATION = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22mid%22%3A%20%22{id1}%22%2C%20%22{REL1}%22%3A%20%5B%7B%22{REL2}%22%3A%20%7B%22mid%22%3A%20%22{id2}%22%7D%7D%5D%7D%5D%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_MQL_ENDPOINT_SUBRELATION_RELATION"}, {"original_string": "private static final String FREEBASE_MQL_ENDPOINT_RELATION = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22mid%22%3A%20%22{id1}%22%2C%20%22{REL1}%22%3A%20%5B%7B%22mid%22%3A%20%22{id2}%22%7D%5D%7D%5D%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_MQL_ENDPOINT_RELATION = \"https://www.googleapis.com/freebase/v1/mqlread/?lang=%2Flang%2Fen&query=%5B%7B%20%22mid%22%3A%20%22{id1}%22%2C%20%22{REL1}%22%3A%20%5B%7B%22mid%22%3A%20%22{id2}%22%7D%5D%7D%5D%0A%0A&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_MQL_ENDPOINT_RELATION"}, {"original_string": "private static final String FREEBASE_INVERSE_RELATION = \"https://www.googleapis.com/freebase/v1/topic{id}?filter=/type/property/reverse_property&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\";", "modifier": "private static final", "type": "String", "declarator": "FREEBASE_INVERSE_RELATION = \"https://www.googleapis.com/freebase/v1/topic{id}?filter=/type/property/reverse_property&key=AIzaSyCyloa8DMxhKvBVdqdk_Drf900rAeeA7QA\"", "var_name": "FREEBASE_INVERSE_RELATION"}, {"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}, {"original_string": "private static final JsonFactory jfactory = new JsonFactory();", "modifier": "private static final", "type": "JsonFactory", "declarator": "jfactory = new JsonFactory()", "var_name": "jfactory"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FreebaseHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FreebaseHelper.class)", "var_name": "LOG"}], "methods": [{"identifier": "getURL", "parameters": "(String metaURL)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode getURL(String metaURL)", "full_signature": "private JsonNode getURL(String metaURL)", "class_method_signature": "FreebaseHelper.getURL(String metaURL)", "testcase": false, "constructor": false}, {"identifier": "transformOldToNewId", "parameters": "(String old)", "modifiers": "public static", "return": "String", "signature": "String transformOldToNewId(String old)", "full_signature": "public static String transformOldToNewId(String old)", "class_method_signature": "FreebaseHelper.transformOldToNewId(String old)", "testcase": false, "constructor": false}, {"identifier": "transformNewToOldId", "parameters": "(String newId)", "modifiers": "public static", "return": "String", "signature": "String transformNewToOldId(String newId)", "full_signature": "public static String transformNewToOldId(String newId)", "class_method_signature": "FreebaseHelper.transformNewToOldId(String newId)", "testcase": false, "constructor": false}, {"identifier": "getNameForID", "parameters": "(String id)", "modifiers": "public", "return": "Entity", "signature": "Entity getNameForID(String id)", "full_signature": "public Entity getNameForID(String id)", "class_method_signature": "FreebaseHelper.getNameForID(String id)", "testcase": false, "constructor": false}, {"identifier": "getNameForIDs", "parameters": "(String id)", "modifiers": "public", "return": "Entity", "signature": "Entity getNameForIDs(String id)", "full_signature": "public Entity getNameForIDs(String id)", "class_method_signature": "FreebaseHelper.getNameForIDs(String id)", "testcase": false, "constructor": false}, {"identifier": "checkIfCompoundRelationHolds", "parameters": "(String id1, String id2, String[] relation)", "modifiers": "public", "return": "boolean", "signature": "boolean checkIfCompoundRelationHolds(String id1, String id2, String[] relation)", "full_signature": "public boolean checkIfCompoundRelationHolds(String id1, String id2, String[] relation)", "class_method_signature": "FreebaseHelper.checkIfCompoundRelationHolds(String id1, String id2, String[] relation)", "testcase": false, "constructor": false}, {"identifier": "getInverseRelation", "parameters": "(String relation)", "modifiers": "private", "return": "String", "signature": "String getInverseRelation(String relation)", "full_signature": "private String getInverseRelation(String relation)", "class_method_signature": "FreebaseHelper.getInverseRelation(String relation)", "testcase": false, "constructor": false}, {"identifier": "getFreebaseTopicForID", "parameters": "(String freebaseID)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode getFreebaseTopicForID(String freebaseID)", "full_signature": "private JsonNode getFreebaseTopicForID(String freebaseID)", "class_method_signature": "FreebaseHelper.getFreebaseTopicForID(String freebaseID)", "testcase": false, "constructor": false}, {"identifier": "getTypesForRelationFromFreebase", "parameters": "(String r)", "modifiers": "public", "return": "FreebaseRelation", "signature": "FreebaseRelation getTypesForRelationFromFreebase(String r)", "full_signature": "public FreebaseRelation getTypesForRelationFromFreebase(String r)", "class_method_signature": "FreebaseHelper.getTypesForRelationFromFreebase(String r)", "testcase": false, "constructor": false}, {"identifier": "readAllInverseRelations", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void readAllInverseRelations()", "full_signature": "public void readAllInverseRelations()", "class_method_signature": "FreebaseHelper.readAllInverseRelations()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "FreebaseHelper.main(String[] args)", "testcase": false, "constructor": false}], "file": "core/src/main/java/edu/tuberlin/dima/textmining/jedi/core/freebase/FreebaseHelper.java"}, "focal_method": {"identifier": "getTypesForRelationFromFreebase", "parameters": "(String r)", "modifiers": "public", "return": "FreebaseRelation", "body": "public FreebaseRelation getTypesForRelationFromFreebase(String r) throws IOException {\n\n\t\tfinal String relation = r.replaceFirst(\"ns:\", \"\");\n\n\t\tString toAsk = relation;\n\t\tString left = null;\n\n\t\tboolean direct = true;\n\n\t\t// check if we have a compound type\n\t\tif (relation.contains(\"..\")) {\n\t\t\t// examples\n\t\t\t// ns:location.location.adjoin_s..location.adjoining_relationship.adjoins\t29587812\n\t\t\t// ns:organization.organization.headquarters..location.mailing_address.state_province_region\t2506163\n\t\t\t// ns:organization.organization_member.member_of..organization.organization_membership.organization\t2048109\n\t\t\ttoAsk = relation.substring(0, relation.indexOf(\"..\"));\n\t\t\tleft = relation.substring(relation.indexOf(\"..\") + 2);\n\t\t\tdirect = false;\n\t\t}\n\n\t\tJsonNode property;\n\n\t\ttry {\n\t\t\tproperty = getFreebaseTopicForID(toAsk);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tLOG.warn(\"Error\", e);\n\t\t\treturn null;\n\t\t}\n\n\t\tString one;\n\t\tString two;\n\n\t\tif (direct) {\n\n\t\t\tone = property.has(\"/type/property/schema\") ?\n\t\t\t\tproperty.get(\"/type/property/schema\").get(\"values\").get(0).get(\"id\").asText() :\n\t\t\t\tproperty.get(\"/type/object/type\").get(\"values\").get(0).get(\"id\").asText();\n\n\t\t\ttwo = property.has(\"/type/property/expected_type\") ?\n\t\t\t\tproperty.get(\"/type/property/expected_type\").get(\"values\").get(0).get(\"id\").asText() :\n\t\t\t\tproperty.get(\"/type/object/type\").get(\"values\").get(0).get(\"id\").asText();\n\n\n\t\t} else if (!property.has(\"/type/property/expected_type\")) {\n\n\t\t\tone = property.has(\"/type/property/schema\") ?\n\t\t\t\tproperty.get(\"/type/property/schema\").get(\"values\").get(0).get(\"id\").asText() :\n\t\t\t\tproperty.get(\"/type/object/type\").get(\"values\").get(0).get(\"id\").asText();\n\n\n\t\t\t// Property 2\n\t\t\tfinal JsonNode second = getFreebaseTopicForID(left);\n\n\t\t\ttwo = second.has(\"/type/property/expected_type\") ?\n\t\t\t\tsecond.get(\"/type/property/expected_type\").get(\"values\").get(0).get(\"id\").asText() :\n\t\t\t\tsecond.get(\"/type/object/type\").get(\"values\").get(0).get(\"id\").asText();\n\n\n\t\t} else {\n\n\t\t\t// Property 1\n\t\t\tone = property.get(\"/type/property/schema\").get(\"values\").get(0).get(\"id\").asText();\n\n\t\t\t// Property 2\n\t\t\tJsonNode second = getFreebaseTopicForID(left);\n\n\t\t\ttwo = second.has(\"/type/property/expected_type\") ?\n\t\t\t\tsecond.get(\"/type/property/expected_type\").get(\"values\").get(0).get(\"id\").asText() :\n\t\t\t\tsecond.get(\"/type/object/type\").get(\"values\").get(0).get(\"id\").asText();\n\n\n\t\t\t// Description\n\n\n\t\t}\n\t\tone = one.replaceFirst(\"/\", \"ns:\").replaceAll(\"/\", \".\");\n\t\ttwo = two.replaceFirst(\"/\", \"ns:\").replaceAll(\"/\", \".\");\n\t\tFreebaseRelation relDescription = new FreebaseRelation(one, two, null, null);\n\t\tLOG.info(relDescription.toString());\n\n\n\t\treturn relDescription;\n\n\t}", "signature": "FreebaseRelation getTypesForRelationFromFreebase(String r)", "full_signature": "public FreebaseRelation getTypesForRelationFromFreebase(String r)", "class_method_signature": "FreebaseHelper.getTypesForRelationFromFreebase(String r)", "testcase": false, "constructor": false, "invocations": ["replaceFirst", "contains", "substring", "indexOf", "substring", "indexOf", "getFreebaseTopicForID", "warn", "has", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "has", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "has", "has", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "getFreebaseTopicForID", "has", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "getFreebaseTopicForID", "has", "asText", "get", "get", "get", "get", "asText", "get", "get", "get", "get", "replaceAll", "replaceFirst", "replaceAll", "replaceFirst", "info", "toString"]}, "repository": {"repo_id": 25884252, "url": "https://github.com/jkirsch/jedi", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 759, "license": "licensed"}}