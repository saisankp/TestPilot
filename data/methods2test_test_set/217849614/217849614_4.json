{"test_class": {"identifier": "BloomFilterManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GuavaBloomFilterFactory factory = new GuavaBloomFilterFactory();", "modifier": "private static final", "type": "GuavaBloomFilterFactory", "declarator": "factory = new GuavaBloomFilterFactory()", "var_name": "factory"}, {"original_string": "private static final String testingFilterName = \"TestingFilterName\";", "modifier": "private static final", "type": "String", "declarator": "testingFilterName = \"TestingFilterName\"", "var_name": "testingFilterName"}, {"original_string": "private BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig> manager;", "modifier": "private", "type": "BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig>", "declarator": "manager", "var_name": "manager"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/BloomFilterManagerImplTest.java"}, "test_case": {"identifier": "testSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSize() {\n        final int expectSize = ThreadLocalRandom.current().nextInt(1, 100);\n        final ExpirableBloomFilterConfig config = new ExpirableBloomFilterConfig();\n        for (int i = 0; i < expectSize; i++) {\n            manager.createFilter(numberString(i), config);\n        }\n\n        assertThat(manager.size()).isEqualTo(expectSize);\n    }", "signature": "void testSize()", "full_signature": "@Test public void testSize()", "class_method_signature": "BloomFilterManagerImplTest.testSize()", "testcase": true, "constructor": false, "invocations": ["nextInt", "current", "createFilter", "numberString", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "BloomFilterManagerImpl", "superclass": "", "interfaces": "implements BloomFilterManager<T, C>,\n        Listenable<BloomFilterManagerListener<? super T, C>>", "fields": [{"original_string": "private static final FilterNotFoundException FILTER_NOT_FOUND_EXCEPTION = new FilterNotFoundException();", "modifier": "private static final", "type": "FilterNotFoundException", "declarator": "FILTER_NOT_FOUND_EXCEPTION = new FilterNotFoundException()", "var_name": "FILTER_NOT_FOUND_EXCEPTION"}, {"original_string": "private final List<BloomFilterManagerListener<? super T, C>> listeners;", "modifier": "private final", "type": "List<BloomFilterManagerListener<? super T, C>>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private final ConcurrentHashMap<String, T> filterMap;", "modifier": "private final", "type": "ConcurrentHashMap<String, T>", "declarator": "filterMap", "var_name": "filterMap"}, {"original_string": "private final BloomFilterFactory<? extends T, ? super C> factory;", "modifier": "private final", "type": "BloomFilterFactory<? extends T, ? super C>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final Lock filterMapLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "filterMapLock = new ReentrantLock()", "var_name": "filterMapLock"}], "methods": [{"identifier": "BloomFilterManagerImpl", "parameters": "(BloomFilterFactory<? extends T, ? super C> factory)", "modifiers": "", "return": "", "signature": " BloomFilterManagerImpl(BloomFilterFactory<? extends T, ? super C> factory)", "full_signature": "  BloomFilterManagerImpl(BloomFilterFactory<? extends T, ? super C> factory)", "class_method_signature": "BloomFilterManagerImpl.BloomFilterManagerImpl(BloomFilterFactory<? extends T, ? super C> factory)", "testcase": false, "constructor": true}, {"identifier": "createFilter", "parameters": "(String name, C config, boolean overwrite)", "modifiers": "@Override public", "return": "CreateFilterResult<T>", "signature": "CreateFilterResult<T> createFilter(String name, C config, boolean overwrite)", "full_signature": "@Override public CreateFilterResult<T> createFilter(String name, C config, boolean overwrite)", "class_method_signature": "BloomFilterManagerImpl.createFilter(String name, C config, boolean overwrite)", "testcase": false, "constructor": false}, {"identifier": "addFilters", "parameters": "(Iterable<FilterRecord<? extends T>> filters)", "modifiers": "@Override public", "return": "void", "signature": "void addFilters(Iterable<FilterRecord<? extends T>> filters)", "full_signature": "@Override public void addFilters(Iterable<FilterRecord<? extends T>> filters)", "class_method_signature": "BloomFilterManagerImpl.addFilters(Iterable<FilterRecord<? extends T>> filters)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "(String name)", "modifiers": "@Nullable @Override public", "return": "T", "signature": "T getFilter(String name)", "full_signature": "@Nullable @Override public T getFilter(String name)", "class_method_signature": "BloomFilterManagerImpl.getFilter(String name)", "testcase": false, "constructor": false}, {"identifier": "ensureGetValidFilter", "parameters": "(String name)", "modifiers": "@Override public", "return": "T", "signature": "T ensureGetValidFilter(String name)", "full_signature": "@Override public T ensureGetValidFilter(String name)", "class_method_signature": "BloomFilterManagerImpl.ensureGetValidFilter(String name)", "testcase": false, "constructor": false}, {"identifier": "getAllFilterNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAllFilterNames()", "full_signature": "@Override public List<String> getAllFilterNames()", "class_method_signature": "BloomFilterManagerImpl.getAllFilterNames()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BloomFilterManagerImpl.size()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String name)", "full_signature": "@Override public void remove(String name)", "class_method_signature": "BloomFilterManagerImpl.remove(String name)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String name, T filter)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String name, T filter)", "full_signature": "@Override public void remove(String name, T filter)", "class_method_signature": "BloomFilterManagerImpl.remove(String name, T filter)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<FilterRecord<T>>", "signature": "Iterator<FilterRecord<T>> iterator()", "full_signature": "@Override public Iterator<FilterRecord<T>> iterator()", "class_method_signature": "BloomFilterManagerImpl.iterator()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(BloomFilterManagerListener<? super T, C> listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(BloomFilterManagerListener<? super T, C> listener)", "full_signature": "@Override public void addListener(BloomFilterManagerListener<? super T, C> listener)", "class_method_signature": "BloomFilterManagerImpl.addListener(BloomFilterManagerListener<? super T, C> listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(BloomFilterManagerListener<? super T, C> listener)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeListener(BloomFilterManagerListener<? super T, C> listener)", "full_signature": "@Override public boolean removeListener(BloomFilterManagerListener<? super T, C> listener)", "class_method_signature": "BloomFilterManagerImpl.removeListener(BloomFilterManagerListener<? super T, C> listener)", "testcase": false, "constructor": false}, {"identifier": "notifyBloomFilterCreated", "parameters": "(String name, C config, T filter)", "modifiers": "private", "return": "void", "signature": "void notifyBloomFilterCreated(String name, C config, T filter)", "full_signature": "private void notifyBloomFilterCreated(String name, C config, T filter)", "class_method_signature": "BloomFilterManagerImpl.notifyBloomFilterCreated(String name, C config, T filter)", "testcase": false, "constructor": false}, {"identifier": "notifyBloomFilterRemoved", "parameters": "(String name, T filter)", "modifiers": "private", "return": "void", "signature": "void notifyBloomFilterRemoved(String name, T filter)", "full_signature": "private void notifyBloomFilterRemoved(String name, T filter)", "class_method_signature": "BloomFilterManagerImpl.notifyBloomFilterRemoved(String name, T filter)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(Consumer<BloomFilterManagerListener<? super T, C>> consumer)", "modifiers": "private", "return": "void", "signature": "void notifyListeners(Consumer<BloomFilterManagerListener<? super T, C>> consumer)", "full_signature": "private void notifyListeners(Consumer<BloomFilterManagerListener<? super T, C>> consumer)", "class_method_signature": "BloomFilterManagerImpl.notifyListeners(Consumer<BloomFilterManagerListener<? super T, C>> consumer)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/BloomFilterManagerImpl.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int size() {\n        return filterMap.size();\n    }", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BloomFilterManagerImpl.size()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}