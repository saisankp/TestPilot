{"test_class": {"identifier": "SequenceFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private CurrentDateProvider dateProvider;", "modifier": "@Mock\n    private", "type": "CurrentDateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}, {"original_string": "@InjectMocks\n    private SequenceFactory underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceFactory", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-sequence/src/test/java/com/epam/wilma/sequence/factory/SequenceFactoryTest.java"}, "test_case": {"identifier": "testCreateNewSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateNewSequence() {\n        //GIVEN\n        String testKey = \"TestKey\";\n        String logggerId = \"testId\";\n        given(request.getWilmaMessageId()).willReturn(logggerId);\n        //WHEN\n        WilmaSequence result = underTest.createNewSequence(testKey, request, 1000L);\n        //THEN\n        Assert.assertEquals(result.getSequenceKey(), testKey);\n        Assert.assertFalse(result.isExpired(new Timestamp(1000L)));\n        RequestResponsePair firstPair = result.getPairs().get(logggerId);\n        Assert.assertEquals(firstPair.getRequest(), request);\n    }", "signature": "void testCreateNewSequence()", "full_signature": "@Test public void testCreateNewSequence()", "class_method_signature": "SequenceFactoryTest.testCreateNewSequence()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getWilmaMessageId", "createNewSequence", "assertEquals", "getSequenceKey", "assertFalse", "isExpired", "get", "getPairs", "assertEquals", "getRequest"]}, "focal_class": {"identifier": "SequenceFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CurrentDateProvider dateProvider;", "modifier": "@Autowired\n    private", "type": "CurrentDateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}], "methods": [{"identifier": "createNewSequence", "parameters": "(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "modifiers": "public", "return": "WilmaSequence", "signature": "WilmaSequence createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "full_signature": "public WilmaSequence createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "class_method_signature": "SequenceFactory.createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-sequence/src/main/java/com/epam/wilma/sequence/factory/SequenceFactory.java"}, "focal_method": {"identifier": "createNewSequence", "parameters": "(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "modifiers": "public", "return": "WilmaSequence", "body": "public WilmaSequence createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout) {\n        WilmaSequencePairs messageStore = new WilmaSequencePairs();\n        RequestResponsePair firstPair = new RequestResponsePair(request);\n        String loggerId = request.getWilmaMessageId();\n        messageStore.addStore(loggerId, firstPair);\n        WilmaSequence sequence = new WilmaSequence(sequenceKey, new Timestamp(dateProvider.getCurrentTimeInMillis() + timeout), messageStore);\n        return sequence;\n    }", "signature": "WilmaSequence createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "full_signature": "public WilmaSequence createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "class_method_signature": "SequenceFactory.createNewSequence(final String sequenceKey, final WilmaHttpRequest request, final long timeout)", "testcase": false, "constructor": false, "invocations": ["getWilmaMessageId", "addStore", "getCurrentTimeInMillis"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}