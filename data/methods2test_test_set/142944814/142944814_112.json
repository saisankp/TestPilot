{"test_class": {"identifier": "AergoClientImplTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/AergoClientImplTest.java"}, "test_case": {"identifier": "testCacheChainIdHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCacheChainIdHash() {\n    // given\n    final Context context = EmptyContext.getInstance()\n        .withValue(GRPC_VALUE_CHAIN_ID_HASH_HOLDER, new ChainIdHashHolder());\n    final ContextStorage<Context> contextStorage = new UnmodifiableContextStorage(context);\n    final AergoClientImpl aergoClient = new AergoClientImpl(contextStorage);\n\n    // then\n    final ChainIdHash expected = ChainIdHash.of(BytesValue.EMPTY);\n    aergoClient.cacheChainIdHash(expected);\n    final ChainIdHash actual = aergoClient.getCachedChainIdHash();\n    assertEquals(expected, actual);\n  }", "signature": "void testCacheChainIdHash()", "full_signature": "@Test public void testCacheChainIdHash()", "class_method_signature": "AergoClientImplTest.testCacheChainIdHash()", "testcase": true, "constructor": false, "invocations": ["withValue", "getInstance", "of", "cacheChainIdHash", "getCachedChainIdHash", "assertEquals"]}, "focal_class": {"identifier": "AergoClientImpl", "superclass": "", "interfaces": "implements AergoClient", "fields": [{"original_string": "protected final ContextStorage<Context> contextStorage;", "modifier": "protected final", "type": "ContextStorage<Context>", "declarator": "contextStorage", "var_name": "contextStorage"}, {"original_string": "@Getter(lazy = true)\n  private final AccountOperation accountOperation = new AccountTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "AccountOperation", "declarator": "accountOperation = new AccountTemplate(contextStorage)", "var_name": "accountOperation"}, {"original_string": "@Getter(lazy = true)\n  private final KeyStoreOperation keyStoreOperation = new KeyStoreTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "KeyStoreOperation", "declarator": "keyStoreOperation = new KeyStoreTemplate(contextStorage)", "var_name": "keyStoreOperation"}, {"original_string": "@Getter(lazy = true)\n  private final BlockOperation blockOperation = new BlockTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "BlockOperation", "declarator": "blockOperation = new BlockTemplate(contextStorage)", "var_name": "blockOperation"}, {"original_string": "@Getter(lazy = true)\n  private final BlockchainOperation blockchainOperation = new BlockchainTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "BlockchainOperation", "declarator": "blockchainOperation = new BlockchainTemplate(contextStorage)", "var_name": "blockchainOperation"}, {"original_string": "@Getter(lazy = true)\n  private final TransactionOperation transactionOperation = new TransactionTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "TransactionOperation", "declarator": "transactionOperation = new TransactionTemplate(contextStorage)", "var_name": "transactionOperation"}, {"original_string": "@Getter(lazy = true)\n  private final ContractOperation contractOperation = new ContractTemplate(contextStorage);", "modifier": "@Getter(lazy = true)\n  private final", "type": "ContractOperation", "declarator": "contractOperation = new ContractTemplate(contextStorage)", "var_name": "contractOperation"}], "methods": [{"identifier": "AergoClientImpl", "parameters": "(final ContextStorage<Context> contextStorage)", "modifiers": "", "return": "", "signature": " AergoClientImpl(final ContextStorage<Context> contextStorage)", "full_signature": "  AergoClientImpl(final ContextStorage<Context> contextStorage)", "class_method_signature": "AergoClientImpl.AergoClientImpl(final ContextStorage<Context> contextStorage)", "testcase": false, "constructor": true}, {"identifier": "getCachedChainIdHash", "parameters": "()", "modifiers": "@Override public", "return": "ChainIdHash", "signature": "ChainIdHash getCachedChainIdHash()", "full_signature": "@Override public ChainIdHash getCachedChainIdHash()", "class_method_signature": "AergoClientImpl.getCachedChainIdHash()", "testcase": false, "constructor": false}, {"identifier": "cacheChainIdHash", "parameters": "(final ChainIdHash chainIdHash)", "modifiers": "@Override public", "return": "void", "signature": "void cacheChainIdHash(final ChainIdHash chainIdHash)", "full_signature": "@Override public void cacheChainIdHash(final ChainIdHash chainIdHash)", "class_method_signature": "AergoClientImpl.cacheChainIdHash(final ChainIdHash chainIdHash)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AergoClientImpl.close()", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/AergoClientImpl.java"}, "focal_method": {"identifier": "cacheChainIdHash", "parameters": "(final ChainIdHash chainIdHash)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void cacheChainIdHash(final ChainIdHash chainIdHash) {\n    assertNotNull(chainIdHash);\n    final Context context = contextStorage.get();\n    final ChainIdHashHolder chainIdHashHolder = context.get(GRPC_VALUE_CHAIN_ID_HASH_HOLDER);\n    if (null == chainIdHashHolder) {\n      throw new HerajException(\"No chain id hash holder in context\");\n    }\n    chainIdHashHolder.put(chainIdHash);\n  }", "signature": "void cacheChainIdHash(final ChainIdHash chainIdHash)", "full_signature": "@Override public void cacheChainIdHash(final ChainIdHash chainIdHash)", "class_method_signature": "AergoClientImpl.cacheChainIdHash(final ChainIdHash chainIdHash)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "get", "get", "put"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}