{"test_class": {"identifier": "AdbDeviceFileSystemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TIMEOUT_MILLISECONDS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "TIMEOUT_MILLISECONDS = 30_000", "var_name": "TIMEOUT_MILLISECONDS"}, {"original_string": "@Nullable private Disposable myParentDisposable;", "modifier": "@Nullable private", "type": "Disposable", "declarator": "myParentDisposable", "var_name": "myParentDisposable"}, {"original_string": "@Nullable private AdbDeviceFileSystem myFileSystem;", "modifier": "@Nullable private", "type": "AdbDeviceFileSystem", "declarator": "myFileSystem", "var_name": "myFileSystem"}, {"original_string": "@Nullable private MockDdmlibDevice myMockDevice;", "modifier": "@Nullable private", "type": "MockDdmlibDevice", "declarator": "myMockDevice", "var_name": "myMockDevice"}, {"original_string": "@Nullable private ExecutorService myCallbackExecutor;", "modifier": "@Nullable private", "type": "ExecutorService", "declarator": "myCallbackExecutor", "var_name": "myCallbackExecutor"}, {"original_string": "@Rule\n  public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@ClassRule\n  public static final TestRule ourLoggerFactoryRule = new DebugLoggerFactoryRule();", "modifier": "@ClassRule\n  public static final", "type": "TestRule", "declarator": "ourLoggerFactoryRule = new DebugLoggerFactoryRule()", "var_name": "ourLoggerFactoryRule"}], "file": "android/testSrc/com/android/tools/idea/explorer/adbimpl/AdbDeviceFileSystemTest.java"}, "test_case": {"identifier": "test_FileSystem_UploadSystemFile_ReturnsError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_FileSystem_UploadSystemFile_ReturnsError() throws Exception {\n    // Prepare\n    assert myFileSystem != null;\n    assert myMockDevice != null;\n    TestDevices.addEmulatorApi25Commands(myMockDevice.getShellCommands());\n    myMockDevice.addRemoteRestrictedAccessFile(\"/system/build.prop\", 1_024);\n    DeviceFileEntry dataEntry = waitForFuture(myFileSystem.getEntry(\"/system\"));\n    Path tempFile = FileUtil.createTempFile(\"localFile\", \"tmp\").toPath();\n    Files.write(tempFile, new byte[1024]);\n\n\n    // Act\n    AtomicReference<Long> totalBytesRef = new AtomicReference<>();\n    Throwable error = waitForFutureException(dataEntry.uploadFile(tempFile, \"build.prop\", new FileTransferProgress() {\n      @Override\n      public void progress(long currentBytes, long totalBytes) {\n        totalBytesRef.set(totalBytes);\n      }\n\n      @Override\n      public boolean isCancelled() {\n        return false;\n      }\n    }));\n    // Ensure all progress callbacks have been executed\n    myCallbackExecutor.submit(EmptyRunnable.getInstance()).get(TIMEOUT_MILLISECONDS, TimeUnit.MILLISECONDS);\n\n    // Assert\n    assertThat(error).isNotNull();\n    assertThat(error).isInstanceOf(AdbShellCommandException.class);\n    assertThat(error.getMessage()).isEqualTo(\"cp: /system/build.prop: Read-only file system\");\n  }", "signature": "void test_FileSystem_UploadSystemFile_ReturnsError()", "full_signature": "@Test public void test_FileSystem_UploadSystemFile_ReturnsError()", "class_method_signature": "AdbDeviceFileSystemTest.test_FileSystem_UploadSystemFile_ReturnsError()", "testcase": true, "constructor": false, "invocations": ["addEmulatorApi25Commands", "getShellCommands", "addRemoteRestrictedAccessFile", "waitForFuture", "getEntry", "toPath", "createTempFile", "write", "waitForFutureException", "uploadFile", "set", "get", "submit", "getInstance", "isNotNull", "assertThat", "isInstanceOf", "assertThat", "isEqualTo", "assertThat", "getMessage"]}, "focal_class": {"identifier": "AdbDeviceFileSystem", "superclass": "", "interfaces": "implements DeviceFileSystem", "fields": [{"original_string": "@NotNull private final IDevice myDevice;", "modifier": "@NotNull private final", "type": "IDevice", "declarator": "myDevice", "var_name": "myDevice"}, {"original_string": "@NotNull private final AdbDeviceCapabilities myDeviceCapabilities;", "modifier": "@NotNull private final", "type": "AdbDeviceCapabilities", "declarator": "myDeviceCapabilities", "var_name": "myDeviceCapabilities"}, {"original_string": "@NotNull private final AdbFileListing myFileListing;", "modifier": "@NotNull private final", "type": "AdbFileListing", "declarator": "myFileListing", "var_name": "myFileListing"}, {"original_string": "@NotNull private final AdbFileOperations myFileOperations;", "modifier": "@NotNull private final", "type": "AdbFileOperations", "declarator": "myFileOperations", "var_name": "myFileOperations"}, {"original_string": "@NotNull private final AdbFileTransfer myFileTransfer;", "modifier": "@NotNull private final", "type": "AdbFileTransfer", "declarator": "myFileTransfer", "var_name": "myFileTransfer"}, {"original_string": "@NotNull private final FutureCallbackExecutor myEdtExecutor;", "modifier": "@NotNull private final", "type": "FutureCallbackExecutor", "declarator": "myEdtExecutor", "var_name": "myEdtExecutor"}, {"original_string": "@NotNull private final FutureCallbackExecutor myTaskExecutor;", "modifier": "@NotNull private final", "type": "FutureCallbackExecutor", "declarator": "myTaskExecutor", "var_name": "myTaskExecutor"}], "methods": [{"identifier": "AdbDeviceFileSystem", "parameters": "(@NotNull IDevice device, @NotNull Executor edtExecutor, @NotNull Executor taskExecutor)", "modifiers": "public", "return": "", "signature": " AdbDeviceFileSystem(@NotNull IDevice device, @NotNull Executor edtExecutor, @NotNull Executor taskExecutor)", "full_signature": "public  AdbDeviceFileSystem(@NotNull IDevice device, @NotNull Executor edtExecutor, @NotNull Executor taskExecutor)", "class_method_signature": "AdbDeviceFileSystem.AdbDeviceFileSystem(@NotNull IDevice device, @NotNull Executor edtExecutor, @NotNull Executor taskExecutor)", "testcase": false, "constructor": true}, {"identifier": "AdbDeviceFileSystem", "parameters": "(AdbDeviceFileSystemService service, IDevice device)", "modifiers": "public", "return": "", "signature": " AdbDeviceFileSystem(AdbDeviceFileSystemService service, IDevice device)", "full_signature": "public  AdbDeviceFileSystem(AdbDeviceFileSystemService service, IDevice device)", "class_method_signature": "AdbDeviceFileSystem.AdbDeviceFileSystem(AdbDeviceFileSystemService service, IDevice device)", "testcase": false, "constructor": true}, {"identifier": "isDevice", "parameters": "(@Nullable IDevice device)", "modifiers": "", "return": "boolean", "signature": "boolean isDevice(@Nullable IDevice device)", "full_signature": " boolean isDevice(@Nullable IDevice device)", "class_method_signature": "AdbDeviceFileSystem.isDevice(@Nullable IDevice device)", "testcase": false, "constructor": false}, {"identifier": "getDevice", "parameters": "()", "modifiers": "@NotNull", "return": "IDevice", "signature": "IDevice getDevice()", "full_signature": "@NotNull IDevice getDevice()", "class_method_signature": "AdbDeviceFileSystem.getDevice()", "testcase": false, "constructor": false}, {"identifier": "getCapabilities", "parameters": "()", "modifiers": "@NotNull public", "return": "AdbDeviceCapabilities", "signature": "AdbDeviceCapabilities getCapabilities()", "full_signature": "@NotNull public AdbDeviceCapabilities getCapabilities()", "class_method_signature": "AdbDeviceFileSystem.getCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getAdbFileListing", "parameters": "()", "modifiers": "@NotNull public", "return": "AdbFileListing", "signature": "AdbFileListing getAdbFileListing()", "full_signature": "@NotNull public AdbFileListing getAdbFileListing()", "class_method_signature": "AdbDeviceFileSystem.getAdbFileListing()", "testcase": false, "constructor": false}, {"identifier": "getAdbFileOperations", "parameters": "()", "modifiers": "@NotNull public", "return": "AdbFileOperations", "signature": "AdbFileOperations getAdbFileOperations()", "full_signature": "@NotNull public AdbFileOperations getAdbFileOperations()", "class_method_signature": "AdbDeviceFileSystem.getAdbFileOperations()", "testcase": false, "constructor": false}, {"identifier": "getAdbFileTransfer", "parameters": "()", "modifiers": "@NotNull public", "return": "AdbFileTransfer", "signature": "AdbFileTransfer getAdbFileTransfer()", "full_signature": "@NotNull public AdbFileTransfer getAdbFileTransfer()", "class_method_signature": "AdbDeviceFileSystem.getAdbFileTransfer()", "testcase": false, "constructor": false}, {"identifier": "getTaskExecutor", "parameters": "()", "modifiers": "@NotNull", "return": "FutureCallbackExecutor", "signature": "FutureCallbackExecutor getTaskExecutor()", "full_signature": "@NotNull FutureCallbackExecutor getTaskExecutor()", "class_method_signature": "AdbDeviceFileSystem.getTaskExecutor()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getName()", "full_signature": "@NotNull @Override public String getName()", "class_method_signature": "AdbDeviceFileSystem.getName()", "testcase": false, "constructor": false}, {"identifier": "getDeviceState", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "DeviceState", "signature": "DeviceState getDeviceState()", "full_signature": "@NotNull @Override public DeviceState getDeviceState()", "class_method_signature": "AdbDeviceFileSystem.getDeviceState()", "testcase": false, "constructor": false}, {"identifier": "getRootDirectory", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<DeviceFileEntry>", "signature": "ListenableFuture<DeviceFileEntry> getRootDirectory()", "full_signature": "@NotNull @Override public ListenableFuture<DeviceFileEntry> getRootDirectory()", "class_method_signature": "AdbDeviceFileSystem.getRootDirectory()", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "(@NotNull String path)", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<DeviceFileEntry>", "signature": "ListenableFuture<DeviceFileEntry> getEntry(@NotNull String path)", "full_signature": "@NotNull @Override public ListenableFuture<DeviceFileEntry> getEntry(@NotNull String path)", "class_method_signature": "AdbDeviceFileSystem.getEntry(@NotNull String path)", "testcase": false, "constructor": false}, {"identifier": "resolvePathSegments", "parameters": "(@NotNull SettableFuture<DeviceFileEntry> future,\n                                   @NotNull DeviceFileEntry currentEntry,\n                                   @NotNull String[] segments,\n                                   int segmentIndex)", "modifiers": "private", "return": "void", "signature": "void resolvePathSegments(@NotNull SettableFuture<DeviceFileEntry> future,\n                                   @NotNull DeviceFileEntry currentEntry,\n                                   @NotNull String[] segments,\n                                   int segmentIndex)", "full_signature": "private void resolvePathSegments(@NotNull SettableFuture<DeviceFileEntry> future,\n                                   @NotNull DeviceFileEntry currentEntry,\n                                   @NotNull String[] segments,\n                                   int segmentIndex)", "class_method_signature": "AdbDeviceFileSystem.resolvePathSegments(@NotNull SettableFuture<DeviceFileEntry> future,\n                                   @NotNull DeviceFileEntry currentEntry,\n                                   @NotNull String[] segments,\n                                   int segmentIndex)", "testcase": false, "constructor": false}, {"identifier": "resolveMountPoint", "parameters": "(@NotNull AdbDeviceFileEntry entry)", "modifiers": "@NotNull public", "return": "ListenableFuture<AdbDeviceFileEntry>", "signature": "ListenableFuture<AdbDeviceFileEntry> resolveMountPoint(@NotNull AdbDeviceFileEntry entry)", "full_signature": "@NotNull public ListenableFuture<AdbDeviceFileEntry> resolveMountPoint(@NotNull AdbDeviceFileEntry entry)", "class_method_signature": "AdbDeviceFileSystem.resolveMountPoint(@NotNull AdbDeviceFileEntry entry)", "testcase": false, "constructor": false}, {"identifier": "createDirectFileEntry", "parameters": "(@NotNull AdbDeviceFileEntry entry)", "modifiers": "@NotNull private static", "return": "AdbDeviceDirectFileEntry", "signature": "AdbDeviceDirectFileEntry createDirectFileEntry(@NotNull AdbDeviceFileEntry entry)", "full_signature": "@NotNull private static AdbDeviceDirectFileEntry createDirectFileEntry(@NotNull AdbDeviceFileEntry entry)", "class_method_signature": "AdbDeviceFileSystem.createDirectFileEntry(@NotNull AdbDeviceFileEntry entry)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/explorer/adbimpl/AdbDeviceFileSystem.java"}, "focal_method": {"identifier": "getEntry", "parameters": "(@NotNull String path)", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<DeviceFileEntry>", "body": "@NotNull\n  @Override\n  public ListenableFuture<DeviceFileEntry> getEntry(@NotNull String path) {\n    SettableFuture<DeviceFileEntry> resultFuture = SettableFuture.create();\n\n    ListenableFuture<DeviceFileEntry> currentDir = getRootDirectory();\n    getTaskExecutor().addCallback(currentDir, new FutureCallback<DeviceFileEntry>() {\n      @Override\n      public void onSuccess(@Nullable DeviceFileEntry result) {\n        assert result != null;\n\n        if (StringUtil.isEmpty(path) || StringUtil.equals(path, FileListingService.FILE_SEPARATOR)) {\n          resultFuture.set(result);\n          return;\n        }\n\n        String[] pathSegments = path.substring(1).split(FileListingService.FILE_SEPARATOR);\n        resolvePathSegments(resultFuture, result, pathSegments, 0);\n      }\n\n      @Override\n      public void onFailure(@NotNull Throwable t) {\n        resultFuture.setException(t);\n      }\n    });\n\n    return resultFuture;\n  }", "signature": "ListenableFuture<DeviceFileEntry> getEntry(@NotNull String path)", "full_signature": "@NotNull @Override public ListenableFuture<DeviceFileEntry> getEntry(@NotNull String path)", "class_method_signature": "AdbDeviceFileSystem.getEntry(@NotNull String path)", "testcase": false, "constructor": false, "invocations": ["create", "getRootDirectory", "addCallback", "getTaskExecutor", "isEmpty", "equals", "set", "split", "substring", "resolvePathSegments", "setException"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}