{"test_class": {"identifier": "ConnectionValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "private static final Config CONFIG =\n            TestConstants.CONFIG.withValue(\"ditto.connectivity.connection.blocked-hostnames\",\n                    ConfigValueFactory.fromAnyRef(\"8.8.8.8,2001:4860:4860:0000:0000:0000:0000:0001\"));", "modifier": "private static final", "type": "Config", "declarator": "CONFIG =\n            TestConstants.CONFIG.withValue(\"ditto.connectivity.connection.blocked-hostnames\",\n                    ConfigValueFactory.fromAnyRef(\"8.8.8.8,2001:4860:4860:0000:0000:0000:0000:0001\"))", "var_name": "CONFIG"}, {"original_string": "private static final ConnectivityConfig CONNECTIVITY_CONFIG_WITH_ENABLED_BLOCKLIST =\n            DittoConnectivityConfig.of(DefaultScopedConfig.dittoScoped(CONFIG));", "modifier": "private static final", "type": "ConnectivityConfig", "declarator": "CONNECTIVITY_CONFIG_WITH_ENABLED_BLOCKLIST =\n            DittoConnectivityConfig.of(DefaultScopedConfig.dittoScoped(CONFIG))", "var_name": "CONNECTIVITY_CONFIG_WITH_ENABLED_BLOCKLIST"}, {"original_string": "private static ActorSystem actorSystem;", "modifier": "private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "@Rule\n    public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/validation/ConnectionValidatorTest.java"}, "test_case": {"identifier": "rejectIllFormedClientKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rejectIllFormedClientKey() {\n        final Connection connection = createConnection(CONNECTION_ID).toBuilder()\n                .credentials(ClientCertificateCredentials.newBuilder()\n                        .clientKey(\"-----BEGIN RSA PRIVATE KEY-----\\nWurst\\n-----END RSA PRIVATE KEY-----\")\n                        .clientCertificate(Certificates.CLIENT_CRT)\n                        .build())\n                .build();\n        final ConnectionValidator underTest = getConnectionValidator();\n        assertThatExceptionOfType(ConnectionConfigurationInvalidException.class)\n                .isThrownBy(() -> underTest.validate(connection, DittoHeaders.empty(), actorSystem));\n\n    }", "signature": "void rejectIllFormedClientKey()", "full_signature": "@Test public void rejectIllFormedClientKey()", "class_method_signature": "ConnectionValidatorTest.rejectIllFormedClientKey()", "testcase": true, "constructor": false, "invocations": ["build", "credentials", "toBuilder", "createConnection", "build", "clientCertificate", "clientKey", "newBuilder", "getConnectionValidator", "isThrownBy", "assertThatExceptionOfType", "validate", "empty"]}, "focal_class": {"identifier": "ConnectionValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<ConnectionType, AbstractProtocolValidator> specMap;", "modifier": "private final", "type": "Map<ConnectionType, AbstractProtocolValidator>", "declarator": "specMap", "var_name": "specMap"}, {"original_string": "private final QueryFilterCriteriaFactory queryFilterCriteriaFactory;", "modifier": "private final", "type": "QueryFilterCriteriaFactory", "declarator": "queryFilterCriteriaFactory", "var_name": "queryFilterCriteriaFactory"}, {"original_string": "private final int mappingNumberLimitSource;", "modifier": "private final", "type": "int", "declarator": "mappingNumberLimitSource", "var_name": "mappingNumberLimitSource"}, {"original_string": "private final int mappingNumberLimitTarget;", "modifier": "private final", "type": "int", "declarator": "mappingNumberLimitTarget", "var_name": "mappingNumberLimitTarget"}, {"original_string": "private final HostValidator hostValidator;", "modifier": "private final", "type": "HostValidator", "declarator": "hostValidator", "var_name": "hostValidator"}], "methods": [{"identifier": "ConnectionValidator", "parameters": "(\n            final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "modifiers": "private", "return": "", "signature": " ConnectionValidator(\n            final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "full_signature": "private  ConnectionValidator(\n            final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "class_method_signature": "ConnectionValidator.ConnectionValidator(\n            final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "modifiers": "public static", "return": "ConnectionValidator", "signature": "ConnectionValidator of(final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "full_signature": "public static ConnectionValidator of(final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "class_method_signature": "ConnectionValidator.of(final ConnectivityConfig connectivityConfig,\n            LoggingAdapter loggingAdapter, final AbstractProtocolValidator... connectionSpecs)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "modifiers": "", "return": "void", "signature": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "full_signature": " void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "class_method_signature": "ConnectionValidator.validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "testcase": false, "constructor": false}, {"identifier": "checkMappingNumberOfSourcesAndTargets", "parameters": "(final DittoHeaders dittoHeaders, final Connection connection)", "modifiers": "private", "return": "void", "signature": "void checkMappingNumberOfSourcesAndTargets(final DittoHeaders dittoHeaders, final Connection connection)", "full_signature": "private void checkMappingNumberOfSourcesAndTargets(final DittoHeaders dittoHeaders, final Connection connection)", "class_method_signature": "ConnectionValidator.checkMappingNumberOfSourcesAndTargets(final DittoHeaders dittoHeaders, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "checkPayloadMappingLimit", "parameters": "(final PayloadMapping mapping, final int limit, final String entity,\n            final String address, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "void", "signature": "void checkPayloadMappingLimit(final PayloadMapping mapping, final int limit, final String entity,\n            final String address, final DittoHeaders dittoHeaders)", "full_signature": "private void checkPayloadMappingLimit(final PayloadMapping mapping, final int limit, final String entity,\n            final String address, final DittoHeaders dittoHeaders)", "class_method_signature": "ConnectionValidator.checkPayloadMappingLimit(final PayloadMapping mapping, final int limit, final String entity,\n            final String address, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "validateSourceAndTargetAddressesAreNonempty", "parameters": "(final Connection connection,\n            final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "void", "signature": "void validateSourceAndTargetAddressesAreNonempty(final Connection connection,\n            final DittoHeaders dittoHeaders)", "full_signature": "private void validateSourceAndTargetAddressesAreNonempty(final Connection connection,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ConnectionValidator.validateSourceAndTargetAddressesAreNonempty(final Connection connection,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "validateFormatOfCertificates", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "void", "signature": "void validateFormatOfCertificates(final Connection connection, final DittoHeaders dittoHeaders)", "full_signature": "private static void validateFormatOfCertificates(final Connection connection, final DittoHeaders dittoHeaders)", "class_method_signature": "ConnectionValidator.validateFormatOfCertificates(final Connection connection, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "emptyAddressesError", "parameters": "(final String location, final DittoHeaders dittoHeaders)", "modifiers": "private static", "return": "DittoRuntimeException", "signature": "DittoRuntimeException emptyAddressesError(final String location, final DittoHeaders dittoHeaders)", "full_signature": "private static DittoRuntimeException emptyAddressesError(final String location, final DittoHeaders dittoHeaders)", "class_method_signature": "ConnectionValidator.emptyAddressesError(final String location, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/validation/ConnectionValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "modifiers": "", "return": "void", "body": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem) {\n        final AbstractProtocolValidator spec = specMap.get(connection.getConnectionType());\n        validateSourceAndTargetAddressesAreNonempty(connection, dittoHeaders);\n        checkMappingNumberOfSourcesAndTargets(dittoHeaders, connection);\n        validateFormatOfCertificates(connection, dittoHeaders);\n        hostValidator.validateHostname(connection.getHostname(), dittoHeaders);\n        if (spec != null) {\n            // throw error at validation site for clarity of stack trace\n            spec.validate(connection, dittoHeaders, actorSystem);\n        } else {\n            throw new IllegalStateException(\"Unknown connection type: \" + connection);\n        }\n    }", "signature": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "full_signature": " void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "class_method_signature": "ConnectionValidator.validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "testcase": false, "constructor": false, "invocations": ["get", "getConnectionType", "validateSourceAndTargetAddressesAreNonempty", "checkMappingNumberOfSourcesAndTargets", "validateFormatOfCertificates", "validateHostname", "getHostname", "validate"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}