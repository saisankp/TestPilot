{"test_class": {"identifier": "PartiallyCompressingOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ByteArrayOutputStream outBuffer;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "private PartiallyCompressingOutputStream stream;", "modifier": "private", "type": "PartiallyCompressingOutputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private static byte[] PREAMBLE_BYTES = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};", "modifier": "private static", "type": "byte[]", "declarator": "PREAMBLE_BYTES = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", "var_name": "PREAMBLE_BYTES"}, {"original_string": "private static JreDeflateParameters PARAMS1 = JreDeflateParameters.of(1, 0, true);", "modifier": "private static", "type": "JreDeflateParameters", "declarator": "PARAMS1 = JreDeflateParameters.of(1, 0, true)", "var_name": "PARAMS1"}, {"original_string": "private static UnitTestZipEntry ENTRY1 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\n          \"/foo\", PARAMS1.level, PARAMS1.nowrap, \"foo-level1\", null);", "modifier": "private static", "type": "UnitTestZipEntry", "declarator": "ENTRY1 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\n          \"/foo\", PARAMS1.level, PARAMS1.nowrap, \"foo-level1\", null)", "var_name": "ENTRY1"}, {"original_string": "private static long OFFSET1 = PREAMBLE_BYTES.length;", "modifier": "private static", "type": "long", "declarator": "OFFSET1 = PREAMBLE_BYTES.length", "var_name": "OFFSET1"}, {"original_string": "private static long LENGTH1 = ENTRY1.getUncompressedBinaryContent().length;", "modifier": "private static", "type": "long", "declarator": "LENGTH1 = ENTRY1.getUncompressedBinaryContent().length", "var_name": "LENGTH1"}, {"original_string": "private static TypedRange<JreDeflateParameters> COMPRESS_RANGE_1 =\n      new TypedRange<JreDeflateParameters>(OFFSET1, LENGTH1, PARAMS1);", "modifier": "private static", "type": "TypedRange<JreDeflateParameters>", "declarator": "COMPRESS_RANGE_1 =\n      new TypedRange<JreDeflateParameters>(OFFSET1, LENGTH1, PARAMS1)", "var_name": "COMPRESS_RANGE_1"}, {"original_string": "private static byte[] GAP1_BYTES = new byte[] {37};", "modifier": "private static", "type": "byte[]", "declarator": "GAP1_BYTES = new byte[] {37}", "var_name": "GAP1_BYTES"}, {"original_string": "private static JreDeflateParameters PARAMS2 = JreDeflateParameters.of(6, 0, false);", "modifier": "private static", "type": "JreDeflateParameters", "declarator": "PARAMS2 = JreDeflateParameters.of(6, 0, false)", "var_name": "PARAMS2"}, {"original_string": "private static UnitTestZipEntry ENTRY2 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\n          \"/bar\", PARAMS2.level, PARAMS2.nowrap, \"bar-level6\", null);", "modifier": "private static", "type": "UnitTestZipEntry", "declarator": "ENTRY2 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\n          \"/bar\", PARAMS2.level, PARAMS2.nowrap, \"bar-level6\", null)", "var_name": "ENTRY2"}, {"original_string": "private static long OFFSET2 = OFFSET1 + LENGTH1 + GAP1_BYTES.length;", "modifier": "private static", "type": "long", "declarator": "OFFSET2 = OFFSET1 + LENGTH1 + GAP1_BYTES.length", "var_name": "OFFSET2"}, {"original_string": "private static long LENGTH2 = ENTRY2.getUncompressedBinaryContent().length;", "modifier": "private static", "type": "long", "declarator": "LENGTH2 = ENTRY2.getUncompressedBinaryContent().length", "var_name": "LENGTH2"}, {"original_string": "private static TypedRange<JreDeflateParameters> COMPRESS_RANGE_2 =\n      new TypedRange<JreDeflateParameters>(OFFSET2, LENGTH2, PARAMS2);", "modifier": "private static", "type": "TypedRange<JreDeflateParameters>", "declarator": "COMPRESS_RANGE_2 =\n      new TypedRange<JreDeflateParameters>(OFFSET2, LENGTH2, PARAMS2)", "var_name": "COMPRESS_RANGE_2"}], "file": "feya/libraries/archive_diff/diff.applier/src/test/java/com/google/archivepatcher/applier/PartiallyCompressingOutputStreamTest.java"}, "test_case": {"identifier": "testWrite_MixedSequence_Thrash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWrite_MixedSequence_Thrash() throws IOException {\n    // Write uncompressed data, compressed data, uncompressed data, compressed data (new params)\n    // Thrash by writing one byte at a time to pound on edge-casey code\n    stream =\n        new PartiallyCompressingOutputStream(\n            Arrays.asList(COMPRESS_RANGE_1, COMPRESS_RANGE_2), outBuffer, 32768);\n    byte[] input =\n        fuse(\n            PREAMBLE_BYTES,\n            ENTRY1.getUncompressedBinaryContent(),\n            GAP1_BYTES,\n            ENTRY2.getUncompressedBinaryContent());\n    byte[] expected =\n        fuse(\n            PREAMBLE_BYTES,\n            ENTRY1.getCompressedBinaryContent(),\n            GAP1_BYTES,\n            ENTRY2.getCompressedBinaryContent());\n    for (int x = 0; x < input.length; x++) {\n      stream.write(input[x] & 0xff);\n      stream.flush();\n    }\n    stream.close();\n    Assert.assertArrayEquals(expected, outBuffer.toByteArray());\n  }", "signature": "void testWrite_MixedSequence_Thrash()", "full_signature": "@Test public void testWrite_MixedSequence_Thrash()", "class_method_signature": "PartiallyCompressingOutputStreamTest.testWrite_MixedSequence_Thrash()", "testcase": true, "constructor": false, "invocations": ["asList", "fuse", "getUncompressedBinaryContent", "getUncompressedBinaryContent", "fuse", "getCompressedBinaryContent", "getCompressedBinaryContent", "write", "flush", "close", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "PartiallyCompressingOutputStream", "superclass": "extends FilterOutputStream", "interfaces": "", "fields": [{"original_string": "private final OutputStream normalOut;", "modifier": "private final", "type": "OutputStream", "declarator": "normalOut", "var_name": "normalOut"}, {"original_string": "private Deflater deflater = null;", "modifier": "private", "type": "Deflater", "declarator": "deflater = null", "var_name": "deflater"}, {"original_string": "private DeflaterOutputStream deflaterOut = null;", "modifier": "private", "type": "DeflaterOutputStream", "declarator": "deflaterOut = null", "var_name": "deflaterOut"}, {"original_string": "private final byte[] internalCopyBuffer = new byte[1];", "modifier": "private final", "type": "byte[]", "declarator": "internalCopyBuffer = new byte[1]", "var_name": "internalCopyBuffer"}, {"original_string": "private final int compressionBufferSize;", "modifier": "private final", "type": "int", "declarator": "compressionBufferSize", "var_name": "compressionBufferSize"}, {"original_string": "private long numBytesWritten;", "modifier": "private", "type": "long", "declarator": "numBytesWritten", "var_name": "numBytesWritten"}, {"original_string": "private final Iterator<TypedRange<JreDeflateParameters>> rangeIterator;", "modifier": "private final", "type": "Iterator<TypedRange<JreDeflateParameters>>", "declarator": "rangeIterator", "var_name": "rangeIterator"}, {"original_string": "private TypedRange<JreDeflateParameters> nextCompressedRange = null;", "modifier": "private", "type": "TypedRange<JreDeflateParameters>", "declarator": "nextCompressedRange = null", "var_name": "nextCompressedRange"}, {"original_string": "private JreDeflateParameters lastDeflateParameters = null;", "modifier": "private", "type": "JreDeflateParameters", "declarator": "lastDeflateParameters = null", "var_name": "lastDeflateParameters"}], "methods": [{"identifier": "PartiallyCompressingOutputStream", "parameters": "(\n      List<TypedRange<JreDeflateParameters>> compressionRanges,\n      OutputStream out,\n      int compressionBufferSize)", "modifiers": "public", "return": "", "signature": " PartiallyCompressingOutputStream(\n      List<TypedRange<JreDeflateParameters>> compressionRanges,\n      OutputStream out,\n      int compressionBufferSize)", "full_signature": "public  PartiallyCompressingOutputStream(\n      List<TypedRange<JreDeflateParameters>> compressionRanges,\n      OutputStream out,\n      int compressionBufferSize)", "class_method_signature": "PartiallyCompressingOutputStream.PartiallyCompressingOutputStream(\n      List<TypedRange<JreDeflateParameters>> compressionRanges,\n      OutputStream out,\n      int compressionBufferSize)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "PartiallyCompressingOutputStream.write(int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] buffer)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] buffer)", "full_signature": "@Override public void write(byte[] buffer)", "class_method_signature": "PartiallyCompressingOutputStream.write(byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] buffer, int offset, int length)", "full_signature": "@Override public void write(byte[] buffer, int offset, int length)", "class_method_signature": "PartiallyCompressingOutputStream.write(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "writeChunk", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "private", "return": "int", "signature": "int writeChunk(byte[] buffer, int offset, int length)", "full_signature": "private int writeChunk(byte[] buffer, int offset, int length)", "class_method_signature": "PartiallyCompressingOutputStream.writeChunk(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "currentlyCompressing", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean currentlyCompressing()", "full_signature": "private boolean currentlyCompressing()", "class_method_signature": "PartiallyCompressingOutputStream.currentlyCompressing()", "testcase": false, "constructor": false}, {"identifier": "bytesTillCompressionStarts", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long bytesTillCompressionStarts()", "full_signature": "private long bytesTillCompressionStarts()", "class_method_signature": "PartiallyCompressingOutputStream.bytesTillCompressionStarts()", "testcase": false, "constructor": false}, {"identifier": "bytesTillCompressionEnds", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long bytesTillCompressionEnds()", "full_signature": "private long bytesTillCompressionEnds()", "class_method_signature": "PartiallyCompressingOutputStream.bytesTillCompressionEnds()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.applier/src/main/java/com/google/archivepatcher/applier/PartiallyCompressingOutputStream.java"}, "focal_method": {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void write(int b) throws IOException {\n    internalCopyBuffer[0] = (byte) b;\n    write(internalCopyBuffer, 0, 1);\n  }", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "PartiallyCompressingOutputStream.write(int b)", "testcase": false, "constructor": false, "invocations": ["write"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}