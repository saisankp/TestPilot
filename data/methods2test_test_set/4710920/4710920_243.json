{"test_class": {"identifier": "LoggingEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LoggingEventListener listener;", "modifier": "private", "type": "LoggingEventListener", "declarator": "listener", "var_name": "listener"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/client/event/listener/LoggingEventListenerTest.java"}, "test_case": {"identifier": "testOnEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnEvent() throws Exception {\n\n        URL connectionURL = URL.valueOf(\"file:///Users/Home\");\n\n        ServiceDiscovery serviceDiscovery = new FileSystemServiceDiscovery();\n\n        serviceDiscovery.initialize(connectionURL);\n\n        // ServiceDiscoveryStartingEvent\n        listener.onEvent(new ServiceDiscoveryInitializingEvent(serviceDiscovery, serviceDiscovery));\n\n        // ServiceDiscoveryStartedEvent\n        listener.onEvent(new ServiceDiscoveryInitializedEvent(serviceDiscovery, serviceDiscovery));\n\n        // ServiceInstancePreRegisteredEvent\n        listener.onEvent(new ServiceInstancePreRegisteredEvent(serviceDiscovery, createInstance()));\n\n        // ServiceInstanceRegisteredEvent\n        listener.onEvent(new ServiceInstanceRegisteredEvent(serviceDiscovery, createInstance()));\n\n        // ServiceInstancesChangedEvent\n        listener.onEvent(new ServiceInstancesChangedEvent(\"test\", Arrays.asList(createInstance())));\n\n        // ServiceInstancePreUnregisteredEvent\n        listener.onEvent(new ServiceInstancePreUnregisteredEvent(serviceDiscovery, createInstance()));\n\n        // ServiceInstanceUnregisteredEvent\n        listener.onEvent(new ServiceInstanceUnregisteredEvent(serviceDiscovery, createInstance()));\n\n        // ServiceDiscoveryStoppingEvent\n        listener.onEvent(new ServiceDiscoveryDestroyingEvent(serviceDiscovery, serviceDiscovery));\n\n        // ServiceDiscoveryStoppedEvent\n        listener.onEvent(new ServiceDiscoveryDestroyedEvent(serviceDiscovery, serviceDiscovery));\n    }", "signature": "void testOnEvent()", "full_signature": "@Test public void testOnEvent()", "class_method_signature": "LoggingEventListenerTest.testOnEvent()", "testcase": true, "constructor": false, "invocations": ["valueOf", "initialize", "onEvent", "onEvent", "onEvent", "createInstance", "onEvent", "createInstance", "onEvent", "asList", "createInstance", "onEvent", "createInstance", "onEvent", "createInstance", "onEvent", "onEvent"]}, "focal_class": {"identifier": "LoggingEventListener", "superclass": "extends GenericEventListener", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "onEvent", "parameters": "(ServiceDiscoveryInitializingEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceDiscoveryInitializingEvent event)", "full_signature": "public void onEvent(ServiceDiscoveryInitializingEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceDiscoveryInitializingEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceDiscoveryInitializedEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceDiscoveryInitializedEvent event)", "full_signature": "public void onEvent(ServiceDiscoveryInitializedEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceDiscoveryInitializedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceInstancePreRegisteredEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceInstancePreRegisteredEvent event)", "full_signature": "public void onEvent(ServiceInstancePreRegisteredEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceInstancePreRegisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceInstanceRegisteredEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceInstanceRegisteredEvent event)", "full_signature": "public void onEvent(ServiceInstanceRegisteredEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceInstanceRegisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceInstancesChangedEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceInstancesChangedEvent event)", "full_signature": "public void onEvent(ServiceInstancesChangedEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceInstancesChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceInstancePreUnregisteredEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceInstancePreUnregisteredEvent event)", "full_signature": "public void onEvent(ServiceInstancePreUnregisteredEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceInstancePreUnregisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceInstanceUnregisteredEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceInstanceUnregisteredEvent event)", "full_signature": "public void onEvent(ServiceInstanceUnregisteredEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceInstanceUnregisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceDiscoveryDestroyingEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceDiscoveryDestroyingEvent event)", "full_signature": "public void onEvent(ServiceDiscoveryDestroyingEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceDiscoveryDestroyingEvent event)", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(ServiceDiscoveryDestroyedEvent event)", "modifiers": "public", "return": "void", "signature": "void onEvent(ServiceDiscoveryDestroyedEvent event)", "full_signature": "public void onEvent(ServiceDiscoveryDestroyedEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceDiscoveryDestroyedEvent event)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String pattern, Object... args)", "modifiers": "private", "return": "void", "signature": "void info(String pattern, Object... args)", "full_signature": "private void info(String pattern, Object... args)", "class_method_signature": "LoggingEventListener.info(String pattern, Object... args)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/event/listener/LoggingEventListener.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(ServiceDiscoveryInitializingEvent event)", "modifiers": "public", "return": "void", "body": "public void onEvent(ServiceDiscoveryInitializingEvent event) {\n        info(\"%s is initializing...\", event.getServiceDiscovery());\n    }", "signature": "void onEvent(ServiceDiscoveryInitializingEvent event)", "full_signature": "public void onEvent(ServiceDiscoveryInitializingEvent event)", "class_method_signature": "LoggingEventListener.onEvent(ServiceDiscoveryInitializingEvent event)", "testcase": false, "constructor": false, "invocations": ["info", "getServiceDiscovery"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}