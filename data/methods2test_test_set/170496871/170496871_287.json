{"test_class": {"identifier": "DatasetWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Dataset<Serializable, AutoCloseable> dataset;", "modifier": "@Mock\n    private", "type": "Dataset<Serializable, AutoCloseable>", "declarator": "dataset", "var_name": "dataset"}, {"original_string": "private DatasetWrapper<Serializable, AutoCloseable> wrapper;", "modifier": "private", "type": "DatasetWrapper<Serializable, AutoCloseable>", "declarator": "wrapper", "var_name": "wrapper"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/primitive/DatasetWrapperTest.java"}, "test_case": {"identifier": "testClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClose() throws Exception {\n        wrapper.close();\n\n        verify(dataset, times(1)).close();\n    }", "signature": "void testClose()", "full_signature": "@Test public void testClose()", "class_method_signature": "DatasetWrapperTest.testClose()", "testcase": true, "constructor": false, "invocations": ["close", "close", "verify", "times"]}, "focal_class": {"identifier": "DatasetWrapper", "superclass": "", "interfaces": "implements Dataset<C, D>", "fields": [{"original_string": "protected final Dataset<C, D> delegate;", "modifier": "protected final", "type": "Dataset<C, D>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "DatasetWrapper", "parameters": "(Dataset<C, D> delegate)", "modifiers": "public", "return": "", "signature": " DatasetWrapper(Dataset<C, D> delegate)", "full_signature": "public  DatasetWrapper(Dataset<C, D> delegate)", "class_method_signature": "DatasetWrapper.DatasetWrapper(Dataset<C, D> delegate)", "testcase": false, "constructor": true}, {"identifier": "computeWithCtx", "parameters": "(IgniteTriFunction<C, D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce,\n        R identity)", "modifiers": "@Override public", "return": "R", "signature": "R computeWithCtx(IgniteTriFunction<C, D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce,\n        R identity)", "full_signature": "@Override public R computeWithCtx(IgniteTriFunction<C, D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce,\n        R identity)", "class_method_signature": "DatasetWrapper.computeWithCtx(IgniteTriFunction<C, D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce,\n        R identity)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(IgniteBiFunction<D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce, R identity)", "modifiers": "@Override public", "return": "R", "signature": "R compute(IgniteBiFunction<D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce, R identity)", "full_signature": "@Override public R compute(IgniteBiFunction<D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce, R identity)", "class_method_signature": "DatasetWrapper.compute(IgniteBiFunction<D, LearningEnvironment, R> map, IgniteBinaryOperator<R> reduce, R identity)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DatasetWrapper.close()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/primitive/DatasetWrapper.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void close() throws Exception {\n        delegate.close();\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DatasetWrapper.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}