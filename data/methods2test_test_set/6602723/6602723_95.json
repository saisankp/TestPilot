{"test_class": {"identifier": "TestPercentErrPerTimeFailureInterpreter", "superclass": "", "interfaces": "", "fields": [], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestPercentErrPerTimeFailureInterpreter.java"}, "test_case": {"identifier": "testTripsWhenNoWindowConditionsExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTripsWhenNoWindowConditionsExist() {\n        PercentErrPerTimeFailureInterpreter pept = new PercentErrPerTimeFailureInterpreter();\n\n        assertTrue(pept.shouldTrip(new Exception()));\n    }", "signature": "void testTripsWhenNoWindowConditionsExist()", "full_signature": "@Test public void testTripsWhenNoWindowConditionsExist()", "class_method_signature": "TestPercentErrPerTimeFailureInterpreter.testTripsWhenNoWindowConditionsExist()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "shouldTrip"]}, "focal_class": {"identifier": "PercentErrPerTimeFailureInterpreter", "superclass": "", "interfaces": "implements FailureInterpreter", "fields": [{"original_string": "private Set<Class<? extends Throwable>> ignore = new HashSet<Class<? extends Throwable>>();", "modifier": "private", "type": "Set<Class<? extends Throwable>>", "declarator": "ignore = new HashSet<Class<? extends Throwable>>()", "var_name": "ignore"}, {"original_string": "private int percent = 0;", "modifier": "private", "type": "int", "declarator": "percent = 0", "var_name": "percent"}, {"original_string": "private long windowMillis = 0;", "modifier": "private", "type": "long", "declarator": "windowMillis = 0", "var_name": "windowMillis"}, {"original_string": "private int requestThreshold = 0;", "modifier": "private", "type": "int", "declarator": "requestThreshold = 0", "var_name": "requestThreshold"}, {"original_string": "private long previousRequestHighWaterMark = 0;", "modifier": "private", "type": "long", "declarator": "previousRequestHighWaterMark = 0", "var_name": "previousRequestHighWaterMark"}, {"original_string": "private List<Long> errorTimes = new LinkedList<Long>();", "modifier": "private", "type": "List<Long>", "declarator": "errorTimes = new LinkedList<Long>()", "var_name": "errorTimes"}, {"original_string": "private List<Long> requestCounts = new LinkedList<Long>();", "modifier": "private", "type": "List<Long>", "declarator": "requestCounts = new LinkedList<Long>()", "var_name": "requestCounts"}, {"original_string": "private final Object modificationLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "modificationLock = new Object()", "var_name": "modificationLock"}, {"original_string": "private RequestCounter requestCounter;", "modifier": "private", "type": "RequestCounter", "declarator": "requestCounter", "var_name": "requestCounter"}, {"original_string": "private static Class[] defaultIgnore = { };", "modifier": "private static", "type": "Class[]", "declarator": "defaultIgnore = { }", "var_name": "defaultIgnore"}], "methods": [{"identifier": "PercentErrPerTimeFailureInterpreter", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " PercentErrPerTimeFailureInterpreter()", "full_signature": "@SuppressWarnings(\"unchecked\") public  PercentErrPerTimeFailureInterpreter()", "class_method_signature": "PercentErrPerTimeFailureInterpreter.PercentErrPerTimeFailureInterpreter()", "testcase": false, "constructor": true}, {"identifier": "PercentErrPerTimeFailureInterpreter", "parameters": "(RequestCounter rc,\n                                               int percent, long windowMillis)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               int percent, long windowMillis)", "full_signature": "@SuppressWarnings(\"unchecked\") public  PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               int percent, long windowMillis)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               int percent, long windowMillis)", "testcase": false, "constructor": true}, {"identifier": "PercentErrPerTimeFailureInterpreter", "parameters": "(PerformanceMonitor p,\n                                               int percent, long windowMillis)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " PercentErrPerTimeFailureInterpreter(PerformanceMonitor p,\n                                               int percent, long windowMillis)", "full_signature": "@SuppressWarnings(\"unchecked\") public  PercentErrPerTimeFailureInterpreter(PerformanceMonitor p,\n                                               int percent, long windowMillis)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.PercentErrPerTimeFailureInterpreter(PerformanceMonitor p,\n                                               int percent, long windowMillis)", "testcase": false, "constructor": true}, {"identifier": "PercentErrPerTimeFailureInterpreter", "parameters": "(Class<? extends Throwable>[] ignore)", "modifiers": "public", "return": "", "signature": " PercentErrPerTimeFailureInterpreter(Class<? extends Throwable>[] ignore)", "full_signature": "public  PercentErrPerTimeFailureInterpreter(Class<? extends Throwable>[] ignore)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.PercentErrPerTimeFailureInterpreter(Class<? extends Throwable>[] ignore)", "testcase": false, "constructor": true}, {"identifier": "PercentErrPerTimeFailureInterpreter", "parameters": "(RequestCounter rc,\n                                               Class<? extends Throwable>[] ignore,\n                                               int percent, long windowMillis)", "modifiers": "public", "return": "", "signature": " PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               Class<? extends Throwable>[] ignore,\n                                               int percent, long windowMillis)", "full_signature": "public  PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               Class<? extends Throwable>[] ignore,\n                                               int percent, long windowMillis)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.PercentErrPerTimeFailureInterpreter(RequestCounter rc,\n                                               Class<? extends Throwable>[] ignore,\n                                               int percent, long windowMillis)", "testcase": false, "constructor": true}, {"identifier": "hasWindowConditions", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasWindowConditions()", "full_signature": "private boolean hasWindowConditions()", "class_method_signature": "PercentErrPerTimeFailureInterpreter.hasWindowConditions()", "testcase": false, "constructor": false}, {"identifier": "shouldTrip", "parameters": "(Throwable cause)", "modifiers": "public", "return": "boolean", "signature": "boolean shouldTrip(Throwable cause)", "full_signature": "public boolean shouldTrip(Throwable cause)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.shouldTrip(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "isExceptionIgnorable", "parameters": "(Throwable cause)", "modifiers": "private", "return": "boolean", "signature": "boolean isExceptionIgnorable(Throwable cause)", "full_signature": "private boolean isExceptionIgnorable(Throwable cause)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.isExceptionIgnorable(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "removeErrorsPriorToCutoffTime", "parameters": "(int numberOfErrorsBefore, long removeTimeBeforeMillis)", "modifiers": "private", "return": "void", "signature": "void removeErrorsPriorToCutoffTime(int numberOfErrorsBefore, long removeTimeBeforeMillis)", "full_signature": "private void removeErrorsPriorToCutoffTime(int numberOfErrorsBefore, long removeTimeBeforeMillis)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.removeErrorsPriorToCutoffTime(int numberOfErrorsBefore, long removeTimeBeforeMillis)", "testcase": false, "constructor": false}, {"identifier": "getIgnore", "parameters": "()", "modifiers": "public", "return": "Set<Class<? extends Throwable>>", "signature": "Set<Class<? extends Throwable>> getIgnore()", "full_signature": "public Set<Class<? extends Throwable>> getIgnore()", "class_method_signature": "PercentErrPerTimeFailureInterpreter.getIgnore()", "testcase": false, "constructor": false}, {"identifier": "setIgnore", "parameters": "(Class<? extends Throwable>[] ignore)", "modifiers": "public synchronized", "return": "void", "signature": "void setIgnore(Class<? extends Throwable>[] ignore)", "full_signature": "public synchronized void setIgnore(Class<? extends Throwable>[] ignore)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.setIgnore(Class<? extends Throwable>[] ignore)", "testcase": false, "constructor": false}, {"identifier": "getPercent", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPercent()", "full_signature": "public int getPercent()", "class_method_signature": "PercentErrPerTimeFailureInterpreter.getPercent()", "testcase": false, "constructor": false}, {"identifier": "setPercent", "parameters": "(int percent)", "modifiers": "public", "return": "void", "signature": "void setPercent(int percent)", "full_signature": "public void setPercent(int percent)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.setPercent(int percent)", "testcase": false, "constructor": false}, {"identifier": "getWindowMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getWindowMillis()", "full_signature": "public long getWindowMillis()", "class_method_signature": "PercentErrPerTimeFailureInterpreter.getWindowMillis()", "testcase": false, "constructor": false}, {"identifier": "setWindowMillis", "parameters": "(long windowMillis)", "modifiers": "public", "return": "void", "signature": "void setWindowMillis(long windowMillis)", "full_signature": "public void setWindowMillis(long windowMillis)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.setWindowMillis(long windowMillis)", "testcase": false, "constructor": false}, {"identifier": "setRequestCounter", "parameters": "(RequestCounter rc)", "modifiers": "public", "return": "void", "signature": "void setRequestCounter(RequestCounter rc)", "full_signature": "public void setRequestCounter(RequestCounter rc)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.setRequestCounter(RequestCounter rc)", "testcase": false, "constructor": false}, {"identifier": "setRequestThreshold", "parameters": "(int requestThreshold)", "modifiers": "public", "return": "void", "signature": "void setRequestThreshold(int requestThreshold)", "full_signature": "public void setRequestThreshold(int requestThreshold)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.setRequestThreshold(int requestThreshold)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/PercentErrPerTimeFailureInterpreter.java"}, "focal_method": {"identifier": "shouldTrip", "parameters": "(Throwable cause)", "modifiers": "public", "return": "boolean", "body": "public boolean shouldTrip(Throwable cause) {\n        if (isExceptionIgnorable(cause)) return false;\n\n        // if Exception is of specified type, and window conditions exist,\n        // keep circuit open unless exception threshold has passed\n        if (hasWindowConditions()) {\n            Long currentRequestCount = -1L;\n            long numberOfErrorsAfter;\n\n            synchronized (modificationLock) {\n                errorTimes.add(System.currentTimeMillis());\n                requestCounts.add(requestCounter.sample()[0]);\n\n                // calculates time for which we remove any errors before\n                final long removeTimeBeforeMillis = System.currentTimeMillis() - windowMillis;\n                final int numberOfErrorsBefore = this.errorTimes.size();\n\n                removeErrorsPriorToCutoffTime(numberOfErrorsBefore, removeTimeBeforeMillis);\n\n                numberOfErrorsAfter = this.errorTimes.size();\n\n                currentRequestCount = this.requestCounts.get(requestCounts.size() - 1);\n            }\n\n            long windowRequests = (currentRequestCount - previousRequestHighWaterMark);\n\n            // Trip if the number of errors over the total of requests over the same period\n            // is over the percentage limit.\n            return windowRequests >= requestThreshold && (((double) numberOfErrorsAfter / (double) windowRequests) * 100d >= percent);\n        }\n        return true;\n    }", "signature": "boolean shouldTrip(Throwable cause)", "full_signature": "public boolean shouldTrip(Throwable cause)", "class_method_signature": "PercentErrPerTimeFailureInterpreter.shouldTrip(Throwable cause)", "testcase": false, "constructor": false, "invocations": ["isExceptionIgnorable", "hasWindowConditions", "add", "currentTimeMillis", "add", "sample", "currentTimeMillis", "size", "removeErrorsPriorToCutoffTime", "size", "get", "size"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}