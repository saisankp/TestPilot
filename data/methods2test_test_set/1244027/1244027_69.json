{"test_class": {"identifier": "AudioMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double ERROR = 1e-3;", "modifier": "private static final", "type": "double", "declarator": "ERROR = 1e-3", "var_name": "ERROR"}], "file": "sequencers/modeshape-sequencer-audio/src/test/java/org/modeshape/sequencer/audio/AudioMetadataTest.java"}, "test_case": {"identifier": "shouldBeAbleToLoadMp4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeAbleToLoadMp4() throws Exception {\n        // GIVEN\n        AudioMetadata metadata = new AudioMetadata(getTestAudio(\"sample.mp4\"), \"video/quicktime\");\n\n        // WHEN\n        assertTrue(metadata.check());\n\n        // THEN \n        assertMetaDataProperties(metadata, \"mp4\", \"video/quicktime\", 129L, 44100, \"2\", 2.0,\n                \"Album\", \"Artist\", \"Comment\", \"Title\", \"2015\", \"1\", \"Speech\", \"image/jpeg\", null);\n    }", "signature": "void shouldBeAbleToLoadMp4()", "full_signature": "@Test public void shouldBeAbleToLoadMp4()", "class_method_signature": "AudioMetadataTest.shouldBeAbleToLoadMp4()", "testcase": true, "constructor": false, "invocations": ["getTestAudio", "assertTrue", "check", "assertMetaDataProperties"]}, "focal_class": {"identifier": "AudioMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int FORMAT_MP3 = 0;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_MP3 = 0", "var_name": "FORMAT_MP3"}, {"original_string": "public static final int FORMAT_MP4 = 1;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_MP4 = 1", "var_name": "FORMAT_MP4"}, {"original_string": "public static final int FORMAT_VORBIS = 2;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_VORBIS = 2", "var_name": "FORMAT_VORBIS"}, {"original_string": "public static final int FORMAT_FLAC = 3;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_FLAC = 3", "var_name": "FORMAT_FLAC"}, {"original_string": "public static final int FORMAT_WMA = 4;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_WMA = 4", "var_name": "FORMAT_WMA"}, {"original_string": "public static final int FORMAT_WAV = 5;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_WAV = 5", "var_name": "FORMAT_WAV"}, {"original_string": "public static final int FORMAT_UNSUPPORTED = -1;", "modifier": "public static final", "type": "int", "declarator": "FORMAT_UNSUPPORTED = -1", "var_name": "FORMAT_UNSUPPORTED"}, {"original_string": "static final String[] MIME_TYPE_STRINGS = {\"audio/mpeg\",\n                                               \"audio/mp4\", \"video/mp4\", \"video/quicktime\",\n                                               \"audio/vorbis\", \"audio/x-vorbis\", \"audio/ogg\",\n                                               \"audio/flac\", \"audio/x-flac\",\n                                               \"audio/vnd.ms-asf\", \"audio/x-ms-wma\", \"audio/x-ms-asf\",\n                                               \"audio/x-wav\", \"audio/wav\", \"audio/wave\"};", "modifier": "static final", "type": "String[]", "declarator": "MIME_TYPE_STRINGS = {\"audio/mpeg\",\n                                               \"audio/mp4\", \"video/mp4\", \"video/quicktime\",\n                                               \"audio/vorbis\", \"audio/x-vorbis\", \"audio/ogg\",\n                                               \"audio/flac\", \"audio/x-flac\",\n                                               \"audio/vnd.ms-asf\", \"audio/x-ms-wma\", \"audio/x-ms-asf\",\n                                               \"audio/x-wav\", \"audio/wav\", \"audio/wave\"}", "var_name": "MIME_TYPE_STRINGS"}, {"original_string": "static final String[] FORMAT_NAMES = {\"mp3\", \"mp4\", \"ogg\", \"flac\", \"wma\", \"wav\", \"real\"};", "modifier": "static final", "type": "String[]", "declarator": "FORMAT_NAMES = {\"mp3\", \"mp4\", \"ogg\", \"flac\", \"wma\", \"wav\", \"real\"}", "var_name": "FORMAT_NAMES"}, {"original_string": "private int format;", "modifier": "private", "type": "int", "declarator": "format", "var_name": "format"}, {"original_string": "private InputStream in;", "modifier": "private", "type": "InputStream", "declarator": "in", "var_name": "in"}, {"original_string": "private AudioFile audioFile;", "modifier": "private", "type": "AudioFile", "declarator": "audioFile", "var_name": "audioFile"}, {"original_string": "private Long bitrate;", "modifier": "private", "type": "Long", "declarator": "bitrate", "var_name": "bitrate"}, {"original_string": "private Integer sampleRate;", "modifier": "private", "type": "Integer", "declarator": "sampleRate", "var_name": "sampleRate"}, {"original_string": "private Double duration;", "modifier": "private", "type": "Double", "declarator": "duration", "var_name": "duration"}, {"original_string": "private String channels;", "modifier": "private", "type": "String", "declarator": "channels", "var_name": "channels"}, {"original_string": "private String title;", "modifier": "private", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "private String artist;", "modifier": "private", "type": "String", "declarator": "artist", "var_name": "artist"}, {"original_string": "private String album;", "modifier": "private", "type": "String", "declarator": "album", "var_name": "album"}, {"original_string": "private String year;", "modifier": "private", "type": "String", "declarator": "year", "var_name": "year"}, {"original_string": "private String comment;", "modifier": "private", "type": "String", "declarator": "comment", "var_name": "comment"}, {"original_string": "private String track;", "modifier": "private", "type": "String", "declarator": "track", "var_name": "track"}, {"original_string": "private String genre;", "modifier": "private", "type": "String", "declarator": "genre", "var_name": "genre"}, {"original_string": "private List<AudioMetadataArtwork> artwork;", "modifier": "private", "type": "List<AudioMetadataArtwork>", "declarator": "artwork", "var_name": "artwork"}, {"original_string": "private String mimeType;", "modifier": "private", "type": "String", "declarator": "mimeType", "var_name": "mimeType"}], "methods": [{"identifier": "AudioMetadata", "parameters": "( InputStream inputStream,\n                          final String mimeType )", "modifiers": "public", "return": "", "signature": " AudioMetadata( InputStream inputStream,\n                          final String mimeType )", "full_signature": "public  AudioMetadata( InputStream inputStream,\n                          final String mimeType )", "class_method_signature": "AudioMetadata.AudioMetadata( InputStream inputStream,\n                          final String mimeType )", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean check()", "full_signature": "public boolean check()", "class_method_signature": "AudioMetadata.check()", "testcase": false, "constructor": false}, {"identifier": "checkSupportedAudio", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkSupportedAudio()", "full_signature": "private boolean checkSupportedAudio()", "class_method_signature": "AudioMetadata.checkSupportedAudio()", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFormat()", "full_signature": "public int getFormat()", "class_method_signature": "AudioMetadata.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getFormatName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormatName()", "full_signature": "public String getFormatName()", "class_method_signature": "AudioMetadata.getFormatName()", "testcase": false, "constructor": false}, {"identifier": "getBitrate", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getBitrate()", "full_signature": "public Long getBitrate()", "class_method_signature": "AudioMetadata.getBitrate()", "testcase": false, "constructor": false}, {"identifier": "getSampleRate", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getSampleRate()", "full_signature": "public Integer getSampleRate()", "class_method_signature": "AudioMetadata.getSampleRate()", "testcase": false, "constructor": false}, {"identifier": "getChannels", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getChannels()", "full_signature": "public String getChannels()", "class_method_signature": "AudioMetadata.getChannels()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getDuration()", "full_signature": "public Double getDuration()", "class_method_signature": "AudioMetadata.getDuration()", "testcase": false, "constructor": false}, {"identifier": "getTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTitle()", "full_signature": "public String getTitle()", "class_method_signature": "AudioMetadata.getTitle()", "testcase": false, "constructor": false}, {"identifier": "getArtist", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getArtist()", "full_signature": "public String getArtist()", "class_method_signature": "AudioMetadata.getArtist()", "testcase": false, "constructor": false}, {"identifier": "getAlbum", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAlbum()", "full_signature": "public String getAlbum()", "class_method_signature": "AudioMetadata.getAlbum()", "testcase": false, "constructor": false}, {"identifier": "getYear", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getYear()", "full_signature": "public String getYear()", "class_method_signature": "AudioMetadata.getYear()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getComment()", "full_signature": "public String getComment()", "class_method_signature": "AudioMetadata.getComment()", "testcase": false, "constructor": false}, {"identifier": "getTrack", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTrack()", "full_signature": "public String getTrack()", "class_method_signature": "AudioMetadata.getTrack()", "testcase": false, "constructor": false}, {"identifier": "getGenre", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGenre()", "full_signature": "public String getGenre()", "class_method_signature": "AudioMetadata.getGenre()", "testcase": false, "constructor": false}, {"identifier": "getArtwork", "parameters": "()", "modifiers": "public", "return": "List<AudioMetadataArtwork>", "signature": "List<AudioMetadataArtwork> getArtwork()", "full_signature": "public List<AudioMetadataArtwork> getArtwork()", "class_method_signature": "AudioMetadata.getArtwork()", "testcase": false, "constructor": false}], "file": "sequencers/modeshape-sequencer-audio/src/main/java/org/modeshape/sequencer/audio/AudioMetadata.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean check() throws Exception {\n        format = FORMAT_UNSUPPORTED;\n        // create a temporary copy from input\n        File fileCopy = File.createTempFile(\"modeshape-sequencer-audio\", \".tmp\");\n        IoUtil.write(in, new BufferedOutputStream(new FileOutputStream(fileCopy)));\n\n        if (mimeType.startsWith(\"audio/mpeg\")) {\n            format = FORMAT_MP3;\n            audioFile = new MP3FileReader().read(fileCopy);\n        } else if (mimeType.startsWith(\"audio/vorbis\") || mimeType.startsWith(\"audio/x-vorbis\") || mimeType.startsWith(\"audio/ogg\")) {\n            format = FORMAT_VORBIS;\n            audioFile = new OggFileReader().read(fileCopy);\n        } else if (mimeType.startsWith(\"audio/flac\") || mimeType.startsWith(\"audio/x-flac\")) {\n            format = FORMAT_FLAC;\n            audioFile = new FlacFileReader().read(fileCopy);\n        } else if (mimeType.equals(\"audio/mp4\") || mimeType.equals(\"video/mp4\") || mimeType.equals(\"video/quicktime\")) {\n            format = FORMAT_MP4;\n            audioFile = new Mp4FileReader().read(fileCopy);\n        } else if (mimeType.equals(\"audio/x-ms-wma\")) {\n            format = FORMAT_WMA;\n            audioFile = new AsfFileReader().read(fileCopy);\n        } else if (mimeType.startsWith(\"audio/x-wav\") || mimeType.startsWith(\"audio/wav\")) {\n            format = FORMAT_WAV;\n            audioFile = new WavFileReader().read(fileCopy);\n        }\n\n        // try to delete the file immediately or on JVM exit\n        boolean deleted = false;\n        try {\n            deleted = fileCopy.delete();\n        } catch (SecurityException e) {\n            // ignore\n        }\n        if (!deleted) {\n            fileCopy.deleteOnExit();\n        }\n        return checkSupportedAudio();\n    }", "signature": "boolean check()", "full_signature": "public boolean check()", "class_method_signature": "AudioMetadata.check()", "testcase": false, "constructor": false, "invocations": ["createTempFile", "write", "startsWith", "read", "startsWith", "startsWith", "startsWith", "read", "startsWith", "startsWith", "read", "equals", "equals", "equals", "read", "equals", "read", "startsWith", "startsWith", "read", "delete", "deleteOnExit", "checkSupportedAudio"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}