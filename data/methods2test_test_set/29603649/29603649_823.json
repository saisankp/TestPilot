{"test_class": {"identifier": "HostValidatorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private List<String> allowedHosts;", "modifier": "@Mock\n    private", "type": "List<String>", "declarator": "allowedHosts", "var_name": "allowedHosts"}, {"original_string": "@Mock\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Mock\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Mock\n    private IpAddressResolver ipAddressResolver;", "modifier": "@Mock\n    private", "type": "IpAddressResolver", "declarator": "ipAddressResolver", "var_name": "ipAddressResolver"}, {"original_string": "@InjectMocks\n    private HostValidatorService underTest;", "modifier": "@InjectMocks\n    private", "type": "HostValidatorService", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private HttpServletRequest httpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/security/HostValidatorServiceTest.java"}, "test_case": {"identifier": "testOnApplicationEventShouldInitializeAllowedHosts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnApplicationEventShouldInitializeAllowedHosts() {\n        //GIVEN\n        List<String> adminHosts = new ArrayList<>();\n        adminHosts.add(\"a\");\n        adminHosts.add(\"b\");\n        given(wilmaAdminHostsDTO.getWilmaAdminHosts()).willReturn(adminHosts);\n        given(ipAddressResolver.resolveToHostName(\"a\")).willReturn(\"a\");\n        given(ipAddressResolver.resolveToHostName(\"b\")).willReturn(\"b\");\n        //WHEN\n        underTest.onApplicationEvent(null);\n        //THEN\n        assertEquals(adminHosts, Whitebox.getInternalState(underTest, \"allowedHosts\"));\n    }", "signature": "void testOnApplicationEventShouldInitializeAllowedHosts()", "full_signature": "@Test public void testOnApplicationEventShouldInitializeAllowedHosts()", "class_method_signature": "HostValidatorServiceTest.testOnApplicationEventShouldInitializeAllowedHosts()", "testcase": true, "constructor": false, "invocations": ["add", "add", "willReturn", "given", "getWilmaAdminHosts", "willReturn", "given", "resolveToHostName", "willReturn", "given", "resolveToHostName", "onApplicationEvent", "assertEquals", "getInternalState"]}, "focal_class": {"identifier": "HostValidatorService", "superclass": "", "interfaces": "implements ApplicationListener<ContextRefreshedEvent>", "fields": [{"original_string": "private List<String> allowedHosts;", "modifier": "private", "type": "List<String>", "declarator": "allowedHosts", "var_name": "allowedHosts"}, {"original_string": "@Autowired\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Autowired\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Autowired\n    private IpAddressResolver ipAddressResolver;", "modifier": "@Autowired\n    private", "type": "IpAddressResolver", "declarator": "ipAddressResolver", "var_name": "ipAddressResolver"}], "methods": [{"identifier": "isRequestFromAdmin", "parameters": "(final ServletRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isRequestFromAdmin(final ServletRequest request)", "full_signature": "public boolean isRequestFromAdmin(final ServletRequest request)", "class_method_signature": "HostValidatorService.isRequestFromAdmin(final ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "initializeAllowedHosts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeAllowedHosts()", "full_signature": "private void initializeAllowedHosts()", "class_method_signature": "HostValidatorService.initializeAllowedHosts()", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(final ContextRefreshedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(final ContextRefreshedEvent event)", "full_signature": "@Override public void onApplicationEvent(final ContextRefreshedEvent event)", "class_method_signature": "HostValidatorService.onApplicationEvent(final ContextRefreshedEvent event)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/security/HostValidatorService.java"}, "focal_method": {"identifier": "onApplicationEvent", "parameters": "(final ContextRefreshedEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onApplicationEvent(final ContextRefreshedEvent event) {\n        initializeAllowedHosts();\n    }", "signature": "void onApplicationEvent(final ContextRefreshedEvent event)", "full_signature": "@Override public void onApplicationEvent(final ContextRefreshedEvent event)", "class_method_signature": "HostValidatorService.onApplicationEvent(final ContextRefreshedEvent event)", "testcase": false, "constructor": false, "invocations": ["initializeAllowedHosts"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}