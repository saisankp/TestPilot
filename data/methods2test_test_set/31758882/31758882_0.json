{"test_class": {"identifier": "ChannelInputTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static File dir = new File(\"build/test-data\");", "modifier": "private static", "type": "File", "declarator": "dir = new File(\"build/test-data\")", "var_name": "dir"}], "file": "src/main/java/io/qdb/buffer/ChannelInputTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() throws IOException {\n        File file = new File(dir, \"read.dat\");\n        file.delete();\n\n        DataOutputStream out = new DataOutputStream(new FileOutputStream(file));\n        out.writeByte(0x23);\n        out.writeShort(0x1234);\n        out.writeInt(0x12345678);\n        out.writeLong(0x1234567898765432L);\n        // total 1 + 2 + 4 + 8 = 15 bytes\n\n        // put a short across a buffer boundary\n        for (int i = 0; i < 8192 - 15 - 1; i++) out.write(0);\n        out.writeShort(0x4321);\n\n        // put an int across the next buffer boundary\n        for (int i = 0; i < 8192 - 1 - 3; i++) out.write(0);\n        out.writeInt(0x1a2b3c4d);\n\n        // put a long across the next buffer boundary\n        for (int i = 0; i < 8192 - 1 - 7; i++) out.write(0);\n        out.writeLong(0x1122334455667788L);\n\n        // now write several buffers worth of data\n        for (int i = 0; i < 8192 * 3; i++) out.writeByte(i);\n\n        out.close();\n\n        FileInputStream ins = new FileInputStream(file);\n        ChannelInput in = new ChannelInput(ins.getChannel(), 0, 8192);\n\n        assertEquals((byte)0x23, in.readByte());\n        assertEquals((short)0x1234, in.readShort());\n        assertEquals(0x12345678, in.readInt());\n        assertEquals(0x1234567898765432L, in.readLong());\n\n        in.skip(8192 - 15 - 1);\n        assertEquals((short)0x4321, in.readShort());\n\n        in.skip(8192 - 1 - 3);\n        assertEquals(0x1a2b3c4d, in.readInt());\n\n        in.skip(8192 - 1 - 7);\n        assertEquals(0x1122334455667788L, in.readLong());\n\n        byte[] data = new byte[8192 * 3];\n        in.read(data, 0, data.length);\n        for (int i = 0; i < data.length; i++) {\n            assertEquals((byte)i, data[i]);\n        }\n\n        ins.close();\n   }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "ChannelInputTest.testRead()", "testcase": true, "constructor": false, "invocations": ["delete", "writeByte", "writeShort", "writeInt", "writeLong", "write", "writeShort", "write", "writeInt", "write", "writeLong", "writeByte", "close", "getChannel", "assertEquals", "readByte", "assertEquals", "readShort", "assertEquals", "readInt", "assertEquals", "readLong", "skip", "assertEquals", "readShort", "skip", "assertEquals", "readInt", "skip", "assertEquals", "readLong", "read", "assertEquals", "close"]}, "focal_class": {"identifier": "ChannelInput", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FileChannel channel;", "modifier": "private final", "type": "FileChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private final ByteBuffer buffer;", "modifier": "private final", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int nextBufferPosition;", "modifier": "private", "type": "int", "declarator": "nextBufferPosition", "var_name": "nextBufferPosition"}], "methods": [{"identifier": "ChannelInput", "parameters": "(FileChannel channel, int position, int bufferSize)", "modifiers": "", "return": "", "signature": " ChannelInput(FileChannel channel, int position, int bufferSize)", "full_signature": "  ChannelInput(FileChannel channel, int position, int bufferSize)", "class_method_signature": "ChannelInput.ChannelInput(FileChannel channel, int position, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "fill", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fill()", "full_signature": "private void fill()", "class_method_signature": "ChannelInput.fill()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int position()", "full_signature": "public int position()", "class_method_signature": "ChannelInput.position()", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "(int newPosition)", "modifiers": "public", "return": "void", "signature": "void position(int newPosition)", "full_signature": "public void position(int newPosition)", "class_method_signature": "ChannelInput.position(int newPosition)", "testcase": false, "constructor": false}, {"identifier": "readByte", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte readByte()", "full_signature": "public byte readByte()", "class_method_signature": "ChannelInput.readByte()", "testcase": false, "constructor": false}, {"identifier": "readShort", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short readShort()", "full_signature": "public short readShort()", "class_method_signature": "ChannelInput.readShort()", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int readInt()", "full_signature": "public int readInt()", "class_method_signature": "ChannelInput.readInt()", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long readLong()", "full_signature": "public long readLong()", "class_method_signature": "ChannelInput.readLong()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] dst, int offset, int length)", "modifiers": "public", "return": "void", "signature": "void read(byte[] dst, int offset, int length)", "full_signature": "public void read(byte[] dst, int offset, int length)", "class_method_signature": "ChannelInput.read(byte[] dst, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(int bytes)", "modifiers": "public", "return": "void", "signature": "void skip(int bytes)", "full_signature": "public void skip(int bytes)", "class_method_signature": "ChannelInput.skip(int bytes)", "testcase": false, "constructor": false}], "file": "src/main/java/io/qdb/buffer/ChannelInput.java"}, "focal_method": {"identifier": "read", "parameters": "(byte[] dst, int offset, int length)", "modifiers": "public", "return": "void", "body": "public void read(byte[] dst, int offset, int length) throws IOException {\n        for (; length > 0; ) {\n            int remaining = buffer.remaining();\n            if (length <= remaining) {\n                buffer.get(dst, offset, length);\n                break;\n            }\n            buffer.get(dst, offset, remaining);\n            offset += remaining;\n            length -= remaining;\n            fill();\n        }\n    }", "signature": "void read(byte[] dst, int offset, int length)", "full_signature": "public void read(byte[] dst, int offset, int length)", "class_method_signature": "ChannelInput.read(byte[] dst, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["remaining", "get", "get", "fill"]}, "repository": {"repo_id": 31758882, "url": "https://github.com/zqhxuyuan/zava", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 10325, "license": "licensed"}}