{"test_class": {"identifier": "KStreamImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "final private Serde<Integer> intSerde = Serdes.Integer();", "modifier": "final private", "type": "Serde<Integer>", "declarator": "intSerde = Serdes.Integer()", "var_name": "intSerde"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java"}, "test_case": {"identifier": "testToWithNullValueSerdeDoesntNPE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToWithNullValueSerdeDoesntNPE() {\n        final KStreamBuilder builder = new KStreamBuilder();\n        final KStream<String, String> inputStream = builder.stream(stringSerde, stringSerde, \"input\");\n        inputStream.to(stringSerde, null, \"output\");\n    }", "signature": "void testToWithNullValueSerdeDoesntNPE()", "full_signature": "@Test public void testToWithNullValueSerdeDoesntNPE()", "class_method_signature": "KStreamImplTest.testToWithNullValueSerdeDoesntNPE()", "testcase": true, "constructor": false, "invocations": ["stream", "to"]}, "focal_class": {"identifier": "KStreamImpl", "superclass": "extends AbstractStream<K>", "interfaces": "implements KStream<K, V>", "fields": [{"original_string": "private static final String AGGREGATE_NAME = \"KSTREAM-AGGREGATE-\";", "modifier": "private static final", "type": "String", "declarator": "AGGREGATE_NAME = \"KSTREAM-AGGREGATE-\"", "var_name": "AGGREGATE_NAME"}, {"original_string": "private static final String BRANCH_NAME = \"KSTREAM-BRANCH-\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH_NAME = \"KSTREAM-BRANCH-\"", "var_name": "BRANCH_NAME"}, {"original_string": "private static final String BRANCHCHILD_NAME = \"KSTREAM-BRANCHCHILD-\";", "modifier": "private static final", "type": "String", "declarator": "BRANCHCHILD_NAME = \"KSTREAM-BRANCHCHILD-\"", "var_name": "BRANCHCHILD_NAME"}, {"original_string": "private static final String FILTER_NAME = \"KSTREAM-FILTER-\";", "modifier": "private static final", "type": "String", "declarator": "FILTER_NAME = \"KSTREAM-FILTER-\"", "var_name": "FILTER_NAME"}, {"original_string": "private static final String FLATMAP_NAME = \"KSTREAM-FLATMAP-\";", "modifier": "private static final", "type": "String", "declarator": "FLATMAP_NAME = \"KSTREAM-FLATMAP-\"", "var_name": "FLATMAP_NAME"}, {"original_string": "private static final String FLATMAPVALUES_NAME = \"KSTREAM-FLATMAPVALUES-\";", "modifier": "private static final", "type": "String", "declarator": "FLATMAPVALUES_NAME = \"KSTREAM-FLATMAPVALUES-\"", "var_name": "FLATMAPVALUES_NAME"}, {"original_string": "public static final String JOINTHIS_NAME = \"KSTREAM-JOINTHIS-\";", "modifier": "public static final", "type": "String", "declarator": "JOINTHIS_NAME = \"KSTREAM-JOINTHIS-\"", "var_name": "JOINTHIS_NAME"}, {"original_string": "public static final String JOINOTHER_NAME = \"KSTREAM-JOINOTHER-\";", "modifier": "public static final", "type": "String", "declarator": "JOINOTHER_NAME = \"KSTREAM-JOINOTHER-\"", "var_name": "JOINOTHER_NAME"}, {"original_string": "public static final String LEFTJOIN_NAME = \"KSTREAM-LEFTJOIN-\";", "modifier": "public static final", "type": "String", "declarator": "LEFTJOIN_NAME = \"KSTREAM-LEFTJOIN-\"", "var_name": "LEFTJOIN_NAME"}, {"original_string": "private static final String MAP_NAME = \"KSTREAM-MAP-\";", "modifier": "private static final", "type": "String", "declarator": "MAP_NAME = \"KSTREAM-MAP-\"", "var_name": "MAP_NAME"}, {"original_string": "private static final String MAPVALUES_NAME = \"KSTREAM-MAPVALUES-\";", "modifier": "private static final", "type": "String", "declarator": "MAPVALUES_NAME = \"KSTREAM-MAPVALUES-\"", "var_name": "MAPVALUES_NAME"}, {"original_string": "public static final String MERGE_NAME = \"KSTREAM-MERGE-\";", "modifier": "public static final", "type": "String", "declarator": "MERGE_NAME = \"KSTREAM-MERGE-\"", "var_name": "MERGE_NAME"}, {"original_string": "public static final String OUTERTHIS_NAME = \"KSTREAM-OUTERTHIS-\";", "modifier": "public static final", "type": "String", "declarator": "OUTERTHIS_NAME = \"KSTREAM-OUTERTHIS-\"", "var_name": "OUTERTHIS_NAME"}, {"original_string": "public static final String OUTEROTHER_NAME = \"KSTREAM-OUTEROTHER-\";", "modifier": "public static final", "type": "String", "declarator": "OUTEROTHER_NAME = \"KSTREAM-OUTEROTHER-\"", "var_name": "OUTEROTHER_NAME"}, {"original_string": "private static final String PROCESSOR_NAME = \"KSTREAM-PROCESSOR-\";", "modifier": "private static final", "type": "String", "declarator": "PROCESSOR_NAME = \"KSTREAM-PROCESSOR-\"", "var_name": "PROCESSOR_NAME"}, {"original_string": "private static final String PRINTING_NAME = \"KSTREAM-PRINTER-\";", "modifier": "private static final", "type": "String", "declarator": "PRINTING_NAME = \"KSTREAM-PRINTER-\"", "var_name": "PRINTING_NAME"}, {"original_string": "private static final String REDUCE_NAME = \"KSTREAM-REDUCE-\";", "modifier": "private static final", "type": "String", "declarator": "REDUCE_NAME = \"KSTREAM-REDUCE-\"", "var_name": "REDUCE_NAME"}, {"original_string": "private static final String KEY_SELECT_NAME = \"KSTREAM-KEY-SELECT-\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SELECT_NAME = \"KSTREAM-KEY-SELECT-\"", "var_name": "KEY_SELECT_NAME"}, {"original_string": "public static final String SINK_NAME = \"KSTREAM-SINK-\";", "modifier": "public static final", "type": "String", "declarator": "SINK_NAME = \"KSTREAM-SINK-\"", "var_name": "SINK_NAME"}, {"original_string": "public static final String SOURCE_NAME = \"KSTREAM-SOURCE-\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_NAME = \"KSTREAM-SOURCE-\"", "var_name": "SOURCE_NAME"}, {"original_string": "private static final String TRANSFORM_NAME = \"KSTREAM-TRANSFORM-\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORM_NAME = \"KSTREAM-TRANSFORM-\"", "var_name": "TRANSFORM_NAME"}, {"original_string": "private static final String TRANSFORMVALUES_NAME = \"KSTREAM-TRANSFORMVALUES-\";", "modifier": "private static final", "type": "String", "declarator": "TRANSFORMVALUES_NAME = \"KSTREAM-TRANSFORMVALUES-\"", "var_name": "TRANSFORMVALUES_NAME"}, {"original_string": "private static final String WINDOWED_NAME = \"KSTREAM-WINDOWED-\";", "modifier": "private static final", "type": "String", "declarator": "WINDOWED_NAME = \"KSTREAM-WINDOWED-\"", "var_name": "WINDOWED_NAME"}, {"original_string": "private static final String FOREACH_NAME = \"KSTREAM-FOREACH-\";", "modifier": "private static final", "type": "String", "declarator": "FOREACH_NAME = \"KSTREAM-FOREACH-\"", "var_name": "FOREACH_NAME"}], "methods": [{"identifier": "KStreamImpl", "parameters": "(KStreamBuilder topology, String name, Set<String> sourceNodes)", "modifiers": "public", "return": "", "signature": " KStreamImpl(KStreamBuilder topology, String name, Set<String> sourceNodes)", "full_signature": "public  KStreamImpl(KStreamBuilder topology, String name, Set<String> sourceNodes)", "class_method_signature": "KStreamImpl.KStreamImpl(KStreamBuilder topology, String name, Set<String> sourceNodes)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(Predicate<K, V> predicate)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> filter(Predicate<K, V> predicate)", "full_signature": "@Override public KStream<K, V> filter(Predicate<K, V> predicate)", "class_method_signature": "KStreamImpl.filter(Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(final Predicate<K, V> predicate)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> filterNot(final Predicate<K, V> predicate)", "full_signature": "@Override public KStream<K, V> filterNot(final Predicate<K, V> predicate)", "class_method_signature": "KStreamImpl.filterNot(final Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "selectKey", "parameters": "(final KeyValueMapper<K, V, K1> mapper)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "KStream<K1, V>", "signature": "KStream<K1, V> selectKey(final KeyValueMapper<K, V, K1> mapper)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public KStream<K1, V> selectKey(final KeyValueMapper<K, V, K1> mapper)", "class_method_signature": "KStreamImpl.selectKey(final KeyValueMapper<K, V, K1> mapper)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(KeyValueMapper<K, V, KeyValue<K1, V1>> mapper)", "modifiers": "@Override public", "return": "KStream<K1, V1>", "signature": "KStream<K1, V1> map(KeyValueMapper<K, V, KeyValue<K1, V1>> mapper)", "full_signature": "@Override public KStream<K1, V1> map(KeyValueMapper<K, V, KeyValue<K1, V1>> mapper)", "class_method_signature": "KStreamImpl.map(KeyValueMapper<K, V, KeyValue<K1, V1>> mapper)", "testcase": false, "constructor": false}, {"identifier": "mapValues", "parameters": "(ValueMapper<V, V1> mapper)", "modifiers": "@Override public", "return": "KStream<K, V1>", "signature": "KStream<K, V1> mapValues(ValueMapper<V, V1> mapper)", "full_signature": "@Override public KStream<K, V1> mapValues(ValueMapper<V, V1> mapper)", "class_method_signature": "KStreamImpl.mapValues(ValueMapper<V, V1> mapper)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void print()", "full_signature": "@Override public void print()", "class_method_signature": "KStreamImpl.print()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Serde<K> keySerde, Serde<V> valSerde)", "modifiers": "@Override public", "return": "void", "signature": "void print(Serde<K> keySerde, Serde<V> valSerde)", "full_signature": "@Override public void print(Serde<K> keySerde, Serde<V> valSerde)", "class_method_signature": "KStreamImpl.print(Serde<K> keySerde, Serde<V> valSerde)", "testcase": false, "constructor": false}, {"identifier": "writeAsText", "parameters": "(String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void writeAsText(String filePath)", "full_signature": "@Override public void writeAsText(String filePath)", "class_method_signature": "KStreamImpl.writeAsText(String filePath)", "testcase": false, "constructor": false}, {"identifier": "writeAsText", "parameters": "(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "modifiers": "@Override public", "return": "void", "signature": "void writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "full_signature": "@Override public void writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "class_method_signature": "KStreamImpl.writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "modifiers": "@Override public", "return": "KStream<K1, V1>", "signature": "KStream<K1, V1> flatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "full_signature": "@Override public KStream<K1, V1> flatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "class_method_signature": "KStreamImpl.flatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "testcase": false, "constructor": false}, {"identifier": "flatMapValues", "parameters": "(ValueMapper<V, Iterable<V1>> mapper)", "modifiers": "@Override public", "return": "KStream<K, V1>", "signature": "KStream<K, V1> flatMapValues(ValueMapper<V, Iterable<V1>> mapper)", "full_signature": "@Override public KStream<K, V1> flatMapValues(ValueMapper<V, Iterable<V1>> mapper)", "class_method_signature": "KStreamImpl.flatMapValues(ValueMapper<V, Iterable<V1>> mapper)", "testcase": false, "constructor": false}, {"identifier": "branch", "parameters": "(Predicate<K, V>... predicates)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "KStream<K, V>[]", "signature": "KStream<K, V>[] branch(Predicate<K, V>... predicates)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public KStream<K, V>[] branch(Predicate<K, V>... predicates)", "class_method_signature": "KStreamImpl.branch(Predicate<K, V>... predicates)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(KStreamBuilder topology, KStream<K, V>[] streams)", "modifiers": "public static", "return": "KStream<K, V>", "signature": "KStream<K, V> merge(KStreamBuilder topology, KStream<K, V>[] streams)", "full_signature": "public static KStream<K, V> merge(KStreamBuilder topology, KStream<K, V>[] streams)", "class_method_signature": "KStreamImpl.merge(KStreamBuilder topology, KStream<K, V>[] streams)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> through(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public KStream<K, V> through(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KStreamImpl.through(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "foreach", "parameters": "(ForeachAction<K, V> action)", "modifiers": "@Override public", "return": "void", "signature": "void foreach(ForeachAction<K, V> action)", "full_signature": "@Override public void foreach(ForeachAction<K, V> action)", "class_method_signature": "KStreamImpl.foreach(ForeachAction<K, V> action)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String topic)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "full_signature": "@Override public KStream<K, V> through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "class_method_signature": "KStreamImpl.through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> through(StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public KStream<K, V> through(StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KStreamImpl.through(StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(String topic)", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> through(String topic)", "full_signature": "@Override public KStream<K, V> through(String topic)", "class_method_signature": "KStreamImpl.through(String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(String topic)", "full_signature": "@Override public void to(String topic)", "class_method_signature": "KStreamImpl.to(String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public void to(StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KStreamImpl.to(StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "full_signature": "@Override public void to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "class_method_signature": "KStreamImpl.to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KStreamImpl.to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(TransformerSupplier<K, V, KeyValue<K1, V1>> transformerSupplier, String... stateStoreNames)", "modifiers": "@Override public", "return": "KStream<K1, V1>", "signature": "KStream<K1, V1> transform(TransformerSupplier<K, V, KeyValue<K1, V1>> transformerSupplier, String... stateStoreNames)", "full_signature": "@Override public KStream<K1, V1> transform(TransformerSupplier<K, V, KeyValue<K1, V1>> transformerSupplier, String... stateStoreNames)", "class_method_signature": "KStreamImpl.transform(TransformerSupplier<K, V, KeyValue<K1, V1>> transformerSupplier, String... stateStoreNames)", "testcase": false, "constructor": false}, {"identifier": "transformValues", "parameters": "(ValueTransformerSupplier<V, V1> valueTransformerSupplier, String... stateStoreNames)", "modifiers": "@Override public", "return": "KStream<K, V1>", "signature": "KStream<K, V1> transformValues(ValueTransformerSupplier<V, V1> valueTransformerSupplier, String... stateStoreNames)", "full_signature": "@Override public KStream<K, V1> transformValues(ValueTransformerSupplier<V, V1> valueTransformerSupplier, String... stateStoreNames)", "class_method_signature": "KStreamImpl.transformValues(ValueTransformerSupplier<V, V1> valueTransformerSupplier, String... stateStoreNames)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final ProcessorSupplier<K, V> processorSupplier, String... stateStoreNames)", "modifiers": "@Override public", "return": "void", "signature": "void process(final ProcessorSupplier<K, V> processorSupplier, String... stateStoreNames)", "full_signature": "@Override public void process(final ProcessorSupplier<K, V> processorSupplier, String... stateStoreNames)", "class_method_signature": "KStreamImpl.process(final ProcessorSupplier<K, V> processorSupplier, String... stateStoreNames)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "modifiers": "@Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "full_signature": "@Override public KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "class_method_signature": "KStreamImpl.join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "modifiers": "@Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "full_signature": "@Override public KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "class_method_signature": "KStreamImpl.join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "testcase": false, "constructor": false}, {"identifier": "outerJoin", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "modifiers": "@Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "full_signature": "@Override public KStream<K, R> outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "class_method_signature": "KStreamImpl.outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde)", "testcase": false, "constructor": false}, {"identifier": "outerJoin", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "modifiers": "@Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "full_signature": "@Override public KStream<K, R> outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "class_method_signature": "KStreamImpl.outerJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde,\n            boolean outer)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "KStream<K, R>", "signature": "KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde,\n            boolean outer)", "full_signature": "@SuppressWarnings(\"unchecked\") private KStream<K, R> join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde,\n            boolean outer)", "class_method_signature": "KStreamImpl.join(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V> thisValueSerde,\n            Serde<V1> otherValueSerde,\n            boolean outer)", "testcase": false, "constructor": false}, {"identifier": "leftJoin", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V1> otherValueSerde)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V1> otherValueSerde)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public KStream<K, R> leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V1> otherValueSerde)", "class_method_signature": "KStreamImpl.leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows,\n            Serde<K> keySerde,\n            Serde<V1> otherValueSerde)", "testcase": false, "constructor": false}, {"identifier": "leftJoin", "parameters": "(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "modifiers": "@Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "full_signature": "@Override public KStream<K, R> leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "class_method_signature": "KStreamImpl.leftJoin(\n            KStream<K, V1> other,\n            ValueJoiner<V, V1, R> joiner,\n            JoinWindows windows)", "testcase": false, "constructor": false}, {"identifier": "leftJoin", "parameters": "(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "KStream<K, R>", "signature": "KStream<K, R> leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public KStream<K, R> leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "class_method_signature": "KStreamImpl.leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "testcase": false, "constructor": false}, {"identifier": "reduceByKey", "parameters": "(Reducer<V> reducer,\n                                                                 Windows<W> windows,\n                                                                 Serde<K> keySerde,\n                                                                 Serde<V> aggValueSerde)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, V>", "signature": "KTable<Windowed<K>, V> reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows,\n                                                                 Serde<K> keySerde,\n                                                                 Serde<V> aggValueSerde)", "full_signature": "@Override public KTable<Windowed<K>, V> reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows,\n                                                                 Serde<K> keySerde,\n                                                                 Serde<V> aggValueSerde)", "class_method_signature": "KStreamImpl.reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows,\n                                                                 Serde<K> keySerde,\n                                                                 Serde<V> aggValueSerde)", "testcase": false, "constructor": false}, {"identifier": "reduceByKey", "parameters": "(Reducer<V> reducer,\n                                                                 Windows<W> windows)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, V>", "signature": "KTable<Windowed<K>, V> reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows)", "full_signature": "@Override public KTable<Windowed<K>, V> reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows)", "class_method_signature": "KStreamImpl.reduceByKey(Reducer<V> reducer,\n                                                                 Windows<W> windows)", "testcase": false, "constructor": false}, {"identifier": "reduceByKey", "parameters": "(Reducer<V> reducer,\n                                    Serde<K> keySerde,\n                                    Serde<V> aggValueSerde,\n                                    String name)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> reduceByKey(Reducer<V> reducer,\n                                    Serde<K> keySerde,\n                                    Serde<V> aggValueSerde,\n                                    String name)", "full_signature": "@Override public KTable<K, V> reduceByKey(Reducer<V> reducer,\n                                    Serde<K> keySerde,\n                                    Serde<V> aggValueSerde,\n                                    String name)", "class_method_signature": "KStreamImpl.reduceByKey(Reducer<V> reducer,\n                                    Serde<K> keySerde,\n                                    Serde<V> aggValueSerde,\n                                    String name)", "testcase": false, "constructor": false}, {"identifier": "reduceByKey", "parameters": "(Reducer<V> reducer, String name)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> reduceByKey(Reducer<V> reducer, String name)", "full_signature": "@Override public KTable<K, V> reduceByKey(Reducer<V> reducer, String name)", "class_method_signature": "KStreamImpl.reduceByKey(Reducer<V> reducer, String name)", "testcase": false, "constructor": false}, {"identifier": "aggregateByKey", "parameters": "(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows,\n                                                                       Serde<K> keySerde,\n                                                                       Serde<T> aggValueSerde)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, T>", "signature": "KTable<Windowed<K>, T> aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows,\n                                                                       Serde<K> keySerde,\n                                                                       Serde<T> aggValueSerde)", "full_signature": "@Override public KTable<Windowed<K>, T> aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows,\n                                                                       Serde<K> keySerde,\n                                                                       Serde<T> aggValueSerde)", "class_method_signature": "KStreamImpl.aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows,\n                                                                       Serde<K> keySerde,\n                                                                       Serde<T> aggValueSerde)", "testcase": false, "constructor": false}, {"identifier": "aggregateByKey", "parameters": "(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, T>", "signature": "KTable<Windowed<K>, T> aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows)", "full_signature": "@Override public KTable<Windowed<K>, T> aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows)", "class_method_signature": "KStreamImpl.aggregateByKey(Initializer<T> initializer,\n                                                                       Aggregator<K, V, T> aggregator,\n                                                                       Windows<W> windows)", "testcase": false, "constructor": false}, {"identifier": "aggregateByKey", "parameters": "(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           Serde<K> keySerde,\n                                           Serde<T> aggValueSerde,\n                                           String name)", "modifiers": "@Override public", "return": "KTable<K, T>", "signature": "KTable<K, T> aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           Serde<K> keySerde,\n                                           Serde<T> aggValueSerde,\n                                           String name)", "full_signature": "@Override public KTable<K, T> aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           Serde<K> keySerde,\n                                           Serde<T> aggValueSerde,\n                                           String name)", "class_method_signature": "KStreamImpl.aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           Serde<K> keySerde,\n                                           Serde<T> aggValueSerde,\n                                           String name)", "testcase": false, "constructor": false}, {"identifier": "aggregateByKey", "parameters": "(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           String name)", "modifiers": "@Override public", "return": "KTable<K, T>", "signature": "KTable<K, T> aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           String name)", "full_signature": "@Override public KTable<K, T> aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           String name)", "class_method_signature": "KStreamImpl.aggregateByKey(Initializer<T> initializer,\n                                           Aggregator<K, V, T> aggregator,\n                                           String name)", "testcase": false, "constructor": false}, {"identifier": "countByKey", "parameters": "(Windows<W> windows,\n                                                                   Serde<K> keySerde)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, Long>", "signature": "KTable<Windowed<K>, Long> countByKey(Windows<W> windows,\n                                                                   Serde<K> keySerde)", "full_signature": "@Override public KTable<Windowed<K>, Long> countByKey(Windows<W> windows,\n                                                                   Serde<K> keySerde)", "class_method_signature": "KStreamImpl.countByKey(Windows<W> windows,\n                                                                   Serde<K> keySerde)", "testcase": false, "constructor": false}, {"identifier": "countByKey", "parameters": "(Windows<W> windows)", "modifiers": "@Override public", "return": "KTable<Windowed<K>, Long>", "signature": "KTable<Windowed<K>, Long> countByKey(Windows<W> windows)", "full_signature": "@Override public KTable<Windowed<K>, Long> countByKey(Windows<W> windows)", "class_method_signature": "KStreamImpl.countByKey(Windows<W> windows)", "testcase": false, "constructor": false}, {"identifier": "countByKey", "parameters": "(Serde<K> keySerde, String name)", "modifiers": "@Override public", "return": "KTable<K, Long>", "signature": "KTable<K, Long> countByKey(Serde<K> keySerde, String name)", "full_signature": "@Override public KTable<K, Long> countByKey(Serde<K> keySerde, String name)", "class_method_signature": "KStreamImpl.countByKey(Serde<K> keySerde, String name)", "testcase": false, "constructor": false}, {"identifier": "countByKey", "parameters": "(String name)", "modifiers": "@Override public", "return": "KTable<K, Long>", "signature": "KTable<K, Long> countByKey(String name)", "full_signature": "@Override public KTable<K, Long> countByKey(String name)", "class_method_signature": "KStreamImpl.countByKey(String name)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java"}, "focal_method": {"identifier": "to", "parameters": "(String topic)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void to(String topic) {\n        to(null, null, null, topic);\n    }", "signature": "void to(String topic)", "full_signature": "@Override public void to(String topic)", "class_method_signature": "KStreamImpl.to(String topic)", "testcase": false, "constructor": false, "invocations": ["to"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}