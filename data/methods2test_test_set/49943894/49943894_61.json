{"test_class": {"identifier": "GroupByTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String EXPECTED_QUERY = \"BASE GROUP BY FIRST(TEST_TABLE.TEST_COLUMN), MAX(TEST_TABLE.TEST_COLUMN) HAVING COUNT(TEST_TABLE2.TEST_COLUMN2) > ? \";", "modifier": "protected static final", "type": "String", "declarator": "EXPECTED_QUERY = \"BASE GROUP BY FIRST(TEST_TABLE.TEST_COLUMN), MAX(TEST_TABLE.TEST_COLUMN) HAVING COUNT(TEST_TABLE2.TEST_COLUMN2) > ? \"", "var_name": "EXPECTED_QUERY"}], "file": "framework/db/src/test/java/com/cloud/utils/db/GroupByTest.java"}, "test_case": {"identifier": "testToSql", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToSql() {\n        // Prepare\n        final StringBuilder sb = new StringBuilder(\"BASE\");\n        final GroupByExtension groupBy = new GroupByExtension(new SearchBaseExtension(String.class, String.class));\n\n        final Attribute att = new Attribute(\"TEST_TABLE\", \"TEST_COLUMN\");\n        final Pair<Func, Attribute> pair1 = new Pair<SearchCriteria.Func, Attribute>(SearchCriteria.Func.FIRST, att);\n        final Pair<Func, Attribute> pair2 = new Pair<SearchCriteria.Func, Attribute>(SearchCriteria.Func.MAX, att);\n        groupBy._groupBys = new ArrayList<Pair<Func, Attribute>>();\n        groupBy._groupBys.add(pair1);\n        groupBy._groupBys.add(pair2);\n        groupBy.having(SearchCriteria.Func.COUNT, att, Op.GT, \"SOME_VALUE\");\n\n        // Execute\n        groupBy.toSql(sb);\n\n        // Assert\n        assertTrue(\"It didn't create the expected SQL query.\", sb.toString().equals(EXPECTED_QUERY));\n    }", "signature": "void testToSql()", "full_signature": "@Test public void testToSql()", "class_method_signature": "GroupByTest.testToSql()", "testcase": true, "constructor": false, "invocations": ["add", "add", "having", "toSql", "assertTrue", "equals", "toString"]}, "focal_class": {"identifier": "GroupBy", "superclass": "", "interfaces": "", "fields": [{"original_string": "J _builder;", "modifier": "", "type": "J", "declarator": "_builder", "var_name": "_builder"}, {"original_string": "List<Pair<Func, Attribute>> _groupBys;", "modifier": "", "type": "List<Pair<Func, Attribute>>", "declarator": "_groupBys", "var_name": "_groupBys"}, {"original_string": "Having _having;", "modifier": "", "type": "Having", "declarator": "_having", "var_name": "_having"}], "methods": [{"identifier": "GroupBy", "parameters": "(final J builder)", "modifiers": "public", "return": "", "signature": " GroupBy(final J builder)", "full_signature": "public  GroupBy(final J builder)", "class_method_signature": "GroupBy.GroupBy(final J builder)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final J builder)", "modifiers": "protected", "return": "void", "signature": "void init(final J builder)", "full_signature": "protected void init(final J builder)", "class_method_signature": "GroupBy.init(final J builder)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(final Object useless)", "modifiers": "public", "return": "GroupBy<J, T, R>", "signature": "GroupBy<J, T, R> group(final Object useless)", "full_signature": "public GroupBy<J, T, R> group(final Object useless)", "class_method_signature": "GroupBy.group(final Object useless)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(final Func func, final Object useless)", "modifiers": "public", "return": "GroupBy<J, T, R>", "signature": "GroupBy<J, T, R> group(final Func func, final Object useless)", "full_signature": "public GroupBy<J, T, R> group(final Func func, final Object useless)", "class_method_signature": "GroupBy.group(final Func func, final Object useless)", "testcase": false, "constructor": false}, {"identifier": "having", "parameters": "(final Func func, final Object obj, final Op op, final Object value)", "modifiers": "public", "return": "J", "signature": "J having(final Func func, final Object obj, final Op op, final Object value)", "full_signature": "public J having(final Func func, final Object obj, final Op op, final Object value)", "class_method_signature": "GroupBy.having(final Func func, final Object obj, final Op op, final Object value)", "testcase": false, "constructor": false}, {"identifier": "toSql", "parameters": "(final StringBuilder builder)", "modifiers": "public", "return": "void", "signature": "void toSql(final StringBuilder builder)", "full_signature": "public void toSql(final StringBuilder builder)", "class_method_signature": "GroupBy.toSql(final StringBuilder builder)", "testcase": false, "constructor": false}], "file": "framework/db/src/main/java/com/cloud/utils/db/GroupBy.java"}, "focal_method": {"identifier": "toSql", "parameters": "(final StringBuilder builder)", "modifiers": "public", "return": "void", "body": "public void toSql(final StringBuilder builder) {\n        builder.append(\" GROUP BY \");\n        for (final Pair<Func, Attribute> groupBy : _groupBys) {\n            if (groupBy.first() != null) {\n                String func = groupBy.first().toString();\n                func = func.replaceFirst(\"@\", groupBy.second().table + \".\" + groupBy.second().columnName);\n                builder.append(func);\n            } else {\n                builder.append(groupBy.second().table + \".\" + groupBy.second().columnName);\n            }\n\n            builder.append(\", \");\n        }\n\n        builder.delete(builder.length() - 2, builder.length());\n        if (_having != null) {\n            _having.toSql(builder);\n        }\n    }", "signature": "void toSql(final StringBuilder builder)", "full_signature": "public void toSql(final StringBuilder builder)", "class_method_signature": "GroupBy.toSql(final StringBuilder builder)", "testcase": false, "constructor": false, "invocations": ["append", "first", "toString", "first", "replaceFirst", "second", "second", "append", "append", "second", "second", "append", "delete", "length", "length", "toSql"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}