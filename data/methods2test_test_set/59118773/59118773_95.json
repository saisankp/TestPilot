{"test_class": {"identifier": "FundingByLocationControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FundingByLocationController fundingByLocationController;", "modifier": "@Autowired\n    private", "type": "FundingByLocationController", "declarator": "fundingByLocationController", "var_name": "fundingByLocationController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/FundingByLocationControllerTest.java"}, "test_case": {"identifier": "qualityFundingByTenderDeliveryLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void qualityFundingByTenderDeliveryLocation() throws Exception {\n        final List<Document> qualityFundingByTenderDeliveryLocation = fundingByLocationController\n                .qualityFundingByTenderDeliveryLocation(new YearFilterPagingRequest());\n\n        final Document first = qualityFundingByTenderDeliveryLocation.get(0);\n        int totalTendersWithStartDate = (int) first.get(FundingByLocationController.Keys.TOTAL_TENDERS_WITH_START_DATE);\n        int totalTendersWithStartDateAndLocation = (int) first\n                .get(FundingByLocationController.Keys.TOTAL_TENDERS_WITH_START_DATE_AND_LOCATION);\n        double percentTendersWithStartDateAndLocation = (double) first\n                .get(FundingByLocationController.Keys.PERCENT_TENDERS_WITH_START_DATE_AND_LOCATION);\n\n        Assert.assertEquals(3, totalTendersWithStartDate);\n        Assert.assertEquals(1, totalTendersWithStartDateAndLocation);\n        Assert.assertEquals(33.33, percentTendersWithStartDateAndLocation, 1E-2);\n    }", "signature": "void qualityFundingByTenderDeliveryLocation()", "full_signature": "@Test public void qualityFundingByTenderDeliveryLocation()", "class_method_signature": "FundingByLocationControllerTest.qualityFundingByTenderDeliveryLocation()", "testcase": true, "constructor": false, "invocations": ["qualityFundingByTenderDeliveryLocation", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FundingByLocationController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "fundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Total estimated funding (tender.value) grouped by \" + \"tender.items.deliveryLocation and also grouped by year.\" + \" The endpoint also returns the count of tenders for each location. \" + \"It responds to all filters. The year is calculated based on tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/fundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.fundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "qualityFundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/FundingByLocationController.java"}, "focal_method": {"identifier": "qualityFundingByTenderDeliveryLocation", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\"\n            + \" that is the array tender.items.deliveryLocation has to have items.\"\n            + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\")\n    @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST,\n            RequestMethod.GET }, produces = \"application/json\")\n    public List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        project.putAll(filterProjectMap);\n        project.put(Fields.UNDERSCORE_ID, \"$tender._id\");\n        project.put(\"tenderItemsDeliveryLocation\", new BasicDBObject(\"$cond\",\n                Arrays.asList(new BasicDBObject(\"$gt\",\n                        Arrays.asList(\"$tender.items.deliveryLocation\", null)), 1, 0)));\n\n\n        DBObject project1 = new BasicDBObject();\n        project1.put(Fields.UNDERSCORE_ID, 0);\n        project1.put(Keys.TOTAL_TENDERS_WITH_START_DATE, 1);\n        project1.put(Keys.TOTAL_TENDERS_WITH_START_DATE_AND_LOCATION, 1);\n        project1.put(Keys.PERCENT_TENDERS_WITH_START_DATE_AND_LOCATION,\n                new BasicDBObject(\"$multiply\",\n                        Arrays.asList(new BasicDBObject(\"$divide\",\n                                        Arrays.asList(\n                                                \"$totalTendersWithStartDateAndLocation\", \"$totalTendersWithStartDate\")),\n                                100)));\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE))),\n                unwind(\"$tender.items\"), new CustomProjectionOperation(project),\n                group(Fields.UNDERSCORE_ID_REF).max(\"tenderItemsDeliveryLocation\").as(\"hasTenderItemsDeliverLocation\"),\n                group().count().as(\"totalTendersWithStartDate\").sum(\"hasTenderItemsDeliverLocation\")\n                        .as(Keys.TOTAL_TENDERS_WITH_START_DATE_AND_LOCATION),\n                new CustomProjectionOperation(project1)\n        // ,skip(filter.getSkip()),limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(\"Calculates percentage of releases with tender with at least one specified delivery location,\" + \" that is the array tender.items.deliveryLocation has to have items.\" + \"Filters out stub tenders, therefore tender.tenderPeriod.startDate has to exist.\") @RequestMapping(value = \"/api/qualityFundingByTenderDeliveryLocation\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "FundingByLocationController.qualityFundingByTenderDeliveryLocation(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["putAll", "put", "put", "asList", "asList", "put", "put", "put", "put", "asList", "asList", "newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "unwind", "as", "max", "group", "as", "sum", "as", "count", "group", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}