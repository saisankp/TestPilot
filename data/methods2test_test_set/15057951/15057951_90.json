{"test_class": {"identifier": "AnnotatedObjectFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotatedObjectFactory annotatedObjectFactory;", "modifier": "private", "type": "AnnotatedObjectFactory", "declarator": "annotatedObjectFactory", "var_name": "annotatedObjectFactory"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/annotated/scanner/AnnotatedObjectFactoryTest.java"}, "test_case": {"identifier": "shouldCreateSingleObjectWithGivenValueAsKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateSingleObjectWithGivenValueAsKey() {\n        // given\n        Annotation annotation = annotation().withValue(\"TEST_CODE\").build();\n\n        // when\n        Map<RepositoryObjectKey, Object> objects = annotatedObjectFactory.createObjects(Object.class, annotation);\n\n        // then\n        assertThatItemMap(objects).containsRepositoryKey(\"TEST_CODE\").hasSize(1);\n    }", "signature": "void shouldCreateSingleObjectWithGivenValueAsKey()", "full_signature": "@Test public void shouldCreateSingleObjectWithGivenValueAsKey()", "class_method_signature": "AnnotatedObjectFactoryTest.shouldCreateSingleObjectWithGivenValueAsKey()", "testcase": true, "constructor": false, "invocations": ["build", "withValue", "annotation", "createObjects", "hasSize", "containsRepositoryKey", "assertThatItemMap"]}, "focal_class": {"identifier": "AnnotatedObjectFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_ORDER_VALUE = 100;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_ORDER_VALUE = 100", "var_name": "DEFAULT_ORDER_VALUE"}, {"original_string": "private static final String INSTANCES_METHOD_NAME = \"instances\";", "modifier": "private static final", "type": "String", "declarator": "INSTANCES_METHOD_NAME = \"instances\"", "var_name": "INSTANCES_METHOD_NAME"}, {"original_string": "private static final String VALUES_METHOD_NAME = \"values\";", "modifier": "private static final", "type": "String", "declarator": "VALUES_METHOD_NAME = \"values\"", "var_name": "VALUES_METHOD_NAME"}, {"original_string": "private static final String ORDER_METHOD_NAME = \"order\";", "modifier": "private static final", "type": "String", "declarator": "ORDER_METHOD_NAME = \"order\"", "var_name": "ORDER_METHOD_NAME"}], "methods": [{"identifier": "createObjects", "parameters": "(Class<T> objectClass, Annotation annotation)", "modifiers": "public", "return": "Map<RepositoryObjectKey, T>", "signature": "Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation)", "full_signature": "public Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.createObjects(Class<T> objectClass, Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "createObjectsFromInstanceDescriptors", "parameters": "(Class<T> objectClass, ObjectInstance[] instanceDescriptors)", "modifiers": "private", "return": "Map<String, T>", "signature": "Map<String, T> createObjectsFromInstanceDescriptors(Class<T> objectClass, ObjectInstance[] instanceDescriptors)", "full_signature": "private Map<String, T> createObjectsFromInstanceDescriptors(Class<T> objectClass, ObjectInstance[] instanceDescriptors)", "class_method_signature": "AnnotatedObjectFactory.createObjectsFromInstanceDescriptors(Class<T> objectClass, ObjectInstance[] instanceDescriptors)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(Class<T> objectClass, Annotation annotation)", "modifiers": "private", "return": "Map<String, T>", "signature": "Map<String, T> createObject(Class<T> objectClass, Annotation annotation)", "full_signature": "private Map<String, T> createObject(Class<T> objectClass, Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.createObject(Class<T> objectClass, Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "instantiateUsingDefaultConstructor", "parameters": "(Class<T> objectClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T instantiateUsingDefaultConstructor(Class<T> objectClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private T instantiateUsingDefaultConstructor(Class<T> objectClass)", "class_method_signature": "AnnotatedObjectFactory.instantiateUsingDefaultConstructor(Class<T> objectClass)", "testcase": false, "constructor": false}, {"identifier": "instantiateUsingObjectDescriptor", "parameters": "(Class<T> objectClass, ObjectInstance objectDescriptor)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T instantiateUsingObjectDescriptor(Class<T> objectClass, ObjectInstance objectDescriptor)", "full_signature": "@SuppressWarnings(\"unchecked\") private T instantiateUsingObjectDescriptor(Class<T> objectClass, ObjectInstance objectDescriptor)", "class_method_signature": "AnnotatedObjectFactory.instantiateUsingObjectDescriptor(Class<T> objectClass, ObjectInstance objectDescriptor)", "testcase": false, "constructor": false}, {"identifier": "extractValue", "parameters": "(Annotation annotation)", "modifiers": "private", "return": "String", "signature": "String extractValue(Annotation annotation)", "full_signature": "private String extractValue(Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.extractValue(Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "extractOrder", "parameters": "(Annotation annotation)", "modifiers": "private", "return": "int", "signature": "int extractOrder(Annotation annotation)", "full_signature": "private int extractOrder(Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.extractOrder(Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "extractIdentifiers", "parameters": "(Annotation annotation)", "modifiers": "private", "return": "String[]", "signature": "String[] extractIdentifiers(Annotation annotation)", "full_signature": "private String[] extractIdentifiers(Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.extractIdentifiers(Annotation annotation)", "testcase": false, "constructor": false}, {"identifier": "extractInstanceDescriptors", "parameters": "(Annotation annotation)", "modifiers": "private", "return": "ObjectInstance[]", "signature": "ObjectInstance[] extractInstanceDescriptors(Annotation annotation)", "full_signature": "private ObjectInstance[] extractInstanceDescriptors(Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.extractInstanceDescriptors(Annotation annotation)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/annotated/scanner/AnnotatedObjectFactory.java"}, "focal_method": {"identifier": "createObjects", "parameters": "(Class<T> objectClass, Annotation annotation)", "modifiers": "public", "return": "Map<RepositoryObjectKey, T>", "body": "public <T> Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation) {\n        Map<String, T> rawObjectInstances;\n\n        ObjectInstance[] instanceDescriptors = extractInstanceDescriptors(annotation);\n        if (instanceDescriptors.length > 0) {\n            rawObjectInstances = createObjectsFromInstanceDescriptors(objectClass, instanceDescriptors);\n        } else {\n            rawObjectInstances = createObject(objectClass, annotation);\n        }\n\n\n        int objectOrder = extractOrder(annotation);\n        Map<RepositoryObjectKey, T> createdObjects = new HashMap<RepositoryObjectKey, T>();\n        for (Entry<String, T> objectEntry : rawObjectInstances.entrySet()) {\n            createdObjects.put(new RepositoryObjectKey(objectEntry.getKey(), objectOrder), objectEntry.getValue());\n        }\n\n        return createdObjects;\n    }", "signature": "Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation)", "full_signature": "public Map<RepositoryObjectKey, T> createObjects(Class<T> objectClass, Annotation annotation)", "class_method_signature": "AnnotatedObjectFactory.createObjects(Class<T> objectClass, Annotation annotation)", "testcase": false, "constructor": false, "invocations": ["extractInstanceDescriptors", "createObjectsFromInstanceDescriptors", "createObject", "extractOrder", "entrySet", "put", "getKey", "getValue"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}