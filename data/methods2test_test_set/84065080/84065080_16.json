{"test_class": {"identifier": "DefaultPluginManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PluginContext mockContext = mock(PluginContext.class);", "modifier": "private final", "type": "PluginContext", "declarator": "mockContext = mock(PluginContext.class)", "var_name": "mockContext"}, {"original_string": "private final AnnotationProcessor mockProcessor = mock(AnnotationProcessor.class);", "modifier": "private final", "type": "AnnotationProcessor", "declarator": "mockProcessor = mock(AnnotationProcessor.class)", "var_name": "mockProcessor"}, {"original_string": "private final PluginSource mockSource = mock(PluginSource.class);", "modifier": "private final", "type": "PluginSource", "declarator": "mockSource = mock(PluginSource.class)", "var_name": "mockSource"}, {"original_string": "private final DependencyResolver mockResolver = mock(DependencyResolver.class);", "modifier": "private final", "type": "DependencyResolver", "declarator": "mockResolver = mock(DependencyResolver.class)", "var_name": "mockResolver"}, {"original_string": "private DefaultPluginManager manager;", "modifier": "private", "type": "DefaultPluginManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private final TestPlugin plugin = new TestPlugin();", "modifier": "private final", "type": "TestPlugin", "declarator": "plugin = new TestPlugin()", "var_name": "plugin"}], "file": "plugface-core/src/test/java/org/plugface/core/impl/DefaultPluginManagerTest.java"}, "test_case": {"identifier": "shouldNotLoadForeignClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotLoadForeignClasses() throws Exception {\n        final List<Object> plugins = (List<Object>) manager.loadPlugins(new PluginSource() {\n            @Override\n            public Collection<Class<?>> load() throws IOException, ClassNotFoundException {\n                return newArrayList(TestPlugin.class, String.class);\n            }\n        });\n\n        assertEquals(1, plugins.size());\n        assertTrue(plugins.get(0) instanceof TestPlugin);\n    }", "signature": "void shouldNotLoadForeignClasses()", "full_signature": "@Test public void shouldNotLoadForeignClasses()", "class_method_signature": "DefaultPluginManagerTest.shouldNotLoadForeignClasses()", "testcase": true, "constructor": false, "invocations": ["loadPlugins", "newArrayList", "assertEquals", "size", "assertTrue", "get"]}, "focal_class": {"identifier": "DefaultPluginManager", "superclass": "", "interfaces": "implements PluginManager", "fields": [{"original_string": "protected final PluginContext context;", "modifier": "protected final", "type": "PluginContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected final AnnotationProcessor annotationProcessor;", "modifier": "protected final", "type": "AnnotationProcessor", "declarator": "annotationProcessor", "var_name": "annotationProcessor"}, {"original_string": "protected final DependencyResolver dependencyResolver;", "modifier": "protected final", "type": "DependencyResolver", "declarator": "dependencyResolver", "var_name": "dependencyResolver"}], "methods": [{"identifier": "DefaultPluginManager", "parameters": "(PluginContext context, AnnotationProcessor annotationProcessor, DependencyResolver dependencyResolver)", "modifiers": "public", "return": "", "signature": " DefaultPluginManager(PluginContext context, AnnotationProcessor annotationProcessor, DependencyResolver dependencyResolver)", "full_signature": "public  DefaultPluginManager(PluginContext context, AnnotationProcessor annotationProcessor, DependencyResolver dependencyResolver)", "class_method_signature": "DefaultPluginManager.DefaultPluginManager(PluginContext context, AnnotationProcessor annotationProcessor, DependencyResolver dependencyResolver)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(T plugin)", "modifiers": "@Override public", "return": "void", "signature": "void register(T plugin)", "full_signature": "@Override public void register(T plugin)", "class_method_signature": "DefaultPluginManager.register(T plugin)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(String name, T plugin)", "modifiers": "@Override public", "return": "void", "signature": "void register(String name, T plugin)", "full_signature": "@Override public void register(String name, T plugin)", "class_method_signature": "DefaultPluginManager.register(String name, T plugin)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(String name)", "modifiers": "@Override public", "return": "T", "signature": "T getPlugin(String name)", "full_signature": "@Override public T getPlugin(String name)", "class_method_signature": "DefaultPluginManager.getPlugin(String name)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(Class<T> pluginClass)", "modifiers": "@Override public", "return": "T", "signature": "T getPlugin(Class<T> pluginClass)", "full_signature": "@Override public T getPlugin(Class<T> pluginClass)", "class_method_signature": "DefaultPluginManager.getPlugin(Class<T> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "getAllPlugins", "parameters": "()", "modifiers": "@Override public", "return": "Collection<PluginRef>", "signature": "Collection<PluginRef> getAllPlugins()", "full_signature": "@Override public Collection<PluginRef> getAllPlugins()", "class_method_signature": "DefaultPluginManager.getAllPlugins()", "testcase": false, "constructor": false}, {"identifier": "removePlugin", "parameters": "(String name)", "modifiers": "@Override public", "return": "T", "signature": "T removePlugin(String name)", "full_signature": "@Override public T removePlugin(String name)", "class_method_signature": "DefaultPluginManager.removePlugin(String name)", "testcase": false, "constructor": false}, {"identifier": "removePlugin", "parameters": "(T plugin)", "modifiers": "@Override public", "return": "T", "signature": "T removePlugin(T plugin)", "full_signature": "@Override public T removePlugin(T plugin)", "class_method_signature": "DefaultPluginManager.removePlugin(T plugin)", "testcase": false, "constructor": false}, {"identifier": "loadPlugins", "parameters": "(PluginSource source)", "modifiers": "@Override public", "return": "Collection<Object>", "signature": "Collection<Object> loadPlugins(PluginSource source)", "full_signature": "@Override public Collection<Object> loadPlugins(PluginSource source)", "class_method_signature": "DefaultPluginManager.loadPlugins(PluginSource source)", "testcase": false, "constructor": false}, {"identifier": "createPlugins", "parameters": "(Collection<Node<?>> nodes, Collection<Object> loaded)", "modifiers": "private", "return": "void", "signature": "void createPlugins(Collection<Node<?>> nodes, Collection<Object> loaded)", "full_signature": "private void createPlugins(Collection<Node<?>> nodes, Collection<Object> loaded)", "class_method_signature": "DefaultPluginManager.createPlugins(Collection<Node<?>> nodes, Collection<Object> loaded)", "testcase": false, "constructor": false}, {"identifier": "createPlugin", "parameters": "(Node<?> node, Collection<Object> loaded)", "modifiers": "private", "return": "void", "signature": "void createPlugin(Node<?> node, Collection<Object> loaded)", "full_signature": "private void createPlugin(Node<?> node, Collection<Object> loaded)", "class_method_signature": "DefaultPluginManager.createPlugin(Node<?> node, Collection<Object> loaded)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<?> refClass)", "modifiers": "protected", "return": "Object", "signature": "Object create(Class<?> refClass)", "full_signature": "protected Object create(Class<?> refClass)", "class_method_signature": "DefaultPluginManager.create(Class<?> refClass)", "testcase": false, "constructor": false}], "file": "plugface-core/src/main/java/org/plugface/core/impl/DefaultPluginManager.java"}, "focal_method": {"identifier": "loadPlugins", "parameters": "(PluginSource source)", "modifiers": "@Override public", "return": "Collection<Object>", "body": "@Override\n    public Collection<Object> loadPlugins(PluginSource source) throws Exception {\n        final Collection<Class<?>> pluginClasses = Objects.requireNonNull(source, \"Plugin Source cannot be null\").load();\n        final Collection<Object> loaded = new ArrayList<>();\n\n        if (pluginClasses.isEmpty()) {\n            return loaded;\n        }\n\n        final Iterator<Class<?>> itr = pluginClasses.iterator();\n        while (itr.hasNext()) {\n            Class<?> pluginClass = itr.next();\n            if (pluginClass.getAnnotation(Plugin.class) == null) {\n                itr.remove();\n                continue;\n            }\n            if (context.hasPlugin(pluginClass)) {\n                itr.remove();\n            }\n        }\n\n        Collection<Node<?>> nodes = dependencyResolver.resolve(pluginClasses);\n        createPlugins(nodes, loaded);\n        return loaded;\n    }", "signature": "Collection<Object> loadPlugins(PluginSource source)", "full_signature": "@Override public Collection<Object> loadPlugins(PluginSource source)", "class_method_signature": "DefaultPluginManager.loadPlugins(PluginSource source)", "testcase": false, "constructor": false, "invocations": ["load", "requireNonNull", "isEmpty", "iterator", "hasNext", "next", "getAnnotation", "remove", "hasPlugin", "remove", "resolve", "createPlugins"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}