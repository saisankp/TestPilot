{"test_class": {"identifier": "ZebraShardingDefaultCfgFillerTest", "superclass": "", "interfaces": "", "fields": [], "file": "zebra/zebra-database/src/test/java/com/guosen/zebra/database/sharding/conf/ZebraShardingDefaultCfgFillerTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test1() {\n\n        // \u9ed8\u8ba4\u914d\u7f6e\n        YamlInlineShardingStrategyConfiguration defaultInline = new YamlInlineShardingStrategyConfiguration();\n        defaultInline.setShardingColumn(\"default_column\");\n        YamlShardingStrategyConfiguration defaultTableStrategy = new YamlShardingStrategyConfiguration();\n        defaultTableStrategy.setInline(defaultInline);\n\n        // table1\u914d\u7f6e\n        YamlInlineShardingStrategyConfiguration inlineOfTable1 = new YamlInlineShardingStrategyConfiguration();\n        inlineOfTable1.setAlgorithmExpression(\"t_table1->${default_column}\");\n\n        YamlShardingStrategyConfiguration tableStrategyOfTable1 = new YamlShardingStrategyConfiguration();\n        tableStrategyOfTable1.setInline(inlineOfTable1);\n\n        YamlTableRuleConfiguration table1 = new YamlTableRuleConfiguration();\n        table1.setTableStrategy(tableStrategyOfTable1);\n\n        // \u8bbe\u7f6etables\n        Map<String, YamlTableRuleConfiguration> tables = new HashMap<>();\n        tables.put(\"shardingDs01\", table1);\n\n        ZebraShardingRuleConfiguration sharding = new ZebraShardingRuleConfiguration();\n        sharding.setDefaultTableStrategy(defaultTableStrategy);\n        sharding.setTables(tables);\n        ZebraShardingDataSourceCfg zebraShardingDataSourceCfg = new ZebraShardingDataSourceCfg();\n        zebraShardingDataSourceCfg.setSharding(sharding);\n\n        ZebraShardingDefaultCfgFiller.checkThenFill(zebraShardingDataSourceCfg);\n\n        // \u68c0\u67e5\n        String defaultTableExpression = zebraShardingDataSourceCfg\n                .getSharding()\n                .getDefaultTableStrategy()\n                .getInline()\n                .getAlgorithmExpression();\n\n        // \u9ed8\u8ba4\u8868 expression \u81ea\u52a8\u8865\u5145\n        assertThat(defaultTableExpression, is(\"THIS_IS_TABLE_PLACE_HOLDER\"));\n\n        Collection<YamlTableRuleConfiguration> newTables = zebraShardingDataSourceCfg\n                .getSharding()\n                .getTables()\n                .values();\n        YamlTableRuleConfiguration newTable1 = newTables.iterator().next();\n        YamlInlineShardingStrategyConfiguration newInlineOfTable1 = newTable1.getTableStrategy().getInline();\n\n        // \u5206\u8868\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u503c\n        assertThat(newInlineOfTable1.getShardingColumn(), is(\"default_column\"));\n\n        // \u5206\u8868\u8868\u8fbe\u5f0f\u8fd8\u662f\u539f\u6765\u7684\n        assertThat(newInlineOfTable1.getAlgorithmExpression(), is(\"t_table1->${default_column}\"));\n    }", "signature": "void test1()", "full_signature": "@Test public void test1()", "class_method_signature": "ZebraShardingDefaultCfgFillerTest.test1()", "testcase": true, "constructor": false, "invocations": ["setShardingColumn", "setInline", "setAlgorithmExpression", "setInline", "setTableStrategy", "put", "setDefaultTableStrategy", "setTables", "setSharding", "checkThenFill", "getAlgorithmExpression", "getInline", "getDefaultTableStrategy", "getSharding", "assertThat", "is", "values", "getTables", "getSharding", "next", "iterator", "getInline", "getTableStrategy", "assertThat", "getShardingColumn", "is", "assertThat", "getAlgorithmExpression", "is"]}, "focal_class": {"identifier": "ZebraShardingDefaultCfgFiller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PLACE_HOLDER_TABLE = \"THIS_IS_TABLE_PLACE_HOLDER\";", "modifier": "private static final", "type": "String", "declarator": "PLACE_HOLDER_TABLE = \"THIS_IS_TABLE_PLACE_HOLDER\"", "var_name": "PLACE_HOLDER_TABLE"}], "methods": [{"identifier": "checkThenFill", "parameters": "(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "modifiers": "public static", "return": "void", "signature": "void checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "full_signature": "public static void checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "class_method_signature": "ZebraShardingDefaultCfgFiller.checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "testcase": false, "constructor": false}, {"identifier": "fillDefaultInline", "parameters": "(YamlInlineShardingStrategyConfiguration defaultTableInline)", "modifiers": "private static", "return": "void", "signature": "void fillDefaultInline(YamlInlineShardingStrategyConfiguration defaultTableInline)", "full_signature": "private static void fillDefaultInline(YamlInlineShardingStrategyConfiguration defaultTableInline)", "class_method_signature": "ZebraShardingDefaultCfgFiller.fillDefaultInline(YamlInlineShardingStrategyConfiguration defaultTableInline)", "testcase": false, "constructor": false}, {"identifier": "fillInlineIfNotCfg", "parameters": "(YamlTableRuleConfiguration tableConfiguration, YamlInlineShardingStrategyConfiguration defaultTableInline)", "modifiers": "private static", "return": "void", "signature": "void fillInlineIfNotCfg(YamlTableRuleConfiguration tableConfiguration, YamlInlineShardingStrategyConfiguration defaultTableInline)", "full_signature": "private static void fillInlineIfNotCfg(YamlTableRuleConfiguration tableConfiguration, YamlInlineShardingStrategyConfiguration defaultTableInline)", "class_method_signature": "ZebraShardingDefaultCfgFiller.fillInlineIfNotCfg(YamlTableRuleConfiguration tableConfiguration, YamlInlineShardingStrategyConfiguration defaultTableInline)", "testcase": false, "constructor": false}], "file": "zebra/zebra-database/src/main/java/com/guosen/zebra/database/sharding/conf/ZebraShardingDefaultCfgFiller.java"}, "focal_method": {"identifier": "checkThenFill", "parameters": "(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "modifiers": "public static", "return": "void", "body": "public static void checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg) {\n        ZebraShardingRuleConfiguration zebraShardingRuleConfiguration = zebraShardingDataSourceCfg.getSharding();\n        YamlShardingStrategyConfiguration defaultTableStrategy = zebraShardingRuleConfiguration.getDefaultTableStrategy();\n        if (defaultTableStrategy == null) {\n            // \u6ca1\u6709\u914d\u7f6e\u5219\u76f4\u63a5\u8fd4\u56de\n            return;\n        }\n\n        YamlInlineShardingStrategyConfiguration defaultTableInline = defaultTableStrategy.getInline();\n        fillDefaultInline(defaultTableInline);\n\n        Map<String, YamlTableRuleConfiguration> tables = zebraShardingDataSourceCfg.getSharding().getTables();\n        for (Map.Entry<String, YamlTableRuleConfiguration> tableEntry : tables.entrySet()) {\n            YamlTableRuleConfiguration tableConfiguration = tableEntry.getValue();\n\n            // \u5148\u652f\u6301table.inline\u9ed8\u8ba4\u914d\u7f6e\u8865\u5168\n            fillInlineIfNotCfg(tableConfiguration, defaultTableInline);\n        }\n    }", "signature": "void checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "full_signature": "public static void checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "class_method_signature": "ZebraShardingDefaultCfgFiller.checkThenFill(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "testcase": false, "constructor": false, "invocations": ["getSharding", "getDefaultTableStrategy", "getInline", "fillDefaultInline", "getTables", "getSharding", "entrySet", "getValue", "fillInlineIfNotCfg"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}