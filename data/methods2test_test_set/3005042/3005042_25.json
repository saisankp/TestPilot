{"test_class": {"identifier": "PcapsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PcapsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PcapsTest.class)", "var_name": "logger"}], "file": "pcap4j-core/src/test/java/org/pcap4j/core/PcapsTest.java"}, "test_case": {"identifier": "testStrError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStrError() throws Exception {\n    String err = Pcaps.strError(1);\n    logger.info(\"err: \" + err);\n    assertNotNull(err);\n    assertFalse(err.length() == 0);\n  }", "signature": "void testStrError()", "full_signature": "@Test public void testStrError()", "class_method_signature": "PcapsTest.testStrError()", "testcase": true, "constructor": false, "invocations": ["strError", "info", "assertNotNull", "assertFalse", "length"]}, "focal_class": {"identifier": "Pcaps", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Pcaps.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Pcaps.class)", "var_name": "logger"}, {"original_string": "private static final Object lock = new Object();", "modifier": "private static final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "Pcaps", "parameters": "()", "modifiers": "private", "return": "", "signature": " Pcaps()", "full_signature": "private  Pcaps()", "class_method_signature": "Pcaps.Pcaps()", "testcase": false, "constructor": true}, {"identifier": "findAllDevs", "parameters": "()", "modifiers": "public static", "return": "List<PcapNetworkInterface>", "signature": "List<PcapNetworkInterface> findAllDevs()", "full_signature": "public static List<PcapNetworkInterface> findAllDevs()", "class_method_signature": "Pcaps.findAllDevs()", "testcase": false, "constructor": false}, {"identifier": "getDevByAddress", "parameters": "(InetAddress addr)", "modifiers": "public static", "return": "PcapNetworkInterface", "signature": "PcapNetworkInterface getDevByAddress(InetAddress addr)", "full_signature": "public static PcapNetworkInterface getDevByAddress(InetAddress addr)", "class_method_signature": "Pcaps.getDevByAddress(InetAddress addr)", "testcase": false, "constructor": false}, {"identifier": "getDevByName", "parameters": "(String name)", "modifiers": "public static", "return": "PcapNetworkInterface", "signature": "PcapNetworkInterface getDevByName(String name)", "full_signature": "public static PcapNetworkInterface getDevByName(String name)", "class_method_signature": "Pcaps.getDevByName(String name)", "testcase": false, "constructor": false}, {"identifier": "lookupDev", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String lookupDev()", "full_signature": "public static String lookupDev()", "class_method_signature": "Pcaps.lookupDev()", "testcase": false, "constructor": false}, {"identifier": "lookupNet", "parameters": "(String devName)", "modifiers": "public static", "return": "Inet4NetworkAddress", "signature": "Inet4NetworkAddress lookupNet(String devName)", "full_signature": "public static Inet4NetworkAddress lookupNet(String devName)", "class_method_signature": "Pcaps.lookupNet(String devName)", "testcase": false, "constructor": false}, {"identifier": "openOffline", "parameters": "(String filePath)", "modifiers": "public static", "return": "PcapHandle", "signature": "PcapHandle openOffline(String filePath)", "full_signature": "public static PcapHandle openOffline(String filePath)", "class_method_signature": "Pcaps.openOffline(String filePath)", "testcase": false, "constructor": false}, {"identifier": "openOffline", "parameters": "(String filePath, TimestampPrecision precision)", "modifiers": "public static", "return": "PcapHandle", "signature": "PcapHandle openOffline(String filePath, TimestampPrecision precision)", "full_signature": "public static PcapHandle openOffline(String filePath, TimestampPrecision precision)", "class_method_signature": "Pcaps.openOffline(String filePath, TimestampPrecision precision)", "testcase": false, "constructor": false}, {"identifier": "openDead", "parameters": "(DataLinkType dlt, int snaplen)", "modifiers": "public static", "return": "PcapHandle", "signature": "PcapHandle openDead(DataLinkType dlt, int snaplen)", "full_signature": "public static PcapHandle openDead(DataLinkType dlt, int snaplen)", "class_method_signature": "Pcaps.openDead(DataLinkType dlt, int snaplen)", "testcase": false, "constructor": false}, {"identifier": "openDead", "parameters": "(DataLinkType dlt, int snaplen, TimestampPrecision precision)", "modifiers": "public static", "return": "PcapHandle", "signature": "PcapHandle openDead(DataLinkType dlt, int snaplen, TimestampPrecision precision)", "full_signature": "public static PcapHandle openDead(DataLinkType dlt, int snaplen, TimestampPrecision precision)", "class_method_signature": "Pcaps.openDead(DataLinkType dlt, int snaplen, TimestampPrecision precision)", "testcase": false, "constructor": false}, {"identifier": "compileFilter", "parameters": "(\n      int snaplen,\n      DataLinkType dlt,\n      String bpfExpression,\n      BpfCompileMode mode,\n      Inet4Address netmask)", "modifiers": "public static", "return": "BpfProgram", "signature": "BpfProgram compileFilter(\n      int snaplen,\n      DataLinkType dlt,\n      String bpfExpression,\n      BpfCompileMode mode,\n      Inet4Address netmask)", "full_signature": "public static BpfProgram compileFilter(\n      int snaplen,\n      DataLinkType dlt,\n      String bpfExpression,\n      BpfCompileMode mode,\n      Inet4Address netmask)", "class_method_signature": "Pcaps.compileFilter(\n      int snaplen,\n      DataLinkType dlt,\n      String bpfExpression,\n      BpfCompileMode mode,\n      Inet4Address netmask)", "testcase": false, "constructor": false}, {"identifier": "dataLinkNameToVal", "parameters": "(String name)", "modifiers": "public static", "return": "DataLinkType", "signature": "DataLinkType dataLinkNameToVal(String name)", "full_signature": "public static DataLinkType dataLinkNameToVal(String name)", "class_method_signature": "Pcaps.dataLinkNameToVal(String name)", "testcase": false, "constructor": false}, {"identifier": "dataLinkTypeToName", "parameters": "(DataLinkType dlt)", "modifiers": "public static", "return": "String", "signature": "String dataLinkTypeToName(DataLinkType dlt)", "full_signature": "public static String dataLinkTypeToName(DataLinkType dlt)", "class_method_signature": "Pcaps.dataLinkTypeToName(DataLinkType dlt)", "testcase": false, "constructor": false}, {"identifier": "dataLinkValToName", "parameters": "(int dataLinkVal)", "modifiers": "public static", "return": "String", "signature": "String dataLinkValToName(int dataLinkVal)", "full_signature": "public static String dataLinkValToName(int dataLinkVal)", "class_method_signature": "Pcaps.dataLinkValToName(int dataLinkVal)", "testcase": false, "constructor": false}, {"identifier": "dataLinkTypeToDescription", "parameters": "(DataLinkType dlt)", "modifiers": "public static", "return": "String", "signature": "String dataLinkTypeToDescription(DataLinkType dlt)", "full_signature": "public static String dataLinkTypeToDescription(DataLinkType dlt)", "class_method_signature": "Pcaps.dataLinkTypeToDescription(DataLinkType dlt)", "testcase": false, "constructor": false}, {"identifier": "dataLinkValToDescription", "parameters": "(int dataLinkVal)", "modifiers": "public static", "return": "String", "signature": "String dataLinkValToDescription(int dataLinkVal)", "full_signature": "public static String dataLinkValToDescription(int dataLinkVal)", "class_method_signature": "Pcaps.dataLinkValToDescription(int dataLinkVal)", "testcase": false, "constructor": false}, {"identifier": "strError", "parameters": "(int error)", "modifiers": "public static", "return": "String", "signature": "String strError(int error)", "full_signature": "public static String strError(int error)", "class_method_signature": "Pcaps.strError(int error)", "testcase": false, "constructor": false}, {"identifier": "libVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String libVersion()", "full_signature": "public static String libVersion()", "class_method_signature": "Pcaps.libVersion()", "testcase": false, "constructor": false}, {"identifier": "toBpfString", "parameters": "(InetAddress inetAddr)", "modifiers": "public static", "return": "String", "signature": "String toBpfString(InetAddress inetAddr)", "full_signature": "public static String toBpfString(InetAddress inetAddr)", "class_method_signature": "Pcaps.toBpfString(InetAddress inetAddr)", "testcase": false, "constructor": false}, {"identifier": "toBpfString", "parameters": "(MacAddress macAddr)", "modifiers": "public static", "return": "String", "signature": "String toBpfString(MacAddress macAddr)", "full_signature": "public static String toBpfString(MacAddress macAddr)", "class_method_signature": "Pcaps.toBpfString(MacAddress macAddr)", "testcase": false, "constructor": false}], "file": "pcap4j-core/src/main/java/org/pcap4j/core/Pcaps.java"}, "focal_method": {"identifier": "strError", "parameters": "(int error)", "modifiers": "public static", "return": "String", "body": "public static String strError(int error) {\n    return NativeMappings.pcap_strerror(error).getString(0);\n  }", "signature": "String strError(int error)", "full_signature": "public static String strError(int error)", "class_method_signature": "Pcaps.strError(int error)", "testcase": false, "constructor": false, "invocations": ["getString", "pcap_strerror"]}, "repository": {"repo_id": 3005042, "url": "https://github.com/kaitoy/pcap4j", "language": "Java", "is_fork": false, "fork_count": 247, "stargazer_count": 779, "size": 15246, "license": "licensed"}}