{"test_class": {"identifier": "AlertServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final AlertService service = new AlertService();", "modifier": "@InjectMocks\n    private final", "type": "AlertService", "declarator": "service = new AlertService()", "var_name": "service"}, {"original_string": "@Mock\n    private SeyrenRepository seyrenRepository;", "modifier": "@Mock\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "file": "services/src/test/java/com/vsct/supervision/notification/service/AlertServiceTest.java"}, "test_case": {"identifier": "getStatNoTypeChangeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getStatNoTypeChangeTest() throws Exception {\n\n        final Alert.Alerts alerts = new Alerts();\n        final List<Alert> listAlerts = new ArrayList<>();\n\n        Alert alert = TestUtils.getDefaultAlert();\n        alert.setTimestamp(Instant.now().minus(30, ChronoUnit.DAYS));\n        listAlerts.add(alert);\n\n        alert = TestUtils.getDefaultAlert();\n        alert.setFromType(alert.getToType());\n        listAlerts.add(alert);\n\n        alert = TestUtils.getDefaultAlertNoChanged();\n        alert.setTimestamp(Instant.now().minus(30, ChronoUnit.DAYS));\n        listAlerts.add(alert);\n\n        alert = TestUtils.getDefaultAlertNoChanged();\n        alert.setFromType(alert.getToType());\n        listAlerts.add(alert);\n\n        alerts.setValues(listAlerts);\n\n        when(seyrenRepository.getAlerts(0, 50)).thenReturn(alerts);\n        final List<Stat> statsM = service.getStatNoTypeChange(\"2m\");\n        final List<Stat> statsD = service.getStatNoTypeChange(\"2d\");\n        final List<Stat> statsH = service.getStatNoTypeChange(\"2h\");\n        assertNotNull(statsM);\n        assertNotNull(statsD);\n        assertNotNull(statsH);\n        assertEquals(statsM.size(), 0);\n        assertEquals(statsD.size(), 0);\n        assertEquals(statsH.size(), 0);\n    }", "signature": "void getStatNoTypeChangeTest()", "full_signature": "@Test public void getStatNoTypeChangeTest()", "class_method_signature": "AlertServiceTest.getStatNoTypeChangeTest()", "testcase": true, "constructor": false, "invocations": ["getDefaultAlert", "setTimestamp", "minus", "now", "add", "getDefaultAlert", "setFromType", "getToType", "add", "getDefaultAlertNoChanged", "setTimestamp", "minus", "now", "add", "getDefaultAlertNoChanged", "setFromType", "getToType", "add", "setValues", "thenReturn", "when", "getAlerts", "getStatNoTypeChange", "getStatNoTypeChange", "getStatNoTypeChange", "assertNotNull", "assertNotNull", "assertNotNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "AlertService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_NB_ITEMS_ALERTS = 20;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_NB_ITEMS_ALERTS = 20", "var_name": "DEFAULT_NB_ITEMS_ALERTS"}, {"original_string": "private static final int NB_ITEMS_GET_FOR_ALERTS = 50;", "modifier": "private static final", "type": "int", "declarator": "NB_ITEMS_GET_FOR_ALERTS = 50", "var_name": "NB_ITEMS_GET_FOR_ALERTS"}, {"original_string": "@Autowired\n    private SeyrenRepository seyrenRepository;", "modifier": "@Autowired\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}], "methods": [{"identifier": "getAlerts", "parameters": "()", "modifiers": "public", "return": "Alert.Alerts", "signature": "Alert.Alerts getAlerts()", "full_signature": "public Alert.Alerts getAlerts()", "class_method_signature": "AlertService.getAlerts()", "testcase": false, "constructor": false}, {"identifier": "getAlerts", "parameters": "(final int nbItem)", "modifiers": "public", "return": "Alert.Alerts", "signature": "Alert.Alerts getAlerts(final int nbItem)", "full_signature": "public Alert.Alerts getAlerts(final int nbItem)", "class_method_signature": "AlertService.getAlerts(final int nbItem)", "testcase": false, "constructor": false}, {"identifier": "getAlerts", "parameters": "(final int nbItem, final int start)", "modifiers": "public", "return": "Alert.Alerts", "signature": "Alert.Alerts getAlerts(final int nbItem, final int start)", "full_signature": "public Alert.Alerts getAlerts(final int nbItem, final int start)", "class_method_signature": "AlertService.getAlerts(final int nbItem, final int start)", "testcase": false, "constructor": false}, {"identifier": "getStatNoTypeChange", "parameters": "(final String from)", "modifiers": "public", "return": "List<Stat>", "signature": "List<Stat> getStatNoTypeChange(final String from)", "full_signature": "public List<Stat> getStatNoTypeChange(final String from)", "class_method_signature": "AlertService.getStatNoTypeChange(final String from)", "testcase": false, "constructor": false}, {"identifier": "getStatTypeChange", "parameters": "(final String from)", "modifiers": "public", "return": "List<Stat>", "signature": "List<Stat> getStatTypeChange(final String from)", "full_signature": "public List<Stat> getStatTypeChange(final String from)", "class_method_signature": "AlertService.getStatTypeChange(final String from)", "testcase": false, "constructor": false}, {"identifier": "getAlerts", "parameters": "(final String from)", "modifiers": "public", "return": "Collection<Alert>", "signature": "Collection<Alert> getAlerts(final String from)", "full_signature": "public Collection<Alert> getAlerts(final String from)", "class_method_signature": "AlertService.getAlerts(final String from)", "testcase": false, "constructor": false}, {"identifier": "getAlarmAlerts", "parameters": "(final String id)", "modifiers": "public", "return": "Alert.Alerts", "signature": "Alert.Alerts getAlarmAlerts(final String id)", "full_signature": "public Alert.Alerts getAlarmAlerts(final String id)", "class_method_signature": "AlertService.getAlarmAlerts(final String id)", "testcase": false, "constructor": false}, {"identifier": "olderThan", "parameters": "(final Collection<Alert> result, final Instant limit, final Alerts alerts)", "modifiers": "private", "return": "boolean", "signature": "boolean olderThan(final Collection<Alert> result, final Instant limit, final Alerts alerts)", "full_signature": "private boolean olderThan(final Collection<Alert> result, final Instant limit, final Alerts alerts)", "class_method_signature": "AlertService.olderThan(final Collection<Alert> result, final Instant limit, final Alerts alerts)", "testcase": false, "constructor": false}, {"identifier": "calcFromInstant", "parameters": "(final String from)", "modifiers": "private", "return": "Instant", "signature": "Instant calcFromInstant(final String from)", "full_signature": "private Instant calcFromInstant(final String from)", "class_method_signature": "AlertService.calcFromInstant(final String from)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/service/AlertService.java"}, "focal_method": {"identifier": "getStatNoTypeChange", "parameters": "(final String from)", "modifiers": "public", "return": "List<Stat>", "body": "public List<Stat> getStatNoTypeChange(final String from) {\n        final Collection<Alert> alerts = this.getAlerts(from);\n\n        final Stat.StatBuilder stat = new Stat.StatBuilder();\n\n        for (final Alert a : alerts) {\n            if (a.getFromType() == a.getToType()) {\n                stat.increment(a.getAlarmId(), a.getToType());\n            } else {\n                stat.removeAndIgnore(a.getAlarmId());\n            }\n        }\n\n        return stat.build();\n    }", "signature": "List<Stat> getStatNoTypeChange(final String from)", "full_signature": "public List<Stat> getStatNoTypeChange(final String from)", "class_method_signature": "AlertService.getStatNoTypeChange(final String from)", "testcase": false, "constructor": false, "invocations": ["getAlerts", "getFromType", "getToType", "increment", "getAlarmId", "getToType", "removeAndIgnore", "getAlarmId", "build"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}