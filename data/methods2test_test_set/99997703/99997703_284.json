{"test_class": {"identifier": "PointToPointValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PointToPointValidator validator;", "modifier": "private", "type": "PointToPointValidator", "declarator": "validator", "var_name": "validator"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/notification/PointToPointValidatorTest.java"}, "test_case": {"identifier": "whenMiddleTypeIsP2P_thenNoException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void whenMiddleTypeIsP2P_thenNoException() {\n        validator.validate(new DummySubscriberA(), ImmutableList.of(DummySupertypeNotificationA.class));\n        validator.validate(new DummySubscriberB(), ImmutableList.of(DummySubtypeNotificationC.class));\n    }", "signature": "void whenMiddleTypeIsP2P_thenNoException()", "full_signature": "@Test void whenMiddleTypeIsP2P_thenNoException()", "class_method_signature": "PointToPointValidatorTest.whenMiddleTypeIsP2P_thenNoException()", "testcase": true, "constructor": false, "invocations": ["validate", "of", "validate", "of"]}, "focal_class": {"identifier": "PointToPointValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Class<?>, Class<?>> subscriptions = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<?>, Class<?>>", "declarator": "subscriptions = new ConcurrentHashMap<>()", "var_name": "subscriptions"}], "methods": [{"identifier": "PointToPointValidator", "parameters": "()", "modifiers": "", "return": "", "signature": " PointToPointValidator()", "full_signature": "  PointToPointValidator()", "class_method_signature": "PointToPointValidator.PointToPointValidator()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Object subscriber, List<Class<?>> subscribedNotifications)", "modifiers": "", "return": "void", "signature": "void validate(Object subscriber, List<Class<?>> subscribedNotifications)", "full_signature": " void validate(Object subscriber, List<Class<?>> subscribedNotifications)", "class_method_signature": "PointToPointValidator.validate(Object subscriber, List<Class<?>> subscribedNotifications)", "testcase": false, "constructor": false}, {"identifier": "streamP2PSupertypes", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "Stream<Class<?>>", "signature": "Stream<Class<?>> streamP2PSupertypes(Class<?> clazz)", "full_signature": "private Stream<Class<?>> streamP2PSupertypes(Class<?> clazz)", "class_method_signature": "PointToPointValidator.streamP2PSupertypes(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "addIfClassImplementsP2P", "parameters": "(Class<?> clazz, List<Class<?>> classesToCheck)", "modifiers": "private", "return": "void", "signature": "void addIfClassImplementsP2P(Class<?> clazz, List<Class<?>> classesToCheck)", "full_signature": "private void addIfClassImplementsP2P(Class<?> clazz, List<Class<?>> classesToCheck)", "class_method_signature": "PointToPointValidator.addIfClassImplementsP2P(Class<?> clazz, List<Class<?>> classesToCheck)", "testcase": false, "constructor": false}, {"identifier": "classImplementsP2P", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "boolean", "signature": "boolean classImplementsP2P(Class<?> clazz)", "full_signature": "private boolean classImplementsP2P(Class<?> clazz)", "class_method_signature": "PointToPointValidator.classImplementsP2P(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getErrorMessage", "parameters": "(Class<?> subscriberClass, Class<?> notification, Class<?> otherSubscriberClass)", "modifiers": "private", "return": "String", "signature": "String getErrorMessage(Class<?> subscriberClass, Class<?> notification, Class<?> otherSubscriberClass)", "full_signature": "private String getErrorMessage(Class<?> subscriberClass, Class<?> notification, Class<?> otherSubscriberClass)", "class_method_signature": "PointToPointValidator.getErrorMessage(Class<?> subscriberClass, Class<?> notification, Class<?> otherSubscriberClass)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "PointToPointValidator.reset()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/notification/PointToPointValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(Object subscriber, List<Class<?>> subscribedNotifications)", "modifiers": "", "return": "void", "body": "void validate(Object subscriber, List<Class<?>> subscribedNotifications) {\n        Class<?> subscriberClass = subscriber.getClass();\n        subscribedNotifications.stream()\n                .filter(PointToPointNotification.class::isAssignableFrom)\n                .flatMap(this::streamP2PSupertypes)\n                .forEach(classImplementingP2P -> {\n                    Class<?> previousSubscriberClass = subscriptions.putIfAbsent(classImplementingP2P, subscriberClass);\n                    if (previousSubscriberClass != null) {\n                        throw new IllegalStateException(getErrorMessage(subscriberClass, classImplementingP2P, previousSubscriberClass));\n                    }\n                });\n    }", "signature": "void validate(Object subscriber, List<Class<?>> subscribedNotifications)", "full_signature": " void validate(Object subscriber, List<Class<?>> subscribedNotifications)", "class_method_signature": "PointToPointValidator.validate(Object subscriber, List<Class<?>> subscribedNotifications)", "testcase": false, "constructor": false, "invocations": ["getClass", "forEach", "flatMap", "filter", "stream", "putIfAbsent", "getErrorMessage"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}