{"test_class": {"identifier": "TestLists", "superclass": "", "interfaces": "", "fields": [], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/util/TestLists.java"}, "test_case": {"identifier": "testDistinct2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDistinct2() {\n    // Demonstrate input order preservation.\n    List<String> inputs = new ArrayList<String>();\n    inputs.add(\"b\");\n    inputs.add(\"a\");\n    inputs.add(\"a\");\n    inputs.add(\"a\");\n\n    List<String> outputs = new ArrayList<String>();\n    outputs.add(\"b\");\n    outputs.add(\"a\");\n\n    assertTrue(outputs.equals(Lists.distinct(inputs)));\n  }", "signature": "void testDistinct2()", "full_signature": "@Test public void testDistinct2()", "class_method_signature": "TestLists.testDistinct2()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "assertTrue", "equals", "distinct"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Lists", "parameters": "()", "modifiers": "private", "return": "", "signature": " Lists()", "full_signature": "private  Lists()", "class_method_signature": "Lists.Lists()", "testcase": false, "constructor": true}, {"identifier": "foldLeft", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "foldRight", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(List<X> inputs, Func<? super X, ? extends Y> mapper)", "modifiers": "public static", "return": "List<Y>", "signature": "List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "full_signature": "public static List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "class_method_signature": "Lists.map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(List<X> inputs, Class<X> klazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "X[]", "signature": "X[] toArray(List<X> inputs, Class<X> klazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static X[] toArray(List<X> inputs, Class<X> klazz)", "class_method_signature": "Lists.toArray(List<X> inputs, Class<X> klazz)", "testcase": false, "constructor": false}, {"identifier": "distinct", "parameters": "(List<X> inputs)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> distinct(List<X> inputs)", "full_signature": "public static List<X> distinct(List<X> inputs)", "class_method_signature": "Lists.distinct(List<X> inputs)", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/util/Lists.java"}, "focal_method": {"identifier": "distinct", "parameters": "(List<X> inputs)", "modifiers": "public static", "return": "List<X>", "body": "public static <X> List<X> distinct(List<X> inputs) {\n    if (null == inputs) {\n      return null;\n    }\n\n    return foldLeft(new ArrayList<X>(), inputs, new Aggregator<X, List<X>>() {\n      private Set<X> mSeen = new HashSet<X>();\n\n      @Override\n      public List<X> eval(X input, List<X> out) {\n        if (!mSeen.contains(input)) {\n          out.add(input);\n          mSeen.add(input);\n        }\n        return out;\n      }\n    });\n  }", "signature": "List<X> distinct(List<X> inputs)", "full_signature": "public static List<X> distinct(List<X> inputs)", "class_method_signature": "Lists.distinct(List<X> inputs)", "testcase": false, "constructor": false, "invocations": ["foldLeft", "contains", "add", "add"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}