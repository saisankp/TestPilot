{"test_class": {"identifier": "TestLoadBalancingSinkProcessor", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/sink/TestLoadBalancingSinkProcessor.java"}, "test_case": {"identifier": "testRoundRobinOneActiveSink", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRoundRobinOneActiveSink() throws Exception {\n    Channel ch = new MockChannel();\n    int n = 10;\n    int numEvents = n;\n    for (int i = 0; i < numEvents; i++) {\n      ch.put(new MockEvent(\"test\" + i));\n    }\n\n    MockSink s1 = new MockSink(1);\n    s1.setChannel(ch);\n\n    // s1 always fails\n    s1.setFail(true);\n\n    MockSink s2 = new MockSink(2);\n    s2.setChannel(ch);\n\n\n    MockSink s3 = new MockSink(3);\n    s3.setChannel(ch);\n\n    // s3 always fails\n    s3.setFail(true);\n\n    List<Sink> sinks = new ArrayList<Sink>();\n    sinks.add(s1);\n    sinks.add(s2);\n    sinks.add(s3);\n\n    LoadBalancingSinkProcessor lbsp = getProcessor(\"round_robin\", sinks, false);\n\n    Sink.Status s = Sink.Status.READY;\n    while (s != Sink.Status.BACKOFF) {\n      s = lbsp.process();\n    }\n\n    Assert.assertTrue(s1.getEvents().size() == 0);\n    Assert.assertTrue(s2.getEvents().size() == n);\n    Assert.assertTrue(s3.getEvents().size() == 0);\n  }", "signature": "void testRoundRobinOneActiveSink()", "full_signature": "@Test public void testRoundRobinOneActiveSink()", "class_method_signature": "TestLoadBalancingSinkProcessor.testRoundRobinOneActiveSink()", "testcase": true, "constructor": false, "invocations": ["put", "setChannel", "setFail", "setChannel", "setChannel", "setFail", "add", "add", "add", "getProcessor", "process", "assertTrue", "size", "getEvents", "assertTrue", "size", "getEvents", "assertTrue", "size", "getEvents"]}, "focal_class": {"identifier": "LoadBalancingSinkProcessor", "superclass": "extends AbstractSinkProcessor", "interfaces": "", "fields": [{"original_string": "public static final String CONFIG_SELECTOR = \"selector\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_SELECTOR = \"selector\"", "var_name": "CONFIG_SELECTOR"}, {"original_string": "public static final String CONFIG_SELECTOR_PREFIX = CONFIG_SELECTOR + \".\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_SELECTOR_PREFIX = CONFIG_SELECTOR + \".\"", "var_name": "CONFIG_SELECTOR_PREFIX"}, {"original_string": "public static final String CONFIG_BACKOFF = \"backoff\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_BACKOFF = \"backoff\"", "var_name": "CONFIG_BACKOFF"}, {"original_string": "public static final String SELECTOR_NAME_ROUND_ROBIN = \"ROUND_ROBIN\";", "modifier": "public static final", "type": "String", "declarator": "SELECTOR_NAME_ROUND_ROBIN = \"ROUND_ROBIN\"", "var_name": "SELECTOR_NAME_ROUND_ROBIN"}, {"original_string": "public static final String SELECTOR_NAME_RANDOM = \"RANDOM\";", "modifier": "public static final", "type": "String", "declarator": "SELECTOR_NAME_RANDOM = \"RANDOM\"", "var_name": "SELECTOR_NAME_RANDOM"}, {"original_string": "public static final String SELECTOR_NAME_ROUND_ROBIN_BACKOFF = \"ROUND_ROBIN_BACKOFF\";", "modifier": "public static final", "type": "String", "declarator": "SELECTOR_NAME_ROUND_ROBIN_BACKOFF = \"ROUND_ROBIN_BACKOFF\"", "var_name": "SELECTOR_NAME_ROUND_ROBIN_BACKOFF"}, {"original_string": "public static final String SELECTOR_NAME_RANDOM_BACKOFF = \"RANDOM_BACKOFF\";", "modifier": "public static final", "type": "String", "declarator": "SELECTOR_NAME_RANDOM_BACKOFF = \"RANDOM_BACKOFF\"", "var_name": "SELECTOR_NAME_RANDOM_BACKOFF"}, {"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(LoadBalancingSinkProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(LoadBalancingSinkProcessor.class)", "var_name": "LOGGER"}, {"original_string": "private SinkSelector selector;", "modifier": "private", "type": "SinkSelector", "declarator": "selector", "var_name": "selector"}], "methods": [{"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "LoadBalancingSinkProcessor.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "LoadBalancingSinkProcessor.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "LoadBalancingSinkProcessor.stop()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "Status", "signature": "Status process()", "full_signature": "@Override public Status process()", "class_method_signature": "LoadBalancingSinkProcessor.process()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/sink/LoadBalancingSinkProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "Status", "body": "@Override\n  public Status process() throws EventDeliveryException {\n    Status status = null;\n\n    Iterator<Sink> sinkIterator = selector.createSinkIterator();\n    while (sinkIterator.hasNext()) {\n      Sink sink = sinkIterator.next();\n      try {\n        status = sink.process();\n        break;\n      } catch (Exception ex) {\n        selector.informSinkFailed(sink);\n        LOGGER.warn(\"Sink failed to consume event. \"\n            + \"Attempting next sink if available.\", ex);\n      }\n    }\n\n    if (status == null) {\n      throw new EventDeliveryException(\"All configured sinks have failed\");\n    }\n\n    return status;\n  }", "signature": "Status process()", "full_signature": "@Override public Status process()", "class_method_signature": "LoadBalancingSinkProcessor.process()", "testcase": false, "constructor": false, "invocations": ["createSinkIterator", "hasNext", "next", "process", "informSinkFailed", "warn"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}