{"test_class": {"identifier": "DataFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/DataFormatTest.java"}, "test_case": {"identifier": "testNewNumberFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewNumberFormat() throws ParseException {\n        assertThatIllegalArgumentException().isThrownBy(() -> of(FRENCH, null, \",.,.,.\").newNumberFormat());\n        assertThatIllegalArgumentException().isThrownBy(() -> of(null, null, \",.,.,.\").newNumberFormat());\n\n        double value = 1234.5d;\n\n        NumberFormat f1 = of(FRANCE, null, null).newNumberFormat();\n        assertThat(f1.parse(\"1234,5\")).isEqualTo(value);\n        assertThat(f1.format(value)).isEqualTo(\"1\" + getGroupingSeparator(f1) + \"234,5\");\n\n        NumberFormat f2 = of(US, null, null).newNumberFormat();\n        assertThat(f2.parse(\"1,234.5\")).isEqualTo(value);\n        assertThat(f2.format(value)).isEqualTo(\"1,234.5\");\n\n        NumberFormat f3 = of(FRANCE, null, \"#0.00\").newNumberFormat();\n        assertThat(f3.parse(\"1234,50\")).isEqualTo(value);\n        assertThat(f3.format(value)).isEqualTo(\"1234,50\");\n\n        NumberFormat f4 = of(US, null, \"#0.00 \u20ac\").newNumberFormat();\n        assertThat(f4.parse(\"1234.50 \u20ac\")).isEqualTo(value);\n        assertThat(f4.format(value)).isEqualTo(\"1234.50 \u20ac\");\n    }", "signature": "void testNewNumberFormat()", "full_signature": "@Test public void testNewNumberFormat()", "class_method_signature": "DataFormatTest.testNewNumberFormat()", "testcase": true, "constructor": false, "invocations": ["isThrownBy", "assertThatIllegalArgumentException", "newNumberFormat", "of", "isThrownBy", "assertThatIllegalArgumentException", "newNumberFormat", "of", "newNumberFormat", "of", "isEqualTo", "assertThat", "parse", "isEqualTo", "assertThat", "format", "getGroupingSeparator", "newNumberFormat", "of", "isEqualTo", "assertThat", "parse", "isEqualTo", "assertThat", "format", "newNumberFormat", "of", "isEqualTo", "assertThat", "parse", "isEqualTo", "assertThat", "format", "wNumberFormat()", "of", "EqualTo(v", "assertThat", "parse", "isEqualTo", "assertThat", "format"]}, "focal_class": {"identifier": "DataFormat", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final DataFormat DEFAULT = of(null, null, null);", "modifier": "public static final", "type": "DataFormat", "declarator": "DEFAULT = of(null, null, null)", "var_name": "DEFAULT"}, {"original_string": "public static final DataFormat ROOT = of(Locale.ROOT, null, null);", "modifier": "public static final", "type": "DataFormat", "declarator": "ROOT = of(Locale.ROOT, null, null)", "var_name": "ROOT"}, {"original_string": "public static final String SEP = \" ~ \";", "modifier": "public static final", "type": "String", "declarator": "SEP = \" ~ \"", "var_name": "SEP"}, {"original_string": "@Nullable\n    private final Locale locale;", "modifier": "@Nullable\n    private final", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "@NonNull\n    private final String datePattern;", "modifier": "@NonNull\n    private final", "type": "String", "declarator": "datePattern", "var_name": "datePattern"}, {"original_string": "@NonNull\n    private final String numberPattern;", "modifier": "@NonNull\n    private final", "type": "String", "declarator": "numberPattern", "var_name": "numberPattern"}], "methods": [{"identifier": "of", "parameters": "(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "modifiers": "@NonNull public static", "return": "DataFormat", "signature": "DataFormat of(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "full_signature": "@NonNull public static DataFormat of(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "class_method_signature": "DataFormat.of(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "testcase": false, "constructor": false}, {"identifier": "DataFormat", "parameters": "(Locale locale, String datePattern, String numberPattern, Void fake)", "modifiers": "private", "return": "", "signature": " DataFormat(Locale locale, String datePattern, String numberPattern, Void fake)", "full_signature": "private  DataFormat(Locale locale, String datePattern, String numberPattern, Void fake)", "class_method_signature": "DataFormat.DataFormat(Locale locale, String datePattern, String numberPattern, Void fake)", "testcase": false, "constructor": true}, {"identifier": "getNumberPattern", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String getNumberPattern()", "full_signature": "@NonNull public String getNumberPattern()", "class_method_signature": "DataFormat.getNumberPattern()", "testcase": false, "constructor": false}, {"identifier": "getDatePattern", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String getDatePattern()", "full_signature": "@NonNull public String getDatePattern()", "class_method_signature": "DataFormat.getDatePattern()", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "()", "modifiers": "@Nullable public", "return": "Locale", "signature": "Locale getLocale()", "full_signature": "@Nullable public Locale getLocale()", "class_method_signature": "DataFormat.getLocale()", "testcase": false, "constructor": false}, {"identifier": "getLocaleString", "parameters": "()", "modifiers": "@NonNull public", "return": "String", "signature": "String getLocaleString()", "full_signature": "@NonNull public String getLocaleString()", "class_method_signature": "DataFormat.getLocaleString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DataFormat.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataFormat.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(DataFormat that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(DataFormat that)", "full_signature": "private boolean equals(DataFormat that)", "class_method_signature": "DataFormat.equals(DataFormat that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataFormat.hashCode()", "testcase": false, "constructor": false}, {"identifier": "dateFormatter", "parameters": "()", "modifiers": "public", "return": "Formatters.@NonNull Formatter<Date>", "signature": "Formatters.@NonNull Formatter<Date> dateFormatter()", "full_signature": "public Formatters.@NonNull Formatter<Date> dateFormatter()", "class_method_signature": "DataFormat.dateFormatter()", "testcase": false, "constructor": false}, {"identifier": "dateParser", "parameters": "()", "modifiers": "public", "return": "Parsers.@NonNull Parser<Date>", "signature": "Parsers.@NonNull Parser<Date> dateParser()", "full_signature": "public Parsers.@NonNull Parser<Date> dateParser()", "class_method_signature": "DataFormat.dateParser()", "testcase": false, "constructor": false}, {"identifier": "numberFormatter", "parameters": "()", "modifiers": "public", "return": "Formatters.@NonNull Formatter<Number>", "signature": "Formatters.@NonNull Formatter<Number> numberFormatter()", "full_signature": "public Formatters.@NonNull Formatter<Number> numberFormatter()", "class_method_signature": "DataFormat.numberFormatter()", "testcase": false, "constructor": false}, {"identifier": "numberParser", "parameters": "()", "modifiers": "public", "return": "Parsers.@NonNull Parser<Number>", "signature": "Parsers.@NonNull Parser<Number> numberParser()", "full_signature": "public Parsers.@NonNull Parser<Number> numberParser()", "class_method_signature": "DataFormat.numberParser()", "testcase": false, "constructor": false}, {"identifier": "newDateFormat", "parameters": "()", "modifiers": "@NonNull public", "return": "DateFormat", "signature": "DateFormat newDateFormat()", "full_signature": "@NonNull public DateFormat newDateFormat()", "class_method_signature": "DataFormat.newDateFormat()", "testcase": false, "constructor": false}, {"identifier": "newNumberFormat", "parameters": "()", "modifiers": "@NonNull public", "return": "NumberFormat", "signature": "NumberFormat newNumberFormat()", "full_signature": "@NonNull public NumberFormat newNumberFormat()", "class_method_signature": "DataFormat.newNumberFormat()", "testcase": false, "constructor": false}, {"identifier": "getLocaleOrDefault", "parameters": "()", "modifiers": "private", "return": "Locale", "signature": "Locale getLocaleOrDefault()", "full_signature": "private Locale getLocaleOrDefault()", "class_method_signature": "DataFormat.getLocaleOrDefault()", "testcase": false, "constructor": false}, {"identifier": "DataFormat", "parameters": "(@Nullable Locale locale, @Nullable String datePattern)", "modifiers": "@Deprecated public", "return": "", "signature": " DataFormat(@Nullable Locale locale, @Nullable String datePattern)", "full_signature": "@Deprecated public  DataFormat(@Nullable Locale locale, @Nullable String datePattern)", "class_method_signature": "DataFormat.DataFormat(@Nullable Locale locale, @Nullable String datePattern)", "testcase": false, "constructor": true}, {"identifier": "DataFormat", "parameters": "(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "modifiers": "@Deprecated public", "return": "", "signature": " DataFormat(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "full_signature": "@Deprecated public  DataFormat(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "class_method_signature": "DataFormat.DataFormat(@Nullable Locale locale, @Nullable String datePattern, @Nullable String numberPattern)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(@Nullable String locale, @Nullable String datePattern)", "modifiers": "@Deprecated @NonNull public static", "return": "DataFormat", "signature": "DataFormat create(@Nullable String locale, @Nullable String datePattern)", "full_signature": "@Deprecated @NonNull public static DataFormat create(@Nullable String locale, @Nullable String datePattern)", "class_method_signature": "DataFormat.create(@Nullable String locale, @Nullable String datePattern)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@Nullable String locale, @Nullable String datePattern, @Nullable String numberPattern)", "modifiers": "@Deprecated @NonNull public static", "return": "DataFormat", "signature": "DataFormat create(@Nullable String locale, @Nullable String datePattern, @Nullable String numberPattern)", "full_signature": "@Deprecated @NonNull public static DataFormat create(@Nullable String locale, @Nullable String datePattern, @Nullable String numberPattern)", "class_method_signature": "DataFormat.create(@Nullable String locale, @Nullable String datePattern, @Nullable String numberPattern)", "testcase": false, "constructor": false}, {"identifier": "localeParser", "parameters": "()", "modifiers": "@Deprecated @NonNull public static", "return": "Parser<Locale>", "signature": "Parser<Locale> localeParser()", "full_signature": "@Deprecated @NonNull public static Parser<Locale> localeParser()", "class_method_signature": "DataFormat.localeParser()", "testcase": false, "constructor": false}, {"identifier": "toLocale", "parameters": "(@NonNull String str)", "modifiers": "@Deprecated @NonNull public static", "return": "Locale", "signature": "Locale toLocale(@NonNull String str)", "full_signature": "@Deprecated @NonNull public static Locale toLocale(@NonNull String str)", "class_method_signature": "DataFormat.toLocale(@NonNull String str)", "testcase": false, "constructor": false}, {"identifier": "previewDate", "parameters": "()", "modifiers": "@Deprecated @Nullable public", "return": "String", "signature": "String previewDate()", "full_signature": "@Deprecated @Nullable public String previewDate()", "class_method_signature": "DataFormat.previewDate()", "testcase": false, "constructor": false}, {"identifier": "newDateFormat", "parameters": "(@Nullable String datePattern, @Nullable Locale locale)", "modifiers": "@Deprecated @NonNull public static", "return": "DateFormat", "signature": "DateFormat newDateFormat(@Nullable String datePattern, @Nullable Locale locale)", "full_signature": "@Deprecated @NonNull public static DateFormat newDateFormat(@Nullable String datePattern, @Nullable Locale locale)", "class_method_signature": "DataFormat.newDateFormat(@Nullable String datePattern, @Nullable Locale locale)", "testcase": false, "constructor": false}, {"identifier": "newNumberFormat", "parameters": "(@Nullable Locale locale)", "modifiers": "@Deprecated @NonNull public static", "return": "NumberFormat", "signature": "NumberFormat newNumberFormat(@Nullable Locale locale)", "full_signature": "@Deprecated @NonNull public static NumberFormat newNumberFormat(@Nullable Locale locale)", "class_method_signature": "DataFormat.newNumberFormat(@Nullable Locale locale)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/DataFormat.java"}, "focal_method": {"identifier": "newNumberFormat", "parameters": "()", "modifiers": "@NonNull public", "return": "NumberFormat", "body": "@NonNull\n    public NumberFormat newNumberFormat() throws IllegalArgumentException {\n        NumberFormat result = !numberPattern.isEmpty()\n                ? new DecimalFormat(numberPattern, DecimalFormatSymbols.getInstance(getLocaleOrDefault()))\n                : NumberFormat.getInstance(getLocaleOrDefault());\n        return result;\n    }", "signature": "NumberFormat newNumberFormat()", "full_signature": "@NonNull public NumberFormat newNumberFormat()", "class_method_signature": "DataFormat.newNumberFormat()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getInstance", "getLocaleOrDefault", "getInstance", "getLocaleOrDefault"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}