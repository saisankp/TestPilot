{"test_class": {"identifier": "LifeCycleEventDataSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TEST_START_TIME_NS = TimeUnit.SECONDS.toNanos(10);", "modifier": "private static final", "type": "long", "declarator": "TEST_START_TIME_NS = TimeUnit.SECONDS.toNanos(10)", "var_name": "TEST_START_TIME_NS"}, {"original_string": "private static final long TEST_END_TIME_NS = TEST_START_TIME_NS + TimeUnit.SECONDS.toNanos(1);", "modifier": "private static final", "type": "long", "declarator": "TEST_END_TIME_NS = TEST_START_TIME_NS + TimeUnit.SECONDS.toNanos(1)", "var_name": "TEST_END_TIME_NS"}, {"original_string": "private static final String ACTIVITY_NAME = \"TestActivity\";", "modifier": "private static final", "type": "String", "declarator": "ACTIVITY_NAME = \"TestActivity\"", "var_name": "ACTIVITY_NAME"}, {"original_string": "private static final String FRAGMENT_NAME = \"TestFragment\";", "modifier": "private static final", "type": "String", "declarator": "FRAGMENT_NAME = \"TestFragment\"", "var_name": "FRAGMENT_NAME"}, {"original_string": "private static final String ACTIVITY_NAME_2 = \"TestActivity2\";", "modifier": "private static final", "type": "String", "declarator": "ACTIVITY_NAME_2 = \"TestActivity2\"", "var_name": "ACTIVITY_NAME_2"}, {"original_string": "private FakeTimer myTimer = new FakeTimer();", "modifier": "private", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "private FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "private", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "private FakeEventService myEventService = new FakeEventService();", "modifier": "private", "type": "FakeEventService", "declarator": "myEventService = new FakeEventService()", "var_name": "myEventService"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(getClass().getName(), myTransportService, myEventService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(getClass().getName(), myTransportService, myEventService)", "var_name": "myGrpcChannel"}, {"original_string": "private FakeIdeProfilerServices myIdeProfilerServices;", "modifier": "private", "type": "FakeIdeProfilerServices", "declarator": "myIdeProfilerServices", "var_name": "myIdeProfilerServices"}, {"original_string": "private LifecycleEventDataSeries myActivitySeries;", "modifier": "private", "type": "LifecycleEventDataSeries", "declarator": "myActivitySeries", "var_name": "myActivitySeries"}, {"original_string": "private LifecycleEventDataSeries myFragmentSeries;", "modifier": "private", "type": "LifecycleEventDataSeries", "declarator": "myFragmentSeries", "var_name": "myFragmentSeries"}], "file": "profilers/testSrc/com/android/tools/profilers/event/LifeCycleEventDataSeriesTest.java"}, "test_case": {"identifier": "testActivityDiedThenResumed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testActivityDiedThenResumed() {\n    buildActivityEvent(ACTIVITY_NAME,\n                       new ActivityStateData[]{\n                         new ActivityStateData(Interaction.ViewData.State.CREATED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.RESUMED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.PAUSED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.DESTROYED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.REMOVED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.CREATED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.RESUMED,\n                                               TEST_START_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.PAUSED,\n                                               TEST_END_TIME_NS),\n                         new ActivityStateData(Interaction.ViewData.State.DESTROYED,\n                                               TEST_END_TIME_NS),\n                       },\n                       0);\n    Range range = new Range(TimeUnit.NANOSECONDS.toMicros(TEST_START_TIME_NS), TimeUnit.NANOSECONDS.toMicros(TEST_END_TIME_NS));\n    List<SeriesData<EventAction<LifecycleEvent>>> dataList = myActivitySeries.getDataForRange(range);\n    assertThat(dataList).hasSize(2);\n    SeriesData<EventAction<LifecycleEvent>> event = dataList.get(0);\n    verifyActivity(event, TEST_START_TIME_NS);\n    assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED);\n    assertThat(((LifecycleAction)event.value).getName()).isEqualTo(\n      String.format(\"%s - %s - %s\", ACTIVITY_NAME, Interaction.ViewData.State.DESTROYED.toString().toLowerCase(),\n                    Interaction.ViewData.State.REMOVED.toString().toLowerCase()));\n    event = dataList.get(1);\n    verifyActivity(event, TEST_END_TIME_NS);\n    assertThat(event.value.getType()).isEqualTo(LifecycleEvent.COMPLETED);\n    assertThat(((LifecycleAction)event.value).getName()).isEqualTo(\n      String.format(\"%s - %s\", ACTIVITY_NAME, Interaction.ViewData.State.DESTROYED.toString().toLowerCase()));\n  }", "signature": "void testActivityDiedThenResumed()", "full_signature": "@Test public void testActivityDiedThenResumed()", "class_method_signature": "LifeCycleEventDataSeriesTest.testActivityDiedThenResumed()", "testcase": true, "constructor": false, "invocations": ["buildActivityEvent", "toMicros", "toMicros", "getDataForRange", "hasSize", "assertThat", "get", "verifyActivity", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getName", "format", "toLowerCase", "toString", "toLowerCase", "toString", "get", "verifyActivity", "isEqualTo", "assertThat", "getType", "isEqualTo", "assertThat", "getName", "format", "toLowerCase", "toString"]}, "focal_class": {"identifier": "LifecycleEventDataSeries", "superclass": "", "interfaces": "implements DataSeries<EventAction<LifecycleEvent>>", "fields": [{"original_string": "@NotNull private StudioProfilers myProfilers;", "modifier": "@NotNull private", "type": "StudioProfilers", "declarator": "myProfilers", "var_name": "myProfilers"}, {"original_string": "@NotNull private final Common.Session mySession;", "modifier": "@NotNull private final", "type": "Common.Session", "declarator": "mySession", "var_name": "mySession"}, {"original_string": "private final boolean myFragmentsOnly;", "modifier": "private final", "type": "boolean", "declarator": "myFragmentsOnly", "var_name": "myFragmentsOnly"}], "methods": [{"identifier": "LifecycleEventDataSeries", "parameters": "(@NotNull StudioProfilers profilers, boolean fragmentOnly)", "modifiers": "public", "return": "", "signature": " LifecycleEventDataSeries(@NotNull StudioProfilers profilers, boolean fragmentOnly)", "full_signature": "public  LifecycleEventDataSeries(@NotNull StudioProfilers profilers, boolean fragmentOnly)", "class_method_signature": "LifecycleEventDataSeries.LifecycleEventDataSeries(@NotNull StudioProfilers profilers, boolean fragmentOnly)", "testcase": false, "constructor": true}, {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<EventAction<LifecycleEvent>>>", "signature": "List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "LifecycleEventDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false}, {"identifier": "getTransportData", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@NotNull private", "return": "List<SeriesData<EventAction<LifecycleEvent>>>", "signature": "List<SeriesData<EventAction<LifecycleEvent>>> getTransportData(@NotNull Range rangeUs)", "full_signature": "@NotNull private List<SeriesData<EventAction<LifecycleEvent>>> getTransportData(@NotNull Range rangeUs)", "class_method_signature": "LifecycleEventDataSeries.getTransportData(@NotNull Range rangeUs)", "testcase": false, "constructor": false}, {"identifier": "getLegacyData", "parameters": "(@NotNull Range rangeUs)", "modifiers": "@NotNull private", "return": "List<SeriesData<EventAction<LifecycleEvent>>>", "signature": "List<SeriesData<EventAction<LifecycleEvent>>> getLegacyData(@NotNull Range rangeUs)", "full_signature": "@NotNull private List<SeriesData<EventAction<LifecycleEvent>>> getLegacyData(@NotNull Range rangeUs)", "class_method_signature": "LifecycleEventDataSeries.getLegacyData(@NotNull Range rangeUs)", "testcase": false, "constructor": false}, {"identifier": "getComponentInStartingOrRunningState", "parameters": "(Interaction.ViewData.State state)", "modifiers": "private", "return": "boolean", "signature": "boolean getComponentInStartingOrRunningState(Interaction.ViewData.State state)", "full_signature": "private boolean getComponentInStartingOrRunningState(Interaction.ViewData.State state)", "class_method_signature": "LifecycleEventDataSeries.getComponentInStartingOrRunningState(Interaction.ViewData.State state)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/event/LifecycleEventDataSeries.java"}, "focal_method": {"identifier": "getDataForRange", "parameters": "(@NotNull Range timeCurrentRangeUs)", "modifiers": "@Override public", "return": "List<SeriesData<EventAction<LifecycleEvent>>>", "body": "@Override\n  public List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs) {\n    if (myProfilers.getIdeServices().getFeatureConfig().isUnifiedPipelineEnabled()) {\n      return getTransportData(timeCurrentRangeUs);\n    }\n    else {\n      return getLegacyData(timeCurrentRangeUs);\n    }\n  }", "signature": "List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "full_signature": "@Override public List<SeriesData<EventAction<LifecycleEvent>>> getDataForRange(@NotNull Range timeCurrentRangeUs)", "class_method_signature": "LifecycleEventDataSeries.getDataForRange(@NotNull Range timeCurrentRangeUs)", "testcase": false, "constructor": false, "invocations": ["isUnifiedPipelineEnabled", "getFeatureConfig", "getIdeServices", "getTransportData", "getLegacyData"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}