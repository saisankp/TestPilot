{"test_class": {"identifier": "ApiLoggingAspectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ApiLoggingProperties props;", "modifier": "private static", "type": "ApiLoggingProperties", "declarator": "props", "var_name": "props"}, {"original_string": "@Mock\n    private ProceedingJoinPoint point;", "modifier": "@Mock\n    private", "type": "ProceedingJoinPoint", "declarator": "point", "var_name": "point"}, {"original_string": "@Mock\n    private ApiController apiController;", "modifier": "@Mock\n    private", "type": "ApiController", "declarator": "apiController", "var_name": "apiController"}, {"original_string": "@Mock\n    private MethodSignature methodSignature;", "modifier": "@Mock\n    private", "type": "MethodSignature", "declarator": "methodSignature", "var_name": "methodSignature"}, {"original_string": "@InjectMocks\n    private ApiLoggingAspect loggingAspect = new ApiLoggingAspect(props);", "modifier": "@InjectMocks\n    private", "type": "ApiLoggingAspect", "declarator": "loggingAspect = new ApiLoggingAspect(props)", "var_name": "loggingAspect"}, {"original_string": "@Rule\n    public LogbackVerifier logbackVerifier = new LogbackVerifier();", "modifier": "@Rule\n    public", "type": "LogbackVerifier", "declarator": "logbackVerifier = new LogbackVerifier()", "var_name": "logbackVerifier"}], "file": "neo-starter/src/test/java/eu/neoteric/starter/mvc/logging/ApiLoggingAspectTest.java"}, "test_case": {"identifier": "singleStringParam", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleStringParam() throws Throwable {\n        prepareTest();\n        when(point.getArgs()).thenReturn(new Object[]{\"asd\"});\n        when(methodSignature.getName()).thenReturn(\"findById\");\n        when(methodSignature.getParameterNames()).thenReturn(new String[]{\"id\"});\n        when(methodSignature.getParameterTypes()).thenReturn(new Class[]{String.class});\n\n        logbackVerifier.expectMessage(INFO, \"[JobOffer] Find by id [id: asd].\");\n        logbackVerifier.expectMessage(INFO, \"[JobOffer] Find by id [id: asd] took\");\n\n        loggingAspect.around(point, apiController);\n    }", "signature": "void singleStringParam()", "full_signature": "@Test public void singleStringParam()", "class_method_signature": "ApiLoggingAspectTest.singleStringParam()", "testcase": true, "constructor": false, "invocations": ["prepareTest", "thenReturn", "when", "getArgs", "thenReturn", "when", "getName", "thenReturn", "when", "getParameterNames", "thenReturn", "when", "getParameterTypes", "expectMessage", "expectMessage", "around"]}, "focal_class": {"identifier": "ApiLoggingAspect", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int INITIAL_JOINER_LENGTH = 2;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_JOINER_LENGTH = 2", "var_name": "INITIAL_JOINER_LENGTH"}, {"original_string": "private final ApiLoggingProperties apiLoggingProperties;", "modifier": "private final", "type": "ApiLoggingProperties", "declarator": "apiLoggingProperties", "var_name": "apiLoggingProperties"}], "methods": [{"identifier": "publicMethod", "parameters": "()", "modifiers": "@Pointcut(\"execution(public * *(..))\") public", "return": "void", "signature": "void publicMethod()", "full_signature": "@Pointcut(\"execution(public * *(..))\") public void publicMethod()", "class_method_signature": "ApiLoggingAspect.publicMethod()", "testcase": false, "constructor": false}, {"identifier": "around", "parameters": "(ProceedingJoinPoint point, ApiController apiController)", "modifiers": "@Around(\"publicMethod() && @within(apiController)\") public", "return": "Object", "signature": "Object around(ProceedingJoinPoint point, ApiController apiController)", "full_signature": "@Around(\"publicMethod() && @within(apiController)\") public Object around(ProceedingJoinPoint point, ApiController apiController)", "class_method_signature": "ApiLoggingAspect.around(ProceedingJoinPoint point, ApiController apiController)", "testcase": false, "constructor": false}, {"identifier": "evaluateResponse", "parameters": "(ApiLogger apiLogger, Object proceed)", "modifiers": "private", "return": "Object", "signature": "Object evaluateResponse(ApiLogger apiLogger, Object proceed)", "full_signature": "private Object evaluateResponse(ApiLogger apiLogger, Object proceed)", "class_method_signature": "ApiLoggingAspect.evaluateResponse(ApiLogger apiLogger, Object proceed)", "testcase": false, "constructor": false}, {"identifier": "evaluateParamJoiner", "parameters": "(StringJoiner paramJoiner)", "modifiers": "private", "return": "String", "signature": "String evaluateParamJoiner(StringJoiner paramJoiner)", "full_signature": "private String evaluateParamJoiner(StringJoiner paramJoiner)", "class_method_signature": "ApiLoggingAspect.evaluateParamJoiner(StringJoiner paramJoiner)", "testcase": false, "constructor": false}], "file": "neo-starter/src/main/java/eu/neoteric/starter/mvc/logging/ApiLoggingAspect.java"}, "focal_method": {"identifier": "around", "parameters": "(ProceedingJoinPoint point, ApiController apiController)", "modifiers": "@Around(\"publicMethod() && @within(apiController)\") public", "return": "Object", "body": "@Around(\"publicMethod() && @within(apiController)\")\n    public Object around(ProceedingJoinPoint point, ApiController apiController) throws Throwable {\n        StopWatch watch = new StopWatch();\n        watch.start();\n\n        ApiLogger apiLogger = new ApiLogger(apiLoggingProperties, apiController.resourceName(),\n                LoggerFactory.getLogger(point.getTarget().getClass()));\n\n        MethodSignature signature = (MethodSignature) point.getSignature();\n\n        Object[] args = point.getArgs();\n        String[] parameterNames = signature.getParameterNames();\n        Class[] parameterTypes = signature.getParameterTypes();\n        String normalizedMethodName = capitalize(decamelize(signature.getName()));\n\n        List<Integer> complexTypeIndexes = Lists.newArrayList();\n        StringJoiner parametersJoiner = new StringJoiner(\", \", \"[\", \"]\");\n        if (parameterTypes.length > 0) {\n            for (int i = 0; i < parameterTypes.length; i++) {\n                if (parameterTypes[i].isPrimitive() || parameterTypes[i].getName().startsWith(\"java\")) {\n                    parametersJoiner.add(String.join(\": \", parameterNames[i], String.valueOf(args[i])));\n                } else {\n                    complexTypeIndexes.add(i);\n                }\n            }\n        }\n        apiLogger.logEntryPoint(normalizedMethodName, evaluateParamJoiner(parametersJoiner));\n\n        if (!complexTypeIndexes.isEmpty()) {\n            StringJoiner complexParamsJoiner = new StringJoiner(\", \", \"[\", \"]\");\n            complexTypeIndexes.stream()\n                    .forEach(index -> complexParamsJoiner.add(String.join(\": \", parameterNames[index], String.valueOf(args[index]))));\n            apiLogger.logCustomObjectDetails(evaluateParamJoiner(complexParamsJoiner));\n        }\n\n        try {\n            return evaluateResponse(apiLogger, point.proceed());\n        } finally {\n            watch.stop();\n            apiLogger.logExitPoint(normalizedMethodName, evaluateParamJoiner(parametersJoiner), watch.getTotalTimeSeconds());\n        }\n    }", "signature": "Object around(ProceedingJoinPoint point, ApiController apiController)", "full_signature": "@Around(\"publicMethod() && @within(apiController)\") public Object around(ProceedingJoinPoint point, ApiController apiController)", "class_method_signature": "ApiLoggingAspect.around(ProceedingJoinPoint point, ApiController apiController)", "testcase": false, "constructor": false, "invocations": ["start", "resourceName", "getLogger", "getClass", "getTarget", "getSignature", "getArgs", "getParameterNames", "getParameterTypes", "capitalize", "decamelize", "getName", "newArrayList", "isPrimitive", "startsWith", "getName", "add", "join", "valueOf", "add", "logEntryPoint", "evaluateParamJoiner", "isEmpty", "forEach", "stream", "add", "join", "valueOf", "logCustomObjectDetails", "evaluateParamJoiner", "evaluateResponse", "proceed", "stop", "logExitPoint", "evaluateParamJoiner", "getTotalTimeSeconds"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}