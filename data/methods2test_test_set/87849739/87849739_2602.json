{"test_class": {"identifier": "ModifyFeaturesLiveCommandImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModifyFeatures twinCommand;", "modifier": "private", "type": "ModifyFeatures", "declarator": "twinCommand", "var_name": "twinCommand"}, {"original_string": "private ModifyFeaturesLiveCommand underTest;", "modifier": "private", "type": "ModifyFeaturesLiveCommand", "declarator": "underTest", "var_name": "underTest"}], "file": "signals/commands/live/src/test/java/org/eclipse/ditto/signals/commands/live/modify/ModifyFeaturesLiveCommandImplTest.java"}, "test_case": {"identifier": "setDittoHeadersReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setDittoHeadersReturnsExpected() {\n        final DittoHeaders emptyDittoHeaders = DittoHeaders.empty();\n        final ModifyFeaturesLiveCommand newModifyFeaturesLiveCommand =\n                underTest.setDittoHeaders(emptyDittoHeaders);\n\n        assertThat(newModifyFeaturesLiveCommand).withDittoHeaders(emptyDittoHeaders);\n    }", "signature": "void setDittoHeadersReturnsExpected()", "full_signature": "@Test public void setDittoHeadersReturnsExpected()", "class_method_signature": "ModifyFeaturesLiveCommandImplTest.setDittoHeadersReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["empty", "setDittoHeaders", "withDittoHeaders", "assertThat"]}, "focal_class": {"identifier": "ModifyFeaturesLiveCommandImpl", "superclass": "extends AbstractModifyLiveCommand<ModifyFeaturesLiveCommand,\n        ModifyFeaturesLiveCommandAnswerBuilder>", "interfaces": "implements ModifyFeaturesLiveCommand", "fields": [{"original_string": "private final Features features;", "modifier": "private final", "type": "Features", "declarator": "features", "var_name": "features"}], "methods": [{"identifier": "ModifyFeaturesLiveCommandImpl", "parameters": "(final ModifyFeatures command)", "modifiers": "private", "return": "", "signature": " ModifyFeaturesLiveCommandImpl(final ModifyFeatures command)", "full_signature": "private  ModifyFeaturesLiveCommandImpl(final ModifyFeatures command)", "class_method_signature": "ModifyFeaturesLiveCommandImpl.ModifyFeaturesLiveCommandImpl(final ModifyFeatures command)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final Command<?> command)", "modifiers": "@Nonnull public static", "return": "ModifyFeaturesLiveCommandImpl", "signature": "ModifyFeaturesLiveCommandImpl of(final Command<?> command)", "full_signature": "@Nonnull public static ModifyFeaturesLiveCommandImpl of(final Command<?> command)", "class_method_signature": "ModifyFeaturesLiveCommandImpl.of(final Command<?> command)", "testcase": false, "constructor": false}, {"identifier": "getFeatures", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "Features", "signature": "Features getFeatures()", "full_signature": "@Nonnull @Override public Features getFeatures()", "class_method_signature": "ModifyFeaturesLiveCommandImpl.getFeatures()", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "@Override public", "return": "Category", "signature": "Category getCategory()", "full_signature": "@Override public Category getCategory()", "class_method_signature": "ModifyFeaturesLiveCommandImpl.getCategory()", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "ModifyFeaturesLiveCommand", "signature": "ModifyFeaturesLiveCommand setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public ModifyFeaturesLiveCommand setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyFeaturesLiveCommandImpl.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "changesAuthorization", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean changesAuthorization()", "full_signature": "@Override public boolean changesAuthorization()", "class_method_signature": "ModifyFeaturesLiveCommandImpl.changesAuthorization()", "testcase": false, "constructor": false}, {"identifier": "answer", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "ModifyFeaturesLiveCommandAnswerBuilder", "signature": "ModifyFeaturesLiveCommandAnswerBuilder answer()", "full_signature": "@Nonnull @Override public ModifyFeaturesLiveCommandAnswerBuilder answer()", "class_method_signature": "ModifyFeaturesLiveCommandImpl.answer()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@Nonnull @Override public String toString()", "class_method_signature": "ModifyFeaturesLiveCommandImpl.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/live/src/main/java/org/eclipse/ditto/signals/commands/live/modify/ModifyFeaturesLiveCommandImpl.java"}, "focal_method": {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "ModifyFeaturesLiveCommand", "body": "@Override\n    public ModifyFeaturesLiveCommand setDittoHeaders(final DittoHeaders dittoHeaders) {\n        return new ModifyFeaturesLiveCommandImpl(ModifyFeatures.of(getThingEntityId(), getFeatures(), dittoHeaders));\n    }", "signature": "ModifyFeaturesLiveCommand setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public ModifyFeaturesLiveCommand setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyFeaturesLiveCommandImpl.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["of", "getThingEntityId", "getFeatures"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}