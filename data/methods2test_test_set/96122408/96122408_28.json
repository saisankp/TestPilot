{"test_class": {"identifier": "EmailTemplateDaoImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CassandraOperation cassandraOperation;", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation", "var_name": "cassandraOperation"}, {"original_string": "private static final String EMAIL_TEMPLATE = \"email_template\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_TEMPLATE = \"email_template\"", "var_name": "EMAIL_TEMPLATE"}, {"original_string": "private static final String DEFAULT_EMAIL_TEMPLATE_NAME = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EMAIL_TEMPLATE_NAME = \"default\"", "var_name": "DEFAULT_EMAIL_TEMPLATE_NAME"}, {"original_string": "private static final String TEMPLATE = \"template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE = \"template\"", "var_name": "TEMPLATE"}, {"original_string": "private EmailTemplateDao emailTemplateDao=new EmailTemplateDaoImpl();", "modifier": "private", "type": "EmailTemplateDao", "declarator": "emailTemplateDao=new EmailTemplateDaoImpl()", "var_name": "emailTemplateDao"}], "file": "actors/common/src/test/java/org/sunbird/learner/actors/notificationservice/dao/impl/EmailTemplateDaoImplTest.java"}, "test_case": {"identifier": "testGetTemplateWithBlankTemplateName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTemplateWithBlankTemplateName(){\n        List<String> idList = new ArrayList<>();\n        idList.add(DEFAULT_EMAIL_TEMPLATE_NAME);\n        Response response = new Response();\n        List<Map<String, Object>> orgList =new ArrayList<>();\n        Map<String,Object>map=new HashMap<>();\n        orgList.add(map);\n        response.put(JsonKey.RESPONSE,orgList);\n        when(cassandraOperation.getRecordsByPrimaryKeys(JsonKey.SUNBIRD, EMAIL_TEMPLATE, idList, JsonKey.NAME)).thenReturn(response);\n        String resp=emailTemplateDao.getTemplate(StringUtils.EMPTY);\n        Assert.assertEquals(null,resp);\n    }", "signature": "void testGetTemplateWithBlankTemplateName()", "full_signature": "@Test public void testGetTemplateWithBlankTemplateName()", "class_method_signature": "EmailTemplateDaoImplTest.testGetTemplateWithBlankTemplateName()", "testcase": true, "constructor": false, "invocations": ["add", "add", "put", "thenReturn", "when", "getRecordsByPrimaryKeys", "getTemplate", "assertEquals"]}, "focal_class": {"identifier": "EmailTemplateDaoImpl", "superclass": "", "interfaces": "implements EmailTemplateDao", "fields": [{"original_string": "static EmailTemplateDao emailTemplateDao;", "modifier": "static", "type": "EmailTemplateDao", "declarator": "emailTemplateDao", "var_name": "emailTemplateDao"}, {"original_string": "private static final String EMAIL_TEMPLATE = \"email_template\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL_TEMPLATE = \"email_template\"", "var_name": "EMAIL_TEMPLATE"}, {"original_string": "private static final String DEFAULT_EMAIL_TEMPLATE_NAME = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_EMAIL_TEMPLATE_NAME = \"default\"", "var_name": "DEFAULT_EMAIL_TEMPLATE_NAME"}, {"original_string": "private static final String TEMPLATE = \"template\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE = \"template\"", "var_name": "TEMPLATE"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "EmailTemplateDao", "signature": "EmailTemplateDao getInstance()", "full_signature": "public static EmailTemplateDao getInstance()", "class_method_signature": "EmailTemplateDaoImpl.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(String templateName)", "modifiers": "@Override public", "return": "String", "signature": "String getTemplate(String templateName)", "full_signature": "@Override public String getTemplate(String templateName)", "class_method_signature": "EmailTemplateDaoImpl.getTemplate(String templateName)", "testcase": false, "constructor": false}, {"identifier": "getCassandraOperation", "parameters": "()", "modifiers": "private", "return": "CassandraOperation", "signature": "CassandraOperation getCassandraOperation()", "full_signature": "private CassandraOperation getCassandraOperation()", "class_method_signature": "EmailTemplateDaoImpl.getCassandraOperation()", "testcase": false, "constructor": false}], "file": "actors/common/src/main/java/org/sunbird/learner/actors/notificationservice/dao/impl/EmailTemplateDaoImpl.java"}, "focal_method": {"identifier": "getTemplate", "parameters": "(String templateName)", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String getTemplate(String templateName) {\n\n    List<String> idList = new ArrayList<>();\n    if (StringUtils.isBlank(templateName)) {\n      idList.add(DEFAULT_EMAIL_TEMPLATE_NAME);\n    } else {\n      idList.add(templateName);\n    }\n    Response response =\n        getCassandraOperation().getRecordsByPrimaryKeys(\n            JsonKey.SUNBIRD, EMAIL_TEMPLATE, idList, JsonKey.NAME);\n    List<Map<String, Object>> emailTemplateList =\n        (List<Map<String, Object>>) response.get(JsonKey.RESPONSE);\n    Map<String, Object> map = Collections.emptyMap();\n    if (CollectionUtils.isNotEmpty(emailTemplateList)) {\n      map = emailTemplateList.get(0);\n    }\n    return (String) map.get(TEMPLATE);\n  }", "signature": "String getTemplate(String templateName)", "full_signature": "@Override public String getTemplate(String templateName)", "class_method_signature": "EmailTemplateDaoImpl.getTemplate(String templateName)", "testcase": false, "constructor": false, "invocations": ["isBlank", "add", "add", "getRecordsByPrimaryKeys", "getCassandraOperation", "get", "emptyMap", "isNotEmpty", "get", "get"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}