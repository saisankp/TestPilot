{"test_class": {"identifier": "ClassUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAP_SIZE = 3;", "modifier": "private static final", "type": "int", "declarator": "MAP_SIZE = 3", "var_name": "MAP_SIZE"}], "file": "tiles-request-api/src/test/java/org/apache/tiles/request/reflect/ClassUtilTest.java"}, "test_case": {"identifier": "testCollectBeanInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectBeanInfo() {\n        Map<String, PropertyDescriptor> name2descriptor = new HashMap<String, PropertyDescriptor>();\n        ClassUtil.collectBeanInfo(TestInterface.class, name2descriptor);\n        assertEquals(MAP_SIZE, name2descriptor.size());\n        PropertyDescriptor descriptor = name2descriptor.get(\"value\");\n        assertEquals(\"value\", descriptor.getName());\n        assertEquals(int.class, descriptor.getPropertyType());\n        assertNotNull(descriptor.getReadMethod());\n        assertNotNull(descriptor.getWriteMethod());\n        descriptor = name2descriptor.get(\"value2\");\n        assertEquals(\"value2\", descriptor.getName());\n        assertEquals(long.class, descriptor.getPropertyType());\n        assertNotNull(descriptor.getReadMethod());\n        assertNull(descriptor.getWriteMethod());\n        descriptor = name2descriptor.get(\"value3\");\n        assertEquals(\"value3\", descriptor.getName());\n        assertEquals(String.class, descriptor.getPropertyType());\n        assertNull(descriptor.getReadMethod());\n        assertNotNull(descriptor.getWriteMethod());\n    }", "signature": "void testCollectBeanInfo()", "full_signature": "@Test public void testCollectBeanInfo()", "class_method_signature": "ClassUtilTest.testCollectBeanInfo()", "testcase": true, "constructor": false, "invocations": ["collectBeanInfo", "assertEquals", "size", "get", "assertEquals", "getName", "assertEquals", "getPropertyType", "assertNotNull", "getReadMethod", "assertNotNull", "getWriteMethod", "get", "assertEquals", "getName", "assertEquals", "getPropertyType", "assertNotNull", "getReadMethod", "assertNull", "getWriteMethod", "get", "assertEquals", "getName", "assertEquals", "getPropertyType", "assertNull", "getReadMethod", "assertNotNull", "getWriteMethod"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ClassUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClassUtil()", "full_signature": "private  ClassUtil()", "class_method_signature": "ClassUtil.ClassUtil()", "testcase": false, "constructor": true}, {"identifier": "getClass", "parameters": "(String className,\n            Class<T> baseClass)", "modifiers": "public static", "return": "Class<? extends T>", "signature": "Class<? extends T> getClass(String className,\n            Class<T> baseClass)", "full_signature": "public static Class<? extends T> getClass(String className,\n            Class<T> baseClass)", "class_method_signature": "ClassUtil.getClass(String className,\n            Class<T> baseClass)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(String className)", "modifiers": "public static", "return": "Object", "signature": "Object instantiate(String className)", "full_signature": "public static Object instantiate(String className)", "class_method_signature": "ClassUtil.instantiate(String className)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "(String className, boolean returnNull)", "modifiers": "public static", "return": "Object", "signature": "Object instantiate(String className, boolean returnNull)", "full_signature": "public static Object instantiate(String className, boolean returnNull)", "class_method_signature": "ClassUtil.instantiate(String className, boolean returnNull)", "testcase": false, "constructor": false}, {"identifier": "collectBeanInfo", "parameters": "(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "modifiers": "public static", "return": "void", "signature": "void collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "full_signature": "public static void collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "class_method_signature": "ClassUtil.collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "testcase": false, "constructor": false}], "file": "tiles-request-api/src/main/java/org/apache/tiles/request/reflect/ClassUtil.java"}, "focal_method": {"identifier": "collectBeanInfo", "parameters": "(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "modifiers": "public static", "return": "void", "body": "public static void collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor) {\n        Logger log = LoggerFactory.getLogger(ClassUtil.class);\n        BeanInfo info = null;\n        try {\n            info = Introspector.getBeanInfo(clazz);\n        } catch (Exception ex) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Cannot inspect class \" + clazz, ex);\n            }\n        }\n        if (info == null) {\n            return;\n        }\n        for (PropertyDescriptor pd : info.getPropertyDescriptors()) {\n            pd.setValue(\"type\", pd.getPropertyType());\n            pd.setValue(\"resolvableAtDesignTime\", Boolean.TRUE);\n            name2descriptor.put(pd.getName(), pd);\n        }\n    }", "signature": "void collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "full_signature": "public static void collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "class_method_signature": "ClassUtil.collectBeanInfo(Class<?> clazz,\n            Map<String, PropertyDescriptor> name2descriptor)", "testcase": false, "constructor": false, "invocations": ["getLogger", "getBeanInfo", "isDebugEnabled", "debug", "getPropertyDescriptors", "setValue", "getPropertyType", "setValue", "put", "getName"]}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}