{"test_class": {"identifier": "IntelliJNativeFrameSymbolizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers-android/testSrc/com/android/tools/idea/profilers/stacktrace/IntelliJNativeFrameSymbolizerTest.java"}, "test_case": {"identifier": "testSymbolize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSymbolize() {\n    IntelliJNativeFrameSymbolizer frameSymbolizer = new IntelliJNativeFrameSymbolizer(new FakeNativeSymbolizer());\n\n    // verify unfound symbols\n    NativeCallStack.NativeFrame unsymbolizedFrame = frameSymbolizer\n      .symbolize(\"arm64\", NativeCallStack.NativeFrame.newBuilder().setModuleName(\"test\").setModuleOffset(100).build());\n    assertThat(unsymbolizedFrame.getSymbolName()).isEqualTo(String.format(\"0x%x\", 100 - 1));\n\n    // verify found symbols\n    NativeCallStack.NativeFrame.Builder frameToSymbolize1 =\n      NativeCallStack.NativeFrame.newBuilder().setModuleName(\"test2\").setModuleOffset(100);\n    NativeCallStack.NativeFrame symbolizedFrame1 = frameSymbolizer.symbolize(\"arm\", frameToSymbolize1.build());\n    NativeCallStack.NativeFrame expectedSymbolizedFrame1 = frameToSymbolize1\n      .setSymbolName(\"arm_frame\")\n      .setModuleName(\"test2_symbolized\")\n      .setFileName(\"symbols.java\")\n      .setLineNumber(1000 + 100 + PREVIOUS_INSTRUCTION_OFFSET).build();\n    assertThat(symbolizedFrame1).isEqualTo(expectedSymbolizedFrame1);\n\n    NativeCallStack.NativeFrame.Builder frameToSymbolize2 =\n      NativeCallStack.NativeFrame.newBuilder().setModuleName(\"test3\").setModuleOffset(200);\n    NativeCallStack.NativeFrame symbolizedFrame2 = frameSymbolizer.symbolize(\"x86\", frameToSymbolize2.build());\n    NativeCallStack.NativeFrame expectedSymbolizedFrame2 = frameToSymbolize2\n      .setSymbolName(\"x86_frame\")\n      .setModuleName(\"test3_symbolized\")\n      .setFileName(\"symbols.java\")\n      .setLineNumber(1000 + 200 + PREVIOUS_INSTRUCTION_OFFSET).build();\n    assertThat(symbolizedFrame2).isEqualTo(expectedSymbolizedFrame2);\n  }", "signature": "void testSymbolize()", "full_signature": "@Test public void testSymbolize()", "class_method_signature": "IntelliJNativeFrameSymbolizerTest.testSymbolize()", "testcase": true, "constructor": false, "invocations": ["symbolize", "build", "setModuleOffset", "setModuleName", "newBuilder", "isEqualTo", "assertThat", "getSymbolName", "format", "setModuleOffset", "setModuleName", "newBuilder", "symbolize", "build", "build", "setLineNumber", "setFileName", "setModuleName", "setSymbolName", "isEqualTo", "assertThat", "setModuleOffset", "setModuleName", "newBuilder", "symbolize", "build", "build", "setLineNumber", "setFileName", "setModuleName", "setSymbolName", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "IntelliJNativeFrameSymbolizer", "superclass": "", "interfaces": "implements NativeFrameSymbolizer", "fields": [{"original_string": "static final int PREVIOUS_INSTRUCTION_OFFSET = -1;", "modifier": "static final", "type": "int", "declarator": "PREVIOUS_INSTRUCTION_OFFSET = -1", "var_name": "PREVIOUS_INSTRUCTION_OFFSET"}, {"original_string": "@NotNull private final NativeSymbolizer mySymbolizer;", "modifier": "@NotNull private final", "type": "NativeSymbolizer", "declarator": "mySymbolizer", "var_name": "mySymbolizer"}], "methods": [{"identifier": "getLogger", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "private static Logger getLogger()", "class_method_signature": "IntelliJNativeFrameSymbolizer.getLogger()", "testcase": false, "constructor": false}, {"identifier": "IntelliJNativeFrameSymbolizer", "parameters": "(@NotNull NativeSymbolizer symbolizer)", "modifiers": "public", "return": "", "signature": " IntelliJNativeFrameSymbolizer(@NotNull NativeSymbolizer symbolizer)", "full_signature": "public  IntelliJNativeFrameSymbolizer(@NotNull NativeSymbolizer symbolizer)", "class_method_signature": "IntelliJNativeFrameSymbolizer.IntelliJNativeFrameSymbolizer(@NotNull NativeSymbolizer symbolizer)", "testcase": false, "constructor": true}, {"identifier": "symbolize", "parameters": "(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "modifiers": "@NotNull @Override public", "return": "NativeCallStack.NativeFrame", "signature": "NativeCallStack.NativeFrame symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "full_signature": "@NotNull @Override public NativeCallStack.NativeFrame symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "class_method_signature": "IntelliJNativeFrameSymbolizer.symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "testcase": false, "constructor": false}, {"identifier": "getOffsetOfPreviousInstruction", "parameters": "(long offset)", "modifiers": "private", "return": "long", "signature": "long getOffsetOfPreviousInstruction(long offset)", "full_signature": "private long getOffsetOfPreviousInstruction(long offset)", "class_method_signature": "IntelliJNativeFrameSymbolizer.getOffsetOfPreviousInstruction(long offset)", "testcase": false, "constructor": false}], "file": "profilers-android/src/com/android/tools/idea/profilers/stacktrace/IntelliJNativeFrameSymbolizer.java"}, "focal_method": {"identifier": "symbolize", "parameters": "(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "modifiers": "@NotNull @Override public", "return": "NativeCallStack.NativeFrame", "body": "@NotNull\n  @Override\n  public NativeCallStack.NativeFrame symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame) {\n    Symbol symbol = null;\n    long instructionOffset = getOffsetOfPreviousInstruction(unsymbolizedFrame.getModuleOffset());\n    try {\n      symbol = mySymbolizer.symbolize(abi, unsymbolizedFrame.getModuleName(), instructionOffset);\n    }\n    catch (IOException | RuntimeException e) {\n      getLogger().warn(e);\n    }\n\n    NativeCallStack.NativeFrame.Builder builder = unsymbolizedFrame.toBuilder();\n    if (symbol == null) {\n      String unfoundSymbolName = String.format(\"0x%x\", instructionOffset);\n      builder.setSymbolName(unfoundSymbolName);\n    }\n    else {\n      builder.setSymbolName(symbol.getName())\n        .setModuleName(symbol.getModule())\n        .setFileName(symbol.getSourceFile())\n        .setLineNumber(symbol.getLineNumber());\n    }\n    return builder.build();\n  }", "signature": "NativeCallStack.NativeFrame symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "full_signature": "@NotNull @Override public NativeCallStack.NativeFrame symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "class_method_signature": "IntelliJNativeFrameSymbolizer.symbolize(String abi, NativeCallStack.NativeFrame unsymbolizedFrame)", "testcase": false, "constructor": false, "invocations": ["getOffsetOfPreviousInstruction", "getModuleOffset", "symbolize", "getModuleName", "warn", "getLogger", "toBuilder", "format", "setSymbolName", "setLineNumber", "setFileName", "setModuleName", "setSymbolName", "getName", "getModule", "getSourceFile", "getLineNumber", "build"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}