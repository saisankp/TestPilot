{"test_class": {"identifier": "XslBasedResponseFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String XSL_PARAM_KEY = \"xslFile\";", "modifier": "private static final", "type": "String", "declarator": "XSL_PARAM_KEY = \"xslFile\"", "var_name": "XSL_PARAM_KEY"}, {"original_string": "@Mock\n    private FileUtils fileUtils;", "modifier": "@Mock\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Mock\n    private FileFactory fileFactory;", "modifier": "@Mock\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Mock\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Mock\n    private XslResponseGenerator xslResponseGenerator;", "modifier": "@Mock\n    private", "type": "XslResponseGenerator", "declarator": "xslResponseGenerator", "var_name": "xslResponseGenerator"}, {"original_string": "@Mock\n    private WilmaHttpRequest wilmaRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "wilmaRequest", "var_name": "wilmaRequest"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@InjectMocks\n    private XslBasedResponseFormatter underTest;", "modifier": "@InjectMocks\n    private", "type": "XslBasedResponseFormatter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private byte[] templateResource;", "modifier": "private", "type": "byte[]", "declarator": "templateResource", "var_name": "templateResource"}, {"original_string": "private ParameterList params;", "modifier": "private", "type": "ParameterList", "declarator": "params", "var_name": "params"}, {"original_string": "private HttpServletResponse response;", "modifier": "private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslBasedResponseFormatterTest.java"}, "test_case": {"identifier": "testFormatTemplateShouldThrowExceptionWhenXslFileParamDoesNotExist", "parameters": "()", "modifiers": "@Test(expectedExceptions = ResponseFormattingFailedException.class) public", "return": "void", "body": "@Test(expectedExceptions = ResponseFormattingFailedException.class)\n    public void testFormatTemplateShouldThrowExceptionWhenXslFileParamDoesNotExist() throws Exception {\n        //GIVEN in setUp\n        //WHEN\n        underTest.formatResponse(wilmaRequest, response, templateResource, params);\n        //THEN exception is thrown\n    }", "signature": "void testFormatTemplateShouldThrowExceptionWhenXslFileParamDoesNotExist()", "full_signature": "@Test(expectedExceptions = ResponseFormattingFailedException.class) public void testFormatTemplateShouldThrowExceptionWhenXslFileParamDoesNotExist()", "class_method_signature": "XslBasedResponseFormatterTest.testFormatTemplateShouldThrowExceptionWhenXslFileParamDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["formatResponse"]}, "focal_class": {"identifier": "XslBasedResponseFormatter", "superclass": "", "interfaces": "implements ResponseFormatter", "fields": [{"original_string": "@Autowired\n    private FileUtils fileUtils;", "modifier": "@Autowired\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Autowired\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Autowired\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Autowired\n    private XslResponseGenerator xslResponseGenerator;", "modifier": "@Autowired\n    private", "type": "XslResponseGenerator", "declarator": "xslResponseGenerator", "var_name": "xslResponseGenerator"}], "methods": [{"identifier": "formatResponse", "parameters": "(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "full_signature": "@Override public byte[] formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "class_method_signature": "XslBasedResponseFormatter.formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "testcase": false, "constructor": false}, {"identifier": "readXslResourceFromFileSystem", "parameters": "(final String xslResourcePath)", "modifiers": "private", "return": "byte[]", "signature": "byte[] readXslResourceFromFileSystem(final String xslResourcePath)", "full_signature": "private byte[] readXslResourceFromFileSystem(final String xslResourcePath)", "class_method_signature": "XslBasedResponseFormatter.readXslResourceFromFileSystem(final String xslResourcePath)", "testcase": false, "constructor": false}, {"identifier": "checkAndGetXslResourcePath", "parameters": "(final ParameterList params)", "modifiers": "private", "return": "String", "signature": "String checkAndGetXslResourcePath(final ParameterList params)", "full_signature": "private String checkAndGetXslResourcePath(final ParameterList params)", "class_method_signature": "XslBasedResponseFormatter.checkAndGetXslResourcePath(final ParameterList params)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslBasedResponseFormatter.java"}, "focal_method": {"identifier": "formatResponse", "parameters": "(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params) throws Exception {\n        String xslResourcePath = checkAndGetXslResourcePath(params);\n        byte[] xslResource = readXslResourceFromFileSystem(xslResourcePath);\n        byte[] requestXmlResource = wilmaRequest.getBody().getBytes(StandardCharsets.UTF_8);\n        return xslResponseGenerator.generateResponse(requestXmlResource, xslResource, templateResource);\n    }", "signature": "byte[] formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "full_signature": "@Override public byte[] formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "class_method_signature": "XslBasedResponseFormatter.formatResponse(final WilmaHttpRequest wilmaRequest, final HttpServletResponse resp,\n                                 final byte[] templateResource, final ParameterList params)", "testcase": false, "constructor": false, "invocations": ["checkAndGetXslResourcePath", "readXslResourceFromFileSystem", "getBytes", "getBody", "generateResponse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}