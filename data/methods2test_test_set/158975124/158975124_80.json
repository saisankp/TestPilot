{"test_class": {"identifier": "PublishHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/mqtt/PublishHandlerTest.java"}, "test_case": {"identifier": "onPublish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onPublish() throws Exception {\n        IPlanExecutor executor = mock(IPlanExecutor.class);\n        PayloadFormatter payloadFormat = PayloadFormatManager.getPayloadFormat(\"json\");\n        PublishHandler handler = new PublishHandler(executor, payloadFormat);\n\n        String payload = \"{\\n\" +\n                \"\\\"device\\\":\\\"root.sg.d1\\\",\\n\" +\n                \"\\\"timestamp\\\":1586076045524,\\n\" +\n                \"\\\"measurements\\\":[\\\"s1\\\"],\\n\" +\n                \"\\\"values\\\":[0.530635]\\n\" +\n                \"}\";\n\n        ByteBuf buf = Unpooled.copiedBuffer(payload, StandardCharsets.UTF_8);\n\n        MqttPublishVariableHeader variableHeader = new MqttPublishVariableHeader(\"root.sg.d1\", 1);\n        MqttFixedHeader fixedHeader = new MqttFixedHeader(MqttMessageType.PUBLISH, false, MqttQoS.AT_LEAST_ONCE, false, 1);\n\n        MqttPublishMessage publishMessage = new MqttPublishMessage(fixedHeader, variableHeader, buf);\n        InterceptPublishMessage message = new InterceptPublishMessage(publishMessage, null, null);\n        handler.onPublish(message);\n        verify(executor).processNonQuery(any(InsertRowPlan.class));\n    }", "signature": "void onPublish()", "full_signature": "@Test public void onPublish()", "class_method_signature": "PublishHandlerTest.onPublish()", "testcase": true, "constructor": false, "invocations": ["mock", "getPayloadFormat", "copiedBuffer", "onPublish", "processNonQuery", "verify", "any"]}, "focal_class": {"identifier": "PublishHandler", "superclass": "extends AbstractInterceptHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PublishHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PublishHandler.class)", "var_name": "LOG"}, {"original_string": "private IPlanExecutor executor;", "modifier": "private", "type": "IPlanExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private PayloadFormatter payloadFormat;", "modifier": "private", "type": "PayloadFormatter", "declarator": "payloadFormat", "var_name": "payloadFormat"}], "methods": [{"identifier": "PublishHandler", "parameters": "(IoTDBConfig config)", "modifiers": "public", "return": "", "signature": " PublishHandler(IoTDBConfig config)", "full_signature": "public  PublishHandler(IoTDBConfig config)", "class_method_signature": "PublishHandler.PublishHandler(IoTDBConfig config)", "testcase": false, "constructor": true}, {"identifier": "PublishHandler", "parameters": "(IPlanExecutor executor, PayloadFormatter payloadFormat)", "modifiers": "protected", "return": "", "signature": " PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat)", "full_signature": "protected  PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat)", "class_method_signature": "PublishHandler.PublishHandler(IPlanExecutor executor, PayloadFormatter payloadFormat)", "testcase": false, "constructor": true}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "PublishHandler.getID()", "testcase": false, "constructor": false}, {"identifier": "onPublish", "parameters": "(InterceptPublishMessage msg)", "modifiers": "@Override public", "return": "void", "signature": "void onPublish(InterceptPublishMessage msg)", "full_signature": "@Override public void onPublish(InterceptPublishMessage msg)", "class_method_signature": "PublishHandler.onPublish(InterceptPublishMessage msg)", "testcase": false, "constructor": false}, {"identifier": "executeNonQuery", "parameters": "(PhysicalPlan plan)", "modifiers": "private", "return": "boolean", "signature": "boolean executeNonQuery(PhysicalPlan plan)", "full_signature": "private boolean executeNonQuery(PhysicalPlan plan)", "class_method_signature": "PublishHandler.executeNonQuery(PhysicalPlan plan)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/mqtt/PublishHandler.java"}, "focal_method": {"identifier": "onPublish", "parameters": "(InterceptPublishMessage msg)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onPublish(InterceptPublishMessage msg) {\n        String clientId = msg.getClientID();\n        ByteBuf payload = msg.getPayload();\n        String topic = msg.getTopicName();\n        String username = msg.getUsername();\n        MqttQoS qos = msg.getQos();\n\n        LOG.debug(\"Receive publish message. clientId: {}, username: {}, qos: {}, topic: {}, payload: {}\",\n                clientId, username, qos, topic, payload);\n\n        List<Message> events = payloadFormat.format(payload);\n        if (events == null) {\n            return;\n        }\n\n        // since device ids from messages maybe different, so we use the InsertPlan not InsertTabletPlan.\n        for (Message event : events) {\n            if (event == null) {\n                continue;\n            }\n\n            InsertRowPlan plan = new InsertRowPlan();\n            plan.setTime(event.getTimestamp());\n            plan.setMeasurements(event.getMeasurements().toArray(new String[event.getMeasurements().size()]));\n            plan.setValues(event.getValues().toArray(new Object[event.getValues().size()]));\n            plan.setDataTypes(new TSDataType[event.getValues().size()]);\n            plan.setNeedInferType(true);\n\n            boolean status = false;\n            try {\n                plan.setDeviceId(new PartialPath(event.getDevice()));\n                status = executeNonQuery(plan);\n            } catch (QueryProcessException | StorageGroupNotSetException | StorageEngineException | IllegalPathException e ) {\n                LOG.warn(\n                    \"meet error when inserting device {}, measurements {}, at time {}, because \",\n                    event.getDevice(), event.getMeasurements(), event.getTimestamp(), e);\n            }\n\n            LOG.debug(\"event process result: {}\", status);\n        }\n    }", "signature": "void onPublish(InterceptPublishMessage msg)", "full_signature": "@Override public void onPublish(InterceptPublishMessage msg)", "class_method_signature": "PublishHandler.onPublish(InterceptPublishMessage msg)", "testcase": false, "constructor": false, "invocations": ["getClientID", "getPayload", "getTopicName", "getUsername", "getQos", "debug", "format", "setTime", "getTimestamp", "setMeasurements", "toArray", "getMeasurements", "size", "getMeasurements", "setValues", "toArray", "getValues", "size", "getValues", "setDataTypes", "size", "getValues", "setNeedInferType", "setDeviceId", "getDevice", "executeNonQuery", "warn", "getDevice", "getMeasurements", "getTimestamp", "debug"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}