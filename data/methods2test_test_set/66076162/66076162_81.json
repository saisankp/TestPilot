{"test_class": {"identifier": "PermissionEntityDataMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PermissionEntityDataMapper permissionEntityDataMapper;", "modifier": "private", "type": "PermissionEntityDataMapper", "declarator": "permissionEntityDataMapper", "var_name": "permissionEntityDataMapper"}], "file": "infrastructure/src/test/java/com/remotecraft/app/infrastructure/entity/mapper/PermissionEntityDataMapperTest.java"}, "test_case": {"identifier": "shouldProperlyMapPermissionCollectionIntoPermissionEntityCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProperlyMapPermissionCollectionIntoPermissionEntityCollection()\n      throws Exception {\n    Permission cameraPermission = Permission.builder()\n        .permission(\"CAMERA\")\n        .rationaleTitle(\"Permission Request\")\n        .rationaleMessage(\"You should allow this permission\")\n        .deniedMessage(\"You must allow this permission in order for this feature to work\")\n        .build();\n    Permission contactsPermission = Permission.builder()\n        .permission(\"CONTACTS\")\n        .rationaleTitle(\"Permission Request\")\n        .rationaleMessage(\"You should allow this permission\")\n        .deniedMessage(\"You must allow this permission\")\n        .build();\n    ArrayList<Permission> permissions = new ArrayList<>();\n    permissions.add(cameraPermission);\n    permissions.add(contactsPermission);\n\n    Collection<PermissionEntity> permissionEntities =\n        permissionEntityDataMapper.transformInverse(permissions);\n\n    assertThat(permissionEntities, notNullValue());\n    assertThat(permissionEntities.size(), is(2));\n    PermissionEntity permissionEntity1 = (PermissionEntity) permissionEntities.toArray()[0];\n    assertThat(permissionEntity1, notNullValue());\n    assertThat(permissionEntity1.getPermission(), is(\"CAMERA\"));\n    PermissionEntity permissionEntity2 = (PermissionEntity) permissionEntities.toArray()[1];\n    assertThat(permissionEntity2.getPermission(), is(\"CONTACTS\"));\n  }", "signature": "void shouldProperlyMapPermissionCollectionIntoPermissionEntityCollection()", "full_signature": "@Test public void shouldProperlyMapPermissionCollectionIntoPermissionEntityCollection()", "class_method_signature": "PermissionEntityDataMapperTest.shouldProperlyMapPermissionCollectionIntoPermissionEntityCollection()", "testcase": true, "constructor": false, "invocations": ["build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "builder", "build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "builder", "add", "add", "transformInverse", "assertThat", "notNullValue", "assertThat", "size", "is", "toArray", "assertThat", "notNullValue", "assertThat", "getPermission", "is", "toArray", "assertThat", "getPermission", "is"]}, "focal_class": {"identifier": "PermissionEntityDataMapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PermissionEntityDataMapper", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " PermissionEntityDataMapper()", "full_signature": "@Inject public  PermissionEntityDataMapper()", "class_method_signature": "PermissionEntityDataMapper.PermissionEntityDataMapper()", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(PermissionEntity permissionEntity)", "modifiers": "public", "return": "Permission", "signature": "Permission transform(PermissionEntity permissionEntity)", "full_signature": "public Permission transform(PermissionEntity permissionEntity)", "class_method_signature": "PermissionEntityDataMapper.transform(PermissionEntity permissionEntity)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Collection<PermissionEntity> permissionEntities)", "modifiers": "public", "return": "Collection<Permission>", "signature": "Collection<Permission> transform(Collection<PermissionEntity> permissionEntities)", "full_signature": "public Collection<Permission> transform(Collection<PermissionEntity> permissionEntities)", "class_method_signature": "PermissionEntityDataMapper.transform(Collection<PermissionEntity> permissionEntities)", "testcase": false, "constructor": false}, {"identifier": "transformInverse", "parameters": "(Permission permission)", "modifiers": "public", "return": "PermissionEntity", "signature": "PermissionEntity transformInverse(Permission permission)", "full_signature": "public PermissionEntity transformInverse(Permission permission)", "class_method_signature": "PermissionEntityDataMapper.transformInverse(Permission permission)", "testcase": false, "constructor": false}, {"identifier": "transformInverse", "parameters": "(Collection<Permission> permissions)", "modifiers": "public", "return": "Collection<PermissionEntity>", "signature": "Collection<PermissionEntity> transformInverse(Collection<Permission> permissions)", "full_signature": "public Collection<PermissionEntity> transformInverse(Collection<Permission> permissions)", "class_method_signature": "PermissionEntityDataMapper.transformInverse(Collection<Permission> permissions)", "testcase": false, "constructor": false}], "file": "infrastructure/src/main/java/com/remotecraft/app/infrastructure/entity/mapper/PermissionEntityDataMapper.java"}, "focal_method": {"identifier": "transformInverse", "parameters": "(Permission permission)", "modifiers": "public", "return": "PermissionEntity", "body": "public PermissionEntity transformInverse(Permission permission) {\n    if (permission == null) {\n      return null;\n    }\n\n    return new PermissionEntity.Builder()\n        .permission(permission.permission())\n        .rationaleTitle(permission.rationaleTitle())\n        .rationaleMessage(permission.rationaleMessage())\n        .deniedMessage(permission.deniedMessage())\n        .build();\n  }", "signature": "PermissionEntity transformInverse(Permission permission)", "full_signature": "public PermissionEntity transformInverse(Permission permission)", "class_method_signature": "PermissionEntityDataMapper.transformInverse(Permission permission)", "testcase": false, "constructor": false, "invocations": ["build", "deniedMessage", "rationaleMessage", "rationaleTitle", "permission", "permission", "rationaleTitle", "rationaleMessage", "deniedMessage"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}