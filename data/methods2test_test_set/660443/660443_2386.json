{"test_class": {"identifier": "RadicalChargeSiteInitiationHReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/RadicalChargeSiteInitiationHReactionTest.java"}, "test_case": {"identifier": "testMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapping() throws Exception {\n        IReactionProcess type = new RadicalChargeSiteInitiationHReaction();\n\n        IAtomContainerSet setOfReactants = getExampleReactants();\n        IAtomContainer molecule = setOfReactants.getAtomContainer(0);\n\n        /* initiate */\n\n        /* manually put the reactive center */\n        molecule.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(3).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(2).setFlag(CDKConstants.REACTIVE_CENTER, true);\n\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        IAtomContainer product = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n        IAtomContainer product2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(1);\n\n        Assert.assertEquals(9, setOfReactions.getReaction(0).getMappingCount());\n\n        IAtom mappedProductA1 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(0),\n                molecule.getAtom(0));\n        Assert.assertEquals(mappedProductA1, product.getAtom(0));\n        IAtom mappedProductA2 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(0),\n                molecule.getAtom(1));\n        Assert.assertEquals(mappedProductA2, product.getAtom(1));\n        IAtom mappedProductA3 = (IAtom) ReactionManipulator.getMappedChemObject(setOfReactions.getReaction(0),\n                molecule.getAtom(3));\n        Assert.assertEquals(mappedProductA3, product2.getAtom(0));\n\n    }", "signature": "void testMapping()", "full_signature": "@Test public void testMapping()", "class_method_signature": "RadicalChargeSiteInitiationHReactionTest.testMapping()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "getAtomContainer", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getBond", "setFlag", "getBond", "setParameter", "add", "setParameterList", "initiate", "getAtomContainer", "getProducts", "getReaction", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "getMappingCount", "getReaction", "getMappedChemObject", "getReaction", "getAtom", "assertEquals", "getAtom", "getMappedChemObject", "getReaction", "getAtom", "assertEquals", "getAtom", "getMappedChemObject", "getReaction", "getAtom", "assertEquals", "getAtom"]}, "focal_class": {"identifier": "RadicalChargeSiteInitiationHReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory\n                                               .createLoggingTool(RadicalChargeSiteInitiationReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory\n                                               .createLoggingTool(RadicalChargeSiteInitiationReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "RadicalChargeSiteInitiationHReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " RadicalChargeSiteInitiationHReaction()", "full_signature": "public  RadicalChargeSiteInitiationHReaction()", "class_method_signature": "RadicalChargeSiteInitiationHReaction.RadicalChargeSiteInitiationHReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "RadicalChargeSiteInitiationHReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RadicalChargeSiteInitiationHReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "RadicalChargeSiteInitiationHReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/RadicalChargeSiteInitiationHReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n        logger.debug(\"initiate reaction: RadicalChargeSiteInitiationHReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"RadicalChargeSiteInitiationHReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"RadicalChargeSiteInitiationHReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IAtom> atoms = reactants.getAtomContainer(0).atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atomi = atoms.next();\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && reactant.getConnectedSingleElectronsCount(atomi) == 1\n                    && atomi.getFormalCharge() == 1) {\n\n                Iterator<IBond> bondis = reactant.getConnectedBondsList(atomi).iterator();\n\n                while (bondis.hasNext()) {\n                    IBond bondi = bondis.next();\n\n                    if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.SINGLE) {\n\n                        IAtom atomj = bondi.getOther(atomi);\n                        if (atomj.getFlag(CDKConstants.REACTIVE_CENTER) && atomj.getFormalCharge() == 0) {\n\n                            Iterator<IBond> bondjs = reactant.getConnectedBondsList(atomj).iterator();\n                            while (bondjs.hasNext()) {\n                                IBond bondj = bondjs.next();\n\n                                if (bondj.equals(bondi)) continue;\n\n                                if (bondj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                        && bondj.getOrder() == IBond.Order.SINGLE) {\n\n                                    IAtom atomk = bondj.getOther(atomj);\n                                    if (atomk.getFlag(CDKConstants.REACTIVE_CENTER) && atomk.getSymbol().equals(\"H\")\n                                            && atomk.getFormalCharge() == 0) {\n\n                                        ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                                        atomList.add(atomi);\n                                        atomList.add(atomj);\n                                        atomList.add(atomk);\n                                        ArrayList<IBond> bondList = new ArrayList<IBond>();\n                                        bondList.add(bondi);\n                                        bondList.add(bondj);\n\n                                        IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(\n                                                IAtomContainerSet.class);\n                                        moleculeSet.addAtomContainer(reactant);\n                                        IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                                        if (reaction == null)\n                                            continue;\n                                        else\n                                            setOfReactions.addReaction(reaction);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "RadicalChargeSiteInitiationHReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "getAtomContainer", "hasNext", "next", "getFlag", "getConnectedSingleElectronsCount", "getFormalCharge", "iterator", "getConnectedBondsList", "hasNext", "next", "getFlag", "getOrder", "getOther", "getFlag", "getFormalCharge", "iterator", "getConnectedBondsList", "hasNext", "next", "equals", "getFlag", "getOrder", "getOther", "getFlag", "equals", "getSymbol", "getFormalCharge", "add", "add", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}