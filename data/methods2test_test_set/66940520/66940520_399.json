{"test_class": {"identifier": "JdbcAnalyticsManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n    private SystemSettingManager systemSettingManager;", "modifier": "@Mock\n    private", "type": "SystemSettingManager", "declarator": "systemSettingManager", "var_name": "systemSettingManager"}, {"original_string": "@Mock\n    private PartitionManager partitionManager;", "modifier": "@Mock\n    private", "type": "PartitionManager", "declarator": "partitionManager", "var_name": "partitionManager"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Mock\n    private SqlRowSet rowSet;", "modifier": "@Mock\n    private", "type": "SqlRowSet", "declarator": "rowSet", "var_name": "rowSet"}, {"original_string": "@Mock\n    private NestedIndicatorCyclicDependencyInspector nestedIndicatorCyclicDependencyInspector;", "modifier": "@Mock\n    private", "type": "NestedIndicatorCyclicDependencyInspector", "declarator": "nestedIndicatorCyclicDependencyInspector", "var_name": "nestedIndicatorCyclicDependencyInspector"}, {"original_string": "@Captor\n    private ArgumentCaptor<String> sql;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<String>", "declarator": "sql", "var_name": "sql"}, {"original_string": "private JdbcAnalyticsManager subject;", "modifier": "private", "type": "JdbcAnalyticsManager", "declarator": "subject", "var_name": "subject"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/data/JdbcAnalyticsManagerTest.java"}, "test_case": {"identifier": "verifyQueryGeneratedWhenDataElementHasLastInPeriodAggregationType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyQueryGeneratedWhenDataElementHasLastInPeriodAggregationType()\n    {\n        DataQueryParams params = createParams( AggregationType.LAST_IN_PERIOD );\n\n        subject.getAggregatedDataValues( params, AnalyticsTableType.DATA_VALUE, 20000 );\n\n        assertExpectedLastSql( \"desc\" );\n    }", "signature": "void verifyQueryGeneratedWhenDataElementHasLastInPeriodAggregationType()", "full_signature": "@Test public void verifyQueryGeneratedWhenDataElementHasLastInPeriodAggregationType()", "class_method_signature": "JdbcAnalyticsManagerTest.verifyQueryGeneratedWhenDataElementHasLastInPeriodAggregationType()", "testcase": true, "constructor": false, "invocations": ["createParams", "getAggregatedDataValues", "assertExpectedLastSql"]}, "focal_class": {"identifier": "JdbcAnalyticsManager", "superclass": "", "interfaces": "implements AnalyticsManager", "fields": [{"original_string": "private static final String COL_APPROVALLEVEL = \"approvallevel\";", "modifier": "private static final", "type": "String", "declarator": "COL_APPROVALLEVEL = \"approvallevel\"", "var_name": "COL_APPROVALLEVEL"}, {"original_string": "private static final int LAST_VALUE_YEARS_OFFSET = -10;", "modifier": "private static final", "type": "int", "declarator": "LAST_VALUE_YEARS_OFFSET = -10", "var_name": "LAST_VALUE_YEARS_OFFSET"}, {"original_string": "private static final Map<MeasureFilter, String> OPERATOR_SQL_MAP = ImmutableMap.<MeasureFilter, String>builder()\n        .put( MeasureFilter.EQ, \"=\" )\n        .put( MeasureFilter.GT, \">\" )\n        .put( MeasureFilter.GE, \">=\" )\n        .put( MeasureFilter.LT, \"<\" )\n        .put( MeasureFilter.LE, \"<=\" )\n        .build();", "modifier": "private static final", "type": "Map<MeasureFilter, String>", "declarator": "OPERATOR_SQL_MAP = ImmutableMap.<MeasureFilter, String>builder()\n        .put( MeasureFilter.EQ, \"=\" )\n        .put( MeasureFilter.GT, \">\" )\n        .put( MeasureFilter.GE, \">=\" )\n        .put( MeasureFilter.LT, \"<\" )\n        .put( MeasureFilter.LE, \"<=\" )\n        .build()", "var_name": "OPERATOR_SQL_MAP"}, {"original_string": "private final QueryPlanner queryPlanner;", "modifier": "private final", "type": "QueryPlanner", "declarator": "queryPlanner", "var_name": "queryPlanner"}, {"original_string": "private final JdbcTemplate jdbcTemplate;", "modifier": "private final", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "methods": [{"identifier": "JdbcAnalyticsManager", "parameters": "( QueryPlanner queryPlanner, @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )", "modifiers": "public", "return": "", "signature": " JdbcAnalyticsManager( QueryPlanner queryPlanner, @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )", "full_signature": "public  JdbcAnalyticsManager( QueryPlanner queryPlanner, @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )", "class_method_signature": "JdbcAnalyticsManager.JdbcAnalyticsManager( QueryPlanner queryPlanner, @Qualifier( \"readOnlyJdbcTemplate\" ) JdbcTemplate jdbcTemplate )", "testcase": false, "constructor": true}, {"identifier": "getAggregatedDataValues", "parameters": "( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "modifiers": "@Override @Async public", "return": "Future<Map<String, Object>>", "signature": "Future<Map<String, Object>> getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "full_signature": "@Override @Async public Future<Map<String, Object>> getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "class_method_signature": "JdbcAnalyticsManager.getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "testcase": false, "constructor": false}, {"identifier": "replaceDataPeriodsWithAggregationPeriods", "parameters": "( Map<String, Object> dataValueMap,\n        DataQueryParams params, ListMap<DimensionalItemObject, DimensionalItemObject> dataPeriodAggregationPeriodMap )", "modifiers": "@Override public", "return": "void", "signature": "void replaceDataPeriodsWithAggregationPeriods( Map<String, Object> dataValueMap,\n        DataQueryParams params, ListMap<DimensionalItemObject, DimensionalItemObject> dataPeriodAggregationPeriodMap )", "full_signature": "@Override public void replaceDataPeriodsWithAggregationPeriods( Map<String, Object> dataValueMap,\n        DataQueryParams params, ListMap<DimensionalItemObject, DimensionalItemObject> dataPeriodAggregationPeriodMap )", "class_method_signature": "JdbcAnalyticsManager.replaceDataPeriodsWithAggregationPeriods( Map<String, Object> dataValueMap,\n        DataQueryParams params, ListMap<DimensionalItemObject, DimensionalItemObject> dataPeriodAggregationPeriodMap )", "testcase": false, "constructor": false}, {"identifier": "getSelectClause", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getSelectClause( DataQueryParams params )", "full_signature": "private String getSelectClause( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getSelectClause( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getNumericValueColumn", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getNumericValueColumn( DataQueryParams params )", "full_signature": "private String getNumericValueColumn( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getNumericValueColumn( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getFromClause", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getFromClause( DataQueryParams params )", "full_signature": "private String getFromClause( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getFromClause( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getFromSourceClause", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getFromSourceClause( DataQueryParams params )", "full_signature": "private String getFromSourceClause( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getFromSourceClause( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getWhereClause", "parameters": "( DataQueryParams params, AnalyticsTableType tableType )", "modifiers": "private", "return": "String", "signature": "String getWhereClause( DataQueryParams params, AnalyticsTableType tableType )", "full_signature": "private String getWhereClause( DataQueryParams params, AnalyticsTableType tableType )", "class_method_signature": "JdbcAnalyticsManager.getWhereClause( DataQueryParams params, AnalyticsTableType tableType )", "testcase": false, "constructor": false}, {"identifier": "getGroupByClause", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getGroupByClause( DataQueryParams params )", "full_signature": "private String getGroupByClause( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getGroupByClause( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getFirstOrLastValueSubquerySql", "parameters": "(DataQueryParams params, Date earliest )", "modifiers": "private", "return": "String", "signature": "String getFirstOrLastValueSubquerySql(DataQueryParams params, Date earliest )", "full_signature": "private String getFirstOrLastValueSubquerySql(DataQueryParams params, Date earliest )", "class_method_signature": "JdbcAnalyticsManager.getFirstOrLastValueSubquerySql(DataQueryParams params, Date earliest )", "testcase": false, "constructor": false}, {"identifier": "getFirstOrLastValueSubqueryQuotedColumns", "parameters": "(DataQueryParams params )", "modifiers": "private", "return": "List<String>", "signature": "List<String> getFirstOrLastValueSubqueryQuotedColumns(DataQueryParams params )", "full_signature": "private List<String> getFirstOrLastValueSubqueryQuotedColumns(DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getFirstOrLastValueSubqueryQuotedColumns(DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getPreMeasureCriteriaSubquerySql", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getPreMeasureCriteriaSubquerySql( DataQueryParams params )", "full_signature": "private String getPreMeasureCriteriaSubquerySql( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getPreMeasureCriteriaSubquerySql( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getMeasureCriteriaSql", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "String", "signature": "String getMeasureCriteriaSql( DataQueryParams params )", "full_signature": "private String getMeasureCriteriaSql( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.getMeasureCriteriaSql( DataQueryParams params )", "testcase": false, "constructor": false}, {"identifier": "getKeyValueMap", "parameters": "( DataQueryParams params, String sql, int maxLimit )", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getKeyValueMap( DataQueryParams params, String sql, int maxLimit )", "full_signature": "private Map<String, Object> getKeyValueMap( DataQueryParams params, String sql, int maxLimit )", "class_method_signature": "JdbcAnalyticsManager.getKeyValueMap( DataQueryParams params, String sql, int maxLimit )", "testcase": false, "constructor": false}, {"identifier": "getCommaDelimitedQuotedColumns", "parameters": "( Collection<DimensionalObject> dimensions )", "modifiers": "private", "return": "String", "signature": "String getCommaDelimitedQuotedColumns( Collection<DimensionalObject> dimensions )", "full_signature": "private String getCommaDelimitedQuotedColumns( Collection<DimensionalObject> dimensions )", "class_method_signature": "JdbcAnalyticsManager.getCommaDelimitedQuotedColumns( Collection<DimensionalObject> dimensions )", "testcase": false, "constructor": false}, {"identifier": "assertQuery", "parameters": "( DataQueryParams params )", "modifiers": "private", "return": "void", "signature": "void assertQuery( DataQueryParams params )", "full_signature": "private void assertQuery( DataQueryParams params )", "class_method_signature": "JdbcAnalyticsManager.assertQuery( DataQueryParams params )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/data/JdbcAnalyticsManager.java"}, "focal_method": {"identifier": "getAggregatedDataValues", "parameters": "( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "modifiers": "@Override @Async public", "return": "Future<Map<String, Object>>", "body": "@Override\n    @Async\n    public Future<Map<String, Object>> getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )\n    {\n        assertQuery( params );\n\n        try\n        {\n            ListMap<DimensionalItemObject, DimensionalItemObject> dataPeriodAggregationPeriodMap =\n                params.getDataPeriodAggregationPeriodMap();\n\n            if ( params.isDisaggregation() && params.hasDataPeriodType() )\n            {\n                params = DataQueryParams.newBuilder( params )\n                    .withDataPeriodsForAggregationPeriods( dataPeriodAggregationPeriodMap )\n                    .build();\n\n                params = queryPlanner.assignPartitionsFromQueryPeriods( params, tableType );\n            }\n\n            String sql = getSelectClause( params );\n\n            sql += getFromClause( params );\n\n            sql += getWhereClause( params, tableType );\n\n            sql += getGroupByClause( params );\n\n            if ( params.hasMeasureCriteria() && params.isDataType( DataType.NUMERIC ) )\n            {\n                sql += getMeasureCriteriaSql( params );\n            }\n\n            log.debug( sql );\n\n            Map<String, Object> map;\n\n            try\n            {\n                map = getKeyValueMap( params, sql, maxLimit );\n            }\n            catch ( BadSqlGrammarException ex )\n            {\n                log.info( AnalyticsUtils.ERR_MSG_TABLE_NOT_EXISTING, ex );\n                return new AsyncResult<>( Maps.newHashMap() );\n            }\n\n            replaceDataPeriodsWithAggregationPeriods( map, params, dataPeriodAggregationPeriodMap );\n\n            return new AsyncResult<>( map );\n        }\n        catch ( DataAccessResourceFailureException ex )\n        {\n            log.warn( ErrorCode.E7131.getMessage(), ex );\n            throw new QueryRuntimeException( ErrorCode.E7131, ex );\n        }\n        catch ( RuntimeException ex )\n        {\n            log.error( DebugUtils.getStackTrace( ex ) );\n            throw ex;\n        }\n    }", "signature": "Future<Map<String, Object>> getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "full_signature": "@Override @Async public Future<Map<String, Object>> getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "class_method_signature": "JdbcAnalyticsManager.getAggregatedDataValues( DataQueryParams params, AnalyticsTableType tableType, int maxLimit )", "testcase": false, "constructor": false, "invocations": ["assertQuery", "getDataPeriodAggregationPeriodMap", "isDisaggregation", "hasDataPeriodType", "build", "withDataPeriodsForAggregationPeriods", "newBuilder", "assignPartitionsFromQueryPeriods", "getSelectClause", "getFromClause", "getWhereClause", "getGroupByClause", "hasMeasureCriteria", "isDataType", "getMeasureCriteriaSql", "debug", "getKeyValueMap", "info", "newHashMap", "replaceDataPeriodsWithAggregationPeriods", "warn", "getMessage", "error", "getStackTrace"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}