{"test_class": {"identifier": "OFSwitchManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Controller controller;", "modifier": "private", "type": "Controller", "declarator": "controller", "var_name": "controller"}, {"original_string": "private OFSwitchManager switchManager;", "modifier": "private", "type": "OFSwitchManager", "declarator": "switchManager", "var_name": "switchManager"}, {"original_string": "private final OFFactory factory = OFFactories.getFactory(OFVersion.OF_10);", "modifier": "private final", "type": "OFFactory", "declarator": "factory = OFFactories.getFactory(OFVersion.OF_10)", "var_name": "factory"}, {"original_string": "private static DatapathId DATAPATH_ID_0 = DatapathId.of(0);", "modifier": "private static", "type": "DatapathId", "declarator": "DATAPATH_ID_0 = DatapathId.of(0)", "var_name": "DATAPATH_ID_0"}, {"original_string": "private static DatapathId DATAPATH_ID_1 = DatapathId.of(1);", "modifier": "private static", "type": "DatapathId", "declarator": "DATAPATH_ID_1 = DatapathId.of(1)", "var_name": "DATAPATH_ID_1"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/core/internal/OFSwitchManagerTest.java"}, "test_case": {"identifier": "testGetActiveSwitch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testGetActiveSwitch() {\n       MockOFConnection connection = new MockOFConnection(DATAPATH_ID_1, OFAuxId.MAIN);\n       IOFSwitchBackend sw = new MockOFSwitchImpl(connection);\n       sw.setStatus(SwitchStatus.HANDSHAKE);\n\n       assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));\n       switchManager.switchAdded(sw);\n       assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));\n       sw.setStatus(SwitchStatus.MASTER);\n       assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1));\n       sw.setStatus(SwitchStatus.QUARANTINED);\n       assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));\n       sw.setStatus(SwitchStatus.SLAVE);\n       assertEquals(sw, switchManager.getActiveSwitch(DATAPATH_ID_1));\n       sw.setStatus(SwitchStatus.DISCONNECTED);\n       assertNull(switchManager.getActiveSwitch(DATAPATH_ID_1));\n       // we don't care for updates. drain queue.\n       controller.processUpdateQueueForTesting();\n   }", "signature": "void testGetActiveSwitch()", "full_signature": "@Test public void testGetActiveSwitch()", "class_method_signature": "OFSwitchManagerTest.testGetActiveSwitch()", "testcase": true, "constructor": false, "invocations": ["setStatus", "assertNull", "getActiveSwitch", "switchAdded", "assertNull", "getActiveSwitch", "setStatus", "assertEquals", "getActiveSwitch", "setStatus", "assertNull", "getActiveSwitch", "setStatus", "assertEquals", "getActiveSwitch", "setStatus", "assertNull", "getActiveSwitch", "processUpdateQueueForTesting"]}, "focal_class": {"identifier": "OFSwitchManager", "superclass": "", "interfaces": "implements IOFSwitchManager, INewOFConnectionListener, IHAListener, IFloodlightModule, IOFSwitchService, IStoreListener<DatapathId>", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(OFSwitchManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(OFSwitchManager.class)", "var_name": "log"}, {"original_string": "private volatile OFControllerRole role;", "modifier": "private volatile", "type": "OFControllerRole", "declarator": "role", "var_name": "role"}, {"original_string": "private SwitchManagerCounters counters;", "modifier": "private", "type": "SwitchManagerCounters", "declarator": "counters", "var_name": "counters"}, {"original_string": "private ISyncService syncService;", "modifier": "private", "type": "ISyncService", "declarator": "syncService", "var_name": "syncService"}, {"original_string": "private IStoreClient<DatapathId, SwitchSyncRepresentation> storeClient;", "modifier": "private", "type": "IStoreClient<DatapathId, SwitchSyncRepresentation>", "declarator": "storeClient", "var_name": "storeClient"}, {"original_string": "public static final String SWITCH_SYNC_STORE_NAME = OFSwitchManager.class.getCanonicalName() + \".stateStore\";", "modifier": "public static final", "type": "String", "declarator": "SWITCH_SYNC_STORE_NAME = OFSwitchManager.class.getCanonicalName() + \".stateStore\"", "var_name": "SWITCH_SYNC_STORE_NAME"}, {"original_string": "private static String keyStorePassword;", "modifier": "private static", "type": "String", "declarator": "keyStorePassword", "var_name": "keyStorePassword"}, {"original_string": "private static String keyStore;", "modifier": "private static", "type": "String", "declarator": "keyStore", "var_name": "keyStore"}, {"original_string": "protected static boolean clearTablesOnInitialConnectAsMaster = false;", "modifier": "protected static", "type": "boolean", "declarator": "clearTablesOnInitialConnectAsMaster = false", "var_name": "clearTablesOnInitialConnectAsMaster"}, {"original_string": "protected static boolean clearTablesOnEachTransitionToMaster = false;", "modifier": "protected static", "type": "boolean", "declarator": "clearTablesOnEachTransitionToMaster = false", "var_name": "clearTablesOnEachTransitionToMaster"}, {"original_string": "protected static Map<DatapathId, TableId> forwardToControllerFlowsUpToTableByDpid;", "modifier": "protected static", "type": "Map<DatapathId, TableId>", "declarator": "forwardToControllerFlowsUpToTableByDpid", "var_name": "forwardToControllerFlowsUpToTableByDpid"}, {"original_string": "protected static TableId forwardToControllerFlowsUpToTable = TableId.of(4);", "modifier": "protected static", "type": "TableId", "declarator": "forwardToControllerFlowsUpToTable = TableId.of(4)", "var_name": "forwardToControllerFlowsUpToTable"}, {"original_string": "protected static List<U32> ofBitmaps;", "modifier": "protected static", "type": "List<U32>", "declarator": "ofBitmaps", "var_name": "ofBitmaps"}, {"original_string": "protected static OFFactory defaultFactory;", "modifier": "protected static", "type": "OFFactory", "declarator": "defaultFactory", "var_name": "defaultFactory"}, {"original_string": "private ConcurrentHashMap<DatapathId, OFSwitchHandshakeHandler> switchHandlers;", "modifier": "private", "type": "ConcurrentHashMap<DatapathId, OFSwitchHandshakeHandler>", "declarator": "switchHandlers", "var_name": "switchHandlers"}, {"original_string": "private ConcurrentHashMap<DatapathId, IOFSwitchBackend> switches;", "modifier": "private", "type": "ConcurrentHashMap<DatapathId, IOFSwitchBackend>", "declarator": "switches", "var_name": "switches"}, {"original_string": "private ConcurrentHashMap<DatapathId, IOFSwitch> syncedSwitches;", "modifier": "private", "type": "ConcurrentHashMap<DatapathId, IOFSwitch>", "declarator": "syncedSwitches", "var_name": "syncedSwitches"}, {"original_string": "private ISwitchDriverRegistry driverRegistry;", "modifier": "private", "type": "ISwitchDriverRegistry", "declarator": "driverRegistry", "var_name": "driverRegistry"}, {"original_string": "private Set<LogicalOFMessageCategory> logicalOFMessageCategories = new CopyOnWriteArraySet<LogicalOFMessageCategory>();", "modifier": "private", "type": "Set<LogicalOFMessageCategory>", "declarator": "logicalOFMessageCategories = new CopyOnWriteArraySet<LogicalOFMessageCategory>()", "var_name": "logicalOFMessageCategories"}, {"original_string": "private final List<IAppHandshakePluginFactory> handshakePlugins = new CopyOnWriteArrayList<IAppHandshakePluginFactory>();", "modifier": "private final", "type": "List<IAppHandshakePluginFactory>", "declarator": "handshakePlugins = new CopyOnWriteArrayList<IAppHandshakePluginFactory>()", "var_name": "handshakePlugins"}, {"original_string": "private int numRequiredConnections = -1;", "modifier": "private", "type": "int", "declarator": "numRequiredConnections = -1", "var_name": "numRequiredConnections"}, {"original_string": "protected IEventCategory<SwitchEvent> evSwitch;", "modifier": "protected", "type": "IEventCategory<SwitchEvent>", "declarator": "evSwitch", "var_name": "evSwitch"}, {"original_string": "protected Set<IOFSwitchListener> switchListeners;", "modifier": "protected", "type": "Set<IOFSwitchListener>", "declarator": "switchListeners", "var_name": "switchListeners"}, {"original_string": "private IFloodlightProviderService floodlightProvider;", "modifier": "private", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}, {"original_string": "private IDebugEventService debugEventService;", "modifier": "private", "type": "IDebugEventService", "declarator": "debugEventService", "var_name": "debugEventService"}, {"original_string": "private IDebugCounterService debugCounterService;", "modifier": "private", "type": "IDebugCounterService", "declarator": "debugCounterService", "var_name": "debugCounterService"}, {"original_string": "private NioEventLoopGroup bossGroup;", "modifier": "private", "type": "NioEventLoopGroup", "declarator": "bossGroup", "var_name": "bossGroup"}, {"original_string": "private NioEventLoopGroup workerGroup;", "modifier": "private", "type": "NioEventLoopGroup", "declarator": "workerGroup", "var_name": "workerGroup"}, {"original_string": "private DefaultChannelGroup cg;", "modifier": "private", "type": "DefaultChannelGroup", "declarator": "cg", "var_name": "cg"}], "methods": [{"identifier": "transitionToActive", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void transitionToActive()", "full_signature": "@Override public void transitionToActive()", "class_method_signature": "OFSwitchManager.transitionToActive()", "testcase": false, "constructor": false}, {"identifier": "transitionToStandby", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void transitionToStandby()", "full_signature": "@Override public void transitionToStandby()", "class_method_signature": "OFSwitchManager.transitionToStandby()", "testcase": false, "constructor": false}, {"identifier": "getCounters", "parameters": "()", "modifiers": "@Override public", "return": "SwitchManagerCounters", "signature": "SwitchManagerCounters getCounters()", "full_signature": "@Override public SwitchManagerCounters getCounters()", "class_method_signature": "OFSwitchManager.getCounters()", "testcase": false, "constructor": false}, {"identifier": "addUpdateToQueue", "parameters": "(IUpdate iUpdate)", "modifiers": "private", "return": "void", "signature": "void addUpdateToQueue(IUpdate iUpdate)", "full_signature": "private void addUpdateToQueue(IUpdate iUpdate)", "class_method_signature": "OFSwitchManager.addUpdateToQueue(IUpdate iUpdate)", "testcase": false, "constructor": false}, {"identifier": "switchAdded", "parameters": "(IOFSwitchBackend sw)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void switchAdded(IOFSwitchBackend sw)", "full_signature": "@Override public synchronized void switchAdded(IOFSwitchBackend sw)", "class_method_signature": "OFSwitchManager.switchAdded(IOFSwitchBackend sw)", "testcase": false, "constructor": false}, {"identifier": "switchStatusChanged", "parameters": "(IOFSwitchBackend sw, SwitchStatus oldStatus, SwitchStatus newStatus)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void switchStatusChanged(IOFSwitchBackend sw, SwitchStatus oldStatus, SwitchStatus newStatus)", "full_signature": "@Override public synchronized void switchStatusChanged(IOFSwitchBackend sw, SwitchStatus oldStatus, SwitchStatus newStatus)", "class_method_signature": "OFSwitchManager.switchStatusChanged(IOFSwitchBackend sw, SwitchStatus oldStatus, SwitchStatus newStatus)", "testcase": false, "constructor": false}, {"identifier": "switchDisconnected", "parameters": "(IOFSwitchBackend sw)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void switchDisconnected(IOFSwitchBackend sw)", "full_signature": "@Override public synchronized void switchDisconnected(IOFSwitchBackend sw)", "class_method_signature": "OFSwitchManager.switchDisconnected(IOFSwitchBackend sw)", "testcase": false, "constructor": false}, {"identifier": "handshakeDisconnected", "parameters": "(DatapathId dpid)", "modifiers": "@Override public", "return": "void", "signature": "void handshakeDisconnected(DatapathId dpid)", "full_signature": "@Override public void handshakeDisconnected(DatapathId dpid)", "class_method_signature": "OFSwitchManager.handshakeDisconnected(DatapathId dpid)", "testcase": false, "constructor": false}, {"identifier": "getActiveSwitches", "parameters": "()", "modifiers": "public", "return": "Iterable<IOFSwitch>", "signature": "Iterable<IOFSwitch> getActiveSwitches()", "full_signature": "public Iterable<IOFSwitch> getActiveSwitches()", "class_method_signature": "OFSwitchManager.getActiveSwitches()", "testcase": false, "constructor": false}, {"identifier": "getAllSwitchMap", "parameters": "(boolean showInvisible)", "modifiers": "public", "return": "Map<DatapathId, IOFSwitch>", "signature": "Map<DatapathId, IOFSwitch> getAllSwitchMap(boolean showInvisible)", "full_signature": "public Map<DatapathId, IOFSwitch> getAllSwitchMap(boolean showInvisible)", "class_method_signature": "OFSwitchManager.getAllSwitchMap(boolean showInvisible)", "testcase": false, "constructor": false}, {"identifier": "getAllSwitchMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<DatapathId, IOFSwitch>", "signature": "Map<DatapathId, IOFSwitch> getAllSwitchMap()", "full_signature": "@Override public Map<DatapathId, IOFSwitch> getAllSwitchMap()", "class_method_signature": "OFSwitchManager.getAllSwitchMap()", "testcase": false, "constructor": false}, {"identifier": "getAllSwitchDpids", "parameters": "()", "modifiers": "@Override public", "return": "Set<DatapathId>", "signature": "Set<DatapathId> getAllSwitchDpids()", "full_signature": "@Override public Set<DatapathId> getAllSwitchDpids()", "class_method_signature": "OFSwitchManager.getAllSwitchDpids()", "testcase": false, "constructor": false}, {"identifier": "getAllSwitchDpids", "parameters": "(boolean showInvisible)", "modifiers": "public", "return": "Set<DatapathId>", "signature": "Set<DatapathId> getAllSwitchDpids(boolean showInvisible)", "full_signature": "public Set<DatapathId> getAllSwitchDpids(boolean showInvisible)", "class_method_signature": "OFSwitchManager.getAllSwitchDpids(boolean showInvisible)", "testcase": false, "constructor": false}, {"identifier": "getSwitch", "parameters": "(DatapathId dpid)", "modifiers": "@Override public", "return": "IOFSwitch", "signature": "IOFSwitch getSwitch(DatapathId dpid)", "full_signature": "@Override public IOFSwitch getSwitch(DatapathId dpid)", "class_method_signature": "OFSwitchManager.getSwitch(DatapathId dpid)", "testcase": false, "constructor": false}, {"identifier": "getActiveSwitch", "parameters": "(DatapathId dpid)", "modifiers": "@Override public", "return": "IOFSwitch", "signature": "IOFSwitch getActiveSwitch(DatapathId dpid)", "full_signature": "@Override public IOFSwitch getActiveSwitch(DatapathId dpid)", "class_method_signature": "OFSwitchManager.getActiveSwitch(DatapathId dpid)", "testcase": false, "constructor": false}, {"identifier": "connectionOpened", "parameters": "(IOFConnectionBackend connection, OFFeaturesReply featuresReply)", "modifiers": "@Override public", "return": "void", "signature": "void connectionOpened(IOFConnectionBackend connection, OFFeaturesReply featuresReply)", "full_signature": "@Override public void connectionOpened(IOFConnectionBackend connection, OFFeaturesReply featuresReply)", "class_method_signature": "OFSwitchManager.connectionOpened(IOFConnectionBackend connection, OFFeaturesReply featuresReply)", "testcase": false, "constructor": false}, {"identifier": "addSwitchEvent", "parameters": "(DatapathId dpid, String reason, boolean flushNow)", "modifiers": "@Override public", "return": "void", "signature": "void addSwitchEvent(DatapathId dpid, String reason, boolean flushNow)", "full_signature": "@Override public void addSwitchEvent(DatapathId dpid, String reason, boolean flushNow)", "class_method_signature": "OFSwitchManager.addSwitchEvent(DatapathId dpid, String reason, boolean flushNow)", "testcase": false, "constructor": false}, {"identifier": "notifyPortChanged", "parameters": "(IOFSwitchBackend sw,\n\t\t\tOFPortDesc port,\n\t\t\tPortChangeType changeType)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void notifyPortChanged(IOFSwitchBackend sw,\n\t\t\tOFPortDesc port,\n\t\t\tPortChangeType changeType)", "full_signature": "@Override public synchronized void notifyPortChanged(IOFSwitchBackend sw,\n\t\t\tOFPortDesc port,\n\t\t\tPortChangeType changeType)", "class_method_signature": "OFSwitchManager.notifyPortChanged(IOFSwitchBackend sw,\n\t\t\tOFPortDesc port,\n\t\t\tPortChangeType changeType)", "testcase": false, "constructor": false}, {"identifier": "getOFSwitchInstance", "parameters": "(IOFConnectionBackend connection,\n\t\t\tSwitchDescription description,\n\t\t\tOFFactory factory, DatapathId datapathId)", "modifiers": "@Override public", "return": "IOFSwitchBackend", "signature": "IOFSwitchBackend getOFSwitchInstance(IOFConnectionBackend connection,\n\t\t\tSwitchDescription description,\n\t\t\tOFFactory factory, DatapathId datapathId)", "full_signature": "@Override public IOFSwitchBackend getOFSwitchInstance(IOFConnectionBackend connection,\n\t\t\tSwitchDescription description,\n\t\t\tOFFactory factory, DatapathId datapathId)", "class_method_signature": "OFSwitchManager.getOFSwitchInstance(IOFConnectionBackend connection,\n\t\t\tSwitchDescription description,\n\t\t\tOFFactory factory, DatapathId datapathId)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(IOFSwitchBackend sw, OFMessage m, FloodlightContext bContext)", "modifiers": "@Override public", "return": "void", "signature": "void handleMessage(IOFSwitchBackend sw, OFMessage m, FloodlightContext bContext)", "full_signature": "@Override public void handleMessage(IOFSwitchBackend sw, OFMessage m, FloodlightContext bContext)", "class_method_signature": "OFSwitchManager.handleMessage(IOFSwitchBackend sw, OFMessage m, FloodlightContext bContext)", "testcase": false, "constructor": false}, {"identifier": "handleOutgoingMessage", "parameters": "(IOFSwitch sw, OFMessage m)", "modifiers": "@Override public", "return": "void", "signature": "void handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "full_signature": "@Override public void handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "class_method_signature": "OFSwitchManager.handleOutgoingMessage(IOFSwitch sw, OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "addOFSwitchDriver", "parameters": "(String manufacturerDescriptionPrefix,\n\t\t\tIOFSwitchDriver driver)", "modifiers": "@Override public", "return": "void", "signature": "void addOFSwitchDriver(String manufacturerDescriptionPrefix,\n\t\t\tIOFSwitchDriver driver)", "full_signature": "@Override public void addOFSwitchDriver(String manufacturerDescriptionPrefix,\n\t\t\tIOFSwitchDriver driver)", "class_method_signature": "OFSwitchManager.addOFSwitchDriver(String manufacturerDescriptionPrefix,\n\t\t\tIOFSwitchDriver driver)", "testcase": false, "constructor": false}, {"identifier": "getSwitchHandshakeHandlers", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableList<OFSwitchHandshakeHandler>", "signature": "ImmutableList<OFSwitchHandshakeHandler> getSwitchHandshakeHandlers()", "full_signature": "@Override public ImmutableList<OFSwitchHandshakeHandler> getSwitchHandshakeHandlers()", "class_method_signature": "OFSwitchManager.getSwitchHandshakeHandlers()", "testcase": false, "constructor": false}, {"identifier": "getNumRequiredConnections", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumRequiredConnections()", "full_signature": "@Override public int getNumRequiredConnections()", "class_method_signature": "OFSwitchManager.getNumRequiredConnections()", "testcase": false, "constructor": false}, {"identifier": "getLogicalOFMessageCategories", "parameters": "()", "modifiers": "public", "return": "Set<LogicalOFMessageCategory>", "signature": "Set<LogicalOFMessageCategory> getLogicalOFMessageCategories()", "full_signature": "public Set<LogicalOFMessageCategory> getLogicalOFMessageCategories()", "class_method_signature": "OFSwitchManager.getLogicalOFMessageCategories()", "testcase": false, "constructor": false}, {"identifier": "calcNumRequiredConnections", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int calcNumRequiredConnections()", "full_signature": "private int calcNumRequiredConnections()", "class_method_signature": "OFSwitchManager.calcNumRequiredConnections()", "testcase": false, "constructor": false}, {"identifier": "addOFSwitchListener", "parameters": "(IOFSwitchListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addOFSwitchListener(IOFSwitchListener listener)", "full_signature": "@Override public void addOFSwitchListener(IOFSwitchListener listener)", "class_method_signature": "OFSwitchManager.addOFSwitchListener(IOFSwitchListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOFSwitchListener", "parameters": "(IOFSwitchListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeOFSwitchListener(IOFSwitchListener listener)", "full_signature": "@Override public void removeOFSwitchListener(IOFSwitchListener listener)", "class_method_signature": "OFSwitchManager.removeOFSwitchListener(IOFSwitchListener listener)", "testcase": false, "constructor": false}, {"identifier": "registerLogicalOFMessageCategory", "parameters": "(LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "void", "signature": "void registerLogicalOFMessageCategory(LogicalOFMessageCategory category)", "full_signature": "@Override public void registerLogicalOFMessageCategory(LogicalOFMessageCategory category)", "class_method_signature": "OFSwitchManager.registerLogicalOFMessageCategory(LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "isCategoryRegistered", "parameters": "(LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCategoryRegistered(LogicalOFMessageCategory category)", "full_signature": "@Override public boolean isCategoryRegistered(LogicalOFMessageCategory category)", "class_method_signature": "OFSwitchManager.isCategoryRegistered(LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "getSwitchRepresentation", "parameters": "(DatapathId dpid)", "modifiers": "@Override public", "return": "SwitchRepresentation", "signature": "SwitchRepresentation getSwitchRepresentation(DatapathId dpid)", "full_signature": "@Override public SwitchRepresentation getSwitchRepresentation(DatapathId dpid)", "class_method_signature": "OFSwitchManager.getSwitchRepresentation(DatapathId dpid)", "testcase": false, "constructor": false}, {"identifier": "getSwitchRepresentations", "parameters": "()", "modifiers": "@Override public", "return": "List<SwitchRepresentation>", "signature": "List<SwitchRepresentation> getSwitchRepresentations()", "full_signature": "@Override public List<SwitchRepresentation> getSwitchRepresentations()", "class_method_signature": "OFSwitchManager.getSwitchRepresentations()", "testcase": false, "constructor": false}, {"identifier": "registerHandshakePlugin", "parameters": "(IAppHandshakePluginFactory factory)", "modifiers": "@Override public", "return": "void", "signature": "void registerHandshakePlugin(IAppHandshakePluginFactory factory)", "full_signature": "@Override public void registerHandshakePlugin(IAppHandshakePluginFactory factory)", "class_method_signature": "OFSwitchManager.registerHandshakePlugin(IAppHandshakePluginFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getHandshakePlugins", "parameters": "()", "modifiers": "@Override public", "return": "List<IAppHandshakePluginFactory>", "signature": "List<IAppHandshakePluginFactory> getHandshakePlugins()", "full_signature": "@Override public List<IAppHandshakePluginFactory> getHandshakePlugins()", "class_method_signature": "OFSwitchManager.getHandshakePlugins()", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "OFSwitchManager.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "OFSwitchManager.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "OFSwitchManager.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "OFSwitchManager.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "computeInitialFactory", "parameters": "(Set<OFVersion> ofVersions)", "modifiers": "private", "return": "OFFactory", "signature": "OFFactory computeInitialFactory(Set<OFVersion> ofVersions)", "full_signature": "private OFFactory computeInitialFactory(Set<OFVersion> ofVersions)", "class_method_signature": "OFSwitchManager.computeInitialFactory(Set<OFVersion> ofVersions)", "testcase": false, "constructor": false}, {"identifier": "computeOurVersionBitmaps", "parameters": "(Set<OFVersion> ofVersions)", "modifiers": "private", "return": "List<U32>", "signature": "List<U32> computeOurVersionBitmaps(Set<OFVersion> ofVersions)", "full_signature": "private List<U32> computeOurVersionBitmaps(Set<OFVersion> ofVersions)", "class_method_signature": "OFSwitchManager.computeOurVersionBitmaps(Set<OFVersion> ofVersions)", "testcase": false, "constructor": false}, {"identifier": "jsonToSwitchTableIdMap", "parameters": "(String json)", "modifiers": "private static", "return": "Map<DatapathId, TableId>", "signature": "Map<DatapathId, TableId> jsonToSwitchTableIdMap(String json)", "full_signature": "private static Map<DatapathId, TableId> jsonToSwitchTableIdMap(String json)", "class_method_signature": "OFSwitchManager.jsonToSwitchTableIdMap(String json)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "OFSwitchManager.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUpBase", "parameters": "(FloodlightModuleContext context)", "modifiers": "public", "return": "void", "signature": "void startUpBase(FloodlightModuleContext context)", "full_signature": "public void startUpBase(FloodlightModuleContext context)", "class_method_signature": "OFSwitchManager.startUpBase(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "bootstrapNetty", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void bootstrapNetty()", "full_signature": "public void bootstrapNetty()", "class_method_signature": "OFSwitchManager.bootstrapNetty()", "testcase": false, "constructor": false}, {"identifier": "loadLogicalCategories", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void loadLogicalCategories()", "full_signature": "public void loadLogicalCategories()", "class_method_signature": "OFSwitchManager.loadLogicalCategories()", "testcase": false, "constructor": false}, {"identifier": "registerDebugEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerDebugEvents()", "full_signature": "private void registerDebugEvents()", "class_method_signature": "OFSwitchManager.registerDebugEvents()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "OFSwitchManager.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(HAListenerTypeMarker type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(HAListenerTypeMarker type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(HAListenerTypeMarker type, String name)", "class_method_signature": "OFSwitchManager.isCallbackOrderingPrereq(HAListenerTypeMarker type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(HAListenerTypeMarker type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(HAListenerTypeMarker type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(HAListenerTypeMarker type, String name)", "class_method_signature": "OFSwitchManager.isCallbackOrderingPostreq(HAListenerTypeMarker type, String name)", "testcase": false, "constructor": false}, {"identifier": "controllerNodeIPsChanged", "parameters": "(Map<String, String> curControllerNodeIPs,\n\t\t\tMap<String, String> addedControllerNodeIPs,\n\t\t\tMap<String, String> removedControllerNodeIPs)", "modifiers": "@Override public", "return": "void", "signature": "void controllerNodeIPsChanged(Map<String, String> curControllerNodeIPs,\n\t\t\tMap<String, String> addedControllerNodeIPs,\n\t\t\tMap<String, String> removedControllerNodeIPs)", "full_signature": "@Override public void controllerNodeIPsChanged(Map<String, String> curControllerNodeIPs,\n\t\t\tMap<String, String> addedControllerNodeIPs,\n\t\t\tMap<String, String> removedControllerNodeIPs)", "class_method_signature": "OFSwitchManager.controllerNodeIPsChanged(Map<String, String> curControllerNodeIPs,\n\t\t\tMap<String, String> addedControllerNodeIPs,\n\t\t\tMap<String, String> removedControllerNodeIPs)", "testcase": false, "constructor": false}, {"identifier": "keysModified", "parameters": "(Iterator<DatapathId> keys, UpdateType type)", "modifiers": "@Override public", "return": "void", "signature": "void keysModified(Iterator<DatapathId> keys, UpdateType type)", "full_signature": "@Override public void keysModified(Iterator<DatapathId> keys, UpdateType type)", "class_method_signature": "OFSwitchManager.keysModified(Iterator<DatapathId> keys, UpdateType type)", "testcase": false, "constructor": false}, {"identifier": "switchRemovedFromStore", "parameters": "(DatapathId dpid)", "modifiers": "private synchronized", "return": "void", "signature": "void switchRemovedFromStore(DatapathId dpid)", "full_signature": "private synchronized void switchRemovedFromStore(DatapathId dpid)", "class_method_signature": "OFSwitchManager.switchRemovedFromStore(DatapathId dpid)", "testcase": false, "constructor": false}, {"identifier": "switchAddedToStore", "parameters": "(IOFSwitch sw)", "modifiers": "private synchronized", "return": "void", "signature": "void switchAddedToStore(IOFSwitch sw)", "full_signature": "private synchronized void switchAddedToStore(IOFSwitch sw)", "class_method_signature": "OFSwitchManager.switchAddedToStore(IOFSwitch sw)", "testcase": false, "constructor": false}, {"identifier": "sendNotificationsIfSwitchDiffers", "parameters": "(IOFSwitch oldSw, IOFSwitch newSw)", "modifiers": "private synchronized", "return": "void", "signature": "void sendNotificationsIfSwitchDiffers(IOFSwitch oldSw, IOFSwitch newSw)", "full_signature": "private synchronized void sendNotificationsIfSwitchDiffers(IOFSwitch oldSw, IOFSwitch newSw)", "class_method_signature": "OFSwitchManager.sendNotificationsIfSwitchDiffers(IOFSwitch oldSw, IOFSwitch newSw)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/core/internal/OFSwitchManager.java"}, "focal_method": {"identifier": "getActiveSwitch", "parameters": "(DatapathId dpid)", "modifiers": "@Override public", "return": "IOFSwitch", "body": "@Override\n\tpublic IOFSwitch getActiveSwitch(DatapathId dpid) {\n\t\tIOFSwitchBackend sw = this.switches.get(dpid);\n\t\tif(sw != null && sw.getStatus().isVisible())\n\t\t\treturn sw;\n\t\telse\n\t\t\treturn null;\n\t}", "signature": "IOFSwitch getActiveSwitch(DatapathId dpid)", "full_signature": "@Override public IOFSwitch getActiveSwitch(DatapathId dpid)", "class_method_signature": "OFSwitchManager.getActiveSwitch(DatapathId dpid)", "testcase": false, "constructor": false, "invocations": ["get", "isVisible", "getStatus"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}