{"test_class": {"identifier": "ContinuousSpaceSegmentTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/report/ContinuousSpaceSegmentTest.java"}, "test_case": {"identifier": "shouldReturnTrueIfSegmentContainsPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnTrueIfSegmentContainsPoint() {\n        // given\n        ContinuousSpaceSegment<Integer, String> segment = new ContinuousSpaceSegment<Integer, String>(1, 10, \"A\");\n\n        // when\n        boolean contains = segment.contains(5);\n\n        // then\n        assertThat(contains).isTrue();\n    }", "signature": "void shouldReturnTrueIfSegmentContainsPoint()", "full_signature": "@Test public void shouldReturnTrueIfSegmentContainsPoint()", "class_method_signature": "ContinuousSpaceSegmentTest.shouldReturnTrueIfSegmentContainsPoint()", "testcase": true, "constructor": false, "invocations": ["contains", "isTrue", "assertThat"]}, "focal_class": {"identifier": "ContinuousSpaceSegment", "superclass": "", "interfaces": "implements Comparable<ContinuousSpaceSegment<C, V>>", "fields": [{"original_string": "private final RangeBoundary<C> segmentStart;", "modifier": "private final", "type": "RangeBoundary<C>", "declarator": "segmentStart", "var_name": "segmentStart"}, {"original_string": "private final RangeBoundary<C> segmentEnd;", "modifier": "private final", "type": "RangeBoundary<C>", "declarator": "segmentEnd", "var_name": "segmentEnd"}, {"original_string": "private final V value;", "modifier": "private final", "type": "V", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "ContinuousSpaceSegment", "parameters": "(C from, C to, V value)", "modifiers": "public", "return": "", "signature": " ContinuousSpaceSegment(C from, C to, V value)", "full_signature": "public  ContinuousSpaceSegment(C from, C to, V value)", "class_method_signature": "ContinuousSpaceSegment.ContinuousSpaceSegment(C from, C to, V value)", "testcase": false, "constructor": true}, {"identifier": "ContinuousSpaceSegment", "parameters": "(RangeBoundary<C> from, RangeBoundary<C> to, V value)", "modifiers": "public", "return": "", "signature": " ContinuousSpaceSegment(RangeBoundary<C> from, RangeBoundary<C> to, V value)", "full_signature": "public  ContinuousSpaceSegment(RangeBoundary<C> from, RangeBoundary<C> to, V value)", "class_method_signature": "ContinuousSpaceSegment.ContinuousSpaceSegment(RangeBoundary<C> from, RangeBoundary<C> to, V value)", "testcase": false, "constructor": true}, {"identifier": "ContinuousSpaceSegment", "parameters": "(ContinuousSpaceSegment<C, V> other, V value)", "modifiers": "public", "return": "", "signature": " ContinuousSpaceSegment(ContinuousSpaceSegment<C, V> other, V value)", "full_signature": "public  ContinuousSpaceSegment(ContinuousSpaceSegment<C, V> other, V value)", "class_method_signature": "ContinuousSpaceSegment.ContinuousSpaceSegment(ContinuousSpaceSegment<C, V> other, V value)", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(RangeBoundary<C> point)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(RangeBoundary<C> point)", "full_signature": "public boolean contains(RangeBoundary<C> point)", "class_method_signature": "ContinuousSpaceSegment.contains(RangeBoundary<C> point)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(C point)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(C point)", "full_signature": "public boolean contains(C point)", "class_method_signature": "ContinuousSpaceSegment.contains(C point)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(C from, C to)", "modifiers": "", "return": "IntersectionType", "signature": "IntersectionType intersects(C from, C to)", "full_signature": " IntersectionType intersects(C from, C to)", "class_method_signature": "ContinuousSpaceSegment.intersects(C from, C to)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(RangeBoundary<C> from, RangeBoundary<C> to)", "modifiers": "", "return": "IntersectionType", "signature": "IntersectionType intersects(RangeBoundary<C> from, RangeBoundary<C> to)", "full_signature": " IntersectionType intersects(RangeBoundary<C> from, RangeBoundary<C> to)", "class_method_signature": "ContinuousSpaceSegment.intersects(RangeBoundary<C> from, RangeBoundary<C> to)", "testcase": false, "constructor": false}, {"identifier": "segmentStart", "parameters": "()", "modifiers": "public", "return": "RangeBoundary<C>", "signature": "RangeBoundary<C> segmentStart()", "full_signature": "public RangeBoundary<C> segmentStart()", "class_method_signature": "ContinuousSpaceSegment.segmentStart()", "testcase": false, "constructor": false}, {"identifier": "segmentEnd", "parameters": "()", "modifiers": "public", "return": "RangeBoundary<C>", "signature": "RangeBoundary<C> segmentEnd()", "full_signature": "public RangeBoundary<C> segmentEnd()", "class_method_signature": "ContinuousSpaceSegment.segmentEnd()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "V", "signature": "V value()", "full_signature": "public V value()", "class_method_signature": "ContinuousSpaceSegment.value()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(ContinuousSpaceSegment<C, V> other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(ContinuousSpaceSegment<C, V> other)", "full_signature": "@Override public int compareTo(ContinuousSpaceSegment<C, V> other)", "class_method_signature": "ContinuousSpaceSegment.compareTo(ContinuousSpaceSegment<C, V> other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ContinuousSpaceSegment.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ContinuousSpaceSegment.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ContinuousSpaceSegment.toString()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/report/ContinuousSpaceSegment.java"}, "focal_method": {"identifier": "contains", "parameters": "(RangeBoundary<C> point)", "modifiers": "public", "return": "boolean", "body": "public boolean contains(RangeBoundary<C> point) {\n        return segmentStart.compareTo(point) < 0 && segmentEnd.compareTo(point) > 0;\n    }", "signature": "boolean contains(RangeBoundary<C> point)", "full_signature": "public boolean contains(RangeBoundary<C> point)", "class_method_signature": "ContinuousSpaceSegment.contains(RangeBoundary<C> point)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}