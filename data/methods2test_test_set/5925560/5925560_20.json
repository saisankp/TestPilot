{"test_class": {"identifier": "PathUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/org/jf/util/PathUtilTest.java"}, "test_case": {"identifier": "pathUtilTest11", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void pathUtilTest11() {\n        File[] roots = File.listRoots();\n\n        File basePath = new File(roots[0] + \"some\");\n        File relativePath = new File(roots[0] + \"some\" + File.separatorChar + \"dir\" + File.separatorChar + \"dir2\");\n\n        String path = PathUtil.getRelativeFileInternal(basePath, relativePath);\n\n        Assert.assertEquals(path, \"dir\" + File.separatorChar + \"dir2\");\n    }", "signature": "void pathUtilTest11()", "full_signature": "@Test public void pathUtilTest11()", "class_method_signature": "PathUtilTest.pathUtilTest11()", "testcase": true, "constructor": false, "invocations": ["listRoots", "getRelativeFileInternal", "assertEquals"]}, "focal_class": {"identifier": "PathUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PathUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " PathUtil()", "full_signature": "private  PathUtil()", "class_method_signature": "PathUtil.PathUtil()", "testcase": false, "constructor": true}, {"identifier": "getRelativeFile", "parameters": "(File baseFile, File fileToRelativize)", "modifiers": "public static", "return": "File", "signature": "File getRelativeFile(File baseFile, File fileToRelativize)", "full_signature": "public static File getRelativeFile(File baseFile, File fileToRelativize)", "class_method_signature": "PathUtil.getRelativeFile(File baseFile, File fileToRelativize)", "testcase": false, "constructor": false}, {"identifier": "getRelativeFileInternal", "parameters": "(File canonicalBaseFile, File canonicalFileToRelativize)", "modifiers": "static", "return": "String", "signature": "String getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "full_signature": "static String getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "class_method_signature": "PathUtil.getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "testcase": false, "constructor": false}, {"identifier": "getPathComponents", "parameters": "(File file)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getPathComponents(File file)", "full_signature": "private static List<String> getPathComponents(File file)", "class_method_signature": "PathUtil.getPathComponents(File file)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/jf/util/PathUtil.java"}, "focal_method": {"identifier": "getRelativeFileInternal", "parameters": "(File canonicalBaseFile, File canonicalFileToRelativize)", "modifiers": "static", "return": "String", "body": "static String getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize) {\n        List<String> basePath = getPathComponents(canonicalBaseFile);\n        List<String> pathToRelativize = getPathComponents(canonicalFileToRelativize);\n\n        //if the roots aren't the same (i.e. different drives on a windows machine), we can't construct a relative\n        //path from one to the other, so just return the canonical file\n        if (!basePath.get(0).equals(pathToRelativize.get(0))) {\n            return canonicalFileToRelativize.getPath();\n        }\n\n        int commonDirs;\n        StringBuilder sb = new StringBuilder();\n\n        for (commonDirs=1; commonDirs<basePath.size() && commonDirs<pathToRelativize.size(); commonDirs++) {\n            if (!basePath.get(commonDirs).equals(pathToRelativize.get(commonDirs))) {\n                break;\n            }\n        }\n\n        boolean first = true;\n        for (int i=commonDirs; i<basePath.size(); i++) {\n            if (!first) {\n                sb.append(File.separatorChar);\n            } else {\n                first = false;\n            }\n\n            sb.append(\"..\");\n        }\n\n        first = true;\n        for (int i=commonDirs; i<pathToRelativize.size(); i++) {\n            if (first) {\n                if (sb.length() != 0) {\n                    sb.append(File.separatorChar);\n                }\n                first = false;\n            } else {\n                sb.append(File.separatorChar);\n            }\n            \n            sb.append(pathToRelativize.get(i));\n        }\n\n        if (sb.length() == 0) {\n            return \".\";\n        }\n\n        return sb.toString();\n    }", "signature": "String getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "full_signature": "static String getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "class_method_signature": "PathUtil.getRelativeFileInternal(File canonicalBaseFile, File canonicalFileToRelativize)", "testcase": false, "constructor": false, "invocations": ["getPathComponents", "getPathComponents", "equals", "get", "get", "getPath", "size", "size", "equals", "get", "get", "size", "append", "append", "size", "length", "append", "append", "append", "get", "length", "toString"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}