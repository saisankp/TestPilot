{"test_class": {"identifier": "HealthMonitorEventAggregatorTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    InventoryUtil inventoryUtil;", "modifier": "@Mock", "type": "InventoryUtil", "declarator": "inventoryUtil", "var_name": "inventoryUtil"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/aggregator/HealthMonitorEventAggregatorTaskTest.java"}, "test_case": {"identifier": "testProcessEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessEvents()\n        throws HmsException\n    {\n\n        PowerMockito.mockStatic( MonitoringUtil.class );\n        PowerMockito.mockStatic( AgentHealthMonitoringUtil.class );\n\n        List<Event> eventsLst = new ArrayList<Event>();\n        Event event = new Event();\n        Body body = new Body();\n        Map<String, String> data = new HashMap<String, String>();\n        data.put( Constants.HMS_INV_FROM_AGG_AVAILABILITY_STATUS, new String( \"true\" ) );\n        body.setData( data );\n        event.setBody( body );\n        eventsLst.add( event );\n        when( MonitoringUtil.getHealthMonitorEventsOOB() ).thenReturn( eventsLst );\n\n        InbandServiceTestImpl inbandSvc = new InbandServiceTestImpl();\n        List<ServerComponentEvent> eventLst = inbandSvc.getComponentEventList( null, ServerComponent.CPU );\n        when( AgentHealthMonitoringUtil.getCPUUsage() ).thenReturn( eventLst.get( 0 ) );\n        eventLst = inbandSvc.getComponentEventList( null, ServerComponent.MEMORY );\n        when( AgentHealthMonitoringUtil.getHMSMemoryUsage() ).thenReturn( eventLst.get( 0 ) );\n\n        ServerComponentEvent sensor = new ServerComponentEvent();\n        sensor.setComponentId( \"HMS_AGENT_THREAD_USAGE\" );\n        sensor.setUnit( EventUnitType.COUNT );\n        sensor.setEventName( NodeEvent.HMS_AGENT_THREAD_COUNT );\n        sensor.setValue( 1 );\n        when( AgentHealthMonitoringUtil.getThreadCount() ).thenReturn( sensor );\n\n        HealthMonitorEventAggregatorTask task = new HealthMonitorEventAggregatorTask();\n        ServerNode serverNode = new ServerNode();\n        List<Event> events = task.processEvents( serverNode, ServerComponent.HMS );\n        Assert.assertNotNull( events );\n        Event eventObj = events.get( events.size() - 1 );\n        Map<String, String> map = eventObj.getBody().getData();\n        String value = map.get( Constants.HMS_INV_FROM_AGG_AVAILABILITY_STATUS );\n        Assert.assertEquals( \"true\", value );\n    }", "signature": "void testProcessEvents()", "full_signature": "@Test public void testProcessEvents()", "class_method_signature": "HealthMonitorEventAggregatorTaskTest.testProcessEvents()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "mockStatic", "put", "setData", "setBody", "add", "thenReturn", "when", "getHealthMonitorEventsOOB", "getComponentEventList", "thenReturn", "when", "getCPUUsage", "get", "getComponentEventList", "thenReturn", "when", "getHMSMemoryUsage", "get", "setComponentId", "setUnit", "setEventName", "setValue", "thenReturn", "when", "getThreadCount", "processEvents", "assertNotNull", "get", "size", "getData", "getBody", "get", "assertEquals"]}, "focal_class": {"identifier": "HealthMonitorEventAggregatorTask", "superclass": "", "interfaces": "implements IEventAggregatorTask", "fields": [{"original_string": "private Logger logger = Logger.getLogger( HealthMonitorEventAggregatorTask.class );", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger( HealthMonitorEventAggregatorTask.class )", "var_name": "logger"}, {"original_string": "private static final String NODE = \"DUMMY\";", "modifier": "private static final", "type": "String", "declarator": "NODE = \"DUMMY\"", "var_name": "NODE"}], "methods": [{"identifier": "getOOBEvents", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> getOOBEvents( ServerNode node, ServerComponent component )", "full_signature": "private List<Event> getOOBEvents( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.getOOBEvents( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "getIBEvents", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> getIBEvents( ServerNode node, ServerComponent component )", "full_signature": "private List<Event> getIBEvents( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.getIBEvents( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedEvents", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getAggregatedEvents( ServerNode node, ServerComponent component )", "full_signature": "@Override public List<Event> getAggregatedEvents( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.getAggregatedEvents( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "processEvents", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> processEvents( ServerNode node, ServerComponent component )", "full_signature": "@Override public List<Event> processEvents( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.processEvents( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "initiateInventoryRefreshOnOutOfBand", "parameters": "( List<Event> oobEvents )", "modifiers": "private", "return": "void", "signature": "void initiateInventoryRefreshOnOutOfBand( List<Event> oobEvents )", "full_signature": "private void initiateInventoryRefreshOnOutOfBand( List<Event> oobEvents )", "class_method_signature": "HealthMonitorEventAggregatorTask.initiateInventoryRefreshOnOutOfBand( List<Event> oobEvents )", "testcase": false, "constructor": false}, {"identifier": "executeHealthMonitorTask", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "private", "return": "void", "signature": "void executeHealthMonitorTask( ServerNode node, ServerComponent component )", "full_signature": "private void executeHealthMonitorTask( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.executeHealthMonitorTask( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedSwitchEvents", "parameters": "( String switchId, SwitchComponentEnum component )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component )", "full_signature": "@Override public List<Event> getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component )", "class_method_signature": "HealthMonitorEventAggregatorTask.getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedEvents", "parameters": "( ServerNode node, ServerComponent component, boolean oobMonitoring,\n                                            boolean ibMonitoring )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getAggregatedEvents( ServerNode node, ServerComponent component, boolean oobMonitoring,\n                                            boolean ibMonitoring )", "full_signature": "@Override public List<Event> getAggregatedEvents( ServerNode node, ServerComponent component, boolean oobMonitoring,\n                                            boolean ibMonitoring )", "class_method_signature": "HealthMonitorEventAggregatorTask.getAggregatedEvents( ServerNode node, ServerComponent component, boolean oobMonitoring,\n                                            boolean ibMonitoring )", "testcase": false, "constructor": false}, {"identifier": "getAggregatedSwitchEvents", "parameters": "( String switchId, SwitchComponentEnum component,\n                                                  boolean switchMonitoring )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component,\n                                                  boolean switchMonitoring )", "full_signature": "@Override public List<Event> getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component,\n                                                  boolean switchMonitoring )", "class_method_signature": "HealthMonitorEventAggregatorTask.getAggregatedSwitchEvents( String switchId, SwitchComponentEnum component,\n                                                  boolean switchMonitoring )", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/aggregator/HealthMonitorEventAggregatorTask.java"}, "focal_method": {"identifier": "processEvents", "parameters": "( ServerNode node, ServerComponent component )", "modifiers": "@Override public", "return": "List<Event>", "body": "@Override\n    public List<Event> processEvents( ServerNode node, ServerComponent component )\n        throws HMSRestException\n    {\n\n        List<Event> aggregatedEvents = new ArrayList<Event>();\n        aggregatedEvents.addAll( getIBEvents( node, component ) );\n        List<Event> oobEvents = getOOBEvents( node, component );\n        aggregatedEvents.addAll( oobEvents );\n\n        initiateInventoryRefreshOnOutOfBand( oobEvents );\n\n        try\n        {\n            aggregatedEvents = EventFilterService.filterOrMassageEvents( NODE, component, aggregatedEvents );\n        }\n        catch ( Exception e )\n        {\n            // Ignore\n            logger.warn( \"Error filtering events for HMS:: Component:\" + component, e );\n        }\n        return aggregatedEvents;\n    }", "signature": "List<Event> processEvents( ServerNode node, ServerComponent component )", "full_signature": "@Override public List<Event> processEvents( ServerNode node, ServerComponent component )", "class_method_signature": "HealthMonitorEventAggregatorTask.processEvents( ServerNode node, ServerComponent component )", "testcase": false, "constructor": false, "invocations": ["addAll", "getIBEvents", "getOOBEvents", "addAll", "initiateInventoryRefreshOnOutOfBand", "filterOrMassageEvents", "warn"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}