{"test_class": {"identifier": "DecimalTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/DecimalTypeTest.java"}, "test_case": {"identifier": "testIntFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIntFormat() {\n        DecimalType dt;\n\n        // Basic test with an integer value.\n        dt = new DecimalType(\"87\");\n        assertEquals(\"87\", dt.format(\"%d\"));\n\n        // Again an integer value, but this time an \"advanced\" pattern.\n        dt = new DecimalType(\"87\");\n        assertEquals(\" 87\", dt.format(\"%3d\"));\n\n        // Again an integer value, but this time an \"advanced\" pattern.\n        dt = new DecimalType(\"87\");\n        assertEquals(\"0x57\", dt.format(\"%#x\"));\n\n        // A float value cannot be converted into hex.\n        dt = new DecimalType(\"87.5\");\n        try {\n            dt.format(\"%x\");\n            fail();\n        } catch (Exception e) {\n            // That's what we expect.\n        }\n\n        // An integer (with different representation) with int conversion.\n        dt = new DecimalType(\"11.0\");\n        assertEquals(\"11\", dt.format(\"%d\"));\n    }", "signature": "void testIntFormat()", "full_signature": "@Test public void testIntFormat()", "class_method_signature": "DecimalTypeTest.testIntFormat()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "format", "assertEquals", "format", "assertEquals", "format", "format", "fail", "assertEquals", "format"]}, "focal_class": {"identifier": "DecimalType", "superclass": "extends Number", "interfaces": "implements PrimitiveType, State, Command, Comparable<DecimalType>", "fields": [{"original_string": "private static final long serialVersionUID = 4226845847123464690L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4226845847123464690L", "var_name": "serialVersionUID"}, {"original_string": "public static final DecimalType ZERO = new DecimalType(0);", "modifier": "public static final", "type": "DecimalType", "declarator": "ZERO = new DecimalType(0)", "var_name": "ZERO"}, {"original_string": "protected BigDecimal value;", "modifier": "protected", "type": "BigDecimal", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "DecimalType", "parameters": "()", "modifiers": "public", "return": "", "signature": " DecimalType()", "full_signature": "public  DecimalType()", "class_method_signature": "DecimalType.DecimalType()", "testcase": false, "constructor": true}, {"identifier": "DecimalType", "parameters": "(BigDecimal value)", "modifiers": "public", "return": "", "signature": " DecimalType(BigDecimal value)", "full_signature": "public  DecimalType(BigDecimal value)", "class_method_signature": "DecimalType.DecimalType(BigDecimal value)", "testcase": false, "constructor": true}, {"identifier": "DecimalType", "parameters": "(long value)", "modifiers": "public", "return": "", "signature": " DecimalType(long value)", "full_signature": "public  DecimalType(long value)", "class_method_signature": "DecimalType.DecimalType(long value)", "testcase": false, "constructor": true}, {"identifier": "DecimalType", "parameters": "(double value)", "modifiers": "public", "return": "", "signature": " DecimalType(double value)", "full_signature": "public  DecimalType(double value)", "class_method_signature": "DecimalType.DecimalType(double value)", "testcase": false, "constructor": true}, {"identifier": "DecimalType", "parameters": "(String value)", "modifiers": "public", "return": "", "signature": " DecimalType(String value)", "full_signature": "public  DecimalType(String value)", "class_method_signature": "DecimalType.DecimalType(String value)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DecimalType.toString()", "testcase": false, "constructor": false}, {"identifier": "toFullString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toFullString()", "full_signature": "@Override public String toFullString()", "class_method_signature": "DecimalType.toFullString()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "DecimalType", "signature": "DecimalType valueOf(String value)", "full_signature": "public static DecimalType valueOf(String value)", "class_method_signature": "DecimalType.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(String pattern)", "modifiers": "@Override public", "return": "String", "signature": "String format(String pattern)", "full_signature": "@Override public String format(String pattern)", "class_method_signature": "DecimalType.format(String pattern)", "testcase": false, "constructor": false}, {"identifier": "toBigDecimal", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal toBigDecimal()", "full_signature": "public BigDecimal toBigDecimal()", "class_method_signature": "DecimalType.toBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DecimalType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@Override public boolean equals(@Nullable Object obj)", "class_method_signature": "DecimalType.equals(@Nullable Object obj)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(DecimalType o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(DecimalType o)", "full_signature": "@Override public int compareTo(DecimalType o)", "class_method_signature": "DecimalType.compareTo(DecimalType o)", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "DecimalType.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float floatValue()", "full_signature": "@Override public float floatValue()", "class_method_signature": "DecimalType.floatValue()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "DecimalType.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "DecimalType.longValue()", "testcase": false, "constructor": false}, {"identifier": "defaultConversion", "parameters": "(@Nullable Class<T> target)", "modifiers": "protected", "return": "T", "signature": "T defaultConversion(@Nullable Class<T> target)", "full_signature": "protected T defaultConversion(@Nullable Class<T> target)", "class_method_signature": "DecimalType.defaultConversion(@Nullable Class<T> target)", "testcase": false, "constructor": false}, {"identifier": "as", "parameters": "(@Nullable Class<T> target)", "modifiers": "@Override public", "return": "T", "signature": "T as(@Nullable Class<T> target)", "full_signature": "@Override public T as(@Nullable Class<T> target)", "class_method_signature": "DecimalType.as(@Nullable Class<T> target)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/DecimalType.java"}, "focal_method": {"identifier": "format", "parameters": "(String pattern)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String format(String pattern) {\n        // The value could be an integer value. Try to convert to BigInteger in\n        // order to have access to more conversion formats.\n        try {\n            return String.format(pattern, value.toBigIntegerExact());\n        } catch (ArithmeticException ae) {\n            // Could not convert to integer value without loss of\n            // information. Fall through to default behavior.\n        } catch (IllegalFormatConversionException ifce) {\n            // The conversion is not valid for the type BigInteger. This\n            // happens, if the format is like \"%.1f\" but the value is an\n            // integer. Fall through to default behavior.\n        }\n\n        return String.format(pattern, value);\n    }", "signature": "String format(String pattern)", "full_signature": "@Override public String format(String pattern)", "class_method_signature": "DecimalType.format(String pattern)", "testcase": false, "constructor": false, "invocations": ["format", "toBigIntegerExact", "format"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}