{"test_class": {"identifier": "TimestampWithTimezoneTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static DateFormat DATETIME_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "public static", "type": "DateFormat", "declarator": "DATETIME_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "DATETIME_FORMAT"}, {"original_string": "public static DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");", "modifier": "public static", "type": "DateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\")", "var_name": "DATE_FORMAT"}, {"original_string": "public static DateFormat TIME_FORMAT = new SimpleDateFormat(\"hh:mm:ss a\");", "modifier": "public static", "type": "DateFormat", "declarator": "TIME_FORMAT = new SimpleDateFormat(\"hh:mm:ss a\")", "var_name": "TIME_FORMAT"}], "file": "modeshape-jdbc-local/src/test/java/org/modeshape/jdbc/util/TimestampWithTimezoneTest.java"}, "test_case": {"identifier": "testDateToDateConversion2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDateToDateConversion2() {\n        Calendar localTime = Calendar.getInstance(TimeZone.getTimeZone(\"America/Chicago\"));\n\n        localTime.set(Calendar.MONTH, Calendar.JUNE);\n        localTime.set(Calendar.DAY_OF_MONTH, 22);\n        localTime.set(Calendar.YEAR, 2004);\n        localTime.set(Calendar.HOUR, 23);\n        localTime.set(Calendar.MINUTE, 15);\n        localTime.set(Calendar.SECOND, 20);\n        localTime.set(Calendar.AM_PM, Calendar.PM);\n\n        Date converted = TimestampWithTimezone.createDate(localTime, Calendar.getInstance(TimeZone.getTimeZone(\"Europe/London\"))); //$NON-NLS-1$ \n        Calendar cal = Calendar.getInstance();\n        cal.setTime(converted);\n\n        assertThat(cal.get(Calendar.MILLISECOND), is(0));\n    }", "signature": "void testDateToDateConversion2()", "full_signature": "@Test public void testDateToDateConversion2()", "class_method_signature": "TimestampWithTimezoneTest.testDateToDateConversion2()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getTimeZone", "set", "set", "set", "set", "set", "set", "set", "createDate", "getInstance", "getTimeZone", "getInstance", "setTime", "assertThat", "get", "is"]}, "focal_class": {"identifier": "TimestampWithTimezone", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static DateFormat DATETIME_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "public static", "type": "DateFormat", "declarator": "DATETIME_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "DATETIME_FORMAT"}, {"original_string": "public static DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");", "modifier": "public static", "type": "DateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\")", "var_name": "DATE_FORMAT"}, {"original_string": "public static DateFormat TIME_FORMAT = new SimpleDateFormat(\"HH:mm:ss a\");", "modifier": "public static", "type": "DateFormat", "declarator": "TIME_FORMAT = new SimpleDateFormat(\"HH:mm:ss a\")", "var_name": "TIME_FORMAT"}, {"original_string": "private static ThreadLocal<Calendar> CALENDAR = new ThreadLocal<Calendar>() {\n        @Override\n        protected Calendar initialValue() {\n            return Calendar.getInstance();\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<Calendar>", "declarator": "CALENDAR = new ThreadLocal<Calendar>() {\n        @Override\n        protected Calendar initialValue() {\n            return Calendar.getInstance();\n        }\n    }", "var_name": "CALENDAR"}], "methods": [{"identifier": "getCalendar", "parameters": "()", "modifiers": "public static", "return": "Calendar", "signature": "Calendar getCalendar()", "full_signature": "public static Calendar getCalendar()", "class_method_signature": "TimestampWithTimezone.getCalendar()", "testcase": false, "constructor": false}, {"identifier": "resetCalendar", "parameters": "( TimeZone tz )", "modifiers": "public static", "return": "void", "signature": "void resetCalendar( TimeZone tz )", "full_signature": "public static void resetCalendar( TimeZone tz )", "class_method_signature": "TimestampWithTimezone.resetCalendar( TimeZone tz )", "testcase": false, "constructor": false}, {"identifier": "createTimestamp", "parameters": "( Calendar initial,\n                                             Calendar target )", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp createTimestamp( Calendar initial,\n                                             Calendar target )", "full_signature": "public static Timestamp createTimestamp( Calendar initial,\n                                             Calendar target )", "class_method_signature": "TimestampWithTimezone.createTimestamp( Calendar initial,\n                                             Calendar target )", "testcase": false, "constructor": false}, {"identifier": "createTime", "parameters": "( Calendar initial,\n                                   Calendar target )", "modifiers": "public static", "return": "Time", "signature": "Time createTime( Calendar initial,\n                                   Calendar target )", "full_signature": "public static Time createTime( Calendar initial,\n                                   Calendar target )", "class_method_signature": "TimestampWithTimezone.createTime( Calendar initial,\n                                   Calendar target )", "testcase": false, "constructor": false}, {"identifier": "createDate", "parameters": "( Calendar initial,\n                                   Calendar target )", "modifiers": "public static", "return": "Date", "signature": "Date createDate( Calendar initial,\n                                   Calendar target )", "full_signature": "public static Date createDate( Calendar initial,\n                                   Calendar target )", "class_method_signature": "TimestampWithTimezone.createDate( Calendar initial,\n                                   Calendar target )", "testcase": false, "constructor": false}, {"identifier": "createTime", "parameters": "( Calendar target )", "modifiers": "public static", "return": "Time", "signature": "Time createTime( Calendar target )", "full_signature": "public static Time createTime( Calendar target )", "class_method_signature": "TimestampWithTimezone.createTime( Calendar target )", "testcase": false, "constructor": false}, {"identifier": "createDate", "parameters": "( Calendar target )", "modifiers": "public static", "return": "Date", "signature": "Date createDate( Calendar target )", "full_signature": "public static Date createDate( Calendar target )", "class_method_signature": "TimestampWithTimezone.createDate( Calendar target )", "testcase": false, "constructor": false}, {"identifier": "createTimestamp", "parameters": "( Calendar target )", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp createTimestamp( Calendar target )", "full_signature": "public static Timestamp createTimestamp( Calendar target )", "class_method_signature": "TimestampWithTimezone.createTimestamp( Calendar target )", "testcase": false, "constructor": false}, {"identifier": "normalizeDate", "parameters": "( Calendar target,\n                                       boolean isDate )", "modifiers": "private static", "return": "Date", "signature": "Date normalizeDate( Calendar target,\n                                       boolean isDate )", "full_signature": "private static Date normalizeDate( Calendar target,\n                                       boolean isDate )", "class_method_signature": "TimestampWithTimezone.normalizeDate( Calendar target,\n                                       boolean isDate )", "testcase": false, "constructor": false}, {"identifier": "adjustCalendarForTime", "parameters": "( Calendar initial,\n                                               Calendar target )", "modifiers": "private static", "return": "void", "signature": "void adjustCalendarForTime( Calendar initial,\n                                               Calendar target )", "full_signature": "private static void adjustCalendarForTime( Calendar initial,\n                                               Calendar target )", "class_method_signature": "TimestampWithTimezone.adjustCalendarForTime( Calendar initial,\n                                               Calendar target )", "testcase": false, "constructor": false}, {"identifier": "adjustCalendarForDate", "parameters": "( Calendar initial,\n                                                   Calendar target )", "modifiers": "private static", "return": "Calendar", "signature": "Calendar adjustCalendarForDate( Calendar initial,\n                                                   Calendar target )", "full_signature": "private static Calendar adjustCalendarForDate( Calendar initial,\n                                                   Calendar target )", "class_method_signature": "TimestampWithTimezone.adjustCalendarForDate( Calendar initial,\n                                                   Calendar target )", "testcase": false, "constructor": false}, {"identifier": "adjustCalendarForTimeStamp", "parameters": "( Calendar initial,\n                                                        Calendar target )", "modifiers": "private static", "return": "Calendar", "signature": "Calendar adjustCalendarForTimeStamp( Calendar initial,\n                                                        Calendar target )", "full_signature": "private static Calendar adjustCalendarForTimeStamp( Calendar initial,\n                                                        Calendar target )", "class_method_signature": "TimestampWithTimezone.adjustCalendarForTimeStamp( Calendar initial,\n                                                        Calendar target )", "testcase": false, "constructor": false}], "file": "modeshape-jdbc-local/src/main/java/org/modeshape/jdbc/util/TimestampWithTimezone.java"}, "focal_method": {"identifier": "createDate", "parameters": "( Calendar initial,\n                                   Calendar target )", "modifiers": "public static", "return": "Date", "body": "public static Date createDate( Calendar initial,\n                                   Calendar target ) {\n        if (target == null) {\n            return createDate(initial);\n        }\n\n        long time = target.getTimeInMillis();\n\n        target = adjustCalendarForDate(initial, target);\n\n        Date result = normalizeDate(target, true);\n\n        target.setTimeInMillis(time);\n\n        return result;\n    }", "signature": "Date createDate( Calendar initial,\n                                   Calendar target )", "full_signature": "public static Date createDate( Calendar initial,\n                                   Calendar target )", "class_method_signature": "TimestampWithTimezone.createDate( Calendar initial,\n                                   Calendar target )", "testcase": false, "constructor": false, "invocations": ["createDate", "getTimeInMillis", "adjustCalendarForDate", "normalizeDate", "setTimeInMillis"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}