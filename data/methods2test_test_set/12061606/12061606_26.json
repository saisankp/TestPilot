{"test_class": {"identifier": "RemoveUpDownBondsTest", "superclass": "", "interfaces": "", "fields": [], "file": "func/src/test/java/uk/ac/ebi/beam/RemoveUpDownBondsTest.java"}, "test_case": {"identifier": "e_e_hexadiene_permute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void e_e_hexadiene_permute() throws Exception {\n        String input = \"C\\\\C(=C(\\\\C(=C(/[H])\\\\C)\\\\[H])/[H])\\\\[H]\";\n        int[] p = new int[]{7, 2, 4, 1, 3, 6, 8, 9, 0, 5};\n        Graph g = Parser.parse(input);\n        Assert.assertThat(Generator.generate(g.permute(p)),\n                          CoreMatchers\n                                  .is(\"[H]\\\\C(\\\\C(=C(/[H])\\\\C)\\\\[H])=C(\\\\[H])/C\"));\n        Assert.assertThat(Generator.generate(new RemoveUpDownBonds().apply(g.permute(p))),\n                          CoreMatchers.is(\"[H]\\\\C(\\\\C(=C(/[H])C)[H])=C(\\\\[H])C\"));\n    }", "signature": "void e_e_hexadiene_permute()", "full_signature": "@Test public void e_e_hexadiene_permute()", "class_method_signature": "RemoveUpDownBondsTest.e_e_hexadiene_permute()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "generate", "permute", "is", "assertThat", "generate", "apply", "permute", "is"]}, "focal_class": {"identifier": "RemoveUpDownBonds", "superclass": "extends AbstractFunction<Graph,Graph>", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "RemoveUpDownBonds.apply(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "removeRedundant", "parameters": "(Graph g,\n                                 Edge e,\n                                 int[] ordering,\n                                 Map<Edge, Edge> acc)", "modifiers": "private", "return": "void", "signature": "void removeRedundant(Graph g,\n                                 Edge e,\n                                 int[] ordering,\n                                 Map<Edge, Edge> acc)", "full_signature": "private void removeRedundant(Graph g,\n                                 Edge e,\n                                 int[] ordering,\n                                 Map<Edge, Edge> acc)", "class_method_signature": "RemoveUpDownBonds.removeRedundant(Graph g,\n                                 Edge e,\n                                 int[] ordering,\n                                 Map<Edge, Edge> acc)", "testcase": false, "constructor": false}, {"identifier": "replaceImplWithExpl", "parameters": "(final Graph g,\n                                     final Edge e,\n                                     final int u,\n                                     final int[] ordering,\n                                     final Map<Edge, Edge> acc)", "modifiers": "private", "return": "void", "signature": "void replaceImplWithExpl(final Graph g,\n                                     final Edge e,\n                                     final int u,\n                                     final int[] ordering,\n                                     final Map<Edge, Edge> acc)", "full_signature": "private void replaceImplWithExpl(final Graph g,\n                                     final Edge e,\n                                     final int u,\n                                     final int[] ordering,\n                                     final Map<Edge, Edge> acc)", "class_method_signature": "RemoveUpDownBonds.replaceImplWithExpl(final Graph g,\n                                     final Edge e,\n                                     final int u,\n                                     final int[] ordering,\n                                     final Map<Edge, Edge> acc)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/RemoveUpDownBonds.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "body": "public Graph apply(final Graph g)\n            throws InvalidSmilesException {\n\n        Graph h = new Graph(g.order());\n\n        // copy atom/topology information this is unchanged\n        for (int u = 0; u < g.order(); u++) {\n            h.addAtom(g.atom(u));\n            h.addTopology(g.topologyOf(u));\n        }\n\n        int[] ordering = new DepthFirstOrder(g).visited;\n\n        Map<Edge, Edge> replacements = new HashMap<Edge, Edge>();\n        Set<Integer> dbCentres = new TreeSet<Integer>();\n\n        // change edges (only changed added to replacement)\n        for (int u = 0; u < g.order(); u++) {\n            for (final Edge e : g.edges(u)) {\n                if (e.other(u) > u && e.bond() == Bond.DOUBLE) {\n                    removeRedundant(g, e, ordering, replacements);\n                    dbCentres.add(u);\n                    dbCentres.add(e.other(u));\n                }\n            }\n        }\n\n        // ensure we haven't accidentally removed one between two\n        for (Edge e : new HashSet<Edge>(replacements.keySet())) {\n            if (dbCentres.contains(e.either())\n                    && dbCentres.contains(e.other(e.either()))) {\n                replacements.remove(e);\n            }\n        }\n\n        // append the edges, replacing any which need to be changed\n        for (int u = 0; u < g.order(); u++) {\n            for (Edge e : g.edges(u)) {\n                if (e.other(u) > u) {\n                    Edge replacement = replacements.get(e);\n                    if (replacement != null)\n                        e = replacement;\n                    h.addEdge(e);\n                }\n            }\n        }\n\n        return h;\n    }", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "RemoveUpDownBonds.apply(final Graph g)", "testcase": false, "constructor": false, "invocations": ["order", "order", "addAtom", "atom", "addTopology", "topologyOf", "order", "edges", "other", "bond", "removeRedundant", "add", "add", "other", "keySet", "contains", "either", "contains", "other", "either", "remove", "order", "edges", "other", "get", "addEdge"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}