{"test_class": {"identifier": "HttpDownloaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/net/HttpDownloaderTest.java"}, "test_case": {"identifier": "testIsSwapUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSwapUri() throws MalformedURLException {\n        FDroidApp.subnetInfo = new SubnetUtils(\"192.168.0.112/24\").getInfo();\n        String urlString = \"http://192.168.0.112:8888/fdroid/repo?fingerprint=113F56CBFA967BA825DD13685A06E35730E0061C6BB046DF88A\";\n        assertTrue(HttpDownloader.isSwapUrl(\"192.168.0.112\", 8888)); // NOPMD\n        assertTrue(HttpDownloader.isSwapUrl(Uri.parse(urlString)));\n        assertTrue(HttpDownloader.isSwapUrl(new URL(urlString)));\n\n        assertFalse(HttpDownloader.isSwapUrl(\"192.168.1.112\", 8888)); // NOPMD\n        assertFalse(HttpDownloader.isSwapUrl(\"192.168.0.112\", 80)); // NOPMD\n        assertFalse(HttpDownloader.isSwapUrl(Uri.parse(\"https://malware.com:8888\")));\n        assertFalse(HttpDownloader.isSwapUrl(new URL(\"https://www.google.com\")));\n    }", "signature": "void testIsSwapUri()", "full_signature": "@Test public void testIsSwapUri()", "class_method_signature": "HttpDownloaderTest.testIsSwapUri()", "testcase": true, "constructor": false, "invocations": ["getInfo", "assertTrue", "isSwapUrl", "assertTrue", "isSwapUrl", "parse", "assertTrue", "isSwapUrl", "assertFalse", "isSwapUrl", "assertFalse", "isSwapUrl", "assertFalse", "isSwapUrl", "parse", "assertFalse", "isSwapUrl"]}, "focal_class": {"identifier": "HttpDownloader", "superclass": "extends Downloader", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"HttpDownloader\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"HttpDownloader\"", "var_name": "TAG"}, {"original_string": "public static final String HEADER_FIELD_ETAG = \"ETag\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_FIELD_ETAG = \"ETag\"", "var_name": "HEADER_FIELD_ETAG"}, {"original_string": "private final String username;", "modifier": "private final", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private final String password;", "modifier": "private final", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private URL sourceUrl;", "modifier": "private", "type": "URL", "declarator": "sourceUrl", "var_name": "sourceUrl"}, {"original_string": "private HttpURLConnection connection;", "modifier": "private", "type": "HttpURLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private boolean newFileAvailableOnServer;", "modifier": "private", "type": "boolean", "declarator": "newFileAvailableOnServer", "var_name": "newFileAvailableOnServer"}, {"original_string": "private long fileFullSize = -1L;", "modifier": "private", "type": "long", "declarator": "fileFullSize = -1L", "var_name": "fileFullSize"}, {"original_string": "public static String queryString;", "modifier": "public static", "type": "String", "declarator": "queryString", "var_name": "queryString"}], "methods": [{"identifier": "HttpDownloader", "parameters": "(Uri uri, File destFile)", "modifiers": "", "return": "", "signature": " HttpDownloader(Uri uri, File destFile)", "full_signature": "  HttpDownloader(Uri uri, File destFile)", "class_method_signature": "HttpDownloader.HttpDownloader(Uri uri, File destFile)", "testcase": false, "constructor": true}, {"identifier": "HttpDownloader", "parameters": "(Uri uri, File destFile, String username, String password)", "modifiers": "", "return": "", "signature": " HttpDownloader(Uri uri, File destFile, String username, String password)", "full_signature": "  HttpDownloader(Uri uri, File destFile, String username, String password)", "class_method_signature": "HttpDownloader.HttpDownloader(Uri uri, File destFile, String username, String password)", "testcase": false, "constructor": true}, {"identifier": "getDownloadersInputStream", "parameters": "()", "modifiers": "@Override protected", "return": "InputStream", "signature": "InputStream getDownloadersInputStream()", "full_signature": "@Override protected InputStream getDownloadersInputStream()", "class_method_signature": "HttpDownloader.getDownloadersInputStream()", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void download()", "full_signature": "@Override public void download()", "class_method_signature": "HttpDownloader.download()", "testcase": false, "constructor": false}, {"identifier": "isSwapUrl", "parameters": "(Uri uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSwapUrl(Uri uri)", "full_signature": "public static boolean isSwapUrl(Uri uri)", "class_method_signature": "HttpDownloader.isSwapUrl(Uri uri)", "testcase": false, "constructor": false}, {"identifier": "isSwapUrl", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSwapUrl(URL url)", "full_signature": "public static boolean isSwapUrl(URL url)", "class_method_signature": "HttpDownloader.isSwapUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "isSwapUrl", "parameters": "(String host, int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSwapUrl(String host, int port)", "full_signature": "public static boolean isSwapUrl(String host, int port)", "class_method_signature": "HttpDownloader.isSwapUrl(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "private", "return": "HttpURLConnection", "signature": "HttpURLConnection getConnection()", "full_signature": "private HttpURLConnection getConnection()", "class_method_signature": "HttpDownloader.getConnection()", "testcase": false, "constructor": false}, {"identifier": "setupConnection", "parameters": "(boolean resumable)", "modifiers": "private", "return": "void", "signature": "void setupConnection(boolean resumable)", "full_signature": "private void setupConnection(boolean resumable)", "class_method_signature": "HttpDownloader.setupConnection(boolean resumable)", "testcase": false, "constructor": false}, {"identifier": "totalDownloadSize", "parameters": "()", "modifiers": "@Override @TargetApi(24) public", "return": "long", "signature": "long totalDownloadSize()", "full_signature": "@Override @TargetApi(24) public long totalDownloadSize()", "class_method_signature": "HttpDownloader.totalDownloadSize()", "testcase": false, "constructor": false}, {"identifier": "hasChanged", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChanged()", "full_signature": "@Override public boolean hasChanged()", "class_method_signature": "HttpDownloader.hasChanged()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "HttpDownloader.close()", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/net/HttpDownloader.java"}, "focal_method": {"identifier": "isSwapUrl", "parameters": "(Uri uri)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isSwapUrl(Uri uri) {\n        return isSwapUrl(uri.getHost(), uri.getPort());\n    }", "signature": "boolean isSwapUrl(Uri uri)", "full_signature": "public static boolean isSwapUrl(Uri uri)", "class_method_signature": "HttpDownloader.isSwapUrl(Uri uri)", "testcase": false, "constructor": false, "invocations": ["isSwapUrl", "getHost", "getPort"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}