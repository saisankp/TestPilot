{"test_class": {"identifier": "JsonConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOPIC = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "ObjectMapper objectMapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}, {"original_string": "JsonConverter converter = new JsonConverter();", "modifier": "", "type": "JsonConverter", "declarator": "converter = new JsonConverter()", "var_name": "converter"}], "file": "connect/json/src/test/java/org/apache/kafka/connect/json/JsonConverterTest.java"}, "test_case": {"identifier": "dateToConnect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dateToConnect() {\n        Schema schema = Date.SCHEMA;\n        GregorianCalendar calendar = new GregorianCalendar(1970, Calendar.JANUARY, 1, 0, 0, 0);\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        calendar.add(Calendar.DATE, 10000);\n        java.util.Date reference = calendar.getTime();\n        String msg = \"{ \\\"schema\\\": { \\\"type\\\": \\\"int32\\\", \\\"name\\\": \\\"org.apache.kafka.connect.data.Date\\\", \\\"version\\\": 1 }, \\\"payload\\\": 10000 }\";\n        SchemaAndValue schemaAndValue = converter.toConnectData(TOPIC, msg.getBytes());\n        java.util.Date converted = (java.util.Date) schemaAndValue.value();\n        assertEquals(schema, schemaAndValue.schema());\n        assertEquals(reference, converted);\n    }", "signature": "void dateToConnect()", "full_signature": "@Test public void dateToConnect()", "class_method_signature": "JsonConverterTest.dateToConnect()", "testcase": true, "constructor": false, "invocations": ["setTimeZone", "getTimeZone", "add", "getTime", "toConnectData", "getBytes", "value", "assertEquals", "schema", "assertEquals"]}, "focal_class": {"identifier": "JsonConverter", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private static final String SCHEMAS_ENABLE_CONFIG = \"schemas.enable\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMAS_ENABLE_CONFIG = \"schemas.enable\"", "var_name": "SCHEMAS_ENABLE_CONFIG"}, {"original_string": "private static final boolean SCHEMAS_ENABLE_DEFAULT = true;", "modifier": "private static final", "type": "boolean", "declarator": "SCHEMAS_ENABLE_DEFAULT = true", "var_name": "SCHEMAS_ENABLE_DEFAULT"}, {"original_string": "private static final String SCHEMAS_CACHE_SIZE_CONFIG = \"schemas.cache.size\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMAS_CACHE_SIZE_CONFIG = \"schemas.cache.size\"", "var_name": "SCHEMAS_CACHE_SIZE_CONFIG"}, {"original_string": "private static final int SCHEMAS_CACHE_SIZE_DEFAULT = 1000;", "modifier": "private static final", "type": "int", "declarator": "SCHEMAS_CACHE_SIZE_DEFAULT = 1000", "var_name": "SCHEMAS_CACHE_SIZE_DEFAULT"}, {"original_string": "private static final HashMap<Schema.Type, JsonToConnectTypeConverter> TO_CONNECT_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<Schema.Type, JsonToConnectTypeConverter>", "declarator": "TO_CONNECT_CONVERTERS = new HashMap<>()", "var_name": "TO_CONNECT_CONVERTERS"}, {"original_string": "private static final HashMap<String, LogicalTypeConverter> TO_CONNECT_LOGICAL_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<String, LogicalTypeConverter>", "declarator": "TO_CONNECT_LOGICAL_CONVERTERS = new HashMap<>()", "var_name": "TO_CONNECT_LOGICAL_CONVERTERS"}, {"original_string": "private static final HashMap<String, LogicalTypeConverter> TO_JSON_LOGICAL_CONVERTERS = new HashMap<>();", "modifier": "private static final", "type": "HashMap<String, LogicalTypeConverter>", "declarator": "TO_JSON_LOGICAL_CONVERTERS = new HashMap<>()", "var_name": "TO_JSON_LOGICAL_CONVERTERS"}, {"original_string": "private boolean enableSchemas = SCHEMAS_ENABLE_DEFAULT;", "modifier": "private", "type": "boolean", "declarator": "enableSchemas = SCHEMAS_ENABLE_DEFAULT", "var_name": "enableSchemas"}, {"original_string": "private int cacheSize = SCHEMAS_CACHE_SIZE_DEFAULT;", "modifier": "private", "type": "int", "declarator": "cacheSize = SCHEMAS_CACHE_SIZE_DEFAULT", "var_name": "cacheSize"}, {"original_string": "private Cache<Schema, ObjectNode> fromConnectSchemaCache;", "modifier": "private", "type": "Cache<Schema, ObjectNode>", "declarator": "fromConnectSchemaCache", "var_name": "fromConnectSchemaCache"}, {"original_string": "private Cache<JsonNode, Schema> toConnectSchemaCache;", "modifier": "private", "type": "Cache<JsonNode, Schema>", "declarator": "toConnectSchemaCache", "var_name": "toConnectSchemaCache"}, {"original_string": "private final JsonSerializer serializer = new JsonSerializer();", "modifier": "private final", "type": "JsonSerializer", "declarator": "serializer = new JsonSerializer()", "var_name": "serializer"}, {"original_string": "private final JsonDeserializer deserializer = new JsonDeserializer();", "modifier": "private final", "type": "JsonDeserializer", "declarator": "deserializer = new JsonDeserializer()", "var_name": "deserializer"}], "methods": [{"identifier": "checkOptionalAndDefault", "parameters": "(Schema schema)", "modifiers": "private static", "return": "Object", "signature": "Object checkOptionalAndDefault(Schema schema)", "full_signature": "private static Object checkOptionalAndDefault(Schema schema)", "class_method_signature": "JsonConverter.checkOptionalAndDefault(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configs, boolean isKey)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs, boolean isKey)", "full_signature": "@Override public void configure(Map<String, ?> configs, boolean isKey)", "class_method_signature": "JsonConverter.configure(Map<String, ?> configs, boolean isKey)", "testcase": false, "constructor": false}, {"identifier": "fromConnectData", "parameters": "(String topic, Schema schema, Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] fromConnectData(String topic, Schema schema, Object value)", "full_signature": "@Override public byte[] fromConnectData(String topic, Schema schema, Object value)", "class_method_signature": "JsonConverter.fromConnectData(String topic, Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "toConnectData", "parameters": "(String topic, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "signature": "SchemaAndValue toConnectData(String topic, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectData(String topic, byte[] value)", "class_method_signature": "JsonConverter.toConnectData(String topic, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "jsonToConnect", "parameters": "(JsonNode jsonValue)", "modifiers": "private", "return": "SchemaAndValue", "signature": "SchemaAndValue jsonToConnect(JsonNode jsonValue)", "full_signature": "private SchemaAndValue jsonToConnect(JsonNode jsonValue)", "class_method_signature": "JsonConverter.jsonToConnect(JsonNode jsonValue)", "testcase": false, "constructor": false}, {"identifier": "asJsonSchema", "parameters": "(Schema schema)", "modifiers": "private", "return": "ObjectNode", "signature": "ObjectNode asJsonSchema(Schema schema)", "full_signature": "private ObjectNode asJsonSchema(Schema schema)", "class_method_signature": "JsonConverter.asJsonSchema(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "asConnectSchema", "parameters": "(JsonNode jsonSchema)", "modifiers": "private", "return": "Schema", "signature": "Schema asConnectSchema(JsonNode jsonSchema)", "full_signature": "private Schema asConnectSchema(JsonNode jsonSchema)", "class_method_signature": "JsonConverter.asConnectSchema(JsonNode jsonSchema)", "testcase": false, "constructor": false}, {"identifier": "convertToJsonWithEnvelope", "parameters": "(Schema schema, Object value)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode convertToJsonWithEnvelope(Schema schema, Object value)", "full_signature": "private JsonNode convertToJsonWithEnvelope(Schema schema, Object value)", "class_method_signature": "JsonConverter.convertToJsonWithEnvelope(Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToJsonWithoutEnvelope", "parameters": "(Schema schema, Object value)", "modifiers": "private", "return": "JsonNode", "signature": "JsonNode convertToJsonWithoutEnvelope(Schema schema, Object value)", "full_signature": "private JsonNode convertToJsonWithoutEnvelope(Schema schema, Object value)", "class_method_signature": "JsonConverter.convertToJsonWithoutEnvelope(Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertToJson", "parameters": "(Schema schema, Object logicalValue)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode convertToJson(Schema schema, Object logicalValue)", "full_signature": "private static JsonNode convertToJson(Schema schema, Object logicalValue)", "class_method_signature": "JsonConverter.convertToJson(Schema schema, Object logicalValue)", "testcase": false, "constructor": false}, {"identifier": "convertToConnect", "parameters": "(Schema schema, JsonNode jsonValue)", "modifiers": "private static", "return": "Object", "signature": "Object convertToConnect(Schema schema, JsonNode jsonValue)", "full_signature": "private static Object convertToConnect(Schema schema, JsonNode jsonValue)", "class_method_signature": "JsonConverter.convertToConnect(Schema schema, JsonNode jsonValue)", "testcase": false, "constructor": false}], "file": "connect/json/src/main/java/org/apache/kafka/connect/json/JsonConverter.java"}, "focal_method": {"identifier": "toConnectData", "parameters": "(String topic, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "body": "@Override\n    public SchemaAndValue toConnectData(String topic, byte[] value) {\n        JsonNode jsonValue;\n        try {\n            jsonValue = deserializer.deserialize(topic, value);\n        } catch (SerializationException e) {\n            throw new DataException(\"Converting byte[] to Kafka Connect data failed due to serialization error: \", e);\n        }\n\n        if (enableSchemas && (jsonValue == null || !jsonValue.isObject() || jsonValue.size() != 2 || !jsonValue.has(\"schema\") || !jsonValue.has(\"payload\")))\n            throw new DataException(\"JsonDeserializer with schemas.enable requires \\\"schema\\\" and \\\"payload\\\" fields and may not contain additional fields\");\n\n        // The deserialized data should either be an envelope object containing the schema and the payload or the schema\n        // was stripped during serialization and we need to fill in an all-encompassing schema.\n        if (!enableSchemas) {\n            ObjectNode envelope = JsonNodeFactory.instance.objectNode();\n            envelope.set(\"schema\", null);\n            envelope.set(\"payload\", jsonValue);\n            jsonValue = envelope;\n        }\n\n        return jsonToConnect(jsonValue);\n    }", "signature": "SchemaAndValue toConnectData(String topic, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectData(String topic, byte[] value)", "class_method_signature": "JsonConverter.toConnectData(String topic, byte[] value)", "testcase": false, "constructor": false, "invocations": ["deserialize", "isObject", "size", "has", "has", "objectNode", "set", "set", "jsonToConnect"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}