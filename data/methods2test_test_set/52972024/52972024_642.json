{"test_class": {"identifier": "HttpEndpointPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private HttpEndpointPlugin plugin;", "modifier": "private", "type": "HttpEndpointPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private ResolveByTypeAndNameStrategy deserializationStrategyChooser;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "deserializationStrategyChooser", "var_name": "deserializationStrategyChooser"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveByTypeAndNameStrategy;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveByTypeAndNameStrategy", "var_name": "resolveByTypeAndNameStrategy"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveCookies;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveCookies", "var_name": "resolveCookies"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveHeaders;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveHeaders", "var_name": "resolveHeaders"}, {"original_string": "private ResolveByTypeAndNameStrategy resolveStatusSetter;", "modifier": "private", "type": "ResolveByTypeAndNameStrategy", "declarator": "resolveStatusSetter", "var_name": "resolveStatusSetter"}], "file": "CoreFeatures/HttpEndpoint-plugins/PluginHttpEndpoint/src/test/java/info/smart_tools/smartactors/http_endpoint_plugins/http_endpoint_plugin/HttpEndpointPluginTest.java"}, "test_case": {"identifier": "checkPluginExceptionOnPluginLoad", "parameters": "()", "modifiers": "@Test(expected = PluginException.class) public", "return": "void", "body": "@Test(expected = PluginException.class)\n    public void checkPluginExceptionOnPluginLoad()\n            throws Exception {\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        IPlugin plugin = new HttpEndpointPlugin(bootstrap);\n        doThrow(Exception.class).when(bootstrap).add(any(IBootstrapItem.class));\n        plugin.load();\n        fail();\n    }", "signature": "void checkPluginExceptionOnPluginLoad()", "full_signature": "@Test(expected = PluginException.class) public void checkPluginExceptionOnPluginLoad()", "class_method_signature": "HttpEndpointPluginTest.checkPluginExceptionOnPluginLoad()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doThrow", "any", "load", "fail"]}, "focal_class": {"identifier": "HttpEndpointPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private IFieldName typeFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "typeFieldName", "var_name": "typeFieldName"}, {"original_string": "private IFieldName portFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "portFieldName", "var_name": "portFieldName"}, {"original_string": "private IFieldName startChainNameFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "startChainNameFieldName", "var_name": "startChainNameFieldName"}, {"original_string": "private IFieldName stackDepthFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "stackDepthFieldName", "var_name": "stackDepthFieldName"}, {"original_string": "private IFieldName maxContentLengthFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "maxContentLengthFieldName", "var_name": "maxContentLengthFieldName"}, {"original_string": "private IFieldName endpointNameFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "endpointNameFieldName", "var_name": "endpointNameFieldName"}, {"original_string": "private IFieldName queueFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "queueFieldName", "var_name": "queueFieldName"}, {"original_string": "private IFieldName templatesFieldName;", "modifier": "private", "type": "IFieldName", "declarator": "templatesFieldName", "var_name": "templatesFieldName"}], "methods": [{"identifier": "HttpEndpointPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " HttpEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  HttpEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "HttpEndpointPlugin.HttpEndpointPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpEndpointPlugin.load()", "testcase": false, "constructor": false}, {"identifier": "initializeFieldNames", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeFieldNames()", "full_signature": "private void initializeFieldNames()", "class_method_signature": "HttpEndpointPlugin.initializeFieldNames()", "testcase": false, "constructor": false}, {"identifier": "registerResponseSenders", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerResponseSenders()", "full_signature": "private void registerResponseSenders()", "class_method_signature": "HttpEndpointPlugin.registerResponseSenders()", "testcase": false, "constructor": false}, {"identifier": "registerCookiesSetter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerCookiesSetter()", "full_signature": "private void registerCookiesSetter()", "class_method_signature": "HttpEndpointPlugin.registerCookiesSetter()", "testcase": false, "constructor": false}, {"identifier": "registerHeadersExtractor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerHeadersExtractor()", "full_signature": "private void registerHeadersExtractor()", "class_method_signature": "HttpEndpointPlugin.registerHeadersExtractor()", "testcase": false, "constructor": false}, {"identifier": "registerResponseStatusExtractor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerResponseStatusExtractor()", "full_signature": "private void registerResponseStatusExtractor()", "class_method_signature": "HttpEndpointPlugin.registerResponseStatusExtractor()", "testcase": false, "constructor": false}, {"identifier": "registerDeserializationStrategies", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerDeserializationStrategies()", "full_signature": "private void registerDeserializationStrategies()", "class_method_signature": "HttpEndpointPlugin.registerDeserializationStrategies()", "testcase": false, "constructor": false}, {"identifier": "registerExceptionalResponse", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerExceptionalResponse()", "full_signature": "private void registerExceptionalResponse()", "class_method_signature": "HttpEndpointPlugin.registerExceptionalResponse()", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint-plugins/PluginHttpEndpoint/src/main/java/info/smart_tools/smartactors/http_endpoint_plugins/http_endpoint_plugin/HttpEndpointPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"CreateHttpEndpoint\");\n            item\n                    .after(\"EndpointPlugin\")\n                    .after(\"response\")\n                    .after(\"response_content_strategy\")\n                    .before(\"configure\")\n                    .process(\n                            () -> {\n                                try {\n                                    initializeFieldNames();\n                                    IKey httpEndpointKey = Keys.getOrAdd(\"http_endpoint\");\n                                    registerCookiesSetter();\n                                    registerHeadersExtractor();\n                                    registerResponseStatusExtractor();\n                                    registerExceptionalResponse();\n                                    IOC.register(\n                                            Keys.getOrAdd(IEnvironmentHandler.class.getCanonicalName()),\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        IObject configuration = (IObject) args[0];\n                                                        IQueue queue = null;\n                                                        Integer stackDepth = null;\n                                                        try {\n                                                            queue = (IQueue) configuration.getValue(queueFieldName);\n                                                            stackDepth =\n                                                                    (Integer) configuration.getValue(stackDepthFieldName);\n                                                            return new EnvironmentHandler(queue, stackDepth);\n                                                        } catch (ReadValueException | InvalidArgumentException | ResolutionException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n\n                                    IOC.register(httpEndpointKey,\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        IObject configuration = (IObject) args[0];\n                                                        try {\n\n                                                            IOC.resolve(\n                                                                    Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"),\n                                                                    \"HTTP_GET\",\n                                                                    configuration.getValue(endpointNameFieldName),\n                                                                    configuration.getValue(templatesFieldName));\n                                                            IOC.resolve(\n                                                                    Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"),\n                                                                    \"HTTP_application/json\",\n                                                                    configuration.getValue(endpointNameFieldName));\n                                                            IOC.resolve(\n                                                                    Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"),\n                                                                    \"HTTP_application/x-www-form-urlencoded\",\n                                                                    configuration.getValue(endpointNameFieldName));\n\n                                                            IUpCounter upCounter = IOC.resolve(Keys.getOrAdd(\"root upcounter\"));\n\n                                                            IEnvironmentHandler environmentHandler = IOC.resolve(\n                                                                    Keys.getOrAdd(IEnvironmentHandler.class.getCanonicalName()),\n                                                                    configuration);\n                                                            HttpEndpoint endpoint = new HttpEndpoint(\n                                                                    (Integer) configuration.getValue(portFieldName),\n                                                                    (Integer) configuration.getValue(maxContentLengthFieldName),\n                                                                    ScopeProvider.getCurrentScope(), environmentHandler,\n                                                                    (IReceiverChain) configuration.getValue(startChainNameFieldName),\n                                                                    (String) configuration.getValue(endpointNameFieldName),\n                                                                    upCounter);\n\n                                                            upCounter.onShutdownComplete(endpoint::stop);\n\n                                                            return endpoint;\n                                                        } catch (ReadValueException | InvalidArgumentException\n                                                                | ScopeProviderException | ResolutionException\n                                                                | UpCounterCallbackExecutionException e) {\n                                                            throw new RuntimeException(e);\n                                                        }\n                                                    }\n                                            )\n                                    );\n                                    registerDeserializationStrategies();\n                                    registerResponseSenders();\n                                    IKey emptyIObjectKey = Keys.getOrAdd(\"EmptyIObject\");\n                                    IOC.register(emptyIObjectKey, new CreateNewInstanceStrategy(\n                                                    (args) -> new DSObject()\n                                            )\n                                    );\n\n                                    IKey channelHandlerNettyKey = Keys.getOrAdd(\"info.smart_tools.smartactors.http_endpoint.channel_handler_netty.ChannelHandlerNetty\");\n                                    IOC.register(channelHandlerNettyKey,\n                                            new CreateNewInstanceStrategy(\n                                                    (args) -> {\n                                                        ChannelHandlerNetty channelHandlerNetty = new ChannelHandlerNetty();\n                                                        channelHandlerNetty.init((ChannelHandlerContext) args[0]);\n                                                        return channelHandlerNetty;\n                                                    }\n                                            ));\n\n                                } catch (ResolutionException e) {\n                                    throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't get key\", e);\n                                } catch (InvalidArgumentException e) {\n                                    throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't create strategy\", e);\n                                } catch (RegistrationException | AdditionDependencyStrategyException e) {\n                                    throw new ActionExecuteException(\"EndpointCollection plugin can't load: can't register new strategy\", e);\n                                }\n                            }\n                    );\n            bootstrap.add(item);\n        } catch (Exception e) {\n            throw new PluginException(\"Can't load \\\"CreateHttpEndpoint\\\" plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "HttpEndpointPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "before", "after", "after", "after", "initializeFieldNames", "getOrAdd", "registerCookiesSetter", "registerHeadersExtractor", "registerResponseStatusExtractor", "registerExceptionalResponse", "register", "getOrAdd", "getCanonicalName", "getValue", "getValue", "register", "resolve", "getOrAdd", "getValue", "getValue", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "resolve", "getOrAdd", "getCanonicalName", "getValue", "getValue", "getCurrentScope", "getValue", "getValue", "onShutdownComplete", "registerDeserializationStrategies", "registerResponseSenders", "getOrAdd", "register", "getOrAdd", "register", "init", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}