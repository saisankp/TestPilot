{"test_class": {"identifier": "PipelineMetadataServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-pipeline-editor/src/test/java/io/blueocean/rest/pipeline/editor/PipelineMetadataServiceTest.java"}, "test_case": {"identifier": "declarativeAgents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void declarativeAgents() throws Exception {\n        PipelineMetadataService svc = new PipelineMetadataService();\n\n        List<ExportedDescribableModel> agents = new ArrayList<>();\n        agents.addAll(Arrays.asList(svc.doAgentMetadata()));\n\n        assertFalse(agents.isEmpty());\n\n        ExportedDescribableModel m = null;\n\n        for (ExportedDescribableModel a : agents) {\n            if (a.getType().equals(DockerPipeline.class.getName())) {\n                m = a;\n            }\n        }\n\n        assertNotNull(m);\n\n        assertTrue(m.getHasSingleRequiredParameter());\n\n        // check there are parameters present\n        assertTrue(m.getParameters().size() > 0);\n    }", "signature": "void declarativeAgents()", "full_signature": "@Test public void declarativeAgents()", "class_method_signature": "PipelineMetadataServiceTest.declarativeAgents()", "testcase": true, "constructor": false, "invocations": ["addAll", "asList", "doAgentMetadata", "assertFalse", "isEmpty", "equals", "getType", "getName", "assertNotNull", "assertTrue", "getHasSingleRequiredParameter", "assertTrue", "size", "getParameters"]}, "focal_class": {"identifier": "PipelineMetadataService", "superclass": "", "interfaces": "implements ApiRoutable", "fields": [{"original_string": "final static List<String> INCLUDED_ADVANCED_STEPS = Collections.unmodifiableList(Arrays.asList(\"catchError\"));", "modifier": "final static", "type": "List<String>", "declarator": "INCLUDED_ADVANCED_STEPS = Collections.unmodifiableList(Arrays.asList(\"catchError\"))", "var_name": "INCLUDED_ADVANCED_STEPS"}], "methods": [{"identifier": "getUrlName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUrlName()", "full_signature": "@Override public String getUrlName()", "class_method_signature": "PipelineMetadataService.getUrlName()", "testcase": false, "constructor": false}, {"identifier": "doCrumbInfo", "parameters": "()", "modifiers": "@GET public", "return": "String", "signature": "String doCrumbInfo()", "full_signature": "@GET public String doCrumbInfo()", "class_method_signature": "PipelineMetadataService.doCrumbInfo()", "testcase": false, "constructor": false}, {"identifier": "doAgentMetadata", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedDescribableModel[]", "signature": "ExportedDescribableModel[] doAgentMetadata()", "full_signature": "@GET @TreeResponse public ExportedDescribableModel[] doAgentMetadata()", "class_method_signature": "PipelineMetadataService.doAgentMetadata()", "testcase": false, "constructor": false}, {"identifier": "doToolMetadata", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedToolDescriptor[]", "signature": "ExportedToolDescriptor[] doToolMetadata()", "full_signature": "@GET @TreeResponse public ExportedToolDescriptor[] doToolMetadata()", "class_method_signature": "PipelineMetadataService.doToolMetadata()", "testcase": false, "constructor": false}, {"identifier": "doBuildConditions", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedBuildCondition[]", "signature": "ExportedBuildCondition[] doBuildConditions()", "full_signature": "@GET @TreeResponse public ExportedBuildCondition[] doBuildConditions()", "class_method_signature": "PipelineMetadataService.doBuildConditions()", "testcase": false, "constructor": false}, {"identifier": "doWrapperMetadata", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedPipelineStep[]", "signature": "ExportedPipelineStep[] doWrapperMetadata()", "full_signature": "@GET @TreeResponse public ExportedPipelineStep[] doWrapperMetadata()", "class_method_signature": "PipelineMetadataService.doWrapperMetadata()", "testcase": false, "constructor": false}, {"identifier": "doPipelineStepMetadata", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedPipelineFunction[]", "signature": "ExportedPipelineFunction[] doPipelineStepMetadata()", "full_signature": "@GET @TreeResponse public ExportedPipelineFunction[] doPipelineStepMetadata()", "class_method_signature": "PipelineMetadataService.doPipelineStepMetadata()", "testcase": false, "constructor": false}, {"identifier": "isWrapper", "parameters": "(StepDescriptor d)", "modifiers": "private", "return": "boolean", "signature": "boolean isWrapper(StepDescriptor d)", "full_signature": "private boolean isWrapper(StepDescriptor d)", "class_method_signature": "PipelineMetadataService.isWrapper(StepDescriptor d)", "testcase": false, "constructor": false}, {"identifier": "includeStep", "parameters": "(StepDescriptor d)", "modifiers": "private", "return": "boolean", "signature": "boolean includeStep(StepDescriptor d)", "full_signature": "private boolean includeStep(StepDescriptor d)", "class_method_signature": "PipelineMetadataService.includeStep(StepDescriptor d)", "testcase": false, "constructor": false}, {"identifier": "populateMetaSteps", "parameters": "(List<Descriptor<?>> r, Class<T> c)", "modifiers": "private", "return": "void", "signature": "void populateMetaSteps(List<Descriptor<?>> r, Class<T> c)", "full_signature": "private void populateMetaSteps(List<Descriptor<?>> r, Class<T> c)", "class_method_signature": "PipelineMetadataService.populateMetaSteps(List<Descriptor<?>> r, Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "symbolForObject", "parameters": "(Object d)", "modifiers": "private @CheckForNull", "return": "String", "signature": "String symbolForObject(Object d)", "full_signature": "private @CheckForNull String symbolForObject(Object d)", "class_method_signature": "PipelineMetadataService.symbolForObject(Object d)", "testcase": false, "constructor": false}, {"identifier": "getStepMetadata", "parameters": "(Descriptor<?> d)", "modifiers": "private @CheckForNull", "return": "ExportedPipelineFunction", "signature": "ExportedPipelineFunction getStepMetadata(Descriptor<?> d)", "full_signature": "private @CheckForNull ExportedPipelineFunction getStepMetadata(Descriptor<?> d)", "class_method_signature": "PipelineMetadataService.getStepMetadata(Descriptor<?> d)", "testcase": false, "constructor": false}, {"identifier": "getStepMetadata", "parameters": "(StepDescriptor d)", "modifiers": "private @CheckForNull", "return": "ExportedPipelineStep", "signature": "ExportedPipelineStep getStepMetadata(StepDescriptor d)", "full_signature": "private @CheckForNull ExportedPipelineStep getStepMetadata(StepDescriptor d)", "class_method_signature": "PipelineMetadataService.getStepMetadata(StepDescriptor d)", "testcase": false, "constructor": false}], "file": "blueocean-pipeline-editor/src/main/java/io/blueocean/rest/pipeline/editor/PipelineMetadataService.java"}, "focal_method": {"identifier": "doAgentMetadata", "parameters": "()", "modifiers": "@GET @TreeResponse public", "return": "ExportedDescribableModel[]", "body": "@GET\n    @TreeResponse\n    public ExportedDescribableModel[] doAgentMetadata() {\n        List<ExportedDescribableModel> models = new ArrayList<>();\n\n        for (DeclarativeAgentDescriptor d : DeclarativeAgentDescriptor.all()) {\n            try {\n                DescribableModel<? extends DeclarativeAgent> model = new DescribableModel<>(d.clazz);\n\n                String symbol = symbolForObject(d);\n                if (\"label\".equals(symbol)) { // Label has 2 symbols, but we need \"node\"\n                    symbol = \"node\";\n                }\n                models.add(new ExportedDescribableModel(model, symbol));\n            } catch (NoStaplerConstructorException e) {\n                // Ignore!\n            }\n        }\n        return models.toArray(new ExportedDescribableModel[models.size()]);\n    }", "signature": "ExportedDescribableModel[] doAgentMetadata()", "full_signature": "@GET @TreeResponse public ExportedDescribableModel[] doAgentMetadata()", "class_method_signature": "PipelineMetadataService.doAgentMetadata()", "testcase": false, "constructor": false, "invocations": ["all", "symbolForObject", "equals", "add", "toArray", "size"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}