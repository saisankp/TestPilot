{"test_class": {"identifier": "TestKinectSpokenInput", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(TestKinectRecognizer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(TestKinectRecognizer.class)", "var_name": "LOGGER"}], "file": "org.jvoicexml.implementation.kinect/src/test/java/org/jvoicexml/implementation/kinect/TestKinectSpokenInput.java"}, "test_case": {"identifier": "testStopRecognition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStopRecognition() throws Exception, JVoiceXMLEvent {\n        final KinectSpokenInput input = new KinectSpokenInput();\n        final MockSpokenInputListener listener = new MockSpokenInputListener();\n        input.addListener(listener);\n        input.open();\n        input.activate();\n        input.startRecognition(null, null, null);\n        listener.waitSize(1, 10000);\n        final SpokenInputEvent event1 = listener.get(0);\n        Assert.assertEquals(RecognitionEvent.EVENT_TYPE, event1.getEventType());\n        LOGGER.info(\"Say nothing\");\n        Thread.sleep(5000);\n        input.stopRecognition();\n        Assert.assertFalse(input.isBusy());\n        input.passivate();\n    }", "signature": "void testStopRecognition()", "full_signature": "@Test public void testStopRecognition()", "class_method_signature": "TestKinectSpokenInput.testStopRecognition()", "testcase": true, "constructor": false, "invocations": ["addListener", "open", "activate", "startRecognition", "waitSize", "get", "assertEquals", "getEventType", "info", "sleep", "stopRecognition", "assertFalse", "isBusy", "passivate"]}, "focal_class": {"identifier": "KinectSpokenInput", "superclass": "", "interfaces": "implements SpokenInput", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(KinectSpokenInput.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(KinectSpokenInput.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<SpokenInputListener> listeners;", "modifier": "private final", "type": "Collection<SpokenInputListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private String type;", "modifier": "private", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private KinectRecognizer recognizer;", "modifier": "private", "type": "KinectRecognizer", "declarator": "recognizer", "var_name": "recognizer"}], "methods": [{"identifier": "KinectSpokenInput", "parameters": "()", "modifiers": "public", "return": "", "signature": " KinectSpokenInput()", "full_signature": "public  KinectSpokenInput()", "class_method_signature": "KinectSpokenInput.KinectSpokenInput()", "testcase": false, "constructor": true}, {"identifier": "setType", "parameters": "(final String value)", "modifiers": "public", "return": "void", "signature": "void setType(final String value)", "full_signature": "public void setType(final String value)", "class_method_signature": "KinectSpokenInput.setType(final String value)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getType()", "full_signature": "@Override public String getType()", "class_method_signature": "KinectSpokenInput.getType()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "KinectSpokenInput.open()", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isOpen()", "full_signature": " boolean isOpen()", "class_method_signature": "KinectSpokenInput.isOpen()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "KinectSpokenInput.activate()", "testcase": false, "constructor": false}, {"identifier": "isActivated", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isActivated()", "full_signature": " boolean isActivated()", "class_method_signature": "KinectSpokenInput.isActivated()", "testcase": false, "constructor": false}, {"identifier": "passivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void passivate()", "full_signature": "@Override public void passivate()", "class_method_signature": "KinectSpokenInput.passivate()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "KinectSpokenInput.close()", "testcase": false, "constructor": false}, {"identifier": "isBusy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBusy()", "full_signature": "@Override public boolean isBusy()", "class_method_signature": "KinectSpokenInput.isBusy()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(ConnectionInformation client)", "modifiers": "@Override public", "return": "void", "signature": "void connect(ConnectionInformation client)", "full_signature": "@Override public void connect(ConnectionInformation client)", "class_method_signature": "KinectSpokenInput.connect(ConnectionInformation client)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(ConnectionInformation client)", "modifiers": "@Override public", "return": "void", "signature": "void disconnect(ConnectionInformation client)", "full_signature": "@Override public void disconnect(ConnectionInformation client)", "class_method_signature": "KinectSpokenInput.disconnect(ConnectionInformation client)", "testcase": false, "constructor": false}, {"identifier": "startRecognition", "parameters": "(final DataModel model,\n            SpeechRecognizerProperties speech,\n            DtmfRecognizerProperties dtmf)", "modifiers": "@Override public", "return": "void", "signature": "void startRecognition(final DataModel model,\n            SpeechRecognizerProperties speech,\n            DtmfRecognizerProperties dtmf)", "full_signature": "@Override public void startRecognition(final DataModel model,\n            SpeechRecognizerProperties speech,\n            DtmfRecognizerProperties dtmf)", "class_method_signature": "KinectSpokenInput.startRecognition(final DataModel model,\n            SpeechRecognizerProperties speech,\n            DtmfRecognizerProperties dtmf)", "testcase": false, "constructor": false}, {"identifier": "stopRecognition", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopRecognition()", "full_signature": "@Override public void stopRecognition()", "class_method_signature": "KinectSpokenInput.stopRecognition()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(final SpokenInputListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(final SpokenInputListener listener)", "full_signature": "@Override public void addListener(final SpokenInputListener listener)", "class_method_signature": "KinectSpokenInput.addListener(final SpokenInputListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(final SpokenInputListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(final SpokenInputListener listener)", "full_signature": "@Override public void removeListener(final SpokenInputListener listener)", "class_method_signature": "KinectSpokenInput.removeListener(final SpokenInputListener listener)", "testcase": false, "constructor": false}, {"identifier": "activateGrammars", "parameters": "(\n            final Collection<GrammarImplementation<?>> grammars)", "modifiers": "@Override public", "return": "void", "signature": "void activateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "full_signature": "@Override public void activateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "class_method_signature": "KinectSpokenInput.activateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "testcase": false, "constructor": false}, {"identifier": "deactivateGrammars", "parameters": "(\n            final Collection<GrammarImplementation<?>> grammars)", "modifiers": "@Override public", "return": "void", "signature": "void deactivateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "full_signature": "@Override public void deactivateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "class_method_signature": "KinectSpokenInput.deactivateGrammars(\n            final Collection<GrammarImplementation<?>> grammars)", "testcase": false, "constructor": false}, {"identifier": "getSupportedGrammarTypes", "parameters": "()", "modifiers": "@Override public", "return": "Collection<GrammarType>", "signature": "Collection<GrammarType> getSupportedGrammarTypes()", "full_signature": "@Override public Collection<GrammarType> getSupportedGrammarTypes()", "class_method_signature": "KinectSpokenInput.getSupportedGrammarTypes()", "testcase": false, "constructor": false}, {"identifier": "loadGrammar", "parameters": "(URI uri, GrammarType type)", "modifiers": "@Override public", "return": "GrammarImplementation<?>", "signature": "GrammarImplementation<?> loadGrammar(URI uri, GrammarType type)", "full_signature": "@Override public GrammarImplementation<?> loadGrammar(URI uri, GrammarType type)", "class_method_signature": "KinectSpokenInput.loadGrammar(URI uri, GrammarType type)", "testcase": false, "constructor": false}, {"identifier": "getSupportedBargeInTypes", "parameters": "()", "modifiers": "@Override public", "return": "Collection<BargeInType>", "signature": "Collection<BargeInType> getSupportedBargeInTypes()", "full_signature": "@Override public Collection<BargeInType> getSupportedBargeInTypes()", "class_method_signature": "KinectSpokenInput.getSupportedBargeInTypes()", "testcase": false, "constructor": false}, {"identifier": "fireInputEvent", "parameters": "(final SpokenInputEvent event)", "modifiers": "", "return": "void", "signature": "void fireInputEvent(final SpokenInputEvent event)", "full_signature": " void fireInputEvent(final SpokenInputEvent event)", "class_method_signature": "KinectSpokenInput.fireInputEvent(final SpokenInputEvent event)", "testcase": false, "constructor": false}, {"identifier": "notifyError", "parameters": "(final ErrorEvent error)", "modifiers": "", "return": "void", "signature": "void notifyError(final ErrorEvent error)", "full_signature": " void notifyError(final ErrorEvent error)", "class_method_signature": "KinectSpokenInput.notifyError(final ErrorEvent error)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.kinect/src/main/java/org/jvoicexml/implementation/kinect/KinectSpokenInput.java"}, "focal_method": {"identifier": "stopRecognition", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void stopRecognition() {\n        try {\n            recognizer.stopRecognition();\n            recognizer.deallocate();\n        } catch (KinectRecognizerException e) {\n            LOGGER.warn(e.getMessage(), e);\n        } finally {\n            final SpokenInputEvent event = new RecognitionStoppedEvent(this,\n                    null);\n            fireInputEvent(event);\n        }\n    }", "signature": "void stopRecognition()", "full_signature": "@Override public void stopRecognition()", "class_method_signature": "KinectSpokenInput.stopRecognition()", "testcase": false, "constructor": false, "invocations": ["stopRecognition", "deallocate", "warn", "getMessage", "fireInputEvent"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}