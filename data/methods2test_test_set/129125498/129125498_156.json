{"test_class": {"identifier": "EdmxEstimatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private static final long RANDOM_SEED = 314159;", "modifier": "private static final", "type": "long", "declarator": "RANDOM_SEED = 314159", "var_name": "RANDOM_SEED"}, {"original_string": "private static final double STRONG_ALPHA = 0.05;", "modifier": "private static final", "type": "double", "declarator": "STRONG_ALPHA = 0.05", "var_name": "STRONG_ALPHA"}, {"original_string": "private static final double WEAK_ALPHA = 0.10;", "modifier": "private static final", "type": "double", "declarator": "WEAK_ALPHA = 0.10", "var_name": "WEAK_ALPHA"}, {"original_string": "private Random random;", "modifier": "private", "type": "Random", "declarator": "random", "var_name": "random"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxEstimatorTest.java"}, "test_case": {"identifier": "testEdmx_range0", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEdmx_range0() {\n        val data = new double[100];\n        Arrays.fill(data, 1.0);\n        val estBreakout = EdmxEstimator.estimate(data, 24, 0);\n\n        // TODO Might want to make this series throw an exception since the R package fails on division by 0.\n        assertEquals(-1, estBreakout.getLocation());\n    }", "signature": "void testEdmx_range0()", "full_signature": "@Test public void testEdmx_range0()", "class_method_signature": "EdmxEstimatorTest.testEdmx_range0()", "testcase": true, "constructor": false, "invocations": ["fill", "estimate", "assertEquals", "getLocation"]}, "focal_class": {"identifier": "EdmxEstimator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "estimate", "parameters": "(double[] data, int delta, int numPerms)", "modifiers": "public static", "return": "EdmxEstimate", "signature": "EdmxEstimate estimate(double[] data, int delta, int numPerms)", "full_signature": "public static EdmxEstimate estimate(double[] data, int delta, int numPerms)", "class_method_signature": "EdmxEstimator.estimate(double[] data, int delta, int numPerms)", "testcase": false, "constructor": false}, {"identifier": "estimateSimpleBreakout", "parameters": "(double[] data, int delta)", "modifiers": "private static", "return": "SimpleEdmxBreakoutEstimate", "signature": "SimpleEdmxBreakoutEstimate estimateSimpleBreakout(double[] data, int delta)", "full_signature": "private static SimpleEdmxBreakoutEstimate estimateSimpleBreakout(double[] data, int delta)", "class_method_signature": "EdmxEstimator.estimateSimpleBreakout(double[] data, int delta)", "testcase": false, "constructor": false}, {"identifier": "estimatePValue", "parameters": "(double[] data, int delta, int numPerms, Double testStat)", "modifiers": "private static", "return": "double", "signature": "double estimatePValue(double[] data, int delta, int numPerms, Double testStat)", "full_signature": "private static double estimatePValue(double[] data, int delta, int numPerms, Double testStat)", "class_method_signature": "EdmxEstimator.estimatePValue(double[] data, int delta, int numPerms, Double testStat)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxEstimator.java"}, "focal_method": {"identifier": "estimate", "parameters": "(double[] data, int delta, int numPerms)", "modifiers": "public static", "return": "EdmxEstimate", "body": "public static EdmxEstimate estimate(double[] data, int delta, int numPerms) {\n        val scaledData = DataUtil.unitScale(data);\n        val breakout = estimateSimpleBreakout(scaledData, delta);\n        val energyDistance = breakout.getEnergyDistance();\n        val pValue = estimatePValue(scaledData, delta, numPerms, energyDistance);\n\n        return new EdmxEstimate()\n                .setLocation(breakout.location)\n                .setEnergyDistance(breakout.energyDistance)\n                .setPreBreakoutMedian(breakout.preBreakoutMedian)\n                .setPostBreakoutMedian(breakout.postBreakoutMedian)\n                .setPValue(pValue);\n    }", "signature": "EdmxEstimate estimate(double[] data, int delta, int numPerms)", "full_signature": "public static EdmxEstimate estimate(double[] data, int delta, int numPerms)", "class_method_signature": "EdmxEstimator.estimate(double[] data, int delta, int numPerms)", "testcase": false, "constructor": false, "invocations": ["unitScale", "estimateSimpleBreakout", "getEnergyDistance", "estimatePValue", "setPValue", "setPostBreakoutMedian", "setPreBreakoutMedian", "setEnergyDistance", "setLocation"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}