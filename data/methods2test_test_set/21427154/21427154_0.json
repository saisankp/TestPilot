{"test_class": {"identifier": "ManagementClientTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/jboss/as/arquillian/container/ManagementClientTest.java"}, "test_case": {"identifier": "shouldParseBindAllAsLocalhost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseBindAllAsLocalhost() {\n        String sourceIp = \"0.0.0.0\";\n        String parsedIp = ManagementClient.formatIP(sourceIp);\n        Assert.assertEquals(\"127.0.0.1\", parsedIp);\n    }", "signature": "void shouldParseBindAllAsLocalhost()", "full_signature": "@Test public void shouldParseBindAllAsLocalhost()", "class_method_signature": "ManagementClientTest.shouldParseBindAllAsLocalhost()", "testcase": true, "constructor": false, "invocations": ["formatIP", "assertEquals"]}, "focal_class": {"identifier": "ManagementClient", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(ManagementClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(ManagementClient.class)", "var_name": "logger"}, {"original_string": "private static final String SUBDEPLOYMENT = \"subdeployment\";", "modifier": "private static final", "type": "String", "declarator": "SUBDEPLOYMENT = \"subdeployment\"", "var_name": "SUBDEPLOYMENT"}, {"original_string": "private static final String UNDERTOW = \"undertow\";", "modifier": "private static final", "type": "String", "declarator": "UNDERTOW = \"undertow\"", "var_name": "UNDERTOW"}, {"original_string": "private static final String NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"name\"", "var_name": "NAME"}, {"original_string": "private static final String SERVLET = \"servlet\";", "modifier": "private static final", "type": "String", "declarator": "SERVLET = \"servlet\"", "var_name": "SERVLET"}, {"original_string": "private static final String POSTFIX_WEB = \".war\";", "modifier": "private static final", "type": "String", "declarator": "POSTFIX_WEB = \".war\"", "var_name": "POSTFIX_WEB"}, {"original_string": "private static final String POSTFIX_EAR = \".ear\";", "modifier": "private static final", "type": "String", "declarator": "POSTFIX_EAR = \".ear\"", "var_name": "POSTFIX_EAR"}, {"original_string": "private static final ModelNode UNDERTOW_SUBSYSTEM_ADDRESS = new ModelNode().add(\"subsystem\", UNDERTOW);", "modifier": "private static final", "type": "ModelNode", "declarator": "UNDERTOW_SUBSYSTEM_ADDRESS = new ModelNode().add(\"subsystem\", UNDERTOW)", "var_name": "UNDERTOW_SUBSYSTEM_ADDRESS"}, {"original_string": "private final String mgmtAddress;", "modifier": "private final", "type": "String", "declarator": "mgmtAddress", "var_name": "mgmtAddress"}, {"original_string": "private final int mgmtPort;", "modifier": "private final", "type": "int", "declarator": "mgmtPort", "var_name": "mgmtPort"}, {"original_string": "private final String mgmtProtocol;", "modifier": "private final", "type": "String", "declarator": "mgmtProtocol", "var_name": "mgmtProtocol"}, {"original_string": "private final ModelControllerClient client;", "modifier": "private final", "type": "ModelControllerClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final CommonContainerConfiguration config;", "modifier": "private final", "type": "CommonContainerConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private URI webUri;", "modifier": "private", "type": "URI", "declarator": "webUri", "var_name": "webUri"}, {"original_string": "private URI ejbUri;", "modifier": "private", "type": "URI", "declarator": "ejbUri", "var_name": "ejbUri"}, {"original_string": "private ModelNode undertowSubsystem = null;", "modifier": "private", "type": "ModelNode", "declarator": "undertowSubsystem = null", "var_name": "undertowSubsystem"}, {"original_string": "private MBeanServerConnection connection;", "modifier": "private", "type": "MBeanServerConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private JMXConnector connector;", "modifier": "private", "type": "JMXConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private boolean undertowSubsystemPresent = false;", "modifier": "private", "type": "boolean", "declarator": "undertowSubsystemPresent = false", "var_name": "undertowSubsystemPresent"}, {"original_string": "private boolean jmxSubsystemPresent = false;", "modifier": "private", "type": "boolean", "declarator": "jmxSubsystemPresent = false", "var_name": "jmxSubsystemPresent"}, {"original_string": "private boolean closed = false;", "modifier": "private", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "methods": [{"identifier": "ManagementClient", "parameters": "(ModelControllerClient client, final String mgmtAddress, final int managementPort, final String protocol)", "modifiers": "public", "return": "", "signature": " ManagementClient(ModelControllerClient client, final String mgmtAddress, final int managementPort, final String protocol)", "full_signature": "public  ManagementClient(ModelControllerClient client, final String mgmtAddress, final int managementPort, final String protocol)", "class_method_signature": "ManagementClient.ManagementClient(ModelControllerClient client, final String mgmtAddress, final int managementPort, final String protocol)", "testcase": false, "constructor": true}, {"identifier": "ManagementClient", "parameters": "(ModelControllerClient client, final CommonContainerConfiguration config)", "modifiers": "public", "return": "", "signature": " ManagementClient(ModelControllerClient client, final CommonContainerConfiguration config)", "full_signature": "public  ManagementClient(ModelControllerClient client, final CommonContainerConfiguration config)", "class_method_signature": "ManagementClient.ManagementClient(ModelControllerClient client, final CommonContainerConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "getControllerClient", "parameters": "()", "modifiers": "public", "return": "ModelControllerClient", "signature": "ModelControllerClient getControllerClient()", "full_signature": "public ModelControllerClient getControllerClient()", "class_method_signature": "ManagementClient.getControllerClient()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "ManagementClient.reset()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "ManagementClient.init()", "testcase": false, "constructor": false}, {"identifier": "getWebUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getWebUri()", "full_signature": "public URI getWebUri()", "class_method_signature": "ManagementClient.getWebUri()", "testcase": false, "constructor": false}, {"identifier": "getProtocolMetaData", "parameters": "(String deploymentName)", "modifiers": "public", "return": "ProtocolMetaData", "signature": "ProtocolMetaData getProtocolMetaData(String deploymentName)", "full_signature": "public ProtocolMetaData getProtocolMetaData(String deploymentName)", "class_method_signature": "ManagementClient.getProtocolMetaData(String deploymentName)", "testcase": false, "constructor": false}, {"identifier": "isServerInRunningState", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isServerInRunningState()", "full_signature": "public boolean isServerInRunningState()", "class_method_signature": "ManagementClient.isServerInRunningState()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "ManagementClient.isClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ManagementClient.close()", "testcase": false, "constructor": false}, {"identifier": "defined", "parameters": "(final ModelNode node, final String message)", "modifiers": "private static", "return": "ModelNode", "signature": "ModelNode defined(final ModelNode node, final String message)", "full_signature": "private static ModelNode defined(final ModelNode node, final String message)", "class_method_signature": "ManagementClient.defined(final ModelNode node, final String message)", "testcase": false, "constructor": false}, {"identifier": "getBinding", "parameters": "(final String protocol, final String socketBinding)", "modifiers": "private", "return": "URI", "signature": "URI getBinding(final String protocol, final String socketBinding)", "full_signature": "private URI getBinding(final String protocol, final String socketBinding)", "class_method_signature": "ManagementClient.getBinding(final String protocol, final String socketBinding)", "testcase": false, "constructor": false}, {"identifier": "formatIP", "parameters": "(String ip)", "modifiers": "static", "return": "String", "signature": "String formatIP(String ip)", "full_signature": "static String formatIP(String ip)", "class_method_signature": "ManagementClient.formatIP(String ip)", "testcase": false, "constructor": false}, {"identifier": "isEnterpriseArchive", "parameters": "(String deploymentName)", "modifiers": "private", "return": "boolean", "signature": "boolean isEnterpriseArchive(String deploymentName)", "full_signature": "private boolean isEnterpriseArchive(String deploymentName)", "class_method_signature": "ManagementClient.isEnterpriseArchive(String deploymentName)", "testcase": false, "constructor": false}, {"identifier": "isWebArchive", "parameters": "(String deploymentName)", "modifiers": "private", "return": "boolean", "signature": "boolean isWebArchive(String deploymentName)", "full_signature": "private boolean isWebArchive(String deploymentName)", "class_method_signature": "ManagementClient.isWebArchive(String deploymentName)", "testcase": false, "constructor": false}, {"identifier": "extractEnterpriseArchiveContexts", "parameters": "(HTTPContext context, ModelNode deploymentNode)", "modifiers": "private", "return": "void", "signature": "void extractEnterpriseArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "full_signature": "private void extractEnterpriseArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "class_method_signature": "ManagementClient.extractEnterpriseArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "testcase": false, "constructor": false}, {"identifier": "extractWebArchiveContexts", "parameters": "(HTTPContext context, ModelNode deploymentNode)", "modifiers": "private", "return": "void", "signature": "void extractWebArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "full_signature": "private void extractWebArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "class_method_signature": "ManagementClient.extractWebArchiveContexts(HTTPContext context, ModelNode deploymentNode)", "testcase": false, "constructor": false}, {"identifier": "toContextName", "parameters": "(String deploymentName)", "modifiers": "private", "return": "String", "signature": "String toContextName(String deploymentName)", "full_signature": "private String toContextName(String deploymentName)", "class_method_signature": "ManagementClient.toContextName(String deploymentName)", "testcase": false, "constructor": false}, {"identifier": "executeForResult", "parameters": "(final ModelNode operation)", "modifiers": "private", "return": "ModelNode", "signature": "ModelNode executeForResult(final ModelNode operation)", "full_signature": "private ModelNode executeForResult(final ModelNode operation)", "class_method_signature": "ManagementClient.executeForResult(final ModelNode operation)", "testcase": false, "constructor": false}, {"identifier": "readDeploymentNode", "parameters": "(final String deploymentName)", "modifiers": "private", "return": "ModelNode", "signature": "ModelNode readDeploymentNode(final String deploymentName)", "full_signature": "private ModelNode readDeploymentNode(final String deploymentName)", "class_method_signature": "ManagementClient.readDeploymentNode(final String deploymentName)", "testcase": false, "constructor": false}, {"identifier": "checkSuccessful", "parameters": "(final ModelNode result,\n                                 final ModelNode operation)", "modifiers": "private", "return": "void", "signature": "void checkSuccessful(final ModelNode result,\n                                 final ModelNode operation)", "full_signature": "private void checkSuccessful(final ModelNode result,\n                                 final ModelNode operation)", "class_method_signature": "ManagementClient.checkSuccessful(final ModelNode result,\n                                 final ModelNode operation)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "private", "return": "MBeanServerConnection", "signature": "MBeanServerConnection getConnection()", "full_signature": "private MBeanServerConnection getConnection()", "class_method_signature": "ManagementClient.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getRemoteJMXURL", "parameters": "()", "modifiers": "public", "return": "JMXServiceURL", "signature": "JMXServiceURL getRemoteJMXURL()", "full_signature": "public JMXServiceURL getRemoteJMXURL()", "class_method_signature": "ManagementClient.getRemoteJMXURL()", "testcase": false, "constructor": false}, {"identifier": "getMgmtPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMgmtPort()", "full_signature": "public int getMgmtPort()", "class_method_signature": "ManagementClient.getMgmtPort()", "testcase": false, "constructor": false}, {"identifier": "getMgmtAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMgmtAddress()", "full_signature": "public String getMgmtAddress()", "class_method_signature": "ManagementClient.getMgmtAddress()", "testcase": false, "constructor": false}, {"identifier": "getMgmtProtocol", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMgmtProtocol()", "full_signature": "public String getMgmtProtocol()", "class_method_signature": "ManagementClient.getMgmtProtocol()", "testcase": false, "constructor": false}, {"identifier": "getRemoteEjbURL", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getRemoteEjbURL()", "full_signature": "public URI getRemoteEjbURL()", "class_method_signature": "ManagementClient.getRemoteEjbURL()", "testcase": false, "constructor": false}, {"identifier": "checkState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkState()", "full_signature": "private void checkState()", "class_method_signature": "ManagementClient.checkState()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/jboss/as/arquillian/container/ManagementClient.java"}, "focal_method": {"identifier": "formatIP", "parameters": "(String ip)", "modifiers": "static", "return": "String", "body": "static String formatIP(String ip) {\n        //it appears some system can return a binding with the zone specifier on the end\n        if (ip.contains(\":\") && ip.contains(\"%\")) {\n            ip = ip.split(\"%\")[0];\n        }\n        if (ip.equals(\"0.0.0.0\")) {\n            logger.debug(\"WildFly is bound to 0.0.0.0 which is correct, setting client to 127.0.0.1\");\n            ip = \"127.0.0.1\";\n        }\n        return ip;\n    }", "signature": "String formatIP(String ip)", "full_signature": "static String formatIP(String ip)", "class_method_signature": "ManagementClient.formatIP(String ip)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "split", "equals", "debug"]}, "repository": {"repo_id": 21427154, "url": "https://github.com/wildfly/wildfly-arquillian", "language": "Java", "is_fork": false, "fork_count": 60, "stargazer_count": 29, "size": 1721, "license": "licensed"}}