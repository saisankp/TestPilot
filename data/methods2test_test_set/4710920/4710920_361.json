{"test_class": {"identifier": "WrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java"}, "test_case": {"identifier": "testSetPropertyValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetPropertyValue() throws Exception {\n        Assertions.assertThrows(NoSuchPropertyException.class, () -> {\n            Wrapper w = Wrapper.getWrapper(Object.class);\n            w.setPropertyValue(null, null, null);\n        });\n    }", "signature": "void testSetPropertyValue()", "full_signature": "@Test public void testSetPropertyValue()", "class_method_signature": "WrapperTest.testSetPropertyValue()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "getWrapper", "setPropertyValue"]}, "focal_class": {"identifier": "Wrapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Class<?>, Wrapper> WRAPPER_MAP = new ConcurrentHashMap<Class<?>, Wrapper>();", "modifier": "private static final", "type": "Map<Class<?>, Wrapper>", "declarator": "WRAPPER_MAP = new ConcurrentHashMap<Class<?>, Wrapper>()", "var_name": "WRAPPER_MAP"}, {"original_string": "private static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final String[] OBJECT_METHODS = new String[]{\"getClass\", \"hashCode\", \"toString\", \"equals\"};", "modifier": "private static final", "type": "String[]", "declarator": "OBJECT_METHODS = new String[]{\"getClass\", \"hashCode\", \"toString\", \"equals\"}", "var_name": "OBJECT_METHODS"}, {"original_string": "private static final Wrapper OBJECT_WRAPPER = new Wrapper() {\n        @Override\n        public String[] getMethodNames() {\n            return OBJECT_METHODS;\n        }\n\n        @Override\n        public String[] getDeclaredMethodNames() {\n            return OBJECT_METHODS;\n        }\n\n        @Override\n        public String[] getPropertyNames() {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        @Override\n        public Class<?> getPropertyType(String pn) {\n            return null;\n        }\n\n        @Override\n        public Object getPropertyValue(Object instance, String pn) throws NoSuchPropertyException {\n            throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n        }\n\n        @Override\n        public void setPropertyValue(Object instance, String pn, Object pv) throws NoSuchPropertyException {\n            throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n        }\n\n        @Override\n        public boolean hasProperty(String name) {\n            return false;\n        }\n\n        @Override\n        public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args) throws NoSuchMethodException {\n            if (\"getClass\".equals(mn)) {\n                return instance.getClass();\n            }\n            if (\"hashCode\".equals(mn)) {\n                return instance.hashCode();\n            }\n            if (\"toString\".equals(mn)) {\n                return instance.toString();\n            }\n            if (\"equals\".equals(mn)) {\n                if (args.length == 1) {\n                    return instance.equals(args[0]);\n                }\n                throw new IllegalArgumentException(\"Invoke method [\" + mn + \"] argument number error.\");\n            }\n            throw new NoSuchMethodException(\"Method [\" + mn + \"] not found.\");\n        }\n    };", "modifier": "private static final", "type": "Wrapper", "declarator": "OBJECT_WRAPPER = new Wrapper() {\n        @Override\n        public String[] getMethodNames() {\n            return OBJECT_METHODS;\n        }\n\n        @Override\n        public String[] getDeclaredMethodNames() {\n            return OBJECT_METHODS;\n        }\n\n        @Override\n        public String[] getPropertyNames() {\n            return EMPTY_STRING_ARRAY;\n        }\n\n        @Override\n        public Class<?> getPropertyType(String pn) {\n            return null;\n        }\n\n        @Override\n        public Object getPropertyValue(Object instance, String pn) throws NoSuchPropertyException {\n            throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n        }\n\n        @Override\n        public void setPropertyValue(Object instance, String pn, Object pv) throws NoSuchPropertyException {\n            throw new NoSuchPropertyException(\"Property [\" + pn + \"] not found.\");\n        }\n\n        @Override\n        public boolean hasProperty(String name) {\n            return false;\n        }\n\n        @Override\n        public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args) throws NoSuchMethodException {\n            if (\"getClass\".equals(mn)) {\n                return instance.getClass();\n            }\n            if (\"hashCode\".equals(mn)) {\n                return instance.hashCode();\n            }\n            if (\"toString\".equals(mn)) {\n                return instance.toString();\n            }\n            if (\"equals\".equals(mn)) {\n                if (args.length == 1) {\n                    return instance.equals(args[0]);\n                }\n                throw new IllegalArgumentException(\"Invoke method [\" + mn + \"] argument number error.\");\n            }\n            throw new NoSuchMethodException(\"Method [\" + mn + \"] not found.\");\n        }\n    }", "var_name": "OBJECT_WRAPPER"}, {"original_string": "private static AtomicLong WRAPPER_CLASS_COUNTER = new AtomicLong(0);", "modifier": "private static", "type": "AtomicLong", "declarator": "WRAPPER_CLASS_COUNTER = new AtomicLong(0)", "var_name": "WRAPPER_CLASS_COUNTER"}], "methods": [{"identifier": "getWrapper", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Wrapper", "signature": "Wrapper getWrapper(Class<?> c)", "full_signature": "public static Wrapper getWrapper(Class<?> c)", "class_method_signature": "Wrapper.getWrapper(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "makeWrapper", "parameters": "(Class<?> c)", "modifiers": "private static", "return": "Wrapper", "signature": "Wrapper makeWrapper(Class<?> c)", "full_signature": "private static Wrapper makeWrapper(Class<?> c)", "class_method_signature": "Wrapper.makeWrapper(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "arg", "parameters": "(Class<?> cl, String name)", "modifiers": "private static", "return": "String", "signature": "String arg(Class<?> cl, String name)", "full_signature": "private static String arg(Class<?> cl, String name)", "class_method_signature": "Wrapper.arg(Class<?> cl, String name)", "testcase": false, "constructor": false}, {"identifier": "args", "parameters": "(Class<?>[] cs, String name)", "modifiers": "private static", "return": "String", "signature": "String args(Class<?>[] cs, String name)", "full_signature": "private static String args(Class<?>[] cs, String name)", "class_method_signature": "Wrapper.args(Class<?>[] cs, String name)", "testcase": false, "constructor": false}, {"identifier": "propertyName", "parameters": "(String pn)", "modifiers": "private static", "return": "String", "signature": "String propertyName(String pn)", "full_signature": "private static String propertyName(String pn)", "class_method_signature": "Wrapper.propertyName(String pn)", "testcase": false, "constructor": false}, {"identifier": "hasMethods", "parameters": "(Method[] methods)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasMethods(Method[] methods)", "full_signature": "private static boolean hasMethods(Method[] methods)", "class_method_signature": "Wrapper.hasMethods(Method[] methods)", "testcase": false, "constructor": false}, {"identifier": "getPropertyNames", "parameters": "()", "modifiers": "abstract public", "return": "String[]", "signature": "String[] getPropertyNames()", "full_signature": "abstract public String[] getPropertyNames()", "class_method_signature": "Wrapper.getPropertyNames()", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(String pn)", "modifiers": "abstract public", "return": "Class<?>", "signature": "Class<?> getPropertyType(String pn)", "full_signature": "abstract public Class<?> getPropertyType(String pn)", "class_method_signature": "Wrapper.getPropertyType(String pn)", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "(String name)", "modifiers": "abstract public", "return": "boolean", "signature": "boolean hasProperty(String name)", "full_signature": "abstract public boolean hasProperty(String name)", "class_method_signature": "Wrapper.hasProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValue", "parameters": "(Object instance, String pn)", "modifiers": "abstract public", "return": "Object", "signature": "Object getPropertyValue(Object instance, String pn)", "full_signature": "abstract public Object getPropertyValue(Object instance, String pn)", "class_method_signature": "Wrapper.getPropertyValue(Object instance, String pn)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValue", "parameters": "(Object instance, String pn, Object pv)", "modifiers": "abstract public", "return": "void", "signature": "void setPropertyValue(Object instance, String pn, Object pv)", "full_signature": "abstract public void setPropertyValue(Object instance, String pn, Object pv)", "class_method_signature": "Wrapper.setPropertyValue(Object instance, String pn, Object pv)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValues", "parameters": "(Object instance, String[] pns)", "modifiers": "public", "return": "Object[]", "signature": "Object[] getPropertyValues(Object instance, String[] pns)", "full_signature": "public Object[] getPropertyValues(Object instance, String[] pns)", "class_method_signature": "Wrapper.getPropertyValues(Object instance, String[] pns)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValues", "parameters": "(Object instance, String[] pns, Object[] pvs)", "modifiers": "public", "return": "void", "signature": "void setPropertyValues(Object instance, String[] pns, Object[] pvs)", "full_signature": "public void setPropertyValues(Object instance, String[] pns, Object[] pvs)", "class_method_signature": "Wrapper.setPropertyValues(Object instance, String[] pns, Object[] pvs)", "testcase": false, "constructor": false}, {"identifier": "getMethodNames", "parameters": "()", "modifiers": "abstract public", "return": "String[]", "signature": "String[] getMethodNames()", "full_signature": "abstract public String[] getMethodNames()", "class_method_signature": "Wrapper.getMethodNames()", "testcase": false, "constructor": false}, {"identifier": "getDeclaredMethodNames", "parameters": "()", "modifiers": "abstract public", "return": "String[]", "signature": "String[] getDeclaredMethodNames()", "full_signature": "abstract public String[] getDeclaredMethodNames()", "class_method_signature": "Wrapper.getDeclaredMethodNames()", "testcase": false, "constructor": false}, {"identifier": "hasMethod", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasMethod(String name)", "full_signature": "public boolean hasMethod(String name)", "class_method_signature": "Wrapper.hasMethod(String name)", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "(Object instance, String mn, Class<?>[] types, Object[] args)", "modifiers": "abstract public", "return": "Object", "signature": "Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args)", "full_signature": "abstract public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args)", "class_method_signature": "Wrapper.invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java"}, "focal_method": {"identifier": "setPropertyValue", "parameters": "(Object instance, String pn, Object pv)", "modifiers": "abstract public", "return": "void", "body": "abstract public void setPropertyValue(Object instance, String pn, Object pv) throws NoSuchPropertyException, IllegalArgumentException;", "signature": "void setPropertyValue(Object instance, String pn, Object pv)", "full_signature": "abstract public void setPropertyValue(Object instance, String pn, Object pv)", "class_method_signature": "Wrapper.setPropertyValue(Object instance, String pn, Object pv)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}