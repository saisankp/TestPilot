{"test_class": {"identifier": "ExactCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/summary/count/ExactCountTest.java"}, "test_case": {"identifier": "testCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCount() {\n        ExactCount ec = new ExactCount();\n        HashMap<Integer, Integer> truth = new HashMap<>();\n\n        List<Datum> dws = new ArrayList<>();\n        for (int i = 0; i < 100; ++i) {\n            for (int j = 0; j < i; ++j) {\n                dws.add(new Datum(Lists.newArrayList(i), new ArrayRealVector()));\n                truth.compute(i, (k, v) -> v == null ? 1 : v + 1);\n            }\n        }\n\n        ec.count(dws);\n\n        for (Map.Entry<Integer, Double> cnt : ec.getCounts().entrySet()) {\n            assertEquals(truth.get(cnt.getKey()), cnt.getValue(), 1e-10);\n        }\n    }", "signature": "void testCount()", "full_signature": "@Test public void testCount()", "class_method_signature": "ExactCountTest.testCount()", "testcase": true, "constructor": false, "invocations": ["add", "newArrayList", "compute", "count", "entrySet", "getCounts", "assertEquals", "get", "getKey", "getValue"]}, "focal_class": {"identifier": "ExactCount", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HashMap<Integer, Double> counts = new HashMap<>();", "modifier": "private", "type": "HashMap<Integer, Double>", "declarator": "counts = new HashMap<>()", "var_name": "counts"}], "methods": [{"identifier": "getCounts", "parameters": "()", "modifiers": "public", "return": "HashMap<Integer, Double>", "signature": "HashMap<Integer, Double> getCounts()", "full_signature": "public HashMap<Integer, Double> getCounts()", "class_method_signature": "ExactCount.getCounts()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "ExactCount", "signature": "ExactCount count(List<Datum> data)", "full_signature": "public ExactCount count(List<Datum> data)", "class_method_signature": "ExactCount.count(List<Datum> data)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/summary/count/ExactCount.java"}, "focal_method": {"identifier": "count", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "ExactCount", "body": "public ExactCount count(List<Datum> data) {\n        for (Datum d : data) {\n            for (int i : d.attributes()) {\n                Double curVal = counts.get(i);\n                if (curVal == null) {\n                    curVal = 0.;\n                }\n                counts.put(i, curVal + 1);\n            }\n        }\n\n        return this;\n    }", "signature": "ExactCount count(List<Datum> data)", "full_signature": "public ExactCount count(List<Datum> data)", "class_method_signature": "ExactCount.count(List<Datum> data)", "testcase": false, "constructor": false, "invocations": ["attributes", "get", "put"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}