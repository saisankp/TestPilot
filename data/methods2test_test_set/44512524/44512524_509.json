{"test_class": {"identifier": "VarCountingBloomFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public VarCountingBloomFilter cbf;", "modifier": "public", "type": "VarCountingBloomFilter", "declarator": "cbf", "var_name": "cbf"}, {"original_string": "static final double MAX_FAILURE_RATE = 0.1;", "modifier": "static final", "type": "double", "declarator": "MAX_FAILURE_RATE = 0.1", "var_name": "MAX_FAILURE_RATE"}, {"original_string": "public static final BloomCalculations.BloomSpecification spec = BloomCalculations.computeBucketsAndK(MAX_FAILURE_RATE);", "modifier": "public static final", "type": "BloomCalculations.BloomSpecification", "declarator": "spec = BloomCalculations.computeBucketsAndK(MAX_FAILURE_RATE)", "var_name": "spec"}, {"original_string": "static final int ELEMENTS = 10000;", "modifier": "static final", "type": "int", "declarator": "ELEMENTS = 10000", "var_name": "ELEMENTS"}, {"original_string": "static final int EXP = 4;", "modifier": "static final", "type": "int", "declarator": "EXP = 4", "var_name": "EXP"}, {"original_string": "static final int MAX_COUNT = (int) (Math.pow(2, EXP) - 1);", "modifier": "static final", "type": "int", "declarator": "MAX_COUNT = (int) (Math.pow(2, EXP) - 1)", "var_name": "MAX_COUNT"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/membership/VarCountingBloomFilterTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        cbf.clear();\n        \n        cbf.add(\"a\");\n        cbf.add(\"a\");\n\n        VarCountingBloomFilter cbf2 = new VarCountingBloomFilter(ELEMENTS, spec.bucketsPerElement, EXP);\n        cbf2.add(\"a\");\n        cbf2.add(\"a\");\n\n        cbf.merge(cbf2);\n        assertEquals(4, cbf.maxBucket());\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "VarCountingBloomFilterTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "add", "add", "add", "merge", "assertEquals", "maxBucket"]}, "focal_class": {"identifier": "VarCountingBloomFilter", "superclass": "", "interfaces": "implements IFilter<String>", "fields": [{"original_string": "private static final MurmurHash hasher = new MurmurHash();", "modifier": "private static final", "type": "MurmurHash", "declarator": "hasher = new MurmurHash()", "var_name": "hasher"}, {"original_string": "private long maxCount = 15;", "modifier": "private", "type": "long", "declarator": "maxCount = 15", "var_name": "maxCount"}, {"original_string": "private int bucketsPerWord = 16;", "modifier": "private", "type": "int", "declarator": "bucketsPerWord = 16", "var_name": "bucketsPerWord"}, {"original_string": "private int exp;", "modifier": "private", "type": "int", "declarator": "exp", "var_name": "exp"}, {"original_string": "private int hashCount;", "modifier": "private", "type": "int", "declarator": "hashCount", "var_name": "hashCount"}, {"original_string": "private int numNonZero;", "modifier": "private", "type": "int", "declarator": "numNonZero", "var_name": "numNonZero"}, {"original_string": "private int numBuckets;", "modifier": "private", "type": "int", "declarator": "numBuckets", "var_name": "numBuckets"}, {"original_string": "private long[] buckets;", "modifier": "private", "type": "long[]", "declarator": "buckets", "var_name": "buckets"}], "methods": [{"identifier": "VarCountingBloomFilter", "parameters": "(int numElements, int bucketsPerElement, int exp)", "modifiers": "public", "return": "", "signature": " VarCountingBloomFilter(int numElements, int bucketsPerElement, int exp)", "full_signature": "public  VarCountingBloomFilter(int numElements, int bucketsPerElement, int exp)", "class_method_signature": "VarCountingBloomFilter.VarCountingBloomFilter(int numElements, int bucketsPerElement, int exp)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "VarCountingBloomFilter.clear()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(VarCountingBloomFilter cbf)", "modifiers": "public", "return": "void", "signature": "void merge(VarCountingBloomFilter cbf)", "full_signature": "public void merge(VarCountingBloomFilter cbf)", "class_method_signature": "VarCountingBloomFilter.merge(VarCountingBloomFilter cbf)", "testcase": false, "constructor": false}, {"identifier": "membershipTest", "parameters": "(String item)", "modifiers": "public", "return": "boolean", "signature": "boolean membershipTest(String item)", "full_signature": "public boolean membershipTest(String item)", "class_method_signature": "VarCountingBloomFilter.membershipTest(String item)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String item)", "modifiers": "public", "return": "void", "signature": "void add(String item)", "full_signature": "public void add(String item)", "class_method_signature": "VarCountingBloomFilter.add(String item)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String item)", "modifiers": "public", "return": "void", "signature": "void delete(String item)", "full_signature": "public void delete(String item)", "class_method_signature": "VarCountingBloomFilter.delete(String item)", "testcase": false, "constructor": false}, {"identifier": "getPercentNonZero", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPercentNonZero()", "full_signature": "public double getPercentNonZero()", "class_method_signature": "VarCountingBloomFilter.getPercentNonZero()", "testcase": false, "constructor": false}, {"identifier": "getBucket", "parameters": "(int i)", "modifiers": "private", "return": "Bucket", "signature": "Bucket getBucket(int i)", "full_signature": "private Bucket getBucket(int i)", "class_method_signature": "VarCountingBloomFilter.getBucket(int i)", "testcase": false, "constructor": false}, {"identifier": "buckets", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int buckets()", "full_signature": "private int buckets()", "class_method_signature": "VarCountingBloomFilter.buckets()", "testcase": false, "constructor": false}, {"identifier": "emptyBuckets", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int emptyBuckets()", "full_signature": "protected int emptyBuckets()", "class_method_signature": "VarCountingBloomFilter.emptyBuckets()", "testcase": false, "constructor": false}, {"identifier": "maxBucket", "parameters": "()", "modifiers": "protected", "return": "int", "signature": "int maxBucket()", "full_signature": "protected int maxBucket()", "class_method_signature": "VarCountingBloomFilter.maxBucket()", "testcase": false, "constructor": false}, {"identifier": "getHashBuckets", "parameters": "(String key)", "modifiers": "private", "return": "int[]", "signature": "int[] getHashBuckets(String key)", "full_signature": "private int[] getHashBuckets(String key)", "class_method_signature": "VarCountingBloomFilter.getHashBuckets(String key)", "testcase": false, "constructor": false}, {"identifier": "getHashBuckets", "parameters": "(String key, int hashCount, int max)", "modifiers": "private static", "return": "int[]", "signature": "int[] getHashBuckets(String key, int hashCount, int max)", "full_signature": "private static int[] getHashBuckets(String key, int hashCount, int max)", "class_method_signature": "VarCountingBloomFilter.getHashBuckets(String key, int hashCount, int max)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/membership/VarCountingBloomFilter.java"}, "focal_method": {"identifier": "merge", "parameters": "(VarCountingBloomFilter cbf)", "modifiers": "public", "return": "void", "body": "public void merge(VarCountingBloomFilter cbf) {\n        assert cbf != null;\n        assert buckets.length == cbf.buckets.length;\n        assert hashCount == cbf.hashCount;\n        \n        for ( int i = 0; i < buckets(); ++i )\n        {\n            Bucket b = new Bucket(i);\n            Bucket b2 = cbf.getBucket(i);\n            long merged = b.value + b2.value;\n            b.set(merged > maxCount ? maxCount : merged);\n        }\n    }", "signature": "void merge(VarCountingBloomFilter cbf)", "full_signature": "public void merge(VarCountingBloomFilter cbf)", "class_method_signature": "VarCountingBloomFilter.merge(VarCountingBloomFilter cbf)", "testcase": false, "constructor": false, "invocations": ["buckets", "getBucket", "set"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}