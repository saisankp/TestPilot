{"test_class": {"identifier": "JiraSCMListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-jira/src/test/java/io/jenkins/blueocean/service/embedded/jira/JiraSCMListenerTest.java"}, "test_case": {"identifier": "noJiraSiteDefined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void noJiraSiteDefined() throws Exception {\n        JiraSCMListener listener = new JiraSCMListener();\n        Job job = mock(Job.class);\n        Run run = mock(Run.class);\n        when(run.getParent()).thenReturn(job);\n        listener.onChangeLogParsed(run, null, null, null);\n    }", "signature": "void noJiraSiteDefined()", "full_signature": "@Test public void noJiraSiteDefined()", "class_method_signature": "JiraSCMListenerTest.noJiraSiteDefined()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getParent", "onChangeLogParsed"]}, "focal_class": {"identifier": "JiraSCMListener", "superclass": "extends SCMListener", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger( JiraSCMListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger( JiraSCMListener.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "onChangeLogParsed", "parameters": "(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "modifiers": "@Override public", "return": "void", "signature": "void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "full_signature": "@Override public void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "class_method_signature": "JiraSCMListener.onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "testcase": false, "constructor": false}, {"identifier": "constructJQLQuery", "parameters": "( Collection<String> issueKeys)", "modifiers": "static", "return": "String", "signature": "String constructJQLQuery( Collection<String> issueKeys)", "full_signature": "static String constructJQLQuery( Collection<String> issueKeys)", "class_method_signature": "JiraSCMListener.constructJQLQuery( Collection<String> issueKeys)", "testcase": false, "constructor": false}, {"identifier": "getIssueKeys", "parameters": "(ChangeLogSet<?> changelog, Pattern issuePattern)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "full_signature": "static Collection<String> getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "class_method_signature": "JiraSCMListener.getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "testcase": false, "constructor": false}], "file": "blueocean-jira/src/main/java/io/jenkins/blueocean/service/embedded/jira/JiraSCMListener.java"}, "focal_method": {"identifier": "onChangeLogParsed", "parameters": "(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog) throws Exception {\n\n        try {\n            JiraSite jiraSite = JiraSite.get(run.getParent());\n            if (jiraSite == null) {\n                return;\n            }\n            Collection<String> issueKeys = getIssueKeys(changelog, jiraSite.getIssuePattern());\n\n            if (issueKeys.isEmpty()) {\n                return;\n            }\n            String jql = constructJQLQuery(issueKeys);\n            JiraSession session = jiraSite.getSession();\n            if (session == null) {\n                return;\n            }\n            // Query for JIRA issues\n            List<Issue> issues = session.getIssuesFromJqlSearch(jql);\n            Set<JiraIssue> issuesFromJqlSearch = issues == null ? Collections.emptySet() :\n                issues.stream().map( input -> new JiraIssue(input) )\n                    .collect( Collectors.toSet() );\n\n            // If there are no JIRA issues, do not update the actions\n            if (issuesFromJqlSearch.isEmpty()) {\n                return;\n            }\n            // Create or update the JiraBuildAction\n            JiraBuildAction action = run.getAction(JiraBuildAction.class);\n            if (action == null) {\n                run.addAction(new JiraBuildAction(run, issuesFromJqlSearch));\n            } else {\n                action.addIssues(issuesFromJqlSearch);\n            }\n            run.save();\n        } catch (Exception e ){ // we do not want to fail the build if an issue happen here\n            LOGGER.warn( \"Failure executing Jira query to fetch issues. Skipping recording Jira issues.: {}\", e.getMessage() );\n            // stack trace in debug mode\n            LOGGER.debug( e.getMessage(), e);\n        }\n    }", "signature": "void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "full_signature": "@Override public void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "class_method_signature": "JiraSCMListener.onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "testcase": false, "constructor": false, "invocations": ["get", "getParent", "getIssueKeys", "getIssuePattern", "isEmpty", "constructJQLQuery", "getSession", "getIssuesFromJqlSearch", "emptySet", "collect", "map", "stream", "toSet", "isEmpty", "getAction", "addAction", "addIssues", "save", "warn", "getMessage", "debug", "getMessage"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}