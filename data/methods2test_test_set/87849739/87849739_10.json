{"test_class": {"identifier": "ByteBufferInputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte TESTVALUE = 42;", "modifier": "private static final", "type": "byte", "declarator": "TESTVALUE = 42", "var_name": "TESTVALUE"}], "file": "json-cbor/src/test/java/org/eclipse/ditto/json/cbor/ByteBufferInputStreamTest.java"}, "test_case": {"identifier": "factoryMethodAccessesBackingArrayDirectlyIfAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void factoryMethodAccessesBackingArrayDirectlyIfAvailable(){\n        final InputStream inputStream = ByteBufferInputStream.of(ByteBuffer.wrap(new byte[16]));\n        Assertions.assertThat(inputStream).isInstanceOf(ByteArrayInputStream.class);\n    }", "signature": "void factoryMethodAccessesBackingArrayDirectlyIfAvailable()", "full_signature": "@Test public void factoryMethodAccessesBackingArrayDirectlyIfAvailable()", "class_method_signature": "ByteBufferInputStreamTest.factoryMethodAccessesBackingArrayDirectlyIfAvailable()", "testcase": true, "constructor": false, "invocations": ["of", "wrap", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "ByteBufferInputStream", "superclass": "extends InputStream", "interfaces": "", "fields": [{"original_string": "private final ByteBuffer byteBuffer;", "modifier": "private final", "type": "ByteBuffer", "declarator": "byteBuffer", "var_name": "byteBuffer"}], "methods": [{"identifier": "ByteBufferInputStream", "parameters": "(final ByteBuffer byteBuffer)", "modifiers": "private", "return": "", "signature": " ByteBufferInputStream(final ByteBuffer byteBuffer)", "full_signature": "private  ByteBufferInputStream(final ByteBuffer byteBuffer)", "class_method_signature": "ByteBufferInputStream.ByteBufferInputStream(final ByteBuffer byteBuffer)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final ByteBuffer byteBuffer)", "modifiers": "static", "return": "InputStream", "signature": "InputStream of(final ByteBuffer byteBuffer)", "full_signature": "static InputStream of(final ByteBuffer byteBuffer)", "class_method_signature": "ByteBufferInputStream.of(final ByteBuffer byteBuffer)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ByteBufferInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final byte[] b, final int off, final int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(final byte[] b, final int off, final int len)", "full_signature": "@Override public int read(final byte[] b, final int off, final int len)", "class_method_signature": "ByteBufferInputStream.read(final byte[] b, final int off, final int len)", "testcase": false, "constructor": false}], "file": "json-cbor/src/main/java/org/eclipse/ditto/json/cbor/ByteBufferInputStream.java"}, "focal_method": {"identifier": "of", "parameters": "(final ByteBuffer byteBuffer)", "modifiers": "static", "return": "InputStream", "body": "static InputStream of(final ByteBuffer byteBuffer) {\n        if (byteBuffer.hasArray()) {\n            return new ByteArrayInputStream(\n                    byteBuffer.array(),\n                    byteBuffer.arrayOffset() + byteBuffer.position(),\n                    byteBuffer.limit());\n        }\n        return new ByteBufferInputStream(byteBuffer);\n    }", "signature": "InputStream of(final ByteBuffer byteBuffer)", "full_signature": "static InputStream of(final ByteBuffer byteBuffer)", "class_method_signature": "ByteBufferInputStream.of(final ByteBuffer byteBuffer)", "testcase": false, "constructor": false, "invocations": ["hasArray", "array", "arrayOffset", "position", "limit"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}