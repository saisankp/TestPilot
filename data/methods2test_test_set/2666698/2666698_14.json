{"test_class": {"identifier": "EquinoxLaunchConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "sisu-equinox/sisu-equinox-launching/src/test/java/org/eclipse/sisu/equinox/launching/internal/EquinoxLaunchConfigurationTest.java"}, "test_case": {"identifier": "testAddEnvironmentVariables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddEnvironmentVariables() {\n        EquinoxLaunchConfiguration config = new EquinoxLaunchConfiguration(null);\n        Map<String, String> envVariables = new HashMap<>();\n        envVariables.put(\"key1\", \"value1\");\n        envVariables.put(\"key2\", null);\n        config.addEnvironmentVariables(envVariables);\n\n        Map<String, String> environment = config.getEnvironment();\n        assertThat(environment.size(), equalTo(2));\n        assertThat(environment.get(\"key1\"), equalTo(\"value1\"));\n        assertThat(environment.get(\"key2\"), equalTo(\"\"));\n    }", "signature": "void testAddEnvironmentVariables()", "full_signature": "@Test public void testAddEnvironmentVariables()", "class_method_signature": "EquinoxLaunchConfigurationTest.testAddEnvironmentVariables()", "testcase": true, "constructor": false, "invocations": ["put", "put", "addEnvironmentVariables", "getEnvironment", "assertThat", "size", "equalTo", "assertThat", "get", "equalTo", "assertThat", "get", "equalTo"]}, "focal_class": {"identifier": "EquinoxLaunchConfiguration", "superclass": "", "interfaces": "implements LaunchConfiguration", "fields": [{"original_string": "private String jvmExecutable;", "modifier": "private", "type": "String", "declarator": "jvmExecutable", "var_name": "jvmExecutable"}, {"original_string": "private File workingDirectory;", "modifier": "private", "type": "File", "declarator": "workingDirectory", "var_name": "workingDirectory"}, {"original_string": "private final Map<String, String> env = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "env = new LinkedHashMap<>()", "var_name": "env"}, {"original_string": "private final List<Argument> args = new ArrayList<>();", "modifier": "private final", "type": "List<Argument>", "declarator": "args = new ArrayList<>()", "var_name": "args"}, {"original_string": "private final List<Argument> vmargs = new ArrayList<>();", "modifier": "private final", "type": "List<Argument>", "declarator": "vmargs = new ArrayList<>()", "var_name": "vmargs"}, {"original_string": "private final EquinoxInstallation installation;", "modifier": "private final", "type": "EquinoxInstallation", "declarator": "installation", "var_name": "installation"}], "methods": [{"identifier": "EquinoxLaunchConfiguration", "parameters": "(EquinoxInstallation installation)", "modifiers": "public", "return": "", "signature": " EquinoxLaunchConfiguration(EquinoxInstallation installation)", "full_signature": "public  EquinoxLaunchConfiguration(EquinoxInstallation installation)", "class_method_signature": "EquinoxLaunchConfiguration.EquinoxLaunchConfiguration(EquinoxInstallation installation)", "testcase": false, "constructor": true}, {"identifier": "addEnvironmentVariables", "parameters": "(Map<String, String> variables)", "modifiers": "public", "return": "void", "signature": "void addEnvironmentVariables(Map<String, String> variables)", "full_signature": "public void addEnvironmentVariables(Map<String, String> variables)", "class_method_signature": "EquinoxLaunchConfiguration.addEnvironmentVariables(Map<String, String> variables)", "testcase": false, "constructor": false}, {"identifier": "getEnvironment", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getEnvironment()", "full_signature": "@Override public Map<String, String> getEnvironment()", "class_method_signature": "EquinoxLaunchConfiguration.getEnvironment()", "testcase": false, "constructor": false}, {"identifier": "setJvmExecutable", "parameters": "(String jvmExecutable)", "modifiers": "public", "return": "void", "signature": "void setJvmExecutable(String jvmExecutable)", "full_signature": "public void setJvmExecutable(String jvmExecutable)", "class_method_signature": "EquinoxLaunchConfiguration.setJvmExecutable(String jvmExecutable)", "testcase": false, "constructor": false}, {"identifier": "getJvmExecutable", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getJvmExecutable()", "full_signature": "@Override public String getJvmExecutable()", "class_method_signature": "EquinoxLaunchConfiguration.getJvmExecutable()", "testcase": false, "constructor": false}, {"identifier": "setWorkingDirectory", "parameters": "(File workingDirectory)", "modifiers": "public", "return": "void", "signature": "void setWorkingDirectory(File workingDirectory)", "full_signature": "public void setWorkingDirectory(File workingDirectory)", "class_method_signature": "EquinoxLaunchConfiguration.setWorkingDirectory(File workingDirectory)", "testcase": false, "constructor": false}, {"identifier": "getWorkingDirectory", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getWorkingDirectory()", "full_signature": "@Override public File getWorkingDirectory()", "class_method_signature": "EquinoxLaunchConfiguration.getWorkingDirectory()", "testcase": false, "constructor": false}, {"identifier": "addProgramArguments", "parameters": "(String... args)", "modifiers": "public", "return": "void", "signature": "void addProgramArguments(String... args)", "full_signature": "public void addProgramArguments(String... args)", "class_method_signature": "EquinoxLaunchConfiguration.addProgramArguments(String... args)", "testcase": false, "constructor": false}, {"identifier": "addArguments", "parameters": "(List<Argument> to, String... args)", "modifiers": "private", "return": "void", "signature": "void addArguments(List<Argument> to, String... args)", "full_signature": "private void addArguments(List<Argument> to, String... args)", "class_method_signature": "EquinoxLaunchConfiguration.addArguments(List<Argument> to, String... args)", "testcase": false, "constructor": false}, {"identifier": "getProgramArguments", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getProgramArguments()", "full_signature": "@Override public String[] getProgramArguments()", "class_method_signature": "EquinoxLaunchConfiguration.getProgramArguments()", "testcase": false, "constructor": false}, {"identifier": "toStringArray", "parameters": "(List<Argument> args)", "modifiers": "private static", "return": "String[]", "signature": "String[] toStringArray(List<Argument> args)", "full_signature": "private static String[] toStringArray(List<Argument> args)", "class_method_signature": "EquinoxLaunchConfiguration.toStringArray(List<Argument> args)", "testcase": false, "constructor": false}, {"identifier": "addVMArguments", "parameters": "(String... vmargs)", "modifiers": "public", "return": "void", "signature": "void addVMArguments(String... vmargs)", "full_signature": "public void addVMArguments(String... vmargs)", "class_method_signature": "EquinoxLaunchConfiguration.addVMArguments(String... vmargs)", "testcase": false, "constructor": false}, {"identifier": "getVMArguments", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getVMArguments()", "full_signature": "@Override public String[] getVMArguments()", "class_method_signature": "EquinoxLaunchConfiguration.getVMArguments()", "testcase": false, "constructor": false}, {"identifier": "getLauncherJar", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getLauncherJar()", "full_signature": "@Override public File getLauncherJar()", "class_method_signature": "EquinoxLaunchConfiguration.getLauncherJar()", "testcase": false, "constructor": false}], "file": "sisu-equinox/sisu-equinox-launching/src/main/java/org/eclipse/sisu/equinox/launching/internal/EquinoxLaunchConfiguration.java"}, "focal_method": {"identifier": "addEnvironmentVariables", "parameters": "(Map<String, String> variables)", "modifiers": "public", "return": "void", "body": "public void addEnvironmentVariables(Map<String, String> variables) {\n        for (String key : variables.keySet()) {\n            String value = variables.get(key);\n            env.put(key, (value != null) ? value : \"\");\n        }\n    }", "signature": "void addEnvironmentVariables(Map<String, String> variables)", "full_signature": "public void addEnvironmentVariables(Map<String, String> variables)", "class_method_signature": "EquinoxLaunchConfiguration.addEnvironmentVariables(Map<String, String> variables)", "testcase": false, "constructor": false, "invocations": ["keySet", "get", "put"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}