{"test_class": {"identifier": "CsvProcessorTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [{"original_string": "private static final String testBeanPath = ClassLoaderUtil.getClasspath() + File.separator + \"test_bean.csv\";", "modifier": "private static final", "type": "String", "declarator": "testBeanPath = ClassLoaderUtil.getClasspath() + File.separator + \"test_bean.csv\"", "var_name": "testBeanPath"}, {"original_string": "private static final String testBeansPath = ClassLoaderUtil.getClasspath() + File.separator + \"test_beans.csv\";", "modifier": "private static final", "type": "String", "declarator": "testBeansPath = ClassLoaderUtil.getClasspath() + File.separator + \"test_beans.csv\"", "var_name": "testBeansPath"}, {"original_string": "private FileProcessor processor;", "modifier": "private", "type": "FileProcessor", "declarator": "processor", "var_name": "processor"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/file/csv/CsvProcessorTest.java"}, "test_case": {"identifier": "exportBeans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void exportBeans() throws IOException {\n\n        importBeans();\n\n        List<CsvBean> list = processor.exportBeans(CsvBean.class, testBeansPath);\n\n        for (CsvBean bean : list) {\n            logger.info(bean);\n        }\n    }", "signature": "void exportBeans()", "full_signature": "@Test public void exportBeans()", "class_method_signature": "CsvProcessorTest.exportBeans()", "testcase": true, "constructor": false, "invocations": ["importBeans", "exportBeans", "info"]}, "focal_class": {"identifier": "CsvProcessor", "superclass": "", "interfaces": "implements FileProcessor", "fields": [{"original_string": "private final ProcessedCache processeCache = ProcessedCache.getInstance();", "modifier": "private final", "type": "ProcessedCache", "declarator": "processeCache = ProcessedCache.getInstance()", "var_name": "processeCache"}, {"original_string": "private final Computable<String, Field[]> fieldCache = new ConcurrentCache<String, Field[]>();", "modifier": "private final", "type": "Computable<String, Field[]>", "declarator": "fieldCache = new ConcurrentCache<String, Field[]>()", "var_name": "fieldCache"}], "methods": [{"identifier": "importBean", "parameters": "(Object bean, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBean(Object bean, String filePath)", "full_signature": "@Override public void importBean(Object bean, String filePath)", "class_method_signature": "CsvProcessor.importBean(Object bean, String filePath)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(Class<?> clazz, Object[] beans, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(Class<?> clazz, Object[] beans, String filePath)", "full_signature": "@Override public void importBeans(Class<?> clazz, Object[] beans, String filePath)", "class_method_signature": "CsvProcessor.importBeans(Class<?> clazz, Object[] beans, String filePath)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(String[] contents, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(String[] contents, String filePath)", "full_signature": "@Override public void importBeans(String[] contents, String filePath)", "class_method_signature": "CsvProcessor.importBeans(String[] contents, String filePath)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(List<String> contents, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(List<String> contents, String filePath)", "full_signature": "@Override public void importBeans(List<String> contents, String filePath)", "class_method_signature": "CsvProcessor.importBeans(List<String> contents, String filePath)", "testcase": false, "constructor": false}, {"identifier": "exportBean", "parameters": "(Class<T> clazz, String filePath)", "modifiers": "@Override public", "return": "T", "signature": "T exportBean(Class<T> clazz, String filePath)", "full_signature": "@Override public T exportBean(Class<T> clazz, String filePath)", "class_method_signature": "CsvProcessor.exportBean(Class<T> clazz, String filePath)", "testcase": false, "constructor": false}, {"identifier": "exportBeans", "parameters": "(Class<T> clazz, String filePath)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> exportBeans(Class<T> clazz, String filePath)", "full_signature": "@Override public List<T> exportBeans(Class<T> clazz, String filePath)", "class_method_signature": "CsvProcessor.exportBeans(Class<T> clazz, String filePath)", "testcase": false, "constructor": false}, {"identifier": "toCsvLine", "parameters": "(List<FieldDesc> list, Object bean)", "modifiers": "private", "return": "String", "signature": "String toCsvLine(List<FieldDesc> list, Object bean)", "full_signature": "private String toCsvLine(List<FieldDesc> list, Object bean)", "class_method_signature": "CsvProcessor.toCsvLine(List<FieldDesc> list, Object bean)", "testcase": false, "constructor": false}, {"identifier": "linesToList", "parameters": "(Class<T> clazz, List<FieldDesc> list, List<String> lines)", "modifiers": "private", "return": "List<T>", "signature": "List<T> linesToList(Class<T> clazz, List<FieldDesc> list, List<String> lines)", "full_signature": "private List<T> linesToList(Class<T> clazz, List<FieldDesc> list, List<String> lines)", "class_method_signature": "CsvProcessor.linesToList(Class<T> clazz, List<FieldDesc> list, List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "stringsToBean", "parameters": "(Class<T> clazz, List<FieldDesc> list, String[] strings)", "modifiers": "private", "return": "T", "signature": "T stringsToBean(Class<T> clazz, List<FieldDesc> list, String[] strings)", "full_signature": "private T stringsToBean(Class<T> clazz, List<FieldDesc> list, String[] strings)", "class_method_signature": "CsvProcessor.stringsToBean(Class<T> clazz, List<FieldDesc> list, String[] strings)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(String[] headers, Class<?> clazz, Object[] beans, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(String[] headers, Class<?> clazz, Object[] beans, String filePath)", "full_signature": "@Override public void importBeans(String[] headers, Class<?> clazz, Object[] beans, String filePath)", "class_method_signature": "CsvProcessor.importBeans(String[] headers, Class<?> clazz, Object[] beans, String filePath)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(ListMap<String, String> headers, Class<?> clazz, Object[] beans, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(ListMap<String, String> headers, Class<?> clazz, Object[] beans, String filePath)", "full_signature": "@Override public void importBeans(ListMap<String, String> headers, Class<?> clazz, Object[] beans, String filePath)", "class_method_signature": "CsvProcessor.importBeans(ListMap<String, String> headers, Class<?> clazz, Object[] beans, String filePath)", "testcase": false, "constructor": false}, {"identifier": "collectData", "parameters": "(FileBeanInfo beanInfo)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> collectData(FileBeanInfo beanInfo)", "full_signature": "@Override public List<String> collectData(FileBeanInfo beanInfo)", "class_method_signature": "CsvProcessor.collectData(FileBeanInfo beanInfo)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(final FileBeanInfo beanInfo)", "modifiers": "private", "return": "Field[]", "signature": "Field[] getField(final FileBeanInfo beanInfo)", "full_signature": "private Field[] getField(final FileBeanInfo beanInfo)", "class_method_signature": "CsvProcessor.getField(final FileBeanInfo beanInfo)", "testcase": false, "constructor": false}, {"identifier": "importBeans", "parameters": "(FileBeanInfo beanInfo, String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void importBeans(FileBeanInfo beanInfo, String filePath)", "full_signature": "@Override public void importBeans(FileBeanInfo beanInfo, String filePath)", "class_method_signature": "CsvProcessor.importBeans(FileBeanInfo beanInfo, String filePath)", "testcase": false, "constructor": false}, {"identifier": "toCsvLine", "parameters": "(Object bean, Field[] fields)", "modifiers": "private", "return": "String", "signature": "String toCsvLine(Object bean, Field[] fields)", "full_signature": "private String toCsvLine(Object bean, Field[] fields)", "class_method_signature": "CsvProcessor.toCsvLine(Object bean, Field[] fields)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(FileBeanInfo beanInfo)", "modifiers": "@Override public", "return": "ByteArray", "signature": "ByteArray toByteArray(FileBeanInfo beanInfo)", "full_signature": "@Override public ByteArray toByteArray(FileBeanInfo beanInfo)", "class_method_signature": "CsvProcessor.toByteArray(FileBeanInfo beanInfo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(List<String> contents)", "modifiers": "@Override public", "return": "ByteArray", "signature": "ByteArray toByteArray(List<String> contents)", "full_signature": "@Override public ByteArray toByteArray(List<String> contents)", "class_method_signature": "CsvProcessor.toByteArray(List<String> contents)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/file/csv/CsvProcessor.java"}, "focal_method": {"identifier": "exportBeans", "parameters": "(Class<T> clazz, String filePath)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public <T> List<T> exportBeans(Class<T> clazz, String filePath) throws IOException {\n        List<FieldDesc> list = processeCache.getFieldDescs(clazz);\n        Assert.assertTrue(CollectionUtil.isNotEmpty(list), \"FieldDesc is not empty\");\n\n        List<String> lines = ReaderUtil.readLinesAndClose(filePath, Charset.forName(GBK));\n        List<String> titles = processeCache.getTitles(clazz);\n\n        if (CollectionUtil.isEmpty(titles)) {\n            return linesToList(clazz, list, lines);\n        }\n        // FIXME \u6b64\u65f6\u5e94\u5b89\u5168\n        lines.remove(0);\n        return linesToList(clazz, list, lines);\n    }", "signature": "List<T> exportBeans(Class<T> clazz, String filePath)", "full_signature": "@Override public List<T> exportBeans(Class<T> clazz, String filePath)", "class_method_signature": "CsvProcessor.exportBeans(Class<T> clazz, String filePath)", "testcase": false, "constructor": false, "invocations": ["getFieldDescs", "assertTrue", "isNotEmpty", "readLinesAndClose", "forName", "getTitles", "isEmpty", "linesToList", "remove", "linesToList"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}