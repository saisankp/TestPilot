{"test_class": {"identifier": "TestRedisSessionRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException thrown= ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "session-replacement/src/test/java/com/amadeus/session/repository/redis/TestRedisSessionRepository.java"}, "test_case": {"identifier": "testStoreSessionData", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Test\n  public void testStoreSessionData() {\n    RedisFacade facade = mock(RedisFacade.class);\n    SessionManager sm = mock(SessionManager.class);\n    JdkSerializerDeserializer serializer = new JdkSerializerDeserializer();\n    when(sm.getSerializerDeserializer()).thenReturn(serializer);\n    SessionConfiguration conf = new SessionConfiguration();\n    when(sm.getConfiguration()).thenReturn(conf);\n    try (RedisSessionRepository rsr = new RedisSessionRepository(facade, \"myapp\", \"localhost\", ExpirationStrategy.ZRANGE, false)) {\n      rsr.setSessionManager(sm);\n      SessionData sessionData = mock(SessionData.class);\n      when(sessionData.getId()).thenReturn(\"id\");\n      rsr.storeSessionData(sessionData);\n      @SuppressWarnings(\"rawtypes\")\n      ArgumentCaptor<Map> map = ArgumentCaptor.forClass(Map.class);\n      verify(facade).hmset(eq(rsr.sessionKey(\"id\")), map.capture());\n    }\n  }", "signature": "void testStoreSessionData()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testStoreSessionData()", "class_method_signature": "TestRedisSessionRepository.testStoreSessionData()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getSerializerDeserializer", "thenReturn", "when", "getConfiguration", "setSessionManager", "mock", "thenReturn", "when", "getId", "storeSessionData", "forClass", "hmset", "verify", "eq", "sessionKey", "capture"]}, "focal_class": {"identifier": "RedisSessionRepository", "superclass": "", "interfaces": "implements SessionRepository", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RedisSessionRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RedisSessionRepository.class)", "var_name": "logger"}, {"original_string": "static final String DEFAULT_SESSION_PREFIX = \"com.amadeus.session:\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_SESSION_PREFIX = \"com.amadeus.session:\"", "var_name": "DEFAULT_SESSION_PREFIX"}, {"original_string": "static final byte[] LAST_ACCESSED = encode(\"#:lastAccessed\");", "modifier": "static final", "type": "byte[]", "declarator": "LAST_ACCESSED = encode(\"#:lastAccessed\")", "var_name": "LAST_ACCESSED"}, {"original_string": "static final byte[] MAX_INACTIVE_INTERVAL = encode(\"#:maxInactiveInterval\");", "modifier": "static final", "type": "byte[]", "declarator": "MAX_INACTIVE_INTERVAL = encode(\"#:maxInactiveInterval\")", "var_name": "MAX_INACTIVE_INTERVAL"}, {"original_string": "static final byte[] CREATION_TIME = encode(\"#:creationTime\");", "modifier": "static final", "type": "byte[]", "declarator": "CREATION_TIME = encode(\"#:creationTime\")", "var_name": "CREATION_TIME"}, {"original_string": "static final byte[] INVALID_SESSION = encode(\"#:invalidSession\");", "modifier": "static final", "type": "byte[]", "declarator": "INVALID_SESSION = encode(\"#:invalidSession\")", "var_name": "INVALID_SESSION"}, {"original_string": "static final byte[] OWNER_NODE = encode(\"#:owner\");", "modifier": "static final", "type": "byte[]", "declarator": "OWNER_NODE = encode(\"#:owner\")", "var_name": "OWNER_NODE"}, {"original_string": "static final byte[] BYTES_TRUE = SafeEncoder.encode(String.valueOf(1));", "modifier": "static final", "type": "byte[]", "declarator": "BYTES_TRUE = SafeEncoder.encode(String.valueOf(1))", "var_name": "BYTES_TRUE"}, {"original_string": "private static final byte[] INTERNAL_PREFIX = new byte[] { '#', ':' };", "modifier": "private static final", "type": "byte[]", "declarator": "INTERNAL_PREFIX = new byte[] { '#', ':' }", "var_name": "INTERNAL_PREFIX"}, {"original_string": "private static final int CREATION_TIME_INDEX = 2;", "modifier": "private static final", "type": "int", "declarator": "CREATION_TIME_INDEX = 2", "var_name": "CREATION_TIME_INDEX"}, {"original_string": "private static final int INVALID_SESSION_INDEX = 3;", "modifier": "private static final", "type": "int", "declarator": "INVALID_SESSION_INDEX = 3", "var_name": "INVALID_SESSION_INDEX"}, {"original_string": "private static final int OWNER_NODE_INDEX = 4;", "modifier": "private static final", "type": "int", "declarator": "OWNER_NODE_INDEX = 4", "var_name": "OWNER_NODE_INDEX"}, {"original_string": "private static final RedisFacade.ResponseFacade<String> OK_RESULT = new RedisFacade.ResponseFacade<String>() {\n    @Override\n    public String get() {\n      return \"OK\";\n    }\n  };", "modifier": "private static final", "type": "RedisFacade.ResponseFacade<String>", "declarator": "OK_RESULT = new RedisFacade.ResponseFacade<String>() {\n    @Override\n    public String get() {\n      return \"OK\";\n    }\n  }", "var_name": "OK_RESULT"}, {"original_string": "private static final int BITS_IN_BYTE = 8;", "modifier": "private static final", "type": "int", "declarator": "BITS_IN_BYTE = 8", "var_name": "BITS_IN_BYTE"}, {"original_string": "private final String owner;", "modifier": "private final", "type": "String", "declarator": "owner", "var_name": "owner"}, {"original_string": "private final byte[] ownerByteArray;", "modifier": "private final", "type": "byte[]", "declarator": "ownerByteArray", "var_name": "ownerByteArray"}, {"original_string": "private final String keyPrefix;", "modifier": "private final", "type": "String", "declarator": "keyPrefix", "var_name": "keyPrefix"}, {"original_string": "private final byte[] keyPrefixByteArray;", "modifier": "private final", "type": "byte[]", "declarator": "keyPrefixByteArray", "var_name": "keyPrefixByteArray"}, {"original_string": "private byte[] redirectionsChannel;", "modifier": "private", "type": "byte[]", "declarator": "redirectionsChannel", "var_name": "redirectionsChannel"}, {"original_string": "private final RedisFacade redis;", "modifier": "private final", "type": "RedisFacade", "declarator": "redis", "var_name": "redis"}, {"original_string": "final RedisExpirationStrategy expirationManager;", "modifier": "final", "type": "RedisExpirationStrategy", "declarator": "expirationManager", "var_name": "expirationManager"}, {"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private Meter failoverMetrics;", "modifier": "private", "type": "Meter", "declarator": "failoverMetrics", "var_name": "failoverMetrics"}, {"original_string": "private boolean sticky;", "modifier": "private", "type": "boolean", "declarator": "sticky", "var_name": "sticky"}, {"original_string": "private final String namespace;", "modifier": "private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}], "methods": [{"identifier": "RedisSessionRepository", "parameters": "(RedisFacade redis, String namespace, String owner, ExpirationStrategy strategy,\n      boolean sticky)", "modifiers": "public", "return": "", "signature": " RedisSessionRepository(RedisFacade redis, String namespace, String owner, ExpirationStrategy strategy,\n      boolean sticky)", "full_signature": "public  RedisSessionRepository(RedisFacade redis, String namespace, String owner, ExpirationStrategy strategy,\n      boolean sticky)", "class_method_signature": "RedisSessionRepository.RedisSessionRepository(RedisFacade redis, String namespace, String owner, ExpirationStrategy strategy,\n      boolean sticky)", "testcase": false, "constructor": true}, {"identifier": "setSessionManager", "parameters": "(final SessionManager sessionManager)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionManager(final SessionManager sessionManager)", "full_signature": "@Override public void setSessionManager(final SessionManager sessionManager)", "class_method_signature": "RedisSessionRepository.setSessionManager(final SessionManager sessionManager)", "testcase": false, "constructor": false}, {"identifier": "getSessionData", "parameters": "(String id)", "modifiers": "@Override public", "return": "SessionData", "signature": "SessionData getSessionData(String id)", "full_signature": "@Override public SessionData getSessionData(String id)", "class_method_signature": "RedisSessionRepository.getSessionData(String id)", "testcase": false, "constructor": false}, {"identifier": "checkConsistent", "parameters": "(String sessionId, List<byte[]> values)", "modifiers": "private", "return": "boolean", "signature": "boolean checkConsistent(String sessionId, List<byte[]> values)", "full_signature": "private boolean checkConsistent(String sessionId, List<byte[]> values)", "class_method_signature": "RedisSessionRepository.checkConsistent(String sessionId, List<byte[]> values)", "testcase": false, "constructor": false}, {"identifier": "intFrom", "parameters": "(byte[] b)", "modifiers": "private static", "return": "int", "signature": "int intFrom(byte[] b)", "full_signature": "private static int intFrom(byte[] b)", "class_method_signature": "RedisSessionRepository.intFrom(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "longFrom", "parameters": "(byte[] b)", "modifiers": "private static", "return": "long", "signature": "long longFrom(byte[] b)", "full_signature": "private static long longFrom(byte[] b)", "class_method_signature": "RedisSessionRepository.longFrom(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "addLong", "parameters": "(Map<byte[], byte[]> attributes, byte[] attr, long value)", "modifiers": "private static", "return": "void", "signature": "void addLong(Map<byte[], byte[]> attributes, byte[] attr, long value)", "full_signature": "private static void addLong(Map<byte[], byte[]> attributes, byte[] attr, long value)", "class_method_signature": "RedisSessionRepository.addLong(Map<byte[], byte[]> attributes, byte[] attr, long value)", "testcase": false, "constructor": false}, {"identifier": "addInt", "parameters": "(Map<byte[], byte[]> attributes, byte[] attr, int value)", "modifiers": "private static", "return": "void", "signature": "void addInt(Map<byte[], byte[]> attributes, byte[] attr, int value)", "full_signature": "private static void addInt(Map<byte[], byte[]> attributes, byte[] attr, int value)", "class_method_signature": "RedisSessionRepository.addInt(Map<byte[], byte[]> attributes, byte[] attr, int value)", "testcase": false, "constructor": false}, {"identifier": "startCommit", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "CommitTransaction", "signature": "CommitTransaction startCommit(SessionData session)", "full_signature": "@Override public CommitTransaction startCommit(SessionData session)", "class_method_signature": "RedisSessionRepository.startCommit(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "void", "signature": "void remove(SessionData session)", "full_signature": "@Override public void remove(SessionData session)", "class_method_signature": "RedisSessionRepository.remove(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "sessionKey", "parameters": "(String sessionId)", "modifiers": "public", "return": "byte[]", "signature": "byte[] sessionKey(String sessionId)", "full_signature": "public byte[] sessionKey(String sessionId)", "class_method_signature": "RedisSessionRepository.sessionKey(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "sessionKey", "parameters": "(SessionData session)", "modifiers": "private", "return": "byte[]", "signature": "byte[] sessionKey(SessionData session)", "full_signature": "private byte[] sessionKey(SessionData session)", "class_method_signature": "RedisSessionRepository.sessionKey(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "getSessionAttribute", "parameters": "(SessionData session, String attribute)", "modifiers": "@Override public", "return": "Object", "signature": "Object getSessionAttribute(SessionData session, String attribute)", "full_signature": "@Override public Object getSessionAttribute(SessionData session, String attribute)", "class_method_signature": "RedisSessionRepository.getSessionAttribute(SessionData session, String attribute)", "testcase": false, "constructor": false}, {"identifier": "hasInternalPrefix", "parameters": "(byte[] buf)", "modifiers": "static", "return": "boolean", "signature": "boolean hasInternalPrefix(byte[] buf)", "full_signature": "static boolean hasInternalPrefix(byte[] buf)", "class_method_signature": "RedisSessionRepository.hasInternalPrefix(byte[] buf)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey", "parameters": "(byte[] session)", "modifiers": "", "return": "byte[]", "signature": "byte[] getSessionKey(byte[] session)", "full_signature": " byte[] getSessionKey(byte[] session)", "class_method_signature": "RedisSessionRepository.getSessionKey(byte[] session)", "testcase": false, "constructor": false}, {"identifier": "prepareRemove", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepareRemove(SessionData session)", "full_signature": "@Override public boolean prepareRemove(SessionData session)", "class_method_signature": "RedisSessionRepository.prepareRemove(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "getAllKeys", "parameters": "(SessionData session)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getAllKeys(SessionData session)", "full_signature": "@Override public Set<String> getAllKeys(SessionData session)", "class_method_signature": "RedisSessionRepository.getAllKeys(SessionData session)", "testcase": false, "constructor": false}, {"identifier": "storeSessionData", "parameters": "(SessionData sessionData)", "modifiers": "@Override public", "return": "void", "signature": "void storeSessionData(SessionData sessionData)", "full_signature": "@Override public void storeSessionData(SessionData sessionData)", "class_method_signature": "RedisSessionRepository.storeSessionData(SessionData sessionData)", "testcase": false, "constructor": false}, {"identifier": "requestFinished", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void requestFinished()", "full_signature": "@Override public void requestFinished()", "class_method_signature": "RedisSessionRepository.requestFinished()", "testcase": false, "constructor": false}, {"identifier": "setSessionAttribute", "parameters": "(SessionData session, String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionAttribute(SessionData session, String name, Object value)", "full_signature": "@Override public void setSessionAttribute(SessionData session, String name, Object value)", "class_method_signature": "RedisSessionRepository.setSessionAttribute(SessionData session, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "serializerDeserializer", "parameters": "()", "modifiers": "private", "return": "SerializerDeserializer", "signature": "SerializerDeserializer serializerDeserializer()", "full_signature": "private SerializerDeserializer serializerDeserializer()", "class_method_signature": "RedisSessionRepository.serializerDeserializer()", "testcase": false, "constructor": false}, {"identifier": "removeSessionAttribute", "parameters": "(SessionData session, String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeSessionAttribute(SessionData session, String name)", "full_signature": "@Override public void removeSessionAttribute(SessionData session, String name)", "class_method_signature": "RedisSessionRepository.removeSessionAttribute(SessionData session, String name)", "testcase": false, "constructor": false}, {"identifier": "cleanSessionsOnShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cleanSessionsOnShutdown()", "full_signature": "@Override public boolean cleanSessionsOnShutdown()", "class_method_signature": "RedisSessionRepository.cleanSessionsOnShutdown()", "testcase": false, "constructor": false}, {"identifier": "getOwnedSessionIds", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getOwnedSessionIds()", "full_signature": "@Override public Collection<String> getOwnedSessionIds()", "class_method_signature": "RedisSessionRepository.getOwnedSessionIds()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RedisSessionRepository.close()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "RedisSessionRepository.reset()", "testcase": false, "constructor": false}, {"identifier": "getRedis", "parameters": "()", "modifiers": "", "return": "RedisFacade", "signature": "RedisFacade getRedis()", "full_signature": " RedisFacade getRedis()", "class_method_signature": "RedisSessionRepository.getRedis()", "testcase": false, "constructor": false}, {"identifier": "extractSessionId", "parameters": "(String body)", "modifiers": "static", "return": "String", "signature": "String extractSessionId(String body)", "full_signature": "static String extractSessionId(String body)", "class_method_signature": "RedisSessionRepository.extractSessionId(String body)", "testcase": false, "constructor": false}, {"identifier": "sessionIdChange", "parameters": "(SessionData sessionData)", "modifiers": "@Override public", "return": "void", "signature": "void sessionIdChange(SessionData sessionData)", "full_signature": "@Override public void sessionIdChange(SessionData sessionData)", "class_method_signature": "RedisSessionRepository.sessionIdChange(SessionData sessionData)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "RedisSessionRepository.isConnected()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/repository/redis/RedisSessionRepository.java"}, "focal_method": {"identifier": "storeSessionData", "parameters": "(SessionData sessionData)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void storeSessionData(SessionData sessionData) {\n    Map<byte[], byte[]> attributes = new HashMap<>();\n    addInt(attributes, MAX_INACTIVE_INTERVAL, sessionData.getMaxInactiveInterval());\n    addLong(attributes, LAST_ACCESSED, sessionData.getLastAccessedTime());\n    addLong(attributes, CREATION_TIME, sessionData.getCreationTime());\n    if (sessionManager.getConfiguration().isSticky()) {\n      attributes.put(OWNER_NODE, ownerByteArray);\n    }\n    redis.hmset(sessionKey(sessionData.getId()), attributes);\n    expirationManager.sessionTouched(sessionData);\n  }", "signature": "void storeSessionData(SessionData sessionData)", "full_signature": "@Override public void storeSessionData(SessionData sessionData)", "class_method_signature": "RedisSessionRepository.storeSessionData(SessionData sessionData)", "testcase": false, "constructor": false, "invocations": ["addInt", "getMaxInactiveInterval", "addLong", "getLastAccessedTime", "addLong", "getCreationTime", "isSticky", "getConfiguration", "put", "hmset", "sessionKey", "getId", "sessionTouched"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}