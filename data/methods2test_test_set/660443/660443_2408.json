{"test_class": {"identifier": "CarbonylEliminationReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/CarbonylEliminationReactionTest.java"}, "test_case": {"identifier": "testInitiate_IAtomContainerSet_IAtomContainerSet", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testInitiate_IAtomContainerSet_IAtomContainerSet() throws Exception {\n\n        IReactionProcess type = new CarbonylEliminationReaction();\n        /* [C*]-C-C */\n        IAtomContainerSet setOfReactants = getExampleReactants();\n\n        /* initiate */\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.FALSE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(1, setOfReactions.getReactionCount());\n        Assert.assertEquals(2, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer product1 = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n        IAtomContainer molecule1 = getExpectedProducts().getAtomContainer(0);//Smiles(\"[C+]\");\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule1, product1));\n\n        IAtomContainer product2 = setOfReactions.getReaction(0).getProducts().getAtomContainer(1);\n        IAtomContainer molecule2 = getExpectedProducts().getAtomContainer(1);//Smiles(\"[C-]#[O+]\");\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule2, product2));\n\n    }", "signature": "void testInitiate_IAtomContainerSet_IAtomContainerSet()", "full_signature": "@Test @Override public void testInitiate_IAtomContainerSet_IAtomContainerSet()", "class_method_signature": "CarbonylEliminationReactionTest.testInitiate_IAtomContainerSet_IAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "getAtomContainer", "getExpectedProducts", "assertTrue", "isIsomorph", "getAtomContainer", "getProducts", "getReaction", "getAtomContainer", "getExpectedProducts", "assertTrue", "isIsomorph"]}, "focal_class": {"identifier": "CarbonylEliminationReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(CarbonylEliminationReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(CarbonylEliminationReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "CarbonylEliminationReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " CarbonylEliminationReaction()", "full_signature": "public  CarbonylEliminationReaction()", "class_method_signature": "CarbonylEliminationReaction.CarbonylEliminationReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "CarbonylEliminationReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "CarbonylEliminationReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "CarbonylEliminationReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/CarbonylEliminationReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n        logger.debug(\"initiate reaction: CarbonylEliminationReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"CarbonylEliminationReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"CarbonylEliminationReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IAtom> atomis = reactant.atoms().iterator();\n        while (atomis.hasNext()) {\n            IAtom atomi = atomis.next();\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER) && atomi.getSymbol().equals(\"O\")\n                    && atomi.getFormalCharge() == 1) {\n\n                Iterator<IBond> bondis = reactant.getConnectedBondsList(atomi).iterator();\n                while (bondis.hasNext()) {\n                    IBond bondi = bondis.next();\n\n                    if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.TRIPLE) {\n                        IAtom atomj = bondi.getOther(atomi);\n                        if (atomj.getFlag(CDKConstants.REACTIVE_CENTER)) {\n                            Iterator<IBond> bondjs = reactant.getConnectedBondsList(atomj).iterator();\n                            while (bondjs.hasNext()) {\n                                IBond bondj = bondjs.next();\n\n                                if (bondj.equals(bondi)) continue;\n\n                                if (bondj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                        && bondj.getOrder() == IBond.Order.SINGLE) {\n\n                                    IAtom atomk = bondj.getOther(atomj);\n                                    if (atomk.getFlag(CDKConstants.REACTIVE_CENTER) && atomk.getFormalCharge() == 0) {\n\n                                        ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                                        atomList.add(atomk);\n                                        atomList.add(atomj);\n                                        ArrayList<IBond> bondList = new ArrayList<IBond>();\n                                        bondList.add(bondj);\n\n                                        IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(\n                                                IAtomContainerSet.class);\n                                        moleculeSet.addAtomContainer(reactant);\n                                        IReaction reaction = mechanism.initiate(moleculeSet, atomList, bondList);\n                                        if (reaction == null)\n                                            continue;\n                                        else\n                                            setOfReactions.addReaction(reaction);\n\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return setOfReactions;\n\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "CarbonylEliminationReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "hasNext", "next", "getFlag", "equals", "getSymbol", "getFormalCharge", "iterator", "getConnectedBondsList", "hasNext", "next", "getFlag", "getOrder", "getOther", "getFlag", "iterator", "getConnectedBondsList", "hasNext", "next", "equals", "getFlag", "getOrder", "getOther", "getFlag", "getFormalCharge", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}