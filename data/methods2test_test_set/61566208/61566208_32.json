{"test_class": {"identifier": "CumulusVlanHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InputStream interfacesFile;", "modifier": "private", "type": "InputStream", "declarator": "interfacesFile", "var_name": "interfacesFile"}, {"original_string": "private InputStream interfacesFileWithBond;", "modifier": "private", "type": "InputStream", "declarator": "interfacesFileWithBond", "var_name": "interfacesFileWithBond"}], "file": "modules/cumulus-switch/src/test/java/com/vmware/vrack/hms/switches/cumulus/CumulusVlanHelperTest.java"}, "test_case": {"identifier": "testAddLAGOnSwitchPort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddLAGOnSwitchPort()\n        throws Exception\n    {\n        Configuration configuration = Configuration.parse( interfacesFileWithBond );\n        CumulusVlanHelper helper = new CumulusVlanHelper( null );\n\n        SwitchLacpGroup lacpGroup = new SwitchLacpGroup();\n\n        lacpGroup.setMode( \"asdf\" );\n        lacpGroup.setName( \"bond2\" );\n        lacpGroup.setPorts( new ArrayList<String>() );\n        lacpGroup.getPorts().add( \"swp2\" );\n        configuration = helper.updateLAGOnSwitchPorts( lacpGroup, configuration );\n        System.out.println( configuration.getString() );\n    }", "signature": "void testAddLAGOnSwitchPort()", "full_signature": "@Test public void testAddLAGOnSwitchPort()", "class_method_signature": "CumulusVlanHelperTest.testAddLAGOnSwitchPort()", "testcase": true, "constructor": false, "invocations": ["parse", "setMode", "setName", "setPorts", "add", "getPorts", "updateLAGOnSwitchPorts", "println", "getString"]}, "focal_class": {"identifier": "CumulusVlanHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CumulusTorSwitchService service;", "modifier": "private", "type": "CumulusTorSwitchService", "declarator": "service", "var_name": "service"}, {"original_string": "private static Logger logger = Logger.getLogger( CumulusVlanHelper.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( CumulusVlanHelper.class )", "var_name": "logger"}, {"original_string": "private CumulusCache<List<SwitchVlan>> vlansBulkCache = new CumulusCache<List<SwitchVlan>>( 300 );", "modifier": "private", "type": "CumulusCache<List<SwitchVlan>>", "declarator": "vlansBulkCache = new CumulusCache<List<SwitchVlan>>( 300 )", "var_name": "vlansBulkCache"}], "methods": [{"identifier": "CumulusVlanHelper", "parameters": "( CumulusTorSwitchService service )", "modifiers": "public", "return": "", "signature": " CumulusVlanHelper( CumulusTorSwitchService service )", "full_signature": "public  CumulusVlanHelper( CumulusTorSwitchService service )", "class_method_signature": "CumulusVlanHelper.CumulusVlanHelper( CumulusTorSwitchService service )", "testcase": false, "constructor": true}, {"identifier": "getSwitchVlans", "parameters": "( SwitchNode switchNode )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSwitchVlans( SwitchNode switchNode )", "full_signature": "public List<String> getSwitchVlans( SwitchNode switchNode )", "class_method_signature": "CumulusVlanHelper.getSwitchVlans( SwitchNode switchNode )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlan", "parameters": "( SwitchNode switchNode, String vlanName )", "modifiers": "public", "return": "SwitchVlan", "signature": "SwitchVlan getSwitchVlan( SwitchNode switchNode, String vlanName )", "full_signature": "public SwitchVlan getSwitchVlan( SwitchNode switchNode, String vlanName )", "class_method_signature": "CumulusVlanHelper.getSwitchVlan( SwitchNode switchNode, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlansBulk", "parameters": "( SwitchNode switchNode )", "modifiers": "public", "return": "List<SwitchVlan>", "signature": "List<SwitchVlan> getSwitchVlansBulk( SwitchNode switchNode )", "full_signature": "public List<SwitchVlan> getSwitchVlansBulk( SwitchNode switchNode )", "class_method_signature": "CumulusVlanHelper.getSwitchVlansBulk( SwitchNode switchNode )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlansBulkPre25", "parameters": "( SwitchNode switchNode )", "modifiers": "@SuppressWarnings( { \"unchecked\", \"unused\" } ) private", "return": "List<SwitchVlan>", "signature": "List<SwitchVlan> getSwitchVlansBulkPre25( SwitchNode switchNode )", "full_signature": "@SuppressWarnings( { \"unchecked\", \"unused\" } ) private List<SwitchVlan> getSwitchVlansBulkPre25( SwitchNode switchNode )", "class_method_signature": "CumulusVlanHelper.getSwitchVlansBulkPre25( SwitchNode switchNode )", "testcase": false, "constructor": false}, {"identifier": "createVlan", "parameters": "( SwitchNode switchNode, SwitchVlan vlan )", "modifiers": "public", "return": "boolean", "signature": "boolean createVlan( SwitchNode switchNode, SwitchVlan vlan )", "full_signature": "public boolean createVlan( SwitchNode switchNode, SwitchVlan vlan )", "class_method_signature": "CumulusVlanHelper.createVlan( SwitchNode switchNode, SwitchVlan vlan )", "testcase": false, "constructor": false}, {"identifier": "updateVlan", "parameters": "( SwitchNode switchNode, String vlanName, SwitchVlan vlan )", "modifiers": "public", "return": "boolean", "signature": "boolean updateVlan( SwitchNode switchNode, String vlanName, SwitchVlan vlan )", "full_signature": "public boolean updateVlan( SwitchNode switchNode, String vlanName, SwitchVlan vlan )", "class_method_signature": "CumulusVlanHelper.updateVlan( SwitchNode switchNode, String vlanName, SwitchVlan vlan )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateVlan", "parameters": "( SwitchNode switchNode, SwitchVlan vlan )", "modifiers": "private", "return": "boolean", "signature": "boolean createOrUpdateVlan( SwitchNode switchNode, SwitchVlan vlan )", "full_signature": "private boolean createOrUpdateVlan( SwitchNode switchNode, SwitchVlan vlan )", "class_method_signature": "CumulusVlanHelper.createOrUpdateVlan( SwitchNode switchNode, SwitchVlan vlan )", "testcase": false, "constructor": false}, {"identifier": "updateLAGOnSwitchPorts", "parameters": "( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "modifiers": "public", "return": "boolean", "signature": "boolean updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "full_signature": "public boolean updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "class_method_signature": "CumulusVlanHelper.updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "testcase": false, "constructor": false}, {"identifier": "updateLAGOnSwitchPorts", "parameters": "( SwitchLacpGroup lacpGroup, Configuration configuration )", "modifiers": "protected", "return": "Configuration", "signature": "Configuration updateLAGOnSwitchPorts( SwitchLacpGroup lacpGroup, Configuration configuration )", "full_signature": "protected Configuration updateLAGOnSwitchPorts( SwitchLacpGroup lacpGroup, Configuration configuration )", "class_method_signature": "CumulusVlanHelper.updateLAGOnSwitchPorts( SwitchLacpGroup lacpGroup, Configuration configuration )", "testcase": false, "constructor": false}, {"identifier": "updateVlanConfiguration", "parameters": "( SwitchVlan vlan, Configuration configuration )", "modifiers": "protected", "return": "Configuration", "signature": "Configuration updateVlanConfiguration( SwitchVlan vlan, Configuration configuration )", "full_signature": "protected Configuration updateVlanConfiguration( SwitchVlan vlan, Configuration configuration )", "class_method_signature": "CumulusVlanHelper.updateVlanConfiguration( SwitchVlan vlan, Configuration configuration )", "testcase": false, "constructor": false}, {"identifier": "deletePortFromVlanConfiguration", "parameters": "( SwitchNode switchNode, String vlanId, String port )", "modifiers": "public", "return": "boolean", "signature": "boolean deletePortFromVlanConfiguration( SwitchNode switchNode, String vlanId, String port )", "full_signature": "public boolean deletePortFromVlanConfiguration( SwitchNode switchNode, String vlanId, String port )", "class_method_signature": "CumulusVlanHelper.deletePortFromVlanConfiguration( SwitchNode switchNode, String vlanId, String port )", "testcase": false, "constructor": false}, {"identifier": "deletePortFromVlanConfiguration", "parameters": "( SwitchVlan existingVlan, Configuration configuration,\n                                                             String port )", "modifiers": "protected", "return": "Configuration", "signature": "Configuration deletePortFromVlanConfiguration( SwitchVlan existingVlan, Configuration configuration,\n                                                             String port )", "full_signature": "protected Configuration deletePortFromVlanConfiguration( SwitchVlan existingVlan, Configuration configuration,\n                                                             String port )", "class_method_signature": "CumulusVlanHelper.deletePortFromVlanConfiguration( SwitchVlan existingVlan, Configuration configuration,\n                                                             String port )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateVlanPre25", "parameters": "( SwitchNode switchNode, SwitchVlan vlan, boolean update )", "modifiers": "private", "return": "boolean", "signature": "boolean createOrUpdateVlanPre25( SwitchNode switchNode, SwitchVlan vlan, boolean update )", "full_signature": "private boolean createOrUpdateVlanPre25( SwitchNode switchNode, SwitchVlan vlan, boolean update )", "class_method_signature": "CumulusVlanHelper.createOrUpdateVlanPre25( SwitchNode switchNode, SwitchVlan vlan, boolean update )", "testcase": false, "constructor": false}, {"identifier": "deleteVlan", "parameters": "( SwitchNode switchNode, String vlanName )", "modifiers": "public", "return": "boolean", "signature": "boolean deleteVlan( SwitchNode switchNode, String vlanName )", "full_signature": "public boolean deleteVlan( SwitchNode switchNode, String vlanName )", "class_method_signature": "CumulusVlanHelper.deleteVlan( SwitchNode switchNode, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "deleteVlan", "parameters": "( SwitchVlan vlan, Configuration configuration )", "modifiers": "public", "return": "Configuration", "signature": "Configuration deleteVlan( SwitchVlan vlan, Configuration configuration )", "full_signature": "public Configuration deleteVlan( SwitchVlan vlan, Configuration configuration )", "class_method_signature": "CumulusVlanHelper.deleteVlan( SwitchVlan vlan, Configuration configuration )", "testcase": false, "constructor": false}, {"identifier": "deleteVlanPre25", "parameters": "( SwitchNode switchNode, String vlanName )", "modifiers": "@SuppressWarnings( \"unused\" ) private", "return": "boolean", "signature": "boolean deleteVlanPre25( SwitchNode switchNode, String vlanName )", "full_signature": "@SuppressWarnings( \"unused\" ) private boolean deleteVlanPre25( SwitchNode switchNode, String vlanName )", "class_method_signature": "CumulusVlanHelper.deleteVlanPre25( SwitchNode switchNode, String vlanName )", "testcase": false, "constructor": false}], "file": "modules/cumulus-switch/src/main/java/com/vmware/vrack/hms/switches/cumulus/CumulusVlanHelper.java"}, "focal_method": {"identifier": "updateLAGOnSwitchPorts", "parameters": "( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "modifiers": "public", "return": "boolean", "body": "public boolean updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )\n        throws HmsException\n    {\n        /* Validate the input */\n        if ( lacpGroup == null || lacpGroup.getName() == null || lacpGroup.getName().trim().equals( \"\" ) )\n        {\n            throw new HmsException( \"Cannot create LACP group with empty/null name.\" );\n        }\n\n        /* Validate the port list */\n        if ( lacpGroup.getPorts() == null || lacpGroup.getPorts().isEmpty() )\n        {\n            throw new HmsException( \"Cannot create LACP group with empty port list.\" );\n        }\n\n        CumulusTorSwitchSession session = (CumulusTorSwitchSession) CumulusUtil.getSession( switchNode );\n        Configuration configuration = null;\n        try\n        {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            session.download( baos, CumulusConstants.INTERFACES_FILE );\n            configuration = Configuration.parse( new ByteArrayInputStream( baos.toByteArray() ) );\n        }\n        catch ( Exception e )\n        {\n            logger.error( \"Exception received while parsing interfaces file.\", e );\n        }\n\n        try\n        {\n            configuration = updateLAGOnSwitchPorts( lacpGroup, configuration );\n        }\n        catch ( Exception e )\n        {\n            String errMsg = String.format( \"Error on Switch %s : %s\", switchNode.getSwitchId(), e.getMessage() );\n            throw new HmsOobNetworkException( errMsg, e, HmsOobNetworkErrorCode.ARGUMENT_SYNTAX_ERROR );\n        }\n\n        /* Upload the file */\n        ByteArrayInputStream bais = new ByteArrayInputStream( configuration.getString().getBytes() );\n        CumulusUtil.validateSourceClause( switchNode );\n        CumulusUtil.uploadAsRoot( switchNode, bais, CumulusConstants.INTERFACES_FILE );\n\n        CumulusUtil.configurePersistenceDirectory( switchNode );\n\n        /* Activate the VLAN in the current session */\n        SshExecResult result =\n            session.executeEnhanced( CumulusConstants.RELOAD_INTERFACES.replaceAll( \"\\\\{password\\\\}\",\n                                                                                    CumulusUtil.qr( switchNode.getPassword() ) ) );\n        result.logIfError( logger );\n\n        return true;\n    }", "signature": "boolean updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "full_signature": "public boolean updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "class_method_signature": "CumulusVlanHelper.updateLAGOnSwitchPorts( SwitchNode switchNode, SwitchLacpGroup lacpGroup )", "testcase": false, "constructor": false, "invocations": ["getName", "equals", "trim", "getName", "getPorts", "isEmpty", "getPorts", "getSession", "download", "parse", "toByteArray", "error", "updateLAGOnSwitchPorts", "format", "getSwitchId", "getMessage", "getBytes", "getString", "validateSourceClause", "uploadAsRoot", "configurePersistenceDirectory", "executeEnhanced", "replaceAll", "qr", "getPassword", "logIfError"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}