{"test_class": {"identifier": "SimpleTopologyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private SimpleTopology topology;", "modifier": "@Tested private", "type": "SimpleTopology", "declarator": "topology", "var_name": "topology"}, {"original_string": "@Mocked private SimpleEntranceProcessingItem entrancePi;", "modifier": "@Mocked private", "type": "SimpleEntranceProcessingItem", "declarator": "entrancePi", "var_name": "entrancePi"}, {"original_string": "@Mocked private EntranceProcessor entranceProcessor;", "modifier": "@Mocked private", "type": "EntranceProcessor", "declarator": "entranceProcessor", "var_name": "entranceProcessor"}], "file": "samoa-local/src/test/java/com/yahoo/labs/samoa/topology/impl/SimpleTopologyTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRun() {\n\t\ttopology.addEntranceProcessingItem(entrancePi);\n\t\t\n\t\tnew NonStrictExpectations() {\n\t\t\t{\n\t\t\t\tentrancePi.getProcessor();\n\t\t\t\tresult=entranceProcessor;\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t\n\t\tnew Expectations() {\n\t\t\t{\n\t\t\t\tentranceProcessor.onCreate(anyInt);\t\n\t\t\t\tentrancePi.startSendingEvents();\n\t\t\t}\n\t\t};\n\t\ttopology.run();\n\t}", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "SimpleTopologyTest.testRun()", "testcase": true, "constructor": false, "invocations": ["addEntranceProcessingItem", "getProcessor", "onCreate", "startSendingEvents", "run"]}, "focal_class": {"identifier": "SimpleTopology", "superclass": "extends AbstractTopology", "interfaces": "", "fields": [], "methods": [{"identifier": "SimpleTopology", "parameters": "(String name)", "modifiers": "", "return": "", "signature": " SimpleTopology(String name)", "full_signature": "  SimpleTopology(String name)", "class_method_signature": "SimpleTopology.SimpleTopology(String name)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "SimpleTopology.run()", "testcase": false, "constructor": false}], "file": "samoa-local/src/main/java/com/yahoo/labs/samoa/topology/impl/SimpleTopology.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void run() {\n    \tif (this.getEntranceProcessingItems() == null)\n    \t\tthrow new IllegalStateException(\"You need to set entrance PI before running the topology.\");\n    \tif (this.getEntranceProcessingItems().size() != 1)\n    \t\tthrow new IllegalStateException(\"SimpleTopology supports 1 entrance PI only. Number of entrance PIs is \"+this.getEntranceProcessingItems().size());\n    \t\n    \tSimpleEntranceProcessingItem entrancePi = (SimpleEntranceProcessingItem) this.getEntranceProcessingItems().toArray()[0];\n    \tentrancePi.getProcessor().onCreate(0); // id=0 as it is not used in simple mode\n        entrancePi.startSendingEvents();\n    }", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "SimpleTopology.run()", "testcase": false, "constructor": false, "invocations": ["getEntranceProcessingItems", "size", "getEntranceProcessingItems", "size", "getEntranceProcessingItems", "toArray", "getEntranceProcessingItems", "onCreate", "getProcessor", "startSendingEvents"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}