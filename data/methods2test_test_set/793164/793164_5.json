{"test_class": {"identifier": "DateTimeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/cda/oht/src/test/java/org/openehealth/ipf/modules/cda/support/DateTimeUtilsTest.java"}, "test_case": {"identifier": "testIsValidDateTimeString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsValidDateTimeString() {\n        assertTrue(isValidDateTime(\"2009\"));\n        assertTrue(isValidDateTime(\"200902\"));\n        assertTrue(isValidDateTime(\"20090228\"));\n        assertTrue(isValidDateTime(\"200902281205\"));\n        assertTrue(isValidDateTime(\"200902281205+0001\"));\n        assertTrue(isValidDateTime(\"20090228120556\"));\n        assertTrue(isValidDateTime(\"20090228120556+0001\"));\n        assertTrue(isValidDateTime(\"20090228120556.123\"));\n        assertTrue(isValidDateTime(\"20090228120556.123+0200\"));\n        assertFalse(isValidDateTime(\"200913\"));\n        assertFalse(isValidDateTime(\"20090230\"));\n        assertFalse(isValidDateTime(\"200902282505\"));\n        assertFalse(isValidDateTime(\"200902281205+9999\"));\n        assertFalse(isValidDateTime(\"20090228120599\"));\n        assertFalse(isValidDateTime(\"20090228120599+9999\"));\n        assertFalse(isValidDateTime(\"20090228120556.12345\"));\n        assertFalse(isValidDateTime(\"20090228120556.123+9999\"));\n    }", "signature": "void testIsValidDateTimeString()", "full_signature": "@Test public void testIsValidDateTimeString()", "class_method_signature": "DateTimeUtilsTest.testIsValidDateTimeString()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertTrue", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime", "assertFalse", "isValidDateTime"]}, "focal_class": {"identifier": "DateTimeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter YEAR_FORMAT = new DateTimeFormatterBuilder()\n            .appendYear(4, 4).toFormatter();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "YEAR_FORMAT = new DateTimeFormatterBuilder()\n            .appendYear(4, 4).toFormatter()", "var_name": "YEAR_FORMAT"}, {"original_string": "private static final DateTimeFormatter YEAR_MONTH_FORMAT = new DateTimeFormatterBuilder()\n            .appendYear(4, 4).appendMonthOfYear(2).toFormatter();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "YEAR_MONTH_FORMAT = new DateTimeFormatterBuilder()\n            .appendYear(4, 4).appendMonthOfYear(2).toFormatter()", "var_name": "YEAR_MONTH_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATE_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMdd\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATE_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMdd\")", "var_name": "DATE_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_MINUTE_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmm\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_MINUTE_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmm\")", "var_name": "DATETIME_MINUTE_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_MINUTE_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmZ\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_MINUTE_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmZ\")", "var_name": "DATETIME_MINUTE_TZ_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_SECOND_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_SECOND_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss\")", "var_name": "DATETIME_SECOND_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_SECOND_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmssZ\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_SECOND_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmssZ\")", "var_name": "DATETIME_SECOND_TZ_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_MILLISECOND_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss.SSS\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_MILLISECOND_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss.SSS\")", "var_name": "DATETIME_MILLISECOND_FORMAT"}, {"original_string": "private static final DateTimeFormatter DATETIME_MILLISECOND_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss.SSSZ\");", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "DATETIME_MILLISECOND_TZ_FORMAT = DateTimeFormat\n            .forPattern(\"yyyyMMddHHmmss.SSSZ\")", "var_name": "DATETIME_MILLISECOND_TZ_FORMAT"}, {"original_string": "private static final DateTimeFormatter[][] formats = new DateTimeFormatter[][] {\n            new DateTimeFormatter[] { YEAR_FORMAT },\n            new DateTimeFormatter[] { YEAR_MONTH_FORMAT },\n            new DateTimeFormatter[] { DATE_FORMAT },\n            new DateTimeFormatter[] { DATETIME_MINUTE_FORMAT,\n                    DATETIME_MINUTE_TZ_FORMAT },\n            new DateTimeFormatter[] { DATETIME_SECOND_FORMAT,\n                    DATETIME_SECOND_TZ_FORMAT },\n            new DateTimeFormatter[] { DATETIME_MILLISECOND_FORMAT,\n                    DATETIME_MILLISECOND_TZ_FORMAT } };", "modifier": "private static final", "type": "DateTimeFormatter[][]", "declarator": "formats = new DateTimeFormatter[][] {\n            new DateTimeFormatter[] { YEAR_FORMAT },\n            new DateTimeFormatter[] { YEAR_MONTH_FORMAT },\n            new DateTimeFormatter[] { DATE_FORMAT },\n            new DateTimeFormatter[] { DATETIME_MINUTE_FORMAT,\n                    DATETIME_MINUTE_TZ_FORMAT },\n            new DateTimeFormatter[] { DATETIME_SECOND_FORMAT,\n                    DATETIME_SECOND_TZ_FORMAT },\n            new DateTimeFormatter[] { DATETIME_MILLISECOND_FORMAT,\n                    DATETIME_MILLISECOND_TZ_FORMAT } }", "var_name": "formats"}, {"original_string": "public static final int YEAR_PRECISION = 0;", "modifier": "public static final", "type": "int", "declarator": "YEAR_PRECISION = 0", "var_name": "YEAR_PRECISION"}, {"original_string": "public static final int MONTH_PRECISION = 1;", "modifier": "public static final", "type": "int", "declarator": "MONTH_PRECISION = 1", "var_name": "MONTH_PRECISION"}, {"original_string": "public static final int DATE_PRECISION = 2;", "modifier": "public static final", "type": "int", "declarator": "DATE_PRECISION = 2", "var_name": "DATE_PRECISION"}, {"original_string": "public static final int DATETIME_MINUTE_PRECISION = 3;", "modifier": "public static final", "type": "int", "declarator": "DATETIME_MINUTE_PRECISION = 3", "var_name": "DATETIME_MINUTE_PRECISION"}, {"original_string": "public static final int DATETIME_SECOND_PRECISION = 4;", "modifier": "public static final", "type": "int", "declarator": "DATETIME_SECOND_PRECISION = 4", "var_name": "DATETIME_SECOND_PRECISION"}, {"original_string": "public static final int DATETIME_MILLISECOND_PRECISION = 5;", "modifier": "public static final", "type": "int", "declarator": "DATETIME_MILLISECOND_PRECISION = 5", "var_name": "DATETIME_MILLISECOND_PRECISION"}], "methods": [{"identifier": "isValidDateTime", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidDateTime(String s)", "full_signature": "public static boolean isValidDateTime(String s)", "class_method_signature": "DateTimeUtils.isValidDateTime(String s)", "testcase": false, "constructor": false}, {"identifier": "isValidDateTime", "parameters": "(String s, int minimumPrecision)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidDateTime(String s, int minimumPrecision)", "full_signature": "public static boolean isValidDateTime(String s, int minimumPrecision)", "class_method_signature": "DateTimeUtils.isValidDateTime(String s, int minimumPrecision)", "testcase": false, "constructor": false}, {"identifier": "isValidDateTime", "parameters": "(String s, int minimumPrecision,\n            int maximumPrecision)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidDateTime(String s, int minimumPrecision,\n            int maximumPrecision)", "full_signature": "public static boolean isValidDateTime(String s, int minimumPrecision,\n            int maximumPrecision)", "class_method_signature": "DateTimeUtils.isValidDateTime(String s, int minimumPrecision,\n            int maximumPrecision)", "testcase": false, "constructor": false}], "file": "modules/cda/oht/src/main/java/org/openehealth/ipf/modules/cda/support/DateTimeUtils.java"}, "focal_method": {"identifier": "isValidDateTime", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isValidDateTime(String s) {\n        return isValidDateTime(s, 0, formats.length - 1);\n    }", "signature": "boolean isValidDateTime(String s)", "full_signature": "public static boolean isValidDateTime(String s)", "class_method_signature": "DateTimeUtils.isValidDateTime(String s)", "testcase": false, "constructor": false, "invocations": ["isValidDateTime"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}