{"test_class": {"identifier": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator decliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator;", "modifier": "private", "type": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator", "declarator": "decliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator", "var_name": "decliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator"}], "file": "appdomain/src/test/java/org/mifos/clientportfolio/newloan/domain/DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculatorTest.java"}, "test_case": {"identifier": "shouldCalculateLoanInterest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCalculateLoanInterest() {\n\n        // setup\n        LoanInterestCalculationDetails loanInterestCalculationDetails = new LoanInterestCalculationDetailsBuilder().withLoanAmount(\"100.0\")\n                                                                                                                   .withInterestRate(\"10.0\")\n                                                                                                                   .withDurationInYears(\"1.0\")\n                                                                                                                   .withGraceType(GraceType.NONE)\n                                                                                                                   .withGraceDurationOf(0)\n                                                                                                                   .withNumberOfInstallments(6)\n                                                                                                                   .withInterestFractionalRatePerInstallmentOf(\"0.16\")\n                                                                                                                   .build();\n\n        // exercise test\n        Money calculatedInterest = decliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.calculate(loanInterestCalculationDetails);\n\n        // verification\n        assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney(\"56.0\"))));\n    }", "signature": "void shouldCalculateLoanInterest()", "full_signature": "@Test public void shouldCalculateLoanInterest()", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculatorTest.shouldCalculateLoanInterest()", "testcase": true, "constructor": false, "invocations": ["build", "withInterestFractionalRatePerInstallmentOf", "withNumberOfInstallments", "withGraceDurationOf", "withGraceType", "withDurationInYears", "withInterestRate", "withLoanAmount", "calculate", "assertThat", "moneyOf", "is", "moneyOf", "createMoney"]}, "focal_class": {"identifier": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator", "superclass": "", "interfaces": "implements LoanInterestCalculator", "fields": [], "methods": [{"identifier": "calculate", "parameters": "(LoanInterestCalculationDetails loanInterestCalculationDetails)", "modifiers": "@Override public", "return": "Money", "signature": "Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "full_signature": "@Override public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "testcase": false, "constructor": false}, {"identifier": "getDecliningEPIAmount_v2", "parameters": "(GraceType graceType, Integer gracePeriodDuration, Integer numberOfInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningEPIAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numberOfInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningEPIAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numberOfInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.getDecliningEPIAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numberOfInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}, {"identifier": "getDecliningInterestAmountGrace_v2", "parameters": "(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}, {"identifier": "getDecliningEPIAmountNonGrace_v2", "parameters": "(final int numNonGraceInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningEPIAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningEPIAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.getDecliningEPIAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}], "file": "appdomain/src/main/java/org/mifos/clientportfolio/newloan/domain/DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.java"}, "focal_method": {"identifier": "calculate", "parameters": "(LoanInterestCalculationDetails loanInterestCalculationDetails)", "modifiers": "@Override public", "return": "Money", "body": "@Override\n    public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails) {\n\n        Money loanAmount = loanInterestCalculationDetails.getLoanAmount();\n        GraceType graceType = loanInterestCalculationDetails.getGraceType();\n        Integer gracePeriodDuration = loanInterestCalculationDetails.getGracePeriodDuration();\n        Integer numberOfInstallments = loanInterestCalculationDetails.getNumberOfInstallments();\n        Double interestFractionalRatePerInstallment = loanInterestCalculationDetails.getInterestFractionalRatePerInstallment();\n\n        return getDecliningEPIAmount_v2(graceType, gracePeriodDuration, numberOfInstallments, loanAmount, interestFractionalRatePerInstallment);\n    }", "signature": "Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "full_signature": "@Override public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "class_method_signature": "DecliningBalanceWithEqualPrincipalInstallmentsLoanInterestCalculator.calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "testcase": false, "constructor": false, "invocations": ["getLoanAmount", "getGraceType", "getGracePeriodDuration", "getNumberOfInstallments", "getInterestFractionalRatePerInstallment", "getDecliningEPIAmount_v2"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}