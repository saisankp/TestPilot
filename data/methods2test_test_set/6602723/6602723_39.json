{"test_class": {"identifier": "TestWebMBeanAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MBeanServer mockMBeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mockMBeanServer", "var_name": "mockMBeanServer"}, {"original_string": "private MBeanStringSanitizer mockSanitizer;", "modifier": "private", "type": "MBeanStringSanitizer", "declarator": "mockSanitizer", "var_name": "mockSanitizer"}, {"original_string": "private WebMBeanAdapter webMBeanAdapter;", "modifier": "private", "type": "WebMBeanAdapter", "declarator": "webMBeanAdapter", "var_name": "webMBeanAdapter"}, {"original_string": "private ObjectName mockObjectName;", "modifier": "private", "type": "ObjectName", "declarator": "mockObjectName", "var_name": "mockObjectName"}, {"original_string": "private MBeanInfo mockMBeanInfo;", "modifier": "private", "type": "MBeanInfo", "declarator": "mockMBeanInfo", "var_name": "mockMBeanInfo"}, {"original_string": "private MBeanOperationInvoker mockMBeanOperationInvoker;", "modifier": "private", "type": "MBeanOperationInvoker", "declarator": "mockMBeanOperationInvoker", "var_name": "mockMBeanOperationInvoker"}, {"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/jmx/TestWebMBeanAdapter.java"}, "test_case": {"identifier": "testGetAttributeValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAttributeValues() throws Exception {\n        MBeanAttributeInfo[] attributeInfoArray = new MBeanAttributeInfo[2];\n        MBeanAttributeInfo mockAttributeInfo1 = createMock(MBeanAttributeInfo.class);\n        MBeanAttributeInfo mockAttributeInfo2 = createMock(MBeanAttributeInfo.class);\n        attributeInfoArray[0] = mockAttributeInfo1;\n        attributeInfoArray[1] = mockAttributeInfo2;\n        expect(mockMBeanInfo.getAttributes()).andReturn(attributeInfoArray);\n\n        String attributeName1 = \"attribute_name_1\";\n        String attributeName2 = \"attribute_name_2\";\n        expect(mockAttributeInfo1.getName()).andReturn(attributeName1);\n        expect(mockAttributeInfo2.getName()).andReturn(attributeName2);\n\n        AttributeList mockAttributeList = createMock(AttributeList.class);\n        expect(mockMBeanServer.getAttributes(eq(mockObjectName), anyObject(String[].class))).andReturn(mockAttributeList);\n\n        List<Attribute> attributeList = new ArrayList<Attribute>();\n        Attribute mockAttribute1 = createMock(Attribute.class);\n        Attribute mockAttribute2 = createMock(Attribute.class);\n\n        attributeList.add(mockAttribute1);\n        attributeList.add(mockAttribute2);\n\n        expect(mockAttributeList.asList()).andReturn(attributeList);\n\n        String name1 = \"name 1\";\n        String value1 = \"value 1\";\n        expect(mockAttribute1.getName()).andReturn(name1);\n        expect(mockAttribute1.getValue()).andReturn(value1);\n        expect(mockSanitizer.escapeValue(value1)).andReturn(value1);\n\n        String name2 = \"name 2\";\n        String value2 = \"value 2\";\n        expect(mockAttribute2.getName()).andReturn(name2);\n        expect(mockAttribute2.getValue()).andReturn(value2);\n        expect(mockSanitizer.escapeValue(value2)).andReturn(value2);\n\n        replay(mockMBeanServer, mockSanitizer, mockObjectName, mockMBeanInfo,\n                mockAttributeInfo1, mockAttributeInfo2, mockAttributeList,\n                mockAttribute1, mockAttribute2);\n\n        Map<String, Object> attributeValueMap = webMBeanAdapter.getAttributeValues();\n\n        assertEquals(2, attributeValueMap.size());\n        assertEquals(value1, attributeValueMap.get(name1));\n        assertEquals(value2, attributeValueMap.get(name2));\n\n        verify(mockMBeanServer, mockSanitizer, mockObjectName, mockMBeanInfo,\n                mockAttributeInfo1, mockAttributeInfo2, mockAttributeList,\n                mockAttribute1, mockAttribute2);\n    }", "signature": "void testGetAttributeValues()", "full_signature": "@Test public void testGetAttributeValues()", "class_method_signature": "TestWebMBeanAdapter.testGetAttributeValues()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "andReturn", "expect", "getAttributes", "andReturn", "expect", "getName", "andReturn", "expect", "getName", "createMock", "andReturn", "expect", "getAttributes", "eq", "anyObject", "createMock", "createMock", "add", "add", "andReturn", "expect", "asList", "andReturn", "expect", "getName", "andReturn", "expect", "getValue", "andReturn", "expect", "escapeValue", "andReturn", "expect", "getName", "andReturn", "expect", "getValue", "andReturn", "expect", "escapeValue", "replay", "getAttributeValues", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "verify"]}, "focal_class": {"identifier": "WebMBeanAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MBeanServer mBeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mBeanServer", "var_name": "mBeanServer"}, {"original_string": "private ObjectName objectName;", "modifier": "private", "type": "ObjectName", "declarator": "objectName", "var_name": "objectName"}, {"original_string": "private MBeanStringSanitizer sanitizer;", "modifier": "private", "type": "MBeanStringSanitizer", "declarator": "sanitizer", "var_name": "sanitizer"}, {"original_string": "private String encoding;", "modifier": "private", "type": "String", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private MBeanInfo mBeanInfo;", "modifier": "private", "type": "MBeanInfo", "declarator": "mBeanInfo", "var_name": "mBeanInfo"}], "methods": [{"identifier": "WebMBeanAdapter", "parameters": "(MBeanServer mBeanServer, String mBeanName, String encoding)", "modifiers": "public", "return": "", "signature": " WebMBeanAdapter(MBeanServer mBeanServer, String mBeanName, String encoding)", "full_signature": "public  WebMBeanAdapter(MBeanServer mBeanServer, String mBeanName, String encoding)", "class_method_signature": "WebMBeanAdapter.WebMBeanAdapter(MBeanServer mBeanServer, String mBeanName, String encoding)", "testcase": false, "constructor": true}, {"identifier": "getAttributeMetadata", "parameters": "()", "modifiers": "public", "return": "Map<String, MBeanAttributeInfo>", "signature": "Map<String, MBeanAttributeInfo> getAttributeMetadata()", "full_signature": "public Map<String, MBeanAttributeInfo> getAttributeMetadata()", "class_method_signature": "WebMBeanAdapter.getAttributeMetadata()", "testcase": false, "constructor": false}, {"identifier": "getOperationMetadata", "parameters": "()", "modifiers": "public", "return": "Map<String, MBeanOperationInfo>", "signature": "Map<String, MBeanOperationInfo> getOperationMetadata()", "full_signature": "public Map<String, MBeanOperationInfo> getOperationMetadata()", "class_method_signature": "WebMBeanAdapter.getOperationMetadata()", "testcase": false, "constructor": false}, {"identifier": "getOperationInfo", "parameters": "(String operationName)", "modifiers": "public", "return": "MBeanOperationInfo", "signature": "MBeanOperationInfo getOperationInfo(String operationName)", "full_signature": "public MBeanOperationInfo getOperationInfo(String operationName)", "class_method_signature": "WebMBeanAdapter.getOperationInfo(String operationName)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValues", "parameters": "()", "modifiers": "public", "return": "Map<String,Object>", "signature": "Map<String,Object> getAttributeValues()", "full_signature": "public Map<String,Object> getAttributeValues()", "class_method_signature": "WebMBeanAdapter.getAttributeValues()", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(String attributeName)", "modifiers": "public", "return": "String", "signature": "String getAttributeValue(String attributeName)", "full_signature": "public String getAttributeValue(String attributeName)", "class_method_signature": "WebMBeanAdapter.getAttributeValue(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "invokeOperation", "parameters": "(String operationName, Map<String, String[]> parameterMap)", "modifiers": "public", "return": "String", "signature": "String invokeOperation(String operationName, Map<String, String[]> parameterMap)", "full_signature": "public String invokeOperation(String operationName, Map<String, String[]> parameterMap)", "class_method_signature": "WebMBeanAdapter.invokeOperation(String operationName, Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "createMBeanStringSanitizer", "parameters": "()", "modifiers": "", "return": "MBeanStringSanitizer", "signature": "MBeanStringSanitizer createMBeanStringSanitizer()", "full_signature": " MBeanStringSanitizer createMBeanStringSanitizer()", "class_method_signature": "WebMBeanAdapter.createMBeanStringSanitizer()", "testcase": false, "constructor": false}, {"identifier": "createObjectName", "parameters": "(String name)", "modifiers": "", "return": "ObjectName", "signature": "ObjectName createObjectName(String name)", "full_signature": " ObjectName createObjectName(String name)", "class_method_signature": "WebMBeanAdapter.createObjectName(String name)", "testcase": false, "constructor": false}, {"identifier": "createMBeanOperationInvoker", "parameters": "(\n            MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "modifiers": "", "return": "MBeanOperationInvoker", "signature": "MBeanOperationInvoker createMBeanOperationInvoker(\n            MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "full_signature": " MBeanOperationInvoker createMBeanOperationInvoker(\n            MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "class_method_signature": "WebMBeanAdapter.createMBeanOperationInvoker(\n            MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/jmx/WebMBeanAdapter.java"}, "focal_method": {"identifier": "getAttributeValues", "parameters": "()", "modifiers": "public", "return": "Map<String,Object>", "body": "public Map<String,Object> getAttributeValues()\n        throws AttributeNotFoundException, InstanceNotFoundException, ReflectionException {\n\n         HashSet<String> attributeSet = new HashSet<String>();\n\n        for (MBeanAttributeInfo attributeInfo : mBeanInfo.getAttributes()) {\n            attributeSet.add(attributeInfo.getName());\n        }\n\n        AttributeList attributeList =\n                mBeanServer.getAttributes(objectName, attributeSet.toArray(new String[attributeSet.size()]));\n\n        Map<String, Object> attributeValueMap = new TreeMap<String, Object>();\n        for (Attribute attribute : attributeList.asList()) {\n            attributeValueMap.put(attribute.getName(), sanitizer.escapeValue(attribute.getValue()));\n        }\n\n        return attributeValueMap;\n    }", "signature": "Map<String,Object> getAttributeValues()", "full_signature": "public Map<String,Object> getAttributeValues()", "class_method_signature": "WebMBeanAdapter.getAttributeValues()", "testcase": false, "constructor": false, "invocations": ["getAttributes", "add", "getName", "getAttributes", "toArray", "size", "asList", "put", "getName", "escapeValue", "getValue"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}