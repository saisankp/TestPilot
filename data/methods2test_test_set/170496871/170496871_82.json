{"test_class": {"identifier": "RepairEntryProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OLD_VALUE = \"old_value\";", "modifier": "private static final", "type": "String", "declarator": "OLD_VALUE = \"old_value\"", "var_name": "OLD_VALUE"}, {"original_string": "private static final CacheObject OLD_CACHE_VALUE = new CacheObjectImpl(OLD_VALUE, OLD_VALUE.getBytes());", "modifier": "private static final", "type": "CacheObject", "declarator": "OLD_CACHE_VALUE = new CacheObjectImpl(OLD_VALUE, OLD_VALUE.getBytes())", "var_name": "OLD_CACHE_VALUE"}, {"original_string": "private static final String NEW_VALUE = \"new_value\";", "modifier": "private static final", "type": "String", "declarator": "NEW_VALUE = \"new_value\"", "var_name": "NEW_VALUE"}, {"original_string": "private static final String RECHECK_VALUE = \"updated_value\";", "modifier": "private static final", "type": "String", "declarator": "RECHECK_VALUE = \"updated_value\"", "var_name": "RECHECK_VALUE"}, {"original_string": "private static final CacheObject RECHECK_CACHE_VALUE = new CacheObjectImpl(RECHECK_VALUE, RECHECK_VALUE.getBytes());", "modifier": "private static final", "type": "CacheObject", "declarator": "RECHECK_CACHE_VALUE = new CacheObjectImpl(RECHECK_VALUE, RECHECK_VALUE.getBytes())", "var_name": "RECHECK_CACHE_VALUE"}, {"original_string": "private static final UUID LOCAL_NODE_ID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "LOCAL_NODE_ID = UUID.randomUUID()", "var_name": "LOCAL_NODE_ID"}, {"original_string": "private static final UUID OTHRER_NODE_ID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "OTHRER_NODE_ID = UUID.randomUUID()", "var_name": "OTHRER_NODE_ID"}, {"original_string": "private static final int RMV_QUEUE_MAX_SIZE = 12;", "modifier": "private static final", "type": "int", "declarator": "RMV_QUEUE_MAX_SIZE = 12", "var_name": "RMV_QUEUE_MAX_SIZE"}, {"original_string": "private GridCacheContext cctx;", "modifier": "private", "type": "GridCacheContext", "declarator": "cctx", "var_name": "cctx"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/checker/tasks/RepairEntryProcessorTest.java"}, "test_case": {"identifier": "testEntryWasChangedDuringRepairAtNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEntryWasChangedDuringRepairAtNull() {\n        Map<UUID, VersionedValue> data = new HashMap<>();\n        data.put(LOCAL_NODE_ID, new VersionedValue(\n            new CacheObjectImpl(OLD_VALUE, OLD_VALUE.getBytes()),\n            new GridCacheVersion(1, 1, 1),\n            1,\n            1\n        ));\n\n        RepairEntryProcessor repairProcessor = new RepairEntryProcessorStub(\n            null,\n            data,\n            RMV_QUEUE_MAX_SIZE,\n            false,\n            new AffinityTopologyVersion(1)\n        ).setKeyVersion(new GridCacheVersion(0, 0, 0));\n\n        MutableEntry entry = mock(MutableEntry.class);\n        when(entry.getValue()).thenReturn(null);\n\n        assertEquals(repairProcessor.process(entry), RepairEntryProcessor.RepairStatus.CONCURRENT_MODIFICATION);\n    }", "signature": "void testEntryWasChangedDuringRepairAtNull()", "full_signature": "@Test public void testEntryWasChangedDuringRepairAtNull()", "class_method_signature": "RepairEntryProcessorTest.testEntryWasChangedDuringRepairAtNull()", "testcase": true, "constructor": false, "invocations": ["put", "getBytes", "setKeyVersion", "mock", "thenReturn", "when", "getValue", "assertEquals", "process"]}, "focal_class": {"identifier": "RepairEntryProcessor", "superclass": "", "interfaces": "implements EntryProcessor", "fields": [{"original_string": "private Object val;", "modifier": "private", "type": "Object", "declarator": "val", "var_name": "val"}, {"original_string": "private Map<UUID, VersionedValue> data;", "modifier": "private", "type": "Map<UUID, VersionedValue>", "declarator": "data", "var_name": "data"}, {"original_string": "private long rmvQueueMaxSize;", "modifier": "private", "type": "long", "declarator": "rmvQueueMaxSize", "var_name": "rmvQueueMaxSize"}, {"original_string": "private boolean forceRepair;", "modifier": "private", "type": "boolean", "declarator": "forceRepair", "var_name": "forceRepair"}, {"original_string": "private AffinityTopologyVersion startTopVer;", "modifier": "private", "type": "AffinityTopologyVersion", "declarator": "startTopVer", "var_name": "startTopVer"}], "methods": [{"identifier": "RepairEntryProcessor", "parameters": "(\n        Object val,\n        Map<UUID, VersionedValue> data,\n        long rmvQueueMaxSize,\n        boolean forceRepair,\n        AffinityTopologyVersion startTopVer)", "modifiers": "@SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\") public", "return": "", "signature": " RepairEntryProcessor(\n        Object val,\n        Map<UUID, VersionedValue> data,\n        long rmvQueueMaxSize,\n        boolean forceRepair,\n        AffinityTopologyVersion startTopVer)", "full_signature": "@SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\") public  RepairEntryProcessor(\n        Object val,\n        Map<UUID, VersionedValue> data,\n        long rmvQueueMaxSize,\n        boolean forceRepair,\n        AffinityTopologyVersion startTopVer)", "class_method_signature": "RepairEntryProcessor.RepairEntryProcessor(\n        Object val,\n        Map<UUID, VersionedValue> data,\n        long rmvQueueMaxSize,\n        boolean forceRepair,\n        AffinityTopologyVersion startTopVer)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(MutableEntry entry, Object... arguments)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object process(MutableEntry entry, Object... arguments)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object process(MutableEntry entry, Object... arguments)", "class_method_signature": "RepairEntryProcessor.process(MutableEntry entry, Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "cacheContext", "parameters": "(MutableEntry entry)", "modifiers": "protected", "return": "GridCacheContext", "signature": "GridCacheContext cacheContext(MutableEntry entry)", "full_signature": "protected GridCacheContext cacheContext(MutableEntry entry)", "class_method_signature": "RepairEntryProcessor.cacheContext(MutableEntry entry)", "testcase": false, "constructor": false}, {"identifier": "topologyChanged", "parameters": "(GridCacheContext cctx, AffinityTopologyVersion expTop)", "modifiers": "protected", "return": "boolean", "signature": "boolean topologyChanged(GridCacheContext cctx, AffinityTopologyVersion expTop)", "full_signature": "protected boolean topologyChanged(GridCacheContext cctx, AffinityTopologyVersion expTop)", "class_method_signature": "RepairEntryProcessor.topologyChanged(GridCacheContext cctx, AffinityTopologyVersion expTop)", "testcase": false, "constructor": false}, {"identifier": "keyVersion", "parameters": "(MutableEntry entry)", "modifiers": "protected", "return": "GridCacheVersion", "signature": "GridCacheVersion keyVersion(MutableEntry entry)", "full_signature": "protected GridCacheVersion keyVersion(MutableEntry entry)", "class_method_signature": "RepairEntryProcessor.keyVersion(MutableEntry entry)", "testcase": false, "constructor": false}, {"identifier": "updateCounter", "parameters": "(GridCacheContext cctx, Object affKey)", "modifiers": "protected", "return": "long", "signature": "long updateCounter(GridCacheContext cctx, Object affKey)", "full_signature": "protected long updateCounter(GridCacheContext cctx, Object affKey)", "class_method_signature": "RepairEntryProcessor.updateCounter(GridCacheContext cctx, Object affKey)", "testcase": false, "constructor": false}, {"identifier": "minValue", "parameters": "(Function<VersionedValue, Long> mapper)", "modifiers": "private", "return": "long", "signature": "long minValue(Function<VersionedValue, Long> mapper)", "full_signature": "private long minValue(Function<VersionedValue, Long> mapper)", "class_method_signature": "RepairEntryProcessor.minValue(Function<VersionedValue, Long> mapper)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/checker/tasks/RepairEntryProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(MutableEntry entry, Object... arguments)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n    @Override public Object process(MutableEntry entry, Object... arguments) throws EntryProcessorException {\n        GridCacheContext cctx = cacheContext(entry);\n        GridCacheVersion currKeyGridCacheVer = keyVersion(entry);\n\n        if (topologyChanged(cctx, startTopVer))\n            throw new EntryProcessorException(\"Topology version was changed\");\n\n        UUID locNodeId = cctx.localNodeId();\n        VersionedValue versionedVal = data.get(locNodeId);\n\n        if (versionedVal != null) {\n            if (currKeyGridCacheVer.compareTo(versionedVal.version()) == 0) {\n                if (val == null)\n                    entry.remove();\n                else\n                    entry.setValue(val);\n\n                return RepairStatus.SUCCESS;\n            }\n            else\n                return RepairStatus.CONCURRENT_MODIFICATION;\n        }\n        else {\n            if (currKeyGridCacheVer.compareTo(new GridCacheVersion(0, 0, 0)) == 0) {\n                long recheckStartTime = minValue(VersionedValue::recheckStartTime);\n\n                boolean inEntryTTLBounds =\n                    (System.currentTimeMillis() - recheckStartTime) < Long.getLong(IGNITE_CACHE_REMOVED_ENTRIES_TTL, 10_000);\n\n                // Min available update counter for the key at all nodes.\n                // It just fast solution for null value problem. We should use other way to fix it (versionedVal.updateCounter()).\n                long minUpdateCntr = minValue(VersionedValue::updateCounter);\n                long currUpdateCntr = updateCounter(cctx, entry.getKey());\n\n                boolean inDeferredDelQueueBounds = ((currUpdateCntr - minUpdateCntr) < rmvQueueMaxSize);\n\n                //TODO Remove it after fixes: https://ggsystems.atlassian.net/browse/GG-27419\n                if (cctx.config().getAtomicityMode() != CacheAtomicityMode.ATOMIC || inEntryTTLBounds && inDeferredDelQueueBounds) {\n                    if (val == null)\n                        entry.remove();\n                    else\n                        entry.setValue(val);\n\n                    return RepairStatus.SUCCESS;\n                }\n            }\n            else\n                return RepairStatus.CONCURRENT_MODIFICATION;\n\n            if (forceRepair) {\n                if (val == null)\n                    entry.remove();\n                else\n                    entry.setValue(val);\n\n                return RepairStatus.SUCCESS;\n            }\n\n            return RepairStatus.FAIL;\n        }\n    }", "signature": "Object process(MutableEntry entry, Object... arguments)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object process(MutableEntry entry, Object... arguments)", "class_method_signature": "RepairEntryProcessor.process(MutableEntry entry, Object... arguments)", "testcase": false, "constructor": false, "invocations": ["cacheContext", "keyVersion", "topologyChanged", "localNodeId", "get", "compareTo", "version", "remove", "setValue", "compareTo", "minValue", "currentTimeMillis", "getLong", "minValue", "updateCounter", "getKey", "getAtomicityMode", "config", "remove", "setValue", "remove", "setValue"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}