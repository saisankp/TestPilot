{"test_class": {"identifier": "CacheFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final CacheFactory factory = new CacheFactory();", "modifier": "@InjectMocks\n    private final", "type": "CacheFactory", "declarator": "factory = new CacheFactory()", "var_name": "factory"}, {"original_string": "@Mock\n    private CacheBase cacheBase;", "modifier": "@Mock\n    private", "type": "CacheBase", "declarator": "cacheBase", "var_name": "cacheBase"}, {"original_string": "@Mock\n    private CacheClientFactory cacheClientFactory;", "modifier": "@Mock\n    private", "type": "CacheClientFactory", "declarator": "cacheClientFactory", "var_name": "cacheClientFactory"}, {"original_string": "@Mock\n    private CacheClient cacheClient;", "modifier": "@Mock\n    private", "type": "CacheClient", "declarator": "cacheClient", "var_name": "cacheClient"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/CacheFactoryTest.java"}, "test_case": {"identifier": "testCreateClientException", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testCreateClientException() throws IOException, NamingException {\n        factory.createCache();\n    }", "signature": "void testCreateClientException()", "full_signature": "@Test(expected = RuntimeException.class) public void testCreateClientException()", "class_method_signature": "CacheFactoryTest.testCreateClientException()", "testcase": true, "constructor": false, "invocations": ["createCache"]}, "focal_class": {"identifier": "CacheFactory", "superclass": "", "interfaces": "implements AddressChangeListener, FactoryBean<Cache>, InitializingBean, DisposableBean", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CacheFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CacheFactory.class)", "var_name": "LOGGER"}, {"original_string": "@Setter\n    private CacheConfiguration configuration = new CacheConfiguration();", "modifier": "@Setter\n    private", "type": "CacheConfiguration", "declarator": "configuration = new CacheConfiguration()", "var_name": "configuration"}, {"original_string": "@Setter\n    private AddressProvider addressProvider;", "modifier": "@Setter\n    private", "type": "AddressProvider", "declarator": "addressProvider", "var_name": "addressProvider"}, {"original_string": "@Setter\n    private CacheClientFactory cacheClientFactory;", "modifier": "@Setter\n    private", "type": "CacheClientFactory", "declarator": "cacheClientFactory", "var_name": "cacheClientFactory"}, {"original_string": "@Setter\n    private String cacheName = AnnotationConstants.DEFAULT_CACHE_NAME;", "modifier": "@Setter\n    private", "type": "String", "declarator": "cacheName = AnnotationConstants.DEFAULT_CACHE_NAME", "var_name": "cacheName"}, {"original_string": "@Setter\n    private Collection<String> cacheAliases = Collections.emptyList();", "modifier": "@Setter\n    private", "type": "Collection<String>", "declarator": "cacheAliases = Collections.emptyList()", "var_name": "cacheAliases"}, {"original_string": "private Cache cache;", "modifier": "private", "type": "Cache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Setter\n    private AddressChangeNotifier addressChangeNotifier;", "modifier": "@Setter\n    private", "type": "AddressChangeNotifier", "declarator": "addressChangeNotifier", "var_name": "addressChangeNotifier"}, {"original_string": "@Setter\n    private SerializationType defaultSerializationType = SerializationType.PROVIDER;", "modifier": "@Setter\n    private", "type": "SerializationType", "declarator": "defaultSerializationType = SerializationType.PROVIDER", "var_name": "defaultSerializationType"}, {"original_string": "@Setter\n    private JsonTranscoder jsonTranscoder;", "modifier": "@Setter\n    private", "type": "JsonTranscoder", "declarator": "jsonTranscoder", "var_name": "jsonTranscoder"}, {"original_string": "@Setter\n    private JavaTranscoder javaTranscoder;", "modifier": "@Setter\n    private", "type": "JavaTranscoder", "declarator": "javaTranscoder", "var_name": "javaTranscoder"}, {"original_string": "@Setter\n    private CacheTranscoder customTranscoder;", "modifier": "@Setter\n    private", "type": "CacheTranscoder", "declarator": "customTranscoder", "var_name": "customTranscoder"}, {"original_string": "@Setter\n    private boolean initializeTranscoders = true;", "modifier": "@Setter\n    private", "type": "boolean", "declarator": "initializeTranscoders = true", "var_name": "initializeTranscoders"}, {"original_string": "@Autowired(required = false)\n    private CacheBase cacheBase;", "modifier": "@Autowired(required = false)\n    private", "type": "CacheBase", "declarator": "cacheBase", "var_name": "cacheBase"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "CacheFactory.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "Cache", "signature": "Cache getObject()", "full_signature": "@Override public Cache getObject()", "class_method_signature": "CacheFactory.getObject()", "testcase": false, "constructor": false}, {"identifier": "getObjectType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getObjectType()", "full_signature": "@Override public Class<?> getObjectType()", "class_method_signature": "CacheFactory.getObjectType()", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSingleton()", "full_signature": "@Override public boolean isSingleton()", "class_method_signature": "CacheFactory.isSingleton()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "CacheFactory.destroy()", "testcase": false, "constructor": false}, {"identifier": "changeAddresses", "parameters": "(final List<InetSocketAddress> addresses)", "modifiers": "@Override public", "return": "void", "signature": "void changeAddresses(final List<InetSocketAddress> addresses)", "full_signature": "@Override public void changeAddresses(final List<InetSocketAddress> addresses)", "class_method_signature": "CacheFactory.changeAddresses(final List<InetSocketAddress> addresses)", "testcase": false, "constructor": false}, {"identifier": "createCache", "parameters": "()", "modifiers": "protected", "return": "Cache", "signature": "Cache createCache()", "full_signature": "protected Cache createCache()", "class_method_signature": "CacheFactory.createCache()", "testcase": false, "constructor": false}, {"identifier": "isCacheDisabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isCacheDisabled()", "full_signature": " boolean isCacheDisabled()", "class_method_signature": "CacheFactory.isCacheDisabled()", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(final List<InetSocketAddress> addrs)", "modifiers": "private", "return": "CacheClient", "signature": "CacheClient createClient(final List<InetSocketAddress> addrs)", "full_signature": "private CacheClient createClient(final List<InetSocketAddress> addrs)", "class_method_signature": "CacheFactory.createClient(final List<InetSocketAddress> addrs)", "testcase": false, "constructor": false}, {"identifier": "validateTranscoder", "parameters": "(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "modifiers": "private", "return": "void", "signature": "void validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "full_signature": "private void validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "class_method_signature": "CacheFactory.validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/CacheFactory.java"}, "focal_method": {"identifier": "createCache", "parameters": "()", "modifiers": "protected", "return": "Cache", "body": "protected Cache createCache() throws IOException {\n        // this factory creates only one single cache and return it if someone invoked this method twice or\n        // more\n        if (cache != null) {\n            throw new IllegalStateException(String.format(\"This factory has already created memcached client for cache %s\", cacheName));\n        }\n\n        if (isCacheDisabled()) {\n            LOGGER.warn(\"Cache {} is disabled\", cacheName);\n            cache = (Cache) Proxy.newProxyInstance(Cache.class.getClassLoader(), new Class[] { Cache.class },\n                    new DisabledCacheInvocationHandler(cacheName, cacheAliases));\n            return cache;\n        }\n\n        if (configuration == null) {\n            throw new RuntimeException(String.format(\"The MemcachedConnectionBean for cache %s must be defined!\", cacheName));\n        }\n\n        List<InetSocketAddress> addrs = addressProvider.getAddresses();\n        cache = new CacheImpl(cacheName, cacheAliases, createClient(addrs), defaultSerializationType, jsonTranscoder, javaTranscoder,\n                customTranscoder, new CacheProperties(configuration.isUseNameAsKeyPrefix(), configuration.getKeyPrefixSeparator()));\n\n        return cache;\n    }", "signature": "Cache createCache()", "full_signature": "protected Cache createCache()", "class_method_signature": "CacheFactory.createCache()", "testcase": false, "constructor": false, "invocations": ["format", "isCacheDisabled", "warn", "newProxyInstance", "getClassLoader", "format", "getAddresses", "createClient", "isUseNameAsKeyPrefix", "getKeyPrefixSeparator"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}