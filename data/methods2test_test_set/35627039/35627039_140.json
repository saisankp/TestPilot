{"test_class": {"identifier": "HBaseBundleHintProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HBaseBundleHintProvider provider = new HBaseBundleHintProvider();", "modifier": "private", "type": "HBaseBundleHintProvider", "declarator": "provider = new HBaseBundleHintProvider()", "var_name": "provider"}, {"original_string": "@Mocked\n    private EnvironmentService environmentService;", "modifier": "@Mocked\n    private", "type": "EnvironmentService", "declarator": "environmentService", "var_name": "environmentService"}, {"original_string": "@Mocked\n    private HBaseMetadataService hbaseMetadataService;", "modifier": "@Mocked\n    private", "type": "HBaseMetadataService", "declarator": "hbaseMetadataService", "var_name": "hbaseMetadataService"}], "file": "streams/cluster/src/test/java/com/hortonworks/streamline/streams/cluster/bundle/impl/HBaseBundleHintProviderTest.java"}, "test_case": {"identifier": "testGetHintsOnCluster", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testGetHintsOnCluster() throws Exception {\n        List<String> tables = Lists.newArrayList(\"test1\", \"test2\", \"test3\");\n\n        new Expectations() {{\n            hbaseMetadataService.getHBaseTables();\n            result = new Tables(tables);\n        }};\n\n        Cluster cluster = new Cluster();\n        cluster.setId(1L);\n        cluster.setName(\"cluster1\");\n\n        Map<String, Object> hints = provider.getHintsOnCluster(cluster, null, null);\n        Assert.assertNotNull(hints);\n        Assert.assertEquals(1, hints.size());\n        Assert.assertEquals(tables, hints.get(HBaseBundleHintProvider.FIELD_NAME_TABLE));\n\n        new Verifications() {{\n            hbaseMetadataService.getHBaseTables();\n        }};\n    }", "signature": "void testGetHintsOnCluster()", "full_signature": "@Ignore @Test public void testGetHintsOnCluster()", "class_method_signature": "HBaseBundleHintProviderTest.testGetHintsOnCluster()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "getHBaseTables", "setId", "setName", "getHintsOnCluster", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "getHBaseTables"]}, "focal_class": {"identifier": "HBaseBundleHintProvider", "superclass": "extends AbstractBundleHintProvider", "interfaces": "", "fields": [{"original_string": "public static final String FIELD_NAME_TABLE = \"table\";", "modifier": "public static final", "type": "String", "declarator": "FIELD_NAME_TABLE = \"table\"", "var_name": "FIELD_NAME_TABLE"}], "methods": [{"identifier": "getHintsOnCluster", "parameters": "(Cluster cluster, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "class_method_signature": "HBaseBundleHintProvider.getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false}, {"identifier": "getServiceName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getServiceName()", "full_signature": "@Override public String getServiceName()", "class_method_signature": "HBaseBundleHintProvider.getServiceName()", "testcase": false, "constructor": false}], "file": "streams/cluster/src/main/java/com/hortonworks/streamline/streams/cluster/bundle/impl/HBaseBundleHintProvider.java"}, "focal_method": {"identifier": "getHintsOnCluster", "parameters": "(Cluster cluster, SecurityContext securityContext, Subject subject)", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n    public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject) {\n        Map<String, Object> hintMap = new HashMap<>();\n        try (HBaseMetadataService hBaseMetadataService = HBaseMetadataService.newInstance(environmentService, cluster.getId(), securityContext, subject)) {\n            hintMap.put(FIELD_NAME_TABLE, hBaseMetadataService.getHBaseTables().getTables());\n        } catch (ServiceNotFoundException e) {\n            // we access it from mapping information so shouldn't be here\n            throw new IllegalStateException(\"Service \" + Constants.HBase.SERVICE_NAME + \" in cluster \" + cluster.getName() +\n                    \" not found but mapping information exists.\");\n        } catch (ServiceConfigurationNotFoundException e) {\n            // there's HBASE service but not enough configuration info.\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return hintMap;\n    }", "signature": "Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "full_signature": "@Override public Map<String, Object> getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "class_method_signature": "HBaseBundleHintProvider.getHintsOnCluster(Cluster cluster, SecurityContext securityContext, Subject subject)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getId", "put", "getTables", "getHBaseTables", "getName"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}