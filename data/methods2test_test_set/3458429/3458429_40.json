{"test_class": {"identifier": "MimeTypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-net/src/test/java/com/fireflysource/net/http/common/model/MimeTypesTest.java"}, "test_case": {"identifier": "testContentTypeWithoutCharset", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testContentTypeWithoutCharset() {\n        assertEquals(\"foo/bar;some=else\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;charset=abc;some=else\"));\n        assertEquals(\"foo/bar\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;charset=abc\"));\n        assertEquals(\"foo/bar\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; charset = abc\"));\n        assertEquals(\"foo/bar;some=else\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; charset = abc ; some=else\"));\n        assertEquals(\"foo/bar;other=param;some=else\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;other=param;charset=abc;some=else\"));\n        assertEquals(\"foo/bar;other=param\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;other=param;charset=abc\"));\n        assertEquals(\"foo/bar ; other = param\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; other = param ; charset = abc\"));\n        assertEquals(\"foo/bar ; other = param;some=else\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; other = param ; charset = abc ; some=else\"));\n        assertEquals(\"foo/bar ; other = param\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; other = param ; charset = abc\"));\n        assertEquals(\"foo/bar ; other = param;some=else\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar ; other = param ; charset = \\\"abc\\\" ; some=else\"));\n        assertEquals(\"foo/bar\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar\"));\n        assertEquals(\"foo/bar\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;charset=uTf8\"));\n        assertEquals(\"foo/bar;other=\\\"charset=abc\\\"\", MimeTypes.getContentTypeWithoutCharset(\"foo/bar;other=\\\"charset=abc\\\";charset=uTf8\"));\n        assertEquals(\"text/html\", MimeTypes.getContentTypeWithoutCharset(\"text/html;charset=utf-8\"));\n    }", "signature": "void testContentTypeWithoutCharset()", "full_signature": "@Test void testContentTypeWithoutCharset()", "class_method_signature": "MimeTypesTest.testContentTypeWithoutCharset()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset", "assertEquals", "getContentTypeWithoutCharset"]}, "focal_class": {"identifier": "MimeTypes", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final LazyLogger LOG = SystemLogger.create(MimeTypes.class);", "modifier": "private static final", "type": "LazyLogger", "declarator": "LOG = SystemLogger.create(MimeTypes.class)", "var_name": "LOG"}, {"original_string": "private static final Map<String, String> DFT_MIME_MAP = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "DFT_MIME_MAP = new HashMap<>()", "var_name": "DFT_MIME_MAP"}, {"original_string": "private static final Map<String, String> INFERRED_ENCODINGS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "INFERRED_ENCODINGS = new HashMap<>()", "var_name": "INFERRED_ENCODINGS"}, {"original_string": "private static final Map<String, String> ASSUMED_ENCODINGS = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "ASSUMED_ENCODINGS = new HashMap<>()", "var_name": "ASSUMED_ENCODINGS"}, {"original_string": "private static final Trie<Type> CACHE = new ArrayTrie<>(512);", "modifier": "private static final", "type": "Trie<Type>", "declarator": "CACHE = new ArrayTrie<>(512)", "var_name": "CACHE"}, {"original_string": "private final Map<String, String> _mimeMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "_mimeMap = new HashMap<>()", "var_name": "_mimeMap"}], "methods": [{"identifier": "MimeTypes", "parameters": "()", "modifiers": "public", "return": "", "signature": " MimeTypes()", "full_signature": "public  MimeTypes()", "class_method_signature": "MimeTypes.MimeTypes()", "testcase": false, "constructor": true}, {"identifier": "getDefaultMimeByExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String getDefaultMimeByExtension(String filename)", "full_signature": "public static String getDefaultMimeByExtension(String filename)", "class_method_signature": "MimeTypes.getDefaultMimeByExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "getKnownMimeTypes", "parameters": "()", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getKnownMimeTypes()", "full_signature": "public static Set<String> getKnownMimeTypes()", "class_method_signature": "MimeTypes.getKnownMimeTypes()", "testcase": false, "constructor": false}, {"identifier": "normalizeMimeType", "parameters": "(String type)", "modifiers": "private static", "return": "String", "signature": "String normalizeMimeType(String type)", "full_signature": "private static String normalizeMimeType(String type)", "class_method_signature": "MimeTypes.normalizeMimeType(String type)", "testcase": false, "constructor": false}, {"identifier": "getCharsetFromContentType", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String getCharsetFromContentType(String value)", "full_signature": "public static String getCharsetFromContentType(String value)", "class_method_signature": "MimeTypes.getCharsetFromContentType(String value)", "testcase": false, "constructor": false}, {"identifier": "getInferredEncodings", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getInferredEncodings()", "full_signature": "public static Map<String, String> getInferredEncodings()", "class_method_signature": "MimeTypes.getInferredEncodings()", "testcase": false, "constructor": false}, {"identifier": "getAssumedEncodings", "parameters": "()", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getAssumedEncodings()", "full_signature": "public static Map<String, String> getAssumedEncodings()", "class_method_signature": "MimeTypes.getAssumedEncodings()", "testcase": false, "constructor": false}, {"identifier": "inferCharsetFromContentType", "parameters": "(String contentType)", "modifiers": "@Deprecated public static", "return": "String", "signature": "String inferCharsetFromContentType(String contentType)", "full_signature": "@Deprecated public static String inferCharsetFromContentType(String contentType)", "class_method_signature": "MimeTypes.inferCharsetFromContentType(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getCharsetInferredFromContentType", "parameters": "(String contentType)", "modifiers": "public static", "return": "String", "signature": "String getCharsetInferredFromContentType(String contentType)", "full_signature": "public static String getCharsetInferredFromContentType(String contentType)", "class_method_signature": "MimeTypes.getCharsetInferredFromContentType(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getCharsetAssumedFromContentType", "parameters": "(String contentType)", "modifiers": "public static", "return": "String", "signature": "String getCharsetAssumedFromContentType(String contentType)", "full_signature": "public static String getCharsetAssumedFromContentType(String contentType)", "class_method_signature": "MimeTypes.getCharsetAssumedFromContentType(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getContentTypeWithoutCharset", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String getContentTypeWithoutCharset(String value)", "full_signature": "public static String getContentTypeWithoutCharset(String value)", "class_method_signature": "MimeTypes.getContentTypeWithoutCharset(String value)", "testcase": false, "constructor": false}, {"identifier": "getContentTypeMIMEType", "parameters": "(String contentType)", "modifiers": "public static", "return": "String", "signature": "String getContentTypeMIMEType(String contentType)", "full_signature": "public static String getContentTypeMIMEType(String contentType)", "class_method_signature": "MimeTypes.getContentTypeMIMEType(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getAcceptMIMETypes", "parameters": "(String accept)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getAcceptMIMETypes(String accept)", "full_signature": "public static List<String> getAcceptMIMETypes(String accept)", "class_method_signature": "MimeTypes.getAcceptMIMETypes(String accept)", "testcase": false, "constructor": false}, {"identifier": "parseAcceptMIMETypes", "parameters": "(String accept)", "modifiers": "public static", "return": "List<AcceptMIMEType>", "signature": "List<AcceptMIMEType> parseAcceptMIMETypes(String accept)", "full_signature": "public static List<AcceptMIMEType> parseAcceptMIMETypes(String accept)", "class_method_signature": "MimeTypes.parseAcceptMIMETypes(String accept)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Stream<String> stream)", "modifiers": "private static", "return": "List<AcceptMIMEType>", "signature": "List<AcceptMIMEType> apply(Stream<String> stream)", "full_signature": "private static List<AcceptMIMEType> apply(Stream<String> stream)", "class_method_signature": "MimeTypes.apply(Stream<String> stream)", "testcase": false, "constructor": false}, {"identifier": "getMimeMap", "parameters": "()", "modifiers": "public synchronized", "return": "Map<String, String>", "signature": "Map<String, String> getMimeMap()", "full_signature": "public synchronized Map<String, String> getMimeMap()", "class_method_signature": "MimeTypes.getMimeMap()", "testcase": false, "constructor": false}, {"identifier": "setMimeMap", "parameters": "(Map<String, String> mimeMap)", "modifiers": "public", "return": "void", "signature": "void setMimeMap(Map<String, String> mimeMap)", "full_signature": "public void setMimeMap(Map<String, String> mimeMap)", "class_method_signature": "MimeTypes.setMimeMap(Map<String, String> mimeMap)", "testcase": false, "constructor": false}, {"identifier": "getMimeByExtension", "parameters": "(String filename)", "modifiers": "public", "return": "String", "signature": "String getMimeByExtension(String filename)", "full_signature": "public String getMimeByExtension(String filename)", "class_method_signature": "MimeTypes.getMimeByExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "addMimeMapping", "parameters": "(String extension, String type)", "modifiers": "public", "return": "void", "signature": "void addMimeMapping(String extension, String type)", "full_signature": "public void addMimeMapping(String extension, String type)", "class_method_signature": "MimeTypes.addMimeMapping(String extension, String type)", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/http/common/model/MimeTypes.java"}, "focal_method": {"identifier": "getContentTypeWithoutCharset", "parameters": "(String value)", "modifiers": "public static", "return": "String", "body": "public static String getContentTypeWithoutCharset(String value) {\n        int end = value.length();\n        int state = 0;\n        int start = 0;\n        boolean quote = false;\n        int i = 0;\n        StringBuilder builder = null;\n        for (; i < end; i++) {\n            char b = value.charAt(i);\n\n            if ('\"' == b) {\n                quote = !quote;\n\n                switch (state) {\n                    case 11:\n                        builder.append(b);\n                        break;\n                    case 10:\n                        break;\n                    case 9:\n                        builder = new StringBuilder();\n                        builder.append(value, 0, start + 1);\n                        state = 10;\n                        break;\n                    default:\n                        start = i;\n                        state = 0;\n                }\n                continue;\n            }\n\n            if (quote) {\n                if (builder != null && state != 10)\n                    builder.append(b);\n                continue;\n            }\n\n            switch (state) {\n                case 0:\n                    if (';' == b)\n                        state = 1;\n                    else if (' ' != b)\n                        start = i;\n                    break;\n\n                case 1:\n                    if ('c' == b) state = 2;\n                    else if (' ' != b) state = 0;\n                    break;\n                case 2:\n                    if ('h' == b) state = 3;\n                    else state = 0;\n                    break;\n                case 3:\n                    if ('a' == b) state = 4;\n                    else state = 0;\n                    break;\n                case 4:\n                    if ('r' == b) state = 5;\n                    else state = 0;\n                    break;\n                case 5:\n                    if ('s' == b) state = 6;\n                    else state = 0;\n                    break;\n                case 6:\n                    if ('e' == b) state = 7;\n                    else state = 0;\n                    break;\n                case 7:\n                    if ('t' == b) state = 8;\n                    else state = 0;\n                    break;\n                case 8:\n                    if ('=' == b) state = 9;\n                    else if (' ' != b) state = 0;\n                    break;\n\n                case 9:\n                    if (' ' == b)\n                        break;\n                    builder = new StringBuilder();\n                    builder.append(value, 0, start + 1);\n                    state = 10;\n                    break;\n\n                case 10:\n                    if (';' == b) {\n                        builder.append(b);\n                        state = 11;\n                    }\n                    break;\n                case 11:\n                    if (' ' != b)\n                        builder.append(b);\n            }\n        }\n        if (builder == null)\n            return value;\n        return builder.toString();\n\n    }", "signature": "String getContentTypeWithoutCharset(String value)", "full_signature": "public static String getContentTypeWithoutCharset(String value)", "class_method_signature": "MimeTypes.getContentTypeWithoutCharset(String value)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}