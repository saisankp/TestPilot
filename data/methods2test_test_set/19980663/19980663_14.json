{"test_class": {"identifier": "AsyncResourceTest", "superclass": "extends FoxtrotResourceTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ResourceTestRule resources;", "modifier": "@Rule\n    public", "type": "ResourceTestRule", "declarator": "resources", "var_name": "resources"}], "file": "foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/AsyncResourceTest.java"}, "test_case": {"identifier": "testGetResponsePost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetResponsePost() throws Exception {\n        GroupRequest groupRequest = new GroupRequest();\n        groupRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        groupRequest.setNesting(Arrays.asList(\"os\", \"device\", \"version\"));\n\n        Map<String, Object> expectedResponse = new LinkedHashMap<String, Object>();\n\n        final Map<String, Object> nexusResponse = new LinkedHashMap<String, Object>() {{\n            put(\"1\", 2);\n            put(\"2\", 2);\n            put(\"3\", 1);\n        }};\n        final Map<String, Object> galaxyResponse = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 1);\n            put(\"3\", 1);\n        }};\n        expectedResponse.put(\"android\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse);\n            put(\"galaxy\", galaxyResponse);\n        }});\n\n        final Map<String, Object> nexusResponse2 = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 1);\n        }};\n        final Map<String, Object> iPadResponse = new LinkedHashMap<String, Object>() {{\n            put(\"2\", 2);\n        }};\n        final Map<String, Object> iPhoneResponse = new LinkedHashMap<String, Object>() {{\n            put(\"1\", 1);\n        }};\n        expectedResponse.put(\"ios\", new LinkedHashMap<String, Object>() {{\n            put(\"nexus\", nexusResponse2);\n            put(\"ipad\", iPadResponse);\n            put(\"iphone\", iPhoneResponse);\n        }});\n\n        AsyncDataToken dataToken = getQueryExecutor().executeAsync(groupRequest);\n        await().pollDelay(5000, TimeUnit.MILLISECONDS).until(() -> true);\n\n        Entity<AsyncDataToken> asyncDataTokenEntity = Entity.json(dataToken);\n\n        GroupResponse response = resources.client()\n                .target(\"/v1/async\")\n                .request()\n                .post(asyncDataTokenEntity, GroupResponse.class);\n        assertEquals(expectedResponse, response.getResult());\n    }", "signature": "void testGetResponsePost()", "full_signature": "@Test public void testGetResponsePost()", "class_method_signature": "AsyncResourceTest.testGetResponsePost()", "testcase": true, "constructor": false, "invocations": ["setTable", "setNesting", "asList", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "executeAsync", "getQueryExecutor", "until", "pollDelay", "await", "json", "post", "request", "target", "client", "assertEquals", "getResult"]}, "focal_class": {"identifier": "AsyncResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CacheManager cacheManager;", "modifier": "private", "type": "CacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}], "methods": [{"identifier": "AsyncResource", "parameters": "(CacheManager cacheManager)", "modifiers": "@Inject public", "return": "", "signature": " AsyncResource(CacheManager cacheManager)", "full_signature": "@Inject public  AsyncResource(CacheManager cacheManager)", "class_method_signature": "AsyncResource.AsyncResource(CacheManager cacheManager)", "testcase": false, "constructor": true}, {"identifier": "getResponse", "parameters": "(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "modifiers": "@GET @Path(\"/{action}/{id}\") @Timed @ApiOperation(\"getResponse\") public", "return": "Response", "signature": "Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "full_signature": "@GET @Path(\"/{action}/{id}\") @Timed @ApiOperation(\"getResponse\") public Response getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "class_method_signature": "AsyncResource.getResponse(@PathParam(\"action\") final String action, @NotNull @PathParam(\"id\") final String id)", "testcase": false, "constructor": false}, {"identifier": "getResponsePost", "parameters": "(final AsyncDataToken dataToken)", "modifiers": "@POST @Timed @ApiOperation(\"getResponsePost\") public", "return": "Response", "signature": "Response getResponsePost(final AsyncDataToken dataToken)", "full_signature": "@POST @Timed @ApiOperation(\"getResponsePost\") public Response getResponsePost(final AsyncDataToken dataToken)", "class_method_signature": "AsyncResource.getResponsePost(final AsyncDataToken dataToken)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(final AsyncDataToken dataToken)", "modifiers": "private", "return": "ActionResponse", "signature": "ActionResponse getData(final AsyncDataToken dataToken)", "full_signature": "private ActionResponse getData(final AsyncDataToken dataToken)", "class_method_signature": "AsyncResource.getData(final AsyncDataToken dataToken)", "testcase": false, "constructor": false}], "file": "foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/AsyncResource.java"}, "focal_method": {"identifier": "getResponsePost", "parameters": "(final AsyncDataToken dataToken)", "modifiers": "@POST @Timed @ApiOperation(\"getResponsePost\") public", "return": "Response", "body": "@POST\n    @Timed\n    @ApiOperation(\"getResponsePost\")\n    public Response getResponsePost(final AsyncDataToken dataToken) {\n        return Response.ok(getData(dataToken))\n                .build();\n    }", "signature": "Response getResponsePost(final AsyncDataToken dataToken)", "full_signature": "@POST @Timed @ApiOperation(\"getResponsePost\") public Response getResponsePost(final AsyncDataToken dataToken)", "class_method_signature": "AsyncResource.getResponsePost(final AsyncDataToken dataToken)", "testcase": false, "constructor": false, "invocations": ["build", "ok", "getData"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}