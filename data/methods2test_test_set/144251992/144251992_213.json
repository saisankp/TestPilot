{"test_class": {"identifier": "ProjectLobNormalizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProjectLobNormalizer projectLobNormalizer;", "modifier": "private", "type": "ProjectLobNormalizer", "declarator": "projectLobNormalizer", "var_name": "projectLobNormalizer"}, {"original_string": "@Mock\n    private Project projectMock;", "modifier": "@Mock\n    private", "type": "Project", "declarator": "projectMock", "var_name": "projectMock"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/normalizer/ProjectLobNormalizerTest.java"}, "test_case": {"identifier": "getLobOfReturnsProjectLob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLobOfReturnsProjectLob() {\n        // given\n        var expectedLob = \"LOB Test 1\";\n\n        given(projectMock.getLob()).willReturn(expectedLob);\n\n        // when\n        var actualLob = projectLobNormalizer.getFieldValue(projectMock);\n\n        // then\n        assertThat(actualLob).isEqualTo(expectedLob);\n    }", "signature": "void getLobOfReturnsProjectLob()", "full_signature": "@Test public void getLobOfReturnsProjectLob()", "class_method_signature": "ProjectLobNormalizerTest.getLobOfReturnsProjectLob()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getLob", "getFieldValue", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ProjectLobNormalizer", "superclass": "extends FieldNormalizer<Project>", "interfaces": "", "fields": [], "methods": [{"identifier": "ProjectLobNormalizer", "parameters": "(Set<RootTermDistanceCalculator> lobDistanceCalculators)", "modifiers": "protected", "return": "", "signature": " ProjectLobNormalizer(Set<RootTermDistanceCalculator> lobDistanceCalculators)", "full_signature": "protected  ProjectLobNormalizer(Set<RootTermDistanceCalculator> lobDistanceCalculators)", "class_method_signature": "ProjectLobNormalizer.ProjectLobNormalizer(Set<RootTermDistanceCalculator> lobDistanceCalculators)", "testcase": false, "constructor": true}, {"identifier": "getFieldValue", "parameters": "(Project fieldContainingObject)", "modifiers": "@Override", "return": "String", "signature": "String getFieldValue(Project fieldContainingObject)", "full_signature": "@Override String getFieldValue(Project fieldContainingObject)", "class_method_signature": "ProjectLobNormalizer.getFieldValue(Project fieldContainingObject)", "testcase": false, "constructor": false}, {"identifier": "setNormalizedFieldValue", "parameters": "(Project fieldContainingObject, String normalizedValue)", "modifiers": "@Override", "return": "Project", "signature": "Project setNormalizedFieldValue(Project fieldContainingObject, String normalizedValue)", "full_signature": "@Override Project setNormalizedFieldValue(Project fieldContainingObject, String normalizedValue)", "class_method_signature": "ProjectLobNormalizer.setNormalizedFieldValue(Project fieldContainingObject, String normalizedValue)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/normalizer/ProjectLobNormalizer.java"}, "focal_method": {"identifier": "getFieldValue", "parameters": "(Project fieldContainingObject)", "modifiers": "@Override", "return": "String", "body": "@Override\n    String getFieldValue(Project fieldContainingObject) {\n        return fieldContainingObject.getLob();\n    }", "signature": "String getFieldValue(Project fieldContainingObject)", "full_signature": "@Override String getFieldValue(Project fieldContainingObject)", "class_method_signature": "ProjectLobNormalizer.getFieldValue(Project fieldContainingObject)", "testcase": false, "constructor": false, "invocations": ["getLob"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}