{"test_class": {"identifier": "UserCredentialVersionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String CREDENTIAL_NAME = \"/test/user\";", "modifier": "private final", "type": "String", "declarator": "CREDENTIAL_NAME = \"/test/user\"", "var_name": "CREDENTIAL_NAME"}, {"original_string": "private final String USER_PASSWORD = \"test-user-password\";", "modifier": "private final", "type": "String", "declarator": "USER_PASSWORD = \"test-user-password\"", "var_name": "USER_PASSWORD"}, {"original_string": "private final UUID ENCRYPTION_KEY_UUID = UUID.randomUUID();", "modifier": "private final", "type": "UUID", "declarator": "ENCRYPTION_KEY_UUID = UUID.randomUUID()", "var_name": "ENCRYPTION_KEY_UUID"}, {"original_string": "private final byte[] ENCRYPTED_PASSWORD = \"encrypted-user-password\".getBytes(UTF_8);", "modifier": "private final", "type": "byte[]", "declarator": "ENCRYPTED_PASSWORD = \"encrypted-user-password\".getBytes(UTF_8)", "var_name": "ENCRYPTED_PASSWORD"}, {"original_string": "private final byte[] ENCRYPTED_GENERATION_PARAMS = \"encrypted-user-generation-params\".getBytes(UTF_8);", "modifier": "private final", "type": "byte[]", "declarator": "ENCRYPTED_GENERATION_PARAMS = \"encrypted-user-generation-params\".getBytes(UTF_8)", "var_name": "ENCRYPTED_GENERATION_PARAMS"}, {"original_string": "private final byte[] NONCE = \"user-NONCE\".getBytes(UTF_8);", "modifier": "private final", "type": "byte[]", "declarator": "NONCE = \"user-NONCE\".getBytes(UTF_8)", "var_name": "NONCE"}, {"original_string": "private final byte[] PARAMETERS_NONCE = \"user-NONCE\".getBytes(UTF_8);", "modifier": "private final", "type": "byte[]", "declarator": "PARAMETERS_NONCE = \"user-NONCE\".getBytes(UTF_8)", "var_name": "PARAMETERS_NONCE"}, {"original_string": "private StringGenerationParameters stringGenerationParameters;", "modifier": "private", "type": "StringGenerationParameters", "declarator": "stringGenerationParameters", "var_name": "stringGenerationParameters"}, {"original_string": "private String userGenerationParametersString;", "modifier": "private", "type": "String", "declarator": "userGenerationParametersString", "var_name": "userGenerationParametersString"}, {"original_string": "private UserCredentialVersion subject;", "modifier": "private", "type": "UserCredentialVersion", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Encryptor encryptor;", "modifier": "private", "type": "Encryptor", "declarator": "encryptor", "var_name": "encryptor"}, {"original_string": "private UserCredentialVersionData userCredentialData;", "modifier": "private", "type": "UserCredentialVersionData", "declarator": "userCredentialData", "var_name": "userCredentialData"}], "file": "components/credentials/src/test/java/org/cloudfoundry/credhub/domain/UserCredentialVersionTest.java"}, "test_case": {"identifier": "rotate_reEncryptsPasswordWithNewEncryptionKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void rotate_reEncryptsPasswordWithNewEncryptionKey() {\n    final UUID oldEncryptionKeyUuid = UUID.randomUUID();\n    final byte[] oldEncryptedPassword = \"old-encrypted-password\".getBytes(UTF_8);\n    final byte[] oldEncryptedGenerationParams = \"old-encrypted-generation-params\".getBytes(UTF_8);\n\n    final byte[] oldNonce = \"old-nonce\".getBytes(UTF_8);\n    final byte[] oldParametersNonce = \"old-parameters-nonce\".getBytes(UTF_8);\n\n    final EncryptedValue parametersEncryption = new EncryptedValue(oldEncryptionKeyUuid, oldEncryptedGenerationParams, oldParametersNonce);\n\n    final EncryptedValue encryptedUserValue = new EncryptedValue();\n    encryptedUserValue.setEncryptionKeyUuid(oldEncryptionKeyUuid);\n    encryptedUserValue.setEncryptedValue(oldEncryptedPassword);\n    encryptedUserValue.setNonce(oldNonce);\n\n    userCredentialData = new UserCredentialVersionData(CREDENTIAL_NAME);\n    userCredentialData.setEncryptedValueData(encryptedUserValue);\n    userCredentialData.setEncryptedGenerationParameters(parametersEncryption);\n\n    subject = new UserCredentialVersion(userCredentialData);\n    subject.setEncryptor(encryptor);\n    when(encryptor.decrypt(new EncryptedValue(oldEncryptionKeyUuid, oldEncryptedPassword, oldNonce)))\n      .thenReturn(USER_PASSWORD);\n    when(encryptor.decrypt(new EncryptedValue(oldEncryptionKeyUuid, oldEncryptedGenerationParams, oldParametersNonce)))\n      .thenReturn(userGenerationParametersString);\n\n    when(encryptor.encrypt(eq(USER_PASSWORD)))\n      .thenReturn(new EncryptedValue(ENCRYPTION_KEY_UUID, ENCRYPTED_PASSWORD, NONCE));\n    when(encryptor.encrypt(eq(userGenerationParametersString)))\n      .thenReturn(new EncryptedValue(ENCRYPTION_KEY_UUID, ENCRYPTED_GENERATION_PARAMS, PARAMETERS_NONCE));\n\n    subject.rotate();\n\n    verify(encryptor, times(2)).decrypt(any());\n    verify(encryptor).encrypt(USER_PASSWORD);\n    verify(encryptor).encrypt(userGenerationParametersString);\n\n    assertThat(userCredentialData.getEncryptionKeyUuid(), equalTo(ENCRYPTION_KEY_UUID));\n    assertThat(userCredentialData.getEncryptedValueData().getEncryptedValue(), equalTo(ENCRYPTED_PASSWORD));\n    assertThat(userCredentialData.getEncryptedGenerationParameters().getEncryptedValue(), equalTo(ENCRYPTED_GENERATION_PARAMS));\n    assertThat(userCredentialData.getNonce(), equalTo(NONCE));\n    assertThat(userCredentialData.getEncryptedGenerationParameters().getNonce(), equalTo(PARAMETERS_NONCE));\n  }", "signature": "void rotate_reEncryptsPasswordWithNewEncryptionKey()", "full_signature": "@Test public void rotate_reEncryptsPasswordWithNewEncryptionKey()", "class_method_signature": "UserCredentialVersionTest.rotate_reEncryptsPasswordWithNewEncryptionKey()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "getBytes", "getBytes", "getBytes", "getBytes", "setEncryptionKeyUuid", "setEncryptedValue", "setNonce", "setEncryptedValueData", "setEncryptedGenerationParameters", "setEncryptor", "thenReturn", "when", "decrypt", "thenReturn", "when", "decrypt", "thenReturn", "when", "encrypt", "eq", "thenReturn", "when", "encrypt", "eq", "rotate", "decrypt", "verify", "times", "any", "encrypt", "verify", "encrypt", "verify", "assertThat", "getEncryptionKeyUuid", "equalTo", "assertThat", "getEncryptedValue", "getEncryptedValueData", "equalTo", "assertThat", "getEncryptedValue", "getEncryptedGenerationParameters", "equalTo", "assertThat", "getNonce", "equalTo", "assertThat", "getNonce", "getEncryptedGenerationParameters", "equalTo"]}, "focal_class": {"identifier": "UserCredentialVersion", "superclass": "extends CredentialVersion", "interfaces": "", "fields": [{"original_string": "private final UserCredentialVersionData delegate;", "modifier": "private final", "type": "UserCredentialVersionData", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final JsonObjectMapper jsonObjectMapper;", "modifier": "private final", "type": "JsonObjectMapper", "declarator": "jsonObjectMapper", "var_name": "jsonObjectMapper"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "UserCredentialVersion", "parameters": "(final UserCredentialVersionData delegate)", "modifiers": "public", "return": "", "signature": " UserCredentialVersion(final UserCredentialVersionData delegate)", "full_signature": "public  UserCredentialVersion(final UserCredentialVersionData delegate)", "class_method_signature": "UserCredentialVersion.UserCredentialVersion(final UserCredentialVersionData delegate)", "testcase": false, "constructor": true}, {"identifier": "UserCredentialVersion", "parameters": "(final String name)", "modifiers": "public", "return": "", "signature": " UserCredentialVersion(final String name)", "full_signature": "public  UserCredentialVersion(final String name)", "class_method_signature": "UserCredentialVersion.UserCredentialVersion(final String name)", "testcase": false, "constructor": true}, {"identifier": "UserCredentialVersion", "parameters": "(\n    final UserCredentialValue userValue,\n    final String name,\n    final StringGenerationParameters generationParameters,\n    final Encryptor encryptor\n  )", "modifiers": "public", "return": "", "signature": " UserCredentialVersion(\n    final UserCredentialValue userValue,\n    final String name,\n    final StringGenerationParameters generationParameters,\n    final Encryptor encryptor\n  )", "full_signature": "public  UserCredentialVersion(\n    final UserCredentialValue userValue,\n    final String name,\n    final StringGenerationParameters generationParameters,\n    final Encryptor encryptor\n  )", "class_method_signature": "UserCredentialVersion.UserCredentialVersion(\n    final UserCredentialValue userValue,\n    final String name,\n    final StringGenerationParameters generationParameters,\n    final Encryptor encryptor\n  )", "testcase": false, "constructor": true}, {"identifier": "getCredentialType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCredentialType()", "full_signature": "@Override public String getCredentialType()", "class_method_signature": "UserCredentialVersion.getCredentialType()", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rotate()", "full_signature": "@Override public void rotate()", "class_method_signature": "UserCredentialVersion.rotate()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "UserCredentialVersion.getPassword()", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(final String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(final String password)", "full_signature": "public void setPassword(final String password)", "class_method_signature": "UserCredentialVersion.setPassword(final String password)", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "UserCredentialVersion.getUsername()", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(final String username)", "modifiers": "public", "return": "void", "signature": "void setUsername(final String username)", "full_signature": "public void setUsername(final String username)", "class_method_signature": "UserCredentialVersion.setUsername(final String username)", "testcase": false, "constructor": false}, {"identifier": "getSalt", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSalt()", "full_signature": "public String getSalt()", "class_method_signature": "UserCredentialVersion.getSalt()", "testcase": false, "constructor": false}, {"identifier": "setSalt", "parameters": "(final String salt)", "modifiers": "public", "return": "void", "signature": "void setSalt(final String salt)", "full_signature": "public void setSalt(final String salt)", "class_method_signature": "UserCredentialVersion.setSalt(final String salt)", "testcase": false, "constructor": false}, {"identifier": "getGenerationParameters", "parameters": "()", "modifiers": "@Override public", "return": "StringGenerationParameters", "signature": "StringGenerationParameters getGenerationParameters()", "full_signature": "@Override public StringGenerationParameters getGenerationParameters()", "class_method_signature": "UserCredentialVersion.getGenerationParameters()", "testcase": false, "constructor": false}, {"identifier": "setGenerationParameters", "parameters": "(final StringGenerationParameters generationParameters)", "modifiers": "public", "return": "void", "signature": "void setGenerationParameters(final StringGenerationParameters generationParameters)", "full_signature": "public void setGenerationParameters(final StringGenerationParameters generationParameters)", "class_method_signature": "UserCredentialVersion.setGenerationParameters(final StringGenerationParameters generationParameters)", "testcase": false, "constructor": false}, {"identifier": "matchesGenerationParameters", "parameters": "(final GenerationParameters generationParameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matchesGenerationParameters(final GenerationParameters generationParameters)", "full_signature": "@Override public boolean matchesGenerationParameters(final GenerationParameters generationParameters)", "class_method_signature": "UserCredentialVersion.matchesGenerationParameters(final GenerationParameters generationParameters)", "testcase": false, "constructor": false}], "file": "components/credentials/src/main/java/org/cloudfoundry/credhub/domain/UserCredentialVersion.java"}, "focal_method": {"identifier": "rotate", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void rotate() {\n    final String decryptedPassword = getPassword();\n    final StringGenerationParameters decryptedGenerationParameters = getGenerationParameters();\n\n    setPassword(decryptedPassword);\n    setGenerationParameters(decryptedGenerationParameters);\n  }", "signature": "void rotate()", "full_signature": "@Override public void rotate()", "class_method_signature": "UserCredentialVersion.rotate()", "testcase": false, "constructor": false, "invocations": ["getPassword", "getGenerationParameters", "setPassword", "setGenerationParameters"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}