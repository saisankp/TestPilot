{"test_class": {"identifier": "NetworkUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/util/NetworkUtilTest.java"}, "test_case": {"identifier": "invalidExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidExpression() {\n        String[] testData = {\n                \"$unknown\",\n                \"$hostunknown\",\n                \"${prop: with space}\"\n        };\n        for (String t : testData) {\n            try {\n                NetworkUtil.replaceExpression(t);\n                fail(t+ \" has been parsed\");\n            } catch (IllegalArgumentException exp) {\n                // Ok.\n            }\n        }\n    }", "signature": "void invalidExpression()", "full_signature": "@Test public void invalidExpression()", "class_method_signature": "NetworkUtilTest.invalidExpression()", "testcase": true, "constructor": false, "invocations": ["replaceExpression", "fail"]}, "focal_class": {"identifier": "NetworkUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Method isUp;", "modifier": "private static", "type": "Method", "declarator": "isUp", "var_name": "isUp"}, {"original_string": "private static Method supportsMulticast;", "modifier": "private static", "type": "Method", "declarator": "supportsMulticast", "var_name": "supportsMulticast"}, {"original_string": "private static final Pattern EXPRESSION_EXTRACTOR = Pattern.compile(\"\\\\$\\\\{?\\\\s*([\\\\w:-_.]+)\\\\s*}?\");", "modifier": "private static final", "type": "Pattern", "declarator": "EXPRESSION_EXTRACTOR = Pattern.compile(\"\\\\$\\\\{?\\\\s*([\\\\w:-_.]+)\\\\s*}?\")", "var_name": "EXPRESSION_EXTRACTOR"}], "methods": [{"identifier": "NetworkUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " NetworkUtil()", "full_signature": "private  NetworkUtil()", "class_method_signature": "NetworkUtil.NetworkUtil()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "NetworkUtil.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getLocalAddress", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalAddress()", "full_signature": "public static InetAddress getLocalAddress()", "class_method_signature": "NetworkUtil.getLocalAddress()", "testcase": false, "constructor": false}, {"identifier": "getLocalAddressWithMulticast", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getLocalAddressWithMulticast()", "full_signature": "public static InetAddress getLocalAddressWithMulticast()", "class_method_signature": "NetworkUtil.getLocalAddressWithMulticast()", "testcase": false, "constructor": false}, {"identifier": "findLocalAddressViaNetworkInterface", "parameters": "()", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress findLocalAddressViaNetworkInterface()", "full_signature": "public static InetAddress findLocalAddressViaNetworkInterface()", "class_method_signature": "NetworkUtil.findLocalAddressViaNetworkInterface()", "testcase": false, "constructor": false}, {"identifier": "isMulticastSupported", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isMulticastSupported()", "full_signature": "public static boolean isMulticastSupported()", "class_method_signature": "NetworkUtil.isMulticastSupported()", "testcase": false, "constructor": false}, {"identifier": "isMulticastSupported", "parameters": "(NetworkInterface pNif)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMulticastSupported(NetworkInterface pNif)", "full_signature": "public static boolean isMulticastSupported(NetworkInterface pNif)", "class_method_signature": "NetworkUtil.isMulticastSupported(NetworkInterface pNif)", "testcase": false, "constructor": false}, {"identifier": "isMulticastSupported", "parameters": "(InetAddress pAddr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMulticastSupported(InetAddress pAddr)", "full_signature": "public static boolean isMulticastSupported(InetAddress pAddr)", "class_method_signature": "NetworkUtil.isMulticastSupported(InetAddress pAddr)", "testcase": false, "constructor": false}, {"identifier": "getMulticastAddresses", "parameters": "()", "modifiers": "public static", "return": "List<InetAddress>", "signature": "List<InetAddress> getMulticastAddresses()", "full_signature": "public static List<InetAddress> getMulticastAddresses()", "class_method_signature": "NetworkUtil.getMulticastAddresses()", "testcase": false, "constructor": false}, {"identifier": "getAgentId", "parameters": "(int objectId, String type)", "modifiers": "public static", "return": "String", "signature": "String getAgentId(int objectId, String type)", "full_signature": "public static String getAgentId(int objectId, String type)", "class_method_signature": "NetworkUtil.getAgentId(int objectId, String type)", "testcase": false, "constructor": false}, {"identifier": "sanitizeLocalUrl", "parameters": "(String pRequestURL)", "modifiers": "public static", "return": "String", "signature": "String sanitizeLocalUrl(String pRequestURL)", "full_signature": "public static String sanitizeLocalUrl(String pRequestURL)", "class_method_signature": "NetworkUtil.sanitizeLocalUrl(String pRequestURL)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(URL url)", "modifiers": "private static", "return": "int", "signature": "int getPort(URL url)", "full_signature": "private static int getPort(URL url)", "class_method_signature": "NetworkUtil.getPort(URL url)", "testcase": false, "constructor": false}, {"identifier": "useInetAddress", "parameters": "(NetworkInterface networkInterface, InetAddress interfaceAddress)", "modifiers": "private static", "return": "boolean", "signature": "boolean useInetAddress(NetworkInterface networkInterface, InetAddress interfaceAddress)", "full_signature": "private static boolean useInetAddress(NetworkInterface networkInterface, InetAddress interfaceAddress)", "class_method_signature": "NetworkUtil.useInetAddress(NetworkInterface networkInterface, InetAddress interfaceAddress)", "testcase": false, "constructor": false}, {"identifier": "checkMethod", "parameters": "(NetworkInterface iface, Method toCheck)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean checkMethod(NetworkInterface iface, Method toCheck)", "full_signature": "private static Boolean checkMethod(NetworkInterface iface, Method toCheck)", "class_method_signature": "NetworkUtil.checkMethod(NetworkInterface iface, Method toCheck)", "testcase": false, "constructor": false}, {"identifier": "findLocalAddressListeningOnPort", "parameters": "(String pHost, int pPort)", "modifiers": "private static", "return": "InetAddress", "signature": "InetAddress findLocalAddressListeningOnPort(String pHost, int pPort)", "full_signature": "private static InetAddress findLocalAddressListeningOnPort(String pHost, int pPort)", "class_method_signature": "NetworkUtil.findLocalAddressListeningOnPort(String pHost, int pPort)", "testcase": false, "constructor": false}, {"identifier": "getLocalAddressFromNetworkInterfacesListeningOnPort", "parameters": "(int pPort)", "modifiers": "private static", "return": "InetAddress", "signature": "InetAddress getLocalAddressFromNetworkInterfacesListeningOnPort(int pPort)", "full_signature": "private static InetAddress getLocalAddressFromNetworkInterfacesListeningOnPort(int pPort)", "class_method_signature": "NetworkUtil.getLocalAddressFromNetworkInterfacesListeningOnPort(int pPort)", "testcase": false, "constructor": false}, {"identifier": "isPortOpen", "parameters": "(InetAddress pAddress, int pPort)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPortOpen(InetAddress pAddress, int pPort)", "full_signature": "private static boolean isPortOpen(InetAddress pAddress, int pPort)", "class_method_signature": "NetworkUtil.isPortOpen(InetAddress pAddress, int pPort)", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getProcessId()", "full_signature": "private static String getProcessId()", "class_method_signature": "NetworkUtil.getProcessId()", "testcase": false, "constructor": false}, {"identifier": "dumpLocalNetworkInfo", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String dumpLocalNetworkInfo()", "full_signature": "public static String dumpLocalNetworkInfo()", "class_method_signature": "NetworkUtil.dumpLocalNetworkInfo()", "testcase": false, "constructor": false}, {"identifier": "replaceExpression", "parameters": "(String pValue)", "modifiers": "public static", "return": "String", "signature": "String replaceExpression(String pValue)", "full_signature": "public static String replaceExpression(String pValue)", "class_method_signature": "NetworkUtil.replaceExpression(String pValue)", "testcase": false, "constructor": false}, {"identifier": "extractKey", "parameters": "(String pVar, String pPrefix)", "modifiers": "private static", "return": "String", "signature": "String extractKey(String pVar, String pPrefix)", "full_signature": "private static String extractKey(String pVar, String pPrefix)", "class_method_signature": "NetworkUtil.extractKey(String pVar, String pPrefix)", "testcase": false, "constructor": false}, {"identifier": "getAddrInfo", "parameters": "(InetAddress pAddr)", "modifiers": "private static", "return": "String", "signature": "String getAddrInfo(InetAddress pAddr)", "full_signature": "private static String getAddrInfo(InetAddress pAddr)", "class_method_signature": "NetworkUtil.getAddrInfo(InetAddress pAddr)", "testcase": false, "constructor": false}, {"identifier": "getNetworkInterfaceInfo", "parameters": "(NetworkInterface pNif)", "modifiers": "private static", "return": "String", "signature": "String getNetworkInterfaceInfo(NetworkInterface pNif)", "full_signature": "private static String getNetworkInterfaceInfo(NetworkInterface pNif)", "class_method_signature": "NetworkUtil.getNetworkInterfaceInfo(NetworkInterface pNif)", "testcase": false, "constructor": false}, {"identifier": "formatHwAddress", "parameters": "(byte[] pHardwareAddress)", "modifiers": "private static", "return": "String", "signature": "String formatHwAddress(byte[] pHardwareAddress)", "full_signature": "private static String formatHwAddress(byte[] pHardwareAddress)", "class_method_signature": "NetworkUtil.formatHwAddress(byte[] pHardwareAddress)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/NetworkUtil.java"}, "focal_method": {"identifier": "replaceExpression", "parameters": "(String pValue)", "modifiers": "public static", "return": "String", "body": "public static String replaceExpression(String pValue) {\n        if (pValue == null) {\n            return null;\n        }\n        Matcher matcher = EXPRESSION_EXTRACTOR.matcher(pValue);\n        StringBuffer ret = new StringBuffer();\n        try {\n            while (matcher.find()) {\n                String var = matcher.group(1);\n                String value;\n                if (var.equalsIgnoreCase(\"host\")) {\n                    value = getLocalAddress().getHostName();\n                } else if (var.equalsIgnoreCase(\"ip\")) {\n                    value = getLocalAddress().getHostAddress();\n                } else {\n                    String key = extractKey(var,\"env\");\n                    if (key != null)  {\n                        value = System.getenv(key);\n                    } else {\n                        key = extractKey(var,\"prop\");\n                        if (key != null) {\n                            value = System.getProperty(key);\n                        } else {\n                            throw new IllegalArgumentException(\"Unknown expression \" + var + \" in \" + pValue);\n                        }\n                    }\n                }\n                matcher.appendReplacement(ret, value != null ? value.trim() : null);\n            }\n            matcher.appendTail(ret);\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Cannot lookup host\" + e, e);\n        }\n        return ret.toString();\n    }", "signature": "String replaceExpression(String pValue)", "full_signature": "public static String replaceExpression(String pValue)", "class_method_signature": "NetworkUtil.replaceExpression(String pValue)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "group", "equalsIgnoreCase", "getHostName", "getLocalAddress", "equalsIgnoreCase", "getHostAddress", "getLocalAddress", "extractKey", "getenv", "extractKey", "getProperty", "appendReplacement", "trim", "appendTail", "toString"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}