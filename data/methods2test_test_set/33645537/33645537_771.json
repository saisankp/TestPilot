{"test_class": {"identifier": "OnSubscribeAmbTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestScheduler scheduler;", "modifier": "private", "type": "TestScheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private Scheduler.Worker innerScheduler;", "modifier": "private", "type": "Scheduler.Worker", "declarator": "innerScheduler", "var_name": "innerScheduler"}], "file": "zava/src/test/java/rx/internal/operators/OnSubscribeAmbTest.java"}, "test_case": {"identifier": "testAmb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAmb() {\n        Observable<String> observable1 = createObservable(new String[] {\n                \"1\", \"11\", \"111\", \"1111\" }, 2000, null);\n        Observable<String> observable2 = createObservable(new String[] {\n                \"2\", \"22\", \"222\", \"2222\" }, 1000, null);\n        Observable<String> observable3 = createObservable(new String[] {\n                \"3\", \"33\", \"333\", \"3333\" }, 3000, null);\n\n        Observable<String> o = Observable.create(amb(observable1,\n                observable2, observable3));\n\n        @SuppressWarnings(\"unchecked\")\n        Observer<String> observer = mock(Observer.class);\n        o.subscribe(observer);\n\n        scheduler.advanceTimeBy(100000, TimeUnit.MILLISECONDS);\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"2\");\n        inOrder.verify(observer, times(1)).onNext(\"22\");\n        inOrder.verify(observer, times(1)).onNext(\"222\");\n        inOrder.verify(observer, times(1)).onNext(\"2222\");\n        inOrder.verify(observer, times(1)).onCompleted();\n        inOrder.verifyNoMoreInteractions();\n    }", "signature": "void testAmb()", "full_signature": "@Test public void testAmb()", "class_method_signature": "OnSubscribeAmbTest.testAmb()", "testcase": true, "constructor": false, "invocations": ["createObservable", "createObservable", "createObservable", "create", "amb", "mock", "subscribe", "advanceTimeBy", "inOrder", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onNext", "verify", "times", "onCompleted", "verify", "times", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "OnSubscribeAmb", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "private final Iterable<? extends Observable<? extends T>> sources;", "modifier": "private final", "type": "Iterable<? extends Observable<? extends T>>", "declarator": "sources", "var_name": "sources"}, {"original_string": "private final Selection<T> selection = new Selection<T>();", "modifier": "private final", "type": "Selection<T>", "declarator": "selection = new Selection<T>()", "var_name": "selection"}], "methods": [{"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2, Observable<? extends T> o3, Observable<? extends T> o4, Observable<? extends T> o5, Observable<? extends T> o6, Observable<? extends T> o7, Observable<? extends T> o8, Observable<? extends T> o9)", "testcase": false, "constructor": false}, {"identifier": "amb", "parameters": "(final Iterable<? extends Observable<? extends T>> sources)", "modifiers": "public static", "return": "OnSubscribe<T>", "signature": "OnSubscribe<T> amb(final Iterable<? extends Observable<? extends T>> sources)", "full_signature": "public static OnSubscribe<T> amb(final Iterable<? extends Observable<? extends T>> sources)", "class_method_signature": "OnSubscribeAmb.amb(final Iterable<? extends Observable<? extends T>> sources)", "testcase": false, "constructor": false}, {"identifier": "OnSubscribeAmb", "parameters": "(Iterable<? extends Observable<? extends T>> sources)", "modifiers": "private", "return": "", "signature": " OnSubscribeAmb(Iterable<? extends Observable<? extends T>> sources)", "full_signature": "private  OnSubscribeAmb(Iterable<? extends Observable<? extends T>> sources)", "class_method_signature": "OnSubscribeAmb.OnSubscribeAmb(Iterable<? extends Observable<? extends T>> sources)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(final Subscriber<? super T> subscriber)", "modifiers": "@Override public", "return": "void", "signature": "void call(final Subscriber<? super T> subscriber)", "full_signature": "@Override public void call(final Subscriber<? super T> subscriber)", "class_method_signature": "OnSubscribeAmb.call(final Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/OnSubscribeAmb.java"}, "focal_method": {"identifier": "amb", "parameters": "(Observable<? extends T> o1, Observable<? extends T> o2)", "modifiers": "public static", "return": "OnSubscribe<T>", "body": "public static <T> OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2) {\n        List<Observable<? extends T>> sources = new ArrayList<Observable<? extends T>>();\n        sources.add(o1);\n        sources.add(o2);\n        return amb(sources);\n    }", "signature": "OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2)", "full_signature": "public static OnSubscribe<T> amb(Observable<? extends T> o1, Observable<? extends T> o2)", "class_method_signature": "OnSubscribeAmb.amb(Observable<? extends T> o1, Observable<? extends T> o2)", "testcase": false, "constructor": false, "invocations": ["add", "add", "amb"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}