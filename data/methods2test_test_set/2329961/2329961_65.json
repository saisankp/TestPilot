{"test_class": {"identifier": "CompactFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CompactFormatterTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CompactFormatterTest.class.getName())", "var_name": "log"}, {"original_string": "private static final String eventString\n        = \"2011-11-28T16:46:22.123\\texample.com\\tmyservice\\tSingleLineFormatter\\tT\\tINFO\\tBE\\tmsg: this is a test\";", "modifier": "private static final", "type": "String", "declarator": "eventString\n        = \"2011-11-28T16:46:22.123\\texample.com\\tmyservice\\tSingleLineFormatter\\tT\\tINFO\\tBE\\tmsg: this is a test\"", "var_name": "eventString"}, {"original_string": "private static Timber.LogEvent event;", "modifier": "private static", "type": "Timber.LogEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private static Timber.LogEvent eventWithException;", "modifier": "private static", "type": "Timber.LogEvent", "declarator": "eventWithException", "var_name": "eventWithException"}, {"original_string": "private static long instant = 1322498782123L;", "modifier": "private static", "type": "long", "declarator": "instant = 1322498782123L", "var_name": "instant"}], "file": "log/src/test/java/org/cloudname/log/format/CompactFormatterTest.java"}, "test_case": {"identifier": "microBenchmarkWithExceptionTest", "parameters": "()", "modifiers": "@Test (timeout = 1000) public", "return": "void", "body": "@Test (timeout = 1000)\n    public void microBenchmarkWithExceptionTest() {\n        CompactFormatter form = new CompactFormatter();\n        int numIterations = 1000;\n\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < numIterations; i++) {\n            form.format(eventWithException);\n        }\n        long duration = System.currentTimeMillis() - start;\n        double formatsPerSecond = numIterations / ((double) duration / 1000.0);\n\n        log.info(\"event + exception formats per second: \" + formatsPerSecond\n                 + \" (\" + numIterations + \" iterations took \" + duration + \" milliseconds)\");\n    }", "signature": "void microBenchmarkWithExceptionTest()", "full_signature": "@Test (timeout = 1000) public void microBenchmarkWithExceptionTest()", "class_method_signature": "CompactFormatterTest.microBenchmarkWithExceptionTest()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "format", "currentTimeMillis", "info"]}, "focal_class": {"identifier": "CompactFormatter", "superclass": "", "interfaces": "implements LogEventFormatter", "fields": [], "methods": [{"identifier": "format", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "@Override public", "return": "String", "signature": "String format(Timber.LogEvent logEvent)", "full_signature": "@Override public String format(Timber.LogEvent logEvent)", "class_method_signature": "CompactFormatter.format(Timber.LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "classFromSource", "parameters": "(String source)", "modifiers": "private", "return": "String", "signature": "String classFromSource(String source)", "full_signature": "private String classFromSource(String source)", "class_method_signature": "CompactFormatter.classFromSource(String source)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/format/CompactFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(Timber.LogEvent logEvent)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String format(Timber.LogEvent logEvent) {\n        StringBuilder buff = new StringBuilder(200);\n        Util.formatTimeISO(logEvent.getTimestamp(), buff);\n\n        buff.append('\\t')\n            .append(logEvent.getHost())\n            .append('\\t')\n\n            // Add service name\n            .append(logEvent.getServiceName())\n            .append('\\t')\n\n            // Add source\n            .append(classFromSource(logEvent.getSource()))\n            .append('\\t')\n\n            // Type of log message\n            .append(logEvent.getType())\n            .append('\\t')\n\n            // Level of log message\n            .append(Util.logLevelNameForValue(logEvent.getLevel()))\n            .append('\\t')\n\n            // Add consistency level\n            .append(logEvent.getConsistencyLevel().toString().substring(0,2))\n            .append('\\t');\n\n        // Add the payloads\n        boolean first = true;\n        for (Timber.Payload payload : logEvent.getPayloadList()) {\n            String s = payload.getPayload().toStringUtf8();\n\n            // Truncate exceptions\n            if (\"application/java-exception\".equals(payload.getContentType())) {\n                int offset = s.indexOf('\\n');\n                if (offset > 0) {\n                    s = s.substring(0, offset);\n                }\n            }\n\n            buff.append((first?\"\":\" | \"))\n                .append(payload.getName())\n                .append(\": \")\n                .append(Util.escape(s));\n\n            first = false;\n        }\n\n        return buff.toString();\n    }", "signature": "String format(Timber.LogEvent logEvent)", "full_signature": "@Override public String format(Timber.LogEvent logEvent)", "class_method_signature": "CompactFormatter.format(Timber.LogEvent logEvent)", "testcase": false, "constructor": false, "invocations": ["formatTimeISO", "getTimestamp", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getHost", "getServiceName", "classFromSource", "getSource", "getType", "logLevelNameForValue", "getLevel", "substring", "toString", "getConsistencyLevel", "getPayloadList", "toStringUtf8", "getPayload", "equals", "getContentType", "indexOf", "substring", "append", "append", "append", "append", "getName", "escape", "toString"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}