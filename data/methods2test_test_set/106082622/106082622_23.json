{"test_class": {"identifier": "ViewCustomizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/ViewCustomizerTest.java"}, "test_case": {"identifier": "testGetFilterDefinitionsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFilterDefinitionsEmpty() {\n        // Create view\n        final View view = new View();\n\n        // Create consume request\n        final ConsumeRequest consumeRequest = new ConsumeRequest();\n\n        // Create instance & override\n        final ViewCustomizer viewCustomizer = new ViewCustomizer(view, consumeRequest);\n        List<FilterDefinition> filterDefinitions = viewCustomizer.getFilterDefinitions();\n\n        assertTrue(\"Empty list\", filterDefinitions.isEmpty());\n    }", "signature": "void testGetFilterDefinitionsEmpty()", "full_signature": "@Test public void testGetFilterDefinitionsEmpty()", "class_method_signature": "ViewCustomizerTest.testGetFilterDefinitionsEmpty()", "testcase": true, "constructor": false, "invocations": ["getFilterDefinitions", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "ViewCustomizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final View view;", "modifier": "private final", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "private final ConsumeRequest consumeRequest;", "modifier": "private final", "type": "ConsumeRequest", "declarator": "consumeRequest", "var_name": "consumeRequest"}], "methods": [{"identifier": "ViewCustomizer", "parameters": "(final View view, final ConsumeRequest consumeRequest)", "modifiers": "public", "return": "", "signature": " ViewCustomizer(final View view, final ConsumeRequest consumeRequest)", "full_signature": "public  ViewCustomizer(final View view, final ConsumeRequest consumeRequest)", "class_method_signature": "ViewCustomizer.ViewCustomizer(final View view, final ConsumeRequest consumeRequest)", "testcase": false, "constructor": true}, {"identifier": "overrideViewSettings", "parameters": "()", "modifiers": "public", "return": "View", "signature": "View overrideViewSettings()", "full_signature": "public View overrideViewSettings()", "class_method_signature": "ViewCustomizer.overrideViewSettings()", "testcase": false, "constructor": false}, {"identifier": "getFilterDefinitions", "parameters": "()", "modifiers": "public", "return": "List<FilterDefinition>", "signature": "List<FilterDefinition> getFilterDefinitions()", "full_signature": "public List<FilterDefinition> getFilterDefinitions()", "class_method_signature": "ViewCustomizer.getFilterDefinitions()", "testcase": false, "constructor": false}, {"identifier": "getStartingPosition", "parameters": "()", "modifiers": "public", "return": "StartingPosition", "signature": "StartingPosition getStartingPosition()", "full_signature": "public StartingPosition getStartingPosition()", "class_method_signature": "ViewCustomizer.getStartingPosition()", "testcase": false, "constructor": false}, {"identifier": "overrideResultPerPartition", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void overrideResultPerPartition()", "full_signature": "private void overrideResultPerPartition()", "class_method_signature": "ViewCustomizer.overrideResultPerPartition()", "testcase": false, "constructor": false}, {"identifier": "overridePartitions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void overridePartitions()", "full_signature": "private void overridePartitions()", "class_method_signature": "ViewCustomizer.overridePartitions()", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/ViewCustomizer.java"}, "focal_method": {"identifier": "getFilterDefinitions", "parameters": "()", "modifiers": "public", "return": "List<FilterDefinition>", "body": "public List<FilterDefinition> getFilterDefinitions() {\n        final List<ConsumeRequest.Filter> requestFilters = consumeRequest.getFilters();\n\n        // Determine if we should apply record filters\n        // but if the view has enforced record filtering, don't bypass its logic, add onto it.\n        final List<FilterDefinition> configuredFilters = new ArrayList<>();\n        if (requestFilters != null && !requestFilters.isEmpty()) {\n            // Retrieve all available filters\n            final Map<Long, Filter> allowedFilters = new HashMap<>();\n\n            // Build list of allowed filters\n            for (final ViewToFilterOptional allowedFilter : view.getOptionalFilters()) {\n                allowedFilters.put(allowedFilter.getFilter().getId(), allowedFilter.getFilter());\n            }\n\n            // Convert the String array into an actual array\n            for (final ConsumeRequest.Filter requestedFilter: requestFilters) {\n                // Convert to a long\n                final Long requestedFilterId = requestedFilter.getFilterId();\n                final Map<String, String> requestedFilterOptions = requestedFilter.getOptions();\n\n                // See if its an allowed filter\n                if (!allowedFilters.containsKey(requestedFilterId)) {\n                    // Skip not allowed filters\n                    continue;\n                }\n                // Define it\n                final Filter filter = allowedFilters.get(requestedFilterId);\n                final FilterDefinition filterDefinition = new FilterDefinition(filter, requestedFilterOptions);\n\n                // Configure it\n                configuredFilters.add(filterDefinition);\n            }\n        }\n        return configuredFilters;\n    }", "signature": "List<FilterDefinition> getFilterDefinitions()", "full_signature": "public List<FilterDefinition> getFilterDefinitions()", "class_method_signature": "ViewCustomizer.getFilterDefinitions()", "testcase": false, "constructor": false, "invocations": ["getFilters", "isEmpty", "getOptionalFilters", "put", "getId", "getFilter", "getFilter", "getFilterId", "getOptions", "containsKey", "get", "add"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}