{"test_class": {"identifier": "TestLogCompilation", "superclass": "", "interfaces": "", "fields": [{"original_string": "String logFile;", "modifier": "", "type": "String", "declarator": "logFile", "var_name": "logFile"}, {"original_string": "static final String setupArgsTieredVersion[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_version.log\",\n        \"-version\"\n    };", "modifier": "static final", "type": "String", "declarator": "setupArgsTieredVersion[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_version.log\",\n        \"-version\"\n    }", "var_name": "setupArgsTieredVersion"}, {"original_string": "static final String setupArgsTiered[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_short.log\"\n    };", "modifier": "static final", "type": "String", "declarator": "setupArgsTiered[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_short.log\"\n    }", "var_name": "setupArgsTiered"}, {"original_string": "static final String setupArgsTieredBatch[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_short_batch.log\",\n        \"-Xbatch\"\n    };", "modifier": "static final", "type": "String", "declarator": "setupArgsTieredBatch[] = {\n        \"java\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/tiered_short_batch.log\",\n        \"-Xbatch\"\n    }", "var_name": "setupArgsTieredBatch"}, {"original_string": "static final String setupArgsNoTiered[] = {\n        \"java\",\n        \"-XX:-TieredCompilation\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/no_tiered_short.log\"\n    };", "modifier": "static final", "type": "String", "declarator": "setupArgsNoTiered[] = {\n        \"java\",\n        \"-XX:-TieredCompilation\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/no_tiered_short.log\"\n    }", "var_name": "setupArgsNoTiered"}, {"original_string": "static final String setupArgsNoTieredBatch[] = {\n        \"java\",\n        \"-XX:-TieredCompilation\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/no_tiered_short_batch.log\",\n        \"-Xbatch\"\n    };", "modifier": "static final", "type": "String", "declarator": "setupArgsNoTieredBatch[] = {\n        \"java\",\n        \"-XX:-TieredCompilation\",\n        \"-XX:+UnlockDiagnosticVMOptions\",\n        \"-XX:+LogCompilation\",\n        \"-XX:LogFile=target/no_tiered_short_batch.log\",\n        \"-Xbatch\"\n    }", "var_name": "setupArgsNoTieredBatch"}, {"original_string": "static final String allSetupArgs[][] = {\n        setupArgsTieredVersion,\n        setupArgsTiered,\n        setupArgsTieredBatch,\n        setupArgsNoTiered,\n        setupArgsNoTieredBatch\n    };", "modifier": "static final", "type": "String", "declarator": "allSetupArgs[][] = {\n        setupArgsTieredVersion,\n        setupArgsTiered,\n        setupArgsTieredBatch,\n        setupArgsNoTiered,\n        setupArgsNoTieredBatch\n    }", "var_name": "allSetupArgs"}], "file": "src/utils/LogCompilation/src/test/java/com/sun/hotspot/tools/compiler/TestLogCompilation.java"}, "test_case": {"identifier": "testDashe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDashe() throws Exception {\n        String[] args = {\"-e\",\n            logFile\n        };\n\n        LogCompilation.main(args);\n    }", "signature": "void testDashe()", "full_signature": "@Test public void testDashe()", "class_method_signature": "TestLogCompilation.testDashe()", "testcase": true, "constructor": false, "invocations": ["main"]}, "focal_class": {"identifier": "LogCompilation", "superclass": "extends DefaultHandler", "interfaces": "implements ErrorHandler", "fields": [{"original_string": "public static boolean compare = false;", "modifier": "public static", "type": "boolean", "declarator": "compare = false", "var_name": "compare"}], "methods": [{"identifier": "usage", "parameters": "(int exitcode)", "modifiers": "public static", "return": "void", "signature": "void usage(int exitcode)", "full_signature": "public static void usage(int exitcode)", "class_method_signature": "LogCompilation.usage(int exitcode)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "LogCompilation.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printStatistics", "parameters": "(ArrayList<LogEvent> events, PrintStream out)", "modifiers": "public static", "return": "void", "signature": "void printStatistics(ArrayList<LogEvent> events, PrintStream out)", "full_signature": "public static void printStatistics(ArrayList<LogEvent> events, PrintStream out)", "class_method_signature": "LogCompilation.printStatistics(ArrayList<LogEvent> events, PrintStream out)", "testcase": false, "constructor": false}, {"identifier": "compareLogs", "parameters": "(int index, String[] args)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "void", "signature": "void compareLogs(int index, String[] args)", "full_signature": "@SuppressWarnings(\"unchecked\") static void compareLogs(int index, String[] args)", "class_method_signature": "LogCompilation.compareLogs(int index, String[] args)", "testcase": false, "constructor": false}, {"identifier": "printTrapHistory", "parameters": "(ArrayList<LogEvent> events, PrintStream out)", "modifiers": "public static", "return": "void", "signature": "void printTrapHistory(ArrayList<LogEvent> events, PrintStream out)", "full_signature": "public static void printTrapHistory(ArrayList<LogEvent> events, PrintStream out)", "class_method_signature": "LogCompilation.printTrapHistory(ArrayList<LogEvent> events, PrintStream out)", "testcase": false, "constructor": false}], "file": "src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogCompilation.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) throws Exception {\n        Comparator<LogEvent> sort = LogParser.sortByStart;\n        boolean statistics = false;\n        boolean printInlining = false;\n        boolean cleanup = false;\n        boolean trapHistory = false;\n        boolean printTimeStamps = false;\n        boolean printID = true;\n        int index = 0;\n\n        while (args.length > index) {\n            String a = args[index];\n            if (a.equals(\"-e\")) {\n                sort = LogParser.sortByElapsed;\n                index++;\n            } else if (a.equals(\"-n\")) {\n                sort = LogParser.sortByNameAndStart;\n                index++;\n            } else if (a.equals(\"-s\")) {\n                sort = LogParser.sortByStart;\n                index++;\n            } else if (a.equals(\"-t\")) {\n                printTimeStamps = true;\n                index++;\n            } else if (a.equals(\"-c\")) {\n                cleanup = true;\n                index++;\n            } else if (a.equals(\"-S\")) {\n                statistics = true;\n                index++;\n            } else if (a.equals(\"-U\")) {\n                trapHistory = true;\n                index++;\n            } else if (a.equals(\"-h\")) {\n                usage(0);\n            } else if (a.equals(\"-i\")) {\n                printInlining = true;\n                index++;\n            } else if (a.equals(\"-C\")) {\n                compare = true;\n                index++;\n            } else if (a.equals(\"-d\")) {\n                printID = false;\n                index++;\n            } else {\n                if (a.charAt(0) == '-') {\n                    System.out.println(\"Unknown option '\" + a + \"', assuming file name.\");\n                }\n                break;\n            }\n        }\n\n        if (index >= args.length) {\n            usage(1);\n        }\n\n        if (compare) {\n            compareLogs(index, args);\n            return;\n        }\n\n        while (index < args.length) {\n            ArrayList<LogEvent> events = null;\n            try {\n                events = LogParser.parse(args[index], cleanup);\n            } catch (FileNotFoundException fnfe) {\n                System.out.println(\"File not found: \" + args[index]);\n                System.exit(1);\n            }\n\n            Collections.sort(events, sort);\n\n            if (statistics) {\n                printStatistics(events, System.out);\n            } else if (trapHistory) {\n                printTrapHistory(events, System.out);\n            } else {\n                for (LogEvent c : events) {\n                    if (c instanceof NMethod) {\n                        // skip these\n                        continue;\n                    }\n                    if (printTimeStamps) {\n                        System.out.print(c.getStart() + \": \");\n                    }\n                    if (c instanceof Compilation) {\n                        Compilation comp = (Compilation) c;\n                        comp.print(System.out, printID, printInlining);\n                    } else {\n                        c.print(System.out, printID);\n                    }\n                }\n            }\n            index++;\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "LogCompilation.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "usage", "equals", "equals", "equals", "charAt", "println", "usage", "compareLogs", "parse", "println", "exit", "sort", "printStatistics", "printTrapHistory", "print", "getStart", "print", "print"]}, "repository": {"repo_id": 105081364, "url": "https://github.com/md-5/OpenJDK", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 25, "size": 1947797, "license": "licensed"}}