{"test_class": {"identifier": "AbstractConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/AbstractConfigTest.java"}, "test_case": {"identifier": "checkKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkKey() throws Exception {\n        try {\n            AbstractConfig.checkKey(\"hello\", \"*,-0123abcdABCD\");\n        } catch (Exception e) {\n            TestCase.fail(\"the value should be legal.\");\n        }\n    }", "signature": "void checkKey()", "full_signature": "@Test public void checkKey()", "class_method_signature": "AbstractConfigTest.checkKey()", "testcase": true, "constructor": false, "invocations": ["checkKey", "fail"]}, "focal_class": {"identifier": "AbstractConfig", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "protected static final Logger logger = LoggerFactory.getLogger(AbstractConfig.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbstractConfig.class)", "var_name": "logger"}, {"original_string": "private static final long serialVersionUID = 4267533505537413570L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4267533505537413570L", "var_name": "serialVersionUID"}, {"original_string": "private static final int MAX_LENGTH = 200;", "modifier": "private static final", "type": "int", "declarator": "MAX_LENGTH = 200", "var_name": "MAX_LENGTH"}, {"original_string": "private static final int MAX_PATH_LENGTH = 200;", "modifier": "private static final", "type": "int", "declarator": "MAX_PATH_LENGTH = 200", "var_name": "MAX_PATH_LENGTH"}, {"original_string": "private static final Pattern PATTERN_NAME = Pattern.compile(\"[\\\\-._0-9a-zA-Z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_NAME = Pattern.compile(\"[\\\\-._0-9a-zA-Z]+\")", "var_name": "PATTERN_NAME"}, {"original_string": "private static final Pattern PATTERN_MULTI_NAME = Pattern.compile(\"[,\\\\-._0-9a-zA-Z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_MULTI_NAME = Pattern.compile(\"[,\\\\-._0-9a-zA-Z]+\")", "var_name": "PATTERN_MULTI_NAME"}, {"original_string": "private static final Pattern PATTERN_METHOD_NAME = Pattern.compile(\"[a-zA-Z][0-9a-zA-Z]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_METHOD_NAME = Pattern.compile(\"[a-zA-Z][0-9a-zA-Z]*\")", "var_name": "PATTERN_METHOD_NAME"}, {"original_string": "private static final Pattern PATTERN_PATH = Pattern.compile(\"[/\\\\-$._0-9a-zA-Z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_PATH = Pattern.compile(\"[/\\\\-$._0-9a-zA-Z]+\")", "var_name": "PATTERN_PATH"}, {"original_string": "private static final Pattern PATTERN_NAME_HAS_SYMBOL = Pattern.compile(\"[:*,\\\\s/\\\\-._0-9a-zA-Z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_NAME_HAS_SYMBOL = Pattern.compile(\"[:*,\\\\s/\\\\-._0-9a-zA-Z]+\")", "var_name": "PATTERN_NAME_HAS_SYMBOL"}, {"original_string": "private static final Pattern PATTERN_KEY = Pattern.compile(\"[*,\\\\-._0-9a-zA-Z]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_KEY = Pattern.compile(\"[*,\\\\-._0-9a-zA-Z]+\")", "var_name": "PATTERN_KEY"}, {"original_string": "private static final Map<String, String> legacyProperties = new HashMap<String, String>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "legacyProperties = new HashMap<String, String>()", "var_name": "legacyProperties"}, {"original_string": "private static final String[] SUFFIXES = new String[]{\"Config\", \"Bean\"};", "modifier": "private static final", "type": "String[]", "declarator": "SUFFIXES = new String[]{\"Config\", \"Bean\"}", "var_name": "SUFFIXES"}, {"original_string": "protected String id;", "modifier": "protected", "type": "String", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "convertLegacyValue", "parameters": "(String key, String value)", "modifiers": "private static", "return": "String", "signature": "String convertLegacyValue(String key, String value)", "full_signature": "private static String convertLegacyValue(String key, String value)", "class_method_signature": "AbstractConfig.convertLegacyValue(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "appendProperties", "parameters": "(AbstractConfig config)", "modifiers": "protected static", "return": "void", "signature": "void appendProperties(AbstractConfig config)", "full_signature": "protected static void appendProperties(AbstractConfig config)", "class_method_signature": "AbstractConfig.appendProperties(AbstractConfig config)", "testcase": false, "constructor": false}, {"identifier": "getTagName", "parameters": "(Class<?> cls)", "modifiers": "private static", "return": "String", "signature": "String getTagName(Class<?> cls)", "full_signature": "private static String getTagName(Class<?> cls)", "class_method_signature": "AbstractConfig.getTagName(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "appendParameters", "parameters": "(Map<String, String> parameters, Object config)", "modifiers": "protected static", "return": "void", "signature": "void appendParameters(Map<String, String> parameters, Object config)", "full_signature": "protected static void appendParameters(Map<String, String> parameters, Object config)", "class_method_signature": "AbstractConfig.appendParameters(Map<String, String> parameters, Object config)", "testcase": false, "constructor": false}, {"identifier": "appendParameters", "parameters": "(Map<String, String> parameters, Object config, String prefix)", "modifiers": "@SuppressWarnings(\"unchecked\") protected static", "return": "void", "signature": "void appendParameters(Map<String, String> parameters, Object config, String prefix)", "full_signature": "@SuppressWarnings(\"unchecked\") protected static void appendParameters(Map<String, String> parameters, Object config, String prefix)", "class_method_signature": "AbstractConfig.appendParameters(Map<String, String> parameters, Object config, String prefix)", "testcase": false, "constructor": false}, {"identifier": "appendAttributes", "parameters": "(Map<Object, Object> parameters, Object config)", "modifiers": "protected static", "return": "void", "signature": "void appendAttributes(Map<Object, Object> parameters, Object config)", "full_signature": "protected static void appendAttributes(Map<Object, Object> parameters, Object config)", "class_method_signature": "AbstractConfig.appendAttributes(Map<Object, Object> parameters, Object config)", "testcase": false, "constructor": false}, {"identifier": "appendAttributes", "parameters": "(Map<Object, Object> parameters, Object config, String prefix)", "modifiers": "protected static", "return": "void", "signature": "void appendAttributes(Map<Object, Object> parameters, Object config, String prefix)", "full_signature": "protected static void appendAttributes(Map<Object, Object> parameters, Object config, String prefix)", "class_method_signature": "AbstractConfig.appendAttributes(Map<Object, Object> parameters, Object config, String prefix)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Class<?> type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrimitive(Class<?> type)", "full_signature": "private static boolean isPrimitive(Class<?> type)", "class_method_signature": "AbstractConfig.isPrimitive(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "convertPrimitive", "parameters": "(Class<?> type, String value)", "modifiers": "private static", "return": "Object", "signature": "Object convertPrimitive(Class<?> type, String value)", "full_signature": "private static Object convertPrimitive(Class<?> type, String value)", "class_method_signature": "AbstractConfig.convertPrimitive(Class<?> type, String value)", "testcase": false, "constructor": false}, {"identifier": "checkExtension", "parameters": "(Class<?> type, String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkExtension(Class<?> type, String property, String value)", "full_signature": "protected static void checkExtension(Class<?> type, String property, String value)", "class_method_signature": "AbstractConfig.checkExtension(Class<?> type, String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkMultiExtension", "parameters": "(Class<?> type, String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkMultiExtension(Class<?> type, String property, String value)", "full_signature": "protected static void checkMultiExtension(Class<?> type, String property, String value)", "class_method_signature": "AbstractConfig.checkMultiExtension(Class<?> type, String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkLength", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkLength(String property, String value)", "full_signature": "protected static void checkLength(String property, String value)", "class_method_signature": "AbstractConfig.checkLength(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkPathLength", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkPathLength(String property, String value)", "full_signature": "protected static void checkPathLength(String property, String value)", "class_method_signature": "AbstractConfig.checkPathLength(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkName", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkName(String property, String value)", "full_signature": "protected static void checkName(String property, String value)", "class_method_signature": "AbstractConfig.checkName(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkNameHasSymbol", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkNameHasSymbol(String property, String value)", "full_signature": "protected static void checkNameHasSymbol(String property, String value)", "class_method_signature": "AbstractConfig.checkNameHasSymbol(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkKey", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkKey(String property, String value)", "full_signature": "protected static void checkKey(String property, String value)", "class_method_signature": "AbstractConfig.checkKey(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkMultiName", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkMultiName(String property, String value)", "full_signature": "protected static void checkMultiName(String property, String value)", "class_method_signature": "AbstractConfig.checkMultiName(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkPathName", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkPathName(String property, String value)", "full_signature": "protected static void checkPathName(String property, String value)", "class_method_signature": "AbstractConfig.checkPathName(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkMethodName", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "signature": "void checkMethodName(String property, String value)", "full_signature": "protected static void checkMethodName(String property, String value)", "class_method_signature": "AbstractConfig.checkMethodName(String property, String value)", "testcase": false, "constructor": false}, {"identifier": "checkParameterName", "parameters": "(Map<String, String> parameters)", "modifiers": "protected static", "return": "void", "signature": "void checkParameterName(Map<String, String> parameters)", "full_signature": "protected static void checkParameterName(Map<String, String> parameters)", "class_method_signature": "AbstractConfig.checkParameterName(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "checkProperty", "parameters": "(String property, String value, int maxlength, Pattern pattern)", "modifiers": "protected static", "return": "void", "signature": "void checkProperty(String property, String value, int maxlength, Pattern pattern)", "full_signature": "protected static void checkProperty(String property, String value, int maxlength, Pattern pattern)", "class_method_signature": "AbstractConfig.checkProperty(String property, String value, int maxlength, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Parameter(excluded = true) public", "return": "String", "signature": "String getId()", "full_signature": "@Parameter(excluded = true) public String getId()", "class_method_signature": "AbstractConfig.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void setId(String id)", "full_signature": "public void setId(String id)", "class_method_signature": "AbstractConfig.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "appendAnnotation", "parameters": "(Class<?> annotationClass, Object annotation)", "modifiers": "protected", "return": "void", "signature": "void appendAnnotation(Class<?> annotationClass, Object annotation)", "full_signature": "protected void appendAnnotation(Class<?> annotationClass, Object annotation)", "class_method_signature": "AbstractConfig.appendAnnotation(Class<?> annotationClass, Object annotation)", "testcase": false, "constructor": false}, {"identifier": "isAnnotationArray", "parameters": "(Class target)", "modifiers": "", "return": "boolean", "signature": "boolean isAnnotationArray(Class target)", "full_signature": " boolean isAnnotationArray(Class target)", "class_method_signature": "AbstractConfig.isAnnotationArray(Class target)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractConfig.toString()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractConfig.java"}, "focal_method": {"identifier": "checkKey", "parameters": "(String property, String value)", "modifiers": "protected static", "return": "void", "body": "protected static void checkKey(String property, String value) {\n        checkProperty(property, value, MAX_LENGTH, PATTERN_KEY);\n    }", "signature": "void checkKey(String property, String value)", "full_signature": "protected static void checkKey(String property, String value)", "class_method_signature": "AbstractConfig.checkKey(String property, String value)", "testcase": false, "constructor": false, "invocations": ["checkProperty"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}