{"test_class": {"identifier": "BackendManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Configuration config;", "modifier": "", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private LogHandler log = new LogHandler.StdoutLogHandler(true);", "modifier": "private", "type": "LogHandler", "declarator": "log = new LogHandler.StdoutLogHandler(true)", "var_name": "log"}], "file": "agent/core/src/test/java/org/jolokia/backend/BackendManagerTest.java"}, "test_case": {"identifier": "doubleInit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doubleInit() {\n        BackendManager b1 = new BackendManager(config,log);\n        BackendManager b2 = new BackendManager(config,log);\n        b2.destroy();\n        b1.destroy();\n    }", "signature": "void doubleInit()", "full_signature": "@Test public void doubleInit()", "class_method_signature": "BackendManagerTest.doubleInit()", "testcase": true, "constructor": false, "invocations": ["destroy", "destroy"]}, "focal_class": {"identifier": "BackendManager", "superclass": "", "interfaces": "implements AgentDetailsHolder", "fields": [{"original_string": "private LocalRequestDispatcher localDispatcher;", "modifier": "private", "type": "LocalRequestDispatcher", "declarator": "localDispatcher", "var_name": "localDispatcher"}, {"original_string": "private Converters converters;", "modifier": "private", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "private JsonConvertOptions.Builder convertOptionsBuilder;", "modifier": "private", "type": "JsonConvertOptions.Builder", "declarator": "convertOptionsBuilder", "var_name": "convertOptionsBuilder"}, {"original_string": "private Restrictor restrictor;", "modifier": "private", "type": "Restrictor", "declarator": "restrictor", "var_name": "restrictor"}, {"original_string": "private HistoryStore historyStore;", "modifier": "private", "type": "HistoryStore", "declarator": "historyStore", "var_name": "historyStore"}, {"original_string": "private DebugStore debugStore;", "modifier": "private", "type": "DebugStore", "declarator": "debugStore", "var_name": "debugStore"}, {"original_string": "private LogHandler logHandler;", "modifier": "private", "type": "LogHandler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private List<RequestDispatcher> requestDispatchers;", "modifier": "private", "type": "List<RequestDispatcher>", "declarator": "requestDispatchers", "var_name": "requestDispatchers"}, {"original_string": "private volatile Initializer initializer;", "modifier": "private volatile", "type": "Initializer", "declarator": "initializer", "var_name": "initializer"}, {"original_string": "private AgentDetails agentDetails;", "modifier": "private", "type": "AgentDetails", "declarator": "agentDetails", "var_name": "agentDetails"}], "methods": [{"identifier": "BackendManager", "parameters": "(Configuration pConfig, LogHandler pLogHandler)", "modifiers": "public", "return": "", "signature": " BackendManager(Configuration pConfig, LogHandler pLogHandler)", "full_signature": "public  BackendManager(Configuration pConfig, LogHandler pLogHandler)", "class_method_signature": "BackendManager.BackendManager(Configuration pConfig, LogHandler pLogHandler)", "testcase": false, "constructor": true}, {"identifier": "BackendManager", "parameters": "(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor)", "modifiers": "public", "return": "", "signature": " BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor)", "full_signature": "public  BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor)", "class_method_signature": "BackendManager.BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor)", "testcase": false, "constructor": true}, {"identifier": "BackendManager", "parameters": "(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor, boolean pLazy)", "modifiers": "public", "return": "", "signature": " BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor, boolean pLazy)", "full_signature": "public  BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor, boolean pLazy)", "class_method_signature": "BackendManager.BackendManager(Configuration pConfig, LogHandler pLogHandler, Restrictor pRestrictor, boolean pLazy)", "testcase": false, "constructor": true}, {"identifier": "handleRequest", "parameters": "(JmxRequest pJmxReq)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject handleRequest(JmxRequest pJmxReq)", "full_signature": "public JSONObject handleRequest(JmxRequest pJmxReq)", "class_method_signature": "BackendManager.handleRequest(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "convertExceptionToJson", "parameters": "(Throwable pExp, JmxRequest pJmxReq)", "modifiers": "public", "return": "Object", "signature": "Object convertExceptionToJson(Throwable pExp, JmxRequest pJmxReq)", "full_signature": "public Object convertExceptionToJson(Throwable pExp, JmxRequest pJmxReq)", "class_method_signature": "BackendManager.convertExceptionToJson(Throwable pExp, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "BackendManager.destroy()", "testcase": false, "constructor": false}, {"identifier": "isRemoteAccessAllowed", "parameters": "(String pRemoteHost, String pRemoteAddr)", "modifiers": "public", "return": "boolean", "signature": "boolean isRemoteAccessAllowed(String pRemoteHost, String pRemoteAddr)", "full_signature": "public boolean isRemoteAccessAllowed(String pRemoteHost, String pRemoteAddr)", "class_method_signature": "BackendManager.isRemoteAccessAllowed(String pRemoteHost, String pRemoteAddr)", "testcase": false, "constructor": false}, {"identifier": "isOriginAllowed", "parameters": "(String pOrigin,boolean pOnlyWhenStrictCheckingIsEnabled)", "modifiers": "public", "return": "boolean", "signature": "boolean isOriginAllowed(String pOrigin,boolean pOnlyWhenStrictCheckingIsEnabled)", "full_signature": "public boolean isOriginAllowed(String pOrigin,boolean pOnlyWhenStrictCheckingIsEnabled)", "class_method_signature": "BackendManager.isOriginAllowed(String pOrigin,boolean pOnlyWhenStrictCheckingIsEnabled)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void info(String msg)", "full_signature": "public void info(String msg)", "class_method_signature": "BackendManager.info(String msg)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void debug(String msg)", "full_signature": "public void debug(String msg)", "class_method_signature": "BackendManager.debug(String msg)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String message, Throwable t)", "modifiers": "public", "return": "void", "signature": "void error(String message, Throwable t)", "full_signature": "public void error(String message, Throwable t)", "class_method_signature": "BackendManager.error(String message, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "isDebug", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDebug()", "full_signature": "public boolean isDebug()", "class_method_signature": "BackendManager.isDebug()", "testcase": false, "constructor": false}, {"identifier": "getAgentDetails", "parameters": "()", "modifiers": "public", "return": "AgentDetails", "signature": "AgentDetails getAgentDetails()", "full_signature": "public AgentDetails getAgentDetails()", "class_method_signature": "BackendManager.getAgentDetails()", "testcase": false, "constructor": false}, {"identifier": "lazyInitIfNeeded", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lazyInitIfNeeded()", "full_signature": "private void lazyInitIfNeeded()", "class_method_signature": "BackendManager.lazyInitIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "void", "signature": "void init(Configuration pConfig)", "full_signature": "private void init(Configuration pConfig)", "class_method_signature": "BackendManager.init(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "initLimits", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "void", "signature": "void initLimits(Configuration pConfig)", "full_signature": "private void initLimits(Configuration pConfig)", "class_method_signature": "BackendManager.initLimits(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "getNullSaveIntLimit", "parameters": "(String pValue)", "modifiers": "private", "return": "int", "signature": "int getNullSaveIntLimit(String pValue)", "full_signature": "private int getNullSaveIntLimit(String pValue)", "class_method_signature": "BackendManager.getNullSaveIntLimit(String pValue)", "testcase": false, "constructor": false}, {"identifier": "createRequestDispatchers", "parameters": "(Configuration pConfig,\n                                                             Converters pConverters,\n                                                             ServerHandle pServerHandle,\n                                                             Restrictor pRestrictor)", "modifiers": "private", "return": "List<RequestDispatcher>", "signature": "List<RequestDispatcher> createRequestDispatchers(Configuration pConfig,\n                                                             Converters pConverters,\n                                                             ServerHandle pServerHandle,\n                                                             Restrictor pRestrictor)", "full_signature": "private List<RequestDispatcher> createRequestDispatchers(Configuration pConfig,\n                                                             Converters pConverters,\n                                                             ServerHandle pServerHandle,\n                                                             Restrictor pRestrictor)", "class_method_signature": "BackendManager.createRequestDispatchers(Configuration pConfig,\n                                                             Converters pConverters,\n                                                             ServerHandle pServerHandle,\n                                                             Restrictor pRestrictor)", "testcase": false, "constructor": false}, {"identifier": "createDispatcher", "parameters": "(String pDispatcherClass,\n                                               Converters pConverters,\n                                               ServerHandle pServerHandle,\n                                               Restrictor pRestrictor,\n                                               Configuration pConfig)", "modifiers": "private", "return": "RequestDispatcher", "signature": "RequestDispatcher createDispatcher(String pDispatcherClass,\n                                               Converters pConverters,\n                                               ServerHandle pServerHandle,\n                                               Restrictor pRestrictor,\n                                               Configuration pConfig)", "full_signature": "private RequestDispatcher createDispatcher(String pDispatcherClass,\n                                               Converters pConverters,\n                                               ServerHandle pServerHandle,\n                                               Restrictor pRestrictor,\n                                               Configuration pConfig)", "class_method_signature": "BackendManager.createDispatcher(String pDispatcherClass,\n                                               Converters pConverters,\n                                               ServerHandle pServerHandle,\n                                               Restrictor pRestrictor,\n                                               Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "callRequestDispatcher", "parameters": "(JmxRequest pJmxReq)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject callRequestDispatcher(JmxRequest pJmxReq)", "full_signature": "private JSONObject callRequestDispatcher(JmxRequest pJmxReq)", "class_method_signature": "BackendManager.callRequestDispatcher(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "getJsonConvertOptions", "parameters": "(JmxRequest pJmxReq)", "modifiers": "private", "return": "JsonConvertOptions", "signature": "JsonConvertOptions getJsonConvertOptions(JmxRequest pJmxReq)", "full_signature": "private JsonConvertOptions getJsonConvertOptions(JmxRequest pJmxReq)", "class_method_signature": "BackendManager.getJsonConvertOptions(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "initMBeans", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "void", "signature": "void initMBeans(Configuration pConfig)", "full_signature": "private void initMBeans(Configuration pConfig)", "class_method_signature": "BackendManager.initMBeans(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "intError", "parameters": "(String message,Throwable t)", "modifiers": "private", "return": "void", "signature": "void intError(String message,Throwable t)", "full_signature": "private void intError(String message,Throwable t)", "class_method_signature": "BackendManager.intError(String message,Throwable t)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/backend/BackendManager.java"}, "focal_method": {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void destroy() {\n        try {\n            localDispatcher.destroy();\n        } catch (JMException e) {\n            error(\"Cannot unregister MBean: \" + e,e);\n        }\n    }", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "BackendManager.destroy()", "testcase": false, "constructor": false, "invocations": ["destroy", "error"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}