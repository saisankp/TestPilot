{"test_class": {"identifier": "ProvisionerTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/ProvisionerTest.java"}, "test_case": {"identifier": "provisionLookup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void provisionLookup() throws IOException {\n        // wired hack for getting resource dir path ...\n        String resourceDir = getResourceFile(\n                \"demo_credentials_user1.fdrp\").getParent();\n\n        Provisioner p = new Provisioner();\n        List<File> files = p.findProvisionFilesInDir(new File(resourceDir));\n\n        List<String> expectedFilenames = Arrays.asList(\n                \"demo_credentials_user1.fdrp\",\n                \"demo_credentials_user2.fdrp\");\n\n        Assert.assertEquals(2, files.size());\n        for (File f : files) {\n            Assert.assertTrue(\"unexpected file name \" + f.getName(), expectedFilenames.contains(f.getName()));\n        }\n    }", "signature": "void provisionLookup()", "full_signature": "@Test public void provisionLookup()", "class_method_signature": "ProvisionerTest.provisionLookup()", "testcase": true, "constructor": false, "invocations": ["getParent", "getResourceFile", "findProvisionFilesInDir", "asList", "assertEquals", "size", "assertTrue", "getName", "contains", "getName"]}, "focal_class": {"identifier": "Provisioner", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG = \"Provisioner\";", "modifier": "public static final", "type": "String", "declarator": "TAG = \"Provisioner\"", "var_name": "TAG"}, {"original_string": "private static final String NEW_PROVISIONS_DIR = \"provisions\";", "modifier": "private static final", "type": "String", "declarator": "NEW_PROVISIONS_DIR = \"provisions\"", "var_name": "NEW_PROVISIONS_DIR"}], "methods": [{"identifier": "Provisioner", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Provisioner()", "full_signature": "protected  Provisioner()", "class_method_signature": "Provisioner.Provisioner()", "testcase": false, "constructor": true}, {"identifier": "scanAndProcess", "parameters": "(Context context)", "modifiers": "static", "return": "void", "signature": "void scanAndProcess(Context context)", "full_signature": "static void scanAndProcess(Context context)", "class_method_signature": "Provisioner.scanAndProcess(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFiles", "parameters": "(Context context)", "modifiers": "private", "return": "List<File>", "signature": "List<File> findProvisionFiles(Context context)", "full_signature": "private List<File> findProvisionFiles(Context context)", "class_method_signature": "Provisioner.findProvisionFiles(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFilesInDir", "parameters": "(File file)", "modifiers": "", "return": "List<File>", "signature": "List<File> findProvisionFilesInDir(File file)", "full_signature": " List<File> findProvisionFilesInDir(File file)", "class_method_signature": "Provisioner.findProvisionFilesInDir(File file)", "testcase": false, "constructor": false}, {"identifier": "rot13", "parameters": "(String text)", "modifiers": "", "return": "String", "signature": "String rot13(String text)", "full_signature": " String rot13(String text)", "class_method_signature": "Provisioner.rot13(String text)", "testcase": false, "constructor": false}, {"identifier": "deobfuscate", "parameters": "(String obfuscated)", "modifiers": "", "return": "String", "signature": "String deobfuscate(String obfuscated)", "full_signature": " String deobfuscate(String obfuscated)", "class_method_signature": "Provisioner.deobfuscate(String obfuscated)", "testcase": false, "constructor": false}, {"identifier": "extractProvisionsPlaintext", "parameters": "(List<File> files)", "modifiers": "", "return": "List<ProvisionPlaintext>", "signature": "List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "full_signature": " List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "class_method_signature": "Provisioner.extractProvisionsPlaintext(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseProvisions", "parameters": "(List<ProvisionPlaintext> provisionPlaintexts)", "modifiers": "", "return": "List<Provision>", "signature": "List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "full_signature": " List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "class_method_signature": "Provisioner.parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/Provisioner.java"}, "focal_method": {"identifier": "findProvisionFilesInDir", "parameters": "(File file)", "modifiers": "", "return": "List<File>", "body": "List<File> findProvisionFilesInDir(File file) {\n        if (file == null || !file.isDirectory()) {\n            return Collections.emptyList();\n        }\n        try {\n            File[] files = file.listFiles(new FilenameFilter() {\n                @Override\n                public boolean accept(File dir, String name) {\n                    if (name != null && name.endsWith(\".fdrp\")) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            return files != null ? Arrays.asList(files) : null;\n        } catch (Exception e) {\n            Utils.debugLog(TAG, \"can not search for provisions, can not access: \" + file.getAbsolutePath(), e);\n            return new ArrayList<>();\n        }\n    }", "signature": "List<File> findProvisionFilesInDir(File file)", "full_signature": " List<File> findProvisionFilesInDir(File file)", "class_method_signature": "Provisioner.findProvisionFilesInDir(File file)", "testcase": false, "constructor": false, "invocations": ["isDirectory", "emptyList", "listFiles", "endsWith", "asList", "debugLog", "getAbsolutePath"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}