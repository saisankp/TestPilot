{"test_class": {"identifier": "AffineProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.01;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.01", "var_name": "TOLERANCE"}, {"original_string": "private static GridCoverage2D coverage;", "modifier": "private static", "type": "GridCoverage2D", "declarator": "coverage", "var_name": "coverage"}, {"original_string": "private static InterpolationNearest nearest;", "modifier": "private static", "type": "InterpolationNearest", "declarator": "nearest", "var_name": "nearest"}, {"original_string": "private static InterpolationBilinear bilinear;", "modifier": "private static", "type": "InterpolationBilinear", "declarator": "bilinear", "var_name": "bilinear"}, {"original_string": "private static InterpolationBicubic bicubic;", "modifier": "private static", "type": "InterpolationBicubic", "declarator": "bicubic", "var_name": "bicubic"}, {"original_string": "private static double[] nodata;", "modifier": "private static", "type": "double[]", "declarator": "nodata", "var_name": "nodata"}, {"original_string": "private static double m00;", "modifier": "private static", "type": "double", "declarator": "m00", "var_name": "m00"}, {"original_string": "private static double m01;", "modifier": "private static", "type": "double", "declarator": "m01", "var_name": "m01"}, {"original_string": "private static double m10;", "modifier": "private static", "type": "double", "declarator": "m10", "var_name": "m10"}, {"original_string": "private static double m11;", "modifier": "private static", "type": "double", "declarator": "m11", "var_name": "m11"}, {"original_string": "private static double m02;", "modifier": "private static", "type": "double", "declarator": "m02", "var_name": "m02"}, {"original_string": "private static double m12;", "modifier": "private static", "type": "double", "declarator": "m12", "var_name": "m12"}], "file": "modules/unsupported/process-raster/src/test/java/org/geotools/process/raster/AffineProcessTest.java"}, "test_case": {"identifier": "testNoBackground", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoBackground() {\n        // Selection of the Affine process\n        AffineProcess process = new AffineProcess();\n\n        // Execution of the operation\n        GridCoverage2D result = process.execute(coverage, m00, m11, m01, m10, m02, m12, null,\n                nearest);\n\n        // Check if the final image is correct\n        ensureCorrectTransformation(result, m00, m11, m02, m12);\n    }", "signature": "void testNoBackground()", "full_signature": "@Test public void testNoBackground()", "class_method_signature": "AffineProcessTest.testNoBackground()", "testcase": true, "constructor": false, "invocations": ["execute", "ensureCorrectTransformation"]}, "focal_class": {"identifier": "AffineProcess", "superclass": "", "interfaces": "implements RasterProcess", "fields": [{"original_string": "private static final CoverageProcessor PROCESSOR = CoverageProcessor.getInstance();", "modifier": "private static final", "type": "CoverageProcessor", "declarator": "PROCESSOR = CoverageProcessor.getInstance()", "var_name": "PROCESSOR"}, {"original_string": "private static final Operation AFFINE = PROCESSOR.getOperation(\"Affine\");", "modifier": "private static final", "type": "Operation", "declarator": "AFFINE = PROCESSOR.getOperation(\"Affine\")", "var_name": "AFFINE"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "modifiers": "@DescribeResult(name = \"result\", description = \"Raster transformed by an Affine transformation\") public", "return": "GridCoverage2D", "signature": "GridCoverage2D execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "full_signature": "@DescribeResult(name = \"result\", description = \"Raster transformed by an Affine transformation\") public GridCoverage2D execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "class_method_signature": "AffineProcess.execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-raster/src/main/java/org/geotools/process/raster/AffineProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "modifiers": "@DescribeResult(name = \"result\", description = \"Raster transformed by an Affine transformation\") public", "return": "GridCoverage2D", "body": "@DescribeResult(name = \"result\", description = \"Raster transformed by an Affine transformation\")\n    public GridCoverage2D execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)\n            throws ProcessException {\n\n        // //\n        //\n        // Creation of the Affine transformation\n        //\n        // //\n        double xScale = scaleX != null ? scaleX : 1;\n        double yScale = scaleY != null ? scaleY : 1;\n        double xShear = shearX != null ? shearX : 0;\n        double yShear = shearY != null ? shearY : 0;\n        double xTrans = translateX != null ? translateX : 0;\n        double yTrans = translateY != null ? translateY : 0;\n        AffineTransform transform = new AffineTransform(xScale, yShear, xShear, yScale, xTrans,\n                yTrans);\n\n        // //\n        //\n        // Selection of the Operation parameters\n        //\n        // //\n        final ParameterValueGroup params = AFFINE.getParameters();\n        // Setting of the Source Coverage\n        params.parameter(\"Source\").setValue(coverage);\n        // Setting of the Transformation parameter\n        params.parameter(\"transform\").setValue(transform);\n        // Setting of the background value to use if present\n        if (nodata != null) {\n            params.parameter(\"backgroundValues\").setValue(nodata);\n        }\n\n        // If interpolation is present then it is added as a parameter\n        if (interp != null) {\n            params.parameter(\"interpolation\").setValue(interp);\n        }\n\n        // //\n        //\n        // Execution of the Operation\n        //\n        // //\n        return (GridCoverage2D) PROCESSOR.doOperation(params);\n    }", "signature": "GridCoverage2D execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "full_signature": "@DescribeResult(name = \"result\", description = \"Raster transformed by an Affine transformation\") public GridCoverage2D execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "class_method_signature": "AffineProcess.execute(\n            @DescribeParameter(name = \"coverage\", description = \"Input raster\", min = 1) GridCoverage2D coverage,\n            @DescribeParameter(name = \"scalex\", description = \"Scale parameter for the X direction\", min = 0) Double scaleX,\n            @DescribeParameter(name = \"scaley\", description = \"Scale parameter for the Y direction\", min = 0) Double scaleY,\n            @DescribeParameter(name = \"shearx\", description = \"Shear parameter for the X direction\", min = 0) Double shearX,\n            @DescribeParameter(name = \"sheary\", description = \"Shear parameter for the Y direction\", min = 0) Double shearY,\n            @DescribeParameter(name = \"translatex\", description = \"Offset parameter for the X direction\", min = 0) Double translateX,\n            @DescribeParameter(name = \"translatey\", description = \"Offset parameter for the Y direction\", min = 0) Double translateY,\n            @DescribeParameter(name = \"nodata\", description = \"Output coverage nodata values\", min = 0) double[] nodata,\n            @DescribeParameter(name = \"interpolation\", description = \"Interpolation function to use.  Values are NEAREST, BILINEAR, BICUBIC2, BICUBIC\", min = 0) Interpolation interp)", "testcase": false, "constructor": false, "invocations": ["getParameters", "setValue", "parameter", "setValue", "parameter", "setValue", "parameter", "setValue", "parameter", "doOperation"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}