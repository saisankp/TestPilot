{"test_class": {"identifier": "WalletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PASSWORD = \"Insecure Pa55w0rd\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"Insecure Pa55w0rd\"", "var_name": "PASSWORD"}, {"original_string": "private static final String SECRET =\n            \"a392604efc2fad9c0b3da43b5f698a2e3f270f170d859912be0d54742275c5f6\";", "modifier": "private static final", "type": "String", "declarator": "SECRET =\n            \"a392604efc2fad9c0b3da43b5f698a2e3f270f170d859912be0d54742275c5f6\"", "var_name": "SECRET"}, {"original_string": "private static final String AES_128_CTR = \"{\\n\" +\n            \"    \\\"crypto\\\" : {\\n\" +\n            \"        \\\"cipher\\\" : \\\"aes-128-ctr\\\",\\n\" +\n            \"        \\\"cipherparams\\\" : {\\n\" +\n            \"            \\\"iv\\\" : \\\"02ebc768684e5576900376114625ee6f\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"ciphertext\\\" : \\\"7ad5c9dd2c95f34a92ebb86740b92103a5d1cc4c2eabf3b9a59e1f83f3181216\\\",\\n\" +\n            \"        \\\"kdf\\\" : \\\"pbkdf2\\\",\\n\" +\n            \"        \\\"kdfparams\\\" : {\\n\" +\n            \"            \\\"c\\\" : 262144,\\n\" +\n            \"            \\\"dklen\\\" : 32,\\n\" +\n            \"            \\\"prf\\\" : \\\"hmac-sha256\\\",\\n\" +\n            \"            \\\"salt\\\" : \\\"0e4cf3893b25bb81efaae565728b5b7cde6a84e224cbf9aed3d69a31c981b702\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"mac\\\" : \\\"2b29e4641ec17f4dc8b86fc8592090b50109b372529c30b001d4d96249edaf62\\\"\\n\" +\n            \"    },\\n\" +\n            \"    \\\"id\\\" : \\\"af0451b4-6020-4ef0-91ec-794a5a965b01\\\",\\n\" +\n            \"    \\\"version\\\" : 3\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "AES_128_CTR = \"{\\n\" +\n            \"    \\\"crypto\\\" : {\\n\" +\n            \"        \\\"cipher\\\" : \\\"aes-128-ctr\\\",\\n\" +\n            \"        \\\"cipherparams\\\" : {\\n\" +\n            \"            \\\"iv\\\" : \\\"02ebc768684e5576900376114625ee6f\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"ciphertext\\\" : \\\"7ad5c9dd2c95f34a92ebb86740b92103a5d1cc4c2eabf3b9a59e1f83f3181216\\\",\\n\" +\n            \"        \\\"kdf\\\" : \\\"pbkdf2\\\",\\n\" +\n            \"        \\\"kdfparams\\\" : {\\n\" +\n            \"            \\\"c\\\" : 262144,\\n\" +\n            \"            \\\"dklen\\\" : 32,\\n\" +\n            \"            \\\"prf\\\" : \\\"hmac-sha256\\\",\\n\" +\n            \"            \\\"salt\\\" : \\\"0e4cf3893b25bb81efaae565728b5b7cde6a84e224cbf9aed3d69a31c981b702\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"mac\\\" : \\\"2b29e4641ec17f4dc8b86fc8592090b50109b372529c30b001d4d96249edaf62\\\"\\n\" +\n            \"    },\\n\" +\n            \"    \\\"id\\\" : \\\"af0451b4-6020-4ef0-91ec-794a5a965b01\\\",\\n\" +\n            \"    \\\"version\\\" : 3\\n\" +\n            \"}\"", "var_name": "AES_128_CTR"}, {"original_string": "private static final String SCRYPT = \"{\\n\" +\n            \"    \\\"crypto\\\" : {\\n\" +\n            \"        \\\"cipher\\\" : \\\"aes-128-ctr\\\",\\n\" +\n            \"        \\\"cipherparams\\\" : {\\n\" +\n            \"            \\\"iv\\\" : \\\"3021e1ef4774dfc5b08307f3a4c8df00\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"ciphertext\\\" : \\\"4dd29ba18478b98cf07a8a44167acdf7e04de59777c4b9c139e3d3fa5cb0b931\\\",\\n\" +\n            \"        \\\"kdf\\\" : \\\"scrypt\\\",\\n\" +\n            \"        \\\"kdfparams\\\" : {\\n\" +\n            \"            \\\"dklen\\\" : 32,\\n\" +\n            \"            \\\"n\\\" : 262144,\\n\" +\n            \"            \\\"r\\\" : 8,\\n\" +\n            \"            \\\"p\\\" : 1,\\n\" +\n            \"            \\\"salt\\\" : \\\"4f9f68c71989eb3887cd947c80b9555fce528f210199d35c35279beb8c2da5ca\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"mac\\\" : \\\"7e8f2192767af9be18e7a373c1986d9190fcaa43ad689bbb01a62dbde159338d\\\"\\n\" +\n            \"    },\\n\" +\n            \"    \\\"id\\\" : \\\"7654525c-17e0-4df5-94b5-c7fde752c9d2\\\",\\n\" +\n            \"    \\\"version\\\" : 3\\n\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "SCRYPT = \"{\\n\" +\n            \"    \\\"crypto\\\" : {\\n\" +\n            \"        \\\"cipher\\\" : \\\"aes-128-ctr\\\",\\n\" +\n            \"        \\\"cipherparams\\\" : {\\n\" +\n            \"            \\\"iv\\\" : \\\"3021e1ef4774dfc5b08307f3a4c8df00\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"ciphertext\\\" : \\\"4dd29ba18478b98cf07a8a44167acdf7e04de59777c4b9c139e3d3fa5cb0b931\\\",\\n\" +\n            \"        \\\"kdf\\\" : \\\"scrypt\\\",\\n\" +\n            \"        \\\"kdfparams\\\" : {\\n\" +\n            \"            \\\"dklen\\\" : 32,\\n\" +\n            \"            \\\"n\\\" : 262144,\\n\" +\n            \"            \\\"r\\\" : 8,\\n\" +\n            \"            \\\"p\\\" : 1,\\n\" +\n            \"            \\\"salt\\\" : \\\"4f9f68c71989eb3887cd947c80b9555fce528f210199d35c35279beb8c2da5ca\\\"\\n\" +\n            \"        },\\n\" +\n            \"        \\\"mac\\\" : \\\"7e8f2192767af9be18e7a373c1986d9190fcaa43ad689bbb01a62dbde159338d\\\"\\n\" +\n            \"    },\\n\" +\n            \"    \\\"id\\\" : \\\"7654525c-17e0-4df5-94b5-c7fde752c9d2\\\",\\n\" +\n            \"    \\\"version\\\" : 3\\n\" +\n            \"}\"", "var_name": "SCRYPT"}], "file": "crypto/src/test/java/org/web3j/crypto/WalletTest.java"}, "test_case": {"identifier": "testDecryptAes128Ctr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecryptAes128Ctr() throws Exception {\n        WalletFile walletFile = load(AES_128_CTR);\n        ECKeyPair ecKeyPair = Wallet.decrypt(PASSWORD, walletFile);\n        assertThat(Numeric.toHexStringNoPrefix(ecKeyPair.getPrivateKey()), is(SECRET));\n    }", "signature": "void testDecryptAes128Ctr()", "full_signature": "@Test public void testDecryptAes128Ctr()", "class_method_signature": "WalletTest.testDecryptAes128Ctr()", "testcase": true, "constructor": false, "invocations": ["load", "decrypt", "assertThat", "toHexStringNoPrefix", "getPrivateKey", "is"]}, "focal_class": {"identifier": "Wallet", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int N_LIGHT = 1 << 12;", "modifier": "private static final", "type": "int", "declarator": "N_LIGHT = 1 << 12", "var_name": "N_LIGHT"}, {"original_string": "private static final int P_LIGHT = 6;", "modifier": "private static final", "type": "int", "declarator": "P_LIGHT = 6", "var_name": "P_LIGHT"}, {"original_string": "private static final int N_STANDARD = 1 << 18;", "modifier": "private static final", "type": "int", "declarator": "N_STANDARD = 1 << 18", "var_name": "N_STANDARD"}, {"original_string": "private static final int P_STANDARD = 1;", "modifier": "private static final", "type": "int", "declarator": "P_STANDARD = 1", "var_name": "P_STANDARD"}, {"original_string": "private static final int R = 8;", "modifier": "private static final", "type": "int", "declarator": "R = 8", "var_name": "R"}, {"original_string": "private static final int DKLEN = 32;", "modifier": "private static final", "type": "int", "declarator": "DKLEN = 32", "var_name": "DKLEN"}, {"original_string": "private static final int CURRENT_VERSION = 3;", "modifier": "private static final", "type": "int", "declarator": "CURRENT_VERSION = 3", "var_name": "CURRENT_VERSION"}, {"original_string": "private static final String CIPHER = \"aes-128-ctr\";", "modifier": "private static final", "type": "String", "declarator": "CIPHER = \"aes-128-ctr\"", "var_name": "CIPHER"}, {"original_string": "static final String AES_128_CTR = \"pbkdf2\";", "modifier": "static final", "type": "String", "declarator": "AES_128_CTR = \"pbkdf2\"", "var_name": "AES_128_CTR"}, {"original_string": "static final String SCRYPT = \"scrypt\";", "modifier": "static final", "type": "String", "declarator": "SCRYPT = \"scrypt\"", "var_name": "SCRYPT"}], "methods": [{"identifier": "create", "parameters": "(String password, ECKeyPair ecKeyPair, int n, int p)", "modifiers": "public static", "return": "WalletFile", "signature": "WalletFile create(String password, ECKeyPair ecKeyPair, int n, int p)", "full_signature": "public static WalletFile create(String password, ECKeyPair ecKeyPair, int n, int p)", "class_method_signature": "Wallet.create(String password, ECKeyPair ecKeyPair, int n, int p)", "testcase": false, "constructor": false}, {"identifier": "createStandard", "parameters": "(String password, ECKeyPair ecKeyPair)", "modifiers": "public static", "return": "WalletFile", "signature": "WalletFile createStandard(String password, ECKeyPair ecKeyPair)", "full_signature": "public static WalletFile createStandard(String password, ECKeyPair ecKeyPair)", "class_method_signature": "Wallet.createStandard(String password, ECKeyPair ecKeyPair)", "testcase": false, "constructor": false}, {"identifier": "createLight", "parameters": "(String password, ECKeyPair ecKeyPair)", "modifiers": "public static", "return": "WalletFile", "signature": "WalletFile createLight(String password, ECKeyPair ecKeyPair)", "full_signature": "public static WalletFile createLight(String password, ECKeyPair ecKeyPair)", "class_method_signature": "Wallet.createLight(String password, ECKeyPair ecKeyPair)", "testcase": false, "constructor": false}, {"identifier": "createWalletFile", "parameters": "(\n            ECKeyPair ecKeyPair, byte[] cipherText, byte[] iv, byte[] salt, byte[] mac,\n            int n, int p)", "modifiers": "private static", "return": "WalletFile", "signature": "WalletFile createWalletFile(\n            ECKeyPair ecKeyPair, byte[] cipherText, byte[] iv, byte[] salt, byte[] mac,\n            int n, int p)", "full_signature": "private static WalletFile createWalletFile(\n            ECKeyPair ecKeyPair, byte[] cipherText, byte[] iv, byte[] salt, byte[] mac,\n            int n, int p)", "class_method_signature": "Wallet.createWalletFile(\n            ECKeyPair ecKeyPair, byte[] cipherText, byte[] iv, byte[] salt, byte[] mac,\n            int n, int p)", "testcase": false, "constructor": false}, {"identifier": "generateDerivedScryptKey", "parameters": "(\n            byte[] password, byte[] salt, int n, int r, int p, int dkLen)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] generateDerivedScryptKey(\n            byte[] password, byte[] salt, int n, int r, int p, int dkLen)", "full_signature": "private static byte[] generateDerivedScryptKey(\n            byte[] password, byte[] salt, int n, int r, int p, int dkLen)", "class_method_signature": "Wallet.generateDerivedScryptKey(\n            byte[] password, byte[] salt, int n, int r, int p, int dkLen)", "testcase": false, "constructor": false}, {"identifier": "generateAes128CtrDerivedKey", "parameters": "(\n            byte[] password, byte[] salt, int c, String prf)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] generateAes128CtrDerivedKey(\n            byte[] password, byte[] salt, int c, String prf)", "full_signature": "private static byte[] generateAes128CtrDerivedKey(\n            byte[] password, byte[] salt, int c, String prf)", "class_method_signature": "Wallet.generateAes128CtrDerivedKey(\n            byte[] password, byte[] salt, int c, String prf)", "testcase": false, "constructor": false}, {"identifier": "performCipherOperation", "parameters": "(\n            int mode, byte[] iv, byte[] encryptKey, byte[] text)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] performCipherOperation(\n            int mode, byte[] iv, byte[] encryptKey, byte[] text)", "full_signature": "private static byte[] performCipherOperation(\n            int mode, byte[] iv, byte[] encryptKey, byte[] text)", "class_method_signature": "Wallet.performCipherOperation(\n            int mode, byte[] iv, byte[] encryptKey, byte[] text)", "testcase": false, "constructor": false}, {"identifier": "throwCipherException", "parameters": "(Exception e)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] throwCipherException(Exception e)", "full_signature": "private static byte[] throwCipherException(Exception e)", "class_method_signature": "Wallet.throwCipherException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "generateMac", "parameters": "(byte[] derivedKey, byte[] cipherText)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] generateMac(byte[] derivedKey, byte[] cipherText)", "full_signature": "private static byte[] generateMac(byte[] derivedKey, byte[] cipherText)", "class_method_signature": "Wallet.generateMac(byte[] derivedKey, byte[] cipherText)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(String password, WalletFile walletFile)", "modifiers": "public static", "return": "ECKeyPair", "signature": "ECKeyPair decrypt(String password, WalletFile walletFile)", "full_signature": "public static ECKeyPair decrypt(String password, WalletFile walletFile)", "class_method_signature": "Wallet.decrypt(String password, WalletFile walletFile)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(WalletFile walletFile)", "modifiers": "static", "return": "void", "signature": "void validate(WalletFile walletFile)", "full_signature": "static void validate(WalletFile walletFile)", "class_method_signature": "Wallet.validate(WalletFile walletFile)", "testcase": false, "constructor": false}, {"identifier": "generateRandomBytes", "parameters": "(int size)", "modifiers": "static", "return": "byte[]", "signature": "byte[] generateRandomBytes(int size)", "full_signature": "static byte[] generateRandomBytes(int size)", "class_method_signature": "Wallet.generateRandomBytes(int size)", "testcase": false, "constructor": false}], "file": "crypto/src/main/java/org/web3j/crypto/Wallet.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(String password, WalletFile walletFile)", "modifiers": "public static", "return": "ECKeyPair", "body": "public static ECKeyPair decrypt(String password, WalletFile walletFile)\n            throws CipherException {\n\n        validate(walletFile);\n\n        WalletFile.Crypto crypto = walletFile.getCrypto();\n\n        byte[] mac = Numeric.hexStringToByteArray(crypto.getMac());\n        byte[] iv = Numeric.hexStringToByteArray(crypto.getCipherparams().getIv());\n        byte[] cipherText = Numeric.hexStringToByteArray(crypto.getCiphertext());\n\n        byte[] derivedKey;\n\n        WalletFile.KdfParams kdfParams = crypto.getKdfparams();\n        if (kdfParams instanceof WalletFile.ScryptKdfParams) {\n            WalletFile.ScryptKdfParams scryptKdfParams =\n                    (WalletFile.ScryptKdfParams) crypto.getKdfparams();\n            int dklen = scryptKdfParams.getDklen();\n            int n = scryptKdfParams.getN();\n            int p = scryptKdfParams.getP();\n            int r = scryptKdfParams.getR();\n            byte[] salt = Numeric.hexStringToByteArray(scryptKdfParams.getSalt());\n            derivedKey = generateDerivedScryptKey(\n                    password.getBytes(Charset.forName(\"UTF-8\")), salt, n, r, p, dklen);\n        } else if (kdfParams instanceof WalletFile.Aes128CtrKdfParams) {\n            WalletFile.Aes128CtrKdfParams aes128CtrKdfParams =\n                    (WalletFile.Aes128CtrKdfParams) crypto.getKdfparams();\n            int c = aes128CtrKdfParams.getC();\n            String prf = aes128CtrKdfParams.getPrf();\n            byte[] salt = Numeric.hexStringToByteArray(aes128CtrKdfParams.getSalt());\n\n            derivedKey = generateAes128CtrDerivedKey(\n                    password.getBytes(Charset.forName(\"UTF-8\")), salt, c, prf);\n        } else {\n            throw new CipherException(\"Unable to deserialize params: \" + crypto.getKdf());\n        }\n\n        byte[] derivedMac = generateMac(derivedKey, cipherText);\n\n        if (!Arrays.equals(derivedMac, mac)) {\n            throw new CipherException(\"Invalid password provided\");\n        }\n\n        byte[] encryptKey = Arrays.copyOfRange(derivedKey, 0, 16);\n        byte[] privateKey = performCipherOperation(Cipher.DECRYPT_MODE, iv, encryptKey, cipherText);\n        return ECKeyPair.create(privateKey);\n    }", "signature": "ECKeyPair decrypt(String password, WalletFile walletFile)", "full_signature": "public static ECKeyPair decrypt(String password, WalletFile walletFile)", "class_method_signature": "Wallet.decrypt(String password, WalletFile walletFile)", "testcase": false, "constructor": false, "invocations": ["validate", "getCrypto", "hexStringToByteArray", "getMac", "hexStringToByteArray", "getIv", "getCipherparams", "hexStringToByteArray", "getCiphertext", "getKdfparams", "getKdfparams", "getDklen", "getN", "getP", "getR", "hexStringToByteArray", "getSalt", "generateDerivedScryptKey", "getBytes", "forName", "getKdfparams", "getC", "getPrf", "hexStringToByteArray", "getSalt", "generateAes128CtrDerivedKey", "getBytes", "forName", "getKdf", "generateMac", "equals", "copyOfRange", "performCipherOperation", "create"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}