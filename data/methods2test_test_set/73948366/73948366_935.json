{"test_class": {"identifier": "X509ServiceCertRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509ServiceCertRequestTest.java"}, "test_case": {"identifier": "testValidateInvalidDnsNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateInvalidDnsNames() throws IOException {\n\n        Path path = Paths.get(\"src/test/resources/athenz.instanceid.csr\");\n        String csr = new String(Files.readAllBytes(path));\n\n        X509ServiceCertRequest certReq = new X509ServiceCertRequest(csr);\n        assertNotNull(certReq);\n\n        StringBuilder errorMsg = new StringBuilder(256);\n        assertFalse(certReq.validate(\"sys\", \"production\", \"provider\",\n                null, null, null, null, null, null, errorMsg));\n    }", "signature": "void testValidateInvalidDnsNames()", "full_signature": "@Test public void testValidateInvalidDnsNames()", "class_method_signature": "X509ServiceCertRequestTest.testValidateInvalidDnsNames()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "assertNotNull", "assertFalse", "validate"]}, "focal_class": {"identifier": "X509ServiceCertRequest", "superclass": "extends X509CertRequest", "interfaces": "", "fields": [], "methods": [{"identifier": "X509ServiceCertRequest", "parameters": "(String csr)", "modifiers": "public", "return": "", "signature": " X509ServiceCertRequest(String csr)", "full_signature": "public  X509ServiceCertRequest(String csr)", "class_method_signature": "X509ServiceCertRequest.X509ServiceCertRequest(String csr)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "full_signature": "public boolean validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "class_method_signature": "X509ServiceCertRequest.validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509ServiceCertRequest.java"}, "focal_method": {"identifier": "validate", "parameters": "(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "modifiers": "public", "return": "boolean", "body": "public boolean validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg) {\n\n        // instanceId must be non empty\n\n        if (instanceId == null || instanceId.isEmpty()) {\n            errorMsg.append(\"InstanceId cannot be empty\");\n            return false;\n        }\n\n        // validate the common name in CSR and make sure it\n        // matches to the values specified in the info object\n\n        final String infoCommonName = domainName + \".\" + serviceName;\n        if (!validateCommonName(infoCommonName)) {\n            errorMsg.append(\"Unable to validate CSR common name\");\n            return false;\n        }\n\n        // ensure the uri Hostname is same as instance Hostname that gets further verified later\n\n        if (!validateUriHostname(instanceHostname)) {\n            errorMsg.append(\"Instance/Uri hostname mismatch: \").append(instanceHostname)\n                .append(\" vs. \").append(uriHostname);\n            return false;\n        }\n\n        // validate that the dnsSuffix used in the dnsName attribute has\n        // been authorized to be used by the given provider\n\n        if (!validateDnsNames(domainName, serviceName, provider, athenzSysDomainCache, serviceDnsSuffix,\n                instanceHostname, instanceHostCnames, hostnameResolver)) {\n            errorMsg.append(\"Unable to validate CSR SAN dnsNames - invalid dns suffix\");\n            return false;\n        }\n\n        // validate the O field in the certificate if necessary\n\n        if (!validateSubjectOField(validSubjectOValues)) {\n            errorMsg.append(\"Unable to validate Subject O Field\");\n            return false;\n        }\n\n        // validate spiffe uri if one is provided\n\n        if (!validateSpiffeURI(domainName, \"sa\", serviceName)) {\n            errorMsg.append(\"Unable to validate Service SPIFFE URI\");\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "full_signature": "public boolean validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "class_method_signature": "X509ServiceCertRequest.validate(final String domainName, final String serviceName, final String provider,\n            final Set<String> validSubjectOValues, final DataCache athenzSysDomainCache,\n            final String serviceDnsSuffix, final String instanceHostname, final List<String> instanceHostCnames,\n            HostnameResolver hostnameResolver, StringBuilder errorMsg)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "append", "validateCommonName", "append", "validateUriHostname", "append", "append", "append", "append", "validateDnsNames", "append", "validateSubjectOField", "append", "validateSpiffeURI", "append"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}