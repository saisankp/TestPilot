{"test_class": {"identifier": "SynchronousTransformerTest", "superclass": "extends TransformerTest", "interfaces": "", "fields": [{"original_string": "private static final int REFINE_PORT = 3333;", "modifier": "private static final", "type": "int", "declarator": "REFINE_PORT = 3333", "var_name": "REFINE_PORT"}], "file": "clients/clients-transformer/src/test/java/eu/spaziodati/batchrefine/transformer/SynchronousTransformerTest.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform() throws Exception {\n        File reference = findAndCopy(\"outputs/\" + fInput + \"_\" + fTransform\n                + \".\" + fFormat);\n        Response response = doRequest(fInput, fTransform, fFormat,\n                mapContentType(fFormat));\n        File output = EngineTestUtils.outputFile();\n        try (FileOutputStream oStream = new FileOutputStream(output)) {\n            IOUtils.copy(response.asInputStream(), oStream);\n        }\n        assertEquals(reference, output, mapContentType(fFormat));\n    }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "SynchronousTransformerTest.testTransform()", "testcase": true, "constructor": false, "invocations": ["findAndCopy", "doRequest", "mapContentType", "outputFile", "copy", "asInputStream", "assertEquals", "mapContentType"]}, "focal_class": {"identifier": "SynchronousTransformer", "superclass": "extends BatchRefineTransformer", "interfaces": "implements\n        SyncTransformer", "fields": [{"original_string": "private ITransformEngine fRefineEngine;", "modifier": "private", "type": "ITransformEngine", "declarator": "fRefineEngine", "var_name": "fRefineEngine"}, {"original_string": "private Properties transformerConfig;", "modifier": "private", "type": "Properties", "declarator": "transformerConfig", "var_name": "transformerConfig"}], "methods": [{"identifier": "SynchronousTransformer", "parameters": "(ITransformEngine engine, Properties config)", "modifiers": "public", "return": "", "signature": " SynchronousTransformer(ITransformEngine engine, Properties config)", "full_signature": "public  SynchronousTransformer(ITransformEngine engine, Properties config)", "class_method_signature": "SynchronousTransformer.SynchronousTransformer(ITransformEngine engine, Properties config)", "testcase": false, "constructor": true}, {"identifier": "isLongRunning", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLongRunning()", "full_signature": "@Override public boolean isLongRunning()", "class_method_signature": "SynchronousTransformer.isLongRunning()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(HttpRequestEntity entity)", "modifiers": "@Override public", "return": "Entity", "signature": "Entity transform(HttpRequestEntity entity)", "full_signature": "@Override public Entity transform(HttpRequestEntity entity)", "class_method_signature": "SynchronousTransformer.transform(HttpRequestEntity entity)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Entity entity)", "modifiers": "private", "return": "HttpRequestEntity", "signature": "HttpRequestEntity cast(Entity entity)", "full_signature": "private HttpRequestEntity cast(Entity entity)", "class_method_signature": "SynchronousTransformer.cast(Entity entity)", "testcase": false, "constructor": false}, {"identifier": "getEngine", "parameters": "()", "modifiers": "private", "return": "ITransformEngine", "signature": "ITransformEngine getEngine()", "full_signature": "private ITransformEngine getEngine()", "class_method_signature": "SynchronousTransformer.getEngine()", "testcase": false, "constructor": false}], "file": "clients/clients-transformer/src/main/java/eu/spaziodati/batchrefine/transformer/SynchronousTransformer.java"}, "focal_method": {"identifier": "transform", "parameters": "(HttpRequestEntity entity)", "modifiers": "@Override public", "return": "Entity", "body": "@Override\n    public Entity transform(HttpRequestEntity entity) throws IOException {\n        logMessage(entity.getRequest());\n\n        final HttpRequestEntity request = cast(entity);\n\n        final ImmutablePair<MimeType, Properties> options = exporterOptions(request);\n        options.right.putAll(transformerConfig);\n        final File input = downloadInput(entity);\n        final File output = File.createTempFile(\"reply\", \"tmp\");\n\n        final ITransformEngine engine = getEngine();\n\n        return new WritingEntity() {\n            @Override\n            public void writeData(OutputStream out) throws IOException {\n                try {\n                    // Can't allow more than one transform at a time as OpenRefine is not\n                    // designed for that.\n                    synchronized (SynchronousTransformer.this) {\n                        engine.transform(input.toURI(), fetchTransform(request), output.toURI(),\n                                options.right);\n                    }\n\n                    try (FileInputStream stream = new FileInputStream(output)) {\n                        IOUtils.copy(stream, out);\n                    }\n                } finally {\n                    input.delete();\n                    output.delete();\n                }\n            }\n\n            @Override\n            public MimeType getType() {\n                return options.left;\n            }\n        };\n    }", "signature": "Entity transform(HttpRequestEntity entity)", "full_signature": "@Override public Entity transform(HttpRequestEntity entity)", "class_method_signature": "SynchronousTransformer.transform(HttpRequestEntity entity)", "testcase": false, "constructor": false, "invocations": ["logMessage", "getRequest", "cast", "exporterOptions", "putAll", "downloadInput", "createTempFile", "getEngine", "transform", "toURI", "fetchTransform", "toURI", "copy", "delete", "delete"]}, "repository": {"repo_id": 20323152, "url": "https://github.com/fusepoolP3/p3-batchrefine", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 48, "size": 6888, "license": "licensed"}}