{"test_class": {"identifier": "VisibilityFenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Configuration conf = new Configuration();", "modifier": "private static", "type": "Configuration", "declarator": "conf = new Configuration()", "var_name": "conf"}, {"original_string": "private static TransactionManager txManager = null;", "modifier": "private static", "type": "TransactionManager", "declarator": "txManager = null", "var_name": "txManager"}], "file": "tephra-core/src/test/java/co/cask/tephra/visibility/VisibilityFenceTest.java"}, "test_case": {"identifier": "testFence2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFence2() throws Exception {\n    byte[] fenceId = \"test_table\".getBytes(Charsets.UTF_8);\n\n    // Readers use fence to indicate that they are interested in changes to specific data\n    // Reader 1\n    TransactionAware readFence1 = VisibilityFence.create(fenceId);\n    TransactionContext readTxContext1 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFence1);\n    readTxContext1.start();\n\n    // Reader 2\n    TransactionAware readFence2 = VisibilityFence.create(fenceId);\n    TransactionContext readTxContext2 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFence2);\n    readTxContext2.start();\n\n    // Reader 3\n    TransactionAware readFence3 = VisibilityFence.create(fenceId);\n    TransactionContext readTxContext3 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFence3);\n    readTxContext3.start();\n\n    // Writer updates data here in a separate transaction (code not shown)\n    // start tx\n    // update\n    // commit tx\n\n    // Now writer needs to wait for readers 1, 2, and 3 to see the change, it uses write fence to do so\n    TransactionAware writeFence = new WriteFence(fenceId);\n    TransactionContext writeTxContext = new TransactionContext(new InMemoryTxSystemClient(txManager), writeFence);\n    writeTxContext.start();\n\n    // Reader 1 commits before writeFence is committed\n    readTxContext1.finish();\n\n    try {\n      // writeFence will throw exception since Reader 1 committed without seeing changes\n      writeTxContext.finish();\n      Assert.fail(\"Expected transaction to fail\");\n    } catch (TransactionConflictException e) {\n      // Expected\n      writeTxContext.abort();\n    }\n\n    // Start over writeFence again\n    writeTxContext.start();\n\n    // Now, Reader 3 commits before writeFence\n    // Note that Reader 3 does not conflict with Reader 1\n    readTxContext3.finish();\n\n    try {\n      // writeFence will throw exception again since Reader 3 committed without seeing changes\n      writeTxContext.finish();\n      Assert.fail(\"Expected transaction to fail\");\n    } catch (TransactionConflictException e) {\n      // Expected\n      writeTxContext.abort();\n    }\n\n    // Start over writeFence again\n    writeTxContext.start();\n    // This time writeFence commits before the other readers\n    writeTxContext.finish();\n\n    // After this point all readers will see the change\n\n    try {\n      // Reader 2 commits after writeFence, hence this commit with throw exception\n      readTxContext2.finish();\n      Assert.fail(\"Expected transaction to fail\");\n    } catch (TransactionConflictException e) {\n      // Expected\n      readTxContext2.abort();\n    }\n\n    // Reader 2 has to abort and start over again. It will see the changes now.\n    readTxContext2 = new TransactionContext(new InMemoryTxSystemClient(txManager), readFence2);\n    readTxContext2.start();\n    readTxContext2.finish();\n  }", "signature": "void testFence2()", "full_signature": "@Test public void testFence2()", "class_method_signature": "VisibilityFenceTest.testFence2()", "testcase": true, "constructor": false, "invocations": ["getBytes", "create", "start", "create", "start", "create", "start", "start", "finish", "finish", "fail", "abort", "start", "finish", "finish", "fail", "abort", "start", "finish", "finish", "fail", "abort", "start", "finish"]}, "focal_class": {"identifier": "VisibilityFence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "VisibilityFence", "parameters": "()", "modifiers": "private", "return": "", "signature": " VisibilityFence()", "full_signature": "private  VisibilityFence()", "class_method_signature": "VisibilityFence.VisibilityFence()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(byte[] fenceId)", "modifiers": "public static", "return": "TransactionAware", "signature": "TransactionAware create(byte[] fenceId)", "full_signature": "public static TransactionAware create(byte[] fenceId)", "class_method_signature": "VisibilityFence.create(byte[] fenceId)", "testcase": false, "constructor": false}, {"identifier": "prepareWait", "parameters": "(byte[] fenceId, TransactionSystemClient txClient)", "modifiers": "public static", "return": "FenceWait", "signature": "FenceWait prepareWait(byte[] fenceId, TransactionSystemClient txClient)", "full_signature": "public static FenceWait prepareWait(byte[] fenceId, TransactionSystemClient txClient)", "class_method_signature": "VisibilityFence.prepareWait(byte[] fenceId, TransactionSystemClient txClient)", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/visibility/VisibilityFence.java"}, "focal_method": {"identifier": "create", "parameters": "(byte[] fenceId)", "modifiers": "public static", "return": "TransactionAware", "body": "public static TransactionAware create(byte[] fenceId) {\n    return new ReadFence(fenceId);\n  }", "signature": "TransactionAware create(byte[] fenceId)", "full_signature": "public static TransactionAware create(byte[] fenceId)", "class_method_signature": "VisibilityFence.create(byte[] fenceId)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}