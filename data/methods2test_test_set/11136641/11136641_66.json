{"test_class": {"identifier": "RenameOperationRecorderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LdapOperations ldapOperationsMock;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperationsMock", "var_name": "ldapOperationsMock"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/RenameOperationRecorderTest.java"}, "test_case": {"identifier": "testRecordOperation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecordOperation() {\n        RenameOperationRecorder tested = new RenameOperationRecorder(\n                ldapOperationsMock);\n\n        // Perform test\n        CompensatingTransactionOperationExecutor operation = tested\n                .recordOperation(new Object[] { \"ou=someou\", \"ou=newou\" });\n\n        assertThat(operation instanceof RenameOperationExecutor).isTrue();\n        RenameOperationExecutor rollbackOperation = (RenameOperationExecutor) operation;\n        assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock);\n        assertThat(rollbackOperation.getNewDn().toString()).isEqualTo(\"ou=newou\");\n        assertThat(rollbackOperation.getOriginalDn().toString()).isEqualTo(\"ou=someou\");\n    }", "signature": "void testRecordOperation()", "full_signature": "@Test public void testRecordOperation()", "class_method_signature": "RenameOperationRecorderTest.testRecordOperation()", "testcase": true, "constructor": false, "invocations": ["recordOperation", "isTrue", "assertThat", "isSameAs", "assertThat", "getLdapOperations", "isEqualTo", "assertThat", "toString", "getNewDn", "isEqualTo", "assertThat", "toString", "getOriginalDn"]}, "focal_class": {"identifier": "RenameOperationRecorder", "superclass": "", "interfaces": "implements\n        CompensatingTransactionOperationRecorder", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(RenameOperationRecorder.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RenameOperationRecorder.class)", "var_name": "log"}, {"original_string": "private LdapOperations ldapOperations;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}], "methods": [{"identifier": "RenameOperationRecorder", "parameters": "(LdapOperations ldapOperations)", "modifiers": "public", "return": "", "signature": " RenameOperationRecorder(LdapOperations ldapOperations)", "full_signature": "public  RenameOperationRecorder(LdapOperations ldapOperations)", "class_method_signature": "RenameOperationRecorder.RenameOperationRecorder(LdapOperations ldapOperations)", "testcase": false, "constructor": true}, {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "RenameOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getLdapOperations", "parameters": "()", "modifiers": "", "return": "LdapOperations", "signature": "LdapOperations getLdapOperations()", "full_signature": " LdapOperations getLdapOperations()", "class_method_signature": "RenameOperationRecorder.getLdapOperations()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/RenameOperationRecorder.java"}, "focal_method": {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "body": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args) {\n        log.debug(\"Storing rollback information for rename operation\");\n        Assert.notEmpty(args);\n        if (args.length != 2) {\n            // This really shouldn't happen.\n            throw new IllegalArgumentException(\"Illegal argument length\");\n        }\n        Name oldDn = LdapTransactionUtils.getArgumentAsName(args[0]);\n        Name newDn = LdapTransactionUtils.getArgumentAsName(args[1]);\n        return new RenameOperationExecutor(ldapOperations, oldDn, newDn);\n    }", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "RenameOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false, "invocations": ["debug", "notEmpty", "getArgumentAsName", "getArgumentAsName"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}