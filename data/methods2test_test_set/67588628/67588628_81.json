{"test_class": {"identifier": "DefaultEdgeTraversalTest", "superclass": "extends AbstractTraversalTest", "interfaces": "", "fields": [], "file": "artemis-graph/src/test/java/org/jnosql/artemis/graph/DefaultEdgeTraversalTest.java"}, "test_case": {"identifier": "shouldReturnErrorWhenPredicateIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnErrorWhenPredicateIsNull() {\n        assertThrows(NullPointerException.class, () -> graphTemplate.getTraversalEdge().filter(null));\n    }", "signature": "void shouldReturnErrorWhenPredicateIsNull()", "full_signature": "@Test public void shouldReturnErrorWhenPredicateIsNull()", "class_method_signature": "DefaultEdgeTraversalTest.shouldReturnErrorWhenPredicateIsNull()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "filter", "getTraversalEdge"]}, "focal_class": {"identifier": "DefaultEdgeTraversal", "superclass": "extends AbstractEdgeTraversal", "interfaces": "implements EdgeTraversal", "fields": [], "methods": [{"identifier": "DefaultEdgeTraversal", "parameters": "(Supplier<GraphTraversal<?, ?>> supplier,\n                         Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>> flow,\n                         GraphConverter converter)", "modifiers": "", "return": "", "signature": " DefaultEdgeTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                         Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>> flow,\n                         GraphConverter converter)", "full_signature": "  DefaultEdgeTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                         Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>> flow,\n                         GraphConverter converter)", "class_method_signature": "DefaultEdgeTraversal.DefaultEdgeTraversal(Supplier<GraphTraversal<?, ?>> supplier,\n                         Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>> flow,\n                         GraphConverter converter)", "testcase": false, "constructor": true}, {"identifier": "has", "parameters": "(String propertyKey)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal has(String propertyKey)", "full_signature": "@Override public EdgeTraversal has(String propertyKey)", "class_method_signature": "DefaultEdgeTraversal.has(String propertyKey)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String propertyKey, Object value)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal has(String propertyKey, Object value)", "full_signature": "@Override public EdgeTraversal has(String propertyKey, Object value)", "class_method_signature": "DefaultEdgeTraversal.has(String propertyKey, Object value)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String propertyKey, P<?> predicate)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal has(String propertyKey, P<?> predicate)", "full_signature": "@Override public EdgeTraversal has(String propertyKey, P<?> predicate)", "class_method_signature": "DefaultEdgeTraversal.has(String propertyKey, P<?> predicate)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(T accessor, Object value)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal has(T accessor, Object value)", "full_signature": "@Override public EdgeTraversal has(T accessor, Object value)", "class_method_signature": "DefaultEdgeTraversal.has(T accessor, Object value)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(T accessor, P<?> predicate)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal has(T accessor, P<?> predicate)", "full_signature": "@Override public EdgeTraversal has(T accessor, P<?> predicate)", "class_method_signature": "DefaultEdgeTraversal.has(T accessor, P<?> predicate)", "testcase": false, "constructor": false}, {"identifier": "hasNot", "parameters": "(String propertyKey)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal hasNot(String propertyKey)", "full_signature": "@Override public EdgeTraversal hasNot(String propertyKey)", "class_method_signature": "DefaultEdgeTraversal.hasNot(String propertyKey)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<EdgeEntity> predicate)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal filter(Predicate<EdgeEntity> predicate)", "full_signature": "@Override public EdgeTraversal filter(Predicate<EdgeEntity> predicate)", "class_method_signature": "DefaultEdgeTraversal.filter(Predicate<EdgeEntity> predicate)", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(long limit)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal limit(long limit)", "full_signature": "@Override public EdgeTraversal limit(long limit)", "class_method_signature": "DefaultEdgeTraversal.limit(long limit)", "testcase": false, "constructor": false}, {"identifier": "range", "parameters": "(long start, long end)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal range(long start, long end)", "full_signature": "@Override public EdgeTraversal range(long start, long end)", "class_method_signature": "DefaultEdgeTraversal.range(long start, long end)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "()", "modifiers": "@Override public", "return": "EdgeRepeatTraversal", "signature": "EdgeRepeatTraversal repeat()", "full_signature": "@Override public EdgeRepeatTraversal repeat()", "class_method_signature": "DefaultEdgeTraversal.repeat()", "testcase": false, "constructor": false}, {"identifier": "inV", "parameters": "()", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal inV()", "full_signature": "@Override public VertexTraversal inV()", "class_method_signature": "DefaultEdgeTraversal.inV()", "testcase": false, "constructor": false}, {"identifier": "outV", "parameters": "()", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal outV()", "full_signature": "@Override public VertexTraversal outV()", "class_method_signature": "DefaultEdgeTraversal.outV()", "testcase": false, "constructor": false}, {"identifier": "bothV", "parameters": "()", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal bothV()", "full_signature": "@Override public VertexTraversal bothV()", "class_method_signature": "DefaultEdgeTraversal.bothV()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Optional<EdgeEntity>", "signature": "Optional<EdgeEntity> next()", "full_signature": "@Override public Optional<EdgeEntity> next()", "class_method_signature": "DefaultEdgeTraversal.next()", "testcase": false, "constructor": false}, {"identifier": "getSingleResult", "parameters": "()", "modifiers": "@Override public", "return": "Optional<EdgeEntity>", "signature": "Optional<EdgeEntity> getSingleResult()", "full_signature": "@Override public Optional<EdgeEntity> getSingleResult()", "class_method_signature": "DefaultEdgeTraversal.getSingleResult()", "testcase": false, "constructor": false}, {"identifier": "getResultList", "parameters": "()", "modifiers": "@Override public", "return": "List<EdgeEntity>", "signature": "List<EdgeEntity> getResultList()", "full_signature": "@Override public List<EdgeEntity> getResultList()", "class_method_signature": "DefaultEdgeTraversal.getResultList()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<EdgeEntity>", "signature": "Stream<EdgeEntity> stream()", "full_signature": "@Override public Stream<EdgeEntity> stream()", "class_method_signature": "DefaultEdgeTraversal.stream()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int limit)", "modifiers": "@Override public", "return": "Stream<EdgeEntity>", "signature": "Stream<EdgeEntity> next(int limit)", "full_signature": "@Override public Stream<EdgeEntity> next(int limit)", "class_method_signature": "DefaultEdgeTraversal.next(int limit)", "testcase": false, "constructor": false}, {"identifier": "valueMap", "parameters": "(String... propertyKeys)", "modifiers": "@Override public", "return": "ValueMapTraversal", "signature": "ValueMapTraversal valueMap(String... propertyKeys)", "full_signature": "@Override public ValueMapTraversal valueMap(String... propertyKeys)", "class_method_signature": "DefaultEdgeTraversal.valueMap(String... propertyKeys)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(String property)", "modifiers": "@Override public", "return": "EdgeTraversalOrder", "signature": "EdgeTraversalOrder orderBy(String property)", "full_signature": "@Override public EdgeTraversalOrder orderBy(String property)", "class_method_signature": "DefaultEdgeTraversal.orderBy(String property)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long count()", "full_signature": "@Override public long count()", "class_method_signature": "DefaultEdgeTraversal.count()", "testcase": false, "constructor": false}], "file": "artemis-graph/src/main/java/org/jnosql/artemis/graph/DefaultEdgeTraversal.java"}, "focal_method": {"identifier": "filter", "parameters": "(Predicate<EdgeEntity> predicate)", "modifiers": "@Override public", "return": "EdgeTraversal", "body": "@Override\n    public EdgeTraversal filter(Predicate<EdgeEntity> predicate) {\n        requireNonNull(predicate, \"predicat is required\");\n\n        Predicate<Traverser<Edge>> p = e -> predicate.test(converter.toEdgeEntity(e.get()));\n        return new DefaultEdgeTraversal(supplier, flow.andThen(g -> g.filter(p)), converter);\n    }", "signature": "EdgeTraversal filter(Predicate<EdgeEntity> predicate)", "full_signature": "@Override public EdgeTraversal filter(Predicate<EdgeEntity> predicate)", "class_method_signature": "DefaultEdgeTraversal.filter(Predicate<EdgeEntity> predicate)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "test", "toEdgeEntity", "get", "andThen", "filter"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}