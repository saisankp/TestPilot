{"test_class": {"identifier": "CheckExternalFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/CheckExternalFilterTest.java"}, "test_case": {"identifier": "tryToGetShouldWriteToExternalInstanceWithNullHeaderDefinitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToGetShouldWriteToExternalInstanceWithNullHeaderDefinitions() {\n        assertThatNullPointerException()\n                .isThrownBy(() -> CheckExternalFilter.shouldWriteToExternal(null))\n                .withMessage(\"The headerDefinitions must not be null!\")\n                .withNoCause();\n    }", "signature": "void tryToGetShouldWriteToExternalInstanceWithNullHeaderDefinitions()", "full_signature": "@Test public void tryToGetShouldWriteToExternalInstanceWithNullHeaderDefinitions()", "class_method_signature": "CheckExternalFilterTest.tryToGetShouldWriteToExternalInstanceWithNullHeaderDefinitions()", "testcase": true, "constructor": false, "invocations": ["withNoCause", "withMessage", "isThrownBy", "assertThatNullPointerException", "shouldWriteToExternal"]}, "focal_class": {"identifier": "CheckExternalFilter", "superclass": "extends AbstractHeaderEntryFilter", "interfaces": "", "fields": [{"original_string": "private final Map<String, HeaderDefinition> headerDefinitions;", "modifier": "private final", "type": "Map<String, HeaderDefinition>", "declarator": "headerDefinitions", "var_name": "headerDefinitions"}, {"original_string": "private final Predicate<HeaderDefinition> headerDefinitionPredicate;", "modifier": "private final", "type": "Predicate<HeaderDefinition>", "declarator": "headerDefinitionPredicate", "var_name": "headerDefinitionPredicate"}], "methods": [{"identifier": "CheckExternalFilter", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions,\n            final Predicate<HeaderDefinition> headerDefinitionPredicate)", "modifiers": "private", "return": "", "signature": " CheckExternalFilter(final Map<String, HeaderDefinition> headerDefinitions,\n            final Predicate<HeaderDefinition> headerDefinitionPredicate)", "full_signature": "private  CheckExternalFilter(final Map<String, HeaderDefinition> headerDefinitions,\n            final Predicate<HeaderDefinition> headerDefinitionPredicate)", "class_method_signature": "CheckExternalFilter.CheckExternalFilter(final Map<String, HeaderDefinition> headerDefinitions,\n            final Predicate<HeaderDefinition> headerDefinitionPredicate)", "testcase": false, "constructor": true}, {"identifier": "shouldReadFromExternal", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "CheckExternalFilter", "signature": "CheckExternalFilter shouldReadFromExternal(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static CheckExternalFilter shouldReadFromExternal(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "CheckExternalFilter.shouldReadFromExternal(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "shouldWriteToExternal", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "CheckExternalFilter", "signature": "CheckExternalFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static CheckExternalFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "CheckExternalFilter.shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "existsAsHeaderDefinition", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "CheckExternalFilter", "signature": "CheckExternalFilter existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static CheckExternalFilter existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "CheckExternalFilter.existsAsHeaderDefinition(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "()", "modifiers": "private static", "return": "Predicate<HeaderDefinition>", "signature": "Predicate<HeaderDefinition> isNull()", "full_signature": "private static Predicate<HeaderDefinition> isNull()", "class_method_signature": "CheckExternalFilter.isNull()", "testcase": false, "constructor": false}, {"identifier": "filterValue", "parameters": "(final String key, final String value)", "modifiers": "@Nullable @Override protected", "return": "String", "signature": "String filterValue(final String key, final String value)", "full_signature": "@Nullable @Override protected String filterValue(final String key, final String value)", "class_method_signature": "CheckExternalFilter.filterValue(final String key, final String value)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/CheckExternalFilter.java"}, "focal_method": {"identifier": "shouldWriteToExternal", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "CheckExternalFilter", "body": "public static CheckExternalFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions) {\n        return new CheckExternalFilter(headerDefinitions,\n                isNull().or(HeaderDefinition::shouldWriteToExternalHeaders));\n    }", "signature": "CheckExternalFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static CheckExternalFilter shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "CheckExternalFilter.shouldWriteToExternal(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false, "invocations": ["or", "isNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}