{"test_class": {"identifier": "DateFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateFunction dateFunction;", "modifier": "private", "type": "DateFunction", "declarator": "dateFunction", "var_name": "dateFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/DateFunctionTest.java"}, "test_case": {"identifier": "invokeParamYearMonthDay", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeParamYearMonthDay() {\n        FunctionTestUtil.assertResult(dateFunction.invoke(2017, 6, 12), LocalDate.of(2017, 6, 12));\n    }", "signature": "void invokeParamYearMonthDay()", "full_signature": "@Test public void invokeParamYearMonthDay()", "class_method_signature": "DateFunctionTest.invokeParamYearMonthDay()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "of"]}, "focal_class": {"identifier": "DateFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final Pattern BEGIN_YEAR = Pattern.compile(\"^-?(([1-9]\\\\d\\\\d\\\\d+)|(0\\\\d\\\\d\\\\d))-\");", "modifier": "public static final", "type": "Pattern", "declarator": "BEGIN_YEAR = Pattern.compile(\"^-?(([1-9]\\\\d\\\\d\\\\d+)|(0\\\\d\\\\d\\\\d))-\")", "var_name": "BEGIN_YEAR"}, {"original_string": "public static final DateTimeFormatter FEEL_DATE;", "modifier": "public static final", "type": "DateTimeFormatter", "declarator": "FEEL_DATE", "var_name": "FEEL_DATE"}], "methods": [{"identifier": "DateFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " DateFunction()", "full_signature": "public  DateFunction()", "class_method_signature": "DateFunction.DateFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"from\" ) String val)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) String val)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) String val)", "class_method_signature": "DateFunction.invoke(@ParameterName( \"from\" ) String val)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"year\" ) Number year, @ParameterName( \"month\" ) Number month, @ParameterName( \"day\" ) Number day)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"year\" ) Number year, @ParameterName( \"month\" ) Number month, @ParameterName( \"day\" ) Number day)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"year\" ) Number year, @ParameterName( \"month\" ) Number month, @ParameterName( \"day\" ) Number day)", "class_method_signature": "DateFunction.invoke(@ParameterName( \"year\" ) Number year, @ParameterName( \"month\" ) Number month, @ParameterName( \"day\" ) Number day)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"from\" ) TemporalAccessor date)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) TemporalAccessor date)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) TemporalAccessor date)", "class_method_signature": "DateFunction.invoke(@ParameterName( \"from\" ) TemporalAccessor date)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/DateFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"from\" ) String val)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "body": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) String val) {\n        if ( val == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"cannot be null\"));\n        }\n        if (!BEGIN_YEAR.matcher(val).find()) { // please notice the regex strictly requires the beginning, so we can use find.\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"year not compliant with XML Schema Part 2 Datatypes\"));\n        }\n        \n        try {\n            return FEELFnResult.ofResult(LocalDate.from(FEEL_DATE.parse(val)));\n        } catch (DateTimeException e) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"date\", e));\n        }\n    }", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) String val)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName( \"from\" ) String val)", "class_method_signature": "DateFunction.invoke(@ParameterName( \"from\" ) String val)", "testcase": false, "constructor": false, "invocations": ["ofError", "find", "matcher", "ofError", "ofResult", "from", "parse", "ofError"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}