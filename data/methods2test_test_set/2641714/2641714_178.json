{"test_class": {"identifier": "TilesContextELResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ELResolver beanElResolver;", "modifier": "private", "type": "ELResolver", "declarator": "beanElResolver", "var_name": "beanElResolver"}, {"original_string": "private TilesContextELResolver resolver;", "modifier": "private", "type": "TilesContextELResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "tiles-el/src/test/java/org/apache/tiles/el/TilesContextELResolverTest.java"}, "test_case": {"identifier": "testGetType", "parameters": "()", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public", "return": "void", "body": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testGetType() {\n        ELContext elContext = createMock(ELContext.class);\n        Request request = createMock(Request.class);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n\n        expect(elContext.getContext(Request.class)).andReturn(request);\n        expect(elContext.getContext(ApplicationContext.class)).andReturn(applicationContext);\n        expect(beanElResolver.getType(elContext, request, \"responseCommitted\")).andReturn((Class) Boolean.class);\n        expect(beanElResolver.getType(elContext, applicationContext, \"initParams\")).andReturn((Class) Map.class);\n        elContext.setPropertyResolved(true);\n        expectLastCall().times(2);\n\n        replay(beanElResolver, elContext, request, applicationContext);\n        assertNull(resolver.getType(elContext, new Integer(1), \"whatever\"));\n        assertEquals(Boolean.class, resolver.getType(elContext, null, \"responseCommitted\"));\n        assertEquals(Map.class, resolver.getType(elContext, null, \"initParams\"));\n        verify(beanElResolver, elContext, request, applicationContext);\n    }", "signature": "void testGetType()", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public void testGetType()", "class_method_signature": "TilesContextELResolverTest.testGetType()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "andReturn", "expect", "getContext", "andReturn", "expect", "getContext", "andReturn", "expect", "getType", "andReturn", "expect", "getType", "setPropertyResolved", "times", "expectLastCall", "replay", "assertNull", "getType", "assertEquals", "getType", "assertEquals", "getType", "verify"]}, "focal_class": {"identifier": "TilesContextELResolver", "superclass": "extends ELResolver", "interfaces": "", "fields": [{"original_string": "private ELResolver beanElResolver;", "modifier": "private", "type": "ELResolver", "declarator": "beanElResolver", "var_name": "beanElResolver"}, {"original_string": "private CombinedBeanInfo requestBeanInfo = new CombinedBeanInfo(\n            Request.class, ApplicationContext.class);", "modifier": "private", "type": "CombinedBeanInfo", "declarator": "requestBeanInfo = new CombinedBeanInfo(\n            Request.class, ApplicationContext.class)", "var_name": "requestBeanInfo"}], "methods": [{"identifier": "TilesContextELResolver", "parameters": "(ELResolver beanElResolver)", "modifiers": "public", "return": "", "signature": " TilesContextELResolver(ELResolver beanElResolver)", "full_signature": "public  TilesContextELResolver(ELResolver beanElResolver)", "class_method_signature": "TilesContextELResolver.TilesContextELResolver(ELResolver beanElResolver)", "testcase": false, "constructor": true}, {"identifier": "getCommonPropertyType", "parameters": "(ELContext context, Object base)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getCommonPropertyType(ELContext context, Object base)", "full_signature": "@Override public Class<?> getCommonPropertyType(ELContext context, Object base)", "class_method_signature": "TilesContextELResolver.getCommonPropertyType(ELContext context, Object base)", "testcase": false, "constructor": false}, {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n            Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "class_method_signature": "TilesContextELResolver.getFeatureDescriptors(ELContext context,\n            Object base)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(ELContext context, Object base, Object property)", "full_signature": "@Override public boolean isReadOnly(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextELResolver.isReadOnly(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ELContext context, Object base, Object property,\n            Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(ELContext context, Object base, Object property,\n            Object value)", "full_signature": "@Override public void setValue(ELContext context, Object base, Object property,\n            Object value)", "class_method_signature": "TilesContextELResolver.setValue(ELContext context, Object base, Object property,\n            Object value)", "testcase": false, "constructor": false}], "file": "tiles-el/src/main/java/org/apache/tiles/el/TilesContextELResolver.java"}, "focal_method": {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "body": "@Override\n    public Class<?> getType(ELContext context, Object base, Object property) {\n        // only resolve at the root of the context\n        if (base != null) {\n            return null;\n        }\n\n        Class<?> retValue = null;\n        if (requestBeanInfo.getProperties(Request.class).contains(property)) {\n            Request request = (Request) context\n                    .getContext(Request.class);\n            retValue = beanElResolver.getType(context, request, property);\n        } else if (requestBeanInfo.getProperties(ApplicationContext.class).contains(property)) {\n            ApplicationContext applicationContext = (ApplicationContext) context\n                    .getContext(ApplicationContext.class);\n            retValue = beanElResolver.getType(context, applicationContext, property);\n        }\n\n        if (retValue != null) {\n            context.setPropertyResolved(true);\n        }\n\n        return retValue;\n    }", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "TilesContextELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false, "invocations": ["contains", "getProperties", "getContext", "getType", "contains", "getProperties", "getContext", "getType", "setPropertyResolved"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}