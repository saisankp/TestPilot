{"test_class": {"identifier": "TanimotoTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "boolean standAlone = false;", "modifier": "", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/similarity/TanimotoTest.java"}, "test_case": {"identifier": "keggR00258", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void keggR00258() throws java.lang.Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        String smiles1 = \"O=C(O)CCC(=O)C(=O)O\";\n        String smiles2 = \"O=C(O)C(N)CCC(=O)O\";\n        String smiles3 = \"O=C(O)C(N)C\";\n        String smiles4 = \"CC(=O)C(=O)O\";\n        IAtomContainer molecule1 = sp.parseSmiles(smiles1);\n        IAtomContainer molecule2 = sp.parseSmiles(smiles2);\n        IAtomContainer molecule3 = sp.parseSmiles(smiles3);\n        IAtomContainer molecule4 = sp.parseSmiles(smiles4);\n        Fingerprinter fingerprinter = new Fingerprinter(1024, 6);\n        BitSet bs1 = fingerprinter.getBitFingerprint(molecule1).asBitSet();\n        BitSet bs2 = fingerprinter.getBitFingerprint(molecule2).asBitSet();\n        BitSet bs3 = fingerprinter.getBitFingerprint(molecule3).asBitSet();\n        BitSet bs4 = fingerprinter.getBitFingerprint(molecule4).asBitSet();\n\n        assertThat((double) Tanimoto.calculate(bs1, bs2), is(closeTo(0.75, 0.1)));\n        assertThat((double) Tanimoto.calculate(bs1, bs3), is(closeTo(0.46, 0.1)));\n        assertThat((double) Tanimoto.calculate(bs1, bs4), is(closeTo(0.52, 0.1)));\n        assertThat((double) Tanimoto.calculate(bs2, bs3), is(closeTo(0.53, 0.1)));\n        assertThat((double) Tanimoto.calculate(bs2, bs4), is(closeTo(0.42, 0.1)));\n        assertThat((double) Tanimoto.calculate(bs3, bs4), is(closeTo(0.8, 0.1)));\n    }", "signature": "void keggR00258()", "full_signature": "@Test public void keggR00258()", "class_method_signature": "TanimotoTest.keggR00258()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "parseSmiles", "parseSmiles", "parseSmiles", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "assertThat", "calculate", "is", "closeTo", "assertThat", "calculate", "is", "closeTo", "assertThat", "calculate", "is", "closeTo", "assertThat", "calculate", "is", "closeTo", "assertThat", "calculate", "is", "closeTo", "assertThat", "calculate", "is", "closeTo"]}, "focal_class": {"identifier": "Tanimoto", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Tanimoto", "parameters": "()", "modifiers": "private", "return": "", "signature": " Tanimoto()", "full_signature": "private  Tanimoto()", "class_method_signature": "Tanimoto.Tanimoto()", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(BitSet bitset1, BitSet bitset2)", "modifiers": "public static", "return": "float", "signature": "float calculate(BitSet bitset1, BitSet bitset2)", "full_signature": "public static float calculate(BitSet bitset1, BitSet bitset2)", "class_method_signature": "Tanimoto.calculate(BitSet bitset1, BitSet bitset2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "modifiers": "public static", "return": "double", "signature": "double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "full_signature": "public static double calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "class_method_signature": "Tanimoto.calculate(IBitFingerprint fingerprint1, IBitFingerprint fingerprint2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(double[] features1, double[] features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(double[] features1, double[] features2)", "full_signature": "public static float calculate(double[] features1, double[] features2)", "class_method_signature": "Tanimoto.calculate(double[] features1, double[] features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Map<String, Integer> features1, Map<String, Integer> features2)", "modifiers": "public static", "return": "float", "signature": "float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "full_signature": "public static float calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "class_method_signature": "Tanimoto.calculate(Map<String, Integer> features1, Map<String, Integer> features2)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.calculate(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method1", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method1(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method1(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}, {"identifier": "method2", "parameters": "(ICountFingerprint fp1, ICountFingerprint fp2)", "modifiers": "public static", "return": "double", "signature": "double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "full_signature": "public static double method2(ICountFingerprint fp1, ICountFingerprint fp2)", "class_method_signature": "Tanimoto.method2(ICountFingerprint fp1, ICountFingerprint fp2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/similarity/Tanimoto.java"}, "focal_method": {"identifier": "calculate", "parameters": "(BitSet bitset1, BitSet bitset2)", "modifiers": "public static", "return": "float", "body": "public static float calculate(BitSet bitset1, BitSet bitset2) throws CDKException {\n        float _bitset1_cardinality = bitset1.cardinality();\n        float _bitset2_cardinality = bitset2.cardinality();\n        if (bitset1.size() != bitset2.size()) {\n            throw new CDKException(\"Bitsets must have the same bit length\");\n        }\n        BitSet one_and_two = (BitSet) bitset1.clone();\n        one_and_two.and(bitset2);\n        float _common_bit_count = one_and_two.cardinality();\n        return _common_bit_count / (_bitset1_cardinality + _bitset2_cardinality - _common_bit_count);\n    }", "signature": "float calculate(BitSet bitset1, BitSet bitset2)", "full_signature": "public static float calculate(BitSet bitset1, BitSet bitset2)", "class_method_signature": "Tanimoto.calculate(BitSet bitset1, BitSet bitset2)", "testcase": false, "constructor": false, "invocations": ["cardinality", "cardinality", "size", "size", "clone", "and", "cardinality"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}