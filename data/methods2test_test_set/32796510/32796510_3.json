{"test_class": {"identifier": "RegexModifierTest", "superclass": "extends AbstractRegexModifierTest", "interfaces": "", "fields": [], "file": "streamflyer-core/src/test/java/com/github/rwitzel/streamflyer/regex/RegexModifierTest.java"}, "test_case": {"identifier": "testExampleFromRegexModifierJavadoc_OwnMatchProcessor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExampleFromRegexModifierJavadoc_OwnMatchProcessor() throws Exception {\n\n        String fakeErrorLog = \"1 ERROR aa\\n2 WARN bb\\n3 ERROR cc\";\n\n        // choose the character stream to modify\n        Reader originalReader = new StringReader( //\n                fakeErrorLog);\n\n        // select the modifier\n        Modifier myModifier = new RegexModifier(\"^.*ERROR.*$\", Pattern.MULTILINE, new MatchPrinter(), 0, 2048);\n\n        // create the modifying reader that wraps the original reader\n        Reader modifyingReader = new ModifyingReader(originalReader, myModifier);\n\n        // use the modifying reader instead of the original reader\n        String output = IOUtils.toString(modifyingReader);\n        // stream content is not modified\n        assertEquals(fakeErrorLog, output);\n    }", "signature": "void testExampleFromRegexModifierJavadoc_OwnMatchProcessor()", "full_signature": "@Test public void testExampleFromRegexModifierJavadoc_OwnMatchProcessor()", "class_method_signature": "RegexModifierTest.testExampleFromRegexModifierJavadoc_OwnMatchProcessor()", "testcase": true, "constructor": false, "invocations": ["toString", "assertEquals"]}, "focal_class": {"identifier": "RegexModifier", "superclass": "", "interfaces": "implements Modifier", "fields": [{"original_string": "protected ModificationFactory factory;", "modifier": "protected", "type": "ModificationFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected MatchProcessor matchProcessor;", "modifier": "protected", "type": "MatchProcessor", "declarator": "matchProcessor", "var_name": "matchProcessor"}, {"original_string": "protected OnStreamMatcher matcher;", "modifier": "protected", "type": "OnStreamMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "protected int newNumberOfChars = -1;", "modifier": "protected", "type": "int", "declarator": "newNumberOfChars = -1", "var_name": "newNumberOfChars"}, {"original_string": "private int unseenCharactersToSkip = 0;", "modifier": "private", "type": "int", "declarator": "unseenCharactersToSkip = 0", "var_name": "unseenCharactersToSkip"}], "methods": [{"identifier": "RegexModifier", "parameters": "()", "modifiers": "protected", "return": "", "signature": " RegexModifier()", "full_signature": "protected  RegexModifier()", "class_method_signature": "RegexModifier.RegexModifier()", "testcase": false, "constructor": true}, {"identifier": "RegexModifier", "parameters": "(String regex, int flags, String replacement)", "modifiers": "public", "return": "", "signature": " RegexModifier(String regex, int flags, String replacement)", "full_signature": "public  RegexModifier(String regex, int flags, String replacement)", "class_method_signature": "RegexModifier.RegexModifier(String regex, int flags, String replacement)", "testcase": false, "constructor": true}, {"identifier": "RegexModifier", "parameters": "(String regex, int flags, String replacement, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "modifiers": "public", "return": "", "signature": " RegexModifier(String regex, int flags, String replacement, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "full_signature": "public  RegexModifier(String regex, int flags, String replacement, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "class_method_signature": "RegexModifier.RegexModifier(String regex, int flags, String replacement, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "testcase": false, "constructor": true}, {"identifier": "RegexModifier", "parameters": "(String regex, int flags, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "modifiers": "public", "return": "", "signature": " RegexModifier(String regex, int flags, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "full_signature": "public  RegexModifier(String regex, int flags, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "class_method_signature": "RegexModifier.RegexModifier(String regex, int flags, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "testcase": false, "constructor": true}, {"identifier": "RegexModifier", "parameters": "(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "modifiers": "public", "return": "", "signature": " RegexModifier(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "full_signature": "public  RegexModifier(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "class_method_signature": "RegexModifier.RegexModifier(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "modifiers": "@SuppressWarnings(\"hiding\") protected", "return": "void", "signature": "void init(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "full_signature": "@SuppressWarnings(\"hiding\") protected void init(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "class_method_signature": "RegexModifier.init(OnStreamMatcher matcher, MatchProcessor matchProcessor, int minimumLengthOfLookBehind,\n            int newNumberOfChars)", "testcase": false, "constructor": false}, {"identifier": "modify", "parameters": "(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "modifiers": "@Override public", "return": "AfterModification", "signature": "AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "full_signature": "@Override public AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "class_method_signature": "RegexModifier.modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "testcase": false, "constructor": false}, {"identifier": "__checkpoint", "parameters": "(Object... checkpointDescription)", "modifiers": "protected", "return": "boolean", "signature": "boolean __checkpoint(Object... checkpointDescription)", "full_signature": "protected boolean __checkpoint(Object... checkpointDescription)", "class_method_signature": "RegexModifier.__checkpoint(Object... checkpointDescription)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RegexModifier.toString()", "testcase": false, "constructor": false}, {"identifier": "setMatchProcessor", "parameters": "(MatchProcessor matchProcessor)", "modifiers": "public", "return": "void", "signature": "void setMatchProcessor(MatchProcessor matchProcessor)", "full_signature": "public void setMatchProcessor(MatchProcessor matchProcessor)", "class_method_signature": "RegexModifier.setMatchProcessor(MatchProcessor matchProcessor)", "testcase": false, "constructor": false}], "file": "streamflyer-core/src/main/java/com/github/rwitzel/streamflyer/regex/RegexModifier.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"RegexModifier [\\nfactory=\");\n        builder.append(factory);\n        builder.append(\", \\nreplacement=\");\n        builder.append(matchProcessor);\n        builder.append(\", \\nmatcher=\");\n        builder.append(matcher);\n        builder.append(\", \\nnewNumberOfChars=\");\n        builder.append(newNumberOfChars);\n        builder.append(\"]\");\n        return builder.toString();\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RegexModifier.toString()", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 32796510, "url": "https://github.com/rwitzel/streamflyer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 26, "size": 2880, "license": "licensed"}}