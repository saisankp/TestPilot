{"test_class": {"identifier": "GraphsPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    GraphsPresenter presenter;", "modifier": "@InjectMocks", "type": "GraphsPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    GraphsInteractor interactor;", "modifier": "@Mock", "type": "GraphsInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    GraphsView graphsView;", "modifier": "@Mock", "type": "GraphsView", "declarator": "graphsView", "var_name": "graphsView"}, {"original_string": "@Mock\n    DatabaseAssistant databaseAssistant;", "modifier": "@Mock", "type": "DatabaseAssistant", "declarator": "databaseAssistant", "var_name": "databaseAssistant"}, {"original_string": "@Mock\n    UserPreferenceManager preferenceManager;", "modifier": "@Mock", "type": "UserPreferenceManager", "declarator": "preferenceManager", "var_name": "preferenceManager"}, {"original_string": "@Mock\n    Trip trip;", "modifier": "@Mock", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "private List<LabeledGraphEntry> labeledEntries = Arrays.asList(new LabeledGraphEntry(0, \"str1\"), new LabeledGraphEntry(1, \"str2\"));", "modifier": "private", "type": "List<LabeledGraphEntry>", "declarator": "labeledEntries = Arrays.asList(new LabeledGraphEntry(0, \"str1\"), new LabeledGraphEntry(1, \"str2\"))", "var_name": "labeledEntries"}, {"original_string": "private List<Entry> entries = Arrays.asList(new Entry(0, 0), new Entry(1, 1));", "modifier": "private", "type": "List<Entry>", "declarator": "entries = Arrays.asList(new Entry(0, 0), new Entry(1, 1))", "var_name": "entries"}, {"original_string": "private GraphUiIndicator sumByCategoryIndicator = GraphUiIndicator.summationByCategory(labeledEntries);", "modifier": "private", "type": "GraphUiIndicator", "declarator": "sumByCategoryIndicator = GraphUiIndicator.summationByCategory(labeledEntries)", "var_name": "sumByCategoryIndicator"}, {"original_string": "private GraphUiIndicator sumByPaymentMethodIndicator = GraphUiIndicator.summationByPaymentMethod(labeledEntries);", "modifier": "private", "type": "GraphUiIndicator", "declarator": "sumByPaymentMethodIndicator = GraphUiIndicator.summationByPaymentMethod(labeledEntries)", "var_name": "sumByPaymentMethodIndicator"}, {"original_string": "private GraphUiIndicator sumByReimbursementIndicator = GraphUiIndicator.summationByReimbursement(labeledEntries);", "modifier": "private", "type": "GraphUiIndicator", "declarator": "sumByReimbursementIndicator = GraphUiIndicator.summationByReimbursement(labeledEntries)", "var_name": "sumByReimbursementIndicator"}, {"original_string": "private GraphUiIndicator sumByDateIndicator = GraphUiIndicator.summationByDate(entries);", "modifier": "private", "type": "GraphUiIndicator", "declarator": "sumByDateIndicator = GraphUiIndicator.summationByDate(entries)", "var_name": "sumByDateIndicator"}], "file": "app/src/test/java/co/smartreceipts/android/graphs/GraphsPresenterTest.java"}, "test_case": {"identifier": "showEmptyText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void showEmptyText() {\n        when(databaseAssistant.isReceiptsTableEmpty(trip)).thenReturn(Single.just(true));\n        when(interactor.getSummationByCategories(trip)).thenReturn(Maybe.empty());\n        when(interactor.getSummationByPaymentMethod(trip)).thenReturn(Maybe.empty());\n        when(interactor.getSummationByDate(trip)).thenReturn(Maybe.empty());\n        when(interactor.getSummationByReimbursement(trip)).thenReturn(Maybe.empty());\n\n        presenter.subscribe(trip);\n\n        verify(graphsView).showEmptyText(true);\n        verify(graphsView, never()).present(any());\n    }", "signature": "void showEmptyText()", "full_signature": "@Test public void showEmptyText()", "class_method_signature": "GraphsPresenterTest.showEmptyText()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isReceiptsTableEmpty", "just", "thenReturn", "when", "getSummationByCategories", "empty", "thenReturn", "when", "getSummationByPaymentMethod", "empty", "thenReturn", "when", "getSummationByDate", "empty", "thenReturn", "when", "getSummationByReimbursement", "empty", "subscribe", "showEmptyText", "verify", "present", "verify", "never", "any"]}, "focal_class": {"identifier": "GraphsPresenter", "superclass": "extends BaseViperPresenter<GraphsView, GraphsInteractor>", "interfaces": "", "fields": [{"original_string": "private final UserPreferenceManager preferenceManager;", "modifier": "private final", "type": "UserPreferenceManager", "declarator": "preferenceManager", "var_name": "preferenceManager"}, {"original_string": "private final DatabaseAssistant databaseAssistant;", "modifier": "private final", "type": "DatabaseAssistant", "declarator": "databaseAssistant", "var_name": "databaseAssistant"}, {"original_string": "private Trip trip;", "modifier": "private", "type": "Trip", "declarator": "trip", "var_name": "trip"}], "methods": [{"identifier": "GraphsPresenter", "parameters": "(GraphsView view, GraphsInteractor interactor, UserPreferenceManager preferences,\n                           DatabaseAssistant databaseAssistant)", "modifiers": "@Inject public", "return": "", "signature": " GraphsPresenter(GraphsView view, GraphsInteractor interactor, UserPreferenceManager preferences,\n                           DatabaseAssistant databaseAssistant)", "full_signature": "@Inject public  GraphsPresenter(GraphsView view, GraphsInteractor interactor, UserPreferenceManager preferences,\n                           DatabaseAssistant databaseAssistant)", "class_method_signature": "GraphsPresenter.GraphsPresenter(GraphsView view, GraphsInteractor interactor, UserPreferenceManager preferences,\n                           DatabaseAssistant databaseAssistant)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "(Trip trip)", "modifiers": "public", "return": "void", "signature": "void subscribe(Trip trip)", "full_signature": "public void subscribe(Trip trip)", "class_method_signature": "GraphsPresenter.subscribe(Trip trip)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "GraphsPresenter.subscribe()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/graphs/GraphsPresenter.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Trip trip)", "modifiers": "public", "return": "void", "body": "public void subscribe(Trip trip) {\n        this.trip = Preconditions.checkNotNull(trip);\n\n        subscribe();\n    }", "signature": "void subscribe(Trip trip)", "full_signature": "public void subscribe(Trip trip)", "class_method_signature": "GraphsPresenter.subscribe(Trip trip)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "subscribe"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}