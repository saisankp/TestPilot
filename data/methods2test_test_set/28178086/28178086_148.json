{"test_class": {"identifier": "TramoSeatsProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/sa/processors/TramoSeatsProcessorTest.java"}, "test_case": {"identifier": "testOutliers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOutliers() {\n        TramoSeatsSpecification xspec = TramoSeatsSpecification.RSA4.clone();\n        TsPeriodSelector sel = new TsPeriodSelector();\n        sel.excluding(0, 24);\n//        sel.all();\n        xspec.getTramoSpecification().getTransform().setSpan(sel);\n        xspec.getTramoSpecification().getRegression().add(new OutlierDefinition(new Day(1993, Month.May, 0), \"AO\"));\n        xspec.getTramoSpecification().getOutliers().setCriticalValue(3.5);\n        TramoSeatsProcessor processor = new TramoSeatsProcessor();\n        CompositeResults rslt = processor.generateProcessing(xspec, null).process(Data.P);\n        PreprocessingModel model = rslt.get(\"preprocessing\", PreprocessingModel.class);\n        assertTrue(model.description.getOutliers().size()>1);\n    }", "signature": "void testOutliers()", "full_signature": "@Test public void testOutliers()", "class_method_signature": "TramoSeatsProcessorTest.testOutliers()", "testcase": true, "constructor": false, "invocations": ["clone", "excluding", "setSpan", "getTransform", "getTramoSpecification", "add", "getRegression", "getTramoSpecification", "setCriticalValue", "getOutliers", "getTramoSpecification", "process", "generateProcessing", "get", "assertTrue", "size", "getOutliers"]}, "focal_class": {"identifier": "TramoSeatsProcessor", "superclass": "", "interfaces": "implements ISaProcessingFactory<TramoSeatsSpecification>", "fields": [{"original_string": "public static final AlgorithmDescriptor DESCRIPTOR = TramoSeatsProcessingFactory.DESCRIPTOR;", "modifier": "public static final", "type": "AlgorithmDescriptor", "declarator": "DESCRIPTOR = TramoSeatsProcessingFactory.DESCRIPTOR", "var_name": "DESCRIPTOR"}], "methods": [{"identifier": "TramoSeatsProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TramoSeatsProcessor()", "full_signature": "public  TramoSeatsProcessor()", "class_method_signature": "TramoSeatsProcessor.TramoSeatsProcessor()", "testcase": false, "constructor": true}, {"identifier": "createSpecification", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "ISaSpecification", "signature": "ISaSpecification createSpecification(InformationSet info)", "full_signature": "@Override public ISaSpecification createSpecification(InformationSet info)", "class_method_signature": "TramoSeatsProcessor.createSpecification(InformationSet info)", "testcase": false, "constructor": false}, {"identifier": "createSpecification", "parameters": "(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan)", "modifiers": "@Override public", "return": "ISaSpecification", "signature": "ISaSpecification createSpecification(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan)", "full_signature": "@Override public ISaSpecification createSpecification(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan)", "class_method_signature": "TramoSeatsProcessor.createSpecification(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan)", "testcase": false, "constructor": false}, {"identifier": "refreshArimaSpec", "parameters": "(TramoSpecification spec, TramoSpecification defspec, EstimationPolicyType policy)", "modifiers": "private", "return": "void", "signature": "void refreshArimaSpec(TramoSpecification spec, TramoSpecification defspec, EstimationPolicyType policy)", "full_signature": "private void refreshArimaSpec(TramoSpecification spec, TramoSpecification defspec, EstimationPolicyType policy)", "class_method_signature": "TramoSeatsProcessor.refreshArimaSpec(TramoSpecification spec, TramoSpecification defspec, EstimationPolicyType policy)", "testcase": false, "constructor": false}, {"identifier": "refreshOutliersSpec", "parameters": "(TramoSpecification spec, TramoSpecification defspec, TsDomain frozen, EstimationPolicyType policy)", "modifiers": "private", "return": "void", "signature": "void refreshOutliersSpec(TramoSpecification spec, TramoSpecification defspec, TsDomain frozen, EstimationPolicyType policy)", "full_signature": "private void refreshOutliersSpec(TramoSpecification spec, TramoSpecification defspec, TsDomain frozen, EstimationPolicyType policy)", "class_method_signature": "TramoSeatsProcessor.refreshOutliersSpec(TramoSpecification spec, TramoSpecification defspec, TsDomain frozen, EstimationPolicyType policy)", "testcase": false, "constructor": false}, {"identifier": "updatePointSpecification", "parameters": "(SaItem item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePointSpecification(SaItem item)", "full_signature": "@Override public boolean updatePointSpecification(SaItem item)", "class_method_signature": "TramoSeatsProcessor.updatePointSpecification(SaItem item)", "testcase": false, "constructor": false}, {"identifier": "createDocument", "parameters": "()", "modifiers": "@Override public", "return": "SaDocument<?>", "signature": "SaDocument<?> createDocument()", "full_signature": "@Override public SaDocument<?> createDocument()", "class_method_signature": "TramoSeatsProcessor.createDocument()", "testcase": false, "constructor": false}, {"identifier": "defaultSpecifications", "parameters": "()", "modifiers": "@Override public", "return": "List<ISaSpecification>", "signature": "List<ISaSpecification> defaultSpecifications()", "full_signature": "@Override public List<ISaSpecification> defaultSpecifications()", "class_method_signature": "TramoSeatsProcessor.defaultSpecifications()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "TramoSeatsProcessor.dispose()", "testcase": false, "constructor": false}, {"identifier": "getInformation", "parameters": "()", "modifiers": "@Override public", "return": "AlgorithmDescriptor", "signature": "AlgorithmDescriptor getInformation()", "full_signature": "@Override public AlgorithmDescriptor getInformation()", "class_method_signature": "TramoSeatsProcessor.getInformation()", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(IProcSpecification spec)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(IProcSpecification spec)", "full_signature": "@Override public boolean canHandle(IProcSpecification spec)", "class_method_signature": "TramoSeatsProcessor.canHandle(IProcSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "generateProcessing", "parameters": "(TramoSeatsSpecification specification, ProcessingContext context)", "modifiers": "@Override public", "return": "IProcessing<TsData, CompositeResults>", "signature": "IProcessing<TsData, CompositeResults> generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "full_signature": "@Override public IProcessing<TsData, CompositeResults> generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "class_method_signature": "TramoSeatsProcessor.generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "testcase": false, "constructor": false}, {"identifier": "getSpecificationDictionary", "parameters": "(Class<TramoSeatsSpecification> specClass)", "modifiers": "@Override public", "return": "Map<String, Class>", "signature": "Map<String, Class> getSpecificationDictionary(Class<TramoSeatsSpecification> specClass)", "full_signature": "@Override public Map<String, Class> getSpecificationDictionary(Class<TramoSeatsSpecification> specClass)", "class_method_signature": "TramoSeatsProcessor.getSpecificationDictionary(Class<TramoSeatsSpecification> specClass)", "testcase": false, "constructor": false}, {"identifier": "getOutputDictionary", "parameters": "(boolean compact)", "modifiers": "@Override public", "return": "Map<String, Class>", "signature": "Map<String, Class> getOutputDictionary(boolean compact)", "full_signature": "@Override public Map<String, Class> getOutputDictionary(boolean compact)", "class_method_signature": "TramoSeatsProcessor.getOutputDictionary(boolean compact)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/sa/processors/TramoSeatsProcessor.java"}, "focal_method": {"identifier": "generateProcessing", "parameters": "(TramoSeatsSpecification specification, ProcessingContext context)", "modifiers": "@Override public", "return": "IProcessing<TsData, CompositeResults>", "body": "@Override\n    public IProcessing<TsData, CompositeResults> generateProcessing(TramoSeatsSpecification specification, ProcessingContext context) {\n        return TramoSeatsProcessingFactory.instance.generateProcessing(specification, context);\n    }", "signature": "IProcessing<TsData, CompositeResults> generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "full_signature": "@Override public IProcessing<TsData, CompositeResults> generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "class_method_signature": "TramoSeatsProcessor.generateProcessing(TramoSeatsSpecification specification, ProcessingContext context)", "testcase": false, "constructor": false, "invocations": ["generateProcessing"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}