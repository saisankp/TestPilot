{"test_class": {"identifier": "AndroidJsonHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AndroidJsonHandler handler;", "modifier": "private", "type": "AndroidJsonHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock\n    private AndroidJsonHandler.JsonObjectManager mockJsonObjectManager;", "modifier": "@Mock\n    private", "type": "AndroidJsonHandler.JsonObjectManager", "declarator": "mockJsonObjectManager", "var_name": "mockJsonObjectManager"}, {"original_string": "@Captor\n    private ArgumentCaptor<Map<String, ?>> mapArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Map<String, ?>>", "declarator": "mapArgumentCaptor", "var_name": "mapArgumentCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<Collection<?>> collectionArgumentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Collection<?>>", "declarator": "collectionArgumentCaptor", "var_name": "collectionArgumentCaptor"}], "file": "android/src/test/java/io/keen/client/android/AndroidJsonHandlerTest.java"}, "test_case": {"identifier": "readSimpleMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readSimpleMap() throws Exception {\n        JSONObject mockJsonObject = mock(JSONObject.class);\n        List<String> keys = Arrays.asList(\"result\");\n        when(mockJsonObject.keys()).thenReturn(keys.iterator());\n        when(mockJsonObject.get(\"result\")).thenReturn(\"dummyResult\");\n\n        JSONTokener mockJsonTokener = mock(JSONTokener.class);\n        when(mockJsonTokener.nextValue()).thenReturn(mockJsonObject);\n        when(mockJsonObjectManager.newTokener(anyString())).thenReturn(mockJsonTokener);\n\n        // This string doesn't matter, but it's what we mimic with the mocks.\n        String mapResponse = \"{\\\"result\\\": \\\"dummyResult\\\"}\";\n        StringReader reader = new StringReader(mapResponse);\n        Map<String, Object> map = handler.readJson(reader);\n        assertNotNull(map);\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(\"result\"));\n        assertEquals(\"dummyResult\", map.get(\"result\"));\n    }", "signature": "void readSimpleMap()", "full_signature": "@Test public void readSimpleMap()", "class_method_signature": "AndroidJsonHandlerTest.readSimpleMap()", "testcase": true, "constructor": false, "invocations": ["mock", "asList", "thenReturn", "when", "keys", "iterator", "thenReturn", "when", "get", "mock", "thenReturn", "when", "nextValue", "thenReturn", "when", "newTokener", "anyString", "readJson", "assertNotNull", "assertEquals", "size", "assertTrue", "containsKey", "assertEquals", "get"]}, "focal_class": {"identifier": "AndroidJsonHandler", "superclass": "", "interfaces": "implements KeenJsonHandler", "fields": [{"original_string": "private static final int COPY_BUFFER_SIZE = 4 * 1024;", "modifier": "private static final", "type": "int", "declarator": "COPY_BUFFER_SIZE = 4 * 1024", "var_name": "COPY_BUFFER_SIZE"}, {"original_string": "private boolean isWrapNestedMapsAndCollections = (Build.VERSION.SDK_INT < 19);", "modifier": "private", "type": "boolean", "declarator": "isWrapNestedMapsAndCollections = (Build.VERSION.SDK_INT < 19)", "var_name": "isWrapNestedMapsAndCollections"}, {"original_string": "private JsonObjectManager jsonObjectManager = null;", "modifier": "private", "type": "JsonObjectManager", "declarator": "jsonObjectManager = null", "var_name": "jsonObjectManager"}], "methods": [{"identifier": "readJson", "parameters": "(Reader reader)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> readJson(Reader reader)", "full_signature": "@Override public Map<String, Object> readJson(Reader reader)", "class_method_signature": "AndroidJsonHandler.readJson(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "writeJson", "parameters": "(Writer writer, Map<String, ?> value)", "modifiers": "@Override public", "return": "void", "signature": "void writeJson(Writer writer, Map<String, ?> value)", "full_signature": "@Override public void writeJson(Writer writer, Map<String, ?> value)", "class_method_signature": "AndroidJsonHandler.writeJson(Writer writer, Map<String, ?> value)", "testcase": false, "constructor": false}, {"identifier": "setWrapNestedMapsAndCollections", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setWrapNestedMapsAndCollections(boolean value)", "full_signature": "public void setWrapNestedMapsAndCollections(boolean value)", "class_method_signature": "AndroidJsonHandler.setWrapNestedMapsAndCollections(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setJsonObjectManager", "parameters": "(JsonObjectManager jsonObjectManager)", "modifiers": "protected", "return": "void", "signature": "void setJsonObjectManager(JsonObjectManager jsonObjectManager)", "full_signature": "protected void setJsonObjectManager(JsonObjectManager jsonObjectManager)", "class_method_signature": "AndroidJsonHandler.setJsonObjectManager(JsonObjectManager jsonObjectManager)", "testcase": false, "constructor": false}, {"identifier": "getJsonObjectManager", "parameters": "()", "modifiers": "private", "return": "JsonObjectManager", "signature": "JsonObjectManager getJsonObjectManager()", "full_signature": "private JsonObjectManager getJsonObjectManager()", "class_method_signature": "AndroidJsonHandler.getJsonObjectManager()", "testcase": false, "constructor": false}, {"identifier": "convertMapToJSONObject", "parameters": "(Map map)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "JSONObject", "signature": "JSONObject convertMapToJSONObject(Map map)", "full_signature": "@SuppressWarnings(\"unchecked\") private JSONObject convertMapToJSONObject(Map map)", "class_method_signature": "AndroidJsonHandler.convertMapToJSONObject(Map map)", "testcase": false, "constructor": false}, {"identifier": "convertCollectionToJSONArray", "parameters": "(Collection collection)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "JSONArray", "signature": "JSONArray convertCollectionToJSONArray(Collection collection)", "full_signature": "@SuppressWarnings(\"unchecked\") private JSONArray convertCollectionToJSONArray(Collection collection)", "class_method_signature": "AndroidJsonHandler.convertCollectionToJSONArray(Collection collection)", "testcase": false, "constructor": false}, {"identifier": "readerToString", "parameters": "(Reader reader)", "modifiers": "private static", "return": "String", "signature": "String readerToString(Reader reader)", "full_signature": "private static String readerToString(Reader reader)", "class_method_signature": "AndroidJsonHandler.readerToString(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "requiresWrap", "parameters": "(Map map)", "modifiers": "private static", "return": "boolean", "signature": "boolean requiresWrap(Map map)", "full_signature": "private static boolean requiresWrap(Map map)", "class_method_signature": "AndroidJsonHandler.requiresWrap(Map map)", "testcase": false, "constructor": false}, {"identifier": "requiresWrap", "parameters": "(Collection collection)", "modifiers": "private static", "return": "boolean", "signature": "boolean requiresWrap(Collection collection)", "full_signature": "private static boolean requiresWrap(Collection collection)", "class_method_signature": "AndroidJsonHandler.requiresWrap(Collection collection)", "testcase": false, "constructor": false}], "file": "android/src/main/java/io/keen/client/android/AndroidJsonHandler.java"}, "focal_method": {"identifier": "readJson", "parameters": "(Reader reader)", "modifiers": "@Override public", "return": "Map<String, Object>", "body": "@Override\n    public Map<String, Object> readJson(Reader reader) throws IOException {\n        if (reader == null) {\n            throw new IllegalArgumentException(\"Reader must not be null\");\n        }\n\n        String json = readerToString(reader);\n        try {\n            Object jsonObjOrArray = getJsonObjectManager().newTokener(json).nextValue();\n\n            // Issue #99 : Take a look at better dealing with root Map<> vs root List<> in the\n            // response.\n\n            Object rootNode = JsonHelper.fromJson(jsonObjOrArray);\n            Map<String, Object> rootMap = null;\n\n            if (null == rootNode) {\n                throw new IllegalArgumentException(\"Empty reader or ill-formatted JSON \" +\n                                                   \"encountered.\");\n            } else if (rootNode instanceof Map) {\n                rootMap = (Map)rootNode;\n            } else if (rootNode instanceof List) {\n                rootMap = new LinkedHashMap<String, Object>();\n                rootMap.put(KeenConstants.KEEN_FAKE_JSON_ROOT, rootNode);\n            }\n\n            return rootMap;\n        } catch (JSONException e) {\n            throw new IOException(e);\n        }\n    }", "signature": "Map<String, Object> readJson(Reader reader)", "full_signature": "@Override public Map<String, Object> readJson(Reader reader)", "class_method_signature": "AndroidJsonHandler.readJson(Reader reader)", "testcase": false, "constructor": false, "invocations": ["readerToString", "nextValue", "newTokener", "getJsonObjectManager", "fromJson", "put"]}, "repository": {"repo_id": 8023268, "url": "https://github.com/keenlabs/KeenClient-Java", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 74, "size": 4291, "license": "licensed"}}