{"test_class": {"identifier": "SingleInternalHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/single/SingleInternalHelperTest.java"}, "test_case": {"identifier": "singleIterableToFlowableIterable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleIterableToFlowableIterable() {\n        Iterable<? extends Flowable<Integer>> it = SingleInternalHelper.iterableToFlowable(\n                Collections.singletonList(Single.just(1)));\n\n        Iterator<? extends Flowable<Integer>> iter = it.iterator();\n\n        if (iter.hasNext()) {\n            iter.next().test().assertResult(1);\n            if (iter.hasNext()) {\n                fail(\"Iterator reports an additional element\");\n            }\n        } else {\n            fail(\"Iterator was empty\");\n        }\n    }", "signature": "void singleIterableToFlowableIterable()", "full_signature": "@Test public void singleIterableToFlowableIterable()", "class_method_signature": "SingleInternalHelperTest.singleIterableToFlowableIterable()", "testcase": true, "constructor": false, "invocations": ["iterableToFlowable", "singletonList", "just", "iterator", "hasNext", "assertResult", "test", "next", "hasNext", "fail", "fail"]}, "focal_class": {"identifier": "SingleInternalHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SingleInternalHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " SingleInternalHelper()", "full_signature": "private  SingleInternalHelper()", "class_method_signature": "SingleInternalHelper.SingleInternalHelper()", "testcase": false, "constructor": true}, {"identifier": "emptyThrower", "parameters": "()", "modifiers": "public static", "return": "Callable<NoSuchElementException>", "signature": "Callable<NoSuchElementException> emptyThrower()", "full_signature": "public static Callable<NoSuchElementException> emptyThrower()", "class_method_signature": "SingleInternalHelper.emptyThrower()", "testcase": false, "constructor": false}, {"identifier": "toFlowable", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static", "return": "Function<SingleSource<? extends T>, Publisher<? extends T>>", "signature": "Function<SingleSource<? extends T>, Publisher<? extends T>> toFlowable()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static Function<SingleSource<? extends T>, Publisher<? extends T>> toFlowable()", "class_method_signature": "SingleInternalHelper.toFlowable()", "testcase": false, "constructor": false}, {"identifier": "iterableToFlowable", "parameters": "(final Iterable<? extends SingleSource<? extends T>> sources)", "modifiers": "public static", "return": "Iterable<? extends Flowable<T>>", "signature": "Iterable<? extends Flowable<T>> iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "full_signature": "public static Iterable<? extends Flowable<T>> iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "class_method_signature": "SingleInternalHelper.iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static", "return": "Function<SingleSource<? extends T>, Observable<? extends T>>", "signature": "Function<SingleSource<? extends T>, Observable<? extends T>> toObservable()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) public static Function<SingleSource<? extends T>, Observable<? extends T>> toObservable()", "class_method_signature": "SingleInternalHelper.toObservable()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/single/SingleInternalHelper.java"}, "focal_method": {"identifier": "iterableToFlowable", "parameters": "(final Iterable<? extends SingleSource<? extends T>> sources)", "modifiers": "public static", "return": "Iterable<? extends Flowable<T>>", "body": "public static <T> Iterable<? extends Flowable<T>> iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources) {\n        return new ToFlowableIterable<T>(sources);\n    }", "signature": "Iterable<? extends Flowable<T>> iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "full_signature": "public static Iterable<? extends Flowable<T>> iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "class_method_signature": "SingleInternalHelper.iterableToFlowable(final Iterable<? extends SingleSource<? extends T>> sources)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}