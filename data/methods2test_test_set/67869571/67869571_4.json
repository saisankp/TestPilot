{"test_class": {"identifier": "PreferenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SharedPreferences preferences;", "modifier": "private", "type": "SharedPreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private RxSharedPreferences rxPreferences;", "modifier": "private", "type": "RxSharedPreferences", "declarator": "rxPreferences", "var_name": "rxPreferences"}], "file": "library/src/test/java/tiamat/PreferenceTest.java"}, "test_case": {"identifier": "asObservableHonorsBackpressure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void asObservableHonorsBackpressure() {\n        Preference<String> preference = rxPreferences.getString(\"key1\", \"defValue\");\n\n        TestSubscriber<String> o = new TestSubscriber<>(2);\n        preference.asObservable().subscribe(o);\n        o.assertValues(\"defValue\");\n\n        rxPreferences.putString(\"key1\", \"value1\");\n        o.assertValues(\"defValue\", \"value1\");\n\n        rxPreferences.putString(\"key1\", \"value2\");\n        o.assertValues(\"defValue\", \"value1\"); // No new item due to backpressure.\n\n        o.requestMore(1);\n        o.assertValues(\"defValue\", \"value1\", \"value2\");\n\n        for (int i = 0; i < 1000; i++) {\n            rxPreferences.putString(\"key1\", \"value\" + i);\n        }\n        o.assertValues(\"defValue\", \"value1\", \"value2\"); // No new items due to backpressure.\n\n        o.requestMore(Long.MAX_VALUE);\n        o.assertValues(\"defValue\", \"value1\", \"value2\", \"value999\"); // only latest.\n    }", "signature": "void asObservableHonorsBackpressure()", "full_signature": "@Test public void asObservableHonorsBackpressure()", "class_method_signature": "PreferenceTest.asObservableHonorsBackpressure()", "testcase": true, "constructor": false, "invocations": ["getString", "subscribe", "asObservable", "assertValues", "putString", "assertValues", "putString", "assertValues", "requestMore", "assertValues", "putString", "assertValues", "requestMore", "assertValues"]}, "focal_class": {"identifier": "Preference", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SharedPreferences preferences;", "modifier": "private final", "type": "SharedPreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final T defValue;", "modifier": "private final", "type": "T", "declarator": "defValue", "var_name": "defValue"}, {"original_string": "private final Proxy<T> proxy;", "modifier": "private final", "type": "Proxy<T>", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "private final Observable<T> values;", "modifier": "private final", "type": "Observable<T>", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Preference", "parameters": "(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "modifiers": "", "return": "", "signature": " Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "full_signature": "  Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "class_method_signature": "Preference.Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "testcase": false, "constructor": true}, {"identifier": "asValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T asValue()", "full_signature": "public T asValue()", "class_method_signature": "Preference.asValue()", "testcase": false, "constructor": false}, {"identifier": "asObservable", "parameters": "()", "modifiers": "public", "return": "Observable<T>", "signature": "Observable<T> asObservable()", "full_signature": "public Observable<T> asObservable()", "class_method_signature": "Preference.asObservable()", "testcase": false, "constructor": false}, {"identifier": "asAction", "parameters": "()", "modifiers": "public", "return": "Action1<? super T>", "signature": "Action1<? super T> asAction()", "full_signature": "public Action1<? super T> asAction()", "class_method_signature": "Preference.asAction()", "testcase": false, "constructor": false}], "file": "library/src/main/java/tiamat/Preference.java"}, "focal_method": {"identifier": "asObservable", "parameters": "()", "modifiers": "public", "return": "Observable<T>", "body": "public Observable<T> asObservable() {\n        return values;\n    }", "signature": "Observable<T> asObservable()", "full_signature": "public Observable<T> asObservable()", "class_method_signature": "Preference.asObservable()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 67869571, "url": "https://github.com/hotchemi/tiamat", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 71, "size": 311, "license": "licensed"}}