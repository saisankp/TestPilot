{"test_class": {"identifier": "ElementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String reference = \"<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>\";", "modifier": "private", "type": "String", "declarator": "reference = \"<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>\"", "var_name": "reference"}], "file": "base/lang/src/test/java/leap/lang/jsoup/nodes/ElementTest.java"}, "test_case": {"identifier": "before", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void before() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.before(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        \n        doc.select(\"p\").last().before(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }", "signature": "void before()", "full_signature": "@Test public void before()", "class_method_signature": "ElementTest.before()", "testcase": true, "constructor": false, "invocations": ["parse", "first", "select", "before", "assertEquals", "stripNewlines", "html", "body", "before", "last", "select", "assertEquals", "stripNewlines", "html", "body"]}, "focal_class": {"identifier": "Element", "superclass": "extends Node", "interfaces": "", "fields": [{"original_string": "private Tag tag;", "modifier": "private", "type": "Tag", "declarator": "tag", "var_name": "tag"}, {"original_string": "private Set<String> classNames;", "modifier": "private", "type": "Set<String>", "declarator": "classNames", "var_name": "classNames"}], "methods": [{"identifier": "Element", "parameters": "(Tag tag, String baseUri, Attributes attributes)", "modifiers": "public", "return": "", "signature": " Element(Tag tag, String baseUri, Attributes attributes)", "full_signature": "public  Element(Tag tag, String baseUri, Attributes attributes)", "class_method_signature": "Element.Element(Tag tag, String baseUri, Attributes attributes)", "testcase": false, "constructor": true}, {"identifier": "Element", "parameters": "(Tag tag, String baseUri)", "modifiers": "public", "return": "", "signature": " Element(Tag tag, String baseUri)", "full_signature": "public  Element(Tag tag, String baseUri)", "class_method_signature": "Element.Element(Tag tag, String baseUri)", "testcase": false, "constructor": true}, {"identifier": "nodeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String nodeName()", "full_signature": "@Override public String nodeName()", "class_method_signature": "Element.nodeName()", "testcase": false, "constructor": false}, {"identifier": "tagName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String tagName()", "full_signature": "public String tagName()", "class_method_signature": "Element.tagName()", "testcase": false, "constructor": false}, {"identifier": "tagName", "parameters": "(String tagName)", "modifiers": "public", "return": "Element", "signature": "Element tagName(String tagName)", "full_signature": "public Element tagName(String tagName)", "class_method_signature": "Element.tagName(String tagName)", "testcase": false, "constructor": false}, {"identifier": "tag", "parameters": "()", "modifiers": "public", "return": "Tag", "signature": "Tag tag()", "full_signature": "public Tag tag()", "class_method_signature": "Element.tag()", "testcase": false, "constructor": false}, {"identifier": "isBlock", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlock()", "full_signature": "public boolean isBlock()", "class_method_signature": "Element.isBlock()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "Element.id()", "testcase": false, "constructor": false}, {"identifier": "attr", "parameters": "(String attributeKey, String attributeValue)", "modifiers": "public", "return": "Element", "signature": "Element attr(String attributeKey, String attributeValue)", "full_signature": "public Element attr(String attributeKey, String attributeValue)", "class_method_signature": "Element.attr(String attributeKey, String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "dataset", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> dataset()", "full_signature": "public Map<String, String> dataset()", "class_method_signature": "Element.dataset()", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "@Override public final", "return": "Element", "signature": "Element parent()", "full_signature": "@Override public final Element parent()", "class_method_signature": "Element.parent()", "testcase": false, "constructor": false}, {"identifier": "parents", "parameters": "()", "modifiers": "public", "return": "Elements", "signature": "Elements parents()", "full_signature": "public Elements parents()", "class_method_signature": "Element.parents()", "testcase": false, "constructor": false}, {"identifier": "accumulateParents", "parameters": "(Element el, Elements parents)", "modifiers": "private static", "return": "void", "signature": "void accumulateParents(Element el, Elements parents)", "full_signature": "private static void accumulateParents(Element el, Elements parents)", "class_method_signature": "Element.accumulateParents(Element el, Elements parents)", "testcase": false, "constructor": false}, {"identifier": "child", "parameters": "(int index)", "modifiers": "public", "return": "Element", "signature": "Element child(int index)", "full_signature": "public Element child(int index)", "class_method_signature": "Element.child(int index)", "testcase": false, "constructor": false}, {"identifier": "children", "parameters": "()", "modifiers": "public", "return": "Elements", "signature": "Elements children()", "full_signature": "public Elements children()", "class_method_signature": "Element.children()", "testcase": false, "constructor": false}, {"identifier": "textNodes", "parameters": "()", "modifiers": "public", "return": "List<TextNode>", "signature": "List<TextNode> textNodes()", "full_signature": "public List<TextNode> textNodes()", "class_method_signature": "Element.textNodes()", "testcase": false, "constructor": false}, {"identifier": "dataNodes", "parameters": "()", "modifiers": "public", "return": "List<DataNode>", "signature": "List<DataNode> dataNodes()", "full_signature": "public List<DataNode> dataNodes()", "class_method_signature": "Element.dataNodes()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(String cssQuery)", "modifiers": "public", "return": "Elements", "signature": "Elements select(String cssQuery)", "full_signature": "public Elements select(String cssQuery)", "class_method_signature": "Element.select(String cssQuery)", "testcase": false, "constructor": false}, {"identifier": "appendChild", "parameters": "(Node child)", "modifiers": "public", "return": "Element", "signature": "Element appendChild(Node child)", "full_signature": "public Element appendChild(Node child)", "class_method_signature": "Element.appendChild(Node child)", "testcase": false, "constructor": false}, {"identifier": "prependChild", "parameters": "(Node child)", "modifiers": "public", "return": "Element", "signature": "Element prependChild(Node child)", "full_signature": "public Element prependChild(Node child)", "class_method_signature": "Element.prependChild(Node child)", "testcase": false, "constructor": false}, {"identifier": "insertChildren", "parameters": "(int index, Collection<? extends Node> children)", "modifiers": "public", "return": "Element", "signature": "Element insertChildren(int index, Collection<? extends Node> children)", "full_signature": "public Element insertChildren(int index, Collection<? extends Node> children)", "class_method_signature": "Element.insertChildren(int index, Collection<? extends Node> children)", "testcase": false, "constructor": false}, {"identifier": "appendElement", "parameters": "(String tagName)", "modifiers": "public", "return": "Element", "signature": "Element appendElement(String tagName)", "full_signature": "public Element appendElement(String tagName)", "class_method_signature": "Element.appendElement(String tagName)", "testcase": false, "constructor": false}, {"identifier": "prependElement", "parameters": "(String tagName)", "modifiers": "public", "return": "Element", "signature": "Element prependElement(String tagName)", "full_signature": "public Element prependElement(String tagName)", "class_method_signature": "Element.prependElement(String tagName)", "testcase": false, "constructor": false}, {"identifier": "appendText", "parameters": "(String text)", "modifiers": "public", "return": "Element", "signature": "Element appendText(String text)", "full_signature": "public Element appendText(String text)", "class_method_signature": "Element.appendText(String text)", "testcase": false, "constructor": false}, {"identifier": "prependText", "parameters": "(String text)", "modifiers": "public", "return": "Element", "signature": "Element prependText(String text)", "full_signature": "public Element prependText(String text)", "class_method_signature": "Element.prependText(String text)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(String html)", "modifiers": "public", "return": "Element", "signature": "Element append(String html)", "full_signature": "public Element append(String html)", "class_method_signature": "Element.append(String html)", "testcase": false, "constructor": false}, {"identifier": "prepend", "parameters": "(String html)", "modifiers": "public", "return": "Element", "signature": "Element prepend(String html)", "full_signature": "public Element prepend(String html)", "class_method_signature": "Element.prepend(String html)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(String html)", "modifiers": "@Override public", "return": "Element", "signature": "Element before(String html)", "full_signature": "@Override public Element before(String html)", "class_method_signature": "Element.before(String html)", "testcase": false, "constructor": false}, {"identifier": "before", "parameters": "(Node node)", "modifiers": "@Override public", "return": "Element", "signature": "Element before(Node node)", "full_signature": "@Override public Element before(Node node)", "class_method_signature": "Element.before(Node node)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(String html)", "modifiers": "@Override public", "return": "Element", "signature": "Element after(String html)", "full_signature": "@Override public Element after(String html)", "class_method_signature": "Element.after(String html)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "(Node node)", "modifiers": "@Override public", "return": "Element", "signature": "Element after(Node node)", "full_signature": "@Override public Element after(Node node)", "class_method_signature": "Element.after(Node node)", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element empty()", "full_signature": "public Element empty()", "class_method_signature": "Element.empty()", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(String html)", "modifiers": "@Override public", "return": "Element", "signature": "Element wrap(String html)", "full_signature": "@Override public Element wrap(String html)", "class_method_signature": "Element.wrap(String html)", "testcase": false, "constructor": false}, {"identifier": "siblingElements", "parameters": "()", "modifiers": "public", "return": "Elements", "signature": "Elements siblingElements()", "full_signature": "public Elements siblingElements()", "class_method_signature": "Element.siblingElements()", "testcase": false, "constructor": false}, {"identifier": "nextElementSibling", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element nextElementSibling()", "full_signature": "public Element nextElementSibling()", "class_method_signature": "Element.nextElementSibling()", "testcase": false, "constructor": false}, {"identifier": "previousElementSibling", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element previousElementSibling()", "full_signature": "public Element previousElementSibling()", "class_method_signature": "Element.previousElementSibling()", "testcase": false, "constructor": false}, {"identifier": "firstElementSibling", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element firstElementSibling()", "full_signature": "public Element firstElementSibling()", "class_method_signature": "Element.firstElementSibling()", "testcase": false, "constructor": false}, {"identifier": "elementSiblingIndex", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer elementSiblingIndex()", "full_signature": "public Integer elementSiblingIndex()", "class_method_signature": "Element.elementSiblingIndex()", "testcase": false, "constructor": false}, {"identifier": "lastElementSibling", "parameters": "()", "modifiers": "public", "return": "Element", "signature": "Element lastElementSibling()", "full_signature": "public Element lastElementSibling()", "class_method_signature": "Element.lastElementSibling()", "testcase": false, "constructor": false}, {"identifier": "indexInList", "parameters": "(Element search, List<E> elements)", "modifiers": "private static", "return": "Integer", "signature": "Integer indexInList(Element search, List<E> elements)", "full_signature": "private static Integer indexInList(Element search, List<E> elements)", "class_method_signature": "Element.indexInList(Element search, List<E> elements)", "testcase": false, "constructor": false}, {"identifier": "getElementsByTag", "parameters": "(String tagName)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByTag(String tagName)", "full_signature": "public Elements getElementsByTag(String tagName)", "class_method_signature": "Element.getElementsByTag(String tagName)", "testcase": false, "constructor": false}, {"identifier": "getElementById", "parameters": "(String id)", "modifiers": "public", "return": "Element", "signature": "Element getElementById(String id)", "full_signature": "public Element getElementById(String id)", "class_method_signature": "Element.getElementById(String id)", "testcase": false, "constructor": false}, {"identifier": "getElementsByClass", "parameters": "(String className)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByClass(String className)", "full_signature": "public Elements getElementsByClass(String className)", "class_method_signature": "Element.getElementsByClass(String className)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttribute", "parameters": "(String key)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttribute(String key)", "full_signature": "public Elements getElementsByAttribute(String key)", "class_method_signature": "Element.getElementsByAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeStarting", "parameters": "(String keyPrefix)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeStarting(String keyPrefix)", "full_signature": "public Elements getElementsByAttributeStarting(String keyPrefix)", "class_method_signature": "Element.getElementsByAttributeStarting(String keyPrefix)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValue", "parameters": "(String key, String value)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValue(String key, String value)", "full_signature": "public Elements getElementsByAttributeValue(String key, String value)", "class_method_signature": "Element.getElementsByAttributeValue(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueNot", "parameters": "(String key, String value)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueNot(String key, String value)", "full_signature": "public Elements getElementsByAttributeValueNot(String key, String value)", "class_method_signature": "Element.getElementsByAttributeValueNot(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueStarting", "parameters": "(String key, String valuePrefix)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueStarting(String key, String valuePrefix)", "full_signature": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix)", "class_method_signature": "Element.getElementsByAttributeValueStarting(String key, String valuePrefix)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueEnding", "parameters": "(String key, String valueSuffix)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueEnding(String key, String valueSuffix)", "full_signature": "public Elements getElementsByAttributeValueEnding(String key, String valueSuffix)", "class_method_signature": "Element.getElementsByAttributeValueEnding(String key, String valueSuffix)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueContaining", "parameters": "(String key, String match)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueContaining(String key, String match)", "full_signature": "public Elements getElementsByAttributeValueContaining(String key, String match)", "class_method_signature": "Element.getElementsByAttributeValueContaining(String key, String match)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueMatching", "parameters": "(String key, Pattern pattern)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueMatching(String key, Pattern pattern)", "full_signature": "public Elements getElementsByAttributeValueMatching(String key, Pattern pattern)", "class_method_signature": "Element.getElementsByAttributeValueMatching(String key, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getElementsByAttributeValueMatching", "parameters": "(String key, String regex)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByAttributeValueMatching(String key, String regex)", "full_signature": "public Elements getElementsByAttributeValueMatching(String key, String regex)", "class_method_signature": "Element.getElementsByAttributeValueMatching(String key, String regex)", "testcase": false, "constructor": false}, {"identifier": "getElementsByIndexLessThan", "parameters": "(int index)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByIndexLessThan(int index)", "full_signature": "public Elements getElementsByIndexLessThan(int index)", "class_method_signature": "Element.getElementsByIndexLessThan(int index)", "testcase": false, "constructor": false}, {"identifier": "getElementsByIndexGreaterThan", "parameters": "(int index)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByIndexGreaterThan(int index)", "full_signature": "public Elements getElementsByIndexGreaterThan(int index)", "class_method_signature": "Element.getElementsByIndexGreaterThan(int index)", "testcase": false, "constructor": false}, {"identifier": "getElementsByIndexEquals", "parameters": "(int index)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsByIndexEquals(int index)", "full_signature": "public Elements getElementsByIndexEquals(int index)", "class_method_signature": "Element.getElementsByIndexEquals(int index)", "testcase": false, "constructor": false}, {"identifier": "getElementsContainingText", "parameters": "(String searchText)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsContainingText(String searchText)", "full_signature": "public Elements getElementsContainingText(String searchText)", "class_method_signature": "Element.getElementsContainingText(String searchText)", "testcase": false, "constructor": false}, {"identifier": "getElementsContainingOwnText", "parameters": "(String searchText)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsContainingOwnText(String searchText)", "full_signature": "public Elements getElementsContainingOwnText(String searchText)", "class_method_signature": "Element.getElementsContainingOwnText(String searchText)", "testcase": false, "constructor": false}, {"identifier": "getElementsMatchingText", "parameters": "(Pattern pattern)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsMatchingText(Pattern pattern)", "full_signature": "public Elements getElementsMatchingText(Pattern pattern)", "class_method_signature": "Element.getElementsMatchingText(Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getElementsMatchingText", "parameters": "(String regex)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsMatchingText(String regex)", "full_signature": "public Elements getElementsMatchingText(String regex)", "class_method_signature": "Element.getElementsMatchingText(String regex)", "testcase": false, "constructor": false}, {"identifier": "getElementsMatchingOwnText", "parameters": "(Pattern pattern)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsMatchingOwnText(Pattern pattern)", "full_signature": "public Elements getElementsMatchingOwnText(Pattern pattern)", "class_method_signature": "Element.getElementsMatchingOwnText(Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getElementsMatchingOwnText", "parameters": "(String regex)", "modifiers": "public", "return": "Elements", "signature": "Elements getElementsMatchingOwnText(String regex)", "full_signature": "public Elements getElementsMatchingOwnText(String regex)", "class_method_signature": "Element.getElementsMatchingOwnText(String regex)", "testcase": false, "constructor": false}, {"identifier": "getAllElements", "parameters": "()", "modifiers": "public", "return": "Elements", "signature": "Elements getAllElements()", "full_signature": "public Elements getAllElements()", "class_method_signature": "Element.getAllElements()", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String text()", "full_signature": "public String text()", "class_method_signature": "Element.text()", "testcase": false, "constructor": false}, {"identifier": "ownText", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String ownText()", "full_signature": "public String ownText()", "class_method_signature": "Element.ownText()", "testcase": false, "constructor": false}, {"identifier": "ownText", "parameters": "(StringBuilder accum)", "modifiers": "private", "return": "void", "signature": "void ownText(StringBuilder accum)", "full_signature": "private void ownText(StringBuilder accum)", "class_method_signature": "Element.ownText(StringBuilder accum)", "testcase": false, "constructor": false}, {"identifier": "appendNormalisedText", "parameters": "(StringBuilder accum, TextNode textNode)", "modifiers": "private static", "return": "void", "signature": "void appendNormalisedText(StringBuilder accum, TextNode textNode)", "full_signature": "private static void appendNormalisedText(StringBuilder accum, TextNode textNode)", "class_method_signature": "Element.appendNormalisedText(StringBuilder accum, TextNode textNode)", "testcase": false, "constructor": false}, {"identifier": "appendWhitespaceIfBr", "parameters": "(Element element, StringBuilder accum)", "modifiers": "private static", "return": "void", "signature": "void appendWhitespaceIfBr(Element element, StringBuilder accum)", "full_signature": "private static void appendWhitespaceIfBr(Element element, StringBuilder accum)", "class_method_signature": "Element.appendWhitespaceIfBr(Element element, StringBuilder accum)", "testcase": false, "constructor": false}, {"identifier": "preserveWhitespace", "parameters": "(Node node)", "modifiers": "static", "return": "boolean", "signature": "boolean preserveWhitespace(Node node)", "full_signature": "static boolean preserveWhitespace(Node node)", "class_method_signature": "Element.preserveWhitespace(Node node)", "testcase": false, "constructor": false}, {"identifier": "text", "parameters": "(String text)", "modifiers": "public", "return": "Element", "signature": "Element text(String text)", "full_signature": "public Element text(String text)", "class_method_signature": "Element.text(String text)", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasText()", "full_signature": "public boolean hasText()", "class_method_signature": "Element.hasText()", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String data()", "full_signature": "public String data()", "class_method_signature": "Element.data()", "testcase": false, "constructor": false}, {"identifier": "className", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String className()", "full_signature": "public String className()", "class_method_signature": "Element.className()", "testcase": false, "constructor": false}, {"identifier": "classNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> classNames()", "full_signature": "public Set<String> classNames()", "class_method_signature": "Element.classNames()", "testcase": false, "constructor": false}, {"identifier": "classNames", "parameters": "(Set<String> classNames)", "modifiers": "public", "return": "Element", "signature": "Element classNames(Set<String> classNames)", "full_signature": "public Element classNames(Set<String> classNames)", "class_method_signature": "Element.classNames(Set<String> classNames)", "testcase": false, "constructor": false}, {"identifier": "hasClass", "parameters": "(String className)", "modifiers": "public", "return": "boolean", "signature": "boolean hasClass(String className)", "full_signature": "public boolean hasClass(String className)", "class_method_signature": "Element.hasClass(String className)", "testcase": false, "constructor": false}, {"identifier": "addClass", "parameters": "(String className)", "modifiers": "public", "return": "Element", "signature": "Element addClass(String className)", "full_signature": "public Element addClass(String className)", "class_method_signature": "Element.addClass(String className)", "testcase": false, "constructor": false}, {"identifier": "removeClass", "parameters": "(String className)", "modifiers": "public", "return": "Element", "signature": "Element removeClass(String className)", "full_signature": "public Element removeClass(String className)", "class_method_signature": "Element.removeClass(String className)", "testcase": false, "constructor": false}, {"identifier": "toggleClass", "parameters": "(String className)", "modifiers": "public", "return": "Element", "signature": "Element toggleClass(String className)", "full_signature": "public Element toggleClass(String className)", "class_method_signature": "Element.toggleClass(String className)", "testcase": false, "constructor": false}, {"identifier": "val", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String val()", "full_signature": "public String val()", "class_method_signature": "Element.val()", "testcase": false, "constructor": false}, {"identifier": "val", "parameters": "(String value)", "modifiers": "public", "return": "Element", "signature": "Element val(String value)", "full_signature": "public Element val(String value)", "class_method_signature": "Element.val(String value)", "testcase": false, "constructor": false}, {"identifier": "outerHtmlHead", "parameters": "(StringBuilder accum, int depth, Document.OutputSettings out)", "modifiers": "", "return": "void", "signature": "void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "full_signature": " void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "class_method_signature": "Element.outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "outerHtmlTail", "parameters": "(StringBuilder accum, int depth, Document.OutputSettings out)", "modifiers": "", "return": "void", "signature": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "full_signature": " void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "class_method_signature": "Element.outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out)", "testcase": false, "constructor": false}, {"identifier": "html", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String html()", "full_signature": "public String html()", "class_method_signature": "Element.html()", "testcase": false, "constructor": false}, {"identifier": "html", "parameters": "(StringBuilder accum)", "modifiers": "private", "return": "void", "signature": "void html(StringBuilder accum)", "full_signature": "private void html(StringBuilder accum)", "class_method_signature": "Element.html(StringBuilder accum)", "testcase": false, "constructor": false}, {"identifier": "html", "parameters": "(String html)", "modifiers": "public", "return": "Element", "signature": "Element html(String html)", "full_signature": "public Element html(String html)", "class_method_signature": "Element.html(String html)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Element.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Element.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Element.hashCode()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element clone()", "full_signature": "@Override public Element clone()", "class_method_signature": "Element.clone()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/nodes/Element.java"}, "focal_method": {"identifier": "before", "parameters": "(String html)", "modifiers": "@Override public", "return": "Element", "body": "@Override\n    public Element before(String html) {\n        return (Element) super.before(html);\n    }", "signature": "Element before(String html)", "full_signature": "@Override public Element before(String html)", "class_method_signature": "Element.before(String html)", "testcase": false, "constructor": false, "invocations": ["before"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}