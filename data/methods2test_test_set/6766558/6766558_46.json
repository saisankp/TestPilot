{"test_class": {"identifier": "HystrixTimerTest", "superclass": "", "interfaces": "", "fields": [], "file": "hystrix-core/src/test/java/com/netflix/hystrix/util/HystrixTimerTest.java"}, "test_case": {"identifier": "testReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReset() {\n        HystrixTimer timer = HystrixTimer.getInstance();\n        TestListener l1 = new TestListener(50, \"A\");\n        timer.addTimerListener(l1);\n\n        ScheduledExecutor ex = timer.executor.get();\n\n        assertFalse(ex.executor.isShutdown());\n\n        // perform reset which should shut it down\n        HystrixTimer.reset();\n\n        assertTrue(ex.executor.isShutdown());\n        assertNull(timer.executor.get());\n\n        // assert it starts up again on use\n        TestListener l2 = new TestListener(50, \"A\");\n        timer.addTimerListener(l2);\n\n        ScheduledExecutor ex2 = timer.executor.get();\n\n        assertFalse(ex2.executor.isShutdown());\n\n        // reset again to shutdown what we just started\n        HystrixTimer.reset();\n        // try resetting again to make sure it's idempotent (ie. doesn't blow up on an NPE)\n        HystrixTimer.reset();\n    }", "signature": "void testReset()", "full_signature": "@Test public void testReset()", "class_method_signature": "HystrixTimerTest.testReset()", "testcase": true, "constructor": false, "invocations": ["getInstance", "addTimerListener", "get", "assertFalse", "isShutdown", "reset", "assertTrue", "isShutdown", "assertNull", "get", "addTimerListener", "get", "assertFalse", "isShutdown", "reset", "reset"]}, "focal_class": {"identifier": "HystrixTimer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HystrixTimer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HystrixTimer.class)", "var_name": "logger"}, {"original_string": "private static HystrixTimer INSTANCE = new HystrixTimer();", "modifier": "private static", "type": "HystrixTimer", "declarator": "INSTANCE = new HystrixTimer()", "var_name": "INSTANCE"}, {"original_string": "AtomicReference<ScheduledExecutor> executor = new AtomicReference<ScheduledExecutor>();", "modifier": "", "type": "AtomicReference<ScheduledExecutor>", "declarator": "executor = new AtomicReference<ScheduledExecutor>()", "var_name": "executor"}], "methods": [{"identifier": "HystrixTimer", "parameters": "()", "modifiers": "private", "return": "", "signature": " HystrixTimer()", "full_signature": "private  HystrixTimer()", "class_method_signature": "HystrixTimer.HystrixTimer()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "HystrixTimer", "signature": "HystrixTimer getInstance()", "full_signature": "public static HystrixTimer getInstance()", "class_method_signature": "HystrixTimer.getInstance()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "HystrixTimer.reset()", "testcase": false, "constructor": false}, {"identifier": "addTimerListener", "parameters": "(final TimerListener listener)", "modifiers": "public", "return": "Reference<TimerListener>", "signature": "Reference<TimerListener> addTimerListener(final TimerListener listener)", "full_signature": "public Reference<TimerListener> addTimerListener(final TimerListener listener)", "class_method_signature": "HystrixTimer.addTimerListener(final TimerListener listener)", "testcase": false, "constructor": false}, {"identifier": "startThreadIfNeeded", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void startThreadIfNeeded()", "full_signature": "protected void startThreadIfNeeded()", "class_method_signature": "HystrixTimer.startThreadIfNeeded()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/util/HystrixTimer.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void reset() {\n        ScheduledExecutor ex = INSTANCE.executor.getAndSet(null);\n        if (ex != null && ex.getThreadPool() != null) {\n            ex.getThreadPool().shutdownNow();\n        }\n    }", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "HystrixTimer.reset()", "testcase": false, "constructor": false, "invocations": ["getAndSet", "getThreadPool", "shutdownNow", "getThreadPool"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}