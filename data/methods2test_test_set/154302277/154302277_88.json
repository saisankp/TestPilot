{"test_class": {"identifier": "GetFirmwareFileMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProtocolResponseMessageSender protocolResponseMessageSender;", "modifier": "@Mock\n    private", "type": "ProtocolResponseMessageSender", "declarator": "protocolResponseMessageSender", "var_name": "protocolResponseMessageSender"}, {"original_string": "@Mock\n    private DeviceRepository deviceRepository;", "modifier": "@Mock\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Mock\n    private FirmwareFileRepository firmwareFileRepository;", "modifier": "@Mock\n    private", "type": "FirmwareFileRepository", "declarator": "firmwareFileRepository", "var_name": "firmwareFileRepository"}, {"original_string": "@Mock\n    private Device deviceMock;", "modifier": "@Mock\n    private", "type": "Device", "declarator": "deviceMock", "var_name": "deviceMock"}, {"original_string": "@Mock\n    private FirmwareFile firmwareFileMock;", "modifier": "@Mock\n    private", "type": "FirmwareFile", "declarator": "firmwareFileMock", "var_name": "firmwareFileMock"}, {"original_string": "@InjectMocks\n    private GetFirmwareFileMessageProcessor getFirmwareFileMessageProcessor;", "modifier": "@InjectMocks\n    private", "type": "GetFirmwareFileMessageProcessor", "declarator": "getFirmwareFileMessageProcessor", "var_name": "getFirmwareFileMessageProcessor"}], "file": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/GetFirmwareFileMessageProcessorTest.java"}, "test_case": {"identifier": "processMessageShouldSendFirmwareFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void processMessageShouldSendFirmwareFile() throws JMSException {\n        // arrange\n        final String correlationUid = \"corr-uid-1\";\n        final String organisationIdentification = \"test-org\";\n        final String deviceIdentification = \"dvc-1\";\n\n        final String firmwareFileIdentification = \"fw\";\n        final byte[] firmwareFileBytes = firmwareFileIdentification.getBytes();\n\n        final RequestMessage requestMessage = new RequestMessage(correlationUid, organisationIdentification,\n                deviceIdentification, firmwareFileIdentification);\n        final ObjectMessage message = new ObjectMessageBuilder().withCorrelationUid(correlationUid)\n                .withMessageType(DeviceFunction.GET_FIRMWARE_FILE.name()).withDeviceIdentification(deviceIdentification)\n                .withObject(requestMessage).build();\n\n        when(this.deviceMock.getDeviceIdentification()).thenReturn(deviceIdentification);\n        when(this.deviceRepository.findByDeviceIdentification(deviceIdentification)).thenReturn(this.deviceMock);\n\n        when(this.firmwareFileMock.getFilename()).thenReturn(firmwareFileIdentification);\n        when(this.firmwareFileMock.getFile()).thenReturn(firmwareFileBytes);\n        when(this.firmwareFileRepository.findByIdentification(firmwareFileIdentification))\n                .thenReturn(this.firmwareFileMock);\n\n        final byte[] expectedFile = firmwareFileBytes;\n        final String expectedMessageType = DeviceFunction.GET_FIRMWARE_FILE.name();\n\n        final ArgumentCaptor<ProtocolResponseMessage> responseMessageArgumentCaptor = ArgumentCaptor\n                .forClass(ProtocolResponseMessage.class);\n        final ArgumentCaptor<String> messageTypeCaptor = ArgumentCaptor.forClass(String.class);\n\n        // act\n        this.getFirmwareFileMessageProcessor.processMessage(message);\n\n        // assert\n        verify(this.protocolResponseMessageSender, times(1)).send(responseMessageArgumentCaptor.capture(),\n                messageTypeCaptor.capture(), nullable(ProtocolInfo.class), any(MessageMetadata.class));\n\n        final byte[] actualFile = ((FirmwareFileDto) responseMessageArgumentCaptor.getValue().getDataObject())\n                .getFirmwareFile();\n        final String actualMessageType = messageTypeCaptor.getValue();\n\n        assertThat(actualFile).isEqualTo(expectedFile);\n        assertThat(actualMessageType).isEqualTo(expectedMessageType);\n    }", "signature": "void processMessageShouldSendFirmwareFile()", "full_signature": "@Test public void processMessageShouldSendFirmwareFile()", "class_method_signature": "GetFirmwareFileMessageProcessorTest.processMessageShouldSendFirmwareFile()", "testcase": true, "constructor": false, "invocations": ["getBytes", "build", "withObject", "withDeviceIdentification", "withMessageType", "withCorrelationUid", "name", "thenReturn", "when", "getDeviceIdentification", "thenReturn", "when", "findByDeviceIdentification", "thenReturn", "when", "getFilename", "thenReturn", "when", "getFile", "thenReturn", "when", "findByIdentification", "name", "forClass", "forClass", "processMessage", "send", "verify", "times", "capture", "capture", "nullable", "any", "getFirmwareFile", "getDataObject", "getValue", "getValue", "isEqualTo", "assertThat", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "GetFirmwareFileMessageProcessor", "superclass": "extends AbstractProtocolRequestMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GetFirmwareFileMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GetFirmwareFileMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ProtocolResponseService protocolResponseMessageSender;", "modifier": "@Autowired\n    private", "type": "ProtocolResponseService", "declarator": "protocolResponseMessageSender", "var_name": "protocolResponseMessageSender"}, {"original_string": "@Autowired\n    private DeviceRepository deviceRepository;", "modifier": "@Autowired\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Autowired\n    private FirmwareFileRepository firmwareFileRepository;", "modifier": "@Autowired\n    private", "type": "FirmwareFileRepository", "declarator": "firmwareFileRepository", "var_name": "firmwareFileRepository"}], "methods": [{"identifier": "GetFirmwareFileMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " GetFirmwareFileMessageProcessor()", "full_signature": "protected  GetFirmwareFileMessageProcessor()", "class_method_signature": "GetFirmwareFileMessageProcessor.GetFirmwareFileMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "GetFirmwareFileMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "sendSuccesResponse", "parameters": "(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final FirmwareFileDto firmwareFileDto)", "modifiers": "private", "return": "void", "signature": "void sendSuccesResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final FirmwareFileDto firmwareFileDto)", "full_signature": "private void sendSuccesResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final FirmwareFileDto firmwareFileDto)", "class_method_signature": "GetFirmwareFileMessageProcessor.sendSuccesResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final FirmwareFileDto firmwareFileDto)", "testcase": false, "constructor": false}, {"identifier": "sendFailureResponse", "parameters": "(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final OsgpException exception)", "modifiers": "private", "return": "void", "signature": "void sendFailureResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final OsgpException exception)", "full_signature": "private void sendFailureResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final OsgpException exception)", "class_method_signature": "GetFirmwareFileMessageProcessor.sendFailureResponse(final MessageMetadata metadata, final ProtocolInfo protocolInfo,\n            final OsgpException exception)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/GetFirmwareFileMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) throws JMSException {\n\n        MessageMetadata metadata = null;\n        Device device = null;\n        String firmwareFileIdentification = StringUtils.EMPTY;\n\n        try {\n            metadata = MessageMetadata.fromMessage(message);\n            LOGGER.info(\n                    \"[{}] - Received message of messageType: {}, organisationIdentification: {}, deviceIdentification: {}\",\n                    metadata.getCorrelationUid(), metadata.getMessageType(), metadata.getOrganisationIdentification(),\n                    metadata.getDeviceIdentification());\n\n            device = this.deviceRepository.findByDeviceIdentification(metadata.getDeviceIdentification());\n\n            final RequestMessage requestMessage = (RequestMessage) message.getObject();\n            firmwareFileIdentification = (String) requestMessage.getRequest();\n\n            final FirmwareFile firmwareFile = this.firmwareFileRepository\n                    .findByIdentification(firmwareFileIdentification);\n\n            final FirmwareFileDto firmwareFileDto = new FirmwareFileDto(firmwareFile.getIdentification(),\n                    firmwareFile.getFile());\n\n            this.sendSuccesResponse(metadata, device.getProtocolInfo(), firmwareFileDto);\n\n        } catch (final Exception e) {\n            LOGGER.error(\"Exception while retrieving firmware file: {}\", firmwareFileIdentification);\n            final OsgpException osgpException = new OsgpException(ComponentType.OSGP_CORE,\n                    \"Exception while retrieving firmware file.\", e);\n            this.sendFailureResponse(metadata, device.getProtocolInfo(), osgpException);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "GetFirmwareFileMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["fromMessage", "info", "getCorrelationUid", "getMessageType", "getOrganisationIdentification", "getDeviceIdentification", "findByDeviceIdentification", "getDeviceIdentification", "getObject", "getRequest", "findByIdentification", "getIdentification", "getFile", "sendSuccesResponse", "getProtocolInfo", "error", "sendFailureResponse", "getProtocolInfo"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}