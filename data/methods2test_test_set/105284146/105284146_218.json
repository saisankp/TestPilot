{"test_class": {"identifier": "ActionSimulatorToolTest", "superclass": "extends AbstractToolTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private ToolRunningContext runningContext;", "modifier": "private", "type": "ToolRunningContext", "declarator": "runningContext", "var_name": "runningContext"}, {"original_string": "private CommandLine commandLine;", "modifier": "private", "type": "CommandLine", "declarator": "commandLine", "var_name": "commandLine"}, {"original_string": "private final ActionSimulatorTool tool = new ActionSimulatorTool() {\n        @Override\n        protected Collection<String> getFormats() {\n            return Exporters.getFormats(new ExportersLoaderList());\n        }\n    };", "modifier": "private final", "type": "ActionSimulatorTool", "declarator": "tool = new ActionSimulatorTool() {\n        @Override\n        protected Collection<String> getFormats() {\n            return Exporters.getFormats(new ExportersLoaderList());\n        }\n    }", "var_name": "tool"}], "file": "action/action-simulator/src/test/java/com/powsybl/action/simulator/tools/ActionSimulatorToolTest.java"}, "test_case": {"identifier": "missingOutputFileInParallelMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void missingOutputFileInParallelMode() throws Exception {\n        when(commandLine.hasOption(\"task-count\")).thenReturn(true);\n        when(commandLine.hasOption(\"output-file\")).thenReturn(false);\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"Missing required option: output-file in parallel mode\");\n        tool.run(commandLine, runningContext);\n    }", "signature": "void missingOutputFileInParallelMode()", "full_signature": "@Test public void missingOutputFileInParallelMode()", "class_method_signature": "ActionSimulatorToolTest.missingOutputFileInParallelMode()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "hasOption", "thenReturn", "when", "hasOption", "expect", "expectMessage", "run"]}, "focal_class": {"identifier": "ActionSimulatorTool", "superclass": "", "interfaces": "implements Tool", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ActionSimulatorTool.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ActionSimulatorTool.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command", "signature": "Command getCommand()", "full_signature": "@Override public Command getCommand()", "class_method_signature": "ActionSimulatorTool.getCommand()", "testcase": false, "constructor": false}, {"identifier": "getFormats", "parameters": "()", "modifiers": "protected", "return": "Collection<String>", "signature": "Collection<String> getFormats()", "full_signature": "protected Collection<String> getFormats()", "class_method_signature": "ActionSimulatorTool.getFormats()", "testcase": false, "constructor": false}, {"identifier": "createLogPrinter", "parameters": "(ToolRunningContext context, boolean verbose)", "modifiers": "private static", "return": "LoadFlowActionSimulatorObserver", "signature": "LoadFlowActionSimulatorObserver createLogPrinter(ToolRunningContext context, boolean verbose)", "full_signature": "private static LoadFlowActionSimulatorObserver createLogPrinter(ToolRunningContext context, boolean verbose)", "class_method_signature": "ActionSimulatorTool.createLogPrinter(ToolRunningContext context, boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "createResultPrinter", "parameters": "(Network network, ToolRunningContext context)", "modifiers": "private static", "return": "Consumer<SecurityAnalysisResult>", "signature": "Consumer<SecurityAnalysisResult> createResultPrinter(Network network, ToolRunningContext context)", "full_signature": "private static Consumer<SecurityAnalysisResult> createResultPrinter(Network network, ToolRunningContext context)", "class_method_signature": "ActionSimulatorTool.createResultPrinter(Network network, ToolRunningContext context)", "testcase": false, "constructor": false}, {"identifier": "createResultExporter", "parameters": "(Path outputFile, String format)", "modifiers": "private static", "return": "Consumer<SecurityAnalysisResult>", "signature": "Consumer<SecurityAnalysisResult> createResultExporter(Path outputFile, String format)", "full_signature": "private static Consumer<SecurityAnalysisResult> createResultExporter(Path outputFile, String format)", "class_method_signature": "ActionSimulatorTool.createResultExporter(Path outputFile, String format)", "testcase": false, "constructor": false}, {"identifier": "createCaseExporter", "parameters": "(Path outputCaseFolder, String basename, String outputCaseFormat, CompressionFormat compressionFormat, boolean exportEachRound)", "modifiers": "private static", "return": "LoadFlowActionSimulatorObserver", "signature": "LoadFlowActionSimulatorObserver createCaseExporter(Path outputCaseFolder, String basename, String outputCaseFormat, CompressionFormat compressionFormat, boolean exportEachRound)", "full_signature": "private static LoadFlowActionSimulatorObserver createCaseExporter(Path outputCaseFolder, String basename, String outputCaseFormat, CompressionFormat compressionFormat, boolean exportEachRound)", "class_method_signature": "ActionSimulatorTool.createCaseExporter(Path outputCaseFolder, String basename, String outputCaseFormat, CompressionFormat compressionFormat, boolean exportEachRound)", "testcase": false, "constructor": false}, {"identifier": "optionalCaseExporter", "parameters": "(CommandLine line, FileSystem fileSystem, String baseName)", "modifiers": "private static", "return": "Optional<LoadFlowActionSimulatorObserver>", "signature": "Optional<LoadFlowActionSimulatorObserver> optionalCaseExporter(CommandLine line, FileSystem fileSystem, String baseName)", "full_signature": "private static Optional<LoadFlowActionSimulatorObserver> optionalCaseExporter(CommandLine line, FileSystem fileSystem, String baseName)", "class_method_signature": "ActionSimulatorTool.optionalCaseExporter(CommandLine line, FileSystem fileSystem, String baseName)", "testcase": false, "constructor": false}, {"identifier": "optionalResultPrinter", "parameters": "(CommandLine line, FileSystem fileSystem)", "modifiers": "private static", "return": "Optional<Consumer<SecurityAnalysisResult>>", "signature": "Optional<Consumer<SecurityAnalysisResult>> optionalResultPrinter(CommandLine line, FileSystem fileSystem)", "full_signature": "private static Optional<Consumer<SecurityAnalysisResult>> optionalResultPrinter(CommandLine line, FileSystem fileSystem)", "class_method_signature": "ActionSimulatorTool.optionalResultPrinter(CommandLine line, FileSystem fileSystem)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "ActionSimulatorTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false}, {"identifier": "createActionSimulator", "parameters": "(Network network, ToolRunningContext context, CommandLine line,\n                                                  LoadFlowActionSimulatorConfig config, boolean applyIfSolved,\n                                                  List<LoadFlowActionSimulatorObserver> observers,\n                                                  List<Consumer<SecurityAnalysisResult>> resultHandlers)", "modifiers": "private", "return": "ActionSimulator", "signature": "ActionSimulator createActionSimulator(Network network, ToolRunningContext context, CommandLine line,\n                                                  LoadFlowActionSimulatorConfig config, boolean applyIfSolved,\n                                                  List<LoadFlowActionSimulatorObserver> observers,\n                                                  List<Consumer<SecurityAnalysisResult>> resultHandlers)", "full_signature": "private ActionSimulator createActionSimulator(Network network, ToolRunningContext context, CommandLine line,\n                                                  LoadFlowActionSimulatorConfig config, boolean applyIfSolved,\n                                                  List<LoadFlowActionSimulatorObserver> observers,\n                                                  List<Consumer<SecurityAnalysisResult>> resultHandlers)", "class_method_signature": "ActionSimulatorTool.createActionSimulator(Network network, ToolRunningContext context, CommandLine line,\n                                                  LoadFlowActionSimulatorConfig config, boolean applyIfSolved,\n                                                  List<LoadFlowActionSimulatorObserver> observers,\n                                                  List<Consumer<SecurityAnalysisResult>> resultHandlers)", "testcase": false, "constructor": false}, {"identifier": "checkOptionsInParallel", "parameters": "(CommandLine line)", "modifiers": "private", "return": "void", "signature": "void checkOptionsInParallel(CommandLine line)", "full_signature": "private void checkOptionsInParallel(CommandLine line)", "class_method_signature": "ActionSimulatorTool.checkOptionsInParallel(CommandLine line)", "testcase": false, "constructor": false}], "file": "action/action-simulator/src/main/java/com/powsybl/action/simulator/tools/ActionSimulatorTool.java"}, "focal_method": {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(CommandLine line, ToolRunningContext context) throws Exception {\n        Path caseFile = context.getFileSystem().getPath(line.getOptionValue(CASE_FILE));\n        Path dslFile = context.getFileSystem().getPath(line.getOptionValue(DSL_FILE));\n        List<String> contingencies = line.hasOption(CONTINGENCIES) ? Arrays.stream(line.getOptionValue(CONTINGENCIES).split(\",\")).collect(Collectors.toList())\n                                                                     : Collections.emptyList();\n        boolean verbose = line.hasOption(VERBOSE);\n        boolean applyIfSolved = line.hasOption(APPLY_IF_SOLVED_VIOLATIONS);\n        boolean isSubTask = line.hasOption(TASK_COUNT);\n\n        if (isSubTask) {\n            checkOptionsInParallel(line);\n        }\n\n        //Create observers\n        List<LoadFlowActionSimulatorObserver> observers = new ArrayList<>();\n        if (!isSubTask) {\n            optionalCaseExporter(line, context.getFileSystem(), DataSourceUtil.getBaseName(caseFile))\n                    .ifPresent(observers::add);\n        }\n        observers.add(createLogPrinter(context, verbose));\n\n        // load network\n        context.getOutputStream().println(\"Loading network '\" + caseFile + \"'\");\n        Properties inputParams = readProperties(line, ConversionToolUtils.OptionType.IMPORT, context);\n        Network network = Importers.loadNetwork(caseFile, context.getShortTimeExecutionComputationManager(), ImportConfig.load(), inputParams);\n\n        try {\n            // load actions from Groovy DSL\n            ActionDb actionDb = new ActionDslLoader(dslFile.toFile())\n                    .load(network, new ActionDslLoaderObserver(context.getOutputStream(), verbose));\n\n            if (contingencies.isEmpty()) {\n                contingencies = actionDb.getContingencies().stream().map(Contingency::getId).collect(Collectors.toList());\n            }\n\n            LoadFlowActionSimulatorConfig config = LoadFlowActionSimulatorConfig.load();\n\n            List<Consumer<SecurityAnalysisResult>> resultHandlers = new ArrayList<>();\n            resultHandlers.add(createResultPrinter(network, context));\n            optionalResultPrinter(line, context.getFileSystem()).ifPresent(resultHandlers::add);\n\n            // action simulator\n            LOGGER.debug(\"Creating action simulator.\");\n            if (isSubTask) {\n\n                context.getOutputStream().println(\"Using parallel load flow action simulator rules engine\");\n\n                int taskCount = Integer.parseInt(line.getOptionValue(TASK_COUNT));\n                ParallelLoadFlowActionSimulator actionSimulator = new ParallelLoadFlowActionSimulator(network,\n                        context.getLongTimeExecutionComputationManager(), taskCount, config, applyIfSolved, resultHandlers);\n\n                String dsl = new String(Files.readAllBytes(dslFile), StandardCharsets.UTF_8);\n                actionSimulator.run(dsl, contingencies);\n            } else {\n\n                ActionSimulator actionSimulator = createActionSimulator(network, context, line, config, applyIfSolved, observers, resultHandlers);\n\n                context.getOutputStream().println(\"Using '\" + actionSimulator.getName() + \"' rules engine\");\n\n                // start simulator\n                actionSimulator.start(actionDb, contingencies);\n            }\n        } catch (Exception e) {\n            LOGGER.trace(e.toString(), e); // to avoid user screen pollution...\n            Throwable rootCause = StackTraceUtils.sanitizeRootCause(e);\n            rootCause.printStackTrace(context.getErrorStream());\n        }\n    }", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "ActionSimulatorTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false, "invocations": ["getPath", "getFileSystem", "getOptionValue", "getPath", "getFileSystem", "getOptionValue", "hasOption", "collect", "stream", "split", "getOptionValue", "toList", "emptyList", "hasOption", "hasOption", "hasOption", "checkOptionsInParallel", "ifPresent", "optionalCaseExporter", "getFileSystem", "getBaseName", "add", "createLogPrinter", "println", "getOutputStream", "readProperties", "loadNetwork", "getShortTimeExecutionComputationManager", "load", "load", "toFile", "getOutputStream", "isEmpty", "collect", "map", "stream", "getContingencies", "toList", "load", "add", "createResultPrinter", "ifPresent", "optionalResultPrinter", "getFileSystem", "debug", "println", "getOutputStream", "parseInt", "getOptionValue", "getLongTimeExecutionComputationManager", "readAllBytes", "run", "createActionSimulator", "println", "getOutputStream", "getName", "start", "trace", "toString", "sanitizeRootCause", "printStackTrace", "getErrorStream"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}