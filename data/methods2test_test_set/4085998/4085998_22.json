{"test_class": {"identifier": "urn_perun_group_attribute_def_def_unixGID_namespaceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private urn_perun_group_attribute_def_def_unixGID_namespace classInstance;", "modifier": "private", "type": "urn_perun_group_attribute_def_def_unixGID_namespace", "declarator": "classInstance", "var_name": "classInstance"}, {"original_string": "private Attribute attributeToCheck;", "modifier": "private", "type": "Attribute", "declarator": "attributeToCheck", "var_name": "attributeToCheck"}, {"original_string": "private Group group = new Group(1,\"group1\",\"Group 1\",null,null,null,null,0,0);", "modifier": "private", "type": "Group", "declarator": "group = new Group(1,\"group1\",\"Group 1\",null,null,null,null,0,0)", "var_name": "group"}, {"original_string": "private Attribute reqAttribute;", "modifier": "private", "type": "Attribute", "declarator": "reqAttribute", "var_name": "reqAttribute"}, {"original_string": "private PerunSessionImpl sess;", "modifier": "private", "type": "PerunSessionImpl", "declarator": "sess", "var_name": "sess"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_unixGID_namespaceTest.java"}, "test_case": {"identifier": "testResourceWithSameGID", "parameters": "()", "modifiers": "@Test(expected = WrongReferenceAttributeValueException.class) public", "return": "void", "body": "@Test(expected = WrongReferenceAttributeValueException.class)\n\tpublic void testResourceWithSameGID() throws Exception {\n\t\tSystem.out.println(\"testResourceWithSameGID()\");\n\t\tattributeToCheck.setValue(5);\n\t\tResource resource = mock(Resource.class);\n\t\twhen(sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, attributeToCheck)).thenReturn(Collections.singletonList(resource));\n\t\twhen(sess.getPerunBl().getAttributesManagerBl().getAllAttributesStartWithNameWithoutNullValue(sess, group, AttributesManager.NS_GROUP_ATTR_DEF + \":unixGroupName-namespace:\")).thenReturn(Collections.singletonList(attributeToCheck));\n\t\twhen(sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, resource, attributeToCheck)).thenReturn(2);\n\n\t\tclassInstance.checkAttributeSemantics(sess, group, attributeToCheck);\n\t}", "signature": "void testResourceWithSameGID()", "full_signature": "@Test(expected = WrongReferenceAttributeValueException.class) public void testResourceWithSameGID()", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespaceTest.testResourceWithSameGID()", "testcase": true, "constructor": false, "invocations": ["println", "setValue", "mock", "thenReturn", "when", "getResourcesByAttribute", "getResourcesManagerBl", "getPerunBl", "singletonList", "thenReturn", "when", "getAllAttributesStartWithNameWithoutNullValue", "getAttributesManagerBl", "getPerunBl", "singletonList", "thenReturn", "when", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "checkAttributeSemantics"]}, "focal_class": {"identifier": "urn_perun_group_attribute_def_def_unixGID_namespace", "superclass": "extends GroupAttributesModuleAbstract", "interfaces": "implements GroupAttributesModuleImplApi", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(urn_perun_group_attribute_def_def_unixGID_namespace.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(urn_perun_group_attribute_def_def_unixGID_namespace.class)", "var_name": "log"}, {"original_string": "private static final String A_R_unixGID_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_R_unixGID_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\"", "var_name": "A_R_unixGID_namespace"}, {"original_string": "private static final String A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_R_unixGroupName_namespace = AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGroupName-namespace\"", "var_name": "A_R_unixGroupName_namespace"}, {"original_string": "private static final String A_G_unixGroupName_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGroupName-namespace\";", "modifier": "private static final", "type": "String", "declarator": "A_G_unixGroupName_namespace = AttributesManager.NS_GROUP_ATTR_DEF + \":unixGroupName-namespace\"", "var_name": "A_G_unixGroupName_namespace"}, {"original_string": "private static final String A_E_usedGids = AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":usedGids\";", "modifier": "private static final", "type": "String", "declarator": "A_E_usedGids = AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":usedGids\"", "var_name": "A_E_usedGids"}], "methods": [{"identifier": "fillAttribute", "parameters": "(PerunSessionImpl sess, Group group, AttributeDefinition attributeDefinition)", "modifiers": "@Override public", "return": "Attribute", "signature": "Attribute fillAttribute(PerunSessionImpl sess, Group group, AttributeDefinition attributeDefinition)", "full_signature": "@Override public Attribute fillAttribute(PerunSessionImpl sess, Group group, AttributeDefinition attributeDefinition)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespace.fillAttribute(PerunSessionImpl sess, Group group, AttributeDefinition attributeDefinition)", "testcase": false, "constructor": false}, {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespace.checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "changedAttributeHook", "parameters": "(PerunSessionImpl session, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "full_signature": "@Override public void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespace.changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getDependencies()", "full_signature": "@Override public List<String> getDependencies()", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespace.getDependencies()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_unixGID_namespace.java"}, "focal_method": {"identifier": "checkAttributeSemantics", "parameters": "(PerunSessionImpl sess, Group group, Attribute attribute)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException{\n\t\ttry{\n\t\t\tString gidNamespace = attribute.getFriendlyNameParameter();\n\n\t\t\t//Special behaviour if gid is null\n\t\t\tif(attribute.getValue() == null) {\n\t\t\t\tList<Facility> groupFacilities = new ArrayList<>();\n\t\t\t\tfor(Resource r: sess.getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)) {\n\t\t\t\t\tgroupFacilities.add(sess.getPerunBl().getResourcesManagerBl().getFacility(sess, r));\n\t\t\t\t}\n\n\t\t\t\tSet<String> namespacesWhereGroupMustHaveGIDifItHaveUnixNameThere = sess.getPerunBl().getModulesUtilsBl().getSetOfGroupNameNamespacesWhereFacilitiesHasTheSameGIDNamespace(sess, groupFacilities, attribute);\n\t\t\t\tfor(String namespace : namespacesWhereGroupMustHaveGIDifItHaveUnixNameThere) {\n\t\t\t\t\tAttribute unixGroupName = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, group, A_G_unixGroupName_namespace + \":\" + namespace);\n\t\t\t\t\tif(unixGroupName.getValue() != null) {\n\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute,  unixGroupName, group, null, group, null, \"Group is propagated to the facility where it have set unix group name so it must have unix GID too.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;   //Group is not propagated to any facility in this GID namespace or it doesn't have set unix name there so it doesn't need to have unix GID.\n\t\t\t}\n\n\t\t\tInteger attrValue = attribute.valueAsInteger();\n\n\t\t\t//check if gid is not already depleted\n\t\t\tAttribute usedGids = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, gidNamespace, A_E_usedGids);\n\t\t\t//null in value means there is no depleted or used gids\n\t\t\tif(usedGids.getValue() != null) {\n\t\t\t\tMap<String, String> usedGidsValue = usedGids.valueAsMap();\n\t\t\t\t//Dx, where x is GID means depleted value for GID x\n\t\t\t\tif(usedGidsValue.containsKey(\"D\" + attrValue.toString())) {\n\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, usedGids, group, null, gidNamespace, null, \"This GID is already depleted.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Check if gid GID is within allowed range\n\t\t\ttry {\n\t\t\t\tsess.getPerunBl().getModulesUtilsBl().checkIfGIDIsWithinRange(sess, attribute);\n\t\t\t} catch (WrongAttributeValueException e) {\n\t\t\t\tthrow new WrongReferenceAttributeValueException(e);\n\t\t\t}\n\n\t\t\t//Prepare lists for all groups and resources with same GID in the same namespace\n\n\t\t\t//Prepare attributes for searching through groups and resources\n\t\t\tAttribute groupGIDAttribute = attribute;\n\t\t\tAttribute resourceGIDAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, A_R_unixGID_namespace + \":\" + gidNamespace));\n\t\t\tresourceGIDAttribute.setValue(groupGIDAttribute.getValue());\n\n\t\t\t//Fill lists of Groups and Resources by data\n\t\t\tList<Group> allGroupsWithSameGIDInSameNamespace = new ArrayList<>(sess.getPerunBl().getGroupsManagerBl().getGroupsByAttribute(sess, groupGIDAttribute));\n\t\t\tList<Resource> allResourcesWithSameGIDInSameNamespace = new ArrayList<>(sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGIDAttribute));\n\t\t\t//remove this group\n\t\t\tallGroupsWithSameGIDInSameNamespace.remove(group);\n\n\t\t\t//Prepare list of GroupName attributes of this group\n\t\t\tList <Attribute> groupNamesOfGroup = sess.getPerunBl().getAttributesManagerBl().getAllAttributesStartWithNameWithoutNullValue(sess, group, A_G_unixGroupName_namespace + \":\");\n\n\t\t\t//Searching through groups\n\t\t\tif(!allGroupsWithSameGIDInSameNamespace.isEmpty()) {\n\t\t\t\tfor(Group g: allGroupsWithSameGIDInSameNamespace) {\n\t\t\t\t\tfor(Attribute a: groupNamesOfGroup) {\n\t\t\t\t\t\tint compare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, g, a);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\t//This is problem, there is the same attribute but have other value\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, group, null, g, null, \"There is a group with same GID (namespace: \"  + gidNamespace + \") and different unix group name (namespace: \" + a.getFriendlyNameParameter() + \"). \" + g + \" \" + group);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Other possibilities are not problem, less than 0 mean that same attribute not exists, and 0 mean that attribute exists but have same value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Searching through resources\n\t\t\tif(!allResourcesWithSameGIDInSameNamespace.isEmpty()) {\n\t\t\t\tfor(Resource r: allResourcesWithSameGIDInSameNamespace) {\n\t\t\t\t\tfor(Attribute a: groupNamesOfGroup) {\n\t\t\t\t\t\t//Prepare resource version of this group attribute\n\t\t\t\t\t\tAttribute resourceGroupName = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, A_R_unixGroupName_namespace + \":\" + a.getFriendlyNameParameter()));\n\t\t\t\t\t\tresourceGroupName.setValue(a.getValue());\n\n\t\t\t\t\t\tint compare = sess.getPerunBl().getModulesUtilsBl().haveTheSameAttributeWithTheSameNamespace(sess, r, resourceGroupName);\n\n\t\t\t\t\t\tif(compare > 0) {\n\t\t\t\t\t\t\t//This is problem, there is the same attribute but have other value\n\t\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, a, group, null, r, null, \"There is a resource with same GID (namespace: \"  + gidNamespace + \") and different unix group name (namespace: \" + a.getFriendlyNameParameter() + \"). \" + r + \" \" + group);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Other possibilities are not problem, less than 0 mean that same attribute not exists, and 0 mean that attribute exists but have same value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch(AttributeNotExistsException ex) {\n\t\t\tthrow new ConsistencyErrorException(ex);\n\t\t}\n\t}", "signature": "void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "full_signature": "@Override public void checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "class_method_signature": "urn_perun_group_attribute_def_def_unixGID_namespace.checkAttributeSemantics(PerunSessionImpl sess, Group group, Attribute attribute)", "testcase": false, "constructor": false, "invocations": ["getFriendlyNameParameter", "getValue", "getAssignedResources", "getResourcesManagerBl", "getPerunBl", "add", "getFacility", "getResourcesManagerBl", "getPerunBl", "getSetOfGroupNameNamespacesWhereFacilitiesHasTheSameGIDNamespace", "getModulesUtilsBl", "getPerunBl", "getAttribute", "getAttributesManagerBl", "getPerunBl", "getValue", "valueAsInteger", "getAttribute", "getAttributesManagerBl", "getPerunBl", "getValue", "valueAsMap", "containsKey", "toString", "checkIfGIDIsWithinRange", "getModulesUtilsBl", "getPerunBl", "getAttributeDefinition", "getAttributesManagerBl", "getPerunBl", "setValue", "getValue", "getGroupsByAttribute", "getGroupsManagerBl", "getPerunBl", "getResourcesByAttribute", "getResourcesManagerBl", "getPerunBl", "remove", "getAllAttributesStartWithNameWithoutNullValue", "getAttributesManagerBl", "getPerunBl", "isEmpty", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "getFriendlyNameParameter", "isEmpty", "getAttributeDefinition", "getAttributesManagerBl", "getPerunBl", "getFriendlyNameParameter", "setValue", "getValue", "haveTheSameAttributeWithTheSameNamespace", "getModulesUtilsBl", "getPerunBl", "getFriendlyNameParameter"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}