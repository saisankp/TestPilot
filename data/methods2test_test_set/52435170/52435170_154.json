{"test_class": {"identifier": "BootstrappingDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ExecutionContext ctx;", "modifier": "@Mock\n    private", "type": "ExecutionContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@Mock\n    private DataSource ds;", "modifier": "@Mock\n    private", "type": "DataSource", "declarator": "ds", "var_name": "ds"}, {"original_string": "@Mock\n    private MetadataExtractor extractor;", "modifier": "@Mock\n    private", "type": "MetadataExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "@Mock\n    private AnnotationInspector<Bootstrapping> bootstrappingInpector;", "modifier": "@Mock\n    private", "type": "AnnotationInspector<Bootstrapping>", "declarator": "bootstrappingInpector", "var_name": "bootstrappingInpector"}, {"original_string": "@Mock\n    private TestInvocation invocation;", "modifier": "@Mock\n    private", "type": "TestInvocation", "declarator": "invocation", "var_name": "invocation"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/BootstrappingDecoratorTest.java"}, "test_case": {"identifier": "testBootstrappingMethodIsInvoked", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBootstrappingMethodIsInvoked() throws Throwable {\n        // GIVEN\n        final Method bootstrappingMethodOne = getClass().getMethod(\"bootstrappingMethodOne\", DataSource.class);\n        when(bootstrappingInpector.getAnnotatedMethods()).thenReturn(Arrays.asList(bootstrappingMethodOne));\n\n        final BootstrappingDecorator decorator = new BootstrappingDecorator();\n\n        // WHEN\n        decorator.beforeAll(invocation);\n\n        // THEN\n        verifyStatic(BootstrappingDecoratorTest.class);\n        BootstrappingDecoratorTest.bootstrappingMethodOne(eq(ds));\n    }", "signature": "void testBootstrappingMethodIsInvoked()", "full_signature": "@Test public void testBootstrappingMethodIsInvoked()", "class_method_signature": "BootstrappingDecoratorTest.testBootstrappingMethodIsInvoked()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getClass", "thenReturn", "when", "getAnnotatedMethods", "asList", "beforeAll", "verifyStatic", "bootstrappingMethodOne", "eq"]}, "focal_class": {"identifier": "BootstrappingDecorator", "superclass": "", "interfaces": "implements TestClassDecorator", "fields": [], "methods": [{"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "BootstrappingDecorator.getPriority()", "testcase": false, "constructor": false}, {"identifier": "beforeAll", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void beforeAll(final TestInvocation invocation)", "full_signature": "@Override public void beforeAll(final TestInvocation invocation)", "class_method_signature": "BootstrappingDecorator.beforeAll(final TestInvocation invocation)", "testcase": false, "constructor": false}, {"identifier": "afterAll", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void afterAll(final TestInvocation invocation)", "full_signature": "@Override public void afterAll(final TestInvocation invocation)", "class_method_signature": "BootstrappingDecorator.afterAll(final TestInvocation invocation)", "testcase": false, "constructor": false}, {"identifier": "isConfigurationSupported", "parameters": "(final ExecutionContext ctx)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConfigurationSupported(final ExecutionContext ctx)", "full_signature": "@Override public boolean isConfigurationSupported(final ExecutionContext ctx)", "class_method_signature": "BootstrappingDecorator.isConfigurationSupported(final ExecutionContext ctx)", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/BootstrappingDecorator.java"}, "focal_method": {"identifier": "beforeAll", "parameters": "(final TestInvocation invocation)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void beforeAll(final TestInvocation invocation) throws Exception {\n        final DataSource ds = (DataSource) invocation.getContext().getData(Constants.KEY_DATA_SOURCE);\n\n        final MetadataExtractor extractor = new MetadataExtractor(invocation.getTestClass());\n        final List<Method> bootstrappingMethods = extractor.bootstrapping().getAnnotatedMethods();\n        checkArgument(bootstrappingMethods.size() <= 1, \"Only single method is allowed to be annotated with @Bootstrapping\");\n\n        if (!bootstrappingMethods.isEmpty()) {\n            final Method tmp = bootstrappingMethods.get(0);\n            checkArgument(Modifier.isStatic(tmp.getModifiers()), \"A bootstrapping method is required to be static\");\n\n            final Class<?>[] parameterTypes = tmp.getParameterTypes();\n            checkArgument(parameterTypes.length == 1, \"A bootstrapping method is required to have a single parameter of type DataSource\");\n            checkArgument(parameterTypes[0].equals(DataSource.class),\n                    \"A bootstrapping method is required to have a single parameter of type DataSource\");\n\n            tmp.invoke(null, ds);\n        }\n    }", "signature": "void beforeAll(final TestInvocation invocation)", "full_signature": "@Override public void beforeAll(final TestInvocation invocation)", "class_method_signature": "BootstrappingDecorator.beforeAll(final TestInvocation invocation)", "testcase": false, "constructor": false, "invocations": ["getData", "getContext", "getTestClass", "getAnnotatedMethods", "bootstrapping", "checkArgument", "size", "isEmpty", "get", "checkArgument", "isStatic", "getModifiers", "getParameterTypes", "checkArgument", "checkArgument", "equals", "invoke"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}