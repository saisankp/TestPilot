{"test_class": {"identifier": "NiceRowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SchemaFactory SCHEMA_FACTORY = new SchemaFactory(\"test_schema\");", "modifier": "private static final", "type": "SchemaFactory", "declarator": "SCHEMA_FACTORY = new SchemaFactory(\"test_schema\")", "var_name": "SCHEMA_FACTORY"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/api/dml/scan/NiceRowTest.java"}, "test_case": {"identifier": "testEquality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquality() {\n        TreeMap<Integer,NiceRow> mapOne = new TreeMap<>();\n        TreeMap<Integer,NiceRow> mapTwo = new TreeMap<>();\n        NiceRow rowOne = new NiceRow(1, (RowDef)null);\n        rowOne.put(0, Long.valueOf(0l));\n        rowOne.put(1, \"hello world\");\n        mapOne.put(0, rowOne);\n\n        NiceRow rowTwo = new NiceRow(1, (RowDef)null);\n        rowTwo.put(0, Long.valueOf(0l));\n        rowTwo.put(1, \"hello world\");\n        mapTwo.put(0, rowTwo);\n\n        assertEquals(\"rows\", rowOne, rowTwo);\n        assertEquals(\"maps\", mapOne, mapTwo);\n    }", "signature": "void testEquality()", "full_signature": "@Test public void testEquality()", "class_method_signature": "NiceRowTest.testEquality()", "testcase": true, "constructor": false, "invocations": ["put", "valueOf", "put", "put", "put", "valueOf", "put", "put", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "NiceRow", "superclass": "extends NewRow", "interfaces": "", "fields": [{"original_string": "private final static int INITIAL_ROW_DATA_SIZE = RowData.CREATE_ROW_INITIAL_SIZE;", "modifier": "private final static", "type": "int", "declarator": "INITIAL_ROW_DATA_SIZE = RowData.CREATE_ROW_INITIAL_SIZE", "var_name": "INITIAL_ROW_DATA_SIZE"}, {"original_string": "private final Map<Integer,Object> fields;", "modifier": "private final", "type": "Map<Integer,Object>", "declarator": "fields", "var_name": "fields"}, {"original_string": "private final int tableId;", "modifier": "private final", "type": "int", "declarator": "tableId", "var_name": "tableId"}], "methods": [{"identifier": "NiceRow", "parameters": "(int tableId, RowDef rowDef)", "modifiers": "public", "return": "", "signature": " NiceRow(int tableId, RowDef rowDef)", "full_signature": "public  NiceRow(int tableId, RowDef rowDef)", "class_method_signature": "NiceRow.NiceRow(int tableId, RowDef rowDef)", "testcase": false, "constructor": true}, {"identifier": "NiceRow", "parameters": "(NewRow copyFrom)", "modifiers": "public", "return": "", "signature": " NiceRow(NewRow copyFrom)", "full_signature": "public  NiceRow(NewRow copyFrom)", "class_method_signature": "NiceRow.NiceRow(NewRow copyFrom)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(int index, Object object)", "modifiers": "@Override public", "return": "Object", "signature": "Object put(int index, Object object)", "full_signature": "@Override public Object put(int index, Object object)", "class_method_signature": "NiceRow.put(int index, Object object)", "testcase": false, "constructor": false}, {"identifier": "getTableId", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTableId()", "full_signature": "@Override public int getTableId()", "class_method_signature": "NiceRow.getTableId()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int column)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(int column)", "full_signature": "@Override public Object get(int column)", "class_method_signature": "NiceRow.get(int column)", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "(int columnId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasValue(int columnId)", "full_signature": "@Override public boolean hasValue(int columnId)", "class_method_signature": "NiceRow.hasValue(int columnId)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int columnId)", "modifiers": "@Override public", "return": "Object", "signature": "Object remove(int columnId)", "full_signature": "@Override public Object remove(int columnId)", "class_method_signature": "NiceRow.remove(int columnId)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer,Object>", "signature": "Map<Integer,Object> getFields()", "full_signature": "@Override public Map<Integer,Object> getFields()", "class_method_signature": "NiceRow.getFields()", "testcase": false, "constructor": false}, {"identifier": "fromRowData", "parameters": "(RowData origData, RowDef rowDef)", "modifiers": "public static", "return": "NewRow", "signature": "NewRow fromRowData(RowData origData, RowDef rowDef)", "full_signature": "public static NewRow fromRowData(RowData origData, RowDef rowDef)", "class_method_signature": "NiceRow.fromRowData(RowData origData, RowDef rowDef)", "testcase": false, "constructor": false}, {"identifier": "toRowData", "parameters": "()", "modifiers": "@Override public", "return": "RowData", "signature": "RowData toRowData()", "full_signature": "@Override public RowData toRowData()", "class_method_signature": "NiceRow.toRowData()", "testcase": false, "constructor": false}, {"identifier": "getActiveColumns", "parameters": "()", "modifiers": "@Override public", "return": "ColumnSelector", "signature": "ColumnSelector getActiveColumns()", "full_signature": "@Override public ColumnSelector getActiveColumns()", "class_method_signature": "NiceRow.getActiveColumns()", "testcase": false, "constructor": false}, {"identifier": "isColumnNull", "parameters": "(int columnId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isColumnNull(int columnId)", "full_signature": "@Override public boolean isColumnNull(int columnId)", "class_method_signature": "NiceRow.isColumnNull(int columnId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "NiceRow.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "NiceRow.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "NiceRow.hashCode()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/api/dml/scan/NiceRow.java"}, "focal_method": {"identifier": "put", "parameters": "(int index, Object object)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object put(int index, Object object) {\n        return fields.put(index, object);\n    }", "signature": "Object put(int index, Object object)", "full_signature": "@Override public Object put(int index, Object object)", "class_method_signature": "NiceRow.put(int index, Object object)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}