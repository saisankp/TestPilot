{"test_class": {"identifier": "UpdaterTest", "superclass": "", "interfaces": "", "fields": [], "file": "RecipeManager-base/src/test/java/haveric/recipeManager/UpdaterTest.java"}, "test_case": {"identifier": "testVersionEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVersionEquals() {\n        assertEquals(0, Updater.isVersionNewerThan(\"2.10.0\", \"RecipeManager v2.10.0\"));\n        assertEquals(0, Updater.isVersionNewerThan(\"2.10.0 alpha\", \"RecipeManager v2.10.0 alpha\"));\n        assertEquals(0, Updater.isVersionNewerThan(\"2.10.0 beta\", \"v2.10.0 beta\"));\n    }", "signature": "void testVersionEquals()", "full_signature": "@Test public void testVersionEquals()", "class_method_signature": "UpdaterTest.testVersionEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "isVersionNewerThan", "assertEquals", "isVersionNewerThan", "assertEquals", "isVersionNewerThan"]}, "focal_class": {"identifier": "Updater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int projectID;", "modifier": "private static", "type": "int", "declarator": "projectID", "var_name": "projectID"}, {"original_string": "private static String apiKey;", "modifier": "private static", "type": "String", "declarator": "apiKey", "var_name": "apiKey"}, {"original_string": "private static final String API_NAME_VALUE = \"name\";", "modifier": "private static final", "type": "String", "declarator": "API_NAME_VALUE = \"name\"", "var_name": "API_NAME_VALUE"}, {"original_string": "private static final String API_LINK_VALUE = \"downloadUrl\";", "modifier": "private static final", "type": "String", "declarator": "API_LINK_VALUE = \"downloadUrl\"", "var_name": "API_LINK_VALUE"}, {"original_string": "private static final String API_QUERY = \"/servermods/files?projectIds=\";", "modifier": "private static final", "type": "String", "declarator": "API_QUERY = \"/servermods/files?projectIds=\"", "var_name": "API_QUERY"}, {"original_string": "private static final String API_HOST = \"https://api.curseforge.com\";", "modifier": "private static final", "type": "String", "declarator": "API_HOST = \"https://api.curseforge.com\"", "var_name": "API_HOST"}, {"original_string": "private static String urlFiles;", "modifier": "private static", "type": "String", "declarator": "urlFiles", "var_name": "urlFiles"}, {"original_string": "private static RecipeManager plugin;", "modifier": "private static", "type": "RecipeManager", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private static String pluginName;", "modifier": "private static", "type": "String", "declarator": "pluginName", "var_name": "pluginName"}, {"original_string": "private static String latestVersion;", "modifier": "private static", "type": "String", "declarator": "latestVersion", "var_name": "latestVersion"}, {"original_string": "private static String latestLink;", "modifier": "private static", "type": "String", "declarator": "latestLink", "var_name": "latestLink"}, {"original_string": "private static BukkitTask task = null;", "modifier": "private static", "type": "BukkitTask", "declarator": "task = null", "var_name": "task"}], "methods": [{"identifier": "Updater", "parameters": "()", "modifiers": "private", "return": "", "signature": " Updater()", "full_signature": "private  Updater()", "class_method_signature": "Updater.Updater()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(RecipeManager newPlugin, int newProjectID, String newApiKey)", "modifiers": "public static", "return": "void", "signature": "void init(RecipeManager newPlugin, int newProjectID, String newApiKey)", "full_signature": "public static void init(RecipeManager newPlugin, int newProjectID, String newApiKey)", "class_method_signature": "Updater.init(RecipeManager newPlugin, int newProjectID, String newApiKey)", "testcase": false, "constructor": false}, {"identifier": "updateOnce", "parameters": "(final CommandSender sender)", "modifiers": "public static", "return": "void", "signature": "void updateOnce(final CommandSender sender)", "full_signature": "public static void updateOnce(final CommandSender sender)", "class_method_signature": "Updater.updateOnce(final CommandSender sender)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void stop()", "full_signature": "public static void stop()", "class_method_signature": "Updater.stop()", "testcase": false, "constructor": false}, {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getCurrentVersion()", "full_signature": "public static String getCurrentVersion()", "class_method_signature": "Updater.getCurrentVersion()", "testcase": false, "constructor": false}, {"identifier": "getLatestVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLatestVersion()", "full_signature": "public static String getLatestVersion()", "class_method_signature": "Updater.getLatestVersion()", "testcase": false, "constructor": false}, {"identifier": "isVersionNewerThan", "parameters": "(String version, String check)", "modifiers": "public static", "return": "int", "signature": "int isVersionNewerThan(String version, String check)", "full_signature": "public static int isVersionNewerThan(String version, String check)", "class_method_signature": "Updater.isVersionNewerThan(String version, String check)", "testcase": false, "constructor": false}, {"identifier": "isVersionOlderThan", "parameters": "(String version, String check)", "modifiers": "public static", "return": "int", "signature": "int isVersionOlderThan(String version, String check)", "full_signature": "public static int isVersionOlderThan(String version, String check)", "class_method_signature": "Updater.isVersionOlderThan(String version, String check)", "testcase": false, "constructor": false}, {"identifier": "getLatestLink", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLatestLink()", "full_signature": "public static String getLatestLink()", "class_method_signature": "Updater.getLatestLink()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(CommandSender sender)", "modifiers": "public static", "return": "void", "signature": "void query(CommandSender sender)", "full_signature": "public static void query(CommandSender sender)", "class_method_signature": "Updater.query(CommandSender sender)", "testcase": false, "constructor": false}], "file": "RecipeManager-base/src/main/java/haveric/recipeManager/Updater.java"}, "focal_method": {"identifier": "isVersionNewerThan", "parameters": "(String version, String check)", "modifiers": "public static", "return": "int", "body": "public static int isVersionNewerThan(String version, String check) {\n        // If version starts with RecipeManager, remove it\n        if (version.startsWith(\"RecipeManager\")) {\n            version = version.substring(\"RecipeManager\".length()).trim();\n        }\n\n        if (check.startsWith(\"RecipeManager\")) {\n            check = check.substring(\"RecipeManager\".length()).trim();\n        }\n\n        // Remove initial \"v\". Ex: v1.0.0 -> 1.0.0\n        if (version.startsWith(\"v\")) {\n            version = version.substring(1).trim();\n        }\n\n        if (check.startsWith(\"v\")) {\n            check = check.substring(1).trim();\n        }\n\n        if (version.equals(check)) {\n            return 0;\n        }\n\n        String[] versionSplit = version.split(\"[ -]\");\n        String[] checkSplit = check.split(\"[ -]\");\n\n        int compare = -2;\n        String[] currentArray = versionSplit[0].split(\"\\\\.\");\n        String[] latestArray = checkSplit[0].split(\"\\\\.\");\n\n        int shortest = currentArray.length;\n        int latestLength = latestArray.length;\n        if (latestLength < shortest) {\n            shortest = latestLength;\n        }\n\n        for (int i = 0; i < shortest; i++) {\n            int c = Integer.parseInt(currentArray[i]);\n            int l = Integer.parseInt(latestArray[i]);\n\n            if (c > l) {\n                compare = 1;\n                break;\n            } else if (l > c) {\n                compare = -1;\n                break;\n            }\n        }\n\n        if (compare == -2) {\n            boolean versionHasBeta = versionSplit.length > 1;\n            boolean checkHasBeta = checkSplit.length > 1;\n            if (versionHasBeta && checkHasBeta) {\n                String versionBeta = versionSplit[1];\n                versionBeta = versionBeta.replace(\"dev\", \"0.\");\n                versionBeta = versionBeta.replace(\"alpha\", \"1.\");\n                versionBeta = versionBeta.replace(\"beta\", \"2.\");\n\n                String checkBeta = checkSplit[1];\n                checkBeta = checkBeta.replace(\"dev\", \"0.\");\n                checkBeta = checkBeta.replace(\"alpha\", \"1.\");\n                checkBeta = checkBeta.replace(\"beta\", \"2.\");\n\n                try {\n                    double versionDouble = Double.parseDouble(versionBeta);\n                    double checkDouble = Double.parseDouble(checkBeta);\n                    if (versionDouble > checkDouble) {\n                        compare = 1;\n                    } else if (versionDouble < checkDouble) {\n                        compare = -1;\n                    }\n                } catch (NumberFormatException e) {\n                    // Versions aren't doubles, fail quietly\n                }\n            } else if (versionHasBeta) {\n                // Only beta status on version means it's newer\n                compare = 1;\n            } else if (checkHasBeta) {\n                // Only beta status on check means version is older\n                compare = -1;\n            }\n        }\n\n        return compare;\n    }", "signature": "int isVersionNewerThan(String version, String check)", "full_signature": "public static int isVersionNewerThan(String version, String check)", "class_method_signature": "Updater.isVersionNewerThan(String version, String check)", "testcase": false, "constructor": false, "invocations": ["startsWith", "trim", "substring", "length", "startsWith", "trim", "substring", "length", "startsWith", "trim", "substring", "startsWith", "trim", "substring", "equals", "split", "split", "split", "split", "parseInt", "parseInt", "replace", "replace", "replace", "replace", "replace", "replace", "parseDouble", "parseDouble"]}, "repository": {"repo_id": 22809141, "url": "https://github.com/haveric/RecipeManager2", "stars": 13, "created": "8/10/2014 1:13:29 PM +00:00", "updates": "2019-12-11T06:00:20+00:00", "fork": "False", "license": "licensed"}}