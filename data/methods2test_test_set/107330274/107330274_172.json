{"test_class": {"identifier": "DefaultLocalSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AtomicReference<ScheduledAction> lastSucceededAction = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<ScheduledAction>", "declarator": "lastSucceededAction = new AtomicReference<>()", "var_name": "lastSucceededAction"}, {"original_string": "private final AtomicReference<ScheduledAction> lastFailedAction = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<ScheduledAction>", "declarator": "lastFailedAction = new AtomicReference<>()", "var_name": "lastFailedAction"}, {"original_string": "private final ScheduleDescriptor scheduleDescriptor = ScheduleDescriptor.newBuilder()\n            .withName(\"testSchedule\")\n            .withDescription(\"Test scheduler\")\n            .withInterval(Duration.ofMillis(1))\n            .withTimeout(Duration.ofMillis(500))\n            .withRetryerSupplier(() -> Retryers.interval(100, TimeUnit.MILLISECONDS))\n            .withOnSuccessHandler(lastSucceededAction::set)\n            .withOnErrorHandler((action, error) -> lastFailedAction.set(action))\n            .build();", "modifier": "private final", "type": "ScheduleDescriptor", "declarator": "scheduleDescriptor = ScheduleDescriptor.newBuilder()\n            .withName(\"testSchedule\")\n            .withDescription(\"Test scheduler\")\n            .withInterval(Duration.ofMillis(1))\n            .withTimeout(Duration.ofMillis(500))\n            .withRetryerSupplier(() -> Retryers.interval(100, TimeUnit.MILLISECONDS))\n            .withOnSuccessHandler(lastSucceededAction::set)\n            .withOnErrorHandler((action, error) -> lastFailedAction.set(action))\n            .build()", "var_name": "scheduleDescriptor"}, {"original_string": "private final LocalScheduler localScheduler = new DefaultLocalScheduler(Duration.ofMillis(1), Schedulers.parallel(), Clocks.system(), new DefaultRegistry());", "modifier": "private final", "type": "LocalScheduler", "declarator": "localScheduler = new DefaultLocalScheduler(Duration.ofMillis(1), Schedulers.parallel(), Clocks.system(), new DefaultRegistry())", "var_name": "localScheduler"}, {"original_string": "private final TitusRxSubscriber<LocalSchedulerEvent> eventSubscriber = new TitusRxSubscriber<>();", "modifier": "private final", "type": "TitusRxSubscriber<LocalSchedulerEvent>", "declarator": "eventSubscriber = new TitusRxSubscriber<>()", "var_name": "eventSubscriber"}], "file": "titus-common/src/test/java/com/netflix/titus/common/framework/scheduler/internal/DefaultLocalSchedulerTest.java"}, "test_case": {"identifier": "testRetries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetries() throws InterruptedException {\n        AtomicInteger counter = new AtomicInteger();\n        ScheduleReference reference = localScheduler.scheduleMono(\n                scheduleDescriptor.toBuilder().withName(\"testRetries\").build(),\n                tick -> Mono.defer(() ->\n                        counter.incrementAndGet() % 2 == 0\n                                ? Mono.empty()\n                                : Mono.error(new RuntimeException(\"Simulated error at iteration \" + counter.get()))),\n                Schedulers.parallel()\n        );\n\n        expectScheduleAdded(reference);\n        expectScheduleUpdateEvent(SchedulingState.Running);\n        expectScheduleUpdateEvent(SchedulingState.Failed);\n\n        expectScheduleUpdateEvent(SchedulingState.Waiting);\n        expectScheduleUpdateEvent(SchedulingState.Running);\n        expectScheduleUpdateEvent(SchedulingState.Succeeded);\n    }", "signature": "void testRetries()", "full_signature": "@Test public void testRetries()", "class_method_signature": "DefaultLocalSchedulerTest.testRetries()", "testcase": true, "constructor": false, "invocations": ["scheduleMono", "build", "withName", "toBuilder", "defer", "incrementAndGet", "empty", "error", "get", "parallel", "expectScheduleAdded", "expectScheduleUpdateEvent", "expectScheduleUpdateEvent", "expectScheduleUpdateEvent", "expectScheduleUpdateEvent", "expectScheduleUpdateEvent"]}, "focal_class": {"identifier": "DefaultLocalScheduler", "superclass": "", "interfaces": "implements LocalScheduler", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultLocalScheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultLocalScheduler.class)", "var_name": "logger"}, {"original_string": "private static final ThreadGroup SCHEDULER_THREAD_GROUP = new ThreadGroup(\"LocalScheduler\");", "modifier": "private static final", "type": "ThreadGroup", "declarator": "SCHEDULER_THREAD_GROUP = new ThreadGroup(\"LocalScheduler\")", "var_name": "SCHEDULER_THREAD_GROUP"}, {"original_string": "private static final Runnable DO_NOTHING = () -> {\n    };", "modifier": "private static final", "type": "Runnable", "declarator": "DO_NOTHING = () -> {\n    }", "var_name": "DO_NOTHING"}, {"original_string": "private final long internalLoopIntervalMs;", "modifier": "private final", "type": "long", "declarator": "internalLoopIntervalMs", "var_name": "internalLoopIntervalMs"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final Registry registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final Scheduler.Worker worker;", "modifier": "private final", "type": "Scheduler.Worker", "declarator": "worker", "var_name": "worker"}, {"original_string": "private final BlockingQueue<ScheduleHolder> newHolders = new LinkedBlockingQueue<>();", "modifier": "private final", "type": "BlockingQueue<ScheduleHolder>", "declarator": "newHolders = new LinkedBlockingQueue<>()", "var_name": "newHolders"}, {"original_string": "private final ConcurrentMap<String, ScheduleHolder> activeHoldersById = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, ScheduleHolder>", "declarator": "activeHoldersById = new ConcurrentHashMap<>()", "var_name": "activeHoldersById"}, {"original_string": "private final ConcurrentMap<String, Schedule> archivedSchedulesById = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, Schedule>", "declarator": "archivedSchedulesById = new ConcurrentHashMap<>()", "var_name": "archivedSchedulesById"}, {"original_string": "private final DirectProcessor<LocalSchedulerEvent> eventProcessor = DirectProcessor.create();", "modifier": "private final", "type": "DirectProcessor<LocalSchedulerEvent>", "declarator": "eventProcessor = DirectProcessor.create()", "var_name": "eventProcessor"}, {"original_string": "private final SchedulerMetrics metrics;", "modifier": "private final", "type": "SchedulerMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final Disposable transactionLoggerDisposable;", "modifier": "private final", "type": "Disposable", "declarator": "transactionLoggerDisposable", "var_name": "transactionLoggerDisposable"}], "methods": [{"identifier": "DefaultLocalScheduler", "parameters": "(Duration internalLoopInterval, Scheduler scheduler, Clock clock, Registry registry)", "modifiers": "public", "return": "", "signature": " DefaultLocalScheduler(Duration internalLoopInterval, Scheduler scheduler, Clock clock, Registry registry)", "full_signature": "public  DefaultLocalScheduler(Duration internalLoopInterval, Scheduler scheduler, Clock clock, Registry registry)", "class_method_signature": "DefaultLocalScheduler.DefaultLocalScheduler(Duration internalLoopInterval, Scheduler scheduler, Clock clock, Registry registry)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "DefaultLocalScheduler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getActiveSchedules", "parameters": "()", "modifiers": "@Override public", "return": "List<Schedule>", "signature": "List<Schedule> getActiveSchedules()", "full_signature": "@Override public List<Schedule> getActiveSchedules()", "class_method_signature": "DefaultLocalScheduler.getActiveSchedules()", "testcase": false, "constructor": false}, {"identifier": "getArchivedSchedules", "parameters": "()", "modifiers": "@Override public", "return": "List<Schedule>", "signature": "List<Schedule> getArchivedSchedules()", "full_signature": "@Override public List<Schedule> getArchivedSchedules()", "class_method_signature": "DefaultLocalScheduler.getArchivedSchedules()", "testcase": false, "constructor": false}, {"identifier": "findSchedule", "parameters": "(String scheduleId)", "modifiers": "@Override public", "return": "Optional<Schedule>", "signature": "Optional<Schedule> findSchedule(String scheduleId)", "full_signature": "@Override public Optional<Schedule> findSchedule(String scheduleId)", "class_method_signature": "DefaultLocalScheduler.findSchedule(String scheduleId)", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Flux<LocalSchedulerEvent>", "signature": "Flux<LocalSchedulerEvent> events()", "full_signature": "@Override public Flux<LocalSchedulerEvent> events()", "class_method_signature": "DefaultLocalScheduler.events()", "testcase": false, "constructor": false}, {"identifier": "scheduleMono", "parameters": "(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "modifiers": "@Override public", "return": "ScheduleReference", "signature": "ScheduleReference scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "full_signature": "@Override public ScheduleReference scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "class_method_signature": "DefaultLocalScheduler.scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, boolean isolated)", "modifiers": "@Override public", "return": "ScheduleReference", "signature": "ScheduleReference schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, boolean isolated)", "full_signature": "@Override public ScheduleReference schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, boolean isolated)", "class_method_signature": "DefaultLocalScheduler.schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, boolean isolated)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, ExecutorService executorService)", "modifiers": "@Override public", "return": "ScheduleReference", "signature": "ScheduleReference schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, ExecutorService executorService)", "full_signature": "@Override public ScheduleReference schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, ExecutorService executorService)", "class_method_signature": "DefaultLocalScheduler.schedule(ScheduleDescriptor scheduleDescriptor, Consumer<ExecutionContext> action, ExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "scheduleInternal", "parameters": "(ScheduleDescriptor descriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler, Runnable cleanup)", "modifiers": "private", "return": "ScheduleReference", "signature": "ScheduleReference scheduleInternal(ScheduleDescriptor descriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler, Runnable cleanup)", "full_signature": "private ScheduleReference scheduleInternal(ScheduleDescriptor descriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler, Runnable cleanup)", "class_method_signature": "DefaultLocalScheduler.scheduleInternal(ScheduleDescriptor descriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler, Runnable cleanup)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(String scheduleId)", "modifiers": "@Override public", "return": "Mono<Void>", "signature": "Mono<Void> cancel(String scheduleId)", "full_signature": "@Override public Mono<Void> cancel(String scheduleId)", "class_method_signature": "DefaultLocalScheduler.cancel(String scheduleId)", "testcase": false, "constructor": false}, {"identifier": "scheduleNextIteration", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scheduleNextIteration()", "full_signature": "private void scheduleNextIteration()", "class_method_signature": "DefaultLocalScheduler.scheduleNextIteration()", "testcase": false, "constructor": false}, {"identifier": "doRun", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doRun()", "full_signature": "private void doRun()", "class_method_signature": "DefaultLocalScheduler.doRun()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/framework/scheduler/internal/DefaultLocalScheduler.java"}, "focal_method": {"identifier": "scheduleMono", "parameters": "(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "modifiers": "@Override public", "return": "ScheduleReference", "body": "@Override\n    public ScheduleReference scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler) {\n        return scheduleInternal(scheduleDescriptor, actionProducer, scheduler, DO_NOTHING);\n    }", "signature": "ScheduleReference scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "full_signature": "@Override public ScheduleReference scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "class_method_signature": "DefaultLocalScheduler.scheduleMono(ScheduleDescriptor scheduleDescriptor, Function<ExecutionContext, Mono<Void>> actionProducer, Scheduler scheduler)", "testcase": false, "constructor": false, "invocations": ["scheduleInternal"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}