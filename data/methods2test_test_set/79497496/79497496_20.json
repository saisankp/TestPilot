{"test_class": {"identifier": "TriangleTest", "superclass": "", "interfaces": "", "fields": [], "file": "Projects/Project_07/Example/TriangleTest.java"}, "test_case": {"identifier": "equalsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void equalsTest() {\n   \n      Triangle t1 = new Triangle(7, 10, 7);\n      Triangle t2 = new Triangle(7, 10, 7);\n      Assert.assertEquals(\"equals test\",\n                        true, t1.equals(t2));\n   \n      t2 = new Triangle(6, 10, 7);\n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(t2));\n   \n   \n      t2 = new Triangle(7, 9, 7);\n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(t2));\n   \n      t2 = new Triangle(7, 10, 9);\n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(t2));\n   \n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(\"obj\"));\n   \n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(\"obj\"));\n      Assert.assertEquals(\"equals false test\",\n                        false, t1.equals(\"obj\"));\n   \n      Assert.assertEquals(\"equals false test\",\n                        0, t1.hashCode());\n   \n   }", "signature": "void equalsTest()", "full_signature": "@Test public void equalsTest()", "class_method_signature": "TriangleTest.equalsTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "equals", "assertEquals", "equals", "assertEquals", "equals", "assertEquals", "equals", "assertEquals", "equals", "assertEquals", "equals", "assertEquals", "equals", "assertEquals", "hashCode"]}, "focal_class": {"identifier": "Triangle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double s1;", "modifier": "private", "type": "double", "declarator": "s1", "var_name": "s1"}, {"original_string": "private double s2;", "modifier": "private", "type": "double", "declarator": "s2", "var_name": "s2"}, {"original_string": "private double s3;", "modifier": "private", "type": "double", "declarator": "s3", "var_name": "s3"}], "methods": [{"identifier": "Triangle", "parameters": "(double side1, double side2, double side3)", "modifiers": "public", "return": "", "signature": " Triangle(double side1, double side2, double side3)", "full_signature": "public  Triangle(double side1, double side2, double side3)", "class_method_signature": "Triangle.Triangle(double side1, double side2, double side3)", "testcase": false, "constructor": true}, {"identifier": "getS1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getS1()", "full_signature": "public double getS1()", "class_method_signature": "Triangle.getS1()", "testcase": false, "constructor": false}, {"identifier": "getS2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getS2()", "full_signature": "public double getS2()", "class_method_signature": "Triangle.getS2()", "testcase": false, "constructor": false}, {"identifier": "getS3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getS3()", "full_signature": "public double getS3()", "class_method_signature": "Triangle.getS3()", "testcase": false, "constructor": false}, {"identifier": "getClassification", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassification()", "full_signature": "public String getClassification()", "class_method_signature": "Triangle.getClassification()", "testcase": false, "constructor": false}, {"identifier": "perimeter", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double perimeter()", "full_signature": "public double perimeter()", "class_method_signature": "Triangle.perimeter()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "Triangle.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Triangle.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Triangle.toString()", "testcase": false, "constructor": false}], "file": "Projects/Project_07/Example/Triangle.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object o) {\n      if (!(o instanceof Triangle)) {\n         return false;\n      }\n      Triangle t = (Triangle) o; \n      return (s1 == t.s1 && s2 == t.s2 && s3 == t.s3);\n   }", "signature": "boolean equals(Object o)", "full_signature": "public boolean equals(Object o)", "class_method_signature": "Triangle.equals(Object o)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 79497496, "url": "https://github.com/perryBunn/COMP1210", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 15825, "license": "MIT License"}}