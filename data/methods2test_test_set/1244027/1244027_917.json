{"test_class": {"identifier": "PlanNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PlanNode node;", "modifier": "private", "type": "PlanNode", "declarator": "node", "var_name": "node"}, {"original_string": "private PlanNode parent;", "modifier": "private", "type": "PlanNode", "declarator": "parent", "var_name": "parent"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/plan/PlanNodeTest.java"}, "test_case": {"identifier": "shouldReturnImmutableListOfChildren", "parameters": "()", "modifiers": "@Test( expected = UnsupportedOperationException.class ) public", "return": "void", "body": "@Test( expected = UnsupportedOperationException.class )\n    public void shouldReturnImmutableListOfChildren() {\n        parent = new PlanNode(Type.JOIN);\n        new PlanNode(Type.ACCESS, parent);\n        new PlanNode(Type.DUP_REMOVE, parent);\n        new PlanNode(Type.GROUP, parent);\n        parent.getChildren().clear();\n    }", "signature": "void shouldReturnImmutableListOfChildren()", "full_signature": "@Test( expected = UnsupportedOperationException.class ) public void shouldReturnImmutableListOfChildren()", "class_method_signature": "PlanNodeTest.shouldReturnImmutableListOfChildren()", "testcase": true, "constructor": false, "invocations": ["clear", "getChildren"]}, "focal_class": {"identifier": "PlanNode", "superclass": "", "interfaces": "implements Iterable<PlanNode>, Readable, Cloneable, java.io.Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private Type type;", "modifier": "private", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private PlanNode parent;", "modifier": "private", "type": "PlanNode", "declarator": "parent", "var_name": "parent"}, {"original_string": "private LinkedList<PlanNode> children = new LinkedList<PlanNode>();", "modifier": "private", "type": "LinkedList<PlanNode>", "declarator": "children = new LinkedList<PlanNode>()", "var_name": "children"}, {"original_string": "private List<PlanNode> childrenView = Collections.unmodifiableList(children);", "modifier": "private", "type": "List<PlanNode>", "declarator": "childrenView = Collections.unmodifiableList(children)", "var_name": "childrenView"}, {"original_string": "private Map<Property, Object> nodeProperties;", "modifier": "private", "type": "Map<Property, Object>", "declarator": "nodeProperties", "var_name": "nodeProperties"}, {"original_string": "private Set<SelectorName> selectors = new HashSet<SelectorName>();", "modifier": "private", "type": "Set<SelectorName>", "declarator": "selectors = new HashSet<SelectorName>()", "var_name": "selectors"}], "methods": [{"identifier": "PlanNode", "parameters": "( Type type )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type )", "full_signature": "public  PlanNode( Type type )", "class_method_signature": "PlanNode.PlanNode( Type type )", "testcase": false, "constructor": true}, {"identifier": "PlanNode", "parameters": "( Type type,\n                     PlanNode parent )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type,\n                     PlanNode parent )", "full_signature": "public  PlanNode( Type type,\n                     PlanNode parent )", "class_method_signature": "PlanNode.PlanNode( Type type,\n                     PlanNode parent )", "testcase": false, "constructor": true}, {"identifier": "PlanNode", "parameters": "( Type type,\n                     SelectorName... selectors )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type,\n                     SelectorName... selectors )", "full_signature": "public  PlanNode( Type type,\n                     SelectorName... selectors )", "class_method_signature": "PlanNode.PlanNode( Type type,\n                     SelectorName... selectors )", "testcase": false, "constructor": true}, {"identifier": "PlanNode", "parameters": "( Type type,\n                     Iterable<SelectorName> selectors )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type,\n                     Iterable<SelectorName> selectors )", "full_signature": "public  PlanNode( Type type,\n                     Iterable<SelectorName> selectors )", "class_method_signature": "PlanNode.PlanNode( Type type,\n                     Iterable<SelectorName> selectors )", "testcase": false, "constructor": true}, {"identifier": "PlanNode", "parameters": "( Type type,\n                     PlanNode parent,\n                     SelectorName... selectors )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type,\n                     PlanNode parent,\n                     SelectorName... selectors )", "full_signature": "public  PlanNode( Type type,\n                     PlanNode parent,\n                     SelectorName... selectors )", "class_method_signature": "PlanNode.PlanNode( Type type,\n                     PlanNode parent,\n                     SelectorName... selectors )", "testcase": false, "constructor": true}, {"identifier": "PlanNode", "parameters": "( Type type,\n                     PlanNode parent,\n                     Iterable<SelectorName> selectors )", "modifiers": "public", "return": "", "signature": " PlanNode( Type type,\n                     PlanNode parent,\n                     Iterable<SelectorName> selectors )", "full_signature": "public  PlanNode( Type type,\n                     PlanNode parent,\n                     Iterable<SelectorName> selectors )", "class_method_signature": "PlanNode.PlanNode( Type type,\n                     PlanNode parent,\n                     Iterable<SelectorName> selectors )", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "PlanNode.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "( Type type )", "modifiers": "public", "return": "void", "signature": "void setType( Type type )", "full_signature": "public void setType( Type type )", "class_method_signature": "PlanNode.setType( Type type )", "testcase": false, "constructor": false}, {"identifier": "isNot", "parameters": "( Type type )", "modifiers": "public", "return": "boolean", "signature": "boolean isNot( Type type )", "full_signature": "public boolean isNot( Type type )", "class_method_signature": "PlanNode.isNot( Type type )", "testcase": false, "constructor": false}, {"identifier": "isNotOneOf", "parameters": "( Type first,\n                               Type... rest )", "modifiers": "public", "return": "boolean", "signature": "boolean isNotOneOf( Type first,\n                               Type... rest )", "full_signature": "public boolean isNotOneOf( Type first,\n                               Type... rest )", "class_method_signature": "PlanNode.isNotOneOf( Type first,\n                               Type... rest )", "testcase": false, "constructor": false}, {"identifier": "isNotOneOf", "parameters": "( Set<Type> types )", "modifiers": "public", "return": "boolean", "signature": "boolean isNotOneOf( Set<Type> types )", "full_signature": "public boolean isNotOneOf( Set<Type> types )", "class_method_signature": "PlanNode.isNotOneOf( Set<Type> types )", "testcase": false, "constructor": false}, {"identifier": "is", "parameters": "( Type type )", "modifiers": "public", "return": "boolean", "signature": "boolean is( Type type )", "full_signature": "public boolean is( Type type )", "class_method_signature": "PlanNode.is( Type type )", "testcase": false, "constructor": false}, {"identifier": "isOneOf", "parameters": "( Type first,\n                            Type... rest )", "modifiers": "public", "return": "boolean", "signature": "boolean isOneOf( Type first,\n                            Type... rest )", "full_signature": "public boolean isOneOf( Type first,\n                            Type... rest )", "class_method_signature": "PlanNode.isOneOf( Type first,\n                            Type... rest )", "testcase": false, "constructor": false}, {"identifier": "isOneOf", "parameters": "( Set<Type> types )", "modifiers": "public", "return": "boolean", "signature": "boolean isOneOf( Set<Type> types )", "full_signature": "public boolean isOneOf( Set<Type> types )", "class_method_signature": "PlanNode.isOneOf( Set<Type> types )", "testcase": false, "constructor": false}, {"identifier": "isBelow", "parameters": "( PlanNode possibleAncestor )", "modifiers": "public", "return": "boolean", "signature": "boolean isBelow( PlanNode possibleAncestor )", "full_signature": "public boolean isBelow( PlanNode possibleAncestor )", "class_method_signature": "PlanNode.isBelow( PlanNode possibleAncestor )", "testcase": false, "constructor": false}, {"identifier": "isAbove", "parameters": "( PlanNode possibleDescendant )", "modifiers": "public", "return": "boolean", "signature": "boolean isAbove( PlanNode possibleDescendant )", "full_signature": "public boolean isAbove( PlanNode possibleDescendant )", "class_method_signature": "PlanNode.isAbove( PlanNode possibleDescendant )", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode getParent()", "full_signature": "public PlanNode getParent()", "class_method_signature": "PlanNode.getParent()", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "( PlanNode parent )", "modifiers": "public", "return": "void", "signature": "void setParent( PlanNode parent )", "full_signature": "public void setParent( PlanNode parent )", "class_method_signature": "PlanNode.setParent( PlanNode parent )", "testcase": false, "constructor": false}, {"identifier": "insertAsParent", "parameters": "( PlanNode newParent )", "modifiers": "public", "return": "void", "signature": "void insertAsParent( PlanNode newParent )", "full_signature": "public void insertAsParent( PlanNode newParent )", "class_method_signature": "PlanNode.insertAsParent( PlanNode newParent )", "testcase": false, "constructor": false}, {"identifier": "removeFromParent", "parameters": "()", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode removeFromParent()", "full_signature": "public PlanNode removeFromParent()", "class_method_signature": "PlanNode.removeFromParent()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> getChildren()", "full_signature": "public List<PlanNode> getChildren()", "class_method_signature": "PlanNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<PlanNode>", "signature": "Iterator<PlanNode> iterator()", "full_signature": "@Override public Iterator<PlanNode> iterator()", "class_method_signature": "PlanNode.iterator()", "testcase": false, "constructor": false}, {"identifier": "removeAllChildren", "parameters": "()", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> removeAllChildren()", "full_signature": "public List<PlanNode> removeAllChildren()", "class_method_signature": "PlanNode.removeAllChildren()", "testcase": false, "constructor": false}, {"identifier": "replaceChild", "parameters": "( PlanNode child,\n                                 PlanNode replacement )", "modifiers": "public", "return": "boolean", "signature": "boolean replaceChild( PlanNode child,\n                                 PlanNode replacement )", "full_signature": "public boolean replaceChild( PlanNode child,\n                                 PlanNode replacement )", "class_method_signature": "PlanNode.replaceChild( PlanNode child,\n                                 PlanNode replacement )", "testcase": false, "constructor": false}, {"identifier": "getChildCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChildCount()", "full_signature": "public int getChildCount()", "class_method_signature": "PlanNode.getChildCount()", "testcase": false, "constructor": false}, {"identifier": "getFirstChild", "parameters": "()", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode getFirstChild()", "full_signature": "public PlanNode getFirstChild()", "class_method_signature": "PlanNode.getFirstChild()", "testcase": false, "constructor": false}, {"identifier": "getLastChild", "parameters": "()", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode getLastChild()", "full_signature": "public PlanNode getLastChild()", "class_method_signature": "PlanNode.getLastChild()", "testcase": false, "constructor": false}, {"identifier": "getChild", "parameters": "( int index )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode getChild( int index )", "full_signature": "public PlanNode getChild( int index )", "class_method_signature": "PlanNode.getChild( int index )", "testcase": false, "constructor": false}, {"identifier": "addFirstChild", "parameters": "( PlanNode child )", "modifiers": "public", "return": "void", "signature": "void addFirstChild( PlanNode child )", "full_signature": "public void addFirstChild( PlanNode child )", "class_method_signature": "PlanNode.addFirstChild( PlanNode child )", "testcase": false, "constructor": false}, {"identifier": "addLastChild", "parameters": "( PlanNode child )", "modifiers": "public", "return": "void", "signature": "void addLastChild( PlanNode child )", "full_signature": "public void addLastChild( PlanNode child )", "class_method_signature": "PlanNode.addLastChild( PlanNode child )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( Iterable<PlanNode> otherChildren )", "modifiers": "public", "return": "void", "signature": "void addChildren( Iterable<PlanNode> otherChildren )", "full_signature": "public void addChildren( Iterable<PlanNode> otherChildren )", "class_method_signature": "PlanNode.addChildren( Iterable<PlanNode> otherChildren )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( PlanNode first,\n                             PlanNode second )", "modifiers": "public", "return": "void", "signature": "void addChildren( PlanNode first,\n                             PlanNode second )", "full_signature": "public void addChildren( PlanNode first,\n                             PlanNode second )", "class_method_signature": "PlanNode.addChildren( PlanNode first,\n                             PlanNode second )", "testcase": false, "constructor": false}, {"identifier": "addChildren", "parameters": "( PlanNode first,\n                             PlanNode second,\n                             PlanNode third )", "modifiers": "public", "return": "void", "signature": "void addChildren( PlanNode first,\n                             PlanNode second,\n                             PlanNode third )", "full_signature": "public void addChildren( PlanNode first,\n                             PlanNode second,\n                             PlanNode third )", "class_method_signature": "PlanNode.addChildren( PlanNode first,\n                             PlanNode second,\n                             PlanNode third )", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "( PlanNode child )", "modifiers": "public", "return": "boolean", "signature": "boolean removeChild( PlanNode child )", "full_signature": "public boolean removeChild( PlanNode child )", "class_method_signature": "PlanNode.removeChild( PlanNode child )", "testcase": false, "constructor": false}, {"identifier": "extractChild", "parameters": "( PlanNode child )", "modifiers": "public", "return": "void", "signature": "void extractChild( PlanNode child )", "full_signature": "public void extractChild( PlanNode child )", "class_method_signature": "PlanNode.extractChild( PlanNode child )", "testcase": false, "constructor": false}, {"identifier": "extractFromParent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void extractFromParent()", "full_signature": "public void extractFromParent()", "class_method_signature": "PlanNode.extractFromParent()", "testcase": false, "constructor": false}, {"identifier": "getPropertyKeys", "parameters": "()", "modifiers": "public", "return": "Set<Property>", "signature": "Set<Property> getPropertyKeys()", "full_signature": "public Set<Property> getPropertyKeys()", "class_method_signature": "PlanNode.getPropertyKeys()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Property propertyId )", "modifiers": "public", "return": "Object", "signature": "Object getProperty( Property propertyId )", "full_signature": "public Object getProperty( Property propertyId )", "class_method_signature": "PlanNode.getProperty( Property propertyId )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Property propertyId,\n                                              Class<ValueType> type )", "modifiers": "public", "return": "ValueType", "signature": "ValueType getProperty( Property propertyId,\n                                              Class<ValueType> type )", "full_signature": "public ValueType getProperty( Property propertyId,\n                                              Class<ValueType> type )", "class_method_signature": "PlanNode.getProperty( Property propertyId,\n                                              Class<ValueType> type )", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsCollection", "parameters": "( Property propertyId,\n                                                                      Class<ValueType> type )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public", "return": "Collection<ValueType>", "signature": "Collection<ValueType> getPropertyAsCollection( Property propertyId,\n                                                                      Class<ValueType> type )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public Collection<ValueType> getPropertyAsCollection( Property propertyId,\n                                                                      Class<ValueType> type )", "class_method_signature": "PlanNode.getPropertyAsCollection( Property propertyId,\n                                                                      Class<ValueType> type )", "testcase": false, "constructor": false}, {"identifier": "getPropertyAsList", "parameters": "( Property propertyId,\n                                                          Class<ValueType> type )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public", "return": "List<ValueType>", "signature": "List<ValueType> getPropertyAsList( Property propertyId,\n                                                          Class<ValueType> type )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public List<ValueType> getPropertyAsList( Property propertyId,\n                                                          Class<ValueType> type )", "class_method_signature": "PlanNode.getPropertyAsList( Property propertyId,\n                                                          Class<ValueType> type )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( Property propertyId,\n                               Object value )", "modifiers": "public", "return": "Object", "signature": "Object setProperty( Property propertyId,\n                               Object value )", "full_signature": "public Object setProperty( Property propertyId,\n                               Object value )", "class_method_signature": "PlanNode.setProperty( Property propertyId,\n                               Object value )", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "( Object propertyId )", "modifiers": "public", "return": "Object", "signature": "Object removeProperty( Object propertyId )", "full_signature": "public Object removeProperty( Object propertyId )", "class_method_signature": "PlanNode.removeProperty( Object propertyId )", "testcase": false, "constructor": false}, {"identifier": "hasProperty", "parameters": "( Property propertyId )", "modifiers": "public", "return": "boolean", "signature": "boolean hasProperty( Property propertyId )", "full_signature": "public boolean hasProperty( Property propertyId )", "class_method_signature": "PlanNode.hasProperty( Property propertyId )", "testcase": false, "constructor": false}, {"identifier": "hasCollectionProperty", "parameters": "( Property propertyId )", "modifiers": "public", "return": "boolean", "signature": "boolean hasCollectionProperty( Property propertyId )", "full_signature": "public boolean hasCollectionProperty( Property propertyId )", "class_method_signature": "PlanNode.hasCollectionProperty( Property propertyId )", "testcase": false, "constructor": false}, {"identifier": "hasBooleanProperty", "parameters": "( Property propertyId )", "modifiers": "public", "return": "boolean", "signature": "boolean hasBooleanProperty( Property propertyId )", "full_signature": "public boolean hasBooleanProperty( Property propertyId )", "class_method_signature": "PlanNode.hasBooleanProperty( Property propertyId )", "testcase": false, "constructor": false}, {"identifier": "addSelector", "parameters": "( SelectorName symbol )", "modifiers": "public", "return": "void", "signature": "void addSelector( SelectorName symbol )", "full_signature": "public void addSelector( SelectorName symbol )", "class_method_signature": "PlanNode.addSelector( SelectorName symbol )", "testcase": false, "constructor": false}, {"identifier": "addSelector", "parameters": "( SelectorName first,\n                             SelectorName second )", "modifiers": "public", "return": "void", "signature": "void addSelector( SelectorName first,\n                             SelectorName second )", "full_signature": "public void addSelector( SelectorName first,\n                             SelectorName second )", "class_method_signature": "PlanNode.addSelector( SelectorName first,\n                             SelectorName second )", "testcase": false, "constructor": false}, {"identifier": "addSelectors", "parameters": "( Iterable<SelectorName> names )", "modifiers": "public", "return": "void", "signature": "void addSelectors( Iterable<SelectorName> names )", "full_signature": "public void addSelectors( Iterable<SelectorName> names )", "class_method_signature": "PlanNode.addSelectors( Iterable<SelectorName> names )", "testcase": false, "constructor": false}, {"identifier": "replaceSelector", "parameters": "( SelectorName original,\n                                    SelectorName replacement )", "modifiers": "public", "return": "boolean", "signature": "boolean replaceSelector( SelectorName original,\n                                    SelectorName replacement )", "full_signature": "public boolean replaceSelector( SelectorName original,\n                                    SelectorName replacement )", "class_method_signature": "PlanNode.replaceSelector( SelectorName original,\n                                    SelectorName replacement )", "testcase": false, "constructor": false}, {"identifier": "getSelectors", "parameters": "()", "modifiers": "public", "return": "Set<SelectorName>", "signature": "Set<SelectorName> getSelectors()", "full_signature": "public Set<SelectorName> getSelectors()", "class_method_signature": "PlanNode.getSelectors()", "testcase": false, "constructor": false}, {"identifier": "getPathTo", "parameters": "( PlanNode descendant )", "modifiers": "public", "return": "LinkedList<PlanNode>", "signature": "LinkedList<PlanNode> getPathTo( PlanNode descendant )", "full_signature": "public LinkedList<PlanNode> getPathTo( PlanNode descendant )", "class_method_signature": "PlanNode.getPathTo( PlanNode descendant )", "testcase": false, "constructor": false}, {"identifier": "hasAncestorOfType", "parameters": "( Type type )", "modifiers": "public", "return": "boolean", "signature": "boolean hasAncestorOfType( Type type )", "full_signature": "public boolean hasAncestorOfType( Type type )", "class_method_signature": "PlanNode.hasAncestorOfType( Type type )", "testcase": false, "constructor": false}, {"identifier": "hasAncestorOfType", "parameters": "( Type firstType,\n                                      Type... additionalTypes )", "modifiers": "public", "return": "boolean", "signature": "boolean hasAncestorOfType( Type firstType,\n                                      Type... additionalTypes )", "full_signature": "public boolean hasAncestorOfType( Type firstType,\n                                      Type... additionalTypes )", "class_method_signature": "PlanNode.hasAncestorOfType( Type firstType,\n                                      Type... additionalTypes )", "testcase": false, "constructor": false}, {"identifier": "hasAncestorOfType", "parameters": "( Set<Type> types )", "modifiers": "public", "return": "boolean", "signature": "boolean hasAncestorOfType( Set<Type> types )", "full_signature": "public boolean hasAncestorOfType( Set<Type> types )", "class_method_signature": "PlanNode.hasAncestorOfType( Set<Type> types )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PlanNode.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PlanNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public final boolean equals( Object obj )", "class_method_signature": "PlanNode.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "PlanNode", "signature": "PlanNode clone()", "full_signature": "@Override public PlanNode clone()", "class_method_signature": "PlanNode.clone()", "testcase": false, "constructor": false}, {"identifier": "cloneWithoutNewParent", "parameters": "()", "modifiers": "protected", "return": "PlanNode", "signature": "PlanNode cloneWithoutNewParent()", "full_signature": "protected PlanNode cloneWithoutNewParent()", "class_method_signature": "PlanNode.cloneWithoutNewParent()", "testcase": false, "constructor": false}, {"identifier": "isSameAs", "parameters": "( PlanNode other )", "modifiers": "public", "return": "boolean", "signature": "boolean isSameAs( PlanNode other )", "full_signature": "public boolean isSameAs( PlanNode other )", "class_method_signature": "PlanNode.isSameAs( PlanNode other )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "PlanNode.getString()", "testcase": false, "constructor": false}, {"identifier": "getRecursiveString", "parameters": "( StringBuilder str,\n                                     int indentLevel )", "modifiers": "private", "return": "void", "signature": "void getRecursiveString( StringBuilder str,\n                                     int indentLevel )", "full_signature": "private void getRecursiveString( StringBuilder str,\n                                     int indentLevel )", "class_method_signature": "PlanNode.getRecursiveString( StringBuilder str,\n                                     int indentLevel )", "testcase": false, "constructor": false}, {"identifier": "getNodeString", "parameters": "( StringBuilder str )", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder getNodeString( StringBuilder str )", "full_signature": "private StringBuilder getNodeString( StringBuilder str )", "class_method_signature": "PlanNode.getNodeString( StringBuilder str )", "testcase": false, "constructor": false}, {"identifier": "findAncestor", "parameters": "( Type typeToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAncestor( Type typeToFind )", "full_signature": "public PlanNode findAncestor( Type typeToFind )", "class_method_signature": "PlanNode.findAncestor( Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "findAncestor", "parameters": "( Type firstTypeToFind,\n                                  Type... additionalTypesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAncestor( Type firstTypeToFind,\n                                  Type... additionalTypesToFind )", "full_signature": "public PlanNode findAncestor( Type firstTypeToFind,\n                                  Type... additionalTypesToFind )", "class_method_signature": "PlanNode.findAncestor( Type firstTypeToFind,\n                                  Type... additionalTypesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAncestor", "parameters": "( Set<Type> typesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAncestor( Set<Type> typesToFind )", "full_signature": "public PlanNode findAncestor( Set<Type> typesToFind )", "class_method_signature": "PlanNode.findAncestor( Set<Type> typesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllFirstNodesAtOrBelow", "parameters": "( Type typeToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllFirstNodesAtOrBelow( Type typeToFind )", "full_signature": "public List<PlanNode> findAllFirstNodesAtOrBelow( Type typeToFind )", "class_method_signature": "PlanNode.findAllFirstNodesAtOrBelow( Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "( Traversal order,\n                       final Operation operation,\n                       final Type type )", "modifiers": "public", "return": "void", "signature": "void apply( Traversal order,\n                       final Operation operation,\n                       final Type type )", "full_signature": "public void apply( Traversal order,\n                       final Operation operation,\n                       final Type type )", "class_method_signature": "PlanNode.apply( Traversal order,\n                       final Operation operation,\n                       final Type type )", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "( Traversal order,\n                       Operation operation,\n                       Type firstType,\n                       Type... additionalTypes )", "modifiers": "public", "return": "void", "signature": "void apply( Traversal order,\n                       Operation operation,\n                       Type firstType,\n                       Type... additionalTypes )", "full_signature": "public void apply( Traversal order,\n                       Operation operation,\n                       Type firstType,\n                       Type... additionalTypes )", "class_method_signature": "PlanNode.apply( Traversal order,\n                       Operation operation,\n                       Type firstType,\n                       Type... additionalTypes )", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "( Traversal order,\n                       final Operation operation,\n                       final Set<Type> types )", "modifiers": "public", "return": "void", "signature": "void apply( Traversal order,\n                       final Operation operation,\n                       final Set<Type> types )", "full_signature": "public void apply( Traversal order,\n                       final Operation operation,\n                       final Set<Type> types )", "class_method_signature": "PlanNode.apply( Traversal order,\n                       final Operation operation,\n                       final Set<Type> types )", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "( Traversal order,\n                       Operation operation )", "modifiers": "public", "return": "void", "signature": "void apply( Traversal order,\n                       Operation operation )", "full_signature": "public void apply( Traversal order,\n                       Operation operation )", "class_method_signature": "PlanNode.apply( Traversal order,\n                       Operation operation )", "testcase": false, "constructor": false}, {"identifier": "applyLevelOrder", "parameters": "( Traversal order,\n                                    Operation operation )", "modifiers": "protected", "return": "void", "signature": "void applyLevelOrder( Traversal order,\n                                    Operation operation )", "full_signature": "protected void applyLevelOrder( Traversal order,\n                                    Operation operation )", "class_method_signature": "PlanNode.applyLevelOrder( Traversal order,\n                                    Operation operation )", "testcase": false, "constructor": false}, {"identifier": "applyToAncestorsUpTo", "parameters": "( Type stopType,\n                                      Operation operation )", "modifiers": "public", "return": "void", "signature": "void applyToAncestorsUpTo( Type stopType,\n                                      Operation operation )", "full_signature": "public void applyToAncestorsUpTo( Type stopType,\n                                      Operation operation )", "class_method_signature": "PlanNode.applyToAncestorsUpTo( Type stopType,\n                                      Operation operation )", "testcase": false, "constructor": false}, {"identifier": "applyToAncestors", "parameters": "( Operation operation )", "modifiers": "public", "return": "void", "signature": "void applyToAncestors( Operation operation )", "full_signature": "public void applyToAncestors( Operation operation )", "class_method_signature": "PlanNode.applyToAncestors( Operation operation )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "()", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow()", "full_signature": "public List<PlanNode> findAllAtOrBelow()", "class_method_signature": "PlanNode.findAllAtOrBelow()", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Traversal order )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Traversal order )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Traversal order )", "class_method_signature": "PlanNode.findAllAtOrBelow( Traversal order )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Type typeToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Type typeToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Type typeToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Set<Type> typesToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Set<Type> typesToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Set<Type> typesToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Set<Type> typesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Traversal order,\n                                            Type typeToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Type typeToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Type typeToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Traversal order,\n                                            Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Traversal order,\n                                            Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Traversal order,\n                                            Type firstTypeToFind,\n                                            Type... additionalTypesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAllAtOrBelow", "parameters": "( Traversal order,\n                                            Set<Type> typesToFind )", "modifiers": "public", "return": "List<PlanNode>", "signature": "List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Set<Type> typesToFind )", "full_signature": "public List<PlanNode> findAllAtOrBelow( Traversal order,\n                                            Set<Type> typesToFind )", "class_method_signature": "PlanNode.findAllAtOrBelow( Traversal order,\n                                            Set<Type> typesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Type typeToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Type typeToFind )", "full_signature": "public PlanNode findAtOrBelow( Type typeToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "full_signature": "public PlanNode findAtOrBelow( Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Set<Type> typesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Set<Type> typesToFind )", "full_signature": "public PlanNode findAtOrBelow( Set<Type> typesToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Set<Type> typesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Traversal order,\n                                   Type typeToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Traversal order,\n                                   Type typeToFind )", "full_signature": "public PlanNode findAtOrBelow( Traversal order,\n                                   Type typeToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Traversal order,\n                                   Type typeToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Traversal order,\n                                   Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Traversal order,\n                                   Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "full_signature": "public PlanNode findAtOrBelow( Traversal order,\n                                   Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Traversal order,\n                                   Type firstTypeToFind,\n                                   Type... additionalTypesToFind )", "testcase": false, "constructor": false}, {"identifier": "findAtOrBelow", "parameters": "( Traversal order,\n                                   Set<Type> typesToFind )", "modifiers": "public", "return": "PlanNode", "signature": "PlanNode findAtOrBelow( Traversal order,\n                                   Set<Type> typesToFind )", "full_signature": "public PlanNode findAtOrBelow( Traversal order,\n                                   Set<Type> typesToFind )", "class_method_signature": "PlanNode.findAtOrBelow( Traversal order,\n                                   Set<Type> typesToFind )", "testcase": false, "constructor": false}, {"identifier": "orderChildren", "parameters": "( Comparator<PlanNode> comparator )", "modifiers": "public", "return": "void", "signature": "void orderChildren( Comparator<PlanNode> comparator )", "full_signature": "public void orderChildren( Comparator<PlanNode> comparator )", "class_method_signature": "PlanNode.orderChildren( Comparator<PlanNode> comparator )", "testcase": false, "constructor": false}, {"identifier": "orderChildren", "parameters": "( final Type type,\n                               final Comparator<PlanNode> comparator )", "modifiers": "public", "return": "void", "signature": "void orderChildren( final Type type,\n                               final Comparator<PlanNode> comparator )", "full_signature": "public void orderChildren( final Type type,\n                               final Comparator<PlanNode> comparator )", "class_method_signature": "PlanNode.orderChildren( final Type type,\n                               final Comparator<PlanNode> comparator )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/plan/PlanNode.java"}, "focal_method": {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "List<PlanNode>", "body": "public List<PlanNode> getChildren() {\n        return childrenView;\n    }", "signature": "List<PlanNode> getChildren()", "full_signature": "public List<PlanNode> getChildren()", "class_method_signature": "PlanNode.getChildren()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}