{"test_class": {"identifier": "ReadJsonArrayHeadersFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DittoHeaderDefinition HEADER_DEFINITION = DittoHeaderDefinition.REQUESTED_ACKS;", "modifier": "private static final", "type": "DittoHeaderDefinition", "declarator": "HEADER_DEFINITION = DittoHeaderDefinition.REQUESTED_ACKS", "var_name": "HEADER_DEFINITION"}, {"original_string": "private Map<String, HeaderDefinition> headerDefinitions;", "modifier": "private", "type": "Map<String, HeaderDefinition>", "declarator": "headerDefinitions", "var_name": "headerDefinitions"}], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/ReadJsonArrayHeadersFilterTest.java"}, "test_case": {"identifier": "filterJsonArrayValueBasedOnCommaSeparatedList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filterJsonArrayValueBasedOnCommaSeparatedList() {\n        final List<AcknowledgementRequest> acknowledgementRequests = Lists.list(\n                AcknowledgementRequest.of(AcknowledgementLabel.of(\"foo\")),\n                AcknowledgementRequest.of(AcknowledgementLabel.of(\"bar\")));\n        final JsonArray acknowledgementRequestsJsonArray = acknowledgementRequests.stream()\n                .map(AcknowledgementRequest::toString)\n                .map(JsonValue::of)\n                .collect(JsonCollectors.valuesToArray());\n        final String expectedArrayValue = acknowledgementRequestsJsonArray.toString();\n        final String commaSeparatedRequestedAcks = \"foo,bar\";\n\n        final ReadJsonArrayHeadersFilter underTest = ReadJsonArrayHeadersFilter.getInstance(headerDefinitions);\n\n        final String filteredValue = underTest.apply(HEADER_DEFINITION.getKey(), commaSeparatedRequestedAcks);\n\n        assertThat(filteredValue).isEqualTo(expectedArrayValue);\n    }", "signature": "void filterJsonArrayValueBasedOnCommaSeparatedList()", "full_signature": "@Test public void filterJsonArrayValueBasedOnCommaSeparatedList()", "class_method_signature": "ReadJsonArrayHeadersFilterTest.filterJsonArrayValueBasedOnCommaSeparatedList()", "testcase": true, "constructor": false, "invocations": ["list", "of", "of", "of", "of", "collect", "map", "map", "stream", "valuesToArray", "toString", "getInstance", "apply", "getKey", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ReadJsonArrayHeadersFilter", "superclass": "extends AbstractHeaderEntryFilter", "interfaces": "", "fields": [{"original_string": "private static final String COMMA_SPLIT_REGEX = \",\";", "modifier": "private static final", "type": "String", "declarator": "COMMA_SPLIT_REGEX = \",\"", "var_name": "COMMA_SPLIT_REGEX"}, {"original_string": "private final Map<String, HeaderDefinition> headerDefinitions;", "modifier": "private final", "type": "Map<String, HeaderDefinition>", "declarator": "headerDefinitions", "var_name": "headerDefinitions"}], "methods": [{"identifier": "ReadJsonArrayHeadersFilter", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "private", "return": "", "signature": " ReadJsonArrayHeadersFilter(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "private  ReadJsonArrayHeadersFilter(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "ReadJsonArrayHeadersFilter.ReadJsonArrayHeadersFilter(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "ReadJsonArrayHeadersFilter", "signature": "ReadJsonArrayHeadersFilter getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static ReadJsonArrayHeadersFilter getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "ReadJsonArrayHeadersFilter.getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false}, {"identifier": "filterValue", "parameters": "(final String key, final String value)", "modifiers": "@Nullable @Override protected", "return": "String", "signature": "String filterValue(final String key, final String value)", "full_signature": "@Nullable @Override protected String filterValue(final String key, final String value)", "class_method_signature": "ReadJsonArrayHeadersFilter.filterValue(final String key, final String value)", "testcase": false, "constructor": false}, {"identifier": "isJsonArrayDefinition", "parameters": "(final String headerKey)", "modifiers": "private", "return": "boolean", "signature": "boolean isJsonArrayDefinition(final String headerKey)", "full_signature": "private boolean isJsonArrayDefinition(final String headerKey)", "class_method_signature": "ReadJsonArrayHeadersFilter.isJsonArrayDefinition(final String headerKey)", "testcase": false, "constructor": false}, {"identifier": "getJsonArray", "parameters": "(final String headerValue)", "modifiers": "private static", "return": "JsonArray", "signature": "JsonArray getJsonArray(final String headerValue)", "full_signature": "private static JsonArray getJsonArray(final String headerValue)", "class_method_signature": "ReadJsonArrayHeadersFilter.getJsonArray(final String headerValue)", "testcase": false, "constructor": false}, {"identifier": "tryToParseJsonArray", "parameters": "(final String headerValue)", "modifiers": "private static", "return": "JsonArray", "signature": "JsonArray tryToParseJsonArray(final String headerValue)", "full_signature": "private static JsonArray tryToParseJsonArray(final String headerValue)", "class_method_signature": "ReadJsonArrayHeadersFilter.tryToParseJsonArray(final String headerValue)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/ReadJsonArrayHeadersFilter.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(final Map<String, HeaderDefinition> headerDefinitions)", "modifiers": "public static", "return": "ReadJsonArrayHeadersFilter", "body": "public static ReadJsonArrayHeadersFilter getInstance(final Map<String, HeaderDefinition> headerDefinitions) {\n        return new ReadJsonArrayHeadersFilter(checkNotNull(headerDefinitions, \"headerDefinitions\"));\n    }", "signature": "ReadJsonArrayHeadersFilter getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "full_signature": "public static ReadJsonArrayHeadersFilter getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "class_method_signature": "ReadJsonArrayHeadersFilter.getInstance(final Map<String, HeaderDefinition> headerDefinitions)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}