{"test_class": {"identifier": "MultipleConfigsResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Mock\n    protected ToolConfiguration toolConfigMock = mock(ToolConfiguration.class);", "modifier": "@Mock\n    protected", "type": "ToolConfiguration", "declarator": "toolConfigMock = mock(ToolConfiguration.class)", "var_name": "toolConfigMock"}, {"original_string": "private List<File> configs = new ArrayList<>();", "modifier": "private", "type": "List<File>", "declarator": "configs = new ArrayList<>()", "var_name": "configs"}, {"original_string": "private Configuration mergedConfigs;", "modifier": "private", "type": "Configuration", "declarator": "mergedConfigs", "var_name": "mergedConfigs"}, {"original_string": "private MultipleConfigsResolver resolver;", "modifier": "private", "type": "MultipleConfigsResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "core/runtime/src/test/java/org/eclipse/sw360/antenna/configuration/MultipleConfigsResolverTest.java"}, "test_case": {"identifier": "testOverride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverride() {\n        assertThat(this.mergedConfigs.getOverride().size()).isEqualTo(0);\n        List<ProcessingMessage> messageList = resolver.getReporter().getProcessingReport().getMessageList();\n        assertThat(messageList.get(0).getMessage().contains(\"director-ant.jar\"));\n        assertThat(messageList.size()).isEqualTo(2);\n    }", "signature": "void testOverride()", "full_signature": "@Test public void testOverride()", "class_method_signature": "MultipleConfigsResolverTest.testOverride()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "size", "getOverride", "getMessageList", "getProcessingReport", "getReporter", "assertThat", "contains", "getMessage", "get", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "MultipleConfigsResolver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MultipleConfigsResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MultipleConfigsResolver.class)", "var_name": "LOGGER"}, {"original_string": "private ConfigurationReader configurationReader;", "modifier": "private", "type": "ConfigurationReader", "declarator": "configurationReader", "var_name": "configurationReader"}, {"original_string": "private Path antennaTargetDirectory;", "modifier": "private", "type": "Path", "declarator": "antennaTargetDirectory", "var_name": "antennaTargetDirectory"}, {"original_string": "private Reporter tempReporter;", "modifier": "private", "type": "Reporter", "declarator": "tempReporter", "var_name": "tempReporter"}], "methods": [{"identifier": "resolveConfigs", "parameters": "(ToolConfiguration toolConfiguration)", "modifiers": "public", "return": "Configuration", "signature": "Configuration resolveConfigs(ToolConfiguration toolConfiguration)", "full_signature": "public Configuration resolveConfigs(ToolConfiguration toolConfiguration)", "class_method_signature": "MultipleConfigsResolver.resolveConfigs(ToolConfiguration toolConfiguration)", "testcase": false, "constructor": false}, {"identifier": "resolveConfigs", "parameters": "(ToolConfiguration toolConfiguration, boolean checkReport)", "modifiers": "protected", "return": "Configuration", "signature": "Configuration resolveConfigs(ToolConfiguration toolConfiguration, boolean checkReport)", "full_signature": "protected Configuration resolveConfigs(ToolConfiguration toolConfiguration, boolean checkReport)", "class_method_signature": "MultipleConfigsResolver.resolveConfigs(ToolConfiguration toolConfiguration, boolean checkReport)", "testcase": false, "constructor": false}, {"identifier": "resolveConfigs", "parameters": "(List<File> configs)", "modifiers": "private", "return": "ArrayList<Configuration>", "signature": "ArrayList<Configuration> resolveConfigs(List<File> configs)", "full_signature": "private ArrayList<Configuration> resolveConfigs(List<File> configs)", "class_method_signature": "MultipleConfigsResolver.resolveConfigs(List<File> configs)", "testcase": false, "constructor": false}, {"identifier": "checkReport", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkReport()", "full_signature": "private void checkReport()", "class_method_signature": "MultipleConfigsResolver.checkReport()", "testcase": false, "constructor": false}, {"identifier": "resolveUris", "parameters": "(List<URI> uris)", "modifiers": "private", "return": "List<Configuration>", "signature": "List<Configuration> resolveUris(List<URI> uris)", "full_signature": "private List<Configuration> resolveUris(List<URI> uris)", "class_method_signature": "MultipleConfigsResolver.resolveUris(List<URI> uris)", "testcase": false, "constructor": false}, {"identifier": "mergeConfigurations", "parameters": "(List<Configuration> configurations)", "modifiers": "private", "return": "Configuration", "signature": "Configuration mergeConfigurations(List<Configuration> configurations)", "full_signature": "private Configuration mergeConfigurations(List<Configuration> configurations)", "class_method_signature": "MultipleConfigsResolver.mergeConfigurations(List<Configuration> configurations)", "testcase": false, "constructor": false}, {"identifier": "mergeSecurityIssues", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeSecurityIssues(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeSecurityIssues(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeSecurityIssues(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeSecurityIssueSuppresses", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeSecurityIssueSuppresses(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeSecurityIssueSuppresses(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeSecurityIssueSuppresses(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeAddArtifact", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeAddArtifact(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeAddArtifact(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeAddArtifact(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeFinalLicenses", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeFinalLicenses(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeFinalLicenses(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeFinalLicenses(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeFailOnIncompleteSources", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeFailOnIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeFailOnIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeFailOnIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeFailOnMissingSources", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeFailOnMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeFailOnMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeFailOnMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeRemoveArtifact", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeRemoveArtifact(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeRemoveArtifact(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeRemoveArtifact(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeValidForIncompleteSources", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeValidForIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeValidForIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeValidForIncompleteSources(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeValidForMissingSources", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeValidForMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeValidForMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeValidForMissingSources(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeOverride", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeOverride(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeOverride(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeOverride(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "mergeIgnoreForSourceResolving", "parameters": "(List<Configuration> configurations, Configuration mergedConfig)", "modifiers": "private", "return": "void", "signature": "void mergeIgnoreForSourceResolving(List<Configuration> configurations, Configuration mergedConfig)", "full_signature": "private void mergeIgnoreForSourceResolving(List<Configuration> configurations, Configuration mergedConfig)", "class_method_signature": "MultipleConfigsResolver.mergeIgnoreForSourceResolving(List<Configuration> configurations, Configuration mergedConfig)", "testcase": false, "constructor": false}, {"identifier": "getReporter", "parameters": "()", "modifiers": "public", "return": "Reporter", "signature": "Reporter getReporter()", "full_signature": "public Reporter getReporter()", "class_method_signature": "MultipleConfigsResolver.getReporter()", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/eclipse/sw360/antenna/configuration/MultipleConfigsResolver.java"}, "focal_method": {"identifier": "getReporter", "parameters": "()", "modifiers": "public", "return": "Reporter", "body": "public Reporter getReporter() {\n        return this.tempReporter;\n    }", "signature": "Reporter getReporter()", "full_signature": "public Reporter getReporter()", "class_method_signature": "MultipleConfigsResolver.getReporter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}