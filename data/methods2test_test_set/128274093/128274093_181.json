{"test_class": {"identifier": "BlockingMultiObserverTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/observers/BlockingMultiObserverTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        BlockingMultiObserver<Integer> bmo = new BlockingMultiObserver<Integer>();\n        bmo.dispose();\n\n        Disposable d = Disposables.empty();\n\n        bmo.onSubscribe(d);\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "BlockingMultiObserverTest.dispose()", "testcase": true, "constructor": false, "invocations": ["dispose", "empty", "onSubscribe"]}, "focal_class": {"identifier": "BlockingMultiObserver", "superclass": "extends CountDownLatch", "interfaces": "implements SingleObserver<T>, CompletableObserver, MaybeObserver<T>", "fields": [{"original_string": "T value;", "modifier": "", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}, {"original_string": "Disposable d;", "modifier": "", "type": "Disposable", "declarator": "d", "var_name": "d"}, {"original_string": "volatile boolean cancelled;", "modifier": "volatile", "type": "boolean", "declarator": "cancelled", "var_name": "cancelled"}], "methods": [{"identifier": "BlockingMultiObserver", "parameters": "()", "modifiers": "public", "return": "", "signature": " BlockingMultiObserver()", "full_signature": "public  BlockingMultiObserver()", "class_method_signature": "BlockingMultiObserver.BlockingMultiObserver()", "testcase": false, "constructor": true}, {"identifier": "dispose", "parameters": "()", "modifiers": "", "return": "void", "signature": "void dispose()", "full_signature": " void dispose()", "class_method_signature": "BlockingMultiObserver.dispose()", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable d)", "full_signature": "@Override public void onSubscribe(Disposable d)", "class_method_signature": "BlockingMultiObserver.onSubscribe(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "(T value)", "modifiers": "@Override public", "return": "void", "signature": "void onSuccess(T value)", "full_signature": "@Override public void onSuccess(T value)", "class_method_signature": "BlockingMultiObserver.onSuccess(T value)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable e)", "full_signature": "@Override public void onError(Throwable e)", "class_method_signature": "BlockingMultiObserver.onError(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "BlockingMultiObserver.onComplete()", "testcase": false, "constructor": false}, {"identifier": "blockingGet", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T blockingGet()", "full_signature": "public T blockingGet()", "class_method_signature": "BlockingMultiObserver.blockingGet()", "testcase": false, "constructor": false}, {"identifier": "blockingGet", "parameters": "(T defaultValue)", "modifiers": "public", "return": "T", "signature": "T blockingGet(T defaultValue)", "full_signature": "public T blockingGet(T defaultValue)", "class_method_signature": "BlockingMultiObserver.blockingGet(T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "blockingGetError", "parameters": "()", "modifiers": "public", "return": "Throwable", "signature": "Throwable blockingGetError()", "full_signature": "public Throwable blockingGetError()", "class_method_signature": "BlockingMultiObserver.blockingGetError()", "testcase": false, "constructor": false}, {"identifier": "blockingGetError", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "public", "return": "Throwable", "signature": "Throwable blockingGetError(long timeout, TimeUnit unit)", "full_signature": "public Throwable blockingGetError(long timeout, TimeUnit unit)", "class_method_signature": "BlockingMultiObserver.blockingGetError(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "blockingAwait", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "public", "return": "boolean", "signature": "boolean blockingAwait(long timeout, TimeUnit unit)", "full_signature": "public boolean blockingAwait(long timeout, TimeUnit unit)", "class_method_signature": "BlockingMultiObserver.blockingAwait(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/observers/BlockingMultiObserver.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "", "return": "void", "body": "void dispose() {\n        cancelled = true;\n        Disposable d = this.d;\n        if (d != null) {\n            d.dispose();\n        }\n    }", "signature": "void dispose()", "full_signature": " void dispose()", "class_method_signature": "BlockingMultiObserver.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}