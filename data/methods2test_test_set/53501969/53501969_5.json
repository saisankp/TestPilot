{"test_class": {"identifier": "LanguageModelServerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Registry _registry;", "modifier": "static", "type": "Registry", "declarator": "_registry", "var_name": "_registry"}, {"original_string": "static String _lm_id = \"testlm\";", "modifier": "static", "type": "String", "declarator": "_lm_id = \"testlm\"", "var_name": "_lm_id"}, {"original_string": "static File _src_dir = new File(ClassLoader.getSystemClassLoader().getResource(\"testlm\").getPath());", "modifier": "static", "type": "File", "declarator": "_src_dir = new File(ClassLoader.getSystemClassLoader().getResource(\"testlm\").getPath())", "var_name": "_src_dir"}, {"original_string": "static String _host = \"localhost\";", "modifier": "static", "type": "String", "declarator": "_host = \"localhost\"", "var_name": "_host"}, {"original_string": "static int _rmiport = 1099;", "modifier": "static", "type": "int", "declarator": "_rmiport = 1099", "var_name": "_rmiport"}, {"original_string": "static int _app_port = 0;", "modifier": "static", "type": "int", "declarator": "_app_port = 0", "var_name": "_app_port"}, {"original_string": "static int _lm_order = 3;", "modifier": "static", "type": "int", "declarator": "_lm_order = 3", "var_name": "_lm_order"}, {"original_string": "static CountingLM<String> _lm_served;", "modifier": "static", "type": "CountingLM<String>", "declarator": "_lm_served", "var_name": "_lm_served"}, {"original_string": "static int reset_boundary_property;", "modifier": "static", "type": "int", "declarator": "reset_boundary_property", "var_name": "reset_boundary_property"}], "file": "lt.lm/src/test/java/de/tudarmstadt/lt/lm/service/LanguageModelServerTest.java"}, "test_case": {"identifier": "checkRemote", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void checkRemote() throws Exception {\n\t\tLanguageModel<String> lm = LanguageModelServer.connectToServer(_host, _rmiport, _lm_id);\n\t\tcheck(lm);\n\t}", "signature": "void checkRemote()", "full_signature": "@Test public void checkRemote()", "class_method_signature": "LanguageModelServerTest.checkRemote()", "testcase": true, "constructor": false, "invocations": ["connectToServer", "check"]}, "focal_class": {"identifier": "LanguageModelServer", "superclass": "", "interfaces": "implements LanguageModelServerMBean<W>", "fields": [{"original_string": "private final static Logger LOG = LoggerFactory.getLogger(LanguageModelServer.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LanguageModelServer.class)", "var_name": "LOG"}, {"original_string": "private LanguageModel<W> _lm;", "modifier": "private", "type": "LanguageModel<W>", "declarator": "_lm", "var_name": "_lm"}], "methods": [{"identifier": "LanguageModelServer", "parameters": "()", "modifiers": "public", "return": "", "signature": " LanguageModelServer()", "full_signature": "public  LanguageModelServer()", "class_method_signature": "LanguageModelServer.LanguageModelServer()", "testcase": false, "constructor": true}, {"identifier": "LanguageModelServer", "parameters": "(LanguageModel<W> language_model)", "modifiers": "public", "return": "", "signature": " LanguageModelServer(LanguageModel<W> language_model)", "full_signature": "public  LanguageModelServer(LanguageModel<W> language_model)", "class_method_signature": "LanguageModelServer.LanguageModelServer(LanguageModel<W> language_model)", "testcase": false, "constructor": true}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "LanguageModelServer.getOrder()", "testcase": false, "constructor": false}, {"identifier": "predictNextWord", "parameters": "(List<W> history)", "modifiers": "@Override public", "return": "W", "signature": "W predictNextWord(List<W> history)", "full_signature": "@Override public W predictNextWord(List<W> history)", "class_method_signature": "LanguageModelServer.predictNextWord(List<W> history)", "testcase": false, "constructor": false}, {"identifier": "getWord", "parameters": "(int wordId)", "modifiers": "@Override public", "return": "W", "signature": "W getWord(int wordId)", "full_signature": "@Override public W getWord(int wordId)", "class_method_signature": "LanguageModelServer.getWord(int wordId)", "testcase": false, "constructor": false}, {"identifier": "getWordIndex", "parameters": "(W word)", "modifiers": "@Override public", "return": "int", "signature": "int getWordIndex(W word)", "full_signature": "@Override public int getWordIndex(W word)", "class_method_signature": "LanguageModelServer.getWordIndex(W word)", "testcase": false, "constructor": false}, {"identifier": "getNgramAsIds", "parameters": "(List<W> ngram)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getNgramAsIds(List<W> ngram)", "full_signature": "@Override public int[] getNgramAsIds(List<W> ngram)", "class_method_signature": "LanguageModelServer.getNgramAsIds(List<W> ngram)", "testcase": false, "constructor": false}, {"identifier": "getNgramAsWords", "parameters": "(int[] ngram)", "modifiers": "@Override public", "return": "List<W>", "signature": "List<W> getNgramAsWords(int[] ngram)", "full_signature": "@Override public List<W> getNgramAsWords(int[] ngram)", "class_method_signature": "LanguageModelServer.getNgramAsWords(int[] ngram)", "testcase": false, "constructor": false}, {"identifier": "getNgramAsWords", "parameters": "(List<Integer> ngram)", "modifiers": "@Override public", "return": "List<W>", "signature": "List<W> getNgramAsWords(List<Integer> ngram)", "full_signature": "@Override public List<W> getNgramAsWords(List<Integer> ngram)", "class_method_signature": "LanguageModelServer.getNgramAsWords(List<Integer> ngram)", "testcase": false, "constructor": false}, {"identifier": "getSequenceLogProbability", "parameters": "(List<W>[] ngram_sequence)", "modifiers": "@Override public", "return": "double", "signature": "double getSequenceLogProbability(List<W>[] ngram_sequence)", "full_signature": "@Override public double getSequenceLogProbability(List<W>[] ngram_sequence)", "class_method_signature": "LanguageModelServer.getSequenceLogProbability(List<W>[] ngram_sequence)", "testcase": false, "constructor": false}, {"identifier": "getNgramLogProbability", "parameters": "(int[] ngram)", "modifiers": "@Override public", "return": "double", "signature": "double getNgramLogProbability(int[] ngram)", "full_signature": "@Override public double getNgramLogProbability(int[] ngram)", "class_method_signature": "LanguageModelServer.getNgramLogProbability(int[] ngram)", "testcase": false, "constructor": false}, {"identifier": "getNgramLogProbability", "parameters": "(List<W> ngram)", "modifiers": "@Override public", "return": "double", "signature": "double getNgramLogProbability(List<W> ngram)", "full_signature": "@Override public double getNgramLogProbability(List<W> ngram)", "class_method_signature": "LanguageModelServer.getNgramLogProbability(List<W> ngram)", "testcase": false, "constructor": false}, {"identifier": "getNgramIterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<List<W>>", "signature": "Iterator<List<W>> getNgramIterator()", "full_signature": "@Override public Iterator<List<W>> getNgramIterator()", "class_method_signature": "LanguageModelServer.getNgramIterator()", "testcase": false, "constructor": false}, {"identifier": "getNgramIdIterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<List<Integer>>", "signature": "Iterator<List<Integer>> getNgramIdIterator()", "full_signature": "@Override public Iterator<List<Integer>> getNgramIdIterator()", "class_method_signature": "LanguageModelServer.getNgramIdIterator()", "testcase": false, "constructor": false}, {"identifier": "ngramContainsOOV", "parameters": "(List<W> ngram)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ngramContainsOOV(List<W> ngram)", "full_signature": "@Override public boolean ngramContainsOOV(List<W> ngram)", "class_method_signature": "LanguageModelServer.ngramContainsOOV(List<W> ngram)", "testcase": false, "constructor": false}, {"identifier": "ngramEndsWithOOV", "parameters": "(List<W> ngram)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ngramEndsWithOOV(List<W> ngram)", "full_signature": "@Override public boolean ngramEndsWithOOV(List<W> ngram)", "class_method_signature": "LanguageModelServer.ngramEndsWithOOV(List<W> ngram)", "testcase": false, "constructor": false}, {"identifier": "isUnkownWord", "parameters": "(W word)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnkownWord(W word)", "full_signature": "@Override public boolean isUnkownWord(W word)", "class_method_signature": "LanguageModelServer.isUnkownWord(W word)", "testcase": false, "constructor": false}, {"identifier": "isUnkownWord", "parameters": "(int wordId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnkownWord(int wordId)", "full_signature": "@Override public boolean isUnkownWord(int wordId)", "class_method_signature": "LanguageModelServer.isUnkownWord(int wordId)", "testcase": false, "constructor": false}, {"identifier": "ngramContainsOOV", "parameters": "(int[] ngram)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ngramContainsOOV(int[] ngram)", "full_signature": "@Override public boolean ngramContainsOOV(int[] ngram)", "class_method_signature": "LanguageModelServer.ngramContainsOOV(int[] ngram)", "testcase": false, "constructor": false}, {"identifier": "ngramEndsWithOOV", "parameters": "(int[] ngram)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ngramEndsWithOOV(int[] ngram)", "full_signature": "@Override public boolean ngramEndsWithOOV(int[] ngram)", "class_method_signature": "LanguageModelServer.ngramEndsWithOOV(int[] ngram)", "testcase": false, "constructor": false}, {"identifier": "getSourceModelReady", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getSourceModelReady()", "full_signature": "@Override public boolean getSourceModelReady()", "class_method_signature": "LanguageModelServer.getSourceModelReady()", "testcase": false, "constructor": false}, {"identifier": "setSourceModel", "parameters": "(LanguageModel<W> model)", "modifiers": "@Override public", "return": "void", "signature": "void setSourceModel(LanguageModel<W> model)", "full_signature": "@Override public void setSourceModel(LanguageModel<W> model)", "class_method_signature": "LanguageModelServer.setSourceModel(LanguageModel<W> model)", "testcase": false, "constructor": false}, {"identifier": "getSourceModelClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getSourceModelClass()", "full_signature": "@Override public Class<?> getSourceModelClass()", "class_method_signature": "LanguageModelServer.getSourceModelClass()", "testcase": false, "constructor": false}, {"identifier": "publish", "parameters": "(Registry registry, String identifier, int port)", "modifiers": "public", "return": "void", "signature": "void publish(Registry registry, String identifier, int port)", "full_signature": "public void publish(Registry registry, String identifier, int port)", "class_method_signature": "LanguageModelServer.publish(Registry registry, String identifier, int port)", "testcase": false, "constructor": false}, {"identifier": "connectToServer", "parameters": "(String host, int rmiPort, String identifier)", "modifiers": "public static", "return": "LanguageModel<String>", "signature": "LanguageModel<String> connectToServer(String host, int rmiPort, String identifier)", "full_signature": "public static LanguageModel<String> connectToServer(String host, int rmiPort, String identifier)", "class_method_signature": "LanguageModelServer.connectToServer(String host, int rmiPort, String identifier)", "testcase": false, "constructor": false}], "file": "lt.lm/src/main/java/de/tudarmstadt/lt/lm/service/LanguageModelServer.java"}, "focal_method": {"identifier": "connectToServer", "parameters": "(String host, int rmiPort, String identifier)", "modifiers": "public static", "return": "LanguageModel<String>", "body": "public static LanguageModel<String> connectToServer(String host, int rmiPort, String identifier) {\n\t\ttry {\n\t\t\tLOG.info(\"Trying to connect to Language model service '{}' on {}:{}.\", identifier, host, rmiPort);\n\t\t\tRegistry registry = LocateRegistry.getRegistry(host, rmiPort);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tLanguageModel<String> lm = (LanguageModel<String>) registry.lookup(identifier);\n\t\t\treturn lm;\n\t\t} catch (RemoteException e) {\n\t\t\tLOG.error(\"Unable to connect to rmi registry on {}:{}. {}: {}.\", host, rmiPort, e.getClass().getSimpleName(), e.getMessage());\n\t\t} catch (NotBoundException e) {\n\t\t\tLOG.error(\"Unable to connect to service {}. {}: {}.\", identifier, e.getClass().getSimpleName(), e.getMessage());\n\t\t}\n\t\treturn null;\n\t}", "signature": "LanguageModel<String> connectToServer(String host, int rmiPort, String identifier)", "full_signature": "public static LanguageModel<String> connectToServer(String host, int rmiPort, String identifier)", "class_method_signature": "LanguageModelServer.connectToServer(String host, int rmiPort, String identifier)", "testcase": false, "constructor": false, "invocations": ["info", "getRegistry", "lookup", "error", "getSimpleName", "getClass", "getMessage", "error", "getSimpleName", "getClass", "getMessage"]}, "repository": {"repo_id": 53501969, "url": "https://github.com/tudarmstadt-lt/topicrawler", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 6504, "license": "licensed"}}