{"test_class": {"identifier": "CoordinateSequencesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static GeometryFactory gf = new GeometryFactory();", "modifier": "static", "type": "GeometryFactory", "declarator": "gf = new GeometryFactory()", "var_name": "gf"}, {"original_string": "static LiteCoordinateSequenceFactory liteCSF = new LiteCoordinateSequenceFactory();", "modifier": "static", "type": "LiteCoordinateSequenceFactory", "declarator": "liteCSF = new LiteCoordinateSequenceFactory()", "var_name": "liteCSF"}, {"original_string": "static GeometryFactory liteGF = new GeometryFactory(liteCSF);", "modifier": "static", "type": "GeometryFactory", "declarator": "liteGF = new GeometryFactory(liteCSF)", "var_name": "liteGF"}, {"original_string": "static GeometryBuilder geomBuilder = new GeometryBuilder();", "modifier": "static", "type": "GeometryBuilder", "declarator": "geomBuilder = new GeometryBuilder()", "var_name": "geomBuilder"}], "file": "modules/library/main/src/test/java/org/geotools/geometry/jts/coordinatesequence/CoordinateSequencesTest.java"}, "test_case": {"identifier": "testCoordinateDimensionLineStringLite3D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCoordinateDimensionLineStringLite3D() {\n        Geometry geom = liteGF.createLineString(liteCSF.create(\n                new double[] { 1, 2, 100, 3, 4, 200 }, 3));\n        assertEquals(3, CoordinateSequences.coordinateDimension(geom));\n    }", "signature": "void testCoordinateDimensionLineStringLite3D()", "full_signature": "@Test public void testCoordinateDimensionLineStringLite3D()", "class_method_signature": "CoordinateSequencesTest.testCoordinateDimensionLineStringLite3D()", "testcase": true, "constructor": false, "invocations": ["createLineString", "create", "assertEquals", "coordinateDimension"]}, "focal_class": {"identifier": "CoordinateSequences", "superclass": "extends com.vividsolutions.jts.geom.CoordinateSequences", "interfaces": "", "fields": [], "methods": [{"identifier": "isCCW", "parameters": "(CoordinateSequence ring)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCCW(CoordinateSequence ring)", "full_signature": "public static boolean isCCW(CoordinateSequence ring)", "class_method_signature": "CoordinateSequences.isCCW(CoordinateSequence ring)", "testcase": false, "constructor": false}, {"identifier": "equals2D", "parameters": "(CoordinateSequence cs, int i, int j)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals2D(CoordinateSequence cs, int i, int j)", "full_signature": "private static boolean equals2D(CoordinateSequence cs, int i, int j)", "class_method_signature": "CoordinateSequences.equals2D(CoordinateSequence cs, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "computeOrientation", "parameters": "(CoordinateSequence cs, int p1, int p2, int q)", "modifiers": "public static", "return": "int", "signature": "int computeOrientation(CoordinateSequence cs, int p1, int p2, int q)", "full_signature": "public static int computeOrientation(CoordinateSequence cs, int p1, int p2, int q)", "class_method_signature": "CoordinateSequences.computeOrientation(CoordinateSequence cs, int p1, int p2, int q)", "testcase": false, "constructor": false}, {"identifier": "coordinateDimension", "parameters": "(Geometry g)", "modifiers": "public static", "return": "int", "signature": "int coordinateDimension(Geometry g)", "full_signature": "public static int coordinateDimension(Geometry g)", "class_method_signature": "CoordinateSequences.coordinateDimension(Geometry g)", "testcase": false, "constructor": false}, {"identifier": "coordinateDimension", "parameters": "(CoordinateSequence seq)", "modifiers": "public static", "return": "int", "signature": "int coordinateDimension(CoordinateSequence seq)", "full_signature": "public static int coordinateDimension(CoordinateSequence seq)", "class_method_signature": "CoordinateSequences.coordinateDimension(CoordinateSequence seq)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/geometry/jts/coordinatesequence/CoordinateSequences.java"}, "focal_method": {"identifier": "coordinateDimension", "parameters": "(Geometry g)", "modifiers": "public static", "return": "int", "body": "public static int coordinateDimension(Geometry g)\n    {\n        // common fast cases\n        if (g instanceof CurvedGeometry<?>) {\n            return ((CurvedGeometry<?>) g).getCoordinatesDimension();\n        }\n        if (g instanceof Point)\n            return coordinateDimension(((Point) g).getCoordinateSequence());\n        if (g instanceof LineString)\n            return coordinateDimension(((LineString) g).getCoordinateSequence());\n        if (g instanceof Polygon)\n            return coordinateDimension(((Polygon) g).getExteriorRing()\n                    .getCoordinateSequence());\n    \n        // dig down to find a CS\n        CoordinateSequence cs = CoordinateSequenceFinder.find(g);\n        return coordinateDimension(cs);\n    }", "signature": "int coordinateDimension(Geometry g)", "full_signature": "public static int coordinateDimension(Geometry g)", "class_method_signature": "CoordinateSequences.coordinateDimension(Geometry g)", "testcase": false, "constructor": false, "invocations": ["getCoordinatesDimension", "coordinateDimension", "getCoordinateSequence", "coordinateDimension", "getCoordinateSequence", "coordinateDimension", "getCoordinateSequence", "getExteriorRing", "find", "coordinateDimension"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}