{"test_class": {"identifier": "TestRequestAuthCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpHost target;", "modifier": "private", "type": "HttpHost", "declarator": "target", "var_name": "target"}, {"original_string": "private HttpHost proxy;", "modifier": "private", "type": "HttpHost", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "private Credentials creds1;", "modifier": "private", "type": "Credentials", "declarator": "creds1", "var_name": "creds1"}, {"original_string": "private Credentials creds2;", "modifier": "private", "type": "Credentials", "declarator": "creds2", "var_name": "creds2"}, {"original_string": "private AuthScope authscope1;", "modifier": "private", "type": "AuthScope", "declarator": "authscope1", "var_name": "authscope1"}, {"original_string": "private AuthScope authscope2;", "modifier": "private", "type": "AuthScope", "declarator": "authscope2", "var_name": "authscope2"}, {"original_string": "private BasicScheme authscheme1;", "modifier": "private", "type": "BasicScheme", "declarator": "authscheme1", "var_name": "authscheme1"}, {"original_string": "private BasicScheme authscheme2;", "modifier": "private", "type": "BasicScheme", "declarator": "authscheme2", "var_name": "authscheme2"}, {"original_string": "private BasicCredentialsProvider credProvider;", "modifier": "private", "type": "BasicCredentialsProvider", "declarator": "credProvider", "var_name": "credProvider"}, {"original_string": "private AuthState targetState;", "modifier": "private", "type": "AuthState", "declarator": "targetState", "var_name": "targetState"}, {"original_string": "private AuthState proxyState;", "modifier": "private", "type": "AuthState", "declarator": "proxyState", "var_name": "proxyState"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestRequestAuthCache.java"}, "test_case": {"identifier": "testRequestParameterCheck", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void testRequestParameterCheck() throws Exception {\n        HttpContext context = new BasicHttpContext();\n        HttpRequestInterceptor interceptor = new RequestAuthCache();\n        interceptor.process(null, context);\n    }", "signature": "void testRequestParameterCheck()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testRequestParameterCheck()", "class_method_signature": "TestRequestAuthCache.testRequestParameterCheck()", "testcase": true, "constructor": false, "invocations": ["process"]}, "focal_class": {"identifier": "RequestAuthCache", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "RequestAuthCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequestAuthCache()", "full_signature": "public  RequestAuthCache()", "class_method_signature": "RequestAuthCache.RequestAuthCache()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestAuthCache.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "doPreemptiveAuth", "parameters": "(\n            final HttpHost host,\n            final AuthScheme authScheme,\n            final AuthState authState,\n            final CredentialsProvider credsProvider)", "modifiers": "private", "return": "void", "signature": "void doPreemptiveAuth(\n            final HttpHost host,\n            final AuthScheme authScheme,\n            final AuthState authState,\n            final CredentialsProvider credsProvider)", "full_signature": "private void doPreemptiveAuth(\n            final HttpHost host,\n            final AuthScheme authScheme,\n            final AuthState authState,\n            final CredentialsProvider credsProvider)", "class_method_signature": "RequestAuthCache.doPreemptiveAuth(\n            final HttpHost host,\n            final AuthScheme authScheme,\n            final AuthState authState,\n            final CredentialsProvider credsProvider)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/RequestAuthCache.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpRequest request, final HttpContext context)\n            throws HttpException, IOException {\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n        if (context == null) {\n            throw new IllegalArgumentException(\"HTTP context may not be null\");\n        }\n\n        AuthCache authCache = (AuthCache) context.getAttribute(ClientContext.AUTH_CACHE);\n        if (authCache == null) {\n            this.log.debug(\"Auth cache not set in the context\");\n            return;\n        }\n\n        CredentialsProvider credsProvider = (CredentialsProvider) context.getAttribute(\n                ClientContext.CREDS_PROVIDER);\n        if (credsProvider == null) {\n            this.log.debug(\"Credentials provider not set in the context\");\n            return;\n        }\n\n        HttpHost target = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n        AuthState targetState = (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);\n        if (target != null && targetState != null && targetState.getAuthScheme() == null) {\n            AuthScheme authScheme = authCache.get(target);\n            if (authScheme != null) {\n                doPreemptiveAuth(target, authScheme, targetState, credsProvider);\n            }\n        }\n\n        HttpHost proxy = (HttpHost) context.getAttribute(ExecutionContext.HTTP_PROXY_HOST);\n        AuthState proxyState = (AuthState) context.getAttribute(ClientContext.PROXY_AUTH_STATE);\n        if (proxy != null && proxyState != null && proxyState.getAuthScheme() == null) {\n            AuthScheme authScheme = authCache.get(proxy);\n            if (authScheme != null) {\n                doPreemptiveAuth(proxy, authScheme, proxyState, credsProvider);\n            }\n        }\n    }", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestAuthCache.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "debug", "getAttribute", "debug", "getAttribute", "getAttribute", "getAuthScheme", "get", "doPreemptiveAuth", "getAttribute", "getAttribute", "getAuthScheme", "get", "doPreemptiveAuth"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}