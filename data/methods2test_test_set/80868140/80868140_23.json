{"test_class": {"identifier": "CyclicSubSeriesSmootherTest", "superclass": "", "interfaces": "", "fields": [], "file": "stl-decomp-4j/src/test/java/com/github/servicenow/ds/stats/stl/CyclicSubSeriesSmootherTest.java"}, "test_case": {"identifier": "TrendingSinusoidExtrapolationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void TrendingSinusoidExtrapolationTest() {\n\t\tfinal int period = 24;\n\t\tdouble[] data = new double[2 * period];\n\t\tfinal double dx = 2 * PI / period;\n\t\tfor (int i = 0; i < data.length; ++i) {\n\t\t\tfinal int amplitude = 10 - i / period;\n\t\t\tdata[i] = amplitude * Math.sin(i * dx);\n\t\t}\n\n\t\tdouble[] extendedData = new double[4 * period];\n\n\t\tBuilder builder = new Builder();\n\t\tbuilder.setWidth(7); // Sub-cycle data is linear so width shouldn't matter\n\n\t\tCyclicSubSeriesSmoother sssmoother = builder.setDataLength(data.length).setPeriodicity(period)\n\t\t\t\t.extrapolateForwardAndBack(1).build();\n\n\t\tsssmoother.smoothSeasonal(data, extendedData, null);\n\n\t\tfor (int i = 0; i < extendedData.length; ++i) {\n\t\t\tfinal int amplitude = 11 - i / period; // An extra for the extrapolation before.\n\t\t\tfinal double value = amplitude * Math.sin(i * dx);\n\t\t\tassertEquals(String.format(\"test point %d\", i), value, extendedData[i], 1.0e-11);\n\t\t}\n\t}", "signature": "void TrendingSinusoidExtrapolationTest()", "full_signature": "@Test public void TrendingSinusoidExtrapolationTest()", "class_method_signature": "CyclicSubSeriesSmootherTest.TrendingSinusoidExtrapolationTest()", "testcase": true, "constructor": false, "invocations": ["sin", "setWidth", "build", "extrapolateForwardAndBack", "setPeriodicity", "setDataLength", "smoothSeasonal", "sin", "assertEquals", "format"]}, "focal_class": {"identifier": "CyclicSubSeriesSmoother", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[][] fRawCyclicSubSeries;", "modifier": "private final", "type": "double[][]", "declarator": "fRawCyclicSubSeries", "var_name": "fRawCyclicSubSeries"}, {"original_string": "private final double[][] fSmoothedCyclicSubSeries;", "modifier": "private final", "type": "double[][]", "declarator": "fSmoothedCyclicSubSeries", "var_name": "fSmoothedCyclicSubSeries"}, {"original_string": "private final double[][] fSubSeriesWeights;", "modifier": "private final", "type": "double[][]", "declarator": "fSubSeriesWeights", "var_name": "fSubSeriesWeights"}, {"original_string": "private final int fPeriodLength;", "modifier": "private final", "type": "int", "declarator": "fPeriodLength", "var_name": "fPeriodLength"}, {"original_string": "private final int fNumPeriods;", "modifier": "private final", "type": "int", "declarator": "fNumPeriods", "var_name": "fNumPeriods"}, {"original_string": "private final int fRemainder;", "modifier": "private final", "type": "int", "declarator": "fRemainder", "var_name": "fRemainder"}, {"original_string": "private final int fNumPeriodsToExtrapolateBackward;", "modifier": "private final", "type": "int", "declarator": "fNumPeriodsToExtrapolateBackward", "var_name": "fNumPeriodsToExtrapolateBackward"}, {"original_string": "private final int fNumPeriodsToExtrapolateForward;", "modifier": "private final", "type": "int", "declarator": "fNumPeriodsToExtrapolateForward", "var_name": "fNumPeriodsToExtrapolateForward"}, {"original_string": "private final int fWidth;", "modifier": "private final", "type": "int", "declarator": "fWidth", "var_name": "fWidth"}, {"original_string": "private final LoessSmoother.Builder fLoessSmootherFactory;", "modifier": "private final", "type": "LoessSmoother.Builder", "declarator": "fLoessSmootherFactory", "var_name": "fLoessSmootherFactory"}], "methods": [{"identifier": "CyclicSubSeriesSmoother", "parameters": "(int width, int degree, int jump,\n\t                        int dataLength, int periodicity,\n\t                        int numPeriodsToExtrapolateBackward, int numPeriodsToExtrapolateForward)", "modifiers": "", "return": "", "signature": " CyclicSubSeriesSmoother(int width, int degree, int jump,\n\t                        int dataLength, int periodicity,\n\t                        int numPeriodsToExtrapolateBackward, int numPeriodsToExtrapolateForward)", "full_signature": "  CyclicSubSeriesSmoother(int width, int degree, int jump,\n\t                        int dataLength, int periodicity,\n\t                        int numPeriodsToExtrapolateBackward, int numPeriodsToExtrapolateForward)", "class_method_signature": "CyclicSubSeriesSmoother.CyclicSubSeriesSmoother(int width, int degree, int jump,\n\t                        int dataLength, int periodicity,\n\t                        int numPeriodsToExtrapolateBackward, int numPeriodsToExtrapolateForward)", "testcase": false, "constructor": true}, {"identifier": "smoothSeasonal", "parameters": "(double[] rawData, double[] smoothedData, double[] weights)", "modifiers": "public", "return": "void", "signature": "void smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "full_signature": "public void smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "class_method_signature": "CyclicSubSeriesSmoother.smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "testcase": false, "constructor": false}, {"identifier": "computeSmoothedSubSeries", "parameters": "(boolean useResidualWeights)", "modifiers": "private", "return": "void", "signature": "void computeSmoothedSubSeries(boolean useResidualWeights)", "full_signature": "private void computeSmoothedSubSeries(boolean useResidualWeights)", "class_method_signature": "CyclicSubSeriesSmoother.computeSmoothedSubSeries(boolean useResidualWeights)", "testcase": false, "constructor": false}, {"identifier": "extractRawSubSeriesAndWeights", "parameters": "(double[] data, double[] weights)", "modifiers": "private", "return": "void", "signature": "void extractRawSubSeriesAndWeights(double[] data, double[] weights)", "full_signature": "private void extractRawSubSeriesAndWeights(double[] data, double[] weights)", "class_method_signature": "CyclicSubSeriesSmoother.extractRawSubSeriesAndWeights(double[] data, double[] weights)", "testcase": false, "constructor": false}, {"identifier": "reconstructExtendedDataFromSubSeries", "parameters": "(double[] data)", "modifiers": "private", "return": "void", "signature": "void reconstructExtendedDataFromSubSeries(double[] data)", "full_signature": "private void reconstructExtendedDataFromSubSeries(double[] data)", "class_method_signature": "CyclicSubSeriesSmoother.reconstructExtendedDataFromSubSeries(double[] data)", "testcase": false, "constructor": false}, {"identifier": "smoothOneSubSeries", "parameters": "(double[] weights, double[] rawData, double[] smoothedData)", "modifiers": "private", "return": "void", "signature": "void smoothOneSubSeries(double[] weights, double[] rawData, double[] smoothedData)", "full_signature": "private void smoothOneSubSeries(double[] weights, double[] rawData, double[] smoothedData)", "class_method_signature": "CyclicSubSeriesSmoother.smoothOneSubSeries(double[] weights, double[] rawData, double[] smoothedData)", "testcase": false, "constructor": false}], "file": "stl-decomp-4j/src/main/java/com/github/servicenow/ds/stats/stl/CyclicSubSeriesSmoother.java"}, "focal_method": {"identifier": "smoothSeasonal", "parameters": "(double[] rawData, double[] smoothedData, double[] weights)", "modifiers": "public", "return": "void", "body": "public void smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights) {\n\t\textractRawSubSeriesAndWeights(rawData, weights);\n\t\tcomputeSmoothedSubSeries(weights != null);\n\t\treconstructExtendedDataFromSubSeries(smoothedData);\n\t\t// SeasonalTrendLoess.dumpDebugData(\"extended seasonal\", smoothedData);\n\t}", "signature": "void smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "full_signature": "public void smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "class_method_signature": "CyclicSubSeriesSmoother.smoothSeasonal(double[] rawData, double[] smoothedData, double[] weights)", "testcase": false, "constructor": false, "invocations": ["extractRawSubSeriesAndWeights", "computeSmoothedSubSeries", "reconstructExtendedDataFromSubSeries"]}, "repository": {"repo_id": 80868140, "url": "https://github.com/ServiceNow/stl-decomp-4j", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 79, "size": 3949, "license": "licensed"}}