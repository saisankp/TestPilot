{"test_class": {"identifier": "JiraProjectReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private JiraConfigurationProperties propertiesMock;", "modifier": "@Mock\n    private", "type": "JiraConfigurationProperties", "declarator": "propertiesMock", "var_name": "propertiesMock"}, {"original_string": "@Mock\n    private RestTemplateBuilder builderMock;", "modifier": "@Mock\n    private", "type": "RestTemplateBuilder", "declarator": "builderMock", "var_name": "builderMock"}, {"original_string": "@Mock\n    private RestTemplate restTemplateMock;", "modifier": "@Mock\n    private", "type": "RestTemplate", "declarator": "restTemplateMock", "var_name": "restTemplateMock"}, {"original_string": "private JiraProjectReader jiraProjectReader;", "modifier": "private", "type": "JiraProjectReader", "declarator": "jiraProjectReader", "var_name": "jiraProjectReader"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/reader/JiraProjectReaderTest.java"}, "test_case": {"identifier": "getUpdateJqlQueryStringReturnsExpectedQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getUpdateJqlQueryStringReturnsExpectedQuery() {\n        // given\n        var expectedDateString = \"2018-01-01 13:37\";\n        var datePatternString = \"yyyy-MM-dd HH:mm\";\n        var dateTime = LocalDateTime.parse(expectedDateString, DateTimeFormatter.ofPattern(datePatternString));\n\n        var expectedQueryString = String.format(\" issuetype = \\\"Staffinganfrage\\\" AND project = \\\"Staffing\\\" AND ( updated >= \\\"%s\\\" OR created >= \\\"%s\\\" )\",\n                expectedDateString, expectedDateString);\n\n        // when\n        var actualQueryString = jiraProjectReader.getUpdateJqlQueryString(dateTime);\n\n        // then\n        assertThat(expectedQueryString).isEqualTo(actualQueryString);\n    }", "signature": "void getUpdateJqlQueryStringReturnsExpectedQuery()", "full_signature": "@Test public void getUpdateJqlQueryStringReturnsExpectedQuery()", "class_method_signature": "JiraProjectReaderTest.getUpdateJqlQueryStringReturnsExpectedQuery()", "testcase": true, "constructor": false, "invocations": ["parse", "ofPattern", "format", "getUpdateJqlQueryString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "JiraProjectReader", "superclass": "", "interfaces": "implements ProjectReader", "fields": [{"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private final JiraConfigurationProperties properties;", "modifier": "private final", "type": "JiraConfigurationProperties", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "JiraProjectReader", "parameters": "(RestTemplateBuilder builder, JiraConfigurationProperties properties)", "modifiers": "public", "return": "", "signature": " JiraProjectReader(RestTemplateBuilder builder, JiraConfigurationProperties properties)", "full_signature": "public  JiraProjectReader(RestTemplateBuilder builder, JiraConfigurationProperties properties)", "class_method_signature": "JiraProjectReader.JiraProjectReader(RestTemplateBuilder builder, JiraConfigurationProperties properties)", "testcase": false, "constructor": true}, {"identifier": "getAllProjectsSince", "parameters": "(LocalDateTime dateTime)", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> getAllProjectsSince(LocalDateTime dateTime)", "full_signature": "@Override public List<Project> getAllProjectsSince(LocalDateTime dateTime)", "class_method_signature": "JiraProjectReader.getAllProjectsSince(LocalDateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "getInitialProjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Project>", "signature": "List<Project> getInitialProjects()", "full_signature": "@Override public List<Project> getInitialProjects()", "class_method_signature": "JiraProjectReader.getInitialProjects()", "testcase": false, "constructor": false}, {"identifier": "health", "parameters": "()", "modifiers": "@Override public", "return": "Health", "signature": "Health health()", "full_signature": "@Override public Health health()", "class_method_signature": "JiraProjectReader.health()", "testcase": false, "constructor": false}, {"identifier": "getProjectsByQuery", "parameters": "(String jqlQuery)", "modifiers": "private", "return": "List<Project>", "signature": "List<Project> getProjectsByQuery(String jqlQuery)", "full_signature": "private List<Project> getProjectsByQuery(String jqlQuery)", "class_method_signature": "JiraProjectReader.getProjectsByQuery(String jqlQuery)", "testcase": false, "constructor": false}, {"identifier": "parseJiraIssues", "parameters": "(String jiraResponse)", "modifiers": "", "return": "List<JiraIssue>", "signature": "List<JiraIssue> parseJiraIssues(String jiraResponse)", "full_signature": " List<JiraIssue> parseJiraIssues(String jiraResponse)", "class_method_signature": "JiraProjectReader.parseJiraIssues(String jiraResponse)", "testcase": false, "constructor": false}, {"identifier": "getUpdateJqlQueryString", "parameters": "(LocalDateTime dateTime)", "modifiers": "", "return": "String", "signature": "String getUpdateJqlQueryString(LocalDateTime dateTime)", "full_signature": " String getUpdateJqlQueryString(LocalDateTime dateTime)", "class_method_signature": "JiraProjectReader.getUpdateJqlQueryString(LocalDateTime dateTime)", "testcase": false, "constructor": false}, {"identifier": "getInitialJqlQueryString", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getInitialJqlQueryString()", "full_signature": " String getInitialJqlQueryString()", "class_method_signature": "JiraProjectReader.getInitialJqlQueryString()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/reader/JiraProjectReader.java"}, "focal_method": {"identifier": "getUpdateJqlQueryString", "parameters": "(LocalDateTime dateTime)", "modifiers": "", "return": "String", "body": "String getUpdateJqlQueryString(LocalDateTime dateTime) {\n        JqlQueryStringBuilder andQueryBuilder = new JqlQueryStringBuilder();\n        JqlQueryStringBuilder orQueryBuilder = new JqlQueryStringBuilder();\n\n        orQueryBuilder\n                .newQuery(\"updated\", JqlComparator.GREATER_OR_EQUAL, dateTime)\n                .or(\"created\", JqlComparator.GREATER_OR_EQUAL, dateTime);\n\n        return andQueryBuilder\n                .newQuery(\"issuetype\", JqlComparator.EQUAL, \"Staffinganfrage\")\n                .and(\"project\", JqlComparator.EQUAL, \"Staffing\")\n                .and(orQueryBuilder.build())\n                .build();\n    }", "signature": "String getUpdateJqlQueryString(LocalDateTime dateTime)", "full_signature": " String getUpdateJqlQueryString(LocalDateTime dateTime)", "class_method_signature": "JiraProjectReader.getUpdateJqlQueryString(LocalDateTime dateTime)", "testcase": false, "constructor": false, "invocations": ["or", "newQuery", "build", "and", "and", "newQuery", "build"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}