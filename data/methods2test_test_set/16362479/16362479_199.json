{"test_class": {"identifier": "ReplicatedLogImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorRecoverySupportTest.class)", "var_name": "LOG"}, {"original_string": "@Mock\n    private DataPersistenceProvider mockPersistence;", "modifier": "@Mock\n    private", "type": "DataPersistenceProvider", "declarator": "mockPersistence", "var_name": "mockPersistence"}, {"original_string": "@Mock\n    private RaftActorBehavior mockBehavior;", "modifier": "@Mock\n    private", "type": "RaftActorBehavior", "declarator": "mockBehavior", "var_name": "mockBehavior"}, {"original_string": "private RaftActorContext context;", "modifier": "private", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final DefaultConfigParamsImpl configParams = new DefaultConfigParamsImpl();", "modifier": "private final", "type": "DefaultConfigParamsImpl", "declarator": "configParams = new DefaultConfigParamsImpl()", "var_name": "configParams"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/ReplicatedLogImplTest.java"}, "test_case": {"identifier": "testRemoveFromAndPersist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveFromAndPersist() throws Exception {\n\n        ReplicatedLog log = ReplicatedLogImpl.newInstance(context);\n\n        log.append(new SimpleReplicatedLogEntry(0, 1, new MockPayload(\"0\")));\n        log.append(new SimpleReplicatedLogEntry(1, 1, new MockPayload(\"1\")));\n        log.append(new SimpleReplicatedLogEntry(2, 1, new MockPayload(\"2\")));\n\n        log.removeFromAndPersist(1);\n\n        DeleteEntries deleteEntries = new DeleteEntries(1);\n        verifyPersist(deleteEntries, match(deleteEntries), false);\n\n        assertEquals(\"size\", 1, log.size());\n\n        reset(mockPersistence);\n\n        log.removeFromAndPersist(1);\n\n        verifyNoMoreInteractions(mockPersistence);\n    }", "signature": "void testRemoveFromAndPersist()", "full_signature": "@Test public void testRemoveFromAndPersist()", "class_method_signature": "ReplicatedLogImplTest.testRemoveFromAndPersist()", "testcase": true, "constructor": false, "invocations": ["newInstance", "append", "append", "append", "removeFromAndPersist", "verifyPersist", "match", "assertEquals", "size", "reset", "removeFromAndPersist", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ReplicatedLogImpl", "superclass": "extends AbstractReplicatedLogImpl", "interfaces": "", "fields": [{"original_string": "private static final int DATA_SIZE_DIVIDER = 5;", "modifier": "private static final", "type": "int", "declarator": "DATA_SIZE_DIVIDER = 5", "var_name": "DATA_SIZE_DIVIDER"}, {"original_string": "private final RaftActorContext context;", "modifier": "private final", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private long dataSizeSinceLastSnapshot = 0L;", "modifier": "private", "type": "long", "declarator": "dataSizeSinceLastSnapshot = 0L", "var_name": "dataSizeSinceLastSnapshot"}], "methods": [{"identifier": "ReplicatedLogImpl", "parameters": "(final long snapshotIndex, final long snapshotTerm,\n            final List<ReplicatedLogEntry> unAppliedEntries,\n            final RaftActorContext context)", "modifiers": "private", "return": "", "signature": " ReplicatedLogImpl(final long snapshotIndex, final long snapshotTerm,\n            final List<ReplicatedLogEntry> unAppliedEntries,\n            final RaftActorContext context)", "full_signature": "private  ReplicatedLogImpl(final long snapshotIndex, final long snapshotTerm,\n            final List<ReplicatedLogEntry> unAppliedEntries,\n            final RaftActorContext context)", "class_method_signature": "ReplicatedLogImpl.ReplicatedLogImpl(final long snapshotIndex, final long snapshotTerm,\n            final List<ReplicatedLogEntry> unAppliedEntries,\n            final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(final Snapshot snapshot, final RaftActorContext context)", "modifiers": "static", "return": "ReplicatedLog", "signature": "ReplicatedLog newInstance(final Snapshot snapshot, final RaftActorContext context)", "full_signature": "static ReplicatedLog newInstance(final Snapshot snapshot, final RaftActorContext context)", "class_method_signature": "ReplicatedLogImpl.newInstance(final Snapshot snapshot, final RaftActorContext context)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final RaftActorContext context)", "modifiers": "static", "return": "ReplicatedLog", "signature": "ReplicatedLog newInstance(final RaftActorContext context)", "full_signature": "static ReplicatedLog newInstance(final RaftActorContext context)", "class_method_signature": "ReplicatedLogImpl.newInstance(final RaftActorContext context)", "testcase": false, "constructor": false}, {"identifier": "removeFromAndPersist", "parameters": "(final long logEntryIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeFromAndPersist(final long logEntryIndex)", "full_signature": "@Override public boolean removeFromAndPersist(final long logEntryIndex)", "class_method_signature": "ReplicatedLogImpl.removeFromAndPersist(final long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "shouldCaptureSnapshot", "parameters": "(final long logIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldCaptureSnapshot(final long logIndex)", "full_signature": "@Override public boolean shouldCaptureSnapshot(final long logIndex)", "class_method_signature": "ReplicatedLogImpl.shouldCaptureSnapshot(final long logIndex)", "testcase": false, "constructor": false}, {"identifier": "captureSnapshotIfReady", "parameters": "(final ReplicatedLogEntry replicatedLogEntry)", "modifiers": "@Override public", "return": "void", "signature": "void captureSnapshotIfReady(final ReplicatedLogEntry replicatedLogEntry)", "full_signature": "@Override public void captureSnapshotIfReady(final ReplicatedLogEntry replicatedLogEntry)", "class_method_signature": "ReplicatedLogImpl.captureSnapshotIfReady(final ReplicatedLogEntry replicatedLogEntry)", "testcase": false, "constructor": false}, {"identifier": "getDataSizeForSnapshotCheck", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getDataSizeForSnapshotCheck()", "full_signature": "private long getDataSizeForSnapshotCheck()", "class_method_signature": "ReplicatedLogImpl.getDataSizeForSnapshotCheck()", "testcase": false, "constructor": false}, {"identifier": "appendAndPersist", "parameters": "(final ReplicatedLogEntry replicatedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback, final boolean doAsync)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appendAndPersist(final ReplicatedLogEntry replicatedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback, final boolean doAsync)", "full_signature": "@Override public boolean appendAndPersist(final ReplicatedLogEntry replicatedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback, final boolean doAsync)", "class_method_signature": "ReplicatedLogImpl.appendAndPersist(final ReplicatedLogEntry replicatedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback, final boolean doAsync)", "testcase": false, "constructor": false}, {"identifier": "persistCallback", "parameters": "(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "modifiers": "private", "return": "void", "signature": "void persistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "full_signature": "private void persistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "class_method_signature": "ReplicatedLogImpl.persistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "testcase": false, "constructor": false}, {"identifier": "syncPersistCallback", "parameters": "(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "modifiers": "private", "return": "void", "signature": "void syncPersistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "full_signature": "private void syncPersistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "class_method_signature": "ReplicatedLogImpl.syncPersistCallback(final ReplicatedLogEntry persistedLogEntry,\n            final Consumer<ReplicatedLogEntry> callback)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/ReplicatedLogImpl.java"}, "focal_method": {"identifier": "removeFromAndPersist", "parameters": "(final long logEntryIndex)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean removeFromAndPersist(final long logEntryIndex) {\n        long adjustedIndex = removeFrom(logEntryIndex);\n        if (adjustedIndex >= 0) {\n            context.getPersistenceProvider().persist(new DeleteEntries(logEntryIndex), NoopProcedure.instance());\n            return true;\n        }\n\n        return false;\n    }", "signature": "boolean removeFromAndPersist(final long logEntryIndex)", "full_signature": "@Override public boolean removeFromAndPersist(final long logEntryIndex)", "class_method_signature": "ReplicatedLogImpl.removeFromAndPersist(final long logEntryIndex)", "testcase": false, "constructor": false, "invocations": ["removeFrom", "persist", "getPersistenceProvider", "instance"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}