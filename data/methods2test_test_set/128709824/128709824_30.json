{"test_class": {"identifier": "SofaRegistrySubscribeCallbackTest", "superclass": "", "interfaces": "", "fields": [], "file": "registry/registry-sofa/src/test/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistrySubscribeCallbackTest.java"}, "test_case": {"identifier": "mergeProviderInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeProviderInfo() throws Exception {\n        SofaRegistrySubscribeCallback callback = new SofaRegistrySubscribeCallback();\n        // null + null\n        List<ProviderInfo> result = callback.mergeProviderInfo(null, null);\n        Assert.assertTrue(CommonUtils.isEmpty(result));\n        // \u7a7a + null\n        List<String> listData = new ArrayList<String>();\n        result = callback.mergeProviderInfo(listData, null);\n        Assert.assertTrue(CommonUtils.isEmpty(result));\n        // null + \u7a7a\n        List<String> attrData = new ArrayList<String>();\n        result = callback.mergeProviderInfo(null, attrData);\n        Assert.assertTrue(CommonUtils.isEmpty(result));\n        // \u7a7a+ \u7a7a\n        result = callback.mergeProviderInfo(listData, attrData);\n        Assert.assertTrue(CommonUtils.isEmpty(result));\n        // \u7a7a+\u975e\u7a7a\n        attrData.add(\"override://127.0.0.1?weight=200\");\n        result = callback.mergeProviderInfo(listData, attrData);\n        Assert.assertTrue(CommonUtils.isEmpty(result));\n        // \u975e\u7a7a+\u7a7a\n        attrData.clear();\n        listData.add(\"127.0.0.1:22000?weight=100\");\n        listData.add(\"127.0.0.1:22001?weight=100\");\n        result = callback.mergeProviderInfo(listData, attrData);\n        Assert.assertTrue(result.size() == 2);\n        for (ProviderInfo providerInfo : result) {\n            if (providerInfo.getPort() == 22000) {\n                Assert.assertTrue(providerInfo.getWeight() == 100);\n            } else if (providerInfo.getPort() == 22001) {\n                Assert.assertTrue(providerInfo.getWeight() == 100);\n            }\n        }\n        // \u8986\u76d6\u672a\u547d\u4e2d\n        attrData.add(\"override://127.0.0.1:22005?weight=200\");\n        attrData.add(\"override://127.0.0.1:22004?disabled=true&weight=200\");\n        result = callback.mergeProviderInfo(listData, attrData);\n        Assert.assertTrue(result.size() == 2);\n        for (ProviderInfo providerInfo : result) {\n            if (providerInfo.getPort() == 22000) {\n                Assert.assertTrue(providerInfo.getWeight() == 100);\n            } else if (providerInfo.getPort() == 22001) {\n                Assert.assertTrue(providerInfo.getWeight() == 100);\n            }\n        }\n        // \u8986\u76d6\n        attrData.add(\"override://127.0.0.1:22000?weight=200\");\n        attrData.add(\"override://127.0.0.1:22001?disabled=true&weight=200\");\n        result = callback.mergeProviderInfo(listData, attrData);\n        Assert.assertTrue(result.size() == 1);\n        for (ProviderInfo providerInfo : result) {\n            if (providerInfo.getPort() == 22000) {\n                Assert.assertTrue(providerInfo.getWeight() == 200);\n            }\n        }\n    }", "signature": "void mergeProviderInfo()", "full_signature": "@Test public void mergeProviderInfo()", "class_method_signature": "SofaRegistrySubscribeCallbackTest.mergeProviderInfo()", "testcase": true, "constructor": false, "invocations": ["mergeProviderInfo", "assertTrue", "isEmpty", "mergeProviderInfo", "assertTrue", "isEmpty", "mergeProviderInfo", "assertTrue", "isEmpty", "mergeProviderInfo", "assertTrue", "isEmpty", "add", "mergeProviderInfo", "assertTrue", "isEmpty", "clear", "add", "add", "mergeProviderInfo", "assertTrue", "size", "getPort", "assertTrue", "getWeight", "getPort", "assertTrue", "getWeight", "add", "add", "mergeProviderInfo", "assertTrue", "size", "getPort", "assertTrue", "getWeight", "getPort", "assertTrue", "getWeight", "add", "add", "mergeProviderInfo", "assertTrue", "size", "getPort", "assertTrue", "getWeight"]}, "focal_class": {"identifier": "SofaRegistrySubscribeCallback", "superclass": "", "interfaces": "implements SubscriberDataObserver, ConfigDataObserver", "fields": [{"original_string": "private static final Logger                             LOGGER                = LoggerFactory\n                                                                                      .getLogger(SofaRegistrySubscribeCallback.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER                = LoggerFactory\n                                                                                      .getLogger(SofaRegistrySubscribeCallback.class)", "var_name": "LOGGER"}, {"original_string": "public static final String                              CONFIG_SEPARATOR      = \"#\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_SEPARATOR      = \"#\"", "var_name": "CONFIG_SEPARATOR"}, {"original_string": "public static final String                              DEFAULT_ZONE          = \"DEFAULT_ZONE\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_ZONE          = \"DEFAULT_ZONE\"", "var_name": "DEFAULT_ZONE"}, {"original_string": "ConcurrentHashMap<ConsumerConfig, ProviderInfoListener> providerInfoListeners = new ConcurrentHashMap<ConsumerConfig, ProviderInfoListener>();", "modifier": "", "type": "ConcurrentHashMap<ConsumerConfig, ProviderInfoListener>", "declarator": "providerInfoListeners = new ConcurrentHashMap<ConsumerConfig, ProviderInfoListener>()", "var_name": "providerInfoListeners"}, {"original_string": "private UserData                                        lastUserData;", "modifier": "private", "type": "UserData", "declarator": "lastUserData", "var_name": "lastUserData"}, {"original_string": "private ConfigData                                      lastConfigData;", "modifier": "private", "type": "ConfigData", "declarator": "lastConfigData", "var_name": "lastConfigData"}, {"original_string": "AtomicBoolean[] flag = new AtomicBoolean[] { new AtomicBoolean(), new AtomicBoolean() };", "modifier": "", "type": "AtomicBoolean[]", "declarator": "flag = new AtomicBoolean[] { new AtomicBoolean(), new AtomicBoolean() }", "var_name": "flag"}], "methods": [{"identifier": "SofaRegistrySubscribeCallback", "parameters": "()", "modifiers": "public", "return": "", "signature": " SofaRegistrySubscribeCallback()", "full_signature": "public  SofaRegistrySubscribeCallback()", "class_method_signature": "SofaRegistrySubscribeCallback.SofaRegistrySubscribeCallback()", "testcase": false, "constructor": true}, {"identifier": "handleData", "parameters": "(String dataId, UserData userData)", "modifiers": "@Override public", "return": "void", "signature": "void handleData(String dataId, UserData userData)", "full_signature": "@Override public void handleData(String dataId, UserData userData)", "class_method_signature": "SofaRegistrySubscribeCallback.handleData(String dataId, UserData userData)", "testcase": false, "constructor": false}, {"identifier": "canNotify", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean canNotify()", "full_signature": "private boolean canNotify()", "class_method_signature": "SofaRegistrySubscribeCallback.canNotify()", "testcase": false, "constructor": false}, {"identifier": "handleDataToListener", "parameters": "(String dataId, ConsumerConfig config, ProviderInfoListener listener)", "modifiers": "", "return": "void", "signature": "void handleDataToListener(String dataId, ConsumerConfig config, ProviderInfoListener listener)", "full_signature": " void handleDataToListener(String dataId, ConsumerConfig config, ProviderInfoListener listener)", "class_method_signature": "SofaRegistrySubscribeCallback.handleDataToListener(String dataId, ConsumerConfig config, ProviderInfoListener listener)", "testcase": false, "constructor": false}, {"identifier": "flatUserData", "parameters": "(UserData userData)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> flatUserData(UserData userData)", "full_signature": "protected List<String> flatUserData(UserData userData)", "class_method_signature": "SofaRegistrySubscribeCallback.flatUserData(UserData userData)", "testcase": false, "constructor": false}, {"identifier": "flatComposeData", "parameters": "(ComposeUserData userData)", "modifiers": "protected", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> flatComposeData(ComposeUserData userData)", "full_signature": "protected List<ProviderInfo> flatComposeData(ComposeUserData userData)", "class_method_signature": "SofaRegistrySubscribeCallback.flatComposeData(ComposeUserData userData)", "testcase": false, "constructor": false}, {"identifier": "composeUserAndConfigData", "parameters": "(UserData userData, ConfigData configData)", "modifiers": "private", "return": "ComposeUserData", "signature": "ComposeUserData composeUserAndConfigData(UserData userData, ConfigData configData)", "full_signature": "private ComposeUserData composeUserAndConfigData(UserData userData, ConfigData configData)", "class_method_signature": "SofaRegistrySubscribeCallback.composeUserAndConfigData(UserData userData, ConfigData configData)", "testcase": false, "constructor": false}, {"identifier": "mergeProviderInfo", "parameters": "(List<String> userDatas, List<String> configDatas)", "modifiers": "", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "full_signature": " List<ProviderInfo> mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "class_method_signature": "SofaRegistrySubscribeCallback.mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "testcase": false, "constructor": false}, {"identifier": "addProviderInfoListener", "parameters": "(String dataId, ConsumerConfig consumerConfig,\n                                 ProviderInfoListener listener)", "modifiers": "", "return": "void", "signature": "void addProviderInfoListener(String dataId, ConsumerConfig consumerConfig,\n                                 ProviderInfoListener listener)", "full_signature": " void addProviderInfoListener(String dataId, ConsumerConfig consumerConfig,\n                                 ProviderInfoListener listener)", "class_method_signature": "SofaRegistrySubscribeCallback.addProviderInfoListener(String dataId, ConsumerConfig consumerConfig,\n                                 ProviderInfoListener listener)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String dataId, ConsumerConfig consumerConfig)", "modifiers": "", "return": "void", "signature": "void remove(String dataId, ConsumerConfig consumerConfig)", "full_signature": " void remove(String dataId, ConsumerConfig consumerConfig)", "class_method_signature": "SofaRegistrySubscribeCallback.remove(String dataId, ConsumerConfig consumerConfig)", "testcase": false, "constructor": false}, {"identifier": "getListenerNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getListenerNum()", "full_signature": "public int getListenerNum()", "class_method_signature": "SofaRegistrySubscribeCallback.getListenerNum()", "testcase": false, "constructor": false}, {"identifier": "printUserData", "parameters": "(String dataId, UserData userData)", "modifiers": "private", "return": "void", "signature": "void printUserData(String dataId, UserData userData)", "full_signature": "private void printUserData(String dataId, UserData userData)", "class_method_signature": "SofaRegistrySubscribeCallback.printUserData(String dataId, UserData userData)", "testcase": false, "constructor": false}, {"identifier": "printConfigData", "parameters": "(String dataId, ConfigData configData)", "modifiers": "private", "return": "void", "signature": "void printConfigData(String dataId, ConfigData configData)", "full_signature": "private void printConfigData(String dataId, ConfigData configData)", "class_method_signature": "SofaRegistrySubscribeCallback.printConfigData(String dataId, ConfigData configData)", "testcase": false, "constructor": false}, {"identifier": "handleData", "parameters": "(String dataId, ConfigData configData)", "modifiers": "@Override public", "return": "void", "signature": "void handleData(String dataId, ConfigData configData)", "full_signature": "@Override public void handleData(String dataId, ConfigData configData)", "class_method_signature": "SofaRegistrySubscribeCallback.handleData(String dataId, ConfigData configData)", "testcase": false, "constructor": false}, {"identifier": "composeAndNotify", "parameters": "(UserData userData, ConfigData configData)", "modifiers": "private", "return": "void", "signature": "void composeAndNotify(UserData userData, ConfigData configData)", "full_signature": "private void composeAndNotify(UserData userData, ConfigData configData)", "class_method_signature": "SofaRegistrySubscribeCallback.composeAndNotify(UserData userData, ConfigData configData)", "testcase": false, "constructor": false}, {"identifier": "notifyToListener", "parameters": "(ComposeUserData mergedResult)", "modifiers": "private", "return": "void", "signature": "void notifyToListener(ComposeUserData mergedResult)", "full_signature": "private void notifyToListener(ComposeUserData mergedResult)", "class_method_signature": "SofaRegistrySubscribeCallback.notifyToListener(ComposeUserData mergedResult)", "testcase": false, "constructor": false}, {"identifier": "notifyToListener", "parameters": "(ProviderInfoListener listener, ComposeUserData mergedResult)", "modifiers": "private", "return": "void", "signature": "void notifyToListener(ProviderInfoListener listener, ComposeUserData mergedResult)", "full_signature": "private void notifyToListener(ProviderInfoListener listener, ComposeUserData mergedResult)", "class_method_signature": "SofaRegistrySubscribeCallback.notifyToListener(ProviderInfoListener listener, ComposeUserData mergedResult)", "testcase": false, "constructor": false}], "file": "registry/registry-sofa/src/main/java/com/alipay/sofa/rpc/registry/sofa/SofaRegistrySubscribeCallback.java"}, "focal_method": {"identifier": "mergeProviderInfo", "parameters": "(List<String> userDatas, List<String> configDatas)", "modifiers": "", "return": "List<ProviderInfo>", "body": "List<ProviderInfo> mergeProviderInfo(List<String> userDatas, List<String> configDatas) {\n        // \u662f\u5426\u81ea\u5df1\u7f13\u5b58\u8fd0\u7b97\u540e\u7684\u7ed3\u679c\uff1f\uff1f TODO\n        List<ProviderInfo> providers = SofaRegistryHelper.parseProviderInfos(userDatas);\n        // \u4ea4\u53c9\u6bd4\u8f83\n        if (CommonUtils.isNotEmpty(providers) && CommonUtils.isNotEmpty(configDatas)) {\n            List<ProviderInfo> override = SofaRegistryHelper.parseProviderInfos(configDatas);\n            Iterator<ProviderInfo> iterator = providers.iterator();\n            while (iterator.hasNext()) {\n                ProviderInfo origin = iterator.next();\n                for (ProviderInfo over : override) {\n                    if (PROTOCOL_TYPE_OVERRIDE.equals(over.getProtocolType()) &&\n                        StringUtils.equals(origin.getHost(), over.getHost()) && origin.getPort() == over.getPort()) {\n                        // host \u548c port \u76f8\u540c \u8ba4\u4e3a\u662f\u4e00\u4e2a\u5730\u5740\n                        if (over.getWeight() != origin.getWeight()) {\n                            origin.setWeight(over.getWeight());\n                        }\n                        if (CommonUtils.isTrue(over.getAttr(ProviderInfoAttrs.ATTR_DISABLED))) {\n                            if (LOGGER.isInfoEnabled()) {\n                                LOGGER.info(\"Provider is disabled by override. {}\", origin.toUrl());\n                            }\n                            iterator.remove(); // \u7981\u7528 \u5220\u6389\n                        }\n                    }\n                }\n            }\n        }\n        return providers;\n    }", "signature": "List<ProviderInfo> mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "full_signature": " List<ProviderInfo> mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "class_method_signature": "SofaRegistrySubscribeCallback.mergeProviderInfo(List<String> userDatas, List<String> configDatas)", "testcase": false, "constructor": false, "invocations": ["parseProviderInfos", "isNotEmpty", "isNotEmpty", "parseProviderInfos", "iterator", "hasNext", "next", "equals", "getProtocolType", "equals", "getHost", "getHost", "getPort", "getPort", "getWeight", "getWeight", "setWeight", "getWeight", "isTrue", "getAttr", "isInfoEnabled", "info", "toUrl", "remove"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}