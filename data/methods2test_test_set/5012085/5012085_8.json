{"test_class": {"identifier": "RegexValuePredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "netflix-infix/src/test/java/com/netflix/infix/RegexValuePredicateTest.java"}, "test_case": {"identifier": "testNormalMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNormalMatch() throws Exception {\n\t\tObject[][] inputs = {\n\t\t\t{\"a123cd\", \"a[0-9]+cd\", MatchPolicy.FULL, true},\n\t\t\t{\"\", \"\",  MatchPolicy.FULL, true}, \n\t\t\t{\"\", \"^$\",  MatchPolicy.FULL, true},\n\t\t\t{\"32abde23\", \"[a-z]+\",  MatchPolicy.FULL, false},\n\t\t\t{\"32abde23\", \"[a-z]+\", MatchPolicy.PARTIAL, true},\n\t\t\t{null, \".*\", MatchPolicy.PARTIAL, false},\n\t\t\t{null, \".*\",  MatchPolicy.FULL, false},\n\t\t\t{null, \"\", MatchPolicy.PARTIAL, false}\n\t\t};\n\t\t\n\t\tfor(Object[] input : inputs){\n\t\t\tString value = (String)input[0];\n\t\t\tString regex = (String)input[1];\n\t\t\tMatchPolicy policy = (MatchPolicy)input[2];\n\t\t\tboolean expected = (Boolean) input[3];\n\t\t\t\n\t\t\tRegexValuePredicate pred = new RegexValuePredicate(regex, policy);\n\t\t\n\t\t\tassertEquals(\n\t\t\t\tString.format(\"Given regex = %s, isPartial = %s, and input = %s\", regex, policy, value), \n\t\t\t\texpected, \n\t\t\t\tpred.apply(value));\n\t\t}\n\t\t\n\t}", "signature": "void testNormalMatch()", "full_signature": "@Test public void testNormalMatch()", "class_method_signature": "RegexValuePredicateTest.testNormalMatch()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "format", "apply"]}, "focal_class": {"identifier": "RegexValuePredicate", "superclass": "", "interfaces": "implements ValuePredicate<String>", "fields": [{"original_string": "private String regex;", "modifier": "private", "type": "String", "declarator": "regex", "var_name": "regex"}, {"original_string": "private Pattern pattern;", "modifier": "private", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private MatchPolicy policy;", "modifier": "private", "type": "MatchPolicy", "declarator": "policy", "var_name": "policy"}], "methods": [{"identifier": "RegexValuePredicate", "parameters": "(String regex, MatchPolicy policy)", "modifiers": "public", "return": "", "signature": " RegexValuePredicate(String regex, MatchPolicy policy)", "full_signature": "public  RegexValuePredicate(String regex, MatchPolicy policy)", "class_method_signature": "RegexValuePredicate.RegexValuePredicate(String regex, MatchPolicy policy)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(@Nullable String input)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean apply(@Nullable String input)", "full_signature": "@Override public boolean apply(@Nullable String input)", "class_method_signature": "RegexValuePredicate.apply(@Nullable String input)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPattern()", "full_signature": "public String getPattern()", "class_method_signature": "RegexValuePredicate.getPattern()", "testcase": false, "constructor": false}, {"identifier": "getMatchPolicy", "parameters": "()", "modifiers": "public", "return": "MatchPolicy", "signature": "MatchPolicy getMatchPolicy()", "full_signature": "public MatchPolicy getMatchPolicy()", "class_method_signature": "RegexValuePredicate.getMatchPolicy()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RegexValuePredicate.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RegexValuePredicate.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "RegexValuePredicate.equals(Object obj)", "testcase": false, "constructor": false}], "file": "netflix-infix/src/main/java/com/netflix/infix/RegexValuePredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(@Nullable String input)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean apply(@Nullable String input) {\n\t\tif(input == null){\n\t\t\treturn false;\n\t\t}\n\t\t\n\t    if(policy == MatchPolicy.PARTIAL){\n\t    \treturn pattern.matcher(input).find();\n\t    }\n\t    \n\t    if(policy == MatchPolicy.FULL){\n\t    \treturn pattern.matcher(input).matches();\n\t    }\n\t    \n\t    throw new UnsupportedOperationException(String.format(\"the match policy %s is not supported\", policy));\n    }", "signature": "boolean apply(@Nullable String input)", "full_signature": "@Override public boolean apply(@Nullable String input)", "class_method_signature": "RegexValuePredicate.apply(@Nullable String input)", "testcase": false, "constructor": false, "invocations": ["find", "matcher", "matches", "matcher", "format"]}, "repository": {"repo_id": 5012085, "url": "https://github.com/Netflix/netflix-commons", "language": "Java", "is_fork": false, "fork_count": 74, "stargazer_count": 145, "size": 404, "license": "licensed"}}