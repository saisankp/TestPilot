{"test_class": {"identifier": "CountActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private QueryExecutor queryExecutor;", "modifier": "private", "type": "QueryExecutor", "declarator": "queryExecutor", "var_name": "queryExecutor"}, {"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/CountActionTest.java"}, "test_case": {"identifier": "testCountDistinctWithFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCountDistinctWithFilter() throws QueryStoreException {\n        CountRequest countRequest = new CountRequest();\n        countRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        countRequest.setField(\"os\");\n        ArrayList<Filter> filters = new ArrayList<Filter>();\n        filters.add(new EqualsFilter(\"device\", \"nexus\"));\n        countRequest.setFilters(filters);\n        countRequest.setDistinct(true);\n        CountResponse countResponse = CountResponse.class.cast(queryExecutor.execute(countRequest));\n\n        assertNotNull(countResponse);\n        assertEquals(2, countResponse.getCount());\n    }", "signature": "void testCountDistinctWithFilter()", "full_signature": "@Test public void testCountDistinctWithFilter()", "class_method_signature": "CountActionTest.testCountDistinctWithFilter()", "testcase": true, "constructor": false, "invocations": ["setTable", "setField", "add", "setFilters", "setDistinct", "cast", "execute", "assertNotNull", "assertEquals", "getCount"]}, "focal_class": {"identifier": "CountAction", "superclass": "extends Action<CountRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CountAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CountAction.class)", "var_name": "logger"}], "methods": [{"identifier": "CountAction", "parameters": "(CountRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "modifiers": "public", "return": "", "signature": " CountAction(CountRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "full_signature": "public  CountAction(CountRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "class_method_signature": "CountAction.CountAction(CountRequest parameter,\n                       TableMetadataManager tableMetadataManager,\n                       DataStore dataStore,\n                       QueryStore queryStore,\n                       ElasticsearchConnection connection,\n                       String cacheToken)", "testcase": false, "constructor": true}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override protected String getRequestCacheKey()", "class_method_signature": "CountAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(CountRequest parameter)", "full_signature": "@Override public ActionResponse execute(CountRequest parameter)", "class_method_signature": "CountAction.execute(CountRequest parameter)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/CountAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(CountRequest parameter) throws QueryStoreException {\n        parameter.setTable(ElasticsearchUtils.getValidTableName(parameter.getTable()));\n        if (null == parameter.getFilters() || parameter.getFilters().isEmpty()) {\n            parameter.setFilters(Lists.<Filter>newArrayList(new AnyFilter(parameter.getTable())));\n        }\n\n        // Null field implies complete doc count\n        if (parameter.getField() != null) {\n            parameter.getFilters().add(new ExistsFilter(parameter.getField()));\n        }\n\n        try {\n            if (parameter.isDistinct()){\n                SearchRequestBuilder query = getConnection().getClient()\n                        .prepareSearch(ElasticsearchUtils.getIndices(parameter.getTable(), parameter))\n                        .setSearchType(SearchType.COUNT)\n                        .setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and)\n                                .genFilter(parameter.getFilters()))\n                        .addAggregation(AggregationBuilders\n                                .cardinality(Utils.sanitizeFieldForAggregation(parameter.getField()))\n                                .field(parameter.getField())\n                        );\n                SearchResponse response = query.execute().actionGet();\n                Aggregations aggregations = response.getAggregations();\n                Cardinality cardinality = aggregations.get(Utils.sanitizeFieldForAggregation(parameter.getField()));\n                if (cardinality == null){\n                    return new CountResponse(0);\n                } else {\n                    return new CountResponse(cardinality.getValue());\n                }\n            } else {\n                CountRequestBuilder countRequestBuilder = getConnection().getClient()\n                        .prepareCount(ElasticsearchUtils.getIndices(parameter.getTable(), parameter))\n                        .setQuery(new ElasticSearchQueryGenerator(FilterCombinerType.and).genFilter(parameter.getFilters()));\n                org.elasticsearch.action.count.CountResponse countResponse = countRequestBuilder.execute().actionGet();\n                return new CountResponse(countResponse.getCount());\n            }\n        } catch (Exception e) {\n            logger.error(\"Error running count: \", e);\n            throw new QueryStoreException(QueryStoreException.ErrorCode.QUERY_EXECUTION_ERROR,\n                    \"Error running count query.\", e);\n        }\n    }", "signature": "ActionResponse execute(CountRequest parameter)", "full_signature": "@Override public ActionResponse execute(CountRequest parameter)", "class_method_signature": "CountAction.execute(CountRequest parameter)", "testcase": false, "constructor": false, "invocations": ["setTable", "getValidTableName", "getTable", "getFilters", "isEmpty", "getFilters", "setFilters", "newArrayList", "getTable", "getField", "add", "getFilters", "getField", "isDistinct", "addAggregation", "setQuery", "setSearchType", "prepareSearch", "getClient", "getConnection", "getIndices", "getTable", "genFilter", "getFilters", "field", "cardinality", "sanitizeFieldForAggregation", "getField", "getField", "actionGet", "execute", "getAggregations", "get", "sanitizeFieldForAggregation", "getField", "getValue", "setQuery", "prepareCount", "getClient", "getConnection", "getIndices", "getTable", "genFilter", "getFilters", "actionGet", "execute", "getCount", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}