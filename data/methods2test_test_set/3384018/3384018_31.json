{"test_class": {"identifier": "TestResponseAuthCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HttpHost target;", "modifier": "private", "type": "HttpHost", "declarator": "target", "var_name": "target"}, {"original_string": "private HttpHost proxy;", "modifier": "private", "type": "HttpHost", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "private Credentials creds1;", "modifier": "private", "type": "Credentials", "declarator": "creds1", "var_name": "creds1"}, {"original_string": "private Credentials creds2;", "modifier": "private", "type": "Credentials", "declarator": "creds2", "var_name": "creds2"}, {"original_string": "private AuthScope authscope1;", "modifier": "private", "type": "AuthScope", "declarator": "authscope1", "var_name": "authscope1"}, {"original_string": "private AuthScope authscope2;", "modifier": "private", "type": "AuthScope", "declarator": "authscope2", "var_name": "authscope2"}, {"original_string": "private BasicScheme authscheme1;", "modifier": "private", "type": "BasicScheme", "declarator": "authscheme1", "var_name": "authscheme1"}, {"original_string": "private BasicScheme authscheme2;", "modifier": "private", "type": "BasicScheme", "declarator": "authscheme2", "var_name": "authscheme2"}, {"original_string": "private AuthState targetState;", "modifier": "private", "type": "AuthState", "declarator": "targetState", "var_name": "targetState"}, {"original_string": "private AuthState proxyState;", "modifier": "private", "type": "AuthState", "declarator": "proxyState", "var_name": "proxyState"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestResponseAuthCache.java"}, "test_case": {"identifier": "testAuthSchemeNotCompleted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAuthSchemeNotCompleted() throws Exception {\n        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, 200, \"OK\");\n\n        this.targetState.setAuthScheme(this.authscheme1);\n        this.targetState.setCredentials(this.creds1);\n        this.targetState.setAuthScope(this.authscope1);\n\n        this.proxyState.setAuthScheme(this.authscheme2);\n        this.proxyState.setCredentials(this.creds2);\n        this.proxyState.setAuthScope(this.authscope2);\n\n        HttpContext context = new BasicHttpContext();\n        context.setAttribute(ExecutionContext.HTTP_TARGET_HOST, this.target);\n        context.setAttribute(ExecutionContext.HTTP_PROXY_HOST, this.proxy);\n        context.setAttribute(ClientContext.TARGET_AUTH_STATE, this.targetState);\n        context.setAttribute(ClientContext.PROXY_AUTH_STATE, this.proxyState);\n\n        HttpResponseInterceptor interceptor = new ResponseAuthCache();\n        interceptor.process(response, context);\n\n        AuthCache authCache = (AuthCache) context.getAttribute(ClientContext.AUTH_CACHE);\n        Assert.assertNull(authCache);\n    }", "signature": "void testAuthSchemeNotCompleted()", "full_signature": "@Test public void testAuthSchemeNotCompleted()", "class_method_signature": "TestResponseAuthCache.testAuthSchemeNotCompleted()", "testcase": true, "constructor": false, "invocations": ["setAuthScheme", "setCredentials", "setAuthScope", "setAuthScheme", "setCredentials", "setAuthScope", "setAttribute", "setAttribute", "setAttribute", "setAttribute", "process", "getAttribute", "assertNull"]}, "focal_class": {"identifier": "ResponseAuthCache", "superclass": "", "interfaces": "implements HttpResponseInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}], "methods": [{"identifier": "ResponseAuthCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResponseAuthCache()", "full_signature": "public  ResponseAuthCache()", "class_method_signature": "ResponseAuthCache.ResponseAuthCache()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpResponse response, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpResponse response, final HttpContext context)", "full_signature": "public void process(final HttpResponse response, final HttpContext context)", "class_method_signature": "ResponseAuthCache.process(final HttpResponse response, final HttpContext context)", "testcase": false, "constructor": false}, {"identifier": "isCachable", "parameters": "(final AuthState authState)", "modifiers": "private", "return": "boolean", "signature": "boolean isCachable(final AuthState authState)", "full_signature": "private boolean isCachable(final AuthState authState)", "class_method_signature": "ResponseAuthCache.isCachable(final AuthState authState)", "testcase": false, "constructor": false}, {"identifier": "cache", "parameters": "(final AuthCache authCache, final HttpHost host, final AuthState authState)", "modifiers": "private", "return": "void", "signature": "void cache(final AuthCache authCache, final HttpHost host, final AuthState authState)", "full_signature": "private void cache(final AuthCache authCache, final HttpHost host, final AuthState authState)", "class_method_signature": "ResponseAuthCache.cache(final AuthCache authCache, final HttpHost host, final AuthState authState)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/ResponseAuthCache.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpResponse response, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpResponse response, final HttpContext context)\n            throws HttpException, IOException {\n        if (response == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n        if (context == null) {\n            throw new IllegalArgumentException(\"HTTP context may not be null\");\n        }\n        AuthCache authCache = (AuthCache) context.getAttribute(ClientContext.AUTH_CACHE);\n\n        HttpHost target = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);\n        AuthState targetState = (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);\n        if (target != null && targetState != null) {\n            if (isCachable(targetState)) {\n                if (authCache == null) {\n                    authCache = new BasicAuthCache();\n                    context.setAttribute(ClientContext.AUTH_CACHE, authCache);\n                }\n                cache(authCache, target, targetState);\n            }\n        }\n\n        HttpHost proxy = (HttpHost) context.getAttribute(ExecutionContext.HTTP_PROXY_HOST);\n        AuthState proxyState = (AuthState) context.getAttribute(ClientContext.PROXY_AUTH_STATE);\n        if (proxy != null && proxyState != null) {\n            if (isCachable(proxyState)) {\n                if (authCache == null) {\n                    authCache = new BasicAuthCache();\n                    context.setAttribute(ClientContext.AUTH_CACHE, authCache);\n                }\n                cache(authCache, proxy, proxyState);\n            }\n        }\n    }", "signature": "void process(final HttpResponse response, final HttpContext context)", "full_signature": "public void process(final HttpResponse response, final HttpContext context)", "class_method_signature": "ResponseAuthCache.process(final HttpResponse response, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getAttribute", "getAttribute", "isCachable", "setAttribute", "cache", "getAttribute", "getAttribute", "isCachable", "setAttribute", "cache"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}