{"test_class": {"identifier": "TestDatabaseFDFlowManager", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FDFlowManager flowManager;", "modifier": "@Autowired\n    private", "type": "FDFlowManager", "declarator": "flowManager", "var_name": "flowManager"}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/service/flow/TestDatabaseFDFlowManager.java"}, "test_case": {"identifier": "testAddFlowEventAndTryToChangeRootGroupId", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testAddFlowEventAndTryToChangeRootGroupId() {\n        final FDFlowEvent flowEvent = new FDFlowEvent();\n        flowEvent.setFlowIdentifier(\"2\");\n        flowEvent.setComponentId(\"proc-1\");\n        flowEvent.setEventType(FDFlowEventType.COMPONENT_ADDED);\n        flowEvent.setEventDescription(\"Added TailFile processor\");\n        flowEvent.setUserIdentity(\"test-user\");\n\n        final VersionedProcessGroup pg = new VersionedProcessGroup();\n        pg.setIdentifier(UUID.randomUUID().toString()); // SET A DIFFERENT ID HERE WHICH ISN'T ALLOWED\n        pg.setName(\"root\");\n\n        final NiFiUser user = new StandardNiFiUser.Builder().identity(\"system\").build();\n\n        flowManager.addFlowEvent(flowEvent, pg, user);\n    }", "signature": "void testAddFlowEventAndTryToChangeRootGroupId()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testAddFlowEventAndTryToChangeRootGroupId()", "class_method_signature": "TestDatabaseFDFlowManager.testAddFlowEventAndTryToChangeRootGroupId()", "testcase": true, "constructor": false, "invocations": ["setFlowIdentifier", "setComponentId", "setEventType", "setEventDescription", "setUserIdentity", "setIdentifier", "toString", "randomUUID", "setName", "build", "identity", "addFlowEvent"]}, "focal_class": {"identifier": "DatabaseFDFlowManager", "superclass": "extends BaseService", "interfaces": "implements FDFlowManager", "fields": [{"original_string": "static final String ROOT_PROCESS_GROUP_NAME = \"root\";", "modifier": "static final", "type": "String", "declarator": "ROOT_PROCESS_GROUP_NAME = \"root\"", "var_name": "ROOT_PROCESS_GROUP_NAME"}, {"original_string": "static final String UNPUBLISHED = \"UNPUBLISHED\";", "modifier": "static final", "type": "String", "declarator": "UNPUBLISHED = \"UNPUBLISHED\"", "var_name": "UNPUBLISHED"}, {"original_string": "public static final FDFlowFormat CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1;", "modifier": "public static final", "type": "FDFlowFormat", "declarator": "CURRENT_FLOW_FORMAT = FDFlowFormat.JACKSON_JSON_V1", "var_name": "CURRENT_FLOW_FORMAT"}, {"original_string": "private final FDFlowRepository flowRepository;", "modifier": "private final", "type": "FDFlowRepository", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private final FDFlowEventRepository flowEventRepository;", "modifier": "private final", "type": "FDFlowEventRepository", "declarator": "flowEventRepository", "var_name": "flowEventRepository"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "private Map<String,FDFlow> flowsById = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String,FDFlow>", "declarator": "flowsById = new ConcurrentHashMap<>()", "var_name": "flowsById"}], "methods": [{"identifier": "DatabaseFDFlowManager", "parameters": "(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "modifiers": "@Autowired public", "return": "", "signature": " DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "full_signature": "@Autowired public  DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "class_method_signature": "DatabaseFDFlowManager.DatabaseFDFlowManager(final FDFlowRepository flowRepository,\n                                 final FDFlowEventRepository flowEventRepository,\n                                 final OptionalModelMapper modelMapper,\n                                 final ObjectMapper objectMapper,\n                                 final Validator validator)", "testcase": false, "constructor": true}, {"identifier": "getFlowMetadata", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowMetadata>", "signature": "Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "full_signature": "@Override public Optional<FDFlowMetadata> getFlowMetadata(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowMetadata(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlow>", "signature": "Optional<FDFlow> getFlow(final String flowId)", "full_signature": "@Override public Optional<FDFlow> getFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "createFlow", "parameters": "(final String agentClass, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "full_signature": "@Override public FDFlowMetadata createFlow(final String agentClass, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.createFlow(final String agentClass, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "getAvailableFlows", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowMetadata>", "signature": "List<FDFlowMetadata> getAvailableFlows()", "full_signature": "@Override public List<FDFlowMetadata> getAvailableFlows()", "class_method_signature": "DatabaseFDFlowManager.getAvailableFlows()", "testcase": false, "constructor": false}, {"identifier": "getFlowSummaries", "parameters": "()", "modifiers": "@Override public", "return": "List<FDFlowSummary>", "signature": "List<FDFlowSummary> getFlowSummaries()", "full_signature": "@Override public List<FDFlowSummary> getFlowSummaries()", "class_method_signature": "DatabaseFDFlowManager.getFlowSummaries()", "testcase": false, "constructor": false}, {"identifier": "deleteFlow", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "FDFlowMetadata", "signature": "FDFlowMetadata deleteFlow(final String flowId)", "full_signature": "@Override public FDFlowMetadata deleteFlow(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlow(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "List<FDFlowEvent>", "signature": "List<FDFlowEvent> getFlowEvents(final String flowId)", "full_signature": "@Override public List<FDFlowEvent> getFlowEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestFlowEventEntity", "parameters": "(final String flowId)", "modifiers": "private", "return": "Optional<FDFlowEventEntity>", "signature": "Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "full_signature": "private Optional<FDFlowEventEntity> getLatestFlowEventEntity(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestFlowEventEntity(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getLatestPublishFlowEvent", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "full_signature": "@Override public Optional<FDFlowEvent> getLatestPublishFlowEvent(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.getLatestPublishFlowEvent(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "getFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "Optional<FDFlowEvent>", "signature": "Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "full_signature": "@Override public Optional<FDFlowEvent> getFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.getFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "addFlowEvent", "parameters": "(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "full_signature": "@Override public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "testcase": false, "constructor": false}, {"identifier": "deleteFlowEvent", "parameters": "(final String flowEventId)", "modifiers": "@Override public", "return": "FDFlowEvent", "signature": "FDFlowEvent deleteFlowEvent(final String flowEventId)", "full_signature": "@Override public FDFlowEvent deleteFlowEvent(final String flowEventId)", "class_method_signature": "DatabaseFDFlowManager.deleteFlowEvent(final String flowEventId)", "testcase": false, "constructor": false}, {"identifier": "retainPublishEvents", "parameters": "(final String flowId)", "modifiers": "@Override public", "return": "void", "signature": "void retainPublishEvents(final String flowId)", "full_signature": "@Override public void retainPublishEvents(final String flowId)", "class_method_signature": "DatabaseFDFlowManager.retainPublishEvents(final String flowId)", "testcase": false, "constructor": false}, {"identifier": "revertToFlowRevision", "parameters": "(final String flowId, final BigInteger flowRevision)", "modifiers": "@Override public", "return": "void", "signature": "void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "full_signature": "@Override public void revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "class_method_signature": "DatabaseFDFlowManager.revertToFlowRevision(final String flowId, final BigInteger flowRevision)", "testcase": false, "constructor": false}, {"identifier": "serializeFlowContent", "parameters": "(final VersionedProcessGroup flowContent)", "modifiers": "private", "return": "String", "signature": "String serializeFlowContent(final VersionedProcessGroup flowContent)", "full_signature": "private String serializeFlowContent(final VersionedProcessGroup flowContent)", "class_method_signature": "DatabaseFDFlowManager.serializeFlowContent(final VersionedProcessGroup flowContent)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String flowContent)", "modifiers": "private", "return": "VersionedProcessGroup", "signature": "VersionedProcessGroup deserialize(String flowContent)", "full_signature": "private VersionedProcessGroup deserialize(String flowContent)", "class_method_signature": "DatabaseFDFlowManager.deserialize(String flowContent)", "testcase": false, "constructor": false}, {"identifier": "createVersionInfo", "parameters": "(final FDFlowEventEntity flowEvent)", "modifiers": "private", "return": "FDVersionInfo", "signature": "FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "full_signature": "private FDVersionInfo createVersionInfo(final FDFlowEventEntity flowEvent)", "class_method_signature": "DatabaseFDFlowManager.createVersionInfo(final FDFlowEventEntity flowEvent)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/service/flow/DatabaseFDFlowManager.java"}, "focal_method": {"identifier": "addFlowEvent", "parameters": "(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "modifiers": "@Override public", "return": "FDFlowEvent", "body": "@Override\n    public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user) {\n        if (flowEvent == null) {\n            throw new IllegalArgumentException(\"Flow event cannot be null or blank\");\n        }\n\n        if (StringUtils.isBlank(flowEvent.getFlowIdentifier())) {\n            throw new IllegalArgumentException(\"Flow identifier of flow event cannot be null or blank\");\n        }\n\n        if (flowContent == null) {\n            throw new IllegalArgumentException(\"Flow content cannot be null or blank\");\n        }\n\n        if (StringUtils.isBlank(flowContent.getIdentifier()) || StringUtils.isBlank(flowContent.getName())) {\n            throw new IllegalArgumentException(\"Flow content must contain a root process group with an identifier and name\");\n        }\n\n        if (user == null || StringUtils.isBlank(user.getIdentity())) {\n            throw new IllegalArgumentException(\"A user identity must be provided\");\n        }\n\n        final Optional<FDFlowEntity> flowEntity = flowRepository.findById(flowEvent.getFlowIdentifier());\n        if (!flowEntity.isPresent()) {\n            throw new ResourceNotFoundException(\"No flow exists with the provided flow id\");\n        }\n\n        final String previousRootGroupId = flowEntity.get().getRootProcessGroupId();\n        final String incomingRootGroupId = flowContent.getIdentifier();\n        if (!previousRootGroupId.equals(incomingRootGroupId)) {\n            throw new IllegalArgumentException(\"Cannot change the id of the root process group\");\n        }\n\n        final Optional<FDFlowEventEntity> latestFlowEvent = flowEventRepository.findFirstByFlowOrderByFlowRevisionDesc(flowEntity.get());\n        if (!latestFlowEvent.isPresent()) {\n            throw new IllegalStateException(\"Could not find any flow content for the given flow\");\n        }\n\n        final BigInteger currRevision = latestFlowEvent.get().getFlowRevision();\n        final BigInteger nextRevision = currRevision.add(BigInteger.ONE);\n\n        flowEvent.setIdentifier(UUID.randomUUID().toString());\n        flowEvent.setCreated(System.currentTimeMillis());\n        flowEvent.setUpdated(System.currentTimeMillis());\n        flowEvent.setFlowRevision(nextRevision);\n        flowEvent.setFlowFormat(CURRENT_FLOW_FORMAT);\n        flowEvent.setUserIdentity(user.getIdentity());\n\n        // if not a publish event then carry forward the registry info from the previous event, otherwise use whatever was specified\n        if (flowEvent.getEventType() != FDFlowEventType.FLOW_PUBLISHED) {\n            flowEvent.setRegistryUrl(latestFlowEvent.get().getRegistryUrl());\n            flowEvent.setRegistryBucketId(latestFlowEvent.get().getRegistryBucketId());\n            flowEvent.setRegistryFlowId(latestFlowEvent.get().getRegistryFlowId());\n            flowEvent.setRegistryVersion(latestFlowEvent.get().getRegistryVersion());\n\n            final Date lastPublished = latestFlowEvent.get().getLastPublished();\n            flowEvent.setLastPublished(lastPublished == null ? null : lastPublished.getTime());\n            flowEvent.setLastPublishedUserIdentity(latestFlowEvent.get().getLastPublishedUserIdentity());\n        }\n\n        if (flowEvent.getEventType() == FDFlowEventType.FLOW_PUBLISHED && flowEvent.getLastPublished() == null) {\n            throw new IllegalArgumentException(\"Publish event must contain a published date\");\n        }\n\n        validate(flowEvent, \"Cannot add flow event due to invalid event\");\n\n        final FDFlowEventEntity flowEventEntity = modelMapper.map(flowEvent, FDFlowEventEntity.class);\n        flowEventEntity.setFlowContent(serializeFlowContent(flowContent));\n        flowEventEntity.setFlow(flowEntity.get());\n\n        final FDFlowEventEntity savedFlowEventEntity = flowEventRepository.save(flowEventEntity);\n\n        // Update the cached flow with the latest version info\n        final String flowId = flowEntity.get().getId();\n        if (flowsById.containsKey(flowId)) {\n            final FDVersionInfo versionInfo = createVersionInfo(savedFlowEventEntity);\n            final FDFlow cachedFlow = flowsById.get(flowId);\n            cachedFlow.setVersionInfo(versionInfo);\n            cachedFlow.setLocalFlowRevision(savedFlowEventEntity.getFlowRevision());\n        }\n\n        return modelMapper.map(savedFlowEventEntity, FDFlowEvent.class);\n    }", "signature": "FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "full_signature": "@Override public FDFlowEvent addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "class_method_signature": "DatabaseFDFlowManager.addFlowEvent(final FDFlowEvent flowEvent, final VersionedProcessGroup flowContent, final NiFiUser user)", "testcase": false, "constructor": false, "invocations": ["isBlank", "getFlowIdentifier", "isBlank", "getIdentifier", "isBlank", "getName", "isBlank", "getIdentity", "findById", "getFlowIdentifier", "isPresent", "getRootProcessGroupId", "get", "getIdentifier", "equals", "findFirstByFlowOrderByFlowRevisionDesc", "get", "isPresent", "getFlowRevision", "get", "add", "setIdentifier", "toString", "randomUUID", "setCreated", "currentTimeMillis", "setUpdated", "currentTimeMillis", "setFlowRevision", "setFlowFormat", "setUserIdentity", "getIdentity", "getEventType", "setRegistryUrl", "getRegistryUrl", "get", "setRegistryBucketId", "getRegistryBucketId", "get", "setRegistryFlowId", "getRegistryFlowId", "get", "setRegistryVersion", "getRegistryVersion", "get", "getLastPublished", "get", "setLastPublished", "getTime", "setLastPublishedUserIdentity", "getLastPublishedUserIdentity", "get", "getEventType", "getLastPublished", "validate", "map", "setFlowContent", "serializeFlowContent", "setFlow", "get", "save", "getId", "get", "containsKey", "createVersionInfo", "get", "setVersionInfo", "setLocalFlowRevision", "getFlowRevision", "map"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}