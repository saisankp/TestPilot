{"test_class": {"identifier": "LocalDatasetBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/local/LocalDatasetBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuild() {\n        Map<Integer, Integer> data = new HashMap<>();\n        for (int i = 0; i < 100; i++)\n            data.put(i, i);\n\n        LocalDatasetBuilder<Integer, Integer> builder = new LocalDatasetBuilder<>(data, 10);\n\n        LocalDataset<Serializable, TestPartitionData> dataset = buildDataset(builder);\n\n        assertEquals(10, dataset.getCtx().size());\n        assertEquals(10, dataset.getData().size());\n\n        AtomicLong cnt = new AtomicLong();\n\n        dataset.compute((partData, env) -> {\n           cnt.incrementAndGet();\n\n           int[] arr = partData.data;\n\n           assertEquals(10, arr.length);\n\n           for (int i = 0; i < 10; i++)\n               assertEquals(env.partition() * 10 + i, arr[i]);\n        });\n\n        assertEquals(10, cnt.intValue());\n    }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "LocalDatasetBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["put", "buildDataset", "assertEquals", "size", "getCtx", "assertEquals", "size", "getData", "compute", "incrementAndGet", "assertEquals", "assertEquals", "partition", "assertEquals", "intValue"]}, "focal_class": {"identifier": "LocalDatasetBuilder", "superclass": "", "interfaces": "implements DatasetBuilder<K, V>", "fields": [{"original_string": "private final Map<K, V> upstreamMap;", "modifier": "private final", "type": "Map<K, V>", "declarator": "upstreamMap", "var_name": "upstreamMap"}, {"original_string": "private final int partitions;", "modifier": "private final", "type": "int", "declarator": "partitions", "var_name": "partitions"}, {"original_string": "private final IgniteBiPredicate<K, V> filter;", "modifier": "private final", "type": "IgniteBiPredicate<K, V>", "declarator": "filter", "var_name": "filter"}, {"original_string": "private final UpstreamTransformerBuilder upstreamTransformerBuilder;", "modifier": "private final", "type": "UpstreamTransformerBuilder", "declarator": "upstreamTransformerBuilder", "var_name": "upstreamTransformerBuilder"}], "methods": [{"identifier": "LocalDatasetBuilder", "parameters": "(Map<K, V> upstreamMap, int partitions)", "modifiers": "public", "return": "", "signature": " LocalDatasetBuilder(Map<K, V> upstreamMap, int partitions)", "full_signature": "public  LocalDatasetBuilder(Map<K, V> upstreamMap, int partitions)", "class_method_signature": "LocalDatasetBuilder.LocalDatasetBuilder(Map<K, V> upstreamMap, int partitions)", "testcase": false, "constructor": true}, {"identifier": "LocalDatasetBuilder", "parameters": "(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions,\n        UpstreamTransformerBuilder upstreamTransformerBuilder)", "modifiers": "public", "return": "", "signature": " LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions,\n        UpstreamTransformerBuilder upstreamTransformerBuilder)", "full_signature": "public  LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions,\n        UpstreamTransformerBuilder upstreamTransformerBuilder)", "class_method_signature": "LocalDatasetBuilder.LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions,\n        UpstreamTransformerBuilder upstreamTransformerBuilder)", "testcase": false, "constructor": true}, {"identifier": "LocalDatasetBuilder", "parameters": "(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions)", "modifiers": "public", "return": "", "signature": " LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions)", "full_signature": "public  LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions)", "class_method_signature": "LocalDatasetBuilder.LocalDatasetBuilder(Map<K, V> upstreamMap,\n        IgniteBiPredicate<K, V> filter,\n        int partitions)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "modifiers": "@Override public", "return": "LocalDataset<C, D>", "signature": "LocalDataset<C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "full_signature": "@Override public LocalDataset<C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "class_method_signature": "LocalDatasetBuilder.build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "testcase": false, "constructor": false}, {"identifier": "withUpstreamTransformer", "parameters": "(UpstreamTransformerBuilder builder)", "modifiers": "@Override public", "return": "DatasetBuilder<K, V>", "signature": "DatasetBuilder<K, V> withUpstreamTransformer(UpstreamTransformerBuilder builder)", "full_signature": "@Override public DatasetBuilder<K, V> withUpstreamTransformer(UpstreamTransformerBuilder builder)", "class_method_signature": "LocalDatasetBuilder.withUpstreamTransformer(UpstreamTransformerBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "withFilter", "parameters": "(IgniteBiPredicate<K, V> filterToAdd)", "modifiers": "@Override public", "return": "DatasetBuilder<K, V>", "signature": "DatasetBuilder<K, V> withFilter(IgniteBiPredicate<K, V> filterToAdd)", "full_signature": "@Override public DatasetBuilder<K, V> withFilter(IgniteBiPredicate<K, V> filterToAdd)", "class_method_signature": "LocalDatasetBuilder.withFilter(IgniteBiPredicate<K, V> filterToAdd)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/local/LocalDatasetBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "modifiers": "@Override public", "return": "LocalDataset<C, D>", "body": "@Override public <C extends Serializable, D extends AutoCloseable> LocalDataset<C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment) {\n\n        List<C> ctxList = new ArrayList<>();\n        List<D> dataList = new ArrayList<>();\n\n        List<UpstreamEntry<K, V>> entriesList = new ArrayList<>();\n\n        upstreamMap\n            .entrySet()\n            .stream()\n            .filter(en -> filter.apply(en.getKey(), en.getValue()))\n            .map(en -> new UpstreamEntry<>(en.getKey(), en.getValue()))\n            .forEach(entriesList::add);\n\n        int partSize = Math.max(1, entriesList.size() / partitions);\n\n        Iterator<UpstreamEntry<K, V>> firstKeysIter = entriesList.iterator();\n        Iterator<UpstreamEntry<K, V>> secondKeysIter = entriesList.iterator();\n        Iterator<UpstreamEntry<K, V>> thirdKeysIter = entriesList.iterator();\n\n        int ptr = 0;\n\n        List<LearningEnvironment> envs = IntStream.range(0, partitions).boxed().map(envBuilder::buildForWorker)\n            .collect(Collectors.toList());\n\n        for (int part = 0; part < partitions; part++) {\n            int cntBeforeTransform =\n                part == partitions - 1 ? entriesList.size() - ptr : Math.min(partSize, entriesList.size() - ptr);\n            LearningEnvironment env = envs.get(part);\n            UpstreamTransformer transformer1 = upstreamTransformerBuilder.build(env);\n            UpstreamTransformer transformer2 = Utils.copy(transformer1);\n            UpstreamTransformer transformer3 = Utils.copy(transformer1);\n\n            int cnt = (int)transformer1.transform(Utils.asStream(new IteratorWindow<>(thirdKeysIter, k -> k, cntBeforeTransform))).count();\n\n            Iterator<UpstreamEntry> iter =\n                transformer2.transform(Utils.asStream(new IteratorWindow<>(firstKeysIter, k -> k, cntBeforeTransform)).map(x -> (UpstreamEntry)x)).iterator();\n            Iterator<UpstreamEntry<K, V>> convertedBack = Utils.asStream(iter).map(x -> (UpstreamEntry<K, V>)x).iterator();\n\n            C ctx = cntBeforeTransform > 0 ? partCtxBuilder.build(env, convertedBack, cnt) : null;\n\n            Iterator<UpstreamEntry> iter1 = transformer3.transform(\n                    Utils.asStream(new IteratorWindow<>(secondKeysIter, k -> k, cntBeforeTransform))).iterator();\n\n            Iterator<UpstreamEntry<K, V>> convertedBack1 = Utils.asStream(iter1).map(x -> (UpstreamEntry<K, V>)x).iterator();\n\n            D data = cntBeforeTransform > 0 ? partDataBuilder.build(\n                env,\n                convertedBack1,\n                cnt,\n                ctx\n            ) : null;\n\n            ctxList.add(ctx);\n            dataList.add(data);\n\n            ptr += cntBeforeTransform;\n        }\n\n        return new LocalDataset<>(envs, ctxList, dataList);\n    }", "signature": "LocalDataset<C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "full_signature": "@Override public LocalDataset<C, D> build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "class_method_signature": "LocalDatasetBuilder.build(\n        LearningEnvironmentBuilder envBuilder,\n        PartitionContextBuilder<K, V, C> partCtxBuilder, PartitionDataBuilder<K, V, C, D> partDataBuilder,\n        LearningEnvironment learningEnvironment)", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "filter", "stream", "entrySet", "apply", "getKey", "getValue", "getKey", "getValue", "max", "size", "iterator", "iterator", "iterator", "collect", "map", "boxed", "range", "toList", "size", "min", "size", "get", "build", "copy", "copy", "count", "transform", "asStream", "iterator", "transform", "map", "asStream", "iterator", "map", "asStream", "build", "iterator", "transform", "asStream", "iterator", "map", "asStream", "build", "add", "add"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}