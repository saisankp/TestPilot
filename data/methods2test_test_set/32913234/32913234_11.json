{"test_class": {"identifier": "IssuesTemplateTest", "superclass": "extends AbstractTemplateTest", "interfaces": "", "fields": [{"original_string": "protected IssuesTemplate issuesTemplate;", "modifier": "protected", "type": "IssuesTemplate", "declarator": "issuesTemplate", "var_name": "issuesTemplate"}], "file": "misc/github-client-parent/github-client-spring/src/test/java/org/zalando/github/spring/IssuesTemplateTest.java"}, "test_case": {"identifier": "createIssue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createIssue() throws Exception {\n\t\tmockServer.expect(requestTo(\"https://api.github.com/repos/klaus/simple/issues\"))\n\t\t\t\t.andExpect(method(HttpMethod.POST)).andExpect(content().contentType(MediaType.APPLICATION_JSON))\n\t\t\t\t// .andExpect(header(\"Authorization\", \"Bearer ACCESS_TOKEN\"))\n\t\t\t\t.andRespond(\n\t\t\t\t\t\twithSuccess(new ClassPathResource(\"createIssue.json\", getClass()), MediaType.APPLICATION_JSON));\n\n\t\tIssue issue = issuesTemplate.createIssue(new IssueRequest(\"issueTitle\"), \"klaus\", \"simple\");\n\n\t\tAssertions.assertThat(issue).isNotNull();\n\t\tAssertions.assertThat(issue.getId()).isEqualTo(1);\n\t}", "signature": "void createIssue()", "full_signature": "@Test public void createIssue()", "class_method_signature": "IssuesTemplateTest.createIssue()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "andExpect", "expect", "requestTo", "method", "contentType", "content", "withSuccess", "getClass", "createIssue", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getId"]}, "focal_class": {"identifier": "IssuesTemplate", "superclass": "extends AbstractGithubTemplate", "interfaces": "implements IssuesOperations", "fields": [{"original_string": "private final ParameterizedTypeReference<List<Issue>> issueListTypeRef = new ParameterizedTypeReference<List<Issue>>() {\n\t};", "modifier": "private final", "type": "ParameterizedTypeReference<List<Issue>>", "declarator": "issueListTypeRef = new ParameterizedTypeReference<List<Issue>>() {\n\t}", "var_name": "issueListTypeRef"}], "methods": [{"identifier": "IssuesTemplate", "parameters": "(RestOperations restOperations)", "modifiers": "public", "return": "", "signature": " IssuesTemplate(RestOperations restOperations)", "full_signature": "public  IssuesTemplate(RestOperations restOperations)", "class_method_signature": "IssuesTemplate.IssuesTemplate(RestOperations restOperations)", "testcase": false, "constructor": true}, {"identifier": "IssuesTemplate", "parameters": "(RestOperations restOperations, GithubApiUriUtil githubApiUriUtil)", "modifiers": "public", "return": "", "signature": " IssuesTemplate(RestOperations restOperations, GithubApiUriUtil githubApiUriUtil)", "full_signature": "public  IssuesTemplate(RestOperations restOperations, GithubApiUriUtil githubApiUriUtil)", "class_method_signature": "IssuesTemplate.IssuesTemplate(RestOperations restOperations, GithubApiUriUtil githubApiUriUtil)", "testcase": false, "constructor": true}, {"identifier": "listAllIssues", "parameters": "()", "modifiers": "@Override public", "return": "List<Issue>", "signature": "List<Issue> listAllIssues()", "full_signature": "@Override public List<Issue> listAllIssues()", "class_method_signature": "IssuesTemplate.listAllIssues()", "testcase": false, "constructor": false}, {"identifier": "listUserIssues", "parameters": "()", "modifiers": "@Override public", "return": "List<Issue>", "signature": "List<Issue> listUserIssues()", "full_signature": "@Override public List<Issue> listUserIssues()", "class_method_signature": "IssuesTemplate.listUserIssues()", "testcase": false, "constructor": false}, {"identifier": "listOrganizationIssues", "parameters": "(String organization)", "modifiers": "@Override public", "return": "List<Issue>", "signature": "List<Issue> listOrganizationIssues(String organization)", "full_signature": "@Override public List<Issue> listOrganizationIssues(String organization)", "class_method_signature": "IssuesTemplate.listOrganizationIssues(String organization)", "testcase": false, "constructor": false}, {"identifier": "createIssue", "parameters": "(IssueRequest issueRequest, String owner, String repo)", "modifiers": "@Override public", "return": "Issue", "signature": "Issue createIssue(IssueRequest issueRequest, String owner, String repo)", "full_signature": "@Override public Issue createIssue(IssueRequest issueRequest, String owner, String repo)", "class_method_signature": "IssuesTemplate.createIssue(IssueRequest issueRequest, String owner, String repo)", "testcase": false, "constructor": false}], "file": "misc/github-client-parent/github-client-spring/src/main/java/org/zalando/github/spring/IssuesTemplate.java"}, "focal_method": {"identifier": "createIssue", "parameters": "(IssueRequest issueRequest, String owner, String repo)", "modifiers": "@Override public", "return": "Issue", "body": "@Override\n\tpublic Issue createIssue(IssueRequest issueRequest, String owner, String repo) {\n\t\tMap<String, Object> uriVariables = new HashMap<>();\n\t\turiVariables.put(\"owner\", owner);\n\t\turiVariables.put(\"repo\", repo);\n\n\t\tURI uri = new UriTemplate(buildUriString(\"/repos/{owner}/{repo}/issues\")).expand(uriVariables);\n\t\tRequestEntity<IssueRequest> entity = RequestEntity.post(uri).contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.body(issueRequest);\n\n\t\tResponseEntity<Issue> responseEntity = getRestOperations().exchange(entity, Issue.class);\n\t\treturn responseEntity.getBody();\n\t}", "signature": "Issue createIssue(IssueRequest issueRequest, String owner, String repo)", "full_signature": "@Override public Issue createIssue(IssueRequest issueRequest, String owner, String repo)", "class_method_signature": "IssuesTemplate.createIssue(IssueRequest issueRequest, String owner, String repo)", "testcase": false, "constructor": false, "invocations": ["put", "put", "expand", "buildUriString", "body", "contentType", "post", "exchange", "getRestOperations", "getBody"]}, "repository": {"repo_id": 32913234, "url": "https://github.com/zalando-stups/booties", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 35, "size": 330, "license": "licensed"}}