{"test_class": {"identifier": "IgIndexResponseParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_MARKET_SEARCH_TERM_RESPONSE = \"marketsSearchTermResponse.json\";", "modifier": "private static final", "type": "String", "declarator": "FILE_MARKET_SEARCH_TERM_RESPONSE = \"marketsSearchTermResponse.json\"", "var_name": "FILE_MARKET_SEARCH_TERM_RESPONSE"}, {"original_string": "private static final String FILE_MARKET_EPIC_RESPONSE = \"marketsEpicResponse.json\";", "modifier": "private static final", "type": "String", "declarator": "FILE_MARKET_EPIC_RESPONSE = \"marketsEpicResponse.json\"", "var_name": "FILE_MARKET_EPIC_RESPONSE"}], "file": "onplan-connectors/onplan-connector-igindex/src/test/java/com/onplan/connector/igindex/client/IgIndexResponseParserTest.java"}, "test_case": {"identifier": "testCreateInstrumentInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateInstrumentInfo() throws IOException {\n    InputStream fileMarketEpicResponse =\n        ClassLoader.getSystemResourceAsStream(FILE_MARKET_EPIC_RESPONSE);\n    InstrumentInfo instrumentInfo =\n        IgIndexResponseParser.createInstrumentInfo(IOUtils.toString(fileMarketEpicResponse));\n    fileMarketEpicResponse.close();\n    assertInstrumentInfo(instrumentInfo);\n  }", "signature": "void testCreateInstrumentInfo()", "full_signature": "@Test public void testCreateInstrumentInfo()", "class_method_signature": "IgIndexResponseParserTest.testCreateInstrumentInfo()", "testcase": true, "constructor": false, "invocations": ["getSystemResourceAsStream", "createInstrumentInfo", "toString", "close", "assertInstrumentInfo"]}, "focal_class": {"identifier": "IgIndexResponseParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createConnectionCredentials", "parameters": "(\n      String apiKey, HttpClientResponse httpClientResponse)", "modifiers": "public static", "return": "IgIndexConnectionCredentials", "signature": "IgIndexConnectionCredentials createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "full_signature": "public static IgIndexConnectionCredentials createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "class_method_signature": "IgIndexResponseParser.createConnectionCredentials(\n      String apiKey, HttpClientResponse httpClientResponse)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfoList", "parameters": "(String json)", "modifiers": "public static", "return": "List<InstrumentInfo>", "signature": "List<InstrumentInfo> createInstrumentInfoList(String json)", "full_signature": "public static List<InstrumentInfo> createInstrumentInfoList(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfoList(String json)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfo", "parameters": "(String json)", "modifiers": "public static", "return": "InstrumentInfo", "signature": "InstrumentInfo createInstrumentInfo(String json)", "full_signature": "public static InstrumentInfo createInstrumentInfo(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfo(String json)", "testcase": false, "constructor": false}, {"identifier": "createInstrumentInfoForList", "parameters": "(JsonNode jsonNode)", "modifiers": "private static", "return": "InstrumentInfo", "signature": "InstrumentInfo createInstrumentInfoForList(JsonNode jsonNode)", "full_signature": "private static InstrumentInfo createInstrumentInfoForList(JsonNode jsonNode)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfoForList(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "getHeaderValue", "parameters": "(HttpClientResponse httpClientResponse, String key)", "modifiers": "private static", "return": "String", "signature": "String getHeaderValue(HttpClientResponse httpClientResponse, String key)", "full_signature": "private static String getHeaderValue(HttpClientResponse httpClientResponse, String key)", "class_method_signature": "IgIndexResponseParser.getHeaderValue(HttpClientResponse httpClientResponse, String key)", "testcase": false, "constructor": false}, {"identifier": "getBodyPropertyValue", "parameters": "(HttpClientResponse httpClientResponse, String key)", "modifiers": "private static", "return": "String", "signature": "String getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "full_signature": "private static String getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "class_method_signature": "IgIndexResponseParser.getBodyPropertyValue(HttpClientResponse httpClientResponse, String key)", "testcase": false, "constructor": false}], "file": "onplan-connectors/onplan-connector-igindex/src/main/java/com/onplan/connector/igindex/client/IgIndexResponseParser.java"}, "focal_method": {"identifier": "createInstrumentInfo", "parameters": "(String json)", "modifiers": "public static", "return": "InstrumentInfo", "body": "public static InstrumentInfo createInstrumentInfo(String json) throws IOException {\n    checkNotNull(json);\n    JsonNode jsonNode = checkNotNull((new ObjectMapper()).readTree(json));\n\n    JsonNode instrumentNode = checkNotNull(jsonNode.get(TAG_INSTRUMENT));\n    String instrumentId = getInstrumentIdByEpic(instrumentNode.get(TAG_EPIC).asText());\n    String instrumentName = instrumentNode.get(TAG_NAME).asText();\n    InstrumentType instrumentType = getInstrumentTypeByText(instrumentNode.get(TAG_TYPE).asText());\n    String expiry = checkNotNullOrEmpty(instrumentNode.get(TAG_EXPIRY).asText());\n\n    JsonNode snapshotNode = checkNotNull(jsonNode.get(TAG_SNAPSHOT));\n    int scalingFactor = snapshotNode.get(TAG_SCALING_FACTOR).asInt();\n\n    return new InstrumentInfo(instrumentId, instrumentName, instrumentType, scalingFactor, expiry);\n  }", "signature": "InstrumentInfo createInstrumentInfo(String json)", "full_signature": "public static InstrumentInfo createInstrumentInfo(String json)", "class_method_signature": "IgIndexResponseParser.createInstrumentInfo(String json)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "readTree", "checkNotNull", "get", "getInstrumentIdByEpic", "asText", "get", "asText", "get", "getInstrumentTypeByText", "asText", "get", "checkNotNullOrEmpty", "asText", "get", "checkNotNull", "get", "asInt", "get"]}, "repository": {"repo_id": 29186921, "url": "https://github.com/melphi/onplan", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 732, "license": "licensed"}}