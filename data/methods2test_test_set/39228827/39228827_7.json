{"test_class": {"identifier": "CulpritFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mockery mockery;", "modifier": "private", "type": "Mockery", "declarator": "mockery", "var_name": "mockery"}, {"original_string": "private SFinishedBuild thisBuild;", "modifier": "private", "type": "SFinishedBuild", "declarator": "thisBuild", "var_name": "thisBuild"}, {"original_string": "private SFinishedBuild previousBuild;", "modifier": "private", "type": "SFinishedBuild", "declarator": "previousBuild", "var_name": "previousBuild"}, {"original_string": "private BuildCustomizerFactory buildCustomizerFactory;", "modifier": "private", "type": "BuildCustomizerFactory", "declarator": "buildCustomizerFactory", "var_name": "buildCustomizerFactory"}, {"original_string": "private BuildQueue buildQueue;", "modifier": "private", "type": "BuildQueue", "declarator": "buildQueue", "var_name": "buildQueue"}], "file": "sin-city-server/src/test/java/sferencik/teamcity/sincity/CulpritFinderTest.java"}, "test_case": {"identifier": "testGetRelevantBuildProblems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRelevantBuildProblems() {\n        /*\n            Test that an artifact-dependency-error is removed from the set of build problems.\n\n            thisBuild has three problems:\n            1) an artifact dependency problem\n            2) an exit code 1\n            3) a snapshot dependency problem\n\n            previousBuild has three problems:\n            1) an artifact dependency problem (different than above, as TeamCity puts instance-specific info into these)\n            2) an exit code 1 (same as above)\n            3) a time-out\n\n            The difference between these two tests is the snapshot dependency problem (only).\n         */\n\n        //arrange\n        mockery.checking(new Expectations() {{\n            oneOf(thisBuild).getFailureReasons(); will(returnValue(Arrays.asList(\n                    BuildProblemData.createBuildProblem(\"909103612\", ErrorData.ARTIFACT_DEPENDENCY_ERROR_TYPE, \"Failed to resolve artifacts from <Sam :: SinCity Build, build #61 [id 21768]>\"),\n                    BuildProblemData.createBuildProblem(\"simpleRunner1\", BuildProblemTypes.TC_EXIT_CODE_TYPE, \"Process exited with code 1\"),\n                    BuildProblemData.createBuildProblem(\"bt251\", ErrorData.SNAPSHOT_DEPENDENCY_ERROR_BUILD_PROCEEDS_TYPE, \"Snapshot dependency \\\"... Dependency\\\" failed\")\n            )));\n            oneOf(previousBuild).getFailureReasons(); will(returnValue(Arrays.asList(\n                    BuildProblemData.createBuildProblem(\"simpleRunner1\", BuildProblemTypes.TC_EXIT_CODE_TYPE, \"Process exited with code 1\"),\n                    BuildProblemData.createBuildProblem(\"-639166500\", ErrorData.ARTIFACT_DEPENDENCY_ERROR_TYPE, \"Failed to resolve artifacts from <Sam :: SinCity Build, build #58 [id 21760]>\"),\n                    BuildProblemData.createBuildProblem(\"TC_EXECUTION_TIMEOUT\", BuildProblemTypes.TC_EXECUTION_TIMEOUT_TYPE, \"Execution timeout\")\n            )));\n        }});\n\n        SettingNames settingNames = new SettingNames();\n        CulpritFinder culpritFinder = new CulpritFinder(thisBuild, previousBuild, settingNames.getTriggerOnNew(), settingNames.getNoTrigger(), buildCustomizerFactory, buildQueue, false, \"\");\n\n        // act\n        List<BuildProblemData> relevantBuildProblems = culpritFinder.getRelevantBuildProblems();\n\n        // assert\n        assertThat(relevantBuildProblems.size(), is(1));\n        assertThat(relevantBuildProblems.get(0).getIdentity(), is(\"bt251\"));\n        assertThat(relevantBuildProblems.get(0).getType(), is(ErrorData.SNAPSHOT_DEPENDENCY_ERROR_BUILD_PROCEEDS_TYPE));\n        assertThat(relevantBuildProblems.get(0).getDescription(), is(\"Snapshot dependency \\\"... Dependency\\\" failed\"));\n    }", "signature": "void testGetRelevantBuildProblems()", "full_signature": "@Test public void testGetRelevantBuildProblems()", "class_method_signature": "CulpritFinderTest.testGetRelevantBuildProblems()", "testcase": true, "constructor": false, "invocations": ["checking", "getFailureReasons", "oneOf", "will", "returnValue", "asList", "createBuildProblem", "createBuildProblem", "createBuildProblem", "getFailureReasons", "oneOf", "will", "returnValue", "asList", "createBuildProblem", "createBuildProblem", "createBuildProblem", "getTriggerOnNew", "getNoTrigger", "getRelevantBuildProblems", "assertThat", "size", "is", "assertThat", "getIdentity", "get", "is", "assertThat", "getType", "get", "is", "assertThat", "getDescription", "get", "is"]}, "focal_class": {"identifier": "CulpritFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NotNull private final SBuild newBuild;", "modifier": "@NotNull private final", "type": "SBuild", "declarator": "newBuild", "var_name": "newBuild"}, {"original_string": "@Nullable private final SFinishedBuild oldBuild;", "modifier": "@Nullable private final", "type": "SFinishedBuild", "declarator": "oldBuild", "var_name": "oldBuild"}, {"original_string": "@NotNull private final String triggerOnBuildProblem;", "modifier": "@NotNull private final", "type": "String", "declarator": "triggerOnBuildProblem", "var_name": "triggerOnBuildProblem"}, {"original_string": "@NotNull private final String triggerOnTestFailure;", "modifier": "@NotNull private final", "type": "String", "declarator": "triggerOnTestFailure", "var_name": "triggerOnTestFailure"}, {"original_string": "@NotNull private final BuildQueue buildQueue;", "modifier": "@NotNull private final", "type": "BuildQueue", "declarator": "buildQueue", "var_name": "buildQueue"}, {"original_string": "private final boolean putBuildsToQueueTop;", "modifier": "private final", "type": "boolean", "declarator": "putBuildsToQueueTop", "var_name": "putBuildsToQueueTop"}, {"original_string": "@NotNull private String triggeredBy;", "modifier": "@NotNull private", "type": "String", "declarator": "triggeredBy", "var_name": "triggeredBy"}, {"original_string": "@NotNull private final BuildCustomizerFactory buildCustomizerFactory;", "modifier": "@NotNull private final", "type": "BuildCustomizerFactory", "declarator": "buildCustomizerFactory", "var_name": "buildCustomizerFactory"}], "methods": [{"identifier": "CulpritFinder", "parameters": "(@NotNull SBuild newBuild,\n                         @Nullable SFinishedBuild oldBuild,\n                         @NotNull String triggerOnBuildProblem,\n                         @NotNull String triggerOnTestFailure,\n                         @NotNull BuildCustomizerFactory buildCustomizerFactory,\n                         @NotNull BuildQueue buildQueue,\n                         boolean putBuildsToQueueTop,\n                         @NotNull String triggeredBy)", "modifiers": "public", "return": "", "signature": " CulpritFinder(@NotNull SBuild newBuild,\n                         @Nullable SFinishedBuild oldBuild,\n                         @NotNull String triggerOnBuildProblem,\n                         @NotNull String triggerOnTestFailure,\n                         @NotNull BuildCustomizerFactory buildCustomizerFactory,\n                         @NotNull BuildQueue buildQueue,\n                         boolean putBuildsToQueueTop,\n                         @NotNull String triggeredBy)", "full_signature": "public  CulpritFinder(@NotNull SBuild newBuild,\n                         @Nullable SFinishedBuild oldBuild,\n                         @NotNull String triggerOnBuildProblem,\n                         @NotNull String triggerOnTestFailure,\n                         @NotNull BuildCustomizerFactory buildCustomizerFactory,\n                         @NotNull BuildQueue buildQueue,\n                         boolean putBuildsToQueueTop,\n                         @NotNull String triggeredBy)", "class_method_signature": "CulpritFinder.CulpritFinder(@NotNull SBuild newBuild,\n                         @Nullable SFinishedBuild oldBuild,\n                         @NotNull String triggerOnBuildProblem,\n                         @NotNull String triggerOnTestFailure,\n                         @NotNull BuildCustomizerFactory buildCustomizerFactory,\n                         @NotNull BuildQueue buildQueue,\n                         boolean putBuildsToQueueTop,\n                         @NotNull String triggeredBy)", "testcase": false, "constructor": true}, {"identifier": "triggerCulpritFindingIfNeeded", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void triggerCulpritFindingIfNeeded()", "full_signature": "public void triggerCulpritFindingIfNeeded()", "class_method_signature": "CulpritFinder.triggerCulpritFindingIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "getRelevantBuildProblems", "parameters": "()", "modifiers": "", "return": "List<BuildProblemData>", "signature": "List<BuildProblemData> getRelevantBuildProblems()", "full_signature": " List<BuildProblemData> getRelevantBuildProblems()", "class_method_signature": "CulpritFinder.getRelevantBuildProblems()", "testcase": false, "constructor": false}, {"identifier": "getRelevantTestFailures", "parameters": "()", "modifiers": "private", "return": "List<TestName>", "signature": "List<TestName> getRelevantTestFailures()", "full_signature": "private List<TestName> getRelevantTestFailures()", "class_method_signature": "CulpritFinder.getRelevantTestFailures()", "testcase": false, "constructor": false}, {"identifier": "triggerCulpritFinding", "parameters": "(List<SVcsModification> changesBetweenBuilds)", "modifiers": "private", "return": "void", "signature": "void triggerCulpritFinding(List<SVcsModification> changesBetweenBuilds)", "full_signature": "private void triggerCulpritFinding(List<SVcsModification> changesBetweenBuilds)", "class_method_signature": "CulpritFinder.triggerCulpritFinding(List<SVcsModification> changesBetweenBuilds)", "testcase": false, "constructor": false}, {"identifier": "getCommonBuildParameters", "parameters": "()", "modifiers": "@NotNull private", "return": "Map<String, String>", "signature": "Map<String, String> getCommonBuildParameters()", "full_signature": "@NotNull private Map<String, String> getCommonBuildParameters()", "class_method_signature": "CulpritFinder.getCommonBuildParameters()", "testcase": false, "constructor": false}, {"identifier": "getChanges", "parameters": "()", "modifiers": "private", "return": "List<SVcsModification>", "signature": "List<SVcsModification> getChanges()", "full_signature": "private List<SVcsModification> getChanges()", "class_method_signature": "CulpritFinder.getChanges()", "testcase": false, "constructor": false}, {"identifier": "moveBuildBeyondAllCulpritFindingBuilds", "parameters": "(SQueuedBuild buildToMove)", "modifiers": "private", "return": "void", "signature": "void moveBuildBeyondAllCulpritFindingBuilds(SQueuedBuild buildToMove)", "full_signature": "private void moveBuildBeyondAllCulpritFindingBuilds(SQueuedBuild buildToMove)", "class_method_signature": "CulpritFinder.moveBuildBeyondAllCulpritFindingBuilds(SQueuedBuild buildToMove)", "testcase": false, "constructor": false}, {"identifier": "moveBuildToPosition", "parameters": "(SQueuedBuild buildToMove, List<SQueuedBuild> queuedBuilds, int newBuildPosition)", "modifiers": "private", "return": "void", "signature": "void moveBuildToPosition(SQueuedBuild buildToMove, List<SQueuedBuild> queuedBuilds, int newBuildPosition)", "full_signature": "private void moveBuildToPosition(SQueuedBuild buildToMove, List<SQueuedBuild> queuedBuilds, int newBuildPosition)", "class_method_signature": "CulpritFinder.moveBuildToPosition(SQueuedBuild buildToMove, List<SQueuedBuild> queuedBuilds, int newBuildPosition)", "testcase": false, "constructor": false}], "file": "sin-city-server/src/main/java/sferencik/teamcity/sincity/CulpritFinder.java"}, "focal_method": {"identifier": "getRelevantBuildProblems", "parameters": "()", "modifiers": "", "return": "List<BuildProblemData>", "body": "List<BuildProblemData> getRelevantBuildProblems()\n    {\n        SettingNames settingNames = new SettingNames();\n\n        if (triggerOnBuildProblem.equals(settingNames.getNoTrigger())) {\n            Loggers.SERVER.debug(\"[SinCity] build problems do not trigger\");\n            return new ArrayList<BuildProblemData>();\n        }\n\n        final List<BuildProblemData> thisBuildProblems = newBuild.getFailureReasons();\n        Loggers.SERVER.debug(\"[SinCity] this build's problems: \" + thisBuildProblems);\n\n        if (triggerOnBuildProblem.equals(settingNames.getTriggerOnAll())) {\n            Loggers.SERVER.debug(\"[SinCity] reporting all build problems\");\n            return thisBuildProblems;\n        }\n\n        final List<BuildProblemData> previousBuildProblems = oldBuild == null\n                ? new ArrayList<BuildProblemData>()\n                : oldBuild.getFailureReasons();\n        Loggers.SERVER.debug(\"[SinCity] previous build's problems: \" + previousBuildProblems);\n\n        // OK, so we're only interested in *new* build problems; subtract \"this minus previous\"; however, use\n        // BuildProblemDataWithCustomComparator to correctly assess the equality of artifact dependency failures (see\n        // comments in that class)\n        final List<BuildProblemDataWithCustomComparator> newProblemsWithCustomComparator = new ArrayList<BuildProblemDataWithCustomComparator>();\n        for (BuildProblemData thisBuildProblem : thisBuildProblems)\n            newProblemsWithCustomComparator.add(new BuildProblemDataWithCustomComparator(thisBuildProblem));\n\n        for (BuildProblemData previousBuildProblem : previousBuildProblems)\n            newProblemsWithCustomComparator.remove(new BuildProblemDataWithCustomComparator(previousBuildProblem));\n\n        final List<BuildProblemData> newProblems = new ArrayList<BuildProblemData>();\n        for (BuildProblemDataWithCustomComparator newProblemWithCustomSeparator : newProblemsWithCustomComparator)\n            newProblems.add(newProblemWithCustomSeparator.getBuildProblemData());\n\n        Loggers.SERVER.debug(\"[SinCity] new build problems: \" + newProblems);\n        Loggers.SERVER.debug(\"[SinCity] reporting new build problems\");\n\n        return newProblems;\n    }", "signature": "List<BuildProblemData> getRelevantBuildProblems()", "full_signature": " List<BuildProblemData> getRelevantBuildProblems()", "class_method_signature": "CulpritFinder.getRelevantBuildProblems()", "testcase": false, "constructor": false, "invocations": ["equals", "getNoTrigger", "debug", "getFailureReasons", "debug", "equals", "getTriggerOnAll", "debug", "getFailureReasons", "debug", "add", "remove", "add", "getBuildProblemData", "debug", "debug"]}, "repository": {"repo_id": 39228827, "url": "https://github.com/sferencik/SinCity", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 561, "license": "licensed"}}