{"test_class": {"identifier": "TestJSONHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "HTTPSourceHandler handler;", "modifier": "", "type": "HTTPSourceHandler", "declarator": "handler", "var_name": "handler"}], "file": "flume-ng-core/src/test/java/org/apache/flume/source/http/TestJSONHandler.java"}, "test_case": {"identifier": "testMultipleLargeEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleLargeEvents() throws Exception {\n    String json = \"[{\\\"headers\\\" : {\\\"a\\\": \\\"b\\\", \\\"a2\\\": \\\"b2\\\",\"\n            + \"\\\"a3\\\": \\\"b3\\\",\\\"a4\\\": \\\"b4\\\"},\\\"body\\\": \\\"random_body\\\"},\"\n            + \"{\\\"headers\\\" :{\\\"e\\\": \\\"f\\\",\\\"e2\\\": \\\"f2\\\",\"\n            + \"\\\"e3\\\": \\\"f3\\\",\\\"e4\\\": \\\"f4\\\",\\\"e5\\\": \\\"f5\\\"},\"\n            + \"\\\"body\\\": \\\"random_body2\\\"},\"\n            + \"{\\\"headers\\\" :{\\\"q1\\\": \\\"b\\\",\\\"q2\\\": \\\"b2\\\",\\\"q3\\\": \\\"b3\\\",\\\"q4\\\": \\\"b4\\\"},\"\n            + \"\\\"body\\\": \\\"random_bodyq\\\"}]\";\n    HttpServletRequest req = new FlumeHttpServletRequestWrapper(json);\n    List<Event> deserialized = handler.getEvents(req);\n    Event e = deserialized.get(0);\n    Assert.assertNotNull(e);\n    Assert.assertEquals(\"b\", e.getHeaders().get(\"a\"));\n    Assert.assertEquals(\"b2\", e.getHeaders().get(\"a2\"));\n    Assert.assertEquals(\"b3\", e.getHeaders().get(\"a3\"));\n    Assert.assertEquals(\"b4\", e.getHeaders().get(\"a4\"));\n    Assert.assertEquals(\"random_body\", new String(e.getBody(),\"UTF-8\"));\n    e = deserialized.get(1);\n    Assert.assertNotNull(e);\n    Assert.assertEquals(\"f\", e.getHeaders().get(\"e\"));\n    Assert.assertEquals(\"f2\", e.getHeaders().get(\"e2\"));\n    Assert.assertEquals(\"f3\", e.getHeaders().get(\"e3\"));\n    Assert.assertEquals(\"f4\", e.getHeaders().get(\"e4\"));\n    Assert.assertEquals(\"f5\", e.getHeaders().get(\"e5\"));\n    Assert.assertEquals(\"random_body2\", new String(e.getBody(),\"UTF-8\"));\n    e = deserialized.get(2);\n    Assert.assertNotNull(e);\n    Assert.assertEquals(\"b\", e.getHeaders().get(\"q1\"));\n    Assert.assertEquals(\"b2\", e.getHeaders().get(\"q2\"));\n    Assert.assertEquals(\"b3\", e.getHeaders().get(\"q3\"));\n    Assert.assertEquals(\"b4\", e.getHeaders().get(\"q4\"));\n    Assert.assertEquals(\"random_bodyq\", new String(e.getBody(),\"UTF-8\"));\n\n  }", "signature": "void testMultipleLargeEvents()", "full_signature": "@Test public void testMultipleLargeEvents()", "class_method_signature": "TestJSONHandler.testMultipleLargeEvents()", "testcase": true, "constructor": false, "invocations": ["getEvents", "get", "assertNotNull", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "getBody", "get", "assertNotNull", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "getBody", "get", "assertNotNull", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "get", "getHeaders", "assertEquals", "getBody"]}, "focal_class": {"identifier": "JSONHandler", "superclass": "", "interfaces": "implements HTTPSourceHandler", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JSONHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JSONHandler.class)", "var_name": "LOG"}, {"original_string": "private final Type listType = new TypeToken<List<JSONEvent>>() {}.getType();", "modifier": "private final", "type": "Type", "declarator": "listType = new TypeToken<List<JSONEvent>>() {}.getType()", "var_name": "listType"}, {"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}], "methods": [{"identifier": "JSONHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " JSONHandler()", "full_signature": "public  JSONHandler()", "class_method_signature": "JSONHandler.JSONHandler()", "testcase": false, "constructor": true}, {"identifier": "getEvents", "parameters": "(HttpServletRequest request)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> getEvents(HttpServletRequest request)", "full_signature": "@Override public List<Event> getEvents(HttpServletRequest request)", "class_method_signature": "JSONHandler.getEvents(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "JSONHandler.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "getSimpleEvents", "parameters": "(List<Event> events)", "modifiers": "private", "return": "List<Event>", "signature": "List<Event> getSimpleEvents(List<Event> events)", "full_signature": "private List<Event> getSimpleEvents(List<Event> events)", "class_method_signature": "JSONHandler.getSimpleEvents(List<Event> events)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/http/JSONHandler.java"}, "focal_method": {"identifier": "getEvents", "parameters": "(HttpServletRequest request)", "modifiers": "@Override public", "return": "List<Event>", "body": "@Override\n  public List<Event> getEvents(HttpServletRequest request) throws Exception {\n    BufferedReader reader = request.getReader();\n    String charset = request.getCharacterEncoding();\n    //UTF-8 is default for JSON. If no charset is specified, UTF-8 is to\n    //be assumed.\n    if (charset == null) {\n      LOG.debug(\"Charset is null, default charset of UTF-8 will be used.\");\n      charset = \"UTF-8\";\n    } else if (!(charset.equalsIgnoreCase(\"utf-8\")\n            || charset.equalsIgnoreCase(\"utf-16\")\n            || charset.equalsIgnoreCase(\"utf-32\"))) {\n      LOG.error(\"Unsupported character set in request {}. \"\n              + \"JSON handler supports UTF-8, \"\n              + \"UTF-16 and UTF-32 only.\", charset);\n      throw new UnsupportedCharsetException(\"JSON handler supports UTF-8, \"\n              + \"UTF-16 and UTF-32 only.\");\n    }\n\n    /*\n     * Gson throws Exception if the data is not parseable to JSON.\n     * Need not catch it since the source will catch it and return error.\n     */\n    List<Event> eventList = new ArrayList<Event>(0);\n    try {\n      eventList = gson.fromJson(reader, listType);\n    } catch (JsonSyntaxException ex) {\n      throw new HTTPBadRequestException(\"Request has invalid JSON Syntax.\", ex);\n    }\n\n    for (Event e : eventList) {\n      ((JSONEvent) e).setCharset(charset);\n    }\n    return getSimpleEvents(eventList);\n  }", "signature": "List<Event> getEvents(HttpServletRequest request)", "full_signature": "@Override public List<Event> getEvents(HttpServletRequest request)", "class_method_signature": "JSONHandler.getEvents(HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["getReader", "getCharacterEncoding", "debug", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "error", "fromJson", "setCharset", "getSimpleEvents"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}