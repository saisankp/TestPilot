{"test_class": {"identifier": "CveReader2Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm\");", "modifier": "static final", "type": "SimpleDateFormat", "declarator": "format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm\")", "var_name": "format"}], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/cve/CveReader2Test.java"}, "test_case": {"identifier": "testFetch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFetch() throws CacheException {\n    NvdRestServiceMockup.create();\n    final CveReader2 reader = new CveReader2();\n    reader.fetch(\"CVE-2019-17531\");\n  }", "signature": "void testFetch()", "full_signature": "@Test public void testFetch()", "class_method_signature": "CveReader2Test.testFetch()", "testcase": true, "constructor": false, "invocations": ["create", "fetch"]}, "focal_class": {"identifier": "CveReader2", "superclass": "", "interfaces": "implements ObjectFetcher<String, Cve>", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(CveReader2.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CveReader2.class)", "var_name": "log"}, {"original_string": "private static Cache<String, Cve> CVE_CACHE = new Cache<String, Cve>(new CveReader2(), 1440);", "modifier": "private static", "type": "Cache<String, Cve>", "declarator": "CVE_CACHE = new Cache<String, Cve>(new CveReader2(), 1440)", "var_name": "CVE_CACHE"}], "methods": [{"identifier": "read", "parameters": "(String _key)", "modifiers": "public static", "return": "Cve", "signature": "Cve read(String _key)", "full_signature": "public static Cve read(String _key)", "class_method_signature": "CveReader2.read(String _key)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String _key, boolean _force_fetch)", "modifiers": "public static", "return": "Cve", "signature": "Cve read(String _key, boolean _force_fetch)", "full_signature": "public static Cve read(String _key, boolean _force_fetch)", "class_method_signature": "CveReader2.read(String _key, boolean _force_fetch)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(String _key)", "modifiers": "public", "return": "Cve", "signature": "Cve fetch(String _key)", "full_signature": "public Cve fetch(String _key)", "class_method_signature": "CveReader2.fetch(String _key)", "testcase": false, "constructor": false}, {"identifier": "buildFromJson", "parameters": "(String _id, String _json)", "modifiers": "private static final", "return": "Cve", "signature": "Cve buildFromJson(String _id, String _json)", "full_signature": "private static final Cve buildFromJson(String _id, String _json)", "class_method_signature": "CveReader2.buildFromJson(String _id, String _json)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/cve/CveReader2.java"}, "focal_method": {"identifier": "fetch", "parameters": "(String _key)", "modifiers": "public", "return": "Cve", "body": "public Cve fetch(String _key) throws CacheException {\n    if (_key == null) return null;\n\n    Cve cve = null;\n    int sc = -1;\n    String result = null;\n    String uri = null;\n\n    try {\n      final String url = VulasConfiguration.getGlobal().getServiceUrl(Service.CVE, true);\n\n      final CloseableHttpClient httpclient = HttpClients.createDefault();\n      uri = url.replaceAll(\"<ID>\", _key);\n      log.info(\"Query details of [\" + _key + \"] at [\" + uri + \"]\");\n      final HttpGet method = new HttpGet(uri);\n      if (ConnectionUtil.getProxyConfig() != null)\n        method.setConfig(ConnectionUtil.getProxyConfig());\n      final CloseableHttpResponse response = httpclient.execute(method);\n      try {\n        sc = response.getStatusLine().getStatusCode();\n        final HttpEntity entity = response.getEntity();\n        if (sc == org.apache.http.HttpStatus.SC_OK && entity != null) {\n          result = ConnectionUtil.readInputStream(entity.getContent());\n          cve = CveReader2.buildFromJson(_key, result);\n        } else {\n          log.error(\n              \"HTTP GET [url=\"\n                  + uri\n                  + \"] completed with [\"\n                  + sc\n                  + \"], and entity [\"\n                  + entity\n                  + \"]\");\n        }\n      } catch (ParseException e) {\n        log.error(\"HTTP GET [url=\" + uri + \"] caused an exception: \" + e.getMessage());\n        throw new CacheException(_key, e);\n      } finally {\n        response.close();\n      }\n      log.info(\"Fetched \" + cve + \" for key [\" + _key + \"]\");\n    } catch (ClientProtocolException e) {\n      log.error(\"HTTP GET [url=\" + uri + \"] caused an exception: \" + e.getMessage());\n      throw new CacheException(_key, e);\n    } catch (IOException e) {\n      log.error(\"HTTP GET [url=\" + uri + \"] caused an exception: \" + e.getMessage());\n      log.error(\"Error: \" + e.getMessage(), e);\n      throw new CacheException(_key, e);\n    } catch (ServiceConnectionException e) {\n      log.error(e.getMessage());\n      throw new CacheException(_key, e);\n    }\n    return cve;\n  }", "signature": "Cve fetch(String _key)", "full_signature": "public Cve fetch(String _key)", "class_method_signature": "CveReader2.fetch(String _key)", "testcase": false, "constructor": false, "invocations": ["getServiceUrl", "getGlobal", "createDefault", "replaceAll", "info", "getProxyConfig", "setConfig", "getProxyConfig", "execute", "getStatusCode", "getStatusLine", "getEntity", "readInputStream", "getContent", "buildFromJson", "error", "error", "getMessage", "close", "info", "error", "getMessage", "error", "getMessage", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}