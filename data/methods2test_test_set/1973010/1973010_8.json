{"test_class": {"identifier": "KeyComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/data/KeyComparatorTest.java"}, "test_case": {"identifier": "testFullKeysCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFullKeysCompare() throws Exception {\n    Comparator<? super CKeyValue> comparator = KeyComparator.INSTANCE;\n    CKeyValue one = new CKeyValue(new byte[0], new byte[0], new byte[] { 2 });\n    CKeyValue two = new CKeyValue(new byte[1], new byte[1], new byte[] { 1 });\n    int compare = comparator.compare(one, two);\n    assertTrue(compare < 0);\n\n    one = new CKeyValue(new byte[] { 1 }, new byte[] { 1 }, new byte[] { 1 });\n    two = new CKeyValue(new byte[] { 1, 2 }, new byte[] { 1, 2 },\n        new byte[] { 1 });\n    compare = comparator.compare(one, two);\n    assertTrue(compare < 0);\n\n    one = new CKeyValue(new byte[] { 1, 2 }, new byte[] { 2 }, new byte[] { 1 });\n    two = new CKeyValue(new byte[] { 1, 2 }, new byte[1], new byte[] { 1 });\n    compare = comparator.compare(one, two);\n    assertTrue(compare > 0);\n\n    compare = comparator.compare(two, two);\n    assertEquals(0, compare);\n\n  }", "signature": "void testFullKeysCompare()", "full_signature": "@Test public void testFullKeysCompare()", "class_method_signature": "KeyComparatorTest.testFullKeysCompare()", "testcase": true, "constructor": false, "invocations": ["compare", "assertTrue", "compare", "assertTrue", "compare", "assertTrue", "compare", "assertEquals"]}, "focal_class": {"identifier": "KeyComparator", "superclass": "", "interfaces": "implements Comparator<CKeyValue>", "fields": [{"original_string": "public static final Comparator<? super CKeyValue> INSTANCE = new KeyComparator();", "modifier": "public static final", "type": "Comparator<? super CKeyValue>", "declarator": "INSTANCE = new KeyComparator()", "var_name": "INSTANCE"}], "methods": [{"identifier": "KeyComparator", "parameters": "()", "modifiers": "private", "return": "", "signature": " KeyComparator()", "full_signature": "private  KeyComparator()", "class_method_signature": "KeyComparator.KeyComparator()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(CKeyValue arg0, CKeyValue arg1)", "modifiers": "@Override public", "return": "int", "signature": "int compare(CKeyValue arg0, CKeyValue arg1)", "full_signature": "@Override public int compare(CKeyValue arg0, CKeyValue arg1)", "class_method_signature": "KeyComparator.compare(CKeyValue arg0, CKeyValue arg1)", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/data/KeyComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(CKeyValue arg0, CKeyValue arg1)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(CKeyValue arg0, CKeyValue arg1) {\n    LexicographicBytesComparator comparator = LexicographicBytesComparator.INSTANCE;\n    int compare = comparator.compare(arg0.getRowId(), arg1.getRowId());\n    if (compare == 0) {\n      compare = comparator.compare(arg0.getFamily(), arg1.getFamily());\n      if (compare == 0)\n        compare = comparator.compare(arg0.getQualifier(), arg1.getQualifier());\n    }\n    return compare;\n  }", "signature": "int compare(CKeyValue arg0, CKeyValue arg1)", "full_signature": "@Override public int compare(CKeyValue arg0, CKeyValue arg1)", "class_method_signature": "KeyComparator.compare(CKeyValue arg0, CKeyValue arg1)", "testcase": false, "constructor": false, "invocations": ["compare", "getRowId", "getRowId", "compare", "getFamily", "getFamily", "compare", "getQualifier", "getQualifier"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}