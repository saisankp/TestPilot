{"test_class": {"identifier": "AdjustBoundsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/AdjustBoundsTest.java"}, "test_case": {"identifier": "cleanBounds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cleanBounds() {\n        Bounds bounds = new Bounds();\n        Bounds min = new Bounds();\n        min.set(-1, 1, 1, -1);\n        Bounds max = new Bounds();\n        max.set(-2, 2, 2, -2);\n\n        AdjustBounds.clean(bounds, min, max);\n\n        assertEquals(-1, bounds.x.min, 0.01);\n        assertEquals(1, bounds.y.max, 0.01);\n        assertEquals(1, bounds.x.max, 0.01);\n        assertEquals(-1, bounds.y.min, 0.01);\n    }", "signature": "void cleanBounds()", "full_signature": "@Test public void cleanBounds()", "class_method_signature": "AdjustBoundsTest.cleanBounds()", "testcase": true, "constructor": false, "invocations": ["set", "set", "clean", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "AdjustBounds", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.001", "var_name": "EPSILON"}], "methods": [{"identifier": "clean", "parameters": "(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "modifiers": "public static", "return": "void", "signature": "void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "full_signature": "public static void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "class_method_signature": "AdjustBounds.clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "testcase": false, "constructor": false}, {"identifier": "squareBounds", "parameters": "(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "modifiers": "public static", "return": "void", "signature": "void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "full_signature": "public static void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "class_method_signature": "AdjustBounds.squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/AdjustBounds.java"}, "focal_method": {"identifier": "clean", "parameters": "(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "modifiers": "public static", "return": "void", "body": "public static void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer) {\n        // Extra checks that shouldn't be needed at runtime\n//        if (inner.x.min < outer.x.min) Exceptions.report(new IllegalArgumentException(\"inner x min exceeds outer bound\"));\n//        if (inner.x.max > outer.x.max) Exceptions.report(new IllegalArgumentException(\"inner x max exceeds outer bound\"));\n//        if (inner.y.min < outer.y.min) Exceptions.report(new IllegalArgumentException(\"inner y min exceeds outer bound\"));\n//        if (inner.y.max > outer.y.max) Exceptions.report(new IllegalArgumentException(\"inner y max exceeds outer bound\"));\n        // If bounds are NaN, then use smallest legal viewing window\n        if (Double.isNaN(b.x.min)) b.x.min = inner.x.min;\n        if (Double.isNaN(b.y.max)) b.y.max = inner.y.max;\n        if (Double.isNaN(b.x.max)) b.x.max = inner.x.max;\n        if (Double.isNaN(b.y.min)) b.y.min = inner.y.min;\n        // If we are still infinite, make it 0..1\n        if (Double.isInfinite(b.x.min)) b.x.min = 0;\n        if (Double.isInfinite(b.y.max)) b.y.max = 1;\n        if (Double.isInfinite(b.x.max)) b.x.max = 1;\n        if (Double.isInfinite(b.y.min)) b.y.min = 0;\n        // Fit bounds to min/max\n        if (b.x.min > inner.x.min) b.x.min = inner.x.min;\n        if (b.x.min < outer.x.min) b.x.min = outer.x.min;\n        if (b.y.max < inner.y.max) b.y.max = inner.y.max;\n        if (b.y.max > outer.y.max) b.y.max = outer.y.max;\n        if (b.x.max < inner.x.max) b.x.max = inner.x.max;\n        if (b.x.max > outer.x.max) b.x.max = outer.x.max;\n        if (b.y.min > inner.y.min) b.y.min = inner.y.min;\n        if (b.y.min < outer.y.min) b.y.min = outer.y.min;\n        if (b.x.max < b.x.min) {\n            final double tmp = b.x.max;\n            b.x.max = b.x.min;\n            b.x.min = tmp;\n        }\n        if (b.y.max < b.y.min) {\n            final double tmp = b.y.max;\n            b.y.max = b.y.min;\n            b.y.min = tmp;\n        }\n        if (b.x.max - b.x.min < EPSILON) {\n            b.x.min -= EPSILON / 2;\n            b.x.max += EPSILON / 2;\n        }\n        if (b.y.max - b.y.min < EPSILON) {\n            b.y.min -= EPSILON / 2;\n            b.y.max += EPSILON / 2;\n        }\n    }", "signature": "void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "full_signature": "public static void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "class_method_signature": "AdjustBounds.clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "testcase": false, "constructor": false, "invocations": ["isNaN", "isNaN", "isNaN", "isNaN", "isInfinite", "isInfinite", "isInfinite", "isInfinite"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}