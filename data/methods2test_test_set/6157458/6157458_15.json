{"test_class": {"identifier": "DefaultPluginRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/DefaultPluginRepositoryTest.java"}, "test_case": {"identifier": "testDeletePluginPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeletePluginPath() {\n        PluginRepository repository = new DefaultPluginRepository(pluginsPath);\n\n        assertTrue(Files.exists(pluginsPath.resolve(\"plugin-1.zip\")));\n        assertTrue(repository.deletePluginPath(pluginsPath.resolve(\"plugin-1\")));\n        assertFalse(Files.exists(pluginsPath.resolve(\"plugin-1.zip\")));\n        assertTrue(repository.deletePluginPath(pluginsPath.resolve(\"plugin-3\")));\n        assertFalse(repository.deletePluginPath(pluginsPath.resolve(\"plugin-4\")));\n\n        List<Path> pluginPaths = repository.getPluginPaths();\n\n        assertEquals(1, pluginPaths.size());\n        assertEquals(pluginsPath.relativize(pluginPaths.get(0)).toString(), \"plugin-2\");\n    }", "signature": "void testDeletePluginPath()", "full_signature": "@Test public void testDeletePluginPath()", "class_method_signature": "DefaultPluginRepositoryTest.testDeletePluginPath()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "exists", "resolve", "assertTrue", "deletePluginPath", "resolve", "assertFalse", "exists", "resolve", "assertTrue", "deletePluginPath", "resolve", "assertFalse", "deletePluginPath", "resolve", "getPluginPaths", "assertEquals", "size", "assertEquals", "toString", "relativize", "get"]}, "focal_class": {"identifier": "DefaultPluginRepository", "superclass": "extends BasePluginRepository", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultPluginRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultPluginRepository.class)", "var_name": "log"}], "methods": [{"identifier": "DefaultPluginRepository", "parameters": "(Path pluginsRoot)", "modifiers": "public", "return": "", "signature": " DefaultPluginRepository(Path pluginsRoot)", "full_signature": "public  DefaultPluginRepository(Path pluginsRoot)", "class_method_signature": "DefaultPluginRepository.DefaultPluginRepository(Path pluginsRoot)", "testcase": false, "constructor": true}, {"identifier": "getPluginPaths", "parameters": "()", "modifiers": "@Override public", "return": "List<Path>", "signature": "List<Path> getPluginPaths()", "full_signature": "@Override public List<Path> getPluginPaths()", "class_method_signature": "DefaultPluginRepository.getPluginPaths()", "testcase": false, "constructor": false}, {"identifier": "deletePluginPath", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePluginPath(Path pluginPath)", "full_signature": "@Override public boolean deletePluginPath(Path pluginPath)", "class_method_signature": "DefaultPluginRepository.deletePluginPath(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "createHiddenPluginFilter", "parameters": "()", "modifiers": "protected", "return": "FileFilter", "signature": "FileFilter createHiddenPluginFilter()", "full_signature": "protected FileFilter createHiddenPluginFilter()", "class_method_signature": "DefaultPluginRepository.createHiddenPluginFilter()", "testcase": false, "constructor": false}, {"identifier": "extractZipFiles", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void extractZipFiles()", "full_signature": "private void extractZipFiles()", "class_method_signature": "DefaultPluginRepository.extractZipFiles()", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DefaultPluginRepository.java"}, "focal_method": {"identifier": "deletePluginPath", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean deletePluginPath(Path pluginPath) {\n        FileUtils.optimisticDelete(FileUtils.findWithEnding(pluginPath, \".zip\", \".ZIP\", \".Zip\"));\n        return super.deletePluginPath(pluginPath);\n    }", "signature": "boolean deletePluginPath(Path pluginPath)", "full_signature": "@Override public boolean deletePluginPath(Path pluginPath)", "class_method_signature": "DefaultPluginRepository.deletePluginPath(Path pluginPath)", "testcase": false, "constructor": false, "invocations": ["optimisticDelete", "findWithEnding", "deletePluginPath"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}