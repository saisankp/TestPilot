{"test_class": {"identifier": "DefaultStateChartReducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StateChartReducer<ColorState> myReducer = new DefaultStateChartReducer<>();", "modifier": "private final", "type": "StateChartReducer<ColorState>", "declarator": "myReducer = new DefaultStateChartReducer<>()", "var_name": "myReducer"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/statechart/DefaultStateChartReducerTest.java"}, "test_case": {"identifier": "testReduce", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReduce() {\n    float[][] given = {{0, 0, 5.1f, 10}, {5.1f, 0, 5.3f, 10}, {5.3f, 0, 5.9f, 10}, {5.9f, 0, 6.1f, 10}};\n    ColorState[] givenValues = {ColorState.BLACK, ColorState.RED, ColorState.YELLOW, ColorState.BLACK};\n\n    float[][] expected = {{0, 0, 5.1f, 10}, {5.1f, 0, 5.9f, 10}, {5.9f, 0, 6.1f, 10}};\n    ColorState[] expectedValues = {ColorState.BLACK, ColorState.YELLOW, ColorState.BLACK};\n\n    check(given, givenValues, expected, expectedValues);\n  }", "signature": "void testReduce()", "full_signature": "@Test public void testReduce()", "class_method_signature": "DefaultStateChartReducerTest.testReduce()", "testcase": true, "constructor": false, "invocations": ["check"]}, "focal_class": {"identifier": "DefaultStateChartReducer", "superclass": "", "interfaces": "implements StateChartReducer<T>", "fields": [], "methods": [{"identifier": "reduce", "parameters": "(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "modifiers": "@Override public", "return": "void", "signature": "void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "full_signature": "@Override public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "class_method_signature": "DefaultStateChartReducer.reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/statechart/DefaultStateChartReducer.java"}, "focal_method": {"identifier": "reduce", "parameters": "(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values) {\n    int index = 0, keepIndex = 0;\n    Map<T, Float> occurrenceWidth = new HashMap<>();\n\n    while (index < rectangles.size()) {\n      T value = values.get(index);\n      Rectangle2D.Float rect = rectangles.get(index);\n\n      // Crossing several pixels, let's just keep it\n      if (Math.floor(rect.x) < Math.floor(rect.x + rect.width)) {\n        rectangles.set(keepIndex, rect);\n        values.set(keepIndex, value);\n        ++keepIndex;\n        ++index;\n        continue;\n      }\n\n      occurrenceWidth.clear();\n\n      // Whole rectangle is within the pixel\n      float pixelStart = (float)Math.floor(rect.x);\n      float pixelEnd = pixelStart + 1.0f;\n\n      float minX = rect.x;\n      float maxX = Float.MIN_VALUE;\n      float minY = rect.y;\n      float height = rect.height;\n\n      while (index < rectangles.size()) {\n        rect = rectangles.get(index);\n\n        if (rect.x < pixelStart || rect.x > pixelEnd || rect.x + rect.width > pixelEnd) {\n          // Crossed different pixel\n          break;\n        }\n        maxX = rect.x + rect.width;\n\n        value = values.get(index);\n        Float width = occurrenceWidth.get(value);\n        occurrenceWidth.put(value, (width == null ? 0 : width) + rect.width);\n        ++index;\n      }\n\n      T mostOccurred = null;\n      float mostOccurredWidth = -1;\n      for (Map.Entry<T, Float> entry : occurrenceWidth.entrySet()) {\n        if (entry.getValue() > mostOccurredWidth) {\n          mostOccurredWidth = entry.getValue().floatValue();\n          mostOccurred = entry.getKey();\n        }\n      }\n\n      if (mostOccurred != null) {\n        values.set(keepIndex, mostOccurred);\n        // As width of the new rectangle smaller than 1px, arcWidth and arcHeight won't make any difference\n        // thus, drawing \"Rectangle2D\" instead of \"RoundRectangle2D\"\n        rectangles.set(keepIndex, new Rectangle2D.Float(minX, minY, maxX - minX, height));\n        ++keepIndex;\n      }\n    }\n\n    rectangles.subList(keepIndex, rectangles.size()).clear();\n    values.subList(keepIndex, values.size()).clear();\n  }", "signature": "void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "full_signature": "@Override public void reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "class_method_signature": "DefaultStateChartReducer.reduce(@NotNull List<Rectangle2D.Float> rectangles, @NotNull List<T> values)", "testcase": false, "constructor": false, "invocations": ["size", "get", "get", "floor", "floor", "set", "set", "clear", "floor", "size", "get", "get", "get", "put", "entrySet", "getValue", "floatValue", "getValue", "getKey", "set", "set", "clear", "subList", "size", "clear", "subList", "size"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}