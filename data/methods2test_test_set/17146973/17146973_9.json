{"test_class": {"identifier": "SpeakerboxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Activity activity;", "modifier": "private", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private Speakerbox speakerbox;", "modifier": "private", "type": "Speakerbox", "declarator": "speakerbox", "var_name": "speakerbox"}, {"original_string": "private com.mapzen.speakerbox.ShadowTextToSpeech shadowTextToSpeech;", "modifier": "private", "type": "com.mapzen.speakerbox.ShadowTextToSpeech", "declarator": "shadowTextToSpeech", "var_name": "shadowTextToSpeech"}], "file": "library/src/test/java/com/mapzen/speakerbox/SpeakerboxTest.java"}, "test_case": {"identifier": "setLanguage_shouldSetTtsLangugae", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setLanguage_shouldSetTtsLangugae() throws Exception {\n        speakerbox.setLanguage(Locale.JAPANESE);\n        assertThat(shadowTextToSpeech.getLanguage()).isEqualTo(Locale.JAPANESE);\n    }", "signature": "void setLanguage_shouldSetTtsLangugae()", "full_signature": "@Test public void setLanguage_shouldSetTtsLangugae()", "class_method_signature": "SpeakerboxTest.setLanguage_shouldSetTtsLangugae()", "testcase": true, "constructor": false, "invocations": ["setLanguage", "isEqualTo", "assertThat", "getLanguage"]}, "focal_class": {"identifier": "Speakerbox", "superclass": "", "interfaces": "implements TextToSpeech.OnInitListener", "fields": [{"original_string": "final static String TAG = Speakerbox.class.getSimpleName();", "modifier": "final static", "type": "String", "declarator": "TAG = Speakerbox.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final float FOCUS_PITCH = 1.0f;", "modifier": "private static final", "type": "float", "declarator": "FOCUS_PITCH = 1.0f", "var_name": "FOCUS_PITCH"}, {"original_string": "private static final float DUCK_PITCH = 0.5f;", "modifier": "private static final", "type": "float", "declarator": "DUCK_PITCH = 0.5f", "var_name": "DUCK_PITCH"}, {"original_string": "public static final String UTTERANCE_ID_NONE = \"-1\";", "modifier": "public static final", "type": "String", "declarator": "UTTERANCE_ID_NONE = \"-1\"", "var_name": "UTTERANCE_ID_NONE"}, {"original_string": "private final TextToSpeech textToSpeech;", "modifier": "private final", "type": "TextToSpeech", "declarator": "textToSpeech", "var_name": "textToSpeech"}, {"original_string": "private final Application application;", "modifier": "private final", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private final Application.ActivityLifecycleCallbacks callbacks;", "modifier": "private final", "type": "Application.ActivityLifecycleCallbacks", "declarator": "callbacks", "var_name": "callbacks"}, {"original_string": "private Activity activity = null;", "modifier": "private", "type": "Activity", "declarator": "activity = null", "var_name": "activity"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private boolean muted = false;", "modifier": "private", "type": "boolean", "declarator": "muted = false", "var_name": "muted"}, {"original_string": "private String playOnInit = null;", "modifier": "private", "type": "String", "declarator": "playOnInit = null", "var_name": "playOnInit"}, {"original_string": "private int queueMode = TextToSpeech.QUEUE_FLUSH;", "modifier": "private", "type": "int", "declarator": "queueMode = TextToSpeech.QUEUE_FLUSH", "var_name": "queueMode"}, {"original_string": "private final LinkedHashMap<String, String> samples = new LinkedHashMap<String, String>();", "modifier": "private final", "type": "LinkedHashMap<String, String>", "declarator": "samples = new LinkedHashMap<String, String>()", "var_name": "samples"}, {"original_string": "private final ArrayList<String> unwantedPhrases = new ArrayList<String>();", "modifier": "private final", "type": "ArrayList<String>", "declarator": "unwantedPhrases = new ArrayList<String>()", "var_name": "unwantedPhrases"}, {"original_string": "private HashMap<String, Runnable> onStartRunnables = new HashMap<String, Runnable>();", "modifier": "private", "type": "HashMap<String, Runnable>", "declarator": "onStartRunnables = new HashMap<String, Runnable>()", "var_name": "onStartRunnables"}, {"original_string": "private HashMap<String, Runnable> onDoneRunnables = new HashMap<String, Runnable>();", "modifier": "private", "type": "HashMap<String, Runnable>", "declarator": "onDoneRunnables = new HashMap<String, Runnable>()", "var_name": "onDoneRunnables"}, {"original_string": "private HashMap<String, Runnable> onErrorRunnables = new HashMap<String, Runnable>();", "modifier": "private", "type": "HashMap<String, Runnable>", "declarator": "onErrorRunnables = new HashMap<String, Runnable>()", "var_name": "onErrorRunnables"}, {"original_string": "AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\n        public void onAudioFocusChange(int focusChange) {\n            switch (focusChange) {\n                case AudioManager.AUDIOFOCUS_GAIN:\n                    textToSpeech.setPitch(FOCUS_PITCH);\n                    break;\n                case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\n                    textToSpeech.setPitch(DUCK_PITCH);\n                    break;\n            }\n        }\n    };", "modifier": "", "type": "AudioManager.OnAudioFocusChangeListener", "declarator": "audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\n        public void onAudioFocusChange(int focusChange) {\n            switch (focusChange) {\n                case AudioManager.AUDIOFOCUS_GAIN:\n                    textToSpeech.setPitch(FOCUS_PITCH);\n                    break;\n                case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\n                    textToSpeech.setPitch(DUCK_PITCH);\n                    break;\n            }\n        }\n    }", "var_name": "audioFocusChangeListener"}, {"original_string": "UtteranceProgressListener utteranceProgressListener = new UtteranceProgressListener() {\n        @Override\n        public void onStart(String utteranceId) {\n            detectAndRun(utteranceId, onStartRunnables);\n        }\n\n        @Override\n        public void onDone(String utteranceId) {\n            if (detectAndRun(utteranceId, onDoneRunnables)) {\n                // because either onDone or onError will be called for an utteranceId, cleanup other\n                if (onErrorRunnables.containsKey(utteranceId)) {\n                    onErrorRunnables.remove(utteranceId);\n                }\n            }\n        }\n\n        @Override\n        public void onError(String utteranceId) {\n            if (detectAndRun(utteranceId, onErrorRunnables)) {\n                // because either onDone or onError will be called for an utteranceId, cleanup other\n                if (onDoneRunnables.containsKey(utteranceId)) {\n                    onDoneRunnables.remove(utteranceId);\n                }\n            }\n        }\n    };", "modifier": "", "type": "UtteranceProgressListener", "declarator": "utteranceProgressListener = new UtteranceProgressListener() {\n        @Override\n        public void onStart(String utteranceId) {\n            detectAndRun(utteranceId, onStartRunnables);\n        }\n\n        @Override\n        public void onDone(String utteranceId) {\n            if (detectAndRun(utteranceId, onDoneRunnables)) {\n                // because either onDone or onError will be called for an utteranceId, cleanup other\n                if (onErrorRunnables.containsKey(utteranceId)) {\n                    onErrorRunnables.remove(utteranceId);\n                }\n            }\n        }\n\n        @Override\n        public void onError(String utteranceId) {\n            if (detectAndRun(utteranceId, onErrorRunnables)) {\n                // because either onDone or onError will be called for an utteranceId, cleanup other\n                if (onDoneRunnables.containsKey(utteranceId)) {\n                    onDoneRunnables.remove(utteranceId);\n                }\n            }\n        }\n    }", "var_name": "utteranceProgressListener"}], "methods": [{"identifier": "Speakerbox", "parameters": "(final Application application)", "modifiers": "public", "return": "", "signature": " Speakerbox(final Application application)", "full_signature": "public  Speakerbox(final Application application)", "class_method_signature": "Speakerbox.Speakerbox(final Application application)", "testcase": false, "constructor": true}, {"identifier": "onInit", "parameters": "(int status)", "modifiers": "@Override public", "return": "void", "signature": "void onInit(int status)", "full_signature": "@Override public void onInit(int status)", "class_method_signature": "Speakerbox.onInit(int status)", "testcase": false, "constructor": false}, {"identifier": "setActivity", "parameters": "(Activity activity)", "modifiers": "public", "return": "void", "signature": "void setActivity(Activity activity)", "full_signature": "public void setActivity(Activity activity)", "class_method_signature": "Speakerbox.setActivity(Activity activity)", "testcase": false, "constructor": false}, {"identifier": "getCallbacks", "parameters": "()", "modifiers": "public", "return": "Application.ActivityLifecycleCallbacks", "signature": "Application.ActivityLifecycleCallbacks getCallbacks()", "full_signature": "public Application.ActivityLifecycleCallbacks getCallbacks()", "class_method_signature": "Speakerbox.getCallbacks()", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "(CharSequence text)", "modifiers": "public", "return": "void", "signature": "void play(CharSequence text)", "full_signature": "public void play(CharSequence text)", "class_method_signature": "Speakerbox.play(CharSequence text)", "testcase": false, "constructor": false}, {"identifier": "playAndOnStart", "parameters": "(String text, Runnable onStart)", "modifiers": "public", "return": "void", "signature": "void playAndOnStart(String text, Runnable onStart)", "full_signature": "public void playAndOnStart(String text, Runnable onStart)", "class_method_signature": "Speakerbox.playAndOnStart(String text, Runnable onStart)", "testcase": false, "constructor": false}, {"identifier": "playAndOnDone", "parameters": "(String text, Runnable onDone)", "modifiers": "public", "return": "void", "signature": "void playAndOnDone(String text, Runnable onDone)", "full_signature": "public void playAndOnDone(String text, Runnable onDone)", "class_method_signature": "Speakerbox.playAndOnDone(String text, Runnable onDone)", "testcase": false, "constructor": false}, {"identifier": "playAndOnError", "parameters": "(String text, Runnable onError)", "modifiers": "public", "return": "void", "signature": "void playAndOnError(String text, Runnable onError)", "full_signature": "public void playAndOnError(String text, Runnable onError)", "class_method_signature": "Speakerbox.playAndOnError(String text, Runnable onError)", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "(String text, Runnable onStart, Runnable onDone, Runnable onError)", "modifiers": "public", "return": "void", "signature": "void play(String text, Runnable onStart, Runnable onDone, Runnable onError)", "full_signature": "public void play(String text, Runnable onStart, Runnable onDone, Runnable onError)", "class_method_signature": "Speakerbox.play(String text, Runnable onStart, Runnable onDone, Runnable onError)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Speakerbox.stop()", "testcase": false, "constructor": false}, {"identifier": "applyRemixes", "parameters": "(String text)", "modifiers": "private", "return": "String", "signature": "String applyRemixes(String text)", "full_signature": "private String applyRemixes(String text)", "class_method_signature": "Speakerbox.applyRemixes(String text)", "testcase": false, "constructor": false}, {"identifier": "playInternal", "parameters": "(String text, String utteranceId)", "modifiers": "private", "return": "void", "signature": "void playInternal(String text, String utteranceId)", "full_signature": "private void playInternal(String text, String utteranceId)", "class_method_signature": "Speakerbox.playInternal(String text, String utteranceId)", "testcase": false, "constructor": false}, {"identifier": "dontPlayIfContains", "parameters": "(String text)", "modifiers": "public", "return": "void", "signature": "void dontPlayIfContains(String text)", "full_signature": "public void dontPlayIfContains(String text)", "class_method_signature": "Speakerbox.dontPlayIfContains(String text)", "testcase": false, "constructor": false}, {"identifier": "doesNotContainUnwantedPhrase", "parameters": "(String text)", "modifiers": "private", "return": "boolean", "signature": "boolean doesNotContainUnwantedPhrase(String text)", "full_signature": "private boolean doesNotContainUnwantedPhrase(String text)", "class_method_signature": "Speakerbox.doesNotContainUnwantedPhrase(String text)", "testcase": false, "constructor": false}, {"identifier": "mute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void mute()", "full_signature": "public void mute()", "class_method_signature": "Speakerbox.mute()", "testcase": false, "constructor": false}, {"identifier": "unmute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unmute()", "full_signature": "public void unmute()", "class_method_signature": "Speakerbox.unmute()", "testcase": false, "constructor": false}, {"identifier": "isMuted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMuted()", "full_signature": "public boolean isMuted()", "class_method_signature": "Speakerbox.isMuted()", "testcase": false, "constructor": false}, {"identifier": "remix", "parameters": "(String original, String remix)", "modifiers": "public", "return": "void", "signature": "void remix(String original, String remix)", "full_signature": "public void remix(String original, String remix)", "class_method_signature": "Speakerbox.remix(String original, String remix)", "testcase": false, "constructor": false}, {"identifier": "getTextToSpeech", "parameters": "()", "modifiers": "public", "return": "TextToSpeech", "signature": "TextToSpeech getTextToSpeech()", "full_signature": "public TextToSpeech getTextToSpeech()", "class_method_signature": "Speakerbox.getTextToSpeech()", "testcase": false, "constructor": false}, {"identifier": "requestAudioFocus", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void requestAudioFocus()", "full_signature": "public void requestAudioFocus()", "class_method_signature": "Speakerbox.requestAudioFocus()", "testcase": false, "constructor": false}, {"identifier": "abandonAudioFocus", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void abandonAudioFocus()", "full_signature": "public void abandonAudioFocus()", "class_method_signature": "Speakerbox.abandonAudioFocus()", "testcase": false, "constructor": false}, {"identifier": "enableVolumeControl", "parameters": "(Activity activity)", "modifiers": "public", "return": "void", "signature": "void enableVolumeControl(Activity activity)", "full_signature": "public void enableVolumeControl(Activity activity)", "class_method_signature": "Speakerbox.enableVolumeControl(Activity activity)", "testcase": false, "constructor": false}, {"identifier": "disableVolumeControl", "parameters": "(Activity activity)", "modifiers": "public", "return": "void", "signature": "void disableVolumeControl(Activity activity)", "full_signature": "public void disableVolumeControl(Activity activity)", "class_method_signature": "Speakerbox.disableVolumeControl(Activity activity)", "testcase": false, "constructor": false}, {"identifier": "setQueueMode", "parameters": "(int queueMode)", "modifiers": "public", "return": "void", "signature": "void setQueueMode(int queueMode)", "full_signature": "public void setQueueMode(int queueMode)", "class_method_signature": "Speakerbox.setQueueMode(int queueMode)", "testcase": false, "constructor": false}, {"identifier": "getAvailableLanguages", "parameters": "()", "modifiers": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) public", "return": "Set<Locale>", "signature": "Set<Locale> getAvailableLanguages()", "full_signature": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) public Set<Locale> getAvailableLanguages()", "class_method_signature": "Speakerbox.getAvailableLanguages()", "testcase": false, "constructor": false}, {"identifier": "setLanguage", "parameters": "(Locale locale)", "modifiers": "public", "return": "void", "signature": "void setLanguage(Locale locale)", "full_signature": "public void setLanguage(Locale locale)", "class_method_signature": "Speakerbox.setLanguage(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "Speakerbox.shutdown()", "testcase": false, "constructor": false}, {"identifier": "detectAndRun", "parameters": "(String utteranceId, HashMap<String, Runnable> hashMap)", "modifiers": "private", "return": "boolean", "signature": "boolean detectAndRun(String utteranceId, HashMap<String, Runnable> hashMap)", "full_signature": "private boolean detectAndRun(String utteranceId, HashMap<String, Runnable> hashMap)", "class_method_signature": "Speakerbox.detectAndRun(String utteranceId, HashMap<String, Runnable> hashMap)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/mapzen/speakerbox/Speakerbox.java"}, "focal_method": {"identifier": "setLanguage", "parameters": "(Locale locale)", "modifiers": "public", "return": "void", "body": "public void setLanguage(Locale locale) {\n        textToSpeech.setLanguage(locale);\n    }", "signature": "void setLanguage(Locale locale)", "full_signature": "public void setLanguage(Locale locale)", "class_method_signature": "Speakerbox.setLanguage(Locale locale)", "testcase": false, "constructor": false, "invocations": ["setLanguage"]}, "repository": {"repo_id": 17146973, "url": "https://github.com/mapzen/speakerbox", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 45, "size": 227, "license": "licensed"}}