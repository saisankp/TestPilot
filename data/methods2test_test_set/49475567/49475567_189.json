{"test_class": {"identifier": "DefaultSimilarNamesPolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultSimilarNamesPolicy policy;", "modifier": "private", "type": "DefaultSimilarNamesPolicy", "declarator": "policy", "var_name": "policy"}], "file": "geoclient-service/src/test/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultSimilarNamesPolicyTest.java"}, "test_case": {"identifier": "testIsSimilarName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSimilarName() {\n        assertTrue(policy.isSimilarName(\"BRO\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"BRODWAY\", \"BRODWAY\"));\n        assertTrue(policy.isSimilarName(\"BRODWAY\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"BROAD\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"BRADWAY\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"ROADWAY\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"100 ST\", \"WEST 100 STREET\"));\n        assertTrue(policy.isSimilarName(\"100 ST\", \"EAST 100 STREET\"));\n        assertTrue(policy.isSimilarName(\"WEST 100 AVE\", \"WEST 100 STREET\"));\n        assertTrue(policy.isSimilarName(\"EasTeRN PKWY\", \"EASTERN PARKWAY\"));\n        assertTrue(policy.isSimilarName(\"BROAD STREET\", \"BROADWAY\"));\n        assertTrue(policy.isSimilarName(\"BRODWAY\", \"BROAD STREET\"));\n        assertTrue(policy.isSimilarName(\"BRODWAY\", \"BROWN BOULEVARD\"));\n        assertFalse(policy.isSimilarName(\"BRODWAY\", \"WB BRIDGE APPROACH\"));\n    }", "signature": "void testIsSimilarName()", "full_signature": "@Test public void testIsSimilarName()", "class_method_signature": "DefaultSimilarNamesPolicyTest.testIsSimilarName()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertTrue", "isSimilarName", "assertFalse", "isSimilarName"]}, "focal_class": {"identifier": "DefaultSimilarNamesPolicy", "superclass": "extends AbstractPolicy", "interfaces": "implements SimilarNamesPolicy", "fields": [{"original_string": "public static final int DEFAULT_SIMILAR_NAMES_DISTANCE = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SIMILAR_NAMES_DISTANCE = 8", "var_name": "DEFAULT_SIMILAR_NAMES_DISTANCE"}, {"original_string": "private int similarNamesDistance = DEFAULT_SIMILAR_NAMES_DISTANCE;", "modifier": "private", "type": "int", "declarator": "similarNamesDistance = DEFAULT_SIMILAR_NAMES_DISTANCE", "var_name": "similarNamesDistance"}, {"original_string": "private LevenshteinDistance levenshteinDistance = new LevenshteinDistance(DEFAULT_SIMILAR_NAMES_DISTANCE);", "modifier": "private", "type": "LevenshteinDistance", "declarator": "levenshteinDistance = new LevenshteinDistance(DEFAULT_SIMILAR_NAMES_DISTANCE)", "var_name": "levenshteinDistance"}], "methods": [{"identifier": "getSimilarNamesDistance", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSimilarNamesDistance()", "full_signature": "public int getSimilarNamesDistance()", "class_method_signature": "DefaultSimilarNamesPolicy.getSimilarNamesDistance()", "testcase": false, "constructor": false}, {"identifier": "setSimilarNamesDistance", "parameters": "(int similarNamesDistance)", "modifiers": "public", "return": "void", "signature": "void setSimilarNamesDistance(int similarNamesDistance)", "full_signature": "public void setSimilarNamesDistance(int similarNamesDistance)", "class_method_signature": "DefaultSimilarNamesPolicy.setSimilarNamesDistance(int similarNamesDistance)", "testcase": false, "constructor": false}, {"identifier": "isSimilarName", "parameters": "(String original, String proposed)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSimilarName(String original, String proposed)", "full_signature": "@Override public boolean isSimilarName(String original, String proposed)", "class_method_signature": "DefaultSimilarNamesPolicy.isSimilarName(String original, String proposed)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "DefaultSimilarNamesPolicy.getDescription()", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(String string)", "modifiers": "", "return": "String", "signature": "String clean(String string)", "full_signature": " String clean(String string)", "class_method_signature": "DefaultSimilarNamesPolicy.clean(String string)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultSimilarNamesPolicy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DefaultSimilarNamesPolicy.equals(Object obj)", "testcase": false, "constructor": false}], "file": "geoclient-service/src/main/java/gov/nyc/doitt/gis/geoclient/service/search/policy/DefaultSimilarNamesPolicy.java"}, "focal_method": {"identifier": "isSimilarName", "parameters": "(String original, String proposed)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isSimilarName(String original, String proposed)\n    {\n        return this.levenshteinDistance.apply(clean(original), clean(proposed)) >= 0;\n    }", "signature": "boolean isSimilarName(String original, String proposed)", "full_signature": "@Override public boolean isSimilarName(String original, String proposed)", "class_method_signature": "DefaultSimilarNamesPolicy.isSimilarName(String original, String proposed)", "testcase": false, "constructor": false, "invocations": ["apply", "clean", "clean"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}