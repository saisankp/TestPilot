{"test_class": {"identifier": "DomainResponseMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    DomainResponseMessageProcessor domainResponseMessageProcessor;", "modifier": "@InjectMocks", "type": "DomainResponseMessageProcessor", "declarator": "domainResponseMessageProcessor", "var_name": "domainResponseMessageProcessor"}, {"original_string": "@Mock\n    private GridMeasurementPublishedEventProducer producer;", "modifier": "@Mock\n    private", "type": "GridMeasurementPublishedEventProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "@Mock\n    private ObjectMessage receivedMessage;", "modifier": "@Mock\n    private", "type": "ObjectMessage", "declarator": "receivedMessage", "var_name": "receivedMessage"}], "file": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessorTest.java"}, "test_case": {"identifier": "processMessageTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void processMessageTest() throws JMSException {\n        // Arrange\n        final String correlationUid = \"CorrelationID-1\";\n        final String messageType = \"GET_DATA\";\n        final String organisationIdentification = \"test-org\";\n        final String deviceIdentification = \"device1\";\n        final ResponseMessageResultType resultType = ResponseMessageResultType.OK;\n        final String payload = \"the payload\";\n\n        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n                .withMessageType(messageType)\n                .withOrganisationIdentification(organisationIdentification)\n                .withDeviceIdentification(deviceIdentification)\n                .withResult(resultType)\n                .withDataObject(payload)\n                .build();\n\n        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n                .thenReturn(organisationIdentification);\n        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);\n        when(this.receivedMessage.getStringProperty(Constants.RESULT)).thenReturn(resultType.toString());\n        when(this.receivedMessage.getObject()).thenReturn(responseMessage);\n\n        // Act\n        this.domainResponseMessageProcessor.processMessage(this.receivedMessage);\n\n        // Assert\n        verify(this.producer, times(1)).send(payload);\n    }", "signature": "void processMessageTest()", "full_signature": "@Test void processMessageTest()", "class_method_signature": "DomainResponseMessageProcessorTest.processMessageTest()", "testcase": true, "constructor": false, "invocations": ["build", "withDataObject", "withResult", "withDeviceIdentification", "withOrganisationIdentification", "withMessageType", "withCorrelationUid", "thenReturn", "when", "getJMSCorrelationID", "thenReturn", "when", "getJMSType", "thenReturn", "when", "getStringProperty", "thenReturn", "when", "getStringProperty", "thenReturn", "when", "getStringProperty", "toString", "thenReturn", "when", "getObject", "processMessage", "send", "verify", "times"]}, "focal_class": {"identifier": "DomainResponseMessageProcessor", "superclass": "", "interfaces": "implements MessageProcessor", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "private static final MessageType GET_DATA = MessageType.GET_DATA;", "modifier": "private static final", "type": "MessageType", "declarator": "GET_DATA = MessageType.GET_DATA", "var_name": "GET_DATA"}, {"original_string": "@Autowired\n    private GridMeasurementPublishedEventProducer producer;", "modifier": "@Autowired\n    private", "type": "GridMeasurementPublishedEventProducer", "declarator": "producer", "var_name": "producer"}], "methods": [{"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "DomainResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final MessageType messageType, final ResponseMessage message)", "modifiers": "private", "return": "void", "signature": "void handleMessage(final MessageType messageType, final ResponseMessage message)", "full_signature": "private void handleMessage(final MessageType messageType, final ResponseMessage message)", "class_method_signature": "DomainResponseMessageProcessor.handleMessage(final MessageType messageType, final ResponseMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleError", "parameters": "(final RuntimeException e, final String correlationUid)", "modifiers": "private static", "return": "void", "signature": "void handleError(final RuntimeException e, final String correlationUid)", "full_signature": "private static void handleError(final RuntimeException e, final String correlationUid)", "class_method_signature": "DomainResponseMessageProcessor.handleError(final RuntimeException e, final String correlationUid)", "testcase": false, "constructor": false}, {"identifier": "logDebugInformation", "parameters": "(final MessageType messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "modifiers": "private static", "return": "void", "signature": "void logDebugInformation(final MessageType messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "full_signature": "private static void logDebugInformation(final MessageType messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "class_method_signature": "DomainResponseMessageProcessor.logDebugInformation(final MessageType messageType, final String correlationUid,\n            final String organisationIdentification, final String deviceIdentification)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) {\n        LOGGER.debug(\"Processing distribution automation response message\");\n\n        String correlationUid = null;\n        MessageType messageType = null;\n        String organisationIdentification = null;\n        String deviceIdentification = null;\n\n        ResponseMessageResultType resultType;\n        String resultDescription;\n        ResponseMessage dataObject;\n\n        try {\n            correlationUid = message.getJMSCorrelationID();\n            organisationIdentification = message.getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n            deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n\n            messageType = MessageType.valueOf(message.getJMSType());\n\n            resultType = ResponseMessageResultType.valueOf(message.getStringProperty(Constants.RESULT));\n            resultDescription = message.getStringProperty(Constants.DESCRIPTION);\n\n            dataObject = (ResponseMessage) message.getObject();\n        } catch (final IllegalArgumentException e) {\n            LOGGER.error(\"UNRECOVERABLE ERROR, received messageType {} is unknown.\", messageType, e);\n            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n\n            return;\n        } catch (final JMSException e) {\n            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n\n            return;\n        }\n\n        try {\n            LOGGER.info(\"Handle message of type {} for device {} with result: {}, description {}.\", messageType,\n                    deviceIdentification, resultType, resultDescription);\n            this.handleMessage(messageType, dataObject);\n        } catch (final RuntimeException e) {\n            handleError(e, correlationUid);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "DomainResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["debug", "getJMSCorrelationID", "getStringProperty", "getStringProperty", "valueOf", "getJMSType", "valueOf", "getStringProperty", "getStringProperty", "getObject", "error", "logDebugInformation", "error", "logDebugInformation", "info", "handleMessage", "handleError"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}