{"test_class": {"identifier": "RainbowColorMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "coastal-hazards-commons/src/test/java/gov/usgs/cida/utilities/colors/RainbowColorMapTest.java"}, "test_case": {"identifier": "testBlueish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBlueish() {\n        AttributeRange range = new AttributeRange(1900, 1975);\n\n        RainbowColorMap instance = new RainbowColorMap(range);\n        Color result = instance.valueToColor(1967);\n        String hex = ColorUtility.toHex(result);\n        assertThat(\"#0400FF\", is(equalTo(hex)));\n    }", "signature": "void testBlueish()", "full_signature": "@Test public void testBlueish()", "class_method_signature": "RainbowColorMapTest.testBlueish()", "testcase": true, "constructor": false, "invocations": ["valueToColor", "toHex", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "RainbowColorMap", "superclass": "", "interfaces": "implements ColorMap<Number>", "fields": [{"original_string": "private AttributeRange range;", "modifier": "private", "type": "AttributeRange", "declarator": "range", "var_name": "range"}, {"original_string": "private static final int FULL = 255;", "modifier": "private static final", "type": "int", "declarator": "FULL = 255", "var_name": "FULL"}, {"original_string": "private static final int EMPTY = 0;", "modifier": "private static final", "type": "int", "declarator": "EMPTY = 0", "var_name": "EMPTY"}, {"original_string": "private static final int RED = 0;", "modifier": "private static final", "type": "int", "declarator": "RED = 0", "var_name": "RED"}, {"original_string": "private static final int RED_TO_YELLOW = RED + 256;", "modifier": "private static final", "type": "int", "declarator": "RED_TO_YELLOW = RED + 256", "var_name": "RED_TO_YELLOW"}, {"original_string": "private static final int YELLOW_TO_GREEN = RED_TO_YELLOW + 256;", "modifier": "private static final", "type": "int", "declarator": "YELLOW_TO_GREEN = RED_TO_YELLOW + 256", "var_name": "YELLOW_TO_GREEN"}, {"original_string": "private static final int GREEN_TO_TEAL = YELLOW_TO_GREEN + 256;", "modifier": "private static final", "type": "int", "declarator": "GREEN_TO_TEAL = YELLOW_TO_GREEN + 256", "var_name": "GREEN_TO_TEAL"}, {"original_string": "private static final int TEAL_TO_BLUE = GREEN_TO_TEAL + 256;", "modifier": "private static final", "type": "int", "declarator": "TEAL_TO_BLUE = GREEN_TO_TEAL + 256", "var_name": "TEAL_TO_BLUE"}, {"original_string": "private static final int BLUE_TO_PURPLE = TEAL_TO_BLUE + 127;", "modifier": "private static final", "type": "int", "declarator": "BLUE_TO_PURPLE = TEAL_TO_BLUE + 127", "var_name": "BLUE_TO_PURPLE"}, {"original_string": "private static final int MAX_VALUES = BLUE_TO_PURPLE;", "modifier": "private static final", "type": "int", "declarator": "MAX_VALUES = BLUE_TO_PURPLE", "var_name": "MAX_VALUES"}], "methods": [{"identifier": "RainbowColorMap", "parameters": "(AttributeRange range)", "modifiers": "public", "return": "", "signature": " RainbowColorMap(AttributeRange range)", "full_signature": "public  RainbowColorMap(AttributeRange range)", "class_method_signature": "RainbowColorMap.RainbowColorMap(AttributeRange range)", "testcase": false, "constructor": true}, {"identifier": "valueToColor", "parameters": "(Number value)", "modifiers": "@Override public", "return": "Color", "signature": "Color valueToColor(Number value)", "full_signature": "@Override public Color valueToColor(Number value)", "class_method_signature": "RainbowColorMap.valueToColor(Number value)", "testcase": false, "constructor": false}], "file": "coastal-hazards-commons/src/main/java/gov/usgs/cida/utilities/colors/RainbowColorMap.java"}, "focal_method": {"identifier": "valueToColor", "parameters": "(Number value)", "modifiers": "@Override public", "return": "Color", "body": "@Override\n    public Color valueToColor(Number value) {\n        Color color = new Color(EMPTY, EMPTY, EMPTY);\n        \n        // if there is only one value make it RED\n        int index = 0;\n        if (range.extent != 0.0d) {\n            double coef = (value.doubleValue() - range.min) / range.extent;\n            index = (int)Math.floor(coef * MAX_VALUES);\n        }\n\n        if (index >= RED && index < RED_TO_YELLOW) {\n            int addToGreen = index - RED;\n            int red = FULL;\n            int green = EMPTY + addToGreen;\n            int blue = EMPTY;\n            color = new Color(red, green, blue);\n        } else if (index >= RED_TO_YELLOW && index < YELLOW_TO_GREEN) {\n            int removeFromRed = index - RED_TO_YELLOW;\n            int red = FULL - removeFromRed;\n            int green = FULL;\n            int blue = EMPTY;\n            color = new Color(red, green, blue);\n        } else if (index >= YELLOW_TO_GREEN && index < GREEN_TO_TEAL) {\n            int addToBlue = index - YELLOW_TO_GREEN;\n            int red = EMPTY;\n            int green = FULL;\n            int blue = EMPTY + addToBlue;\n            color = new Color(red, green, blue);\n        } else if (index >= GREEN_TO_TEAL && index < TEAL_TO_BLUE) {\n            int removeFromGreen = index - GREEN_TO_TEAL;\n            int red = EMPTY;\n            int green = FULL - removeFromGreen;\n            int blue = FULL;\n            color = new Color(red, green, blue);\n        } else if (index >= TEAL_TO_BLUE && index <= BLUE_TO_PURPLE) {\n            int addToRed = index - TEAL_TO_BLUE;\n            int red = EMPTY + addToRed;\n            int green = EMPTY;\n            int blue = FULL;\n            color = new Color(red, green, blue);\n        }\n        \n        return color;\n    }", "signature": "Color valueToColor(Number value)", "full_signature": "@Override public Color valueToColor(Number value)", "class_method_signature": "RainbowColorMap.valueToColor(Number value)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "floor"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}