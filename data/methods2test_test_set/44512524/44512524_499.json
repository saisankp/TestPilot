{"test_class": {"identifier": "GroupTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/quantile/GroupTreeTest.java"}, "test_case": {"identifier": "testFloor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloor() {\n        // mostly tested in other tests\n        GroupTree x = new GroupTree();\n        for (int i = 0; i < 101; i++) {\n            x.add(new TDigest.Group(i / 2));\n        }\n\n        assertNull(x.floor(new TDigest.Group(-30)));\n    }", "signature": "void testFloor()", "full_signature": "@Test public void testFloor()", "class_method_signature": "GroupTreeTest.testFloor()", "testcase": true, "constructor": false, "invocations": ["add", "assertNull", "floor"]}, "focal_class": {"identifier": "GroupTree", "superclass": "", "interfaces": "implements Iterable<TDigest.Group>", "fields": [{"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private int depth;", "modifier": "private", "type": "int", "declarator": "depth", "var_name": "depth"}, {"original_string": "private TDigest.Group leaf;", "modifier": "private", "type": "TDigest.Group", "declarator": "leaf", "var_name": "leaf"}, {"original_string": "private GroupTree left, right;", "modifier": "private", "type": "GroupTree", "declarator": "left", "var_name": "left"}], "methods": [{"identifier": "GroupTree", "parameters": "()", "modifiers": "public", "return": "", "signature": " GroupTree()", "full_signature": "public  GroupTree()", "class_method_signature": "GroupTree.GroupTree()", "testcase": false, "constructor": true}, {"identifier": "GroupTree", "parameters": "(TDigest.Group leaf)", "modifiers": "public", "return": "", "signature": " GroupTree(TDigest.Group leaf)", "full_signature": "public  GroupTree(TDigest.Group leaf)", "class_method_signature": "GroupTree.GroupTree(TDigest.Group leaf)", "testcase": false, "constructor": true}, {"identifier": "GroupTree", "parameters": "(GroupTree left, GroupTree right)", "modifiers": "public", "return": "", "signature": " GroupTree(GroupTree left, GroupTree right)", "full_signature": "public  GroupTree(GroupTree left, GroupTree right)", "class_method_signature": "GroupTree.GroupTree(GroupTree left, GroupTree right)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(TDigest.Group group)", "modifiers": "public", "return": "void", "signature": "void add(TDigest.Group group)", "full_signature": "public void add(TDigest.Group group)", "class_method_signature": "GroupTree.add(TDigest.Group group)", "testcase": false, "constructor": false}, {"identifier": "rebalance", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rebalance()", "full_signature": "private void rebalance()", "class_method_signature": "GroupTree.rebalance()", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(GroupTree a, GroupTree b, GroupTree c, GroupTree d)", "modifiers": "private", "return": "void", "signature": "void rotate(GroupTree a, GroupTree b, GroupTree c, GroupTree d)", "full_signature": "private void rotate(GroupTree a, GroupTree b, GroupTree c, GroupTree d)", "class_method_signature": "GroupTree.rotate(GroupTree a, GroupTree b, GroupTree c, GroupTree d)", "testcase": false, "constructor": false}, {"identifier": "depth", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int depth()", "full_signature": "private int depth()", "class_method_signature": "GroupTree.depth()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "GroupTree.size()", "testcase": false, "constructor": false}, {"identifier": "headCount", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "int", "signature": "int headCount(TDigest.Group base)", "full_signature": "public int headCount(TDigest.Group base)", "class_method_signature": "GroupTree.headCount(TDigest.Group base)", "testcase": false, "constructor": false}, {"identifier": "headSum", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "int", "signature": "int headSum(TDigest.Group base)", "full_signature": "public int headSum(TDigest.Group base)", "class_method_signature": "GroupTree.headSum(TDigest.Group base)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "TDigest.Group", "signature": "TDigest.Group first()", "full_signature": "public TDigest.Group first()", "class_method_signature": "GroupTree.first()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<TDigest.Group>", "signature": "Iterator<TDigest.Group> iterator()", "full_signature": "public Iterator<TDigest.Group> iterator()", "class_method_signature": "GroupTree.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(final TDigest.Group start)", "modifiers": "private", "return": "Iterator<TDigest.Group>", "signature": "Iterator<TDigest.Group> iterator(final TDigest.Group start)", "full_signature": "private Iterator<TDigest.Group> iterator(final TDigest.Group start)", "class_method_signature": "GroupTree.iterator(final TDigest.Group start)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "void", "signature": "void remove(TDigest.Group base)", "full_signature": "public void remove(TDigest.Group base)", "class_method_signature": "GroupTree.remove(TDigest.Group base)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "TDigest.Group", "signature": "TDigest.Group floor(TDigest.Group base)", "full_signature": "public TDigest.Group floor(TDigest.Group base)", "class_method_signature": "GroupTree.floor(TDigest.Group base)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "TDigest.Group", "signature": "TDigest.Group last()", "full_signature": "public TDigest.Group last()", "class_method_signature": "GroupTree.last()", "testcase": false, "constructor": false}, {"identifier": "ceiling", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "TDigest.Group", "signature": "TDigest.Group ceiling(TDigest.Group base)", "full_signature": "public TDigest.Group ceiling(TDigest.Group base)", "class_method_signature": "GroupTree.ceiling(TDigest.Group base)", "testcase": false, "constructor": false}, {"identifier": "tailSet", "parameters": "(final TDigest.Group start)", "modifiers": "public", "return": "Iterable<TDigest.Group>", "signature": "Iterable<TDigest.Group> tailSet(final TDigest.Group start)", "full_signature": "public Iterable<TDigest.Group> tailSet(final TDigest.Group start)", "class_method_signature": "GroupTree.tailSet(final TDigest.Group start)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int sum()", "full_signature": "public int sum()", "class_method_signature": "GroupTree.sum()", "testcase": false, "constructor": false}, {"identifier": "checkBalance", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkBalance()", "full_signature": "public void checkBalance()", "class_method_signature": "GroupTree.checkBalance()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(int depth)", "modifiers": "public", "return": "void", "signature": "void print(int depth)", "full_signature": "public void print(int depth)", "class_method_signature": "GroupTree.print(int depth)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/quantile/GroupTree.java"}, "focal_method": {"identifier": "floor", "parameters": "(TDigest.Group base)", "modifiers": "public", "return": "TDigest.Group", "body": "public TDigest.Group floor(TDigest.Group base) {\n        if (size == 0) {\n            return null;\n        } else {\n            if (size == 1) {\n                return base.compareTo(leaf) >= 0 ? leaf : null;\n            } else {\n                if (base.compareTo(leaf) < 0) {\n                    return left.floor(base);\n                } else {\n                    TDigest.Group floor = right.floor(base);\n                    if (floor == null) {\n                        floor = left.last();\n                    }\n                    return floor;\n                }\n            }\n        }\n    }", "signature": "TDigest.Group floor(TDigest.Group base)", "full_signature": "public TDigest.Group floor(TDigest.Group base)", "class_method_signature": "GroupTree.floor(TDigest.Group base)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo", "floor", "floor", "last"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}