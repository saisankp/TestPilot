{"test_class": {"identifier": "ViolationSupportWeightFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestAUGBuilder patternBuilder;", "modifier": "private", "type": "TestAUGBuilder", "declarator": "patternBuilder", "var_name": "patternBuilder"}, {"original_string": "private Overlap violation;", "modifier": "private", "type": "Overlap", "declarator": "violation", "var_name": "violation"}, {"original_string": "private Overlaps overlaps;", "modifier": "private", "type": "Overlaps", "declarator": "overlaps", "var_name": "overlaps"}], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/ViolationSupportWeightFunctionTest.java"}, "test_case": {"identifier": "calculatesViolationSupportWeight_anEqualViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculatesViolationSupportWeight_anEqualViolation() {\n        TestAUGBuilder anotherTarget = buildAUG().withActionNode(\"a\");\n        Overlap anEqualViolation = buildOverlap(patternBuilder, anotherTarget).withNode(\"a\", \"a\").build();\n        overlaps.addViolation(anEqualViolation);\n        ViolationWeightFunction weightFunction = new ViolationSupportWeightFunction();\n\n        double weight = weightFunction.getWeight(violation, overlaps, null);\n\n        assertThat(weight, is(0.5));\n    }", "signature": "void calculatesViolationSupportWeight_anEqualViolation()", "full_signature": "@Test public void calculatesViolationSupportWeight_anEqualViolation()", "class_method_signature": "ViolationSupportWeightFunctionTest.calculatesViolationSupportWeight_anEqualViolation()", "testcase": true, "constructor": false, "invocations": ["withActionNode", "buildAUG", "build", "withNode", "buildOverlap", "addViolation", "getWeight", "assertThat", "is"]}, "focal_class": {"identifier": "ViolationSupportWeightFunction", "superclass": "", "interfaces": "implements ViolationWeightFunction", "fields": [], "methods": [{"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ViolationSupportWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getFormula", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "String", "signature": "String getFormula(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public String getFormula(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ViolationSupportWeightFunction.getFormula(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "ViolationSupportWeightFunction.getId()", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/ViolationSupportWeightFunction.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Overlap violation, Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getWeight(Overlap violation, Overlaps overlaps, Model model) {\n        return 1.0 / overlaps.getNumberOfEqualViolations(violation);\n    }", "signature": "double getWeight(Overlap violation, Overlaps overlaps, Model model)", "full_signature": "@Override public double getWeight(Overlap violation, Overlaps overlaps, Model model)", "class_method_signature": "ViolationSupportWeightFunction.getWeight(Overlap violation, Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["getNumberOfEqualViolations"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}