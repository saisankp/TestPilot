{"test_class": {"identifier": "TestMarcSynthesizedOutput", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.implementation.marc/src/test/java/org/jvoicexml/implementation/marc/TestMarcSynthesizedOutput.java"}, "test_case": {"identifier": "testQueueSpeakable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueueSpeakable() throws Exception, JVoiceXMLEvent {\n        final SsmlDocument doc = new SsmlDocument();\n        final Speak speak = doc.getSpeak();\n        speak.addText(\"This is a test!\");\n        final SpeakableSsmlText speakable = new SpeakableSsmlText(doc);\n        final MarcSynthesizedOutput output = new MarcSynthesizedOutput();\n        output.activate();\n        output.connect(null);\n        output.queueSpeakable(speakable, null, null);\n    }", "signature": "void testQueueSpeakable()", "full_signature": "@Test public void testQueueSpeakable()", "class_method_signature": "TestMarcSynthesizedOutput.testQueueSpeakable()", "testcase": true, "constructor": false, "invocations": ["getSpeak", "addText", "activate", "connect", "queueSpeakable"]}, "focal_class": {"identifier": "MarcSynthesizedOutput", "superclass": "", "interfaces": "implements SynthesizedOutput, MarcClient", "fields": [{"original_string": "private static final Logger LOGGER =\n            Logger.getLogger(MarcSynthesizedOutput.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            Logger.getLogger(MarcSynthesizedOutput.class)", "var_name": "LOGGER"}, {"original_string": "private static final String MARC_NAMESPACE_URI = \"http://marc.limsi.fr/\";", "modifier": "private static final", "type": "String", "declarator": "MARC_NAMESPACE_URI = \"http://marc.limsi.fr/\"", "var_name": "MARC_NAMESPACE_URI"}, {"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private String type;", "modifier": "private", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private DatagramSocket socket;", "modifier": "private", "type": "DatagramSocket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private InetAddress host;", "modifier": "private", "type": "InetAddress", "declarator": "host", "var_name": "host"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private int feedbackPort;", "modifier": "private", "type": "int", "declarator": "feedbackPort", "var_name": "feedbackPort"}, {"original_string": "private MarcFeedback feedback;", "modifier": "private", "type": "MarcFeedback", "declarator": "feedback", "var_name": "feedback"}, {"original_string": "private final Collection<SynthesizedOutputListener> listeners;", "modifier": "private final", "type": "Collection<SynthesizedOutputListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private final SpeakableQueue speakables;", "modifier": "private final", "type": "SpeakableQueue", "declarator": "speakables", "var_name": "speakables"}, {"original_string": "private String sessionId;", "modifier": "private", "type": "String", "declarator": "sessionId", "var_name": "sessionId"}, {"original_string": "private int marcEventId;", "modifier": "private", "type": "int", "declarator": "marcEventId", "var_name": "marcEventId"}, {"original_string": "private ExternalMarcPublisher external;", "modifier": "private", "type": "ExternalMarcPublisher", "declarator": "external", "var_name": "external"}, {"original_string": "private String voice;", "modifier": "private", "type": "String", "declarator": "voice", "var_name": "voice"}, {"original_string": "private String defaultLocale;", "modifier": "private", "type": "String", "declarator": "defaultLocale", "var_name": "defaultLocale"}], "methods": [{"identifier": "MarcSynthesizedOutput", "parameters": "()", "modifiers": "public", "return": "", "signature": " MarcSynthesizedOutput()", "full_signature": "public  MarcSynthesizedOutput()", "class_method_signature": "MarcSynthesizedOutput.MarcSynthesizedOutput()", "testcase": false, "constructor": true}, {"identifier": "setExternalMarcPublisher", "parameters": "(\n            final ExternalMarcPublisher publisher)", "modifiers": "public", "return": "void", "signature": "void setExternalMarcPublisher(\n            final ExternalMarcPublisher publisher)", "full_signature": "public void setExternalMarcPublisher(\n            final ExternalMarcPublisher publisher)", "class_method_signature": "MarcSynthesizedOutput.setExternalMarcPublisher(\n            final ExternalMarcPublisher publisher)", "testcase": false, "constructor": false}, {"identifier": "getExternalMarcPublisher", "parameters": "()", "modifiers": "public", "return": "ExternalMarcPublisher", "signature": "ExternalMarcPublisher getExternalMarcPublisher()", "full_signature": "public ExternalMarcPublisher getExternalMarcPublisher()", "class_method_signature": "MarcSynthesizedOutput.getExternalMarcPublisher()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(final String value)", "modifiers": "public", "return": "void", "signature": "void setHost(final String value)", "full_signature": "public void setHost(final String value)", "class_method_signature": "MarcSynthesizedOutput.setHost(final String value)", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(final int portNumber)", "modifiers": "public", "return": "void", "signature": "void setPort(final int portNumber)", "full_signature": "public void setPort(final int portNumber)", "class_method_signature": "MarcSynthesizedOutput.setPort(final int portNumber)", "testcase": false, "constructor": false}, {"identifier": "setFeedbackPort", "parameters": "(final int portNumber)", "modifiers": "public", "return": "void", "signature": "void setFeedbackPort(final int portNumber)", "full_signature": "public void setFeedbackPort(final int portNumber)", "class_method_signature": "MarcSynthesizedOutput.setFeedbackPort(final int portNumber)", "testcase": false, "constructor": false}, {"identifier": "setVoice", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setVoice(final String name)", "full_signature": "public void setVoice(final String name)", "class_method_signature": "MarcSynthesizedOutput.setVoice(final String name)", "testcase": false, "constructor": false}, {"identifier": "setDefaultLocale", "parameters": "(final String locale)", "modifiers": "public", "return": "void", "signature": "void setDefaultLocale(final String locale)", "full_signature": "public void setDefaultLocale(final String locale)", "class_method_signature": "MarcSynthesizedOutput.setDefaultLocale(final String locale)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getType()", "full_signature": "@Override public String getType()", "class_method_signature": "MarcSynthesizedOutput.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(final String typeName)", "modifiers": "", "return": "void", "signature": "void setType(final String typeName)", "full_signature": " void setType(final String typeName)", "class_method_signature": "MarcSynthesizedOutput.setType(final String typeName)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "MarcSynthesizedOutput.open()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void activate()", "full_signature": "@Override public void activate()", "class_method_signature": "MarcSynthesizedOutput.activate()", "testcase": false, "constructor": false}, {"identifier": "passivate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void passivate()", "full_signature": "@Override public void passivate()", "class_method_signature": "MarcSynthesizedOutput.passivate()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MarcSynthesizedOutput.close()", "testcase": false, "constructor": false}, {"identifier": "isBusy", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBusy()", "full_signature": "@Override public boolean isBusy()", "class_method_signature": "MarcSynthesizedOutput.isBusy()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void connect()", "full_signature": "private void connect()", "class_method_signature": "MarcSynthesizedOutput.connect()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disconnect()", "full_signature": "private void disconnect()", "class_method_signature": "MarcSynthesizedOutput.disconnect()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final ConnectionInformation client)", "modifiers": "@Override public", "return": "void", "signature": "void connect(final ConnectionInformation client)", "full_signature": "@Override public void connect(final ConnectionInformation client)", "class_method_signature": "MarcSynthesizedOutput.connect(final ConnectionInformation client)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "(final ConnectionInformation client)", "modifiers": "@Override public", "return": "void", "signature": "void disconnect(final ConnectionInformation client)", "full_signature": "@Override public void disconnect(final ConnectionInformation client)", "class_method_signature": "MarcSynthesizedOutput.disconnect(final ConnectionInformation client)", "testcase": false, "constructor": false}, {"identifier": "supportsBargeIn", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsBargeIn()", "full_signature": "@Override public boolean supportsBargeIn()", "class_method_signature": "MarcSynthesizedOutput.supportsBargeIn()", "testcase": false, "constructor": false}, {"identifier": "cancelOutput", "parameters": "(final BargeInType bargeInType)", "modifiers": "@Override public", "return": "void", "signature": "void cancelOutput(final BargeInType bargeInType)", "full_signature": "@Override public void cancelOutput(final BargeInType bargeInType)", "class_method_signature": "MarcSynthesizedOutput.cancelOutput(final BargeInType bargeInType)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(final SynthesizedOutputListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(final SynthesizedOutputListener listener)", "full_signature": "@Override public void addListener(final SynthesizedOutputListener listener)", "class_method_signature": "MarcSynthesizedOutput.addListener(final SynthesizedOutputListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(final SynthesizedOutputListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(final SynthesizedOutputListener listener)", "full_signature": "@Override public void removeListener(final SynthesizedOutputListener listener)", "class_method_signature": "MarcSynthesizedOutput.removeListener(final SynthesizedOutputListener listener)", "testcase": false, "constructor": false}, {"identifier": "queueSpeakable", "parameters": "(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "modifiers": "@Override public", "return": "void", "signature": "void queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "full_signature": "@Override public void queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "class_method_signature": "MarcSynthesizedOutput.queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "testcase": false, "constructor": false}, {"identifier": "sendNextSpeakable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sendNextSpeakable()", "full_signature": "private void sendNextSpeakable()", "class_method_signature": "MarcSynthesizedOutput.sendNextSpeakable()", "testcase": false, "constructor": false}, {"identifier": "sendToMarc", "parameters": "(final String bml)", "modifiers": "@Override public", "return": "void", "signature": "void sendToMarc(final String bml)", "full_signature": "@Override public void sendToMarc(final String bml)", "class_method_signature": "MarcSynthesizedOutput.sendToMarc(final String bml)", "testcase": false, "constructor": false}, {"identifier": "createBML", "parameters": "(final String utterance, final SsmlDocument ssml)", "modifiers": "private", "return": "String", "signature": "String createBML(final String utterance, final SsmlDocument ssml)", "full_signature": "private String createBML(final String utterance, final SsmlDocument ssml)", "class_method_signature": "MarcSynthesizedOutput.createBML(final String utterance, final SsmlDocument ssml)", "testcase": false, "constructor": false}, {"identifier": "writeMarcNode", "parameters": "(final XMLStreamWriter writer, final Node node)", "modifiers": "private", "return": "void", "signature": "void writeMarcNode(final XMLStreamWriter writer, final Node node)", "full_signature": "private void writeMarcNode(final XMLStreamWriter writer, final Node node)", "class_method_signature": "MarcSynthesizedOutput.writeMarcNode(final XMLStreamWriter writer, final Node node)", "testcase": false, "constructor": false}, {"identifier": "playEnded", "parameters": "(final String id)", "modifiers": "", "return": "void", "signature": "void playEnded(final String id)", "full_signature": " void playEnded(final String id)", "class_method_signature": "MarcSynthesizedOutput.playEnded(final String id)", "testcase": false, "constructor": false}, {"identifier": "waitNonBargeInPlayed", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitNonBargeInPlayed()", "full_signature": "@Override public void waitNonBargeInPlayed()", "class_method_signature": "MarcSynthesizedOutput.waitNonBargeInPlayed()", "testcase": false, "constructor": false}, {"identifier": "waitQueueEmpty", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void waitQueueEmpty()", "full_signature": "@Override public void waitQueueEmpty()", "class_method_signature": "MarcSynthesizedOutput.waitQueueEmpty()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.implementation.marc/src/main/java/org/jvoicexml/implementation/marc/MarcSynthesizedOutput.java"}, "focal_method": {"identifier": "queueSpeakable", "parameters": "(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)\n        throws NoresourceError,\n            BadFetchError {\n        synchronized (speakables) {\n            sessionId = id;\n            speakables.offer(speakable);\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"queued speakable '\" + speakable + \"'\");\n            }\n            if (speakables.size() == 1) {\n                sendNextSpeakable();\n            }\n        }\n    }", "signature": "void queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "full_signature": "@Override public void queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "class_method_signature": "MarcSynthesizedOutput.queueSpeakable(final SpeakableText speakable,\n            final String id, final DocumentServer documentServer)", "testcase": false, "constructor": false, "invocations": ["offer", "isDebugEnabled", "debug", "size", "sendNextSpeakable"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}