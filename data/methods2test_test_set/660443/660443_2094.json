{"test_class": {"identifier": "InChIGeneratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "protected static InChIGeneratorFactory factory;", "modifier": "protected static", "type": "InChIGeneratorFactory", "declarator": "factory", "var_name": "factory"}], "file": "storage/inchi/src/test/java/org/openscience/cdk/inchi/InChIGeneratorTest.java"}, "test_case": {"identifier": "bug1295", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bug1295() throws Exception {\n        MDLV2000Reader reader = new MDLV2000Reader(getClass().getResourceAsStream(\"/data/mdl/bug1295.mol\"));\n        try {\n            IAtomContainer container = reader.read(new AtomContainer());\n            InChIGenerator generator = getFactory().getInChIGenerator(container);\n            Assert.assertEquals(\"InChI=1S/C7H15NO/c1-4-7(3)6-8-9-5-2/h6-7H,4-5H2,1-3H3\", generator.getInchi());\n        } finally {\n            reader.close();\n        }\n    }", "signature": "void bug1295()", "full_signature": "@Test public void bug1295()", "class_method_signature": "InChIGeneratorTest.bug1295()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "read", "getInChIGenerator", "getFactory", "assertEquals", "getInchi", "close"]}, "focal_class": {"identifier": "InChIGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected JniInchiInput input;", "modifier": "protected", "type": "JniInchiInput", "declarator": "input", "var_name": "input"}, {"original_string": "protected JniInchiOutput output;", "modifier": "protected", "type": "JniInchiOutput", "declarator": "output", "var_name": "output"}, {"original_string": "private final boolean auxNone;", "modifier": "private final", "type": "boolean", "declarator": "auxNone", "var_name": "auxNone"}, {"original_string": "private static final ILoggingTool LOGGER = LoggingToolFactory.createLoggingTool(InChIGenerator.class);", "modifier": "private static final", "type": "ILoggingTool", "declarator": "LOGGER = LoggingToolFactory.createLoggingTool(InChIGenerator.class)", "var_name": "LOGGER"}, {"original_string": "protected IAtomContainer atomContainer;", "modifier": "protected", "type": "IAtomContainer", "declarator": "atomContainer", "var_name": "atomContainer"}], "methods": [{"identifier": "InChIGenerator", "parameters": "(IAtomContainer atomContainer, boolean ignoreAromaticBonds)", "modifiers": "protected", "return": "", "signature": " InChIGenerator(IAtomContainer atomContainer, boolean ignoreAromaticBonds)", "full_signature": "protected  InChIGenerator(IAtomContainer atomContainer, boolean ignoreAromaticBonds)", "class_method_signature": "InChIGenerator.InChIGenerator(IAtomContainer atomContainer, boolean ignoreAromaticBonds)", "testcase": false, "constructor": true}, {"identifier": "InChIGenerator", "parameters": "(IAtomContainer atomContainer, String options, boolean ignoreAromaticBonds)", "modifiers": "protected", "return": "", "signature": " InChIGenerator(IAtomContainer atomContainer, String options, boolean ignoreAromaticBonds)", "full_signature": "protected  InChIGenerator(IAtomContainer atomContainer, String options, boolean ignoreAromaticBonds)", "class_method_signature": "InChIGenerator.InChIGenerator(IAtomContainer atomContainer, String options, boolean ignoreAromaticBonds)", "testcase": false, "constructor": true}, {"identifier": "InChIGenerator", "parameters": "(IAtomContainer atomContainer, List<INCHI_OPTION> options, boolean ignoreAromaticBonds)", "modifiers": "protected", "return": "", "signature": " InChIGenerator(IAtomContainer atomContainer, List<INCHI_OPTION> options, boolean ignoreAromaticBonds)", "full_signature": "protected  InChIGenerator(IAtomContainer atomContainer, List<INCHI_OPTION> options, boolean ignoreAromaticBonds)", "class_method_signature": "InChIGenerator.InChIGenerator(IAtomContainer atomContainer, List<INCHI_OPTION> options, boolean ignoreAromaticBonds)", "testcase": false, "constructor": true}, {"identifier": "generateInchiFromCDKAtomContainer", "parameters": "(IAtomContainer atomContainer, boolean ignore)", "modifiers": "private", "return": "void", "signature": "void generateInchiFromCDKAtomContainer(IAtomContainer atomContainer, boolean ignore)", "full_signature": "private void generateInchiFromCDKAtomContainer(IAtomContainer atomContainer, boolean ignore)", "class_method_signature": "InChIGenerator.generateInchiFromCDKAtomContainer(IAtomContainer atomContainer, boolean ignore)", "testcase": false, "constructor": false}, {"identifier": "onlySingleBonded", "parameters": "(List<IBond> bonds)", "modifiers": "private static", "return": "List<IBond>", "signature": "List<IBond> onlySingleBonded(List<IBond> bonds)", "full_signature": "private static List<IBond> onlySingleBonded(List<IBond> bonds)", "class_method_signature": "InChIGenerator.onlySingleBonded(List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(Object[] objs, int i, int j)", "modifiers": "private static", "return": "void", "signature": "void swap(Object[] objs, int i, int j)", "full_signature": "private static void swap(Object[] objs, int i, int j)", "class_method_signature": "InChIGenerator.swap(Object[] objs, int i, int j)", "testcase": false, "constructor": false}, {"identifier": "getReturnStatus", "parameters": "()", "modifiers": "public", "return": "INCHI_RET", "signature": "INCHI_RET getReturnStatus()", "full_signature": "public INCHI_RET getReturnStatus()", "class_method_signature": "InChIGenerator.getReturnStatus()", "testcase": false, "constructor": false}, {"identifier": "getInchi", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInchi()", "full_signature": "public String getInchi()", "class_method_signature": "InChIGenerator.getInchi()", "testcase": false, "constructor": false}, {"identifier": "getInchiKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInchiKey()", "full_signature": "public String getInchiKey()", "class_method_signature": "InChIGenerator.getInchiKey()", "testcase": false, "constructor": false}, {"identifier": "getAuxInfo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuxInfo()", "full_signature": "public String getAuxInfo()", "class_method_signature": "InChIGenerator.getAuxInfo()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMessage()", "full_signature": "public String getMessage()", "class_method_signature": "InChIGenerator.getMessage()", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLog()", "full_signature": "public String getLog()", "class_method_signature": "InChIGenerator.getLog()", "testcase": false, "constructor": false}], "file": "storage/inchi/src/main/java/org/openscience/cdk/inchi/InChIGenerator.java"}, "focal_method": {"identifier": "getInchi", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getInchi() {\n        return (output.getInchi());\n    }", "signature": "String getInchi()", "full_signature": "public String getInchi()", "class_method_signature": "InChIGenerator.getInchi()", "testcase": false, "constructor": false, "invocations": ["getInchi"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}