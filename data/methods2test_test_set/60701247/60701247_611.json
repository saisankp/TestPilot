{"test_class": {"identifier": "MemoryProfilerStageViewTest", "superclass": "extends MemoryProfilerTestBase", "interfaces": "", "fields": [{"original_string": "@NotNull private final FakeTransportService myTransportService = new FakeTransportService(myTimer);", "modifier": "@NotNull private final", "type": "FakeTransportService", "declarator": "myTransportService = new FakeTransportService(myTimer)", "var_name": "myTransportService"}, {"original_string": "@NotNull private final FakeMemoryService myService = new FakeMemoryService(myTransportService);", "modifier": "@NotNull private final", "type": "FakeMemoryService", "declarator": "myService = new FakeMemoryService(myTransportService)", "var_name": "myService"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryProfilerStageViewTestChannel\", myTransportService, myService, new FakeProfilerService(myTimer),\n                        new FakeCpuService(), new FakeEventService(), new FakeNetworkService.Builder().build());", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"MemoryProfilerStageViewTestChannel\", myTransportService, myService, new FakeProfilerService(myTimer),\n                        new FakeCpuService(), new FakeEventService(), new FakeNetworkService.Builder().build())", "var_name": "myGrpcChannel"}, {"original_string": "private StudioProfilersView myProfilersView;", "modifier": "private", "type": "StudioProfilersView", "declarator": "myProfilersView", "var_name": "myProfilersView"}, {"original_string": "private final boolean myUnifiedPipeline;", "modifier": "private final", "type": "boolean", "declarator": "myUnifiedPipeline", "var_name": "myUnifiedPipeline"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/memory/MemoryProfilerStageViewTest.java"}, "test_case": {"identifier": "testAllocationSamplingRateAttachment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAllocationSamplingRateAttachment() {\n    Common.Device device =\n      Common.Device.newBuilder().setDeviceId(1).setFeatureLevel(AndroidVersion.VersionCodes.O).setState(Common.Device.State.ONLINE).build();\n    Common.Process process = Common.Process.newBuilder().setDeviceId(1).setPid(2).setState(Common.Process.State.ALIVE).build();\n\n    // Set up test data from range 0us-10us. Note that the proto timestamps are in nanoseconds.\n    if (myUnifiedPipeline) {\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData.generateMemoryAllocStatsData(process.getPid(), 0, 0).build());\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData.generateMemoryAllocStatsData(process.getPid(), 10, 100).build());\n\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData\n          .generateMemoryAllocSamplingData(process.getPid(), 1, MemoryProfilerStage.LiveAllocationSamplingMode.FULL.getValue()).build());\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData\n          .generateMemoryAllocSamplingData(process.getPid(), 5, MemoryProfilerStage.LiveAllocationSamplingMode.SAMPLED.getValue()).build());\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData\n          .generateMemoryAllocSamplingData(process.getPid(), 8, MemoryProfilerStage.LiveAllocationSamplingMode.NONE.getValue()).build());\n      myTransportService.addEventToStream(\n        device.getDeviceId(), ProfilersTestData\n          .generateMemoryAllocSamplingData(process.getPid(), 10, MemoryProfilerStage.LiveAllocationSamplingMode.FULL.getValue()).build());\n    }\n    else {\n      MemoryData data = MemoryData.newBuilder()\n        .addAllocStatsSamples(MemoryData.AllocStatsSample.newBuilder().setTimestamp(0)\n                                .setAllocStats(Memory.MemoryAllocStatsData.newBuilder().setJavaAllocationCount(0)))\n        .addAllocStatsSamples(MemoryData.AllocStatsSample.newBuilder().setTimestamp(10000)\n                                .setAllocStats(Memory.MemoryAllocStatsData.newBuilder().setJavaAllocationCount(100)))\n        .addAllocSamplingRateEvents(AllocationSamplingRateEvent.newBuilder()\n                                      .setTimestamp(1000)\n                                      .setSamplingRate(MemoryAllocSamplingData.newBuilder()\n                                                         .setSamplingNumInterval(\n                                                           MemoryProfilerStage.LiveAllocationSamplingMode.FULL.getValue())))\n        .addAllocSamplingRateEvents(AllocationSamplingRateEvent.newBuilder()\n                                      .setTimestamp(5000)\n                                      .setSamplingRate(MemoryAllocSamplingData.newBuilder()\n                                                         .setSamplingNumInterval(\n                                                           MemoryProfilerStage.LiveAllocationSamplingMode.SAMPLED.getValue())))\n        .addAllocSamplingRateEvents(AllocationSamplingRateEvent.newBuilder()\n                                      .setTimestamp(8000)\n                                      .setSamplingRate(MemoryAllocSamplingData.newBuilder()\n                                                         .setSamplingNumInterval(\n                                                           MemoryProfilerStage.LiveAllocationSamplingMode.NONE.getValue())))\n        .addAllocSamplingRateEvents(AllocationSamplingRateEvent.newBuilder()\n                                      .setTimestamp(10000)\n                                      .setSamplingRate(MemoryAllocSamplingData.newBuilder()\n                                                         .setSamplingNumInterval(\n                                                           MemoryProfilerStage.LiveAllocationSamplingMode.FULL.getValue())))\n        .build();\n      myService.setMemoryData(data);\n    }\n\n    // Set up the correct agent and session state so that the MemoryProfilerStageView can be initialized properly.\n    myTransportService.setAgentStatus(Common.AgentData.newBuilder().setStatus(Common.AgentData.Status.ATTACHED).build());\n    myProfilers.getSessionsManager().endCurrentSession();\n    myTimer.tick(FakeTimer.ONE_SECOND_IN_NS);\n    myProfilers.getSessionsManager().beginSession(device.getDeviceId(), device, process);\n    myTimer.tick(FakeTimer.ONE_SECOND_IN_NS);\n    myProfilers.setStage(myStage);\n\n    // Reset the timeline so that both data range and view range stays at (0,10) on the next tick.\n    myStage.getTimeline().reset(0, TimeUnit.MICROSECONDS.toNanos(10));\n    myStage.getTimeline().getViewRange().set(0, 10);\n    MemoryProfilerStageView view = new MemoryProfilerStageView(myProfilersView, myStage);\n    // Tick a large enough time so that the renders interpolates to the final positions\n    myTimer.tick(FakeTimer.ONE_SECOND_IN_NS * 10);\n\n    DurationDataRenderer<AllocationSamplingRateDurationData> durationDataRenderer = view.getAllocationSamplingRateRenderer();\n    java.util.List<Rectangle2D.Float> renderedRegions = durationDataRenderer.getClickRegionCache();\n    assertThat(renderedRegions.size()).isEqualTo(4);\n    int iconWidth = StudioIcons.Profiler.Events.ALLOCATION_TRACKING_NONE.getIconWidth();\n    int iconHeight = StudioIcons.Profiler.Events.ALLOCATION_TRACKING_NONE.getIconHeight();\n    // Point should be attached due to start of FULL mode\n    validateRegion(renderedRegions.get(0), 0.1f, 0.9f, iconWidth, iconHeight);\n    // Point should be attached due to end of FULL mode\n    validateRegion(renderedRegions.get(1), 0.5f, 0.5f, iconWidth, iconHeight);\n    // Point should be detached because it's between SAMPLED and NONE modes\n    validateRegion(renderedRegions.get(2), 0.8f, 1f, iconWidth, iconHeight);\n    // Point should be attached due to start of FULL mode\n    validateRegion(renderedRegions.get(3), 1f, 0f, iconWidth, iconHeight);\n  }", "signature": "void testAllocationSamplingRateAttachment()", "full_signature": "@Test public void testAllocationSamplingRateAttachment()", "class_method_signature": "MemoryProfilerStageViewTest.testAllocationSamplingRateAttachment()", "testcase": true, "constructor": false, "invocations": ["build", "setState", "setFeatureLevel", "setDeviceId", "newBuilder", "build", "setState", "setPid", "setDeviceId", "newBuilder", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocStatsData", "getPid", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocStatsData", "getPid", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocSamplingData", "getPid", "getValue", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocSamplingData", "getPid", "getValue", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocSamplingData", "getPid", "getValue", "addEventToStream", "getDeviceId", "build", "generateMemoryAllocSamplingData", "getPid", "getValue", "build", "addAllocSamplingRateEvents", "addAllocSamplingRateEvents", "addAllocSamplingRateEvents", "addAllocSamplingRateEvents", "addAllocStatsSamples", "addAllocStatsSamples", "newBuilder", "setAllocStats", "setTimestamp", "newBuilder", "setJavaAllocationCount", "newBuilder", "setAllocStats", "setTimestamp", "newBuilder", "setJavaAllocationCount", "newBuilder", "setSamplingRate", "setTimestamp", "newBuilder", "setSamplingNumInterval", "newBuilder", "getValue", "setSamplingRate", "setTimestamp", "newBuilder", "setSamplingNumInterval", "newBuilder", "getValue", "setSamplingRate", "setTimestamp", "newBuilder", "setSamplingNumInterval", "newBuilder", "getValue", "setSamplingRate", "setTimestamp", "newBuilder", "setSamplingNumInterval", "newBuilder", "getValue", "setMemoryData", "setAgentStatus", "build", "setStatus", "newBuilder", "endCurrentSession", "getSessionsManager", "tick", "beginSession", "getSessionsManager", "getDeviceId", "tick", "setStage", "reset", "getTimeline", "toNanos", "set", "getViewRange", "getTimeline", "tick", "getAllocationSamplingRateRenderer", "getClickRegionCache", "isEqualTo", "assertThat", "size", "getIconWidth", "getIconHeight", "validateRegion", "get", "validateRegion", "get", "validateRegion", "get", "validateRegion", "get"]}, "focal_class": {"identifier": "MemoryProfilerStageView", "superclass": "extends StageView<MemoryProfilerStage>", "interfaces": "", "fields": [{"original_string": "private static final String RECORD_TEXT = \"Record\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_TEXT = \"Record\"", "var_name": "RECORD_TEXT"}, {"original_string": "private static final String STOP_TEXT = \"Stop\";", "modifier": "private static final", "type": "String", "declarator": "STOP_TEXT = \"Stop\"", "var_name": "STOP_TEXT"}, {"original_string": "@NotNull private final MemoryCaptureView myCaptureView = new MemoryCaptureView(getStage(), getIdeComponents());", "modifier": "@NotNull private final", "type": "MemoryCaptureView", "declarator": "myCaptureView = new MemoryCaptureView(getStage(), getIdeComponents())", "var_name": "myCaptureView"}, {"original_string": "@NotNull private final MemoryHeapView myHeapView = new MemoryHeapView(getStage());", "modifier": "@NotNull private final", "type": "MemoryHeapView", "declarator": "myHeapView = new MemoryHeapView(getStage())", "var_name": "myHeapView"}, {"original_string": "@NotNull private final MemoryClassifierView myClassifierView = new MemoryClassifierView(getStage(), getIdeComponents());", "modifier": "@NotNull private final", "type": "MemoryClassifierView", "declarator": "myClassifierView = new MemoryClassifierView(getStage(), getIdeComponents())", "var_name": "myClassifierView"}, {"original_string": "@NotNull private final MemoryClassGrouping myClassGrouping = new MemoryClassGrouping(getStage());", "modifier": "@NotNull private final", "type": "MemoryClassGrouping", "declarator": "myClassGrouping = new MemoryClassGrouping(getStage())", "var_name": "myClassGrouping"}, {"original_string": "@NotNull private final MemoryInstanceFilterView myInstanceFilterView = new MemoryInstanceFilterView(getStage());", "modifier": "@NotNull private final", "type": "MemoryInstanceFilterView", "declarator": "myInstanceFilterView = new MemoryInstanceFilterView(getStage())", "var_name": "myInstanceFilterView"}, {"original_string": "@NotNull private final MemoryClassSetView myClassSetView = new MemoryClassSetView(getStage(), getIdeComponents());", "modifier": "@NotNull private final", "type": "MemoryClassSetView", "declarator": "myClassSetView = new MemoryClassSetView(getStage(), getIdeComponents())", "var_name": "myClassSetView"}, {"original_string": "@NotNull private final MemoryInstanceDetailsView myInstanceDetailsView = new MemoryInstanceDetailsView(getStage(), getIdeComponents());", "modifier": "@NotNull private final", "type": "MemoryInstanceDetailsView", "declarator": "myInstanceDetailsView = new MemoryInstanceDetailsView(getStage(), getIdeComponents())", "var_name": "myInstanceDetailsView"}, {"original_string": "@Nullable private RangeSelectionComponent myRangeSelectionComponent;", "modifier": "@Nullable private", "type": "RangeSelectionComponent", "declarator": "myRangeSelectionComponent", "var_name": "myRangeSelectionComponent"}, {"original_string": "@Nullable private CaptureObject myCaptureObject = null;", "modifier": "@Nullable private", "type": "CaptureObject", "declarator": "myCaptureObject = null", "var_name": "myCaptureObject"}, {"original_string": "@NotNull private final JBSplitter myMainSplitter = new JBSplitter(false);", "modifier": "@NotNull private final", "type": "JBSplitter", "declarator": "myMainSplitter = new JBSplitter(false)", "var_name": "myMainSplitter"}, {"original_string": "@NotNull private final JBSplitter myChartCaptureSplitter = new JBSplitter(true);", "modifier": "@NotNull private final", "type": "JBSplitter", "declarator": "myChartCaptureSplitter = new JBSplitter(true)", "var_name": "myChartCaptureSplitter"}, {"original_string": "@NotNull private final JPanel myCapturePanel;", "modifier": "@NotNull private final", "type": "JPanel", "declarator": "myCapturePanel", "var_name": "myCapturePanel"}, {"original_string": "@Nullable private LoadingPanel myCaptureLoadingPanel;", "modifier": "@Nullable private", "type": "LoadingPanel", "declarator": "myCaptureLoadingPanel", "var_name": "myCaptureLoadingPanel"}, {"original_string": "@NotNull private final JBSplitter myInstanceDetailsSplitter = new JBSplitter(true);", "modifier": "@NotNull private final", "type": "JBSplitter", "declarator": "myInstanceDetailsSplitter = new JBSplitter(true)", "var_name": "myInstanceDetailsSplitter"}, {"original_string": "@NotNull private JButton myForceGarbageCollectionButton;", "modifier": "@NotNull private", "type": "JButton", "declarator": "myForceGarbageCollectionButton", "var_name": "myForceGarbageCollectionButton"}, {"original_string": "@NotNull private JButton myHeapDumpButton;", "modifier": "@NotNull private", "type": "JButton", "declarator": "myHeapDumpButton", "var_name": "myHeapDumpButton"}, {"original_string": "@NotNull private JButton myAllocationButton;", "modifier": "@NotNull private", "type": "JButton", "declarator": "myAllocationButton", "var_name": "myAllocationButton"}, {"original_string": "@NotNull private JComboBox myAllocationSamplingRateDropDown;", "modifier": "@NotNull private", "type": "JComboBox", "declarator": "myAllocationSamplingRateDropDown", "var_name": "myAllocationSamplingRateDropDown"}, {"original_string": "@NotNull private ProfilerAction myForceGarbageCollectionAction;", "modifier": "@NotNull private", "type": "ProfilerAction", "declarator": "myForceGarbageCollectionAction", "var_name": "myForceGarbageCollectionAction"}, {"original_string": "@NotNull private ProfilerAction myHeapDumpAction;", "modifier": "@NotNull private", "type": "ProfilerAction", "declarator": "myHeapDumpAction", "var_name": "myHeapDumpAction"}, {"original_string": "@NotNull private ProfilerAction myAllocationAction;", "modifier": "@NotNull private", "type": "ProfilerAction", "declarator": "myAllocationAction", "var_name": "myAllocationAction"}, {"original_string": "@NotNull private ProfilerAction myStopAllocationAction;", "modifier": "@NotNull private", "type": "ProfilerAction", "declarator": "myStopAllocationAction", "var_name": "myStopAllocationAction"}, {"original_string": "@NotNull private final JLabel myCaptureElapsedTime;", "modifier": "@NotNull private final", "type": "JLabel", "declarator": "myCaptureElapsedTime", "var_name": "myCaptureElapsedTime"}, {"original_string": "@NotNull private final JLabel myCaptureInfoMessage;", "modifier": "@NotNull private final", "type": "JLabel", "declarator": "myCaptureInfoMessage", "var_name": "myCaptureInfoMessage"}, {"original_string": "@NotNull private final JLabel myAllocationSamplingRateLabel;", "modifier": "@NotNull private final", "type": "JLabel", "declarator": "myAllocationSamplingRateLabel", "var_name": "myAllocationSamplingRateLabel"}, {"original_string": "@NotNull private DurationDataRenderer<GcDurationData> myGcDurationDataRenderer;", "modifier": "@NotNull private", "type": "DurationDataRenderer<GcDurationData>", "declarator": "myGcDurationDataRenderer", "var_name": "myGcDurationDataRenderer"}, {"original_string": "@NotNull private DurationDataRenderer<AllocationSamplingRateDurationData> myAllocationSamplingRateRenderer;", "modifier": "@NotNull private", "type": "DurationDataRenderer<AllocationSamplingRateDurationData>", "declarator": "myAllocationSamplingRateRenderer", "var_name": "myAllocationSamplingRateRenderer"}], "methods": [{"identifier": "getLogger", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "private static Logger getLogger()", "class_method_signature": "MemoryProfilerStageView.getLogger()", "testcase": false, "constructor": false}, {"identifier": "MemoryProfilerStageView", "parameters": "(@NotNull StudioProfilersView profilersView, @NotNull MemoryProfilerStage stage)", "modifiers": "public", "return": "", "signature": " MemoryProfilerStageView(@NotNull StudioProfilersView profilersView, @NotNull MemoryProfilerStage stage)", "full_signature": "public  MemoryProfilerStageView(@NotNull StudioProfilersView profilersView, @NotNull MemoryProfilerStage stage)", "class_method_signature": "MemoryProfilerStageView.MemoryProfilerStageView(@NotNull StudioProfilersView profilersView, @NotNull MemoryProfilerStage stage)", "testcase": false, "constructor": true}, {"identifier": "isToolbarVisible", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isToolbarVisible()", "full_signature": "@Override public boolean isToolbarVisible()", "class_method_signature": "MemoryProfilerStageView.isToolbarVisible()", "testcase": false, "constructor": false}, {"identifier": "getGarbageCollectionButtion", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JButton", "signature": "JButton getGarbageCollectionButtion()", "full_signature": "@VisibleForTesting JButton getGarbageCollectionButtion()", "class_method_signature": "MemoryProfilerStageView.getGarbageCollectionButtion()", "testcase": false, "constructor": false}, {"identifier": "getHeapDumpButton", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JButton", "signature": "JButton getHeapDumpButton()", "full_signature": "@VisibleForTesting JButton getHeapDumpButton()", "class_method_signature": "MemoryProfilerStageView.getHeapDumpButton()", "testcase": false, "constructor": false}, {"identifier": "getAllocationButton", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JButton", "signature": "JButton getAllocationButton()", "full_signature": "@VisibleForTesting JButton getAllocationButton()", "class_method_signature": "MemoryProfilerStageView.getAllocationButton()", "testcase": false, "constructor": false}, {"identifier": "getAllocationCaptureElaspedTimeLabel", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JLabel", "signature": "JLabel getAllocationCaptureElaspedTimeLabel()", "full_signature": "@VisibleForTesting JLabel getAllocationCaptureElaspedTimeLabel()", "class_method_signature": "MemoryProfilerStageView.getAllocationCaptureElaspedTimeLabel()", "testcase": false, "constructor": false}, {"identifier": "getAllocationSamplingRateDropDown", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JComboBox", "signature": "JComboBox getAllocationSamplingRateDropDown()", "full_signature": "@VisibleForTesting JComboBox getAllocationSamplingRateDropDown()", "class_method_signature": "MemoryProfilerStageView.getAllocationSamplingRateDropDown()", "testcase": false, "constructor": false}, {"identifier": "getAllocationSamplingRateLabel", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "JLabel", "signature": "JLabel getAllocationSamplingRateLabel()", "full_signature": "@VisibleForTesting JLabel getAllocationSamplingRateLabel()", "class_method_signature": "MemoryProfilerStageView.getAllocationSamplingRateLabel()", "testcase": false, "constructor": false}, {"identifier": "getGcDurationDataRenderer", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DurationDataRenderer<GcDurationData>", "signature": "DurationDataRenderer<GcDurationData> getGcDurationDataRenderer()", "full_signature": "@VisibleForTesting DurationDataRenderer<GcDurationData> getGcDurationDataRenderer()", "class_method_signature": "MemoryProfilerStageView.getGcDurationDataRenderer()", "testcase": false, "constructor": false}, {"identifier": "getAllocationSamplingRateRenderer", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DurationDataRenderer<AllocationSamplingRateDurationData>", "signature": "DurationDataRenderer<AllocationSamplingRateDurationData> getAllocationSamplingRateRenderer()", "full_signature": "@VisibleForTesting DurationDataRenderer<AllocationSamplingRateDurationData> getAllocationSamplingRateRenderer()", "class_method_signature": "MemoryProfilerStageView.getAllocationSamplingRateRenderer()", "testcase": false, "constructor": false}, {"identifier": "getToolbar", "parameters": "()", "modifiers": "@Override public", "return": "JComponent", "signature": "JComponent getToolbar()", "full_signature": "@Override public JComponent getToolbar()", "class_method_signature": "MemoryProfilerStageView.getToolbar()", "testcase": false, "constructor": false}, {"identifier": "getMainSplitter", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull public", "return": "Splitter", "signature": "Splitter getMainSplitter()", "full_signature": "@VisibleForTesting @NotNull public Splitter getMainSplitter()", "class_method_signature": "MemoryProfilerStageView.getMainSplitter()", "testcase": false, "constructor": false}, {"identifier": "getChartCaptureSplitter", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull public", "return": "Splitter", "signature": "Splitter getChartCaptureSplitter()", "full_signature": "@VisibleForTesting @NotNull public Splitter getChartCaptureSplitter()", "class_method_signature": "MemoryProfilerStageView.getChartCaptureSplitter()", "testcase": false, "constructor": false}, {"identifier": "getCapturePanel", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull public", "return": "JPanel", "signature": "JPanel getCapturePanel()", "full_signature": "@VisibleForTesting @NotNull public JPanel getCapturePanel()", "class_method_signature": "MemoryProfilerStageView.getCapturePanel()", "testcase": false, "constructor": false}, {"identifier": "getCaptureView", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryCaptureView", "signature": "MemoryCaptureView getCaptureView()", "full_signature": "@VisibleForTesting @NotNull MemoryCaptureView getCaptureView()", "class_method_signature": "MemoryProfilerStageView.getCaptureView()", "testcase": false, "constructor": false}, {"identifier": "getHeapView", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryHeapView", "signature": "MemoryHeapView getHeapView()", "full_signature": "@VisibleForTesting @NotNull MemoryHeapView getHeapView()", "class_method_signature": "MemoryProfilerStageView.getHeapView()", "testcase": false, "constructor": false}, {"identifier": "getClassGrouping", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryClassGrouping", "signature": "MemoryClassGrouping getClassGrouping()", "full_signature": "@VisibleForTesting @NotNull MemoryClassGrouping getClassGrouping()", "class_method_signature": "MemoryProfilerStageView.getClassGrouping()", "testcase": false, "constructor": false}, {"identifier": "getClassifierView", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryClassifierView", "signature": "MemoryClassifierView getClassifierView()", "full_signature": "@VisibleForTesting @NotNull MemoryClassifierView getClassifierView()", "class_method_signature": "MemoryProfilerStageView.getClassifierView()", "testcase": false, "constructor": false}, {"identifier": "getClassSetView", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryClassSetView", "signature": "MemoryClassSetView getClassSetView()", "full_signature": "@VisibleForTesting @NotNull MemoryClassSetView getClassSetView()", "class_method_signature": "MemoryProfilerStageView.getClassSetView()", "testcase": false, "constructor": false}, {"identifier": "getInstanceDetailsView", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "MemoryInstanceDetailsView", "signature": "MemoryInstanceDetailsView getInstanceDetailsView()", "full_signature": "@VisibleForTesting @NotNull MemoryInstanceDetailsView getInstanceDetailsView()", "class_method_signature": "MemoryProfilerStageView.getInstanceDetailsView()", "testcase": false, "constructor": false}, {"identifier": "getRangeSelectionComponent", "parameters": "()", "modifiers": "@VisibleForTesting @Nullable", "return": "RangeSelectionComponent", "signature": "RangeSelectionComponent getRangeSelectionComponent()", "full_signature": "@VisibleForTesting @Nullable RangeSelectionComponent getRangeSelectionComponent()", "class_method_signature": "MemoryProfilerStageView.getRangeSelectionComponent()", "testcase": false, "constructor": false}, {"identifier": "getCaptureElapsedTimeLabel", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "JLabel", "signature": "JLabel getCaptureElapsedTimeLabel()", "full_signature": "@VisibleForTesting @NotNull JLabel getCaptureElapsedTimeLabel()", "class_method_signature": "MemoryProfilerStageView.getCaptureElapsedTimeLabel()", "testcase": false, "constructor": false}, {"identifier": "getCaptureInfoMessage", "parameters": "()", "modifiers": "@VisibleForTesting @NotNull", "return": "JLabel", "signature": "JLabel getCaptureInfoMessage()", "full_signature": "@VisibleForTesting @NotNull JLabel getCaptureInfoMessage()", "class_method_signature": "MemoryProfilerStageView.getCaptureInfoMessage()", "testcase": false, "constructor": false}, {"identifier": "allocationTrackingChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void allocationTrackingChanged()", "full_signature": "private void allocationTrackingChanged()", "class_method_signature": "MemoryProfilerStageView.allocationTrackingChanged()", "testcase": false, "constructor": false}, {"identifier": "updateCaptureElapsedTime", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCaptureElapsedTime()", "full_signature": "private void updateCaptureElapsedTime()", "class_method_signature": "MemoryProfilerStageView.updateCaptureElapsedTime()", "testcase": false, "constructor": false}, {"identifier": "updateCaptureInfoMessage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateCaptureInfoMessage()", "full_signature": "private void updateCaptureInfoMessage()", "class_method_signature": "MemoryProfilerStageView.updateCaptureInfoMessage()", "testcase": false, "constructor": false}, {"identifier": "buildMonitorUi", "parameters": "()", "modifiers": "@NotNull private", "return": "JPanel", "signature": "JPanel buildMonitorUi()", "full_signature": "@NotNull private JPanel buildMonitorUi()", "class_method_signature": "MemoryProfilerStageView.buildMonitorUi()", "testcase": false, "constructor": false}, {"identifier": "getIconForSamplingMode", "parameters": "(LiveAllocationSamplingMode mode)", "modifiers": "static", "return": "Icon", "signature": "Icon getIconForSamplingMode(LiveAllocationSamplingMode mode)", "full_signature": "static Icon getIconForSamplingMode(LiveAllocationSamplingMode mode)", "class_method_signature": "MemoryProfilerStageView.getIconForSamplingMode(LiveAllocationSamplingMode mode)", "testcase": false, "constructor": false}, {"identifier": "buildContextMenu", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void buildContextMenu()", "full_signature": "private void buildContextMenu()", "class_method_signature": "MemoryProfilerStageView.buildContextMenu()", "testcase": false, "constructor": false}, {"identifier": "getCaptureIntersectingWithMouseX", "parameters": "(int mouseXLocation)", "modifiers": "@Nullable private", "return": "CaptureObject", "signature": "CaptureObject getCaptureIntersectingWithMouseX(int mouseXLocation)", "full_signature": "@Nullable private CaptureObject getCaptureIntersectingWithMouseX(int mouseXLocation)", "class_method_signature": "MemoryProfilerStageView.getCaptureIntersectingWithMouseX(int mouseXLocation)", "testcase": false, "constructor": false}, {"identifier": "installProfilingInstructions", "parameters": "(@NotNull JPanel parent)", "modifiers": "private", "return": "void", "signature": "void installProfilingInstructions(@NotNull JPanel parent)", "full_signature": "private void installProfilingInstructions(@NotNull JPanel parent)", "class_method_signature": "MemoryProfilerStageView.installProfilingInstructions(@NotNull JPanel parent)", "testcase": false, "constructor": false}, {"identifier": "buildCaptureUi", "parameters": "()", "modifiers": "@NotNull private", "return": "JPanel", "signature": "JPanel buildCaptureUi()", "full_signature": "@NotNull private JPanel buildCaptureUi()", "class_method_signature": "MemoryProfilerStageView.buildCaptureUi()", "testcase": false, "constructor": false}, {"identifier": "captureObjectChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void captureObjectChanged()", "full_signature": "private void captureObjectChanged()", "class_method_signature": "MemoryProfilerStageView.captureObjectChanged()", "testcase": false, "constructor": false}, {"identifier": "captureObjectFinishedLoading", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void captureObjectFinishedLoading()", "full_signature": "private void captureObjectFinishedLoading()", "class_method_signature": "MemoryProfilerStageView.captureObjectFinishedLoading()", "testcase": false, "constructor": false}, {"identifier": "stopLoadingUi", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopLoadingUi()", "full_signature": "private void stopLoadingUi()", "class_method_signature": "MemoryProfilerStageView.stopLoadingUi()", "testcase": false, "constructor": false}, {"identifier": "configureStackedFilledLine", "parameters": "(LineChart chart, Color color, RangedContinuousSeries series)", "modifiers": "private static", "return": "void", "signature": "void configureStackedFilledLine(LineChart chart, Color color, RangedContinuousSeries series)", "full_signature": "private static void configureStackedFilledLine(LineChart chart, Color color, RangedContinuousSeries series)", "class_method_signature": "MemoryProfilerStageView.configureStackedFilledLine(LineChart chart, Color color, RangedContinuousSeries series)", "testcase": false, "constructor": false}, {"identifier": "getValueObjectIcon", "parameters": "(@NotNull ValueObject valueObject)", "modifiers": "@NotNull static", "return": "Icon", "signature": "Icon getValueObjectIcon(@NotNull ValueObject valueObject)", "full_signature": "@NotNull static Icon getValueObjectIcon(@NotNull ValueObject valueObject)", "class_method_signature": "MemoryProfilerStageView.getValueObjectIcon(@NotNull ValueObject valueObject)", "testcase": false, "constructor": false}, {"identifier": "getStackedIcon", "parameters": "(@Nullable InstanceObject instance, @NotNull Icon stackedIcon, @NotNull Icon nonStackedIcon)", "modifiers": "private static", "return": "Icon", "signature": "Icon getStackedIcon(@Nullable InstanceObject instance, @NotNull Icon stackedIcon, @NotNull Icon nonStackedIcon)", "full_signature": "private static Icon getStackedIcon(@Nullable InstanceObject instance, @NotNull Icon stackedIcon, @NotNull Icon nonStackedIcon)", "class_method_signature": "MemoryProfilerStageView.getStackedIcon(@Nullable InstanceObject instance, @NotNull Icon stackedIcon, @NotNull Icon nonStackedIcon)", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/memory/MemoryProfilerStageView.java"}, "focal_method": {"identifier": "getAllocationSamplingRateRenderer", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "DurationDataRenderer<AllocationSamplingRateDurationData>", "body": "@VisibleForTesting\n  DurationDataRenderer<AllocationSamplingRateDurationData> getAllocationSamplingRateRenderer() {\n    return myAllocationSamplingRateRenderer;\n  }", "signature": "DurationDataRenderer<AllocationSamplingRateDurationData> getAllocationSamplingRateRenderer()", "full_signature": "@VisibleForTesting DurationDataRenderer<AllocationSamplingRateDurationData> getAllocationSamplingRateRenderer()", "class_method_signature": "MemoryProfilerStageView.getAllocationSamplingRateRenderer()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}