{"test_class": {"identifier": "TestStatementHandle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StatementHandle testClass;", "modifier": "private", "type": "StatementHandle", "declarator": "testClass", "var_name": "testClass"}, {"original_string": "private PreparedStatementHandle mockClass;", "modifier": "private", "type": "PreparedStatementHandle", "declarator": "mockClass", "var_name": "mockClass"}, {"original_string": "private IStatementCache mockCallableStatementCache;", "modifier": "private", "type": "IStatementCache", "declarator": "mockCallableStatementCache", "var_name": "mockCallableStatementCache"}, {"original_string": "private ConnectionHandle mockConnection;", "modifier": "private", "type": "ConnectionHandle", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "private BoneCPConfig mockConfig;", "modifier": "private", "type": "BoneCPConfig", "declarator": "mockConfig", "var_name": "mockConfig"}, {"original_string": "private BoneCP mockPool;", "modifier": "private", "type": "BoneCP", "declarator": "mockPool", "var_name": "mockPool"}, {"original_string": "boolean firstTime = true;", "modifier": "", "type": "boolean", "declarator": "firstTime = true", "var_name": "firstTime"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestStatementHandle.java"}, "test_case": {"identifier": "testAssortedCoverage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAssortedCoverage() throws SQLException, SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException{\n\t\t// using a null batchSQL statement...\n\t\tStatement mockStatement = createNiceMock(Statement.class);\n\t\ttestClass.logStatementsEnabled = false;\n\t\tField field = testClass.getClass().getDeclaredField(\"internalStatement\");\n\t\tfield.setAccessible(true);\n\t\tfield.set(testClass, mockStatement);\n\t\texpect(mockStatement.executeBatch()).andReturn(null).once();\n\t\treplay(mockStatement);\n\t\ttestClass.executeBatch();\n\t}", "signature": "void testAssortedCoverage()", "full_signature": "@Test public void testAssortedCoverage()", "class_method_signature": "TestStatementHandle.testAssortedCoverage()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "getDeclaredField", "getClass", "setAccessible", "set", "once", "andReturn", "expect", "executeBatch", "replay", "executeBatch"]}, "focal_class": {"identifier": "StatementHandle", "superclass": "", "interfaces": "implements Statement", "fields": [{"original_string": "protected AtomicBoolean logicallyClosed = new AtomicBoolean();", "modifier": "protected", "type": "AtomicBoolean", "declarator": "logicallyClosed = new AtomicBoolean()", "var_name": "logicallyClosed"}, {"original_string": "protected Statement internalStatement;", "modifier": "protected", "type": "Statement", "declarator": "internalStatement", "var_name": "internalStatement"}, {"original_string": "protected String sql;", "modifier": "protected", "type": "String", "declarator": "sql", "var_name": "sql"}, {"original_string": "protected IStatementCache cache;", "modifier": "protected", "type": "IStatementCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "protected ConnectionHandle connectionHandle;", "modifier": "protected", "type": "ConnectionHandle", "declarator": "connectionHandle", "var_name": "connectionHandle"}, {"original_string": "private String cacheKey ;", "modifier": "private", "type": "String", "declarator": "cacheKey", "var_name": "cacheKey"}, {"original_string": "protected boolean logStatementsEnabled;", "modifier": "protected", "type": "boolean", "declarator": "logStatementsEnabled", "var_name": "logStatementsEnabled"}, {"original_string": "public volatile boolean inCache = false;", "modifier": "public volatile", "type": "boolean", "declarator": "inCache = false", "var_name": "inCache"}, {"original_string": "public String openStackTrace;", "modifier": "public", "type": "String", "declarator": "openStackTrace", "var_name": "openStackTrace"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(StatementHandle.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StatementHandle.class)", "var_name": "logger"}, {"original_string": "protected long queryExecuteTimeLimit;", "modifier": "protected", "type": "long", "declarator": "queryExecuteTimeLimit", "var_name": "queryExecuteTimeLimit"}, {"original_string": "protected ConnectionHook connectionHook;", "modifier": "protected", "type": "ConnectionHook", "declarator": "connectionHook", "var_name": "connectionHook"}, {"original_string": "private Object debugHandle;", "modifier": "private", "type": "Object", "declarator": "debugHandle", "var_name": "debugHandle"}, {"original_string": "private boolean statisticsEnabled;", "modifier": "private", "type": "boolean", "declarator": "statisticsEnabled", "var_name": "statisticsEnabled"}, {"original_string": "private Statistics statistics;", "modifier": "private", "type": "Statistics", "declarator": "statistics", "var_name": "statistics"}, {"original_string": "protected Map<Object, Object> logParams = new TreeMap<Object, Object>();", "modifier": "protected", "type": "Map<Object, Object>", "declarator": "logParams = new TreeMap<Object, Object>()", "var_name": "logParams"}, {"original_string": "protected StringBuilder batchSQL = new StringBuilder();", "modifier": "protected", "type": "StringBuilder", "declarator": "batchSQL = new StringBuilder()", "var_name": "batchSQL"}], "methods": [{"identifier": "StatementHandle", "parameters": "(Statement internalStatement, String sql, IStatementCache cache, \n\t\t\t\t\t\t   ConnectionHandle connectionHandle, String cacheKey, \n\t\t\t\t\t\t   boolean logStatementsEnabled)", "modifiers": "public", "return": "", "signature": " StatementHandle(Statement internalStatement, String sql, IStatementCache cache, \n\t\t\t\t\t\t   ConnectionHandle connectionHandle, String cacheKey, \n\t\t\t\t\t\t   boolean logStatementsEnabled)", "full_signature": "public  StatementHandle(Statement internalStatement, String sql, IStatementCache cache, \n\t\t\t\t\t\t   ConnectionHandle connectionHandle, String cacheKey, \n\t\t\t\t\t\t   boolean logStatementsEnabled)", "class_method_signature": "StatementHandle.StatementHandle(Statement internalStatement, String sql, IStatementCache cache, \n\t\t\t\t\t\t   ConnectionHandle connectionHandle, String cacheKey, \n\t\t\t\t\t\t   boolean logStatementsEnabled)", "testcase": false, "constructor": true}, {"identifier": "StatementHandle", "parameters": "(Statement internalStatement, ConnectionHandle connectionHandle, boolean logStatementsEnabled)", "modifiers": "public", "return": "", "signature": " StatementHandle(Statement internalStatement, ConnectionHandle connectionHandle, boolean logStatementsEnabled)", "full_signature": "public  StatementHandle(Statement internalStatement, ConnectionHandle connectionHandle, boolean logStatementsEnabled)", "class_method_signature": "StatementHandle.StatementHandle(Statement internalStatement, ConnectionHandle connectionHandle, boolean logStatementsEnabled)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "StatementHandle.close()", "testcase": false, "constructor": false}, {"identifier": "addBatch", "parameters": "(String sql)", "modifiers": "public", "return": "void", "signature": "void addBatch(String sql)", "full_signature": "public void addBatch(String sql)", "class_method_signature": "StatementHandle.addBatch(String sql)", "testcase": false, "constructor": false}, {"identifier": "checkClosed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkClosed()", "full_signature": "protected void checkClosed()", "class_method_signature": "StatementHandle.checkClosed()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancel()", "full_signature": "public void cancel()", "class_method_signature": "StatementHandle.cancel()", "testcase": false, "constructor": false}, {"identifier": "clearBatch", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearBatch()", "full_signature": "public void clearBatch()", "class_method_signature": "StatementHandle.clearBatch()", "testcase": false, "constructor": false}, {"identifier": "clearWarnings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearWarnings()", "full_signature": "public void clearWarnings()", "class_method_signature": "StatementHandle.clearWarnings()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String sql)", "modifiers": "public", "return": "boolean", "signature": "boolean execute(String sql)", "full_signature": "public boolean execute(String sql)", "class_method_signature": "StatementHandle.execute(String sql)", "testcase": false, "constructor": false}, {"identifier": "queryTimerEnd", "parameters": "(String sql, long queryStartTime)", "modifiers": "protected", "return": "void", "signature": "void queryTimerEnd(String sql, long queryStartTime)", "full_signature": "protected void queryTimerEnd(String sql, long queryStartTime)", "class_method_signature": "StatementHandle.queryTimerEnd(String sql, long queryStartTime)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String sql, int autoGeneratedKeys)", "modifiers": "public", "return": "boolean", "signature": "boolean execute(String sql, int autoGeneratedKeys)", "full_signature": "public boolean execute(String sql, int autoGeneratedKeys)", "class_method_signature": "StatementHandle.execute(String sql, int autoGeneratedKeys)", "testcase": false, "constructor": false}, {"identifier": "queryTimerStart", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long queryTimerStart()", "full_signature": "protected long queryTimerStart()", "class_method_signature": "StatementHandle.queryTimerStart()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String sql, int[] columnIndexes)", "modifiers": "public", "return": "boolean", "signature": "boolean execute(String sql, int[] columnIndexes)", "full_signature": "public boolean execute(String sql, int[] columnIndexes)", "class_method_signature": "StatementHandle.execute(String sql, int[] columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String sql, String[] columnNames)", "modifiers": "public", "return": "boolean", "signature": "boolean execute(String sql, String[] columnNames)", "full_signature": "public boolean execute(String sql, String[] columnNames)", "class_method_signature": "StatementHandle.execute(String sql, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "executeBatch", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] executeBatch()", "full_signature": "public int[] executeBatch()", "class_method_signature": "StatementHandle.executeBatch()", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(String sql)", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet executeQuery(String sql)", "full_signature": "public ResultSet executeQuery(String sql)", "class_method_signature": "StatementHandle.executeQuery(String sql)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(String sql)", "full_signature": "public int executeUpdate(String sql)", "class_method_signature": "StatementHandle.executeUpdate(String sql)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql, int autoGeneratedKeys)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(String sql, int autoGeneratedKeys)", "full_signature": "public int executeUpdate(String sql, int autoGeneratedKeys)", "class_method_signature": "StatementHandle.executeUpdate(String sql, int autoGeneratedKeys)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql, int[] columnIndexes)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(String sql, int[] columnIndexes)", "full_signature": "public int executeUpdate(String sql, int[] columnIndexes)", "class_method_signature": "StatementHandle.executeUpdate(String sql, int[] columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String sql, String[] columnNames)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(String sql, String[] columnNames)", "full_signature": "public int executeUpdate(String sql, String[] columnNames)", "class_method_signature": "StatementHandle.executeUpdate(String sql, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "public Connection getConnection()", "class_method_signature": "StatementHandle.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getFetchDirection", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFetchDirection()", "full_signature": "public int getFetchDirection()", "class_method_signature": "StatementHandle.getFetchDirection()", "testcase": false, "constructor": false}, {"identifier": "getFetchSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFetchSize()", "full_signature": "public int getFetchSize()", "class_method_signature": "StatementHandle.getFetchSize()", "testcase": false, "constructor": false}, {"identifier": "getGeneratedKeys", "parameters": "()", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet getGeneratedKeys()", "full_signature": "public ResultSet getGeneratedKeys()", "class_method_signature": "StatementHandle.getGeneratedKeys()", "testcase": false, "constructor": false}, {"identifier": "getMaxFieldSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxFieldSize()", "full_signature": "public int getMaxFieldSize()", "class_method_signature": "StatementHandle.getMaxFieldSize()", "testcase": false, "constructor": false}, {"identifier": "getMaxRows", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxRows()", "full_signature": "public int getMaxRows()", "class_method_signature": "StatementHandle.getMaxRows()", "testcase": false, "constructor": false}, {"identifier": "getMoreResults", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getMoreResults()", "full_signature": "public boolean getMoreResults()", "class_method_signature": "StatementHandle.getMoreResults()", "testcase": false, "constructor": false}, {"identifier": "getMoreResults", "parameters": "(int current)", "modifiers": "public", "return": "boolean", "signature": "boolean getMoreResults(int current)", "full_signature": "public boolean getMoreResults(int current)", "class_method_signature": "StatementHandle.getMoreResults(int current)", "testcase": false, "constructor": false}, {"identifier": "getQueryTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueryTimeout()", "full_signature": "public int getQueryTimeout()", "class_method_signature": "StatementHandle.getQueryTimeout()", "testcase": false, "constructor": false}, {"identifier": "getResultSet", "parameters": "()", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet getResultSet()", "full_signature": "public ResultSet getResultSet()", "class_method_signature": "StatementHandle.getResultSet()", "testcase": false, "constructor": false}, {"identifier": "getResultSetConcurrency", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getResultSetConcurrency()", "full_signature": "public int getResultSetConcurrency()", "class_method_signature": "StatementHandle.getResultSetConcurrency()", "testcase": false, "constructor": false}, {"identifier": "getResultSetHoldability", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getResultSetHoldability()", "full_signature": "public int getResultSetHoldability()", "class_method_signature": "StatementHandle.getResultSetHoldability()", "testcase": false, "constructor": false}, {"identifier": "getResultSetType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getResultSetType()", "full_signature": "public int getResultSetType()", "class_method_signature": "StatementHandle.getResultSetType()", "testcase": false, "constructor": false}, {"identifier": "getUpdateCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getUpdateCount()", "full_signature": "public int getUpdateCount()", "class_method_signature": "StatementHandle.getUpdateCount()", "testcase": false, "constructor": false}, {"identifier": "getWarnings", "parameters": "()", "modifiers": "public", "return": "SQLWarning", "signature": "SQLWarning getWarnings()", "full_signature": "public SQLWarning getWarnings()", "class_method_signature": "StatementHandle.getWarnings()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "StatementHandle.isClosed()", "testcase": false, "constructor": false}, {"identifier": "setPoolable", "parameters": "(boolean poolable)", "modifiers": "public", "return": "void", "signature": "void setPoolable(boolean poolable)", "full_signature": "public void setPoolable(boolean poolable)", "class_method_signature": "StatementHandle.setPoolable(boolean poolable)", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "(Class<?> iface)", "modifiers": "public", "return": "boolean", "signature": "boolean isWrapperFor(Class<?> iface)", "full_signature": "public boolean isWrapperFor(Class<?> iface)", "class_method_signature": "StatementHandle.isWrapperFor(Class<?> iface)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(Class<T> iface)", "modifiers": "public", "return": "T", "signature": "T unwrap(Class<T> iface)", "full_signature": "public T unwrap(Class<T> iface)", "class_method_signature": "StatementHandle.unwrap(Class<T> iface)", "testcase": false, "constructor": false}, {"identifier": "isPoolable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPoolable()", "full_signature": "public boolean isPoolable()", "class_method_signature": "StatementHandle.isPoolable()", "testcase": false, "constructor": false}, {"identifier": "closeOnCompletion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeOnCompletion()", "full_signature": "public void closeOnCompletion()", "class_method_signature": "StatementHandle.closeOnCompletion()", "testcase": false, "constructor": false}, {"identifier": "isCloseOnCompletion", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCloseOnCompletion()", "full_signature": "public boolean isCloseOnCompletion()", "class_method_signature": "StatementHandle.isCloseOnCompletion()", "testcase": false, "constructor": false}, {"identifier": "setCursorName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setCursorName(String name)", "full_signature": "public void setCursorName(String name)", "class_method_signature": "StatementHandle.setCursorName(String name)", "testcase": false, "constructor": false}, {"identifier": "setEscapeProcessing", "parameters": "(boolean enable)", "modifiers": "public", "return": "void", "signature": "void setEscapeProcessing(boolean enable)", "full_signature": "public void setEscapeProcessing(boolean enable)", "class_method_signature": "StatementHandle.setEscapeProcessing(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "setFetchDirection", "parameters": "(int direction)", "modifiers": "public", "return": "void", "signature": "void setFetchDirection(int direction)", "full_signature": "public void setFetchDirection(int direction)", "class_method_signature": "StatementHandle.setFetchDirection(int direction)", "testcase": false, "constructor": false}, {"identifier": "setFetchSize", "parameters": "(int rows)", "modifiers": "public", "return": "void", "signature": "void setFetchSize(int rows)", "full_signature": "public void setFetchSize(int rows)", "class_method_signature": "StatementHandle.setFetchSize(int rows)", "testcase": false, "constructor": false}, {"identifier": "setMaxFieldSize", "parameters": "(int max)", "modifiers": "public", "return": "void", "signature": "void setMaxFieldSize(int max)", "full_signature": "public void setMaxFieldSize(int max)", "class_method_signature": "StatementHandle.setMaxFieldSize(int max)", "testcase": false, "constructor": false}, {"identifier": "setMaxRows", "parameters": "(int max)", "modifiers": "public", "return": "void", "signature": "void setMaxRows(int max)", "full_signature": "public void setMaxRows(int max)", "class_method_signature": "StatementHandle.setMaxRows(int max)", "testcase": false, "constructor": false}, {"identifier": "setQueryTimeout", "parameters": "(int seconds)", "modifiers": "public", "return": "void", "signature": "void setQueryTimeout(int seconds)", "full_signature": "public void setQueryTimeout(int seconds)", "class_method_signature": "StatementHandle.setQueryTimeout(int seconds)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void clearCache()", "full_signature": "protected void clearCache()", "class_method_signature": "StatementHandle.clearCache()", "testcase": false, "constructor": false}, {"identifier": "setLogicallyOpen", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setLogicallyOpen()", "full_signature": "protected void setLogicallyOpen()", "class_method_signature": "StatementHandle.setLogicallyOpen()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StatementHandle.toString()", "testcase": false, "constructor": false}, {"identifier": "getOpenStackTrace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOpenStackTrace()", "full_signature": "public String getOpenStackTrace()", "class_method_signature": "StatementHandle.getOpenStackTrace()", "testcase": false, "constructor": false}, {"identifier": "setOpenStackTrace", "parameters": "(String openStackTrace)", "modifiers": "public", "return": "void", "signature": "void setOpenStackTrace(String openStackTrace)", "full_signature": "public void setOpenStackTrace(String openStackTrace)", "class_method_signature": "StatementHandle.setOpenStackTrace(String openStackTrace)", "testcase": false, "constructor": false}, {"identifier": "getInternalStatement", "parameters": "()", "modifiers": "public", "return": "Statement", "signature": "Statement getInternalStatement()", "full_signature": "public Statement getInternalStatement()", "class_method_signature": "StatementHandle.getInternalStatement()", "testcase": false, "constructor": false}, {"identifier": "setInternalStatement", "parameters": "(Statement internalStatement)", "modifiers": "public", "return": "void", "signature": "void setInternalStatement(Statement internalStatement)", "full_signature": "public void setInternalStatement(Statement internalStatement)", "class_method_signature": "StatementHandle.setInternalStatement(Statement internalStatement)", "testcase": false, "constructor": false}, {"identifier": "setDebugHandle", "parameters": "(Object debugHandle)", "modifiers": "public", "return": "void", "signature": "void setDebugHandle(Object debugHandle)", "full_signature": "public void setDebugHandle(Object debugHandle)", "class_method_signature": "StatementHandle.setDebugHandle(Object debugHandle)", "testcase": false, "constructor": false}, {"identifier": "getDebugHandle", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getDebugHandle()", "full_signature": "public Object getDebugHandle()", "class_method_signature": "StatementHandle.getDebugHandle()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/StatementHandle.java"}, "focal_method": {"identifier": "executeBatch", "parameters": "()", "modifiers": "public", "return": "int[]", "body": "public int[] executeBatch()\n\tthrows SQLException {\n\t\tint[] result = null;\n\t\tcheckClosed();\n\t\ttry{\n\t\t\tif (this.logStatementsEnabled && logger.isDebugEnabled()){\n\t\t\t\tlogger.debug(PoolUtil.fillLogParams(this.batchSQL.toString(), this.logParams));\n\t\t\t}\n\t\t\tlong queryStartTime = queryTimerStart();\n\t\t\tString query = \"\";\n\t\t\tif (this.connectionHook != null){\n        query = this.batchSQL.toString();\n\t\t\t\tthis.connectionHook.onBeforeStatementExecute(this.connectionHandle, this, query, this.logParams);\n\t\t\t}\n\t\t\tresult = this.internalStatement.executeBatch();\n\n\t\t\tif (this.connectionHook != null){\n\t\t\t\tthis.connectionHook.onAfterStatementExecute(this.connectionHandle, this, query, this.logParams);\n\t\t\t}\n\n\t\t\tqueryTimerEnd(this.logStatementsEnabled ? this.batchSQL.toString() : \"\", queryStartTime);\n\n\n\t\t\tif (this.logStatementsEnabled){\n\t\t\t\t\tthis.logParams.clear();\n\t\t\t\t\tthis.batchSQL = new StringBuilder();\n\t\t\t}\n\t\t\t\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow this.connectionHandle.markPossiblyBroken(e);\n\n\t\t}\n\t\treturn result; // never reached\n\n\t}", "signature": "int[] executeBatch()", "full_signature": "public int[] executeBatch()", "class_method_signature": "StatementHandle.executeBatch()", "testcase": false, "constructor": false, "invocations": ["checkClosed", "isDebugEnabled", "debug", "fillLogParams", "toString", "queryTimerStart", "toString", "onBeforeStatementExecute", "executeBatch", "onAfterStatementExecute", "queryTimerEnd", "toString", "clear", "markPossiblyBroken"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}