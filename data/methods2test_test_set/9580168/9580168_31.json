{"test_class": {"identifier": "DependenciesValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ROLE = ProjectDependencyAnalyzer.ROLE;", "modifier": "private static final", "type": "String", "declarator": "ROLE = ProjectDependencyAnalyzer.ROLE", "var_name": "ROLE"}, {"original_string": "private static final String HINT = \"default\";", "modifier": "private static final", "type": "String", "declarator": "HINT = \"default\"", "var_name": "HINT"}, {"original_string": "private static final String SCOPE = \"compile\";", "modifier": "private static final", "type": "String", "declarator": "SCOPE = \"compile\"", "var_name": "SCOPE"}, {"original_string": "private static final String TYPE = \"jar\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"jar\"", "var_name": "TYPE"}], "file": "qulice-maven-plugin/src/test/java/com/qulice/maven/DependenciesValidatorTest.java"}, "test_case": {"identifier": "catchesDependencyProblemsAndThrowsException", "parameters": "()", "modifiers": "@Test(expected = ValidationException.class) public", "return": "void", "body": "@Test(expected = ValidationException.class)\n    public void catchesDependencyProblemsAndThrowsException() throws Exception {\n        final ProjectDependencyAnalysis analysis =\n            Mockito.mock(ProjectDependencyAnalysis.class);\n        final Set<Artifact> unused = new HashSet<>();\n        unused.add(Mockito.mock(Artifact.class));\n        Mockito.doReturn(unused).when(analysis).getUsedUndeclaredArtifacts();\n        final ProjectDependencyAnalyzer analyzer = this.analyzer(analysis);\n        final MavenEnvironment env = new MavenEnvironmentMocker().inPlexus(\n            DependenciesValidatorTest.ROLE,\n            DependenciesValidatorTest.HINT,\n            analyzer\n        ).mock();\n        new DependenciesValidator().validate(env);\n    }", "signature": "void catchesDependencyProblemsAndThrowsException()", "full_signature": "@Test(expected = ValidationException.class) public void catchesDependencyProblemsAndThrowsException()", "class_method_signature": "DependenciesValidatorTest.catchesDependencyProblemsAndThrowsException()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "mock", "getUsedUndeclaredArtifacts", "when", "doReturn", "analyzer", "mock", "inPlexus", "validate"]}, "focal_class": {"identifier": "DependenciesValidator", "superclass": "", "interfaces": "implements MavenValidator", "fields": [{"original_string": "private static final String SEP = \"\\n\\t\";", "modifier": "private static final", "type": "String", "declarator": "SEP = \"\\n\\t\"", "var_name": "SEP"}], "methods": [{"identifier": "validate", "parameters": "(final MavenEnvironment env)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final MavenEnvironment env)", "full_signature": "@Override public void validate(final MavenEnvironment env)", "class_method_signature": "DependenciesValidator.validate(final MavenEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(\n        final MavenEnvironment env)", "modifiers": "private static", "return": "ProjectDependencyAnalysis", "signature": "ProjectDependencyAnalysis analyze(\n        final MavenEnvironment env)", "full_signature": "private static ProjectDependencyAnalysis analyze(\n        final MavenEnvironment env)", "class_method_signature": "DependenciesValidator.analyze(\n        final MavenEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "used", "parameters": "(final MavenEnvironment env)", "modifiers": "private static", "return": "Collection<String>", "signature": "Collection<String> used(final MavenEnvironment env)", "full_signature": "private static Collection<String> used(final MavenEnvironment env)", "class_method_signature": "DependenciesValidator.used(final MavenEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "unused", "parameters": "(final MavenEnvironment env)", "modifiers": "private static", "return": "Collection<String>", "signature": "Collection<String> unused(final MavenEnvironment env)", "full_signature": "private static Collection<String> unused(final MavenEnvironment env)", "class_method_signature": "DependenciesValidator.unused(final MavenEnvironment env)", "testcase": false, "constructor": false}], "file": "qulice-maven-plugin/src/main/java/com/qulice/maven/DependenciesValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final MavenEnvironment env)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(final MavenEnvironment env)\n        throws ValidationException {\n        final Collection<String> excludes = env.excludes(\"dependencies\");\n        if (!env.outdir().exists()\n            || \"pom\".equals(env.project().getPackaging())\n            || excludes.contains(\".*\")\n            ) {\n            Logger.info(this, \"No dependency analysis in this project\");\n            return;\n        }\n        final Collection<String> unused = Collections2.filter(\n            DependenciesValidator.unused(env),\n            Predicates.not(new DependenciesValidator.ExcludePredicate(excludes))\n        );\n        if (!unused.isEmpty()) {\n            Logger.warn(\n                this,\n                \"Unused declared dependencies found:%s%s\",\n                DependenciesValidator.SEP,\n                StringUtils.join(unused, DependenciesValidator.SEP)\n            );\n        }\n        final Collection<String> used = Collections2.filter(\n            DependenciesValidator.used(env),\n            Predicates.not(new DependenciesValidator.ExcludePredicate(excludes))\n        );\n        if (!used.isEmpty()) {\n            Logger.warn(\n                this,\n                \"Used undeclared dependencies found:%s%s\",\n                DependenciesValidator.SEP,\n                StringUtils.join(used, DependenciesValidator.SEP)\n            );\n        }\n        final int failures = used.size() + unused.size();\n        if (failures > 0) {\n            throw new ValidationException(\n                \"%d dependency problem(s) found\",\n                failures\n            );\n        }\n        Logger.info(this, \"No dependency problems found\");\n    }", "signature": "void validate(final MavenEnvironment env)", "full_signature": "@Override public void validate(final MavenEnvironment env)", "class_method_signature": "DependenciesValidator.validate(final MavenEnvironment env)", "testcase": false, "constructor": false, "invocations": ["excludes", "exists", "outdir", "equals", "getPackaging", "project", "contains", "info", "filter", "unused", "not", "isEmpty", "warn", "join", "filter", "used", "not", "isEmpty", "warn", "join", "size", "size", "info"]}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}