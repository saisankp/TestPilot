{"test_class": {"identifier": "RenderClassLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger ourLoggerInstance;", "modifier": "private static", "type": "Logger", "declarator": "ourLoggerInstance", "var_name": "ourLoggerInstance"}, {"original_string": "private Logger.Factory myOriginalFactory;", "modifier": "private", "type": "Logger.Factory", "declarator": "myOriginalFactory", "var_name": "myOriginalFactory"}], "file": "android/testSrc/com/android/tools/idea/rendering/classloading/RenderClassLoaderTest.java"}, "test_case": {"identifier": "testRemovingClassFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRemovingClassFile() throws IOException {\n    ourLoggerInstance = new DefaultLogger(\"\") {\n      @Override\n      public void error(@NonNls String message, @Nullable Throwable t, @NonNls @NotNull String... details) {\n        fail(\"Logger shouldn't receive any error calls\");\n      }\n    };\n\n    File classSource = new File(AndroidTestBase.getTestDataPath(), \"rendering/renderClassLoader/MyJarClass.class\");\n    byte[] classBytes = Files.readAllBytes(classSource.toPath());\n\n    RenderClassLoader loader = new RenderClassLoader(this.getClass().getClassLoader()) {\n      @Override\n      protected List<URL> getExternalJars() {\n        return ImmutableList.of();\n      }\n\n      @NotNull\n      @Override\n      protected Class<?> defineClassAndPackage(@NotNull String name, @NotNull byte[] b, int offset, int len) {\n        // We do not really want to define the class in the test, only make sure that this call is made.\n        return RenderClassLoaderTest.class;\n      }\n    };\n    VirtualFile vFile = mock(VirtualFile.class);\n    when(vFile.contentsToByteArray()).thenReturn(classBytes);\n    assertEquals(RenderClassLoaderTest.class, loader.loadClassFile(\"com.myjar.MyJarClass\", vFile));\n    vFile = mock(VirtualFile.class);\n    when(vFile.contentsToByteArray()).thenThrow(new FileNotFoundException(\"\"));\n    assertNull(loader.loadClassFile(\"com.myjar.MyJarClass\", vFile));\n  }", "signature": "void testRemovingClassFile()", "full_signature": "@Test public void testRemovingClassFile()", "class_method_signature": "RenderClassLoaderTest.testRemovingClassFile()", "testcase": true, "constructor": false, "invocations": ["fail", "getTestDataPath", "readAllBytes", "toPath", "getClassLoader", "getClass", "of", "mock", "thenReturn", "when", "contentsToByteArray", "assertEquals", "loadClassFile", "mock", "thenThrow", "when", "contentsToByteArray", "assertNull", "loadClassFile"]}, "focal_class": {"identifier": "RenderClassLoader", "superclass": "extends ClassLoader", "interfaces": "", "fields": [{"original_string": "protected static final Logger LOG = Logger.getInstance(RenderClassLoader.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG = Logger.getInstance(RenderClassLoader.class)", "var_name": "LOG"}, {"original_string": "private static final Function<ClassVisitor, ClassVisitor> DEFAULT_TRANSFORMS = visitor ->\n    new ViewMethodWrapperTransform(new VersionClassTransform(visitor, getCurrentClassVersion(), 0));", "modifier": "private static final", "type": "Function<ClassVisitor, ClassVisitor>", "declarator": "DEFAULT_TRANSFORMS = visitor ->\n    new ViewMethodWrapperTransform(new VersionClassTransform(visitor, getCurrentClassVersion(), 0))", "var_name": "DEFAULT_TRANSFORMS"}, {"original_string": "private final Object myJarClassLoaderLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "myJarClassLoaderLock = new Object()", "var_name": "myJarClassLoaderLock"}, {"original_string": "@GuardedBy(\"myJarClassLoaderLock\")\n  private Supplier<UrlClassLoader> myJarClassLoader = Suppliers.memoize(() -> createJarClassLoader(getExternalJars()));", "modifier": "@GuardedBy(\"myJarClassLoaderLock\")\n  private", "type": "Supplier<UrlClassLoader>", "declarator": "myJarClassLoader = Suppliers.memoize(() -> createJarClassLoader(getExternalJars()))", "var_name": "myJarClassLoader"}, {"original_string": "protected boolean myInsideJarClassLoader;", "modifier": "protected", "type": "boolean", "declarator": "myInsideJarClassLoader", "var_name": "myInsideJarClassLoader"}], "methods": [{"identifier": "RenderClassLoader", "parameters": "(@Nullable ClassLoader parent)", "modifiers": "public", "return": "", "signature": " RenderClassLoader(@Nullable ClassLoader parent)", "full_signature": "public  RenderClassLoader(@Nullable ClassLoader parent)", "class_method_signature": "RenderClassLoader.RenderClassLoader(@Nullable ClassLoader parent)", "testcase": false, "constructor": true}, {"identifier": "getExternalJars", "parameters": "()", "modifiers": "protected abstract", "return": "List<URL>", "signature": "List<URL> getExternalJars()", "full_signature": "protected abstract List<URL> getExternalJars()", "class_method_signature": "RenderClassLoader.getExternalJars()", "testcase": false, "constructor": false}, {"identifier": "findClass", "parameters": "(String name)", "modifiers": "@Override protected", "return": "Class<?>", "signature": "Class<?> findClass(String name)", "full_signature": "@Override protected Class<?> findClass(String name)", "class_method_signature": "RenderClassLoader.findClass(String name)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String name)", "modifiers": "@NotNull protected", "return": "Class<?>", "signature": "Class<?> load(String name)", "full_signature": "@NotNull protected Class<?> load(String name)", "class_method_signature": "RenderClassLoader.load(String name)", "testcase": false, "constructor": false}, {"identifier": "createJarClassLoader", "parameters": "(@NotNull List<URL> urls)", "modifiers": "@NotNull private", "return": "UrlClassLoader", "signature": "UrlClassLoader createJarClassLoader(@NotNull List<URL> urls)", "full_signature": "@NotNull private UrlClassLoader createJarClassLoader(@NotNull List<URL> urls)", "class_method_signature": "RenderClassLoader.createJarClassLoader(@NotNull List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "loadClassFromNonProjectDependency", "parameters": "(@NotNull String name)", "modifiers": "@NotNull protected", "return": "Class<?>", "signature": "Class<?> loadClassFromNonProjectDependency(@NotNull String name)", "full_signature": "@NotNull protected Class<?> loadClassFromNonProjectDependency(@NotNull String name)", "class_method_signature": "RenderClassLoader.loadClassFromNonProjectDependency(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "loadClassFile", "parameters": "(String fqcn, @NotNull VirtualFile classFile)", "modifiers": "@Nullable protected", "return": "Class<?>", "signature": "Class<?> loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "full_signature": "@Nullable protected Class<?> loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "class_method_signature": "RenderClassLoader.loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(@NotNull String fqcn, @NotNull byte[] data)", "modifiers": "@NotNull protected", "return": "Class<?>", "signature": "Class<?> loadClass(@NotNull String fqcn, @NotNull byte[] data)", "full_signature": "@NotNull protected Class<?> loadClass(@NotNull String fqcn, @NotNull byte[] data)", "class_method_signature": "RenderClassLoader.loadClass(@NotNull String fqcn, @NotNull byte[] data)", "testcase": false, "constructor": false}, {"identifier": "defineClassAndPackage", "parameters": "(@NotNull String name, @NotNull byte[] b, int offset, int len)", "modifiers": "@NotNull protected", "return": "Class<?>", "signature": "Class<?> defineClassAndPackage(@NotNull String name, @NotNull byte[] b, int offset, int len)", "full_signature": "@NotNull protected Class<?> defineClassAndPackage(@NotNull String name, @NotNull byte[] b, int offset, int len)", "class_method_signature": "RenderClassLoader.defineClassAndPackage(@NotNull String name, @NotNull byte[] b, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "areDependenciesUpToDate", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean areDependenciesUpToDate()", "full_signature": "protected boolean areDependenciesUpToDate()", "class_method_signature": "RenderClassLoader.areDependenciesUpToDate()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/rendering/classloading/RenderClassLoader.java"}, "focal_method": {"identifier": "loadClassFile", "parameters": "(String fqcn, @NotNull VirtualFile classFile)", "modifiers": "@Nullable protected", "return": "Class<?>", "body": "@Nullable\n  protected Class<?> loadClassFile(String fqcn, @NotNull VirtualFile classFile) {\n    try {\n      byte[] data = classFile.contentsToByteArray();\n      return loadClass(fqcn, data);\n    }\n    catch (IOException e) {\n      LOG.warn(e);\n    }\n\n    return null;\n  }", "signature": "Class<?> loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "full_signature": "@Nullable protected Class<?> loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "class_method_signature": "RenderClassLoader.loadClassFile(String fqcn, @NotNull VirtualFile classFile)", "testcase": false, "constructor": false, "invocations": ["contentsToByteArray", "loadClass", "warn"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}