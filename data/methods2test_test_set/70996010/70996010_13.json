{"test_class": {"identifier": "ConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "app/src/test/java/org/jak_linux/dns66/ConfigurationTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() throws Exception {\n        Configuration config = Configuration.read(new StringReader(\"{}\"));\n\n        assertNotNull(config.hosts);\n        assertNotNull(config.hosts.items);\n        assertNotNull(config.whitelist);\n        assertNotNull(config.whitelist.items);\n        assertNotNull(config.whitelist.itemsOnVpn);\n        assertNotNull(config.dnsServers);\n        assertNotNull(config.dnsServers.items);\n        assertTrue(config.whitelist.items.contains(\"com.android.vending\"));\n        assertTrue(config.ipV6Support);\n        assertFalse(config.watchDog);\n        assertFalse(config.nightMode);\n        assertTrue(config.showNotification);\n        assertFalse(config.autoStart);\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "ConfigurationTest.testRead()", "testcase": true, "constructor": false, "invocations": ["read", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertNotNull", "assertTrue", "contains", "assertTrue", "assertFalse", "assertFalse", "assertTrue", "assertFalse"]}, "focal_class": {"identifier": "Configuration", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Gson GSON = new Gson();", "modifier": "public static final", "type": "Gson", "declarator": "GSON = new Gson()", "var_name": "GSON"}, {"original_string": "static final int VERSION = 1;", "modifier": "static final", "type": "int", "declarator": "VERSION = 1", "var_name": "VERSION"}, {"original_string": "static final int MINOR_VERSION = 1;", "modifier": "static final", "type": "int", "declarator": "MINOR_VERSION = 1", "var_name": "MINOR_VERSION"}, {"original_string": "public int version = 1;", "modifier": "public", "type": "int", "declarator": "version = 1", "var_name": "version"}, {"original_string": "public int minorVersion = 0;", "modifier": "public", "type": "int", "declarator": "minorVersion = 0", "var_name": "minorVersion"}, {"original_string": "public boolean autoStart;", "modifier": "public", "type": "boolean", "declarator": "autoStart", "var_name": "autoStart"}, {"original_string": "public Hosts hosts = new Hosts();", "modifier": "public", "type": "Hosts", "declarator": "hosts = new Hosts()", "var_name": "hosts"}, {"original_string": "public DnsServers dnsServers = new DnsServers();", "modifier": "public", "type": "DnsServers", "declarator": "dnsServers = new DnsServers()", "var_name": "dnsServers"}, {"original_string": "public Whitelist whitelist = new Whitelist();", "modifier": "public", "type": "Whitelist", "declarator": "whitelist = new Whitelist()", "var_name": "whitelist"}, {"original_string": "public boolean showNotification = true;", "modifier": "public", "type": "boolean", "declarator": "showNotification = true", "var_name": "showNotification"}, {"original_string": "public boolean nightMode;", "modifier": "public", "type": "boolean", "declarator": "nightMode", "var_name": "nightMode"}, {"original_string": "public boolean watchDog = false;", "modifier": "public", "type": "boolean", "declarator": "watchDog = false", "var_name": "watchDog"}, {"original_string": "public boolean ipV6Support = true;", "modifier": "public", "type": "boolean", "declarator": "ipV6Support = true", "var_name": "ipV6Support"}], "methods": [{"identifier": "read", "parameters": "(Reader reader)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration read(Reader reader)", "full_signature": "public static Configuration read(Reader reader)", "class_method_signature": "Configuration.read(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "runUpdate", "parameters": "(int level)", "modifiers": "public", "return": "void", "signature": "void runUpdate(int level)", "full_signature": "public void runUpdate(int level)", "class_method_signature": "Configuration.runUpdate(int level)", "testcase": false, "constructor": false}, {"identifier": "updateURL", "parameters": "(String oldURL, String newURL, int newState)", "modifiers": "public", "return": "void", "signature": "void updateURL(String oldURL, String newURL, int newState)", "full_signature": "public void updateURL(String oldURL, String newURL, int newState)", "class_method_signature": "Configuration.updateURL(String oldURL, String newURL, int newState)", "testcase": false, "constructor": false}, {"identifier": "updateDNS", "parameters": "(String oldIP, String newIP)", "modifiers": "public", "return": "void", "signature": "void updateDNS(String oldIP, String newIP)", "full_signature": "public void updateDNS(String oldIP, String newIP)", "class_method_signature": "Configuration.updateDNS(String oldIP, String newIP)", "testcase": false, "constructor": false}, {"identifier": "addDNS", "parameters": "(String title, String location, boolean isEnabled)", "modifiers": "public", "return": "void", "signature": "void addDNS(String title, String location, boolean isEnabled)", "full_signature": "public void addDNS(String title, String location, boolean isEnabled)", "class_method_signature": "Configuration.addDNS(String title, String location, boolean isEnabled)", "testcase": false, "constructor": false}, {"identifier": "addURL", "parameters": "(int index, String title, String location, int state)", "modifiers": "public", "return": "void", "signature": "void addURL(int index, String title, String location, int state)", "full_signature": "public void addURL(int index, String title, String location, int state)", "class_method_signature": "Configuration.addURL(int index, String title, String location, int state)", "testcase": false, "constructor": false}, {"identifier": "removeURL", "parameters": "(String oldURL)", "modifiers": "public", "return": "void", "signature": "void removeURL(String oldURL)", "full_signature": "public void removeURL(String oldURL)", "class_method_signature": "Configuration.removeURL(String oldURL)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Writer writer)", "modifiers": "public", "return": "void", "signature": "void write(Writer writer)", "full_signature": "public void write(Writer writer)", "class_method_signature": "Configuration.write(Writer writer)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/Configuration.java"}, "focal_method": {"identifier": "read", "parameters": "(Reader reader)", "modifiers": "public static", "return": "Configuration", "body": "public static Configuration read(Reader reader) throws IOException {\n        Configuration config = GSON.fromJson(reader, Configuration.class);\n\n        if (config.whitelist.items.isEmpty()) {\n            config.whitelist = new Whitelist();\n            config.whitelist.items.add(\"com.android.vending\");\n        }\n\n        if (config.version > VERSION)\n            throw new IOException(\"Unhandled file format version\");\n\n        for (int i = config.minorVersion + 1; i <= MINOR_VERSION; i++) {\n            config.runUpdate(i);\n        }\n        config.updateURL(\"http://someonewhocares.org/hosts/hosts\", \"https://someonewhocares.org/hosts/hosts\", 0);\n\n\n        return config;\n    }", "signature": "Configuration read(Reader reader)", "full_signature": "public static Configuration read(Reader reader)", "class_method_signature": "Configuration.read(Reader reader)", "testcase": false, "constructor": false, "invocations": ["fromJson", "isEmpty", "add", "runUpdate", "updateURL"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}