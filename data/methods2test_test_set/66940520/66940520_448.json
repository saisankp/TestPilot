{"test_class": {"identifier": "CategoryOptionGroupResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CategoryOptionGroupStore categoryOptionGroupStore;", "modifier": "@Mock\n    private", "type": "CategoryOptionGroupStore", "declarator": "categoryOptionGroupStore", "var_name": "categoryOptionGroupStore"}, {"original_string": "@Mock\n    private ExpressionService expressionService;", "modifier": "@Mock\n    private", "type": "ExpressionService", "declarator": "expressionService", "var_name": "expressionService"}, {"original_string": "@Mock\n    private CategoryOptionComboStore categoryOptionComboStore;", "modifier": "@Mock\n    private", "type": "CategoryOptionComboStore", "declarator": "categoryOptionComboStore", "var_name": "categoryOptionComboStore"}, {"original_string": "private ExpressionResolver resolver;", "modifier": "private", "type": "ExpressionResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private BeanRandomizer beanRandomizer;", "modifier": "private", "type": "BeanRandomizer", "declarator": "beanRandomizer", "var_name": "beanRandomizer"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private String elem1;", "modifier": "private", "type": "String", "declarator": "elem1", "var_name": "elem1"}, {"original_string": "private String elem2;", "modifier": "private", "type": "String", "declarator": "elem2", "var_name": "elem2"}, {"original_string": "private String elem3;", "modifier": "private", "type": "String", "declarator": "elem3", "var_name": "elem3"}, {"original_string": "private int COCS_IN_COG = 2;", "modifier": "private", "type": "int", "declarator": "COCS_IN_COG = 2", "var_name": "COCS_IN_COG"}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/resolver/CategoryOptionGroupResolverTest.java"}, "test_case": {"identifier": "verifySecondElementIsCocThirdElementIsCog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifySecondElementIsCocThirdElementIsCog()\n    {\n        DimensionalItemId dimensionalItemId = new DimensionalItemId( DimensionItemType.DATA_ELEMENT_OPERAND, elem1,\n            elem2, elem3 );\n\n        CategoryOptionGroup categoryOptionGroup1 = createCategoryOptionGroup( 'A' );\n\n        // #{DEUID.COCUID.COGUID}\n        String exp = createIndicatorExp();\n\n        when( expressionService.getExpressionDimensionalItemIds( exp, INDICATOR_EXPRESSION ) )\n            .thenReturn( Sets.newHashSet( dimensionalItemId ) );\n\n        when( categoryOptionGroupStore.getByUid( elem3 ) ).thenReturn( categoryOptionGroup1 );\n\n        List<CategoryOptionCombo> cocs1 = beanRandomizer.randomObjects( CategoryOptionCombo.class, COCS_IN_COG );\n\n        when( categoryOptionComboStore.getCategoryOptionCombosByGroupUid( categoryOptionGroup1.getUid() ) )\n            .thenReturn( cocs1 );\n\n        String expression = resolver.resolve( exp );\n\n        // split resolved expression into a List of Strings\n        List<String> expressionList = Arrays.asList( expression.split( \"\\\\+\" ) );\n        assertEquals( COCS_IN_COG , expressionList.size() );\n\n        collectionsHaveIdenticalValuesIgnoreOrder( expressionList, buildExpectedExpression( elem1, elem2, cocs1 ) );\n    }", "signature": "void verifySecondElementIsCocThirdElementIsCog()", "full_signature": "@Test public void verifySecondElementIsCocThirdElementIsCog()", "class_method_signature": "CategoryOptionGroupResolverTest.verifySecondElementIsCocThirdElementIsCog()", "testcase": true, "constructor": false, "invocations": ["createCategoryOptionGroup", "createIndicatorExp", "thenReturn", "when", "getExpressionDimensionalItemIds", "newHashSet", "thenReturn", "when", "getByUid", "randomObjects", "thenReturn", "when", "getCategoryOptionCombosByGroupUid", "getUid", "resolve", "asList", "split", "assertEquals", "size", "collectionsHaveIdenticalValuesIgnoreOrder", "buildExpectedExpression"]}, "focal_class": {"identifier": "CategoryOptionGroupResolver", "superclass": "", "interfaces": "implements\n    ExpressionResolver", "fields": [{"original_string": "private final ExpressionService expressionService;", "modifier": "private final", "type": "ExpressionService", "declarator": "expressionService", "var_name": "expressionService"}, {"original_string": "private final CategoryOptionGroupStore categoryOptionGroupStore;", "modifier": "private final", "type": "CategoryOptionGroupStore", "declarator": "categoryOptionGroupStore", "var_name": "categoryOptionGroupStore"}, {"original_string": "private final CategoryOptionComboStore categoryOptionComboStore;", "modifier": "private final", "type": "CategoryOptionComboStore", "declarator": "categoryOptionComboStore", "var_name": "categoryOptionComboStore"}], "methods": [{"identifier": "CategoryOptionGroupResolver", "parameters": "( CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionComboStore categoryOptionComboStore,\n        ExpressionService expressionService )", "modifiers": "public", "return": "", "signature": " CategoryOptionGroupResolver( CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionComboStore categoryOptionComboStore,\n        ExpressionService expressionService )", "full_signature": "public  CategoryOptionGroupResolver( CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionComboStore categoryOptionComboStore,\n        ExpressionService expressionService )", "class_method_signature": "CategoryOptionGroupResolver.CategoryOptionGroupResolver( CategoryOptionGroupStore categoryOptionGroupStore, CategoryOptionComboStore categoryOptionComboStore,\n        ExpressionService expressionService )", "testcase": false, "constructor": true}, {"identifier": "resolveCoCFromCog", "parameters": "( String categoryOptionGroupUid )", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> resolveCoCFromCog( String categoryOptionGroupUid )", "full_signature": "private Set<String> resolveCoCFromCog( String categoryOptionGroupUid )", "class_method_signature": "CategoryOptionGroupResolver.resolveCoCFromCog( String categoryOptionGroupUid )", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "( String expression )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "String", "signature": "String resolve( String expression )", "full_signature": "@Override @Transactional( readOnly = true ) public String resolve( String expression )", "class_method_signature": "CategoryOptionGroupResolver.resolve( String expression )", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "( String dataElementUid, String uid, String uid2 )", "modifiers": "private", "return": "List<String>", "signature": "List<String> evaluate( String dataElementUid, String uid, String uid2 )", "full_signature": "private List<String> evaluate( String dataElementUid, String uid, String uid2 )", "class_method_signature": "CategoryOptionGroupResolver.evaluate( String dataElementUid, String uid, String uid2 )", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "( Set<String> cocs, String dataElementUid, String third )", "modifiers": "private", "return": "String", "signature": "String resolve( Set<String> cocs, String dataElementUid, String third )", "full_signature": "private String resolve( Set<String> cocs, String dataElementUid, String third )", "class_method_signature": "CategoryOptionGroupResolver.resolve( Set<String> cocs, String dataElementUid, String third )", "testcase": false, "constructor": false}, {"identifier": "isAoc", "parameters": "( String uid )", "modifiers": "private", "return": "boolean", "signature": "boolean isAoc( String uid )", "full_signature": "private boolean isAoc( String uid )", "class_method_signature": "CategoryOptionGroupResolver.isAoc( String uid )", "testcase": false, "constructor": false}, {"identifier": "getCategoryOptionGroupUid", "parameters": "( String uid )", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> getCategoryOptionGroupUid( String uid )", "full_signature": "private Optional<String> getCategoryOptionGroupUid( String uid )", "class_method_signature": "CategoryOptionGroupResolver.getCategoryOptionGroupUid( String uid )", "testcase": false, "constructor": false}, {"identifier": "isDataElementOperand", "parameters": "( Set<DimensionalItemId> dimensionalItemIds )", "modifiers": "private", "return": "boolean", "signature": "boolean isDataElementOperand( Set<DimensionalItemId> dimensionalItemIds )", "full_signature": "private boolean isDataElementOperand( Set<DimensionalItemId> dimensionalItemIds )", "class_method_signature": "CategoryOptionGroupResolver.isDataElementOperand( Set<DimensionalItemId> dimensionalItemIds )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/resolver/CategoryOptionGroupResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "( String expression )", "modifiers": "@Override @Transactional( readOnly = true ) public", "return": "String", "body": "@Override\n    @Transactional( readOnly = true )\n    public String resolve( String expression )\n    {\n        // Get a DimensionalItemId from the expression. The expression is parsed and\n        // each element placed in the DimensionalItemId\n        Set<DimensionalItemId> dimItemIds = expressionService.getExpressionDimensionalItemIds( expression, INDICATOR_EXPRESSION );\n        List<String> resolvedOperands = new ArrayList<>();\n        if ( isDataElementOperand( dimItemIds ) )\n        {\n            DimensionalItemId dimensionalItemId = dimItemIds.stream().findFirst().get();\n            // First element is always the Data Element Id\n            String dataElementUid = dimensionalItemId.getId0();\n\n            resolvedOperands\n                .addAll( evaluate( dataElementUid, dimensionalItemId.getId1(), dimensionalItemId.getId2() ) );\n\n            resolvedOperands.addAll( evaluate( dataElementUid, dimensionalItemId.getId2(), null ) );\n        }\n        if ( resolvedOperands.isEmpty() )\n        {\n            // nothing to resolve, add the expression as it is\n            resolvedOperands.add( expression );\n        }\n        return Joiner.on( \"+\" ).join( resolvedOperands );\n    }", "signature": "String resolve( String expression )", "full_signature": "@Override @Transactional( readOnly = true ) public String resolve( String expression )", "class_method_signature": "CategoryOptionGroupResolver.resolve( String expression )", "testcase": false, "constructor": false, "invocations": ["getExpressionDimensionalItemIds", "isDataElementOperand", "get", "findFirst", "stream", "getId0", "addAll", "evaluate", "getId1", "getId2", "addAll", "evaluate", "getId2", "isEmpty", "add", "join", "on"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}