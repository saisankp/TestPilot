{"test_class": {"identifier": "LogoutActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate LogoutAction logoutAction;", "modifier": "@Autowired\n\tprivate", "type": "LogoutAction", "declarator": "logoutAction", "var_name": "logoutAction"}], "file": "ki4so-web/src/test/java/com/github/ebnew/ki4so/web/action/LogoutActionTest.java"}, "test_case": {"identifier": "testGetAppList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetAppList() throws UnsupportedEncodingException {\n\t\t//\u6d4b\u8bd5\u51c6\u5907\u3002\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tCredentialResolver credentialResolver = Mockito.mock(CredentialResolver.class);\n\t\tlogoutAction.setCredentialResolver(credentialResolver);\n\t\t\n\t\tKi4soService ki4soService = Mockito.mock(Ki4soService.class);\n\t\tlogoutAction.setKi4soService(ki4soService);\n\t\t\n\t\tCredential credential = Mockito.mock(Credential.class);\n\t\t\n\t\t//\u8bbe\u7f6e\u9884\u671f\u7ed3\u679c\u3002\n\t\tMockito.when(credentialResolver.resolveCredential(request)).thenReturn(credential);\n\t\tList<App> list = new ArrayList<App>();\n\t\tApp app = new App();\n\t\tapp.setAppId(\"1000\");\n\t\tapp.setAppName(\"\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f1\");\n\t\tapp.setHost(\"app.com\");\n\t\tapp.setLogoutUrl(\"http://app.com/logout.do\");\n\t\tlist.add(app);\n\t\tMockito.when(ki4soService.getAppList(credential)).thenReturn(list);\n\t\t\n\t\t//\u6267\u884c\u67e5\u8be2\u3002\n\t\tlogoutAction.getAppList(request, response);\n\t\t\n\t\t//\u68c0\u67e5\u7ed3\u679c\u3002\n\t\tAssert.assertEquals(\"application/x-javascript\", response.getContentType());\n\t\tAssert.assertEquals(\"UTF-8\", response.getCharacterEncoding());\n\t\t//\u68c0\u67e5\u8f93\u51fa\u7684jsonp\u4e32\u662f\u5426\u6b63\u786e\u3002\n\t\tString content = response.getContentAsString();\n\t\tcontent = content.trim();\n\t\tAssert.assertTrue(content.startsWith(\"fetchAppList(\"));\n\t\tAssert.assertTrue(content.endsWith(\");\"));\n\t\tString json = content.replaceFirst(\"fetchAppList\\\\(\", \"\");\n\t\tjson = json.replaceFirst(\"\\\\);\", \"\");\n\t\tJSONArray data = (JSONArray)JSON.parse(json);\n\t\tAssert.assertEquals(1, data.size());\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, Object> map = (Map<String, Object>)data.get(0);\n\t\tAssert.assertEquals(\"1000\", map.get(\"appId\"));\n\t\t\n\t}", "signature": "void testGetAppList()", "full_signature": "@Test public void testGetAppList()", "class_method_signature": "LogoutActionTest.testGetAppList()", "testcase": true, "constructor": false, "invocations": ["mock", "setCredentialResolver", "mock", "setKi4soService", "mock", "thenReturn", "when", "resolveCredential", "setAppId", "setAppName", "setHost", "setLogoutUrl", "add", "thenReturn", "when", "getAppList", "getAppList", "assertEquals", "getContentType", "assertEquals", "getCharacterEncoding", "getContentAsString", "trim", "assertTrue", "startsWith", "assertTrue", "endsWith", "replaceFirst", "replaceFirst", "parse", "assertEquals", "size", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "LogoutAction", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprotected CredentialResolver credentialResolver;", "modifier": "@Autowired\n\tprotected", "type": "CredentialResolver", "declarator": "credentialResolver", "var_name": "credentialResolver"}, {"original_string": "@Autowired\n\tprotected Ki4soService ki4soService;", "modifier": "@Autowired\n\tprotected", "type": "Ki4soService", "declarator": "ki4soService", "var_name": "ki4soService"}], "methods": [{"identifier": "setKi4soService", "parameters": "(Ki4soService ki4soService)", "modifiers": "public", "return": "void", "signature": "void setKi4soService(Ki4soService ki4soService)", "full_signature": "public void setKi4soService(Ki4soService ki4soService)", "class_method_signature": "LogoutAction.setKi4soService(Ki4soService ki4soService)", "testcase": false, "constructor": false}, {"identifier": "setCredentialResolver", "parameters": "(CredentialResolver credentialResolver)", "modifiers": "public", "return": "void", "signature": "void setCredentialResolver(CredentialResolver credentialResolver)", "full_signature": "public void setCredentialResolver(CredentialResolver credentialResolver)", "class_method_signature": "LogoutAction.setCredentialResolver(CredentialResolver credentialResolver)", "testcase": false, "constructor": false}, {"identifier": "getAppList", "parameters": "(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(\"/getAppList\") public", "return": "void", "signature": "void getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(\"/getAppList\") public void getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "class_method_signature": "LogoutAction.getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getCallbackName", "parameters": "(String defalutCallbackName, HttpServletRequest request)", "modifiers": "private", "return": "String", "signature": "String getCallbackName(String defalutCallbackName, HttpServletRequest request)", "full_signature": "private String getCallbackName(String defalutCallbackName, HttpServletRequest request)", "class_method_signature": "LogoutAction.getCallbackName(String defalutCallbackName, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(\"/logout\") public", "return": "void", "signature": "void logout(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(\"/logout\") public void logout(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "class_method_signature": "LogoutAction.logout(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}], "file": "ki4so-web/src/main/java/com/github/ebnew/ki4so/web/action/LogoutAction.java"}, "focal_method": {"identifier": "getAppList", "parameters": "(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "modifiers": "@RequestMapping(\"/getAppList\") public", "return": "void", "body": "@RequestMapping(\"/getAppList\")\n\tpublic void getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response){\n\t\t//\u89e3\u6790\u7528\u6237\u51ed\u636e\u3002\n\t\tCredential credential = credentialResolver.resolveCredential(request);\n\t\t//\u5b9e\u73b0\u8f93\u51fa\u4e3ajson\u4e32\u3002\n\t\tList<App> list =  this.ki4soService.getAppList(credential);\n\t\tString json = JSON.toJSONString(list);\n\t\tStringBuffer sb = new StringBuffer();\n\t\tsb.append(getCallbackName(\"fetchAppList\", request))\n\t\t.append(\"(\")\n\t\t.append(json)\n\t\t.append(\");\");\n\t\ttry {\n\t\t\tresponse.setContentType(\"application/x-javascript\");\n\t\t\tresponse.setCharacterEncoding(\"UTF-8\");\n\t\t\tresponse.getWriter().println(sb.toString());\n\t\t} catch (IOException e) {\n\t\t}\n\t}", "signature": "void getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "full_signature": "@RequestMapping(\"/getAppList\") public void getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "class_method_signature": "LogoutAction.getAppList(HttpServletRequest request,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["resolveCredential", "getAppList", "toJSONString", "append", "append", "append", "append", "getCallbackName", "setContentType", "setCharacterEncoding", "println", "getWriter", "toString"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}