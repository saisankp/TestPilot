{"test_class": {"identifier": "BlockMetadataConverterFactoryTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/transport/BlockMetadataConverterFactoryTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvert() {\n    final ModelConverter<BlockMetadata, Rpc.BlockMetadata> converter =\n        new BlockMetadataConverterFactory().create();\n    final Rpc.BlockMetadata rpcBlockMetadata = Rpc.BlockMetadata.newBuilder().build();\n    final BlockMetadata converted = converter.convertToDomainModel(rpcBlockMetadata);\n    assertNotNull(converted);\n  }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "BlockMetadataConverterFactoryTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["create", "build", "newBuilder", "convertToDomainModel", "assertNotNull"]}, "focal_class": {"identifier": "BlockMetadataConverterFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final ModelConverter<BlockHeader, Blockchain.BlockHeader> blockHeaderConverter =\n      new BlockHeaderConverterFactory().create();", "modifier": "protected final", "type": "ModelConverter<BlockHeader, Blockchain.BlockHeader>", "declarator": "blockHeaderConverter =\n      new BlockHeaderConverterFactory().create()", "var_name": "blockHeaderConverter"}, {"original_string": "protected final Function1<BlockMetadata,\n      Rpc.BlockMetadata> domainConverter = new Function1<BlockMetadata, Rpc.BlockMetadata>() {\n\n        @Override\n        public Rpc.BlockMetadata apply(BlockMetadata domainBlock) {\n          throw new UnsupportedOperationException();\n        }\n      };", "modifier": "protected final", "type": "Function1<BlockMetadata,\n      Rpc.BlockMetadata>", "declarator": "domainConverter = new Function1<BlockMetadata, Rpc.BlockMetadata>() {\n\n        @Override\n        public Rpc.BlockMetadata apply(BlockMetadata domainBlock) {\n          throw new UnsupportedOperationException();\n        }\n      }", "var_name": "domainConverter"}, {"original_string": "protected final Function1<Rpc.BlockMetadata, BlockMetadata> rpcConverter =\n      new Function1<Rpc.BlockMetadata, BlockMetadata>() {\n\n        @Override\n        public BlockMetadata apply(final Rpc.BlockMetadata rpcBlockMetadata) {\n          logger.trace(\"Rpc block metadata to convert: {}\", rpcBlockMetadata);\n          final BlockMetadata domainBlockMetadata = BlockMetadata.newBuilder()\n              .blockHash(new BlockHash(of(rpcBlockMetadata.getHash().toByteArray())))\n              .blockHeader(blockHeaderConverter.convertToDomainModel(rpcBlockMetadata.getHeader()))\n              .txCount(rpcBlockMetadata.getTxcount())\n              .blockSize(rpcBlockMetadata.getSize())\n              .build();\n          logger.trace(\"Domain block metadata converted: {}\", domainBlockMetadata);\n          return domainBlockMetadata;\n        }\n      };", "modifier": "protected final", "type": "Function1<Rpc.BlockMetadata, BlockMetadata>", "declarator": "rpcConverter =\n      new Function1<Rpc.BlockMetadata, BlockMetadata>() {\n\n        @Override\n        public BlockMetadata apply(final Rpc.BlockMetadata rpcBlockMetadata) {\n          logger.trace(\"Rpc block metadata to convert: {}\", rpcBlockMetadata);\n          final BlockMetadata domainBlockMetadata = BlockMetadata.newBuilder()\n              .blockHash(new BlockHash(of(rpcBlockMetadata.getHash().toByteArray())))\n              .blockHeader(blockHeaderConverter.convertToDomainModel(rpcBlockMetadata.getHeader()))\n              .txCount(rpcBlockMetadata.getTxcount())\n              .blockSize(rpcBlockMetadata.getSize())\n              .build();\n          logger.trace(\"Domain block metadata converted: {}\", domainBlockMetadata);\n          return domainBlockMetadata;\n        }\n      }", "var_name": "rpcConverter"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public", "return": "ModelConverter<BlockMetadata, Rpc.BlockMetadata>", "signature": "ModelConverter<BlockMetadata, Rpc.BlockMetadata> create()", "full_signature": "public ModelConverter<BlockMetadata, Rpc.BlockMetadata> create()", "class_method_signature": "BlockMetadataConverterFactory.create()", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/transport/BlockMetadataConverterFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "ModelConverter<BlockMetadata, Rpc.BlockMetadata>", "body": "public ModelConverter<BlockMetadata, Rpc.BlockMetadata> create() {\n    return new ModelConverter<>(domainConverter, rpcConverter);\n  }", "signature": "ModelConverter<BlockMetadata, Rpc.BlockMetadata> create()", "full_signature": "public ModelConverter<BlockMetadata, Rpc.BlockMetadata> create()", "class_method_signature": "BlockMetadataConverterFactory.create()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}