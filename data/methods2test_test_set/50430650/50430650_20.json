{"test_class": {"identifier": "FeatureFileParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/technophobia/substeps/runner/FeatureFileParserTest.java"}, "test_case": {"identifier": "testLineNumbersAndParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLineNumbersAndParsing() {\n\n        final FeatureFileParser parser = new FeatureFileParser();\n\n        final String featureFile = \"./target/test-classes/features/lineNumbers.feature\";\n\n        final FeatureFile feature = parser.loadFeatureFile(new File(featureFile));\n\n        Assert.assertNotNull(feature);\n\n        final List<Scenario> scenarios = feature.getScenarios();\n\n        Assert.assertThat(scenarios.size(), is(4));\n\n        final Scenario sc1 = scenarios.get(0);\n\n        Assert.assertThat(sc1.getSourceStartOffset(), is(not(-1)));\n        // Assert.assertThat(sc1.getSourceEndOffset(), is(not(-1)));\n\n        Assert.assertThat(sc1.getSourceStartLineNumber(), is(13));\n\n        final List<Step> steps = sc1.getSteps();\n        Assert.assertThat(steps.size(), is(7));\n\n        final Step s1 = steps.get(0);\n        Assert.assertThat(s1.getSourceLineNumber(), is(14));\n        final Step s2 = steps.get(1);\n        Assert.assertThat(s2.getSourceLineNumber(), is(15));\n\n        final Step s3 = steps.get(2);\n        Assert.assertThat(s3.getSourceLineNumber(), is(16));\n\n        final Step s4 = steps.get(3);\n        Assert.assertThat(s4.getSourceLineNumber(), is(17));\n\n        final Step s5 = steps.get(4);\n        Assert.assertThat(s5.getSourceLineNumber(), is(18));\n\n        final Step s6 = steps.get(5);\n        Assert.assertThat(s6.getSourceLineNumber(), is(19));\n\n        final Step s7 = steps.get(6);\n        Assert.assertThat(s7.getSourceLineNumber(), is(20));\n\n        final Scenario sc2 = scenarios.get(1);\n\n        Assert.assertThat(sc2.getSourceStartLineNumber(), is(23));\n\n        Assert.assertThat(sc2.getSteps().get(0).getSourceLineNumber(), is(24));\n\n        final Scenario sc3 = scenarios.get(2);\n        Assert.assertThat(sc3.getSourceStartLineNumber(), is(30));\n\n        final Scenario sc4 = scenarios.get(3);\n\n        Assert.assertThat(sc4.getSteps().get(3).getSourceLineNumber(), is(56));\n    }", "signature": "void testLineNumbersAndParsing()", "full_signature": "@Test public void testLineNumbersAndParsing()", "class_method_signature": "FeatureFileParserTest.testLineNumbersAndParsing()", "testcase": true, "constructor": false, "invocations": ["loadFeatureFile", "assertNotNull", "getScenarios", "assertThat", "size", "is", "get", "assertThat", "getSourceStartOffset", "is", "not", "assertThat", "getSourceStartLineNumber", "is", "getSteps", "assertThat", "size", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "is", "get", "assertThat", "getSourceStartLineNumber", "is", "assertThat", "getSourceLineNumber", "get", "getSteps", "is", "get", "assertThat", "getSourceStartLineNumber", "is", "get", "assertThat", "getSourceLineNumber", "get", "getSteps", "is"]}, "focal_class": {"identifier": "FeatureFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(FeatureFileParser.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FeatureFileParser.class)", "var_name": "log"}, {"original_string": "private static Map<String, Directive> directiveMap = new HashMap<String, Directive>();", "modifier": "private static", "type": "Map<String, Directive>", "declarator": "directiveMap = new HashMap<String, Directive>()", "var_name": "directiveMap"}, {"original_string": "private static final Pattern DIRECTIVE_PATTERN = Pattern.compile(\"([\\\\w ]*):\");", "modifier": "private static final", "type": "Pattern", "declarator": "DIRECTIVE_PATTERN = Pattern.compile(\"([\\\\w ]*):\")", "var_name": "DIRECTIVE_PATTERN"}], "methods": [{"identifier": "loadFeatureFile", "parameters": "(final File featureFile)", "modifiers": "public", "return": "FeatureFile", "signature": "FeatureFile loadFeatureFile(final File featureFile)", "full_signature": "public FeatureFile loadFeatureFile(final File featureFile)", "class_method_signature": "FeatureFileParser.loadFeatureFile(final File featureFile)", "testcase": false, "constructor": false}, {"identifier": "getFeatureFile", "parameters": "(FileContents fileContents)", "modifiers": "public", "return": "FeatureFile", "signature": "FeatureFile getFeatureFile(FileContents fileContents)", "full_signature": "public FeatureFile getFeatureFile(FileContents fileContents)", "class_method_signature": "FeatureFileParser.getFeatureFile(FileContents fileContents)", "testcase": false, "constructor": false}, {"identifier": "getFirstLinePattern", "parameters": "(final String element)", "modifiers": "private static", "return": "String", "signature": "String getFirstLinePattern(final String element)", "full_signature": "private static String getFirstLinePattern(final String element)", "class_method_signature": "FeatureFileParser.getFirstLinePattern(final String element)", "testcase": false, "constructor": false}, {"identifier": "cascadeTags", "parameters": "(final FeatureFile ff)", "modifiers": "private static", "return": "void", "signature": "void cascadeTags(final FeatureFile ff)", "full_signature": "private static void cascadeTags(final FeatureFile ff)", "class_method_signature": "FeatureFileParser.cascadeTags(final FeatureFile ff)", "testcase": false, "constructor": false}, {"identifier": "parseFeatureDescription", "parameters": "(final FeatureFile ff)", "modifiers": "private static", "return": "boolean", "signature": "boolean parseFeatureDescription(final FeatureFile ff)", "full_signature": "private static boolean parseFeatureDescription(final FeatureFile ff)", "class_method_signature": "FeatureFileParser.parseFeatureDescription(final FeatureFile ff)", "testcase": false, "constructor": false}, {"identifier": "buildScenario", "parameters": "(final Scenario sc, FileContents fileContents)", "modifiers": "private static", "return": "void", "signature": "void buildScenario(final Scenario sc, FileContents fileContents)", "full_signature": "private static void buildScenario(final Scenario sc, FileContents fileContents)", "class_method_signature": "FeatureFileParser.buildScenario(final Scenario sc, FileContents fileContents)", "testcase": false, "constructor": false}, {"identifier": "chunkUpFeatureFile", "parameters": "(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "full_signature": "private void chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.chunkUpFeatureFile(final String fileContents, final FeatureFile ff, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processScenarioDirective", "parameters": "(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "modifiers": "private", "return": "void", "signature": "void processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "full_signature": "private void processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.processScenarioDirective(final FeatureFile ff, final Set<String> currentTags,\n                                          final String currentBackground, final String sc, final boolean outline, final int start, FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "backgroundLineNumber", "parameters": "(FileContents currentFileContents)", "modifiers": "private static", "return": "int", "signature": "int backgroundLineNumber(FileContents currentFileContents)", "full_signature": "private static int backgroundLineNumber(FileContents currentFileContents)", "class_method_signature": "FeatureFileParser.backgroundLineNumber(FileContents currentFileContents)", "testcase": false, "constructor": false}, {"identifier": "processTags", "parameters": "(final Set<String> currentTags, final String raw)", "modifiers": "private static", "return": "void", "signature": "void processTags(final Set<String> currentTags, final String raw)", "full_signature": "private static void processTags(final Set<String> currentTags, final String raw)", "class_method_signature": "FeatureFileParser.processTags(final Set<String> currentTags, final String raw)", "testcase": false, "constructor": false}, {"identifier": "stripComments", "parameters": "(final String line)", "modifiers": "public static", "return": "String", "signature": "String stripComments(final String line)", "full_signature": "public static String stripComments(final String line)", "class_method_signature": "FeatureFileParser.stripComments(final String line)", "testcase": false, "constructor": false}, {"identifier": "stripCommentsAndBlankLines", "parameters": "(final List<String> lines)", "modifiers": "private static", "return": "String", "signature": "String stripCommentsAndBlankLines(final List<String> lines)", "full_signature": "private static String stripCommentsAndBlankLines(final List<String> lines)", "class_method_signature": "FeatureFileParser.stripCommentsAndBlankLines(final List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "parseExamples", "parameters": "(final int lineNumber, final String trimmed, final Scenario sc)", "modifiers": "private static", "return": "void", "signature": "void parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "full_signature": "private static void parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "class_method_signature": "FeatureFileParser.parseExamples(final int lineNumber, final String trimmed, final Scenario sc)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/runner/FeatureFileParser.java"}, "focal_method": {"identifier": "loadFeatureFile", "parameters": "(final File featureFile)", "modifiers": "public", "return": "FeatureFile", "body": "public FeatureFile loadFeatureFile(final File featureFile) {\n        // IM - this is a little clumsy, feature file created, passed around and\n        // if invalid, discarded..\n\n        // rest our current set of lines\n\n        AssertHelper.assertTrue(\"Feature file: \" + featureFile.getAbsolutePath() + \" does not exist!\", featureFile.exists());\n\n        FileContents currentFileContents = FileContents.fromFile(featureFile);\n\n        return getFeatureFile(currentFileContents);\n\n    }", "signature": "FeatureFile loadFeatureFile(final File featureFile)", "full_signature": "public FeatureFile loadFeatureFile(final File featureFile)", "class_method_signature": "FeatureFileParser.loadFeatureFile(final File featureFile)", "testcase": false, "constructor": false, "invocations": ["assertTrue", "getAbsolutePath", "exists", "fromFile", "getFeatureFile"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}