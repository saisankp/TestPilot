{"test_class": {"identifier": "ReflectUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java"}, "test_case": {"identifier": "testIsBeanPropertyWriteMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsBeanPropertyWriteMethod() throws Exception {\n        Method method = EmptyClass.class.getMethod(\"setProperty\", EmptyProperty.class);\n        assertTrue(ReflectUtils.isBeanPropertyWriteMethod(method));\n        method = EmptyClass.class.getMethod(\"setSet\", boolean.class);\n        assertTrue(ReflectUtils.isBeanPropertyWriteMethod(method));\n    }", "signature": "void testIsBeanPropertyWriteMethod()", "full_signature": "@Test public void testIsBeanPropertyWriteMethod()", "class_method_signature": "ReflectUtilsTest.testIsBeanPropertyWriteMethod()", "testcase": true, "constructor": false, "invocations": ["getMethod", "assertTrue", "isBeanPropertyWriteMethod", "getMethod", "assertTrue", "isBeanPropertyWriteMethod"]}, "focal_class": {"identifier": "ReflectUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char JVM_VOID = 'V';", "modifier": "public static final", "type": "char", "declarator": "JVM_VOID = 'V'", "var_name": "JVM_VOID"}, {"original_string": "public static final char JVM_BOOLEAN = 'Z';", "modifier": "public static final", "type": "char", "declarator": "JVM_BOOLEAN = 'Z'", "var_name": "JVM_BOOLEAN"}, {"original_string": "public static final char JVM_BYTE = 'B';", "modifier": "public static final", "type": "char", "declarator": "JVM_BYTE = 'B'", "var_name": "JVM_BYTE"}, {"original_string": "public static final char JVM_CHAR = 'C';", "modifier": "public static final", "type": "char", "declarator": "JVM_CHAR = 'C'", "var_name": "JVM_CHAR"}, {"original_string": "public static final char JVM_DOUBLE = 'D';", "modifier": "public static final", "type": "char", "declarator": "JVM_DOUBLE = 'D'", "var_name": "JVM_DOUBLE"}, {"original_string": "public static final char JVM_FLOAT = 'F';", "modifier": "public static final", "type": "char", "declarator": "JVM_FLOAT = 'F'", "var_name": "JVM_FLOAT"}, {"original_string": "public static final char JVM_INT = 'I';", "modifier": "public static final", "type": "char", "declarator": "JVM_INT = 'I'", "var_name": "JVM_INT"}, {"original_string": "public static final char JVM_LONG = 'J';", "modifier": "public static final", "type": "char", "declarator": "JVM_LONG = 'J'", "var_name": "JVM_LONG"}, {"original_string": "public static final char JVM_SHORT = 'S';", "modifier": "public static final", "type": "char", "declarator": "JVM_SHORT = 'S'", "var_name": "JVM_SHORT"}, {"original_string": "public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];", "modifier": "public static final", "type": "Class<?>[]", "declarator": "EMPTY_CLASS_ARRAY = new Class<?>[0]", "var_name": "EMPTY_CLASS_ARRAY"}, {"original_string": "public static final String JAVA_IDENT_REGEX = \"(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_IDENT_REGEX = \"(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\"", "var_name": "JAVA_IDENT_REGEX"}, {"original_string": "public static final String JAVA_NAME_REGEX = \"(?:\" + JAVA_IDENT_REGEX + \"(?:\\\\.\" + JAVA_IDENT_REGEX + \")*)\";", "modifier": "public static final", "type": "String", "declarator": "JAVA_NAME_REGEX = \"(?:\" + JAVA_IDENT_REGEX + \"(?:\\\\.\" + JAVA_IDENT_REGEX + \")*)\"", "var_name": "JAVA_NAME_REGEX"}, {"original_string": "public static final String CLASS_DESC = \"(?:L\" + JAVA_IDENT_REGEX + \"(?:\\\\/\" + JAVA_IDENT_REGEX + \")*;)\";", "modifier": "public static final", "type": "String", "declarator": "CLASS_DESC = \"(?:L\" + JAVA_IDENT_REGEX + \"(?:\\\\/\" + JAVA_IDENT_REGEX + \")*;)\"", "var_name": "CLASS_DESC"}, {"original_string": "public static final String ARRAY_DESC = \"(?:\\\\[+(?:(?:[VZBCDFIJS])|\" + CLASS_DESC + \"))\";", "modifier": "public static final", "type": "String", "declarator": "ARRAY_DESC = \"(?:\\\\[+(?:(?:[VZBCDFIJS])|\" + CLASS_DESC + \"))\"", "var_name": "ARRAY_DESC"}, {"original_string": "public static final String DESC_REGEX = \"(?:(?:[VZBCDFIJS])|\" + CLASS_DESC + \"|\" + ARRAY_DESC + \")\";", "modifier": "public static final", "type": "String", "declarator": "DESC_REGEX = \"(?:(?:[VZBCDFIJS])|\" + CLASS_DESC + \"|\" + ARRAY_DESC + \")\"", "var_name": "DESC_REGEX"}, {"original_string": "public static final Pattern DESC_PATTERN = Pattern.compile(DESC_REGEX);", "modifier": "public static final", "type": "Pattern", "declarator": "DESC_PATTERN = Pattern.compile(DESC_REGEX)", "var_name": "DESC_PATTERN"}, {"original_string": "public static final String METHOD_DESC_REGEX = \"(?:(\" + JAVA_IDENT_REGEX + \")?\\\\((\" + DESC_REGEX + \"*)\\\\)(\" + DESC_REGEX + \")?)\";", "modifier": "public static final", "type": "String", "declarator": "METHOD_DESC_REGEX = \"(?:(\" + JAVA_IDENT_REGEX + \")?\\\\((\" + DESC_REGEX + \"*)\\\\)(\" + DESC_REGEX + \")?)\"", "var_name": "METHOD_DESC_REGEX"}, {"original_string": "public static final Pattern METHOD_DESC_PATTERN = Pattern.compile(METHOD_DESC_REGEX);", "modifier": "public static final", "type": "Pattern", "declarator": "METHOD_DESC_PATTERN = Pattern.compile(METHOD_DESC_REGEX)", "var_name": "METHOD_DESC_PATTERN"}, {"original_string": "public static final Pattern GETTER_METHOD_DESC_PATTERN = Pattern.compile(\"get([A-Z][_a-zA-Z0-9]*)\\\\(\\\\)(\" + DESC_REGEX + \")\");", "modifier": "public static final", "type": "Pattern", "declarator": "GETTER_METHOD_DESC_PATTERN = Pattern.compile(\"get([A-Z][_a-zA-Z0-9]*)\\\\(\\\\)(\" + DESC_REGEX + \")\")", "var_name": "GETTER_METHOD_DESC_PATTERN"}, {"original_string": "public static final Pattern SETTER_METHOD_DESC_PATTERN = Pattern.compile(\"set([A-Z][_a-zA-Z0-9]*)\\\\((\" + DESC_REGEX + \")\\\\)V\");", "modifier": "public static final", "type": "Pattern", "declarator": "SETTER_METHOD_DESC_PATTERN = Pattern.compile(\"set([A-Z][_a-zA-Z0-9]*)\\\\((\" + DESC_REGEX + \")\\\\)V\")", "var_name": "SETTER_METHOD_DESC_PATTERN"}, {"original_string": "public static final Pattern IS_HAS_CAN_METHOD_DESC_PATTERN = Pattern.compile(\"(?:is|has|can)([A-Z][_a-zA-Z0-9]*)\\\\(\\\\)Z\");", "modifier": "public static final", "type": "Pattern", "declarator": "IS_HAS_CAN_METHOD_DESC_PATTERN = Pattern.compile(\"(?:is|has|can)([A-Z][_a-zA-Z0-9]*)\\\\(\\\\)Z\")", "var_name": "IS_HAS_CAN_METHOD_DESC_PATTERN"}, {"original_string": "private static final ConcurrentMap<String, Class<?>> DESC_CLASS_CACHE = new ConcurrentHashMap<String, Class<?>>();", "modifier": "private static final", "type": "ConcurrentMap<String, Class<?>>", "declarator": "DESC_CLASS_CACHE = new ConcurrentHashMap<String, Class<?>>()", "var_name": "DESC_CLASS_CACHE"}, {"original_string": "private static final ConcurrentMap<String, Class<?>> NAME_CLASS_CACHE = new ConcurrentHashMap<String, Class<?>>();", "modifier": "private static final", "type": "ConcurrentMap<String, Class<?>>", "declarator": "NAME_CLASS_CACHE = new ConcurrentHashMap<String, Class<?>>()", "var_name": "NAME_CLASS_CACHE"}, {"original_string": "private static final ConcurrentMap<String, Method> SIGNATURE_METHODS_CACHE = new ConcurrentHashMap<String, Method>();", "modifier": "private static final", "type": "ConcurrentMap<String, Method>", "declarator": "SIGNATURE_METHODS_CACHE = new ConcurrentHashMap<String, Method>()", "var_name": "SIGNATURE_METHODS_CACHE"}, {"original_string": "private static Map<Class<?>, Object> primitiveDefaults = new HashMap<>();", "modifier": "private static", "type": "Map<Class<?>, Object>", "declarator": "primitiveDefaults = new HashMap<>()", "var_name": "primitiveDefaults"}], "methods": [{"identifier": "ReflectUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ReflectUtils()", "full_signature": "private  ReflectUtils()", "class_method_signature": "ReflectUtils.ReflectUtils()", "testcase": false, "constructor": true}, {"identifier": "isPrimitives", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitives(Class<?> cls)", "full_signature": "public static boolean isPrimitives(Class<?> cls)", "class_method_signature": "ReflectUtils.isPrimitives(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitive(Class<?> cls)", "full_signature": "public static boolean isPrimitive(Class<?> cls)", "class_method_signature": "ReflectUtils.isPrimitive(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getBoxedClass", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getBoxedClass(Class<?> c)", "full_signature": "public static Class<?> getBoxedClass(Class<?> c)", "class_method_signature": "ReflectUtils.getBoxedClass(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(Class<?> c, Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCompatible(Class<?> c, Object o)", "full_signature": "public static boolean isCompatible(Class<?> c, Object o)", "class_method_signature": "ReflectUtils.isCompatible(Class<?> c, Object o)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(Class<?>[] cs, Object[] os)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCompatible(Class<?>[] cs, Object[] os)", "full_signature": "public static boolean isCompatible(Class<?>[] cs, Object[] os)", "class_method_signature": "ReflectUtils.isCompatible(Class<?>[] cs, Object[] os)", "testcase": false, "constructor": false}, {"identifier": "getCodeBase", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String getCodeBase(Class<?> cls)", "full_signature": "public static String getCodeBase(Class<?> cls)", "class_method_signature": "ReflectUtils.getCodeBase(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "String", "signature": "String getName(Class<?> c)", "full_signature": "public static String getName(Class<?> c)", "class_method_signature": "ReflectUtils.getName(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getGenericClass", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericClass(Class<?> cls)", "full_signature": "public static Class<?> getGenericClass(Class<?> cls)", "class_method_signature": "ReflectUtils.getGenericClass(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getGenericClass", "parameters": "(Class<?> cls, int i)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getGenericClass(Class<?> cls, int i)", "full_signature": "public static Class<?> getGenericClass(Class<?> cls, int i)", "class_method_signature": "ReflectUtils.getGenericClass(Class<?> cls, int i)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(final Method m)", "modifiers": "public static", "return": "String", "signature": "String getName(final Method m)", "full_signature": "public static String getName(final Method m)", "class_method_signature": "ReflectUtils.getName(final Method m)", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "(String methodName, Class<?>[] parameterTypes)", "modifiers": "public static", "return": "String", "signature": "String getSignature(String methodName, Class<?>[] parameterTypes)", "full_signature": "public static String getSignature(String methodName, Class<?>[] parameterTypes)", "class_method_signature": "ReflectUtils.getSignature(String methodName, Class<?>[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(final Constructor<?> c)", "modifiers": "public static", "return": "String", "signature": "String getName(final Constructor<?> c)", "full_signature": "public static String getName(final Constructor<?> c)", "class_method_signature": "ReflectUtils.getName(final Constructor<?> c)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(Class<?> c)", "modifiers": "public static", "return": "String", "signature": "String getDesc(Class<?> c)", "full_signature": "public static String getDesc(Class<?> c)", "class_method_signature": "ReflectUtils.getDesc(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final Class<?>[] cs)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final Class<?>[] cs)", "full_signature": "public static String getDesc(final Class<?>[] cs)", "class_method_signature": "ReflectUtils.getDesc(final Class<?>[] cs)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final Method m)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final Method m)", "full_signature": "public static String getDesc(final Method m)", "class_method_signature": "ReflectUtils.getDesc(final Method m)", "testcase": false, "constructor": false}, {"identifier": "getDescArray", "parameters": "(final Method m)", "modifiers": "public static", "return": "String[]", "signature": "String[] getDescArray(final Method m)", "full_signature": "public static String[] getDescArray(final Method m)", "class_method_signature": "ReflectUtils.getDescArray(final Method m)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final Constructor<?> c)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final Constructor<?> c)", "full_signature": "public static String getDesc(final Constructor<?> c)", "class_method_signature": "ReflectUtils.getDesc(final Constructor<?> c)", "testcase": false, "constructor": false}, {"identifier": "getDescWithoutMethodName", "parameters": "(Method m)", "modifiers": "public static", "return": "String", "signature": "String getDescWithoutMethodName(Method m)", "full_signature": "public static String getDescWithoutMethodName(Method m)", "class_method_signature": "ReflectUtils.getDescWithoutMethodName(Method m)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final CtClass c)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final CtClass c)", "full_signature": "public static String getDesc(final CtClass c)", "class_method_signature": "ReflectUtils.getDesc(final CtClass c)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final CtMethod m)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final CtMethod m)", "full_signature": "public static String getDesc(final CtMethod m)", "class_method_signature": "ReflectUtils.getDesc(final CtMethod m)", "testcase": false, "constructor": false}, {"identifier": "getDesc", "parameters": "(final CtConstructor c)", "modifiers": "public static", "return": "String", "signature": "String getDesc(final CtConstructor c)", "full_signature": "public static String getDesc(final CtConstructor c)", "class_method_signature": "ReflectUtils.getDesc(final CtConstructor c)", "testcase": false, "constructor": false}, {"identifier": "getDescWithoutMethodName", "parameters": "(final CtMethod m)", "modifiers": "public static", "return": "String", "signature": "String getDescWithoutMethodName(final CtMethod m)", "full_signature": "public static String getDescWithoutMethodName(final CtMethod m)", "class_method_signature": "ReflectUtils.getDescWithoutMethodName(final CtMethod m)", "testcase": false, "constructor": false}, {"identifier": "name2desc", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String name2desc(String name)", "full_signature": "public static String name2desc(String name)", "class_method_signature": "ReflectUtils.name2desc(String name)", "testcase": false, "constructor": false}, {"identifier": "desc2name", "parameters": "(String desc)", "modifiers": "public static", "return": "String", "signature": "String desc2name(String desc)", "full_signature": "public static String desc2name(String desc)", "class_method_signature": "ReflectUtils.desc2name(String desc)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String name)", "full_signature": "public static Class<?> forName(String name)", "class_method_signature": "ReflectUtils.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(ClassLoader cl, String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(ClassLoader cl, String name)", "full_signature": "public static Class<?> forName(ClassLoader cl, String name)", "class_method_signature": "ReflectUtils.forName(ClassLoader cl, String name)", "testcase": false, "constructor": false}, {"identifier": "name2class", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> name2class(String name)", "full_signature": "public static Class<?> name2class(String name)", "class_method_signature": "ReflectUtils.name2class(String name)", "testcase": false, "constructor": false}, {"identifier": "name2class", "parameters": "(ClassLoader cl, String name)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> name2class(ClassLoader cl, String name)", "full_signature": "private static Class<?> name2class(ClassLoader cl, String name)", "class_method_signature": "ReflectUtils.name2class(ClassLoader cl, String name)", "testcase": false, "constructor": false}, {"identifier": "desc2class", "parameters": "(String desc)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> desc2class(String desc)", "full_signature": "public static Class<?> desc2class(String desc)", "class_method_signature": "ReflectUtils.desc2class(String desc)", "testcase": false, "constructor": false}, {"identifier": "desc2class", "parameters": "(ClassLoader cl, String desc)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> desc2class(ClassLoader cl, String desc)", "full_signature": "private static Class<?> desc2class(ClassLoader cl, String desc)", "class_method_signature": "ReflectUtils.desc2class(ClassLoader cl, String desc)", "testcase": false, "constructor": false}, {"identifier": "desc2classArray", "parameters": "(String desc)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] desc2classArray(String desc)", "full_signature": "public static Class<?>[] desc2classArray(String desc)", "class_method_signature": "ReflectUtils.desc2classArray(String desc)", "testcase": false, "constructor": false}, {"identifier": "desc2classArray", "parameters": "(ClassLoader cl, String desc)", "modifiers": "private static", "return": "Class<?>[]", "signature": "Class<?>[] desc2classArray(ClassLoader cl, String desc)", "full_signature": "private static Class<?>[] desc2classArray(ClassLoader cl, String desc)", "class_method_signature": "ReflectUtils.desc2classArray(ClassLoader cl, String desc)", "testcase": false, "constructor": false}, {"identifier": "findMethodByMethodSignature", "parameters": "(Class<?> clazz, String methodName, String[] parameterTypes)", "modifiers": "@Deprecated public static", "return": "Method", "signature": "Method findMethodByMethodSignature(Class<?> clazz, String methodName, String[] parameterTypes)", "full_signature": "@Deprecated public static Method findMethodByMethodSignature(Class<?> clazz, String methodName, String[] parameterTypes)", "class_method_signature": "ReflectUtils.findMethodByMethodSignature(Class<?> clazz, String methodName, String[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "findMethodByMethodName", "parameters": "(Class<?> clazz, String methodName)", "modifiers": "@Deprecated public static", "return": "Method", "signature": "Method findMethodByMethodName(Class<?> clazz, String methodName)", "full_signature": "@Deprecated public static Method findMethodByMethodName(Class<?> clazz, String methodName)", "class_method_signature": "ReflectUtils.findMethodByMethodName(Class<?> clazz, String methodName)", "testcase": false, "constructor": false}, {"identifier": "findConstructor", "parameters": "(Class<?> clazz, Class<?> paramType)", "modifiers": "public static", "return": "Constructor<?>", "signature": "Constructor<?> findConstructor(Class<?> clazz, Class<?> paramType)", "full_signature": "public static Constructor<?> findConstructor(Class<?> clazz, Class<?> paramType)", "class_method_signature": "ReflectUtils.findConstructor(Class<?> clazz, Class<?> paramType)", "testcase": false, "constructor": false}, {"identifier": "isInstance", "parameters": "(Object obj, String interfaceClazzName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstance(Object obj, String interfaceClazzName)", "full_signature": "public static boolean isInstance(Object obj, String interfaceClazzName)", "class_method_signature": "ReflectUtils.isInstance(Object obj, String interfaceClazzName)", "testcase": false, "constructor": false}, {"identifier": "getEmptyObject", "parameters": "(Class<?> returnType)", "modifiers": "public static", "return": "Object", "signature": "Object getEmptyObject(Class<?> returnType)", "full_signature": "public static Object getEmptyObject(Class<?> returnType)", "class_method_signature": "ReflectUtils.getEmptyObject(Class<?> returnType)", "testcase": false, "constructor": false}, {"identifier": "getEmptyObject", "parameters": "(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level)", "modifiers": "private static", "return": "Object", "signature": "Object getEmptyObject(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level)", "full_signature": "private static Object getEmptyObject(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level)", "class_method_signature": "ReflectUtils.getEmptyObject(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level)", "testcase": false, "constructor": false}, {"identifier": "defaultReturn", "parameters": "(Method m)", "modifiers": "public static", "return": "Object", "signature": "Object defaultReturn(Method m)", "full_signature": "public static Object defaultReturn(Method m)", "class_method_signature": "ReflectUtils.defaultReturn(Method m)", "testcase": false, "constructor": false}, {"identifier": "defaultReturn", "parameters": "(Class<?> classType)", "modifiers": "public static", "return": "Object", "signature": "Object defaultReturn(Class<?> classType)", "full_signature": "public static Object defaultReturn(Class<?> classType)", "class_method_signature": "ReflectUtils.defaultReturn(Class<?> classType)", "testcase": false, "constructor": false}, {"identifier": "isBeanPropertyReadMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBeanPropertyReadMethod(Method method)", "full_signature": "public static boolean isBeanPropertyReadMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyReadMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "getPropertyNameFromBeanReadMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "String", "signature": "String getPropertyNameFromBeanReadMethod(Method method)", "full_signature": "public static String getPropertyNameFromBeanReadMethod(Method method)", "class_method_signature": "ReflectUtils.getPropertyNameFromBeanReadMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "isBeanPropertyWriteMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBeanPropertyWriteMethod(Method method)", "full_signature": "public static boolean isBeanPropertyWriteMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyWriteMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "getPropertyNameFromBeanWriteMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "String", "signature": "String getPropertyNameFromBeanWriteMethod(Method method)", "full_signature": "public static String getPropertyNameFromBeanWriteMethod(Method method)", "class_method_signature": "ReflectUtils.getPropertyNameFromBeanWriteMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "isPublicInstanceField", "parameters": "(Field field)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPublicInstanceField(Field field)", "full_signature": "public static boolean isPublicInstanceField(Field field)", "class_method_signature": "ReflectUtils.isPublicInstanceField(Field field)", "testcase": false, "constructor": false}, {"identifier": "getBeanPropertyFields", "parameters": "(Class cl)", "modifiers": "public static", "return": "Map<String, Field>", "signature": "Map<String, Field> getBeanPropertyFields(Class cl)", "full_signature": "public static Map<String, Field> getBeanPropertyFields(Class cl)", "class_method_signature": "ReflectUtils.getBeanPropertyFields(Class cl)", "testcase": false, "constructor": false}, {"identifier": "getBeanPropertyReadMethods", "parameters": "(Class cl)", "modifiers": "public static", "return": "Map<String, Method>", "signature": "Map<String, Method> getBeanPropertyReadMethods(Class cl)", "full_signature": "public static Map<String, Method> getBeanPropertyReadMethods(Class cl)", "class_method_signature": "ReflectUtils.getBeanPropertyReadMethods(Class cl)", "testcase": false, "constructor": false}, {"identifier": "getReturnTypes", "parameters": "(Method method)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getReturnTypes(Method method)", "full_signature": "public static Type[] getReturnTypes(Method method)", "class_method_signature": "ReflectUtils.getReturnTypes(Method method)", "testcase": false, "constructor": false}, {"identifier": "findParameterizedTypes", "parameters": "(Class<?> sourceClass)", "modifiers": "public static", "return": "Set<ParameterizedType>", "signature": "Set<ParameterizedType> findParameterizedTypes(Class<?> sourceClass)", "full_signature": "public static Set<ParameterizedType> findParameterizedTypes(Class<?> sourceClass)", "class_method_signature": "ReflectUtils.findParameterizedTypes(Class<?> sourceClass)", "testcase": false, "constructor": false}, {"identifier": "findHierarchicalTypes", "parameters": "(Class<?> sourceClass, Class<T> matchType)", "modifiers": "public static", "return": "Set<Class<T>>", "signature": "Set<Class<T>> findHierarchicalTypes(Class<?> sourceClass, Class<T> matchType)", "full_signature": "public static Set<Class<T>> findHierarchicalTypes(Class<?> sourceClass, Class<T> matchType)", "class_method_signature": "ReflectUtils.findHierarchicalTypes(Class<?> sourceClass, Class<T> matchType)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object bean, String methodName)", "modifiers": "public static", "return": "T", "signature": "T getProperty(Object bean, String methodName)", "full_signature": "public static T getProperty(Object bean, String methodName)", "class_method_signature": "ReflectUtils.getProperty(Object bean, String methodName)", "testcase": false, "constructor": false}, {"identifier": "resolveTypes", "parameters": "(Object... values)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] resolveTypes(Object... values)", "full_signature": "public static Class[] resolveTypes(Object... values)", "class_method_signature": "ReflectUtils.resolveTypes(Object... values)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java"}, "focal_method": {"identifier": "isBeanPropertyWriteMethod", "parameters": "(Method method)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isBeanPropertyWriteMethod(Method method) {\n        return method != null\n                && Modifier.isPublic(method.getModifiers())\n                && !Modifier.isStatic(method.getModifiers())\n                && method.getDeclaringClass() != Object.class\n                && method.getParameterTypes().length == 1\n                && method.getName().startsWith(\"set\")\n                && method.getName().length() > 3;\n    }", "signature": "boolean isBeanPropertyWriteMethod(Method method)", "full_signature": "public static boolean isBeanPropertyWriteMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyWriteMethod(Method method)", "testcase": false, "constructor": false, "invocations": ["isPublic", "getModifiers", "isStatic", "getModifiers", "getDeclaringClass", "getParameterTypes", "startsWith", "getName", "length", "getName"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}