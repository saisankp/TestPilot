{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/http/HttpUtilsTest.java"}, "test_case": {"identifier": "testCalculatePathMatchScore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculatePathMatchScore() {\n        List<Integer> score = HttpUtils.calculatePathMatchScore(\"/cats/{id}\");\n        Match.equals(score, \"[6,1,0]\");\n        score = HttpUtils.calculatePathMatchScore(\"/cats/1\");\n        Match.equals(score, \"[7,0,0]\");\n        score = HttpUtils.calculatePathMatchScore(\"/cats/1/\");\n        Match.equals(score, \"[7,0,0]\");\n        score = HttpUtils.calculatePathMatchScore(\"cats/1/\");\n        Match.equals(score, \"[7,0,0]\");\n    }", "signature": "void testCalculatePathMatchScore()", "full_signature": "@Test public void testCalculatePathMatchScore()", "class_method_signature": "HttpUtilsTest.testCalculatePathMatchScore()", "testcase": true, "constructor": false, "invocations": ["calculatePathMatchScore", "equals", "calculatePathMatchScore", "equals", "calculatePathMatchScore", "equals", "calculatePathMatchScore", "equals"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String HEADER_CONTENT_TYPE = \"Content-Type\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_TYPE = \"Content-Type\"", "var_name": "HEADER_CONTENT_TYPE"}, {"original_string": "public static final String HEADER_CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_CONTENT_LENGTH = \"Content-Length\"", "var_name": "HEADER_CONTENT_LENGTH"}, {"original_string": "public static final String HEADER_ACCEPT = \"Accept\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_ACCEPT = \"Accept\"", "var_name": "HEADER_ACCEPT"}, {"original_string": "public static final String HEADER_ALLOW = \"Allow\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_ALLOW = \"Allow\"", "var_name": "HEADER_ALLOW"}, {"original_string": "public static final String HEADER_AC_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_AC_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\"", "var_name": "HEADER_AC_ALLOW_ORIGIN"}, {"original_string": "public static final String HEADER_AC_ALLOW_METHODS = \"Access-Control-Allow-Methods\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_AC_ALLOW_METHODS = \"Access-Control-Allow-Methods\"", "var_name": "HEADER_AC_ALLOW_METHODS"}, {"original_string": "public static final String HEADER_AC_REQUEST_HEADERS = \"Access-Control-Request-Headers\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_AC_REQUEST_HEADERS = \"Access-Control-Request-Headers\"", "var_name": "HEADER_AC_REQUEST_HEADERS"}, {"original_string": "public static final String HEADER_AC_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";", "modifier": "public static final", "type": "String", "declarator": "HEADER_AC_ALLOW_HEADERS = \"Access-Control-Allow-Headers\"", "var_name": "HEADER_AC_ALLOW_HEADERS"}, {"original_string": "public static final String CHARSET = \"charset\";", "modifier": "public static final", "type": "String", "declarator": "CHARSET = \"charset\"", "var_name": "CHARSET"}, {"original_string": "private static final String[] PRINTABLES = {\"json\", \"xml\", \"text\", \"urlencoded\", \"html\"};", "modifier": "private static final", "type": "String[]", "declarator": "PRINTABLES = {\"json\", \"xml\", \"text\", \"urlencoded\", \"html\"}", "var_name": "PRINTABLES"}, {"original_string": "public static final Set<String> HTTP_METHODS\n            = Stream.of(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\", \"HEAD\", \"CONNECT\", \"TRACE\")\n                    .collect(Collectors.toSet());", "modifier": "public static final", "type": "Set<String>", "declarator": "HTTP_METHODS\n            = Stream.of(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"OPTIONS\", \"HEAD\", \"CONNECT\", \"TRACE\")\n                    .collect(Collectors.toSet())", "var_name": "HTTP_METHODS"}, {"original_string": "public static final List<Integer> DEFAULT_PATH_SCORE = Collections.unmodifiableList(Arrays.asList(0, 0, 0));", "modifier": "public static final", "type": "List<Integer>", "declarator": "DEFAULT_PATH_SCORE = Collections.unmodifiableList(Arrays.asList(0, 0, 0))", "var_name": "DEFAULT_PATH_SCORE"}, {"original_string": "private static final Map<String, UriTemplateParser> TEMPLATE_PARSER_CACHE = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, UriTemplateParser>", "declarator": "TEMPLATE_PARSER_CACHE = new ConcurrentHashMap<>()", "var_name": "TEMPLATE_PARSER_CACHE"}, {"original_string": "private static final AtomicInteger BOUNDARY_COUNTER = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "BOUNDARY_COUNTER = new AtomicInteger()", "var_name": "BOUNDARY_COUNTER"}], "methods": [{"identifier": "HttpUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " HttpUtils()", "full_signature": "private  HttpUtils()", "class_method_signature": "HttpUtils.HttpUtils()", "testcase": false, "constructor": true}, {"identifier": "getKeyStore", "parameters": "(ScenarioContext context, String trustStoreFile, String password, String type)", "modifiers": "public static", "return": "KeyStore", "signature": "KeyStore getKeyStore(ScenarioContext context, String trustStoreFile, String password, String type)", "full_signature": "public static KeyStore getKeyStore(ScenarioContext context, String trustStoreFile, String password, String type)", "class_method_signature": "HttpUtils.getKeyStore(ScenarioContext context, String trustStoreFile, String password, String type)", "testcase": false, "constructor": false}, {"identifier": "isPrintable", "parameters": "(String mediaType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrintable(String mediaType)", "full_signature": "public static boolean isPrintable(String mediaType)", "class_method_signature": "HttpUtils.isPrintable(String mediaType)", "testcase": false, "constructor": false}, {"identifier": "parseContentTypeCharset", "parameters": "(String mimeType)", "modifiers": "public static", "return": "Charset", "signature": "Charset parseContentTypeCharset(String mimeType)", "full_signature": "public static Charset parseContentTypeCharset(String mimeType)", "class_method_signature": "HttpUtils.parseContentTypeCharset(String mimeType)", "testcase": false, "constructor": false}, {"identifier": "parseContentTypeParams", "parameters": "(String mimeType)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseContentTypeParams(String mimeType)", "full_signature": "public static Map<String, String> parseContentTypeParams(String mimeType)", "class_method_signature": "HttpUtils.parseContentTypeParams(String mimeType)", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "(ScriptValue sv)", "modifiers": "public static", "return": "String", "signature": "String getContentType(ScriptValue sv)", "full_signature": "public static String getContentType(ScriptValue sv)", "class_method_signature": "HttpUtils.getContentType(ScriptValue sv)", "testcase": false, "constructor": false}, {"identifier": "parseCookieHeaderString", "parameters": "(String header)", "modifiers": "public static", "return": "Map<String, Cookie>", "signature": "Map<String, Cookie> parseCookieHeaderString(String header)", "full_signature": "public static Map<String, Cookie> parseCookieHeaderString(String header)", "class_method_signature": "HttpUtils.parseCookieHeaderString(String header)", "testcase": false, "constructor": false}, {"identifier": "createCookieHeaderValue", "parameters": "(Collection<Cookie> cookies)", "modifiers": "public static", "return": "String", "signature": "String createCookieHeaderValue(Collection<Cookie> cookies)", "full_signature": "public static String createCookieHeaderValue(Collection<Cookie> cookies)", "class_method_signature": "HttpUtils.createCookieHeaderValue(Collection<Cookie> cookies)", "testcase": false, "constructor": false}, {"identifier": "parseUriPattern", "parameters": "(String pattern, String url)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseUriPattern(String pattern, String url)", "full_signature": "public static Map<String, String> parseUriPattern(String pattern, String url)", "class_method_signature": "HttpUtils.parseUriPattern(String pattern, String url)", "testcase": false, "constructor": false}, {"identifier": "getUriParserForPattern", "parameters": "(String pattern)", "modifiers": "private static", "return": "UriTemplateParser", "signature": "UriTemplateParser getUriParserForPattern(String pattern)", "full_signature": "private static UriTemplateParser getUriParserForPattern(String pattern)", "class_method_signature": "HttpUtils.getUriParserForPattern(String pattern)", "testcase": false, "constructor": false}, {"identifier": "normaliseUriPath", "parameters": "(String uri)", "modifiers": "public static final", "return": "String", "signature": "String normaliseUriPath(String uri)", "full_signature": "public static final String normaliseUriPath(String uri)", "class_method_signature": "HttpUtils.normaliseUriPath(String uri)", "testcase": false, "constructor": false}, {"identifier": "calculatePathMatchScore", "parameters": "(String path)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> calculatePathMatchScore(String path)", "full_signature": "public static List<Integer> calculatePathMatchScore(String path)", "class_method_signature": "HttpUtils.calculatePathMatchScore(String path)", "testcase": false, "constructor": false}, {"identifier": "generateMimeBoundaryMarker", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateMimeBoundaryMarker()", "full_signature": "public static String generateMimeBoundaryMarker()", "class_method_signature": "HttpUtils.generateMimeBoundaryMarker()", "testcase": false, "constructor": false}, {"identifier": "multiPartToString", "parameters": "(List<MultiPartItem> items, String boundary)", "modifiers": "public static", "return": "String", "signature": "String multiPartToString(List<MultiPartItem> items, String boundary)", "full_signature": "public static String multiPartToString(List<MultiPartItem> items, String boundary)", "class_method_signature": "HttpUtils.multiPartToString(List<MultiPartItem> items, String boundary)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/http/HttpUtils.java"}, "focal_method": {"identifier": "calculatePathMatchScore", "parameters": "(String path)", "modifiers": "public static", "return": "List<Integer>", "body": "public static List<Integer> calculatePathMatchScore(String path) {\n        path = normaliseUriPath(path);\n        UriTemplateParser templateParser = getUriParserForPattern(path);\n\n        int pathScore = templateParser.getNumberOfLiteralCharacters();\n        int paramScore = templateParser.getNumberOfRegexGroups() - templateParser.getNumberOfExplicitRegexes();\n        int regexScore = templateParser.getNumberOfExplicitRegexes();\n\n        List<Integer> scores = Arrays.asList(pathScore, paramScore, regexScore);\n        return scores;\n    }", "signature": "List<Integer> calculatePathMatchScore(String path)", "full_signature": "public static List<Integer> calculatePathMatchScore(String path)", "class_method_signature": "HttpUtils.calculatePathMatchScore(String path)", "testcase": false, "constructor": false, "invocations": ["normaliseUriPath", "getUriParserForPattern", "getNumberOfLiteralCharacters", "getNumberOfRegexGroups", "getNumberOfExplicitRegexes", "getNumberOfExplicitRegexes", "asList"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}