{"test_class": {"identifier": "AdtUiUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "adt-ui/src/test/java/com/android/tools/adtui/common/AdtUiUtilsTest.java"}, "test_case": {"identifier": "testShrinkToFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testShrinkToFit() {\n    JLabel testLabel = new JLabel(\"Test\");\n    FontMetrics testMetrics = testLabel.getFontMetrics(AdtUiUtils.DEFAULT_FONT);\n\n    String testString = StringUtil.repeat(\"A\", 100);\n    int stringWidth = testMetrics.stringWidth(testString);\n    int ellipsisWidth = testMetrics.stringWidth(ELLIPSIS);\n    int perCharacterWidth = testMetrics.stringWidth(\"A\");\n\n    // Enough space to render the whole string so no truncation occurs\n    assertEquals(testString, AdtUiUtils.shrinkToFit(testString, testMetrics, stringWidth));\n\n    // Not enough space for ellipsis so an empty string should be returned\n    assertEquals(\"\", AdtUiUtils.shrinkToFit(testString, testMetrics, ellipsisWidth - 1));\n\n    // Just enough space for ellipsis, but we should still return an empty string (since \"...\" on\n    // its own is useless)\n    assertEquals(\"\", AdtUiUtils.shrinkToFit(testString, testMetrics, ellipsisWidth));\n\n    for (int i = 5; i < 80; ++i) {\n      int spaceAvailable = i * perCharacterWidth;\n\n      String shrunk = AdtUiUtils.shrinkToFit(testString, s -> testMetrics.stringWidth(s) <= spaceAvailable + ellipsisWidth);\n      assertEquals(StringUtil.repeat(\"A\", i) + \"...\", shrunk);\n    }\n  }", "signature": "void testShrinkToFit()", "full_signature": "@Test public void testShrinkToFit()", "class_method_signature": "AdtUiUtilsTest.testShrinkToFit()", "testcase": true, "constructor": false, "invocations": ["getFontMetrics", "repeat", "stringWidth", "stringWidth", "stringWidth", "assertEquals", "shrinkToFit", "assertEquals", "shrinkToFit", "assertEquals", "shrinkToFit", "shrinkToFit", "stringWidth", "assertEquals", "repeat"]}, "focal_class": {"identifier": "AdtUiUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final JBFont DEFAULT_FONT = JBUI.Fonts.label(10f);", "modifier": "public static final", "type": "JBFont", "declarator": "DEFAULT_FONT = JBUI.Fonts.label(10f)", "var_name": "DEFAULT_FONT"}, {"original_string": "public static final JBFont EMPTY_TOOL_WINDOW_FONT = JBUI.Fonts.label(16f);", "modifier": "public static final", "type": "JBFont", "declarator": "EMPTY_TOOL_WINDOW_FONT = JBUI.Fonts.label(16f)", "var_name": "EMPTY_TOOL_WINDOW_FONT"}, {"original_string": "public static final Color DEFAULT_FONT_COLOR = JBColor.foreground();", "modifier": "public static final", "type": "Color", "declarator": "DEFAULT_FONT_COLOR = JBColor.foreground()", "var_name": "DEFAULT_FONT_COLOR"}, {"original_string": "public static final Color DEFAULT_BORDER_COLOR = StudioColorsKt.getBorder();", "modifier": "public static final", "type": "Color", "declarator": "DEFAULT_BORDER_COLOR = StudioColorsKt.getBorder()", "var_name": "DEFAULT_BORDER_COLOR"}, {"original_string": "public static final Border DEFAULT_TOP_BORDER = BorderFactory.createMatteBorder(1, 0, 0, 0, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_TOP_BORDER = BorderFactory.createMatteBorder(1, 0, 0, 0, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_TOP_BORDER"}, {"original_string": "public static final Border DEFAULT_LEFT_BORDER = BorderFactory.createMatteBorder(0, 1, 0, 0, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_LEFT_BORDER = BorderFactory.createMatteBorder(0, 1, 0, 0, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_LEFT_BORDER"}, {"original_string": "public static final Border DEFAULT_BOTTOM_BORDER = BorderFactory.createMatteBorder(0, 0, 1, 0, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_BOTTOM_BORDER = BorderFactory.createMatteBorder(0, 0, 1, 0, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_BOTTOM_BORDER"}, {"original_string": "public static final Border DEFAULT_RIGHT_BORDER = BorderFactory.createMatteBorder(0, 0, 0, 1, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_RIGHT_BORDER = BorderFactory.createMatteBorder(0, 0, 0, 1, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_RIGHT_BORDER"}, {"original_string": "public static final Border DEFAULT_HORIZONTAL_BORDERS = BorderFactory.createMatteBorder(1, 0, 1, 0, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_HORIZONTAL_BORDERS = BorderFactory.createMatteBorder(1, 0, 1, 0, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_HORIZONTAL_BORDERS"}, {"original_string": "public static final Border DEFAULT_VERTICAL_BORDERS = BorderFactory.createMatteBorder(0, 1, 0, 1, DEFAULT_BORDER_COLOR);", "modifier": "public static final", "type": "Border", "declarator": "DEFAULT_VERTICAL_BORDERS = BorderFactory.createMatteBorder(0, 1, 0, 1, DEFAULT_BORDER_COLOR)", "var_name": "DEFAULT_VERTICAL_BORDERS"}, {"original_string": "public static final GridBagConstraints GBC_FULL =\n    new GridBagConstraints(0, 0, 1, 1, 1, 1, GridBagConstraints.BASELINE, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);", "modifier": "public static final", "type": "GridBagConstraints", "declarator": "GBC_FULL =\n    new GridBagConstraints(0, 0, 1, 1, 1, 1, GridBagConstraints.BASELINE, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0)", "var_name": "GBC_FULL"}], "methods": [{"identifier": "AdtUiUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " AdtUiUtils()", "full_signature": "private  AdtUiUtils()", "class_method_signature": "AdtUiUtils.AdtUiUtils()", "testcase": false, "constructor": true}, {"identifier": "shrinkToFit", "parameters": "(String text, FontMetrics metrics, float availableSpace)", "modifiers": "public static", "return": "String", "signature": "String shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "full_signature": "public static String shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "class_method_signature": "AdtUiUtils.shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "testcase": false, "constructor": false}, {"identifier": "shrinkToFit", "parameters": "(String text, Predicate<String> textFitPredicate)", "modifiers": "public static", "return": "String", "signature": "String shrinkToFit(String text, Predicate<String> textFitPredicate)", "full_signature": "public static String shrinkToFit(String text, Predicate<String> textFitPredicate)", "class_method_signature": "AdtUiUtils.shrinkToFit(String text, Predicate<String> textFitPredicate)", "testcase": false, "constructor": false}, {"identifier": "unscale", "parameters": "(int i)", "modifiers": "public static", "return": "int", "signature": "int unscale(int i)", "full_signature": "public static int unscale(int i)", "class_method_signature": "AdtUiUtils.unscale(int i)", "testcase": false, "constructor": false}, {"identifier": "overlayColor", "parameters": "(int backgroundRgb, int foregroundRbg, float foregroundOpacity)", "modifiers": "public static", "return": "Color", "signature": "Color overlayColor(int backgroundRgb, int foregroundRbg, float foregroundOpacity)", "full_signature": "public static Color overlayColor(int backgroundRgb, int foregroundRbg, float foregroundOpacity)", "class_method_signature": "AdtUiUtils.overlayColor(int backgroundRgb, int foregroundRbg, float foregroundOpacity)", "testcase": false, "constructor": false}, {"identifier": "isActionKeyDown", "parameters": "(@NotNull InputEvent event)", "modifiers": "public static", "return": "boolean", "signature": "boolean isActionKeyDown(@NotNull InputEvent event)", "full_signature": "public static boolean isActionKeyDown(@NotNull InputEvent event)", "class_method_signature": "AdtUiUtils.isActionKeyDown(@NotNull InputEvent event)", "testcase": false, "constructor": false}, {"identifier": "getActionMask", "parameters": "()", "modifiers": "@JdkConstants.InputEventMask public static", "return": "int", "signature": "int getActionMask()", "full_signature": "@JdkConstants.InputEventMask public static int getActionMask()", "class_method_signature": "AdtUiUtils.getActionMask()", "testcase": false, "constructor": false}, {"identifier": "getActionKeyText", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getActionKeyText()", "full_signature": "public static String getActionKeyText()", "class_method_signature": "AdtUiUtils.getActionKeyText()", "testcase": false, "constructor": false}, {"identifier": "createHorizontalSeparator", "parameters": "()", "modifiers": "public static", "return": "JComponent", "signature": "JComponent createHorizontalSeparator()", "full_signature": "public static JComponent createHorizontalSeparator()", "class_method_signature": "AdtUiUtils.createHorizontalSeparator()", "testcase": false, "constructor": false}, {"identifier": "createNestedVScrollPane", "parameters": "(@NotNull JComponent component)", "modifiers": "@NotNull public static", "return": "JBScrollPane", "signature": "JBScrollPane createNestedVScrollPane(@NotNull JComponent component)", "full_signature": "@NotNull public static JBScrollPane createNestedVScrollPane(@NotNull JComponent component)", "class_method_signature": "AdtUiUtils.createNestedVScrollPane(@NotNull JComponent component)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/common/AdtUiUtils.java"}, "focal_method": {"identifier": "shrinkToFit", "parameters": "(String text, FontMetrics metrics, float availableSpace)", "modifiers": "public static", "return": "String", "body": "public static String shrinkToFit(String text, FontMetrics metrics, float availableSpace) {\n    return shrinkToFit(text, s -> metrics.stringWidth(s) <= availableSpace);\n  }", "signature": "String shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "full_signature": "public static String shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "class_method_signature": "AdtUiUtils.shrinkToFit(String text, FontMetrics metrics, float availableSpace)", "testcase": false, "constructor": false, "invocations": ["shrinkToFit", "stringWidth"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}