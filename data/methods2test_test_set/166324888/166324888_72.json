{"test_class": {"identifier": "AddressFormatUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}, {"original_string": "@Mock\n    AddressFormatUtil addressFormatUtilMock;", "modifier": "@Mock", "type": "AddressFormatUtil", "declarator": "addressFormatUtilMock", "var_name": "addressFormatUtilMock"}], "file": "wallet/src/test/java/com/platon/aton/utils/AddressFormatUtilTest.java"}, "test_case": {"identifier": "formatAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void formatAddress() {\n        String address = \"0x2e95e3ce0a54951eb9a99152a6d5827872dfb4fd\";\n        String text = null;\n        if (address != null) {\n            String regex = \"(\\\\w{10})(\\\\w*)(\\\\w{10})\";\n            try {\n                text = address.replaceAll(regex, \"$1...$3\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        assertEquals(\"0x2e95e3ce...7872dfb4fd\", text);\n    }", "signature": "void formatAddress()", "full_signature": "@Test public void formatAddress()", "class_method_signature": "AddressFormatUtilTest.formatAddress()", "testcase": true, "constructor": false, "invocations": ["replaceAll", "printStackTrace", "assertEquals"]}, "focal_class": {"identifier": "AddressFormatUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AddressFormatUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " AddressFormatUtil()", "full_signature": "private  AddressFormatUtil()", "class_method_signature": "AddressFormatUtil.AddressFormatUtil()", "testcase": false, "constructor": true}, {"identifier": "formatAddress", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String formatAddress(String address)", "full_signature": "public static String formatAddress(String address)", "class_method_signature": "AddressFormatUtil.formatAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "formatTransactionAddress", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String formatTransactionAddress(String address)", "full_signature": "public static String formatTransactionAddress(String address)", "class_method_signature": "AddressFormatUtil.formatTransactionAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "formatClaimRewardRecordAddress", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String formatClaimRewardRecordAddress(String address)", "full_signature": "public static String formatClaimRewardRecordAddress(String address)", "class_method_signature": "AddressFormatUtil.formatClaimRewardRecordAddress(String address)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/utils/AddressFormatUtil.java"}, "focal_method": {"identifier": "formatAddress", "parameters": "(String address)", "modifiers": "public static", "return": "String", "body": "public static String formatAddress(String address) {\n\n        String text = \"\";\n\n        if (address != null) {\n\n            String regex = \"(\\\\w{10})(\\\\w*)(\\\\w{10})\";\n\n            try {\n                text = address.replaceAll(regex, \"$1....$3\");\n            } catch (Exception e) {\n                LogUtils.e(e.getMessage(),e.fillInStackTrace());\n            }\n        }\n        return text;\n    }", "signature": "String formatAddress(String address)", "full_signature": "public static String formatAddress(String address)", "class_method_signature": "AddressFormatUtil.formatAddress(String address)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "e", "getMessage", "fillInStackTrace"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}