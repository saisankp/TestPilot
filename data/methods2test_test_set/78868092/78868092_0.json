{"test_class": {"identifier": "GraphiteKeyUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "services/src/test/java/com/vsct/supervision/notification/util/GraphiteKeyUtilTest.java"}, "test_case": {"identifier": "testExtractGraphiteKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractGraphiteKeys() throws Exception {\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\"log.hdfs.adminreport.dfsRemaining\"))\n            .containsOnly(\"log.hdfs.adminreport.dfsRemaining\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\"keepLastValue(DT.log.flume.central.*-bck_63002.channelMut*.ChannelSize)\"))\n            .containsOnly(\"DT.log.flume.central.*-bck_63002.channelMut*.ChannelSize\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"keepLastValue(alias(sumSeries(keepLastValue(nagios.*.Check_Socket_TUX.60004)), 'Nbre de socket port : 60004'))\"))\n            .containsOnly(\"nagios.*.Check_Socket_TUX.60004\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"keepLastValue(summarize(nonNegativeDerivative(sumSeries(Zenith.MPD.MPD.*.*.PRD1.WAS.*.any.any.soap_finTransaction-POST.POST\"\n                + \".io.any.any.vol.any.1min.count)), '1h', 'sum', false))\"))\n            .containsOnly(\"Zenith.MPD.MPD.*.*.PRD1.WAS.*.any.any.soap_finTransaction-POST.POST.io.any.any.vol.any.1min.count\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"keepLastValue(asPercent(summarize(nonNegativeDerivative(DT.sum.flume.sink.piedipartino-bck_63101.channel_SUM_AQMI\"\n                + \".EventTakeSuccessCount),'1h','avg'),averageSeries(timeShift(summarize(nonNegativeDerivative(DT.sum.flume.sink\"\n                + \".piedipartino-bck_63101.channel_SUM_AQMI.EventTakeSuccessCount),'1h','avg'),'1d'))))\"))\n            .containsOnly(\"DT.sum.flume.sink.piedipartino-bck_63101.channel_SUM_AQMI.EventTakeSuccessCount\",\n                \"DT.sum.flume.sink.piedipartino-bck_63101.channel_SUM_AQMI.EventTakeSuccessCount\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"keepLastValue(sumSeriesWithWildcards(aliasSub(sumSeriesWithWildcards(atos.VSL.*.PRD*.{LIL|SDN}.{BANQUE_POPULAIRE,\"\n                + \"BANQUE_POSTALE,BNP-PARIBAS,CAISSE_D_EPARGNE,CREDIT_AGRICOLE,CREDIT_MUTUEL,GIE,HSBC,OTHERS,SOCIETE_GENERALE|SG,\"\n                + \"CREDIT_COOP}, 4), 'atos.VSL.*.ATO.(\\\\w+)', '\\1'), 2))\"))\n            .containsOnly(\n                \"atos.VSL.*.PRD*.{LIL|SDN}.{BANQUE_POPULAIRE,BANQUE_POSTALE,BNP-PARIBAS,CAISSE_D_EPARGNE,CREDIT_AGRICOLE,CREDIT_MUTUEL,\"\n                    + \"GIE,HSBC,OTHERS,SOCIETE_GENERALE|SG,CREDIT_COOP}\",\n                \"atos.VSL.*.ATO.\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"keepLastValue(scale(divideSeries(diffSeries(functional.monitoring.omniture.VSL.CCL.frequentation,averageSeries(timeShift\"\n                + \"(functional.monitoring.omniture.VSL.CCL.frequentation, '7d'), timeShift(functional.monitoring.omniture.VSL.CCL\"\n                + \".frequentation, '14d'), timeShift(functional.monitoring.omniture.VSL.CCL.frequentation, '21d'), timeShift(functional\"\n                + \".monitoring.omniture.VSL.CCL.frequentation, '28d'))), functional.monitoring.omniture.VSL.CCL.frequentation), 100))\"))\n            .containsOnly(\"functional.monitoring.omniture.VSL.CCL.frequentation\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\"keepLastValue(asPercent(DT.MPD.collectd.corone.df-MONGODB.df_complex-used, \"\n            + \"sumSeries(DT.MPD.collectd.corone.df-MONGODB.df_complex-free, DT.MPD.collectd.corone.df-MONGODB.df_complex-used)))\"))\n            .containsOnly(\"DT.MPD.collectd.corone.df-MONGODB.df_complex-free\", \"DT.MPD.collectd.corone.df-MONGODB.df_complex-used\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"summarize(aliasByNode(DT.SUM.PREP1.collectd.{rea,villalba,zambone}.*-election_rate.gauge-1-minutes, 4),'30min','avg')\"))\n            .containsOnly(\"DT.SUM.PREP1.collectd.{rea,villalba,zambone}.*-election_rate.gauge-1-minutes\");\n\n        assertThat(GraphiteKeyUtil.extractGraphiteKeys(\n            \"diffSeries(summarize(aliasByNode(DT.SUM.PREP1.collectd{rea}.*-election_rate.gauge-1-minutes, 4),'30min','avg'),timeShift\"\n                + \"(summarize(aliasByNode(DT.SUM.PREP1.collectd.{rea,villalba,zambone}.*-election_rate.gauge-1-minutes, 4),'30min','avg')\"\n                + \", '10min'))\")).containsOnly(\"DT.SUM.PREP1.collectd{rea}.*-election_rate.gauge-1-minutes\",\n            \"DT.SUM.PREP1.collectd.{rea,villalba,zambone}.*-election_rate.gauge-1-minutes\");\n    }", "signature": "void testExtractGraphiteKeys()", "full_signature": "@Test public void testExtractGraphiteKeys()", "class_method_signature": "GraphiteKeyUtilTest.testExtractGraphiteKeys()", "testcase": true, "constructor": false, "invocations": ["containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys", "containsOnly", "assertThat", "extractGraphiteKeys"]}, "focal_class": {"identifier": "GraphiteKeyUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteKeyUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GraphiteKeyUtil.class)", "var_name": "LOGGER"}, {"original_string": "private static final Pattern GRAPHITE_KEY_PATTERN = Pattern.compile(\"([\\\\w,\\\\*_\\\\-\\\\{\\\\}]+[.])+((\\\\{[\\\\w|_,-]*\\\\}[.]*)*|[\\\\w*_-]*)[\\\\w*_-]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "GRAPHITE_KEY_PATTERN = Pattern.compile(\"([\\\\w,\\\\*_\\\\-\\\\{\\\\}]+[.])+((\\\\{[\\\\w|_,-]*\\\\}[.]*)*|[\\\\w*_-]*)[\\\\w*_-]*\")", "var_name": "GRAPHITE_KEY_PATTERN"}], "methods": [{"identifier": "GraphiteKeyUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " GraphiteKeyUtil()", "full_signature": "private  GraphiteKeyUtil()", "class_method_signature": "GraphiteKeyUtil.GraphiteKeyUtil()", "testcase": false, "constructor": true}, {"identifier": "extractGraphiteKeys", "parameters": "(String target)", "modifiers": "public static", "return": "Collection<String>", "signature": "Collection<String> extractGraphiteKeys(String target)", "full_signature": "public static Collection<String> extractGraphiteKeys(String target)", "class_method_signature": "GraphiteKeyUtil.extractGraphiteKeys(String target)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/util/GraphiteKeyUtil.java"}, "focal_method": {"identifier": "extractGraphiteKeys", "parameters": "(String target)", "modifiers": "public static", "return": "Collection<String>", "body": "public static Collection<String> extractGraphiteKeys(String target) {\n        Collection<String> collection = new ArrayList<>();\n\n        LOGGER.debug(\"Extracting keys from target: \" + target);\n        Matcher matcher = GRAPHITE_KEY_PATTERN.matcher(target);\n        while (matcher.find()) {\n            collection.add(matcher.group());\n        }\n\n        LOGGER.debug(\"Found \" + collection.size() + \" key(s): \" + collection);\n        return collection;\n    }", "signature": "Collection<String> extractGraphiteKeys(String target)", "full_signature": "public static Collection<String> extractGraphiteKeys(String target)", "class_method_signature": "GraphiteKeyUtil.extractGraphiteKeys(String target)", "testcase": false, "constructor": false, "invocations": ["debug", "matcher", "find", "add", "group", "debug", "size"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}