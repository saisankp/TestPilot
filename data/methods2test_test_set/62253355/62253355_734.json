{"test_class": {"identifier": "OntologyRecordVersioningServiceTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OntologyRecordVersioningService service;", "modifier": "private", "type": "OntologyRecordVersioningService", "declarator": "service", "var_name": "service"}, {"original_string": "private OrmFactory<OntologyRecord> ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class);", "modifier": "private", "type": "OrmFactory<OntologyRecord>", "declarator": "ontologyRecordFactory = getRequiredOrmFactory(OntologyRecord.class)", "var_name": "ontologyRecordFactory"}, {"original_string": "private OrmFactory<Branch> branchFactory = getRequiredOrmFactory(Branch.class);", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory = getRequiredOrmFactory(Branch.class)", "var_name": "branchFactory"}, {"original_string": "private OrmFactory<Commit> commitFactory = getRequiredOrmFactory(Commit.class);", "modifier": "private", "type": "OrmFactory<Commit>", "declarator": "commitFactory = getRequiredOrmFactory(Commit.class)", "var_name": "commitFactory"}, {"original_string": "private final IRI originalIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology\");", "modifier": "private final", "type": "IRI", "declarator": "originalIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology\")", "var_name": "originalIRI"}, {"original_string": "private final IRI newIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology/new\");", "modifier": "private final", "type": "IRI", "declarator": "newIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology/new\")", "var_name": "newIRI"}, {"original_string": "private final IRI usedIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology/used\");", "modifier": "private final", "type": "IRI", "declarator": "usedIRI = VALUE_FACTORY.createIRI(\"http://test.com/ontology/used\")", "var_name": "usedIRI"}, {"original_string": "private final IRI typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI);", "modifier": "private final", "type": "IRI", "declarator": "typeIRI = VALUE_FACTORY.createIRI(com.mobi.ontologies.rdfs.Resource.type_IRI)", "var_name": "typeIRI"}, {"original_string": "private final IRI ontologyIRI = VALUE_FACTORY.createIRI(OWL.ONTOLOGY.stringValue());", "modifier": "private final", "type": "IRI", "declarator": "ontologyIRI = VALUE_FACTORY.createIRI(OWL.ONTOLOGY.stringValue())", "var_name": "ontologyIRI"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private OntologyRecord record;", "modifier": "private", "type": "OntologyRecord", "declarator": "record", "var_name": "record"}, {"original_string": "private Branch branch;", "modifier": "private", "type": "Branch", "declarator": "branch", "var_name": "branch"}, {"original_string": "private Commit commit;", "modifier": "private", "type": "Commit", "declarator": "commit", "var_name": "commit"}, {"original_string": "private InProgressCommit inProgressCommit;", "modifier": "private", "type": "InProgressCommit", "declarator": "inProgressCommit", "var_name": "inProgressCommit"}, {"original_string": "private Stream<Statement> additions;", "modifier": "private", "type": "Stream<Statement>", "declarator": "additions", "var_name": "additions"}, {"original_string": "private Stream<Statement> additionsUsed;", "modifier": "private", "type": "Stream<Statement>", "declarator": "additionsUsed", "var_name": "additionsUsed"}, {"original_string": "private Stream<Statement> additionsNoIRI;", "modifier": "private", "type": "Stream<Statement>", "declarator": "additionsNoIRI", "var_name": "additionsNoIRI"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private OntologyCache ontologyCache;", "modifier": "@Mock\n    private", "type": "OntologyCache", "declarator": "ontologyCache", "var_name": "ontologyCache"}, {"original_string": "@Mock\n    private CatalogUtilsService catalogUtils;", "modifier": "@Mock\n    private", "type": "CatalogUtilsService", "declarator": "catalogUtils", "var_name": "catalogUtils"}], "file": "com.mobi.ontology.impl.core/src/test/java/com/mobi/ontology/impl/core/versioning/OntologyRecordVersioningServiceTest.java"}, "test_case": {"identifier": "addCommitToMasterWithCommitWithBaseAndNewOntologyIRITest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addCommitToMasterWithCommitWithBaseAndNewOntologyIRITest() throws Exception {\n        try (RepositoryConnection conn = repo.getConnection()) {\n            // Setup:\n            commit.setBaseCommit(commitFactory.createNew(VALUE_FACTORY.createIRI(\"http://mobi.com/test/commits#new\")));\n\n            service.addCommit(branch, commit, conn);\n            verify(catalogUtils).addCommit(branch, commit, conn);\n            verify(catalogUtils).getAdditions(commit, conn);\n            verify(catalogUtils).getObject(record.getResource(), ontologyRecordFactory, conn);\n            verify(ontologyManager).ontologyIriExists(newIRI);\n            assertTrue(record.getOntologyIRI().isPresent());\n            assertEquals(newIRI, record.getOntologyIRI().get());\n            verify(catalogUtils).updateObject(record, conn);\n            verify(ontologyCache).clearCacheImports(originalIRI);\n            verify(ontologyCache).clearCacheImports(newIRI);\n        }\n    }", "signature": "void addCommitToMasterWithCommitWithBaseAndNewOntologyIRITest()", "full_signature": "@Test public void addCommitToMasterWithCommitWithBaseAndNewOntologyIRITest()", "class_method_signature": "OntologyRecordVersioningServiceTest.addCommitToMasterWithCommitWithBaseAndNewOntologyIRITest()", "testcase": true, "constructor": false, "invocations": ["getConnection", "setBaseCommit", "createNew", "createIRI", "addCommit", "addCommit", "verify", "getAdditions", "verify", "getObject", "verify", "getResource", "ontologyIriExists", "verify", "assertTrue", "isPresent", "getOntologyIRI", "assertEquals", "get", "getOntologyIRI", "updateObject", "verify", "clearCacheImports", "verify", "clearCacheImports", "verify"]}, "focal_class": {"identifier": "OntologyRecordVersioningService", "superclass": "extends BaseVersioningService<OntologyRecord>", "interfaces": "", "fields": [{"original_string": "private OntologyRecordFactory ontologyRecordFactory;", "modifier": "private", "type": "OntologyRecordFactory", "declarator": "ontologyRecordFactory", "var_name": "ontologyRecordFactory"}, {"original_string": "private OntologyManager ontologyManager;", "modifier": "private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "private OntologyCache ontologyCache;", "modifier": "private", "type": "OntologyCache", "declarator": "ontologyCache", "var_name": "ontologyCache"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private static final String ONTOLOGY_IRI_QUERY;", "modifier": "private static final", "type": "String", "declarator": "ONTOLOGY_IRI_QUERY", "var_name": "ONTOLOGY_IRI_QUERY"}, {"original_string": "private static final String BRANCH_BINDING = \"branch\";", "modifier": "private static final", "type": "String", "declarator": "BRANCH_BINDING = \"branch\"", "var_name": "BRANCH_BINDING"}, {"original_string": "private static final String RECORD_BINDING = \"record\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_BINDING = \"record\"", "var_name": "RECORD_BINDING"}], "methods": [{"identifier": "setOntologyRecordFactory", "parameters": "(OntologyRecordFactory ontologyRecordFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "full_signature": "@Reference protected void setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "class_method_signature": "OntologyRecordVersioningService.setOntologyRecordFactory(OntologyRecordFactory ontologyRecordFactory)", "testcase": false, "constructor": false}, {"identifier": "setBranchFactory", "parameters": "(BranchFactory branchFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setBranchFactory(BranchFactory branchFactory)", "full_signature": "@Reference protected void setBranchFactory(BranchFactory branchFactory)", "class_method_signature": "OntologyRecordVersioningService.setBranchFactory(BranchFactory branchFactory)", "testcase": false, "constructor": false}, {"identifier": "setCommitFactory", "parameters": "(CommitFactory commitFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setCommitFactory(CommitFactory commitFactory)", "full_signature": "@Reference protected void setCommitFactory(CommitFactory commitFactory)", "class_method_signature": "OntologyRecordVersioningService.setCommitFactory(CommitFactory commitFactory)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference protected", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference protected void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "OntologyRecordVersioningService.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setOntologyManager", "parameters": "(OntologyManager ontologyManager)", "modifiers": "@Reference(policyOption = ReferencePolicyOption.GREEDY) protected", "return": "void", "signature": "void setOntologyManager(OntologyManager ontologyManager)", "full_signature": "@Reference(policyOption = ReferencePolicyOption.GREEDY) protected void setOntologyManager(OntologyManager ontologyManager)", "class_method_signature": "OntologyRecordVersioningService.setOntologyManager(OntologyManager ontologyManager)", "testcase": false, "constructor": false}, {"identifier": "setOntologyCache", "parameters": "(OntologyCache ontologyCache)", "modifiers": "@Reference protected", "return": "void", "signature": "void setOntologyCache(OntologyCache ontologyCache)", "full_signature": "@Reference protected void setOntologyCache(OntologyCache ontologyCache)", "class_method_signature": "OntologyRecordVersioningService.setOntologyCache(OntologyCache ontologyCache)", "testcase": false, "constructor": false}, {"identifier": "setCatalogUtils", "parameters": "(CatalogUtilsService catalogUtils)", "modifiers": "@Reference protected", "return": "void", "signature": "void setCatalogUtils(CatalogUtilsService catalogUtils)", "full_signature": "@Reference protected void setCatalogUtils(CatalogUtilsService catalogUtils)", "class_method_signature": "OntologyRecordVersioningService.setCatalogUtils(CatalogUtilsService catalogUtils)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference protected void setVf(ValueFactory vf)", "class_method_signature": "OntologyRecordVersioningService.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setMf", "parameters": "(ModelFactory mf)", "modifiers": "@Reference protected", "return": "void", "signature": "void setMf(ModelFactory mf)", "full_signature": "@Reference protected void setMf(ModelFactory mf)", "class_method_signature": "OntologyRecordVersioningService.setMf(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getTypeIRI", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTypeIRI()", "full_signature": "@Override public String getTypeIRI()", "class_method_signature": "OntologyRecordVersioningService.getTypeIRI()", "testcase": false, "constructor": false}, {"identifier": "addCommit", "parameters": "(Branch branch, Commit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "full_signature": "@Override public void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addCommit", "parameters": "(Branch branch, User user, String message, Model additions, Model deletions,\n                                               Commit baseCommit, Commit auxCommit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "com.mobi.rdf.api.Resource", "signature": "com.mobi.rdf.api.Resource addCommit(Branch branch, User user, String message, Model additions, Model deletions,\n                                               Commit baseCommit, Commit auxCommit, RepositoryConnection conn)", "full_signature": "@Override public com.mobi.rdf.api.Resource addCommit(Branch branch, User user, String message, Model additions, Model deletions,\n                                               Commit baseCommit, Commit auxCommit, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.addCommit(Branch branch, User user, String message, Model additions, Model deletions,\n                                               Commit baseCommit, Commit auxCommit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateOntologyIRI", "parameters": "(com.mobi.rdf.api.Resource recordId, Commit commit, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Commit commit, RepositoryConnection conn)", "full_signature": "private void updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Commit commit, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateOntologyIRI", "parameters": "(com.mobi.rdf.api.Resource recordId, Stream<Statement> additions, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Stream<Statement> additions, RepositoryConnection conn)", "full_signature": "private void updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Stream<Statement> additions, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.updateOntologyIRI(com.mobi.rdf.api.Resource recordId, Stream<Statement> additions, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getNewOntologyIRI", "parameters": "(Stream<Statement> additions)", "modifiers": "private", "return": "Optional<com.mobi.rdf.api.Resource>", "signature": "Optional<com.mobi.rdf.api.Resource> getNewOntologyIRI(Stream<Statement> additions)", "full_signature": "private Optional<com.mobi.rdf.api.Resource> getNewOntologyIRI(Stream<Statement> additions)", "class_method_signature": "OntologyRecordVersioningService.getNewOntologyIRI(Stream<Statement> additions)", "testcase": false, "constructor": false}, {"identifier": "testOntologyIRIUniqueness", "parameters": "(com.mobi.rdf.api.Resource ontologyIRI)", "modifiers": "private", "return": "void", "signature": "void testOntologyIRIUniqueness(com.mobi.rdf.api.Resource ontologyIRI)", "full_signature": "private void testOntologyIRIUniqueness(com.mobi.rdf.api.Resource ontologyIRI)", "class_method_signature": "OntologyRecordVersioningService.testOntologyIRIUniqueness(com.mobi.rdf.api.Resource ontologyIRI)", "testcase": false, "constructor": false}, {"identifier": "getRecordIriIfMaster", "parameters": "(Branch branch, RepositoryConnection conn)", "modifiers": "private", "return": "Optional<com.mobi.rdf.api.Resource>", "signature": "Optional<com.mobi.rdf.api.Resource> getRecordIriIfMaster(Branch branch, RepositoryConnection conn)", "full_signature": "private Optional<com.mobi.rdf.api.Resource> getRecordIriIfMaster(Branch branch, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.getRecordIriIfMaster(Branch branch, RepositoryConnection conn)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.core/src/main/java/com/mobi/ontology/impl/core/versioning/OntologyRecordVersioningService.java"}, "focal_method": {"identifier": "addCommit", "parameters": "(Branch branch, Commit commit, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addCommit(Branch branch, Commit commit, RepositoryConnection conn) {\n        Optional<com.mobi.rdf.api.Resource> recordOpt = getRecordIriIfMaster(branch, conn);\n        recordOpt.ifPresent(recordId -> commit.getBaseCommit_resource().ifPresent(baseCommit ->\n                updateOntologyIRI(recordId, commit, conn)));\n        catalogUtils.addCommit(branch, commit, conn);\n    }", "signature": "void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "full_signature": "@Override public void addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "class_method_signature": "OntologyRecordVersioningService.addCommit(Branch branch, Commit commit, RepositoryConnection conn)", "testcase": false, "constructor": false, "invocations": ["getRecordIriIfMaster", "ifPresent", "ifPresent", "getBaseCommit_resource", "updateOntologyIRI", "addCommit"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}