{"test_class": {"identifier": "PostgresCountTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IDatabaseTask task;", "modifier": "private", "type": "IDatabaseTask", "declarator": "task", "var_name": "task"}, {"original_string": "private CountMessage message;", "modifier": "private", "type": "CountMessage", "declarator": "message", "var_name": "message"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private JDBCCompiledQuery compiledQuery;", "modifier": "private", "type": "JDBCCompiledQuery", "declarator": "compiledQuery", "var_name": "compiledQuery"}, {"original_string": "private PreparedStatement sqlStatement;", "modifier": "private", "type": "PreparedStatement", "declarator": "sqlStatement", "var_name": "sqlStatement"}, {"original_string": "private ResultSet resultSet;", "modifier": "private", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}], "file": "CoreFeatures/Database-postgresql/PostgresCountTask/src/test/java/info/smart_tools/smartactors/database_postgresql/postgres_count_task/PostgresCountTaskTest.java"}, "test_case": {"identifier": "testCountInvalidCriteria", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCountInvalidCriteria() throws InvalidArgumentException, ReadValueException, TaskPrepareException, TaskSetConnectionException, TaskExecutionException, ChangeValueException, StorageException, SQLException {\n        IAction<Long> callback = mock(IAction.class);\n        when(message.getCallback()).thenReturn(callback);\n        when(message.getCriteria()).thenReturn(new DSObject(\"{ \\\"filter\\\": 123 }\"));\n\n        try {\n            task.prepare(null); // the message will be resolved by IOC\n            fail();\n        } catch (TaskPrepareException e) {\n            // pass\n        }\n\n        verifyZeroInteractions(connection);\n        verifyZeroInteractions(sqlStatement);\n        verifyZeroInteractions(callback);\n    }", "signature": "void testCountInvalidCriteria()", "full_signature": "@Test public void testCountInvalidCriteria()", "class_method_signature": "PostgresCountTaskTest.testCountInvalidCriteria()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCallback", "thenReturn", "when", "getCriteria", "prepare", "fail", "verifyZeroInteractions", "verifyZeroInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "PostgresCountTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private CollectionName collection;", "modifier": "private", "type": "CollectionName", "declarator": "collection", "var_name": "collection"}, {"original_string": "private IObject criteria;", "modifier": "private", "type": "IObject", "declarator": "criteria", "var_name": "criteria"}, {"original_string": "private IAction<Long> callback;", "modifier": "private", "type": "IAction<Long>", "declarator": "callback", "var_name": "callback"}, {"original_string": "private QueryStatement preparedQuery;", "modifier": "private", "type": "QueryStatement", "declarator": "preparedQuery", "var_name": "preparedQuery"}], "methods": [{"identifier": "PostgresCountTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " PostgresCountTask(final IStorageConnection connection)", "full_signature": "public  PostgresCountTask(final IStorageConnection connection)", "class_method_signature": "PostgresCountTask.PostgresCountTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "PostgresCountTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "PostgresCountTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database-postgresql/PostgresCountTask/src/main/java/info/smart_tools/smartactors/database_postgresql/postgres_count_task/PostgresCountTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n        try {\n            CountMessage message = IOC.resolve(Keys.getOrAdd(CountMessage.class.getCanonicalName()), query);\n            collection = message.getCollectionName();\n            criteria = message.getCriteria();\n            callback = message.getCallback();\n\n            preparedQuery = new QueryStatement();\n            PostgresSchema.count(preparedQuery, collection, criteria);\n        } catch (Exception e) {\n            throw new TaskPrepareException(e);\n        }\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "PostgresCountTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getCanonicalName", "getCollectionName", "getCriteria", "getCallback", "count"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}