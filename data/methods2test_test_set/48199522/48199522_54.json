{"test_class": {"identifier": "FiniteGMMTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FiniteGMMTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FiniteGMMTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/mixture/FiniteGMMTest.java"}, "test_case": {"identifier": "bivariateWellSeparatedNormalTest", "parameters": "()", "modifiers": "@Test /** * Tests Bayesian Gaussian Mixture Model on a three well separated clusters. */ public", "return": "void", "body": "@Test\n    /**\n     * Tests Bayesian Gaussian Mixture Model on a three well separated clusters.\n     */\n    public void bivariateWellSeparatedNormalTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 44)\n                .set(MacroBaseConf.TRANSFORM_TYPE, \"MEAN_FIELD_GMM\")\n                .set(GMMConf.NUM_MIXTURES, 3)\n                .set(GMMConf.MIXTURE_CENTERS_FILE, \"src/test/resources/data/3gaussians-700.points-centers.json\")\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/3gaussians-700points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = Drainer.drainIngest(conf);\n        assertEquals(700, data.size());\n\n        FiniteGMM finiteGMM = new FiniteGMM(conf);\n        List<RealVector> calculatedMeans;\n\n        // Make sure we have 3 clusters. Sometimes initialization is not great.\n        finiteGMM.train(data);\n\n        calculatedMeans = finiteGMM.getClusterCenters();\n        List<RealMatrix> calculatedCovariances = finiteGMM.getClusterCovariances();\n\n        double[][] clusterMeans = {\n                {2, 11},\n                {1, 1},\n                {10, 3},\n        };\n        List<RealVector> vectorClusterMeans = new ArrayList<>(3);\n        for (int k = 0; k < 3; k++) {\n            vectorClusterMeans.add(new ArrayRealVector(clusterMeans[k]));\n        }\n        double[][][] clusterCovariances = {\n                {{0.5, 0.4}, {0.4, 0.5}},\n                {{0.3, 0}, {0, 0.6}},\n                {{0.9, 0.2}, {0.2, 0.3}},\n        };\n\n\n        ExpectMaxGMM gmm = new ExpectMaxGMM(conf);\n        gmm.train(data);\n        List<RealVector> emMeans = gmm.getClusterCenters();\n        List<RealMatrix> emCovariances = gmm.getClusterCovariances();\n\n        for (int i = 0; i < 3; i++) {\n            boolean identified = false;\n            for (int j = 0; j < 3; j++) {\n                if (calculatedMeans.get(i).getDistance(vectorClusterMeans.get(j)) < 0.1) {\n                    for (int p = 0; p < 2; p++) {\n                        for (int q = 0; q < 2; q++) {\n                            // Make sure covariance is in the ballpark. Since we only had 700 points.\n                            assertEquals(clusterCovariances[j][p][q], calculatedCovariances.get(i).getEntry(p, q), 0.6);\n                        }\n                    }\n                    identified = true;\n                    break;\n                }\n            }\n            assertEquals(true, identified);\n            for (int z = 0; z < 3; z++) {\n                if (emMeans.get(z).getDistance(calculatedMeans.get(i)) < 0.1) {\n                    for (int p = 0; p < 2; p++) {\n                        for (int q = 0; q < 2; q++) {\n                            // Make sure we have a closer estimate to EM algorithm means\n                            assertEquals(emCovariances.get(z).getEntry(p, q), calculatedCovariances.get(i).getEntry(p, q), 0.1);\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        // Make sure centers belong to only one cluster.\n        double[] maxProbas = {0, 0, 0};\n        for (int i = 0; i < 3; i++) {\n            double[] probas = finiteGMM.getClusterProbabilities(new Datum(new ArrayList<Integer>(), vectorClusterMeans.get(i)));\n            for (int j=0; j< 3; j++) {\n                maxProbas[j] = Math.max(probas[j], maxProbas[j]);\n            }\n        }\n        for (int j=0; j< 3; j++) {\n            assertEquals(maxProbas[j], 1, 0.01);\n        }\n    }", "signature": "void bivariateWellSeparatedNormalTest()", "full_signature": "@Test /** * Tests Bayesian Gaussian Mixture Model on a three well separated clusters. */ public void bivariateWellSeparatedNormalTest()", "class_method_signature": "FiniteGMMTest.bivariateWellSeparatedNormalTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "set", "drainIngest", "assertEquals", "size", "train", "getClusterCenters", "getClusterCovariances", "add", "train", "getClusterCenters", "getClusterCovariances", "getDistance", "get", "get", "assertEquals", "getEntry", "get", "assertEquals", "getDistance", "get", "get", "assertEquals", "getEntry", "get", "getEntry", "get", "getClusterProbabilities", "get", "max", "assertEquals"]}, "focal_class": {"identifier": "FiniteGMM", "superclass": "extends VarGMM", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FiniteGMM.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FiniteGMM.class)", "var_name": "log"}, {"original_string": "protected int K;", "modifier": "protected", "type": "int", "declarator": "K", "var_name": "K"}, {"original_string": "protected MultiComponents mixingComponents;", "modifier": "protected", "type": "MultiComponents", "declarator": "mixingComponents", "var_name": "mixingComponents"}], "methods": [{"identifier": "FiniteGMM", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " FiniteGMM(MacroBaseConf conf)", "full_signature": "public  FiniteGMM(MacroBaseConf conf)", "class_method_signature": "FiniteGMM.FiniteGMM(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "trainTest", "parameters": "(List<Datum> trainData, List<Datum> testData)", "modifiers": "@Override public", "return": "void", "signature": "void trainTest(List<Datum> trainData, List<Datum> testData)", "full_signature": "@Override public void trainTest(List<Datum> trainData, List<Datum> testData)", "class_method_signature": "FiniteGMM.trainTest(List<Datum> trainData, List<Datum> testData)", "testcase": false, "constructor": false}, {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "FiniteGMM.getClusterProportions()", "testcase": false, "constructor": false}, {"identifier": "getNormClusterContrib", "parameters": "()", "modifiers": "@Override protected", "return": "double[]", "signature": "double[] getNormClusterContrib()", "full_signature": "@Override protected double[] getNormClusterContrib()", "class_method_signature": "FiniteGMM.getNormClusterContrib()", "testcase": false, "constructor": false}, {"identifier": "getPriorAdjustedClusterProportions", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getPriorAdjustedClusterProportions()", "full_signature": "public double[] getPriorAdjustedClusterProportions()", "class_method_signature": "FiniteGMM.getPriorAdjustedClusterProportions()", "testcase": false, "constructor": false}, {"identifier": "getClusterProbabilities", "parameters": "(Datum d)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getClusterProbabilities(Datum d)", "full_signature": "@Override public double[] getClusterProbabilities(Datum d)", "class_method_signature": "FiniteGMM.getClusterProbabilities(Datum d)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/mixture/FiniteGMM.java"}, "focal_method": {"identifier": "getClusterProbabilities", "parameters": "(Datum d)", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] getClusterProbabilities(Datum d) {\n        double[] probas = new double[K];\n        double[] weights = getNormClusterContrib();\n        double normalizingConstant = 0;\n        for (int i = 0; i < K; i++) {\n            probas[i] = weights[i] * predictiveDistributions.get(i).density(d.metrics());\n            normalizingConstant += probas[i];\n        }\n        for (int i = 0; i < K; i++) {\n            probas[i] /= normalizingConstant;\n        }\n        return probas;\n    }", "signature": "double[] getClusterProbabilities(Datum d)", "full_signature": "@Override public double[] getClusterProbabilities(Datum d)", "class_method_signature": "FiniteGMM.getClusterProbabilities(Datum d)", "testcase": false, "constructor": false, "invocations": ["getNormClusterContrib", "density", "get", "metrics"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}