{"test_class": {"identifier": "OverloadedTimedMethodBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String[] TIMER_NAMES = { \"overloadedTimedMethodWithNoArguments\", \"overloadedTimedMethodWithStringArgument\",\n            \"overloadedTimedMethodWithListOfStringArgument\", \"overloadedTimedMethodWithObjectArgument\" };", "modifier": "private final static", "type": "String[]", "declarator": "TIMER_NAMES = { \"overloadedTimedMethodWithNoArguments\", \"overloadedTimedMethodWithStringArgument\",\n            \"overloadedTimedMethodWithListOfStringArgument\", \"overloadedTimedMethodWithObjectArgument\" }", "var_name": "TIMER_NAMES"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private OverloadedTimedMethodBean bean;", "modifier": "@Inject\n    private", "type": "OverloadedTimedMethodBean", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/OverloadedTimedMethodBeanTest.java"}, "test_case": {"identifier": "callOverloadedTimedMethodOnce", "parameters": "()", "modifiers": "@Test @InSequence(2) public", "return": "void", "body": "@Test\n    @InSequence(2)\n    public void callOverloadedTimedMethodOnce() {\n        Assert.assertTrue(\"Metrics are not registered correctly\", \n            registry.getMetricIDs().containsAll(MetricsUtil.createMetricIDs(absoluteMetricNames())));\n\n        // Call the timed methods and assert they've all been timed once\n        bean.overloadedTimedMethod();\n        bean.overloadedTimedMethod(\"string\");\n        bean.overloadedTimedMethod(new Object());\n        bean.overloadedTimedMethod(Arrays.asList(\"string1\", \"string2\"));\n        assertThat(\"Timer counts are incorrect\", registry.getTimers().values(), hasItem(Matchers.<Timer> hasProperty(\"count\", equalTo(1L))));\n    }", "signature": "void callOverloadedTimedMethodOnce()", "full_signature": "@Test @InSequence(2) public void callOverloadedTimedMethodOnce()", "class_method_signature": "OverloadedTimedMethodBeanTest.callOverloadedTimedMethodOnce()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsAll", "getMetricIDs", "createMetricIDs", "absoluteMetricNames", "overloadedTimedMethod", "overloadedTimedMethod", "overloadedTimedMethod", "overloadedTimedMethod", "asList", "assertThat", "values", "getTimers", "hasItem", "hasProperty", "equalTo"]}, "focal_class": {"identifier": "OverloadedTimedMethodBean", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "overloadedTimedMethod", "parameters": "()", "modifiers": "@Timed(name = \"overloadedTimedMethodWithNoArguments\") public", "return": "void", "signature": "void overloadedTimedMethod()", "full_signature": "@Timed(name = \"overloadedTimedMethodWithNoArguments\") public void overloadedTimedMethod()", "class_method_signature": "OverloadedTimedMethodBean.overloadedTimedMethod()", "testcase": false, "constructor": false}, {"identifier": "overloadedTimedMethod", "parameters": "(String string)", "modifiers": "@Timed(name = \"overloadedTimedMethodWithStringArgument\") public", "return": "void", "signature": "void overloadedTimedMethod(String string)", "full_signature": "@Timed(name = \"overloadedTimedMethodWithStringArgument\") public void overloadedTimedMethod(String string)", "class_method_signature": "OverloadedTimedMethodBean.overloadedTimedMethod(String string)", "testcase": false, "constructor": false}, {"identifier": "overloadedTimedMethod", "parameters": "(List<String> strings)", "modifiers": "@Timed(name = \"overloadedTimedMethodWithListOfStringArgument\") public", "return": "void", "signature": "void overloadedTimedMethod(List<String> strings)", "full_signature": "@Timed(name = \"overloadedTimedMethodWithListOfStringArgument\") public void overloadedTimedMethod(List<String> strings)", "class_method_signature": "OverloadedTimedMethodBean.overloadedTimedMethod(List<String> strings)", "testcase": false, "constructor": false}, {"identifier": "overloadedTimedMethod", "parameters": "(Object object)", "modifiers": "@Timed(name = \"overloadedTimedMethodWithObjectArgument\") public", "return": "void", "signature": "void overloadedTimedMethod(Object object)", "full_signature": "@Timed(name = \"overloadedTimedMethodWithObjectArgument\") public void overloadedTimedMethod(Object object)", "class_method_signature": "OverloadedTimedMethodBean.overloadedTimedMethod(Object object)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/OverloadedTimedMethodBean.java"}, "focal_method": {"identifier": "overloadedTimedMethod", "parameters": "()", "modifiers": "@Timed(name = \"overloadedTimedMethodWithNoArguments\") public", "return": "void", "body": "@Timed(name = \"overloadedTimedMethodWithNoArguments\")\n    public void overloadedTimedMethod() {\n    }", "signature": "void overloadedTimedMethod()", "full_signature": "@Timed(name = \"overloadedTimedMethodWithNoArguments\") public void overloadedTimedMethod()", "class_method_signature": "OverloadedTimedMethodBean.overloadedTimedMethod()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}