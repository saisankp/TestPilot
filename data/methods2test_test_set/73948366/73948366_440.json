{"test_class": {"identifier": "InstanceZTSProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String servicePublicKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "servicePublicKeyStringK0 = null", "var_name": "servicePublicKeyStringK0"}, {"original_string": "private String servicePrivateKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "servicePrivateKeyStringK0 = null", "var_name": "servicePrivateKeyStringK0"}], "file": "libs/java/instance_provider/src/test/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProviderTest.java"}, "test_case": {"identifier": "testInitialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialize() {\n\n        System.setProperty(InstanceZTSProvider.ZTS_PROVIDER_DNS_SUFFIX, \"zts.cloud\");\n        System.setProperty(InstanceZTSProvider.ZTS_PRINCIPAL_LIST, \"athenz.api,sports.backend\");\n\n        InstanceZTSProvider provider = new InstanceZTSProvider();\n        provider.initialize(\"provider\", \"com.yahoo.athenz.instance.provider.impl.InstanceZTSProvider\", null, null);\n        assertEquals(\"zts.cloud\", provider.dnsSuffix);\n        assertNull(provider.keyStore);\n        assertEquals(provider.principals.size(), 2);\n        assertTrue(provider.principals.contains(\"athenz.api\"));\n        assertTrue(provider.principals.contains(\"sports.backend\"));\n        provider.close();\n\n        System.setProperty(InstanceZTSProvider.ZTS_PROVIDER_DNS_SUFFIX, \"\");\n        System.setProperty(InstanceZTSProvider.ZTS_PRINCIPAL_LIST, \"\");\n\n        provider = new InstanceZTSProvider();\n        provider.initialize(\"provider\", \"com.yahoo.athenz.instance.provider.impl.InstanceZTSProvider\", null, null);\n        assertEquals(\"zts.athenz.cloud\", provider.dnsSuffix);\n        assertNull(provider.keyStore);\n        assertNull(provider.principals);\n        provider.close();\n        System.clearProperty(InstanceZTSProvider.ZTS_PROVIDER_DNS_SUFFIX);\n    }", "signature": "void testInitialize()", "full_signature": "@Test public void testInitialize()", "class_method_signature": "InstanceZTSProviderTest.testInitialize()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "initialize", "assertEquals", "assertNull", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "close", "setProperty", "setProperty", "initialize", "assertEquals", "assertNull", "assertNull", "close", "clearProperty"]}, "focal_class": {"identifier": "InstanceZTSProvider", "superclass": "", "interfaces": "implements InstanceProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceZTSProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceZTSProvider.class)", "var_name": "LOGGER"}, {"original_string": "private static final Pattern WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\")", "var_name": "WHITESPACE_PATTERN"}, {"original_string": "private static final String URI_HOSTNAME_PREFIX = \"athenz://hostname/\";", "modifier": "private static final", "type": "String", "declarator": "URI_HOSTNAME_PREFIX = \"athenz://hostname/\"", "var_name": "URI_HOSTNAME_PREFIX"}, {"original_string": "static final String ZTS_PROVIDER_DNS_SUFFIX  = \"athenz.zts.provider_dns_suffix\";", "modifier": "static final", "type": "String", "declarator": "ZTS_PROVIDER_DNS_SUFFIX  = \"athenz.zts.provider_dns_suffix\"", "var_name": "ZTS_PROVIDER_DNS_SUFFIX"}, {"original_string": "static final String ZTS_PRINCIPAL_LIST       = \"athenz.zts.provider_service_list\";", "modifier": "static final", "type": "String", "declarator": "ZTS_PRINCIPAL_LIST       = \"athenz.zts.provider_service_list\"", "var_name": "ZTS_PRINCIPAL_LIST"}, {"original_string": "KeyStore keyStore = null;", "modifier": "", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "String dnsSuffix = null;", "modifier": "", "type": "String", "declarator": "dnsSuffix = null", "var_name": "dnsSuffix"}, {"original_string": "Set<String> principals = null;", "modifier": "", "type": "Set<String>", "declarator": "principals = null", "var_name": "principals"}, {"original_string": "HostnameResolver hostnameResolver = null;", "modifier": "", "type": "HostnameResolver", "declarator": "hostnameResolver = null", "var_name": "hostnameResolver"}], "methods": [{"identifier": "getProviderScheme", "parameters": "()", "modifiers": "@Override public", "return": "Scheme", "signature": "Scheme getProviderScheme()", "full_signature": "@Override public Scheme getProviderScheme()", "class_method_signature": "InstanceZTSProvider.getProviderScheme()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "full_signature": "@Override public void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "class_method_signature": "InstanceZTSProvider.initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "setHostnameResolver", "parameters": "(HostnameResolver hostnameResolver)", "modifiers": "@Override public", "return": "void", "signature": "void setHostnameResolver(HostnameResolver hostnameResolver)", "full_signature": "@Override public void setHostnameResolver(HostnameResolver hostnameResolver)", "class_method_signature": "InstanceZTSProvider.setHostnameResolver(HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "forbiddenError", "parameters": "(String message)", "modifiers": "private", "return": "ResourceException", "signature": "ResourceException forbiddenError(String message)", "full_signature": "private ResourceException forbiddenError(String message)", "class_method_signature": "InstanceZTSProvider.forbiddenError(String message)", "testcase": false, "constructor": false}, {"identifier": "confirmInstance", "parameters": "(InstanceConfirmation confirmation)", "modifiers": "@Override public", "return": "InstanceConfirmation", "signature": "InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "full_signature": "@Override public InstanceConfirmation confirmInstance(InstanceConfirmation confirmation)", "class_method_signature": "InstanceZTSProvider.confirmInstance(InstanceConfirmation confirmation)", "testcase": false, "constructor": false}, {"identifier": "refreshInstance", "parameters": "(InstanceConfirmation confirmation)", "modifiers": "@Override public", "return": "InstanceConfirmation", "signature": "InstanceConfirmation refreshInstance(InstanceConfirmation confirmation)", "full_signature": "@Override public InstanceConfirmation refreshInstance(InstanceConfirmation confirmation)", "class_method_signature": "InstanceZTSProvider.refreshInstance(InstanceConfirmation confirmation)", "testcase": false, "constructor": false}, {"identifier": "validateSanIp", "parameters": "(final String[] sanIps, final String clientIp)", "modifiers": "", "return": "boolean", "signature": "boolean validateSanIp(final String[] sanIps, final String clientIp)", "full_signature": " boolean validateSanIp(final String[] sanIps, final String clientIp)", "class_method_signature": "InstanceZTSProvider.validateSanIp(final String[] sanIps, final String clientIp)", "testcase": false, "constructor": false}, {"identifier": "validateHostname", "parameters": "(final String hostname, final String[] sanIps)", "modifiers": "", "return": "boolean", "signature": "boolean validateHostname(final String hostname, final String[] sanIps)", "full_signature": " boolean validateHostname(final String hostname, final String[] sanIps)", "class_method_signature": "InstanceZTSProvider.validateHostname(final String hostname, final String[] sanIps)", "testcase": false, "constructor": false}, {"identifier": "validateSanUri", "parameters": "(final String sanUri, final String hostname)", "modifiers": "", "return": "boolean", "signature": "boolean validateSanUri(final String sanUri, final String hostname)", "full_signature": " boolean validateSanUri(final String sanUri, final String hostname)", "class_method_signature": "InstanceZTSProvider.validateSanUri(final String sanUri, final String hostname)", "testcase": false, "constructor": false}, {"identifier": "validateToken", "parameters": "(final String signedToken, final String domainName,\n            final String serviceName, final String csrPublicKey, StringBuilder errMsg)", "modifiers": "", "return": "boolean", "signature": "boolean validateToken(final String signedToken, final String domainName,\n            final String serviceName, final String csrPublicKey, StringBuilder errMsg)", "full_signature": " boolean validateToken(final String signedToken, final String domainName,\n            final String serviceName, final String csrPublicKey, StringBuilder errMsg)", "class_method_signature": "InstanceZTSProvider.validateToken(final String signedToken, final String domainName,\n            final String serviceName, final String csrPublicKey, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(final String signedToken, KeyStore keyStore,\n            final String csrPublicKey, StringBuilder errMsg)", "modifiers": "", "return": "PrincipalToken", "signature": "PrincipalToken authenticate(final String signedToken, KeyStore keyStore,\n            final String csrPublicKey, StringBuilder errMsg)", "full_signature": " PrincipalToken authenticate(final String signedToken, KeyStore keyStore,\n            final String csrPublicKey, StringBuilder errMsg)", "class_method_signature": "InstanceZTSProvider.authenticate(final String signedToken, KeyStore keyStore,\n            final String csrPublicKey, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "validatePublicKeys", "parameters": "(final String athenzPublicKey, final String csrPublicKey)", "modifiers": "public", "return": "boolean", "signature": "boolean validatePublicKeys(final String athenzPublicKey, final String csrPublicKey)", "full_signature": "public boolean validatePublicKeys(final String athenzPublicKey, final String csrPublicKey)", "class_method_signature": "InstanceZTSProvider.validatePublicKeys(final String athenzPublicKey, final String csrPublicKey)", "testcase": false, "constructor": false}], "file": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceZTSProvider.java"}, "focal_method": {"identifier": "initialize", "parameters": "(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore) {\n\n        // obtain list of valid principals for this principal if\n        // one is configured\n\n        final String principalList = System.getProperty(ZTS_PRINCIPAL_LIST);\n        if (principalList != null && !principalList.isEmpty()) {\n            principals = new HashSet<>(Arrays.asList(principalList.split(\",\")));\n        }\n\n        // determine the dns suffix. if this is not specified we'll be\n        // rejecting all entries\n        \n        dnsSuffix = System.getProperty(ZTS_PROVIDER_DNS_SUFFIX, \"zts.athenz.cloud\");\n        if (dnsSuffix.isEmpty()) {\n            dnsSuffix = \"zts.athenz.cloud\";\n        }\n        this.keyStore = keyStore;\n    }", "signature": "void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "full_signature": "@Override public void initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "class_method_signature": "InstanceZTSProvider.initialize(String provider, String providerEndpoint, SSLContext sslContext,\n            KeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isEmpty", "asList", "split", "getProperty", "isEmpty"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}