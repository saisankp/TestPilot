{"test_class": {"identifier": "ViewCopyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ViewTestTools viewTestTools;", "modifier": "@Autowired\n    private", "type": "ViewTestTools", "declarator": "viewTestTools", "var_name": "viewTestTools"}, {"original_string": "@Autowired\n    private ClusterTestTools clusterTestTools;", "modifier": "@Autowired\n    private", "type": "ClusterTestTools", "declarator": "clusterTestTools", "var_name": "clusterTestTools"}, {"original_string": "@Autowired\n    private MessageFormatTestTools messageFormatTestTools;", "modifier": "@Autowired\n    private", "type": "MessageFormatTestTools", "declarator": "messageFormatTestTools", "var_name": "messageFormatTestTools"}, {"original_string": "@Autowired\n    private FilterTestTools filterTestTools;", "modifier": "@Autowired\n    private", "type": "FilterTestTools", "declarator": "filterTestTools", "var_name": "filterTestTools"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/model/view/ViewCopyManagerTest.java"}, "test_case": {"identifier": "basicCopyTest", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void basicCopyTest() {\n        final String originalViewName = \"My Original View\";\n        final String partitions = \"1,2,4\";\n        final String topic = \"MyTopic\";\n\n        final String expectedCopyName = \"My Copied View\";\n\n        final Cluster cluster = clusterTestTools.createCluster(\"Test Cluster\");\n        final MessageFormat keyMessageFormat = messageFormatTestTools.createMessageFormat(\"Key Message Format\");\n        final MessageFormat valueMessageFormat = messageFormatTestTools.createMessageFormat(\"Value Message Format\");\n\n        // Create source view\n        final View sourceView = viewTestTools.createView(originalViewName, cluster, keyMessageFormat);\n        sourceView.setKeyMessageFormat(keyMessageFormat);\n        sourceView.setValueMessageFormat(valueMessageFormat);\n        sourceView.setTopic(topic);\n        sourceView.setPartitions(partitions);\n\n        viewRepository.save(sourceView);\n\n        // Attempt to copy\n        final ViewCopyManager copyManager = new ViewCopyManager(viewRepository);\n        final View copiedView = copyManager.copy(sourceView.getId(),expectedCopyName);\n\n        // Validate properties\n        assertNotNull(\"Should be non-null\", copiedView);\n        assertNotNull(\"Should have an id\", copiedView.getId());\n        assertNotEquals(\"Should have a new id\", copiedView.getId(), sourceView.getId());\n        assertEquals(\"Has new name\", expectedCopyName, copiedView.getName());\n        assertEquals(\"Has topic\", topic, copiedView.getTopic());\n        assertEquals(\"Has partitions\", partitions, copiedView.getPartitions());\n        assertEquals(\"Has cluster\", cluster.getId(), copiedView.getCluster().getId());\n        assertEquals(\"Has key format\", keyMessageFormat.getId(), copiedView.getKeyMessageFormat().getId());\n        assertEquals(\"Has value format\", valueMessageFormat.getId(), copiedView.getValueMessageFormat().getId());\n    }", "signature": "void basicCopyTest()", "full_signature": "@Test @Transactional public void basicCopyTest()", "class_method_signature": "ViewCopyManagerTest.basicCopyTest()", "testcase": true, "constructor": false, "invocations": ["createCluster", "createMessageFormat", "createMessageFormat", "createView", "setKeyMessageFormat", "setValueMessageFormat", "setTopic", "setPartitions", "save", "copy", "getId", "assertNotNull", "assertNotNull", "getId", "assertNotEquals", "getId", "getId", "assertEquals", "getName", "assertEquals", "getTopic", "assertEquals", "getPartitions", "assertEquals", "getId", "getId", "getCluster", "assertEquals", "getId", "getId", "getKeyMessageFormat", "assertEquals", "getId", "getId", "getValueMessageFormat"]}, "focal_class": {"identifier": "ViewCopyManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ViewRepository viewRepository;", "modifier": "private final", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}], "methods": [{"identifier": "ViewCopyManager", "parameters": "(final ViewRepository viewRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ViewCopyManager(final ViewRepository viewRepository)", "full_signature": "@Autowired public  ViewCopyManager(final ViewRepository viewRepository)", "class_method_signature": "ViewCopyManager.ViewCopyManager(final ViewRepository viewRepository)", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(final long sourceViewId, final String newViewName)", "modifiers": "public", "return": "View", "signature": "View copy(final long sourceViewId, final String newViewName)", "full_signature": "public View copy(final long sourceViewId, final String newViewName)", "class_method_signature": "ViewCopyManager.copy(final long sourceViewId, final String newViewName)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final View sourceView, final String newViewName)", "modifiers": "public", "return": "View", "signature": "View copy(final View sourceView, final String newViewName)", "full_signature": "public View copy(final View sourceView, final String newViewName)", "class_method_signature": "ViewCopyManager.copy(final View sourceView, final String newViewName)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/model/view/ViewCopyManager.java"}, "focal_method": {"identifier": "copy", "parameters": "(final long sourceViewId, final String newViewName)", "modifiers": "public", "return": "View", "body": "public View copy(final long sourceViewId, final String newViewName) {\n        // Retrieve view\n        final Optional<View> sourceView = viewRepository.findById(sourceViewId);\n        if (!sourceView.isPresent()) {\n            throw new IllegalArgumentException(\"Unable to find view with id \" + sourceViewId);\n        }\n        return copy(sourceView.get(), newViewName);\n    }", "signature": "View copy(final long sourceViewId, final String newViewName)", "full_signature": "public View copy(final long sourceViewId, final String newViewName)", "class_method_signature": "ViewCopyManager.copy(final long sourceViewId, final String newViewName)", "testcase": false, "constructor": false, "invocations": ["findById", "isPresent", "copy", "get"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}