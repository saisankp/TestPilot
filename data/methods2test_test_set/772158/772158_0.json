{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/org/codeandmagic/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "testFuzzyIntervalSearch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFuzzyIntervalSearch() {\n\t\tfinal float[] base = new float[] { 1, 4, 4, 5, 7.3f, 8, 10, 23.4f, 23.4f, 34 };\n\t\tfinal float[] nullBase = null;\n\t\tfinal float[] emptyBase = new float[0];\n\n\t\t// empty arrays\n\t\tassertNull(ArrayUtils.fuzzyIntervalSearch(nullBase, 4, 23));\n\t\tassertNull(ArrayUtils.fuzzyIntervalSearch(emptyBase, 4, 23));\n\n\t\t// non-sense\n\t\tassertNull(ArrayUtils.fuzzyIntervalSearch(base, 10, 4));\n\t\tassertNull(ArrayUtils.fuzzyIntervalSearch(base, -4, 0.5f));\n\t\tassertNull(ArrayUtils.fuzzyIntervalSearch(base, 35, 90));\n\n\t\t// 1 element match\n\t\tassertArrayEquals(new int[] { 4, 4 }, ArrayUtils.fuzzyIntervalSearch(base, 7, 7.9f));\n\t\tassertArrayEquals(new int[] { 1, 2 }, ArrayUtils.fuzzyIntervalSearch(base, 2.3f, 4.5f));\n\n\t\t// normal match\n\t\tassertArrayEquals(new int[] { 1, 8 }, ArrayUtils.fuzzyIntervalSearch(base, 4, 23.4f));\n\t\tassertArrayEquals(new int[] { 0, 2 }, ArrayUtils.fuzzyIntervalSearch(base, 1, 4));\n\n\t\t// fuzzy match\n\t\tassertArrayEquals(new int[] { 1, 8 }, ArrayUtils.fuzzyIntervalSearch(base, 3.2f, 24.5f));\n\t\t// TOOD: note that because of float precision using 4.999999999999999f instead of 4.99f will cause 5 to be candidate\n\t\tassertArrayEquals(new int[] { 0, 2 }, ArrayUtils.fuzzyIntervalSearch(base, 0.1f, 4.99f));\n\n\t\t// match larger than base\n\t\tassertArrayEquals(new int[] { 0, base.length - 1 }, ArrayUtils.fuzzyIntervalSearch(base, -1, 90));\n\n\t\t// match with one end outside the base\n\t\tassertArrayEquals(new int[] { 0, 4 }, ArrayUtils.fuzzyIntervalSearch(base, -34.3f, 7.99999f));\n\t\tassertArrayEquals(new int[] { 7, base.length - 1 }, ArrayUtils.fuzzyIntervalSearch(base, 23.1f, 99.9999f));\n\t}", "signature": "void testFuzzyIntervalSearch()", "full_signature": "@Test public void testFuzzyIntervalSearch()", "class_method_signature": "ArrayUtilsTest.testFuzzyIntervalSearch()", "testcase": true, "constructor": false, "invocations": ["assertNull", "fuzzyIntervalSearch", "assertNull", "fuzzyIntervalSearch", "assertNull", "fuzzyIntervalSearch", "assertNull", "fuzzyIntervalSearch", "assertNull", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch", "assertArrayEquals", "fuzzyIntervalSearch"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fuzzyIntervalSearch", "parameters": "(final float[] base, final float startValue, final float endValue)", "modifiers": "public static", "return": "int[]", "signature": "int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "full_signature": "public static int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "class_method_signature": "ArrayUtils.fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "testcase": false, "constructor": false}, {"identifier": "searchStartAndEnd", "parameters": "(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "modifiers": "private static", "return": "int[]", "signature": "int[] searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "full_signature": "private static int[] searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "class_method_signature": "ArrayUtils.searchStartAndEnd(final float[] base, final float startValue, final float endValue, final int leftLimit,\n\t\t\tfinal int rightLimit)", "testcase": false, "constructor": false}, {"identifier": "fuzzySearch", "parameters": "(final float[] base, final float value, final boolean orGreater)", "modifiers": "public static", "return": "int", "signature": "int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "full_signature": "public static int fuzzySearch(final float[] base, final float value, final boolean orGreater)", "class_method_signature": "ArrayUtils.fuzzySearch(final float[] base, final float value, final boolean orGreater)", "testcase": false, "constructor": false}, {"identifier": "fuzzySearch", "parameters": "(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "modifiers": "private static", "return": "int", "signature": "int fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "full_signature": "private static int fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "class_method_signature": "ArrayUtils.fuzzySearch(final float[] base, final float value, final int leftLimit, final int rightLimit,\n\t\t\tfinal boolean orGreater)", "testcase": false, "constructor": false}], "file": "src/org/codeandmagic/util/ArrayUtils.java"}, "focal_method": {"identifier": "fuzzyIntervalSearch", "parameters": "(final float[] base, final float startValue, final float endValue)", "modifiers": "public static", "return": "int[]", "body": "public static int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue) {\n\n\t\t// no point in searching an empty array\n\t\tif (base == null || base.length == 0)\n\t\t\treturn null;\n\t\t// quick check if the searched interval makes sense or is outside the existing array\n\t\tif (startValue > endValue || endValue < base[0] || startValue > base[base.length - 1])\n\t\t\treturn null;\n\t\treturn searchStartAndEnd(base, startValue, endValue, 0, base.length - 1);\n\t}", "signature": "int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "full_signature": "public static int[] fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "class_method_signature": "ArrayUtils.fuzzyIntervalSearch(final float[] base, final float startValue, final float endValue)", "testcase": false, "constructor": false, "invocations": ["searchStartAndEnd"]}, "repository": {"repo_id": 772158, "url": "https://github.com/evelyne24/Thoth", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 1893, "license": "licensed"}}