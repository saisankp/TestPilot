{"test_class": {"identifier": "DifferentSubtreeTempEntryRenamingStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/support/DifferentSubtreeTempEntryRenamingStrategyTest.java"}, "test_case": {"identifier": "testGetTemporaryName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTemporaryName() {\n        LdapName originalName = LdapUtils.newLdapName(\n                \"cn=john doe, ou=somecompany, c=SE\");\n        DifferentSubtreeTempEntryRenamingStrategy tested = new DifferentSubtreeTempEntryRenamingStrategy(\n                LdapUtils.newLdapName(\"ou=tempEntries\"));\n\n        int nextSequenceNo = tested.getNextSequenceNo();\n\n        // Perform test\n        Name result = tested.getTemporaryName(originalName);\n\n        // Verify result\n        assertThat(result.toString()).isEqualTo(\"cn=john doe\" + nextSequenceNo + \",ou=tempEntries\");\n    }", "signature": "void testGetTemporaryName()", "full_signature": "@Test public void testGetTemporaryName()", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategyTest.testGetTemporaryName()", "testcase": true, "constructor": false, "invocations": ["newLdapName", "newLdapName", "getNextSequenceNo", "getTemporaryName", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "DifferentSubtreeTempEntryRenamingStrategy", "superclass": "", "interfaces": "implements\n        TempEntryRenamingStrategy", "fields": [{"original_string": "private Name subtreeNode;", "modifier": "private", "type": "Name", "declarator": "subtreeNode", "var_name": "subtreeNode"}, {"original_string": "private static final AtomicInteger NEXT_SEQUENCE_NO = new AtomicInteger(1);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "NEXT_SEQUENCE_NO = new AtomicInteger(1)", "var_name": "NEXT_SEQUENCE_NO"}], "methods": [{"identifier": "DifferentSubtreeTempEntryRenamingStrategy", "parameters": "(Name subtreeNode)", "modifiers": "public", "return": "", "signature": " DifferentSubtreeTempEntryRenamingStrategy(Name subtreeNode)", "full_signature": "public  DifferentSubtreeTempEntryRenamingStrategy(Name subtreeNode)", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.DifferentSubtreeTempEntryRenamingStrategy(Name subtreeNode)", "testcase": false, "constructor": true}, {"identifier": "DifferentSubtreeTempEntryRenamingStrategy", "parameters": "(String subtreeNode)", "modifiers": "public", "return": "", "signature": " DifferentSubtreeTempEntryRenamingStrategy(String subtreeNode)", "full_signature": "public  DifferentSubtreeTempEntryRenamingStrategy(String subtreeNode)", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.DifferentSubtreeTempEntryRenamingStrategy(String subtreeNode)", "testcase": false, "constructor": true}, {"identifier": "getSubtreeNode", "parameters": "()", "modifiers": "public", "return": "Name", "signature": "Name getSubtreeNode()", "full_signature": "public Name getSubtreeNode()", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.getSubtreeNode()", "testcase": false, "constructor": false}, {"identifier": "setSubtreeNode", "parameters": "(Name subtreeNode)", "modifiers": "public", "return": "void", "signature": "void setSubtreeNode(Name subtreeNode)", "full_signature": "public void setSubtreeNode(Name subtreeNode)", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.setSubtreeNode(Name subtreeNode)", "testcase": false, "constructor": false}, {"identifier": "getNextSequenceNo", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getNextSequenceNo()", "full_signature": " int getNextSequenceNo()", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.getNextSequenceNo()", "testcase": false, "constructor": false}, {"identifier": "getTemporaryName", "parameters": "(Name originalName)", "modifiers": "public", "return": "Name", "signature": "Name getTemporaryName(Name originalName)", "full_signature": "public Name getTemporaryName(Name originalName)", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.getTemporaryName(Name originalName)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/support/DifferentSubtreeTempEntryRenamingStrategy.java"}, "focal_method": {"identifier": "getTemporaryName", "parameters": "(Name originalName)", "modifiers": "public", "return": "Name", "body": "public Name getTemporaryName(Name originalName) {\n        int thisSequenceNo = NEXT_SEQUENCE_NO.getAndIncrement();\n\n        LdapName tempName = LdapUtils.newLdapName(originalName);\n        try {\n            String leafNode = tempName.get(tempName.size() - 1) + thisSequenceNo;\n            LdapName newName = LdapUtils.newLdapName(subtreeNode);\n            newName.add(leafNode);\n\n            return newName;\n        } catch (InvalidNameException e) {\n            throw new org.springframework.ldap.InvalidNameException(e);\n        }\n    }", "signature": "Name getTemporaryName(Name originalName)", "full_signature": "public Name getTemporaryName(Name originalName)", "class_method_signature": "DifferentSubtreeTempEntryRenamingStrategy.getTemporaryName(Name originalName)", "testcase": false, "constructor": false, "invocations": ["getAndIncrement", "newLdapName", "get", "size", "newLdapName", "add"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}