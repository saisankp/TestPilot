{"test_class": {"identifier": "TestMBeanOperationInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MBeanServer mockMBeanServer;", "modifier": "private", "type": "MBeanServer", "declarator": "mockMBeanServer", "var_name": "mockMBeanServer"}, {"original_string": "private ObjectName mockObjectName;", "modifier": "private", "type": "ObjectName", "declarator": "mockObjectName", "var_name": "mockObjectName"}, {"original_string": "private MBeanOperationInfo mockOperationInfo;", "modifier": "private", "type": "MBeanOperationInfo", "declarator": "mockOperationInfo", "var_name": "mockOperationInfo"}, {"original_string": "private MBeanValueConverter mockValueConverter;", "modifier": "private", "type": "MBeanValueConverter", "declarator": "mockValueConverter", "var_name": "mockValueConverter"}, {"original_string": "private MBeanOperationInvoker invoker;", "modifier": "private", "type": "MBeanOperationInvoker", "declarator": "invoker", "var_name": "invoker"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/jmx/TestMBeanOperationInvoker.java"}, "test_case": {"identifier": "testInvokeOperation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeOperation() throws JMException {\n        MBeanParameterInfo mockParameterInfo1 = createMock(MBeanParameterInfo.class);\n        MBeanParameterInfo mockParameterInfo2 = createMock(MBeanParameterInfo.class);\n        MBeanParameterInfo[] parameterInfoArray = new MBeanParameterInfo[] { mockParameterInfo1, mockParameterInfo2 };\n\n        expect(mockOperationInfo.getSignature()).andReturn(parameterInfoArray);\n        String name1 = \"name 1\";\n        String type1 = \"type 1\";\n        expect(mockParameterInfo1.getType()).andReturn(type1);\n        expect(mockParameterInfo1.getName()).andReturn(name1);\n        String value1 = \"value 1\";\n        expect(mockValueConverter.convertParameterValue(name1, type1)).andReturn(value1);\n\n        String name2 = \"name 2\";\n        String type2 = \"type 2\";\n        expect(mockParameterInfo2.getType()).andReturn(type2);\n        expect(mockParameterInfo2.getName()).andReturn(name2);\n        String value2 = \"value 2\";\n        expect(mockValueConverter.convertParameterValue(name2, type2)).andReturn(value2);\n\n        String operationName = \"some_operation_name\";\n        expect(mockOperationInfo.getName()).andReturn(operationName);\n\n        Object value = new Object();\n        expect(mockMBeanServer.invoke(eq(mockObjectName), eq(operationName), anyObject(String[].class), anyObject(String[].class))).andReturn(value);\n\n        replay(mockMBeanServer, mockObjectName, mockOperationInfo, mockValueConverter,\n                mockParameterInfo1, mockParameterInfo2);\n\n        Map<String, String[]> parameterMap = new HashMap<String, String[]>();\n        parameterMap.put(name1, new String[] { value1 });\n        parameterMap.put(name2, new String[] { value2 });\n\n        Object invokeResult = invoker.invokeOperation(parameterMap);\n\n        assertEquals(value, invokeResult);\n        verify(mockMBeanServer, mockObjectName, mockOperationInfo, mockValueConverter,\n                mockParameterInfo1, mockParameterInfo2);\n    }", "signature": "void testInvokeOperation()", "full_signature": "@Test public void testInvokeOperation()", "class_method_signature": "TestMBeanOperationInvoker.testInvokeOperation()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "andReturn", "expect", "getSignature", "andReturn", "expect", "getType", "andReturn", "expect", "getName", "andReturn", "expect", "convertParameterValue", "andReturn", "expect", "getType", "andReturn", "expect", "getName", "andReturn", "expect", "convertParameterValue", "andReturn", "expect", "getName", "andReturn", "expect", "invoke", "eq", "eq", "anyObject", "anyObject", "replay", "put", "put", "invokeOperation", "assertEquals", "verify"]}, "focal_class": {"identifier": "MBeanOperationInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "MBeanServer mBeanServer;", "modifier": "", "type": "MBeanServer", "declarator": "mBeanServer", "var_name": "mBeanServer"}, {"original_string": "ObjectName objectName;", "modifier": "", "type": "ObjectName", "declarator": "objectName", "var_name": "objectName"}, {"original_string": "MBeanOperationInfo operationInfo;", "modifier": "", "type": "MBeanOperationInfo", "declarator": "operationInfo", "var_name": "operationInfo"}], "methods": [{"identifier": "MBeanOperationInvoker", "parameters": "(MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "modifiers": "public", "return": "", "signature": " MBeanOperationInvoker(MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "full_signature": "public  MBeanOperationInvoker(MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "class_method_signature": "MBeanOperationInvoker.MBeanOperationInvoker(MBeanServer mBeanServer, ObjectName objectName, MBeanOperationInfo operationInfo)", "testcase": false, "constructor": true}, {"identifier": "invokeOperation", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "public", "return": "Object", "signature": "Object invokeOperation(Map<String, String[]> parameterMap)", "full_signature": "public Object invokeOperation(Map<String, String[]> parameterMap)", "class_method_signature": "MBeanOperationInvoker.invokeOperation(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}, {"identifier": "createMBeanValueConverter", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "", "return": "MBeanValueConverter", "signature": "MBeanValueConverter createMBeanValueConverter(Map<String, String[]> parameterMap)", "full_signature": " MBeanValueConverter createMBeanValueConverter(Map<String, String[]> parameterMap)", "class_method_signature": "MBeanOperationInvoker.createMBeanValueConverter(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/jmx/MBeanOperationInvoker.java"}, "focal_method": {"identifier": "invokeOperation", "parameters": "(Map<String, String[]> parameterMap)", "modifiers": "public", "return": "Object", "body": "public Object invokeOperation(Map<String, String[]> parameterMap) throws JMException {\n        MBeanParameterInfo[] parameterInfoArray = operationInfo.getSignature();\n\n        Object[] values = new Object[parameterInfoArray.length];\n        String[] types = new String[parameterInfoArray.length];\n\n        MBeanValueConverter valueConverter = createMBeanValueConverter(parameterMap);\n\n        for (int parameterNum = 0; parameterNum < parameterInfoArray.length; parameterNum++) {\n            MBeanParameterInfo parameterInfo = parameterInfoArray[parameterNum];\n            String type = parameterInfo.getType();\n            types[parameterNum] = type;\n            values[parameterNum] = valueConverter.convertParameterValue(parameterInfo.getName(), type);\n        }\n\n        return mBeanServer.invoke(objectName, operationInfo.getName(), values, types);\n    }", "signature": "Object invokeOperation(Map<String, String[]> parameterMap)", "full_signature": "public Object invokeOperation(Map<String, String[]> parameterMap)", "class_method_signature": "MBeanOperationInvoker.invokeOperation(Map<String, String[]> parameterMap)", "testcase": false, "constructor": false, "invocations": ["getSignature", "createMBeanValueConverter", "getType", "convertParameterValue", "getName", "invoke", "getName"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}