{"test_class": {"identifier": "IoUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-common/src/test/java/org/modeshape/common/util/IoUtilTest.java"}, "test_case": {"identifier": "readBytesShouldReadInputStreamCorrectlyAndShouldCloseStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readBytesShouldReadInputStreamCorrectlyAndShouldCloseStream() throws Exception {\n        // Read content shorter than buffer size ...\n        String content = \"This is the way to grandma's house.\";\n        InputStream stream = new ByteArrayInputStream(content.getBytes());\n        InputStreamWrapper wrapper = new InputStreamWrapper(stream);\n        assertThat(wrapper.isClosed(), is(false));\n        byte[] bytes = IoUtil.readBytes(wrapper);\n        String output = new String(bytes);\n        assertThat(output, is(content));\n        assertThat(wrapper.isClosed(), is(true));\n\n        // Read content longer than buffer size ...\n        for (int i = 0; i != 10; ++i) {\n            content += content; // note this doubles each time!\n        }\n        stream = new ByteArrayInputStream(content.getBytes());\n        wrapper = new InputStreamWrapper(stream);\n        assertThat(wrapper.isClosed(), is(false));\n        bytes = IoUtil.readBytes(wrapper);\n        output = new String(bytes);\n        assertThat(output, is(content));\n        assertThat(wrapper.isClosed(), is(true));\n    }", "signature": "void readBytesShouldReadInputStreamCorrectlyAndShouldCloseStream()", "full_signature": "@Test public void readBytesShouldReadInputStreamCorrectlyAndShouldCloseStream()", "class_method_signature": "IoUtilTest.readBytesShouldReadInputStreamCorrectlyAndShouldCloseStream()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertThat", "isClosed", "is", "readBytes", "assertThat", "is", "assertThat", "isClosed", "is", "getBytes", "assertThat", "isClosed", "is", "readBytes", "assertThat", "is", "assertThat", "isClosed", "is"]}, "focal_class": {"identifier": "IoUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(IoUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(IoUtil.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "readBytes", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes( InputStream stream )", "full_signature": "public static byte[] readBytes( InputStream stream )", "class_method_signature": "IoUtil.readBytes( InputStream stream )", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "( File file )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes( File file )", "full_signature": "public static byte[] readBytes( File file )", "class_method_signature": "IoUtil.readBytes( File file )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( Reader reader )", "modifiers": "public static", "return": "String", "signature": "String read( Reader reader )", "full_signature": "public static String read( Reader reader )", "class_method_signature": "IoUtil.read( Reader reader )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "String", "signature": "String read( InputStream stream )", "full_signature": "public static String read( InputStream stream )", "class_method_signature": "IoUtil.read( InputStream stream )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( InputStream stream,\n                               String charset )", "modifiers": "public static", "return": "String", "signature": "String read( InputStream stream,\n                               String charset )", "full_signature": "public static String read( InputStream stream,\n                               String charset )", "class_method_signature": "IoUtil.read( InputStream stream,\n                               String charset )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( File file )", "modifiers": "public static", "return": "String", "signature": "String read( File file )", "full_signature": "public static String read( File file )", "class_method_signature": "IoUtil.read( File file )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( String content,\n                              File file )", "modifiers": "public static", "return": "void", "signature": "void write( String content,\n                              File file )", "full_signature": "public static void write( String content,\n                              File file )", "class_method_signature": "IoUtil.write( String content,\n                              File file )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( String content,\n                              OutputStream stream )", "modifiers": "public static", "return": "void", "signature": "void write( String content,\n                              OutputStream stream )", "full_signature": "public static void write( String content,\n                              OutputStream stream )", "class_method_signature": "IoUtil.write( String content,\n                              OutputStream stream )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( String content,\n                              Writer writer )", "modifiers": "public static", "return": "void", "signature": "void write( String content,\n                              Writer writer )", "full_signature": "public static void write( String content,\n                              Writer writer )", "class_method_signature": "IoUtil.write( String content,\n                              Writer writer )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( InputStream input,\n                              OutputStream stream )", "modifiers": "public static", "return": "void", "signature": "void write( InputStream input,\n                              OutputStream stream )", "full_signature": "public static void write( InputStream input,\n                              OutputStream stream )", "class_method_signature": "IoUtil.write( InputStream input,\n                              OutputStream stream )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( InputStream input,\n                              OutputStream stream,\n                              int bufferSize )", "modifiers": "public static", "return": "void", "signature": "void write( InputStream input,\n                              OutputStream stream,\n                              int bufferSize )", "full_signature": "public static void write( InputStream input,\n                              OutputStream stream,\n                              int bufferSize )", "class_method_signature": "IoUtil.write( InputStream input,\n                              OutputStream stream,\n                              int bufferSize )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( Reader input,\n                              Writer writer )", "modifiers": "public static", "return": "void", "signature": "void write( Reader input,\n                              Writer writer )", "full_signature": "public static void write( Reader input,\n                              Writer writer )", "class_method_signature": "IoUtil.write( Reader input,\n                              Writer writer )", "testcase": false, "constructor": false}, {"identifier": "isSame", "parameters": "( InputStream input1,\n                                  InputStream input2 )", "modifiers": "public static", "return": "boolean", "signature": "boolean isSame( InputStream input1,\n                                  InputStream input2 )", "full_signature": "public static boolean isSame( InputStream input1,\n                                  InputStream input2 )", "class_method_signature": "IoUtil.isSame( InputStream input1,\n                                  InputStream input2 )", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "( String resourcePath,\n                                                   ClassLoader classLoader,\n                                                   Class<?> clazz )", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream( String resourcePath,\n                                                   ClassLoader classLoader,\n                                                   Class<?> clazz )", "full_signature": "public static InputStream getResourceAsStream( String resourcePath,\n                                                   ClassLoader classLoader,\n                                                   Class<?> clazz )", "class_method_signature": "IoUtil.getResourceAsStream( String resourcePath,\n                                                   ClassLoader classLoader,\n                                                   Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "closeQuietly", "parameters": "( Closeable closeable )", "modifiers": "public static", "return": "void", "signature": "void closeQuietly( Closeable closeable )", "full_signature": "public static void closeQuietly( Closeable closeable )", "class_method_signature": "IoUtil.closeQuietly( Closeable closeable )", "testcase": false, "constructor": false}, {"identifier": "IoUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " IoUtil()", "full_signature": "private  IoUtil()", "class_method_signature": "IoUtil.IoUtil()", "testcase": false, "constructor": true}], "file": "modeshape-common/src/main/java/org/modeshape/common/util/IoUtil.java"}, "focal_method": {"identifier": "readBytes", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] readBytes( InputStream stream ) throws IOException {\n        if (stream == null) return new byte[] {};\n        byte[] buffer = new byte[1024];\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        boolean error = false;\n        try {\n            int numRead = 0;\n            while ((numRead = stream.read(buffer)) > -1) {\n                output.write(buffer, 0, numRead);\n            }\n        } catch (IOException e) {\n            error = true; // this error should be thrown, even if there is an error closing stream\n            throw e;\n        } catch (RuntimeException e) {\n            error = true; // this error should be thrown, even if there is an error closing stream\n            throw e;\n        } finally {\n            try {\n                stream.close();\n            } catch (IOException e) {\n                if (!error) throw e;\n            }\n        }\n        output.flush();\n        return output.toByteArray();\n    }", "signature": "byte[] readBytes( InputStream stream )", "full_signature": "public static byte[] readBytes( InputStream stream )", "class_method_signature": "IoUtil.readBytes( InputStream stream )", "testcase": false, "constructor": false, "invocations": ["read", "write", "close", "flush", "toByteArray"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}