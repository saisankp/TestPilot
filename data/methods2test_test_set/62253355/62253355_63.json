{"test_class": {"identifier": "OrmFactoryRegistryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OrmFactoryRegistryImpl registry;", "modifier": "private", "type": "OrmFactoryRegistryImpl", "declarator": "registry", "var_name": "registry"}, {"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}, {"original_string": "private ThingFactory thingFactory = new ThingFactory();", "modifier": "private", "type": "ThingFactory", "declarator": "thingFactory = new ThingFactory()", "var_name": "thingFactory"}, {"original_string": "private IRI thingIRI;", "modifier": "private", "type": "IRI", "declarator": "thingIRI", "var_name": "thingIRI"}, {"original_string": "private IRI aIRI;", "modifier": "private", "type": "IRI", "declarator": "aIRI", "var_name": "aIRI"}, {"original_string": "private IRI bIRI;", "modifier": "private", "type": "IRI", "declarator": "bIRI", "var_name": "bIRI"}, {"original_string": "private IRI cIRI;", "modifier": "private", "type": "IRI", "declarator": "cIRI", "var_name": "cIRI"}, {"original_string": "private IRI errorIRI;", "modifier": "private", "type": "IRI", "declarator": "errorIRI", "var_name": "errorIRI"}, {"original_string": "@Mock\n    private OrmFactory<A> aFactory;", "modifier": "@Mock\n    private", "type": "OrmFactory<A>", "declarator": "aFactory", "var_name": "aFactory"}, {"original_string": "@Mock\n    private OrmFactory<B> bFactory;", "modifier": "@Mock\n    private", "type": "OrmFactory<B>", "declarator": "bFactory", "var_name": "bFactory"}, {"original_string": "@Mock\n    private OrmFactory<C> cFactory;", "modifier": "@Mock\n    private", "type": "OrmFactory<C>", "declarator": "cFactory", "var_name": "cFactory"}, {"original_string": "@Mock\n    private OrmFactory<D> dFactory;", "modifier": "@Mock\n    private", "type": "OrmFactory<D>", "declarator": "dFactory", "var_name": "dFactory"}], "file": "rdf-orm/com.mobi.rdf.orm/src/test/java/com/mobi/rdf/orm/impl/OrmFactoryRegistryImplTest.java"}, "test_case": {"identifier": "getFactoryByTypeIriThatDoesNotExistTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFactoryByTypeIriThatDoesNotExistTest() {\n        assertFalse(registry.getFactoryOfType(errorIRI).isPresent());\n    }", "signature": "void getFactoryByTypeIriThatDoesNotExistTest()", "full_signature": "@Test public void getFactoryByTypeIriThatDoesNotExistTest()", "class_method_signature": "OrmFactoryRegistryImplTest.getFactoryByTypeIriThatDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isPresent", "getFactoryOfType"]}, "focal_class": {"identifier": "OrmFactoryRegistryImpl", "superclass": "", "interfaces": "implements OrmFactoryRegistry", "fields": [{"original_string": "private ValueFactory valueFactory;", "modifier": "private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private List<OrmFactory<? extends Thing>> factories = new ArrayList<>();", "modifier": "private", "type": "List<OrmFactory<? extends Thing>>", "declarator": "factories = new ArrayList<>()", "var_name": "factories"}], "methods": [{"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference protected void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "OrmFactoryRegistryImpl.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "addFactory", "parameters": "(OrmFactory<? extends Thing> factory)", "modifiers": "@Reference(type = '*', dynamic = true) protected", "return": "void", "signature": "void addFactory(OrmFactory<? extends Thing> factory)", "full_signature": "@Reference(type = '*', dynamic = true) protected void addFactory(OrmFactory<? extends Thing> factory)", "class_method_signature": "OrmFactoryRegistryImpl.addFactory(OrmFactory<? extends Thing> factory)", "testcase": false, "constructor": false}, {"identifier": "removeFactory", "parameters": "(OrmFactory<Thing> factory)", "modifiers": "protected", "return": "void", "signature": "void removeFactory(OrmFactory<Thing> factory)", "full_signature": "protected void removeFactory(OrmFactory<Thing> factory)", "class_method_signature": "OrmFactoryRegistryImpl.removeFactory(OrmFactory<Thing> factory)", "testcase": false, "constructor": false}, {"identifier": "getFactoryOfType", "parameters": "(Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Optional<OrmFactory<T>>", "signature": "Optional<OrmFactory<T>> getFactoryOfType(Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Optional<OrmFactory<T>> getFactoryOfType(Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryOfType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getFactoryOfType", "parameters": "(String typeIRI)", "modifiers": "@Override public", "return": "Optional<OrmFactory<? extends Thing>>", "signature": "Optional<OrmFactory<? extends Thing>> getFactoryOfType(String typeIRI)", "full_signature": "@Override public Optional<OrmFactory<? extends Thing>> getFactoryOfType(String typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryOfType(String typeIRI)", "testcase": false, "constructor": false}, {"identifier": "getFactoryOfType", "parameters": "(IRI typeIRI)", "modifiers": "@Override public", "return": "Optional<OrmFactory<? extends Thing>>", "signature": "Optional<OrmFactory<? extends Thing>> getFactoryOfType(IRI typeIRI)", "full_signature": "@Override public Optional<OrmFactory<? extends Thing>> getFactoryOfType(IRI typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryOfType(IRI typeIRI)", "testcase": false, "constructor": false}, {"identifier": "getFactoriesOfType", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends T>>", "signature": "List<OrmFactory<? extends T>> getFactoriesOfType(Class<T> type)", "full_signature": "@Override public List<OrmFactory<? extends T>> getFactoriesOfType(Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoriesOfType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getSortedFactoriesOfType", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends T>>", "signature": "List<OrmFactory<? extends T>> getSortedFactoriesOfType(Class<T> type)", "full_signature": "@Override public List<OrmFactory<? extends T>> getSortedFactoriesOfType(Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getSortedFactoriesOfType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getFactoriesOfType", "parameters": "(String typeIRI)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends Thing>>", "signature": "List<OrmFactory<? extends Thing>> getFactoriesOfType(String typeIRI)", "full_signature": "@Override public List<OrmFactory<? extends Thing>> getFactoriesOfType(String typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoriesOfType(String typeIRI)", "testcase": false, "constructor": false}, {"identifier": "getSortedFactoriesOfType", "parameters": "(String typeIRI)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends Thing>>", "signature": "List<OrmFactory<? extends Thing>> getSortedFactoriesOfType(String typeIRI)", "full_signature": "@Override public List<OrmFactory<? extends Thing>> getSortedFactoriesOfType(String typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getSortedFactoriesOfType(String typeIRI)", "testcase": false, "constructor": false}, {"identifier": "getFactoriesOfType", "parameters": "(IRI typeIRI)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends Thing>>", "signature": "List<OrmFactory<? extends Thing>> getFactoriesOfType(IRI typeIRI)", "full_signature": "@Override public List<OrmFactory<? extends Thing>> getFactoriesOfType(IRI typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoriesOfType(IRI typeIRI)", "testcase": false, "constructor": false}, {"identifier": "getSortedFactoriesOfType", "parameters": "(IRI typeIRI)", "modifiers": "@Override public", "return": "List<OrmFactory<? extends Thing>>", "signature": "List<OrmFactory<? extends Thing>> getSortedFactoriesOfType(IRI typeIRI)", "full_signature": "@Override public List<OrmFactory<? extends Thing>> getSortedFactoriesOfType(IRI typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getSortedFactoriesOfType(IRI typeIRI)", "testcase": false, "constructor": false}, {"identifier": "createNew", "parameters": "(Resource resource, Model model, Class<T> type)", "modifiers": "@Override public", "return": "T", "signature": "T createNew(Resource resource, Model model, Class<T> type)", "full_signature": "@Override public T createNew(Resource resource, Model model, Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.createNew(Resource resource, Model model, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getExisting", "parameters": "(Resource resource, Model model, Class<T> type)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> getExisting(Resource resource, Model model, Class<T> type)", "full_signature": "@Override public Optional<T> getExisting(Resource resource, Model model, Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getExisting(Resource resource, Model model, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getAllExisting", "parameters": "(Model model, Class<T> type)", "modifiers": "@Override public", "return": "Collection<T>", "signature": "Collection<T> getAllExisting(Model model, Class<T> type)", "full_signature": "@Override public Collection<T> getAllExisting(Model model, Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getAllExisting(Model model, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "processAllExisting", "parameters": "(Model model, Consumer<T> consumer, Class<T> type)", "modifiers": "@Override public", "return": "void", "signature": "void processAllExisting(Model model, Consumer<T> consumer, Class<T> type)", "full_signature": "@Override public void processAllExisting(Model model, Consumer<T> consumer, Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.processAllExisting(Model model, Consumer<T> consumer, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getFactoryStreamOfType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Stream<OrmFactory<? extends T>>", "signature": "Stream<OrmFactory<? extends T>> getFactoryStreamOfType(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") private Stream<OrmFactory<? extends T>> getFactoryStreamOfType(Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryStreamOfType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getFactoryStreamOfType", "parameters": "(IRI typeIRI)", "modifiers": "private", "return": "Stream<OrmFactory<? extends Thing>>", "signature": "Stream<OrmFactory<? extends Thing>> getFactoryStreamOfType(IRI typeIRI)", "full_signature": "private Stream<OrmFactory<? extends Thing>> getFactoryStreamOfType(IRI typeIRI)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryStreamOfType(IRI typeIRI)", "testcase": false, "constructor": false}], "file": "rdf-orm/com.mobi.rdf.orm/src/main/java/com/mobi/rdf/orm/impl/OrmFactoryRegistryImpl.java"}, "focal_method": {"identifier": "getFactoryOfType", "parameters": "(Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "Optional<OrmFactory<T>>", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T extends Thing> Optional<OrmFactory<T>> getFactoryOfType(Class<T> type) {\n        return factories.stream()\n                .filter(factory -> type.equals(factory.getType()))\n                .map(factory -> (OrmFactory<T>) factory)\n                .findFirst();\n    }", "signature": "Optional<OrmFactory<T>> getFactoryOfType(Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public Optional<OrmFactory<T>> getFactoryOfType(Class<T> type)", "class_method_signature": "OrmFactoryRegistryImpl.getFactoryOfType(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["findFirst", "map", "filter", "stream", "equals", "getType"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}