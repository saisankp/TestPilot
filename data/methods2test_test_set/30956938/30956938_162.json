{"test_class": {"identifier": "ODFSpreadsheetReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetReader spreadsheetReader;", "modifier": "private", "type": "SpreadsheetReader", "declarator": "spreadsheetReader", "var_name": "spreadsheetReader"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/ODFSpreadsheetReaderTest.java"}, "test_case": {"identifier": "testReadException", "parameters": "()", "modifiers": "@Test(expected=SpreadsheetReadException.class) public", "return": "void", "body": "@Test(expected=SpreadsheetReadException.class)\n\tpublic void testReadException() throws Exception {\n\t\tspreadsheetReader.read(getClass().getResourceAsStream(\"/test-spreadsheet.csv\"), new Range(0,1), new Range(0,1), false, new SpreadsheetRowProcessor() {\n\t\t\tpublic void processRow(int rowIndex, SortedMap<Integer, String> rowData) {\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t}", "signature": "void testReadException()", "full_signature": "@Test(expected=SpreadsheetReadException.class) public void testReadException()", "class_method_signature": "ODFSpreadsheetReaderTest.testReadException()", "testcase": true, "constructor": false, "invocations": ["read", "getResourceAsStream", "getClass"]}, "focal_class": {"identifier": "ODFSpreadsheetReader", "superclass": "", "interfaces": "implements SpreadsheetReader", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(ODFSpreadsheetReader.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(ODFSpreadsheetReader.class)", "var_name": "logger"}], "methods": [{"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ODFSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false}, {"identifier": "calculateRowCount", "parameters": "(NodeList rowList)", "modifiers": "private", "return": "int", "signature": "int calculateRowCount(NodeList rowList)", "full_signature": "private int calculateRowCount(NodeList rowList)", "class_method_signature": "ODFSpreadsheetReader.calculateRowCount(NodeList rowList)", "testcase": false, "constructor": false}, {"identifier": "isBlankRow", "parameters": "(OdfTableRow row)", "modifiers": "private", "return": "boolean", "signature": "boolean isBlankRow(OdfTableRow row)", "full_signature": "private boolean isBlankRow(OdfTableRow row)", "class_method_signature": "ODFSpreadsheetReader.isBlankRow(OdfTableRow row)", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/ODFSpreadsheetReader.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "body": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)\n\t\t\tthrows SpreadsheetReadException {\n\t\tNodeList rowList = null;\n\t\ttry {\n\t\t\t// Load the ODF document\n\t\t\tOdfDocument odfDoc = OdfDocument.loadDocument(inputStream);\n\t\t\tlogger.debug(\"Reading document of type : \" + odfDoc.getMediaType());\n\t\t\t// Get the content as DOM tree\n\t\t\tOdfFileDom odfContent = odfDoc.getContentDom();\n\t\t\t// Initialize XPath\n\t\t\tXPath xpath = odfDoc.getXPath();\n\t\t\t// Get the rows of the first table\n\t\t\tString rowsPath = (\"//table:table[1]/table:table-row\");\n\t\t\trowList = (NodeList) xpath.evaluate(rowsPath, odfContent, XPathConstants.NODESET);\n\t\t} catch (Exception e) {\n\t\t\tif (e instanceof RuntimeException) {\n\t\t\t\tthrow (RuntimeException) e;\n\t\t\t}\n\t\t\tthrow new SpreadsheetReadException(\"The spreadsheet file could not be read\", e);\n\t\t}\n\n\t\tif (rowRange.getEnd() < 0) {\n\t\t\trowRange.setEnd(calculateRowCount(rowList) - 1);\n\t\t}\n\n\t\tSortedMap<Integer, String> currentDataRow = new TreeMap<Integer, String>();\n\t\tint rowRep = 0;\n\t\tfor (int rowIndex = rowRange.getStart(); rowIndex <= rowRange.getEnd(); rowIndex++) {\n\t\t\tboolean blankRow = true;\n\t\t\tOdfTableRow row = (OdfTableRow) rowList.item(rowIndex);\n\t\t\tint columnRep = 0;\n\t\t\tfor (int columnIndex = columnRange.getStart(); columnIndex <= columnRange.getEnd(); columnIndex++) {\n\t\t\t\tString value = null;\n\t\t\t\tOdfTableCell cell = null;\n\t\t\t\tif (row != null) {\n\t\t\t\t\tcell = (OdfTableCell) row.getCellAt(columnIndex);\n\t\t\t\t\tif (cell != null) {\n\t\t\t\t\t\tString type = cell.getOfficeValueTypeAttribute();\n\t\t\t\t\t\tif (\"float\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeValueAttribute().toString();\n\t\t\t\t\t\t} else if (\"percentage\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeValueAttribute().toString();\n\t\t\t\t\t\t} else if (\"currency\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeValueAttribute().toString();\n\t\t\t\t\t\t} else if (\"date\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeDateValueAttribute();\n\t\t\t\t\t\t} else if (\"time\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeTimeValueAttribute();\n\t\t\t\t\t\t} else if (\"boolean\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeBooleanValueAttribute().toString();\n\t\t\t\t\t\t} else if (\"string\".equals(type)) {\n\t\t\t\t\t\t\tvalue = cell.getOfficeStringValueAttribute();\n\t\t\t\t\t\t\tif (value == null) {\n\t\t\t\t\t\t\t\tvalue = cell.getTextContent();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalue = cell.getTextContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvalue = \"\".equals(value) ? null : value;\n\t\t\t\tif (value != null) {\n\t\t\t\t\tblankRow = false;\n\t\t\t\t}\n\t\t\t\t// if the cell is within the column range add it to the row values\n\t\t\t\tif (columnRange.contains(columnIndex + columnRep)) {\n\t\t\t\t\tcurrentDataRow.put(columnIndex + columnRep, value);\n\t\t\t\t}\n\t\t\t\t// check if this cell is repeated\n\t\t\t\tint repeatedCells = cell == null ? 0 : cell\n\t\t\t\t\t\t.getTableNumberColumnsRepeatedAttribute() - 1;\n\t\t\t\twhile (repeatedCells > 0 && columnIndex + columnRep < columnRange.getEnd()) {\n\t\t\t\t\tcolumnRep++;\n\t\t\t\t\tif (columnRange.contains(columnIndex + columnRep)) {\n\t\t\t\t\t\tcurrentDataRow\n\t\t\t\t\t\t\t\t.put(columnIndex + columnRep, value);\n\t\t\t\t\t}\n\t\t\t\t\trepeatedCells--;\n\t\t\t\t}\n\t\t\t\t// if it's the last cell in the range process the row\n\t\t\t\tif (columnIndex == columnRange.getEnd()) {\n\t\t\t\t\tif (rowRange.contains(rowIndex + rowRep)) {\n\t\t\t\t\t\tif (!ignoreBlankRows || !blankRow) {\n\t\t\t\t\t\t\trowProcessor.processRow(rowIndex + rowRep, currentDataRow);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// check if this row is repeated\n\t\t\t\t\tint repeatedRows = row == null ? 0\n\t\t\t\t\t\t\t: row.getTableNumberRowsRepeatedAttribute() - 1;\n\t\t\t\t\twhile (repeatedRows > 0 && rowIndex + rowRep < rowRange.getEnd()) {\n\t\t\t\t\t\trowRep++;\n\t\t\t\t\t\tif (rowRange.contains(rowIndex + rowRep)) {\n\t\t\t\t\t\t\tif (!ignoreBlankRows || !blankRow) {\n\t\t\t\t\t\t\t\trowProcessor.processRow(rowIndex + rowRep, currentDataRow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trepeatedRows--;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentDataRow = new TreeMap<Integer, String>();\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ODFSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false, "invocations": ["loadDocument", "debug", "getMediaType", "getContentDom", "getXPath", "evaluate", "getEnd", "setEnd", "calculateRowCount", "getStart", "getEnd", "item", "getStart", "getEnd", "getCellAt", "getOfficeValueTypeAttribute", "equals", "toString", "getOfficeValueAttribute", "equals", "toString", "getOfficeValueAttribute", "equals", "toString", "getOfficeValueAttribute", "equals", "getOfficeDateValueAttribute", "equals", "getOfficeTimeValueAttribute", "equals", "toString", "getOfficeBooleanValueAttribute", "equals", "getOfficeStringValueAttribute", "getTextContent", "getTextContent", "equals", "contains", "put", "getTableNumberColumnsRepeatedAttribute", "getEnd", "contains", "put", "getEnd", "contains", "processRow", "getTableNumberRowsRepeatedAttribute", "getEnd", "contains", "processRow"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}