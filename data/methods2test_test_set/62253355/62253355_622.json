{"test_class": {"identifier": "RepositoryCachingProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RepositoryCachingProvider repositoryCachingProvider;", "modifier": "private", "type": "RepositoryCachingProvider", "declarator": "repositoryCachingProvider", "var_name": "repositoryCachingProvider"}, {"original_string": "private URI providerUri;", "modifier": "private", "type": "URI", "declarator": "providerUri", "var_name": "providerUri"}, {"original_string": "private ClassLoader providerClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "providerClassLoader", "var_name": "providerClassLoader"}, {"original_string": "private Properties providerProperties;", "modifier": "private", "type": "Properties", "declarator": "providerProperties", "var_name": "providerProperties"}, {"original_string": "@Mock\n    private RepositoryCacheManager repositoryCacheManager;", "modifier": "@Mock\n    private", "type": "RepositoryCacheManager", "declarator": "repositoryCacheManager", "var_name": "repositoryCacheManager"}], "file": "com.mobi.cache.impl.repository/src/test/java/com/mobi/cache/impl/repository/jcache/RepositoryCachingProviderTest.java"}, "test_case": {"identifier": "closeWithClassLoaderTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void closeWithClassLoaderTest() {\n        repositoryCachingProvider.close(providerClassLoader);\n        verify(repositoryCacheManager).close();\n    }", "signature": "void closeWithClassLoaderTest()", "full_signature": "@Test public void closeWithClassLoaderTest()", "class_method_signature": "RepositoryCachingProviderTest.closeWithClassLoaderTest()", "testcase": true, "constructor": false, "invocations": ["close", "close", "verify"]}, "focal_class": {"identifier": "RepositoryCachingProvider", "superclass": "", "interfaces": "implements CachingProvider", "fields": [{"original_string": "private final Map<ClassLoader, Map<URI, CacheManager>> cacheManagers = new WeakHashMap<>(1);", "modifier": "private final", "type": "Map<ClassLoader, Map<URI, CacheManager>>", "declarator": "cacheManagers = new WeakHashMap<>(1)", "var_name": "cacheManagers"}], "methods": [{"identifier": "setCacheManager", "parameters": "(CacheManager cacheManager)", "modifiers": "@Reference", "return": "void", "signature": "void setCacheManager(CacheManager cacheManager)", "full_signature": "@Reference void setCacheManager(CacheManager cacheManager)", "class_method_signature": "RepositoryCachingProvider.setCacheManager(CacheManager cacheManager)", "testcase": false, "constructor": false}, {"identifier": "getDefaultClassLoader", "parameters": "()", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getDefaultClassLoader()", "full_signature": "@Override public ClassLoader getDefaultClassLoader()", "class_method_signature": "RepositoryCachingProvider.getDefaultClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getDefaultURI", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getDefaultURI()", "full_signature": "@Override public URI getDefaultURI()", "class_method_signature": "RepositoryCachingProvider.getDefaultURI()", "testcase": false, "constructor": false}, {"identifier": "getDefaultProperties", "parameters": "()", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getDefaultProperties()", "full_signature": "@Override public Properties getDefaultProperties()", "class_method_signature": "RepositoryCachingProvider.getDefaultProperties()", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "()", "modifiers": "@Override public", "return": "CacheManager", "signature": "CacheManager getCacheManager()", "full_signature": "@Override public CacheManager getCacheManager()", "class_method_signature": "RepositoryCachingProvider.getCacheManager()", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "(URI uri, ClassLoader classLoader)", "modifiers": "@Override public", "return": "CacheManager", "signature": "CacheManager getCacheManager(URI uri, ClassLoader classLoader)", "full_signature": "@Override public CacheManager getCacheManager(URI uri, ClassLoader classLoader)", "class_method_signature": "RepositoryCachingProvider.getCacheManager(URI uri, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getCacheManager", "parameters": "(URI uri, ClassLoader classLoader, Properties properties)", "modifiers": "@Override public", "return": "CacheManager", "signature": "CacheManager getCacheManager(URI uri, ClassLoader classLoader, Properties properties)", "full_signature": "@Override public CacheManager getCacheManager(URI uri, ClassLoader classLoader, Properties properties)", "class_method_signature": "RepositoryCachingProvider.getCacheManager(URI uri, ClassLoader classLoader, Properties properties)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RepositoryCachingProvider.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(ClassLoader classLoader)", "modifiers": "@Override public", "return": "void", "signature": "void close(ClassLoader classLoader)", "full_signature": "@Override public void close(ClassLoader classLoader)", "class_method_signature": "RepositoryCachingProvider.close(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(URI uri, ClassLoader classLoader)", "modifiers": "@Override public", "return": "void", "signature": "void close(URI uri, ClassLoader classLoader)", "full_signature": "@Override public void close(URI uri, ClassLoader classLoader)", "class_method_signature": "RepositoryCachingProvider.close(URI uri, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "isSupported", "parameters": "(OptionalFeature optionalFeature)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSupported(OptionalFeature optionalFeature)", "full_signature": "@Override public boolean isSupported(OptionalFeature optionalFeature)", "class_method_signature": "RepositoryCachingProvider.isSupported(OptionalFeature optionalFeature)", "testcase": false, "constructor": false}, {"identifier": "getManagerUri", "parameters": "(URI uri)", "modifiers": "private", "return": "URI", "signature": "URI getManagerUri(URI uri)", "full_signature": "private URI getManagerUri(URI uri)", "class_method_signature": "RepositoryCachingProvider.getManagerUri(URI uri)", "testcase": false, "constructor": false}, {"identifier": "getManagerClassLoader", "parameters": "(ClassLoader classLoader)", "modifiers": "private", "return": "ClassLoader", "signature": "ClassLoader getManagerClassLoader(ClassLoader classLoader)", "full_signature": "private ClassLoader getManagerClassLoader(ClassLoader classLoader)", "class_method_signature": "RepositoryCachingProvider.getManagerClassLoader(ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "com.mobi.cache.impl.repository/src/main/java/com/mobi/cache/impl/repository/jcache/RepositoryCachingProvider.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        synchronized (cacheManagers) {\n            for (ClassLoader classLoader : new ArrayList<>(cacheManagers.keySet())) {\n                close(classLoader);\n            }\n        }\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RepositoryCachingProvider.close()", "testcase": false, "constructor": false, "invocations": ["keySet", "close"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}