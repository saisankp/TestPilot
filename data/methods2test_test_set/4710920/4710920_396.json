{"test_class": {"identifier": "AdaptiveClassCodeGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGeneratorTest.java"}, "test_case": {"identifier": "testGenerate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate() throws IOException {\n        AdaptiveClassCodeGenerator generator = new AdaptiveClassCodeGenerator(HasAdaptiveExt.class, \"adaptive\");\n        String value = generator.generate();\n        URL url = getClass().getResource(\"/org/apache/dubbo/common/extension/adaptive/HasAdaptiveExt$Adaptive\");\n        try (InputStream inputStream = url.openStream()) {\n            String content = IOUtils.read(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n            // in Windows platform content get from resource contains \\r delimiter\n            content = content.replaceAll(\"\\r\",\"\");\n            assertTrue(content.contains(value));\n        }\n    }", "signature": "void testGenerate()", "full_signature": "@Test public void testGenerate()", "class_method_signature": "AdaptiveClassCodeGeneratorTest.testGenerate()", "testcase": true, "constructor": false, "invocations": ["generate", "getResource", "getClass", "openStream", "read", "replaceAll", "assertTrue", "contains"]}, "focal_class": {"identifier": "AdaptiveClassCodeGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AdaptiveClassCodeGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AdaptiveClassCodeGenerator.class)", "var_name": "logger"}, {"original_string": "private static final String CLASSNAME_INVOCATION = \"org.apache.dubbo.rpc.Invocation\";", "modifier": "private static final", "type": "String", "declarator": "CLASSNAME_INVOCATION = \"org.apache.dubbo.rpc.Invocation\"", "var_name": "CLASSNAME_INVOCATION"}, {"original_string": "private static final String CODE_PACKAGE = \"package %s;\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_PACKAGE = \"package %s;\\n\"", "var_name": "CODE_PACKAGE"}, {"original_string": "private static final String CODE_IMPORTS = \"import %s;\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_IMPORTS = \"import %s;\\n\"", "var_name": "CODE_IMPORTS"}, {"original_string": "private static final String CODE_CLASS_DECLARATION = \"public class %s$Adaptive implements %s {\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_CLASS_DECLARATION = \"public class %s$Adaptive implements %s {\\n\"", "var_name": "CODE_CLASS_DECLARATION"}, {"original_string": "private static final String CODE_METHOD_DECLARATION = \"public %s %s(%s) %s {\\n%s}\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_METHOD_DECLARATION = \"public %s %s(%s) %s {\\n%s}\\n\"", "var_name": "CODE_METHOD_DECLARATION"}, {"original_string": "private static final String CODE_METHOD_ARGUMENT = \"%s arg%d\";", "modifier": "private static final", "type": "String", "declarator": "CODE_METHOD_ARGUMENT = \"%s arg%d\"", "var_name": "CODE_METHOD_ARGUMENT"}, {"original_string": "private static final String CODE_METHOD_THROWS = \"throws %s\";", "modifier": "private static final", "type": "String", "declarator": "CODE_METHOD_THROWS = \"throws %s\"", "var_name": "CODE_METHOD_THROWS"}, {"original_string": "private static final String CODE_UNSUPPORTED = \"throw new UnsupportedOperationException(\\\"The method %s of interface %s is not adaptive method!\\\");\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_UNSUPPORTED = \"throw new UnsupportedOperationException(\\\"The method %s of interface %s is not adaptive method!\\\");\\n\"", "var_name": "CODE_UNSUPPORTED"}, {"original_string": "private static final String CODE_URL_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"url == null\\\");\\n%s url = arg%d;\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_URL_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"url == null\\\");\\n%s url = arg%d;\\n\"", "var_name": "CODE_URL_NULL_CHECK"}, {"original_string": "private static final String CODE_EXT_NAME_ASSIGNMENT = \"String extName = %s;\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_EXT_NAME_ASSIGNMENT = \"String extName = %s;\\n\"", "var_name": "CODE_EXT_NAME_ASSIGNMENT"}, {"original_string": "private static final String CODE_EXT_NAME_NULL_CHECK = \"if(extName == null) \"\n                    + \"throw new IllegalStateException(\\\"Failed to get extension (%s) name from url (\\\" + url.toString() + \\\") use keys(%s)\\\");\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_EXT_NAME_NULL_CHECK = \"if(extName == null) \"\n                    + \"throw new IllegalStateException(\\\"Failed to get extension (%s) name from url (\\\" + url.toString() + \\\") use keys(%s)\\\");\\n\"", "var_name": "CODE_EXT_NAME_NULL_CHECK"}, {"original_string": "private static final String CODE_INVOCATION_ARGUMENT_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\"); \"\n                    + \"String methodName = arg%d.getMethodName();\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_INVOCATION_ARGUMENT_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\"); \"\n                    + \"String methodName = arg%d.getMethodName();\\n\"", "var_name": "CODE_INVOCATION_ARGUMENT_NULL_CHECK"}, {"original_string": "private static final String CODE_EXTENSION_ASSIGNMENT = \"%s extension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\\n\";", "modifier": "private static final", "type": "String", "declarator": "CODE_EXTENSION_ASSIGNMENT = \"%s extension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\\n\"", "var_name": "CODE_EXTENSION_ASSIGNMENT"}, {"original_string": "private static final String CODE_EXTENSION_METHOD_INVOKE_ARGUMENT = \"arg%d\";", "modifier": "private static final", "type": "String", "declarator": "CODE_EXTENSION_METHOD_INVOKE_ARGUMENT = \"arg%d\"", "var_name": "CODE_EXTENSION_METHOD_INVOKE_ARGUMENT"}, {"original_string": "private final Class<?> type;", "modifier": "private final", "type": "Class<?>", "declarator": "type", "var_name": "type"}, {"original_string": "private String defaultExtName;", "modifier": "private", "type": "String", "declarator": "defaultExtName", "var_name": "defaultExtName"}], "methods": [{"identifier": "AdaptiveClassCodeGenerator", "parameters": "(Class<?> type, String defaultExtName)", "modifiers": "public", "return": "", "signature": " AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName)", "full_signature": "public  AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName)", "class_method_signature": "AdaptiveClassCodeGenerator.AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName)", "testcase": false, "constructor": true}, {"identifier": "hasAdaptiveMethod", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasAdaptiveMethod()", "full_signature": "private boolean hasAdaptiveMethod()", "class_method_signature": "AdaptiveClassCodeGenerator.hasAdaptiveMethod()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generate()", "full_signature": "public String generate()", "class_method_signature": "AdaptiveClassCodeGenerator.generate()", "testcase": false, "constructor": false}, {"identifier": "generatePackageInfo", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generatePackageInfo()", "full_signature": "private String generatePackageInfo()", "class_method_signature": "AdaptiveClassCodeGenerator.generatePackageInfo()", "testcase": false, "constructor": false}, {"identifier": "generateImports", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateImports()", "full_signature": "private String generateImports()", "class_method_signature": "AdaptiveClassCodeGenerator.generateImports()", "testcase": false, "constructor": false}, {"identifier": "generateClassDeclaration", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateClassDeclaration()", "full_signature": "private String generateClassDeclaration()", "class_method_signature": "AdaptiveClassCodeGenerator.generateClassDeclaration()", "testcase": false, "constructor": false}, {"identifier": "generateUnsupported", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateUnsupported(Method method)", "full_signature": "private String generateUnsupported(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateUnsupported(Method method)", "testcase": false, "constructor": false}, {"identifier": "getUrlTypeIndex", "parameters": "(Method method)", "modifiers": "private", "return": "int", "signature": "int getUrlTypeIndex(Method method)", "full_signature": "private int getUrlTypeIndex(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.getUrlTypeIndex(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateMethod", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateMethod(Method method)", "full_signature": "private String generateMethod(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateMethodArguments", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateMethodArguments(Method method)", "full_signature": "private String generateMethodArguments(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateMethodArguments(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateMethodThrows", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateMethodThrows(Method method)", "full_signature": "private String generateMethodThrows(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateMethodThrows(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateUrlNullCheck", "parameters": "(int index)", "modifiers": "private", "return": "String", "signature": "String generateUrlNullCheck(int index)", "full_signature": "private String generateUrlNullCheck(int index)", "class_method_signature": "AdaptiveClassCodeGenerator.generateUrlNullCheck(int index)", "testcase": false, "constructor": false}, {"identifier": "generateMethodContent", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateMethodContent(Method method)", "full_signature": "private String generateMethodContent(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateMethodContent(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateExtNameNullCheck", "parameters": "(String[] value)", "modifiers": "private", "return": "String", "signature": "String generateExtNameNullCheck(String[] value)", "full_signature": "private String generateExtNameNullCheck(String[] value)", "class_method_signature": "AdaptiveClassCodeGenerator.generateExtNameNullCheck(String[] value)", "testcase": false, "constructor": false}, {"identifier": "generateExtNameAssignment", "parameters": "(String[] value, boolean hasInvocation)", "modifiers": "private", "return": "String", "signature": "String generateExtNameAssignment(String[] value, boolean hasInvocation)", "full_signature": "private String generateExtNameAssignment(String[] value, boolean hasInvocation)", "class_method_signature": "AdaptiveClassCodeGenerator.generateExtNameAssignment(String[] value, boolean hasInvocation)", "testcase": false, "constructor": false}, {"identifier": "generateExtensionAssignment", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String generateExtensionAssignment()", "full_signature": "private String generateExtensionAssignment()", "class_method_signature": "AdaptiveClassCodeGenerator.generateExtensionAssignment()", "testcase": false, "constructor": false}, {"identifier": "generateReturnAndInvocation", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateReturnAndInvocation(Method method)", "full_signature": "private String generateReturnAndInvocation(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateReturnAndInvocation(Method method)", "testcase": false, "constructor": false}, {"identifier": "hasInvocationArgument", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean hasInvocationArgument(Method method)", "full_signature": "private boolean hasInvocationArgument(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.hasInvocationArgument(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateInvocationArgumentNullCheck", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateInvocationArgumentNullCheck(Method method)", "full_signature": "private String generateInvocationArgumentNullCheck(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateInvocationArgumentNullCheck(Method method)", "testcase": false, "constructor": false}, {"identifier": "getMethodAdaptiveValue", "parameters": "(Adaptive adaptiveAnnotation)", "modifiers": "private", "return": "String[]", "signature": "String[] getMethodAdaptiveValue(Adaptive adaptiveAnnotation)", "full_signature": "private String[] getMethodAdaptiveValue(Adaptive adaptiveAnnotation)", "class_method_signature": "AdaptiveClassCodeGenerator.getMethodAdaptiveValue(Adaptive adaptiveAnnotation)", "testcase": false, "constructor": false}, {"identifier": "generateUrlAssignmentIndirectly", "parameters": "(Method method)", "modifiers": "private", "return": "String", "signature": "String generateUrlAssignmentIndirectly(Method method)", "full_signature": "private String generateUrlAssignmentIndirectly(Method method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateUrlAssignmentIndirectly(Method method)", "testcase": false, "constructor": false}, {"identifier": "generateGetUrlNullCheck", "parameters": "(int index, Class<?> type, String method)", "modifiers": "private", "return": "String", "signature": "String generateGetUrlNullCheck(int index, Class<?> type, String method)", "full_signature": "private String generateGetUrlNullCheck(int index, Class<?> type, String method)", "class_method_signature": "AdaptiveClassCodeGenerator.generateGetUrlNullCheck(int index, Class<?> type, String method)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String generate() {\n        // no need to generate adaptive class since there's no adaptive method found.\n        if (!hasAdaptiveMethod()) {\n            throw new IllegalStateException(\"No adaptive method exist on extension \" + type.getName() + \", refuse to create the adaptive class!\");\n        }\n\n        StringBuilder code = new StringBuilder();\n        code.append(generatePackageInfo());\n        code.append(generateImports());\n        code.append(generateClassDeclaration());\n\n        Method[] methods = type.getMethods();\n        for (Method method : methods) {\n            code.append(generateMethod(method));\n        }\n        code.append(\"}\");\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(code.toString());\n        }\n        return code.toString();\n    }", "signature": "String generate()", "full_signature": "public String generate()", "class_method_signature": "AdaptiveClassCodeGenerator.generate()", "testcase": false, "constructor": false, "invocations": ["hasAdaptiveMethod", "getName", "append", "generatePackageInfo", "append", "generateImports", "append", "generateClassDeclaration", "getMethods", "append", "generateMethod", "append", "isDebugEnabled", "debug", "toString", "toString"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}