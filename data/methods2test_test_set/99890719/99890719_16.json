{"test_class": {"identifier": "WeightRankingStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final JUnitRuleMockery context = new JUnitRuleMockery();", "modifier": "@Rule\n    public final", "type": "JUnitRuleMockery", "declarator": "context = new JUnitRuleMockery()", "var_name": "context"}], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/ranking/WeightRankingStrategyTest.java"}, "test_case": {"identifier": "ranksViolationsWithSameConfidenceByTargetName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ranksViolationsWithSameConfidenceByTargetName() {\n        Overlap violation1 = someOverlap(somePattern(), someAUG(\"target-b\"));\n        Overlap violation2 = someOverlap(somePattern(), someAUG(\"target-a\"));\n        Overlap violation3 = someOverlap(somePattern(), someAUG(\"target-c\"));\n\n        Overlaps overlaps = new Overlaps();\n        overlaps.addViolation(violation1);\n        overlaps.addViolation(violation2);\n        overlaps.addViolation(violation3);\n\n        Model model = context.mock(Model.class);\n\n        ViolationWeightFunction weightFunction = context.mock(ViolationWeightFunction.class);\n        context.checking(new Expectations() {{\n            allowing(weightFunction).getWeight(with(any(Overlap.class)), with(same(overlaps)), with(same(model))); will(returnValue(1.0));\n            allowing(weightFunction).getFormula(with(any(Overlap.class)), with(same(overlaps)), with(same(model))); will(returnValue(\"1\"));\n        }});\n\n        ViolationRankingStrategy strategy = new WeightRankingStrategy(weightFunction);\n        final List<Violation> violations = strategy.rankViolations(overlaps, model);\n\n        assertThat(violations, contains(\n                new Violation(violation2, 1.0, \"1\"),\n                new Violation(violation1, 1.0, \"1\"),\n                new Violation(violation3, 1.0, \"1\")));\n    }", "signature": "void ranksViolationsWithSameConfidenceByTargetName()", "full_signature": "@Test public void ranksViolationsWithSameConfidenceByTargetName()", "class_method_signature": "WeightRankingStrategyTest.ranksViolationsWithSameConfidenceByTargetName()", "testcase": true, "constructor": false, "invocations": ["someOverlap", "somePattern", "someAUG", "someOverlap", "somePattern", "someAUG", "someOverlap", "somePattern", "someAUG", "addViolation", "addViolation", "addViolation", "mock", "mock", "checking", "getWeight", "allowing", "with", "any", "with", "same", "with", "same", "will", "returnValue", "getFormula", "allowing", "with", "any", "with", "same", "with", "same", "will", "returnValue", "rankViolations", "assertThat", "contains"]}, "focal_class": {"identifier": "WeightRankingStrategy", "superclass": "", "interfaces": "implements ViolationRankingStrategy", "fields": [{"original_string": "private final Comparator<Violation> VIOLATION_COMPARATOR = Comparator\n            .comparingDouble(Violation::getConfidence).reversed()\n            .thenComparing(v -> v.getLocation().getMethodSignature());", "modifier": "private final", "type": "Comparator<Violation>", "declarator": "VIOLATION_COMPARATOR = Comparator\n            .comparingDouble(Violation::getConfidence).reversed()\n            .thenComparing(v -> v.getLocation().getMethodSignature())", "var_name": "VIOLATION_COMPARATOR"}, {"original_string": "private ViolationWeightFunction weightFunction;", "modifier": "private", "type": "ViolationWeightFunction", "declarator": "weightFunction", "var_name": "weightFunction"}], "methods": [{"identifier": "WeightRankingStrategy", "parameters": "(ViolationWeightFunction weightFunction)", "modifiers": "public", "return": "", "signature": " WeightRankingStrategy(ViolationWeightFunction weightFunction)", "full_signature": "public  WeightRankingStrategy(ViolationWeightFunction weightFunction)", "class_method_signature": "WeightRankingStrategy.WeightRankingStrategy(ViolationWeightFunction weightFunction)", "testcase": false, "constructor": true}, {"identifier": "rankViolations", "parameters": "(Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "List<Violation>", "signature": "List<Violation> rankViolations(Overlaps overlaps, Model model)", "full_signature": "@Override public List<Violation> rankViolations(Overlaps overlaps, Model model)", "class_method_signature": "WeightRankingStrategy.rankViolations(Overlaps overlaps, Model model)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(PriorityQueue<Violation> violations)", "modifiers": "private", "return": "List<Violation>", "signature": "List<Violation> toList(PriorityQueue<Violation> violations)", "full_signature": "private List<Violation> toList(PriorityQueue<Violation> violations)", "class_method_signature": "WeightRankingStrategy.toList(PriorityQueue<Violation> violations)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/ranking/WeightRankingStrategy.java"}, "focal_method": {"identifier": "rankViolations", "parameters": "(Overlaps overlaps, Model model)", "modifiers": "@Override public", "return": "List<Violation>", "body": "@Override\n    public List<Violation> rankViolations(Overlaps overlaps, Model model) {\n        PriorityQueue<Violation> violations = new PriorityQueue<>(VIOLATION_COMPARATOR);\n        for (Overlap violation : overlaps.getViolations()) {\n            double confidence = weightFunction.getWeight(violation, overlaps, model);\n            String confidenceString = weightFunction.getFormula(violation, overlaps, model);\n            violations.add(new Violation(violation, confidence, confidenceString));\n        }\n        return toList(violations);\n    }", "signature": "List<Violation> rankViolations(Overlaps overlaps, Model model)", "full_signature": "@Override public List<Violation> rankViolations(Overlaps overlaps, Model model)", "class_method_signature": "WeightRankingStrategy.rankViolations(Overlaps overlaps, Model model)", "testcase": false, "constructor": false, "invocations": ["getViolations", "getWeight", "getFormula", "add", "toList"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}