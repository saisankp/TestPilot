{"test_class": {"identifier": "BilinearInterpolatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/BilinearInterpolatorTest.java"}, "test_case": {"identifier": "testSquareWithTriangleData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSquareWithTriangleData() {\n        float NO_DATA = -99.0f;\n\n        float[][] input = new float[2][2];\n        input[0][0] = 0;\n        input[0][1] = NO_DATA;\n        input[1][0] = 10;\n        input[1][1] = 20;\n\n        BilinearInterpolator interp = new BilinearInterpolator(input, NO_DATA);\n        float[][] output = interp.interpolate(10, 10, true);\n        printGrid(output);\n\n        //assertTrue(isMonotonicTriangle(output, 0, 0, 10, 10, true, NO_DATA));\n        assertTrue(isMonotonic(output, NO_DATA));\n    }", "signature": "void testSquareWithTriangleData()", "full_signature": "@Test public void testSquareWithTriangleData()", "class_method_signature": "BilinearInterpolatorTest.testSquareWithTriangleData()", "testcase": true, "constructor": false, "invocations": ["interpolate", "printGrid", "assertTrue", "isMonotonic"]}, "focal_class": {"identifier": "BilinearInterpolator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float NULL_NO_DATA = Float.NaN;", "modifier": "private static final", "type": "float", "declarator": "NULL_NO_DATA = Float.NaN", "var_name": "NULL_NO_DATA"}, {"original_string": "private final float[][] src;", "modifier": "private final", "type": "float[][]", "declarator": "src", "var_name": "src"}, {"original_string": "private float noDataValue = NULL_NO_DATA;", "modifier": "private", "type": "float", "declarator": "noDataValue = NULL_NO_DATA", "var_name": "noDataValue"}], "methods": [{"identifier": "BilinearInterpolator", "parameters": "(final float[][] src)", "modifiers": "public", "return": "", "signature": " BilinearInterpolator(final float[][] src)", "full_signature": "public  BilinearInterpolator(final float[][] src)", "class_method_signature": "BilinearInterpolator.BilinearInterpolator(final float[][] src)", "testcase": false, "constructor": true}, {"identifier": "BilinearInterpolator", "parameters": "(final float[][] src, final float noDataValue)", "modifiers": "public", "return": "", "signature": " BilinearInterpolator(final float[][] src, final float noDataValue)", "full_signature": "public  BilinearInterpolator(final float[][] src, final float noDataValue)", "class_method_signature": "BilinearInterpolator.BilinearInterpolator(final float[][] src, final float noDataValue)", "testcase": false, "constructor": true}, {"identifier": "interpolate", "parameters": "(final int width, final int height, boolean smoothBoundary)", "modifiers": "public", "return": "float[][]", "signature": "float[][] interpolate(final int width, final int height, boolean smoothBoundary)", "full_signature": "public float[][] interpolate(final int width, final int height, boolean smoothBoundary)", "class_method_signature": "BilinearInterpolator.interpolate(final int width, final int height, boolean smoothBoundary)", "testcase": false, "constructor": false}, {"identifier": "interpolateBoundaryCell", "parameters": "(float xfrac, float yfrac, float v00, float v10, float v01, float v11)", "modifiers": "private", "return": "float", "signature": "float interpolateBoundaryCell(float xfrac, float yfrac, float v00, float v10, float v01, float v11)", "full_signature": "private float interpolateBoundaryCell(float xfrac, float yfrac, float v00, float v10, float v01, float v11)", "class_method_signature": "BilinearInterpolator.interpolateBoundaryCell(float xfrac, float yfrac, float v00, float v10, float v01, float v11)", "testcase": false, "constructor": false}, {"identifier": "interpolateBoundaryCellNorm", "parameters": "(float xfrac, float yfrac, float v00, float v10, float v01)", "modifiers": "private", "return": "float", "signature": "float interpolateBoundaryCellNorm(float xfrac, float yfrac, float v00, float v10, float v01)", "full_signature": "private float interpolateBoundaryCellNorm(float xfrac, float yfrac, float v00, float v10, float v01)", "class_method_signature": "BilinearInterpolator.interpolateBoundaryCellNorm(float xfrac, float yfrac, float v00, float v10, float v01)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/BilinearInterpolator.java"}, "focal_method": {"identifier": "interpolate", "parameters": "(final int width, final int height, boolean smoothBoundary)", "modifiers": "public", "return": "float[][]", "body": "public float[][] interpolate(final int width, final int height, boolean smoothBoundary)\n    {\n        int srcWidth = src.length;\n        int srcHeight = src[0].length;\n        \n        float[][] dest = new float[width][height];\n        \n        float xRatio = ((float) srcWidth - 1) / width ;\n        float yRatio = ((float) srcHeight - 1) / height ;\n\n        for (int i = 0; i < width; i++) {\n            for (int j = 0; j < height; j++) {\n                float x = i * xRatio;\n                float y = j * yRatio;\n                int ix = (int) x;\n                int iy = (int) y;\n                float xfrac = x - ix;\n                float yfrac = y - iy;\n\n                float val;\n                \n                if (ix < srcWidth - 1 && iy < srcHeight - 1) {\n                    // interpolate if src cell is in grid\n                    float v00 = src[ix][iy];\n                    float v10 = src[ix + 1][iy];\n                    float v01 = src[ix][iy + 1];\n                    float v11 = src[ix + 1][iy + 1];\n                    if (v00 == noDataValue \n                            || v10 == noDataValue\n                            || v01 == noDataValue\n                            || v11 == noDataValue) {\n                        // handle src cell with NO_DATA value(s)\n                        if (smoothBoundary) {\n                            val = interpolateBoundaryCell(xfrac, yfrac, v00, v10, v01, v11);\n                        }\n                        else {\n                            val = noDataValue;\n                        }\n                    }\n                    else {\n                        // All src cell corners have values\n                        // Compute bilinear interpolation over the src cell\n                        val = ( v00*(1-xfrac)*(1-yfrac) +  v10*(xfrac)*(1-yfrac) +\n                                v01*(yfrac)*(1-xfrac)   +  v11*(xfrac*yfrac)\n                                ) ;\n                    }\n                }\n                else {\n                    // dest index at edge of grid\n                    val = src[ix][iy];\n                }\n                dest[i][j] = val;\n            }\n        }\n        return dest;\n    }", "signature": "float[][] interpolate(final int width, final int height, boolean smoothBoundary)", "full_signature": "public float[][] interpolate(final int width, final int height, boolean smoothBoundary)", "class_method_signature": "BilinearInterpolator.interpolate(final int width, final int height, boolean smoothBoundary)", "testcase": false, "constructor": false, "invocations": ["interpolateBoundaryCell"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}