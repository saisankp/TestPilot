{"test_class": {"identifier": "MetadataServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\") + \"/eumw-test-directory\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\") + \"/eumw-test-directory\"", "var_name": "JAVA_IO_TMPDIR"}, {"original_string": "private static String tempDirectory;", "modifier": "private static", "type": "String", "declarator": "tempDirectory", "var_name": "tempDirectory"}, {"original_string": "@Mock\n  BuildProperties buildProperties;", "modifier": "@Mock", "type": "BuildProperties", "declarator": "buildProperties", "var_name": "buildProperties"}, {"original_string": "@Mock\n  HSMServiceHolder hsmServiceHolder;", "modifier": "@Mock", "type": "HSMServiceHolder", "declarator": "hsmServiceHolder", "var_name": "hsmServiceHolder"}, {"original_string": "ConfigHolder configHolder;", "modifier": "", "type": "ConfigHolder", "declarator": "configHolder", "var_name": "configHolder"}, {"original_string": "MetadataService metadataService;", "modifier": "", "type": "MetadataService", "declarator": "metadataService", "var_name": "metadataService"}], "file": "eidas-middleware/src/test/java/de/governikus/eumw/eidasmiddleware/MetadataServiceImplTest.java"}, "test_case": {"identifier": "whenGetMetadataCalledExpectMetadataByteArray", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void whenGetMetadataCalledExpectMetadataByteArray()\n  {\n    Security.addProvider(new BouncyCastleProvider());\n    Mockito.when(buildProperties.getVersion()).thenReturn(\"2.0\");\n    byte[] metadata = metadataService.getMetadata();\n    String metadataAsString = new String(metadata);\n\n    Assertions.assertTrue(ArrayUtils.isNotEmpty(metadata));\n    Assertions.assertTrue(metadataAsString.contains(\"CONTACT_PERSON_COMPANY\"));\n    Assertions.assertTrue(metadataAsString.contains(\"CONTACT_PERSON_EMAIL\"));\n    Assertions.assertTrue(metadataAsString.contains(\"CONTACT_PERSON_GIVENNAME\"));\n    Assertions.assertTrue(metadataAsString.contains(\"CONTACT_PERSON_TEL\"));\n    Assertions.assertTrue(metadataAsString.contains(\"http://localhost:8080/eidas-middleware/Metadata\"));\n    Assertions.assertTrue(metadataAsString.contains(\"ORGANIZATION_DISPLAY_NAME\"));\n    Assertions.assertTrue(metadataAsString.contains(\"http://localhost:8080/eidas-middleware/RequestReceiver\"));\n    Assertions.assertTrue(new String(metadata).contains(\"2.0\"));\n  }", "signature": "void whenGetMetadataCalledExpectMetadataByteArray()", "full_signature": "@Test void whenGetMetadataCalledExpectMetadataByteArray()", "class_method_signature": "MetadataServiceImplTest.whenGetMetadataCalledExpectMetadataByteArray()", "testcase": true, "constructor": false, "invocations": ["addProvider", "thenReturn", "when", "getVersion", "getMetadata", "assertTrue", "isNotEmpty", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "MetadataServiceImpl", "superclass": "", "interfaces": "implements MetadataService", "fields": [{"original_string": "private final HSMServiceHolder hsmServiceHolder;", "modifier": "private final", "type": "HSMServiceHolder", "declarator": "hsmServiceHolder", "var_name": "hsmServiceHolder"}, {"original_string": "private final ConfigHolder configHolder;", "modifier": "private final", "type": "ConfigHolder", "declarator": "configHolder", "var_name": "configHolder"}, {"original_string": "private final BuildProperties buildProperties;", "modifier": "private final", "type": "BuildProperties", "declarator": "buildProperties", "var_name": "buildProperties"}], "methods": [{"identifier": "MetadataServiceImpl", "parameters": "(ConfigHolder configHolder,\n                             BuildProperties buildProperties,\n                             HSMServiceHolder hsmServiceHolder)", "modifiers": "public", "return": "", "signature": " MetadataServiceImpl(ConfigHolder configHolder,\n                             BuildProperties buildProperties,\n                             HSMServiceHolder hsmServiceHolder)", "full_signature": "public  MetadataServiceImpl(ConfigHolder configHolder,\n                             BuildProperties buildProperties,\n                             HSMServiceHolder hsmServiceHolder)", "class_method_signature": "MetadataServiceImpl.MetadataServiceImpl(ConfigHolder configHolder,\n                             BuildProperties buildProperties,\n                             HSMServiceHolder hsmServiceHolder)", "testcase": false, "constructor": true}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getMetadata()", "full_signature": "@Override public byte[] getMetadata()", "class_method_signature": "MetadataServiceImpl.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "getEidasSigner", "parameters": "()", "modifiers": "private", "return": "EidasSigner", "signature": "EidasSigner getEidasSigner()", "full_signature": "private EidasSigner getEidasSigner()", "class_method_signature": "MetadataServiceImpl.getEidasSigner()", "testcase": false, "constructor": false}], "file": "eidas-middleware/src/main/java/de/governikus/eumw/eidasmiddleware/MetadataServiceImpl.java"}, "focal_method": {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] getMetadata()\n  {\n    ArrayList<EidasPersonAttributes> list = new ArrayList<>();\n    list.add(EidasNaturalPersonAttributes.FAMILY_NAME);\n    list.add(EidasNaturalPersonAttributes.FIRST_NAME);\n    list.add(EidasNaturalPersonAttributes.CURRENT_ADDRESS);\n    list.add(EidasNaturalPersonAttributes.PERSON_IDENTIFIER);\n    list.add(EidasNaturalPersonAttributes.BIRTH_NAME);\n    list.add(EidasNaturalPersonAttributes.PLACE_OF_BIRTH);\n    list.add(EidasNaturalPersonAttributes.DATE_OF_BIRTH);\n\n    List<EidasNameIdType> supportedNameIdTypes = new ArrayList<>();\n    supportedNameIdTypes.add(EidasNameIdType.PERSISTENT);\n    supportedNameIdTypes.add(EidasNameIdType.TRANSIENT);\n    supportedNameIdTypes.add(EidasNameIdType.UNSPECIFIED);\n    try\n    {\n      EidasSigner signer = getEidasSigner();\n\n      Date validUntil;\n      if (configHolder.getMetadataValidity() == null)\n      {\n        // 86400000 milliseconds per day\n        validUntil = new Date(System.currentTimeMillis() + 30L * 86400000L);\n      }\n      else\n      {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        sdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        validUntil = sdf.parse(configHolder.getMetadataValidity());\n      }\n      String middlewareVersion = buildProperties.getVersion();\n      boolean requesterIdFlag = true;\n      return EidasSaml.createMetaDataService(\"_eumiddleware\",\n                                             configHolder.getServerURLWithContextPath()\n                                                              + ContextPaths.METADATA,\n                                             validUntil,\n                                             signer.getSigCert(),\n                                             configHolder.getDecryptionCert(),\n                                             configHolder.getOrganization(),\n                                             configHolder.getContactPerson(),\n                                             configHolder.getContactPerson(),\n                                             configHolder.getServerURLWithContextPath()\n                                                                              + ContextPaths.REQUEST_RECEIVER,\n                                             configHolder.getServerURLWithContextPath() + ContextPaths.REQUEST_RECEIVER,\n                                             supportedNameIdTypes,\n                                             list,\n                                             signer,\n                                             middlewareVersion,\n                                             configHolder.isDoSignMetadata(),\n                                             requesterIdFlag);\n    }\n    catch (ParseException | CertificateEncodingException | MarshallingException | SignatureException\n      | TransformerFactoryConfigurationError | TransformerException | InitializationException | IOException\n      | UnrecoverableKeyException | KeyStoreException | NoSuchAlgorithmException e)\n    {\n      log.error(\"Cannot create metadata for this middleware\", e);\n    }\n    return ArrayUtils.EMPTY_BYTE_ARRAY;\n  }", "signature": "byte[] getMetadata()", "full_signature": "@Override public byte[] getMetadata()", "class_method_signature": "MetadataServiceImpl.getMetadata()", "testcase": false, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getEidasSigner", "getMetadataValidity", "currentTimeMillis", "setTimeZone", "getTimeZone", "parse", "getMetadataValidity", "getVersion", "createMetaDataService", "getServerURLWithContextPath", "getSigCert", "getDecryptionCert", "getOrganization", "getContactPerson", "getContactPerson", "getServerURLWithContextPath", "getServerURLWithContextPath", "isDoSignMetadata", "error"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}