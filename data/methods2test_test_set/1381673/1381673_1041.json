{"test_class": {"identifier": "BooleanConditionInspectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final boolean value1;", "modifier": "private final", "type": "boolean", "declarator": "value1", "var_name": "value1"}, {"original_string": "private final boolean value2;", "modifier": "private final", "type": "boolean", "declarator": "value2", "var_name": "value2"}, {"original_string": "private final String operator1;", "modifier": "private final", "type": "String", "declarator": "operator1", "var_name": "operator1"}, {"original_string": "private final String operator2;", "modifier": "private final", "type": "String", "declarator": "operator2", "var_name": "operator2"}, {"original_string": "private final boolean conflictExpected;", "modifier": "private final", "type": "boolean", "declarator": "conflictExpected", "var_name": "conflictExpected"}, {"original_string": "private final Field field;", "modifier": "private final", "type": "Field", "declarator": "field", "var_name": "field"}], "file": "drools-verifier/drools-verifier-core/src/test/java/org/drools/verifier/core/cache/inspectors/condition/BooleanConditionInspectorTest.java"}, "test_case": {"identifier": "parametrizedOverlapTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parametrizedOverlapTest() {\n        BooleanConditionInspector a = getCondition(value1, operator1);\n        BooleanConditionInspector b = getCondition(value2, operator2);\n\n        assertEquals(getAssertDescription(a, b, !conflictExpected, \"overlap\"), !conflictExpected, a.overlaps(b));\n        assertEquals(getAssertDescription(b, a, !conflictExpected, \"overlap\"), !conflictExpected, b.overlaps(a));\n    }", "signature": "void parametrizedOverlapTest()", "full_signature": "@Test public void parametrizedOverlapTest()", "class_method_signature": "BooleanConditionInspectorTest.parametrizedOverlapTest()", "testcase": true, "constructor": false, "invocations": ["getCondition", "getCondition", "assertEquals", "getAssertDescription", "overlaps", "assertEquals", "getAssertDescription", "overlaps"]}, "focal_class": {"identifier": "BooleanConditionInspector", "superclass": "extends ComparableConditionInspector", "interfaces": "", "fields": [], "methods": [{"identifier": "BooleanConditionInspector", "parameters": "(final FieldCondition<Boolean> fieldCondition,\n                                     final AnalyzerConfiguration configuration)", "modifiers": "public", "return": "", "signature": " BooleanConditionInspector(final FieldCondition<Boolean> fieldCondition,\n                                     final AnalyzerConfiguration configuration)", "full_signature": "public  BooleanConditionInspector(final FieldCondition<Boolean> fieldCondition,\n                                     final AnalyzerConfiguration configuration)", "class_method_signature": "BooleanConditionInspector.BooleanConditionInspector(final FieldCondition<Boolean> fieldCondition,\n                                     final AnalyzerConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "isRedundant", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRedundant(final Object other)", "full_signature": "@Override public boolean isRedundant(final Object other)", "class_method_signature": "BooleanConditionInspector.isRedundant(final Object other)", "testcase": false, "constructor": false}, {"identifier": "conflicts", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean conflicts(final Object other)", "full_signature": "@Override public boolean conflicts(final Object other)", "class_method_signature": "BooleanConditionInspector.conflicts(final Object other)", "testcase": false, "constructor": false}, {"identifier": "overlaps", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean overlaps(final Object other)", "full_signature": "@Override public boolean overlaps(final Object other)", "class_method_signature": "BooleanConditionInspector.overlaps(final Object other)", "testcase": false, "constructor": false}, {"identifier": "subsumes", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean subsumes(final Object other)", "full_signature": "@Override public boolean subsumes(final Object other)", "class_method_signature": "BooleanConditionInspector.subsumes(final Object other)", "testcase": false, "constructor": false}, {"identifier": "toHumanReadableString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toHumanReadableString()", "full_signature": "@Override public String toHumanReadableString()", "class_method_signature": "BooleanConditionInspector.toHumanReadableString()", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/condition/BooleanConditionInspector.java"}, "focal_method": {"identifier": "overlaps", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean overlaps(final Object other) {\n        return isRedundant(other);\n    }", "signature": "boolean overlaps(final Object other)", "full_signature": "@Override public boolean overlaps(final Object other)", "class_method_signature": "BooleanConditionInspector.overlaps(final Object other)", "testcase": false, "constructor": false, "invocations": ["isRedundant"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}