{"test_class": {"identifier": "AffinityGroupServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    AffinityGroupServiceImpl _affinityService;", "modifier": "@Inject", "type": "AffinityGroupServiceImpl", "declarator": "_affinityService", "var_name": "_affinityService"}, {"original_string": "@Inject\n    AccountManager _acctMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_acctMgr", "var_name": "_acctMgr"}, {"original_string": "@Inject\n    AffinityGroupProcessor _processor;", "modifier": "@Inject", "type": "AffinityGroupProcessor", "declarator": "_processor", "var_name": "_processor"}, {"original_string": "@Inject\n    AffinityGroupDao _groupDao;", "modifier": "@Inject", "type": "AffinityGroupDao", "declarator": "_groupDao", "var_name": "_groupDao"}, {"original_string": "@Inject\n    UserVmDao _vmDao;", "modifier": "@Inject", "type": "UserVmDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Inject\n    AffinityGroupVMMapDao _affinityGroupVMMapDao;", "modifier": "@Inject", "type": "AffinityGroupVMMapDao", "declarator": "_affinityGroupVMMapDao", "var_name": "_affinityGroupVMMapDao"}, {"original_string": "@Inject\n    AffinityGroupDao _affinityGroupDao;", "modifier": "@Inject", "type": "AffinityGroupDao", "declarator": "_affinityGroupDao", "var_name": "_affinityGroupDao"}, {"original_string": "@Inject\n    ActionEventUtils _eventUtils;", "modifier": "@Inject", "type": "ActionEventUtils", "declarator": "_eventUtils", "var_name": "_eventUtils"}, {"original_string": "@Inject\n    AccountDao _accountDao;", "modifier": "@Inject", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Inject\n    ProjectDao _projectDao;", "modifier": "@Inject", "type": "ProjectDao", "declarator": "_projectDao", "var_name": "_projectDao"}, {"original_string": "@Inject\n    EventDao _eventDao;", "modifier": "@Inject", "type": "EventDao", "declarator": "_eventDao", "var_name": "_eventDao"}, {"original_string": "@Inject\n    DedicatedResourceDao _dedicatedDao;", "modifier": "@Inject", "type": "DedicatedResourceDao", "declarator": "_dedicatedDao", "var_name": "_dedicatedDao"}, {"original_string": "private static final long DOMAIN_ID = 5L;", "modifier": "private static final", "type": "long", "declarator": "DOMAIN_ID = 5L", "var_name": "DOMAIN_ID"}, {"original_string": "private static final long PROJECT_ID = 10L;", "modifier": "private static final", "type": "long", "declarator": "PROJECT_ID = 10L", "var_name": "PROJECT_ID"}, {"original_string": "private static final String ACCOUNT_NAME = \"user\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_NAME = \"user\"", "var_name": "ACCOUNT_NAME"}, {"original_string": "private static final String AFFINITY_GROUP_NAME = \"group1\";", "modifier": "private static final", "type": "String", "declarator": "AFFINITY_GROUP_NAME = \"group1\"", "var_name": "AFFINITY_GROUP_NAME"}, {"original_string": "private AccountVO acct;", "modifier": "private", "type": "AccountVO", "declarator": "acct", "var_name": "acct"}], "file": "server/src/test/java/org/apache/cloudstack/affinity/AffinityGroupServiceImplTest.java"}, "test_case": {"identifier": "deleteAffinityGroupNullIdName", "parameters": "()", "modifiers": "@Test(expected = InvalidParameterValueException.class) public", "return": "void", "body": "@Test(expected = InvalidParameterValueException.class)\n    public void deleteAffinityGroupNullIdName() throws ResourceInUseException {\n        when(_acctMgr.finalizeOwner((Account)anyObject(), anyString(), anyLong(), anyLong())).thenReturn(acct);\n        _affinityService.deleteAffinityGroup(null, ACCOUNT_NAME, null, DOMAIN_ID, null);\n    }", "signature": "void deleteAffinityGroupNullIdName()", "full_signature": "@Test(expected = InvalidParameterValueException.class) public void deleteAffinityGroupNullIdName()", "class_method_signature": "AffinityGroupServiceImplTest.deleteAffinityGroupNullIdName()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "finalizeOwner", "anyObject", "anyString", "anyLong", "anyLong", "deleteAffinityGroup"]}, "focal_class": {"identifier": "AffinityGroupServiceImpl", "superclass": "extends ManagerBase", "interfaces": "implements AffinityGroupService, Manager, StateListener<State, VirtualMachine.Event, VirtualMachine>", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(AffinityGroupServiceImpl.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(AffinityGroupServiceImpl.class)", "var_name": "s_logger"}, {"original_string": "private String _name;", "modifier": "private", "type": "String", "declarator": "_name", "var_name": "_name"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    AffinityGroupDao _affinityGroupDao;", "modifier": "@Inject", "type": "AffinityGroupDao", "declarator": "_affinityGroupDao", "var_name": "_affinityGroupDao"}, {"original_string": "@Inject\n    AffinityGroupVMMapDao _affinityGroupVMMapDao;", "modifier": "@Inject", "type": "AffinityGroupVMMapDao", "declarator": "_affinityGroupVMMapDao", "var_name": "_affinityGroupVMMapDao"}, {"original_string": "@Inject\n    AffinityGroupDomainMapDao _affinityGroupDomainMapDao;", "modifier": "@Inject", "type": "AffinityGroupDomainMapDao", "declarator": "_affinityGroupDomainMapDao", "var_name": "_affinityGroupDomainMapDao"}, {"original_string": "@Inject\n    private UserVmDao _userVmDao;", "modifier": "@Inject\n    private", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    DomainDao _domainDao;", "modifier": "@Inject", "type": "DomainDao", "declarator": "_domainDao", "var_name": "_domainDao"}, {"original_string": "@Inject\n    DomainManager _domainMgr;", "modifier": "@Inject", "type": "DomainManager", "declarator": "_domainMgr", "var_name": "_domainMgr"}, {"original_string": "@Inject\n    MessageBus _messageBus;", "modifier": "@Inject", "type": "MessageBus", "declarator": "_messageBus", "var_name": "_messageBus"}, {"original_string": "protected List<AffinityGroupProcessor> _affinityProcessors;", "modifier": "protected", "type": "List<AffinityGroupProcessor>", "declarator": "_affinityProcessors", "var_name": "_affinityProcessors"}], "methods": [{"identifier": "getAffinityGroupProcessors", "parameters": "()", "modifiers": "public", "return": "List<AffinityGroupProcessor>", "signature": "List<AffinityGroupProcessor> getAffinityGroupProcessors()", "full_signature": "public List<AffinityGroupProcessor> getAffinityGroupProcessors()", "class_method_signature": "AffinityGroupServiceImpl.getAffinityGroupProcessors()", "testcase": false, "constructor": false}, {"identifier": "setAffinityGroupProcessors", "parameters": "(List<AffinityGroupProcessor> affinityProcessors)", "modifiers": "public", "return": "void", "signature": "void setAffinityGroupProcessors(List<AffinityGroupProcessor> affinityProcessors)", "full_signature": "public void setAffinityGroupProcessors(List<AffinityGroupProcessor> affinityProcessors)", "class_method_signature": "AffinityGroupServiceImpl.setAffinityGroupProcessors(List<AffinityGroupProcessor> affinityProcessors)", "testcase": false, "constructor": false}, {"identifier": "createAffinityGroup", "parameters": "(CreateAffinityGroupCmd createAffinityGroupCmd)", "modifiers": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_CREATE, eventDescription = \"Creating Affinity Group\", create = true) public", "return": "AffinityGroup", "signature": "AffinityGroup createAffinityGroup(CreateAffinityGroupCmd createAffinityGroupCmd)", "full_signature": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_CREATE, eventDescription = \"Creating Affinity Group\", create = true) public AffinityGroup createAffinityGroup(CreateAffinityGroupCmd createAffinityGroupCmd)", "class_method_signature": "AffinityGroupServiceImpl.createAffinityGroup(CreateAffinityGroupCmd createAffinityGroupCmd)", "testcase": false, "constructor": false}, {"identifier": "createAffinityGroup", "parameters": "(final String accountName, final Long projectId, final Long domainId, final String affinityGroupName, final String affinityGroupType,\n        final String description)", "modifiers": "@DB @Override public", "return": "AffinityGroup", "signature": "AffinityGroup createAffinityGroup(final String accountName, final Long projectId, final Long domainId, final String affinityGroupName, final String affinityGroupType,\n        final String description)", "full_signature": "@DB @Override public AffinityGroup createAffinityGroup(final String accountName, final Long projectId, final Long domainId, final String affinityGroupName, final String affinityGroupType,\n        final String description)", "class_method_signature": "AffinityGroupServiceImpl.createAffinityGroup(final String accountName, final Long projectId, final Long domainId, final String affinityGroupName, final String affinityGroupType,\n        final String description)", "testcase": false, "constructor": false}, {"identifier": "verifyAccessToDomainWideProcessor", "parameters": "(Account caller, AffinityGroupProcessor processor)", "modifiers": "private", "return": "void", "signature": "void verifyAccessToDomainWideProcessor(Account caller, AffinityGroupProcessor processor)", "full_signature": "private void verifyAccessToDomainWideProcessor(Account caller, AffinityGroupProcessor processor)", "class_method_signature": "AffinityGroupServiceImpl.verifyAccessToDomainWideProcessor(Account caller, AffinityGroupProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "createAffinityGroup", "parameters": "(final AffinityGroupProcessor processor, final Account owner, final ACLType aclType, final String affinityGroupName, final String affinityGroupType, final String description)", "modifiers": "private", "return": "AffinityGroupVO", "signature": "AffinityGroupVO createAffinityGroup(final AffinityGroupProcessor processor, final Account owner, final ACLType aclType, final String affinityGroupName, final String affinityGroupType, final String description)", "full_signature": "private AffinityGroupVO createAffinityGroup(final AffinityGroupProcessor processor, final Account owner, final ACLType aclType, final String affinityGroupName, final String affinityGroupType, final String description)", "class_method_signature": "AffinityGroupServiceImpl.createAffinityGroup(final AffinityGroupProcessor processor, final Account owner, final ACLType aclType, final String affinityGroupName, final String affinityGroupType, final String description)", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "(Long domainId)", "modifiers": "private", "return": "DomainVO", "signature": "DomainVO getDomain(Long domainId)", "full_signature": "private DomainVO getDomain(Long domainId)", "class_method_signature": "AffinityGroupServiceImpl.getDomain(Long domainId)", "testcase": false, "constructor": false}, {"identifier": "verifyAffinityGroupNameInUse", "parameters": "(long accountId, long domainId, String affinityGroupName)", "modifiers": "private", "return": "void", "signature": "void verifyAffinityGroupNameInUse(long accountId, long domainId, String affinityGroupName)", "full_signature": "private void verifyAffinityGroupNameInUse(long accountId, long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.verifyAffinityGroupNameInUse(long accountId, long domainId, String affinityGroupName)", "testcase": false, "constructor": false}, {"identifier": "verifyDomainLevelAffinityGroupName", "parameters": "(boolean domainLevel, long domainId, String affinityGroupName)", "modifiers": "private", "return": "void", "signature": "void verifyDomainLevelAffinityGroupName(boolean domainLevel, long domainId, String affinityGroupName)", "full_signature": "private void verifyDomainLevelAffinityGroupName(boolean domainLevel, long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.verifyDomainLevelAffinityGroupName(boolean domainLevel, long domainId, String affinityGroupName)", "testcase": false, "constructor": false}, {"identifier": "deleteAffinityGroup", "parameters": "(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "modifiers": "@DB @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_DELETE, eventDescription = \"Deleting affinity group\") public", "return": "boolean", "signature": "boolean deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "full_signature": "@DB @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_DELETE, eventDescription = \"Deleting affinity group\") public boolean deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "testcase": false, "constructor": false}, {"identifier": "getAffinityGroup", "parameters": "(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "modifiers": "private", "return": "AffinityGroupVO", "signature": "AffinityGroupVO getAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "full_signature": "private AffinityGroupVO getAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.getAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "testcase": false, "constructor": false}, {"identifier": "getAffinityGroupByName", "parameters": "(String account, Long projectId, Long domainId, String affinityGroupName)", "modifiers": "private", "return": "AffinityGroupVO", "signature": "AffinityGroupVO getAffinityGroupByName(String account, Long projectId, Long domainId, String affinityGroupName)", "full_signature": "private AffinityGroupVO getAffinityGroupByName(String account, Long projectId, Long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.getAffinityGroupByName(String account, Long projectId, Long domainId, String affinityGroupName)", "testcase": false, "constructor": false}, {"identifier": "deleteAffinityGroup", "parameters": "(final Long affinityGroupId)", "modifiers": "private", "return": "void", "signature": "void deleteAffinityGroup(final Long affinityGroupId)", "full_signature": "private void deleteAffinityGroup(final Long affinityGroupId)", "class_method_signature": "AffinityGroupServiceImpl.deleteAffinityGroup(final Long affinityGroupId)", "testcase": false, "constructor": false}, {"identifier": "listAffinityGroupTypes", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> listAffinityGroupTypes()", "full_signature": "@Override public List<String> listAffinityGroupTypes()", "class_method_signature": "AffinityGroupServiceImpl.listAffinityGroupTypes()", "testcase": false, "constructor": false}, {"identifier": "getAffinityTypeToProcessorMap", "parameters": "()", "modifiers": "protected", "return": "Map<String, AffinityGroupProcessor>", "signature": "Map<String, AffinityGroupProcessor> getAffinityTypeToProcessorMap()", "full_signature": "protected Map<String, AffinityGroupProcessor> getAffinityTypeToProcessorMap()", "class_method_signature": "AffinityGroupServiceImpl.getAffinityTypeToProcessorMap()", "testcase": false, "constructor": false}, {"identifier": "isAdminControlledGroup", "parameters": "(AffinityGroup group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAdminControlledGroup(AffinityGroup group)", "full_signature": "@Override public boolean isAdminControlledGroup(AffinityGroup group)", "class_method_signature": "AffinityGroupServiceImpl.isAdminControlledGroup(AffinityGroup group)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "AffinityGroupServiceImpl.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "AffinityGroupServiceImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "AffinityGroupServiceImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AffinityGroupServiceImpl.getName()", "testcase": false, "constructor": false}, {"identifier": "getAffinityGroup", "parameters": "(Long groupId)", "modifiers": "@Override public", "return": "AffinityGroup", "signature": "AffinityGroup getAffinityGroup(Long groupId)", "full_signature": "@Override public AffinityGroup getAffinityGroup(Long groupId)", "class_method_signature": "AffinityGroupServiceImpl.getAffinityGroup(Long groupId)", "testcase": false, "constructor": false}, {"identifier": "preStateTransitionEvent", "parameters": "(State oldState, Event event, State newState, VirtualMachine vo, boolean status, Object opaque)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean preStateTransitionEvent(State oldState, Event event, State newState, VirtualMachine vo, boolean status, Object opaque)", "full_signature": "@Override public boolean preStateTransitionEvent(State oldState, Event event, State newState, VirtualMachine vo, boolean status, Object opaque)", "class_method_signature": "AffinityGroupServiceImpl.preStateTransitionEvent(State oldState, Event event, State newState, VirtualMachine vo, boolean status, Object opaque)", "testcase": false, "constructor": false}, {"identifier": "postStateTransitionEvent", "parameters": "(StateMachine2.Transition<State, Event> transition, VirtualMachine vo, boolean status, Object opaque)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean postStateTransitionEvent(StateMachine2.Transition<State, Event> transition, VirtualMachine vo, boolean status, Object opaque)", "full_signature": "@Override public boolean postStateTransitionEvent(StateMachine2.Transition<State, Event> transition, VirtualMachine vo, boolean status, Object opaque)", "class_method_signature": "AffinityGroupServiceImpl.postStateTransitionEvent(StateMachine2.Transition<State, Event> transition, VirtualMachine vo, boolean status, Object opaque)", "testcase": false, "constructor": false}, {"identifier": "updateVMAffinityGroups", "parameters": "(Long vmId, List<Long> affinityGroupIds)", "modifiers": "@Override public", "return": "UserVm", "signature": "UserVm updateVMAffinityGroups(Long vmId, List<Long> affinityGroupIds)", "full_signature": "@Override public UserVm updateVMAffinityGroups(Long vmId, List<Long> affinityGroupIds)", "class_method_signature": "AffinityGroupServiceImpl.updateVMAffinityGroups(Long vmId, List<Long> affinityGroupIds)", "testcase": false, "constructor": false}, {"identifier": "isAffinityGroupProcessorAvailable", "parameters": "(String affinityGroupType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAffinityGroupProcessorAvailable(String affinityGroupType)", "full_signature": "@Override public boolean isAffinityGroupProcessorAvailable(String affinityGroupType)", "class_method_signature": "AffinityGroupServiceImpl.isAffinityGroupProcessorAvailable(String affinityGroupType)", "testcase": false, "constructor": false}, {"identifier": "getAffinityGroupProcessorForType", "parameters": "(String affinityGroupType)", "modifiers": "private", "return": "AffinityGroupProcessor", "signature": "AffinityGroupProcessor getAffinityGroupProcessorForType(String affinityGroupType)", "full_signature": "private AffinityGroupProcessor getAffinityGroupProcessorForType(String affinityGroupType)", "class_method_signature": "AffinityGroupServiceImpl.getAffinityGroupProcessorForType(String affinityGroupType)", "testcase": false, "constructor": false}, {"identifier": "isAffinityGroupAvailableInDomain", "parameters": "(long affinityGroupId, long domainId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAffinityGroupAvailableInDomain(long affinityGroupId, long domainId)", "full_signature": "@Override public boolean isAffinityGroupAvailableInDomain(long affinityGroupId, long domainId)", "class_method_signature": "AffinityGroupServiceImpl.isAffinityGroupAvailableInDomain(long affinityGroupId, long domainId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/cloudstack/affinity/AffinityGroupServiceImpl.java"}, "focal_method": {"identifier": "deleteAffinityGroup", "parameters": "(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "modifiers": "@DB @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_DELETE, eventDescription = \"Deleting affinity group\") public", "return": "boolean", "body": "@DB\n    @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_DELETE, eventDescription = \"Deleting affinity group\")\n    public boolean deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName) {\n\n        AffinityGroupVO group = getAffinityGroup(affinityGroupId, account, projectId, domainId, affinityGroupName);\n\n        // check permissions\n        Account caller = CallContext.current().getCallingAccount();\n        _accountMgr.checkAccess(caller, AccessType.OperateEntry, true, group);\n\n        final Long affinityGroupIdFinal = group.getId();\n        deleteAffinityGroup(affinityGroupIdFinal);\n\n        // remove its related ACL permission\n        Pair<Class<?>, Long> params = new Pair<Class<?>, Long>(AffinityGroup.class, affinityGroupIdFinal);\n        _messageBus.publish(_name, EntityManager.MESSAGE_REMOVE_ENTITY_EVENT, PublishScope.LOCAL, params);\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Deleted affinity group id=\" + affinityGroupIdFinal);\n        }\n        return true;\n    }", "signature": "boolean deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "full_signature": "@DB @ActionEvent(eventType = EventTypes.EVENT_AFFINITY_GROUP_DELETE, eventDescription = \"Deleting affinity group\") public boolean deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "class_method_signature": "AffinityGroupServiceImpl.deleteAffinityGroup(Long affinityGroupId, String account, Long projectId, Long domainId, String affinityGroupName)", "testcase": false, "constructor": false, "invocations": ["getAffinityGroup", "getCallingAccount", "current", "checkAccess", "getId", "deleteAffinityGroup", "publish", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}