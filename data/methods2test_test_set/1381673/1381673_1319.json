{"test_class": {"identifier": "ExpressionFunctionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static List<Supplier<Expression>> supportedExpressionSupplier;", "modifier": "final static", "type": "List<Supplier<Expression>>", "declarator": "supportedExpressionSupplier", "var_name": "supportedExpressionSupplier"}, {"original_string": "final static List<Supplier<Expression>> unsupportedExpressionSupplier;", "modifier": "final static", "type": "List<Supplier<Expression>>", "declarator": "unsupportedExpressionSupplier", "var_name": "unsupportedExpressionSupplier"}, {"original_string": "final static Supplier<Constant> constantSupplier = () -> {\n        Constant toReturn = new Constant();\n        toReturn.setDataType(DataType.DOUBLE);\n        toReturn.setValue(34.6);\n        return toReturn;\n    };", "modifier": "final static", "type": "Supplier<Constant>", "declarator": "constantSupplier = () -> {\n        Constant toReturn = new Constant();\n        toReturn.setDataType(DataType.DOUBLE);\n        toReturn.setValue(34.6);\n        return toReturn;\n    }", "var_name": "constantSupplier"}, {"original_string": "final static Supplier<FieldRef> fieldRefSupplier = () -> new FieldRef(FieldName.create(\"FIELD_REF\"));", "modifier": "final static", "type": "Supplier<FieldRef>", "declarator": "fieldRefSupplier = () -> new FieldRef(FieldName.create(\"FIELD_REF\"))", "var_name": "fieldRefSupplier"}, {"original_string": "final static Supplier<Apply> applySupplier = () -> {\n        Constant constant = constantSupplier.get();\n        FieldRef fieldRef = fieldRefSupplier.get();\n        String functionName = \"FUNCTION_NAME\";\n        Apply toReturn = new Apply();\n        toReturn.addExpressions(constant, fieldRef);\n        toReturn.setFunction(functionName);\n        return toReturn;\n    };", "modifier": "final static", "type": "Supplier<Apply>", "declarator": "applySupplier = () -> {\n        Constant constant = constantSupplier.get();\n        FieldRef fieldRef = fieldRefSupplier.get();\n        String functionName = \"FUNCTION_NAME\";\n        Apply toReturn = new Apply();\n        toReturn.addExpressions(constant, fieldRef);\n        toReturn.setFunction(functionName);\n        return toReturn;\n    }", "var_name": "applySupplier"}, {"original_string": "final static ClassOrInterfaceType OBJECT_CLASS = parseClassOrInterfaceType(Object.class.getName());", "modifier": "final static", "type": "ClassOrInterfaceType", "declarator": "OBJECT_CLASS = parseClassOrInterfaceType(Object.class.getName())", "var_name": "OBJECT_CLASS"}, {"original_string": "final static ClassOrInterfaceType DOUBLE_CLASS = parseClassOrInterfaceType(Double.class.getName());", "modifier": "final static", "type": "ClassOrInterfaceType", "declarator": "DOUBLE_CLASS = parseClassOrInterfaceType(Double.class.getName())", "var_name": "DOUBLE_CLASS"}, {"original_string": "final static ClassOrInterfaceType STRING_CLASS = parseClassOrInterfaceType(String.class.getName());", "modifier": "final static", "type": "ClassOrInterfaceType", "declarator": "STRING_CLASS = parseClassOrInterfaceType(String.class.getName())", "var_name": "STRING_CLASS"}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtilsTest.java"}, "test_case": {"identifier": "getExpressionBlockStmtSupportedExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExpressionBlockStmtSupportedExpression() {\n        for (Supplier<Expression> supplier : supportedExpressionSupplier) {\n            Expression expression = supplier.get();\n            try {\n                ExpressionFunctionUtils.getExpressionBlockStmt(\"variableName\", expression,\n                                                               parseClassOrInterfaceType(Object.class.getName()),\n                                                               DEFAULT_PARAMETERTYPE_MAP);\n            } catch (Exception e) {\n                fail(String.format(\"Unexpected %s for %s\", e, expression.getClass()));\n            }\n        }\n    }", "signature": "void getExpressionBlockStmtSupportedExpression()", "full_signature": "@Test public void getExpressionBlockStmtSupportedExpression()", "class_method_signature": "ExpressionFunctionUtilsTest.getExpressionBlockStmtSupportedExpression()", "testcase": true, "constructor": false, "invocations": ["get", "getExpressionBlockStmt", "parseClassOrInterfaceType", "getName", "fail", "format", "getClass"]}, "focal_class": {"identifier": "ExpressionFunctionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\";", "modifier": "static final", "type": "String", "declarator": "KIEPMMLNAMEVALUE_LIST_PARAM = \"param1\"", "var_name": "KIEPMMLNAMEVALUE_LIST_PARAM"}, {"original_string": "static final String INNER_VARIABLE_NAME = \"variable%s%s%s\";", "modifier": "static final", "type": "String", "declarator": "INNER_VARIABLE_NAME = \"variable%s%s%s\"", "var_name": "INNER_VARIABLE_NAME"}, {"original_string": "static final LinkedHashMap<String, ClassOrInterfaceType> DEFAULT_PARAMETERTYPE_MAP;", "modifier": "static final", "type": "LinkedHashMap<String, ClassOrInterfaceType>", "declarator": "DEFAULT_PARAMETERTYPE_MAP", "var_name": "DEFAULT_PARAMETERTYPE_MAP"}, {"original_string": "static final FieldAccessExpr CONVERTER_TYPE_UTIL_FIELD_ACCESSOR_EXPR;", "modifier": "static final", "type": "FieldAccessExpr", "declarator": "CONVERTER_TYPE_UTIL_FIELD_ACCESSOR_EXPR", "var_name": "CONVERTER_TYPE_UTIL_FIELD_ACCESSOR_EXPR"}], "methods": [{"identifier": "ExpressionFunctionUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExpressionFunctionUtils()", "full_signature": "private  ExpressionFunctionUtils()", "class_method_signature": "ExpressionFunctionUtils.ExpressionFunctionUtils()", "testcase": false, "constructor": true}, {"identifier": "getAggregatedExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                      final Aggregate aggregate,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getAggregatedExpressionMethodDeclaration(final String methodName,\n                                                                      final Aggregate aggregate,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getAggregatedExpressionMethodDeclaration(final String methodName,\n                                                                      final Aggregate aggregate,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getAggregatedExpressionMethodDeclaration(final String methodName,\n                                                                      final Aggregate aggregate,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getApplyExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                 final Apply apply,\n                                                                 final ClassOrInterfaceType returnedType,\n                                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getApplyExpressionMethodDeclaration(final String methodName,\n                                                                 final Apply apply,\n                                                                 final ClassOrInterfaceType returnedType,\n                                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getApplyExpressionMethodDeclaration(final String methodName,\n                                                                 final Apply apply,\n                                                                 final ClassOrInterfaceType returnedType,\n                                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getApplyExpressionMethodDeclaration(final String methodName,\n                                                                 final Apply apply,\n                                                                 final ClassOrInterfaceType returnedType,\n                                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getConstantExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                    final Constant constant,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getConstantExpressionMethodDeclaration(final String methodName,\n                                                                    final Constant constant,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getConstantExpressionMethodDeclaration(final String methodName,\n                                                                    final Constant constant,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getConstantExpressionMethodDeclaration(final String methodName,\n                                                                    final Constant constant,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getDiscretizeExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                      final Discretize discretize,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getDiscretizeExpressionMethodDeclaration(final String methodName,\n                                                                      final Discretize discretize,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getDiscretizeExpressionMethodDeclaration(final String methodName,\n                                                                      final Discretize discretize,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getDiscretizeExpressionMethodDeclaration(final String methodName,\n                                                                      final Discretize discretize,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getFieldRefExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                    final FieldRef fieldRef,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getFieldRefExpressionMethodDeclaration(final String methodName,\n                                                                    final FieldRef fieldRef,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getFieldRefExpressionMethodDeclaration(final String methodName,\n                                                                    final FieldRef fieldRef,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getFieldRefExpressionMethodDeclaration(final String methodName,\n                                                                    final FieldRef fieldRef,\n                                                                    final ClassOrInterfaceType returnedType,\n                                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getLagExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                               final Lag lag,\n                                                               final ClassOrInterfaceType returnedType,\n                                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getLagExpressionMethodDeclaration(final String methodName,\n                                                               final Lag lag,\n                                                               final ClassOrInterfaceType returnedType,\n                                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getLagExpressionMethodDeclaration(final String methodName,\n                                                               final Lag lag,\n                                                               final ClassOrInterfaceType returnedType,\n                                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getLagExpressionMethodDeclaration(final String methodName,\n                                                               final Lag lag,\n                                                               final ClassOrInterfaceType returnedType,\n                                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getMapValuesExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                     final MapValues mapValues,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getMapValuesExpressionMethodDeclaration(final String methodName,\n                                                                     final MapValues mapValues,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getMapValuesExpressionMethodDeclaration(final String methodName,\n                                                                     final MapValues mapValues,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getMapValuesExpressionMethodDeclaration(final String methodName,\n                                                                     final MapValues mapValues,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getNormContinuousExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                          final NormContinuous normContinuous,\n                                                                          final ClassOrInterfaceType returnedType,\n                                                                          final LinkedHashMap<String,\n                                                                                  ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getNormContinuousExpressionMethodDeclaration(final String methodName,\n                                                                          final NormContinuous normContinuous,\n                                                                          final ClassOrInterfaceType returnedType,\n                                                                          final LinkedHashMap<String,\n                                                                                  ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getNormContinuousExpressionMethodDeclaration(final String methodName,\n                                                                          final NormContinuous normContinuous,\n                                                                          final ClassOrInterfaceType returnedType,\n                                                                          final LinkedHashMap<String,\n                                                                                  ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getNormContinuousExpressionMethodDeclaration(final String methodName,\n                                                                          final NormContinuous normContinuous,\n                                                                          final ClassOrInterfaceType returnedType,\n                                                                          final LinkedHashMap<String,\n                                                                                  ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getNormDiscreteExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                        final NormDiscrete normDiscrete,\n                                                                        final ClassOrInterfaceType returnedType,\n                                                                        final LinkedHashMap<String,\n                                                                                ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getNormDiscreteExpressionMethodDeclaration(final String methodName,\n                                                                        final NormDiscrete normDiscrete,\n                                                                        final ClassOrInterfaceType returnedType,\n                                                                        final LinkedHashMap<String,\n                                                                                ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getNormDiscreteExpressionMethodDeclaration(final String methodName,\n                                                                        final NormDiscrete normDiscrete,\n                                                                        final ClassOrInterfaceType returnedType,\n                                                                        final LinkedHashMap<String,\n                                                                                ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getNormDiscreteExpressionMethodDeclaration(final String methodName,\n                                                                        final NormDiscrete normDiscrete,\n                                                                        final ClassOrInterfaceType returnedType,\n                                                                        final LinkedHashMap<String,\n                                                                                ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getTextIndexExpressionMethodDeclaration", "parameters": "(final String methodName,\n                                                                     final TextIndex textIndex,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getTextIndexExpressionMethodDeclaration(final String methodName,\n                                                                     final TextIndex textIndex,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getTextIndexExpressionMethodDeclaration(final String methodName,\n                                                                     final TextIndex textIndex,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getTextIndexExpressionMethodDeclaration(final String methodName,\n                                                                     final TextIndex textIndex,\n                                                                     final ClassOrInterfaceType returnedType,\n                                                                     final LinkedHashMap<String,\n                                                                             ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getExpressionBlockStmt", "parameters": "(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getAggregatedExpressionBlockStmt", "parameters": "(final String variableName,\n                                                      final Aggregate aggregate,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getAggregatedExpressionBlockStmt(final String variableName,\n                                                      final Aggregate aggregate,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getAggregatedExpressionBlockStmt(final String variableName,\n                                                      final Aggregate aggregate,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getAggregatedExpressionBlockStmt(final String variableName,\n                                                      final Aggregate aggregate,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getApplyExpressionBlockStmt", "parameters": "(final String variableName,\n                                                 final Apply apply,\n                                                 final ClassOrInterfaceType returnedType,\n                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getApplyExpressionBlockStmt(final String variableName,\n                                                 final Apply apply,\n                                                 final ClassOrInterfaceType returnedType,\n                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getApplyExpressionBlockStmt(final String variableName,\n                                                 final Apply apply,\n                                                 final ClassOrInterfaceType returnedType,\n                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getApplyExpressionBlockStmt(final String variableName,\n                                                 final Apply apply,\n                                                 final ClassOrInterfaceType returnedType,\n                                                 final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getConstantExpressionBlockStmt", "parameters": "(final String variableName,\n                                                    final Constant constant,\n                                                    final ClassOrInterfaceType returnedType,\n                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getConstantExpressionBlockStmt(final String variableName,\n                                                    final Constant constant,\n                                                    final ClassOrInterfaceType returnedType,\n                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getConstantExpressionBlockStmt(final String variableName,\n                                                    final Constant constant,\n                                                    final ClassOrInterfaceType returnedType,\n                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getConstantExpressionBlockStmt(final String variableName,\n                                                    final Constant constant,\n                                                    final ClassOrInterfaceType returnedType,\n                                                    final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getDiscretizeExpressionBlockStmt", "parameters": "(final String variableName,\n                                                      final Discretize discretize,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getDiscretizeExpressionBlockStmt(final String variableName,\n                                                      final Discretize discretize,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getDiscretizeExpressionBlockStmt(final String variableName,\n                                                      final Discretize discretize,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getDiscretizeExpressionBlockStmt(final String variableName,\n                                                      final Discretize discretize,\n                                                      final ClassOrInterfaceType returnedType,\n                                                      final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getFieldRefExpressionFromCommonDataBlockStmt", "parameters": "(final String variableName,\n                                                                  final FieldRef fieldRef,\n                                                                  final ClassOrInterfaceType returnedType,\n                                                                  final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getFieldRefExpressionFromCommonDataBlockStmt(final String variableName,\n                                                                  final FieldRef fieldRef,\n                                                                  final ClassOrInterfaceType returnedType,\n                                                                  final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getFieldRefExpressionFromCommonDataBlockStmt(final String variableName,\n                                                                  final FieldRef fieldRef,\n                                                                  final ClassOrInterfaceType returnedType,\n                                                                  final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getFieldRefExpressionFromCommonDataBlockStmt(final String variableName,\n                                                                  final FieldRef fieldRef,\n                                                                  final ClassOrInterfaceType returnedType,\n                                                                  final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getFieldRefExpressionFromDefineFunctionBlockStmt", "parameters": "(final String variableName,\n                                                                      final FieldRef fieldRef,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getFieldRefExpressionFromDefineFunctionBlockStmt(final String variableName,\n                                                                      final FieldRef fieldRef,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getFieldRefExpressionFromDefineFunctionBlockStmt(final String variableName,\n                                                                      final FieldRef fieldRef,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getFieldRefExpressionFromDefineFunctionBlockStmt(final String variableName,\n                                                                      final FieldRef fieldRef,\n                                                                      final ClassOrInterfaceType returnedType,\n                                                                      final LinkedHashMap<String,\n                                                                              ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getLagExpressionBlockStmt", "parameters": "(final String variableName,\n                                               final Lag lag,\n                                               final ClassOrInterfaceType returnedType,\n                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getLagExpressionBlockStmt(final String variableName,\n                                               final Lag lag,\n                                               final ClassOrInterfaceType returnedType,\n                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getLagExpressionBlockStmt(final String variableName,\n                                               final Lag lag,\n                                               final ClassOrInterfaceType returnedType,\n                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getLagExpressionBlockStmt(final String variableName,\n                                               final Lag lag,\n                                               final ClassOrInterfaceType returnedType,\n                                               final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getMapValuesExpressionBlockStmt", "parameters": "(final String variableName,\n                                                     final MapValues mapValues,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getMapValuesExpressionBlockStmt(final String variableName,\n                                                     final MapValues mapValues,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getMapValuesExpressionBlockStmt(final String variableName,\n                                                     final MapValues mapValues,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getMapValuesExpressionBlockStmt(final String variableName,\n                                                     final MapValues mapValues,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getNormContinuousExpressionBlockStmt", "parameters": "(final String variableName,\n                                                          final NormContinuous normContinuous,\n                                                          final ClassOrInterfaceType returnedType,\n                                                          final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getNormContinuousExpressionBlockStmt(final String variableName,\n                                                          final NormContinuous normContinuous,\n                                                          final ClassOrInterfaceType returnedType,\n                                                          final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getNormContinuousExpressionBlockStmt(final String variableName,\n                                                          final NormContinuous normContinuous,\n                                                          final ClassOrInterfaceType returnedType,\n                                                          final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getNormContinuousExpressionBlockStmt(final String variableName,\n                                                          final NormContinuous normContinuous,\n                                                          final ClassOrInterfaceType returnedType,\n                                                          final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getNormDiscreteExpressionBlockStmt", "parameters": "(final String variableName,\n                                                        final NormDiscrete normDiscrete,\n                                                        final ClassOrInterfaceType returnedType,\n                                                        final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getNormDiscreteExpressionBlockStmt(final String variableName,\n                                                        final NormDiscrete normDiscrete,\n                                                        final ClassOrInterfaceType returnedType,\n                                                        final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getNormDiscreteExpressionBlockStmt(final String variableName,\n                                                        final NormDiscrete normDiscrete,\n                                                        final ClassOrInterfaceType returnedType,\n                                                        final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getNormDiscreteExpressionBlockStmt(final String variableName,\n                                                        final NormDiscrete normDiscrete,\n                                                        final ClassOrInterfaceType returnedType,\n                                                        final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getTextIndexExpressionBlockStmt", "parameters": "(final String variableName,\n                                                     final TextIndex textIndex,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "signature": "BlockStmt getTextIndexExpressionBlockStmt(final String variableName,\n                                                     final TextIndex textIndex,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getTextIndexExpressionBlockStmt(final String variableName,\n                                                     final TextIndex textIndex,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getTextIndexExpressionBlockStmt(final String variableName,\n                                                     final TextIndex textIndex,\n                                                     final ClassOrInterfaceType returnedType,\n                                                     final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getExpressionMethodDeclaration", "parameters": "(final String methodName, final String variableName,\n                                                            final BlockStmt body,\n                                                            final ClassOrInterfaceType returnedType,\n                                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "MethodDeclaration", "signature": "MethodDeclaration getExpressionMethodDeclaration(final String methodName, final String variableName,\n                                                            final BlockStmt body,\n                                                            final ClassOrInterfaceType returnedType,\n                                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static MethodDeclaration getExpressionMethodDeclaration(final String methodName, final String variableName,\n                                                            final BlockStmt body,\n                                                            final ClassOrInterfaceType returnedType,\n                                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getExpressionMethodDeclaration(final String methodName, final String variableName,\n                                                            final BlockStmt body,\n                                                            final ClassOrInterfaceType returnedType,\n                                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ExpressionFunctionUtils.java"}, "focal_method": {"identifier": "getExpressionBlockStmt", "parameters": "(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "static", "return": "BlockStmt", "body": "static BlockStmt getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap) {\n        if (expression instanceof Aggregate) {\n            return getAggregatedExpressionBlockStmt(variableName, (Aggregate) expression, returnedType,\n                                                    parameterNameTypeMap);\n        } else if (expression instanceof Apply) {\n            return getApplyExpressionBlockStmt(variableName, (Apply) expression, returnedType, parameterNameTypeMap);\n        } else if (expression instanceof Constant) {\n            return getConstantExpressionBlockStmt(variableName, (Constant) expression, returnedType,\n                                                  parameterNameTypeMap);\n        } else if (expression instanceof Discretize) {\n            return getDiscretizeExpressionBlockStmt(variableName, (Discretize) expression, returnedType,\n                                                    parameterNameTypeMap);\n        } else if (expression instanceof FieldRef) {\n            if (parameterNameTypeMap.size() == 1) {\n                return getFieldRefExpressionFromCommonDataBlockStmt(variableName, (FieldRef) expression, returnedType,\n                                                                    parameterNameTypeMap);\n            } else {\n                return getFieldRefExpressionFromDefineFunctionBlockStmt(variableName, (FieldRef) expression, returnedType,\n                                                                    parameterNameTypeMap);\n            }\n        } else if (expression instanceof Lag) {\n            return getLagExpressionBlockStmt(variableName, (Lag) expression, returnedType, parameterNameTypeMap);\n        } else if (expression instanceof MapValues) {\n            return getMapValuesExpressionBlockStmt(variableName, (MapValues) expression, returnedType,\n                                                   parameterNameTypeMap);\n        } else if (expression instanceof NormContinuous) {\n            return getNormContinuousExpressionBlockStmt(variableName, (NormContinuous) expression, returnedType,\n                                                        parameterNameTypeMap);\n        } else if (expression instanceof NormDiscrete) {\n            return getNormDiscreteExpressionBlockStmt(variableName, (NormDiscrete) expression, returnedType,\n                                                      parameterNameTypeMap);\n        } else if (expression instanceof TextIndex) {\n            return getTextIndexExpressionBlockStmt(variableName, (TextIndex) expression, returnedType,\n                                                   parameterNameTypeMap);\n        } else {\n            throw new IllegalArgumentException(String.format(\"Expression %s not managed\", expression.getClass()));\n        }\n    }", "signature": "BlockStmt getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "static BlockStmt getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "ExpressionFunctionUtils.getExpressionBlockStmt(final String variableName,\n                                            final Expression expression,\n                                            final ClassOrInterfaceType returnedType,\n                                            final LinkedHashMap<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false, "invocations": ["getAggregatedExpressionBlockStmt", "getApplyExpressionBlockStmt", "getConstantExpressionBlockStmt", "getDiscretizeExpressionBlockStmt", "size", "getFieldRefExpressionFromCommonDataBlockStmt", "getFieldRefExpressionFromDefineFunctionBlockStmt", "getLagExpressionBlockStmt", "getMapValuesExpressionBlockStmt", "getNormContinuousExpressionBlockStmt", "getNormDiscreteExpressionBlockStmt", "getTextIndexExpressionBlockStmt", "format", "getClass"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}