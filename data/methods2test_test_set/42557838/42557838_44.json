{"test_class": {"identifier": "QueryStringParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/QueryStringParserTest.java"}, "test_case": {"identifier": "shouldParseIncompleteFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseIncompleteFields() throws MalformedInputException {\n        String data = \"=&param1=\"\n                + \"&&\"\n                + \"&param1=\"\n                + \"&param2=ABCD2\"\n                + \"&param3=ABC=DEF\"\n                + \"&param4=A%20B%20%3D%20%25%20*\";\n\n        Parser<Map<String, String>> parser = new QueryStringParser();\n        Map<String, String> parameters = parser.parse(data);\n\n        assertThat(parameters.size(), is(4));\n\n        assertThat(parameters.get(\"param1\"), is(\"\"));\n        assertThat(parameters.get(\"param2\"), is(\"ABCD2\"));\n        assertThat(parameters.get(\"param3\"), is(\"ABC=DEF\"));\n        assertThat(parameters.get(\"param4\"), is(\"A B = % *\"));\n    }", "signature": "void shouldParseIncompleteFields()", "full_signature": "@Test public void shouldParseIncompleteFields()", "class_method_signature": "QueryStringParserTest.shouldParseIncompleteFields()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "size", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "QueryStringParser", "superclass": "", "interfaces": "implements Parser<Map<String, String>>", "fields": [{"original_string": "private static final String PAIR_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PAIR_SEPARATOR = \"&\"", "var_name": "PAIR_SEPARATOR"}, {"original_string": "private static final String VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SEPARATOR = \"=\"", "var_name": "VALUE_SEPARATOR"}], "methods": [{"identifier": "parse", "parameters": "(final String queryString)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> parse(final String queryString)", "full_signature": "@Override public Map<String, String> parse(final String queryString)", "class_method_signature": "QueryStringParser.parse(final String queryString)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/QueryStringParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String queryString)", "modifiers": "@Override public", "return": "Map<String, String>", "body": "@Override\n    public Map<String, String> parse(final String queryString) throws MalformedInputException {\n        Map<String, String> parameters = new HashMap<>();\n        String[] queryParametersArray = queryString.split(PAIR_SEPARATOR);\n        for (int i = 0; i < queryParametersArray.length; i++) {\n            if (queryParametersArray[i].length() == 0) {\n                continue;\n            }\n\n            String[] parameterPair = queryParametersArray[i].split(VALUE_SEPARATOR, 2);\n            if (parameterPair[0].length() == 0) {\n                continue;\n            }\n\n            if (parameterPair.length > 1) {\n                parameters.put(parameterPair[0], StringUtilities.urlDecode(parameterPair[1]));\n            }\n        }\n\n        return parameters;\n    }", "signature": "Map<String, String> parse(final String queryString)", "full_signature": "@Override public Map<String, String> parse(final String queryString)", "class_method_signature": "QueryStringParser.parse(final String queryString)", "testcase": false, "constructor": false, "invocations": ["split", "length", "split", "length", "put", "urlDecode"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}