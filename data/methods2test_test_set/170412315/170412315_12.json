{"test_class": {"identifier": "ConfigObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedLogEventsRule expectedLogEvents = new ExpectedLogEventsRule(Level.WARN);", "modifier": "@Rule\n    public", "type": "ExpectedLogEventsRule", "declarator": "expectedLogEvents = new ExpectedLogEventsRule(Level.WARN)", "var_name": "expectedLogEvents"}, {"original_string": "private final File directory = new File(\"target/test/dir-\" + UUID.randomUUID());", "modifier": "private final", "type": "File", "declarator": "directory = new File(\"target/test/dir-\" + UUID.randomUUID())", "var_name": "directory"}, {"original_string": "private final BlockingQueue<Instant> reloadTimes = new ArrayBlockingQueue<>(10);", "modifier": "private final", "type": "BlockingQueue<Instant>", "declarator": "reloadTimes = new ArrayBlockingQueue<>(10)", "var_name": "reloadTimes"}, {"original_string": "private final ConfigObserver observer = new ConfigObserver(directory, \"testApp\") {\n        @Override\n        public void updateConfiguration(Map<String, String> newConfiguration) {\n            super.updateConfiguration(newConfiguration);\n            try {\n                reloadTimes.put(Instant.now());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    };", "modifier": "private final", "type": "ConfigObserver", "declarator": "observer = new ConfigObserver(directory, \"testApp\") {\n        @Override\n        public void updateConfiguration(Map<String, String> newConfiguration) {\n            super.updateConfiguration(newConfiguration);\n            try {\n                reloadTimes.put(Instant.now());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }", "var_name": "observer"}, {"original_string": "private InetSocketAddress httpListenAddress;", "modifier": "private", "type": "InetSocketAddress", "declarator": "httpListenAddress", "var_name": "httpListenAddress"}, {"original_string": "private DummyDataSource dataSource;", "modifier": "private", "type": "DummyDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private Duration daemonPollingInterval;", "modifier": "private", "type": "Duration", "declarator": "daemonPollingInterval", "var_name": "daemonPollingInterval"}], "file": "action-controller/src/test/java/org/actioncontroller/config/ConfigObserverTest.java"}, "test_case": {"identifier": "shouldWatchForFileChanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWatchForFileChanges() {\n        writeConfigLines(\"my.dataSource.jdbcUrl=jdbc:datamastery:example\",\n            \"my.dataSource.jdbcUsername=sa\",\n            \"my.dataSource.jdbcPassword=\");\n        observer.onConfigChange(new DummyDataSourceConfigListener(\n                \"my.dataSource\",\n                dataSource -> this.dataSource = dataSource\n        ));\n        assertThat(dataSource).isEqualToComparingFieldByField(new DummyDataSource(\n                \"jdbc:datamastery:example\", \"sa\", \"\"\n        ));\n\n        dataSource = null;\n        writeConfigLine(\"otherConfig=something\");\n        assertThat(dataSource).isNull();\n\n        writeConfigLines(\"my.dataSource.jdbcUrl=jdbc:datamastery:UPDATED\",\n            \"my.dataSource.jdbcUsername=sa\",\n            \"my.dataSource.jdbcPassword=\");\n        assertThat(dataSource).isEqualToComparingFieldByField(new DummyDataSource(\n                \"jdbc:datamastery:UPDATED\", \"sa\", \"\"\n        ));\n    }", "signature": "void shouldWatchForFileChanges()", "full_signature": "@Test public void shouldWatchForFileChanges()", "class_method_signature": "ConfigObserverTest.shouldWatchForFileChanges()", "testcase": true, "constructor": false, "invocations": ["writeConfigLines", "onConfigChange", "isEqualToComparingFieldByField", "assertThat", "writeConfigLine", "isNull", "assertThat", "writeConfigLines", "isEqualToComparingFieldByField", "assertThat"]}, "focal_class": {"identifier": "ConfigObserver", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConfigObserver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConfigObserver.class)", "var_name": "logger"}, {"original_string": "private Map<String, String> currentConfiguration;", "modifier": "private", "type": "Map<String, String>", "declarator": "currentConfiguration", "var_name": "currentConfiguration"}, {"original_string": "private final List<ConfigListener> listeners = new ArrayList<>();", "modifier": "private final", "type": "List<ConfigListener>", "declarator": "listeners = new ArrayList<>()", "var_name": "listeners"}, {"original_string": "private final ConfigLoader configLoader;", "modifier": "private final", "type": "ConfigLoader", "declarator": "configLoader", "var_name": "configLoader"}], "methods": [{"identifier": "ConfigObserver", "parameters": "(String applicationName)", "modifiers": "public", "return": "", "signature": " ConfigObserver(String applicationName)", "full_signature": "public  ConfigObserver(String applicationName)", "class_method_signature": "ConfigObserver.ConfigObserver(String applicationName)", "testcase": false, "constructor": true}, {"identifier": "ConfigObserver", "parameters": "(File configDirectory, String applicationName)", "modifiers": "public", "return": "", "signature": " ConfigObserver(File configDirectory, String applicationName)", "full_signature": "public  ConfigObserver(File configDirectory, String applicationName)", "class_method_signature": "ConfigObserver.ConfigObserver(File configDirectory, String applicationName)", "testcase": false, "constructor": true}, {"identifier": "ConfigObserver", "parameters": "(File configDirectory, String applicationName, List<String> profiles)", "modifiers": "public", "return": "", "signature": " ConfigObserver(File configDirectory, String applicationName, List<String> profiles)", "full_signature": "public  ConfigObserver(File configDirectory, String applicationName, List<String> profiles)", "class_method_signature": "ConfigObserver.ConfigObserver(File configDirectory, String applicationName, List<String> profiles)", "testcase": false, "constructor": true}, {"identifier": "ConfigObserver", "parameters": "(ConfigLoader configLoader)", "modifiers": "public", "return": "", "signature": " ConfigObserver(ConfigLoader configLoader)", "full_signature": "public  ConfigObserver(ConfigLoader configLoader)", "class_method_signature": "ConfigObserver.ConfigObserver(ConfigLoader configLoader)", "testcase": false, "constructor": true}, {"identifier": "onConfigChange", "parameters": "(ConfigListener listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onConfigChange(ConfigListener listener)", "full_signature": "public ConfigObserver onConfigChange(ConfigListener listener)", "class_method_signature": "ConfigObserver.onConfigChange(ConfigListener listener)", "testcase": false, "constructor": false}, {"identifier": "onSingleConfigValue", "parameters": "(String key, Function<String, T> transformer, T defaultValue, ConfigValueListener<T> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onSingleConfigValue(String key, Function<String, T> transformer, T defaultValue, ConfigValueListener<T> listener)", "full_signature": "public ConfigObserver onSingleConfigValue(String key, Function<String, T> transformer, T defaultValue, ConfigValueListener<T> listener)", "class_method_signature": "ConfigObserver.onSingleConfigValue(String key, Function<String, T> transformer, T defaultValue, ConfigValueListener<T> listener)", "testcase": false, "constructor": false}, {"identifier": "onStringValue", "parameters": "(String key, String defaultValue, ConfigValueListener<String> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onStringValue(String key, String defaultValue, ConfigValueListener<String> listener)", "full_signature": "public ConfigObserver onStringValue(String key, String defaultValue, ConfigValueListener<String> listener)", "class_method_signature": "ConfigObserver.onStringValue(String key, String defaultValue, ConfigValueListener<String> listener)", "testcase": false, "constructor": false}, {"identifier": "onIntValue", "parameters": "(String key, int defaultValue, ConfigValueListener<Integer> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onIntValue(String key, int defaultValue, ConfigValueListener<Integer> listener)", "full_signature": "public ConfigObserver onIntValue(String key, int defaultValue, ConfigValueListener<Integer> listener)", "class_method_signature": "ConfigObserver.onIntValue(String key, int defaultValue, ConfigValueListener<Integer> listener)", "testcase": false, "constructor": false}, {"identifier": "onLongValue", "parameters": "(String key, long defaultValue, ConfigValueListener<Long> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onLongValue(String key, long defaultValue, ConfigValueListener<Long> listener)", "full_signature": "public ConfigObserver onLongValue(String key, long defaultValue, ConfigValueListener<Long> listener)", "class_method_signature": "ConfigObserver.onLongValue(String key, long defaultValue, ConfigValueListener<Long> listener)", "testcase": false, "constructor": false}, {"identifier": "onInetSocketAddress", "parameters": "(String key, int defaultPort, ConfigValueListener<InetSocketAddress> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onInetSocketAddress(String key, int defaultPort, ConfigValueListener<InetSocketAddress> listener)", "full_signature": "public ConfigObserver onInetSocketAddress(String key, int defaultPort, ConfigValueListener<InetSocketAddress> listener)", "class_method_signature": "ConfigObserver.onInetSocketAddress(String key, int defaultPort, ConfigValueListener<InetSocketAddress> listener)", "testcase": false, "constructor": false}, {"identifier": "onInetSocketAddress", "parameters": "(String key, InetSocketAddress defaultAddress, ConfigValueListener<InetSocketAddress> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onInetSocketAddress(String key, InetSocketAddress defaultAddress, ConfigValueListener<InetSocketAddress> listener)", "full_signature": "public ConfigObserver onInetSocketAddress(String key, InetSocketAddress defaultAddress, ConfigValueListener<InetSocketAddress> listener)", "class_method_signature": "ConfigObserver.onInetSocketAddress(String key, InetSocketAddress defaultAddress, ConfigValueListener<InetSocketAddress> listener)", "testcase": false, "constructor": false}, {"identifier": "onDurationValue", "parameters": "(String key, Duration defaultValue, ConfigValueListener<Duration> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onDurationValue(String key, Duration defaultValue, ConfigValueListener<Duration> listener)", "full_signature": "public ConfigObserver onDurationValue(String key, Duration defaultValue, ConfigValueListener<Duration> listener)", "class_method_signature": "ConfigObserver.onDurationValue(String key, Duration defaultValue, ConfigValueListener<Duration> listener)", "testcase": false, "constructor": false}, {"identifier": "onStringListValue", "parameters": "(String key, String defaultValue, ConfigValueListener<List<String>> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onStringListValue(String key, String defaultValue, ConfigValueListener<List<String>> listener)", "full_signature": "public ConfigObserver onStringListValue(String key, String defaultValue, ConfigValueListener<List<String>> listener)", "class_method_signature": "ConfigObserver.onStringListValue(String key, String defaultValue, ConfigValueListener<List<String>> listener)", "testcase": false, "constructor": false}, {"identifier": "onPrefixedValue", "parameters": "(String prefix, ConfigValueListener<Map<String, String>> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onPrefixedValue(String prefix, ConfigValueListener<Map<String, String>> listener)", "full_signature": "public ConfigObserver onPrefixedValue(String prefix, ConfigValueListener<Map<String, String>> listener)", "class_method_signature": "ConfigObserver.onPrefixedValue(String prefix, ConfigValueListener<Map<String, String>> listener)", "testcase": false, "constructor": false}, {"identifier": "onPrefixedValue", "parameters": "(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<T> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onPrefixedValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<T> listener)", "full_signature": "public ConfigObserver onPrefixedValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<T> listener)", "class_method_signature": "ConfigObserver.onPrefixedValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<T> listener)", "testcase": false, "constructor": false}, {"identifier": "onPrefixedOptionalValue", "parameters": "(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<Optional<T>> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onPrefixedOptionalValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<Optional<T>> listener)", "full_signature": "public ConfigObserver onPrefixedOptionalValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<Optional<T>> listener)", "class_method_signature": "ConfigObserver.onPrefixedOptionalValue(String prefix, ConfigListener.Transformer<T> transformer, ConfigValueListener<Optional<T>> listener)", "testcase": false, "constructor": false}, {"identifier": "onPrefixedOptionalValue", "parameters": "(String prefix, ConfigValueListener<Optional<Map<String, String>>> listener)", "modifiers": "public", "return": "ConfigObserver", "signature": "ConfigObserver onPrefixedOptionalValue(String prefix, ConfigValueListener<Optional<Map<String, String>>> listener)", "full_signature": "public ConfigObserver onPrefixedOptionalValue(String prefix, ConfigValueListener<Optional<Map<String, String>>> listener)", "class_method_signature": "ConfigObserver.onPrefixedOptionalValue(String prefix, ConfigValueListener<Optional<Map<String, String>>> listener)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Map<String, String> configuration, ConfigListener.Transformer<T> transformer)", "modifiers": "protected", "return": "T", "signature": "T transform(Map<String, String> configuration, ConfigListener.Transformer<T> transformer)", "full_signature": "protected T transform(Map<String, String> configuration, ConfigListener.Transformer<T> transformer)", "class_method_signature": "ConfigObserver.transform(Map<String, String> configuration, ConfigListener.Transformer<T> transformer)", "testcase": false, "constructor": false}, {"identifier": "applyConfiguration", "parameters": "(ConfigValueListener<T> listener, T configuration)", "modifiers": "protected", "return": "void", "signature": "void applyConfiguration(ConfigValueListener<T> listener, T configuration)", "full_signature": "protected void applyConfiguration(ConfigValueListener<T> listener, T configuration)", "class_method_signature": "ConfigObserver.applyConfiguration(ConfigValueListener<T> listener, T configuration)", "testcase": false, "constructor": false}, {"identifier": "parseStringList", "parameters": "(String value)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> parseStringList(String value)", "full_signature": "private static List<String> parseStringList(String value)", "class_method_signature": "ConfigObserver.parseStringList(String value)", "testcase": false, "constructor": false}, {"identifier": "updateConfiguration", "parameters": "(Map<String, String> newConfiguration)", "modifiers": "public", "return": "void", "signature": "void updateConfiguration(Map<String, String> newConfiguration)", "full_signature": "public void updateConfiguration(Map<String, String> newConfiguration)", "class_method_signature": "ConfigObserver.updateConfiguration(Map<String, String> newConfiguration)", "testcase": false, "constructor": false}, {"identifier": "findChangedKeys", "parameters": "(Map<String, String> newConfiguration, Map<String, String> currentConfiguration)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> findChangedKeys(Map<String, String> newConfiguration, Map<String, String> currentConfiguration)", "full_signature": "private Set<String> findChangedKeys(Map<String, String> newConfiguration, Map<String, String> currentConfiguration)", "class_method_signature": "ConfigObserver.findChangedKeys(Map<String, String> newConfiguration, Map<String, String> currentConfiguration)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationChanged", "parameters": "(Set<String> changedKeys, ConfigMap newConfiguration)", "modifiers": "protected", "return": "void", "signature": "void handleConfigurationChanged(Set<String> changedKeys, ConfigMap newConfiguration)", "full_signature": "protected void handleConfigurationChanged(Set<String> changedKeys, ConfigMap newConfiguration)", "class_method_signature": "ConfigObserver.handleConfigurationChanged(Set<String> changedKeys, ConfigMap newConfiguration)", "testcase": false, "constructor": false}, {"identifier": "notifyListener", "parameters": "(ConfigListener listener, Set<String> changedKeys, ConfigMap newConfiguration)", "modifiers": "private", "return": "void", "signature": "void notifyListener(ConfigListener listener, Set<String> changedKeys, ConfigMap newConfiguration)", "full_signature": "private void notifyListener(ConfigListener listener, Set<String> changedKeys, ConfigMap newConfiguration)", "class_method_signature": "ConfigObserver.notifyListener(ConfigListener listener, Set<String> changedKeys, ConfigMap newConfiguration)", "testcase": false, "constructor": false}], "file": "action-controller/src/main/java/org/actioncontroller/config/ConfigObserver.java"}, "focal_method": {"identifier": "onConfigChange", "parameters": "(ConfigListener listener)", "modifiers": "public", "return": "ConfigObserver", "body": "public ConfigObserver onConfigChange(ConfigListener listener) {\n        this.listeners.add(listener);\n        notifyListener(listener, null, new ConfigMap(currentConfiguration));\n        return this;\n    }", "signature": "ConfigObserver onConfigChange(ConfigListener listener)", "full_signature": "public ConfigObserver onConfigChange(ConfigListener listener)", "class_method_signature": "ConfigObserver.onConfigChange(ConfigListener listener)", "testcase": false, "constructor": false, "invocations": ["add", "notifyListener"]}, "repository": {"repo_id": 170412315, "url": "https://github.com/jhannes/action-controller", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 1800, "license": "licensed"}}