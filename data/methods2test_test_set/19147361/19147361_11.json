{"test_class": {"identifier": "TestWorkerRegister", "superclass": "extends ClientTestBase", "interfaces": "", "fields": [], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/lockcleaner/TestWorkerRegister.java"}, "test_case": {"identifier": "testCreateSingletonRegister", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateSingletonRegister() throws IOException {\n    WorkerRegister register = WorkerRegister.getWorkerRegister(conf);\n    Assert.assertSame(register, WorkerRegister.getWorkerRegister(conf));\n  }", "signature": "void testCreateSingletonRegister()", "full_signature": "@Test public void testCreateSingletonRegister()", "class_method_signature": "TestWorkerRegister.testCreateSingletonRegister()", "testcase": true, "constructor": false, "invocations": ["getWorkerRegister", "assertSame", "getWorkerRegister"]}, "focal_class": {"identifier": "WorkerRegister", "superclass": "extends Configured", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(WorkerRegister.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(WorkerRegister.class)", "var_name": "LOG"}, {"original_string": "private static WorkerRegister register;", "modifier": "private static", "type": "WorkerRegister", "declarator": "register", "var_name": "register"}, {"original_string": "private static Object registerLock = new Object();", "modifier": "private static", "type": "Object", "declarator": "registerLock = new Object()", "var_name": "registerLock"}, {"original_string": "private AtomicBoolean registered = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "registered = new AtomicBoolean(false)", "var_name": "registered"}], "methods": [{"identifier": "getWorkerRegister", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "WorkerRegister", "signature": "WorkerRegister getWorkerRegister(Configuration conf)", "full_signature": "public static WorkerRegister getWorkerRegister(Configuration conf)", "class_method_signature": "WorkerRegister.getWorkerRegister(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "WorkerRegister", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " WorkerRegister(Configuration conf)", "full_signature": "public  WorkerRegister(Configuration conf)", "class_method_signature": "WorkerRegister.WorkerRegister(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "registerWorker", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean registerWorker()", "full_signature": "public boolean registerWorker()", "class_method_signature": "WorkerRegister.registerWorker()", "testcase": false, "constructor": false}, {"identifier": "setUnregistered", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setUnregistered()", "full_signature": "protected void setUnregistered()", "class_method_signature": "WorkerRegister.setUnregistered()", "testcase": false, "constructor": false}, {"identifier": "doRegisterWorker", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void doRegisterWorker()", "full_signature": "public abstract void doRegisterWorker()", "class_method_signature": "WorkerRegister.doRegisterWorker()", "testcase": false, "constructor": false}, {"identifier": "isWorkerAlive", "parameters": "(String clientAddress)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isWorkerAlive(String clientAddress)", "full_signature": "public abstract boolean isWorkerAlive(String clientAddress)", "class_method_signature": "WorkerRegister.isWorkerAlive(String clientAddress)", "testcase": false, "constructor": false}, {"identifier": "getClientAddress", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getClientAddress()", "full_signature": "public abstract String getClientAddress()", "class_method_signature": "WorkerRegister.getClientAddress()", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/lockcleaner/WorkerRegister.java"}, "focal_method": {"identifier": "getWorkerRegister", "parameters": "(Configuration conf)", "modifiers": "public static", "return": "WorkerRegister", "body": "public static WorkerRegister getWorkerRegister(Configuration conf) throws IOException {\n    String workerRegisterCls = conf.get(TransactionConstant.WORKER_REGISTER_CLASS_KEY,\n      TransactionConstant.DEFAULT_WORKER_REISTER_CLASS);\n    if (register == null) {\n      synchronized (registerLock) {\n        if (register == null) {\n          try {\n            register = (WorkerRegister) (Class.forName(workerRegisterCls).getConstructor(Configuration.class)\n                .newInstance(conf));\n          } catch (Exception e) {\n            LOG.fatal(\"create workerRegister fail\", e);\n            throw new IOException(e);\n          }          \n        }\n      }\n    }\n    return register;\n  }", "signature": "WorkerRegister getWorkerRegister(Configuration conf)", "full_signature": "public static WorkerRegister getWorkerRegister(Configuration conf)", "class_method_signature": "WorkerRegister.getWorkerRegister(Configuration conf)", "testcase": false, "constructor": false, "invocations": ["get", "newInstance", "getConstructor", "forName", "fatal"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}