{"test_class": {"identifier": "ReferenceAnnotationBeanPostProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ConfigurableApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ConfigurableApplicationContext", "declarator": "context", "var_name": "context"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java"}, "test_case": {"identifier": "testGetInjectedFieldReferenceBeanMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInjectedFieldReferenceBeanMap() {\n\n        ReferenceAnnotationBeanPostProcessor beanPostProcessor = context.getBean(BEAN_NAME,\n                ReferenceAnnotationBeanPostProcessor.class);\n\n\n        Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> referenceBeanMap =\n                beanPostProcessor.getInjectedFieldReferenceBeanMap();\n\n        Assert.assertEquals(1, referenceBeanMap.size());\n\n        for (Map.Entry<InjectionMetadata.InjectedElement, ReferenceBean<?>> entry : referenceBeanMap.entrySet()) {\n\n            InjectionMetadata.InjectedElement injectedElement = entry.getKey();\n\n            Assert.assertEquals(\"com.alibaba.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor$AnnotatedFieldElement\",\n                    injectedElement.getClass().getName());\n\n            ReferenceBean<?> referenceBean = entry.getValue();\n\n            Assert.assertEquals(\"2.5.7\", referenceBean.getVersion());\n            Assert.assertEquals(\"dubbo://127.0.0.1:12345\", referenceBean.getUrl());\n\n        }\n\n    }", "signature": "void testGetInjectedFieldReferenceBeanMap()", "full_signature": "@Test public void testGetInjectedFieldReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessorTest.testGetInjectedFieldReferenceBeanMap()", "testcase": true, "constructor": false, "invocations": ["getBean", "getInjectedFieldReferenceBeanMap", "assertEquals", "size", "entrySet", "getKey", "assertEquals", "getName", "getClass", "getValue", "assertEquals", "getVersion", "assertEquals", "getUrl"]}, "focal_class": {"identifier": "ReferenceAnnotationBeanPostProcessor", "superclass": "extends AnnotationInjectedBeanPostProcessor<Reference>", "interfaces": "implements ApplicationContextAware, ApplicationListener", "fields": [{"original_string": "public static final String BEAN_NAME = \"referenceAnnotationBeanPostProcessor\";", "modifier": "public static final", "type": "String", "declarator": "BEAN_NAME = \"referenceAnnotationBeanPostProcessor\"", "var_name": "BEAN_NAME"}, {"original_string": "private static final int CACHE_SIZE = Integer.getInteger(BEAN_NAME + \".cache.size\", 32);", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = Integer.getInteger(BEAN_NAME + \".cache.size\", 32)", "var_name": "CACHE_SIZE"}, {"original_string": "private final ConcurrentMap<String, ReferenceBean<?>> referenceBeanCache =\n            new ConcurrentHashMap<String, ReferenceBean<?>>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<String, ReferenceBean<?>>", "declarator": "referenceBeanCache =\n            new ConcurrentHashMap<String, ReferenceBean<?>>(CACHE_SIZE)", "var_name": "referenceBeanCache"}, {"original_string": "private final ConcurrentHashMap<String, ReferenceBeanInvocationHandler> localReferenceBeanInvocationHandlerCache =\n            new ConcurrentHashMap<String, ReferenceBeanInvocationHandler>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentHashMap<String, ReferenceBeanInvocationHandler>", "declarator": "localReferenceBeanInvocationHandlerCache =\n            new ConcurrentHashMap<String, ReferenceBeanInvocationHandler>(CACHE_SIZE)", "var_name": "localReferenceBeanInvocationHandlerCache"}, {"original_string": "private final ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>> injectedFieldReferenceBeanCache =\n            new ConcurrentHashMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "declarator": "injectedFieldReferenceBeanCache =\n            new ConcurrentHashMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>(CACHE_SIZE)", "var_name": "injectedFieldReferenceBeanCache"}, {"original_string": "private final ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>> injectedMethodReferenceBeanCache =\n            new ConcurrentHashMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "declarator": "injectedMethodReferenceBeanCache =\n            new ConcurrentHashMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>(CACHE_SIZE)", "var_name": "injectedMethodReferenceBeanCache"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "getReferenceBeans", "parameters": "()", "modifiers": "public", "return": "Collection<ReferenceBean<?>>", "signature": "Collection<ReferenceBean<?>> getReferenceBeans()", "full_signature": "public Collection<ReferenceBean<?>> getReferenceBeans()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getReferenceBeans()", "testcase": false, "constructor": false}, {"identifier": "getInjectedFieldReferenceBeanMap", "parameters": "()", "modifiers": "public", "return": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "signature": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "full_signature": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getInjectedFieldReferenceBeanMap()", "testcase": false, "constructor": false}, {"identifier": "getInjectedMethodReferenceBeanMap", "parameters": "()", "modifiers": "public", "return": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "signature": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedMethodReferenceBeanMap()", "full_signature": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedMethodReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getInjectedMethodReferenceBeanMap()", "testcase": false, "constructor": false}, {"identifier": "doGetInjectedBean", "parameters": "(Reference reference, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "modifiers": "@Override protected", "return": "Object", "signature": "Object doGetInjectedBean(Reference reference, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "full_signature": "@Override protected Object doGetInjectedBean(Reference reference, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(Reference reference, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "buildProxy", "parameters": "(String referencedBeanName, ReferenceBean referenceBean, Class<?> injectedType)", "modifiers": "private", "return": "Object", "signature": "Object buildProxy(String referencedBeanName, ReferenceBean referenceBean, Class<?> injectedType)", "full_signature": "private Object buildProxy(String referencedBeanName, ReferenceBean referenceBean, Class<?> injectedType)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildProxy(String referencedBeanName, ReferenceBean referenceBean, Class<?> injectedType)", "testcase": false, "constructor": false}, {"identifier": "buildInvocationHandler", "parameters": "(String referencedBeanName, ReferenceBean referenceBean)", "modifiers": "private", "return": "InvocationHandler", "signature": "InvocationHandler buildInvocationHandler(String referencedBeanName, ReferenceBean referenceBean)", "full_signature": "private InvocationHandler buildInvocationHandler(String referencedBeanName, ReferenceBean referenceBean)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildInvocationHandler(String referencedBeanName, ReferenceBean referenceBean)", "testcase": false, "constructor": false}, {"identifier": "buildInjectedObjectCacheKey", "parameters": "(Reference reference, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "modifiers": "@Override protected", "return": "String", "signature": "String buildInjectedObjectCacheKey(Reference reference, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "full_signature": "@Override protected String buildInjectedObjectCacheKey(Reference reference, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildInjectedObjectCacheKey(Reference reference, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "buildReferencedBeanName", "parameters": "(Reference reference, Class<?> injectedType)", "modifiers": "private", "return": "String", "signature": "String buildReferencedBeanName(Reference reference, Class<?> injectedType)", "full_signature": "private String buildReferencedBeanName(Reference reference, Class<?> injectedType)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildReferencedBeanName(Reference reference, Class<?> injectedType)", "testcase": false, "constructor": false}, {"identifier": "buildReferenceBeanIfAbsent", "parameters": "(String referencedBeanName, Reference reference,\n                                                     Class<?> referencedType, ClassLoader classLoader)", "modifiers": "private", "return": "ReferenceBean", "signature": "ReferenceBean buildReferenceBeanIfAbsent(String referencedBeanName, Reference reference,\n                                                     Class<?> referencedType, ClassLoader classLoader)", "full_signature": "private ReferenceBean buildReferenceBeanIfAbsent(String referencedBeanName, Reference reference,\n                                                     Class<?> referencedType, ClassLoader classLoader)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildReferenceBeanIfAbsent(String referencedBeanName, Reference reference,\n                                                     Class<?> referencedType, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "cacheInjectedReferenceBean", "parameters": "(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "modifiers": "private", "return": "void", "signature": "void cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "full_signature": "private void cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(ApplicationEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(ApplicationEvent event)", "full_signature": "@Override public void onApplicationEvent(ApplicationEvent event)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.onApplicationEvent(ApplicationEvent event)", "testcase": false, "constructor": false}, {"identifier": "onServiceBeanExportEvent", "parameters": "(ServiceBeanExportedEvent event)", "modifiers": "private", "return": "void", "signature": "void onServiceBeanExportEvent(ServiceBeanExportedEvent event)", "full_signature": "private void onServiceBeanExportEvent(ServiceBeanExportedEvent event)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.onServiceBeanExportEvent(ServiceBeanExportedEvent event)", "testcase": false, "constructor": false}, {"identifier": "initReferenceBeanInvocationHandler", "parameters": "(ServiceBean serviceBean)", "modifiers": "private", "return": "void", "signature": "void initReferenceBeanInvocationHandler(ServiceBean serviceBean)", "full_signature": "private void initReferenceBeanInvocationHandler(ServiceBean serviceBean)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.initReferenceBeanInvocationHandler(ServiceBean serviceBean)", "testcase": false, "constructor": false}, {"identifier": "onContextRefreshedEvent", "parameters": "(ContextRefreshedEvent event)", "modifiers": "private", "return": "void", "signature": "void onContextRefreshedEvent(ContextRefreshedEvent event)", "full_signature": "private void onContextRefreshedEvent(ContextRefreshedEvent event)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.onContextRefreshedEvent(ContextRefreshedEvent event)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java"}, "focal_method": {"identifier": "getInjectedFieldReferenceBeanMap", "parameters": "()", "modifiers": "public", "return": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "body": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap() {\n        return Collections.unmodifiableMap(injectedFieldReferenceBeanCache);\n    }", "signature": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "full_signature": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getInjectedFieldReferenceBeanMap()", "testcase": false, "constructor": false, "invocations": ["unmodifiableMap"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}