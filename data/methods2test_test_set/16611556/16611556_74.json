{"test_class": {"identifier": "IncrementCounterInCacheAdviceTest", "superclass": "extends AbstractCounterTest<IncrementCounterInCacheAdvice>", "interfaces": "", "fields": [], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/counter/IncrementCounterInCacheAdviceTest.java"}, "test_case": {"identifier": "invalidIncrementCounterInCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidIncrementCounterInCache() throws Throwable {\n        Assume.assumeThat(isValid, CoreMatchers.is(false));\n\n        advice.incrementSingle(pjp);\n\n        verify(cache, never()).incr(cacheKey, 1, 1L);\n    }", "signature": "void invalidIncrementCounterInCache()", "full_signature": "@Test public void invalidIncrementCounterInCache()", "class_method_signature": "IncrementCounterInCacheAdviceTest.invalidIncrementCounterInCache()", "testcase": true, "constructor": false, "invocations": ["assumeThat", "is", "incrementSingle", "incr", "verify", "never"]}, "focal_class": {"identifier": "IncrementCounterInCacheAdvice", "superclass": "extends CounterInCacheBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(IncrementCounterInCacheAdvice.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(IncrementCounterInCacheAdvice.class)", "var_name": "LOG"}], "methods": [{"identifier": "incrementSingleCounter", "parameters": "()", "modifiers": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.IncrementCounterInCache)\") public", "return": "void", "signature": "void incrementSingleCounter()", "full_signature": "@Pointcut(\"@annotation(com.google.code.ssm.api.counter.IncrementCounterInCache)\") public void incrementSingleCounter()", "class_method_signature": "IncrementCounterInCacheAdvice.incrementSingleCounter()", "testcase": false, "constructor": false}, {"identifier": "incrementSingle", "parameters": "(final JoinPoint jp)", "modifiers": "@AfterReturning(\"incrementSingleCounter()\") public", "return": "void", "signature": "void incrementSingle(final JoinPoint jp)", "full_signature": "@AfterReturning(\"incrementSingleCounter()\") public void incrementSingle(final JoinPoint jp)", "class_method_signature": "IncrementCounterInCacheAdvice.incrementSingle(final JoinPoint jp)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "@Override protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "@Override protected Logger getLogger()", "class_method_signature": "IncrementCounterInCacheAdvice.getLogger()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/counter/IncrementCounterInCacheAdvice.java"}, "focal_method": {"identifier": "incrementSingle", "parameters": "(final JoinPoint jp)", "modifiers": "@AfterReturning(\"incrementSingleCounter()\") public", "return": "void", "body": "@AfterReturning(\"incrementSingleCounter()\")\n    public void incrementSingle(final JoinPoint jp) throws Throwable {\n        if (isDisabled()) {\n            getLogger().info(\"Cache disabled\");\n            return;\n        }\n\n        // This is injected caching. If anything goes wrong in the caching, LOG\n        // the crap outta it, but do not let it surface up past the AOP injection itself.\n        // It will be invoked only if underlying method completes successfully.\n        String cacheKey = null;\n        IncrementCounterInCache annotation;\n        try {\n            Method methodToCache = getCacheBase().getMethodToCache(jp, IncrementCounterInCache.class);\n            annotation = methodToCache.getAnnotation(IncrementCounterInCache.class);\n            AnnotationData data = AnnotationDataBuilder.buildAnnotationData(annotation, IncrementCounterInCache.class, methodToCache);\n            cacheKey = getCacheBase().getCacheKeyBuilder().getCacheKey(data, jp.getArgs(), methodToCache.toString());\n            getCacheBase().getCache(data).incr(cacheKey, 1, 1);\n        } catch (Exception ex) {\n            warn(ex, \"Incrementing counter [%s] via %s aborted due to an error.\", cacheKey, jp.toShortString());\n        }\n    }", "signature": "void incrementSingle(final JoinPoint jp)", "full_signature": "@AfterReturning(\"incrementSingleCounter()\") public void incrementSingle(final JoinPoint jp)", "class_method_signature": "IncrementCounterInCacheAdvice.incrementSingle(final JoinPoint jp)", "testcase": false, "constructor": false, "invocations": ["isDisabled", "info", "getLogger", "getMethodToCache", "getCacheBase", "getAnnotation", "buildAnnotationData", "getCacheKey", "getCacheKeyBuilder", "getCacheBase", "getArgs", "toString", "incr", "getCache", "getCacheBase", "warn", "toShortString"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}