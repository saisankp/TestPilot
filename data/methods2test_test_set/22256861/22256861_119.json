{"test_class": {"identifier": "ValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/ValidatorTest.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidate() throws ParserConfigurationException, SAXException, URISyntaxException {\n        final File[] slstrFiles = TestUtils.getSlstrFiles();\n        try {\n            Validator.validate(slstrFiles);\n        } catch (IOException e) {\n            fail(\"No exception expected: \" + e.getMessage());\n        }\n    }", "signature": "void testValidate()", "full_signature": "@Test public void testValidate()", "class_method_signature": "ValidatorTest.testValidate()", "testcase": true, "constructor": false, "invocations": ["getSlstrFiles", "validate", "fail", "getMessage"]}, "focal_class": {"identifier": "Validator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\";", "modifier": "private static final", "type": "String", "declarator": "SLSTR_L1B_NAME_PATTERN = \"S3.?_SL_1_RBT_.*(.SEN3)?\"", "var_name": "SLSTR_L1B_NAME_PATTERN"}], "methods": [{"identifier": "validate", "parameters": "(File[] manifestFiles)", "modifiers": "public static", "return": "void", "signature": "void validate(File[] manifestFiles)", "full_signature": "public static void validate(File[] manifestFiles)", "class_method_signature": "Validator.validate(File[] manifestFiles)", "testcase": false, "constructor": false}, {"identifier": "validateSlstrProductFiles", "parameters": "(File[] slstrProductFiles)", "modifiers": "static", "return": "void", "signature": "void validateSlstrProductFiles(File[] slstrProductFiles)", "full_signature": "static void validateSlstrProductFiles(File[] slstrProductFiles)", "class_method_signature": "Validator.validateSlstrProductFiles(File[] slstrProductFiles)", "testcase": false, "constructor": false}, {"identifier": "validateOrbitReference", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateOrbitReference(Document[] manifests)", "full_signature": "static void validateOrbitReference(Document[] manifests)", "class_method_signature": "Validator.validateOrbitReference(Document[] manifests)", "testcase": false, "constructor": false}, {"identifier": "validateAdjacency", "parameters": "(Document[] manifests)", "modifiers": "static", "return": "void", "signature": "void validateAdjacency(Document[] manifests)", "full_signature": "static void validateAdjacency(Document[] manifests)", "class_method_signature": "Validator.validateAdjacency(Document[] manifests)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/Validator.java"}, "focal_method": {"identifier": "validate", "parameters": "(File[] manifestFiles)", "modifiers": "public static", "return": "void", "body": "public static void validate(File[] manifestFiles) throws IOException {\n        final String msg = \"Cannot create document from manifest XML file\";\n        Document[] manifests = new Document[manifestFiles.length];\n        try {\n            for (int i = 0; i < manifestFiles.length; i++) {\n                manifests[i] = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(manifestFiles[i]);\n            }\n        } catch (SAXException | ParserConfigurationException e) {\n            throw new IOException(MessageFormat.format(\"{0}: {1}\", msg, e.getMessage()));\n        }\n        try {\n            validateOrbitReference(manifests);\n            validateAdjacency(manifests);\n        } catch (PDUStitchingException e) {\n            throw new IOException(e.getMessage());\n        }\n    }", "signature": "void validate(File[] manifestFiles)", "full_signature": "public static void validate(File[] manifestFiles)", "class_method_signature": "Validator.validate(File[] manifestFiles)", "testcase": false, "constructor": false, "invocations": ["parse", "newDocumentBuilder", "newInstance", "format", "getMessage", "validateOrbitReference", "validateAdjacency", "getMessage"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}