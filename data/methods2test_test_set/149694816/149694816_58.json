{"test_class": {"identifier": "InstallPackageTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/command/InstallPackageTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test @PrepareForTest(InstallPackage.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(InstallPackage.class)\n  public void testExecute() throws Exception {\n    // Given\n    final CloneGit cloneGit = mock(CloneGit.class);\n    final FileSet fileSet = mock(FileSet.class);\n    mockStatic(Files.class);\n    when(Files.createDirectories(any())).thenReturn(null);\n    whenNew(CloneGit.class).withAnyArguments().thenReturn(cloneGit);\n    when(cloneGit.getFileSet()).thenReturn(fileSet);\n\n    // When\n    final InstallPackage command = new InstallPackage();\n    command.setPrinter(DummyMessagePrinter.getInstance());\n    command.setArguments(singletonList(randomUUID().toString() + \"/\" + randomUUID().toString()));\n    command.execute();\n\n    // Then\n  }", "signature": "void testExecute()", "full_signature": "@Test @PrepareForTest(InstallPackage.class) public void testExecute()", "class_method_signature": "InstallPackageTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mockStatic", "thenReturn", "when", "createDirectories", "any", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "getFileSet", "setPrinter", "getInstance", "setArguments", "singletonList", "toString", "randomUUID", "toString", "randomUUID", "execute"]}, "focal_class": {"identifier": "InstallPackage", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "protected static final String NL_0 = InstallPackage.class.getName() + \".0\";", "modifier": "protected static final", "type": "String", "declarator": "NL_0 = InstallPackage.class.getName() + \".0\"", "var_name": "NL_0"}, {"original_string": "protected static final String NL_1 = InstallPackage.class.getName() + \".1\";", "modifier": "protected static final", "type": "String", "declarator": "NL_1 = InstallPackage.class.getName() + \".1\"", "var_name": "NL_1"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "InstallPackage.execute()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/command/InstallPackage.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute() throws Exception {\n    assertTrue(0 < arguments.size() && arguments.size() < 3);\n    final String packageName = getArgument(0);\n    logger.debug(\"URL: {}\", packageName);\n    final int separatorIndex = packageName.indexOf(\"/\");\n    assertTrue(0 < separatorIndex, \"Invalid argument: \" + packageName);\n    final Optional<String> checkout = getOptionalArgument(1);\n\n    final CloneGit cloneGit = new CloneGit();\n    logger.trace(\"CloneGit: {}\", cloneGit);\n    cloneGit.setArguments(asList(packageName, checkout.orElse(\"master\")));\n    cloneGit.execute();\n    final FileSet fileSet = cloneGit.getFileSet();\n    logger.debug(\"FileSet: {}\", fileSet.getFiles());\n\n    final String publishRepository = append(System.getProperty(\"user.home\"), MODULES_BASE);\n    final Path publishPath = Paths.get(append(publishRepository, packageName));\n    if (exists(publishPath)) {\n      deleteRecursively(publishPath, ALLOW_INSECURE);\n    }\n    createDirectories(publishPath);\n    fileSet.copyTo(publishPath);\n    printer.println(bind(NL_0, packageName));\n    printer.println(bind(NL_1, publishPath));\n  }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "InstallPackage.execute()", "testcase": false, "constructor": false, "invocations": ["assertTrue", "size", "size", "getArgument", "debug", "indexOf", "assertTrue", "getOptionalArgument", "trace", "setArguments", "asList", "orElse", "execute", "getFileSet", "debug", "getFiles", "append", "getProperty", "get", "append", "exists", "deleteRecursively", "createDirectories", "copyTo", "println", "bind", "println", "bind"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}