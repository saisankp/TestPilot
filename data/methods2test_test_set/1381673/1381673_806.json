{"test_class": {"identifier": "GuidedDTDRLPersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistenceTest.java"}, "test_case": {"identifier": "testRHSWithBRLColumn_ParseToRuleModel", "parameters": "()", "modifiers": "@Test //This test checks a Decision Table involving BRL columns is correctly converted into a RuleModel public", "return": "void", "body": "@Test\n    //This test checks a Decision Table involving BRL columns is correctly converted into a RuleModel\n    public void testRHSWithBRLColumn_ParseToRuleModel() {\n\n        GuidedDecisionTable52 dtable = new GuidedDecisionTable52();\n\n        GuidedDTDRLPersistence p = new GuidedDTDRLPersistence();\n\n        // All three rows are entered, some columns with optional data\n        String[][] data = new String[][]{\n                new String[]{\"1\", \"\", \"desc\", \"Gargamel\", \"Pupa\", \"50\"},\n                new String[]{\"2\", \"\", \"desc\", \"Gargamel\", \"\", \"50\"},\n                new String[]{\"3\", \"\", \"desc\", \"Gargamel\", \"Pupa\", \"\"}\n        };\n\n        //Simple (mandatory) columns\n        dtable.setRowNumberCol(new RowNumberCol52());\n        dtable.setDescriptionCol(new DescriptionCol52());\n\n        //Simple Action\n        ActionInsertFactCol52 a1 = new ActionInsertFactCol52();\n        a1.setBoundName(\"$b\");\n        a1.setFactType(\"Baddie\");\n        a1.setFactField(\"name\");\n        a1.setType(DataType.TYPE_STRING);\n\n        dtable.getActionCols().add(a1);\n\n        //BRL Column\n        BRLActionColumn brl1 = new BRLActionColumn();\n\n        //BRL Column definition\n        List<IAction> brl1Definition = new ArrayList<IAction>();\n        ActionInsertFact brl1DefinitionAction1 = new ActionInsertFact(\"Smurf\");\n        ActionFieldValue brl1DefinitionAction1FieldValue1 = new ActionFieldValue(\"name\",\n                                                                                 \"$name\",\n                                                                                 DataType.TYPE_STRING);\n        brl1DefinitionAction1FieldValue1.setNature(BaseSingleFieldConstraint.TYPE_TEMPLATE);\n        brl1DefinitionAction1.addFieldValue(brl1DefinitionAction1FieldValue1);\n        ActionFieldValue brl1DefinitionAction1FieldValue2 = new ActionFieldValue(\"age\",\n                                                                                 \"$age\",\n                                                                                 DataType.TYPE_NUMERIC_INTEGER);\n        brl1DefinitionAction1FieldValue2.setNature(BaseSingleFieldConstraint.TYPE_TEMPLATE);\n        brl1DefinitionAction1.addFieldValue(brl1DefinitionAction1FieldValue2);\n        brl1Definition.add(brl1DefinitionAction1);\n        brl1.setDefinition(brl1Definition);\n\n        //Setup BRL column bindings\n        BRLActionVariableColumn brl1Variable1 = new BRLActionVariableColumn(\"$name\",\n                                                                            DataType.TYPE_STRING,\n                                                                            \"Person\",\n                                                                            \"name\");\n        brl1.getChildColumns().add(brl1Variable1);\n        BRLActionVariableColumn brl1Variable2 = new BRLActionVariableColumn(\"$age\",\n                                                                            DataType.TYPE_NUMERIC_INTEGER,\n                                                                            \"Person\",\n                                                                            \"age\");\n        brl1.getChildColumns().add(brl1Variable2);\n\n        dtable.getActionCols().add(brl1);\n\n        //Now to test conversion\n        RuleModel rm = new RuleModel();\n        List<BaseColumn> allColumns = dtable.getExpandedColumns();\n        List<ActionCol52> allActions = dtable.getActionCols();\n\n        //Row 0\n        List<DTCellValue52> dtRowData0 = DataUtilities.makeDataRowList(data[0]);\n        TemplateDataProvider rowDataProvider0 = new GuidedDTTemplateDataProvider(allColumns,\n                                                                                 dtRowData0);\n        p.doActions(allColumns,\n                    allActions,\n                    rowDataProvider0,\n                    dtRowData0,\n                    rm);\n\n        assertEquals(2,\n                     rm.rhs.length);\n        assertEquals(\"Baddie\",\n                     ((ActionInsertFact) rm.rhs[0]).getFactType());\n        assertEquals(\"Smurf\",\n                     ((ActionInsertFact) rm.rhs[1]).getFactType());\n\n        // examine the first action\n        ActionInsertFact result0Action1 = (ActionInsertFact) rm.rhs[0];\n        assertEquals(1,\n                     result0Action1.getFieldValues().length);\n\n        ActionFieldValue result0Action1FieldValue1 = (ActionFieldValue) result0Action1.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result0Action1FieldValue1.getType());\n        assertEquals(\"name\",\n                     result0Action1FieldValue1.getField());\n        assertEquals(\"Gargamel\",\n                     result0Action1FieldValue1.getValue());\n\n        // examine the second action\n        ActionInsertFact result0Action2 = (ActionInsertFact) rm.rhs[1];\n        assertEquals(2,\n                     result0Action2.getFieldValues().length);\n\n        ActionFieldValue result0Action2FieldValue1 = (ActionFieldValue) result0Action2.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result0Action2FieldValue1.getType());\n        assertEquals(\"name\",\n                     result0Action2FieldValue1.getField());\n        assertEquals(\"$name\",\n                     result0Action2FieldValue1.getValue());\n\n        ActionFieldValue result0Action2FieldValue2 = (ActionFieldValue) result0Action2.getFieldValues()[1];\n        assertEquals(DataType.TYPE_NUMERIC_INTEGER,\n                     result0Action2FieldValue2.getType());\n        assertEquals(\"age\",\n                     result0Action2FieldValue2.getField());\n        assertEquals(\"$age\",\n                     result0Action2FieldValue2.getValue());\n\n        //Row 1\n        List<DTCellValue52> dtRowData1 = DataUtilities.makeDataRowList(data[1]);\n        TemplateDataProvider rowDataProvider1 = new GuidedDTTemplateDataProvider(allColumns,\n                                                                                 dtRowData1);\n        p.doActions(allColumns,\n                    allActions,\n                    rowDataProvider1,\n                    dtRowData1,\n                    rm);\n\n        assertEquals(2,\n                     rm.rhs.length);\n        assertEquals(\"Baddie\",\n                     ((ActionInsertFact) rm.rhs[0]).getFactType());\n        assertEquals(\"Smurf\",\n                     ((ActionInsertFact) rm.rhs[1]).getFactType());\n\n        // examine the first action\n        ActionInsertFact result1Action1 = (ActionInsertFact) rm.rhs[0];\n        assertEquals(1,\n                     result1Action1.getFieldValues().length);\n\n        ActionFieldValue result1Action1FieldValue1 = (ActionFieldValue) result1Action1.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result1Action1FieldValue1.getType());\n        assertEquals(\"name\",\n                     result1Action1FieldValue1.getField());\n        assertEquals(\"Gargamel\",\n                     result1Action1FieldValue1.getValue());\n\n        // examine the second action\n        ActionInsertFact result1Action2 = (ActionInsertFact) rm.rhs[1];\n        assertEquals(2,\n                     result1Action2.getFieldValues().length);\n\n        ActionFieldValue result1Action2FieldValue1 = (ActionFieldValue) result1Action2.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result1Action2FieldValue1.getType());\n        assertEquals(\"name\",\n                     result1Action2FieldValue1.getField());\n        assertEquals(\"$name\",\n                     result1Action2FieldValue1.getValue());\n\n        ActionFieldValue result1Action2FieldValue2 = (ActionFieldValue) result1Action2.getFieldValues()[1];\n        assertEquals(DataType.TYPE_NUMERIC_INTEGER,\n                     result1Action2FieldValue2.getType());\n        assertEquals(\"age\",\n                     result1Action2FieldValue2.getField());\n        assertEquals(\"$age\",\n                     result1Action2FieldValue2.getValue());\n\n        //Row 2\n        List<DTCellValue52> dtRowData2 = DataUtilities.makeDataRowList(data[2]);\n        TemplateDataProvider rowDataProvider2 = new GuidedDTTemplateDataProvider(allColumns,\n                                                                                 dtRowData2);\n        p.doActions(allColumns,\n                    allActions,\n                    rowDataProvider2,\n                    dtRowData2,\n                    rm);\n\n        assertEquals(2,\n                     rm.rhs.length);\n        assertEquals(\"Baddie\",\n                     ((ActionInsertFact) rm.rhs[0]).getFactType());\n        assertEquals(\"Smurf\",\n                     ((ActionInsertFact) rm.rhs[1]).getFactType());\n\n        // examine the first action\n        ActionInsertFact result2Action1 = (ActionInsertFact) rm.rhs[0];\n        assertEquals(1,\n                     result2Action1.getFieldValues().length);\n\n        ActionFieldValue result2Action1FieldValue1 = (ActionFieldValue) result2Action1.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result2Action1FieldValue1.getType());\n        assertEquals(\"name\",\n                     result2Action1FieldValue1.getField());\n        assertEquals(\"Gargamel\",\n                     result2Action1FieldValue1.getValue());\n\n        // examine the second action\n        ActionInsertFact result2Action2 = (ActionInsertFact) rm.rhs[1];\n        assertEquals(2,\n                     result2Action2.getFieldValues().length);\n\n        ActionFieldValue result2Action2FieldValue1 = (ActionFieldValue) result2Action2.getFieldValues()[0];\n        assertEquals(DataType.TYPE_STRING,\n                     result2Action2FieldValue1.getType());\n        assertEquals(\"name\",\n                     result2Action2FieldValue1.getField());\n        assertEquals(\"$name\",\n                     result2Action2FieldValue1.getValue());\n\n        ActionFieldValue result3Action2FieldValue2 = (ActionFieldValue) result2Action2.getFieldValues()[1];\n        assertEquals(DataType.TYPE_NUMERIC_INTEGER,\n                     result3Action2FieldValue2.getType());\n        assertEquals(\"age\",\n                     result3Action2FieldValue2.getField());\n        assertEquals(\"$age\",\n                     result3Action2FieldValue2.getValue());\n    }", "signature": "void testRHSWithBRLColumn_ParseToRuleModel()", "full_signature": "@Test //This test checks a Decision Table involving BRL columns is correctly converted into a RuleModel public void testRHSWithBRLColumn_ParseToRuleModel()", "class_method_signature": "GuidedDTDRLPersistenceTest.testRHSWithBRLColumn_ParseToRuleModel()", "testcase": true, "constructor": false, "invocations": ["setRowNumberCol", "setDescriptionCol", "setBoundName", "setFactType", "setFactField", "setType", "add", "getActionCols", "setNature", "addFieldValue", "setNature", "addFieldValue", "add", "setDefinition", "add", "getChildColumns", "add", "getChildColumns", "add", "getActionCols", "getExpandedColumns", "getActionCols", "makeDataRowList", "doActions", "assertEquals", "assertEquals", "getFactType", "assertEquals", "getFactType", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "makeDataRowList", "doActions", "assertEquals", "assertEquals", "getFactType", "assertEquals", "getFactType", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "makeDataRowList", "doActions", "assertEquals", "assertEquals", "getFactType", "assertEquals", "getFactType", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "assertEquals", "getFieldValues", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue", "getFieldValues", "assertEquals", "getType", "assertEquals", "getField", "assertEquals", "getValue"]}, "focal_class": {"identifier": "GuidedDTDRLPersistence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "GuidedDTDRLPersistence", "signature": "GuidedDTDRLPersistence getInstance()", "full_signature": "public static GuidedDTDRLPersistence getInstance()", "class_method_signature": "GuidedDTDRLPersistence.getInstance()", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(final GuidedDecisionTable52 originalDTable)", "modifiers": "public", "return": "String", "signature": "String marshal(final GuidedDecisionTable52 originalDTable)", "full_signature": "public String marshal(final GuidedDecisionTable52 originalDTable)", "class_method_signature": "GuidedDTDRLPersistence.marshal(final GuidedDecisionTable52 originalDTable)", "testcase": false, "constructor": false}, {"identifier": "doActions", "parameters": "(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLActionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLActionColumn column)", "full_signature": "private boolean hasVariables(BRLActionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLActionColumn column)", "testcase": false, "constructor": false}, {"identifier": "addAction", "parameters": "(IAction action,\n                           List<LabelledAction> actions)", "modifiers": "private", "return": "void", "signature": "void addAction(IAction action,\n                           List<LabelledAction> actions)", "full_signature": "private void addAction(IAction action,\n                           List<LabelledAction> actions)", "class_method_signature": "GuidedDTDRLPersistence.addAction(IAction action,\n                           List<LabelledAction> actions)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "testcase": false, "constructor": false}, {"identifier": "doConditions", "parameters": "(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "full_signature": " void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLConditionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLConditionColumn column)", "full_signature": "private boolean hasVariables(BRLConditionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLConditionColumn column)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "makeInList", "parameters": "(final String cell)", "modifiers": "", "return": "String", "signature": "String makeInList(final String cell)", "full_signature": " String makeInList(final String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeInList(final String cell)", "testcase": false, "constructor": false}, {"identifier": "no", "parameters": "(String operator)", "modifiers": "private", "return": "boolean", "signature": "boolean no(String operator)", "full_signature": "private boolean no(String operator)", "class_method_signature": "GuidedDTDRLPersistence.no(String operator)", "testcase": false, "constructor": false}, {"identifier": "findByFactPattern", "parameters": "(List<IPattern> patterns,\n                                       Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "full_signature": "private IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByFactPattern", "parameters": "(final List<IPattern> patterns,\n                                         final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "full_signature": "private IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByNegatedFactPattern", "parameters": "(final List<IPattern> patterns,\n                                                final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "full_signature": "private IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "checkNegatedFactPattern", "parameters": "(final FactPattern fp,\n                                                       final String factType)", "modifiers": "private", "return": "Optional<IPattern>", "signature": "Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "full_signature": "private Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "class_method_signature": "GuidedDTDRLPersistence.checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "testcase": false, "constructor": false}, {"identifier": "doAttribs", "parameters": "(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doMetadata", "parameters": "(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "full_signature": " void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "modifiers": "", "return": "String", "signature": "String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "full_signature": " String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "class_method_signature": "GuidedDTDRLPersistence.getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "testcase": false, "constructor": false}, {"identifier": "hasStringValue", "parameters": "(final DTCellValue52 dtCellValue52)", "modifiers": "private", "return": "boolean", "signature": "boolean hasStringValue(final DTCellValue52 dtCellValue52)", "full_signature": "private boolean hasStringValue(final DTCellValue52 dtCellValue52)", "class_method_signature": "GuidedDTDRLPersistence.hasStringValue(final DTCellValue52 dtCellValue52)", "testcase": false, "constructor": false}, {"identifier": "validCell", "parameters": "(String c,\n                      DataType.DataTypes dataType)", "modifiers": "", "return": "boolean", "signature": "boolean validCell(String c,\n                      DataType.DataTypes dataType)", "full_signature": " boolean validCell(String c,\n                      DataType.DataTypes dataType)", "class_method_signature": "GuidedDTDRLPersistence.validCell(String c,\n                      DataType.DataTypes dataType)", "testcase": false, "constructor": false}, {"identifier": "validateAttributeCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateAttributeCell(String c)", "full_signature": " boolean validateAttributeCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateAttributeCell(String c)", "testcase": false, "constructor": false}, {"identifier": "validateMetadataCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateMetadataCell(String c)", "full_signature": " boolean validateMetadataCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateMetadataCell(String c)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      String cell)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java"}, "focal_method": {"identifier": "doActions", "parameters": "(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "body": "void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm) {\n\n        List<LabelledAction> actions = new ArrayList<LabelledAction>();\n        for (ActionCol52 c : actionCols) {\n\n            if (c instanceof LimitedEntryBRLActionColumn) {\n                doAction(allColumns,\n                         (LimitedEntryBRLActionColumn) c,\n                         actions,\n                         rowDataProvider,\n                         row,\n                         rm);\n            } else if (c instanceof BRLActionColumn) {\n                doAction(allColumns,\n                         (BRLActionColumn) c,\n                         actions,\n                         rowDataProvider,\n                         row,\n                         rm);\n            } else {\n\n                int index = allColumns.indexOf(c);\n                DTCellValue52 dcv = row.get(index);\n                String cell = \"\";\n\n                if (c instanceof LimitedEntryCol) {\n                    if (dcv.getBooleanValue() == true) {\n                        LimitedEntryCol lec = (LimitedEntryCol) c;\n                        cell = GuidedDTDRLUtilities.convertDTCellValueToString(lec.getValue());\n                    }\n                } else {\n                    cell = GuidedDTDRLUtilities.convertDTCellValueToString(dcv);\n                }\n\n                if (validCell(cell,\n                              dcv.getDataType())) {\n                    if (c instanceof ActionWorkItemInsertFactCol52) {\n                        doAction(actions,\n                                 (ActionWorkItemInsertFactCol52) c,\n                                 cell);\n                    } else if (c instanceof ActionInsertFactCol52) {\n                        doAction(actions,\n                                 (ActionInsertFactCol52) c,\n                                 cell);\n                    } else if (c instanceof ActionWorkItemSetFieldCol52) {\n                        doAction(actions,\n                                 (ActionWorkItemSetFieldCol52) c,\n                                 cell);\n                    } else if (c instanceof ActionSetFieldCol52) {\n                        doAction(actions,\n                                 (ActionSetFieldCol52) c,\n                                 cell);\n                    } else if (c instanceof ActionRetractFactCol52) {\n                        doAction(actions,\n                                 cell);\n                    } else if (c instanceof ActionWorkItemCol52) {\n                        doAction(actions,\n                                 (ActionWorkItemCol52) c,\n                                 cell);\n                    }\n                }\n            }\n        }\n\n        rm.rhs = new IAction[actions.size()];\n        for (int i = 0; i < rm.rhs.length; i++) {\n            rm.rhs[i] = actions.get(i).action;\n        }\n    }", "signature": "void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false, "invocations": ["doAction", "doAction", "indexOf", "get", "getBooleanValue", "convertDTCellValueToString", "getValue", "convertDTCellValueToString", "validCell", "getDataType", "doAction", "doAction", "doAction", "doAction", "doAction", "doAction", "size", "get"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}