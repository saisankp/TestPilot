{"test_class": {"identifier": "TestNodeGroupService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TestResults testResults = new TestResults();", "modifier": "@Rule\n    public", "type": "TestResults", "declarator": "testResults = new TestResults()", "var_name": "testResults"}, {"original_string": "private static final String CUSTOM_EXAMPLE_SERVICE_KIND = \"xenon:examplestate\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_EXAMPLE_SERVICE_KIND = \"xenon:examplestate\"", "var_name": "CUSTOM_EXAMPLE_SERVICE_KIND"}, {"original_string": "private static final String CUSTOM_NODE_GROUP_NAME = \"custom\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_NODE_GROUP_NAME = \"custom\"", "var_name": "CUSTOM_NODE_GROUP_NAME"}, {"original_string": "private static final String CUSTOM_NODE_GROUP = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_GROUP_FACTORY,\n            CUSTOM_NODE_GROUP_NAME);", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_NODE_GROUP = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_GROUP_FACTORY,\n            CUSTOM_NODE_GROUP_NAME)", "var_name": "CUSTOM_NODE_GROUP"}, {"original_string": "private static final String CUSTOM_GROUP_NODE_SELECTOR = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_SELECTOR_PREFIX,\n            CUSTOM_NODE_GROUP_NAME);", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_GROUP_NODE_SELECTOR = UriUtils.buildUriPath(\n            ServiceUriPaths.NODE_SELECTOR_PREFIX,\n            CUSTOM_NODE_GROUP_NAME)", "var_name": "CUSTOM_GROUP_NODE_SELECTOR"}, {"original_string": "public static final long DEFAULT_MAINT_INTERVAL_MICROS = TimeUnit.MILLISECONDS\n            .toMicros(VerificationHost.FAST_MAINT_INTERVAL_MILLIS);", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_MAINT_INTERVAL_MICROS = TimeUnit.MILLISECONDS\n            .toMicros(VerificationHost.FAST_MAINT_INTERVAL_MILLIS)", "var_name": "DEFAULT_MAINT_INTERVAL_MICROS"}, {"original_string": "private VerificationHost host;", "modifier": "private", "type": "VerificationHost", "declarator": "host", "var_name": "host"}, {"original_string": "public int testIterationCount = 1;", "modifier": "public", "type": "int", "declarator": "testIterationCount = 1", "var_name": "testIterationCount"}, {"original_string": "public int nodeCount = 3;", "modifier": "public", "type": "int", "declarator": "nodeCount = 3", "var_name": "nodeCount"}, {"original_string": "public int updateCount = 10;", "modifier": "public", "type": "int", "declarator": "updateCount = 10", "var_name": "updateCount"}, {"original_string": "public int serviceCount = 10;", "modifier": "public", "type": "int", "declarator": "serviceCount = 10", "var_name": "serviceCount"}, {"original_string": "public long testDurationSeconds;", "modifier": "public", "type": "long", "declarator": "testDurationSeconds", "var_name": "testDurationSeconds"}, {"original_string": "public long iterationCount = 1;", "modifier": "public", "type": "long", "declarator": "iterationCount = 1", "var_name": "iterationCount"}, {"original_string": "public int waitDurationBeforeStartSeconds;", "modifier": "public", "type": "int", "declarator": "waitDurationBeforeStartSeconds", "var_name": "waitDurationBeforeStartSeconds"}, {"original_string": "private NodeGroupConfig nodeGroupConfig = new NodeGroupConfig();", "modifier": "private", "type": "NodeGroupConfig", "declarator": "nodeGroupConfig = new NodeGroupConfig()", "var_name": "nodeGroupConfig"}, {"original_string": "private EnumSet<ServiceOption> postCreationServiceOptions = EnumSet.noneOf(ServiceOption.class);", "modifier": "private", "type": "EnumSet<ServiceOption>", "declarator": "postCreationServiceOptions = EnumSet.noneOf(ServiceOption.class)", "var_name": "postCreationServiceOptions"}, {"original_string": "private boolean expectFailure;", "modifier": "private", "type": "boolean", "declarator": "expectFailure", "var_name": "expectFailure"}, {"original_string": "private long expectedFailureStartTimeMicros;", "modifier": "private", "type": "long", "declarator": "expectedFailureStartTimeMicros", "var_name": "expectedFailureStartTimeMicros"}, {"original_string": "private List<URI> expectedFailedHosts = new ArrayList<>();", "modifier": "private", "type": "List<URI>", "declarator": "expectedFailedHosts = new ArrayList<>()", "var_name": "expectedFailedHosts"}, {"original_string": "private String replicationTargetFactoryLink = ExampleService.FACTORY_LINK;", "modifier": "private", "type": "String", "declarator": "replicationTargetFactoryLink = ExampleService.FACTORY_LINK", "var_name": "replicationTargetFactoryLink"}, {"original_string": "private String replicationNodeSelector = ServiceUriPaths.DEFAULT_NODE_SELECTOR;", "modifier": "private", "type": "String", "declarator": "replicationNodeSelector = ServiceUriPaths.DEFAULT_NODE_SELECTOR", "var_name": "replicationNodeSelector"}, {"original_string": "private int replicationFactor;", "modifier": "private", "type": "int", "declarator": "replicationFactor", "var_name": "replicationFactor"}, {"original_string": "private int replicationQuorum = 1;", "modifier": "private", "type": "int", "declarator": "replicationQuorum = 1", "var_name": "replicationQuorum"}, {"original_string": "private Map<String, URI> replicationTargetLinks;", "modifier": "private", "type": "Map<String, URI>", "declarator": "replicationTargetLinks", "var_name": "replicationTargetLinks"}, {"original_string": "private Map<String, URI> replicationTargetLinksOriginal;", "modifier": "private", "type": "Map<String, URI>", "declarator": "replicationTargetLinksOriginal", "var_name": "replicationTargetLinksOriginal"}, {"original_string": "private BiPredicate<ExampleServiceState, ExampleServiceState> exampleStateConvergenceChecker = (\n            initial, current) -> {\n        if (current.name == null) {\n            return false;\n        }\n        if (!this.host.isRemotePeerTest() &&\n                !CUSTOM_EXAMPLE_SERVICE_KIND.equals(current.documentKind)) {\n            return false;\n        }\n        return current.name.equals(initial.name);\n    };", "modifier": "private", "type": "BiPredicate<ExampleServiceState, ExampleServiceState>", "declarator": "exampleStateConvergenceChecker = (\n            initial, current) -> {\n        if (current.name == null) {\n            return false;\n        }\n        if (!this.host.isRemotePeerTest() &&\n                !CUSTOM_EXAMPLE_SERVICE_KIND.equals(current.documentKind)) {\n            return false;\n        }\n        return current.name.equals(initial.name);\n    }", "var_name": "exampleStateConvergenceChecker"}, {"original_string": "private Function<ExampleServiceState, Void> exampleStateUpdateBodySetter = (\n            ExampleServiceState state) -> {\n        state.name = \"new name\";\n        return null;\n    };", "modifier": "private", "type": "Function<ExampleServiceState, Void>", "declarator": "exampleStateUpdateBodySetter = (\n            ExampleServiceState state) -> {\n        state.name = \"new name\";\n        return null;\n    }", "var_name": "exampleStateUpdateBodySetter"}, {"original_string": "private boolean isPeerSynchronizationEnabled = true;", "modifier": "private", "type": "boolean", "declarator": "isPeerSynchronizationEnabled = true", "var_name": "isPeerSynchronizationEnabled"}, {"original_string": "private boolean isAuthorizationEnabled = false;", "modifier": "private", "type": "boolean", "declarator": "isAuthorizationEnabled = false", "var_name": "isAuthorizationEnabled"}, {"original_string": "private HttpScheme replicationUriScheme;", "modifier": "private", "type": "HttpScheme", "declarator": "replicationUriScheme", "var_name": "replicationUriScheme"}, {"original_string": "private boolean skipAvailabilityChecks = false;", "modifier": "private", "type": "boolean", "declarator": "skipAvailabilityChecks = false", "var_name": "skipAvailabilityChecks"}, {"original_string": "private boolean isMultiLocationTest = false;", "modifier": "private", "type": "boolean", "declarator": "isMultiLocationTest = false", "var_name": "isMultiLocationTest"}, {"original_string": "public boolean isStressTest = false;", "modifier": "public", "type": "boolean", "declarator": "isStressTest = false", "var_name": "isStressTest"}, {"original_string": "public int warmUpIterationCount = 3;", "modifier": "public", "type": "int", "declarator": "warmUpIterationCount = 3", "var_name": "warmUpIterationCount"}], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestNodeGroupService.java"}, "test_case": {"identifier": "recognizeSelfInPeerNodesByPublicUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void recognizeSelfInPeerNodesByPublicUri() throws Throwable {\n        String id = \"node-\" + VerificationHost.hostNumber.incrementAndGet();\n        String publicUri = \"http://myhostname.local:\";\n\n        // In order not to hardcode a port, 0 is used which will pick random port.\n        // The value of the random port is then used to set the initialPeerNodes and publicUri is if they\n        // used the assigned port to begin with.\n        ExampleServiceHost nodeA = new ExampleServiceHost() {\n            @Override\n            public List<URI> getInitialPeerHosts() {\n                try {\n                    Field field = ServiceHost.class.getDeclaredField(\"state\");\n                    field.setAccessible(true);\n                    ServiceHostState s = (ServiceHostState) field.get(this);\n                    s.initialPeerNodes = new String[] { publicUri + getPort() };\n                    s.publicUri = URI.create(publicUri + getPort());\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n\n                return super.getInitialPeerHosts();\n            }\n        };\n        TemporaryFolder tmpFolderA = new TemporaryFolder();\n        tmpFolderA.create();\n        try {\n            String[] args = {\n                    \"--port=0\",\n                    \"--id=\" + id,\n                    \"--publicUri=\" + publicUri,\n                    \"--bindAddress=127.0.0.1\",\n                    \"--sandbox=\" + tmpFolderA.getRoot().getAbsolutePath()\n            };\n\n            nodeA.initialize(args);\n            nodeA.setMaintenanceIntervalMicros(TimeUnit.MILLISECONDS\n                    .toMicros(VerificationHost.FAST_MAINT_INTERVAL_MILLIS));\n            nodeA.start();\n\n            URI nodeGroupUri = UriUtils.buildUri(nodeA, ServiceUriPaths.DEFAULT_NODE_GROUP, null);\n\n            TestRequestSender sender = new TestRequestSender(nodeA);\n            Operation op = Operation.createGet(nodeGroupUri)\n                    .setReferer(nodeA.getUri());\n\n            NodeGroupState nodeGroupState = sender.sendAndWait(op, NodeGroupState.class);\n\n            assertEquals(1, nodeGroupState.nodes.size());\n            assertEquals(1, nodeGroupState.nodes.values().iterator().next().membershipQuorum);\n        } finally {\n            tmpFolderA.delete();\n            nodeA.stop();\n        }\n    }", "signature": "void recognizeSelfInPeerNodesByPublicUri()", "full_signature": "@Test public void recognizeSelfInPeerNodesByPublicUri()", "class_method_signature": "TestNodeGroupService.recognizeSelfInPeerNodesByPublicUri()", "testcase": true, "constructor": false, "invocations": ["incrementAndGet", "getDeclaredField", "setAccessible", "get", "getPort", "create", "getPort", "getInitialPeerHosts", "create", "getAbsolutePath", "getRoot", "initialize", "setMaintenanceIntervalMicros", "toMicros", "start", "buildUri", "setReferer", "createGet", "getUri", "sendAndWait", "assertEquals", "size", "assertEquals", "next", "iterator", "values", "delete", "stop"]}, "focal_class": {"identifier": "NodeGroupService", "superclass": "extends StatefulService", "interfaces": "", "fields": [{"original_string": "public static final String STAT_NAME_JOIN_RETRY_COUNT = \"joinRetryCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_JOIN_RETRY_COUNT = \"joinRetryCount\"", "var_name": "STAT_NAME_JOIN_RETRY_COUNT"}, {"original_string": "public static final long PEER_REQUEST_TIMEOUT_MICROS = XenonConfiguration.integer(\n            NodeGroupService.class,\n            \"peerRequestTimeoutMicros\",\n            ServiceHostState.DEFAULT_OPERATION_TIMEOUT_MICROS / 3\n    );", "modifier": "public static final", "type": "long", "declarator": "PEER_REQUEST_TIMEOUT_MICROS = XenonConfiguration.integer(\n            NodeGroupService.class,\n            \"peerRequestTimeoutMicros\",\n            ServiceHostState.DEFAULT_OPERATION_TIMEOUT_MICROS / 3\n    )", "var_name": "PEER_REQUEST_TIMEOUT_MICROS"}, {"original_string": "public static final int MIN_PEER_GOSSIP_COUNT = 10;", "modifier": "public static final", "type": "int", "declarator": "MIN_PEER_GOSSIP_COUNT = 10", "var_name": "MIN_PEER_GOSSIP_COUNT"}, {"original_string": "public static final String STAT_NAME_RESTARTING_SERVICES_COUNT = \"restartingServicesCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_RESTARTING_SERVICES_COUNT = \"restartingServicesCount\"", "var_name": "STAT_NAME_RESTARTING_SERVICES_COUNT"}, {"original_string": "public static final String STAT_NAME_RESTARTING_SERVICES_FAILURE_COUNT = \"restartingServicesFailureCount\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_RESTARTING_SERVICES_FAILURE_COUNT = \"restartingServicesFailureCount\"", "var_name": "STAT_NAME_RESTARTING_SERVICES_FAILURE_COUNT"}, {"original_string": "public static final String STAT_NAME_PREFIX_GOSSIP_PATCH_DURATION = \"GossipPatchDurationMicros\";", "modifier": "public static final", "type": "String", "declarator": "STAT_NAME_PREFIX_GOSSIP_PATCH_DURATION = \"GossipPatchDurationMicros\"", "var_name": "STAT_NAME_PREFIX_GOSSIP_PATCH_DURATION"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}, {"original_string": "private URI publicUri;", "modifier": "private", "type": "URI", "declarator": "publicUri", "var_name": "publicUri"}, {"original_string": "private NodeGroupState cachedState;", "modifier": "private", "type": "NodeGroupState", "declarator": "cachedState", "var_name": "cachedState"}], "methods": [{"identifier": "NodeGroupService", "parameters": "()", "modifiers": "public", "return": "", "signature": " NodeGroupService()", "full_signature": "public  NodeGroupService()", "class_method_signature": "NodeGroupService.NodeGroupService()", "testcase": false, "constructor": true}, {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "NodeGroupService.getUri()", "testcase": false, "constructor": false}, {"identifier": "getPublicUri", "parameters": "()", "modifiers": "private", "return": "URI", "signature": "URI getPublicUri()", "full_signature": "private URI getPublicUri()", "class_method_signature": "NodeGroupService.getPublicUri()", "testcase": false, "constructor": false}, {"identifier": "handleStart", "parameters": "(Operation startPost)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation startPost)", "full_signature": "@Override public void handleStart(Operation startPost)", "class_method_signature": "NodeGroupService.handleStart(Operation startPost)", "testcase": false, "constructor": false}, {"identifier": "handleGet", "parameters": "(Operation get)", "modifiers": "@Override public", "return": "void", "signature": "void handleGet(Operation get)", "full_signature": "@Override public void handleGet(Operation get)", "class_method_signature": "NodeGroupService.handleGet(Operation get)", "testcase": false, "constructor": false}, {"identifier": "handlePatch", "parameters": "(Operation patch)", "modifiers": "@Override public", "return": "void", "signature": "void handlePatch(Operation patch)", "full_signature": "@Override public void handlePatch(Operation patch)", "class_method_signature": "NodeGroupService.handlePatch(Operation patch)", "testcase": false, "constructor": false}, {"identifier": "handleUpdateQuorumPatch", "parameters": "(Operation patch,\n            NodeGroupState localState)", "modifiers": "private", "return": "void", "signature": "void handleUpdateQuorumPatch(Operation patch,\n            NodeGroupState localState)", "full_signature": "private void handleUpdateQuorumPatch(Operation patch,\n            NodeGroupState localState)", "class_method_signature": "NodeGroupService.handleUpdateQuorumPatch(Operation patch,\n            NodeGroupState localState)", "testcase": false, "constructor": false}, {"identifier": "handlePost", "parameters": "(Operation post)", "modifiers": "@RouteDocumentation( description = \"Join a peer to this node group\", requestBodyType = JoinPeerRequest.class) @Override public", "return": "void", "signature": "void handlePost(Operation post)", "full_signature": "@RouteDocumentation( description = \"Join a peer to this node group\", requestBodyType = JoinPeerRequest.class) @Override public void handlePost(Operation post)", "class_method_signature": "NodeGroupService.handlePost(Operation post)", "testcase": false, "constructor": false}, {"identifier": "handleJoinPost", "parameters": "(JoinPeerRequest joinBody,\n            Operation joinOp,\n            long expirationMicros,\n            NodeGroupState localState,\n            NodeGroupState remotePeerState)", "modifiers": "private", "return": "void", "signature": "void handleJoinPost(JoinPeerRequest joinBody,\n            Operation joinOp,\n            long expirationMicros,\n            NodeGroupState localState,\n            NodeGroupState remotePeerState)", "full_signature": "private void handleJoinPost(JoinPeerRequest joinBody,\n            Operation joinOp,\n            long expirationMicros,\n            NodeGroupState localState,\n            NodeGroupState remotePeerState)", "class_method_signature": "NodeGroupService.handleJoinPost(JoinPeerRequest joinBody,\n            Operation joinOp,\n            long expirationMicros,\n            NodeGroupState localState,\n            NodeGroupState remotePeerState)", "testcase": false, "constructor": false}, {"identifier": "handleJoinFailure", "parameters": "(Throwable e, JoinPeerRequest joinBody,\n            NodeGroupState localState,\n            long expirationMicros)", "modifiers": "private", "return": "void", "signature": "void handleJoinFailure(Throwable e, JoinPeerRequest joinBody,\n            NodeGroupState localState,\n            long expirationMicros)", "full_signature": "private void handleJoinFailure(Throwable e, JoinPeerRequest joinBody,\n            NodeGroupState localState,\n            long expirationMicros)", "class_method_signature": "NodeGroupService.handleJoinFailure(Throwable e, JoinPeerRequest joinBody,\n            NodeGroupState localState,\n            long expirationMicros)", "testcase": false, "constructor": false}, {"identifier": "validateNodeOptions", "parameters": "(Operation joinOp, EnumSet<NodeOption> options)", "modifiers": "private", "return": "boolean", "signature": "boolean validateNodeOptions(Operation joinOp, EnumSet<NodeOption> options)", "full_signature": "private boolean validateNodeOptions(Operation joinOp, EnumSet<NodeOption> options)", "class_method_signature": "NodeGroupService.validateNodeOptions(Operation joinOp, EnumSet<NodeOption> options)", "testcase": false, "constructor": false}, {"identifier": "sendAvailableSelfPatch", "parameters": "(NodeState local)", "modifiers": "private", "return": "void", "signature": "void sendAvailableSelfPatch(NodeState local)", "full_signature": "private void sendAvailableSelfPatch(NodeState local)", "class_method_signature": "NodeGroupService.sendAvailableSelfPatch(NodeState local)", "testcase": false, "constructor": false}, {"identifier": "buildLocalNodeState", "parameters": "(NodeState body)", "modifiers": "private", "return": "NodeState", "signature": "NodeState buildLocalNodeState(NodeState body)", "full_signature": "private NodeState buildLocalNodeState(NodeState body)", "class_method_signature": "NodeGroupService.buildLocalNodeState(NodeState body)", "testcase": false, "constructor": false}, {"identifier": "handleMaintenance", "parameters": "(Operation maint)", "modifiers": "@Override public", "return": "void", "signature": "void handleMaintenance(Operation maint)", "full_signature": "@Override public void handleMaintenance(Operation maint)", "class_method_signature": "NodeGroupService.handleMaintenance(Operation maint)", "testcase": false, "constructor": false}, {"identifier": "handleGossipPatchCompletion", "parameters": "(long sendTimeMicros, Operation maint, Operation patch,\n            Throwable e,\n            NodeGroupState localState, NodeGroupState patchBody, AtomicInteger remaining,\n            NodeState remotePeer)", "modifiers": "public", "return": "void", "signature": "void handleGossipPatchCompletion(long sendTimeMicros, Operation maint, Operation patch,\n            Throwable e,\n            NodeGroupState localState, NodeGroupState patchBody, AtomicInteger remaining,\n            NodeState remotePeer)", "full_signature": "public void handleGossipPatchCompletion(long sendTimeMicros, Operation maint, Operation patch,\n            Throwable e,\n            NodeGroupState localState, NodeGroupState patchBody, AtomicInteger remaining,\n            NodeState remotePeer)", "class_method_signature": "NodeGroupService.handleGossipPatchCompletion(long sendTimeMicros, Operation maint, Operation patch,\n            Throwable e,\n            NodeGroupState localState, NodeGroupState patchBody, AtomicInteger remaining,\n            NodeState remotePeer)", "testcase": false, "constructor": false}, {"identifier": "updateGossipPatchStat", "parameters": "(long sendTimeMicros, NodeState remotePeer)", "modifiers": "private", "return": "void", "signature": "void updateGossipPatchStat(long sendTimeMicros, NodeState remotePeer)", "full_signature": "private void updateGossipPatchStat(long sendTimeMicros, NodeState remotePeer)", "class_method_signature": "NodeGroupService.updateGossipPatchStat(long sendTimeMicros, NodeState remotePeer)", "testcase": false, "constructor": false}, {"identifier": "mergeRemoteAndLocalMembership", "parameters": "(\n            NodeGroupState localState,\n            NodeGroupState remotePeerState,\n            EnumSet<NodeGroupChange> changes)", "modifiers": "private", "return": "void", "signature": "void mergeRemoteAndLocalMembership(\n            NodeGroupState localState,\n            NodeGroupState remotePeerState,\n            EnumSet<NodeGroupChange> changes)", "full_signature": "private void mergeRemoteAndLocalMembership(\n            NodeGroupState localState,\n            NodeGroupState remotePeerState,\n            EnumSet<NodeGroupChange> changes)", "class_method_signature": "NodeGroupService.mergeRemoteAndLocalMembership(\n            NodeGroupState localState,\n            NodeGroupState remotePeerState,\n            EnumSet<NodeGroupChange> changes)", "testcase": false, "constructor": false}, {"identifier": "shuffleGroupMembers", "parameters": "(NodeGroupState localState)", "modifiers": "private", "return": "List<NodeState>", "signature": "List<NodeState> shuffleGroupMembers(NodeGroupState localState)", "full_signature": "private List<NodeState> shuffleGroupMembers(NodeGroupState localState)", "class_method_signature": "NodeGroupService.shuffleGroupMembers(NodeGroupState localState)", "testcase": false, "constructor": false}, {"identifier": "getStateFromBody", "parameters": "(Operation o)", "modifiers": "private", "return": "NodeGroupState", "signature": "NodeGroupState getStateFromBody(Operation o)", "full_signature": "private NodeGroupState getStateFromBody(Operation o)", "class_method_signature": "NodeGroupService.getStateFromBody(Operation o)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/NodeGroupService.java"}, "focal_method": {"identifier": "getUri", "parameters": "()", "modifiers": "@Override public", "return": "URI", "body": "@Override\n    public URI getUri() {\n        if (this.uri == null) {\n            this.uri = super.getUri();\n        }\n        return this.uri;\n    }", "signature": "URI getUri()", "full_signature": "@Override public URI getUri()", "class_method_signature": "NodeGroupService.getUri()", "testcase": false, "constructor": false, "invocations": ["getUri"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}