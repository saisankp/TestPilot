{"test_class": {"identifier": "AnnotationHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "zuchini-junit/src/test/java/org/zuchini/junit/description/AnnotationHandlerTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() {\n        Feature feature1 = createFeature();\n        Feature feature2 = createFeature();\n\n        FeatureInfo featureInfo1 = AnnotationHandler.create(FeatureInfo.class, feature1);\n        FeatureInfo featureInfo2 = AnnotationHandler.create(FeatureInfo.class, feature2);\n\n        Set<FeatureInfo> set = new HashSet<>();\n        set.add(featureInfo1);\n\n        Assert.assertTrue(set.contains(featureInfo1));\n        Assert.assertTrue(set.contains(featureInfo2));\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "AnnotationHandlerTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["createFeature", "createFeature", "create", "create", "add", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "AnnotationHandler", "superclass": "", "interfaces": "implements InvocationHandler", "fields": [{"original_string": "private static final Object[] EMPTY_ARGS = {};", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY_ARGS = {}", "var_name": "EMPTY_ARGS"}, {"original_string": "private static final Set<Class<?>> ATOMIC_TYPES = new HashSet<Class<?>>(asList(\n            Byte.TYPE, Short.TYPE, Character.TYPE, Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE,\n            Byte.class, Short.class, Character.class, Integer.class, Long.class, Float.class, Double.class,\n            String.class));", "modifier": "private static final", "type": "Set<Class<?>>", "declarator": "ATOMIC_TYPES = new HashSet<Class<?>>(asList(\n            Byte.TYPE, Short.TYPE, Character.TYPE, Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE,\n            Byte.class, Short.class, Character.class, Integer.class, Long.class, Float.class, Double.class,\n            String.class))", "var_name": "ATOMIC_TYPES"}, {"original_string": "private final Class<? extends Annotation> annotationType;", "modifier": "private final", "type": "Class<? extends Annotation>", "declarator": "annotationType", "var_name": "annotationType"}, {"original_string": "private final Object bean;", "modifier": "private final", "type": "Object", "declarator": "bean", "var_name": "bean"}], "methods": [{"identifier": "AnnotationHandler", "parameters": "(Class<? extends Annotation> annotationType, Object bean)", "modifiers": "private", "return": "", "signature": " AnnotationHandler(Class<? extends Annotation> annotationType, Object bean)", "full_signature": "private  AnnotationHandler(Class<? extends Annotation> annotationType, Object bean)", "class_method_signature": "AnnotationHandler.AnnotationHandler(Class<? extends Annotation> annotationType, Object bean)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(Class<T> annotationType, Object bean)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T create(Class<T> annotationType, Object bean)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T create(Class<T> annotationType, Object bean)", "class_method_signature": "AnnotationHandler.create(Class<T> annotationType, Object bean)", "testcase": false, "constructor": false}, {"identifier": "castToAnnotationType", "parameters": "(Class<?> type)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Class<? extends Annotation>", "signature": "Class<? extends Annotation> castToAnnotationType(Class<?> type)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Class<? extends Annotation> castToAnnotationType(Class<?> type)", "class_method_signature": "AnnotationHandler.castToAnnotationType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "AnnotationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "annotationEquals", "parameters": "(Object proxy, Object other)", "modifiers": "public", "return": "boolean", "signature": "boolean annotationEquals(Object proxy, Object other)", "full_signature": "public boolean annotationEquals(Object proxy, Object other)", "class_method_signature": "AnnotationHandler.annotationEquals(Object proxy, Object other)", "testcase": false, "constructor": false}, {"identifier": "annotationHashCode", "parameters": "(Object proxy)", "modifiers": "public", "return": "int", "signature": "int annotationHashCode(Object proxy)", "full_signature": "public int annotationHashCode(Object proxy)", "class_method_signature": "AnnotationHandler.annotationHashCode(Object proxy)", "testcase": false, "constructor": false}, {"identifier": "annotationToString", "parameters": "(Object proxy)", "modifiers": "public", "return": "String", "signature": "String annotationToString(Object proxy)", "full_signature": "public String annotationToString(Object proxy)", "class_method_signature": "AnnotationHandler.annotationToString(Object proxy)", "testcase": false, "constructor": false}], "file": "zuchini-junit/src/main/java/org/zuchini/junit/description/AnnotationHandler.java"}, "focal_method": {"identifier": "create", "parameters": "(Class<T> annotationType, Object bean)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T extends Annotation> T create(Class<T> annotationType, Object bean) {\n        return (T) Proxy.newProxyInstance(annotationType.getClassLoader(), new Class<?>[]{annotationType},\n                new AnnotationHandler(annotationType, bean));\n    }", "signature": "T create(Class<T> annotationType, Object bean)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T create(Class<T> annotationType, Object bean)", "class_method_signature": "AnnotationHandler.create(Class<T> annotationType, Object bean)", "testcase": false, "constructor": false, "invocations": ["newProxyInstance", "getClassLoader"]}, "repository": {"repo_id": 25434873, "url": "https://github.com/jhorstmann/zuchini", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 339, "license": "licensed"}}