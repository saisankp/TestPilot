{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testByteAraryToPostive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testByteAraryToPostive() {\n    final Object[][] testParameters = new Object[][] {\n        {new byte[0], BigInteger.ZERO},\n        {new byte[] {(byte) 0x00}, BigInteger.valueOf(0L)},\n        {new byte[] {(byte) 0x7F}, BigInteger.valueOf(127L)},\n        {new byte[] {(byte) 0xFF}, BigInteger.valueOf(255L)}\n    };\n\n    for (final Object[] testParameter : testParameters) {\n      final byte[] rawBytes = (byte[]) testParameter[0];\n      final BigInteger expected = (BigInteger) testParameter[1];\n      final BigInteger actual = NumberUtils.byteArrayToPositive(rawBytes);\n      assertTrue(expected.equals(actual));\n    }\n  }", "signature": "void testByteAraryToPostive()", "full_signature": "@Test public void testByteAraryToPostive()", "class_method_signature": "NumberUtilsTest.testByteAraryToPostive()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "byteArrayToPositive", "assertTrue", "equals"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "throwOverflowException", "parameters": "(final Number number, final Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void throwOverflowException(final Number number, final Class<?> targetClass)", "full_signature": "private static void throwOverflowException(final Number number, final Class<?> targetClass)", "class_method_signature": "NumberUtils.throwOverflowException(final Number number, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "modifiers": "public static", "return": "T", "signature": "T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "full_signature": "public static T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "class_method_signature": "NumberUtils.parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/NumberUtils.java"}, "focal_method": {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger byteArrayToPositive(final byte[] rawBytes) {\n    if (null == rawBytes || rawBytes.length == 0) {\n      return BigInteger.ZERO;\n    }\n\n    byte[] canonicalBytes = rawBytes;\n    if ((rawBytes[0] & 0x80) != 0) {\n      canonicalBytes = new byte[rawBytes.length + 1];\n      canonicalBytes[0] = 0x00;\n      System.arraycopy(rawBytes, 0, canonicalBytes, 1, rawBytes.length);\n    }\n    return new BigInteger(canonicalBytes);\n  }", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false, "invocations": ["arraycopy"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}