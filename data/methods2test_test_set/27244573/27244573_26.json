{"test_class": {"identifier": "TextToolsTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/hwyl/sexytopo/control/util/TextToolsTest.java"}, "test_case": {"identifier": "testAdvanceLastNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdvanceLastNumber() {\n        String advanced = TextTools.advanceLastNumber(\"S1\");\n        Assert.assertEquals(\"S2\", advanced);\n    }", "signature": "void testAdvanceLastNumber()", "full_signature": "@Test public void testAdvanceLastNumber()", "class_method_signature": "TextToolsTest.testAdvanceLastNumber()", "testcase": true, "constructor": false, "invocations": ["advanceLastNumber", "assertEquals"]}, "focal_class": {"identifier": "TextTools", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static DecimalFormat dp0WithCommaFormatter = new DecimalFormat(\"#,##0\");", "modifier": "final static", "type": "DecimalFormat", "declarator": "dp0WithCommaFormatter = new DecimalFormat(\"#,##0\")", "var_name": "dp0WithCommaFormatter"}, {"original_string": "final static DecimalFormat dp2WithCommaFormatter = new DecimalFormat(\"#,##0.00\");", "modifier": "final static", "type": "DecimalFormat", "declarator": "dp2WithCommaFormatter = new DecimalFormat(\"#,##0.00\")", "var_name": "dp2WithCommaFormatter"}, {"original_string": "final static DecimalFormat dp2WithoutCommaFormatter = new DecimalFormat(\"##0.00\");", "modifier": "final static", "type": "DecimalFormat", "declarator": "dp2WithoutCommaFormatter = new DecimalFormat(\"##0.00\")", "var_name": "dp2WithoutCommaFormatter"}, {"original_string": "final static DecimalFormat dp2WithoutCommaFormatterUk =\n        new DecimalFormat(\"##0.00\", new DecimalFormatSymbols(Locale.UK));", "modifier": "final static", "type": "DecimalFormat", "declarator": "dp2WithoutCommaFormatterUk =\n        new DecimalFormat(\"##0.00\", new DecimalFormatSymbols(Locale.UK))", "var_name": "dp2WithoutCommaFormatterUk"}, {"original_string": "public final static DateFormat ISO_DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\");", "modifier": "public final static", "type": "DateFormat", "declarator": "ISO_DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd\")", "var_name": "ISO_DATE_FORMAT"}], "methods": [{"identifier": "pluralise", "parameters": "(int n, String noun)", "modifiers": "public static", "return": "String", "signature": "String pluralise(int n, String noun)", "full_signature": "public static String pluralise(int n, String noun)", "class_method_signature": "TextTools.pluralise(int n, String noun)", "testcase": false, "constructor": false}, {"identifier": "joinAll", "parameters": "(String joiner, Object ... list)", "modifiers": "public static", "return": "String", "signature": "String joinAll(String joiner, Object ... list)", "full_signature": "public static String joinAll(String joiner, Object ... list)", "class_method_signature": "TextTools.joinAll(String joiner, Object ... list)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String joiner, Object ... items)", "modifiers": "public static", "return": "String", "signature": "String join(String joiner, Object ... items)", "full_signature": "public static String join(String joiner, Object ... items)", "class_method_signature": "TextTools.join(String joiner, Object ... items)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String joiner, List<?> list)", "modifiers": "public static", "return": "String", "signature": "String join(String joiner, List<?> list)", "full_signature": "public static String join(String joiner, List<?> list)", "class_method_signature": "TextTools.join(String joiner, List<?> list)", "testcase": false, "constructor": false}, {"identifier": "formatWithComma", "parameters": "(Integer number)", "modifiers": "public static", "return": "String", "signature": "String formatWithComma(Integer number)", "full_signature": "public static String formatWithComma(Integer number)", "class_method_signature": "TextTools.formatWithComma(Integer number)", "testcase": false, "constructor": false}, {"identifier": "formatTo2dpWithComma", "parameters": "(Number number)", "modifiers": "public static", "return": "String", "signature": "String formatTo2dpWithComma(Number number)", "full_signature": "public static String formatTo2dpWithComma(Number number)", "class_method_signature": "TextTools.formatTo2dpWithComma(Number number)", "testcase": false, "constructor": false}, {"identifier": "formatTo2dp", "parameters": "(Number number)", "modifiers": "public static", "return": "String", "signature": "String formatTo2dp(Number number)", "full_signature": "public static String formatTo2dp(Number number)", "class_method_signature": "TextTools.formatTo2dp(Number number)", "testcase": false, "constructor": false}, {"identifier": "formatTo2dpWithDot", "parameters": "(Number number)", "modifiers": "public static", "return": "String", "signature": "String formatTo2dpWithDot(Number number)", "full_signature": "public static String formatTo2dpWithDot(Number number)", "class_method_signature": "TextTools.formatTo2dpWithDot(Number number)", "testcase": false, "constructor": false}, {"identifier": "formatTo0dpWithComma", "parameters": "(Number number)", "modifiers": "public static", "return": "String", "signature": "String formatTo0dpWithComma(Number number)", "full_signature": "public static String formatTo0dpWithComma(Number number)", "class_method_signature": "TextTools.formatTo0dpWithComma(Number number)", "testcase": false, "constructor": false}, {"identifier": "advanceLastNumber", "parameters": "(String originatingName)", "modifiers": "public static", "return": "String", "signature": "String advanceLastNumber(String originatingName)", "full_signature": "public static String advanceLastNumber(String originatingName)", "class_method_signature": "TextTools.advanceLastNumber(String originatingName)", "testcase": false, "constructor": false}, {"identifier": "toArrayOfLines", "parameters": "(String text)", "modifiers": "public static", "return": "String[]", "signature": "String[] toArrayOfLines(String text)", "full_signature": "public static String[] toArrayOfLines(String text)", "class_method_signature": "TextTools.toArrayOfLines(String text)", "testcase": false, "constructor": false}, {"identifier": "toIsoDate", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String toIsoDate(Date date)", "full_signature": "public static String toIsoDate(Date date)", "class_method_signature": "TextTools.toIsoDate(Date date)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/hwyl/sexytopo/control/util/TextTools.java"}, "focal_method": {"identifier": "advanceLastNumber", "parameters": "(String originatingName)", "modifiers": "public static", "return": "String", "body": "public static String advanceLastNumber(String originatingName) {\n\n\n        if (originatingName.length() == 0) {\n            return \"1\";\n        }\n\n        int lastDigitChar = -1;\n        int firstDigitChar = -1;\n\n        for (int i = originatingName.length() - 1; i >= 0; i--) {\n            char c = originatingName.charAt(i);\n\n\n            if (lastDigitChar == -1 && Character.isDigit(c)) {\n                lastDigitChar = i;\n            }\n\n            if (Character.isDigit(c)) {\n                firstDigitChar = i;\n            }\n\n            if (! Character.isDigit(c) && firstDigitChar > -1) {\n                break;\n            }\n        }\n\n        if (lastDigitChar == -1) {\n            return originatingName + \"1\";\n        } else {\n            String oldDigitString = originatingName.substring(firstDigitChar, lastDigitChar + 1);\n            Integer oldValue = Integer.parseInt(oldDigitString);\n            Integer newValue = oldValue + 1;\n            String newDigitString = newValue.toString();\n            int lengthDifference = oldDigitString.length() - newDigitString.length();\n            if (lengthDifference > 0) {\n                String zeroPadding = new String(new char[lengthDifference]).replace(\"\\0\", \"0\");\n                newDigitString = zeroPadding + newDigitString;\n            }\n            String firstPart = originatingName.substring(0, firstDigitChar);\n            String lastPart = originatingName.substring(lastDigitChar + 1);\n            return firstPart + newDigitString + lastPart;\n        }\n    }", "signature": "String advanceLastNumber(String originatingName)", "full_signature": "public static String advanceLastNumber(String originatingName)", "class_method_signature": "TextTools.advanceLastNumber(String originatingName)", "testcase": false, "constructor": false, "invocations": ["length", "length", "charAt", "isDigit", "isDigit", "isDigit", "substring", "parseInt", "toString", "length", "length", "replace", "substring", "substring"]}, "repository": {"repo_id": 27244573, "url": "https://github.com/richsmith/sexytopo", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 15, "size": 83635, "license": "licensed"}}