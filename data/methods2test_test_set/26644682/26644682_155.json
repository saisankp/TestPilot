{"test_class": {"identifier": "ReorderStepsUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReorderStepsUtils reorderStepsUtils = new ReorderStepsUtils();", "modifier": "private", "type": "ReorderStepsUtils", "declarator": "reorderStepsUtils = new ReorderStepsUtils()", "var_name": "reorderStepsUtils"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/service/ReorderStepsUtilsTest.java"}, "test_case": {"identifier": "renameCreatedColumns_reorderCorrectlyColumnIdsAndUpdateRefs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void renameCreatedColumns_reorderCorrectlyColumnIdsAndUpdateRefs() throws Exception {\n        List<AppendStep> steps = new ArrayList<>();\n\n        AppendStep firstStep = createAppendStep(\"0002\", singletonList(\"0004\"));\n        steps.add(firstStep);\n        AppendStep secondStep = createAppendStep(\"0002\", singletonList(\"0003\"));\n        steps.add(secondStep);\n        AppendStep thirdStep = createAppendStep(\"0003\", emptyList());\n        steps.add(thirdStep);\n\n        reorderStepsUtils.renameCreatedColumns(steps);\n\n        assertEquals(\"0003\", firstStep.getDiff().getCreatedColumns().iterator().next());\n        assertEquals(\"0004\", secondStep.getDiff().getCreatedColumns().iterator().next());\n        assertEquals(\"0004\",\n                thirdStep.getActions().iterator().next().getParameters().get(ImplicitParameters.COLUMN_ID.getKey()));\n    }", "signature": "void renameCreatedColumns_reorderCorrectlyColumnIdsAndUpdateRefs()", "full_signature": "@Test public void renameCreatedColumns_reorderCorrectlyColumnIdsAndUpdateRefs()", "class_method_signature": "ReorderStepsUtilsTest.renameCreatedColumns_reorderCorrectlyColumnIdsAndUpdateRefs()", "testcase": true, "constructor": false, "invocations": ["createAppendStep", "singletonList", "add", "createAppendStep", "singletonList", "add", "createAppendStep", "emptyList", "add", "renameCreatedColumns", "assertEquals", "next", "iterator", "getCreatedColumns", "getDiff", "assertEquals", "next", "iterator", "getCreatedColumns", "getDiff", "assertEquals", "get", "getParameters", "next", "iterator", "getActions", "getKey"]}, "focal_class": {"identifier": "ReorderStepsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String COLUMN_IDS = \"column_ids\";", "modifier": "protected static final", "type": "String", "declarator": "COLUMN_IDS = \"column_ids\"", "var_name": "COLUMN_IDS"}], "methods": [{"identifier": "isStepOrderInvalid", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "boolean", "signature": "boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "full_signature": " boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.isStepOrderInvalid(List<AppendStep> appendSteps)", "testcase": false, "constructor": false}, {"identifier": "renameCreatedColumns", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "void", "signature": "void renameCreatedColumns(List<AppendStep> appendSteps)", "full_signature": " void renameCreatedColumns(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.renameCreatedColumns(List<AppendStep> appendSteps)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/service/ReorderStepsUtils.java"}, "focal_method": {"identifier": "renameCreatedColumns", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "void", "body": "void renameCreatedColumns(List<AppendStep> appendSteps) {\n\n        final List<String> createdColumns = appendSteps\n                .stream()\n                .flatMap(step -> step.getDiff().getCreatedColumns().stream())\n                .collect(Collectors.toList());\n\n        if (createdColumns.isEmpty()) {\n            return;\n        }\n\n        //retrieve the minimum index\n        final int firstIndex = Integer.parseInt(createdColumns.stream().min(String::compareTo).get());\n\n        // map old created column names to the new ones\n        final DecimalFormat format = new DecimalFormat(\"0000\");\n        Map<String, String> rename = new HashMap<>();\n        IntStream.range(0, createdColumns.size()).forEach(i -> {\n            rename.put(createdColumns.get(i), format.format(i + firstIndex));\n        });\n\n        // walk over the list of append steps and change names (id) of created columns\n        appendSteps.stream().forEach(step -> {\n            // first for created columns\n            List<String> renamedCreatedColumns = step.getDiff().getCreatedColumns().stream().map(s -> {\n                if (rename.containsKey(s)) {\n                    return rename.get(s);\n                } else {\n                    return s;\n                }\n            }).collect(Collectors.toList());\n\n            // then within actions\n            step.getDiff().setCreatedColumns(renamedCreatedColumns);\n            for (Action action : step.getActions()) {\n                final Map<String, String> parameters = action.getParameters();\n                final String columnId = parameters.get(ImplicitParameters.COLUMN_ID.getKey());\n\n                if (rename.containsKey(columnId)) {\n                    parameters.put(ImplicitParameters.COLUMN_ID.getKey(), rename.get(columnId));\n                }\n            }\n        });\n    }", "signature": "void renameCreatedColumns(List<AppendStep> appendSteps)", "full_signature": " void renameCreatedColumns(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.renameCreatedColumns(List<AppendStep> appendSteps)", "testcase": false, "constructor": false, "invocations": ["collect", "flatMap", "stream", "stream", "getCreatedColumns", "getDiff", "toList", "isEmpty", "parseInt", "get", "min", "stream", "forEach", "range", "size", "put", "get", "format", "forEach", "stream", "collect", "map", "stream", "getCreatedColumns", "getDiff", "containsKey", "get", "toList", "setCreatedColumns", "getDiff", "getActions", "getParameters", "get", "getKey", "containsKey", "put", "getKey", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}