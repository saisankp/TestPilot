{"test_class": {"identifier": "SnapshotEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SnapshotEngine e = new SnapshotEngine(new StorageDirect(Volume.memoryFactory(false)));", "modifier": "", "type": "SnapshotEngine", "declarator": "e = new SnapshotEngine(new StorageDirect(Volume.memoryFactory(false)))", "var_name": "e"}], "file": "migration/third-party/org.mapdb/src/test/java/org/mapdb/SnapshotEngineTest.java"}, "test_case": {"identifier": "create_snapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void create_snapshot(){\n        Engine e = DBMaker.newMemoryDB().makeEngine();\n        Engine snapshot = SnapshotEngine.createSnapshotFor(e);\n        assertNotNull(snapshot);\n    }", "signature": "void create_snapshot()", "full_signature": "@Test public void create_snapshot()", "class_method_signature": "SnapshotEngineTest.create_snapshot()", "testcase": true, "constructor": false, "invocations": ["makeEngine", "newMemoryDB", "createSnapshotFor", "assertNotNull"]}, "focal_class": {"identifier": "SnapshotEngine", "superclass": "extends EngineWrapper", "interfaces": "", "fields": [{"original_string": "protected final Locks.RecidLocks locks = new Locks.LongHashMapRecidLocks();", "modifier": "protected final", "type": "Locks.RecidLocks", "declarator": "locks = new Locks.LongHashMapRecidLocks()", "var_name": "locks"}, {"original_string": "protected final static Object NOT_EXIST = new Object();", "modifier": "protected final static", "type": "Object", "declarator": "NOT_EXIST = new Object()", "var_name": "NOT_EXIST"}, {"original_string": "protected final static Object NOT_INIT_YET = new Object();", "modifier": "protected final static", "type": "Object", "declarator": "NOT_INIT_YET = new Object()", "var_name": "NOT_INIT_YET"}, {"original_string": "protected final Map<Snapshot, String> snapshots = new ConcurrentHashMap<Snapshot, String>();", "modifier": "protected final", "type": "Map<Snapshot, String>", "declarator": "snapshots = new ConcurrentHashMap<Snapshot, String>()", "var_name": "snapshots"}, {"original_string": "protected final ReentrantReadWriteLock snapshotsLock = new ReentrantReadWriteLock();", "modifier": "protected final", "type": "ReentrantReadWriteLock", "declarator": "snapshotsLock = new ReentrantReadWriteLock()", "var_name": "snapshotsLock"}], "methods": [{"identifier": "SnapshotEngine", "parameters": "(Engine engine)", "modifiers": "protected", "return": "", "signature": " SnapshotEngine(Engine engine)", "full_signature": "protected  SnapshotEngine(Engine engine)", "class_method_signature": "SnapshotEngine.SnapshotEngine(Engine engine)", "testcase": false, "constructor": true}, {"identifier": "snapshot", "parameters": "()", "modifiers": "public", "return": "Engine", "signature": "Engine snapshot()", "full_signature": "public Engine snapshot()", "class_method_signature": "SnapshotEngine.snapshot()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(A value, Serializer<A> serializer)", "modifiers": "@Override public", "return": "long", "signature": "long put(A value, Serializer<A> serializer)", "full_signature": "@Override public long put(A value, Serializer<A> serializer)", "class_method_signature": "SnapshotEngine.put(A value, Serializer<A> serializer)", "testcase": false, "constructor": false}, {"identifier": "compareAndSwap", "parameters": "(long recid, A expectedOldValue, A newValue, Serializer<A> serializer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compareAndSwap(long recid, A expectedOldValue, A newValue, Serializer<A> serializer)", "full_signature": "@Override public boolean compareAndSwap(long recid, A expectedOldValue, A newValue, Serializer<A> serializer)", "class_method_signature": "SnapshotEngine.compareAndSwap(long recid, A expectedOldValue, A newValue, Serializer<A> serializer)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(long recid, A value, Serializer<A> serializer)", "modifiers": "@Override public", "return": "void", "signature": "void update(long recid, A value, Serializer<A> serializer)", "full_signature": "@Override public void update(long recid, A value, Serializer<A> serializer)", "class_method_signature": "SnapshotEngine.update(long recid, A value, Serializer<A> serializer)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(long recid, Serializer<A> serializer)", "modifiers": "@Override public", "return": "void", "signature": "void delete(long recid, Serializer<A> serializer)", "full_signature": "@Override public void delete(long recid, Serializer<A> serializer)", "class_method_signature": "SnapshotEngine.delete(long recid, Serializer<A> serializer)", "testcase": false, "constructor": false}, {"identifier": "createSnapshotFor", "parameters": "(Engine engine)", "modifiers": "public static", "return": "Engine", "signature": "Engine createSnapshotFor(Engine engine)", "full_signature": "public static Engine createSnapshotFor(Engine engine)", "class_method_signature": "SnapshotEngine.createSnapshotFor(Engine engine)", "testcase": false, "constructor": false}], "file": "migration/third-party/org.mapdb/src/main/java/org/mapdb/SnapshotEngine.java"}, "focal_method": {"identifier": "createSnapshotFor", "parameters": "(Engine engine)", "modifiers": "public static", "return": "Engine", "body": "public static Engine createSnapshotFor(Engine engine) {\n        SnapshotEngine se = null;\n        while(true){\n            if(engine instanceof SnapshotEngine){\n                se = (SnapshotEngine) engine;\n                break;\n            }else if(engine instanceof EngineWrapper){\n                engine = ((EngineWrapper)engine).getWrappedEngine();\n            }else{\n                throw new IllegalArgumentException(\"Could not create Snapshot for Engine: \"+engine);\n            }\n        }\n\n        return se.snapshot();\n    }", "signature": "Engine createSnapshotFor(Engine engine)", "full_signature": "public static Engine createSnapshotFor(Engine engine)", "class_method_signature": "SnapshotEngine.createSnapshotFor(Engine engine)", "testcase": false, "constructor": false, "invocations": ["getWrappedEngine", "snapshot"]}, "repository": {"repo_id": 113878762, "url": "https://github.com/crossminer/scava", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 16, "size": 1903904, "license": "licensed"}}