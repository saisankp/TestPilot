{"test_class": {"identifier": "ArrivingKinematicAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private ArrivingKinematicAlgorithm arriving;", "modifier": "private", "type": "ArrivingKinematicAlgorithm", "declarator": "arriving", "var_name": "arriving"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/kinematic/ArrivingKinematicAlgorithmTest.java"}, "test_case": {"identifier": "calculate_close", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate_close() {\n\t\tassertFpVectorEquals(0, 0, this.arriving.calculate(new Point2d(6.1, 4.8), 3, 4, new Point2d(6, 5)));\n\t}", "signature": "void calculate_close()", "full_signature": "@Test public void calculate_close()", "class_method_signature": "ArrivingKinematicAlgorithmTest.calculate_close()", "testcase": true, "constructor": false, "invocations": ["assertFpVectorEquals", "calculate"]}, "focal_class": {"identifier": "ArrivingKinematicAlgorithm", "superclass": "", "interfaces": "implements ArrivingMotionAlgorithm, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}, {"original_string": "protected final double stopSquaredDistance;", "modifier": "protected final", "type": "double", "declarator": "stopSquaredDistance", "var_name": "stopSquaredDistance"}], "methods": [{"identifier": "ArrivingKinematicAlgorithm", "parameters": "(double stopDistance)", "modifiers": "public", "return": "", "signature": " ArrivingKinematicAlgorithm(double stopDistance)", "full_signature": "public  ArrivingKinematicAlgorithm(double stopDistance)", "class_method_signature": "ArrivingKinematicAlgorithm.ArrivingKinematicAlgorithm(double stopDistance)", "testcase": false, "constructor": true}, {"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "ArrivingKinematicAlgorithm", "signature": "ArrivingKinematicAlgorithm clone()", "full_signature": "@Pure @Override public ArrivingKinematicAlgorithm clone()", "class_method_signature": "ArrivingKinematicAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "ArrivingKinematicAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/kinematic/ArrivingKinematicAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "body": "@Override\n\tpublic Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target) {\n\t\tfinal Vector2d v = new Vector2d(\n\t\t\t\ttarget.getX() - position.getX(),\n\t\t\t\ttarget.getY() - position.getY());\n\t\tif (v.getLengthSquared() <= this.stopSquaredDistance) {\n\t\t\treturn new Vector2d();\n\t\t}\n\t\tv.setLength(maxLinearSpeed);\n\t\treturn v;\n\t}", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "ArrivingKinematicAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinearSpeed,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false, "invocations": ["getX", "getX", "getY", "getY", "getLengthSquared", "setLength"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}