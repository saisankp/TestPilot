{"test_class": {"identifier": "ThreePhaseCommitCohortProxyTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private ActorUtils actorUtils;", "modifier": "private", "type": "ActorUtils", "declarator": "actorUtils", "var_name": "actorUtils"}, {"original_string": "@Mock\n    private Timer commitTimer;", "modifier": "@Mock\n    private", "type": "Timer", "declarator": "commitTimer", "var_name": "commitTimer"}, {"original_string": "@Mock\n    private Timer.Context commitTimerContext;", "modifier": "@Mock\n    private", "type": "Timer.Context", "declarator": "commitTimerContext", "var_name": "commitTimerContext"}, {"original_string": "@Mock\n    private Snapshot commitSnapshot;", "modifier": "@Mock\n    private", "type": "Snapshot", "declarator": "commitSnapshot", "var_name": "commitSnapshot"}, {"original_string": "private final TestActorFactory actorFactory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "actorFactory = new TestActorFactory(getSystem())", "var_name": "actorFactory"}, {"original_string": "private final List<TestActorRef<CohortActor>> cohortActors = new ArrayList<>();", "modifier": "private final", "type": "List<TestActorRef<CohortActor>>", "declarator": "cohortActors = new ArrayList<>()", "var_name": "cohortActors"}, {"original_string": "private final TransactionIdentifier tx = nextTransactionId();", "modifier": "private final", "type": "TransactionIdentifier", "declarator": "tx = nextTransactionId()", "var_name": "tx"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/ThreePhaseCommitCohortProxyTest.java"}, "test_case": {"identifier": "testAbortWithFailedCohortFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAbortWithFailedCohortFuture() throws Exception {\n        List<CohortInfo> cohorts = Arrays.asList(\n                newCohortInfoWithFailedFuture(new TestException()), newCohortInfo(new CohortActor.Builder(tx)));\n        ThreePhaseCommitCohortProxy proxy = new ThreePhaseCommitCohortProxy(actorUtils, cohorts, tx);\n\n        verifySuccessfulFuture(proxy.abort());\n        verifyCohortActors();\n    }", "signature": "void testAbortWithFailedCohortFuture()", "full_signature": "@Test public void testAbortWithFailedCohortFuture()", "class_method_signature": "ThreePhaseCommitCohortProxyTest.testAbortWithFailedCohortFuture()", "testcase": true, "constructor": false, "invocations": ["asList", "newCohortInfoWithFailedFuture", "newCohortInfo", "verifySuccessfulFuture", "abort", "verifyCohortActors"]}, "focal_class": {"identifier": "ThreePhaseCommitCohortProxy", "superclass": "extends AbstractThreePhaseCommitCohort<ActorSelection>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ThreePhaseCommitCohortProxy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ThreePhaseCommitCohortProxy.class)", "var_name": "LOG"}, {"original_string": "private static final MessageSupplier COMMIT_MESSAGE_SUPPLIER = new MessageSupplier() {\n        @Override\n        public Object newMessage(final TransactionIdentifier transactionId, final short version) {\n            return new CommitTransaction(transactionId, version).toSerializable();\n        }\n\n        @Override\n        public boolean isSerializedReplyType(final Object reply) {\n            return CommitTransactionReply.isSerializedType(reply);\n        }\n    };", "modifier": "private static final", "type": "MessageSupplier", "declarator": "COMMIT_MESSAGE_SUPPLIER = new MessageSupplier() {\n        @Override\n        public Object newMessage(final TransactionIdentifier transactionId, final short version) {\n            return new CommitTransaction(transactionId, version).toSerializable();\n        }\n\n        @Override\n        public boolean isSerializedReplyType(final Object reply) {\n            return CommitTransactionReply.isSerializedType(reply);\n        }\n    }", "var_name": "COMMIT_MESSAGE_SUPPLIER"}, {"original_string": "private static final MessageSupplier ABORT_MESSAGE_SUPPLIER = new MessageSupplier() {\n        @Override\n        public Object newMessage(final TransactionIdentifier transactionId, final short version) {\n            return new AbortTransaction(transactionId, version).toSerializable();\n        }\n\n        @Override\n        public boolean isSerializedReplyType(final Object reply) {\n            return AbortTransactionReply.isSerializedType(reply);\n        }\n    };", "modifier": "private static final", "type": "MessageSupplier", "declarator": "ABORT_MESSAGE_SUPPLIER = new MessageSupplier() {\n        @Override\n        public Object newMessage(final TransactionIdentifier transactionId, final short version) {\n            return new AbortTransaction(transactionId, version).toSerializable();\n        }\n\n        @Override\n        public boolean isSerializedReplyType(final Object reply) {\n            return AbortTransactionReply.isSerializedType(reply);\n        }\n    }", "var_name": "ABORT_MESSAGE_SUPPLIER"}, {"original_string": "private final ActorUtils actorUtils;", "modifier": "private final", "type": "ActorUtils", "declarator": "actorUtils", "var_name": "actorUtils"}, {"original_string": "private final List<CohortInfo> cohorts;", "modifier": "private final", "type": "List<CohortInfo>", "declarator": "cohorts", "var_name": "cohorts"}, {"original_string": "private final SettableFuture<Void> cohortsResolvedFuture = SettableFuture.create();", "modifier": "private final", "type": "SettableFuture<Void>", "declarator": "cohortsResolvedFuture = SettableFuture.create()", "var_name": "cohortsResolvedFuture"}, {"original_string": "private final TransactionIdentifier transactionId;", "modifier": "private final", "type": "TransactionIdentifier", "declarator": "transactionId", "var_name": "transactionId"}, {"original_string": "private volatile OperationCallback commitOperationCallback;", "modifier": "private volatile", "type": "OperationCallback", "declarator": "commitOperationCallback", "var_name": "commitOperationCallback"}], "methods": [{"identifier": "ThreePhaseCommitCohortProxy", "parameters": "(final ActorUtils actorUtils, final List<CohortInfo> cohorts,\n            final TransactionIdentifier transactionId)", "modifiers": "public", "return": "", "signature": " ThreePhaseCommitCohortProxy(final ActorUtils actorUtils, final List<CohortInfo> cohorts,\n            final TransactionIdentifier transactionId)", "full_signature": "public  ThreePhaseCommitCohortProxy(final ActorUtils actorUtils, final List<CohortInfo> cohorts,\n            final TransactionIdentifier transactionId)", "class_method_signature": "ThreePhaseCommitCohortProxy.ThreePhaseCommitCohortProxy(final ActorUtils actorUtils, final List<CohortInfo> cohorts,\n            final TransactionIdentifier transactionId)", "testcase": false, "constructor": true}, {"identifier": "resolveCohorts", "parameters": "()", "modifiers": "private", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> resolveCohorts()", "full_signature": "private ListenableFuture<Void> resolveCohorts()", "class_method_signature": "ThreePhaseCommitCohortProxy.resolveCohorts()", "testcase": false, "constructor": false}, {"identifier": "canCommit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Boolean>", "signature": "ListenableFuture<Boolean> canCommit()", "full_signature": "@Override public ListenableFuture<Boolean> canCommit()", "class_method_signature": "ThreePhaseCommitCohortProxy.canCommit()", "testcase": false, "constructor": false}, {"identifier": "finishCanCommit", "parameters": "(final SettableFuture<Boolean> returnFuture)", "modifiers": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private", "return": "void", "signature": "void finishCanCommit(final SettableFuture<Boolean> returnFuture)", "full_signature": "@SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\", justification = \"https://github.com/spotbugs/spotbugs/issues/811\") private void finishCanCommit(final SettableFuture<Boolean> returnFuture)", "class_method_signature": "ThreePhaseCommitCohortProxy.finishCanCommit(final SettableFuture<Boolean> returnFuture)", "testcase": false, "constructor": false}, {"identifier": "sendCanCommitTransaction", "parameters": "(final CohortInfo toCohortInfo, final OnComplete<Object> onComplete)", "modifiers": "private", "return": "void", "signature": "void sendCanCommitTransaction(final CohortInfo toCohortInfo, final OnComplete<Object> onComplete)", "full_signature": "private void sendCanCommitTransaction(final CohortInfo toCohortInfo, final OnComplete<Object> onComplete)", "class_method_signature": "ThreePhaseCommitCohortProxy.sendCanCommitTransaction(final CohortInfo toCohortInfo, final OnComplete<Object> onComplete)", "testcase": false, "constructor": false}, {"identifier": "invokeCohorts", "parameters": "(final MessageSupplier messageSupplier)", "modifiers": "private", "return": "Future<Iterable<Object>>", "signature": "Future<Iterable<Object>> invokeCohorts(final MessageSupplier messageSupplier)", "full_signature": "private Future<Iterable<Object>> invokeCohorts(final MessageSupplier messageSupplier)", "class_method_signature": "ThreePhaseCommitCohortProxy.invokeCohorts(final MessageSupplier messageSupplier)", "testcase": false, "constructor": false}, {"identifier": "preCommit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> preCommit()", "full_signature": "@Override public ListenableFuture<Void> preCommit()", "class_method_signature": "ThreePhaseCommitCohortProxy.preCommit()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> abort()", "full_signature": "@Override public ListenableFuture<Void> abort()", "class_method_signature": "ThreePhaseCommitCohortProxy.abort()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> commit()", "full_signature": "@Override public ListenableFuture<Void> commit()", "class_method_signature": "ThreePhaseCommitCohortProxy.commit()", "testcase": false, "constructor": false}, {"identifier": "successfulFuture", "parameters": "(final ListenableFuture<Void> future)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static", "return": "boolean", "signature": "boolean successfulFuture(final ListenableFuture<Void> future)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static boolean successfulFuture(final ListenableFuture<Void> future)", "class_method_signature": "ThreePhaseCommitCohortProxy.successfulFuture(final ListenableFuture<Void> future)", "testcase": false, "constructor": false}, {"identifier": "voidOperation", "parameters": "(final String operationName,\n            final MessageSupplier messageSupplier, final Class<?> expectedResponseClass,\n            final boolean propagateException, final OperationCallback callback)", "modifiers": "private", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> voidOperation(final String operationName,\n            final MessageSupplier messageSupplier, final Class<?> expectedResponseClass,\n            final boolean propagateException, final OperationCallback callback)", "full_signature": "private ListenableFuture<Void> voidOperation(final String operationName,\n            final MessageSupplier messageSupplier, final Class<?> expectedResponseClass,\n            final boolean propagateException, final OperationCallback callback)", "class_method_signature": "ThreePhaseCommitCohortProxy.voidOperation(final String operationName,\n            final MessageSupplier messageSupplier, final Class<?> expectedResponseClass,\n            final boolean propagateException, final OperationCallback callback)", "testcase": false, "constructor": false}, {"identifier": "finishVoidOperation", "parameters": "(final String operationName, final MessageSupplier messageSupplier,\n                                     final Class<?> expectedResponseClass, final boolean propagateException,\n                                     final SettableFuture<Void> returnFuture, final OperationCallback callback)", "modifiers": "private", "return": "void", "signature": "void finishVoidOperation(final String operationName, final MessageSupplier messageSupplier,\n                                     final Class<?> expectedResponseClass, final boolean propagateException,\n                                     final SettableFuture<Void> returnFuture, final OperationCallback callback)", "full_signature": "private void finishVoidOperation(final String operationName, final MessageSupplier messageSupplier,\n                                     final Class<?> expectedResponseClass, final boolean propagateException,\n                                     final SettableFuture<Void> returnFuture, final OperationCallback callback)", "class_method_signature": "ThreePhaseCommitCohortProxy.finishVoidOperation(final String operationName, final MessageSupplier messageSupplier,\n                                     final Class<?> expectedResponseClass, final boolean propagateException,\n                                     final SettableFuture<Void> returnFuture, final OperationCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getCohortFutures", "parameters": "()", "modifiers": "@Override", "return": "List<Future<ActorSelection>>", "signature": "List<Future<ActorSelection>> getCohortFutures()", "full_signature": "@Override List<Future<ActorSelection>> getCohortFutures()", "class_method_signature": "ThreePhaseCommitCohortProxy.getCohortFutures()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ThreePhaseCommitCohortProxy.java"}, "focal_method": {"identifier": "abort", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "body": "@Override\n    public ListenableFuture<Void> abort() {\n        // Note - we pass false for propagateException. In the front-end data broker, this method\n        // is called when one of the 3 phases fails with an exception. We'd rather have that\n        // original exception propagated to the client. If our abort fails and we propagate the\n        // exception then that exception will supersede and suppress the original exception. But\n        // it's the original exception that is the root cause and of more interest to the client.\n\n        return voidOperation(\"abort\", ABORT_MESSAGE_SUPPLIER,\n                AbortTransactionReply.class, false, OperationCallback.NO_OP_CALLBACK);\n    }", "signature": "ListenableFuture<Void> abort()", "full_signature": "@Override public ListenableFuture<Void> abort()", "class_method_signature": "ThreePhaseCommitCohortProxy.abort()", "testcase": false, "constructor": false, "invocations": ["voidOperation"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}