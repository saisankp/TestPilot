{"test_class": {"identifier": "LibVirtClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String pathToImage = \"/var/lib/libvirt/images/TinyCoreBase.img\";", "modifier": "private", "type": "String", "declarator": "pathToImage = \"/var/lib/libvirt/images/TinyCoreBase.img\"", "var_name": "pathToImage"}, {"original_string": "private LibVirtClient client;", "modifier": "private", "type": "LibVirtClient", "declarator": "client", "var_name": "client"}], "file": "betaas-taas/betaas-taas-taasvmmanager/src/test/java/eu/betaas/taas/taasvmmanager/libvirt/LibVirtClientTest.java"}, "test_case": {"identifier": "createVM", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void createVM () {\n\t\tlong memory;\n\t\ttry \n\t\t{ \n\t\tProcess p=Runtime.getRuntime().exec(\"free\"); \n\t\tp.waitFor(); \n\t\tBufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream())); \n\t\tString line=reader.readLine(); \n\t\tif (line != null) \n\t\t{ \n\t\tline=reader.readLine();\n\t\t\n\t\tif (line != null) {\n\t\t\tmemory = Long.valueOf(line.replaceAll(\" *\",\" \").split(\" \")[3]);\n\t\t\tSystem.out.println(\"================\");\n\t\t\tSystem.out.println(memory);\n\t\t} else {\n\t\t\t\n\t\t}\n\t\t} else {\n\t\t\t\n\t\t}\n\t\t} catch (Exception e){\n\t\t\t\n\t\t}\n\t}", "signature": "void createVM()", "full_signature": "@Test public void createVM()", "class_method_signature": "LibVirtClientTest.createVM()", "testcase": true, "constructor": false, "invocations": ["exec", "getRuntime", "waitFor", "getInputStream", "readLine", "readLine", "valueOf", "split", "replaceAll", "println", "println"]}, "focal_class": {"identifier": "LibVirtClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger log;", "modifier": "private", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private Quota  quota;", "modifier": "private", "type": "Quota", "declarator": "quota", "var_name": "quota"}, {"original_string": "private String cpuArch;", "modifier": "private", "type": "String", "declarator": "cpuArch", "var_name": "cpuArch"}, {"original_string": "private MessageManager mManager;", "modifier": "private", "type": "MessageManager", "declarator": "mManager", "var_name": "mManager"}], "methods": [{"identifier": "LibVirtClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " LibVirtClient()", "full_signature": "public  LibVirtClient()", "class_method_signature": "LibVirtClient.LibVirtClient()", "testcase": false, "constructor": true}, {"identifier": "updateQuota", "parameters": "(double vcpu, double disk)", "modifiers": "private synchronized", "return": "void", "signature": "void updateQuota(double vcpu, double disk)", "full_signature": "private synchronized void updateQuota(double vcpu, double disk)", "class_method_signature": "LibVirtClient.updateQuota(double vcpu, double disk)", "testcase": false, "constructor": false}, {"identifier": "createVM", "parameters": "(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "modifiers": "public", "return": "boolean", "signature": "boolean createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "full_signature": "public boolean createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "class_method_signature": "LibVirtClient.createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "testcase": false, "constructor": false}, {"identifier": "deleteVM", "parameters": "(UUID vmId)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteVM(UUID vmId)", "full_signature": "public boolean deleteVM(UUID vmId)", "class_method_signature": "LibVirtClient.deleteVM(UUID vmId)", "testcase": false, "constructor": false}, {"identifier": "getQuota", "parameters": "()", "modifiers": "public", "return": "Quota", "signature": "Quota getQuota()", "full_signature": "public Quota getQuota()", "class_method_signature": "LibVirtClient.getQuota()", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(String vmId, String remoteIp)", "modifiers": "public", "return": "boolean", "signature": "boolean migrate(String vmId, String remoteIp)", "full_signature": "public boolean migrate(String vmId, String remoteIp)", "class_method_signature": "LibVirtClient.migrate(String vmId, String remoteIp)", "testcase": false, "constructor": false}, {"identifier": "buildTemplate", "parameters": "(String name, UUID uuid, long memory,\n\t\t\tint vCpu, String vmImage)", "modifiers": "public", "return": "String", "signature": "String buildTemplate(String name, UUID uuid, long memory,\n\t\t\tint vCpu, String vmImage)", "full_signature": "public String buildTemplate(String name, UUID uuid, long memory,\n\t\t\tint vCpu, String vmImage)", "class_method_signature": "LibVirtClient.buildTemplate(String name, UUID uuid, long memory,\n\t\t\tint vCpu, String vmImage)", "testcase": false, "constructor": false}, {"identifier": "getFreeMemoryFromOS", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getFreeMemoryFromOS()", "full_signature": "private long getFreeMemoryFromOS()", "class_method_signature": "LibVirtClient.getFreeMemoryFromOS()", "testcase": false, "constructor": false}], "file": "betaas-taas/betaas-taas-taasvmmanager/src/main/java/eu/betaas/taas/taasvmmanager/libvirt/LibVirtClient.java"}, "focal_method": {"identifier": "createVM", "parameters": "(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "modifiers": "public", "return": "boolean", "body": "public boolean createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage) throws Exception {\n\t\tString  template;\n\t\tConnect conn;\n\t\t\n\t\ttry {\n\t\t\tlog.info(\"[LibVirtClient] Connecting to local hypervisor\");\n\t\t\tconn = new Connect(\"qemu+tcp://127.0.0.1/system\");\n\t\t\t\n\t\t\tlog.info(\"Creating template\");\n\t\t\ttemplate = buildTemplate(\n\t\t\t\tvmName, vmUuid, flavor.getMemory(),flavor.getvCpu(), vmImage);\n\t\t\t\n\t\t\tlog.info(\"[LibVirtClient] Resulting template: \\n\" + template);\n\t\t\tlog.info(\"[LibVirtClient] Creating VM\");\n\t\t\tDomain domain = conn.domainCreateXML(template, 0);\n\t\t\t\n\t\t\tconn.close();\n\t\t\t\n\t\t\t// TODO get image size\n\t\t\tupdateQuota(-flavor.getvCpu(), -0);\n\t\t} catch (LibvirtException e) {\n\t\t\tmManager.monitoringPublish(\"There has been a problem creating the VM\");\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}", "signature": "boolean createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "full_signature": "public boolean createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "class_method_signature": "LibVirtClient.createVM(String vmName,\n\t\t\t\t\t\t\t  UUID   vmUuid,\n\t\t\t                  Flavor flavor,\n\t                          String vmImage)", "testcase": false, "constructor": false, "invocations": ["info", "info", "buildTemplate", "getMemory", "getvCpu", "info", "info", "domainCreateXML", "close", "updateQuota", "getvCpu", "monitoringPublish", "printStackTrace"]}, "repository": {"repo_id": 25467142, "url": "https://github.com/BETaaS/BETaaS_Platform-Tools", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 17, "size": 22004, "license": "licensed"}}