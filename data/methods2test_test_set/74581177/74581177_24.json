{"test_class": {"identifier": "AbstractAntExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FULL_PKG_LAUNCHER_CLASS = \"fullPkgLauncherClass\" ;", "modifier": "private static final", "type": "String", "declarator": "FULL_PKG_LAUNCHER_CLASS = \"fullPkgLauncherClass\"", "var_name": "FULL_PKG_LAUNCHER_CLASS"}, {"original_string": "private static final String DELIVERABLE_FILE_NAME \t= \"deliverableFileName\" ;", "modifier": "private static final", "type": "String", "declarator": "DELIVERABLE_FILE_NAME \t= \"deliverableFileName\"", "var_name": "DELIVERABLE_FILE_NAME"}, {"original_string": "private static final String FILE_PATH \t\t\t\t= \"filePath\" ;", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH \t\t\t\t= \"filePath\"", "var_name": "FILE_PATH"}, {"original_string": "private static final String TEMPORARY_DIR \t\t\t= \"temporaryDir\" ;", "modifier": "private static final", "type": "String", "declarator": "TEMPORARY_DIR \t\t\t= \"temporaryDir\"", "var_name": "TEMPORARY_DIR"}], "file": "core/src/test/java/com/bbva/kltt/apirest/core/ant/AbstractAntExecutorTest.java"}, "test_case": {"identifier": "fullTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fullTest() throws APIRestGeneratorException\n\t{\n\t\tfinal MyAntExecutor myAntExecutor = new MyAntExecutor(ConstantsTest.SRC_TEST_RESOURCES_PATH,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ConstantsTest.ANT_FILE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ConstantsTest.TRANSLATOR_TYPE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FULL_PKG_LAUNCHER_CLASS,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ConstantsTest.PARSER_TYPE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DELIVERABLE_FILE_NAME) ;\n\t\t\n\t\tmyAntExecutor.executeAntTask(FILE_PATH, System.err, System.out, TEMPORARY_DIR) ;\n\t}", "signature": "void fullTest()", "full_signature": "@Test public void fullTest()", "class_method_signature": "AbstractAntExecutorTest.fullTest()", "testcase": true, "constructor": false, "invocations": ["executeAntTask"]}, "focal_class": {"identifier": "AbstractAntExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AbstractAntExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AbstractAntExecutor.class)", "var_name": "LOGGER"}, {"original_string": "private final String generatorBuilderPath;", "modifier": "private final", "type": "String", "declarator": "generatorBuilderPath", "var_name": "generatorBuilderPath"}, {"original_string": "private final String antFile;", "modifier": "private final", "type": "String", "declarator": "antFile", "var_name": "antFile"}, {"original_string": "private final String translatorType;", "modifier": "private final", "type": "String", "declarator": "translatorType", "var_name": "translatorType"}, {"original_string": "private final String parserType;", "modifier": "private final", "type": "String", "declarator": "parserType", "var_name": "parserType"}, {"original_string": "private final String fullPkgLauncherClass;", "modifier": "private final", "type": "String", "declarator": "fullPkgLauncherClass", "var_name": "fullPkgLauncherClass"}, {"original_string": "private final String deliverableFileName ;", "modifier": "private final", "type": "String", "declarator": "deliverableFileName", "var_name": "deliverableFileName"}], "methods": [{"identifier": "AbstractAntExecutor", "parameters": "(final String generatorBuilderPath,\n                               final String antFile,\n                               final String translatorType,\n                               final String fullPkgLauncherClass,\n                               final String parserType,\n                               final String deliverableFileName)", "modifiers": "public", "return": "", "signature": " AbstractAntExecutor(final String generatorBuilderPath,\n                               final String antFile,\n                               final String translatorType,\n                               final String fullPkgLauncherClass,\n                               final String parserType,\n                               final String deliverableFileName)", "full_signature": "public  AbstractAntExecutor(final String generatorBuilderPath,\n                               final String antFile,\n                               final String translatorType,\n                               final String fullPkgLauncherClass,\n                               final String parserType,\n                               final String deliverableFileName)", "class_method_signature": "AbstractAntExecutor.AbstractAntExecutor(final String generatorBuilderPath,\n                               final String antFile,\n                               final String translatorType,\n                               final String fullPkgLauncherClass,\n                               final String parserType,\n                               final String deliverableFileName)", "testcase": false, "constructor": true}, {"identifier": "executeAntTask", "parameters": "(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "modifiers": "public", "return": "void", "signature": "void executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "full_signature": "public void executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "class_method_signature": "AbstractAntExecutor.executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "testcase": false, "constructor": false}, {"identifier": "generateProject", "parameters": "(final String filePath,\n                                    final PrintStream errorStream,\n                                    final PrintStream outputStream,\n                                    final String temporaryDir,\n                                    final File buildFile)", "modifiers": "private", "return": "Project", "signature": "Project generateProject(final String filePath,\n                                    final PrintStream errorStream,\n                                    final PrintStream outputStream,\n                                    final String temporaryDir,\n                                    final File buildFile)", "full_signature": "private Project generateProject(final String filePath,\n                                    final PrintStream errorStream,\n                                    final PrintStream outputStream,\n                                    final String temporaryDir,\n                                    final File buildFile)", "class_method_signature": "AbstractAntExecutor.generateProject(final String filePath,\n                                    final PrintStream errorStream,\n                                    final PrintStream outputStream,\n                                    final String temporaryDir,\n                                    final File buildFile)", "testcase": false, "constructor": false}, {"identifier": "getGoalTask", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getGoalTask()", "full_signature": "private String getGoalTask()", "class_method_signature": "AbstractAntExecutor.getGoalTask()", "testcase": false, "constructor": false}, {"identifier": "getConsoleLogger", "parameters": "(final PrintStream errorStream, final PrintStream outputStream)", "modifiers": "private", "return": "DefaultLogger", "signature": "DefaultLogger getConsoleLogger(final PrintStream errorStream, final PrintStream outputStream)", "full_signature": "private DefaultLogger getConsoleLogger(final PrintStream errorStream, final PrintStream outputStream)", "class_method_signature": "AbstractAntExecutor.getConsoleLogger(final PrintStream errorStream, final PrintStream outputStream)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bbva/kltt/apirest/core/ant/AbstractAntExecutor.java"}, "focal_method": {"identifier": "executeAntTask", "parameters": "(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "modifiers": "public", "return": "void", "body": "public void executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir) throws APIRestGeneratorException\n    {\n        final File buildFile  = new File(this.generatorBuilderPath + File.separator + this.antFile);\n        final Project project = this.generateProject(filePath, errorStream, outputStream, temporaryDir, buildFile);\n\n        try\n        {\n            project.fireBuildStarted();\n            project.init();\n\n            final ProjectHelper projectHelper = ProjectHelper.getProjectHelper();\n            project.addReference(ConstantsAnt.ANT_REF_PROJECT_HELPER, projectHelper);\n            projectHelper.parse(project, buildFile);\n\n            project.executeTarget(this.getGoalTask());\n            project.fireBuildFinished(null);\n        }\n        catch (BuildException buildException)\n        {\n            project.fireBuildFinished(buildException);\n\n            final String errorString = \"BuildException while calling the ANT task with the following parameters: [antFile: \" +\n                                       this.antFile +\n                                       \", filePath: \" + filePath + \"]\";\n            AbstractAntExecutor.LOGGER.error(errorString, buildException);\n            throw new APIRestGeneratorException(errorString, buildException);\n        }\n    }", "signature": "void executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "full_signature": "public void executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "class_method_signature": "AbstractAntExecutor.executeAntTask(final String filePath,\n                               final PrintStream errorStream,\n                               final PrintStream outputStream,\n                               final String temporaryDir)", "testcase": false, "constructor": false, "invocations": ["generateProject", "fireBuildStarted", "init", "getProjectHelper", "addReference", "parse", "executeTarget", "getGoalTask", "fireBuildFinished", "fireBuildFinished", "error"]}, "repository": {"repo_id": 74581177, "url": "https://github.com/BBVA-CIB/APIRestGenerator", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 147303, "license": "licensed"}}