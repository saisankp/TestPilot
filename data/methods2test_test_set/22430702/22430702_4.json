{"test_class": {"identifier": "VertexListInputStreamReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "graphalytics-core/src/test/java/science/atlarge/graphalytics/util/io/VertexListInputStreamReaderTest.java"}, "test_case": {"identifier": "testHasNextVertexOnEmptyLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHasNextVertexOnEmptyLines() throws IOException {\n\t\tString input = \"\\n  \\n\t\\n\";\n\t\tInputStream inputStream = new ByteArrayInputStream(input.getBytes());\n\n\t\ttry (VertexListInputStreamReader reader = new VertexListInputStreamReader(inputStream)) {\n\t\t\tassertFalse(reader.hasNextVertex());\n\t\t}\n\t}", "signature": "void testHasNextVertexOnEmptyLines()", "full_signature": "@Test public void testHasNextVertexOnEmptyLines()", "class_method_signature": "VertexListInputStreamReaderTest.testHasNextVertexOnEmptyLines()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertFalse", "hasNextVertex"]}, "focal_class": {"identifier": "VertexListInputStreamReader", "superclass": "", "interfaces": "implements VertexListStream", "fields": [{"original_string": "private final BufferedReader reader;", "modifier": "private final", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final VertexData cache = new VertexData();", "modifier": "private final", "type": "VertexData", "declarator": "cache = new VertexData()", "var_name": "cache"}, {"original_string": "private boolean cacheValid;", "modifier": "private", "type": "boolean", "declarator": "cacheValid", "var_name": "cacheValid"}], "methods": [{"identifier": "VertexListInputStreamReader", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "", "signature": " VertexListInputStreamReader(InputStream inputStream)", "full_signature": "public  VertexListInputStreamReader(InputStream inputStream)", "class_method_signature": "VertexListInputStreamReader.VertexListInputStreamReader(InputStream inputStream)", "testcase": false, "constructor": true}, {"identifier": "hasNextVertex", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNextVertex()", "full_signature": "@Override public boolean hasNextVertex()", "class_method_signature": "VertexListInputStreamReader.hasNextVertex()", "testcase": false, "constructor": false}, {"identifier": "getNextVertex", "parameters": "()", "modifiers": "@Override public", "return": "VertexData", "signature": "VertexData getNextVertex()", "full_signature": "@Override public VertexData getNextVertex()", "class_method_signature": "VertexListInputStreamReader.getNextVertex()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "VertexListInputStreamReader.close()", "testcase": false, "constructor": false}], "file": "graphalytics-core/src/main/java/science/atlarge/graphalytics/util/io/VertexListInputStreamReader.java"}, "focal_method": {"identifier": "hasNextVertex", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean hasNextVertex() throws IOException {\n\t\tif (cacheValid) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tfor (String line = reader.readLine(); line != null; line = reader.readLine()) {\n\t\t\t\tline = line.trim();\n\t\t\t\tif (line.isEmpty()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString[] tokens = line.split(\" \");\n\n\t\t\t\ttry {\n\t\t\t\t\tcache.setId(Long.parseLong(tokens[0]));\n\t\t\t\t} catch (NumberFormatException ex) {\n\t\t\t\t\tthrow new IOException(\"Failed to parse vertex identifier from stream.\", ex);\n\t\t\t\t}\n\n\t\t\t\tif (cache.getValues().length == tokens.length - 1) {\n\t\t\t\t\tSystem.arraycopy(tokens, 1, cache.getValues(), 0, tokens.length - 1);\n\t\t\t\t} else {\n\t\t\t\t\tcache.setValues(Arrays.copyOfRange(tokens, 1, tokens.length));\n\t\t\t\t}\n\n\t\t\t\tcacheValid = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean hasNextVertex()", "full_signature": "@Override public boolean hasNextVertex()", "class_method_signature": "VertexListInputStreamReader.hasNextVertex()", "testcase": false, "constructor": false, "invocations": ["readLine", "readLine", "trim", "isEmpty", "split", "setId", "parseLong", "getValues", "arraycopy", "getValues", "setValues", "copyOfRange"]}, "repository": {"repo_id": 22430702, "url": "https://github.com/ldbc/ldbc_graphalytics", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 51, "size": 2664, "license": "licensed"}}