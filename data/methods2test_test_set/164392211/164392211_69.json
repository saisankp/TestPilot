{"test_class": {"identifier": "DataFrameInlinePrintWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataFrame df;", "modifier": "private", "type": "DataFrame", "declarator": "df", "var_name": "df"}], "file": "dflib/src/test/java/com/nhl/dflib/print/DataFrameInlinePrintWorkerTest.java"}, "test_case": {"identifier": "testToString_TruncateColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString_TruncateColumns() {\n        DataFrameInlinePrintWorker w = new DataFrameInlinePrintWorker(new StringBuilder(), 5, 4);\n        assertEquals(\"{col1:one,c..2:1},{col1:two,c..2:2},{col1:t..e,c..2:3},{col1:four,c..2:4}\",\n                w.print(df).toString());\n    }", "signature": "void testToString_TruncateColumns()", "full_signature": "@Test public void testToString_TruncateColumns()", "class_method_signature": "DataFrameInlinePrintWorkerTest.testToString_TruncateColumns()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "print"]}, "focal_class": {"identifier": "DataFrameInlinePrintWorker", "superclass": "extends BasePrintWorker", "interfaces": "", "fields": [], "methods": [{"identifier": "DataFrameInlinePrintWorker", "parameters": "(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "modifiers": "public", "return": "", "signature": " DataFrameInlinePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "full_signature": "public  DataFrameInlinePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "class_method_signature": "DataFrameInlinePrintWorker.DataFrameInlinePrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "testcase": false, "constructor": true}, {"identifier": "print", "parameters": "(DataFrame df)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder print(DataFrame df)", "full_signature": "public StringBuilder print(DataFrame df)", "class_method_signature": "DataFrameInlinePrintWorker.print(DataFrame df)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/print/DataFrameInlinePrintWorker.java"}, "focal_method": {"identifier": "print", "parameters": "(DataFrame df)", "modifiers": "public", "return": "StringBuilder", "body": "public StringBuilder print(DataFrame df) {\n\n        if (df == null) {\n            out.append(\"null\");\n            return out;\n        }\n\n        DataFrameTruncator truncator = DataFrameTruncator.create(df, maxDisplayRows);\n\n        Index columns = df.getColumnsIndex();\n        int width = columns.size();\n        int h = truncator.height();\n\n        String[] labels = columns.getLabels();\n\n        // if no data, print column labels once\n        if (h == 0) {\n            for (int j = 0; j < width; j++) {\n\n                if (j > 0) {\n                    out.append(\",\");\n                }\n\n                appendTruncate(labels[j]);\n                out.append(\":\");\n            }\n\n            return out;\n        }\n\n        boolean comma = false;\n        for (RowProxy p : truncator.head()) {\n\n            if (comma) {\n                out.append(\",\");\n            }\n\n            comma = true;\n\n            out.append(\"{\");\n            for (int j = 0; j < width; j++) {\n\n                if (j > 0) {\n                    out.append(\",\");\n                }\n\n                appendTruncate(labels[j]);\n                out.append(\":\");\n                appendTruncate(String.valueOf(p.get(j)));\n            }\n\n            out.append(\"}\");\n        }\n\n        if (truncator.isTruncated()) {\n            if (comma) {\n                out.append(\",\");\n            }\n\n            out.append(\"...\");\n\n            for (RowProxy p : truncator.tail()) {\n                out.append(\",{\");\n                for (int j = 0; j < width; j++) {\n\n                    if (j > 0) {\n                        out.append(\",\");\n                    }\n\n                    appendTruncate(labels[j]);\n                    out.append(\":\");\n                    appendTruncate(String.valueOf(p.get(j)));\n                }\n\n                out.append(\"}\");\n            }\n        }\n\n        return out;\n    }", "signature": "StringBuilder print(DataFrame df)", "full_signature": "public StringBuilder print(DataFrame df)", "class_method_signature": "DataFrameInlinePrintWorker.print(DataFrame df)", "testcase": false, "constructor": false, "invocations": ["append", "create", "getColumnsIndex", "size", "height", "getLabels", "append", "appendTruncate", "append", "head", "append", "append", "append", "appendTruncate", "append", "appendTruncate", "valueOf", "get", "append", "isTruncated", "append", "append", "tail", "append", "append", "appendTruncate", "append", "appendTruncate", "valueOf", "get", "append"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}