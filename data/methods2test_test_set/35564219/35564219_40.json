{"test_class": {"identifier": "LruCacheAdapterTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SIZE = 15 * 1024 * 1024;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SIZE = 15 * 1024 * 1024", "var_name": "DEFAULT_SIZE"}], "file": "library/src/test/java/com/climate/mirage/cache/memory/LruCacheAdapterTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGet() {\n\t\tLruCacheAdapter<String, Bitmap> cache =\n\t\t\t\tnew LruCacheAdapter<String, Bitmap>(new MyCache(DEFAULT_SIZE));\n\t\tcache.put(\"asd\", Bitmap.createBitmap(200, 200, Bitmap.Config.ARGB_8888));\n\t\tAssert.assertTrue(cache.has(\"asd\"));\n\t\tAssert.assertNotNull(cache.get(\"asd\"));\n\t}", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "LruCacheAdapterTest.testGet()", "testcase": true, "constructor": false, "invocations": ["put", "createBitmap", "assertTrue", "has", "assertNotNull", "get"]}, "focal_class": {"identifier": "LruCacheAdapter", "superclass": "", "interfaces": "implements MemoryCache<K, V>", "fields": [{"original_string": "private LruCache<K, V> lruCache;", "modifier": "private", "type": "LruCache<K, V>", "declarator": "lruCache", "var_name": "lruCache"}], "methods": [{"identifier": "LruCacheAdapter", "parameters": "(LruCache<K, V> lruCache)", "modifiers": "public", "return": "", "signature": " LruCacheAdapter(LruCache<K, V> lruCache)", "full_signature": "public  LruCacheAdapter(LruCache<K, V> lruCache)", "class_method_signature": "LruCacheAdapter.LruCacheAdapter(LruCache<K, V> lruCache)", "testcase": false, "constructor": true}, {"identifier": "getLruCache", "parameters": "()", "modifiers": "public", "return": "LruCache<K, V>", "signature": "LruCache<K, V> getLruCache()", "full_signature": "public LruCache<K, V> getLruCache()", "class_method_signature": "LruCacheAdapter.getLruCache()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "V", "signature": "V get(K key)", "full_signature": "@Override public V get(K key)", "class_method_signature": "LruCacheAdapter.get(K key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(K key, V value)", "modifiers": "@Override public", "return": "void", "signature": "void put(K key, V value)", "full_signature": "@Override public void put(K key, V value)", "class_method_signature": "LruCacheAdapter.put(K key, V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(K key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(K key)", "full_signature": "@Override public void remove(K key)", "class_method_signature": "LruCacheAdapter.remove(K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "LruCacheAdapter.clear()", "testcase": false, "constructor": false}, {"identifier": "getCurrentSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCurrentSize()", "full_signature": "@Override public int getCurrentSize()", "class_method_signature": "LruCacheAdapter.getCurrentSize()", "testcase": false, "constructor": false}, {"identifier": "getMaxSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxSize()", "full_signature": "@Override public int getMaxSize()", "class_method_signature": "LruCacheAdapter.getMaxSize()", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean has(K key)", "full_signature": "@Override public boolean has(K key)", "class_method_signature": "LruCacheAdapter.has(K key)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/cache/memory/LruCacheAdapter.java"}, "focal_method": {"identifier": "get", "parameters": "(K key)", "modifiers": "@Override public", "return": "V", "body": "@Override\n\tpublic V get(K key) {\n\t\treturn lruCache.get(key);\n\t}", "signature": "V get(K key)", "full_signature": "@Override public V get(K key)", "class_method_signature": "LruCacheAdapter.get(K key)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}