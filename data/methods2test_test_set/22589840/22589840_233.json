{"test_class": {"identifier": "ForumRTFFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ForumRTFFormatter rtfFormatter = new ForumRTFFormatter(null, false);", "modifier": "public static final", "type": "ForumRTFFormatter", "declarator": "rtfFormatter = new ForumRTFFormatter(null, false)", "var_name": "rtfFormatter"}], "file": "olat7.8/src/test/java/org/olat/lms/forum/archiver/ForumRTFFormatterTest.java"}, "test_case": {"identifier": "testConvertHTMLMarkupToRTF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertHTMLMarkupToRTF() throws Exception {\n        // test correct escaping of reserved RTF chars\n        Assert.assertTrue(convert(\"Zeile mit \\\\ in der Mitte\").contains(\"\\\\\\\\\"));\n        Assert.assertTrue(convert(\"Zeile mit { in der Mitte\").contains(\"\\\\{\"));\n        Assert.assertTrue(convert(\"Zeile mit } in der Mitte\").contains(\"\\\\}\"));\n\n        // test correct detection of HTML <ol> and <ul> lists\n        Assert.assertTrue(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\"listid1\"));\n        Assert.assertFalse(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\"listid2\"));\n\n        Assert.assertTrue(convert(\"<ul> <li>eins</li> <li>zwei</li> </ul>\").contains(\"listid1\"));\n        Assert.assertFalse(convert(\"<ul> <li>eins</li> <li>zwei</li> </ul>\").contains(\"listid2\"));\n\n        Assert.assertTrue(convert(\"<ol> <li>one number</li> <li>two number</li> </ol><ul> <li>one bullet</li> <li>two bullet</li> </ul>\").contains(\"listid1\"));\n        Assert.assertTrue(convert(\"<ol> <li>one number</li> <li>two number</li> </ol><ul> <li>one bullet</li> <li>two bullet</li> </ul>\").contains(\"listid2\"));\n        Assert.assertFalse(convert(\"<ol> <li>one number</li> <li>two number</li> </ol><ul> <li>one bullet</li> <li>two bullet</li> </ul>\").contains(\"listid3\"));\n\n        Assert.assertTrue(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\n                \"listid1\"));\n        Assert.assertTrue(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\n                \"listid2\"));\n        Assert.assertTrue(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\n                \"listid3\"));\n        Assert.assertFalse(convert(\"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol>\").contains(\n                \"listid4\"));\n\n        Assert.assertTrue(convert(\n                \"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul>\")\n                .contains(\"listid1\"));\n        Assert.assertTrue(convert(\n                \"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul>\")\n                .contains(\"listid2\"));\n        Assert.assertTrue(convert(\n                \"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul>\")\n                .contains(\"listid3\"));\n        Assert.assertTrue(convert(\n                \"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul>\")\n                .contains(\"listid4\"));\n        Assert.assertFalse(convert(\n                \"<ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul><ol> <li>eins</li> <li>zwei</li> </ol><ul> <li>eins</li> <li>zwei</li> </ul>\")\n                .contains(\"listid5\"));\n\n    }", "signature": "void testConvertHTMLMarkupToRTF()", "full_signature": "@Test public void testConvertHTMLMarkupToRTF()", "class_method_signature": "ForumRTFFormatterTest.testConvertHTMLMarkupToRTF()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertFalse", "contains", "convert", "assertTrue", "contains", "convert", "assertFalse", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertFalse", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertFalse", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertTrue", "contains", "convert", "assertFalse", "contains", "convert"]}, "focal_class": {"identifier": "ForumRTFFormatter", "superclass": "extends ForumFormatter", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private static final Pattern PATTERN_RTX_RESERVED_BACKSLASH = Pattern.compile(\"\\\\\\\\\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_RTX_RESERVED_BACKSLASH = Pattern.compile(\"\\\\\\\\\")", "var_name": "PATTERN_RTX_RESERVED_BACKSLASH"}, {"original_string": "private static final Pattern PATTERN_RTX_RESERVED_BRACE_OPEN = Pattern.compile(\"\\\\{\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_RTX_RESERVED_BRACE_OPEN = Pattern.compile(\"\\\\{\")", "var_name": "PATTERN_RTX_RESERVED_BRACE_OPEN"}, {"original_string": "private static final Pattern PATTERN_RTX_RESERVED_BRACE_CLOSE = Pattern.compile(\"\\\\}\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_RTX_RESERVED_BRACE_CLOSE = Pattern.compile(\"\\\\}\")", "var_name": "PATTERN_RTX_RESERVED_BRACE_CLOSE"}, {"original_string": "private static final Pattern PATTERN_HTML_BOLD = Pattern.compile(\"<strong>(.*?)</strong>\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_BOLD = Pattern.compile(\"<strong>(.*?)</strong>\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_BOLD"}, {"original_string": "private static final Pattern PATTERN_HTML_ITALIC = Pattern.compile(\"<em>(.*?)</em>\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_ITALIC = Pattern.compile(\"<em>(.*?)</em>\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_ITALIC"}, {"original_string": "private static final Pattern PATTERN_HTML_BREAK = Pattern.compile(\"<br />\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_BREAK = Pattern.compile(\"<br />\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_BREAK"}, {"original_string": "private static final Pattern PATTERN_HTML_PARAGRAPH = Pattern.compile(\"<p>(.*?)</p>\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_PARAGRAPH = Pattern.compile(\"<p>(.*?)</p>\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_PARAGRAPH"}, {"original_string": "private static final Pattern PATTERN_HTML_AHREF = Pattern.compile(\"<a href=\\\"([^\\\"]+)\\\"[^>]*>(.*?)</a>\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_AHREF = Pattern.compile(\"<a href=\\\"([^\\\"]+)\\\"[^>]*>(.*?)</a>\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_AHREF"}, {"original_string": "private static final Pattern PATTERN_HTML_LIST = Pattern.compile(\"(<ol>(.*?)</ol>)|(<ul>(.*?)</ul>)\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_LIST = Pattern.compile(\"(<ol>(.*?)</ol>)|(<ul>(.*?)</ul>)\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_LIST"}, {"original_string": "private static final Pattern PATTERN_HTML_LIST_ELEMENT = Pattern.compile(\"<li>(.*?)</li>\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_LIST_ELEMENT = Pattern.compile(\"<li>(.*?)</li>\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_HTML_LIST_ELEMENT"}, {"original_string": "private static final Pattern PATTERN_HTML_SPACE = Pattern.compile(\"&nbsp;\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_HTML_SPACE = Pattern.compile(\"&nbsp;\")", "var_name": "PATTERN_HTML_SPACE"}, {"original_string": "private static final Pattern PATTERN_CSS_O_FOQUOTE = Pattern\n            .compile(\n                    \"<div class=\\\"b_quote_wrapper\\\">\\\\s*<div class=\\\"b_quote_author mceNonEditable\\\">(.*?)</div>\\\\s*<blockquote class=\\\"b_quote\\\">\\\\s*(.*?)\\\\s*</blockquote>\\\\s*</div>\",\n                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_CSS_O_FOQUOTE = Pattern\n            .compile(\n                    \"<div class=\\\"b_quote_wrapper\\\">\\\\s*<div class=\\\"b_quote_author mceNonEditable\\\">(.*?)</div>\\\\s*<blockquote class=\\\"b_quote\\\">\\\\s*(.*?)\\\\s*</blockquote>\\\\s*</div>\",\n                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL)", "var_name": "PATTERN_CSS_O_FOQUOTE"}, {"original_string": "private static final Pattern PATTERN_THREEPOINTS = Pattern.compile(\"&#8230;\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN_THREEPOINTS = Pattern.compile(\"&#8230;\", Pattern.CASE_INSENSITIVE)", "var_name": "PATTERN_THREEPOINTS"}, {"original_string": "private static final String THREEPOINTS = \"...\";", "modifier": "private static final", "type": "String", "declarator": "THREEPOINTS = \"...\"", "var_name": "THREEPOINTS"}, {"original_string": "private static final String HIDDEN_STR = \"VERBORGEN\";", "modifier": "private static final", "type": "String", "declarator": "HIDDEN_STR = \"VERBORGEN\"", "var_name": "HIDDEN_STR"}, {"original_string": "ForumService forumService;", "modifier": "", "type": "ForumService", "declarator": "forumService", "var_name": "forumService"}, {"original_string": "UserService userService;", "modifier": "", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final VFSContainer container;", "modifier": "private final", "type": "VFSContainer", "declarator": "container", "var_name": "container"}, {"original_string": "private VFSItem vfsFil = null;", "modifier": "private", "type": "VFSItem", "declarator": "vfsFil = null", "var_name": "vfsFil"}, {"original_string": "private VFSContainer tempContainer;", "modifier": "private", "type": "VFSContainer", "declarator": "tempContainer", "var_name": "tempContainer"}], "methods": [{"identifier": "ForumRTFFormatter", "parameters": "(final VFSContainer container, final boolean filePerThread)", "modifiers": "public", "return": "", "signature": " ForumRTFFormatter(final VFSContainer container, final boolean filePerThread)", "full_signature": "public  ForumRTFFormatter(final VFSContainer container, final boolean filePerThread)", "class_method_signature": "ForumRTFFormatter.ForumRTFFormatter(final VFSContainer container, final boolean filePerThread)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(final INode node)", "modifiers": "@Override public", "return": "void", "signature": "void visit(final INode node)", "full_signature": "@Override public void visit(final INode node)", "class_method_signature": "ForumRTFFormatter.visit(final INode node)", "testcase": false, "constructor": false}, {"identifier": "openThread", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void openThread()", "full_signature": "@Override public void openThread()", "class_method_signature": "ForumRTFFormatter.openThread()", "testcase": false, "constructor": false}, {"identifier": "closeThread", "parameters": "()", "modifiers": "@Override public", "return": "StringBuilder", "signature": "StringBuilder closeThread()", "full_signature": "@Override public StringBuilder closeThread()", "class_method_signature": "ForumRTFFormatter.closeThread()", "testcase": false, "constructor": false}, {"identifier": "openForum", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void openForum()", "full_signature": "@Override public void openForum()", "class_method_signature": "ForumRTFFormatter.openForum()", "testcase": false, "constructor": false}, {"identifier": "closeForum", "parameters": "()", "modifiers": "@Override public", "return": "StringBuilder", "signature": "StringBuilder closeForum()", "full_signature": "@Override public StringBuilder closeForum()", "class_method_signature": "ForumRTFFormatter.closeForum()", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "(final boolean append, final StringBuilder buff)", "modifiers": "private", "return": "void", "signature": "void writeToFile(final boolean append, final StringBuilder buff)", "full_signature": "private void writeToFile(final boolean append, final StringBuilder buff)", "class_method_signature": "ForumRTFFormatter.writeToFile(final boolean append, final StringBuilder buff)", "testcase": false, "constructor": false}, {"identifier": "convertHTMLMarkupToRTF", "parameters": "(final String originalText)", "modifiers": "private", "return": "String", "signature": "String convertHTMLMarkupToRTF(final String originalText)", "full_signature": "private String convertHTMLMarkupToRTF(final String originalText)", "class_method_signature": "ForumRTFFormatter.convertHTMLMarkupToRTF(final String originalText)", "testcase": false, "constructor": false}, {"identifier": "prepareListRTF", "parameters": "(List<ListDefinition> lists)", "modifiers": "private", "return": "String", "signature": "String prepareListRTF(List<ListDefinition> lists)", "full_signature": "private String prepareListRTF(List<ListDefinition> lists)", "class_method_signature": "ForumRTFFormatter.prepareListRTF(List<ListDefinition> lists)", "testcase": false, "constructor": false}, {"identifier": "getListRTF", "parameters": "(ListDefinition list, int listNumber)", "modifiers": "private", "return": "String", "signature": "String getListRTF(ListDefinition list, int listNumber)", "full_signature": "private String getListRTF(ListDefinition list, int listNumber)", "class_method_signature": "ForumRTFFormatter.getListRTF(ListDefinition list, int listNumber)", "testcase": false, "constructor": false}, {"identifier": "getTitlePrefix", "parameters": "(final MessageNode messageNode)", "modifiers": "private", "return": "String", "signature": "String getTitlePrefix(final MessageNode messageNode)", "full_signature": "private String getTitlePrefix(final MessageNode messageNode)", "class_method_signature": "ForumRTFFormatter.getTitlePrefix(final MessageNode messageNode)", "testcase": false, "constructor": false}, {"identifier": "getImageRTF", "parameters": "(final MessageNode messageNode)", "modifiers": "private", "return": "String", "signature": "String getImageRTF(final MessageNode messageNode)", "full_signature": "private String getImageRTF(final MessageNode messageNode)", "class_method_signature": "ForumRTFFormatter.getImageRTF(final MessageNode messageNode)", "testcase": false, "constructor": false}, {"identifier": "addImagesToVFSContainer", "parameters": "(final MessageNode messageNode, final VFSContainer container)", "modifiers": "private", "return": "List<String>", "signature": "List<String> addImagesToVFSContainer(final MessageNode messageNode, final VFSContainer container)", "full_signature": "private List<String> addImagesToVFSContainer(final MessageNode messageNode, final VFSContainer container)", "class_method_signature": "ForumRTFFormatter.addImagesToVFSContainer(final MessageNode messageNode, final VFSContainer container)", "testcase": false, "constructor": false}, {"identifier": "getImagePath", "parameters": "(final Object val)", "modifiers": "private", "return": "String", "signature": "String getImagePath(final Object val)", "full_signature": "private String getImagePath(final Object val)", "class_method_signature": "ForumRTFFormatter.getImagePath(final Object val)", "testcase": false, "constructor": false}, {"identifier": "makeTempVFSContainer", "parameters": "()", "modifiers": "private", "return": "VFSContainer", "signature": "VFSContainer makeTempVFSContainer()", "full_signature": "private VFSContainer makeTempVFSContainer()", "class_method_signature": "ForumRTFFormatter.makeTempVFSContainer()", "testcase": false, "constructor": false}, {"identifier": "zipContainer", "parameters": "(final VFSContainer vFSContainer)", "modifiers": "private", "return": "void", "signature": "void zipContainer(final VFSContainer vFSContainer)", "full_signature": "private void zipContainer(final VFSContainer vFSContainer)", "class_method_signature": "ForumRTFFormatter.zipContainer(final VFSContainer vFSContainer)", "testcase": false, "constructor": false}, {"identifier": "getUserService", "parameters": "()", "modifiers": "private", "return": "UserService", "signature": "UserService getUserService()", "full_signature": "private UserService getUserService()", "class_method_signature": "ForumRTFFormatter.getUserService()", "testcase": false, "constructor": false}, {"identifier": "getForumService", "parameters": "()", "modifiers": "private", "return": "ForumService", "signature": "ForumService getForumService()", "full_signature": "private ForumService getForumService()", "class_method_signature": "ForumRTFFormatter.getForumService()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/forum/archiver/ForumRTFFormatter.java"}, "focal_method": {"identifier": "convertHTMLMarkupToRTF", "parameters": "(final String originalText)", "modifiers": "private", "return": "String", "body": "private String convertHTMLMarkupToRTF(final String originalText) {\n        String htmlText = originalText;\n\n        // escape reserved chars in RTF: '{', '}', '\\'\n        final Matcher mbs = PATTERN_RTX_RESERVED_BACKSLASH.matcher(htmlText);\n        final StringBuffer backslashes = new StringBuffer();\n        while (mbs.find()) {\n            mbs.appendReplacement(backslashes, \"\\\\\\\\\\\\\\\\\");\n        }\n        mbs.appendTail(backslashes);\n        htmlText = backslashes.toString();\n\n        final Matcher mbro = PATTERN_RTX_RESERVED_BRACE_OPEN.matcher(htmlText);\n        final StringBuffer openBraces = new StringBuffer();\n        while (mbro.find()) {\n            mbro.appendReplacement(openBraces, \"\\\\\\\\{ \");\n        }\n        mbro.appendTail(openBraces);\n        htmlText = openBraces.toString();\n\n        final Matcher mbrc = PATTERN_RTX_RESERVED_BRACE_CLOSE.matcher(htmlText);\n        final StringBuffer closedBraces = new StringBuffer();\n        while (mbrc.find()) {\n            mbrc.appendReplacement(closedBraces, \"\\\\\\\\} \");\n        }\n        mbrc.appendTail(closedBraces);\n        htmlText = closedBraces.toString();\n\n        // search for lists and convert in RTF\n        final StringBuffer rtfLists = new StringBuffer();\n        final List<ListDefinition> lists = new ArrayList<ListDefinition>();\n        final Matcher mli = PATTERN_HTML_LIST.matcher(htmlText);\n        int counter = 1;\n        while (mli.find()) {\n            final String listDefinition = mli.group();\n            final boolean orderedList = listDefinition.contains(\"<ol>\");\n            final ListDefinition list = new ListDefinition(orderedList);\n\n            final String listElements = mli.group(orderedList ? 2 : 3);\n            final Matcher le = PATTERN_HTML_LIST_ELEMENT.matcher(listElements);\n            while (le.find()) {\n                // ticket I-130710-0028\n                // $ character causes problems calling Matcher.appendReplacement\n                list.elements.add(le.group(1).replace(\"$\", \"&#36\"));\n            }\n            lists.add(list);\n            mli.appendReplacement(rtfLists, getListRTF(list, counter));\n            counter++;\n        }\n        mli.appendTail(rtfLists);\n        // unescape $ characters again\n        htmlText = rtfLists.toString().replace(\"&#36\", \"$\");\n\n        if (!lists.isEmpty()) {\n            htmlText = prepareListRTF(lists) + htmlText;\n        }\n\n        final Matcher mb = PATTERN_HTML_BOLD.matcher(htmlText);\n        final StringBuffer bolds = new StringBuffer();\n        while (mb.find()) {\n            mb.appendReplacement(bolds, \"{\\\\\\\\b $1} \");\n        }\n        mb.appendTail(bolds);\n        htmlText = bolds.toString();\n\n        final Matcher mi = PATTERN_HTML_ITALIC.matcher(htmlText);\n        final StringBuffer italics = new StringBuffer();\n        while (mi.find()) {\n            mi.appendReplacement(italics, \"{\\\\\\\\i $1} \");\n        }\n        mi.appendTail(italics);\n        htmlText = italics.toString();\n\n        final Matcher mbr = PATTERN_HTML_BREAK.matcher(htmlText);\n        final StringBuffer breaks = new StringBuffer();\n        while (mbr.find()) {\n            mbr.appendReplacement(breaks, \"\\\\\\\\line \");\n        }\n        mbr.appendTail(breaks);\n        htmlText = breaks.toString();\n\n        final Matcher mofo = PATTERN_CSS_O_FOQUOTE.matcher(htmlText);\n        final StringBuffer foquotes = new StringBuffer();\n        while (mofo.find()) {\n            mofo.appendReplacement(foquotes, \"\\\\\\\\line {\\\\\\\\i $1} {\\\\\\\\pard $2\\\\\\\\par}\");\n        }\n        mofo.appendTail(foquotes);\n        htmlText = foquotes.toString();\n\n        final Matcher mp = PATTERN_HTML_PARAGRAPH.matcher(htmlText);\n        final StringBuffer paragraphs = new StringBuffer();\n        while (mp.find()) {\n            mp.appendReplacement(paragraphs, \"\\\\\\\\line $1 \\\\\\\\line\");\n        }\n        mp.appendTail(paragraphs);\n        htmlText = paragraphs.toString();\n\n        final Matcher mahref = PATTERN_HTML_AHREF.matcher(htmlText);\n        final StringBuffer ahrefs = new StringBuffer();\n        while (mahref.find()) {\n            mahref.appendReplacement(ahrefs, \"{\\\\\\\\field{\\\\\\\\*\\\\\\\\fldinst{HYPERLINK\\\"$1\\\"}}{\\\\\\\\fldrslt{\\\\\\\\ul $2}}}\");\n        }\n        mahref.appendTail(ahrefs);\n        htmlText = ahrefs.toString();\n\n        final Matcher mtp = PATTERN_THREEPOINTS.matcher(htmlText);\n        final StringBuffer tps = new StringBuffer();\n        while (mtp.find()) {\n            mtp.appendReplacement(tps, THREEPOINTS);\n        }\n        mtp.appendTail(tps);\n        htmlText = tps.toString();\n\n        // strip all other html-fragments, because not convertable that easy\n        htmlText = FilterFactory.getHtmlTagsFilter().filter(htmlText);\n\n        // Remove all &nbsp;\n        final Matcher tmp = PATTERN_HTML_SPACE.matcher(htmlText);\n        htmlText = tmp.replaceAll(\" \");\n        htmlText = StringHelper.unescapeHtml(htmlText);\n\n        return htmlText;\n    }", "signature": "String convertHTMLMarkupToRTF(final String originalText)", "full_signature": "private String convertHTMLMarkupToRTF(final String originalText)", "class_method_signature": "ForumRTFFormatter.convertHTMLMarkupToRTF(final String originalText)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "group", "contains", "group", "matcher", "find", "add", "replace", "group", "add", "appendReplacement", "getListRTF", "appendTail", "replace", "toString", "isEmpty", "prepareListRTF", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "matcher", "find", "appendReplacement", "appendTail", "toString", "filter", "getHtmlTagsFilter", "matcher", "replaceAll", "unescapeHtml"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}