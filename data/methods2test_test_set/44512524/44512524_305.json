{"test_class": {"identifier": "KafkaProducerTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/tools/producer/kafka/KafkaProducerTest.java"}, "test_case": {"identifier": "componentParallelismCouldBeSetThroughConfig", "parameters": "(KafkaProducer producer)", "modifiers": "@Test(dataProvider = \"getKafkaProducer\") public", "return": "void", "body": "@Test(dataProvider = \"getKafkaProducer\")\n  public void componentParallelismCouldBeSetThroughConfig(KafkaProducer producer) {\n    Config config = new Config();\n    config.put(KafkaProducer.SPOUT_NUM, 4);\n    config.put(KafkaProducer.BOLT_NUM, 3);\n    StormTopology topology = producer.getTopology(config);\n    assertThat(topology).isNotNull();\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, KafkaProducer.SPOUT_ID), 4);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, KafkaProducer.BOLT_ID), 3);\n  }", "signature": "void componentParallelismCouldBeSetThroughConfig(KafkaProducer producer)", "full_signature": "@Test(dataProvider = \"getKafkaProducer\") public void componentParallelismCouldBeSetThroughConfig(KafkaProducer producer)", "class_method_signature": "KafkaProducerTest.componentParallelismCouldBeSetThroughConfig(KafkaProducer producer)", "testcase": true, "constructor": false, "invocations": ["put", "put", "getTopology", "isNotNull", "assertThat", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon"]}, "focal_class": {"identifier": "KafkaProducer", "superclass": "", "interfaces": "implements IProducer", "fields": [{"original_string": "public static final String SPOUT_ID = \"spout\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_ID = \"spout\"", "var_name": "SPOUT_ID"}, {"original_string": "public static final String SPOUT_NUM = \"component.spout_num\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_NUM = \"component.spout_num\"", "var_name": "SPOUT_NUM"}, {"original_string": "public static final String BOLT_ID = \"bolt\";", "modifier": "public static final", "type": "String", "declarator": "BOLT_ID = \"bolt\"", "var_name": "BOLT_ID"}, {"original_string": "public static final String BOLT_NUM = \"component.bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "BOLT_NUM = \"component.bolt_num\"", "var_name": "BOLT_NUM"}, {"original_string": "public static final String BROKER_LIST = \"broker.list\";", "modifier": "public static final", "type": "String", "declarator": "BROKER_LIST = \"broker.list\"", "var_name": "BROKER_LIST"}, {"original_string": "public static final String TOPIC = \"topic\";", "modifier": "public static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "public static final int DEFAULT_SPOUT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SPOUT_NUM = 4", "var_name": "DEFAULT_SPOUT_NUM"}, {"original_string": "public static final int DEFAULT_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BOLT_NUM = 4", "var_name": "DEFAULT_BOLT_NUM"}, {"original_string": "protected IRichSpout spout;", "modifier": "protected", "type": "IRichSpout", "declarator": "spout", "var_name": "spout"}, {"original_string": "protected final IRichBolt bolt = new KafkaBolt<String, String>();", "modifier": "protected final", "type": "IRichBolt", "declarator": "bolt = new KafkaBolt<String, String>()", "var_name": "bolt"}], "methods": [{"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "KafkaProducer.getTopology(Config config)", "testcase": false, "constructor": false}, {"identifier": "getSpout", "parameters": "()", "modifiers": "public", "return": "IRichSpout", "signature": "IRichSpout getSpout()", "full_signature": "public IRichSpout getSpout()", "class_method_signature": "KafkaProducer.getSpout()", "testcase": false, "constructor": false}, {"identifier": "getKafkaConfig", "parameters": "(Map options)", "modifiers": "private", "return": "Map", "signature": "Map getKafkaConfig(Map options)", "full_signature": "private Map getKafkaConfig(Map options)", "class_method_signature": "KafkaProducer.getKafkaConfig(Map options)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/tools/producer/kafka/KafkaProducer.java"}, "focal_method": {"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n  public StormTopology getTopology(Config config) {\n    config.putAll(getKafkaConfig(config));\n\n    final int spoutNum = BenchmarkUtils.getInt(config , SPOUT_NUM, DEFAULT_SPOUT_NUM);\n    final int boltNum = BenchmarkUtils.getInt(config, BOLT_NUM, DEFAULT_BOLT_NUM);\n\n    TopologyBuilder builder = new TopologyBuilder();\n    builder.setSpout(SPOUT_ID, spout, spoutNum);\n    builder.setBolt(BOLT_ID, bolt, boltNum).localOrShuffleGrouping(SPOUT_ID);\n    return builder.createTopology();\n  }", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "KafkaProducer.getTopology(Config config)", "testcase": false, "constructor": false, "invocations": ["putAll", "getKafkaConfig", "getInt", "getInt", "setSpout", "localOrShuffleGrouping", "setBolt", "createTopology"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}