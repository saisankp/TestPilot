{"test_class": {"identifier": "TimeoutInputStreamTest", "superclass": "", "interfaces": "", "fields": [], "file": "mycontainer-components/mycontainer-commons/src/test/java/com/googlecode/mycontainer/commons/io/TimeoutInputStreamTest.java"}, "test_case": {"identifier": "testOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOk() throws Exception {\n\t\tByteArrayInputStream bin = new ByteArrayInputStream(\n\t\t\t\t\"this is my test\".getBytes());\n\t\tTimeoutInputStream in = new TimeoutInputStream(bin, 500l);\n\t\tDataInputStream data = new DataInputStream(in);\n\t\tbyte[] buffer = new byte[\"this is my test\".length()];\n\t\tdata.readFully(buffer);\n\t\tassertEquals(\"this is my test\", new String(buffer));\n\t\ttry {\n\t\t\tdata.read();\n\t\t\tfail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tassertEquals(\"timeout\", e.getMessage());\n\t\t}\n\t\tdata.close();\n\t}", "signature": "void testOk()", "full_signature": "@Test public void testOk()", "class_method_signature": "TimeoutInputStreamTest.testOk()", "testcase": true, "constructor": false, "invocations": ["getBytes", "length", "readFully", "assertEquals", "read", "fail", "assertEquals", "getMessage", "close"]}, "focal_class": {"identifier": "TimeoutInputStream", "superclass": "extends FilterInputStream", "interfaces": "", "fields": [{"original_string": "private long timeout = 1000l;", "modifier": "private", "type": "long", "declarator": "timeout = 1000l", "var_name": "timeout"}, {"original_string": "private long sleep = 10l;", "modifier": "private", "type": "long", "declarator": "sleep = 10l", "var_name": "sleep"}], "methods": [{"identifier": "TimeoutInputStream", "parameters": "(InputStream in, long timeout)", "modifiers": "public", "return": "", "signature": " TimeoutInputStream(InputStream in, long timeout)", "full_signature": "public  TimeoutInputStream(InputStream in, long timeout)", "class_method_signature": "TimeoutInputStream.TimeoutInputStream(InputStream in, long timeout)", "testcase": false, "constructor": true}, {"identifier": "TimeoutInputStream", "parameters": "(InputStream in)", "modifiers": "public", "return": "", "signature": " TimeoutInputStream(InputStream in)", "full_signature": "public  TimeoutInputStream(InputStream in)", "class_method_signature": "TimeoutInputStream.TimeoutInputStream(InputStream in)", "testcase": false, "constructor": true}, {"identifier": "getSleep", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSleep()", "full_signature": "public long getSleep()", "class_method_signature": "TimeoutInputStream.getSleep()", "testcase": false, "constructor": false}, {"identifier": "setSleep", "parameters": "(long sleep)", "modifiers": "public", "return": "void", "signature": "void setSleep(long sleep)", "full_signature": "public void setSleep(long sleep)", "class_method_signature": "TimeoutInputStream.setSleep(long sleep)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeout()", "full_signature": "public long getTimeout()", "class_method_signature": "TimeoutInputStream.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(long timeout)", "modifiers": "public", "return": "void", "signature": "void setTimeout(long timeout)", "full_signature": "public void setTimeout(long timeout)", "class_method_signature": "TimeoutInputStream.setTimeout(long timeout)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "TimeoutInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b)", "full_signature": "@Override public int read(byte[] b)", "class_method_signature": "TimeoutInputStream.read(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public int read(byte[] b, int off, int len)", "class_method_signature": "TimeoutInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long n)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long n)", "full_signature": "@Override public long skip(long n)", "class_method_signature": "TimeoutInputStream.skip(long n)", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "TimeoutInputStream.available()", "testcase": false, "constructor": false}, {"identifier": "readyFor", "parameters": "(int bytes)", "modifiers": "public", "return": "boolean", "signature": "boolean readyFor(int bytes)", "full_signature": "public boolean readyFor(int bytes)", "class_method_signature": "TimeoutInputStream.readyFor(int bytes)", "testcase": false, "constructor": false}, {"identifier": "waitFor", "parameters": "(int bytes)", "modifiers": "public", "return": "void", "signature": "void waitFor(int bytes)", "full_signature": "public void waitFor(int bytes)", "class_method_signature": "TimeoutInputStream.waitFor(int bytes)", "testcase": false, "constructor": false}], "file": "mycontainer-components/mycontainer-commons/src/main/java/com/googlecode/mycontainer/commons/io/TimeoutInputStream.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int read() {\n\t\twaitFor(1);\n\t\treturn super.read();\n\t}", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "TimeoutInputStream.read()", "testcase": false, "constructor": false, "invocations": ["waitFor", "read"]}, "repository": {"repo_id": 9149127, "url": "https://github.com/murer/mycontainer", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 13, "size": 1353, "license": "licensed"}}