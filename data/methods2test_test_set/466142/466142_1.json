{"test_class": {"identifier": "TestDynamicDataSourceProxy", "superclass": "", "interfaces": "", "fields": [], "file": "bonecp-spring/src/test/java/com/jolbox/bonecp/spring/TestDynamicDataSourceProxy.java"}, "test_case": {"identifier": "testSwitchDataSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSwitchDataSource() throws SQLException, ClassNotFoundException {\n\n\t\tBoneCPDataSource mockDataSource = createNiceMock(BoneCPDataSource.class);\n\t\tDynamicDataSourceProxy ddsp = new DynamicDataSourceProxy();\n\t\t// Test #1: Check for correct instance.\n\t\tddsp.setTargetDataSource(new DelegatingDataSource());\n\t\ttry{\n\t\t\tddsp.switchDataSource(null);\n\t\t\tfail(\"Should throw an exception\");\n\t\t} catch(SQLException e){\n\t\t\t// do nothing\n\t\t}\n\t\t\n\t\t// Test #2: Given a good config, should initialize pool and switch datasource to it\n\t\tBoneCPConfig config = new BoneCPConfig();\n\t\tconfig.setJdbcUrl(\"jdbc:mock\");\n\t\tconfig.setUsername(\"sa\");\n\t\tconfig.setPassword(\"\");\n\t\tconfig.setMinConnectionsPerPartition(2);\n\t\tconfig.setMaxConnectionsPerPartition(2);\n\t\tconfig.setPartitionCount(1);\n\t\t\n\n\t\tddsp = new DynamicDataSourceProxy(mockDataSource);\n\n\t\t// Old datasource should be closed.\n\t\tmockDataSource.close();\n\t\texpectLastCall().once();\n\t\treplay(mockDataSource);\n\t\tddsp.switchDataSource(config);\n\t\t// and a new datasource should be in place\n\t\tassertNotSame(mockDataSource, ddsp.getTargetDataSource());\n\t\tverify(mockDataSource);\n\t}", "signature": "void testSwitchDataSource()", "full_signature": "@Test public void testSwitchDataSource()", "class_method_signature": "TestDynamicDataSourceProxy.testSwitchDataSource()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "setTargetDataSource", "switchDataSource", "fail", "setJdbcUrl", "setUsername", "setPassword", "setMinConnectionsPerPartition", "setMaxConnectionsPerPartition", "setPartitionCount", "close", "once", "expectLastCall", "replay", "switchDataSource", "assertNotSame", "getTargetDataSource", "verify"]}, "focal_class": {"identifier": "DynamicDataSourceProxy", "superclass": "extends DelegatingDataSource", "interfaces": "", "fields": [{"original_string": "private static final Log logger = LogFactory.getLog(LazyConnectionDataSourceProxy.class);", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog(LazyConnectionDataSourceProxy.class)", "var_name": "logger"}], "methods": [{"identifier": "DynamicDataSourceProxy", "parameters": "(DataSource targetDataSource)", "modifiers": "public", "return": "", "signature": " DynamicDataSourceProxy(DataSource targetDataSource)", "full_signature": "public  DynamicDataSourceProxy(DataSource targetDataSource)", "class_method_signature": "DynamicDataSourceProxy.DynamicDataSourceProxy(DataSource targetDataSource)", "testcase": false, "constructor": true}, {"identifier": "DynamicDataSourceProxy", "parameters": "()", "modifiers": "public", "return": "", "signature": " DynamicDataSourceProxy()", "full_signature": "public  DynamicDataSourceProxy()", "class_method_signature": "DynamicDataSourceProxy.DynamicDataSourceProxy()", "testcase": false, "constructor": true}, {"identifier": "switchDataSource", "parameters": "(BoneCPConfig newConfig)", "modifiers": "public", "return": "void", "signature": "void switchDataSource(BoneCPConfig newConfig)", "full_signature": "public void switchDataSource(BoneCPConfig newConfig)", "class_method_signature": "DynamicDataSourceProxy.switchDataSource(BoneCPConfig newConfig)", "testcase": false, "constructor": false}], "file": "bonecp-spring/src/main/java/com/jolbox/bonecp/spring/DynamicDataSourceProxy.java"}, "focal_method": {"identifier": "switchDataSource", "parameters": "(BoneCPConfig newConfig)", "modifiers": "public", "return": "void", "body": "public void switchDataSource(BoneCPConfig newConfig) throws SQLException {\n\t\tlogger.info(\"Switch to new datasource requested. New Config: \"+newConfig);\n\t\tDataSource oldDS = getTargetDataSource();\n \n\t\tif (!(oldDS instanceof BoneCPDataSource)){\n\t\t\tthrow new SQLException(\"Unknown datasource type! Was expecting BoneCPDataSource but received \"+oldDS.getClass()+\". Not switching datasource!\");\n\t\t}\n\t\t\n\t\tBoneCPDataSource newDS = new BoneCPDataSource(newConfig);\n\t\tnewDS.getConnection().close(); // initialize a connection (+ throw it away) to force the datasource to initialize the pool\n\t\t\n\t\t// force application to start using the new one \n\t\tsetTargetDataSource(newDS);\n\t\t\n\t\tlogger.info(\"Shutting down old datasource slowly. Old Config: \"+oldDS);\n\t\t// tell the old datasource to terminate. This terminates the pool lazily so existing checked out connections can still be used.\n\t\t((BoneCPDataSource)oldDS).close();\n\t}", "signature": "void switchDataSource(BoneCPConfig newConfig)", "full_signature": "public void switchDataSource(BoneCPConfig newConfig)", "class_method_signature": "DynamicDataSourceProxy.switchDataSource(BoneCPConfig newConfig)", "testcase": false, "constructor": false, "invocations": ["info", "getTargetDataSource", "getClass", "close", "getConnection", "setTargetDataSource", "info", "close"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}