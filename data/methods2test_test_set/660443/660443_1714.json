{"test_class": {"identifier": "SimpleAtomComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = DefaultChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = DefaultChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/SimpleAtomComparatorTest.java"}, "test_case": {"identifier": "testCompare_DifferentHybridization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare_DifferentHybridization() throws Exception {\n\n        SimpleAtomComparator comparator = new SimpleAtomComparator();\n\n        IAtom a1 = builder.newInstance(IAtom.class, \"C\");\n        IAtom a2 = builder.newInstance(IAtom.class, \"C\");\n\n        a1.setHybridization(IAtomType.Hybridization.SP2);\n        a2.setHybridization(IAtomType.Hybridization.SP3);\n\n        Assert.assertEquals(\"Atom 2 should have priority\", -1, comparator.compare(a1, a2));\n\n    }", "signature": "void testCompare_DifferentHybridization()", "full_signature": "@Test public void testCompare_DifferentHybridization()", "class_method_signature": "SimpleAtomComparatorTest.testCompare_DifferentHybridization()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newInstance", "setHybridization", "setHybridization", "assertEquals", "compare"]}, "focal_class": {"identifier": "SimpleAtomComparator", "superclass": "", "interfaces": "implements Comparator<IAtom>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 2345252069991872083L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2345252069991872083L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "compare", "parameters": "(IAtom o1, IAtom o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(IAtom o1, IAtom o2)", "full_signature": "@Override public int compare(IAtom o1, IAtom o2)", "class_method_signature": "SimpleAtomComparator.compare(IAtom o1, IAtom o2)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/SimpleAtomComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(IAtom o1, IAtom o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(IAtom o1, IAtom o2) {\n        if (o1.getSymbol().equalsIgnoreCase(o2.getSymbol())) {\n            if (o1.getHybridization() != null && o2.getHybridization() != null) {\n                return o1.getHybridization().compareTo(o2.getHybridization());\n            }\n            return 0;\n        }\n        return 10 * o1.getSymbol().compareToIgnoreCase(o2.getSymbol());\n    }", "signature": "int compare(IAtom o1, IAtom o2)", "full_signature": "@Override public int compare(IAtom o1, IAtom o2)", "class_method_signature": "SimpleAtomComparator.compare(IAtom o1, IAtom o2)", "testcase": false, "constructor": false, "invocations": ["equalsIgnoreCase", "getSymbol", "getSymbol", "getHybridization", "getHybridization", "compareTo", "getHybridization", "getHybridization", "compareToIgnoreCase", "getSymbol", "getSymbol"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}