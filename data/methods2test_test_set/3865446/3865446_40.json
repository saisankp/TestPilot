{"test_class": {"identifier": "PhenotypeGaussianMutationReproductionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected PhenotypeGaussianMutationReproductionOperator operator;", "modifier": "protected", "type": "PhenotypeGaussianMutationReproductionOperator", "declarator": "operator", "var_name": "operator"}, {"original_string": "protected RandomGenerator randomGenerator;", "modifier": "protected", "type": "RandomGenerator", "declarator": "randomGenerator", "var_name": "randomGenerator"}, {"original_string": "protected ObjectiveFunction function;", "modifier": "protected", "type": "ObjectiveFunction", "declarator": "function", "var_name": "function"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/reproduction/PhenotypeGaussianMutationReproductionOperatorTest.java"}, "test_case": {"identifier": "testReproduce", "parameters": "()", "modifiers": "@Test // makes Individuals and mutates some of their values public", "return": "void", "body": "@Test\n    // makes Individuals and mutates some of their values\n    public void testReproduce() throws Exception {\n        this.operator = new PhenotypeGaussianMutationReproductionOperator();\n\n        this.randomGenerator = new EmptyRandomGenerator(){\n            protected double[] randoms = new double[]{0.8, 0.3, 0.4, 0.5};\n            protected int randomIdx = 0;\n            protected double[] gaussians = new double[]{1.0, 0.5, -0.75};\n            protected int gaussIdx = 0;\n\n            @Override\n            public double nextRandom() {\n                return randoms[randomIdx++];\n            }\n            @Override\n            public double nextGaussian(double mean, double standardDeviation) {\n                return gaussians[gaussIdx++];\n            }\n        };\n        this.operator.setRandomGenerator(this.randomGenerator);\n        // { <-3.0, 1.0> , <-2.0, 1.0>}\n        this.function = new EmptyObjectiveFunction(){\n            @Override\n            public boolean inBounds(Point position) {\n                double[] pos = position.toArray();\n                return (pos[0] > -3.0 && pos[0] < 1.0 && pos[1] > -2.0 && pos[1] < 1.0);\n            }\n            @Override\n            public int getDimension() {\n                return 2;\n            }\n        };\n        this.operator.setFunction(this.function);\n        this.operator.setPopulationFactory(new SimplePopulationFactory());\n        this.operator.setMutationProbability(0.5);\n        this.operator.setStepSize(1.0);\n        double[] positionsX = new double[]{0.0, -2.0};\n        double[] positionsY = new double[]{0.5, -1.0};\n        Individual[] parents = new Individual[2];\n        for (int i = 0; i < 2; i++){\n            parents[i] = new SimpleIndividual(1, 1.0, new SimplePhenotypeRepresentation(new double[]{positionsX[i], positionsY[i]}));\n        }\n\n        Population[] childrenPops = this.operator.reproduce(new Population[]{new SimplePopulation(parents)});\n        assertTrue(childrenPops.length == 1);\n        Individual[] children = childrenPops[0].getIndividuals();\n        assertTrue(children.length == 2);\n        // first individual without change due to inBounds error\n        assertEquals(0.0, children[0].getRepresentation().getDoubleValue()[0]);\n        assertEquals(0.5, children[0].getRepresentation().getDoubleValue()[1]);\n        // second individual changed in both dimensions\n        assertEquals(-1.5, children[1].getRepresentation().getDoubleValue()[0]);\n        assertEquals(-1.75, children[1].getRepresentation().getDoubleValue()[1]);\n    }", "signature": "void testReproduce()", "full_signature": "@Test // makes Individuals and mutates some of their values public void testReproduce()", "class_method_signature": "PhenotypeGaussianMutationReproductionOperatorTest.testReproduce()", "testcase": true, "constructor": false, "invocations": ["setRandomGenerator", "toArray", "setFunction", "setPopulationFactory", "setMutationProbability", "setStepSize", "reproduce", "assertTrue", "getIndividuals", "assertTrue", "assertEquals", "getDoubleValue", "getRepresentation", "assertEquals", "getDoubleValue", "getRepresentation", "assertEquals", "getDoubleValue", "getRepresentation", "assertEquals", "getDoubleValue", "getRepresentation"]}, "focal_class": {"identifier": "PhenotypeGaussianMutationReproductionOperator", "superclass": "extends AbstractMutationReproductionOperator", "interfaces": "", "fields": [{"original_string": "protected double mean = 0.0;", "modifier": "protected", "type": "double", "declarator": "mean = 0.0", "var_name": "mean"}, {"original_string": "protected double deviation;", "modifier": "protected", "type": "double", "declarator": "deviation", "var_name": "deviation"}, {"original_string": "@Property(name = \"average mutation step size\")\n    @Range(from = 0.0, to = Double.MAX_VALUE)\n    protected double stepSize = 0.1;", "modifier": "@Property(name = \"average mutation step size\")\n    @Range(from = 0.0, to = Double.MAX_VALUE)\n    protected", "type": "double", "declarator": "stepSize = 0.1", "var_name": "stepSize"}, {"original_string": "protected static double SQRT = Math.sqrt(2.0 / Math.PI);", "modifier": "protected static", "type": "double", "declarator": "SQRT = Math.sqrt(2.0 / Math.PI)", "var_name": "SQRT"}], "methods": [{"identifier": "PhenotypeGaussianMutationReproductionOperator", "parameters": "()", "modifiers": "public", "return": "", "signature": " PhenotypeGaussianMutationReproductionOperator()", "full_signature": "public  PhenotypeGaussianMutationReproductionOperator()", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.PhenotypeGaussianMutationReproductionOperator()", "testcase": false, "constructor": true}, {"identifier": "reproduceInternal", "parameters": "(Individual[] children, Individual[] parents)", "modifiers": "@Override protected", "return": "void", "signature": "void reproduceInternal(Individual[] children, Individual[] parents)", "full_signature": "@Override protected void reproduceInternal(Individual[] children, Individual[] parents)", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.reproduceInternal(Individual[] children, Individual[] parents)", "testcase": false, "constructor": false}, {"identifier": "getAcceptableType", "parameters": "()", "modifiers": "public", "return": "Class<? extends Representation>", "signature": "Class<? extends Representation> getAcceptableType()", "full_signature": "public Class<? extends Representation> getAcceptableType()", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.getAcceptableType()", "testcase": false, "constructor": false}, {"identifier": "getDeviation", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDeviation()", "full_signature": "public double getDeviation()", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.getDeviation()", "testcase": false, "constructor": false}, {"identifier": "getDeviation", "parameters": "(double stepSize)", "modifiers": "public", "return": "double", "signature": "double getDeviation(double stepSize)", "full_signature": "public double getDeviation(double stepSize)", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.getDeviation(double stepSize)", "testcase": false, "constructor": false}, {"identifier": "getStepSize", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getStepSize()", "full_signature": "public double getStepSize()", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.getStepSize()", "testcase": false, "constructor": false}, {"identifier": "setStepSize", "parameters": "(double stepSize)", "modifiers": "public", "return": "void", "signature": "void setStepSize(double stepSize)", "full_signature": "public void setStepSize(double stepSize)", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.setStepSize(double stepSize)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/reproduction/PhenotypeGaussianMutationReproductionOperator.java"}, "focal_method": {"identifier": "setStepSize", "parameters": "(double stepSize)", "modifiers": "public", "return": "void", "body": "public void setStepSize(double stepSize) {\n        this.stepSize = stepSize;\n        this.deviation = this.getDeviation(stepSize);\n    }", "signature": "void setStepSize(double stepSize)", "full_signature": "public void setStepSize(double stepSize)", "class_method_signature": "PhenotypeGaussianMutationReproductionOperator.setStepSize(double stepSize)", "testcase": false, "constructor": false, "invocations": ["getDeviation"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}