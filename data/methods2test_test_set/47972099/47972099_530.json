{"test_class": {"identifier": "CountMinHeavyHitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double fraction = 0.01;", "modifier": "static final", "type": "double", "declarator": "fraction = 0.01", "var_name": "fraction"}, {"original_string": "static final double error = 0.005;", "modifier": "static final", "type": "double", "declarator": "error = 0.005", "var_name": "error"}, {"original_string": "static final double confidence = 0.99;", "modifier": "static final", "type": "double", "declarator": "confidence = 0.99", "var_name": "confidence"}, {"original_string": "static final int seed = 7362181;", "modifier": "static final", "type": "int", "declarator": "seed = 7362181", "var_name": "seed"}, {"original_string": "static final Random r = new Random();", "modifier": "static final", "type": "Random", "declarator": "r = new Random()", "var_name": "r"}, {"original_string": "static final int cardinality = 1000000;", "modifier": "static final", "type": "int", "declarator": "cardinality = 1000000", "var_name": "cardinality"}, {"original_string": "static final int maxScale = 100000;", "modifier": "static final", "type": "int", "declarator": "maxScale = 100000", "var_name": "maxScale"}], "file": "flink-contrib/flink-operator-stats/src/test/java/org/apache/flink/contrib/operatorstatistics/heavyhitters/CountMinHeavyHitterTest.java"}, "test_case": {"identifier": "merge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void merge() throws CountMinHeavyHitter.CMHeavyHitterMergeException {\n\n\t\tint numToMerge = 5;\n\n\t\tlong[] actualFreq = new long[maxScale];\n\t\tCountMinHeavyHitter merged = new CountMinHeavyHitter(fraction,error,confidence,seed);\n\t\tlong totalCardinality = 0;\n\n\t\tCountMinHeavyHitter[] sketches = new CountMinHeavyHitter[numToMerge];\n\t\tfor (int i = 0; i < numToMerge; i++) {\n\t\t\tCountMinSketch cms = new CountMinSketch(error, confidence, seed);\n\t\t\tsketches[i] = new CountMinHeavyHitter(cms, fraction);\n\t\t\tfor (int j = 0; j < cardinality; j++) {\n\t\t\t\tint val;\n\t\t\t\tif (r.nextDouble()<0.1){\n\t\t\t\t\tval = r.nextInt(10);\n\t\t\t\t}else{\n\t\t\t\t\tval = r.nextInt(maxScale);\n\t\t\t\t}\n\t\t\t\tsketches[i].addObject(val);\n\t\t\t\tactualFreq[val]++;\n\t\t\t\ttotalCardinality++;\n\t\t\t}\n\t\t\tmerged.merge(sketches[i]);\n\t\t}\n\n\t\tMap<Object,Long> mergedHeavyHitters = merged.getHeavyHitters();\n\t\tlong frequency = (long)(totalCardinality*fraction);\n\n\t\tfor (int i = 0; i < actualFreq.length; ++i) {\n\t\t\tif (actualFreq[i] >= frequency) {\n\t\t\t\tassertTrue(\"All items with freq. > s.n will be found. Item \" + i + \". Real freq. \" + actualFreq[i] + \" Expected freq.\" + frequency, mergedHeavyHitters.containsKey(i));\n\t\t\t}\n\t\t}\n\t}", "signature": "void merge()", "full_signature": "@Test public void merge()", "class_method_signature": "CountMinHeavyHitterTest.merge()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "nextInt", "nextInt", "addObject", "merge", "getHeavyHitters", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "CountMinHeavyHitter", "superclass": "", "interfaces": "implements HeavyHitter, Serializable", "fields": [{"original_string": "private transient CountMinSketch countMinSketch;", "modifier": "private transient", "type": "CountMinSketch", "declarator": "countMinSketch", "var_name": "countMinSketch"}, {"original_string": "private HashMap<Object,Long> heavyHitters;", "modifier": "private", "type": "HashMap<Object,Long>", "declarator": "heavyHitters", "var_name": "heavyHitters"}, {"original_string": "private double fraction;", "modifier": "private", "type": "double", "declarator": "fraction", "var_name": "fraction"}, {"original_string": "private double error;", "modifier": "private", "type": "double", "declarator": "error", "var_name": "error"}, {"original_string": "private long cardinality;", "modifier": "private", "type": "long", "declarator": "cardinality", "var_name": "cardinality"}], "methods": [{"identifier": "CountMinHeavyHitter", "parameters": "(double fraction, double error, double confidence, int seed)", "modifiers": "public", "return": "", "signature": " CountMinHeavyHitter(double fraction, double error, double confidence, int seed)", "full_signature": "public  CountMinHeavyHitter(double fraction, double error, double confidence, int seed)", "class_method_signature": "CountMinHeavyHitter.CountMinHeavyHitter(double fraction, double error, double confidence, int seed)", "testcase": false, "constructor": true}, {"identifier": "CountMinHeavyHitter", "parameters": "(CountMinSketch countMinSketch, double fraction)", "modifiers": "public", "return": "", "signature": " CountMinHeavyHitter(CountMinSketch countMinSketch, double fraction)", "full_signature": "public  CountMinHeavyHitter(CountMinSketch countMinSketch, double fraction)", "class_method_signature": "CountMinHeavyHitter.CountMinHeavyHitter(CountMinSketch countMinSketch, double fraction)", "testcase": false, "constructor": true}, {"identifier": "addObject", "parameters": "(Object o)", "modifiers": "@Override public", "return": "void", "signature": "void addObject(Object o)", "full_signature": "@Override public void addObject(Object o)", "class_method_signature": "CountMinHeavyHitter.addObject(Object o)", "testcase": false, "constructor": false}, {"identifier": "updateHeavyHitters", "parameters": "(Object item)", "modifiers": "private", "return": "void", "signature": "void updateHeavyHitters(Object item)", "full_signature": "private void updateHeavyHitters(Object item)", "class_method_signature": "CountMinHeavyHitter.updateHeavyHitters(Object item)", "testcase": false, "constructor": false}, {"identifier": "removeNonFrequent", "parameters": "(long minFrequency)", "modifiers": "private", "return": "void", "signature": "void removeNonFrequent(long minFrequency)", "full_signature": "private void removeNonFrequent(long minFrequency)", "class_method_signature": "CountMinHeavyHitter.removeNonFrequent(long minFrequency)", "testcase": false, "constructor": false}, {"identifier": "estimateCount", "parameters": "(Object item)", "modifiers": "public", "return": "long", "signature": "long estimateCount(Object item)", "full_signature": "public long estimateCount(Object item)", "class_method_signature": "CountMinHeavyHitter.estimateCount(Object item)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(HeavyHitter toMerge)", "modifiers": "public", "return": "void", "signature": "void merge(HeavyHitter toMerge)", "full_signature": "public void merge(HeavyHitter toMerge)", "class_method_signature": "CountMinHeavyHitter.merge(HeavyHitter toMerge)", "testcase": false, "constructor": false}, {"identifier": "getHeavyHitters", "parameters": "()", "modifiers": "@Override public", "return": "HashMap<Object,Long>", "signature": "HashMap<Object,Long> getHeavyHitters()", "full_signature": "@Override public HashMap<Object,Long> getHeavyHitters()", "class_method_signature": "CountMinHeavyHitter.getHeavyHitters()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CountMinHeavyHitter.toString()", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "(ObjectOutputStream oos)", "modifiers": "private", "return": "void", "signature": "void writeObject(ObjectOutputStream oos)", "full_signature": "private void writeObject(ObjectOutputStream oos)", "class_method_signature": "CountMinHeavyHitter.writeObject(ObjectOutputStream oos)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "CountMinHeavyHitter.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-operator-stats/src/main/java/org/apache/flink/contrib/operatorstatistics/heavyhitters/CountMinHeavyHitter.java"}, "focal_method": {"identifier": "merge", "parameters": "(HeavyHitter toMerge)", "modifiers": "public", "return": "void", "body": "public void merge(HeavyHitter toMerge) throws CMHeavyHitterMergeException {\n\n\t\ttry {\n\t\t\tCountMinHeavyHitter cmToMerge = (CountMinHeavyHitter)toMerge;\n\t\t\tif (this.fraction != cmToMerge.fraction) {\n\t\t\t\tthrow new CMHeavyHitterMergeException(\"The fraction for both heavy hitters must be the same\");\n\t\t\t}\n\n\t\t\tthis.countMinSketch = CountMinSketch.merge(this.countMinSketch, cmToMerge.countMinSketch);\n\n\t\t\tHashMap<Object,Long> mergedHeavyHitters = new HashMap<Object, Long>();\n\n\t\t\tfor (Map.Entry<Object, Long> entry : this.heavyHitters.entrySet()) {\n\t\t\t\tmergedHeavyHitters.put(entry.getKey(), estimateCount(entry.getKey()));\n\t\t\t}\n\n\t\t\tfor (Map.Entry<Object, Long> entry : cmToMerge.heavyHitters.entrySet()) {\n\t\t\t\tif (!mergedHeavyHitters.containsKey(entry.getKey())) {\n\t\t\t\t\tmergedHeavyHitters.put(entry.getKey(), estimateCount(entry.getKey()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.heavyHitters = mergedHeavyHitters;\n\t\t\tcardinality+=cmToMerge.cardinality;\n\n\t\t}catch (ClassCastException ex){\n\t\t\tthrow new CMHeavyHitterMergeException(\"Both heavy hitter objects must belong to the same class\");\n\t\t}catch (Exception ex){\n\t\t\tthrow new CMHeavyHitterMergeException(\"Cannot merge count min sketches: \"+ex.getMessage());\n\t\t}\n\t}", "signature": "void merge(HeavyHitter toMerge)", "full_signature": "public void merge(HeavyHitter toMerge)", "class_method_signature": "CountMinHeavyHitter.merge(HeavyHitter toMerge)", "testcase": false, "constructor": false, "invocations": ["merge", "entrySet", "put", "getKey", "estimateCount", "getKey", "entrySet", "containsKey", "getKey", "put", "getKey", "estimateCount", "getKey", "getMessage"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}