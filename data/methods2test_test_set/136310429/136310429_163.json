{"test_class": {"identifier": "WXReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "HybridAppDev/weex_sdk/src/test/java/com/taobao/weex/utils/WXReflectionUtilsTest.java"}, "test_case": {"identifier": "testParseArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testParseArgument() throws Exception {\n   Object value =  WXReflectionUtils.parseArgument(String.class,\"dkdkdkdk\");\n    assertTrue(value instanceof String);\n\n    value = WXReflectionUtils.parseArgument(long.class,\"123444\");\n    assertTrue(value instanceof Long);\n\n    value = WXReflectionUtils.parseArgument(int.class,\"123444\");\n    assertTrue(value instanceof Integer);\n\n    value = WXReflectionUtils.parseArgument(Integer.class,\"123444\");\n    assertTrue(value instanceof Integer);\n\n    value = WXReflectionUtils.parseArgument(int.class,123444);\n    assertTrue(value instanceof Integer);\n\n    value = WXReflectionUtils.parseArgument(double.class, Double.toString(123.444d));\n    assertTrue(value instanceof Double);\n\n\n\n    JSONObject j = new JSONObject();\n    j.put(\"a\",\"b\");\n    j.put(\"c\",23);\n    value = WXReflectionUtils.parseArgument(String.class,j);\n    assertTrue(value instanceof String);\n\n    value = WXReflectionUtils.parseArgument(Map.class,j);\n    assertTrue(value instanceof Map);\n    assertEquals(((Map)value).get(\"a\"),\"b\");\n\n    value = WXReflectionUtils.parseArgument(JSONObject.class,j);\n    assertTrue(value instanceof JSONObject);\n    assertEquals(((JSONObject)value).get(\"a\"),\"b\");\n    assertEquals(((JSONObject)value).get(\"c\"),23);\n\n    value = WXReflectionUtils.parseArgument(JSONObject.class, JSON.toJSONString(j));\n    assertTrue(value instanceof JSONObject);\n    assertEquals(((JSONObject)value).get(\"a\"),\"b\");\n    assertEquals(((JSONObject)value).get(\"c\"),23);\n\n    JSONArray k = new JSONArray();\n    k.add(\"b\");\n    k.add(23);\n    value = WXReflectionUtils.parseArgument(String[].class, k);\n    assertTrue(value instanceof String[]);\n    assertEquals(((String[])value)[0],\"b\");\n    assertEquals(((String[])value)[1],\"23\");\n\n    value = WXReflectionUtils.parseArgument(String[].class, JSON.toJSONString(k));\n    assertTrue(value instanceof String[]);\n    assertEquals(((String[])value)[0],\"b\");\n    assertEquals(((String[])value)[1],\"23\");\n\n    value = WXReflectionUtils.parseArgument(List.class, JSON.toJSONString(k));\n    assertTrue(value instanceof List);\n    assertEquals(((List)value).get(0),\"b\");\n    assertEquals(((List)value).get(1),23);\n\n    k = new JSONArray();\n    k.add(1);\n    k.add(23);\n    value = WXReflectionUtils.parseArgument(int[].class, JSON.toJSONString(k));\n    assertTrue(value instanceof int[]);\n    assertEquals(((int[])value)[0],1);\n    assertEquals(((int[])value)[1],23);\n  }", "signature": "void testParseArgument()", "full_signature": "@Test public void testParseArgument()", "class_method_signature": "WXReflectionUtilsTest.testParseArgument()", "testcase": true, "constructor": false, "invocations": ["parseArgument", "assertTrue", "parseArgument", "assertTrue", "parseArgument", "assertTrue", "parseArgument", "assertTrue", "parseArgument", "assertTrue", "parseArgument", "toString", "assertTrue", "put", "put", "parseArgument", "assertTrue", "parseArgument", "assertTrue", "assertEquals", "get", "parseArgument", "assertTrue", "assertEquals", "get", "assertEquals", "get", "parseArgument", "toJSONString", "assertTrue", "assertEquals", "get", "assertEquals", "get", "add", "add", "parseArgument", "assertTrue", "assertEquals", "assertEquals", "parseArgument", "toJSONString", "assertTrue", "assertEquals", "assertEquals", "parseArgument", "toJSONString", "assertTrue", "assertEquals", "get", "assertEquals", "get", "add", "add", "parseArgument", "toJSONString", "assertTrue", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "WXReflectionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseArgument", "parameters": "(Type paramClazz, Object value)", "modifiers": "public static", "return": "Object", "signature": "Object parseArgument(Type paramClazz, Object value)", "full_signature": "public static Object parseArgument(Type paramClazz, Object value)", "class_method_signature": "WXReflectionUtils.parseArgument(Type paramClazz, Object value)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(Object obj, String fieldName, Object value)", "modifiers": "public static", "return": "void", "signature": "void setValue(Object obj, String fieldName, Object value)", "full_signature": "public static void setValue(Object obj, String fieldName, Object value)", "class_method_signature": "WXReflectionUtils.setValue(Object obj, String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredField", "parameters": "(Object object, String fieldName)", "modifiers": "public static", "return": "Field", "signature": "Field getDeclaredField(Object object, String fieldName)", "full_signature": "public static Field getDeclaredField(Object object, String fieldName)", "class_method_signature": "WXReflectionUtils.getDeclaredField(Object object, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(Object bean, Field field, Object value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(Object bean, Field field, Object value)", "full_signature": "public static void setProperty(Object bean, Field field, Object value)", "class_method_signature": "WXReflectionUtils.setProperty(Object bean, Field field, Object value)", "testcase": false, "constructor": false}], "file": "HybridAppDev/weex_sdk/src/main/java/com/taobao/weex/utils/WXReflectionUtils.java"}, "focal_method": {"identifier": "parseArgument", "parameters": "(Type paramClazz, Object value)", "modifiers": "public static", "return": "Object", "body": "public static Object parseArgument(Type paramClazz, Object value) {\n    if (paramClazz == String.class) {\n      return value instanceof String ? value : JSON.toJSONString(value);\n    } else if (paramClazz == int.class) {\n      return value.getClass().isAssignableFrom(int.class) ? value : WXUtils.getInt(value);\n    } else if (paramClazz == long.class) {\n      return value.getClass().isAssignableFrom(long.class) ? value : WXUtils.getLong(value);\n    } else if (paramClazz == double.class) {\n      return value.getClass().isAssignableFrom(double.class) ? value : WXUtils.getDouble(value);\n    } else if (paramClazz == float.class) {\n      return value.getClass().isAssignableFrom(float.class) ? value : WXUtils.getFloat(value);\n    } else if (paramClazz == JSONArray.class && value != null && value.getClass() == JSONArray.class) {\n      return  value;\n    } else if (paramClazz == JSONObject.class && value != null && value.getClass() == JSONObject.class) {\n      return  value;\n    } else {\n      return JSON.parseObject(value instanceof String ? (String) value : JSON.toJSONString(value), paramClazz);\n    }\n  }", "signature": "Object parseArgument(Type paramClazz, Object value)", "full_signature": "public static Object parseArgument(Type paramClazz, Object value)", "class_method_signature": "WXReflectionUtils.parseArgument(Type paramClazz, Object value)", "testcase": false, "constructor": false, "invocations": ["toJSONString", "isAssignableFrom", "getClass", "getInt", "isAssignableFrom", "getClass", "getLong", "isAssignableFrom", "getClass", "getDouble", "isAssignableFrom", "getClass", "getFloat", "getClass", "getClass", "parseObject", "toJSONString"]}, "repository": {"repo_id": 136310429, "url": "https://github.com/fangxiaopeng/HybridAppDev", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 8237, "license": "licensed"}}