{"test_class": {"identifier": "CentrifugeConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "centrifuge-core/src/test/java/com/salesforce/centrifuge/CentrifugeConfigTest.java"}, "test_case": {"identifier": "testConstructorWithFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstructorWithFile() throws IOException {\n        final File tempFile = File.createTempFile(\"centrifuge-config\", \".conf\");\n        tempFile.deleteOnExit();\n\n        Files.copy(getClass().getResourceAsStream(\"/centrifuge-config-test.conf\"), tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        final CentrifugeConfig centrifugeConfig = new CentrifugeConfig(tempFile.getAbsolutePath());\n        assertEquals(centrifugeConfig.getWarmerConfigs().size(), 1);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getWarmerClass(), EchoWarmer.class);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getMaxIterations(), 7777);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getTimeoutMillis(), 1000);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getYieldMillis(), 77);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getMaxFailure(), 777);\n        assertEquals(centrifugeConfig.getWarmerConfigs().get(0).getConcurrency(), 7);\n        assertTrue(centrifugeConfig.getWarmerConfigs().get(0).isRequired());\n        assertEquals(String.valueOf(centrifugeConfig.getWarmerConfigs().get(0).getParams().get(\"text\")), \"this is a sample warmer implementation\");\n    }", "signature": "void testConstructorWithFile()", "full_signature": "@Test public void testConstructorWithFile()", "class_method_signature": "CentrifugeConfigTest.testConstructorWithFile()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "deleteOnExit", "copy", "getResourceAsStream", "getClass", "toPath", "getAbsolutePath", "assertEquals", "size", "getWarmerConfigs", "assertEquals", "getWarmerClass", "get", "getWarmerConfigs", "assertEquals", "getMaxIterations", "get", "getWarmerConfigs", "assertEquals", "getTimeoutMillis", "get", "getWarmerConfigs", "assertEquals", "getYieldMillis", "get", "getWarmerConfigs", "assertEquals", "getMaxFailure", "get", "getWarmerConfigs", "assertEquals", "getConcurrency", "get", "getWarmerConfigs", "assertTrue", "isRequired", "get", "getWarmerConfigs", "assertEquals", "valueOf", "get", "getParams", "get", "getWarmerConfigs"]}, "focal_class": {"identifier": "CentrifugeConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CentrifugeConfig.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CentrifugeConfig.class)", "var_name": "logger"}, {"original_string": "private int parallelism = Runtime.getRuntime().availableProcessors();", "modifier": "private", "type": "int", "declarator": "parallelism = Runtime.getRuntime().availableProcessors()", "var_name": "parallelism"}, {"original_string": "private int logIntervalSeconds = Constants.PROPERTY_VALUE_DEFAULT_LOG_INTERVAL_SECONDS;", "modifier": "private", "type": "int", "declarator": "logIntervalSeconds = Constants.PROPERTY_VALUE_DEFAULT_LOG_INTERVAL_SECONDS", "var_name": "logIntervalSeconds"}, {"original_string": "private int cleanupIntervalMillis = Constants.PROPERTY_VALUE_DEFAULT_CLEANUP_INTERVAL_MILLIS;", "modifier": "private", "type": "int", "declarator": "cleanupIntervalMillis = Constants.PROPERTY_VALUE_DEFAULT_CLEANUP_INTERVAL_MILLIS", "var_name": "cleanupIntervalMillis"}, {"original_string": "private final List<WarmerConfig> warmerConfigs = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "List<WarmerConfig>", "declarator": "warmerConfigs = new CopyOnWriteArrayList<>()", "var_name": "warmerConfigs"}], "methods": [{"identifier": "CentrifugeConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " CentrifugeConfig()", "full_signature": "public  CentrifugeConfig()", "class_method_signature": "CentrifugeConfig.CentrifugeConfig()", "testcase": false, "constructor": true}, {"identifier": "CentrifugeConfig", "parameters": "(final String pathToConfig)", "modifiers": "public", "return": "", "signature": " CentrifugeConfig(final String pathToConfig)", "full_signature": "public  CentrifugeConfig(final String pathToConfig)", "class_method_signature": "CentrifugeConfig.CentrifugeConfig(final String pathToConfig)", "testcase": false, "constructor": true}, {"identifier": "addWarmerConfig", "parameters": "(final WarmerConfig config)", "modifiers": "public", "return": "CentrifugeConfig", "signature": "CentrifugeConfig addWarmerConfig(final WarmerConfig config)", "full_signature": "public CentrifugeConfig addWarmerConfig(final WarmerConfig config)", "class_method_signature": "CentrifugeConfig.addWarmerConfig(final WarmerConfig config)", "testcase": false, "constructor": false}, {"identifier": "getWarmerConfigs", "parameters": "()", "modifiers": "public", "return": "List<WarmerConfig>", "signature": "List<WarmerConfig> getWarmerConfigs()", "full_signature": "public List<WarmerConfig> getWarmerConfigs()", "class_method_signature": "CentrifugeConfig.getWarmerConfigs()", "testcase": false, "constructor": false}, {"identifier": "getLogIntervalSeconds", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLogIntervalSeconds()", "full_signature": "public int getLogIntervalSeconds()", "class_method_signature": "CentrifugeConfig.getLogIntervalSeconds()", "testcase": false, "constructor": false}, {"identifier": "setLogIntervalSeconds", "parameters": "(int logIntervalSeconds)", "modifiers": "public", "return": "CentrifugeConfig", "signature": "CentrifugeConfig setLogIntervalSeconds(int logIntervalSeconds)", "full_signature": "public CentrifugeConfig setLogIntervalSeconds(int logIntervalSeconds)", "class_method_signature": "CentrifugeConfig.setLogIntervalSeconds(int logIntervalSeconds)", "testcase": false, "constructor": false}, {"identifier": "getCleanupIntervalMillis", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCleanupIntervalMillis()", "full_signature": "public int getCleanupIntervalMillis()", "class_method_signature": "CentrifugeConfig.getCleanupIntervalMillis()", "testcase": false, "constructor": false}, {"identifier": "setCleanupIntervalMillis", "parameters": "(int cleanupIntervalMillis)", "modifiers": "public", "return": "CentrifugeConfig", "signature": "CentrifugeConfig setCleanupIntervalMillis(int cleanupIntervalMillis)", "full_signature": "public CentrifugeConfig setCleanupIntervalMillis(int cleanupIntervalMillis)", "class_method_signature": "CentrifugeConfig.setCleanupIntervalMillis(int cleanupIntervalMillis)", "testcase": false, "constructor": false}, {"identifier": "getParallelism", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getParallelism()", "full_signature": "public int getParallelism()", "class_method_signature": "CentrifugeConfig.getParallelism()", "testcase": false, "constructor": false}, {"identifier": "setParallelism", "parameters": "(int parallelism)", "modifiers": "public", "return": "CentrifugeConfig", "signature": "CentrifugeConfig setParallelism(int parallelism)", "full_signature": "public CentrifugeConfig setParallelism(int parallelism)", "class_method_signature": "CentrifugeConfig.setParallelism(int parallelism)", "testcase": false, "constructor": false}], "file": "centrifuge-core/src/main/java/com/salesforce/centrifuge/CentrifugeConfig.java"}, "focal_method": {"identifier": "getWarmerConfigs", "parameters": "()", "modifiers": "public", "return": "List<WarmerConfig>", "body": "public List<WarmerConfig> getWarmerConfigs() {\n        return ImmutableList.copyOf(this.warmerConfigs);\n    }", "signature": "List<WarmerConfig> getWarmerConfigs()", "full_signature": "public List<WarmerConfig> getWarmerConfigs()", "class_method_signature": "CentrifugeConfig.getWarmerConfigs()", "testcase": false, "constructor": false, "invocations": ["copyOf"]}, "repository": {"repo_id": 149647886, "url": "https://github.com/salesforce/centrifuge", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 14, "size": 98, "license": "licensed"}}