{"test_class": {"identifier": "TestTextPatternValidationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TextPatternSegment textSegment = new TextPatternSegment( TextPatternMethod.TEXT, \"\\\"FOOBAR\\\"\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "textSegment = new TextPatternSegment( TextPatternMethod.TEXT, \"\\\"FOOBAR\\\"\" )", "var_name": "textSegment"}, {"original_string": "private TextPatternSegment textSegmentWithSpecialCharacters = new TextPatternSegment( TextPatternMethod.TEXT, \"\\\"\\\\d\\\\x\\\\X\\\\w\\\"\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "textSegmentWithSpecialCharacters = new TextPatternSegment( TextPatternMethod.TEXT, \"\\\"\\\\d\\\\x\\\\X\\\\w\\\"\" )", "var_name": "textSegmentWithSpecialCharacters"}, {"original_string": "private TextPatternSegment randomSegment = new TextPatternSegment( TextPatternMethod.RANDOM, \"RANDOM(XXxx##)\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "randomSegment = new TextPatternSegment( TextPatternMethod.RANDOM, \"RANDOM(XXxx##)\" )", "var_name": "randomSegment"}, {"original_string": "private TextPatternSegment sequentialSegment = new TextPatternSegment( TextPatternMethod.SEQUENTIAL,\n        \"SEQUENTIAL(###)\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "sequentialSegment = new TextPatternSegment( TextPatternMethod.SEQUENTIAL,\n        \"SEQUENTIAL(###)\" )", "var_name": "sequentialSegment"}, {"original_string": "private TextPatternSegment orgUnitCodeSegment = new TextPatternSegment( TextPatternMethod.ORG_UNIT_CODE,\n        \"ORG_UNIT_CODE(...)\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "orgUnitCodeSegment = new TextPatternSegment( TextPatternMethod.ORG_UNIT_CODE,\n        \"ORG_UNIT_CODE(...)\" )", "var_name": "orgUnitCodeSegment"}, {"original_string": "private TextPatternSegment currentDateSegment = new TextPatternSegment( TextPatternMethod.CURRENT_DATE,\n        \"CURRENT_DATE(dd/mm/yyyy)\" );", "modifier": "private", "type": "TextPatternSegment", "declarator": "currentDateSegment = new TextPatternSegment( TextPatternMethod.CURRENT_DATE,\n        \"CURRENT_DATE(dd/mm/yyyy)\" )", "var_name": "currentDateSegment"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/textpattern/TestTextPatternValidationUtils.java"}, "test_case": {"identifier": "testValidateValueTypeWithDifferentTextPattern", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateValueTypeWithDifferentTextPattern()\n    {\n        TextPattern just_text = new TextPattern( Lists.newArrayList( textSegment ) );\n        TextPattern just_random = new TextPattern( Lists.newArrayList( randomSegment ) );\n        TextPattern just_sequential = new TextPattern( Lists.newArrayList( sequentialSegment ) );\n        TextPattern just_orgunitcode = new TextPattern( Lists.newArrayList( orgUnitCodeSegment ) );\n        TextPattern just_currentdate = new TextPattern( Lists.newArrayList( currentDateSegment ) );\n\n        TextPattern text_and_numbers = new TextPattern( Lists.newArrayList( textSegment, sequentialSegment ) );\n        TextPattern just_numbers = new TextPattern( Lists.newArrayList( sequentialSegment ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_text, ValueType.TEXT ) );\n        assertFalse( TextPatternValidationUtils.validateValueType( just_text, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_random, ValueType.TEXT ) );\n        assertFalse( TextPatternValidationUtils.validateValueType( just_random, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_sequential, ValueType.TEXT ) );\n        assertTrue( TextPatternValidationUtils.validateValueType( just_sequential, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_orgunitcode, ValueType.TEXT ) );\n        assertFalse( TextPatternValidationUtils.validateValueType( just_orgunitcode, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_currentdate, ValueType.TEXT ) );\n        assertFalse( TextPatternValidationUtils.validateValueType( just_currentdate, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( text_and_numbers, ValueType.TEXT ) );\n        assertFalse( TextPatternValidationUtils.validateValueType( text_and_numbers, ValueType.NUMBER ) );\n\n        assertTrue( TextPatternValidationUtils.validateValueType( just_numbers, ValueType.TEXT ) );\n        assertTrue( TextPatternValidationUtils.validateValueType( just_numbers, ValueType.NUMBER ) );\n    }", "signature": "void testValidateValueTypeWithDifferentTextPattern()", "full_signature": "@Test public void testValidateValueTypeWithDifferentTextPattern()", "class_method_signature": "TestTextPatternValidationUtils.testValidateValueTypeWithDifferentTextPattern()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "assertTrue", "validateValueType", "assertFalse", "validateValueType", "assertTrue", "validateValueType", "assertFalse", "validateValueType", "assertTrue", "validateValueType", "assertTrue", "validateValueType", "assertTrue", "validateValueType", "assertFalse", "validateValueType", "assertTrue", "validateValueType", "assertFalse", "validateValueType", "assertTrue", "validateValueType", "assertFalse", "validateValueType", "assertTrue", "validateValueType", "assertTrue", "validateValueType"]}, "focal_class": {"identifier": "TextPatternValidationUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validateSegmentValue", "parameters": "( TextPatternSegment segment, String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean validateSegmentValue( TextPatternSegment segment, String value )", "full_signature": "public static boolean validateSegmentValue( TextPatternSegment segment, String value )", "class_method_signature": "TextPatternValidationUtils.validateSegmentValue( TextPatternSegment segment, String value )", "testcase": false, "constructor": false}, {"identifier": "validateTextPatternValue", "parameters": "( TextPattern textPattern, String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean validateTextPatternValue( TextPattern textPattern, String value )", "full_signature": "public static boolean validateTextPatternValue( TextPattern textPattern, String value )", "class_method_signature": "TextPatternValidationUtils.validateTextPatternValue( TextPattern textPattern, String value )", "testcase": false, "constructor": false}, {"identifier": "getTotalValuesPotential", "parameters": "( TextPatternSegment generatedSegment )", "modifiers": "public static", "return": "long", "signature": "long getTotalValuesPotential( TextPatternSegment generatedSegment )", "full_signature": "public static long getTotalValuesPotential( TextPatternSegment generatedSegment )", "class_method_signature": "TextPatternValidationUtils.getTotalValuesPotential( TextPatternSegment generatedSegment )", "testcase": false, "constructor": false}, {"identifier": "validateValueType", "parameters": "( TextPattern textPattern, ValueType valueType )", "modifiers": "public static", "return": "boolean", "signature": "boolean validateValueType( TextPattern textPattern, ValueType valueType )", "full_signature": "public static boolean validateValueType( TextPattern textPattern, ValueType valueType )", "class_method_signature": "TextPatternValidationUtils.validateValueType( TextPattern textPattern, ValueType valueType )", "testcase": false, "constructor": false}, {"identifier": "isNumericOnly", "parameters": "( TextPatternSegment segment )", "modifiers": "private static", "return": "boolean", "signature": "boolean isNumericOnly( TextPatternSegment segment )", "full_signature": "private static boolean isNumericOnly( TextPatternSegment segment )", "class_method_signature": "TextPatternValidationUtils.isNumericOnly( TextPatternSegment segment )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/textpattern/TextPatternValidationUtils.java"}, "focal_method": {"identifier": "validateValueType", "parameters": "( TextPattern textPattern, ValueType valueType )", "modifiers": "public static", "return": "boolean", "body": "public static boolean validateValueType( TextPattern textPattern, ValueType valueType )\n    {\n        if ( ValueType.TEXT.equals( valueType ) )\n        {\n            return true;\n        }\n        else if ( ValueType.NUMBER.equals( valueType ) )\n        {\n            boolean isAllNumbers = true;\n\n            for ( TextPatternSegment segment : textPattern.getSegments() )\n            {\n                isAllNumbers = isAllNumbers && isNumericOnly( segment );\n            }\n\n            return isAllNumbers;\n        }\n        else\n        {\n            return false;\n        }\n    }", "signature": "boolean validateValueType( TextPattern textPattern, ValueType valueType )", "full_signature": "public static boolean validateValueType( TextPattern textPattern, ValueType valueType )", "class_method_signature": "TextPatternValidationUtils.validateValueType( TextPattern textPattern, ValueType valueType )", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getSegments", "isNumericOnly"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}