{"test_class": {"identifier": "CategorizedColorTest", "superclass": "", "interfaces": "", "fields": [], "file": "legend/src/test/java/org/orbisgis/legend/structure/categorize/CategorizedColorTest.java"}, "test_case": {"identifier": "testGetFromCategorize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFromCategorize(){\n        CategorizedColor cs = new CategorizedColor(getCategorize2Color());\n        assertTrue(cs.get(20.0).equals(Color.decode(\"#332133\")));\n        assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals(Color.decode(\"#012345\")));\n        assertNull(cs.get(25.0));\n        assertTrue(cs.get(30.0).equals(Color.decode(\"#A8B9C0\")));\n        cs = new CategorizedColor(new ColorLiteral(\"#EDCBA0\"));\n        assertNull(cs.get(25.0));\n        assertTrue(cs.get(Double.NEGATIVE_INFINITY).equals(Color.decode(\"#EDCBA0\")));\n    }", "signature": "void testGetFromCategorize()", "full_signature": "@Test public void testGetFromCategorize()", "class_method_signature": "CategorizedColorTest.testGetFromCategorize()", "testcase": true, "constructor": false, "invocations": ["getCategorize2Color", "assertTrue", "equals", "get", "decode", "assertTrue", "equals", "get", "decode", "assertNull", "get", "assertTrue", "equals", "get", "decode", "assertNull", "get", "assertTrue", "equals", "get", "decode"]}, "focal_class": {"identifier": "CategorizedColor", "superclass": "extends CategorizedLegend<Color>", "interfaces": "", "fields": [{"original_string": "private ColorParameter parameter = new ColorLiteral();", "modifier": "private", "type": "ColorParameter", "declarator": "parameter = new ColorLiteral()", "var_name": "parameter"}], "methods": [{"identifier": "CategorizedColor", "parameters": "(ColorParameter sp)", "modifiers": "public", "return": "", "signature": " CategorizedColor(ColorParameter sp)", "full_signature": "public  CategorizedColor(ColorParameter sp)", "class_method_signature": "CategorizedColor.CategorizedColor(ColorParameter sp)", "testcase": false, "constructor": true}, {"identifier": "getParameter", "parameters": "()", "modifiers": "@Override public", "return": "SeParameter", "signature": "SeParameter getParameter()", "full_signature": "@Override public SeParameter getParameter()", "class_method_signature": "CategorizedColor.getParameter()", "testcase": false, "constructor": false}, {"identifier": "setParameter", "parameters": "(ColorParameter param)", "modifiers": "public", "return": "void", "signature": "void setParameter(ColorParameter param)", "full_signature": "public void setParameter(ColorParameter param)", "class_method_signature": "CategorizedColor.setParameter(ColorParameter param)", "testcase": false, "constructor": false}, {"identifier": "getFallbackValue", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color getFallbackValue()", "full_signature": "public Color getFallbackValue()", "class_method_signature": "CategorizedColor.getFallbackValue()", "testcase": false, "constructor": false}, {"identifier": "setFallbackValue", "parameters": "(Color value)", "modifiers": "public", "return": "void", "signature": "void setFallbackValue(Color value)", "full_signature": "public void setFallbackValue(Color value)", "class_method_signature": "CategorizedColor.setFallbackValue(Color value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Double d)", "modifiers": "@Override public", "return": "Color", "signature": "Color get(Double d)", "full_signature": "@Override public Color get(Double d)", "class_method_signature": "CategorizedColor.get(Double d)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Double d, Color v)", "modifiers": "@Override public", "return": "void", "signature": "void put(Double d, Color v)", "full_signature": "@Override public void put(Double d, Color v)", "class_method_signature": "CategorizedColor.put(Double d, Color v)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Double d)", "modifiers": "@Override public", "return": "Color", "signature": "Color remove(Double d)", "full_signature": "@Override public Color remove(Double d)", "class_method_signature": "CategorizedColor.remove(Double d)", "testcase": false, "constructor": false}, {"identifier": "getFromLower", "parameters": "(Double d)", "modifiers": "@Override public", "return": "Color", "signature": "Color getFromLower(Double d)", "full_signature": "@Override public Color getFromLower(Double d)", "class_method_signature": "CategorizedColor.getFromLower(Double d)", "testcase": false, "constructor": false}], "file": "legend/src/main/java/org/orbisgis/legend/structure/categorize/CategorizedColor.java"}, "focal_method": {"identifier": "get", "parameters": "(Double d)", "modifiers": "@Override public", "return": "Color", "body": "@Override\n    public Color get(Double d){\n        if(parameter instanceof ColorLiteral){\n            return Double.isInfinite(d) && d < 0 ? ((ColorLiteral) parameter).getColor(null) : null;\n        } else {\n            try{\n                ColorParameter sp = ((Categorize2Color)parameter).get(new RealLiteral(d));\n                return sp == null ? null : sp.getColor(null);\n            } catch (ParameterException pe){\n                throw new IllegalArgumentException(\"Can't process the input value: \"+d, pe);\n            }\n        }\n    }", "signature": "Color get(Double d)", "full_signature": "@Override public Color get(Double d)", "class_method_signature": "CategorizedColor.get(Double d)", "testcase": false, "constructor": false, "invocations": ["isInfinite", "getColor", "get", "getColor"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}