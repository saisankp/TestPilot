{"test_class": {"identifier": "WorkerMonitorsImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WorkerManager workerManager;", "modifier": "@Autowired\n    private", "type": "WorkerManager", "declarator": "workerManager", "var_name": "workerManager"}, {"original_string": "@Autowired\n    private OutboundBuffer outBuffer;", "modifier": "@Autowired\n    private", "type": "OutboundBuffer", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "@Autowired\n    private InBuffer inBuffer;", "modifier": "@Autowired\n    private", "type": "InBuffer", "declarator": "inBuffer", "var_name": "inBuffer"}, {"original_string": "@Autowired\n    private WorkerMonitors workerMonitors;", "modifier": "@Autowired\n    private", "type": "WorkerMonitors", "declarator": "workerMonitors", "var_name": "workerMonitors"}], "file": "worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/monitor/WorkerMonitorsImplTest.java"}, "test_case": {"identifier": "testWorkerMonitors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWorkerMonitors() {\n        when(workerManager.getWorkerUuid()).thenReturn(\"1\");\n        when(workerManager.getExecutionThreadsCount()).thenReturn(5);\n        when(inBuffer.getCapacity()).thenReturn(55);\n        when(outBuffer.getCapacity()).thenReturn(66);\n\n\n        Map<WorkerMonitorInfoEnum, Serializable> monitorInfo = workerMonitors.getMonitorInfo();\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.TOTAL_MEMORY));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.FREE_MEMORY));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.MAX_MEMORY));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.WORKER_ID));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.EXECUTION_THREADS_AMOUNT));\n        assertEquals(5, monitorInfo.get(WorkerMonitorInfoEnum.EXECUTION_THREADS_AMOUNT));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.OUTBUFFER_CAPACITY));\n        assertEquals(66, monitorInfo.get(WorkerMonitorInfoEnum.OUTBUFFER_CAPACITY));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.INBUFFER_CAPACITY));\n        assertEquals(55, monitorInfo.get(WorkerMonitorInfoEnum.INBUFFER_CAPACITY));\n\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_START_TIME));\n        assertNotNull(monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_END_TIME));\n\n        Long firstStart = (Long) monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_START_TIME);\n        Long firstEnd = (Long) monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_END_TIME);\n\n        try {\n            Thread.sleep(50);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        monitorInfo = workerMonitors.getMonitorInfo();\n\n        Long secondStart = (Long) monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_START_TIME);\n        Long secondEnd = (Long) monitorInfo.get(WorkerMonitorInfoEnum.MONITOR_END_TIME);\n\n        assertFalse(firstStart.equals(secondStart));\n        assertFalse(firstEnd.equals(secondEnd));\n    }", "signature": "void testWorkerMonitors()", "full_signature": "@Test public void testWorkerMonitors()", "class_method_signature": "WorkerMonitorsImplTest.testWorkerMonitors()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getWorkerUuid", "thenReturn", "when", "getExecutionThreadsCount", "thenReturn", "when", "getCapacity", "thenReturn", "when", "getCapacity", "getMonitorInfo", "assertNotNull", "get", "assertNotNull", "get", "assertNotNull", "get", "assertNotNull", "get", "assertNotNull", "get", "assertEquals", "get", "assertNotNull", "get", "assertEquals", "get", "assertNotNull", "get", "assertEquals", "get", "assertNotNull", "get", "assertNotNull", "get", "get", "get", "sleep", "printStackTrace", "getMonitorInfo", "get", "get", "assertFalse", "equals", "assertFalse", "equals"]}, "focal_class": {"identifier": "WorkerMonitorsImpl", "superclass": "", "interfaces": "implements WorkerMonitors", "fields": [{"original_string": "private long monitorStartTime;", "modifier": "private", "type": "long", "declarator": "monitorStartTime", "var_name": "monitorStartTime"}, {"original_string": "@Autowired\n    private WorkerManager workerManager;", "modifier": "@Autowired\n    private", "type": "WorkerManager", "declarator": "workerManager", "var_name": "workerManager"}, {"original_string": "@Autowired\n    private OutboundBuffer outBuffer;", "modifier": "@Autowired\n    private", "type": "OutboundBuffer", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "@Autowired\n    private InBuffer inBuffer;", "modifier": "@Autowired\n    private", "type": "InBuffer", "declarator": "inBuffer", "var_name": "inBuffer"}, {"original_string": "@Autowired\n    private List<WorkerMonitor> monitors;", "modifier": "@Autowired\n    private", "type": "List<WorkerMonitor>", "declarator": "monitors", "var_name": "monitors"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "WorkerMonitorsImpl.init()", "testcase": false, "constructor": false}, {"identifier": "getMonitorInfo", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Map<WorkerMonitorInfoEnum, Serializable>", "signature": "Map<WorkerMonitorInfoEnum, Serializable> getMonitorInfo()", "full_signature": "@Override public synchronized Map<WorkerMonitorInfoEnum, Serializable> getMonitorInfo()", "class_method_signature": "WorkerMonitorsImpl.getMonitorInfo()", "testcase": false, "constructor": false}, {"identifier": "resetMonitor", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void resetMonitor()", "full_signature": "private synchronized void resetMonitor()", "class_method_signature": "WorkerMonitorsImpl.resetMonitor()", "testcase": false, "constructor": false}], "file": "worker/worker-manager/score-worker-manager-impl/src/main/java/io/cloudslang/worker/management/monitor/WorkerMonitorsImpl.java"}, "focal_method": {"identifier": "getMonitorInfo", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Map<WorkerMonitorInfoEnum, Serializable>", "body": "@Override\n    public synchronized Map<WorkerMonitorInfoEnum, Serializable> getMonitorInfo() {\n        try {\n            Map<WorkerMonitorInfoEnum, Serializable> monitorInfo = Maps.newHashMap();\n\n            Runtime runtime = Runtime.getRuntime();\n            monitorInfo.put(WorkerMonitorInfoEnum.TOTAL_MEMORY, runtime.totalMemory());\n            monitorInfo.put(WorkerMonitorInfoEnum.FREE_MEMORY, runtime.freeMemory());\n            monitorInfo.put(WorkerMonitorInfoEnum.MAX_MEMORY, runtime.maxMemory());\n\n            monitorInfo.put(WorkerMonitorInfoEnum.WORKER_ID, workerManager.getWorkerUuid());\n\n            monitorInfo.put(WorkerMonitorInfoEnum.EXECUTION_THREADS_AMOUNT, workerManager.getExecutionThreadsCount());\n\n            monitorInfo.put(WorkerMonitorInfoEnum.OUTBUFFER_CAPACITY, outBuffer.getCapacity());\n\n            monitorInfo.put(WorkerMonitorInfoEnum.INBUFFER_CAPACITY, inBuffer.getCapacity());\n\n            for (WorkerMonitor monitor : monitors) {\n                monitor.captureMonitorInfo(monitorInfo);\n            }\n\n            monitorInfo.put(WorkerMonitorInfoEnum.MONITOR_START_TIME, monitorStartTime);\n            monitorInfo.put(WorkerMonitorInfoEnum.MONITOR_END_TIME, System.currentTimeMillis());\n\n            return monitorInfo;\n        } finally {\n            resetMonitor();\n        }\n    }", "signature": "Map<WorkerMonitorInfoEnum, Serializable> getMonitorInfo()", "full_signature": "@Override public synchronized Map<WorkerMonitorInfoEnum, Serializable> getMonitorInfo()", "class_method_signature": "WorkerMonitorsImpl.getMonitorInfo()", "testcase": false, "constructor": false, "invocations": ["newHashMap", "getRuntime", "put", "totalMemory", "put", "freeMemory", "put", "maxMemory", "put", "getWorkerUuid", "put", "getExecutionThreadsCount", "put", "getCapacity", "put", "getCapacity", "captureMonitorInfo", "put", "put", "currentTimeMillis", "resetMonitor"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}