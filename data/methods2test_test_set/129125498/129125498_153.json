{"test_class": {"identifier": "EdmxDetectorFactoryProviderTest", "superclass": "extends AbstractDetectorFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.01;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.01", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetectorFactoryProviderTest.java"}, "test_case": {"identifier": "testBuild_invalidHyperparams", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testBuild_invalidHyperparams() {\n        val factoryUnderTest = new EdmxDetectorFactoryProvider();\n        val document = readDocument(\"edmx-invalid-hyperparams\");\n        factoryUnderTest.buildDetector(document);\n    }", "signature": "void testBuild_invalidHyperparams()", "full_signature": "@Test(expected = RuntimeException.class) public void testBuild_invalidHyperparams()", "class_method_signature": "EdmxDetectorFactoryProviderTest.testBuild_invalidHyperparams()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector"]}, "focal_class": {"identifier": "EdmxDetectorFactoryProvider", "superclass": "", "interfaces": "implements DetectorFactoryProvider<EdmxDetector>", "fields": [{"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "methods": [{"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "EdmxDetector", "signature": "EdmxDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public EdmxDetector buildDetector(DetectorDocument document)", "class_method_signature": "EdmxDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetectorFactoryProvider.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "EdmxDetector", "body": "@Override\n    public EdmxDetector buildDetector(DetectorDocument document) {\n        notNull(document, \"document can't be null\");\n        // The EDM-X detector fits a new model with each metric point.\n        // That's why we're using hyperparameters instead of parameters here.\n        val hyperparamsMap = document.getConfig().get(\"hyperparams\");\n        val hyperparams = objectMapper.convertValue(hyperparamsMap, EdmxHyperparams.class);\n        val trusted = document.isTrusted();\n        return new EdmxDetector(document.getUuid(), hyperparams, trusted);\n    }", "signature": "EdmxDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public EdmxDetector buildDetector(DetectorDocument document)", "class_method_signature": "EdmxDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["notNull", "get", "getConfig", "convertValue", "isTrusted", "getUuid"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}