{"test_class": {"identifier": "DefaultObjectNameFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-jmx/src/test/java/com/codahale/metrics/jmx/DefaultObjectNameFactoryTest.java"}, "test_case": {"identifier": "createsObjectNameWithDomainInInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createsObjectNameWithDomainInInput() {\n        DefaultObjectNameFactory f = new DefaultObjectNameFactory();\n        ObjectName on = f.createName(\"type\", \"com.domain\", \"something.with.dots\");\n        assertThat(on.getDomain()).isEqualTo(\"com.domain\");\n    }", "signature": "void createsObjectNameWithDomainInInput()", "full_signature": "@Test public void createsObjectNameWithDomainInInput()", "class_method_signature": "DefaultObjectNameFactoryTest.createsObjectNameWithDomainInInput()", "testcase": true, "constructor": false, "invocations": ["createName", "isEqualTo", "assertThat", "getDomain"]}, "focal_class": {"identifier": "DefaultObjectNameFactory", "superclass": "", "interfaces": "implements ObjectNameFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JmxReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JmxReporter.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "createName", "parameters": "(String type, String domain, String name)", "modifiers": "@Override public", "return": "ObjectName", "signature": "ObjectName createName(String type, String domain, String name)", "full_signature": "@Override public ObjectName createName(String type, String domain, String name)", "class_method_signature": "DefaultObjectNameFactory.createName(String type, String domain, String name)", "testcase": false, "constructor": false}], "file": "metrics-jmx/src/main/java/com/codahale/metrics/jmx/DefaultObjectNameFactory.java"}, "focal_method": {"identifier": "createName", "parameters": "(String type, String domain, String name)", "modifiers": "@Override public", "return": "ObjectName", "body": "@Override\n    public ObjectName createName(String type, String domain, String name) {\n        try {\n            ObjectName objectName;\n            Hashtable<String, String> properties = new Hashtable<>();\n\n            properties.put(\"name\", name);\n            properties.put(\"type\", type);\n            objectName = new ObjectName(domain, properties);\n\n            /*\n             * The only way we can find out if we need to quote the properties is by\n             * checking an ObjectName that we've constructed.\n             */\n            if (objectName.isDomainPattern()) {\n                domain = ObjectName.quote(domain);\n            }\n            if (objectName.isPropertyValuePattern(\"name\")) {\n                properties.put(\"name\", ObjectName.quote(name));\n            }\n            if (objectName.isPropertyValuePattern(\"type\")) {\n                properties.put(\"type\", ObjectName.quote(type));\n            }\n            objectName = new ObjectName(domain, properties);\n\n            return objectName;\n        } catch (MalformedObjectNameException e) {\n            try {\n                return new ObjectName(domain, \"name\", ObjectName.quote(name));\n            } catch (MalformedObjectNameException e1) {\n                LOGGER.warn(\"Unable to register {} {}\", type, name, e1);\n                throw new RuntimeException(e1);\n            }\n        }\n    }", "signature": "ObjectName createName(String type, String domain, String name)", "full_signature": "@Override public ObjectName createName(String type, String domain, String name)", "class_method_signature": "DefaultObjectNameFactory.createName(String type, String domain, String name)", "testcase": false, "constructor": false, "invocations": ["put", "put", "isDomainPattern", "quote", "isPropertyValuePattern", "put", "quote", "isPropertyValuePattern", "put", "quote", "quote", "warn"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}