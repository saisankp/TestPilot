{"test_class": {"identifier": "SccpExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Router router = null;", "modifier": "private", "type": "Router", "declarator": "router = null", "var_name": "router"}, {"original_string": "private SccpResource sccpResource = null;", "modifier": "private", "type": "SccpResource", "declarator": "sccpResource = null", "var_name": "sccpResource"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}, {"original_string": "private SccpExecutor sccpExecutor = null;", "modifier": "private", "type": "SccpExecutor", "declarator": "sccpExecutor = null", "var_name": "sccpExecutor"}], "file": "sccp/sccp-impl/src/test/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutorTest.java"}, "test_case": {"identifier": "testManageRule", "parameters": "()", "modifiers": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public", "return": "void", "body": "@Test(groups = { \"oam\", \"functional.mgmt\" })\n    public void testManageRule() {\n\n        String addressCmd = \"sccp rule modify 4 K 18 0 146 0 1 4 * loadshared 2 backup-addressid 3 loadsharing-algo bit0\";\n        String result = this.sccpExecutor.execute(addressCmd.split(\" \"));\n\n        addressCmd = \"sccp address create 1 71 2 8 0 0 3 123456789\";\n        result = this.sccpExecutor.execute(addressCmd.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRoutingAddresses().size(), 1);\n\n        String createRuleCmd = \"sccp rule create 1 R 71 2 8 0 0 3 123456789 solitary 1\";\n\n        result = this.sccpExecutor.execute(createRuleCmd.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 1);\n        assertEquals(this.router.getRules().get(1).getPrimaryAddressId(), 1);\n\n        // test show\n        createRuleCmd = \"sccp rule show\";\n        result = this.sccpExecutor.execute(createRuleCmd.split(\" \"));\n\n        assertEquals(\n                result,\n                \"key=1  Rule=ruleId(1);ruleType(Solitary);originatingType(All);patternSccpAddress(pc=2,ssn=8,AI=71,gt=GlobalTitle0001Impl [digits=123456789, natureOfAddress=NATIONAL, encodingScheme=BCDOddEncodingScheme[type=BCD_ODD, code=1]]);paddress(1);saddress(-1);mask(R);networkId(0)\\n\");\n\n        // TODO: this update for fixing \"sccp rule create needs not zero pc\"\n//        createRuleCmd = \"sccp rule create 2 K 18 0 180 0 1 4 * solitary 1\";\n        createRuleCmd = \"sccp rule create 2 K 18 1 180 0 1 4 * solitary 1\";\n        result = this.sccpExecutor.execute(createRuleCmd.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n\n        assertEquals(this.router.getRules().size(), 2);\n\n        Rule rule = this.router.getRules().get(2);\n        assertNotNull(rule);\n        SccpAddress pattern = rule.getPattern();\n        assertNotNull(pattern);\n//        assertEquals((int) pattern.getAddressIndicator().getValue(SccpProtocolVersion.ITU), 18);\n        assertEquals((int) pattern.getAddressIndicator().getValue(SccpProtocolVersion.ITU), 19);\n        assertEquals(pattern.getAddressIndicator().getRoutingIndicator(), RoutingIndicator.ROUTING_BASED_ON_GLOBAL_TITLE);\n        assertEquals(\n                pattern.getGlobalTitle().getGlobalTitleIndicator(),\n                GlobalTitleIndicator.GLOBAL_TITLE_INCLUDES_TRANSLATION_TYPE_NUMBERING_PLAN_ENCODING_SCHEME_AND_NATURE_OF_ADDRESS);\n        GlobalTitle0100 gt = (GlobalTitle0100) pattern.getGlobalTitle();\n        assertEquals(gt.getTranslationType(), 0);\n        assertEquals(gt.getNumberingPlan(), NumberingPlan.ISDN_TELEPHONY);\n        assertEquals(gt.getNatureOfAddress(), NatureOfAddress.INTERNATIONAL);\n        assertEquals(rule.getRuleType(), RuleType.SOLITARY);\n\n        String sec_addressCmd = \"sccp address create 2 71 3 8 0 0 3 123456789\";\n        result = this.sccpExecutor.execute(sec_addressCmd.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.ADDRESS_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRoutingAddresses().size(), 2);\n\n        String createRuleCmd2 = \"sccp rule create 3 R 71 2 8 0 0 3 123456789 dominant 1 backup-addressid 2\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 3);\n        assertEquals(this.router.getRule(3).getRuleType(), RuleType.DOMINANT);\n\n        createRuleCmd2 = \"sccp rule create 4 R 71 2 8 0 0 3 123456789 loadshared 1 backup-addressid 2 loadsharing-algo bit3\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 4);\n        assertEquals(this.router.getRule(4).getRuleType(), RuleType.LOADSHARED);\n        assertEquals(this.router.getRule(4).getLoadSharingAlgorithm(), LoadSharingAlgorithm.Bit3);\n\n        createRuleCmd2 = \"sccp rule create 11 R 71 2 8 0 0 3 123456789 dominant 1 backup-addressid 3\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertTrue(result.substring(0, 10).equals(SccpOAMMessage.NO_BACKUP_ADDRESS.substring(0, 10)));\n        assertEquals(this.router.getRules().size(), 4);\n\n        createRuleCmd2 = \"sccp rule create 11 R 71 2 8 0 0 3 123456789 dominant 4 backup-addressid 3\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertTrue(result.substring(0, 10).equals(SccpOAMMessage.NO_PRIMARY_ADDRESS.substring(0, 10)));\n        assertEquals(this.router.getRules().size(), 4);\n\n        // Full rule command\n        createRuleCmd2 = \"sccp rule create 12 R 71 2 8 0 0 3 123456789 dominant 2 backup-addressid 1 loadsharing-algo bit3 newcgparty-addressid 1 origination-type remoteoriginated\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_ADDED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n\n        rule = this.router.getRule(12);\n        assertEquals(rule.getOriginationType(), OriginationType.REMOTE);\n\n        // Test Modify Rule\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 loadshared 1 backup-addressid 2 loadsharing-algo bit4\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_MODIFIED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n        assertEquals(this.router.getRule(1).getRuleType(), RuleType.LOADSHARED);\n        assertEquals(this.router.getRule(1).getLoadSharingAlgorithm(), LoadSharingAlgorithm.Bit4);\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 dominant 1 backup-addressid 2\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_MODIFIED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n        assertEquals(this.router.getRule(1).getRuleType(), RuleType.DOMINANT);\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 solitary 1 backup-addressid 2\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_MODIFIED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n        assertEquals(this.router.getRule(1).getRuleType(), RuleType.SOLITARY);\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 dominant 1\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, SccpOAMMessage.RULETYPE_NOT_SOLI_SEC_ADD_MANDATORY);\n        assertEquals(this.router.getRules().size(), 5);\n        assertEquals(this.router.getRule(1).getRuleType(), RuleType.SOLITARY);\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 dominant 1 backup-addressid 3\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertTrue(result.substring(0, 10).equals(SccpOAMMessage.NO_BACKUP_ADDRESS.substring(0, 10)));\n        assertEquals(this.router.getRules().size(), 5);\n\n        createRuleCmd2 = \"sccp rule modify 1 R 71 2 8 0 0 3 123456789 dominant 3 backup-addressid 3\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertTrue(result.substring(0, 10).equals(SccpOAMMessage.NO_PRIMARY_ADDRESS.substring(0, 10)));\n        assertEquals(this.router.getRules().size(), 5);\n\n        createRuleCmd2 = \"sccp rule modify 15 R 71 2 8 0 0 3 123456789 dominant 1 backup-addressid 2\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_DOESNT_EXIST, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n\n        createRuleCmd2 = \"sccp rule delete 15\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_DOESNT_EXIST, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 5);\n\n        createRuleCmd2 = \"sccp rule delete 1\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n        assertEquals(result, String.format(SccpOAMMessage.RULE_SUCCESSFULLY_REMOVED, this.sccpStack.getName()));\n        assertEquals(this.router.getRules().size(), 4);\n\n        createRuleCmd2 = \"sccp rule show 2\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n\n        createRuleCmd2 = \"sccp rule show\";\n        result = this.sccpExecutor.execute(createRuleCmd2.split(\" \"));\n\n    }", "signature": "void testManageRule()", "full_signature": "@Test(groups = { \"oam\", \"functional.mgmt\" }) public void testManageRule()", "class_method_signature": "SccpExecutorTest.testManageRule()", "testcase": true, "constructor": false, "invocations": ["execute", "split", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRoutingAddresses", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getPrimaryAddressId", "get", "getRules", "execute", "split", "assertEquals", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "get", "getRules", "assertNotNull", "getPattern", "assertNotNull", "assertEquals", "getValue", "getAddressIndicator", "assertEquals", "getRoutingIndicator", "getAddressIndicator", "assertEquals", "getGlobalTitleIndicator", "getGlobalTitle", "getGlobalTitle", "assertEquals", "getTranslationType", "assertEquals", "getNumberingPlan", "assertEquals", "getNatureOfAddress", "assertEquals", "getRuleType", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRoutingAddresses", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "assertEquals", "getLoadSharingAlgorithm", "getRule", "execute", "split", "assertTrue", "equals", "substring", "substring", "assertEquals", "size", "getRules", "execute", "split", "assertTrue", "equals", "substring", "substring", "assertEquals", "size", "getRules", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "getRule", "assertEquals", "getOriginationType", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "assertEquals", "getLoadSharingAlgorithm", "getRule", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "execute", "split", "assertEquals", "assertEquals", "size", "getRules", "assertEquals", "getRuleType", "getRule", "execute", "split", "assertTrue", "equals", "substring", "substring", "assertEquals", "size", "getRules", "execute", "split", "assertTrue", "equals", "substring", "substring", "assertEquals", "size", "getRules", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getRules", "execute", "split", "execute", "split"]}, "focal_class": {"identifier": "SccpExecutor", "superclass": "", "interfaces": "implements ShellExecutor", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SccpExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SccpExecutor.class)", "var_name": "logger"}, {"original_string": "private FastMap<String, SccpStackImpl> sccpStacks = new FastMap<String, SccpStackImpl>();", "modifier": "private", "type": "FastMap<String, SccpStackImpl>", "declarator": "sccpStacks = new FastMap<String, SccpStackImpl>()", "var_name": "sccpStacks"}, {"original_string": "private SccpStackImpl sccpStack = null;", "modifier": "private", "type": "SccpStackImpl", "declarator": "sccpStack = null", "var_name": "sccpStack"}], "methods": [{"identifier": "SccpExecutor", "parameters": "()", "modifiers": "public", "return": "", "signature": " SccpExecutor()", "full_signature": "public  SccpExecutor()", "class_method_signature": "SccpExecutor.SccpExecutor()", "testcase": false, "constructor": true}, {"identifier": "setSccpStacks", "parameters": "(Map<String, SccpStackImpl> sccpStacksTemp)", "modifiers": "public", "return": "void", "signature": "void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "full_signature": "public void setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "class_method_signature": "SccpExecutor.setSccpStacks(Map<String, SccpStackImpl> sccpStacksTemp)", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultValue()", "full_signature": "private void setDefaultValue()", "class_method_signature": "SccpExecutor.setDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getSccpStacks", "parameters": "()", "modifiers": "public", "return": "Map<String, SccpStackImpl>", "signature": "Map<String, SccpStackImpl> getSccpStacks()", "full_signature": "public Map<String, SccpStackImpl> getSccpStacks()", "class_method_signature": "SccpExecutor.getSccpStacks()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] options)", "modifiers": "public", "return": "String", "signature": "String execute(String[] options)", "full_signature": "public String execute(String[] options)", "class_method_signature": "SccpExecutor.execute(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRss", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRss(String[] options)", "full_signature": "private String manageRss(String[] options)", "class_method_signature": "SccpExecutor.manageRss(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRsp", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRsp(String[] options)", "full_signature": "private String manageRsp(String[] options)", "class_method_signature": "SccpExecutor.manageRsp(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageAddress", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageAddress(String[] options)", "full_signature": "private String manageAddress(String[] options)", "class_method_signature": "SccpExecutor.manageAddress(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageRule(String[] options)", "full_signature": "private String manageRule(String[] options)", "class_method_signature": "SccpExecutor.manageRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String createRule(String[] options)", "full_signature": "private String createRule(String[] options)", "class_method_signature": "SccpExecutor.createRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "modifyRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String modifyRule(String[] options)", "full_signature": "private String modifyRule(String[] options)", "class_method_signature": "SccpExecutor.modifyRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "deleteRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String deleteRule(String[] options)", "full_signature": "private String deleteRule(String[] options)", "class_method_signature": "SccpExecutor.deleteRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "showRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String showRule(String[] options)", "full_signature": "private String showRule(String[] options)", "class_method_signature": "SccpExecutor.showRule(String[] options)", "testcase": false, "constructor": false}, {"identifier": "createAddress", "parameters": "(String[] options, int index, boolean isRule)", "modifiers": "private", "return": "SccpAddress", "signature": "SccpAddress createAddress(String[] options, int index, boolean isRule)", "full_signature": "private SccpAddress createAddress(String[] options, int index, boolean isRule)", "class_method_signature": "SccpExecutor.createAddress(String[] options, int index, boolean isRule)", "testcase": false, "constructor": false}, {"identifier": "manageLmr", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageLmr(String[] options)", "full_signature": "private String manageLmr(String[] options)", "class_method_signature": "SccpExecutor.manageLmr(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSap", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSap(String[] options)", "full_signature": "private String manageSap(String[] options)", "class_method_signature": "SccpExecutor.manageSap(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageDest", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageDest(String[] options)", "full_signature": "private String manageDest(String[] options)", "class_method_signature": "SccpExecutor.manageDest(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageConcernedSpc", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageConcernedSpc(String[] options)", "full_signature": "private String manageConcernedSpc(String[] options)", "class_method_signature": "SccpExecutor.manageConcernedSpc(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageSet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSet(String[] options)", "full_signature": "private String manageSet(String[] options)", "class_method_signature": "SccpExecutor.manageSet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageGet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageGet(String[] options)", "full_signature": "private String manageGet(String[] options)", "class_method_signature": "SccpExecutor.manageGet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "handles", "parameters": "(String command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(String command)", "full_signature": "@Override public boolean handles(String command)", "class_method_signature": "SccpExecutor.handles(String command)", "testcase": false, "constructor": false}], "file": "sccp/sccp-impl/src/main/java/org/mobicents/protocols/ss7/sccp/impl/oam/SccpExecutor.java"}, "focal_method": {"identifier": "manageRule", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "body": "private String manageRule(String[] options) throws Exception {\n        // Minimum 3 needed. Show\n        if (options.length < 3) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        String command = options[2];\n\n        if (command == null) {\n            return SccpOAMMessage.INVALID_COMMAND;\n        }\n\n        if (command.equals(\"create\")) {\n            return this.createRule(options);\n        } else if (command.equals(\"modify\")) {\n            return this.modifyRule(options);\n        } else if (command.equals(\"delete\")) {\n            return this.deleteRule(options);\n        } else if (command.equals(\"show\")) {\n            return this.showRule(options);\n        }\n\n        return SccpOAMMessage.INVALID_COMMAND;\n    }", "signature": "String manageRule(String[] options)", "full_signature": "private String manageRule(String[] options)", "class_method_signature": "SccpExecutor.manageRule(String[] options)", "testcase": false, "constructor": false, "invocations": ["equals", "createRule", "equals", "modifyRule", "equals", "deleteRule", "equals", "showRule"]}, "repository": {"repo_id": 53577396, "url": "https://github.com/polarking/jss7-attack-simulator", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 29, "size": 28339, "license": "licensed"}}