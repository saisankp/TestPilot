{"test_class": {"identifier": "X509CertRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509CertRequestTest.java"}, "test_case": {"identifier": "testValidateSpiffeURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateSpiffeURI() throws IOException {\n\n        Path path = Paths.get(\"src/test/resources/spiffe_role.csr\");\n        String csr = new String(Files.readAllBytes(path));\n\n        X509CertRequest certReq = new X509CertRequest(csr);\n        assertTrue(certReq.validateSpiffeURI(\"coretech\", \"ra\", \"api\"));\n        assertFalse(certReq.validateSpiffeURI(\"coretech\", \"ra\", \"backend\"));\n        assertFalse(certReq.validateSpiffeURI(\"coretech\", \"sa\", \"api\"));\n    }", "signature": "void testValidateSpiffeURI()", "full_signature": "@Test public void testValidateSpiffeURI()", "class_method_signature": "X509CertRequestTest.testValidateSpiffeURI()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "assertTrue", "validateSpiffeURI", "assertFalse", "validateSpiffeURI", "assertFalse", "validateSpiffeURI"]}, "focal_class": {"identifier": "X509CertRequest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509CertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509CertRequest.class)", "var_name": "LOGGER"}, {"original_string": "private static final Pattern WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\")", "var_name": "WHITESPACE_PATTERN"}, {"original_string": "protected PKCS10CertificationRequest certReq;", "modifier": "protected", "type": "PKCS10CertificationRequest", "declarator": "certReq", "var_name": "certReq"}, {"original_string": "protected String instanceId = null;", "modifier": "protected", "type": "String", "declarator": "instanceId = null", "var_name": "instanceId"}, {"original_string": "protected String uriHostname = null;", "modifier": "protected", "type": "String", "declarator": "uriHostname = null", "var_name": "uriHostname"}, {"original_string": "protected String spiffeUri = null;", "modifier": "protected", "type": "String", "declarator": "spiffeUri = null", "var_name": "spiffeUri"}, {"original_string": "protected String normCsrPublicKey = null;", "modifier": "protected", "type": "String", "declarator": "normCsrPublicKey = null", "var_name": "normCsrPublicKey"}, {"original_string": "protected String cn;", "modifier": "protected", "type": "String", "declarator": "cn", "var_name": "cn"}, {"original_string": "protected List<String> dnsNames;", "modifier": "protected", "type": "List<String>", "declarator": "dnsNames", "var_name": "dnsNames"}, {"original_string": "protected List<String> providerDnsNames;", "modifier": "protected", "type": "List<String>", "declarator": "providerDnsNames", "var_name": "providerDnsNames"}, {"original_string": "protected List<String> ipAddresses;", "modifier": "protected", "type": "List<String>", "declarator": "ipAddresses", "var_name": "ipAddresses"}, {"original_string": "protected List<String> uris;", "modifier": "protected", "type": "List<String>", "declarator": "uris", "var_name": "uris"}], "methods": [{"identifier": "X509CertRequest", "parameters": "(String csr)", "modifiers": "public", "return": "", "signature": " X509CertRequest(String csr)", "full_signature": "public  X509CertRequest(String csr)", "class_method_signature": "X509CertRequest.X509CertRequest(String csr)", "testcase": false, "constructor": true}, {"identifier": "getCertReq", "parameters": "()", "modifiers": "public", "return": "PKCS10CertificationRequest", "signature": "PKCS10CertificationRequest getCertReq()", "full_signature": "public PKCS10CertificationRequest getCertReq()", "class_method_signature": "X509CertRequest.getCertReq()", "testcase": false, "constructor": false}, {"identifier": "setCertReq", "parameters": "(PKCS10CertificationRequest certReq)", "modifiers": "public", "return": "void", "signature": "void setCertReq(PKCS10CertificationRequest certReq)", "full_signature": "public void setCertReq(PKCS10CertificationRequest certReq)", "class_method_signature": "X509CertRequest.setCertReq(PKCS10CertificationRequest certReq)", "testcase": false, "constructor": false}, {"identifier": "validateDnsNames", "parameters": "(final String domainName, final String serviceName, final String provider,\n            final DataCache athenzSysDomainCache, final String serviceDnsSuffix, final String instanceHostname,\n            final List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "modifiers": "public", "return": "boolean", "signature": "boolean validateDnsNames(final String domainName, final String serviceName, final String provider,\n            final DataCache athenzSysDomainCache, final String serviceDnsSuffix, final String instanceHostname,\n            final List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "full_signature": "public boolean validateDnsNames(final String domainName, final String serviceName, final String provider,\n            final DataCache athenzSysDomainCache, final String serviceDnsSuffix, final String instanceHostname,\n            final List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "class_method_signature": "X509CertRequest.validateDnsNames(final String domainName, final String serviceName, final String provider,\n            final DataCache athenzSysDomainCache, final String serviceDnsSuffix, final String instanceHostname,\n            final List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceHostname", "parameters": "(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname, HostnameResolver hostnameResolver)", "modifiers": "private", "return": "boolean", "signature": "boolean validateInstanceHostname(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname, HostnameResolver hostnameResolver)", "full_signature": "private boolean validateInstanceHostname(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname, HostnameResolver hostnameResolver)", "class_method_signature": "X509CertRequest.validateInstanceHostname(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "validateUriHostname", "parameters": "(final String instanceHostname)", "modifiers": "", "return": "boolean", "signature": "boolean validateUriHostname(final String instanceHostname)", "full_signature": " boolean validateUriHostname(final String instanceHostname)", "class_method_signature": "X509CertRequest.validateUriHostname(final String instanceHostname)", "testcase": false, "constructor": false}, {"identifier": "isHostnameAllowed", "parameters": "(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname)", "modifiers": "", "return": "boolean", "signature": "boolean isHostnameAllowed(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname)", "full_signature": " boolean isHostnameAllowed(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname)", "class_method_signature": "X509CertRequest.isHostnameAllowed(final String provider, final DataCache athenzSysDomainCache,\n            final String instanceHostname)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceCnames", "parameters": "(final String provider, final DataCache athenzSysDomainCache,\n            final String serviceFqn, final String instanceHostname, List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "modifiers": "", "return": "boolean", "signature": "boolean validateInstanceCnames(final String provider, final DataCache athenzSysDomainCache,\n            final String serviceFqn, final String instanceHostname, List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "full_signature": " boolean validateInstanceCnames(final String provider, final DataCache athenzSysDomainCache,\n            final String serviceFqn, final String instanceHostname, List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "class_method_signature": "X509CertRequest.validateInstanceCnames(final String provider, final DataCache athenzSysDomainCache,\n            final String serviceFqn, final String instanceHostname, List<String> instanceHostCnames, HostnameResolver hostnameResolver)", "testcase": false, "constructor": false}, {"identifier": "dnsSuffixCheck", "parameters": "(final String dnsName, final List<String> providerDnsSuffixList,\n            final String serviceDnsSuffixCheck, final String wildCardPrefix, final String instanceHostname,\n            final List<String> instanceHostCnames)", "modifiers": "", "return": "boolean", "signature": "boolean dnsSuffixCheck(final String dnsName, final List<String> providerDnsSuffixList,\n            final String serviceDnsSuffixCheck, final String wildCardPrefix, final String instanceHostname,\n            final List<String> instanceHostCnames)", "full_signature": " boolean dnsSuffixCheck(final String dnsName, final List<String> providerDnsSuffixList,\n            final String serviceDnsSuffixCheck, final String wildCardPrefix, final String instanceHostname,\n            final List<String> instanceHostCnames)", "class_method_signature": "X509CertRequest.dnsSuffixCheck(final String dnsName, final List<String> providerDnsSuffixList,\n            final String serviceDnsSuffixCheck, final String wildCardPrefix, final String instanceHostname,\n            final List<String> instanceHostCnames)", "testcase": false, "constructor": false}, {"identifier": "validateDnsNames", "parameters": "(X509Certificate cert)", "modifiers": "public", "return": "boolean", "signature": "boolean validateDnsNames(X509Certificate cert)", "full_signature": "public boolean validateDnsNames(X509Certificate cert)", "class_method_signature": "X509CertRequest.validateDnsNames(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceId", "parameters": "(final String reqInstanceId, X509Certificate cert)", "modifiers": "public", "return": "boolean", "signature": "boolean validateInstanceId(final String reqInstanceId, X509Certificate cert)", "full_signature": "public boolean validateInstanceId(final String reqInstanceId, X509Certificate cert)", "class_method_signature": "X509CertRequest.validateInstanceId(final String reqInstanceId, X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "validateCommonName", "parameters": "(String reqCommonName)", "modifiers": "public", "return": "boolean", "signature": "boolean validateCommonName(String reqCommonName)", "full_signature": "public boolean validateCommonName(String reqCommonName)", "class_method_signature": "X509CertRequest.validateCommonName(String reqCommonName)", "testcase": false, "constructor": false}, {"identifier": "validateSubjectOField", "parameters": "(Set<String> validValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validateSubjectOField(Set<String> validValues)", "full_signature": "public boolean validateSubjectOField(Set<String> validValues)", "class_method_signature": "X509CertRequest.validateSubjectOField(Set<String> validValues)", "testcase": false, "constructor": false}, {"identifier": "validateSubjectOUField", "parameters": "(final String provider, final String certSubjectOU,\n            Set<String> validValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validateSubjectOUField(final String provider, final String certSubjectOU,\n            Set<String> validValues)", "full_signature": "public boolean validateSubjectOUField(final String provider, final String certSubjectOU,\n            Set<String> validValues)", "class_method_signature": "X509CertRequest.validateSubjectOUField(final String provider, final String certSubjectOU,\n            Set<String> validValues)", "testcase": false, "constructor": false}, {"identifier": "extractCsrPublicKey", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean extractCsrPublicKey()", "full_signature": " boolean extractCsrPublicKey()", "class_method_signature": "X509CertRequest.extractCsrPublicKey()", "testcase": false, "constructor": false}, {"identifier": "validatePublicKeys", "parameters": "(final String publicKey)", "modifiers": "public", "return": "boolean", "signature": "boolean validatePublicKeys(final String publicKey)", "full_signature": "public boolean validatePublicKeys(final String publicKey)", "class_method_signature": "X509CertRequest.validatePublicKeys(final String publicKey)", "testcase": false, "constructor": false}, {"identifier": "validatePublicKeys", "parameters": "(X509Certificate cert)", "modifiers": "public", "return": "boolean", "signature": "boolean validatePublicKeys(X509Certificate cert)", "full_signature": "public boolean validatePublicKeys(X509Certificate cert)", "class_method_signature": "X509CertRequest.validatePublicKeys(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "compareCsrPublicKey", "parameters": "(final String publicKey)", "modifiers": "", "return": "boolean", "signature": "boolean compareCsrPublicKey(final String publicKey)", "full_signature": " boolean compareCsrPublicKey(final String publicKey)", "class_method_signature": "X509CertRequest.compareCsrPublicKey(final String publicKey)", "testcase": false, "constructor": false}, {"identifier": "validateIPAddress", "parameters": "(final String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean validateIPAddress(final String ip)", "full_signature": "public boolean validateIPAddress(final String ip)", "class_method_signature": "X509CertRequest.validateIPAddress(final String ip)", "testcase": false, "constructor": false}, {"identifier": "extractSpiffeURI", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean extractSpiffeURI()", "full_signature": " boolean extractSpiffeURI()", "class_method_signature": "X509CertRequest.extractSpiffeURI()", "testcase": false, "constructor": false}, {"identifier": "validateSpiffeURI", "parameters": "(final String domain, final String name, final String value)", "modifiers": "", "return": "boolean", "signature": "boolean validateSpiffeURI(final String domain, final String name, final String value)", "full_signature": " boolean validateSpiffeURI(final String domain, final String name, final String value)", "class_method_signature": "X509CertRequest.validateSpiffeURI(final String domain, final String name, final String value)", "testcase": false, "constructor": false}, {"identifier": "setNormCsrPublicKey", "parameters": "(String normCsrPublicKey)", "modifiers": "public", "return": "void", "signature": "void setNormCsrPublicKey(String normCsrPublicKey)", "full_signature": "public void setNormCsrPublicKey(String normCsrPublicKey)", "class_method_signature": "X509CertRequest.setNormCsrPublicKey(String normCsrPublicKey)", "testcase": false, "constructor": false}, {"identifier": "getCommonName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCommonName()", "full_signature": "public String getCommonName()", "class_method_signature": "X509CertRequest.getCommonName()", "testcase": false, "constructor": false}, {"identifier": "getInstanceId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInstanceId()", "full_signature": "public String getInstanceId()", "class_method_signature": "X509CertRequest.getInstanceId()", "testcase": false, "constructor": false}, {"identifier": "getUriHostname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUriHostname()", "full_signature": "public String getUriHostname()", "class_method_signature": "X509CertRequest.getUriHostname()", "testcase": false, "constructor": false}, {"identifier": "getDnsNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDnsNames()", "full_signature": "public List<String> getDnsNames()", "class_method_signature": "X509CertRequest.getDnsNames()", "testcase": false, "constructor": false}, {"identifier": "getProviderDnsNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getProviderDnsNames()", "full_signature": "public List<String> getProviderDnsNames()", "class_method_signature": "X509CertRequest.getProviderDnsNames()", "testcase": false, "constructor": false}, {"identifier": "getUris", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getUris()", "full_signature": "public List<String> getUris()", "class_method_signature": "X509CertRequest.getUris()", "testcase": false, "constructor": false}, {"identifier": "getIpAddresses", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getIpAddresses()", "full_signature": "public List<String> getIpAddresses()", "class_method_signature": "X509CertRequest.getIpAddresses()", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertRequest.java"}, "focal_method": {"identifier": "validateSpiffeURI", "parameters": "(final String domain, final String name, final String value)", "modifiers": "", "return": "boolean", "body": "boolean validateSpiffeURI(final String domain, final String name, final String value) {\n\n        // the expected default format is\n        // spiffe://[<provider-cluster>/ns/]<athenz-domain>/sa/<athenz-service>\n        // spiffe://[<provider-cluster>/ns/]<athenz-domain>/ra/<athenz-role>\n        //\n        // so we'll be validating that our request has:\n        // spiffe://<provider-cluster>/ns/<domain>/<name>/<value> or\n        // spiffe://<domain>/<name>/<value> or\n\n        if (spiffeUri == null) {\n            return true;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(spiffeUri);\n        } catch (URISyntaxException ex) {\n            LOGGER.error(\"validateSpiffeURI: Unable to parse {}: {}\", spiffeUri, ex.getMessage());\n            return false;\n        }\n\n        final String uriPath = uri.getPath();\n        final String uriHost = uri.getHost();\n\n        if (uriPath == null || uriPath.isEmpty() || uriHost == null || uriHost.isEmpty()) {\n            LOGGER.error(\"validateSpiffeURI: invalid uri {}\", spiffeUri);\n            return false;\n        }\n\n        // let's check to see if our path starts with our\n        // namespace ns field and thus which format we're using\n\n        boolean uriVerified = false;\n        if (uriPath.startsWith(\"/ns/\")) {\n            final String path = \"/ns/\" + domain + \"/\" + name + \"/\" + value;\n            uriVerified = uriPath.equalsIgnoreCase(path);\n        } else {\n            final String path = \"/\" + name + \"/\" + value;\n            uriVerified = uriHost.equalsIgnoreCase(domain) && uriPath.equalsIgnoreCase(path);\n        }\n\n        if (!uriVerified) {\n            LOGGER.error(\"validateSpiffeURI: invalid uri path/host: {}\", spiffeUri);\n        }\n\n        return uriVerified;\n    }", "signature": "boolean validateSpiffeURI(final String domain, final String name, final String value)", "full_signature": " boolean validateSpiffeURI(final String domain, final String name, final String value)", "class_method_signature": "X509CertRequest.validateSpiffeURI(final String domain, final String name, final String value)", "testcase": false, "constructor": false, "invocations": ["error", "getMessage", "getPath", "getHost", "isEmpty", "isEmpty", "error", "startsWith", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}