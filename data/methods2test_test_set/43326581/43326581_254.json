{"test_class": {"identifier": "ThriftValidateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final String DUMMY_EMAIL_ADDRESS = \"dummy.name@dummy.domain.tld\";", "modifier": "final", "type": "String", "declarator": "DUMMY_EMAIL_ADDRESS = \"dummy.name@dummy.domain.tld\"", "var_name": "DUMMY_EMAIL_ADDRESS"}, {"original_string": "final String DUMMY_MODERATION_COMMENT = \"Lorem ipsum\";", "modifier": "final", "type": "String", "declarator": "DUMMY_MODERATION_COMMENT = \"Lorem ipsum\"", "var_name": "DUMMY_MODERATION_COMMENT"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/thrift/ThriftValidateTest.java"}, "test_case": {"identifier": "testPrepareUserExceptionThrownIfNoEmailAddress", "parameters": "()", "modifiers": "@Test(expected = SW360Exception.class) public", "return": "void", "body": "@Test(expected = SW360Exception.class)\n    public void testPrepareUserExceptionThrownIfNoEmailAddress() throws Exception {\n        // User without email address\n        User blankUser = new User();\n        prepareUser(blankUser);\n    }", "signature": "void testPrepareUserExceptionThrownIfNoEmailAddress()", "full_signature": "@Test(expected = SW360Exception.class) public void testPrepareUserExceptionThrownIfNoEmailAddress()", "class_method_signature": "ThriftValidateTest.testPrepareUserExceptionThrownIfNoEmailAddress()", "testcase": true, "constructor": false, "invocations": ["prepareUser"]}, "focal_class": {"identifier": "ThriftValidate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern LICENSE_ID_PATTERN = Pattern.compile(\"[A-Za-z0-9\\\\-.+]*\");", "modifier": "private static final", "type": "Pattern", "declarator": "LICENSE_ID_PATTERN = Pattern.compile(\"[A-Za-z0-9\\\\-.+]*\")", "var_name": "LICENSE_ID_PATTERN"}], "methods": [{"identifier": "ThriftValidate", "parameters": "()", "modifiers": "private", "return": "", "signature": " ThriftValidate()", "full_signature": "private  ThriftValidate()", "class_method_signature": "ThriftValidate.ThriftValidate()", "testcase": false, "constructor": true}, {"identifier": "prepareObligation", "parameters": "(Obligation obligation)", "modifiers": "public static", "return": "void", "signature": "void prepareObligation(Obligation obligation)", "full_signature": "public static void prepareObligation(Obligation obligation)", "class_method_signature": "ThriftValidate.prepareObligation(Obligation obligation)", "testcase": false, "constructor": false}, {"identifier": "prepareTodo", "parameters": "(Todo todo)", "modifiers": "public static", "return": "void", "signature": "void prepareTodo(Todo todo)", "full_signature": "public static void prepareTodo(Todo todo)", "class_method_signature": "ThriftValidate.prepareTodo(Todo todo)", "testcase": false, "constructor": false}, {"identifier": "prepareRiskCategory", "parameters": "(RiskCategory riskCategory)", "modifiers": "public static", "return": "void", "signature": "void prepareRiskCategory(RiskCategory riskCategory)", "full_signature": "public static void prepareRiskCategory(RiskCategory riskCategory)", "class_method_signature": "ThriftValidate.prepareRiskCategory(RiskCategory riskCategory)", "testcase": false, "constructor": false}, {"identifier": "prepareRisk", "parameters": "(Risk risk)", "modifiers": "public static", "return": "void", "signature": "void prepareRisk(Risk risk)", "full_signature": "public static void prepareRisk(Risk risk)", "class_method_signature": "ThriftValidate.prepareRisk(Risk risk)", "testcase": false, "constructor": false}, {"identifier": "prepareLicense", "parameters": "(License license)", "modifiers": "public static", "return": "void", "signature": "void prepareLicense(License license)", "full_signature": "public static void prepareLicense(License license)", "class_method_signature": "ThriftValidate.prepareLicense(License license)", "testcase": false, "constructor": false}, {"identifier": "prepareUser", "parameters": "(User user)", "modifiers": "public static", "return": "void", "signature": "void prepareUser(User user)", "full_signature": "public static void prepareUser(User user)", "class_method_signature": "ThriftValidate.prepareUser(User user)", "testcase": false, "constructor": false}, {"identifier": "prepareVendor", "parameters": "(Vendor vendor)", "modifiers": "public static", "return": "void", "signature": "void prepareVendor(Vendor vendor)", "full_signature": "public static void prepareVendor(Vendor vendor)", "class_method_signature": "ThriftValidate.prepareVendor(Vendor vendor)", "testcase": false, "constructor": false}, {"identifier": "prepareComponent", "parameters": "(Component component)", "modifiers": "public static", "return": "void", "signature": "void prepareComponent(Component component)", "full_signature": "public static void prepareComponent(Component component)", "class_method_signature": "ThriftValidate.prepareComponent(Component component)", "testcase": false, "constructor": false}, {"identifier": "prepareComponents", "parameters": "(Collection<Component> components)", "modifiers": "public static", "return": "List<Component>", "signature": "List<Component> prepareComponents(Collection<Component> components)", "full_signature": "public static List<Component> prepareComponents(Collection<Component> components)", "class_method_signature": "ThriftValidate.prepareComponents(Collection<Component> components)", "testcase": false, "constructor": false}, {"identifier": "prepareRelease", "parameters": "(Release release)", "modifiers": "public static", "return": "void", "signature": "void prepareRelease(Release release)", "full_signature": "public static void prepareRelease(Release release)", "class_method_signature": "ThriftValidate.prepareRelease(Release release)", "testcase": false, "constructor": false}, {"identifier": "ensureEccInformationIsSet", "parameters": "(Release release)", "modifiers": "public static", "return": "Release", "signature": "Release ensureEccInformationIsSet(Release release)", "full_signature": "public static Release ensureEccInformationIsSet(Release release)", "class_method_signature": "ThriftValidate.ensureEccInformationIsSet(Release release)", "testcase": false, "constructor": false}, {"identifier": "prepareReleases", "parameters": "(Collection<Release> components)", "modifiers": "public static", "return": "List<Release>", "signature": "List<Release> prepareReleases(Collection<Release> components)", "full_signature": "public static List<Release> prepareReleases(Collection<Release> components)", "class_method_signature": "ThriftValidate.prepareReleases(Collection<Release> components)", "testcase": false, "constructor": false}, {"identifier": "validateAttachment", "parameters": "(AttachmentContent attachment)", "modifiers": "public static", "return": "void", "signature": "void validateAttachment(AttachmentContent attachment)", "full_signature": "public static void validateAttachment(AttachmentContent attachment)", "class_method_signature": "ThriftValidate.validateAttachment(AttachmentContent attachment)", "testcase": false, "constructor": false}, {"identifier": "validateNewLicense", "parameters": "(License license)", "modifiers": "public static", "return": "void", "signature": "void validateNewLicense(License license)", "full_signature": "public static void validateNewLicense(License license)", "class_method_signature": "ThriftValidate.validateNewLicense(License license)", "testcase": false, "constructor": false}, {"identifier": "validateExistingLicense", "parameters": "(License license)", "modifiers": "public static", "return": "void", "signature": "void validateExistingLicense(License license)", "full_signature": "public static void validateExistingLicense(License license)", "class_method_signature": "ThriftValidate.validateExistingLicense(License license)", "testcase": false, "constructor": false}, {"identifier": "validateLicenseIdMatch", "parameters": "(License license)", "modifiers": "private static", "return": "void", "signature": "void validateLicenseIdMatch(License license)", "full_signature": "private static void validateLicenseIdMatch(License license)", "class_method_signature": "ThriftValidate.validateLicenseIdMatch(License license)", "testcase": false, "constructor": false}, {"identifier": "prepareProject", "parameters": "(Project project)", "modifiers": "public static", "return": "void", "signature": "void prepareProject(Project project)", "full_signature": "public static void prepareProject(Project project)", "class_method_signature": "ThriftValidate.prepareProject(Project project)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/thrift/ThriftValidate.java"}, "focal_method": {"identifier": "prepareUser", "parameters": "(User user)", "modifiers": "public static", "return": "void", "body": "public static void prepareUser(User user) throws SW360Exception {\n        // Check required fields\n        assertNotEmpty(user.getEmail());\n        // Set id to email, in order to have human readable database\n        user.setId(user.getEmail());\n        // Set type\n        user.setType(TYPE_USER);\n        // guarantee that `CommentMadeDuringModerationRequest` is never stored in the database as this is intended to be a transient field\n        user.unsetCommentMadeDuringModerationRequest();\n    }", "signature": "void prepareUser(User user)", "full_signature": "public static void prepareUser(User user)", "class_method_signature": "ThriftValidate.prepareUser(User user)", "testcase": false, "constructor": false, "invocations": ["assertNotEmpty", "getEmail", "setId", "getEmail", "setType", "unsetCommentMadeDuringModerationRequest"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}