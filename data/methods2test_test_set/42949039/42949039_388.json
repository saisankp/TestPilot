{"test_class": {"identifier": "BusinessObjectDefinitionHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Mock\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@InjectMocks\n    private BusinessObjectDefinitionHelper businessObjectDefinitionHelper;", "modifier": "@InjectMocks\n    private", "type": "BusinessObjectDefinitionHelper", "declarator": "businessObjectDefinitionHelper", "var_name": "businessObjectDefinitionHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/BusinessObjectDefinitionHelperTest.java"}, "test_case": {"identifier": "testExecuteFunctionForBusinessObjectDefinitionEntities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteFunctionForBusinessObjectDefinitionEntities()\n    {\n        // Create a list of business object definition entities.\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities = Collections.unmodifiableList(Arrays.asList(\n            businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(BDEF_NAMESPACE, BDEF_NAME, DATA_PROVIDER_NAME, BDEF_DESCRIPTION,\n                businessObjectDefinitionServiceTestHelper.getNewAttributes()), businessObjectDefinitionDaoTestHelper\n                .createBusinessObjectDefinitionEntity(BDEF_NAMESPACE_2, BDEF_NAME_2, DATA_PROVIDER_NAME_2, BDEF_DESCRIPTION_2,\n                    businessObjectDefinitionServiceTestHelper.getNewAttributes2())));\n\n        businessObjectDefinitionEntities.forEach(entity ->\n        {\n            entity.setDescriptiveBusinessObjectFormat(new BusinessObjectFormatEntity());\n            entity.getDescriptiveBusinessObjectFormat().setSchemaColumns(new ArrayList<>());\n\n            entity.setSubjectMatterExperts(new ArrayList<>());\n        });\n\n        // Mock the external calls.\n        when(jsonHelper.objectToJson(any())).thenReturn(JSON_STRING);\n\n        // Execute a function for all business object definition entities.\n        businessObjectDefinitionHelper\n            .executeFunctionForBusinessObjectDefinitionEntities(SEARCH_INDEX_NAME, businessObjectDefinitionEntities,\n                (indexName, id, json) ->\n                {\n                });\n\n        // Verify the external calls.\n        verify(jsonHelper, times(businessObjectDefinitionEntities.size())).objectToJson(any());\n        verifyNoMoreInteractions(alternateKeyHelper, jsonHelper);\n    }", "signature": "void testExecuteFunctionForBusinessObjectDefinitionEntities()", "full_signature": "@Test public void testExecuteFunctionForBusinessObjectDefinitionEntities()", "class_method_signature": "BusinessObjectDefinitionHelperTest.testExecuteFunctionForBusinessObjectDefinitionEntities()", "testcase": true, "constructor": false, "invocations": ["unmodifiableList", "asList", "createBusinessObjectDefinitionEntity", "getNewAttributes", "createBusinessObjectDefinitionEntity", "getNewAttributes2", "forEach", "setDescriptiveBusinessObjectFormat", "setSchemaColumns", "getDescriptiveBusinessObjectFormat", "setSubjectMatterExperts", "thenReturn", "when", "objectToJson", "any", "executeFunctionForBusinessObjectDefinitionEntities", "objectToJson", "verify", "times", "size", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "BusinessObjectDefinitionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BusinessObjectDefinitionHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BusinessObjectDefinitionHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "methods": [{"identifier": "businessObjectDefinitionKeyToString", "parameters": "(BusinessObjectDefinitionKey businessObjectDefinitionKey)", "modifiers": "public", "return": "String", "signature": "String businessObjectDefinitionKeyToString(BusinessObjectDefinitionKey businessObjectDefinitionKey)", "full_signature": "public String businessObjectDefinitionKeyToString(BusinessObjectDefinitionKey businessObjectDefinitionKey)", "class_method_signature": "BusinessObjectDefinitionHelper.businessObjectDefinitionKeyToString(BusinessObjectDefinitionKey businessObjectDefinitionKey)", "testcase": false, "constructor": false}, {"identifier": "executeFunctionForBusinessObjectDefinitionEntities", "parameters": "(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "modifiers": "public", "return": "void", "signature": "void executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "full_signature": "public void executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "class_method_signature": "BusinessObjectDefinitionHelper.executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDefinitionKey", "parameters": "(BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey)", "modifiers": "public", "return": "BusinessObjectDefinitionKey", "signature": "BusinessObjectDefinitionKey getBusinessObjectDefinitionKey(BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey)", "full_signature": "public BusinessObjectDefinitionKey getBusinessObjectDefinitionKey(BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey)", "class_method_signature": "BusinessObjectDefinitionHelper.getBusinessObjectDefinitionKey(BusinessObjectDefinitionColumnKey businessObjectDefinitionColumnKey)", "testcase": false, "constructor": false}, {"identifier": "validateBusinessObjectDefinitionKey", "parameters": "(BusinessObjectDefinitionKey key)", "modifiers": "public", "return": "void", "signature": "void validateBusinessObjectDefinitionKey(BusinessObjectDefinitionKey key)", "full_signature": "public void validateBusinessObjectDefinitionKey(BusinessObjectDefinitionKey key)", "class_method_signature": "BusinessObjectDefinitionHelper.validateBusinessObjectDefinitionKey(BusinessObjectDefinitionKey key)", "testcase": false, "constructor": false}, {"identifier": "safeObjectMapperWriteValueAsString", "parameters": "(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "modifiers": "public", "return": "String", "signature": "String safeObjectMapperWriteValueAsString(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "full_signature": "public String safeObjectMapperWriteValueAsString(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "class_method_signature": "BusinessObjectDefinitionHelper.safeObjectMapperWriteValueAsString(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "testcase": false, "constructor": false}, {"identifier": "processTagSearchScoreMultiplier", "parameters": "(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "modifiers": "public", "return": "void", "signature": "void processTagSearchScoreMultiplier(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "full_signature": "public void processTagSearchScoreMultiplier(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "class_method_signature": "BusinessObjectDefinitionHelper.processTagSearchScoreMultiplier(final BusinessObjectDefinitionEntity businessObjectDefinitionEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/BusinessObjectDefinitionHelper.java"}, "focal_method": {"identifier": "executeFunctionForBusinessObjectDefinitionEntities", "parameters": "(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "modifiers": "public", "return": "void", "body": "public void executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)\n    {\n        // For each business object definition apply the passed in function\n        businessObjectDefinitionEntities.forEach(businessObjectDefinitionEntity ->\n        {\n            // Fetch Join with .size()\n            businessObjectDefinitionEntity.getAttributes().size();\n            businessObjectDefinitionEntity.getBusinessObjectDefinitionTags().size();\n            businessObjectDefinitionEntity.getBusinessObjectFormats().size();\n            businessObjectDefinitionEntity.getColumns().size();\n            businessObjectDefinitionEntity.getSampleDataFiles().size();\n            businessObjectDefinitionEntity.getSubjectMatterExperts().size();\n\n            // Convert the business object definition entity to a JSON string\n            final String jsonString = safeObjectMapperWriteValueAsString(businessObjectDefinitionEntity);\n\n            if (StringUtils.isNotEmpty(jsonString))\n            {\n                // Call the function that will process each business object definition entity against the index\n                try\n                {\n                    function.accept(indexName, businessObjectDefinitionEntity.getId().toString(), jsonString);\n                }\n                catch (Exception ex)\n                {\n                    LOGGER.warn(\"Index operation exception is logged {} for {}, {}, {}\", ex, indexName, businessObjectDefinitionEntity.getId().toString(),\n                        jsonString);\n                }\n            }\n        });\n\n        LOGGER.info(\"Finished processing {} business object definitions with a search index function.\", businessObjectDefinitionEntities.size());\n    }", "signature": "void executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "full_signature": "public void executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "class_method_signature": "BusinessObjectDefinitionHelper.executeFunctionForBusinessObjectDefinitionEntities(final String indexName,\n        final List<BusinessObjectDefinitionEntity> businessObjectDefinitionEntities, final TriConsumer<String, String, String> function)", "testcase": false, "constructor": false, "invocations": ["forEach", "size", "getAttributes", "size", "getBusinessObjectDefinitionTags", "size", "getBusinessObjectFormats", "size", "getColumns", "size", "getSampleDataFiles", "size", "getSubjectMatterExperts", "safeObjectMapperWriteValueAsString", "isNotEmpty", "accept", "toString", "getId", "warn", "toString", "getId", "info", "size"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}