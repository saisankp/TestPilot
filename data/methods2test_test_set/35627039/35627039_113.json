{"test_class": {"identifier": "CorrelatedEventsGrouperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Map<String, Object> TEST_FIELDS_AND_VALUES = Collections.singletonMap(\"key\", \"value\");", "modifier": "public static final", "type": "Map<String, Object>", "declarator": "TEST_FIELDS_AND_VALUES = Collections.singletonMap(\"key\", \"value\")", "var_name": "TEST_FIELDS_AND_VALUES"}], "file": "streams/common/src/test/java/com/hortonworks/streamline/streams/common/event/correlation/CorrelatedEventsGrouperTest.java"}, "test_case": {"identifier": "testGroupEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupEvents() throws Exception {\n        long timestamp = System.currentTimeMillis();\n\n        List<EventInformation> testEvents = new ArrayList<>();\n\n        /*\n         <SOURCE1>         <AGGREGATION>            <JOIN>         <PROJECTION>      <SINK>\n           e1, e2     ->   e4 (e1 & e2)      ->  e5 (e4 & e3)  ->      e6        ->\n\n                  <SOURCE2>\n                     e3                      /\n\n           .... and more\n        */\n        EventInformation event1 = new EventInformation(timestamp, \"SOURCE1\", \"default\",\n                Collections.singleton(\"AGGREGATION\"), \"1\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event1);\n\n        EventInformation event2 = new EventInformation(timestamp, \"SOURCE1\", \"default\",\n                Collections.singleton(\"AGGREGATION\"), \"2\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event2);\n\n        EventInformation event3 = new EventInformation(timestamp, \"SOURCE2\", \"default\",\n                Collections.singleton(\"JOIN\"), \"3\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event3);\n\n        EventInformation event4 = new EventInformation(timestamp, \"AGGREGATION\", \"default\",\n                Collections.singleton(\"JOIN\"), \"4\",\n                Sets.newHashSet(\"1\", \"2\"), Sets.newHashSet(\"1\", \"2\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event4);\n\n        EventInformation event5 = new EventInformation(timestamp, \"JOIN\", \"default\",\n                Collections.singleton(\"PROJECTION\"), \"5\",\n                Sets.newHashSet(\"1\", \"2\", \"3\"), Sets.newHashSet(\"4\", \"3\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event5);\n\n        EventInformation event6 = new EventInformation(timestamp, \"PROJECTION\", \"default\",\n                Collections.singleton(\"SINK\"), \"6\",\n                Sets.newHashSet(\"1\", \"2\", \"3\"), Sets.newHashSet(\"5\"), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event6);\n\n        // below two events are not correlated to root event\n        EventInformation event7 = new EventInformation(timestamp, \"SOURCE1\", \"default\",\n                Collections.singleton(\"AGGREGATION\"), \"7\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event7);\n\n        EventInformation event8 = new EventInformation(timestamp, \"SOURCE2\", \"default\",\n                Collections.singleton(\"JOIN\"), \"8\",\n                Collections.emptySet(), Collections.emptySet(), TEST_FIELDS_AND_VALUES);\n        testEvents.add(event8);\n\n        CorrelatedEventsGrouper eventsGrouper = new CorrelatedEventsGrouper(testEvents);\n        GroupedCorrelationEvents groupedEvents = eventsGrouper.groupByComponent(event3.getEventId());\n\n        Map<String, EventInformation> allEvents = groupedEvents.getAllEvents();\n        // only 1 ~ 6\n        Assert.assertEquals(6, allEvents.size());\n        Assert.assertFalse(allEvents.containsKey(\"7\"));\n        Assert.assertFalse(allEvents.containsKey(\"8\"));\n\n        Map<String, GroupedCorrelationEvents.SortedComponentGroupedEvents> componentGroupedEvents =\n                groupedEvents.getComponentGroupedEvents();\n        GroupedCorrelationEvents.SortedComponentGroupedEvents source1 = componentGroupedEvents.get(\"SOURCE1\");\n        Assert.assertEquals(\"SOURCE1\", source1.getComponentName());\n        Assert.assertFalse(source1.isContainingSelectedEvent());\n        Assert.assertTrue(source1.getInputEventIds().isEmpty());\n        Assert.assertEquals(Sets.newHashSet(\"1\", \"2\"), new HashSet<>(source1.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents source2 = componentGroupedEvents.get(\"SOURCE2\");\n        Assert.assertEquals(\"SOURCE2\", source2.getComponentName());\n        Assert.assertTrue(source2.isContainingSelectedEvent());\n        Assert.assertTrue(source2.getInputEventIds().isEmpty());\n        Assert.assertEquals(Sets.newHashSet(\"3\"), new HashSet<>(source2.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents aggregation = componentGroupedEvents.get(\"AGGREGATION\");\n        Assert.assertEquals(\"AGGREGATION\", aggregation.getComponentName());\n        Assert.assertFalse(aggregation.isContainingSelectedEvent());\n        Assert.assertEquals(Sets.newHashSet(\"1\", \"2\"), new HashSet<>(aggregation.getInputEventIds()));\n        Assert.assertEquals(Sets.newHashSet(\"4\"), new HashSet<>(aggregation.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents join = componentGroupedEvents.get(\"JOIN\");\n        Assert.assertEquals(\"JOIN\", join.getComponentName());\n        Assert.assertFalse(join.isContainingSelectedEvent());\n        Assert.assertEquals(Sets.newHashSet(\"4\", \"3\"), new HashSet<>(join.getInputEventIds()));\n        Assert.assertEquals(Sets.newHashSet(\"5\"), new HashSet<>(join.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents projection = componentGroupedEvents.get(\"PROJECTION\");\n        Assert.assertEquals(\"PROJECTION\", projection.getComponentName());\n        Assert.assertFalse(projection.isContainingSelectedEvent());\n        Assert.assertEquals(Sets.newHashSet(\"5\"), new HashSet<>(projection.getInputEventIds()));\n        Assert.assertEquals(Sets.newHashSet(\"6\"), new HashSet<>(projection.getOutputEventIds()));\n\n        GroupedCorrelationEvents.SortedComponentGroupedEvents sink = componentGroupedEvents.get(\"SINK\");\n        Assert.assertEquals(\"SINK\", sink.getComponentName());\n        Assert.assertFalse(sink.isContainingSelectedEvent());\n        Assert.assertEquals(Sets.newHashSet(\"6\"), new HashSet<>(sink.getInputEventIds()));\n        Assert.assertTrue(sink.getOutputEventIds().isEmpty());\n\n    }", "signature": "void testGroupEvents()", "full_signature": "@Test public void testGroupEvents()", "class_method_signature": "CorrelatedEventsGrouperTest.testGroupEvents()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "singleton", "emptySet", "emptySet", "add", "singleton", "emptySet", "emptySet", "add", "singleton", "emptySet", "emptySet", "add", "singleton", "newHashSet", "newHashSet", "add", "singleton", "newHashSet", "newHashSet", "add", "singleton", "newHashSet", "newHashSet", "add", "singleton", "emptySet", "emptySet", "add", "singleton", "emptySet", "emptySet", "add", "groupByComponent", "getEventId", "getAllEvents", "assertEquals", "size", "assertFalse", "containsKey", "assertFalse", "containsKey", "getComponentGroupedEvents", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertTrue", "isEmpty", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertTrue", "isContainingSelectedEvent", "assertTrue", "isEmpty", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "newHashSet", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "newHashSet", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "newHashSet", "getInputEventIds", "assertEquals", "newHashSet", "getOutputEventIds", "get", "assertEquals", "getComponentName", "assertFalse", "isContainingSelectedEvent", "assertEquals", "newHashSet", "getInputEventIds", "assertTrue", "isEmpty", "getOutputEventIds"]}, "focal_class": {"identifier": "CorrelatedEventsGrouper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<EventInformation> events;", "modifier": "private final", "type": "List<EventInformation>", "declarator": "events", "var_name": "events"}], "methods": [{"identifier": "CorrelatedEventsGrouper", "parameters": "(List<EventInformation> events)", "modifiers": "public", "return": "", "signature": " CorrelatedEventsGrouper(List<EventInformation> events)", "full_signature": "public  CorrelatedEventsGrouper(List<EventInformation> events)", "class_method_signature": "CorrelatedEventsGrouper.CorrelatedEventsGrouper(List<EventInformation> events)", "testcase": false, "constructor": true}, {"identifier": "groupByRelatedSourceEvents", "parameters": "(Set<String> sources)", "modifiers": "public", "return": "List<Set<String>>", "signature": "List<Set<String>> groupByRelatedSourceEvents(Set<String> sources)", "full_signature": "public List<Set<String>> groupByRelatedSourceEvents(Set<String> sources)", "class_method_signature": "CorrelatedEventsGrouper.groupByRelatedSourceEvents(Set<String> sources)", "testcase": false, "constructor": false}, {"identifier": "groupByComponent", "parameters": "(String rootEventId)", "modifiers": "public", "return": "GroupedCorrelationEvents", "signature": "GroupedCorrelationEvents groupByComponent(String rootEventId)", "full_signature": "public GroupedCorrelationEvents groupByComponent(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.groupByComponent(String rootEventId)", "testcase": false, "constructor": false}, {"identifier": "buildRelatedEventsMap", "parameters": "(String rootEventId)", "modifiers": "private", "return": "Map<String, EventInformation>", "signature": "Map<String, EventInformation> buildRelatedEventsMap(String rootEventId)", "full_signature": "private Map<String, EventInformation> buildRelatedEventsMap(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.buildRelatedEventsMap(String rootEventId)", "testcase": false, "constructor": false}, {"identifier": "addNonExistingParents", "parameters": "(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "modifiers": "private", "return": "void", "signature": "void addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "full_signature": "private void addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "class_method_signature": "CorrelatedEventsGrouper.addNonExistingParents(Map<String, EventInformation> allEventsMap,\n                                       Map<String, EventInformation> relatedEventsMap)", "testcase": false, "constructor": false}, {"identifier": "findAndAddParentsIfNecessary", "parameters": "(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "modifiers": "private", "return": "void", "signature": "void findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "full_signature": "private void findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "class_method_signature": "CorrelatedEventsGrouper.findAndAddParentsIfNecessary(Map<String, EventInformation> allEventsMap,\n                                              Map<String, EventInformation> relatedEventsMap,\n                                              Map<String, EventInformation> eventsToAddMap,\n                                              EventInformation event)", "testcase": false, "constructor": false}], "file": "streams/common/src/main/java/com/hortonworks/streamline/streams/common/event/correlation/CorrelatedEventsGrouper.java"}, "focal_method": {"identifier": "groupByComponent", "parameters": "(String rootEventId)", "modifiers": "public", "return": "GroupedCorrelationEvents", "body": "public GroupedCorrelationEvents groupByComponent(String rootEventId) {\n        return new GroupedCorrelationEvents(buildRelatedEventsMap(rootEventId), rootEventId);\n    }", "signature": "GroupedCorrelationEvents groupByComponent(String rootEventId)", "full_signature": "public GroupedCorrelationEvents groupByComponent(String rootEventId)", "class_method_signature": "CorrelatedEventsGrouper.groupByComponent(String rootEventId)", "testcase": false, "constructor": false, "invocations": ["buildRelatedEventsMap"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}