{"test_class": {"identifier": "RandUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.foundation/src/test/java/com/sandpolis/core/foundation/util/RandUtilTest.java"}, "test_case": {"identifier": "nextInt_1", "parameters": "()", "modifiers": "@Test @DisplayName(\"Test bounded integer generation\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Test bounded integer generation\")\n\tvoid nextInt_1() {\n\n\t\tfor (int[] range : new int[][] { { -2, 10 }, { -1, 1 }, { 1, 100 }, { -100, -1 }, { 0, 1 } }) {\n\t\t\tint min = range[0];\n\t\t\tint max = range[1];\n\n\t\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\t\tint rand = RandUtil.nextInt(min, max);\n\t\t\t\tassertTrue(rand >= min);\n\t\t\t\tassertTrue(rand <= max);\n\t\t\t}\n\t\t}\n\t}", "signature": "void nextInt_1()", "full_signature": "@Test @DisplayName(\"Test bounded integer generation\") void nextInt_1()", "class_method_signature": "RandUtilTest.nextInt_1()", "testcase": true, "constructor": false, "invocations": ["nextInt", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "RandUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Random insecureRandom = new Random();", "modifier": "private static final", "type": "Random", "declarator": "insecureRandom = new Random()", "var_name": "insecureRandom"}], "methods": [{"identifier": "RandUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RandUtil()", "full_signature": "private  RandUtil()", "class_method_signature": "RandUtil.RandUtil()", "testcase": false, "constructor": true}, {"identifier": "nextBoolean", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean nextBoolean()", "full_signature": "public static boolean nextBoolean()", "class_method_signature": "RandUtil.nextBoolean()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int nextInt()", "full_signature": "public static int nextInt()", "class_method_signature": "RandUtil.nextInt()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "(int lower, int upper)", "modifiers": "public static", "return": "int", "signature": "int nextInt(int lower, int upper)", "full_signature": "public static int nextInt(int lower, int upper)", "class_method_signature": "RandUtil.nextInt(int lower, int upper)", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "(long n)", "modifiers": "public static", "return": "long", "signature": "long nextLong(long n)", "full_signature": "public static long nextLong(long n)", "class_method_signature": "RandUtil.nextLong(long n)", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "(long lower, long upper)", "modifiers": "public static", "return": "long", "signature": "long nextLong(long lower, long upper)", "full_signature": "public static long nextLong(long lower, long upper)", "class_method_signature": "RandUtil.nextLong(long lower, long upper)", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long nextLong()", "full_signature": "public static long nextLong()", "class_method_signature": "RandUtil.nextLong()", "testcase": false, "constructor": false}, {"identifier": "nextAlphabetic", "parameters": "(int characters)", "modifiers": "public static", "return": "String", "signature": "String nextAlphabetic(int characters)", "full_signature": "public static String nextAlphabetic(int characters)", "class_method_signature": "RandUtil.nextAlphabetic(int characters)", "testcase": false, "constructor": false}, {"identifier": "nextNumeric", "parameters": "(int digits)", "modifiers": "public static", "return": "String", "signature": "String nextNumeric(int digits)", "full_signature": "public static String nextNumeric(int digits)", "class_method_signature": "RandUtil.nextNumeric(int digits)", "testcase": false, "constructor": false}, {"identifier": "nextItem", "parameters": "(E[] array)", "modifiers": "public static", "return": "E", "signature": "E nextItem(E[] array)", "full_signature": "public static E nextItem(E[] array)", "class_method_signature": "RandUtil.nextItem(E[] array)", "testcase": false, "constructor": false}], "file": "module/com.sandpolis.core.foundation/src/main/java/com/sandpolis/core/foundation/util/RandUtil.java"}, "focal_method": {"identifier": "nextInt", "parameters": "()", "modifiers": "public static", "return": "int", "body": "public static int nextInt() {\n\t\treturn insecureRandom.nextInt();\n\t}", "signature": "int nextInt()", "full_signature": "public static int nextInt()", "class_method_signature": "RandUtil.nextInt()", "testcase": false, "constructor": false, "invocations": ["nextInt"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}