{"test_class": {"identifier": "BPIServiceClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-d\");", "modifier": "private static", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(\"yyyy-MM-d\")", "var_name": "dateFormat"}], "file": "app/src/test/java/com/romainpiel/bitcointracker/network/BPIServiceClientTest.java"}, "test_case": {"identifier": "getCurrentUSDPrice_oneNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCurrentUSDPrice_oneNext() throws ParseException {\n        Date date = newDate(1);\n        float rate = 2.3456f;\n\n        BPIService service = mock(BPIService.class);\n        when(service.currentPrice()).thenReturn(Observable.from(new PriceDto[]{\n                newUSDPrice(date, rate)\n        }));\n        BPIServiceClient client = new BPIServiceClient(service);\n\n        TestSubscriber<BPI> subscriber = new TestSubscriber<>();\n        client.getCurrentUSDPrice().subscribe(subscriber);\n\n        List<BPI> expectedResults = Lists.newArrayList(\n                new BPI(date, rate)\n        );\n        subscriber.assertReceivedOnNext(expectedResults);\n        subscriber.assertTerminalEvent();\n        subscriber.assertNoErrors();\n    }", "signature": "void getCurrentUSDPrice_oneNext()", "full_signature": "@Test public void getCurrentUSDPrice_oneNext()", "class_method_signature": "BPIServiceClientTest.getCurrentUSDPrice_oneNext()", "testcase": true, "constructor": false, "invocations": ["newDate", "mock", "thenReturn", "when", "currentPrice", "from", "newUSDPrice", "subscribe", "getCurrentUSDPrice", "newArrayList", "assertReceivedOnNext", "assertTerminalEvent", "assertNoErrors"]}, "focal_class": {"identifier": "BPIServiceClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BPIService bpiService;", "modifier": "private", "type": "BPIService", "declarator": "bpiService", "var_name": "bpiService"}], "methods": [{"identifier": "BPIServiceClient", "parameters": "(BPIService bpiService)", "modifiers": "public", "return": "", "signature": " BPIServiceClient(BPIService bpiService)", "full_signature": "public  BPIServiceClient(BPIService bpiService)", "class_method_signature": "BPIServiceClient.BPIServiceClient(BPIService bpiService)", "testcase": false, "constructor": true}, {"identifier": "getCurrentUSDPrice", "parameters": "()", "modifiers": "public", "return": "Observable<BPI>", "signature": "Observable<BPI> getCurrentUSDPrice()", "full_signature": "public Observable<BPI> getCurrentUSDPrice()", "class_method_signature": "BPIServiceClient.getCurrentUSDPrice()", "testcase": false, "constructor": false}, {"identifier": "getHistory", "parameters": "()", "modifiers": "public", "return": "Observable<List<BPI>>", "signature": "Observable<List<BPI>> getHistory()", "full_signature": "public Observable<List<BPI>> getHistory()", "class_method_signature": "BPIServiceClient.getHistory()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/romainpiel/bitcointracker/network/BPIServiceClient.java"}, "focal_method": {"identifier": "getCurrentUSDPrice", "parameters": "()", "modifiers": "public", "return": "Observable<BPI>", "body": "public Observable<BPI> getCurrentUSDPrice() {\n        return bpiService.currentPrice().map(new Func1<PriceDto, BPI>() {\n            @Override\n            public BPI call(PriceDto priceDto) {\n                return new BPI(priceDto.getTime().getUpdatedISO(), priceDto.getBpi().get(\"USD\").getRate());\n            }\n        });\n    }", "signature": "Observable<BPI> getCurrentUSDPrice()", "full_signature": "public Observable<BPI> getCurrentUSDPrice()", "class_method_signature": "BPIServiceClient.getCurrentUSDPrice()", "testcase": false, "constructor": false, "invocations": ["map", "currentPrice", "getUpdatedISO", "getTime", "getRate", "get", "getBpi"]}, "repository": {"repo_id": 30466015, "url": "https://github.com/romainpiel/BitCoin-Tracker", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 628, "license": "licensed"}}