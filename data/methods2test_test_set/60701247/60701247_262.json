{"test_class": {"identifier": "ConnectedDevicesTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AndroidDebugBridge myAndroidDebugBridge;", "modifier": "private", "type": "AndroidDebugBridge", "declarator": "myAndroidDebugBridge", "var_name": "myAndroidDebugBridge"}], "file": "android/testSrc/com/android/tools/idea/run/deployment/ConnectedDevicesTaskTest.java"}, "test_case": {"identifier": "getVirtualDeviceNameIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getVirtualDeviceNameIsNull() throws Exception {\n    // Arrange\n    IDevice ddmlibDevice = Mockito.mock(IDevice.class);\n\n    Mockito.when(ddmlibDevice.isOnline()).thenReturn(true);\n    Mockito.when(ddmlibDevice.isEmulator()).thenReturn(true);\n    Mockito.when(ddmlibDevice.getSerialNumber()).thenReturn(\"emulator-5554\");\n\n    // noinspection UnstableApiUsage\n    Mockito.when(myAndroidDebugBridge.getConnectedDevices()).thenReturn(Futures.immediateFuture(Collections.singletonList(ddmlibDevice)));\n\n    AndroidDevice androidDevice = Mockito.mock(AndroidDevice.class);\n    AsyncSupplier task = new ConnectedDevicesTask(myAndroidDebugBridge, false, null, MoreExecutors.directExecutor(), d -> androidDevice);\n\n    // Act\n    Future connectedDevices = task.get();\n\n    // Assert\n    Object connectedDevice = new ConnectedDevice.Builder()\n      .setName(\"Virtual Device\")\n      .setKey(new Key(\"emulator-5554\"))\n      .setAndroidDevice(androidDevice)\n      .build();\n\n    assertEquals(Collections.singletonList(connectedDevice), connectedDevices.get(1, TimeUnit.SECONDS));\n  }", "signature": "void getVirtualDeviceNameIsNull()", "full_signature": "@Test public void getVirtualDeviceNameIsNull()", "class_method_signature": "ConnectedDevicesTaskTest.getVirtualDeviceNameIsNull()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isOnline", "thenReturn", "when", "isEmulator", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getConnectedDevices", "immediateFuture", "singletonList", "mock", "directExecutor", "get", "build", "setAndroidDevice", "setKey", "setName", "assertEquals", "singletonList", "get"]}, "focal_class": {"identifier": "ConnectedDevicesTask", "superclass": "", "interfaces": "implements AsyncSupplier<List<ConnectedDevice>>", "fields": [{"original_string": "@NotNull\n  private final AndroidDebugBridge myAndroidDebugBridge;", "modifier": "@NotNull\n  private final", "type": "AndroidDebugBridge", "declarator": "myAndroidDebugBridge", "var_name": "myAndroidDebugBridge"}, {"original_string": "private final boolean mySelectDeviceSnapshotComboBoxSnapshotsEnabled;", "modifier": "private final", "type": "boolean", "declarator": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled", "var_name": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled"}, {"original_string": "@Nullable\n  private final LaunchCompatibilityChecker myChecker;", "modifier": "@Nullable\n  private final", "type": "LaunchCompatibilityChecker", "declarator": "myChecker", "var_name": "myChecker"}, {"original_string": "@NotNull\n  private final Executor myExecutor;", "modifier": "@NotNull\n  private final", "type": "Executor", "declarator": "myExecutor", "var_name": "myExecutor"}, {"original_string": "@NotNull\n  private final Function<IDevice, AndroidDevice> myAndroidDeviceFactory;", "modifier": "@NotNull\n  private final", "type": "Function<IDevice, AndroidDevice>", "declarator": "myAndroidDeviceFactory", "var_name": "myAndroidDeviceFactory"}], "methods": [{"identifier": "ConnectedDevicesTask", "parameters": "(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker)", "modifiers": "", "return": "", "signature": " ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker)", "full_signature": "  ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker)", "class_method_signature": "ConnectedDevicesTask.ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker)", "testcase": false, "constructor": true}, {"identifier": "ConnectedDevicesTask", "parameters": "(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker,\n                       @NotNull Executor executor,\n                       @NotNull Function<IDevice, AndroidDevice> androidDeviceFactory)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker,\n                       @NotNull Executor executor,\n                       @NotNull Function<IDevice, AndroidDevice> androidDeviceFactory)", "full_signature": "@VisibleForTesting  ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker,\n                       @NotNull Executor executor,\n                       @NotNull Function<IDevice, AndroidDevice> androidDeviceFactory)", "class_method_signature": "ConnectedDevicesTask.ConnectedDevicesTask(@NotNull AndroidDebugBridge androidDebugBridge,\n                       boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                       @Nullable LaunchCompatibilityChecker checker,\n                       @NotNull Executor executor,\n                       @NotNull Function<IDevice, AndroidDevice> androidDeviceFactory)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<List<ConnectedDevice>>", "signature": "ListenableFuture<List<ConnectedDevice>> get()", "full_signature": "@NotNull @Override public ListenableFuture<List<ConnectedDevice>> get()", "class_method_signature": "ConnectedDevicesTask.get()", "testcase": false, "constructor": false}, {"identifier": "newConnectedDevices", "parameters": "(@NotNull Collection<IDevice> devices)", "modifiers": "@NotNull private", "return": "ListenableFuture<List<ConnectedDevice>>", "signature": "ListenableFuture<List<ConnectedDevice>> newConnectedDevices(@NotNull Collection<IDevice> devices)", "full_signature": "@NotNull private ListenableFuture<List<ConnectedDevice>> newConnectedDevices(@NotNull Collection<IDevice> devices)", "class_method_signature": "ConnectedDevicesTask.newConnectedDevices(@NotNull Collection<IDevice> devices)", "testcase": false, "constructor": false}, {"identifier": "newConnectedDevice", "parameters": "(@NotNull IDevice ddmlibDevice)", "modifiers": "@NotNull private", "return": "ListenableFuture<ConnectedDevice>", "signature": "ListenableFuture<ConnectedDevice> newConnectedDevice(@NotNull IDevice ddmlibDevice)", "full_signature": "@NotNull private ListenableFuture<ConnectedDevice> newConnectedDevice(@NotNull IDevice ddmlibDevice)", "class_method_signature": "ConnectedDevicesTask.newConnectedDevice(@NotNull IDevice ddmlibDevice)", "testcase": false, "constructor": false}, {"identifier": "newConnectedDevice", "parameters": "(@NotNull IDevice ddmlibDevice, @NotNull String id)", "modifiers": "@NotNull private", "return": "ConnectedDevice", "signature": "ConnectedDevice newConnectedDevice(@NotNull IDevice ddmlibDevice, @NotNull String id)", "full_signature": "@NotNull private ConnectedDevice newConnectedDevice(@NotNull IDevice ddmlibDevice, @NotNull String id)", "class_method_signature": "ConnectedDevicesTask.newConnectedDevice(@NotNull IDevice ddmlibDevice, @NotNull String id)", "testcase": false, "constructor": false}, {"identifier": "newKey", "parameters": "(@NotNull IDevice connectedDevice, @NotNull String id)", "modifiers": "@NotNull private", "return": "Key", "signature": "Key newKey(@NotNull IDevice connectedDevice, @NotNull String id)", "full_signature": "@NotNull private Key newKey(@NotNull IDevice connectedDevice, @NotNull String id)", "class_method_signature": "ConnectedDevicesTask.newKey(@NotNull IDevice connectedDevice, @NotNull String id)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/ConnectedDevicesTask.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<List<ConnectedDevice>>", "body": "@NotNull\n  @Override\n  public ListenableFuture<List<ConnectedDevice>> get() {\n    ListenableFuture<Collection<IDevice>> devices = myAndroidDebugBridge.getConnectedDevices();\n\n    // noinspection UnstableApiUsage\n    return Futures.transformAsync(devices, this::newConnectedDevices, myExecutor);\n  }", "signature": "ListenableFuture<List<ConnectedDevice>> get()", "full_signature": "@NotNull @Override public ListenableFuture<List<ConnectedDevice>> get()", "class_method_signature": "ConnectedDevicesTask.get()", "testcase": false, "constructor": false, "invocations": ["getConnectedDevices", "transformAsync"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}