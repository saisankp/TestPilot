{"test_class": {"identifier": "ConfusionMetricsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int[][] a = { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0 } };", "modifier": "private static final", "type": "int[][]", "declarator": "a = { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0 } }", "var_name": "a"}, {"original_string": "private static final int[][] b = { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 } };", "modifier": "private static final", "type": "int[][]", "declarator": "b = { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 } }", "var_name": "b"}, {"original_string": "private static final int[] tp = { 0 };", "modifier": "private static final", "type": "int[]", "declarator": "tp = { 0 }", "var_name": "tp"}, {"original_string": "private static final int[] fp = { 2 };", "modifier": "private static final", "type": "int[]", "declarator": "fp = { 2 }", "var_name": "fp"}, {"original_string": "private static final int[] tn = { 8 };", "modifier": "private static final", "type": "int[]", "declarator": "tn = { 8 }", "var_name": "tn"}, {"original_string": "private static final int[] fn = { 2 };", "modifier": "private static final", "type": "int[]", "declarator": "fn = { 2 }", "var_name": "fn"}, {"original_string": "private static final double[] precision = { 0.0 };", "modifier": "private static final", "type": "double[]", "declarator": "precision = { 0.0 }", "var_name": "precision"}, {"original_string": "private static final double[] recall = { 0.0 };", "modifier": "private static final", "type": "double[]", "declarator": "recall = { 0.0 }", "var_name": "recall"}, {"original_string": "private static final double[] f1score = { 0.0 };", "modifier": "private static final", "type": "double[]", "declarator": "f1score = { 0.0 }", "var_name": "f1score"}], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/ConfusionMetricsTest.java"}, "test_case": {"identifier": "testRecall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRecall() {\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tassertEquals(\"Recall not correct\", recall[i], ConfusionMetrics.getRecall(tp(a[i], b[i]), fn(a[i], b[i])), 1E-8);\n\t\t}\n\t}", "signature": "void testRecall()", "full_signature": "@Test public void testRecall()", "class_method_signature": "ConfusionMetricsTest.testRecall()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getRecall", "tp", "fn"]}, "focal_class": {"identifier": "ConfusionMetrics", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ConfusionMetrics", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfusionMetrics()", "full_signature": "private  ConfusionMetrics()", "class_method_signature": "ConfusionMetrics.ConfusionMetrics()", "testcase": false, "constructor": true}, {"identifier": "getPrecision", "parameters": "(final int tp, final int fp)", "modifiers": "public static", "return": "double", "signature": "double getPrecision(final int tp, final int fp)", "full_signature": "public static double getPrecision(final int tp, final int fp)", "class_method_signature": "ConfusionMetrics.getPrecision(final int tp, final int fp)", "testcase": false, "constructor": false}, {"identifier": "getRecall", "parameters": "(final int tp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getRecall(final int tp, final int fn)", "full_signature": "public static double getRecall(final int tp, final int fn)", "class_method_signature": "ConfusionMetrics.getRecall(final int tp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getTrueNegativeRate", "parameters": "(final int fp, final int tn)", "modifiers": "public static", "return": "double", "signature": "double getTrueNegativeRate(final int fp, final int tn)", "full_signature": "public static double getTrueNegativeRate(final int fp, final int tn)", "class_method_signature": "ConfusionMetrics.getTrueNegativeRate(final int fp, final int tn)", "testcase": false, "constructor": false}, {"identifier": "getNegativePredictiveValue", "parameters": "(final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getNegativePredictiveValue(final int tn, final int fn)", "full_signature": "public static double getNegativePredictiveValue(final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getNegativePredictiveValue(final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getFalseNegativeRate", "parameters": "(final int tp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getFalseNegativeRate(final int tp, final int fn)", "full_signature": "public static double getFalseNegativeRate(final int tp, final int fn)", "class_method_signature": "ConfusionMetrics.getFalseNegativeRate(final int tp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getFallOut", "parameters": "(final int fp, final int tn)", "modifiers": "public static", "return": "double", "signature": "double getFallOut(final int fp, final int tn)", "full_signature": "public static double getFallOut(final int fp, final int tn)", "class_method_signature": "ConfusionMetrics.getFallOut(final int fp, final int tn)", "testcase": false, "constructor": false}, {"identifier": "getFalseDiscoveryRate", "parameters": "(final int tp, final int fp)", "modifiers": "public static", "return": "double", "signature": "double getFalseDiscoveryRate(final int tp, final int fp)", "full_signature": "public static double getFalseDiscoveryRate(final int tp, final int fp)", "class_method_signature": "ConfusionMetrics.getFalseDiscoveryRate(final int tp, final int fp)", "testcase": false, "constructor": false}, {"identifier": "getFalseOmissionRate", "parameters": "(final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getFalseOmissionRate(final int tn, final int fn)", "full_signature": "public static double getFalseOmissionRate(final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getFalseOmissionRate(final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getPrevalenceThreshold", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getPrevalenceThreshold(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getPrevalenceThreshold(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getPrevalenceThreshold(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getCriticalSuccessIndex", "parameters": "(final int tp, final int fp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getCriticalSuccessIndex(final int tp, final int fp, final int fn)", "full_signature": "public static double getCriticalSuccessIndex(final int tp, final int fp, final int fn)", "class_method_signature": "ConfusionMetrics.getCriticalSuccessIndex(final int tp, final int fp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getAccuracy", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getAccuracy(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getAccuracy(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getAccuracy(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getErrorRate", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getErrorRate(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getErrorRate(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getErrorRate(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getBalancedAccuracy", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getBalancedAccuracy(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getBalancedAccuracy(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getBalancedAccuracy(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getF1Score", "parameters": "(final int tp, final int fp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getF1Score(final int tp, final int fp, final int fn)", "full_signature": "public static double getF1Score(final int tp, final int fp, final int fn)", "class_method_signature": "ConfusionMetrics.getF1Score(final int tp, final int fp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getFMeasure", "parameters": "(final double beta, final int tp, final int fp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getFMeasure(final double beta, final int tp, final int fp, final int fn)", "full_signature": "public static double getFMeasure(final double beta, final int tp, final int fp, final int fn)", "class_method_signature": "ConfusionMetrics.getFMeasure(final double beta, final int tp, final int fp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getMatthewsCorrelationCoefficient", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getMatthewsCorrelationCoefficient(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getMatthewsCorrelationCoefficient(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getMatthewsCorrelationCoefficient(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getFowlkesMallowsIndex", "parameters": "(final int tp, final int fp, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getFowlkesMallowsIndex(final int tp, final int fp, final int fn)", "full_signature": "public static double getFowlkesMallowsIndex(final int tp, final int fp, final int fn)", "class_method_signature": "ConfusionMetrics.getFowlkesMallowsIndex(final int tp, final int fp, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getInformedness", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getInformedness(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getInformedness(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getInformedness(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getMarkedness", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getMarkedness(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getMarkedness(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getMarkedness(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getPredictedPositiveConditionRate", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getPredictedPositiveConditionRate(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getPredictedPositiveConditionRate(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getPredictedPositiveConditionRate(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getPositiveLikelihoodRatio", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getPositiveLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getPositiveLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getPositiveLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getNegativeLikelihoodRatio", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getNegativeLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getNegativeLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getNegativeLikelihoodRatio(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}, {"identifier": "getDiagnosticOddsRatio", "parameters": "(final int tp, final int fp, final int tn, final int fn)", "modifiers": "public static", "return": "double", "signature": "double getDiagnosticOddsRatio(final int tp, final int fp, final int tn, final int fn)", "full_signature": "public static double getDiagnosticOddsRatio(final int tp, final int fp, final int tn, final int fn)", "class_method_signature": "ConfusionMetrics.getDiagnosticOddsRatio(final int tp, final int fp, final int tn, final int fn)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/ConfusionMetrics.java"}, "focal_method": {"identifier": "getRecall", "parameters": "(final int tp, final int fn)", "modifiers": "public static", "return": "double", "body": "public static double getRecall(final int tp, final int fn) {\n\t\treturn (tp + fn == 0) ? 1.0 : (double) tp / (tp + fn);\n\t}", "signature": "double getRecall(final int tp, final int fn)", "full_signature": "public static double getRecall(final int tp, final int fn)", "class_method_signature": "ConfusionMetrics.getRecall(final int tp, final int fn)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}