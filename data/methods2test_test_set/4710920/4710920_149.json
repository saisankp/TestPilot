{"test_class": {"identifier": "RpcExceptionMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RpcExceptionMapper exceptionMapper;", "modifier": "private", "type": "RpcExceptionMapper", "declarator": "exceptionMapper", "var_name": "exceptionMapper"}], "file": "dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RpcExceptionMapperTest.java"}, "test_case": {"identifier": "testConstraintViolationException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConstraintViolationException() {\n        ConstraintViolationException violationException = mock(ConstraintViolationException.class);\n        ConstraintViolation violation = mock(ConstraintViolation.class, Answers.RETURNS_DEEP_STUBS);\n        given(violationException.getConstraintViolations()).willReturn(Sets.<ConstraintViolation<?>>newSet(violation));\n        RpcException rpcException = new RpcException(\"violation\", violationException);\n\n        Response response = exceptionMapper.toResponse(rpcException);\n\n        assertThat(response, not(nullValue()));\n        assertThat(response.getEntity(), instanceOf(ViolationReport.class));\n    }", "signature": "void testConstraintViolationException()", "full_signature": "@Test public void testConstraintViolationException()", "class_method_signature": "RpcExceptionMapperTest.testConstraintViolationException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "willReturn", "given", "getConstraintViolations", "newSet", "toResponse", "assertThat", "not", "nullValue", "assertThat", "getEntity", "instanceOf"]}, "focal_class": {"identifier": "RpcExceptionMapper", "superclass": "", "interfaces": "implements ExceptionMapper<RpcException>", "fields": [], "methods": [{"identifier": "toResponse", "parameters": "(RpcException e)", "modifiers": "@Override public", "return": "Response", "signature": "Response toResponse(RpcException e)", "full_signature": "@Override public Response toResponse(RpcException e)", "class_method_signature": "RpcExceptionMapper.toResponse(RpcException e)", "testcase": false, "constructor": false}, {"identifier": "handleConstraintViolationException", "parameters": "(ConstraintViolationException cve)", "modifiers": "protected", "return": "Response", "signature": "Response handleConstraintViolationException(ConstraintViolationException cve)", "full_signature": "protected Response handleConstraintViolationException(ConstraintViolationException cve)", "class_method_signature": "RpcExceptionMapper.handleConstraintViolationException(ConstraintViolationException cve)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcExceptionMapper.java"}, "focal_method": {"identifier": "toResponse", "parameters": "(RpcException e)", "modifiers": "@Override public", "return": "Response", "body": "@Override\n    public Response toResponse(RpcException e) {\n        // TODO do more sophisticated exception handling and output\n        if (e.getCause() instanceof ConstraintViolationException) {\n            return handleConstraintViolationException((ConstraintViolationException) e.getCause());\n        }\n        // we may want to avoid exposing the dubbo exception details to certain clients\n        // TODO for now just do plain text output\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(\"Internal server error: \" + e.getMessage()).type(ContentType.TEXT_PLAIN_UTF_8).build();\n    }", "signature": "Response toResponse(RpcException e)", "full_signature": "@Override public Response toResponse(RpcException e)", "class_method_signature": "RpcExceptionMapper.toResponse(RpcException e)", "testcase": false, "constructor": false, "invocations": ["getCause", "handleConstraintViolationException", "getCause", "build", "type", "entity", "status", "getMessage"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}