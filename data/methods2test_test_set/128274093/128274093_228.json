{"test_class": {"identifier": "SubscriptionArbiterTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscriptions/SubscriptionArbiterTest.java"}, "test_case": {"identifier": "invalidDeferredRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidDeferredRequest() {\n        SubscriptionArbiter sa = new SubscriptionArbiter();\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            sa.request(-99);\n\n            TestHelper.assertError(errors, 0, IllegalArgumentException.class, \"n > 0 required but it was -99\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void invalidDeferredRequest()", "full_signature": "@Test public void invalidDeferredRequest()", "class_method_signature": "SubscriptionArbiterTest.invalidDeferredRequest()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "request", "assertError", "reset"]}, "focal_class": {"identifier": "SubscriptionArbiter", "superclass": "extends AtomicInteger", "interfaces": "implements Subscription", "fields": [{"original_string": "private static final long serialVersionUID = -2189523197179400958L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2189523197179400958L", "var_name": "serialVersionUID"}, {"original_string": "Subscription actual;", "modifier": "", "type": "Subscription", "declarator": "actual", "var_name": "actual"}, {"original_string": "long requested;", "modifier": "", "type": "long", "declarator": "requested", "var_name": "requested"}, {"original_string": "final AtomicReference<Subscription> missedSubscription;", "modifier": "final", "type": "AtomicReference<Subscription>", "declarator": "missedSubscription", "var_name": "missedSubscription"}, {"original_string": "final AtomicLong missedRequested;", "modifier": "final", "type": "AtomicLong", "declarator": "missedRequested", "var_name": "missedRequested"}, {"original_string": "final AtomicLong missedProduced;", "modifier": "final", "type": "AtomicLong", "declarator": "missedProduced", "var_name": "missedProduced"}, {"original_string": "volatile boolean cancelled;", "modifier": "volatile", "type": "boolean", "declarator": "cancelled", "var_name": "cancelled"}, {"original_string": "protected boolean unbounded;", "modifier": "protected", "type": "boolean", "declarator": "unbounded", "var_name": "unbounded"}], "methods": [{"identifier": "SubscriptionArbiter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubscriptionArbiter()", "full_signature": "public  SubscriptionArbiter()", "class_method_signature": "SubscriptionArbiter.SubscriptionArbiter()", "testcase": false, "constructor": true}, {"identifier": "setSubscription", "parameters": "(Subscription s)", "modifiers": "public final", "return": "void", "signature": "void setSubscription(Subscription s)", "full_signature": "public final void setSubscription(Subscription s)", "class_method_signature": "SubscriptionArbiter.setSubscription(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public final", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public final void request(long n)", "class_method_signature": "SubscriptionArbiter.request(long n)", "testcase": false, "constructor": false}, {"identifier": "produced", "parameters": "(long n)", "modifiers": "public final", "return": "void", "signature": "void produced(long n)", "full_signature": "public final void produced(long n)", "class_method_signature": "SubscriptionArbiter.produced(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "SubscriptionArbiter.cancel()", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void drain()", "full_signature": "final void drain()", "class_method_signature": "SubscriptionArbiter.drain()", "testcase": false, "constructor": false}, {"identifier": "drainLoop", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void drainLoop()", "full_signature": "final void drainLoop()", "class_method_signature": "SubscriptionArbiter.drainLoop()", "testcase": false, "constructor": false}, {"identifier": "isUnbounded", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isUnbounded()", "full_signature": "public final boolean isUnbounded()", "class_method_signature": "SubscriptionArbiter.isUnbounded()", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "public final boolean isCancelled()", "class_method_signature": "SubscriptionArbiter.isCancelled()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java"}, "focal_method": {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void request(long n) {\n        if (SubscriptionHelper.validate(n)) {\n            if (unbounded) {\n                return;\n            }\n            if (get() == 0 && compareAndSet(0, 1)) {\n                long r = requested;\n\n                if (r != Long.MAX_VALUE) {\n                    r = BackpressureHelper.addCap(r, n);\n                    requested = r;\n                    if (r == Long.MAX_VALUE) {\n                        unbounded = true;\n                    }\n                }\n                Subscription a = actual;\n\n                if (decrementAndGet() != 0) {\n                    drainLoop();\n                }\n\n                if (a != null) {\n                    a.request(n);\n                }\n\n                return;\n            }\n\n            BackpressureHelper.add(missedRequested, n);\n\n            drain();\n        }\n    }", "signature": "void request(long n)", "full_signature": "@Override public final void request(long n)", "class_method_signature": "SubscriptionArbiter.request(long n)", "testcase": false, "constructor": false, "invocations": ["validate", "get", "compareAndSet", "addCap", "decrementAndGet", "drainLoop", "request", "add", "drain"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}