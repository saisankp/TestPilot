{"test_class": {"identifier": "MinHostsTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/criteria/minhosts/MinHostsTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilter() throws Exception {\n        List<TopologyWrapper> topologies = new ArrayList<>();\n        for (int i = 1; i < 5; i++) {\n            ServiceTemplateId id = new ServiceTemplateId(\"http://www.winery.opentosca.org/test/targetallocation/servicetemplates\",\n                \"TargetAllocationMinHostsTest\" + i, false);\n            topologies.add(new TopologyWrapper(repository.getElement(id).getTopologyTemplate()));\n        }\n        assertEquals(4, topologies.size());\n\n        Criteria minHosts = new MinHosts(null, Integer.MAX_VALUE);\n        List<TopologyWrapper> filtered = minHosts.filter(topologies);\n        assertEquals(2, filtered.size());\n        assertEquals(5, filtered.get(0).getNodeTemplates().size());\n    }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "MinHostsTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["add", "getTopologyTemplate", "getElement", "assertEquals", "size", "filter", "assertEquals", "size", "assertEquals", "size", "getNodeTemplates", "get"]}, "focal_class": {"identifier": "MinHosts", "superclass": "extends CriteriaCommon", "interfaces": "", "fields": [], "methods": [{"identifier": "MinHosts", "parameters": "(JsonNode params, int outputCap)", "modifiers": "public", "return": "", "signature": " MinHosts(JsonNode params, int outputCap)", "full_signature": "public  MinHosts(JsonNode params, int outputCap)", "class_method_signature": "MinHosts.MinHosts(JsonNode params, int outputCap)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinHosts.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false}, {"identifier": "generateTargetLabelTopologies", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "signature": "List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "full_signature": "@Override public List<TopologyWrapper> generateTargetLabelTopologies(TopologyWrapper topology)", "class_method_signature": "MinHosts.generateTargetLabelTopologies(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPossibleMatches", "parameters": "(TopologyWrapper topology)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "full_signature": "@Override protected List<List<PermutationHelper>> getPossibleMatches(TopologyWrapper topology)", "class_method_signature": "MinHosts.getPossibleMatches(TopologyWrapper topology)", "testcase": false, "constructor": false}, {"identifier": "getPermutations", "parameters": "(List<List<PermutationHelper>> possibilities)", "modifiers": "@Override protected", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> getPermutations(List<List<PermutationHelper>> possibilities)", "full_signature": "@Override protected List<List<PermutationHelper>> getPermutations(List<List<PermutationHelper>> possibilities)", "class_method_signature": "MinHosts.getPermutations(List<List<PermutationHelper>> possibilities)", "testcase": false, "constructor": false}, {"identifier": "toPermutationHelpers", "parameters": "(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "modifiers": "private", "return": "List<List<PermutationHelper>>", "signature": "List<List<PermutationHelper>> toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "full_signature": "private List<List<PermutationHelper>> toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "class_method_signature": "MinHosts.toPermutationHelpers(Map<TNodeTemplate, List<TTopologyTemplate>> possibleReplacements)", "testcase": false, "constructor": false}, {"identifier": "toInjectParameter", "parameters": "(TopologyWrapper topology, List<PermutationHelper> permutation)", "modifiers": "@Override protected", "return": "Map<String, TTopologyTemplate>", "signature": "Map<String, TTopologyTemplate> toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "full_signature": "@Override protected Map<String, TTopologyTemplate> toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "class_method_signature": "MinHosts.toInjectParameter(TopologyWrapper topology, List<PermutationHelper> permutation)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/criteria/minhosts/MinHosts.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<TopologyWrapper> topologies)", "modifiers": "@Override public", "return": "List<TopologyWrapper>", "body": "@Override\n    public List<TopologyWrapper> filter(List<TopologyWrapper> topologies) {\n        int minCount = Collections.min(topologies, Comparator.comparingInt(t -> t.getNodeTemplates().size()))\n            .getNodeTemplates().size();\n        return topologies.stream().filter(t -> t.getNodeTemplates().size() == minCount).collect(Collectors.toList());\n    }", "signature": "List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "full_signature": "@Override public List<TopologyWrapper> filter(List<TopologyWrapper> topologies)", "class_method_signature": "MinHosts.filter(List<TopologyWrapper> topologies)", "testcase": false, "constructor": false, "invocations": ["size", "getNodeTemplates", "min", "comparingInt", "size", "getNodeTemplates", "collect", "filter", "stream", "size", "getNodeTemplates", "toList"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}