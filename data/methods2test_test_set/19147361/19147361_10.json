{"test_class": {"identifier": "TestMultiRowExceptions", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/exception/TestMultiRowExceptions.java"}, "test_case": {"identifier": "testConstructMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructMessage() {\n    Map<TableAndRow, IOException> exceptions = new TreeMap<TableAndRow, IOException>();\n    exceptions.put(new TableAndRow(TABLENAME, ROW), new IOException(\"exceptionA\"));\n    exceptions.put(new TableAndRow(TABLENAME, ANOTHER_ROW), new IOException(\"exceptionB\"));\n    System.out.println(MultiRowExceptions.constructMessage(exceptions));\n  }", "signature": "void testConstructMessage()", "full_signature": "@Test public void testConstructMessage()", "class_method_signature": "TestMultiRowExceptions.testConstructMessage()", "testcase": true, "constructor": false, "invocations": ["put", "put", "println", "constructMessage"]}, "focal_class": {"identifier": "MultiRowExceptions", "superclass": "extends ThemisException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -5300909468331086844L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5300909468331086844L", "var_name": "serialVersionUID"}, {"original_string": "private Map<TableAndRow, IOException> exceptions;", "modifier": "private", "type": "Map<TableAndRow, IOException>", "declarator": "exceptions", "var_name": "exceptions"}], "methods": [{"identifier": "MultiRowExceptions", "parameters": "(String msg, Map<TableAndRow, IOException> exceptions)", "modifiers": "public", "return": "", "signature": " MultiRowExceptions(String msg, Map<TableAndRow, IOException> exceptions)", "full_signature": "public  MultiRowExceptions(String msg, Map<TableAndRow, IOException> exceptions)", "class_method_signature": "MultiRowExceptions.MultiRowExceptions(String msg, Map<TableAndRow, IOException> exceptions)", "testcase": false, "constructor": true}, {"identifier": "getExceptions", "parameters": "()", "modifiers": "public", "return": "Map<TableAndRow, IOException>", "signature": "Map<TableAndRow, IOException> getExceptions()", "full_signature": "public Map<TableAndRow, IOException> getExceptions()", "class_method_signature": "MultiRowExceptions.getExceptions()", "testcase": false, "constructor": false}, {"identifier": "constructMessage", "parameters": "(Map<TableAndRow, IOException> exceptions)", "modifiers": "public static", "return": "String", "signature": "String constructMessage(Map<TableAndRow, IOException> exceptions)", "full_signature": "public static String constructMessage(Map<TableAndRow, IOException> exceptions)", "class_method_signature": "MultiRowExceptions.constructMessage(Map<TableAndRow, IOException> exceptions)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/exception/MultiRowExceptions.java"}, "focal_method": {"identifier": "constructMessage", "parameters": "(Map<TableAndRow, IOException> exceptions)", "modifiers": "public static", "return": "String", "body": "public static String constructMessage(Map<TableAndRow, IOException> exceptions) {\n    String message = \"\";\n    for (Entry<TableAndRow, IOException> rowException : exceptions.entrySet()) {\n      message += (\"tableAndRow=\" + rowException.getKey() + \", exception=\" + rowException.getValue() + \"\\n\");\n    }\n    return message;\n  }", "signature": "String constructMessage(Map<TableAndRow, IOException> exceptions)", "full_signature": "public static String constructMessage(Map<TableAndRow, IOException> exceptions)", "class_method_signature": "MultiRowExceptions.constructMessage(Map<TableAndRow, IOException> exceptions)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}