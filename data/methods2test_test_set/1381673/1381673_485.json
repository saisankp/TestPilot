{"test_class": {"identifier": "TimeFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TimeFunction timeFunction;", "modifier": "private", "type": "TimeFunction", "declarator": "timeFunction", "var_name": "timeFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/TimeFunctionTest.java"}, "test_case": {"identifier": "invokeStringParamNotDateOrTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeStringParamNotDateOrTime() {\n        FunctionTestUtil.assertResultError(timeFunction.invoke(\"test\"), InvalidParametersEvent.class);\n    }", "signature": "void invokeStringParamNotDateOrTime()", "full_signature": "@Test public void invokeStringParamNotDateOrTime()", "class_method_signature": "TimeFunctionTest.invokeStringParamNotDateOrTime()", "testcase": true, "constructor": false, "invocations": ["assertResultError", "invoke"]}, "focal_class": {"identifier": "TimeFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final DateTimeFormatter FEEL_TIME;", "modifier": "public static final", "type": "DateTimeFormatter", "declarator": "FEEL_TIME", "var_name": "FEEL_TIME"}, {"original_string": "private static final BigDecimal NANO_MULT = BigDecimal.valueOf( 1000000000 );", "modifier": "private static final", "type": "BigDecimal", "declarator": "NANO_MULT = BigDecimal.valueOf( 1000000000 )", "var_name": "NANO_MULT"}], "methods": [{"identifier": "TimeFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " TimeFunction()", "full_signature": "public  TimeFunction()", "class_method_signature": "TimeFunction.TimeFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"from\") String val)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val)", "class_method_signature": "TimeFunction.invoke(@ParameterName(\"from\") String val)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds)", "class_method_signature": "TimeFunction.invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds, @ParameterName(\"offset\") Duration offset)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds, @ParameterName(\"offset\") Duration offset)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds, @ParameterName(\"offset\") Duration offset)", "class_method_signature": "TimeFunction.invoke(\n            @ParameterName(\"hour\") Number hour, @ParameterName(\"minute\") Number minute,\n            @ParameterName(\"second\") Number seconds, @ParameterName(\"offset\") Duration offset)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName(\"from\") TemporalAccessor date)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") TemporalAccessor date)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") TemporalAccessor date)", "class_method_signature": "TimeFunction.invoke(@ParameterName(\"from\") TemporalAccessor date)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/TimeFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"from\") String val)", "modifiers": "public", "return": "FEELFnResult<TemporalAccessor>", "body": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val) {\n        if ( val == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", \"cannot be null\"));\n        }\n        \n        try {\n            TemporalAccessor parsed = FEEL_TIME.parse(val);\n\n            if (parsed.query(TemporalQueries.offset()) != null) {\n                // it is an offset-zoned time, so I can know for certain an OffsetTime\n                OffsetTime asOffSetTime = parsed.query(OffsetTime::from);\n                return FEELFnResult.ofResult(asOffSetTime);\n            } else if (parsed.query(TemporalQueries.zone()) == null) {\n                // if it does not contain any zone information at all, then I know for certain is a local time.\n                LocalTime asLocalTime = parsed.query(LocalTime::from);\n                return FEELFnResult.ofResult(asLocalTime);\n            }\n\n            return FEELFnResult.ofResult(parsed);\n        } catch (DateTimeException e) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"from\", e));\n        }\n    }", "signature": "FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val)", "full_signature": "public FEELFnResult<TemporalAccessor> invoke(@ParameterName(\"from\") String val)", "class_method_signature": "TimeFunction.invoke(@ParameterName(\"from\") String val)", "testcase": false, "constructor": false, "invocations": ["ofError", "parse", "query", "offset", "query", "ofResult", "query", "zone", "query", "ofResult", "ofResult", "ofError"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}