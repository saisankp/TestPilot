{"test_class": {"identifier": "CompositeBinaryStoreTest", "superclass": "extends AbstractBinaryStoreTest", "interfaces": "", "fields": [{"original_string": "private static final int MIN_BINARY_SIZE = 20;", "modifier": "private static final", "type": "int", "declarator": "MIN_BINARY_SIZE = 20", "var_name": "MIN_BINARY_SIZE"}, {"original_string": "private static final Random RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "static CompositeBinaryStore store;", "modifier": "static", "type": "CompositeBinaryStore", "declarator": "store", "var_name": "store"}, {"original_string": "static BinaryStore defaultStore;", "modifier": "static", "type": "BinaryStore", "declarator": "defaultStore", "var_name": "defaultStore"}, {"original_string": "static BinaryStore alternativeStore;", "modifier": "static", "type": "BinaryStore", "declarator": "alternativeStore", "var_name": "alternativeStore"}, {"original_string": "static BinaryStore anotherAlternativeStore;", "modifier": "static", "type": "BinaryStore", "declarator": "anotherAlternativeStore", "var_name": "anotherAlternativeStore"}, {"original_string": "static String defaultHint;", "modifier": "static", "type": "String", "declarator": "defaultHint", "var_name": "defaultHint"}, {"original_string": "static String alternativeHint;", "modifier": "static", "type": "String", "declarator": "alternativeHint", "var_name": "alternativeHint"}, {"original_string": "static File directory;", "modifier": "static", "type": "File", "declarator": "directory", "var_name": "directory"}, {"original_string": "static File altDirectory;", "modifier": "static", "type": "File", "declarator": "altDirectory", "var_name": "altDirectory"}, {"original_string": "static File altDirectory2;", "modifier": "static", "type": "File", "declarator": "altDirectory2", "var_name": "altDirectory2"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/binary/CompositeBinaryStoreTest.java"}, "test_case": {"identifier": "shouldRaiseAnExceptionWhenMovingAKeyThatDoesntExist", "parameters": "()", "modifiers": "@Test( expected = BinaryStoreException.class ) public", "return": "void", "body": "@Test( expected = BinaryStoreException.class )\n    public void shouldRaiseAnExceptionWhenMovingAKeyThatDoesntExist() throws BinaryStoreException {\n        store.moveValue(new BinaryKey(\"this-doesnt-exist\"), alternativeHint);\n    }", "signature": "void shouldRaiseAnExceptionWhenMovingAKeyThatDoesntExist()", "full_signature": "@Test( expected = BinaryStoreException.class ) public void shouldRaiseAnExceptionWhenMovingAKeyThatDoesntExist()", "class_method_signature": "CompositeBinaryStoreTest.shouldRaiseAnExceptionWhenMovingAKeyThatDoesntExist()", "testcase": true, "constructor": false, "invocations": ["moveValue"]}, "focal_class": {"identifier": "CompositeBinaryStore", "superclass": "", "interfaces": "implements BinaryStore", "fields": [{"original_string": "private static final String DEFAULT_STRATEGY_HINT = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_STRATEGY_HINT = \"default\"", "var_name": "DEFAULT_STRATEGY_HINT"}, {"original_string": "private volatile TextExtractors extractors;", "modifier": "private volatile", "type": "TextExtractors", "declarator": "extractors", "var_name": "extractors"}, {"original_string": "private volatile MimeTypeDetector detector = NullMimeTypeDetector.INSTANCE;", "modifier": "private volatile", "type": "MimeTypeDetector", "declarator": "detector = NullMimeTypeDetector.INSTANCE", "var_name": "detector"}, {"original_string": "protected Logger logger = Logger.getLogger(getClass());", "modifier": "protected", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private Map<String, BinaryStore> namedStores;", "modifier": "private", "type": "Map<String, BinaryStore>", "declarator": "namedStores", "var_name": "namedStores"}, {"original_string": "private BinaryStore defaultBinaryStore;", "modifier": "private", "type": "BinaryStore", "declarator": "defaultBinaryStore", "var_name": "defaultBinaryStore"}], "methods": [{"identifier": "CompositeBinaryStore", "parameters": "( Map<String, BinaryStore> namedStores )", "modifiers": "public", "return": "", "signature": " CompositeBinaryStore( Map<String, BinaryStore> namedStores )", "full_signature": "public  CompositeBinaryStore( Map<String, BinaryStore> namedStores )", "class_method_signature": "CompositeBinaryStore.CompositeBinaryStore( Map<String, BinaryStore> namedStores )", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "CompositeBinaryStore.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "CompositeBinaryStore.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getMinimumBinarySizeInBytes", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMinimumBinarySizeInBytes()", "full_signature": "@Override public long getMinimumBinarySizeInBytes()", "class_method_signature": "CompositeBinaryStore.getMinimumBinarySizeInBytes()", "testcase": false, "constructor": false}, {"identifier": "setMinimumBinarySizeInBytes", "parameters": "( long minSizeInBytes )", "modifiers": "@Override public", "return": "void", "signature": "void setMinimumBinarySizeInBytes( long minSizeInBytes )", "full_signature": "@Override public void setMinimumBinarySizeInBytes( long minSizeInBytes )", "class_method_signature": "CompositeBinaryStore.setMinimumBinarySizeInBytes( long minSizeInBytes )", "testcase": false, "constructor": false}, {"identifier": "setTextExtractors", "parameters": "( TextExtractors textExtractors )", "modifiers": "@Override public", "return": "void", "signature": "void setTextExtractors( TextExtractors textExtractors )", "full_signature": "@Override public void setTextExtractors( TextExtractors textExtractors )", "class_method_signature": "CompositeBinaryStore.setTextExtractors( TextExtractors textExtractors )", "testcase": false, "constructor": false}, {"identifier": "setMimeTypeDetector", "parameters": "( MimeTypeDetector mimeTypeDetector )", "modifiers": "@Override public", "return": "void", "signature": "void setMimeTypeDetector( MimeTypeDetector mimeTypeDetector )", "full_signature": "@Override public void setMimeTypeDetector( MimeTypeDetector mimeTypeDetector )", "class_method_signature": "CompositeBinaryStore.setMimeTypeDetector( MimeTypeDetector mimeTypeDetector )", "testcase": false, "constructor": false}, {"identifier": "storeValue", "parameters": "( InputStream stream, boolean markAsUnused )", "modifiers": "@Override public", "return": "BinaryValue", "signature": "BinaryValue storeValue( InputStream stream, boolean markAsUnused )", "full_signature": "@Override public BinaryValue storeValue( InputStream stream, boolean markAsUnused )", "class_method_signature": "CompositeBinaryStore.storeValue( InputStream stream, boolean markAsUnused )", "testcase": false, "constructor": false}, {"identifier": "storeValue", "parameters": "( InputStream stream, String hint, boolean markAsUnused )", "modifiers": "@Override public", "return": "BinaryValue", "signature": "BinaryValue storeValue( InputStream stream, String hint, boolean markAsUnused )", "full_signature": "@Override public BinaryValue storeValue( InputStream stream, String hint, boolean markAsUnused )", "class_method_signature": "CompositeBinaryStore.storeValue( InputStream stream, String hint, boolean markAsUnused )", "testcase": false, "constructor": false}, {"identifier": "moveValue", "parameters": "( BinaryKey key,\n                                String source,\n                                String destination )", "modifiers": "public", "return": "BinaryKey", "signature": "BinaryKey moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "full_signature": "public BinaryKey moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "class_method_signature": "CompositeBinaryStore.moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "testcase": false, "constructor": false}, {"identifier": "moveValue", "parameters": "( BinaryKey key,\n                           String destination )", "modifiers": "public", "return": "void", "signature": "void moveValue( BinaryKey key,\n                           String destination )", "full_signature": "public void moveValue( BinaryKey key,\n                           String destination )", "class_method_signature": "CompositeBinaryStore.moveValue( BinaryKey key,\n                           String destination )", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "( BinaryKey key )", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream( BinaryKey key )", "full_signature": "@Override public InputStream getInputStream( BinaryKey key )", "class_method_signature": "CompositeBinaryStore.getInputStream( BinaryKey key )", "testcase": false, "constructor": false}, {"identifier": "hasBinary", "parameters": "( BinaryKey key )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasBinary( BinaryKey key )", "full_signature": "@Override public boolean hasBinary( BinaryKey key )", "class_method_signature": "CompositeBinaryStore.hasBinary( BinaryKey key )", "testcase": false, "constructor": false}, {"identifier": "markAsUnused", "parameters": "( Iterable<BinaryKey> keys )", "modifiers": "@SuppressWarnings( \"unused\" ) @Override public", "return": "void", "signature": "void markAsUnused( Iterable<BinaryKey> keys )", "full_signature": "@SuppressWarnings( \"unused\" ) @Override public void markAsUnused( Iterable<BinaryKey> keys )", "class_method_signature": "CompositeBinaryStore.markAsUnused( Iterable<BinaryKey> keys )", "testcase": false, "constructor": false}, {"identifier": "markAsUsed", "parameters": "( Iterable<BinaryKey> keys )", "modifiers": "@Override public", "return": "void", "signature": "void markAsUsed( Iterable<BinaryKey> keys )", "full_signature": "@Override public void markAsUsed( Iterable<BinaryKey> keys )", "class_method_signature": "CompositeBinaryStore.markAsUsed( Iterable<BinaryKey> keys )", "testcase": false, "constructor": false}, {"identifier": "removeValuesUnusedLongerThan", "parameters": "( long minimumAge,\n                                              TimeUnit unit )", "modifiers": "@SuppressWarnings( \"unused\" ) @Override public", "return": "void", "signature": "void removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "full_signature": "@SuppressWarnings( \"unused\" ) @Override public void removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "class_method_signature": "CompositeBinaryStore.removeValuesUnusedLongerThan( long minimumAge,\n                                              TimeUnit unit )", "testcase": false, "constructor": false}, {"identifier": "getText", "parameters": "( BinaryValue binary )", "modifiers": "@Override public", "return": "String", "signature": "String getText( BinaryValue binary )", "full_signature": "@Override public String getText( BinaryValue binary )", "class_method_signature": "CompositeBinaryStore.getText( BinaryValue binary )", "testcase": false, "constructor": false}, {"identifier": "getMimeType", "parameters": "( BinaryValue binary,\n                               String name )", "modifiers": "@Override public", "return": "String", "signature": "String getMimeType( BinaryValue binary,\n                               String name )", "full_signature": "@Override public String getMimeType( BinaryValue binary,\n                               String name )", "class_method_signature": "CompositeBinaryStore.getMimeType( BinaryValue binary,\n                               String name )", "testcase": false, "constructor": false}, {"identifier": "getAllBinaryKeys", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<BinaryKey>", "signature": "Iterable<BinaryKey> getAllBinaryKeys()", "full_signature": "@Override public Iterable<BinaryKey> getAllBinaryKeys()", "class_method_signature": "CompositeBinaryStore.getAllBinaryKeys()", "testcase": false, "constructor": false}, {"identifier": "getNamedStoreIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Map.Entry<String, BinaryStore>>", "signature": "Iterator<Map.Entry<String, BinaryStore>> getNamedStoreIterator()", "full_signature": "public Iterator<Map.Entry<String, BinaryStore>> getNamedStoreIterator()", "class_method_signature": "CompositeBinaryStore.getNamedStoreIterator()", "testcase": false, "constructor": false}, {"identifier": "findBinaryStoreContainingKey", "parameters": "( BinaryKey key )", "modifiers": "public", "return": "BinaryStore", "signature": "BinaryStore findBinaryStoreContainingKey( BinaryKey key )", "full_signature": "public BinaryStore findBinaryStoreContainingKey( BinaryKey key )", "class_method_signature": "CompositeBinaryStore.findBinaryStoreContainingKey( BinaryKey key )", "testcase": false, "constructor": false}, {"identifier": "selectBinaryStore", "parameters": "( String hint )", "modifiers": "private", "return": "BinaryStore", "signature": "BinaryStore selectBinaryStore( String hint )", "full_signature": "private BinaryStore selectBinaryStore( String hint )", "class_method_signature": "CompositeBinaryStore.selectBinaryStore( String hint )", "testcase": false, "constructor": false}, {"identifier": "getDefaultBinaryStore", "parameters": "()", "modifiers": "private", "return": "BinaryStore", "signature": "BinaryStore getDefaultBinaryStore()", "full_signature": "private BinaryStore getDefaultBinaryStore()", "class_method_signature": "CompositeBinaryStore.getDefaultBinaryStore()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/binary/CompositeBinaryStore.java"}, "focal_method": {"identifier": "moveValue", "parameters": "( BinaryKey key,\n                                String source,\n                                String destination )", "modifiers": "public", "return": "BinaryKey", "body": "public BinaryKey moveValue( BinaryKey key,\n                                String source,\n                                String destination ) throws BinaryStoreException {\n        final BinaryStore sourceStore;\n\n        if (source == null) {\n            sourceStore = findBinaryStoreContainingKey(key);\n        } else {\n            sourceStore = selectBinaryStore(source);\n        }\n\n        // could not find source store, or\n        if (sourceStore == null || !sourceStore.hasBinary(key)) {\n            throw new BinaryStoreException(JcrI18n.unableToFindBinaryValue.text(key, sourceStore));\n        }\n\n        BinaryStore destinationStore = selectBinaryStore(destination);\n\n        // key is already in the destination store\n        if (sourceStore.equals(destinationStore)) {\n            return key;\n        }\n\n        final BinaryValue binaryValue = storeValue(sourceStore.getInputStream(key), destination, false);\n        sourceStore.markAsUnused(java.util.Collections.singleton(key));\n\n        return binaryValue.getKey();\n    }", "signature": "BinaryKey moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "full_signature": "public BinaryKey moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "class_method_signature": "CompositeBinaryStore.moveValue( BinaryKey key,\n                                String source,\n                                String destination )", "testcase": false, "constructor": false, "invocations": ["findBinaryStoreContainingKey", "selectBinaryStore", "hasBinary", "text", "selectBinaryStore", "equals", "storeValue", "getInputStream", "markAsUnused", "singleton", "getKey"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}