{"test_class": {"identifier": "UtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/bbva/kltt/apirest/core/web/UtilitiesTest.java"}, "test_case": {"identifier": "fullTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fullTest() throws APIRestGeneratorException \n\t{\n\t\tUtilities.readFileContent(ConstantsTest.SRC_TEST_RESOURCES_PATH + File.separator + ConstantsTest.ANT_FILE) ;\n\t}", "signature": "void fullTest()", "full_signature": "@Test public void fullTest()", "class_method_signature": "UtilitiesTest.fullTest()", "testcase": true, "constructor": false, "invocations": ["readFileContent"]}, "focal_class": {"identifier": "Utilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Utilities.class) ;", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Utilities.class)", "var_name": "LOGGER"}, {"original_string": "private static AtomicLong TEMP_FILE_SUFFIX = new AtomicLong() ;", "modifier": "private static", "type": "AtomicLong", "declarator": "TEMP_FILE_SUFFIX = new AtomicLong()", "var_name": "TEMP_FILE_SUFFIX"}], "methods": [{"identifier": "Utilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utilities()", "full_signature": "private  Utilities()", "class_method_signature": "Utilities.Utilities()", "testcase": false, "constructor": true}, {"identifier": "generateTemporaryOutputDirectory", "parameters": "(final String generatorBuilderPath)", "modifiers": "public static", "return": "String", "signature": "String generateTemporaryOutputDirectory(final String generatorBuilderPath)", "full_signature": "public static String generateTemporaryOutputDirectory(final String generatorBuilderPath)", "class_method_signature": "Utilities.generateTemporaryOutputDirectory(final String generatorBuilderPath)", "testcase": false, "constructor": false}, {"identifier": "readFileContent", "parameters": "(final String filePath)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readFileContent(final String filePath)", "full_signature": "public static byte[] readFileContent(final String filePath)", "class_method_signature": "Utilities.readFileContent(final String filePath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bbva/kltt/apirest/core/web/Utilities.java"}, "focal_method": {"identifier": "readFileContent", "parameters": "(final String filePath)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] readFileContent(final String filePath) throws APIRestGeneratorException\n\t{\n\t\tPath path = null ;\n\t\t\n        if (filePath.toLowerCase().startsWith(ConstantsInput.SO_PATH_STRING_PREFIX))\n        {\n        \tpath = Paths.get(URI.create(filePath)) ;\n        }\n        else\n        {\n        \tpath = Paths.get(filePath, new String[0]) ;\n        }\n\t\t\n        byte[] fileContent = null ;\n        \n\t\tif (Files.exists(path, new LinkOption[0]))\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\tfileContent = FileUtils.readFileToByteArray(path.toFile()) ;\n\t\t\t} \n\t\t\tcatch (IOException ioException)\n\t\t\t{\n\t\t    \tfinal String errorString = \"IOException when reading the file '\" + filePath + \"': \" + ioException ;\n\t\t    \t\n\t\t    \tUtilities.LOGGER.error(errorString, ioException) ;\n\t\t    \tthrow new APIRestGeneratorException(errorString, ioException) ;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn fileContent ;\n\t}", "signature": "byte[] readFileContent(final String filePath)", "full_signature": "public static byte[] readFileContent(final String filePath)", "class_method_signature": "Utilities.readFileContent(final String filePath)", "testcase": false, "constructor": false, "invocations": ["startsWith", "toLowerCase", "get", "create", "get", "exists", "readFileToByteArray", "toFile", "error"]}, "repository": {"repo_id": 74581177, "url": "https://github.com/BBVA-CIB/APIRestGenerator", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 147303, "license": "licensed"}}