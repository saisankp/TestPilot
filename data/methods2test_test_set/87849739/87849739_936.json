{"test_class": {"identifier": "ImmutableMessageHeadersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MessageDirection DIRECTION = MessageDirection.TO;", "modifier": "private static final", "type": "MessageDirection", "declarator": "DIRECTION = MessageDirection.TO", "var_name": "DIRECTION"}, {"original_string": "private static final ThingId THING_ID = ThingId.of(\"test.ns\", \"theThingId\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"test.ns\", \"theThingId\")", "var_name": "THING_ID"}, {"original_string": "private static final String SUBJECT = KnownMessageSubjects.CLAIM_SUBJECT;", "modifier": "private static final", "type": "String", "declarator": "SUBJECT = KnownMessageSubjects.CLAIM_SUBJECT", "var_name": "SUBJECT"}, {"original_string": "private static final Collection<String>\n            AUTH_SUBJECTS_WITHOUT_DUPLICATES = Arrays.asList(\"test:JohnOldman\", \"test:FrankGrimes\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "AUTH_SUBJECTS_WITHOUT_DUPLICATES = Arrays.asList(\"test:JohnOldman\", \"test:FrankGrimes\")", "var_name": "AUTH_SUBJECTS_WITHOUT_DUPLICATES"}, {"original_string": "private static final AuthorizationContext AUTH_CONTEXT_WITHOUT_DUPLICATES =\n            AuthorizationContext.newInstance(DittoAuthorizationContextType.UNSPECIFIED,\n                    AUTH_SUBJECTS_WITHOUT_DUPLICATES.stream()\n                            .map(AuthorizationSubject::newInstance)\n                            .collect(Collectors.toList()));", "modifier": "private static final", "type": "AuthorizationContext", "declarator": "AUTH_CONTEXT_WITHOUT_DUPLICATES =\n            AuthorizationContext.newInstance(DittoAuthorizationContextType.UNSPECIFIED,\n                    AUTH_SUBJECTS_WITHOUT_DUPLICATES.stream()\n                            .map(AuthorizationSubject::newInstance)\n                            .collect(Collectors.toList()))", "var_name": "AUTH_CONTEXT_WITHOUT_DUPLICATES"}, {"original_string": "private static final Collection<String> AUTH_SUBJECTS = Arrays.asList(\"test:JohnOldman\", \"test:FrankGrimes\", \"JohnOldman\", \"FrankGrimes\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "AUTH_SUBJECTS = Arrays.asList(\"test:JohnOldman\", \"test:FrankGrimes\", \"JohnOldman\", \"FrankGrimes\")", "var_name": "AUTH_SUBJECTS"}, {"original_string": "private static final AuthorizationContext AUTH_CONTEXT =\n            AuthorizationContext.newInstance(DittoAuthorizationContextType.UNSPECIFIED,\n                    AUTH_SUBJECTS.stream()\n                            .map(AuthorizationSubject::newInstance)\n                            .collect(Collectors.toList()));", "modifier": "private static final", "type": "AuthorizationContext", "declarator": "AUTH_CONTEXT =\n            AuthorizationContext.newInstance(DittoAuthorizationContextType.UNSPECIFIED,\n                    AUTH_SUBJECTS.stream()\n                            .map(AuthorizationSubject::newInstance)\n                            .collect(Collectors.toList()))", "var_name": "AUTH_CONTEXT"}, {"original_string": "private static final String KNOWN_CORRELATION_ID = \"knownCorrelationId\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_CORRELATION_ID = \"knownCorrelationId\"", "var_name": "KNOWN_CORRELATION_ID"}, {"original_string": "private static final JsonSchemaVersion KNOWN_SCHEMA_VERSION = JsonSchemaVersion.V_2;", "modifier": "private static final", "type": "JsonSchemaVersion", "declarator": "KNOWN_SCHEMA_VERSION = JsonSchemaVersion.V_2", "var_name": "KNOWN_SCHEMA_VERSION"}, {"original_string": "private static final AuthorizationSubject KNOWN_READ_SUBJECT = AuthorizationSubject.newInstance(\"knownReadSubject\");", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "KNOWN_READ_SUBJECT = AuthorizationSubject.newInstance(\"knownReadSubject\")", "var_name": "KNOWN_READ_SUBJECT"}, {"original_string": "private static final String KNOWN_CHANNEL = \"twin\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_CHANNEL = \"twin\"", "var_name": "KNOWN_CHANNEL"}, {"original_string": "private static final boolean KNOWN_RESPONSE_REQUIRED = true;", "modifier": "private static final", "type": "boolean", "declarator": "KNOWN_RESPONSE_REQUIRED = true", "var_name": "KNOWN_RESPONSE_REQUIRED"}, {"original_string": "private static final Collection<AuthorizationSubject> KNOWN_READ_SUBJECTS = Lists.list(KNOWN_READ_SUBJECT);", "modifier": "private static final", "type": "Collection<AuthorizationSubject>", "declarator": "KNOWN_READ_SUBJECTS = Lists.list(KNOWN_READ_SUBJECT)", "var_name": "KNOWN_READ_SUBJECTS"}, {"original_string": "private static final String FEATURE_ID = \"flux-condensator-0815\";", "modifier": "private static final", "type": "String", "declarator": "FEATURE_ID = \"flux-condensator-0815\"", "var_name": "FEATURE_ID"}, {"original_string": "private static final Duration TIMEOUT = Duration.ofSeconds(5);", "modifier": "private static final", "type": "Duration", "declarator": "TIMEOUT = Duration.ofSeconds(5)", "var_name": "TIMEOUT"}, {"original_string": "private static final String TIMESTAMP = \"2017-09-22T09:47:23+01:00\";", "modifier": "private static final", "type": "String", "declarator": "TIMESTAMP = \"2017-09-22T09:47:23+01:00\"", "var_name": "TIMESTAMP"}, {"original_string": "private static final HttpStatusCode STATUS_CODE = HttpStatusCode.OK;", "modifier": "private static final", "type": "HttpStatusCode", "declarator": "STATUS_CODE = HttpStatusCode.OK", "var_name": "STATUS_CODE"}, {"original_string": "private static final String CONTENT_TYPE = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/json\"", "var_name": "CONTENT_TYPE"}], "file": "model/messages/src/test/java/org/eclipse/ditto/model/messages/ImmutableMessageHeadersTest.java"}, "test_case": {"identifier": "getThingIdAlthoughItIsNotSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getThingIdAlthoughItIsNotSet() {\n        final MessageHeaders underTest = ImmutableMessageHeaders.of(DittoHeaders.empty());\n\n        assertThatExceptionOfType(IllegalStateException.class)\n                .isThrownBy(underTest::getThingEntityId)\n                .withMessage(\"MessageHeaders did not contain a value for key <%s>!\",\n                        MessageHeaderDefinition.THING_ID.getKey())\n                .withNoCause();\n    }", "signature": "void getThingIdAlthoughItIsNotSet()", "full_signature": "@Test public void getThingIdAlthoughItIsNotSet()", "class_method_signature": "ImmutableMessageHeadersTest.getThingIdAlthoughItIsNotSet()", "testcase": true, "constructor": false, "invocations": ["of", "empty", "withNoCause", "withMessage", "isThrownBy", "assertThatExceptionOfType", "getKey"]}, "focal_class": {"identifier": "ImmutableMessageHeaders", "superclass": "extends AbstractDittoHeaders", "interfaces": "implements MessageHeaders", "fields": [], "methods": [{"identifier": "ImmutableMessageHeaders", "parameters": "(final Map<String, String> theDittoHeaders)", "modifiers": "private", "return": "", "signature": " ImmutableMessageHeaders(final Map<String, String> theDittoHeaders)", "full_signature": "private  ImmutableMessageHeaders(final Map<String, String> theDittoHeaders)", "class_method_signature": "ImmutableMessageHeaders.ImmutableMessageHeaders(final Map<String, String> theDittoHeaders)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "static", "return": "MessageHeaders", "signature": "MessageHeaders of(final DittoHeaders dittoHeaders)", "full_signature": "static MessageHeaders of(final DittoHeaders dittoHeaders)", "class_method_signature": "ImmutableMessageHeaders.of(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getDirection", "parameters": "()", "modifiers": "@Override public", "return": "MessageDirection", "signature": "MessageDirection getDirection()", "full_signature": "@Override public MessageDirection getDirection()", "class_method_signature": "ImmutableMessageHeaders.getDirection()", "testcase": false, "constructor": false}, {"identifier": "newIllegalStateException", "parameters": "(final HeaderDefinition definition)", "modifiers": "private static", "return": "IllegalStateException", "signature": "IllegalStateException newIllegalStateException(final HeaderDefinition definition)", "full_signature": "private static IllegalStateException newIllegalStateException(final HeaderDefinition definition)", "class_method_signature": "ImmutableMessageHeaders.newIllegalStateException(final HeaderDefinition definition)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSubject()", "full_signature": "@Override public String getSubject()", "class_method_signature": "ImmutableMessageHeaders.getSubject()", "testcase": false, "constructor": false}, {"identifier": "getThingEntityId", "parameters": "()", "modifiers": "@Override public", "return": "ThingId", "signature": "ThingId getThingEntityId()", "full_signature": "@Override public ThingId getThingEntityId()", "class_method_signature": "ImmutableMessageHeaders.getThingEntityId()", "testcase": false, "constructor": false}, {"identifier": "getFeatureId", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getFeatureId()", "full_signature": "@Override public Optional<String> getFeatureId()", "class_method_signature": "ImmutableMessageHeaders.getFeatureId()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "@Override public", "return": "Optional<OffsetDateTime>", "signature": "Optional<OffsetDateTime> getTimestamp()", "full_signature": "@Override public Optional<OffsetDateTime> getTimestamp()", "class_method_signature": "ImmutableMessageHeaders.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getStatusCode", "parameters": "()", "modifiers": "@Override public", "return": "Optional<HttpStatusCode>", "signature": "Optional<HttpStatusCode> getStatusCode()", "full_signature": "@Override public Optional<HttpStatusCode> getStatusCode()", "class_method_signature": "ImmutableMessageHeaders.getStatusCode()", "testcase": false, "constructor": false}, {"identifier": "getSpecificDefinitionByKey", "parameters": "(final CharSequence key)", "modifiers": "@Override protected", "return": "Optional<HeaderDefinition>", "signature": "Optional<HeaderDefinition> getSpecificDefinitionByKey(final CharSequence key)", "full_signature": "@Override protected Optional<HeaderDefinition> getSpecificDefinitionByKey(final CharSequence key)", "class_method_signature": "ImmutableMessageHeaders.getSpecificDefinitionByKey(final CharSequence key)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableMessageHeaders.toString()", "testcase": false, "constructor": false}], "file": "model/messages/src/main/java/org/eclipse/ditto/model/messages/ImmutableMessageHeaders.java"}, "focal_method": {"identifier": "of", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "static", "return": "MessageHeaders", "body": "static MessageHeaders of(final DittoHeaders dittoHeaders) {\n        return new ImmutableMessageHeaders(checkNotNull(dittoHeaders, \"Ditto Headers\"));\n    }", "signature": "MessageHeaders of(final DittoHeaders dittoHeaders)", "full_signature": "static MessageHeaders of(final DittoHeaders dittoHeaders)", "class_method_signature": "ImmutableMessageHeaders.of(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}