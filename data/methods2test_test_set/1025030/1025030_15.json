{"test_class": {"identifier": "MigrationPathsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CONFIGURATION_FILE_NAME = \"IF/generic/test/resources/GenericWrapperConfigFileExample.xml\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONFIGURATION_FILE_NAME = \"IF/generic/test/resources/GenericWrapperConfigFileExample.xml\"", "var_name": "TEST_CONFIGURATION_FILE_NAME"}, {"original_string": "private final MigrationPaths migrationPathsToTest;", "modifier": "private final", "type": "MigrationPaths", "declarator": "migrationPathsToTest", "var_name": "migrationPathsToTest"}], "file": "framework/generic/src/test/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/MigrationPathsTest.java"}, "test_case": {"identifier": "testGetMigrationPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMigrationPath() throws Exception {\n\n        URI inputFormat = new URI(\"info:test/lowercase\");\n        URI outputFormat = new URI(\"info:test/uppercase\");\n        this.migrationPathsToTest.getMigrationPath(inputFormat, outputFormat);\n\n        // Verify that the opposite path does not exist in the configuration.\n        genericGetInstanceFailCheck(outputFormat, inputFormat);\n\n        inputFormat = new URI(\"info:test/foo\");\n        outputFormat = new URI(\"info:test/bar\");\n        this.migrationPathsToTest.getMigrationPath(inputFormat, outputFormat);\n\n        // Verify that the opposite path does not exist in the configuration.\n        genericGetInstanceFailCheck(outputFormat, inputFormat);\n    }", "signature": "void testGetMigrationPath()", "full_signature": "@Test public void testGetMigrationPath()", "class_method_signature": "MigrationPathsTest.testGetMigrationPath()", "testcase": true, "constructor": false, "invocations": ["getMigrationPath", "genericGetInstanceFailCheck", "getMigrationPath", "genericGetInstanceFailCheck"]}, "focal_class": {"identifier": "MigrationPaths", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HashMap<PathKey, MigrationPath> migrationPaths;", "modifier": "private", "type": "HashMap<PathKey, MigrationPath>", "declarator": "migrationPaths", "var_name": "migrationPaths"}], "methods": [{"identifier": "MigrationPaths", "parameters": "()", "modifiers": "", "return": "", "signature": " MigrationPaths()", "full_signature": "  MigrationPaths()", "class_method_signature": "MigrationPaths.MigrationPaths()", "testcase": false, "constructor": true}, {"identifier": "getMigrationPath", "parameters": "(URI inputFormat, URI outputFormat)", "modifiers": "", "return": "MigrationPath", "signature": "MigrationPath getMigrationPath(URI inputFormat, URI outputFormat)", "full_signature": " MigrationPath getMigrationPath(URI inputFormat, URI outputFormat)", "class_method_signature": "MigrationPaths.getMigrationPath(URI inputFormat, URI outputFormat)", "testcase": false, "constructor": false}, {"identifier": "addMigrationPath", "parameters": "(MigrationPath migrationPath)", "modifiers": "", "return": "MigrationPath", "signature": "MigrationPath addMigrationPath(MigrationPath migrationPath)", "full_signature": " MigrationPath addMigrationPath(MigrationPath migrationPath)", "class_method_signature": "MigrationPaths.addMigrationPath(MigrationPath migrationPath)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(List<MigrationPath> migrationPaths)", "modifiers": "", "return": "void", "signature": "void addAll(List<MigrationPath> migrationPaths)", "full_signature": " void addAll(List<MigrationPath> migrationPaths)", "class_method_signature": "MigrationPaths.addAll(List<MigrationPath> migrationPaths)", "testcase": false, "constructor": false}, {"identifier": "getAllMigrationPaths", "parameters": "()", "modifiers": "", "return": "Collection<MigrationPath>", "signature": "Collection<MigrationPath> getAllMigrationPaths()", "full_signature": " Collection<MigrationPath> getAllMigrationPaths()", "class_method_signature": "MigrationPaths.getAllMigrationPaths()", "testcase": false, "constructor": false}, {"identifier": "getInputFormatURIs", "parameters": "()", "modifiers": "", "return": "Set<URI>", "signature": "Set<URI> getInputFormatURIs()", "full_signature": " Set<URI> getInputFormatURIs()", "class_method_signature": "MigrationPaths.getInputFormatURIs()", "testcase": false, "constructor": false}, {"identifier": "getOutputFormatURIs", "parameters": "()", "modifiers": "", "return": "Set<URI>", "signature": "Set<URI> getOutputFormatURIs()", "full_signature": " Set<URI> getOutputFormatURIs()", "class_method_signature": "MigrationPaths.getOutputFormatURIs()", "testcase": false, "constructor": false}], "file": "framework/generic/src/main/java/eu/planets_project/ifr/core/services/migration/genericwrapper2/MigrationPaths.java"}, "focal_method": {"identifier": "getMigrationPath", "parameters": "(URI inputFormat, URI outputFormat)", "modifiers": "", "return": "MigrationPath", "body": "MigrationPath getMigrationPath(URI inputFormat, URI outputFormat)\n\t    throws NoSuchPathException {\n\n\tfinal PathKey pathKey = new PathKey(inputFormat, outputFormat);\n\tfinal MigrationPath migrationPath = this.migrationPaths.get(pathKey);\n\tif (migrationPath == null) {\n\t    throw new NoSuchPathException(\n\t\t    \"No migration path found for input format URI=\\\"\"\n\t\t\t    + inputFormat + \"\\\" and output format URI=\\\"\"\n\t\t\t    + outputFormat + \"\\\"\");\n\t}\n\treturn migrationPath;\n    }", "signature": "MigrationPath getMigrationPath(URI inputFormat, URI outputFormat)", "full_signature": " MigrationPath getMigrationPath(URI inputFormat, URI outputFormat)", "class_method_signature": "MigrationPaths.getMigrationPath(URI inputFormat, URI outputFormat)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}