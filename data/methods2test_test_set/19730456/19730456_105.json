{"test_class": {"identifier": "TransactionStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/db/TransactionStoreTest.java"}, "test_case": {"identifier": "simpleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleTest() {\n        String contractSrc =\n                \"contract Adder {\" +\n                \"  function add(int a, int b) returns (int) {return a + b;}\" +\n                \"}\";\n        HashMapDB<byte[]> txDb = new HashMapDB<>();\n\n        StandaloneBlockchain bc = new StandaloneBlockchain();\n        bc.getBlockchain().withTransactionStore(new TransactionStore(txDb));\n        SolidityContract contract = bc.submitNewContract(contractSrc);\n        bc.createBlock();\n        contract.callFunction(\"add\", 555, 222);\n        Block b2 = bc.createBlock();\n        contract.callFunction(\"add\", 333, 333);\n        Block b3 = bc.createBlock();\n        Transaction tx1 = b2.getTransactionsList().get(0);\n        TransactionInfo tx1Info = bc.getBlockchain().getTransactionInfo(tx1.getHash());\n        byte[] executionResult = tx1Info.getReceipt().getExecutionResult();\n        Assert.assertArrayEquals(DataWord.of(777).getData(), executionResult);\n\n        System.out.println(txDb.keys().size());\n        bc.getBlockchain().flush();\n        System.out.println(txDb.keys().size());\n\n        TransactionStore txStore = new TransactionStore(txDb);\n        TransactionInfo tx1Info_ = txStore.get(tx1.getHash()).get(0);\n        executionResult = tx1Info_.getReceipt().getExecutionResult();\n        Assert.assertArrayEquals(DataWord.of(777).getData(), executionResult);\n\n        TransactionInfo highIndex = new TransactionInfo(tx1Info.getReceipt(), tx1Info.getBlockHash(), 255);\n        TransactionInfo highIndexCopy = new TransactionInfo(highIndex.getEncoded());\n        Assert.assertArrayEquals(highIndex.getBlockHash(), highIndexCopy.getBlockHash());\n        Assert.assertEquals(highIndex.getIndex(), highIndexCopy.getIndex());\n    }", "signature": "void simpleTest()", "full_signature": "@Test public void simpleTest()", "class_method_signature": "TransactionStoreTest.simpleTest()", "testcase": true, "constructor": false, "invocations": ["withTransactionStore", "getBlockchain", "submitNewContract", "createBlock", "callFunction", "createBlock", "callFunction", "createBlock", "get", "getTransactionsList", "getTransactionInfo", "getBlockchain", "getHash", "getExecutionResult", "getReceipt", "assertArrayEquals", "getData", "of", "println", "size", "keys", "flush", "getBlockchain", "println", "size", "keys", "get", "get", "getHash", "getExecutionResult", "getReceipt", "assertArrayEquals", "getData", "of", "getReceipt", "getBlockHash", "getEncoded", "assertArrayEquals", "getBlockHash", "getBlockHash", "assertEquals", "getIndex", "getIndex"]}, "focal_class": {"identifier": "TransactionStore", "superclass": "extends ObjectDataSource<List<TransactionInfo>>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"db\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"db\")", "var_name": "logger"}, {"original_string": "private final LRUMap<ByteArrayWrapper, Object> lastSavedTxHash = new LRUMap<>(5000);", "modifier": "private final", "type": "LRUMap<ByteArrayWrapper, Object>", "declarator": "lastSavedTxHash = new LRUMap<>(5000)", "var_name": "lastSavedTxHash"}, {"original_string": "private final Object object = new Object();", "modifier": "private final", "type": "Object", "declarator": "object = new Object()", "var_name": "object"}, {"original_string": "private final static Serializer<List<TransactionInfo>, byte[]> serializer =\n            new Serializer<List<TransactionInfo>, byte[]>() {\n        @Override\n        public byte[] serialize(List<TransactionInfo> object) {\n            byte[][] txsRlp = new byte[object.size()][];\n            for (int i = 0; i < txsRlp.length; i++) {\n                txsRlp[i] = object.get(i).getEncoded();\n            }\n            return RLP.encodeList(txsRlp);\n        }\n\n        @Override\n        public List<TransactionInfo> deserialize(byte[] stream) {\n            try {\n                if (stream == null) return null;\n                RLPList infoList = RLP.unwrapList(stream);\n                List<TransactionInfo> ret = new ArrayList<>();\n                for (int i = 0; i < infoList.size(); i++) {\n                    ret.add(new TransactionInfo(infoList.get(i).getRLPData()));\n                }\n                return ret;\n            } catch (Exception e) {\n                // fallback to previous DB version\n                return Collections.singletonList(new TransactionInfo(stream));\n            }\n        }\n    };", "modifier": "private final static", "type": "Serializer<List<TransactionInfo>, byte[]>", "declarator": "serializer =\n            new Serializer<List<TransactionInfo>, byte[]>() {\n        @Override\n        public byte[] serialize(List<TransactionInfo> object) {\n            byte[][] txsRlp = new byte[object.size()][];\n            for (int i = 0; i < txsRlp.length; i++) {\n                txsRlp[i] = object.get(i).getEncoded();\n            }\n            return RLP.encodeList(txsRlp);\n        }\n\n        @Override\n        public List<TransactionInfo> deserialize(byte[] stream) {\n            try {\n                if (stream == null) return null;\n                RLPList infoList = RLP.unwrapList(stream);\n                List<TransactionInfo> ret = new ArrayList<>();\n                for (int i = 0; i < infoList.size(); i++) {\n                    ret.add(new TransactionInfo(infoList.get(i).getRLPData()));\n                }\n                return ret;\n            } catch (Exception e) {\n                // fallback to previous DB version\n                return Collections.singletonList(new TransactionInfo(stream));\n            }\n        }\n    }", "var_name": "serializer"}], "methods": [{"identifier": "put", "parameters": "(TransactionInfo tx)", "modifiers": "public", "return": "boolean", "signature": "boolean put(TransactionInfo tx)", "full_signature": "public boolean put(TransactionInfo tx)", "class_method_signature": "TransactionStore.put(TransactionInfo tx)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] txHash, byte[] blockHash)", "modifiers": "public", "return": "TransactionInfo", "signature": "TransactionInfo get(byte[] txHash, byte[] blockHash)", "full_signature": "public TransactionInfo get(byte[] txHash, byte[] blockHash)", "class_method_signature": "TransactionStore.get(byte[] txHash, byte[] blockHash)", "testcase": false, "constructor": false}, {"identifier": "TransactionStore", "parameters": "(Source<byte[], byte[]> src)", "modifiers": "public", "return": "", "signature": " TransactionStore(Source<byte[], byte[]> src)", "full_signature": "public  TransactionStore(Source<byte[], byte[]> src)", "class_method_signature": "TransactionStore.TransactionStore(Source<byte[], byte[]> src)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void close()", "full_signature": "@PreDestroy public void close()", "class_method_signature": "TransactionStore.close()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/db/TransactionStore.java"}, "focal_method": {"identifier": "get", "parameters": "(byte[] txHash, byte[] blockHash)", "modifiers": "public", "return": "TransactionInfo", "body": "public TransactionInfo get(byte[] txHash, byte[] blockHash) {\n        List<TransactionInfo> existingInfos = get(txHash);\n        for (TransactionInfo info : existingInfos) {\n            if (FastByteComparisons.equal(info.getBlockHash(), blockHash)) {\n                return info;\n            }\n        }\n        return null;\n    }", "signature": "TransactionInfo get(byte[] txHash, byte[] blockHash)", "full_signature": "public TransactionInfo get(byte[] txHash, byte[] blockHash)", "class_method_signature": "TransactionStore.get(byte[] txHash, byte[] blockHash)", "testcase": false, "constructor": false, "invocations": ["get", "equal", "getBlockHash"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}