{"test_class": {"identifier": "AutocorrelationTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/stats/AutocorrelationTest.java"}, "test_case": {"identifier": "testFindPeak", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindPeak() throws Exception {\n        double[] test_correlations = {0, 0.9, 0.6, 0.7, 0.8, 0.5, 0, 0.1, 0.2, -0.5, -0.1, 0, -0.5, 0.8, 0, 0.8, 0.7, 0.6, 0.5, 0.4, 0.5};\n        Autocorrelation acf = new Autocorrelation(test_correlations.length, 0);\n        acf.correlations = new double[test_correlations.length];\n        for (int i = 0; i < test_correlations.length; i ++) { acf.correlations[i] = test_correlations[i]; }\n        List<Integer> peaks = acf.findPeaks();\n        int[] expected_peaks = {4, 13, 15};\n        assertEquals(expected_peaks.length, peaks.size());\n        for (int i = 0; i < peaks.size(); i ++) {\n            assertTrue(expected_peaks[i] == peaks.get(i));\n        }\n    }", "signature": "void testFindPeak()", "full_signature": "@Test public void testFindPeak()", "class_method_signature": "AutocorrelationTest.testFindPeak()", "testcase": true, "constructor": false, "invocations": ["findPeaks", "assertEquals", "size", "size", "assertTrue", "get"]}, "focal_class": {"identifier": "Autocorrelation", "superclass": "", "interfaces": "", "fields": [{"original_string": "public double[] correlations;", "modifier": "public", "type": "double[]", "declarator": "correlations", "var_name": "correlations"}, {"original_string": "public double maxACF = 0;", "modifier": "public", "type": "double", "declarator": "maxACF = 0", "var_name": "maxACF"}, {"original_string": "private FastFourierTransformer fftTran = new FastFourierTransformer(DftNormalization.STANDARD);", "modifier": "private", "type": "FastFourierTransformer", "declarator": "fftTran = new FastFourierTransformer(DftNormalization.STANDARD)", "var_name": "fftTran"}, {"original_string": "private double ACF_THRESH = 0.2;", "modifier": "private", "type": "double", "declarator": "ACF_THRESH = 0.2", "var_name": "ACF_THRESH"}, {"original_string": "private int metricIdx = 1;", "modifier": "private", "type": "int", "declarator": "metricIdx = 1", "var_name": "metricIdx"}, {"original_string": "private int maxLag;", "modifier": "private", "type": "int", "declarator": "maxLag", "var_name": "maxLag"}], "methods": [{"identifier": "Autocorrelation", "parameters": "(int maxLag, int metricIdx)", "modifiers": "public", "return": "", "signature": " Autocorrelation(int maxLag, int metricIdx)", "full_signature": "public  Autocorrelation(int maxLag, int metricIdx)", "class_method_signature": "Autocorrelation.Autocorrelation(int maxLag, int metricIdx)", "testcase": false, "constructor": true}, {"identifier": "setMaxLag", "parameters": "(int lag)", "modifiers": "public", "return": "void", "signature": "void setMaxLag(int lag)", "full_signature": "public void setMaxLag(int lag)", "class_method_signature": "Autocorrelation.setMaxLag(int lag)", "testcase": false, "constructor": false}, {"identifier": "setCorrelationThreshold", "parameters": "(double thresh)", "modifiers": "public", "return": "void", "signature": "void setCorrelationThreshold(double thresh)", "full_signature": "public void setCorrelationThreshold(double thresh)", "class_method_signature": "Autocorrelation.setCorrelationThreshold(double thresh)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(double[] metrics)", "modifiers": "private", "return": "double", "signature": "double mean(double[] metrics)", "full_signature": "private double mean(double[] metrics)", "class_method_signature": "Autocorrelation.mean(double[] metrics)", "testcase": false, "constructor": false}, {"identifier": "stripDatum", "parameters": "(List<Datum> datum)", "modifiers": "private", "return": "double[]", "signature": "double[] stripDatum(List<Datum> datum)", "full_signature": "private double[] stripDatum(List<Datum> datum)", "class_method_signature": "Autocorrelation.stripDatum(List<Datum> datum)", "testcase": false, "constructor": false}, {"identifier": "formatData", "parameters": "(List<Datum> data)", "modifiers": "private", "return": "double[]", "signature": "double[] formatData(List<Datum> data)", "full_signature": "private double[] formatData(List<Datum> data)", "class_method_signature": "Autocorrelation.formatData(List<Datum> data)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(List<Datum> data)", "modifiers": "public", "return": "void", "signature": "void evaluate(List<Datum> data)", "full_signature": "public void evaluate(List<Datum> data)", "class_method_signature": "Autocorrelation.evaluate(List<Datum> data)", "testcase": false, "constructor": false}, {"identifier": "findPeaks", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> findPeaks()", "full_signature": "public List<Integer> findPeaks()", "class_method_signature": "Autocorrelation.findPeaks()", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/stats/Autocorrelation.java"}, "focal_method": {"identifier": "findPeaks", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "body": "public List<Integer> findPeaks() {\n        List<Integer> peaks = new ArrayList<>();\n        int max = 1;\n        maxACF = 0;\n        if (correlations.length > 1) {\n            boolean positive = (correlations[1] > correlations[0]);\n            for (int i = 2; i < correlations.length; i++) {\n                if (!positive && correlations[i] > correlations[i - 1]) {\n                    max = i;\n                    positive = !positive;\n                } else if (positive && correlations[i] > correlations[max]) {\n                    max = i;\n                } else if (positive && correlations[i] < correlations[i - 1]) {\n                    if (max > 1 && correlations[max] > ACF_THRESH) {\n                        peaks.add(max);\n                        if (correlations[max] > maxACF) { maxACF = correlations[max]; }\n                    }\n                    positive = !positive;\n                }\n            }\n        }\n        return peaks;\n    }", "signature": "List<Integer> findPeaks()", "full_signature": "public List<Integer> findPeaks()", "class_method_signature": "Autocorrelation.findPeaks()", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}