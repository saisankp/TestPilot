{"test_class": {"identifier": "DSpaceCSVTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(DSpaceCSVTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(DSpaceCSVTest.class)", "var_name": "log"}], "file": "dspace-api/src/test/java/org/dspace/app/bulkedit/DSpaceCSVTest.java"}, "test_case": {"identifier": "testDSpaceCSV", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public  void testDSpaceCSV()\n    {\n        try\n        {\n            // Test the CSV parsing\n            String[] csv = {\"id,collection,\\\"dc.title[en]\\\",dc.contributor.author,dc.description.abstract\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,Easy line,\\\"Lewis, Stuart\\\",A nice short abstract\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,Two authors,\\\"Lewis, Stuart||Bloggs, Joe\\\",Two people wrote this item\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,Three authors,\\\"Lewis, Stuart||Bloggs, Joe||Loaf, Meat\\\",Three people wrote this item\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,\\\"Two line\\n\\ntitle\\\",\\\"Lewis, Stuart\\\",abstract\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,\\\"Empty lines\\n\\nshould work too (DS-3245).\\\",\\\"Lewis, Stuart\\\",abstract\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,\\\"\\\"\\\"Embedded quotes\\\"\\\" here\\\",\\\"Lewis, Stuart\\\",\\\"Abstract with\\ntwo\\nnew lines\\\"\",\n                            \"+,56599ad5-c7d2-4ac3-8354-a1f277d5a31f,\\\"\\\"\\\"Unbalanced embedded\\\"\\\" quotes\\\"\\\" here\\\",\\\"Lewis, Stuart\\\",\\\"Abstract with\\ntwo\\nnew lines\\\"\",};\n            // Write the string to a file\n            String filename = \"test.csv\";\n            BufferedWriter out = new BufferedWriter(\n                                 new OutputStreamWriter(\n                                 new FileOutputStream(filename), \"UTF-8\"));\n            for (String csvLine : csv) {\n                out.write(csvLine + \"\\n\");\n            }\n            out.flush();\n            out.close();\n            out = null;\n\n            // Test the CSV parsing was OK\n            DSpaceCSV dcsv = new DSpaceCSV(new File(filename), context);\n            String[] lines = dcsv.getCSVLinesAsStringArray();\n            assertThat(\"testDSpaceCSV Good CSV\", lines.length, equalTo(8));\n\n            // Check the new lines are OK\n            List<DSpaceCSVLine> csvLines = dcsv.getCSVLines();\n            DSpaceCSVLine line = csvLines.get(5);\n            List<String> value = new ArrayList<String>();\n            value.add(\"Abstract with\\ntwo\\nnew lines\");    \n            assertThat(\"testDSpaceCSV New lines\", line.valueToCSV(value, dcsv.valueSeparator),\n                                                  equalTo(\"\\\"Abstract with\\ntwo\\nnew lines\\\"\"));\n            line = null;\n\n            // Test the CSV parsing with a bad heading element value\n            csv[0] = \"id,collection,\\\"dc.title[en]\\\",dc.contributor.foobar[en-US],dc.description.abstract\";\n            // Write the string to a file\n            filename = \"test.csv\";\n            out = new BufferedWriter(\n                     new OutputStreamWriter(\n                     new FileOutputStream(filename), \"UTF-8\"));\n            for (String csvLine : csv) {\n                out.write(csvLine + \"\\n\");\n            }\n            out.flush();\n            out.close();\n            out = null;\n\n            // Test the CSV parsing was OK\n            try\n            {\n                dcsv = new DSpaceCSV(new File(filename), context);\n                lines = dcsv.getCSVLinesAsStringArray();\n\n                fail(\"An exception should have been thrown due to bad CSV\");\n            }\n            catch (Exception e)\n            {\n                assertThat(\"testDSpaceCSV Bad heading CSV\", e.getMessage(), equalTo(\"Unknown metadata element in column 4: dc.contributor.foobar\"));\n            }\n            lines = dcsv.getCSVLinesAsStringArray();\n            assertThat(\"testDSpaceCSV Good CSV\", lines.length, equalTo(8));\n\n\n            // Test the CSV parsing with a bad heading schema value\n            csv[0] = \"id,collection,\\\"dcdc.title[en]\\\",dc.contributor[en-US],dc.description.abstract\";\n            // Write the string to a file\n            filename = \"test.csv\";\n            out = new BufferedWriter(\n                     new OutputStreamWriter(\n                     new FileOutputStream(filename), \"UTF-8\"));\n            for (String csvLine : csv) {\n                out.write(csvLine + \"\\n\");\n            }\n            out.flush();\n            out.close();\n            out = null;\n\n            // Test the CSV parsing was OK\n            try\n            {\n                dcsv = new DSpaceCSV(new File(filename), context);\n                lines = dcsv.getCSVLinesAsStringArray();\n\n                fail(\"An exception should have been thrown due to bad CSV\");\n            }\n            catch (Exception e)\n            {\n                assertThat(\"testDSpaceCSV Bad heading CSV\", e.getMessage(), equalTo(\"Unknown metadata schema in column 3: dcdc.title\"));\n            }\n\n            // Delete the test file\n            File toDelete = new File(filename);\n            toDelete.delete();\n            toDelete = null;\n            \n            // Nullify resources so JUnit will clean them up\n            dcsv = null;\n            lines = null;\n        }\n        catch (Exception ex) {\n            log.error(\"IO Error while creating test CSV file\", ex);\n            fail(\"IO Error while creating test CSV file\");\n        }\n    }", "signature": "void testDSpaceCSV()", "full_signature": "@Test public void testDSpaceCSV()", "class_method_signature": "DSpaceCSVTest.testDSpaceCSV()", "testcase": true, "constructor": false, "invocations": ["write", "flush", "close", "getCSVLinesAsStringArray", "assertThat", "equalTo", "getCSVLines", "get", "add", "assertThat", "valueToCSV", "equalTo", "write", "flush", "close", "getCSVLinesAsStringArray", "fail", "assertThat", "getMessage", "equalTo", "getCSVLinesAsStringArray", "assertThat", "equalTo", "write", "flush", "close", "getCSVLinesAsStringArray", "fail", "assertThat", "getMessage", "equalTo", "delete", "error", "fail"]}, "focal_class": {"identifier": "DSpaceCSV", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "protected List<String> headings;", "modifier": "protected", "type": "List<String>", "declarator": "headings", "var_name": "headings"}, {"original_string": "protected List<DSpaceCSVLine> lines;", "modifier": "protected", "type": "List<DSpaceCSVLine>", "declarator": "lines", "var_name": "lines"}, {"original_string": "protected int counter;", "modifier": "protected", "type": "int", "declarator": "counter", "var_name": "counter"}, {"original_string": "protected String valueSeparator;", "modifier": "protected", "type": "String", "declarator": "valueSeparator", "var_name": "valueSeparator"}, {"original_string": "protected String escapedValueSeparator;", "modifier": "protected", "type": "String", "declarator": "escapedValueSeparator", "var_name": "escapedValueSeparator"}, {"original_string": "protected String fieldSeparator;", "modifier": "protected", "type": "String", "declarator": "fieldSeparator", "var_name": "fieldSeparator"}, {"original_string": "protected String escapedFieldSeparator;", "modifier": "protected", "type": "String", "declarator": "escapedFieldSeparator", "var_name": "escapedFieldSeparator"}, {"original_string": "protected String authoritySeparator;", "modifier": "protected", "type": "String", "declarator": "authoritySeparator", "var_name": "authoritySeparator"}, {"original_string": "protected String escapedAuthoritySeparator;", "modifier": "protected", "type": "String", "declarator": "escapedAuthoritySeparator", "var_name": "escapedAuthoritySeparator"}, {"original_string": "protected transient final ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected transient final", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected transient final MetadataSchemaService metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService();", "modifier": "protected transient final", "type": "MetadataSchemaService", "declarator": "metadataSchemaService = ContentServiceFactory.getInstance().getMetadataSchemaService()", "var_name": "metadataSchemaService"}, {"original_string": "protected transient final MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();", "modifier": "protected transient final", "type": "MetadataFieldService", "declarator": "metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService()", "var_name": "metadataFieldService"}, {"original_string": "protected transient final AuthorityValueService authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();", "modifier": "protected transient final", "type": "AuthorityValueService", "declarator": "authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService()", "var_name": "authorityValueService"}, {"original_string": "protected boolean exportAll;", "modifier": "protected", "type": "boolean", "declarator": "exportAll", "var_name": "exportAll"}, {"original_string": "protected Map<String, String> ignore;", "modifier": "protected", "type": "Map<String, String>", "declarator": "ignore", "var_name": "ignore"}], "methods": [{"identifier": "DSpaceCSV", "parameters": "(boolean exportAll)", "modifiers": "public", "return": "", "signature": " DSpaceCSV(boolean exportAll)", "full_signature": "public  DSpaceCSV(boolean exportAll)", "class_method_signature": "DSpaceCSV.DSpaceCSV(boolean exportAll)", "testcase": false, "constructor": true}, {"identifier": "DSpaceCSV", "parameters": "(File f, Context c)", "modifiers": "public", "return": "", "signature": " DSpaceCSV(File f, Context c)", "full_signature": "public  DSpaceCSV(File f, Context c)", "class_method_signature": "DSpaceCSV.DSpaceCSV(File f, Context c)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void init()", "full_signature": "protected void init()", "class_method_signature": "DSpaceCSV.init()", "testcase": false, "constructor": false}, {"identifier": "hasActions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasActions()", "full_signature": "public boolean hasActions()", "class_method_signature": "DSpaceCSV.hasActions()", "testcase": false, "constructor": false}, {"identifier": "setValueSeparator", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setValueSeparator()", "full_signature": "private void setValueSeparator()", "class_method_signature": "DSpaceCSV.setValueSeparator()", "testcase": false, "constructor": false}, {"identifier": "setFieldSeparator", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setFieldSeparator()", "full_signature": "private void setFieldSeparator()", "class_method_signature": "DSpaceCSV.setFieldSeparator()", "testcase": false, "constructor": false}, {"identifier": "setAuthoritySeparator", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setAuthoritySeparator()", "full_signature": "private void setAuthoritySeparator()", "class_method_signature": "DSpaceCSV.setAuthoritySeparator()", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(Item i)", "modifiers": "public final", "return": "void", "signature": "void addItem(Item i)", "full_signature": "public final void addItem(Item i)", "class_method_signature": "DSpaceCSV.addItem(Item i)", "testcase": false, "constructor": false}, {"identifier": "addItem", "parameters": "(String line)", "modifiers": "public final", "return": "void", "signature": "void addItem(String line)", "full_signature": "public final void addItem(String line)", "class_method_signature": "DSpaceCSV.addItem(String line)", "testcase": false, "constructor": false}, {"identifier": "getCSVLines", "parameters": "()", "modifiers": "public final", "return": "List<DSpaceCSVLine>", "signature": "List<DSpaceCSVLine> getCSVLines()", "full_signature": "public final List<DSpaceCSVLine> getCSVLines()", "class_method_signature": "DSpaceCSV.getCSVLines()", "testcase": false, "constructor": false}, {"identifier": "getCSVLinesAsStringArray", "parameters": "()", "modifiers": "public final", "return": "String[]", "signature": "String[] getCSVLinesAsStringArray()", "full_signature": "public final String[] getCSVLinesAsStringArray()", "class_method_signature": "DSpaceCSV.getCSVLinesAsStringArray()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(String filename)", "modifiers": "public final", "return": "void", "signature": "void save(String filename)", "full_signature": "public final void save(String filename)", "class_method_signature": "DSpaceCSV.save(String filename)", "testcase": false, "constructor": false}, {"identifier": "okToExport", "parameters": "(MetadataField md)", "modifiers": "protected", "return": "boolean", "signature": "boolean okToExport(MetadataField md)", "full_signature": "protected boolean okToExport(MetadataField md)", "class_method_signature": "DSpaceCSV.okToExport(MetadataField md)", "testcase": false, "constructor": false}, {"identifier": "getHeadings", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getHeadings()", "full_signature": "public List<String> getHeadings()", "class_method_signature": "DSpaceCSV.getHeadings()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "DSpaceCSV.toString()", "testcase": false, "constructor": false}, {"identifier": "getAuthoritySeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAuthoritySeparator()", "full_signature": "public String getAuthoritySeparator()", "class_method_signature": "DSpaceCSV.getAuthoritySeparator()", "testcase": false, "constructor": false}, {"identifier": "getEscapedAuthoritySeparator", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEscapedAuthoritySeparator()", "full_signature": "public String getEscapedAuthoritySeparator()", "class_method_signature": "DSpaceCSV.getEscapedAuthoritySeparator()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java"}, "focal_method": {"identifier": "DSpaceCSV", "parameters": "(boolean exportAll)", "modifiers": "public", "return": "", "body": "public DSpaceCSV(boolean exportAll)\n    {\n        // Initialise the class\n        init();\n\n        // Store the exportAll setting\n        this.exportAll = exportAll;\n    }", "signature": " DSpaceCSV(boolean exportAll)", "full_signature": "public  DSpaceCSV(boolean exportAll)", "class_method_signature": "DSpaceCSV.DSpaceCSV(boolean exportAll)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}