{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindDataObjectsWithExplicitPagination", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataObjectsWithExplicitPagination() {\n        for (int i = 0; i < 8; ++i) {\n            DXRecord.newRecord().setProject(testProject).setName(\"foo\" + Integer.toString(i)).build();\n        }\n        List<DXRecord> outputRecords =\n                DXSearch.findDataObjects().inProject(testProject).nameMatchesGlob(\"foo*\")\n                        .withClassRecord().execute().asList();\n        Assert.assertEquals(8, outputRecords.size());\n\n        DXSearch.FindDataObjectsResult<DXRecord> result =\n                DXSearch.findDataObjects().inProject(testProject).nameMatchesGlob(\"foo*\").withClassRecord().execute();\n        FindResultPage<DXRecord> page = result.getFirstPage(3);\n        Assert.assertEquals(3, page.size());\n        Assert.assertEquals(true, page.hasNextPage());\n\n        Iterator<DXRecord> iter = page.iterator();\n        for (int i = 0; i < 3; i++) {\n            Assert.assertEquals(true, iter.hasNext());\n            DXRecord r = iter.next();\n            Assert.assertEquals(outputRecords.get(i).getId(), r.getId());\n        }\n        Assert.assertEquals(false, iter.hasNext());\n\n        page = result.getSubsequentPage(page.getNext(), 3);\n        Assert.assertEquals(3, page.size());\n        Assert.assertEquals(true, page.hasNextPage());\n\n        iter = page.iterator();\n        for (int i = 3; i < 6; i++) {\n            Assert.assertEquals(true, iter.hasNext());\n            DXRecord r = iter.next();\n            Assert.assertEquals(outputRecords.get(i).getId(), r.getId());\n        }\n        Assert.assertEquals(false, iter.hasNext());\n\n        page = result.getSubsequentPage(page.getNext(), 3);\n        Assert.assertEquals(2, page.size());\n        Assert.assertEquals(false, page.hasNextPage());\n\n        iter = page.iterator();\n        for (int i = 6; i < 8; i++) {\n            Assert.assertEquals(true, iter.hasNext());\n            DXRecord r = iter.next();\n            Assert.assertEquals(outputRecords.get(i).getId(), r.getId());\n        }\n        Assert.assertEquals(false, iter.hasNext());\n\n        // Checking when the requested page size is greater than amount of items\n        page = result.getFirstPage(100);\n        Assert.assertEquals(8, page.size());\n        Assert.assertEquals(false, page.hasNextPage());\n        int i = 0;\n        for (DXRecord r : page) {\n            Assert.assertEquals(outputRecords.get(i++).getId(), r.getId());\n        }\n\n        // Checking invalid arguments\n        try {\n            result.getFirstPage(0);\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            result.getFirstPage(-2);\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            result.getSubsequentPage(mapper.createObjectNode(), 0);\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            result.getSubsequentPage(mapper.createObjectNode(), -1);\n            Assert.fail();\n        } catch (IllegalArgumentException e) {\n        }\n        try {\n            result.getSubsequentPage(null, 10);\n            Assert.fail();\n        } catch (NullPointerException e) {\n        }\n    }", "signature": "void testFindDataObjectsWithExplicitPagination()", "full_signature": "@Test public void testFindDataObjectsWithExplicitPagination()", "class_method_signature": "DXSearchTest.testFindDataObjectsWithExplicitPagination()", "testcase": true, "constructor": false, "invocations": ["build", "setName", "setProject", "newRecord", "toString", "asList", "execute", "withClassRecord", "nameMatchesGlob", "inProject", "findDataObjects", "assertEquals", "size", "execute", "withClassRecord", "nameMatchesGlob", "inProject", "findDataObjects", "getFirstPage", "assertEquals", "size", "assertEquals", "hasNextPage", "iterator", "assertEquals", "hasNext", "next", "assertEquals", "getId", "get", "getId", "assertEquals", "hasNext", "getSubsequentPage", "getNext", "assertEquals", "size", "assertEquals", "hasNextPage", "iterator", "assertEquals", "hasNext", "next", "assertEquals", "getId", "get", "getId", "assertEquals", "hasNext", "getSubsequentPage", "getNext", "assertEquals", "size", "assertEquals", "hasNextPage", "iterator", "assertEquals", "hasNext", "next", "assertEquals", "getId", "get", "getId", "assertEquals", "hasNext", "getFirstPage", "assertEquals", "size", "assertEquals", "hasNextPage", "assertEquals", "getId", "get", "getId", "getFirstPage", "fail", "getFirstPage", "fail", "getSubsequentPage", "createObjectNode", "fail", "getSubsequentPage", "createObjectNode", "fail", "getSubsequentPage", "fail"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "body": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects() {\n        return new FindDataObjectsRequestBuilder<DXDataObject>();\n    }", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}