{"test_class": {"identifier": "ResultFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/constraints/filter/ResultFilterTest.java"}, "test_case": {"identifier": "selectMultipleColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void selectMultipleColumns() throws Exception {\n    TableAdapter table = new InMemoryTable();\n    List<CKeyValue> values = new ArrayList<CKeyValue>();\n    values.add(new CKeyValue(new byte[] { 1 }));\n    values.add(new CKeyValue(new byte[] { 2 }, new byte[] { 3 },\n        new byte[] { 4 }));\n    values.add(new CKeyValue(new byte[] { 3 }, new byte[] { 4 },\n        new byte[] { 5 }, 0, new byte[] { 6 }));\n\n    table.put(new Put(values));\n\n    ResultFilter columns = new ResultFilter(table,\n        new CColumn(new byte[] { 3 }), new CColumn(new byte[] { 4 }));\n    assertCount(columns.getResultIterator(), 2);\n\n    columns = new ResultFilter(table, new CColumn(new byte[] { 3 }));\n    assertCount(columns.getResultIterator(), 1);\n\n    columns = new ResultFilter(table, new CColumn(new byte[] { 3 },\n        new byte[] { 4 }));\n    assertCount(columns.getResultIterator(), 1);\n\n    columns = new ResultFilter(table, new CColumn(new byte[] { 3 },\n        new byte[] { 5 }));\n    assertCount(columns.getResultIterator(), 0);\n\n    columns = new ResultFilter(table, new CColumn(new byte[] { 4 }));\n    assertCount(columns.getResultIterator(), 1);\n  }", "signature": "void selectMultipleColumns()", "full_signature": "@Test public void selectMultipleColumns()", "class_method_signature": "ResultFilterTest.selectMultipleColumns()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "put", "assertCount", "getResultIterator", "assertCount", "getResultIterator", "assertCount", "getResultIterator", "assertCount", "getResultIterator", "assertCount", "getResultIterator"]}, "focal_class": {"identifier": "ResultFilter", "superclass": "extends Constraint", "interfaces": "", "fields": [{"original_string": "private static final ObjectWritable ow = new ObjectWritable();", "modifier": "private static final", "type": "ObjectWritable", "declarator": "ow = new ObjectWritable()", "var_name": "ow"}, {"original_string": "private TableAdapter table;", "modifier": "private", "type": "TableAdapter", "declarator": "table", "var_name": "table"}, {"original_string": "private Constraint subConstraint;", "modifier": "private", "type": "Constraint", "declarator": "subConstraint", "var_name": "subConstraint"}, {"original_string": "private CColumn[] columns;", "modifier": "private", "type": "CColumn[]", "declarator": "columns", "var_name": "columns"}, {"original_string": "private CRange range;", "modifier": "private", "type": "CRange", "declarator": "range", "var_name": "range"}], "methods": [{"identifier": "ResultFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResultFilter()", "full_signature": "public  ResultFilter()", "class_method_signature": "ResultFilter.ResultFilter()", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(Constraint subConstraint, CRange range,\n      CColumn... columns)", "modifiers": "public", "return": "", "signature": " ResultFilter(Constraint subConstraint, CRange range,\n      CColumn... columns)", "full_signature": "public  ResultFilter(Constraint subConstraint, CRange range,\n      CColumn... columns)", "class_method_signature": "ResultFilter.ResultFilter(Constraint subConstraint, CRange range,\n      CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "modifiers": "public", "return": "", "signature": " ResultFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "full_signature": "public  ResultFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "class_method_signature": "ResultFilter.ResultFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(CRange range, Constraint subConstraint)", "modifiers": "public", "return": "", "signature": " ResultFilter(CRange range, Constraint subConstraint)", "full_signature": "public  ResultFilter(CRange range, Constraint subConstraint)", "class_method_signature": "ResultFilter.ResultFilter(CRange range, Constraint subConstraint)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(TableAdapter primaryTable, CRange range)", "modifiers": "public", "return": "", "signature": " ResultFilter(TableAdapter primaryTable, CRange range)", "full_signature": "public  ResultFilter(TableAdapter primaryTable, CRange range)", "class_method_signature": "ResultFilter.ResultFilter(TableAdapter primaryTable, CRange range)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(Constraint subConstraint, CColumn... columns)", "modifiers": "public", "return": "", "signature": " ResultFilter(Constraint subConstraint, CColumn... columns)", "full_signature": "public  ResultFilter(Constraint subConstraint, CColumn... columns)", "class_method_signature": "ResultFilter.ResultFilter(Constraint subConstraint, CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(TableAdapter primaryTable, CColumn... columns)", "modifiers": "public", "return": "", "signature": " ResultFilter(TableAdapter primaryTable, CColumn... columns)", "full_signature": "public  ResultFilter(TableAdapter primaryTable, CColumn... columns)", "class_method_signature": "ResultFilter.ResultFilter(TableAdapter primaryTable, CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "ResultFilter", "parameters": "(TableAdapter primaryTable)", "modifiers": "public", "return": "", "signature": " ResultFilter(TableAdapter primaryTable)", "full_signature": "public  ResultFilter(TableAdapter primaryTable)", "class_method_signature": "ResultFilter.ResultFilter(TableAdapter primaryTable)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object compareto)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object compareto)", "full_signature": "@Override public boolean equals(Object compareto)", "class_method_signature": "ResultFilter.equals(Object compareto)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ResultFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ResultFilter.toString()", "testcase": false, "constructor": false}, {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "ResultFilter.getResultIterator()", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "@Override public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "@Override public void readFields(DataInput in)", "class_method_signature": "ResultFilter.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "@Override public void write(DataOutput out)", "class_method_signature": "ResultFilter.write(DataOutput out)", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/constraints/filter/ResultFilter.java"}, "focal_method": {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "body": "@Override\n  public SeekingCurrentIterator getResultIterator() {\n    SeekingCurrentIterator results;\n    // if there is no subconstraint, just do the get on the table\n    if (this.subConstraint == null) {\n      Get get = new Get(this.range);\n      for (CColumn column : this.columns)\n        get.addColumn(column.getColumnFamily(), column.getColumnQualifier());\n      results = table.get(get);\n    } else\n      results = this.subConstraint.getResultIterator();\n\n    // check to see if we need to filter the columns\n    if (this.columns == null || this.columns.length == 0)\n      return results;\n\n    // if we do, return a filtered version\n    return new FilteringIterator(this.columns, results);\n  }", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "ResultFilter.getResultIterator()", "testcase": false, "constructor": false, "invocations": ["addColumn", "getColumnFamily", "getColumnQualifier", "get", "getResultIterator"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}