{"test_class": {"identifier": "UnhealthyTasksLimitTrackerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test()", "var_name": "titusRuntime"}, {"original_string": "private final JobComponentStub jobComponentStub = new JobComponentStub(titusRuntime);", "modifier": "private final", "type": "JobComponentStub", "declarator": "jobComponentStub = new JobComponentStub(titusRuntime)", "var_name": "jobComponentStub"}, {"original_string": "private final V3JobOperations jobOperations = jobComponentStub.getJobOperations();", "modifier": "private final", "type": "V3JobOperations", "declarator": "jobOperations = jobComponentStub.getJobOperations()", "var_name": "jobOperations"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/eviction/service/quota/job/UnhealthyTasksLimitTrackerTest.java"}, "test_case": {"identifier": "testPercentageBasedQuota", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPercentageBasedQuota() {\n        Job<BatchJobExt> job = newBatchJobWithPercentageLimit(10, 80);\n        UnhealthyTasksLimitTracker tracker = UnhealthyTasksLimitTracker.percentageLimit(\n                job,\n                (AvailabilityPercentageLimitDisruptionBudgetPolicy) job.getJobDescriptor().getDisruptionBudget().getDisruptionBudgetPolicy(),\n                jobOperations,\n                jobComponentStub.getContainerHealthService()\n        );\n        testQuota(tracker, Reference.job(job.getId()));\n    }", "signature": "void testPercentageBasedQuota()", "full_signature": "@Test public void testPercentageBasedQuota()", "class_method_signature": "UnhealthyTasksLimitTrackerTest.testPercentageBasedQuota()", "testcase": true, "constructor": false, "invocations": ["newBatchJobWithPercentageLimit", "percentageLimit", "getDisruptionBudgetPolicy", "getDisruptionBudget", "getJobDescriptor", "getContainerHealthService", "testQuota", "job", "getId"]}, "focal_class": {"identifier": "UnhealthyTasksLimitTracker", "superclass": "", "interfaces": "implements QuotaTracker", "fields": [{"original_string": "private static final int JOB_SIZE_TRACKING_THRESHOLD = 2;", "modifier": "private static final", "type": "int", "declarator": "JOB_SIZE_TRACKING_THRESHOLD = 2", "var_name": "JOB_SIZE_TRACKING_THRESHOLD"}, {"original_string": "private static final int TASK_ID_REPORT_LIMIT = 20;", "modifier": "private static final", "type": "int", "declarator": "TASK_ID_REPORT_LIMIT = 20", "var_name": "TASK_ID_REPORT_LIMIT"}, {"original_string": "private final Job<?> job;", "modifier": "private final", "type": "Job<?>", "declarator": "job", "var_name": "job"}, {"original_string": "private final int minimumHealthyCount;", "modifier": "private final", "type": "int", "declarator": "minimumHealthyCount", "var_name": "minimumHealthyCount"}, {"original_string": "private final boolean aboveThreshold;", "modifier": "private final", "type": "boolean", "declarator": "aboveThreshold", "var_name": "aboveThreshold"}, {"original_string": "private final EvictionQuota belowJobSizeThresholdQuota;", "modifier": "private final", "type": "EvictionQuota", "declarator": "belowJobSizeThresholdQuota", "var_name": "belowJobSizeThresholdQuota"}, {"original_string": "private final V3JobOperations jobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "private final ContainerHealthService containerHealthService;", "modifier": "private final", "type": "ContainerHealthService", "declarator": "containerHealthService", "var_name": "containerHealthService"}], "methods": [{"identifier": "UnhealthyTasksLimitTracker", "parameters": "(Job<?> job,\n                                       int minimumHealthyCount,\n                                       V3JobOperations jobOperations,\n                                       ContainerHealthService containerHealthService)", "modifiers": "private", "return": "", "signature": " UnhealthyTasksLimitTracker(Job<?> job,\n                                       int minimumHealthyCount,\n                                       V3JobOperations jobOperations,\n                                       ContainerHealthService containerHealthService)", "full_signature": "private  UnhealthyTasksLimitTracker(Job<?> job,\n                                       int minimumHealthyCount,\n                                       V3JobOperations jobOperations,\n                                       ContainerHealthService containerHealthService)", "class_method_signature": "UnhealthyTasksLimitTracker.UnhealthyTasksLimitTracker(Job<?> job,\n                                       int minimumHealthyCount,\n                                       V3JobOperations jobOperations,\n                                       ContainerHealthService containerHealthService)", "testcase": false, "constructor": true}, {"identifier": "getQuota", "parameters": "(Reference reference)", "modifiers": "@Override public", "return": "EvictionQuota", "signature": "EvictionQuota getQuota(Reference reference)", "full_signature": "@Override public EvictionQuota getQuota(Reference reference)", "class_method_signature": "UnhealthyTasksLimitTracker.getQuota(Reference reference)", "testcase": false, "constructor": false}, {"identifier": "countHealthy", "parameters": "()", "modifiers": "private", "return": "Pair<Integer, String>", "signature": "Pair<Integer, String> countHealthy()", "full_signature": "private Pair<Integer, String> countHealthy()", "class_method_signature": "UnhealthyTasksLimitTracker.countHealthy()", "testcase": false, "constructor": false}, {"identifier": "percentageLimit", "parameters": "(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "modifiers": "public static", "return": "UnhealthyTasksLimitTracker", "signature": "UnhealthyTasksLimitTracker percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "full_signature": "public static UnhealthyTasksLimitTracker percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "class_method_signature": "UnhealthyTasksLimitTracker.percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "testcase": false, "constructor": false}, {"identifier": "absoluteLimit", "parameters": "(Job<?> job,\n                                                           UnhealthyTasksLimitDisruptionBudgetPolicy policy,\n                                                           V3JobOperations jobOperations,\n                                                           ContainerHealthService containerHealthService)", "modifiers": "public static", "return": "UnhealthyTasksLimitTracker", "signature": "UnhealthyTasksLimitTracker absoluteLimit(Job<?> job,\n                                                           UnhealthyTasksLimitDisruptionBudgetPolicy policy,\n                                                           V3JobOperations jobOperations,\n                                                           ContainerHealthService containerHealthService)", "full_signature": "public static UnhealthyTasksLimitTracker absoluteLimit(Job<?> job,\n                                                           UnhealthyTasksLimitDisruptionBudgetPolicy policy,\n                                                           V3JobOperations jobOperations,\n                                                           ContainerHealthService containerHealthService)", "class_method_signature": "UnhealthyTasksLimitTracker.absoluteLimit(Job<?> job,\n                                                           UnhealthyTasksLimitDisruptionBudgetPolicy policy,\n                                                           V3JobOperations jobOperations,\n                                                           ContainerHealthService containerHealthService)", "testcase": false, "constructor": false}, {"identifier": "computeHealthyPoolSizeFromAbsoluteLimit", "parameters": "(Job<?> job, UnhealthyTasksLimitDisruptionBudgetPolicy policy)", "modifiers": "@VisibleForTesting static", "return": "int", "signature": "int computeHealthyPoolSizeFromAbsoluteLimit(Job<?> job, UnhealthyTasksLimitDisruptionBudgetPolicy policy)", "full_signature": "@VisibleForTesting static int computeHealthyPoolSizeFromAbsoluteLimit(Job<?> job, UnhealthyTasksLimitDisruptionBudgetPolicy policy)", "class_method_signature": "UnhealthyTasksLimitTracker.computeHealthyPoolSizeFromAbsoluteLimit(Job<?> job, UnhealthyTasksLimitDisruptionBudgetPolicy policy)", "testcase": false, "constructor": false}, {"identifier": "computeHealthyPoolSizeFromPercentage", "parameters": "(Job<?> job, AvailabilityPercentageLimitDisruptionBudgetPolicy policy)", "modifiers": "@VisibleForTesting static", "return": "int", "signature": "int computeHealthyPoolSizeFromPercentage(Job<?> job, AvailabilityPercentageLimitDisruptionBudgetPolicy policy)", "full_signature": "@VisibleForTesting static int computeHealthyPoolSizeFromPercentage(Job<?> job, AvailabilityPercentageLimitDisruptionBudgetPolicy policy)", "class_method_signature": "UnhealthyTasksLimitTracker.computeHealthyPoolSizeFromPercentage(Job<?> job, AvailabilityPercentageLimitDisruptionBudgetPolicy policy)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/eviction/service/quota/job/UnhealthyTasksLimitTracker.java"}, "focal_method": {"identifier": "percentageLimit", "parameters": "(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "modifiers": "public static", "return": "UnhealthyTasksLimitTracker", "body": "public static UnhealthyTasksLimitTracker percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService) {\n\n        return new UnhealthyTasksLimitTracker(job, computeHealthyPoolSizeFromPercentage(job, policy), jobOperations, containerHealthService);\n    }", "signature": "UnhealthyTasksLimitTracker percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "full_signature": "public static UnhealthyTasksLimitTracker percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "class_method_signature": "UnhealthyTasksLimitTracker.percentageLimit(Job<?> job,\n                                                             AvailabilityPercentageLimitDisruptionBudgetPolicy policy,\n                                                             V3JobOperations jobOperations,\n                                                             ContainerHealthService containerHealthService)", "testcase": false, "constructor": false, "invocations": ["computeHealthyPoolSizeFromPercentage"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}