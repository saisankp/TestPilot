{"test_class": {"identifier": "JDBCSSHRecordStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/JDBCSSHRecordStoreTest.java"}, "test_case": {"identifier": "testLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLog() {\n\n        PoolableDataSource mockDataSrc = Mockito.mock(PoolableDataSource.class);\n        JDBCSSHRecordStore store = new JDBCSSHRecordStore(mockDataSrc);\n\n        Principal principal = SimplePrincipal.create(\"user\", \"joe\", \"creds\");\n\n        // make sure no exceptions are thrown when processing log request\n\n        store.log(principal, \"10.11.12.13\", \"athenz.api\", \"1234\");\n    }", "signature": "void testLog()", "full_signature": "@Test public void testLog()", "class_method_signature": "JDBCSSHRecordStoreTest.testLog()", "testcase": true, "constructor": false, "invocations": ["mock", "create", "log"]}, "focal_class": {"identifier": "JDBCSSHRecordStore", "superclass": "", "interfaces": "implements SSHRecordStore", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JDBCSSHRecordStore.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JDBCSSHRecordStore.class)", "var_name": "LOGGER"}, {"original_string": "private static final Logger SSHLOGGER = LoggerFactory.getLogger(\"SSHCertLogger\");", "modifier": "private static final", "type": "Logger", "declarator": "SSHLOGGER = LoggerFactory.getLogger(\"SSHCertLogger\")", "var_name": "SSHLOGGER"}, {"original_string": "PoolableDataSource src;", "modifier": "", "type": "PoolableDataSource", "declarator": "src", "var_name": "src"}, {"original_string": "private int opTimeout = 10;", "modifier": "private", "type": "int", "declarator": "opTimeout = 10", "var_name": "opTimeout"}], "methods": [{"identifier": "JDBCSSHRecordStore", "parameters": "(PoolableDataSource src)", "modifiers": "public", "return": "", "signature": " JDBCSSHRecordStore(PoolableDataSource src)", "full_signature": "public  JDBCSSHRecordStore(PoolableDataSource src)", "class_method_signature": "JDBCSSHRecordStore.JDBCSSHRecordStore(PoolableDataSource src)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "SSHRecordStoreConnection", "signature": "SSHRecordStoreConnection getConnection()", "full_signature": "@Override public SSHRecordStoreConnection getConnection()", "class_method_signature": "JDBCSSHRecordStore.getConnection()", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "JDBCSSHRecordStore.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "clearConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearConnections()", "full_signature": "@Override public void clearConnections()", "class_method_signature": "JDBCSSHRecordStore.clearConnections()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "modifiers": "@Override public", "return": "void", "signature": "void log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "full_signature": "@Override public void log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "class_method_signature": "JDBCSSHRecordStore.log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "testcase": false, "constructor": false}, {"identifier": "enableNotifications", "parameters": "(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "full_signature": "@Override public boolean enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "class_method_signature": "JDBCSSHRecordStore.enableNotifications(NotificationManager notificationManager, RolesProvider rolesProvider, final String serverName)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/JDBCSSHRecordStore.java"}, "focal_method": {"identifier": "log", "parameters": "(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void log(final Principal principal, final String ip, final String service,\n                    final String instanceId) {\n        X509CertUtils.logSSH(SSHLOGGER, principal, ip, service, instanceId);\n    }", "signature": "void log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "full_signature": "@Override public void log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "class_method_signature": "JDBCSSHRecordStore.log(final Principal principal, final String ip, final String service,\n                    final String instanceId)", "testcase": false, "constructor": false, "invocations": ["logSSH"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}