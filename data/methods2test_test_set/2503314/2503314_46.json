{"test_class": {"identifier": "LinkBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static ApplicationContext ctx = mock(ApplicationContext.class);", "modifier": "final static", "type": "ApplicationContext", "declarator": "ctx = mock(ApplicationContext.class)", "var_name": "ctx"}, {"original_string": "final static UserManager userManager = mock(UserManager.class);", "modifier": "final static", "type": "UserManager", "declarator": "userManager = mock(UserManager.class)", "var_name": "userManager"}, {"original_string": "final static LinkManager linkManager = mock(LinkManager.class);", "modifier": "final static", "type": "LinkManager", "declarator": "linkManager = mock(LinkManager.class)", "var_name": "linkManager"}, {"original_string": "final static AuthenticationManager authManager = mock(AuthenticationManager.class);", "modifier": "final static", "type": "AuthenticationManager", "declarator": "authManager = mock(AuthenticationManager.class)", "var_name": "authManager"}, {"original_string": "final static ConfigurationUtil configurationUtil = mock(ConfigurationUtil.class);", "modifier": "final static", "type": "ConfigurationUtil", "declarator": "configurationUtil = mock(ConfigurationUtil.class)", "var_name": "configurationUtil"}, {"original_string": "private static DefaultMailService mailService = Mockito.mock(DefaultMailService.class);", "modifier": "private static", "type": "DefaultMailService", "declarator": "mailService = Mockito.mock(DefaultMailService.class)", "var_name": "mailService"}, {"original_string": "private static ExternalContext externalContext = Mockito.mock(ExternalContext.class);", "modifier": "private static", "type": "ExternalContext", "declarator": "externalContext = Mockito.mock(ExternalContext.class)", "var_name": "externalContext"}, {"original_string": "private final LinkBean sut = new LinkBean();", "modifier": "private final", "type": "LinkBean", "declarator": "sut = new LinkBean()", "var_name": "sut"}, {"original_string": "private final LinkBean sutMock = mock(LinkBean.class, CALLS_REAL_METHODS);", "modifier": "private final", "type": "LinkBean", "declarator": "sutMock = mock(LinkBean.class, CALLS_REAL_METHODS)", "var_name": "sutMock"}], "file": "tntconcept-web/src/test/java/com/autentia/tnt/bean/LinkBeanTest.java"}, "test_case": {"identifier": "shouldCheckLinkIsOnTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldCheckLinkIsOnTime() {\n\t\t\n\t\tLink onTimeLink = new Link();\n\t\tonTimeLink.setInsertDate(new Date());\n\t\t\n\t\tboolean isOnTime = sut.isOnTime(onTimeLink);\n\t\t\n\t\tassertThat(isOnTime, is(true));\n\t}", "signature": "void shouldCheckLinkIsOnTime()", "full_signature": "@Test public void shouldCheckLinkIsOnTime()", "class_method_signature": "LinkBeanTest.shouldCheckLinkIsOnTime()", "testcase": true, "constructor": false, "invocations": ["setInsertDate", "isOnTime", "assertThat", "is"]}, "focal_class": {"identifier": "LinkBean", "superclass": "extends BaseBean", "interfaces": "", "fields": [{"original_string": "private static final String LINK_ENTRYPOINT_PATH = \"/linkEmailVerification.jsf\";", "modifier": "private static final", "type": "String", "declarator": "LINK_ENTRYPOINT_PATH = \"/linkEmailVerification.jsf\"", "var_name": "LINK_ENTRYPOINT_PATH"}, {"original_string": "private static LinkManager manager = LinkManager.getDefault();", "modifier": "private static", "type": "LinkManager", "declarator": "manager = LinkManager.getDefault()", "var_name": "manager"}, {"original_string": "private static UserManager userManager = UserManager.getDefault();", "modifier": "private static", "type": "UserManager", "declarator": "userManager = UserManager.getDefault()", "var_name": "userManager"}, {"original_string": "private static final AuthenticationManager authManager = AuthenticationManager.getDefault();", "modifier": "private static final", "type": "AuthenticationManager", "declarator": "authManager = AuthenticationManager.getDefault()", "var_name": "authManager"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String link;", "modifier": "private", "type": "String", "declarator": "link", "var_name": "link"}], "methods": [{"identifier": "LinkBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " LinkBean()", "full_signature": "public  LinkBean()", "class_method_signature": "LinkBean.LinkBean()", "testcase": false, "constructor": true}, {"identifier": "LinkBean", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " LinkBean(String name)", "full_signature": "public  LinkBean(String name)", "class_method_signature": "LinkBean.LinkBean(String name)", "testcase": false, "constructor": true}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "LinkBean.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "LinkBean.getName()", "testcase": false, "constructor": false}, {"identifier": "setLink", "parameters": "(String link)", "modifiers": "public", "return": "void", "signature": "void setLink(String link)", "full_signature": "public void setLink(String link)", "class_method_signature": "LinkBean.setLink(String link)", "testcase": false, "constructor": false}, {"identifier": "getLink", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLink()", "full_signature": "public String getLink()", "class_method_signature": "LinkBean.getLink()", "testcase": false, "constructor": false}, {"identifier": "getUserWithName", "parameters": "(String name)", "modifiers": "public", "return": "List<User>", "signature": "List<User> getUserWithName(String name)", "full_signature": "public List<User> getUserWithName(String name)", "class_method_signature": "LinkBean.getUserWithName(String name)", "testcase": false, "constructor": false}, {"identifier": "generateLink", "parameters": "(String name)", "modifiers": "public", "return": "Link", "signature": "Link generateLink(String name)", "full_signature": "public Link generateLink(String name)", "class_method_signature": "LinkBean.generateLink(String name)", "testcase": false, "constructor": false}, {"identifier": "sendMail", "parameters": "(Link link, String mailAddress)", "modifiers": "public", "return": "void", "signature": "void sendMail(Link link, String mailAddress)", "full_signature": "public void sendMail(Link link, String mailAddress)", "class_method_signature": "LinkBean.sendMail(Link link, String mailAddress)", "testcase": false, "constructor": false}, {"identifier": "buildResetPasswordVerificationLink", "parameters": "(HttpServletRequest req, Link link)", "modifiers": "private", "return": "String", "signature": "String buildResetPasswordVerificationLink(HttpServletRequest req, Link link)", "full_signature": "private String buildResetPasswordVerificationLink(HttpServletRequest req, Link link)", "class_method_signature": "LinkBean.buildResetPasswordVerificationLink(HttpServletRequest req, Link link)", "testcase": false, "constructor": false}, {"identifier": "getFacesExternalContext", "parameters": "()", "modifiers": "protected", "return": "ExternalContext", "signature": "ExternalContext getFacesExternalContext()", "full_signature": "protected ExternalContext getFacesExternalContext()", "class_method_signature": "LinkBean.getFacesExternalContext()", "testcase": false, "constructor": false}, {"identifier": "getMailService", "parameters": "()", "modifiers": "protected", "return": "DefaultMailService", "signature": "DefaultMailService getMailService()", "full_signature": "protected DefaultMailService getMailService()", "class_method_signature": "LinkBean.getMailService()", "testcase": false, "constructor": false}, {"identifier": "passwordResetRequest", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String passwordResetRequest()", "full_signature": "public String passwordResetRequest()", "class_method_signature": "LinkBean.passwordResetRequest()", "testcase": false, "constructor": false}, {"identifier": "getLinksWithLink", "parameters": "(String link)", "modifiers": "public", "return": "List<Link>", "signature": "List<Link> getLinksWithLink(String link)", "full_signature": "public List<Link> getLinksWithLink(String link)", "class_method_signature": "LinkBean.getLinksWithLink(String link)", "testcase": false, "constructor": false}, {"identifier": "deleteLinkFromBD", "parameters": "(Link link)", "modifiers": "public", "return": "void", "signature": "void deleteLinkFromBD(Link link)", "full_signature": "public void deleteLinkFromBD(Link link)", "class_method_signature": "LinkBean.deleteLinkFromBD(Link link)", "testcase": false, "constructor": false}, {"identifier": "checkLinkAndResetPassword", "parameters": "(String link)", "modifiers": "public", "return": "String", "signature": "String checkLinkAndResetPassword(String link)", "full_signature": "public String checkLinkAndResetPassword(String link)", "class_method_signature": "LinkBean.checkLinkAndResetPassword(String link)", "testcase": false, "constructor": false}, {"identifier": "resetPassword", "parameters": "(User user)", "modifiers": "public", "return": "String", "signature": "String resetPassword(User user)", "full_signature": "public String resetPassword(User user)", "class_method_signature": "LinkBean.resetPassword(User user)", "testcase": false, "constructor": false}, {"identifier": "callFacesUtilsFormatMessage", "parameters": "(String randomWords)", "modifiers": "protected", "return": "String []", "signature": "String [] callFacesUtilsFormatMessage(String randomWords)", "full_signature": "protected String [] callFacesUtilsFormatMessage(String randomWords)", "class_method_signature": "LinkBean.callFacesUtilsFormatMessage(String randomWords)", "testcase": false, "constructor": false}, {"identifier": "isOnTime", "parameters": "(Link link)", "modifiers": "public", "return": "boolean", "signature": "boolean isOnTime(Link link)", "full_signature": "public boolean isOnTime(Link link)", "class_method_signature": "LinkBean.isOnTime(Link link)", "testcase": false, "constructor": false}, {"identifier": "goPasswordChange", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String goPasswordChange()", "full_signature": "public String goPasswordChange()", "class_method_signature": "LinkBean.goPasswordChange()", "testcase": false, "constructor": false}], "file": "tntconcept-web/src/main/java/com/autentia/tnt/bean/LinkBean.java"}, "focal_method": {"identifier": "isOnTime", "parameters": "(Link link)", "modifiers": "public", "return": "boolean", "body": "public boolean isOnTime(Link link) {\n\t\tDate nowDate = new Date();\n\t\tDate insertDate = link.getInsertDate();\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.setTime(insertDate);\n\t\tint dayOfInsertion = cal.get(Calendar.DAY_OF_MONTH);\n\t\tcal.set(Calendar.DAY_OF_MONTH, dayOfInsertion+1);\n\t\treturn nowDate.before(cal.getTime());\n\t}", "signature": "boolean isOnTime(Link link)", "full_signature": "public boolean isOnTime(Link link)", "class_method_signature": "LinkBean.isOnTime(Link link)", "testcase": false, "constructor": false, "invocations": ["getInsertDate", "getInstance", "setTime", "get", "set", "before", "getTime"]}, "repository": {"repo_id": 2503314, "url": "https://github.com/autentia/TNTConcept", "stars": 11, "created": "10/3/2011 8:00:30 AM +00:00", "updates": "2020-01-24T12:30:31+00:00", "fork": "False", "license": "licensed"}}