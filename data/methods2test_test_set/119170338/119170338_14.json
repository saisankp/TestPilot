{"test_class": {"identifier": "OntologyTermsTest", "superclass": "extends VegetableOntologyTestBase", "interfaces": "", "fields": [], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/algo/OntologyTermsTest.java"}, "test_case": {"identifier": "testChildrenOf", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testChildrenOf() {\n    assertEquals(\n      ImmutableSet.of(\n        TermId.of(\"VO:0000004\"),\n        TermId.of(\"VO:0000005\"),\n        TermId.of(\"VO:0000006\"),\n        TermId.of(\"VO:0000007\"),\n        TermId.of(\"VO:0000002\")),\n      OntologyTerms.childrenOf(idRootVegetable, ontology));\n  }", "signature": "void testChildrenOf()", "full_signature": "@Test void testChildrenOf()", "class_method_signature": "OntologyTermsTest.testChildrenOf()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "of", "of", "of", "of", "of", "childrenOf"]}, "focal_class": {"identifier": "OntologyTerms", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "visitChildrenOf", "parameters": "(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "modifiers": "public static", "return": "void", "signature": "void visitChildrenOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "full_signature": "public static void visitChildrenOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "class_method_signature": "OntologyTerms.visitChildrenOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "testcase": false, "constructor": false}, {"identifier": "childrenOf", "parameters": "(TermId termId, O ontology)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> childrenOf(TermId termId, O ontology)", "full_signature": "public static Set<TermId> childrenOf(TermId termId, O ontology)", "class_method_signature": "OntologyTerms.childrenOf(TermId termId, O ontology)", "testcase": false, "constructor": false}, {"identifier": "visitParentsOf", "parameters": "(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "modifiers": "public static", "return": "void", "signature": "void visitParentsOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "full_signature": "public static void visitParentsOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "class_method_signature": "OntologyTerms.visitParentsOf(\n    TermId termId, O ontology, TermVisitor<O> termVisitor)", "testcase": false, "constructor": false}, {"identifier": "parentsOf", "parameters": "(TermId termId, O ontology)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> parentsOf(TermId termId, O ontology)", "full_signature": "public static Set<TermId> parentsOf(TermId termId, O ontology)", "class_method_signature": "OntologyTerms.parentsOf(TermId termId, O ontology)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/algo/OntologyTerms.java"}, "focal_method": {"identifier": "childrenOf", "parameters": "(TermId termId, O ontology)", "modifiers": "public static", "return": "Set<TermId>", "body": "public static <O extends Ontology> Set<TermId> childrenOf(TermId termId, O ontology) {\n    Set<TermId> result = new HashSet<>();\n\n    visitChildrenOf(\n        termId,\n        ontology,\n        new TermVisitor<O>() {\n          @Override\n          public boolean visit(O ontology, TermId termId) {\n            result.add(termId);\n            return true;\n          }\n        });\n\n    return result;\n  }", "signature": "Set<TermId> childrenOf(TermId termId, O ontology)", "full_signature": "public static Set<TermId> childrenOf(TermId termId, O ontology)", "class_method_signature": "OntologyTerms.childrenOf(TermId termId, O ontology)", "testcase": false, "constructor": false, "invocations": ["visitChildrenOf", "add"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}