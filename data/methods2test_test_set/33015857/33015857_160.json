{"test_class": {"identifier": "StrTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "boolean ok;", "modifier": "", "type": "boolean", "declarator": "ok", "var_name": "ok"}], "file": "reflekt/src/test/java/io/advantageous/boon/core/StrTest.java"}, "test_case": {"identifier": "insideOfString5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void insideOfString5() {\n\n        String test = \"1234567890\";\n\n        ok &= insideOf(\"123\", test, \"890\") || die();\n    }", "signature": "void insideOfString5()", "full_signature": "@Test public void insideOfString5()", "class_method_signature": "StrTest.insideOfString5()", "testcase": true, "constructor": false, "invocations": ["insideOf", "die"]}, "focal_class": {"identifier": "Str", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static String EMPTY_STRING = \"\";", "modifier": "public final static", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}], "methods": [{"identifier": "lengthOf", "parameters": "( String str )", "modifiers": "public static", "return": "int", "signature": "int lengthOf( String str )", "full_signature": "public static int lengthOf( String str )", "class_method_signature": "Str.lengthOf( String str )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( String str, int start )", "modifiers": "public static", "return": "String", "signature": "String sliceOf( String str, int start )", "full_signature": "public static String sliceOf( String str, int start )", "class_method_signature": "Str.sliceOf( String str, int start )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( String str, int start, int end )", "modifiers": "public static", "return": "String", "signature": "String sliceOf( String str, int start, int end )", "full_signature": "public static String sliceOf( String str, int start, int end )", "class_method_signature": "Str.sliceOf( String str, int start, int end )", "testcase": false, "constructor": false}, {"identifier": "endSliceOf", "parameters": "( String str, int end )", "modifiers": "public static", "return": "String", "signature": "String endSliceOf( String str, int end )", "full_signature": "public static String endSliceOf( String str, int end )", "class_method_signature": "Str.endSliceOf( String str, int end )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( String str, int index )", "modifiers": "public static", "return": "char", "signature": "char atIndex( String str, int index )", "full_signature": "public static char atIndex( String str, int index )", "class_method_signature": "Str.atIndex( String str, int index )", "testcase": false, "constructor": false}, {"identifier": "atIndex", "parameters": "( String str, int index, char c )", "modifiers": "public static", "return": "String", "signature": "String atIndex( String str, int index, char c )", "full_signature": "public static String atIndex( String str, int index, char c )", "class_method_signature": "Str.atIndex( String str, int index, char c )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( String str )", "modifiers": "public static", "return": "int", "signature": "int len( String str )", "full_signature": "public static int len( String str )", "class_method_signature": "Str.len( String str )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( String str, int start )", "modifiers": "public static", "return": "String", "signature": "String slc( String str, int start )", "full_signature": "public static String slc( String str, int start )", "class_method_signature": "Str.slc( String str, int start )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( String str, int start, int end )", "modifiers": "public static", "return": "String", "signature": "String slc( String str, int start, int end )", "full_signature": "public static String slc( String str, int start, int end )", "class_method_signature": "Str.slc( String str, int start, int end )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( String str, int end )", "modifiers": "public static", "return": "String", "signature": "String slcEnd( String str, int end )", "full_signature": "public static String slcEnd( String str, int end )", "class_method_signature": "Str.slcEnd( String str, int end )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( String str, int index )", "modifiers": "public static", "return": "char", "signature": "char idx( String str, int index )", "full_signature": "public static char idx( String str, int index )", "class_method_signature": "Str.idx( String str, int index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( String str, int index, char c )", "modifiers": "public static", "return": "String", "signature": "String idx( String str, int index, char c )", "full_signature": "public static String idx( String str, int index, char c )", "class_method_signature": "Str.idx( String str, int index, char c )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( char[] chars, String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( char[] chars, String str )", "full_signature": "public static boolean in( char[] chars, String str )", "class_method_signature": "Str.in( char[] chars, String str )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( char c, String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( char c, String str )", "full_signature": "public static boolean in( char c, String str )", "class_method_signature": "Str.in( char c, String str )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( char c, int offset, String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( char c, int offset, String str )", "full_signature": "public static boolean in( char c, int offset, String str )", "class_method_signature": "Str.in( char c, int offset, String str )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( char c, int offset, int end, String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( char c, int offset, int end, String str )", "full_signature": "public static boolean in( char c, int offset, int end, String str )", "class_method_signature": "Str.in( char c, int offset, int end, String str )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( String str, char c )", "modifiers": "public static", "return": "String", "signature": "String add( String str, char c )", "full_signature": "public static String add( String str, char c )", "class_method_signature": "Str.add( String str, char c )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( String str, String str2 )", "modifiers": "public static", "return": "String", "signature": "String add( String str, String str2 )", "full_signature": "public static String add( String str, String str2 )", "class_method_signature": "Str.add( String str, String str2 )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( String... strings )", "modifiers": "public static", "return": "String", "signature": "String add( String... strings )", "full_signature": "public static String add( String... strings )", "class_method_signature": "Str.add( String... strings )", "testcase": false, "constructor": false}, {"identifier": "addObjects", "parameters": "( Object... objects )", "modifiers": "public static", "return": "String", "signature": "String addObjects( Object... objects )", "full_signature": "public static String addObjects( Object... objects )", "class_method_signature": "Str.addObjects( Object... objects )", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "( String str )", "modifiers": "public static", "return": "String", "signature": "String compact( String str )", "full_signature": "public static String compact( String str )", "class_method_signature": "Str.compact( String str )", "testcase": false, "constructor": false}, {"identifier": "calculateIndex", "parameters": "( final int length, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateIndex( final int length, int originalIndex )", "full_signature": "private static int calculateIndex( final int length, int originalIndex )", "class_method_signature": "Str.calculateIndex( final int length, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( String str )", "modifiers": "public static", "return": "String[]", "signature": "String[] split( String str )", "full_signature": "public static String[] split( String str )", "class_method_signature": "Str.split( String str )", "testcase": false, "constructor": false}, {"identifier": "splitLines", "parameters": "( String str )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitLines( String str )", "full_signature": "public static String[] splitLines( String str )", "class_method_signature": "Str.splitLines( String str )", "testcase": false, "constructor": false}, {"identifier": "splitComma", "parameters": "( String str )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitComma( String str )", "full_signature": "public static String[] splitComma( String str )", "class_method_signature": "Str.splitComma( String str )", "testcase": false, "constructor": false}, {"identifier": "splitBySpace", "parameters": "( String str )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitBySpace( String str )", "full_signature": "public static String[] splitBySpace( String str )", "class_method_signature": "Str.splitBySpace( String str )", "testcase": false, "constructor": false}, {"identifier": "splitByPipe", "parameters": "( String str )", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByPipe( String str )", "full_signature": "public static String[] splitByPipe( String str )", "class_method_signature": "Str.splitByPipe( String str )", "testcase": false, "constructor": false}, {"identifier": "fromCharArrayOfArrayToStringArray", "parameters": "( char[][] split )", "modifiers": "public static", "return": "String[]", "signature": "String[] fromCharArrayOfArrayToStringArray( char[][] split )", "full_signature": "public static String[] fromCharArrayOfArrayToStringArray( char[][] split )", "class_method_signature": "Str.fromCharArrayOfArrayToStringArray( char[][] split )", "testcase": false, "constructor": false}, {"identifier": "upper", "parameters": "( String str )", "modifiers": "public static", "return": "String", "signature": "String upper( String str )", "full_signature": "public static String upper( String str )", "class_method_signature": "Str.upper( String str )", "testcase": false, "constructor": false}, {"identifier": "lower", "parameters": "( String str )", "modifiers": "public static", "return": "String", "signature": "String lower( String str )", "full_signature": "public static String lower( String str )", "class_method_signature": "Str.lower( String str )", "testcase": false, "constructor": false}, {"identifier": "camelCaseUpper", "parameters": "( String in )", "modifiers": "public static", "return": "String", "signature": "String camelCaseUpper( String in )", "full_signature": "public static String camelCaseUpper( String in )", "class_method_signature": "Str.camelCaseUpper( String in )", "testcase": false, "constructor": false}, {"identifier": "camelCaseLower", "parameters": "( String in )", "modifiers": "public static", "return": "String", "signature": "String camelCaseLower( String in )", "full_signature": "public static String camelCaseLower( String in )", "class_method_signature": "Str.camelCaseLower( String in )", "testcase": false, "constructor": false}, {"identifier": "camelCase", "parameters": "( String in )", "modifiers": "public static", "return": "String", "signature": "String camelCase( String in )", "full_signature": "public static String camelCase( String in )", "class_method_signature": "Str.camelCase( String in )", "testcase": false, "constructor": false}, {"identifier": "camelCase", "parameters": "( String inStr, boolean upper )", "modifiers": "public static", "return": "String", "signature": "String camelCase( String inStr, boolean upper )", "full_signature": "public static String camelCase( String inStr, boolean upper )", "class_method_signature": "Str.camelCase( String inStr, boolean upper )", "testcase": false, "constructor": false}, {"identifier": "insideOf", "parameters": "(String start, String inStr, String end)", "modifiers": "public static", "return": "boolean", "signature": "boolean insideOf(String start, String inStr, String end)", "full_signature": "public static boolean insideOf(String start, String inStr, String end)", "class_method_signature": "Str.insideOf(String start, String inStr, String end)", "testcase": false, "constructor": false}, {"identifier": "underBarCase", "parameters": "( String inStr )", "modifiers": "public static", "return": "String", "signature": "String underBarCase( String inStr )", "full_signature": "public static String underBarCase( String inStr )", "class_method_signature": "Str.underBarCase( String inStr )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(CharSequence a, CharSequence b)", "modifiers": "public static", "return": "void", "signature": "void equalsOrDie(CharSequence a, CharSequence b)", "full_signature": "public static void equalsOrDie(CharSequence a, CharSequence b)", "class_method_signature": "Str.equalsOrDie(CharSequence a, CharSequence b)", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(String a, String b)", "modifiers": "public static", "return": "void", "signature": "void equalsOrDie(String a, String b)", "full_signature": "public static void equalsOrDie(String a, String b)", "class_method_signature": "Str.equalsOrDie(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "( String inStr, int size, char fill )", "modifiers": "public static", "return": "String", "signature": "String lpad( String inStr, int size, char fill )", "full_signature": "public static String lpad( String inStr, int size, char fill )", "class_method_signature": "Str.lpad( String inStr, int size, char fill )", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "( String inStr, int size )", "modifiers": "public static", "return": "String", "signature": "String lpad( String inStr, int size )", "full_signature": "public static String lpad( String inStr, int size )", "class_method_signature": "Str.lpad( String inStr, int size )", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "( Object inStr, int size )", "modifiers": "public static", "return": "String", "signature": "String lpad( Object inStr, int size )", "full_signature": "public static String lpad( Object inStr, int size )", "class_method_signature": "Str.lpad( Object inStr, int size )", "testcase": false, "constructor": false}, {"identifier": "lpad", "parameters": "( Object inStr)", "modifiers": "public static", "return": "String", "signature": "String lpad( Object inStr)", "full_signature": "public static String lpad( Object inStr)", "class_method_signature": "Str.lpad( Object inStr)", "testcase": false, "constructor": false}, {"identifier": "zfill", "parameters": "( int num, int size )", "modifiers": "public static", "return": "String", "signature": "String zfill( int num, int size )", "full_signature": "public static String zfill( int num, int size )", "class_method_signature": "Str.zfill( int num, int size )", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "( String inStr, int size, char fill )", "modifiers": "public static", "return": "String", "signature": "String rpad( String inStr, int size, char fill )", "full_signature": "public static String rpad( String inStr, int size, char fill )", "class_method_signature": "Str.rpad( String inStr, int size, char fill )", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "( String inStr, int size)", "modifiers": "public static", "return": "String", "signature": "String rpad( String inStr, int size)", "full_signature": "public static String rpad( String inStr, int size)", "class_method_signature": "Str.rpad( String inStr, int size)", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "( Object obj, int size)", "modifiers": "public static", "return": "String", "signature": "String rpad( Object obj, int size)", "full_signature": "public static String rpad( Object obj, int size)", "class_method_signature": "Str.rpad( Object obj, int size)", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "( Object obj)", "modifiers": "public static", "return": "String", "signature": "String rpad( Object obj)", "full_signature": "public static String rpad( Object obj)", "class_method_signature": "Str.rpad( Object obj)", "testcase": false, "constructor": false}, {"identifier": "rpad", "parameters": "( Object obj, int size, char fill )", "modifiers": "public static", "return": "String", "signature": "String rpad( Object obj, int size, char fill )", "full_signature": "public static String rpad( Object obj, int size, char fill )", "class_method_signature": "Str.rpad( Object obj, int size, char fill )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( final String input,\n                                  final char split )", "modifiers": "public static", "return": "String[]", "signature": "String[] split( final String input,\n                                  final char split )", "full_signature": "public static String[] split( final String input,\n                                  final char split )", "class_method_signature": "Str.split( final String input,\n                                  final char split )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( String value, String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( String value, String str )", "full_signature": "public static boolean in( String value, String str )", "class_method_signature": "Str.in( String value, String str )", "testcase": false, "constructor": false}, {"identifier": "lines", "parameters": "( String... lines )", "modifiers": "public static", "return": "String", "signature": "String lines( String... lines )", "full_signature": "public static String lines( String... lines )", "class_method_signature": "Str.lines( String... lines )", "testcase": false, "constructor": false}, {"identifier": "linesConvertQuotes", "parameters": "( String... lines )", "modifiers": "public static", "return": "String", "signature": "String linesConvertQuotes( String... lines )", "full_signature": "public static String linesConvertQuotes( String... lines )", "class_method_signature": "Str.linesConvertQuotes( String... lines )", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "( char delim, String... args )", "modifiers": "public static", "return": "String", "signature": "String join( char delim, String... args )", "full_signature": "public static String join( char delim, String... args )", "class_method_signature": "Str.join( char delim, String... args )", "testcase": false, "constructor": false}, {"identifier": "joinObjects", "parameters": "( char delim, Object... args )", "modifiers": "public static", "return": "String", "signature": "String joinObjects( char delim, Object... args )", "full_signature": "public static String joinObjects( char delim, Object... args )", "class_method_signature": "Str.joinObjects( char delim, Object... args )", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "( String... args )", "modifiers": "public static", "return": "String", "signature": "String join( String... args )", "full_signature": "public static String join( String... args )", "class_method_signature": "Str.join( String... args )", "testcase": false, "constructor": false}, {"identifier": "joinCollection", "parameters": "( char delim, List<?> args )", "modifiers": "public static", "return": "String", "signature": "String joinCollection( char delim, List<?> args )", "full_signature": "public static String joinCollection( char delim, List<?> args )", "class_method_signature": "Str.joinCollection( char delim, List<?> args )", "testcase": false, "constructor": false}, {"identifier": "joinCollection", "parameters": "( String delim, List<?> args )", "modifiers": "public static", "return": "String", "signature": "String joinCollection( String delim, List<?> args )", "full_signature": "public static String joinCollection( String delim, List<?> args )", "class_method_signature": "Str.joinCollection( String delim, List<?> args )", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "( String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty( String str )", "full_signature": "public static boolean isEmpty( String str )", "class_method_signature": "Str.isEmpty( String str )", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "( Object str )", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty( Object str )", "full_signature": "public static boolean isEmpty( Object str )", "class_method_signature": "Str.isEmpty( Object str )", "testcase": false, "constructor": false}, {"identifier": "uncapitalize", "parameters": "( String string )", "modifiers": "public static", "return": "String", "signature": "String uncapitalize( String string )", "full_signature": "public static String uncapitalize( String string )", "class_method_signature": "Str.uncapitalize( String string )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object object, String defaultString)", "modifiers": "public static", "return": "String", "signature": "String toString(Object object, String defaultString)", "full_signature": "public static String toString(Object object, String defaultString)", "class_method_signature": "Str.toString(Object object, String defaultString)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String toString(Object object)", "full_signature": "public static String toString(Object object)", "class_method_signature": "Str.toString(Object object)", "testcase": false, "constructor": false}, {"identifier": "str", "parameters": "(Object str)", "modifiers": "public static", "return": "String", "signature": "String str(Object str)", "full_signature": "public static String str(Object str)", "class_method_signature": "Str.str(Object str)", "testcase": false, "constructor": false}, {"identifier": "startsWithItemInCollection", "parameters": "(String name, Collection<String> startsWithList)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithItemInCollection(String name, Collection<String> startsWithList)", "full_signature": "public static boolean startsWithItemInCollection(String name, Collection<String> startsWithList)", "class_method_signature": "Str.startsWithItemInCollection(String name, Collection<String> startsWithList)", "testcase": false, "constructor": false}, {"identifier": "readable", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String readable(String s)", "full_signature": "public static String readable(String s)", "class_method_signature": "Str.readable(String s)", "testcase": false, "constructor": false}, {"identifier": "quote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String quote(String s)", "full_signature": "public static String quote(String s)", "class_method_signature": "Str.quote(String s)", "testcase": false, "constructor": false}, {"identifier": "singleQuote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String singleQuote(String s)", "full_signature": "public static String singleQuote(String s)", "class_method_signature": "Str.singleQuote(String s)", "testcase": false, "constructor": false}, {"identifier": "doubleQuote", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String doubleQuote(String s)", "full_signature": "public static String doubleQuote(String s)", "class_method_signature": "Str.doubleQuote(String s)", "testcase": false, "constructor": false}, {"identifier": "str", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String str(byte[] bytes)", "full_signature": "public static String str(byte[] bytes)", "class_method_signature": "Str.str(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "num", "parameters": "(Number count)", "modifiers": "public static", "return": "String", "signature": "String num(Number count)", "full_signature": "public static String num(Number count)", "class_method_signature": "Str.num(Number count)", "testcase": false, "constructor": false}, {"identifier": "println", "parameters": "(String message)", "modifiers": "public static", "return": "void", "signature": "void println(String message)", "full_signature": "public static void println(String message)", "class_method_signature": "Str.println(String message)", "testcase": false, "constructor": false}, {"identifier": "sputl", "parameters": "(Object... messages)", "modifiers": "public static", "return": "String", "signature": "String sputl(Object... messages)", "full_signature": "public static String sputl(Object... messages)", "class_method_signature": "Str.sputl(Object... messages)", "testcase": false, "constructor": false}, {"identifier": "sputs", "parameters": "(Object... messages)", "modifiers": "public static", "return": "String", "signature": "String sputs(Object... messages)", "full_signature": "public static String sputs(Object... messages)", "class_method_signature": "Str.sputs(Object... messages)", "testcase": false, "constructor": false}, {"identifier": "sputl", "parameters": "(CharBuf buf, Object... messages)", "modifiers": "public static", "return": "CharBuf", "signature": "CharBuf sputl(CharBuf buf, Object... messages)", "full_signature": "public static CharBuf sputl(CharBuf buf, Object... messages)", "class_method_signature": "Str.sputl(CharBuf buf, Object... messages)", "testcase": false, "constructor": false}, {"identifier": "sputs", "parameters": "(CharBuf buf, Object... messages)", "modifiers": "public static", "return": "CharBuf", "signature": "CharBuf sputs(CharBuf buf, Object... messages)", "full_signature": "public static CharBuf sputs(CharBuf buf, Object... messages)", "class_method_signature": "Str.sputs(CharBuf buf, Object... messages)", "testcase": false, "constructor": false}, {"identifier": "sputs", "parameters": "(StringBuilder buf, Object... messages)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder sputs(StringBuilder buf, Object... messages)", "full_signature": "public static StringBuilder sputs(StringBuilder buf, Object... messages)", "class_method_signature": "Str.sputs(StringBuilder buf, Object... messages)", "testcase": false, "constructor": false}, {"identifier": "toPrettyJson", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String toPrettyJson(Object object)", "full_signature": "public static String toPrettyJson(Object object)", "class_method_signature": "Str.toPrettyJson(Object object)", "testcase": false, "constructor": false}, {"identifier": "toPrettyJsonWithTypes", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String toPrettyJsonWithTypes(Object object)", "full_signature": "public static String toPrettyJsonWithTypes(Object object)", "class_method_signature": "Str.toPrettyJsonWithTypes(Object object)", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/core/Str.java"}, "focal_method": {"identifier": "insideOf", "parameters": "(String start, String inStr, String end)", "modifiers": "public static", "return": "boolean", "body": "public static boolean insideOf(String start, String inStr, String end) {\n        return Chr.insideOf(FastStringUtils.toCharArray(start), FastStringUtils.toCharArray(inStr), FastStringUtils.toCharArray(end));\n    }", "signature": "boolean insideOf(String start, String inStr, String end)", "full_signature": "public static boolean insideOf(String start, String inStr, String end)", "class_method_signature": "Str.insideOf(String start, String inStr, String end)", "testcase": false, "constructor": false, "invocations": ["insideOf", "toCharArray", "toCharArray", "toCharArray"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}