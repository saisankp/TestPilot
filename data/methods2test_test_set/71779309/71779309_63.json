{"test_class": {"identifier": "TestALU", "superclass": "", "interfaces": "", "fields": [{"original_string": "ALU ALU = new ALU();", "modifier": "", "type": "ALU", "declarator": "ALU = new ALU()", "var_name": "ALU"}], "file": "Computer Organization and System Architecture/ALUSimulator/src/TestALU.java"}, "test_case": {"identifier": "testIntegerDivision2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIntegerDivision2(){\n\t\tassertEquals(\"NaN\",ALU.integerDivision(\"1000\", \"000\", 4));\n\t}", "signature": "void testIntegerDivision2()", "full_signature": "@Test public void testIntegerDivision2()", "class_method_signature": "TestALU.testIntegerDivision2()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "integerDivision"]}, "focal_class": {"identifier": "ALU", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final BinaryOperator<Boolean> booleanAnd = (x,y)->x&&y;", "modifier": "public static final", "type": "BinaryOperator<Boolean>", "declarator": "booleanAnd = (x,y)->x&&y", "var_name": "booleanAnd"}, {"original_string": "public static final BinaryOperator<Boolean> booleanOr = (x,y)->x||y;", "modifier": "public static final", "type": "BinaryOperator<Boolean>", "declarator": "booleanOr = (x,y)->x||y", "var_name": "booleanOr"}, {"original_string": "public static final BinaryOperator<Boolean> booleanXOR = (x,y)->xor(x, y);", "modifier": "public static final", "type": "BinaryOperator<Boolean>", "declarator": "booleanXOR = (x,y)->xor(x, y)", "var_name": "booleanXOR"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ALU.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "floatIsInfinity", "parameters": "(String input, int eLength, int sLength)", "modifiers": "public static final", "return": "boolean", "signature": "boolean floatIsInfinity(String input, int eLength, int sLength)", "full_signature": "public static final boolean floatIsInfinity(String input, int eLength, int sLength)", "class_method_signature": "ALU.floatIsInfinity(String input, int eLength, int sLength)", "testcase": false, "constructor": false}, {"identifier": "complementLength", "parameters": "(String binary, int length)", "modifiers": "public static final", "return": "String", "signature": "String complementLength(String binary, int length)", "full_signature": "public static final String complementLength(String binary, int length)", "class_method_signature": "ALU.complementLength(String binary, int length)", "testcase": false, "constructor": false}, {"identifier": "repeatedString", "parameters": "(String str, int times)", "modifiers": "public static final", "return": "String", "signature": "String repeatedString(String str, int times)", "full_signature": "public static final String repeatedString(String str, int times)", "class_method_signature": "ALU.repeatedString(String str, int times)", "testcase": false, "constructor": false}, {"identifier": "bitOp", "parameters": "(String oneBitOperand1, String oneBitOperand2, BinaryOperator<Boolean> op)", "modifiers": "public static final", "return": "String", "signature": "String bitOp(String oneBitOperand1, String oneBitOperand2, BinaryOperator<Boolean> op)", "full_signature": "public static final String bitOp(String oneBitOperand1, String oneBitOperand2, BinaryOperator<Boolean> op)", "class_method_signature": "ALU.bitOp(String oneBitOperand1, String oneBitOperand2, BinaryOperator<Boolean> op)", "testcase": false, "constructor": false}, {"identifier": "isSignTheSame", "parameters": "(String binary1, String binary2)", "modifiers": "public static final", "return": "boolean", "signature": "boolean isSignTheSame(String binary1, String binary2)", "full_signature": "public static final boolean isSignTheSame(String binary1, String binary2)", "class_method_signature": "ALU.isSignTheSame(String binary1, String binary2)", "testcase": false, "constructor": false}, {"identifier": "movePoint", "parameters": "(String operand, int offset)", "modifiers": "public static", "return": "String", "signature": "String movePoint(String operand, int offset)", "full_signature": "public static String movePoint(String operand, int offset)", "class_method_signature": "ALU.movePoint(String operand, int offset)", "testcase": false, "constructor": false}, {"identifier": "charOp", "parameters": "(BinaryOperator<Boolean> op, Character... bits)", "modifiers": "public static final", "return": "char", "signature": "char charOp(BinaryOperator<Boolean> op, Character... bits)", "full_signature": "public static final char charOp(BinaryOperator<Boolean> op, Character... bits)", "class_method_signature": "ALU.charOp(BinaryOperator<Boolean> op, Character... bits)", "testcase": false, "constructor": false}, {"identifier": "stringOp", "parameters": "(String operand1, String operand2, BinaryOperator<Boolean> op)", "modifiers": "public static final", "return": "String", "signature": "String stringOp(String operand1, String operand2, BinaryOperator<Boolean> op)", "full_signature": "public static final String stringOp(String operand1, String operand2, BinaryOperator<Boolean> op)", "class_method_signature": "ALU.stringOp(String operand1, String operand2, BinaryOperator<Boolean> op)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(boolean operand1, boolean operand2)", "modifiers": "public static final", "return": "boolean", "signature": "boolean xor(boolean operand1, boolean operand2)", "full_signature": "public static final boolean xor(boolean operand1, boolean operand2)", "class_method_signature": "ALU.xor(boolean operand1, boolean operand2)", "testcase": false, "constructor": false}, {"identifier": "minBinaryLong", "parameters": "(int number)", "modifiers": "public static", "return": "int", "signature": "int minBinaryLong(int number)", "full_signature": "public static int minBinaryLong(int number)", "class_method_signature": "ALU.minBinaryLong(int number)", "testcase": false, "constructor": false}, {"identifier": "integerBinRepresentationInMinLength", "parameters": "(String decimalNumber)", "modifiers": "public static", "return": "String", "signature": "String integerBinRepresentationInMinLength(String decimalNumber)", "full_signature": "public static String integerBinRepresentationInMinLength(String decimalNumber)", "class_method_signature": "ALU.integerBinRepresentationInMinLength(String decimalNumber)", "testcase": false, "constructor": false}, {"identifier": "get2sComplement", "parameters": "(String binaryNumber, boolean isNegative)", "modifiers": "public static", "return": "String", "signature": "String get2sComplement(String binaryNumber, boolean isNegative)", "full_signature": "public static String get2sComplement(String binaryNumber, boolean isNegative)", "class_method_signature": "ALU.get2sComplement(String binaryNumber, boolean isNegative)", "testcase": false, "constructor": false}, {"identifier": "integerRepresentation", "parameters": "(String number, int length)", "modifiers": "public", "return": "String", "signature": "String integerRepresentation(String number, int length)", "full_signature": "public String integerRepresentation(String number, int length)", "class_method_signature": "ALU.integerRepresentation(String number, int length)", "testcase": false, "constructor": false}, {"identifier": "floatRepresentation", "parameters": "(String number, int eLength, int sLength)", "modifiers": "public", "return": "String", "signature": "String floatRepresentation(String number, int eLength, int sLength)", "full_signature": "public String floatRepresentation(String number, int eLength, int sLength)", "class_method_signature": "ALU.floatRepresentation(String number, int eLength, int sLength)", "testcase": false, "constructor": false}, {"identifier": "ieee754", "parameters": "(String number, int length)", "modifiers": "public", "return": "String", "signature": "String ieee754(String number, int length)", "full_signature": "public String ieee754(String number, int length)", "class_method_signature": "ALU.ieee754(String number, int length)", "testcase": false, "constructor": false}, {"identifier": "integerTrueValue", "parameters": "(String operand)", "modifiers": "public", "return": "String", "signature": "String integerTrueValue(String operand)", "full_signature": "public String integerTrueValue(String operand)", "class_method_signature": "ALU.integerTrueValue(String operand)", "testcase": false, "constructor": false}, {"identifier": "floatTrueValue", "parameters": "(String operand, int eLength, int sLength)", "modifiers": "public", "return": "String", "signature": "String floatTrueValue(String operand, int eLength, int sLength)", "full_signature": "public String floatTrueValue(String operand, int eLength, int sLength)", "class_method_signature": "ALU.floatTrueValue(String operand, int eLength, int sLength)", "testcase": false, "constructor": false}, {"identifier": "negation", "parameters": "(String operand)", "modifiers": "public", "return": "String", "signature": "String negation(String operand)", "full_signature": "public String negation(String operand)", "class_method_signature": "ALU.negation(String operand)", "testcase": false, "constructor": false}, {"identifier": "leftShift", "parameters": "(String operand, int n)", "modifiers": "public", "return": "String", "signature": "String leftShift(String operand, int n)", "full_signature": "public String leftShift(String operand, int n)", "class_method_signature": "ALU.leftShift(String operand, int n)", "testcase": false, "constructor": false}, {"identifier": "logRightShift", "parameters": "(String operand, int n)", "modifiers": "public", "return": "String", "signature": "String logRightShift(String operand, int n)", "full_signature": "public String logRightShift(String operand, int n)", "class_method_signature": "ALU.logRightShift(String operand, int n)", "testcase": false, "constructor": false}, {"identifier": "ariRightShift", "parameters": "(String operand, int n)", "modifiers": "public", "return": "String", "signature": "String ariRightShift(String operand, int n)", "full_signature": "public String ariRightShift(String operand, int n)", "class_method_signature": "ALU.ariRightShift(String operand, int n)", "testcase": false, "constructor": false}, {"identifier": "fullAdder", "parameters": "(char x, char y, char c)", "modifiers": "public", "return": "String", "signature": "String fullAdder(char x, char y, char c)", "full_signature": "public String fullAdder(char x, char y, char c)", "class_method_signature": "ALU.fullAdder(char x, char y, char c)", "testcase": false, "constructor": false}, {"identifier": "claAdder", "parameters": "(String operand1, String operand2, char c)", "modifiers": "public", "return": "String", "signature": "String claAdder(String operand1, String operand2, char c)", "full_signature": "public String claAdder(String operand1, String operand2, char c)", "class_method_signature": "ALU.claAdder(String operand1, String operand2, char c)", "testcase": false, "constructor": false}, {"identifier": "oneAdder", "parameters": "(String operand)", "modifiers": "public", "return": "String", "signature": "String oneAdder(String operand)", "full_signature": "public String oneAdder(String operand)", "class_method_signature": "ALU.oneAdder(String operand)", "testcase": false, "constructor": false}, {"identifier": "adder", "parameters": "(String operand1, String operand2, char c, int length)", "modifiers": "public", "return": "String", "signature": "String adder(String operand1, String operand2, char c, int length)", "full_signature": "public String adder(String operand1, String operand2, char c, int length)", "class_method_signature": "ALU.adder(String operand1, String operand2, char c, int length)", "testcase": false, "constructor": false}, {"identifier": "integerAddition", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String integerAddition(String operand1, String operand2, int length)", "full_signature": "public String integerAddition(String operand1, String operand2, int length)", "class_method_signature": "ALU.integerAddition(String operand1, String operand2, int length)", "testcase": false, "constructor": false}, {"identifier": "integerSubtraction", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String integerSubtraction(String operand1, String operand2, int length)", "full_signature": "public String integerSubtraction(String operand1, String operand2, int length)", "class_method_signature": "ALU.integerSubtraction(String operand1, String operand2, int length)", "testcase": false, "constructor": false}, {"identifier": "integerMultiplication", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String integerMultiplication(String operand1, String operand2, int length)", "full_signature": "public String integerMultiplication(String operand1, String operand2, int length)", "class_method_signature": "ALU.integerMultiplication(String operand1, String operand2, int length)", "testcase": false, "constructor": false}, {"identifier": "integerDivision", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String integerDivision(String operand1, String operand2, int length)", "full_signature": "public String integerDivision(String operand1, String operand2, int length)", "class_method_signature": "ALU.integerDivision(String operand1, String operand2, int length)", "testcase": false, "constructor": false}, {"identifier": "signedAddition", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String signedAddition(String operand1, String operand2, int length)", "full_signature": "public String signedAddition(String operand1, String operand2, int length)", "class_method_signature": "ALU.signedAddition(String operand1, String operand2, int length)", "testcase": false, "constructor": false}, {"identifier": "floatAddition", "parameters": "(String operand1, String operand2, int eLength, int sLength, int gLength)", "modifiers": "public", "return": "String", "signature": "String floatAddition(String operand1, String operand2, int eLength, int sLength, int gLength)", "full_signature": "public String floatAddition(String operand1, String operand2, int eLength, int sLength, int gLength)", "class_method_signature": "ALU.floatAddition(String operand1, String operand2, int eLength, int sLength, int gLength)", "testcase": false, "constructor": false}, {"identifier": "floatSubtraction", "parameters": "(String operand1, String operand2, int eLength, int sLength, int gLength)", "modifiers": "public", "return": "String", "signature": "String floatSubtraction(String operand1, String operand2, int eLength, int sLength, int gLength)", "full_signature": "public String floatSubtraction(String operand1, String operand2, int eLength, int sLength, int gLength)", "class_method_signature": "ALU.floatSubtraction(String operand1, String operand2, int eLength, int sLength, int gLength)", "testcase": false, "constructor": false}, {"identifier": "floatMultiplication", "parameters": "(String operand1, String operand2, int eLength, int sLength)", "modifiers": "public", "return": "String", "signature": "String floatMultiplication(String operand1, String operand2, int eLength, int sLength)", "full_signature": "public String floatMultiplication(String operand1, String operand2, int eLength, int sLength)", "class_method_signature": "ALU.floatMultiplication(String operand1, String operand2, int eLength, int sLength)", "testcase": false, "constructor": false}, {"identifier": "floatDivision", "parameters": "(String operand1, String operand2, int eLength, int sLength)", "modifiers": "public", "return": "String", "signature": "String floatDivision(String operand1, String operand2, int eLength, int sLength)", "full_signature": "public String floatDivision(String operand1, String operand2, int eLength, int sLength)", "class_method_signature": "ALU.floatDivision(String operand1, String operand2, int eLength, int sLength)", "testcase": false, "constructor": false}, {"identifier": "trueFormDivision", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "signature": "String trueFormDivision(String operand1, String operand2, int length)", "full_signature": "public String trueFormDivision(String operand1, String operand2, int length)", "class_method_signature": "ALU.trueFormDivision(String operand1, String operand2, int length)", "testcase": false, "constructor": false}], "file": "Computer Organization and System Architecture/ALUSimulator/src/ALU.java"}, "focal_method": {"identifier": "integerDivision", "parameters": "(String operand1, String operand2, int length)", "modifiers": "public", "return": "String", "body": "public String integerDivision (String operand1, String operand2, int length) {\n\t\t\n\t\tString formattedOperand1 = complementLength(operand1, length);\n\t\tString formattedOperand2 = complementLength(operand2, length);\n\t\t\n\t\tif (formattedOperand2.indexOf(\"1\")==-1){\n\t\t\treturn \"NaN\";\n\t\t}\n\t\t\n\t\tString thatTwoRegisters = repeatedString(formattedOperand1.substring(0,1), length)+formattedOperand1;\n\t\tString minusOperand2 = negation(formattedOperand2);\n\t\t\n\t\t\n\t\tboolean isOverflow = false;\n\t\tboolean nextPlus = false; //indicates next op, true for plus and false for minus\n\t\tchar Qn;\n\t\t//calculates Qn and judges if overflow\n\t\tif (isSignTheSame(formattedOperand1, formattedOperand2)){\n\t\t\tthatTwoRegisters = adder(thatTwoRegisters.substring(0,length), minusOperand2, '1', length).substring(1) + thatTwoRegisters.substring(length);\n\t\t\tif (isSignTheSame(thatTwoRegisters, formattedOperand2)){\n\t\t\t\tQn = '1';\n\t\t\t\tnextPlus = false;\n\t\t\t\tisOverflow = true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tQn = '0';\n\t\t\t\tnextPlus = true;\n\t\t\t}\n\t\t}else{\n\t\t\tthatTwoRegisters = adder(thatTwoRegisters.substring(0,length), formattedOperand2, '0',length).substring(1) + thatTwoRegisters.substring(length);\n\t\t\tif (isSignTheSame(thatTwoRegisters, formattedOperand2)){\n\t\t\t\tQn = '1';\n\t\t\t\tnextPlus = false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tQn = '0';\n\t\t\t\tisOverflow = true;\n\t\t\t\tnextPlus = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthatTwoRegisters = thatTwoRegisters.substring(1)+Qn;\n\t\t\n\t\t//cycle\n\t\tfor(int i=0;i<length;i++){\n\t\t\tif (!nextPlus){\n\t\t\t\tthatTwoRegisters =  adder(thatTwoRegisters.substring(0, length), minusOperand2, '1', length).substring(1) + thatTwoRegisters.substring(length);\n\n\t\t\t}else{\n\t\t\t\tthatTwoRegisters = adder(thatTwoRegisters.substring(0, length), formattedOperand2, '0', length).substring(1) + thatTwoRegisters.substring(length);\n\t\t\t}\n\t\t\tif (isSignTheSame(thatTwoRegisters, formattedOperand2)){\n\t\t\t\tQn='1';\n\t\t\t\tnextPlus = false;\n\t\t\t}else{\n\t\t\t\tQn='0';\n\t\t\t\tnextPlus = true;\n\t\t\t}\n\t\t\tif (i!=length-1){\n\t\t\t\tthatTwoRegisters = thatTwoRegisters.substring(1) + Qn;\n\t\t\t}\n\n\t\t}\n\t\t\n\t\t//cycle ends\n\t\tString left = thatTwoRegisters.substring(0,length);\n\t\tString result = thatTwoRegisters.substring(length+1)+Qn;\n\n\t\t\n\t\tif (!isSignTheSame(formattedOperand1, formattedOperand2)){\n\t\t\tresult = oneAdder(result).substring(1);\n\t\t}\n\n\t\t\n\t\tif (!isSignTheSame(left, formattedOperand1)){\n\t\t\tif (isSignTheSame(formattedOperand1,formattedOperand2)){\n\t\t\t\tleft = adder(left, formattedOperand2, '0', length).substring(1);\n\t\t\t}else{\n\t\t\t\tleft = adder(left, minusOperand2, '1',length).substring(1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//handle left=operand2 -6/-3=2\n\t\tif (integerSubtraction(left, operand2, length).substring(1).equals(repeatedString(\"0\", length))){\n\t\t\tleft = repeatedString(\"0\",length);\n\t\t\tresult = oneAdder(result).substring(1);\n\t\t}\n\t\t\n\t\t//handle left=-operand2 -6/3=-2\n\t\tif (integerAddition(left, operand2, length).substring(1).equals(repeatedString(\"0\", length))){\n\t\t\tleft = repeatedString(\"0\",length);\n\t\t\tresult = integerAddition(result, repeatedString(\"1\", length),length).substring(1);\n\t\t}\n\t\t\n\t\tisOverflow = isOverflow || (result.equals(\"1\"+repeatedString(\"0\", length-1)));\n\t\t\n\t\t\n\t\treturn (isOverflow ? \"1\" : \"0\") + result+left;\n\t\n\t}", "signature": "String integerDivision(String operand1, String operand2, int length)", "full_signature": "public String integerDivision(String operand1, String operand2, int length)", "class_method_signature": "ALU.integerDivision(String operand1, String operand2, int length)", "testcase": false, "constructor": false, "invocations": ["complementLength", "complementLength", "indexOf", "repeatedString", "substring", "negation", "isSignTheSame", "substring", "adder", "substring", "substring", "isSignTheSame", "substring", "adder", "substring", "substring", "isSignTheSame", "substring", "substring", "adder", "substring", "substring", "substring", "adder", "substring", "substring", "isSignTheSame", "substring", "substring", "substring", "isSignTheSame", "substring", "oneAdder", "isSignTheSame", "isSignTheSame", "substring", "adder", "substring", "adder", "equals", "substring", "integerSubtraction", "repeatedString", "repeatedString", "substring", "oneAdder", "equals", "substring", "integerAddition", "repeatedString", "repeatedString", "substring", "integerAddition", "repeatedString", "equals", "repeatedString"]}, "repository": {"repo_id": 71779309, "url": "https://github.com/ddadaal/Homework", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 28192, "license": "licensed"}}