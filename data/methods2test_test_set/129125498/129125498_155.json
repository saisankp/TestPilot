{"test_class": {"identifier": "EdmxDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetectorTest.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testName() {\n        val hyperparams = new EdmxHyperparams()\n                .setDelta(6)\n                .setNumPerms(199)\n                .setStrongAlpha(0.01)\n                .setWeakAlpha(0.05);\n        val trusted = true;\n        val detectorUnderTest = new EdmxDetector(UUID.randomUUID(), hyperparams, trusted);\n\n        assertNotNull(detectorUnderTest.getName());\n        assertEquals(\"edmx\", detectorUnderTest.getName());\n    }", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "EdmxDetectorTest.testName()", "testcase": true, "constructor": false, "invocations": ["setWeakAlpha", "setStrongAlpha", "setNumPerms", "setDelta", "randomUUID", "assertNotNull", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "EdmxDetector", "superclass": "", "interfaces": "implements BreakoutDetector", "fields": [{"original_string": "private final String NAME = \"edmx\";", "modifier": "private final", "type": "String", "declarator": "NAME = \"edmx\"", "var_name": "NAME"}, {"original_string": "@Getter\n    private UUID uuid;", "modifier": "@Getter\n    private", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "@Getter\n    private boolean trusted;", "modifier": "@Getter\n    private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "@Getter\n    private EdmxHyperparams hyperparams;", "modifier": "@Getter\n    private", "type": "EdmxHyperparams", "declarator": "hyperparams", "var_name": "hyperparams"}, {"original_string": "private final EvictingQueue<MetricData> buffer;", "modifier": "private final", "type": "EvictingQueue<MetricData>", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "EdmxDetector", "parameters": "(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "modifiers": "public", "return": "", "signature": " EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "full_signature": "public  EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "class_method_signature": "EdmxDetector.EdmxDetector(UUID uuid, EdmxHyperparams hyperparams, boolean trusted)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "signature": "DetectorResult detect(MetricData metricData)", "full_signature": "@Override public DetectorResult detect(MetricData metricData)", "class_method_signature": "EdmxDetector.detect(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "EdmxDetector.getName()", "testcase": false, "constructor": false}, {"identifier": "calculateAnomalyLevel", "parameters": "(EdmxEstimate estimate)", "modifiers": "private", "return": "AnomalyLevel", "signature": "AnomalyLevel calculateAnomalyLevel(EdmxEstimate estimate)", "full_signature": "private AnomalyLevel calculateAnomalyLevel(EdmxEstimate estimate)", "class_method_signature": "EdmxDetector.calculateAnomalyLevel(EdmxEstimate estimate)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/breakout/algo/edmx/EdmxDetector.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return NAME;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "EdmxDetector.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}