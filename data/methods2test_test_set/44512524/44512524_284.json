{"test_class": {"identifier": "TableMapStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockElasticsearchServer elasticsearchServer;", "modifier": "private", "type": "MockElasticsearchServer", "declarator": "elasticsearchServer", "var_name": "elasticsearchServer"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private ElasticsearchConnection elasticsearchConnection;", "modifier": "private", "type": "ElasticsearchConnection", "declarator": "elasticsearchConnection", "var_name": "elasticsearchConnection"}, {"original_string": "private TableMapStore tableMapStore;", "modifier": "private", "type": "TableMapStore", "declarator": "tableMapStore", "var_name": "tableMapStore"}, {"original_string": "public static final String TEST_TABLE = \"test-table\";", "modifier": "public static final", "type": "String", "declarator": "TEST_TABLE = \"test-table\"", "var_name": "TEST_TABLE"}, {"original_string": "public static final String TABLE_META_INDEX = \"table-meta\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_META_INDEX = \"table-meta\"", "var_name": "TABLE_META_INDEX"}, {"original_string": "public static final String TABLE_META_TYPE = \"table-meta\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_META_TYPE = \"table-meta\"", "var_name": "TABLE_META_TYPE"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/TableMapStoreTest.java"}, "test_case": {"identifier": "testDeleteAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteAll() throws Exception {\n        Map<String, Table> tables = new HashMap<String, Table>();\n        for (int i = 0; i < 10; i++) {\n            Table table = new Table();\n            table.setName(UUID.randomUUID().toString());\n            table.setTtl(20);\n            tables.put(table.getName(), table);\n        }\n        tableMapStore.storeAll(tables);\n        for (String name : tables.keySet()) {\n            GetResponse response = elasticsearchConnection.getClient().prepareGet()\n                    .setIndex(TABLE_META_INDEX)\n                    .setType(TABLE_META_TYPE)\n                    .setId(name)\n                    .execute()\n                    .actionGet();\n            assertTrue(response.isExists());\n        }\n\n        tableMapStore.deleteAll(tables.keySet());\n        for (String name : tables.keySet()) {\n            GetResponse response = elasticsearchConnection.getClient().prepareGet()\n                    .setIndex(TABLE_META_INDEX)\n                    .setType(TABLE_META_TYPE)\n                    .setId(name)\n                    .execute()\n                    .actionGet();\n            assertFalse(response.isExists());\n        }\n\n    }", "signature": "void testDeleteAll()", "full_signature": "@Test public void testDeleteAll()", "class_method_signature": "TableMapStoreTest.testDeleteAll()", "testcase": true, "constructor": false, "invocations": ["setName", "toString", "randomUUID", "setTtl", "put", "getName", "storeAll", "keySet", "actionGet", "execute", "setId", "setType", "setIndex", "prepareGet", "getClient", "assertTrue", "isExists", "deleteAll", "keySet", "keySet", "actionGet", "execute", "setId", "setType", "setIndex", "prepareGet", "getClient", "assertFalse", "isExists"]}, "focal_class": {"identifier": "TableMapStore", "superclass": "", "interfaces": "implements MapStore<String, Table>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TableMapStore.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TableMapStore.class.getSimpleName())", "var_name": "logger"}, {"original_string": "public static final String TABLE_META_INDEX = \"table-meta\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_META_INDEX = \"table-meta\"", "var_name": "TABLE_META_INDEX"}, {"original_string": "public static final String TABLE_META_TYPE = \"table-meta\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_META_TYPE = \"table-meta\"", "var_name": "TABLE_META_TYPE"}, {"original_string": "private final ElasticsearchConnection elasticsearchConnection;", "modifier": "private final", "type": "ElasticsearchConnection", "declarator": "elasticsearchConnection", "var_name": "elasticsearchConnection"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "factory", "parameters": "(ElasticsearchConnection elasticsearchConnection)", "modifiers": "public static", "return": "Factory", "signature": "Factory factory(ElasticsearchConnection elasticsearchConnection)", "full_signature": "public static Factory factory(ElasticsearchConnection elasticsearchConnection)", "class_method_signature": "TableMapStore.factory(ElasticsearchConnection elasticsearchConnection)", "testcase": false, "constructor": false}, {"identifier": "TableMapStore", "parameters": "(ElasticsearchConnection elasticsearchConnection)", "modifiers": "public", "return": "", "signature": " TableMapStore(ElasticsearchConnection elasticsearchConnection)", "full_signature": "public  TableMapStore(ElasticsearchConnection elasticsearchConnection)", "class_method_signature": "TableMapStore.TableMapStore(ElasticsearchConnection elasticsearchConnection)", "testcase": false, "constructor": true}, {"identifier": "store", "parameters": "(String key, Table value)", "modifiers": "@Override public", "return": "void", "signature": "void store(String key, Table value)", "full_signature": "@Override public void store(String key, Table value)", "class_method_signature": "TableMapStore.store(String key, Table value)", "testcase": false, "constructor": false}, {"identifier": "storeAll", "parameters": "(Map<String, Table> map)", "modifiers": "@Override public", "return": "void", "signature": "void storeAll(Map<String, Table> map)", "full_signature": "@Override public void storeAll(Map<String, Table> map)", "class_method_signature": "TableMapStore.storeAll(Map<String, Table> map)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String key)", "full_signature": "@Override public void delete(String key)", "class_method_signature": "TableMapStore.delete(String key)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(Collection<String> keys)", "modifiers": "@Override public", "return": "void", "signature": "void deleteAll(Collection<String> keys)", "full_signature": "@Override public void deleteAll(Collection<String> keys)", "class_method_signature": "TableMapStore.deleteAll(Collection<String> keys)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(String key)", "modifiers": "@Override public", "return": "Table", "signature": "Table load(String key)", "full_signature": "@Override public Table load(String key)", "class_method_signature": "TableMapStore.load(String key)", "testcase": false, "constructor": false}, {"identifier": "loadAll", "parameters": "(Collection<String> keys)", "modifiers": "@Override public", "return": "Map<String, Table>", "signature": "Map<String, Table> loadAll(Collection<String> keys)", "full_signature": "@Override public Map<String, Table> loadAll(Collection<String> keys)", "class_method_signature": "TableMapStore.loadAll(Collection<String> keys)", "testcase": false, "constructor": false}, {"identifier": "loadAllKeys", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> loadAllKeys()", "full_signature": "@Override public Set<String> loadAllKeys()", "class_method_signature": "TableMapStore.loadAllKeys()", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/impl/TableMapStore.java"}, "focal_method": {"identifier": "deleteAll", "parameters": "(Collection<String> keys)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deleteAll(Collection<String> keys) {\n        logger.info(String.format(\"Delete all called for multiple values: %s\", keys));\n        BulkRequestBuilder bulRequestBuilder = elasticsearchConnection.getClient().prepareBulk().setConsistencyLevel(WriteConsistencyLevel.ALL).setRefresh(true);\n        for (String key : keys) {\n            bulRequestBuilder.add(elasticsearchConnection.getClient()\n                    .prepareDelete(TABLE_META_INDEX, TABLE_META_TYPE, key));\n        }\n        bulRequestBuilder.execute().actionGet();\n        logger.info(String.format(\"Deleted multiple values: %s\", keys));\n    }", "signature": "void deleteAll(Collection<String> keys)", "full_signature": "@Override public void deleteAll(Collection<String> keys)", "class_method_signature": "TableMapStore.deleteAll(Collection<String> keys)", "testcase": false, "constructor": false, "invocations": ["info", "format", "setRefresh", "setConsistencyLevel", "prepareBulk", "getClient", "add", "prepareDelete", "getClient", "actionGet", "execute", "info", "format"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}