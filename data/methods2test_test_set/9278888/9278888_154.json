{"test_class": {"identifier": "FinishSpanTest", "superclass": "extends ITTracingFilter", "interfaces": "", "fields": [{"original_string": "DubboClientRequest clientRequest =\n      new DubboClientRequest(mock(Invoker.class), mock(Invocation.class), Collections.emptyMap());", "modifier": "", "type": "DubboClientRequest", "declarator": "clientRequest =\n      new DubboClientRequest(mock(Invoker.class), mock(Invocation.class), Collections.emptyMap())", "var_name": "clientRequest"}, {"original_string": "DubboServerRequest serverRequest =\n      new DubboServerRequest(mock(Invoker.class), mock(Invocation.class));", "modifier": "", "type": "DubboServerRequest", "declarator": "serverRequest =\n      new DubboServerRequest(mock(Invoker.class), mock(Invocation.class))", "var_name": "serverRequest"}, {"original_string": "TracingFilter filter;", "modifier": "", "type": "TracingFilter", "declarator": "filter", "var_name": "filter"}], "file": "instrumentation/dubbo-rpc/src/test/java/brave/dubbo/rpc/FinishSpanTest.java"}, "test_case": {"identifier": "finish_result_but_null_error_DubboServerRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void finish_result_but_null_error_DubboServerRequest() {\n    Span span = tracing.tracer().nextSpan().kind(Span.Kind.SERVER).start();\n\n    FinishSpan.finish(filter, serverRequest, mock(Result.class), null, span);\n\n    testSpanHandler.takeRemoteSpan(Kind.SERVER);\n  }", "signature": "void finish_result_but_null_error_DubboServerRequest()", "full_signature": "@Test public void finish_result_but_null_error_DubboServerRequest()", "class_method_signature": "FinishSpanTest.finish_result_but_null_error_DubboServerRequest()", "testcase": true, "constructor": false, "invocations": ["start", "kind", "nextSpan", "tracer", "finish", "mock", "takeRemoteSpan"]}, "focal_class": {"identifier": "FinishSpan", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Span span;", "modifier": "final", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "final Result result;", "modifier": "final", "type": "Result", "declarator": "result", "var_name": "result"}], "methods": [{"identifier": "finish", "parameters": "(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "modifiers": "static", "return": "void", "signature": "void finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "full_signature": "static void finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "class_method_signature": "FinishSpan.finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(TracingFilter filter, DubboRequest request, Result result, Span span)", "modifiers": "static", "return": "FinishSpan", "signature": "FinishSpan create(TracingFilter filter, DubboRequest request, Result result, Span span)", "full_signature": "static FinishSpan create(TracingFilter filter, DubboRequest request, Result result, Span span)", "class_method_signature": "FinishSpan.create(TracingFilter filter, DubboRequest request, Result result, Span span)", "testcase": false, "constructor": false}, {"identifier": "FinishSpan", "parameters": "(Span span, Result result)", "modifiers": "", "return": "", "signature": " FinishSpan(Span span, Result result)", "full_signature": "  FinishSpan(Span span, Result result)", "class_method_signature": "FinishSpan.FinishSpan(Span span, Result result)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(@Nullable Object unused, @Nullable Throwable error)", "modifiers": "public abstract", "return": "void", "signature": "void accept(@Nullable Object unused, @Nullable Throwable error)", "full_signature": "public abstract void accept(@Nullable Object unused, @Nullable Throwable error)", "class_method_signature": "FinishSpan.accept(@Nullable Object unused, @Nullable Throwable error)", "testcase": false, "constructor": false}], "file": "instrumentation/dubbo-rpc/src/main/java/brave/dubbo/rpc/FinishSpan.java"}, "focal_method": {"identifier": "finish", "parameters": "(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "modifiers": "static", "return": "void", "body": "static void finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span) {\n    if (request instanceof RpcClientRequest) {\n      filter.clientHandler.handleReceive(\n        new DubboClientResponse((DubboClientRequest) request, result, error), span);\n    } else {\n      filter.serverHandler.handleSend(\n        new DubboServerResponse((DubboServerRequest) request, result, error), span);\n    }\n  }", "signature": "void finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "full_signature": "static void finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "class_method_signature": "FinishSpan.finish(TracingFilter filter,\n    DubboRequest request, @Nullable Result result, @Nullable Throwable error, Span span)", "testcase": false, "constructor": false, "invocations": ["handleReceive", "handleSend"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}