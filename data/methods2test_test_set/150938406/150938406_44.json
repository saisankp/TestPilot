{"test_class": {"identifier": "SegmentMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/nlp/SegmentMapperTest.java"}, "test_case": {"identifier": "test2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test2() throws Exception {\n\t\tTableSchema schema = new TableSchema(new String[] {\"sentence\"}, new TypeInformation <?>[] {Types.STRING()});\n\t\tString[] dictArray = new String[] {\"\u4f4e\u98ce\u9669\"};\n\n\t\tParams params = new Params()\n\t\t\t.set(SegmentParams.SELECTED_COL, \"sentence\")\n\t\t\t.set(SegmentParams.USER_DEFINED_DICT, dictArray);\n\n\t\tSegmentMapper mapper = new SegmentMapper(schema, params);\n\t\tmapper.open();\n\n\t\tassertEquals(mapper.map(Row.of(\"\u6211\u4eec\u8f85\u52a9\u7528\u6237\u7b80\u5355\u5feb\u901f\u4f4e\u6210\u672c\u4f4e\u98ce\u9669\u7684\u5b9e\u73b0\u7cfb\u7edf\u6743\u9650\u5b89\u5168\u7ba1\u7406\")).getField(0),\n\t\t\t\"\u6211\u4eec \u8f85\u52a9 \u7528\u6237 \u7b80\u5355 \u5feb\u901f \u4f4e\u6210\u672c \u4f4e\u98ce\u9669 \u7684 \u5b9e\u73b0 \u7cfb\u7edf \u6743\u9650 \u5b89\u5168 \u7ba1\u7406\");\n\t\tassertEquals(mapper.getOutputSchema(), schema);\n\t}", "signature": "void test2()", "full_signature": "@Test public void test2()", "class_method_signature": "SegmentMapperTest.test2()", "testcase": true, "constructor": false, "invocations": ["STRING", "set", "set", "open", "assertEquals", "", "map", "of", "assertEquals", "getOutputSchema"]}, "focal_class": {"identifier": "SegmentMapper", "superclass": "extends SISOMapper", "interfaces": "", "fields": [{"original_string": "private transient JiebaSegmenter segmentor = null;", "modifier": "private transient", "type": "JiebaSegmenter", "declarator": "segmentor = null", "var_name": "segmentor"}], "methods": [{"identifier": "SegmentMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " SegmentMapper(TableSchema dataSchema, Params params)", "full_signature": "public  SegmentMapper(TableSchema dataSchema, Params params)", "class_method_signature": "SegmentMapper.SegmentMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "SegmentMapper.open()", "testcase": false, "constructor": false}, {"identifier": "mapColumn", "parameters": "(Object input)", "modifiers": "@Override protected", "return": "Object", "signature": "Object mapColumn(Object input)", "full_signature": "@Override protected Object mapColumn(Object input)", "class_method_signature": "SegmentMapper.mapColumn(Object input)", "testcase": false, "constructor": false}, {"identifier": "initOutputColType", "parameters": "()", "modifiers": "@Override protected", "return": "TypeInformation", "signature": "TypeInformation initOutputColType()", "full_signature": "@Override protected TypeInformation initOutputColType()", "class_method_signature": "SegmentMapper.initOutputColType()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/nlp/SegmentMapper.java"}, "focal_method": {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void open(){\n\t\tsegmentor = new JiebaSegmenter();\n\t\tString[] userDefinedDict = this.params.get(SegmentParams.USER_DEFINED_DICT);\n\t\tif (null != userDefinedDict) {\n\t\t\tfor(String word : userDefinedDict){\n\t\t\t\tsegmentor.addUserWord2Dict(word);\n\t\t\t}\n\t\t}\n\t}", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "SegmentMapper.open()", "testcase": false, "constructor": false, "invocations": ["get", "addUserWord2Dict"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}