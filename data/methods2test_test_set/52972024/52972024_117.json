{"test_class": {"identifier": "StrategyStorageWithCacheStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Base/StrategyStorageWithCacheStrategy/src/test/java/info/smart_tools/smartactors/base/strategy/strategy_storage_with_cache_strategy/StrategyStorageWithCacheStrategyTest.java"}, "test_case": {"identifier": "checkExceptionOnRemove", "parameters": "()", "modifiers": "@Test (expected = AdditionDependencyStrategyException.class) public", "return": "void", "body": "@Test (expected = AdditionDependencyStrategyException.class)\n    public void checkExceptionOnRemove()\n            throws Exception {\n        IResolveDependencyStrategy cachedStrategy = new StrategyStorageWithCacheStrategy(null, null);\n        ((IAdditionDependencyStrategy) cachedStrategy).remove(null);\n    }", "signature": "void checkExceptionOnRemove()", "full_signature": "@Test (expected = AdditionDependencyStrategyException.class) public void checkExceptionOnRemove()", "class_method_signature": "StrategyStorageWithCacheStrategyTest.checkExceptionOnRemove()", "testcase": true, "constructor": false, "invocations": ["remove"]}, "focal_class": {"identifier": "StrategyStorageWithCacheStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy, IAdditionDependencyStrategy, ICacheable", "fields": [{"original_string": "private ConcurrentMap<Object, IResolveDependencyStrategy> strategyStorage;", "modifier": "private", "type": "ConcurrentMap<Object, IResolveDependencyStrategy>", "declarator": "strategyStorage", "var_name": "strategyStorage"}, {"original_string": "private ConcurrentMap<Object, IResolveDependencyStrategy> cacheStrategiesMap;", "modifier": "private", "type": "ConcurrentMap<Object, IResolveDependencyStrategy>", "declarator": "cacheStrategiesMap", "var_name": "cacheStrategiesMap"}, {"original_string": "private IFunction argToKeyFunction;", "modifier": "private", "type": "IFunction", "declarator": "argToKeyFunction", "var_name": "argToKeyFunction"}, {"original_string": "private IBiFunction findValueByArgumentFunction;", "modifier": "private", "type": "IBiFunction", "declarator": "findValueByArgumentFunction", "var_name": "findValueByArgumentFunction"}], "methods": [{"identifier": "StrategyStorageWithCacheStrategy", "parameters": "(final IFunction argToKeyFunction, final IBiFunction findValueByArgumentFunction)", "modifiers": "public", "return": "", "signature": " StrategyStorageWithCacheStrategy(final IFunction argToKeyFunction, final IBiFunction findValueByArgumentFunction)", "full_signature": "public  StrategyStorageWithCacheStrategy(final IFunction argToKeyFunction, final IBiFunction findValueByArgumentFunction)", "class_method_signature": "StrategyStorageWithCacheStrategy.StrategyStorageWithCacheStrategy(final IFunction argToKeyFunction, final IBiFunction findValueByArgumentFunction)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(Object... args)", "full_signature": "@Override public T resolve(Object... args)", "class_method_signature": "StrategyStorageWithCacheStrategy.resolve(Object... args)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Object key, IResolveDependencyStrategy value)", "modifiers": "@Override public", "return": "void", "signature": "void register(Object key, IResolveDependencyStrategy value)", "full_signature": "@Override public void register(Object key, IResolveDependencyStrategy value)", "class_method_signature": "StrategyStorageWithCacheStrategy.register(Object key, IResolveDependencyStrategy value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Object key)", "full_signature": "@Override public void remove(Object key)", "class_method_signature": "StrategyStorageWithCacheStrategy.remove(Object key)", "testcase": false, "constructor": false}, {"identifier": "dropCache", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dropCache()", "full_signature": "@Override public void dropCache()", "class_method_signature": "StrategyStorageWithCacheStrategy.dropCache()", "testcase": false, "constructor": false}, {"identifier": "dropCacheFor", "parameters": "(final Object key)", "modifiers": "@Override public", "return": "void", "signature": "void dropCacheFor(final Object key)", "full_signature": "@Override public void dropCacheFor(final Object key)", "class_method_signature": "StrategyStorageWithCacheStrategy.dropCacheFor(final Object key)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Base/StrategyStorageWithCacheStrategy/src/main/java/info/smart_tools/smartactors/base/strategy/strategy_storage_with_cache_strategy/StrategyStorageWithCacheStrategy.java"}, "focal_method": {"identifier": "remove", "parameters": "(Object key)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void remove(Object key)\n            throws AdditionDependencyStrategyException {\n        try {\n            this.dropCacheFor(key);\n            this.strategyStorage.remove(key);\n        } catch (DropCacheException e) {\n            throw new AdditionDependencyStrategyException(e);\n        }\n    }", "signature": "void remove(Object key)", "full_signature": "@Override public void remove(Object key)", "class_method_signature": "StrategyStorageWithCacheStrategy.remove(Object key)", "testcase": false, "constructor": false, "invocations": ["dropCacheFor", "remove"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}