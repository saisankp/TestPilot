{"test_class": {"identifier": "AttachmentConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DatabaseConnector connector;", "modifier": "@Mock", "type": "DatabaseConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "AttachmentConnector attachmentConnector;", "modifier": "", "type": "AttachmentConnector", "declarator": "attachmentConnector", "var_name": "attachmentConnector"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/couchdb/AttachmentConnectorTest.java"}, "test_case": {"identifier": "testDeleteAttachmentsDifferenceOnlyNonAcceptedIsDeleted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteAttachmentsDifferenceOnlyNonAcceptedIsDeleted() throws Exception {\n        Attachment a1 = mock(Attachment.class);\n        when(a1.getAttachmentContentId()).thenReturn(\"a1\");\n\n        Attachment a2 = mock(Attachment.class);\n        when(a2.getAttachmentContentId()).thenReturn(\"a2\");\n        when(a2.getCheckStatus()).thenReturn(CheckStatus.REJECTED);\n\n        Attachment a3 = mock(Attachment.class);\n        when(a3.getAttachmentContentId()).thenReturn(\"a3\");\n        when(a3.getCheckStatus()).thenReturn(CheckStatus.ACCEPTED);\n\n        Set<Attachment> before = new HashSet<>();\n        before.add(a1);\n        before.add(a2);\n        before.add(a3);\n\n        Set<Attachment> after = new HashSet<>();\n        after.add(a1);\n\n        Set<String> expectedIdsToDelete = new HashSet<>();\n        expectedIdsToDelete.add(\"a2\");\n\n        attachmentConnector.deleteAttachmentDifference(before, after);\n        verify(connector).deleteIds(expectedIdsToDelete, AttachmentContent.class);\n    }", "signature": "void testDeleteAttachmentsDifferenceOnlyNonAcceptedIsDeleted()", "full_signature": "@Test public void testDeleteAttachmentsDifferenceOnlyNonAcceptedIsDeleted()", "class_method_signature": "AttachmentConnectorTest.testDeleteAttachmentsDifferenceOnlyNonAcceptedIsDeleted()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAttachmentContentId", "mock", "thenReturn", "when", "getAttachmentContentId", "thenReturn", "when", "getCheckStatus", "mock", "thenReturn", "when", "getAttachmentContentId", "thenReturn", "when", "getCheckStatus", "add", "add", "add", "add", "add", "deleteAttachmentDifference", "deleteIds", "verify"]}, "focal_class": {"identifier": "AttachmentConnector", "superclass": "extends AttachmentStreamConnector", "interfaces": "", "fields": [{"original_string": "private static Logger log = Logger.getLogger(AttachmentConnector.class);", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(AttachmentConnector.class)", "var_name": "log"}], "methods": [{"identifier": "AttachmentConnector", "parameters": "(DatabaseConnector connector, Duration downloadTimeout)", "modifiers": "public", "return": "", "signature": " AttachmentConnector(DatabaseConnector connector, Duration downloadTimeout)", "full_signature": "public  AttachmentConnector(DatabaseConnector connector, Duration downloadTimeout)", "class_method_signature": "AttachmentConnector.AttachmentConnector(DatabaseConnector connector, Duration downloadTimeout)", "testcase": false, "constructor": true}, {"identifier": "AttachmentConnector", "parameters": "(Supplier<HttpClient> httpClient, String dbName, Duration downloadTimeout)", "modifiers": "public", "return": "", "signature": " AttachmentConnector(Supplier<HttpClient> httpClient, String dbName, Duration downloadTimeout)", "full_signature": "public  AttachmentConnector(Supplier<HttpClient> httpClient, String dbName, Duration downloadTimeout)", "class_method_signature": "AttachmentConnector.AttachmentConnector(Supplier<HttpClient> httpClient, String dbName, Duration downloadTimeout)", "testcase": false, "constructor": true}, {"identifier": "updateAttachmentContent", "parameters": "(AttachmentContent attachment)", "modifiers": "public", "return": "void", "signature": "void updateAttachmentContent(AttachmentContent attachment)", "full_signature": "public void updateAttachmentContent(AttachmentContent attachment)", "class_method_signature": "AttachmentConnector.updateAttachmentContent(AttachmentContent attachment)", "testcase": false, "constructor": false}, {"identifier": "getAttachmentContent", "parameters": "(String attachmentContentId)", "modifiers": "public", "return": "AttachmentContent", "signature": "AttachmentContent getAttachmentContent(String attachmentContentId)", "full_signature": "public AttachmentContent getAttachmentContent(String attachmentContentId)", "class_method_signature": "AttachmentConnector.getAttachmentContent(String attachmentContentId)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachment", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteAttachment(String id)", "full_signature": "public void deleteAttachment(String id)", "class_method_signature": "AttachmentConnector.deleteAttachment(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachments", "parameters": "(Collection<Attachment> attachments)", "modifiers": "public", "return": "void", "signature": "void deleteAttachments(Collection<Attachment> attachments)", "full_signature": "public void deleteAttachments(Collection<Attachment> attachments)", "class_method_signature": "AttachmentConnector.deleteAttachments(Collection<Attachment> attachments)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachmentsByIds", "parameters": "(Collection<String> attachmentContentIds)", "modifiers": "private", "return": "void", "signature": "void deleteAttachmentsByIds(Collection<String> attachmentContentIds)", "full_signature": "private void deleteAttachmentsByIds(Collection<String> attachmentContentIds)", "class_method_signature": "AttachmentConnector.deleteAttachmentsByIds(Collection<String> attachmentContentIds)", "testcase": false, "constructor": false}, {"identifier": "getAttachmentContentIds", "parameters": "(Collection<Attachment> attachments)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAttachmentContentIds(Collection<Attachment> attachments)", "full_signature": "private Set<String> getAttachmentContentIds(Collection<Attachment> attachments)", "class_method_signature": "AttachmentConnector.getAttachmentContentIds(Collection<Attachment> attachments)", "testcase": false, "constructor": false}, {"identifier": "deleteAttachmentDifference", "parameters": "(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "modifiers": "public", "return": "void", "signature": "void deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "full_signature": "public void deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "class_method_signature": "AttachmentConnector.deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "testcase": false, "constructor": false}, {"identifier": "getSha1FromAttachmentContentId", "parameters": "(String attachmentContentId)", "modifiers": "public", "return": "String", "signature": "String getSha1FromAttachmentContentId(String attachmentContentId)", "full_signature": "public String getSha1FromAttachmentContentId(String attachmentContentId)", "class_method_signature": "AttachmentConnector.getSha1FromAttachmentContentId(String attachmentContentId)", "testcase": false, "constructor": false}, {"identifier": "setSha1ForAttachments", "parameters": "(Set<Attachment> attachments)", "modifiers": "public", "return": "void", "signature": "void setSha1ForAttachments(Set<Attachment> attachments)", "full_signature": "public void setSha1ForAttachments(Set<Attachment> attachments)", "class_method_signature": "AttachmentConnector.setSha1ForAttachments(Set<Attachment> attachments)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/couchdb/AttachmentConnector.java"}, "focal_method": {"identifier": "deleteAttachmentDifference", "parameters": "(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "modifiers": "public", "return": "void", "body": "public void deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter) {\n        // it is important to take the set difference between sets of ids, not of attachments themselves\n        // otherwise, when `attachmentsAfter` contains the same attachment (with the same id), but with one field changed (e.g. sha1),\n        // then they are considered unequal and the set difference will contain this attachment and therefore\n        // deleteAttachments(Collection<Attachment>) will delete an attachment that is present in `attachmentsAfter`\n        Set<Attachment> nonAcceptedAttachmentsBefore = nullToEmptySet(attachmentsBefore).stream().filter(a -> a.getCheckStatus() != CheckStatus.ACCEPTED).collect(Collectors.toSet());\n        deleteAttachmentsByIds(Sets.difference(getAttachmentContentIds(nonAcceptedAttachmentsBefore), getAttachmentContentIds(attachmentsAfter)));\n    }", "signature": "void deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "full_signature": "public void deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "class_method_signature": "AttachmentConnector.deleteAttachmentDifference(Set<Attachment> attachmentsBefore, Set<Attachment> attachmentsAfter)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "stream", "nullToEmptySet", "getCheckStatus", "toSet", "deleteAttachmentsByIds", "difference", "getAttachmentContentIds", "getAttachmentContentIds"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}