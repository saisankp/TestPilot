{"test_class": {"identifier": "TestApacheHttpdlogDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TestApacheHttpdlogDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TestApacheHttpdlogDeserializer.class)", "var_name": "LOG"}, {"original_string": "private final String logformat = \"%h %a %A %l %u %t \\\"%r\\\" \" +\n        \"%>s %b %p \\\"%q\\\" \\\"%{Referer}i\\\" %D \\\"%{User-agent}i\\\" \" +\n        \"\\\"%{Cookie}i\\\" \" +\n        \"\\\"%{Set-Cookie}o\\\" \" +\n        \"\\\"%{If-None-Match}i\\\" \\\"%{Etag}o\\\"\";", "modifier": "private final", "type": "String", "declarator": "logformat = \"%h %a %A %l %u %t \\\"%r\\\" \" +\n        \"%>s %b %p \\\"%q\\\" \\\"%{Referer}i\\\" %D \\\"%{User-agent}i\\\" \" +\n        \"\\\"%{Cookie}i\\\" \" +\n        \"\\\"%{Set-Cookie}o\\\" \" +\n        \"\\\"%{If-None-Match}i\\\" \\\"%{Etag}o\\\"\"", "var_name": "logformat"}, {"original_string": "private final String testLogLine =\n        \"127.0.0.1 127.0.0.1 127.0.0.1 - - [24/Oct/2012:23:00:44 +0200] \\\"GET /index.php?s=800x600 HTTP/1.1\\\" \" +\n        \"200 - 80 \\\"\\\" \\\"-\\\" 80991 \\\"Mozilla/5.0 (X11; Linux i686 on x86_64; rv:11.0) Gecko/20100101 Firefox/11.0\\\" \" +\n        \"\\\"jquery-ui-theme=Eggplant; Apache=127.0.0.1.1351111543699529\\\" \" +\n        \"\\\"\" +\n        \"NBA-1=1234, \" +\n        \"NBA-2=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT, \" +\n        \"NBA-3=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT; path=/, \" +\n        \"NBA-4=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT; path=/; domain=.basj.es\" +\n        \"\\\" \\\"-\\\" \\\"-\\\"\";", "modifier": "private final", "type": "String", "declarator": "testLogLine =\n        \"127.0.0.1 127.0.0.1 127.0.0.1 - - [24/Oct/2012:23:00:44 +0200] \\\"GET /index.php?s=800x600 HTTP/1.1\\\" \" +\n        \"200 - 80 \\\"\\\" \\\"-\\\" 80991 \\\"Mozilla/5.0 (X11; Linux i686 on x86_64; rv:11.0) Gecko/20100101 Firefox/11.0\\\" \" +\n        \"\\\"jquery-ui-theme=Eggplant; Apache=127.0.0.1.1351111543699529\\\" \" +\n        \"\\\"\" +\n        \"NBA-1=1234, \" +\n        \"NBA-2=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT, \" +\n        \"NBA-3=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT; path=/, \" +\n        \"NBA-4=1234; expires=Wed, 01-Jan-2020 00:00:10 GMT; path=/; domain=.basj.es\" +\n        \"\\\" \\\"-\\\" \\\"-\\\"\"", "var_name": "testLogLine"}], "file": "httpdlog/httpdlog-serde/src/test/java/nl/basjes/parse/httpdlog/TestApacheHttpdlogDeserializer.java"}, "test_case": {"identifier": "testBasicParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicParse() throws Throwable {\n        // Create the SerDe\n        AbstractDeserializer serDe = getTestSerDe();\n\n        // Data\n        Text t = new Text(testLogLine);\n\n        // Deserialize\n        Object row = serDe.deserialize(t);\n\n        if (!(row instanceof List)) {\n            fail(\"row must be instanceof List<>\");\n        }\n        List<?> rowArray = (List<?>)row;\n        LOG.debug(\"Deserialized row: {}\", row);\n        assertEquals(\"127.0.0.1\",     rowArray.get(0));\n        assertEquals(1351112444000L,  rowArray.get(1));\n        assertEquals(\"Mozilla/5.0 (X11; Linux i686 on x86_64; rv:11.0) Gecko/20100101 Firefox/11.0\", rowArray.get(2));\n        assertEquals(800L,            rowArray.get(3));\n        assertEquals(600L,            rowArray.get(4));\n    }", "signature": "void testBasicParse()", "full_signature": "@Test public void testBasicParse()", "class_method_signature": "TestApacheHttpdlogDeserializer.testBasicParse()", "testcase": true, "constructor": false, "invocations": ["getTestSerDe", "deserialize", "fail", "debug", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ApacheHttpdlogDeserializer", "superclass": "extends AbstractDeserializer", "interfaces": "", "fields": [{"original_string": "private static final Logger      LOG = LoggerFactory.getLogger(ApacheHttpdlogDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ApacheHttpdlogDeserializer.class)", "var_name": "LOG"}, {"original_string": "private static final String      FIELD = \"field:\";", "modifier": "private static final", "type": "String", "declarator": "FIELD = \"field:\"", "var_name": "FIELD"}, {"original_string": "private static final String      MAP_FIELD = \"map:\";", "modifier": "private static final", "type": "String", "declarator": "MAP_FIELD = \"map:\"", "var_name": "MAP_FIELD"}, {"original_string": "private static final int         MAP_FIELD_LENGTH = MAP_FIELD.length();", "modifier": "private static final", "type": "int", "declarator": "MAP_FIELD_LENGTH = MAP_FIELD.length()", "var_name": "MAP_FIELD_LENGTH"}, {"original_string": "private static final String      LOAD_DISSECTOR = \"load:\";", "modifier": "private static final", "type": "String", "declarator": "LOAD_DISSECTOR = \"load:\"", "var_name": "LOAD_DISSECTOR"}, {"original_string": "private static final int         LOAD_DISSECTOR_LENGTH = LOAD_DISSECTOR.length();", "modifier": "private static final", "type": "int", "declarator": "LOAD_DISSECTOR_LENGTH = LOAD_DISSECTOR.length()", "var_name": "LOAD_DISSECTOR_LENGTH"}, {"original_string": "private StructObjectInspector    rowOI;", "modifier": "private", "type": "StructObjectInspector", "declarator": "rowOI", "var_name": "rowOI"}, {"original_string": "private ArrayList<Object>        row;", "modifier": "private", "type": "ArrayList<Object>", "declarator": "row", "var_name": "row"}, {"original_string": "private Parser<ParsedRecord>     parser;", "modifier": "private", "type": "Parser<ParsedRecord>", "declarator": "parser", "var_name": "parser"}, {"original_string": "private ParsedRecord             currentValue;", "modifier": "private", "type": "ParsedRecord", "declarator": "currentValue", "var_name": "currentValue"}, {"original_string": "private static final long    MINIMAL_FAIL_LINES      = 1000;", "modifier": "private static final", "type": "long", "declarator": "MINIMAL_FAIL_LINES      = 1000", "var_name": "MINIMAL_FAIL_LINES"}, {"original_string": "private static final int     MINIMAL_FAIL_PERCENTAGE =    1;", "modifier": "private static final", "type": "int", "declarator": "MINIMAL_FAIL_PERCENTAGE =    1", "var_name": "MINIMAL_FAIL_PERCENTAGE"}, {"original_string": "private long    linesInput  = 0;", "modifier": "private", "type": "long", "declarator": "linesInput  = 0", "var_name": "linesInput"}, {"original_string": "private long    linesBad    = 0;", "modifier": "private", "type": "long", "declarator": "linesBad    = 0", "var_name": "linesBad"}, {"original_string": "private final List<ColumnToGetterMapping> columnToGetterMappings = new ArrayList<>();", "modifier": "private final", "type": "List<ColumnToGetterMapping>", "declarator": "columnToGetterMappings = new ArrayList<>()", "var_name": "columnToGetterMappings"}], "methods": [{"identifier": "initialize", "parameters": "(Configuration conf, Properties props)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(Configuration conf, Properties props)", "full_signature": "@Override public void initialize(Configuration conf, Properties props)", "class_method_signature": "ApacheHttpdlogDeserializer.initialize(Configuration conf, Properties props)", "testcase": false, "constructor": false}, {"identifier": "getObjectInspector", "parameters": "()", "modifiers": "@Override public", "return": "ObjectInspector", "signature": "ObjectInspector getObjectInspector()", "full_signature": "@Override public ObjectInspector getObjectInspector()", "class_method_signature": "ApacheHttpdlogDeserializer.getObjectInspector()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(Writable writable)", "modifiers": "@Override public", "return": "Object", "signature": "Object deserialize(Writable writable)", "full_signature": "@Override public Object deserialize(Writable writable)", "class_method_signature": "ApacheHttpdlogDeserializer.deserialize(Writable writable)", "testcase": false, "constructor": false}, {"identifier": "getSerDeStats", "parameters": "()", "modifiers": "@Override public", "return": "SerDeStats", "signature": "SerDeStats getSerDeStats()", "full_signature": "@Override public SerDeStats getSerDeStats()", "class_method_signature": "ApacheHttpdlogDeserializer.getSerDeStats()", "testcase": false, "constructor": false}], "file": "httpdlog/httpdlog-serde/src/main/java/nl/basjes/parse/httpdlog/ApacheHttpdlogDeserializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(Writable writable)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object deserialize(Writable writable) throws SerDeException {\n        if (!(writable instanceof Text)) {\n            throw new SerDeException(\"The input MUST be a Text line.\");\n        }\n\n        linesInput++;\n\n        try {\n            currentValue.clear();\n            parser.parse(currentValue, writable.toString());\n        } catch (DissectionFailure dissectionFailure) {\n            linesBad++;\n            if (linesInput >= MINIMAL_FAIL_LINES) {\n                if (100* linesBad > MINIMAL_FAIL_PERCENTAGE * linesInput){\n                    throw new SerDeException(\"To many bad lines: \" + linesBad + \" of \" + linesInput + \" are bad.\");\n                }\n            }\n            return null; // Just return that this line is nothing.\n        } catch (InvalidDissectorException |MissingDissectorsException e) {\n            throw new SerDeException(\"Cannot continue; Fix the Dissectors before retrying\", e);\n        }\n\n        for (ColumnToGetterMapping ctgm: columnToGetterMappings) {\n            switch(ctgm.casts) {\n                case STRING:\n                    String currentValueString = currentValue.getString(ctgm.fieldValue);\n                    row.set(ctgm.index, currentValueString);\n                    break;\n                case LONG:\n                    Long currentValueLong = currentValue.getLong(ctgm.fieldValue);\n                    row.set(ctgm.index, currentValueLong);\n                    break;\n                case DOUBLE:\n                    Double currentValueDouble = currentValue.getDouble(ctgm.fieldValue);\n                    row.set(ctgm.index, currentValueDouble);\n                    break;\n                default:\n                    // Do nothing\n            }\n        }\n\n        return row;\n    }", "signature": "Object deserialize(Writable writable)", "full_signature": "@Override public Object deserialize(Writable writable)", "class_method_signature": "ApacheHttpdlogDeserializer.deserialize(Writable writable)", "testcase": false, "constructor": false, "invocations": ["clear", "parse", "toString", "getString", "set", "getLong", "set", "getDouble", "set"]}, "repository": {"repo_id": 12652963, "url": "https://github.com/nielsbasjes/logparser", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 94, "size": 2121, "license": "licensed"}}