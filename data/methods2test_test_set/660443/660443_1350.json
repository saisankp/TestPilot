{"test_class": {"identifier": "Tetrahedral3DParityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int CLOCKWISE     = -1;", "modifier": "private static", "type": "int", "declarator": "CLOCKWISE     = -1", "var_name": "CLOCKWISE"}, {"original_string": "private static int ANTICLOCKWISE = +1;", "modifier": "private static", "type": "int", "declarator": "ANTICLOCKWISE = +1", "var_name": "ANTICLOCKWISE"}], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/Tetrahedral3DParityTest.java"}, "test_case": {"identifier": "testParity_Three_Clockwise", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParity_Three_Clockwise() {\n        Point3d[] coords = new Point3d[]{new Point3d(1.70, 0.98, -0.51), // -O\n                new Point3d(2.65, -0.83, 0.62), // -N\n                new Point3d(0.26, -0.33, 0.95), // -C\n                new Point3d(1.44, -0.33, -0.03), // C (centre)\n        };\n        assertThat(new Tetrahedral3DParity(coords).parity(), is(CLOCKWISE));\n    }", "signature": "void testParity_Three_Clockwise()", "full_signature": "@Test public void testParity_Three_Clockwise()", "class_method_signature": "Tetrahedral3DParityTest.testParity_Three_Clockwise()", "testcase": true, "constructor": false, "invocations": ["assertThat", "parity", "is"]}, "focal_class": {"identifier": "Tetrahedral3DParity", "superclass": "extends GeometricParity", "interfaces": "", "fields": [{"original_string": "private final Point3d[] coordinates;", "modifier": "private final", "type": "Point3d[]", "declarator": "coordinates", "var_name": "coordinates"}], "methods": [{"identifier": "Tetrahedral3DParity", "parameters": "(Point3d[] coordinates)", "modifiers": "public", "return": "", "signature": " Tetrahedral3DParity(Point3d[] coordinates)", "full_signature": "public  Tetrahedral3DParity(Point3d[] coordinates)", "class_method_signature": "Tetrahedral3DParity.Tetrahedral3DParity(Point3d[] coordinates)", "testcase": false, "constructor": true}, {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "Tetrahedral3DParity.parity()", "testcase": false, "constructor": false}, {"identifier": "det", "parameters": "(double xa, double ya, double xb, double yb, double xc, double yc)", "modifiers": "private static", "return": "double", "signature": "double det(double xa, double ya, double xb, double yb, double xc, double yc)", "full_signature": "private static double det(double xa, double ya, double xb, double yb, double xc, double yc)", "class_method_signature": "Tetrahedral3DParity.det(double xa, double ya, double xb, double yb, double xc, double yc)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/Tetrahedral3DParity.java"}, "focal_method": {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parity() {\n\n        double x1 = coordinates[0].x;\n        double x2 = coordinates[1].x;\n        double x3 = coordinates[2].x;\n        double x4 = coordinates[3].x;\n\n        double y1 = coordinates[0].y;\n        double y2 = coordinates[1].y;\n        double y3 = coordinates[2].y;\n        double y4 = coordinates[3].y;\n\n        double z1 = coordinates[0].z;\n        double z2 = coordinates[1].z;\n        double z3 = coordinates[2].z;\n        double z4 = coordinates[3].z;\n\n        double det = (z1 * det(x2, y2, x3, y3, x4, y4)) - (z2 * det(x1, y1, x3, y3, x4, y4))\n                + (z3 * det(x1, y1, x2, y2, x4, y4)) - (z4 * det(x1, y1, x2, y2, x3, y3));\n\n        return (int) Math.signum(det);\n    }", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "Tetrahedral3DParity.parity()", "testcase": false, "constructor": false, "invocations": ["det", "det", "det", "det", "signum"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}