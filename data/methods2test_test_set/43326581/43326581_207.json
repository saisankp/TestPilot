{"test_class": {"identifier": "ReleasePermissionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Release release;", "modifier": "@Mock\n    private", "type": "Release", "declarator": "release", "var_name": "release"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/permissions/ReleasePermissionsTest.java"}, "test_case": {"identifier": "testEccPermission", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEccPermission() {\n        ReleasePermissions permissions = new ReleasePermissions(release, user);\n\n        when(user.getUserGroup()).thenReturn(UserGroup.ECC_ADMIN);\n        assertThat(permissions.isActionAllowed(RequestedAction.WRITE_ECC), is(true));\n\n        when(user.getUserGroup()).thenReturn(UserGroup.CLEARING_ADMIN);\n        assertThat(permissions.isActionAllowed(RequestedAction.WRITE_ECC), is(false));\n    }", "signature": "void testEccPermission()", "full_signature": "@Test public void testEccPermission()", "class_method_signature": "ReleasePermissionsTest.testEccPermission()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getUserGroup", "assertThat", "isActionAllowed", "is", "thenReturn", "when", "getUserGroup", "assertThat", "isActionAllowed", "is"]}, "focal_class": {"identifier": "ReleasePermissions", "superclass": "extends DocumentPermissions<Release>", "interfaces": "", "fields": [{"original_string": "private final Set<String> moderators;", "modifier": "private final", "type": "Set<String>", "declarator": "moderators", "var_name": "moderators"}, {"original_string": "private final Set<String> contributors;", "modifier": "private final", "type": "Set<String>", "declarator": "contributors", "var_name": "contributors"}, {"original_string": "private final Set<String> attachmentContentIds;", "modifier": "private final", "type": "Set<String>", "declarator": "attachmentContentIds", "var_name": "attachmentContentIds"}], "methods": [{"identifier": "ReleasePermissions", "parameters": "(Release document, User user)", "modifiers": "protected", "return": "", "signature": " ReleasePermissions(Release document, User user)", "full_signature": "protected  ReleasePermissions(Release document, User user)", "class_method_signature": "ReleasePermissions.ReleasePermissions(Release document, User user)", "testcase": false, "constructor": true}, {"identifier": "fillPermissions", "parameters": "(Release other, Map<RequestedAction, Boolean> permissions)", "modifiers": "@Override public", "return": "void", "signature": "void fillPermissions(Release other, Map<RequestedAction, Boolean> permissions)", "full_signature": "@Override public void fillPermissions(Release other, Map<RequestedAction, Boolean> permissions)", "class_method_signature": "ReleasePermissions.fillPermissions(Release other, Map<RequestedAction, Boolean> permissions)", "testcase": false, "constructor": false}, {"identifier": "isActionAllowed", "parameters": "(RequestedAction action)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActionAllowed(RequestedAction action)", "full_signature": "@Override public boolean isActionAllowed(RequestedAction action)", "class_method_signature": "ReleasePermissions.isActionAllowed(RequestedAction action)", "testcase": false, "constructor": false}, {"identifier": "getContributors", "parameters": "()", "modifiers": "@Override protected", "return": "Set<String>", "signature": "Set<String> getContributors()", "full_signature": "@Override protected Set<String> getContributors()", "class_method_signature": "ReleasePermissions.getContributors()", "testcase": false, "constructor": false}, {"identifier": "getModerators", "parameters": "()", "modifiers": "@Override protected", "return": "Set<String>", "signature": "Set<String> getModerators()", "full_signature": "@Override protected Set<String> getModerators()", "class_method_signature": "ReleasePermissions.getModerators()", "testcase": false, "constructor": false}, {"identifier": "getAttachmentContentIds", "parameters": "()", "modifiers": "@Override protected", "return": "Set<String>", "signature": "Set<String> getAttachmentContentIds()", "full_signature": "@Override protected Set<String> getAttachmentContentIds()", "class_method_signature": "ReleasePermissions.getAttachmentContentIds()", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/permissions/ReleasePermissions.java"}, "focal_method": {"identifier": "isActionAllowed", "parameters": "(RequestedAction action)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isActionAllowed(RequestedAction action) {\n        if (action == RequestedAction.WRITE_ECC) {\n            return PermissionUtils.isUserAtLeast(UserGroup.ECC_ADMIN, user);\n        } else {\n            return getStandardPermissions(action);\n        }\n    }", "signature": "boolean isActionAllowed(RequestedAction action)", "full_signature": "@Override public boolean isActionAllowed(RequestedAction action)", "class_method_signature": "ReleasePermissions.isActionAllowed(RequestedAction action)", "testcase": false, "constructor": false, "invocations": ["isUserAtLeast", "getStandardPermissions"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}