{"test_class": {"identifier": "HkdfPrfKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HkdfPrfKeyManager manager = new HkdfPrfKeyManager();", "modifier": "private final", "type": "HkdfPrfKeyManager", "declarator": "manager = new HkdfPrfKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<HkdfPrfKeyFormat, HkdfPrfKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<HkdfPrfKeyFormat, HkdfPrfKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/prf/HkdfPrfKeyManagerTest.java"}, "test_case": {"identifier": "testHkdfSha256Template", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testHkdfSha256Template() throws Exception {\n    KeyTemplate kt = HkdfPrfKeyManager.hkdfSha256Template();\n    assertThat(kt.getTypeUrl()).isEqualTo(new HkdfPrfKeyManager().getKeyType());\n    assertThat(kt.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW);\n\n    HkdfPrfKeyFormat format =\n        HkdfPrfKeyFormat.parseFrom(kt.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n    assertThat(format.getKeySize()).isEqualTo(32);\n    assertThat(format.getParams().getHash()).isEqualTo(HashType.SHA256);\n  }", "signature": "void testHkdfSha256Template()", "full_signature": "@Test public void testHkdfSha256Template()", "class_method_signature": "HkdfPrfKeyManagerTest.testHkdfSha256Template()", "testcase": true, "constructor": false, "invocations": ["hkdfSha256Template", "isEqualTo", "assertThat", "getTypeUrl", "getKeyType", "isEqualTo", "assertThat", "getOutputPrefixType", "parseFrom", "getValue", "getEmptyRegistry", "isEqualTo", "assertThat", "getKeySize", "isEqualTo", "assertThat", "getHash", "getParams"]}, "focal_class": {"identifier": "HkdfPrfKeyManager", "superclass": "extends KeyTypeManager<HkdfPrfKey>", "interfaces": "", "fields": [{"original_string": "private static final int MIN_KEY_SIZE = 32;", "modifier": "private static final", "type": "int", "declarator": "MIN_KEY_SIZE = 32", "var_name": "MIN_KEY_SIZE"}], "methods": [{"identifier": "convertHash", "parameters": "(HashType hashType)", "modifiers": "private static", "return": "com.google.crypto.tink.subtle.Enums.HashType", "signature": "com.google.crypto.tink.subtle.Enums.HashType convertHash(HashType hashType)", "full_signature": "private static com.google.crypto.tink.subtle.Enums.HashType convertHash(HashType hashType)", "class_method_signature": "HkdfPrfKeyManager.convertHash(HashType hashType)", "testcase": false, "constructor": false}, {"identifier": "HkdfPrfKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " HkdfPrfKeyManager()", "full_signature": "  HkdfPrfKeyManager()", "class_method_signature": "HkdfPrfKeyManager.HkdfPrfKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "HkdfPrfKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "HkdfPrfKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "HkdfPrfKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(HkdfPrfKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(HkdfPrfKey key)", "full_signature": "@Override public void validateKey(HkdfPrfKey key)", "class_method_signature": "HkdfPrfKeyManager.validateKey(HkdfPrfKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "HkdfPrfKey", "signature": "HkdfPrfKey parseKey(ByteString byteString)", "full_signature": "@Override public HkdfPrfKey parseKey(ByteString byteString)", "class_method_signature": "HkdfPrfKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<HkdfPrfKeyFormat, HkdfPrfKey>", "signature": "KeyFactory<HkdfPrfKeyFormat, HkdfPrfKey> keyFactory()", "full_signature": "@Override public KeyFactory<HkdfPrfKeyFormat, HkdfPrfKey> keyFactory()", "class_method_signature": "HkdfPrfKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "validateKeySize", "parameters": "(int keySize)", "modifiers": "private static", "return": "void", "signature": "void validateKeySize(int keySize)", "full_signature": "private static void validateKeySize(int keySize)", "class_method_signature": "HkdfPrfKeyManager.validateKeySize(int keySize)", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "(HkdfPrfParams params)", "modifiers": "private static", "return": "void", "signature": "void validateParams(HkdfPrfParams params)", "full_signature": "private static void validateParams(HkdfPrfParams params)", "class_method_signature": "HkdfPrfKeyManager.validateParams(HkdfPrfParams params)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "HkdfPrfKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "staticKeyType", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String staticKeyType()", "full_signature": "public static String staticKeyType()", "class_method_signature": "HkdfPrfKeyManager.staticKeyType()", "testcase": false, "constructor": false}, {"identifier": "hkdfSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate hkdfSha256Template()", "full_signature": "public static final KeyTemplate hkdfSha256Template()", "class_method_signature": "HkdfPrfKeyManager.hkdfSha256Template()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/prf/HkdfPrfKeyManager.java"}, "focal_method": {"identifier": "hkdfSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate hkdfSha256Template() {\n    HkdfPrfKeyFormat format =\n        HkdfPrfKeyFormat.newBuilder()\n            .setKeySize(32) // the size in bytes of the HKDF key\n            .setParams(HkdfPrfParams.newBuilder().setHash(HashType.SHA256))\n            .build();\n    return KeyTemplate.create(\n        HkdfPrfKeyManager.staticKeyType(), format.toByteArray(), KeyTemplate.OutputPrefixType.RAW);\n  }", "signature": "KeyTemplate hkdfSha256Template()", "full_signature": "public static final KeyTemplate hkdfSha256Template()", "class_method_signature": "HkdfPrfKeyManager.hkdfSha256Template()", "testcase": false, "constructor": false, "invocations": ["build", "setParams", "setKeySize", "newBuilder", "setHash", "newBuilder", "create", "staticKeyType", "toByteArray"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}