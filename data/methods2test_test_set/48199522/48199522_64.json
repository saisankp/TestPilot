{"test_class": {"identifier": "MultivariateTDistributionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MultivariateTDistributionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MultivariateTDistributionTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/distribution/MultivariateTDistributionTest.java"}, "test_case": {"identifier": "valueTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void valueTest() {\n        double[][] means  = {\n                {5.8, 1.3},\n                {0.25, 10.96},\n        };\n        double[][][] covariances = {\n                {{0.18, 0.03}, {0.03, 0.27}},\n                {{0.55, 0.018}, {0.018, 0.21}},\n        };\n        double[] dofs = {\n                292.1,\n                10.7,\n        };\n\n        double[][][] points = {\n                {{5.8, 1.3}, {5.2, 2.3}},\n                {{0.25, 10.96}, {0, 10}, {1, 11}},\n        };\n\n        double[][] pdfs = {\n                {0.7287204, 0.02772672},\n                {0.4689636, 0.05175506, 0.2624979},\n        };\n\n        for (int s=0; s< means.length; s ++) {\n            MultivariateTDistribution mvtd = new MultivariateTDistribution(new ArrayRealVector(means[s]), new BlockRealMatrix(covariances[s]), dofs[s]);\n            for (int i =0; i< points[s].length; i++) {\n                assertEquals(pdfs[s][i], mvtd.density(new ArrayRealVector(points[s][i])), 1e-7);\n            }\n        }\n    }", "signature": "void valueTest()", "full_signature": "@Test public void valueTest()", "class_method_signature": "MultivariateTDistributionTest.valueTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "density"]}, "focal_class": {"identifier": "MultivariateTDistribution", "superclass": "", "interfaces": "implements MultivariateDistribution", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(MultivariateTDistribution.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(MultivariateTDistribution.class)", "var_name": "log"}, {"original_string": "private RealVector mean;", "modifier": "private", "type": "RealVector", "declarator": "mean", "var_name": "mean"}, {"original_string": "private RealMatrix precisionMatrix;", "modifier": "private", "type": "RealMatrix", "declarator": "precisionMatrix", "var_name": "precisionMatrix"}, {"original_string": "private double dof;", "modifier": "private", "type": "double", "declarator": "dof", "var_name": "dof"}, {"original_string": "private int D;", "modifier": "private", "type": "int", "declarator": "D", "var_name": "D"}, {"original_string": "private double multiplier;", "modifier": "private", "type": "double", "declarator": "multiplier", "var_name": "multiplier"}], "methods": [{"identifier": "MultivariateTDistribution", "parameters": "(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "modifiers": "public", "return": "", "signature": " MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "full_signature": "public  MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "class_method_signature": "MultivariateTDistribution.MultivariateTDistribution(RealVector mean, RealMatrix covarianceMatrix, double degreesOfFreedom)", "testcase": false, "constructor": true}, {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "public", "return": "double", "signature": "double density(RealVector vector)", "full_signature": "public double density(RealVector vector)", "class_method_signature": "MultivariateTDistribution.density(RealVector vector)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/distribution/MultivariateTDistribution.java"}, "focal_method": {"identifier": "density", "parameters": "(RealVector vector)", "modifiers": "public", "return": "double", "body": "public double density(RealVector vector) {\n        if (dof == 0) {\n            return 0;\n        }\n        RealVector _diff = vector.subtract(mean);\n        double prob = 1. / dof * _diff.dotProduct(precisionMatrix.operate(_diff));\n        return multiplier * Math.pow(1 + prob, -(dof + D) / 2);\n    }", "signature": "double density(RealVector vector)", "full_signature": "public double density(RealVector vector)", "class_method_signature": "MultivariateTDistribution.density(RealVector vector)", "testcase": false, "constructor": false, "invocations": ["subtract", "dotProduct", "operate", "pow"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}