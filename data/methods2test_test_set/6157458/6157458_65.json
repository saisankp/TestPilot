{"test_class": {"identifier": "AbstractPluginManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "pf4j/src/test/java/org/pf4j/AbstractPluginManagerTest.java"}, "test_case": {"identifier": "getExtensionsByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getExtensionsByType() {\n        AbstractPluginManager pluginManager = mock(AbstractPluginManager.class, CALLS_REAL_METHODS);\n\n        ExtensionFinder extensionFinder = mock(ExtensionFinder.class);\n        List<ExtensionWrapper<TestExtensionPoint>> extensionList = new ArrayList<>(1);\n        extensionList.add(new ExtensionWrapper<>(new ExtensionDescriptor(0, TestExtension.class), new DefaultExtensionFactory()));\n        when(extensionFinder.find(TestExtensionPoint.class)).thenReturn(extensionList);\n\n        pluginManager.extensionFinder = extensionFinder;\n        List<TestExtensionPoint> extensions = pluginManager.getExtensions(TestExtensionPoint.class);\n        assertEquals(1, extensions.size());\n    }", "signature": "void getExtensionsByType()", "full_signature": "@Test public void getExtensionsByType()", "class_method_signature": "AbstractPluginManagerTest.getExtensionsByType()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "thenReturn", "when", "find", "getExtensions", "assertEquals", "size"]}, "focal_class": {"identifier": "AbstractPluginManager", "superclass": "", "interfaces": "implements PluginManager", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractPluginManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractPluginManager.class)", "var_name": "log"}, {"original_string": "public static final String PLUGINS_DIR_PROPERTY_NAME = \"pf4j.pluginsDir\";", "modifier": "public static final", "type": "String", "declarator": "PLUGINS_DIR_PROPERTY_NAME = \"pf4j.pluginsDir\"", "var_name": "PLUGINS_DIR_PROPERTY_NAME"}, {"original_string": "public static final String MODE_PROPERTY_NAME = \"pf4j.mode\";", "modifier": "public static final", "type": "String", "declarator": "MODE_PROPERTY_NAME = \"pf4j.mode\"", "var_name": "MODE_PROPERTY_NAME"}, {"original_string": "public static final String DEFAULT_PLUGINS_DIR = \"plugins\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_PLUGINS_DIR = \"plugins\"", "var_name": "DEFAULT_PLUGINS_DIR"}, {"original_string": "public static final String DEVELOPMENT_PLUGINS_DIR = \"../plugins\";", "modifier": "public static final", "type": "String", "declarator": "DEVELOPMENT_PLUGINS_DIR = \"../plugins\"", "var_name": "DEVELOPMENT_PLUGINS_DIR"}, {"original_string": "protected Path pluginsRoot;", "modifier": "protected", "type": "Path", "declarator": "pluginsRoot", "var_name": "pluginsRoot"}, {"original_string": "protected ExtensionFinder extensionFinder;", "modifier": "protected", "type": "ExtensionFinder", "declarator": "extensionFinder", "var_name": "extensionFinder"}, {"original_string": "protected PluginDescriptorFinder pluginDescriptorFinder;", "modifier": "protected", "type": "PluginDescriptorFinder", "declarator": "pluginDescriptorFinder", "var_name": "pluginDescriptorFinder"}, {"original_string": "protected Map<String, PluginWrapper> plugins;", "modifier": "protected", "type": "Map<String, PluginWrapper>", "declarator": "plugins", "var_name": "plugins"}, {"original_string": "protected Map<String, ClassLoader> pluginClassLoaders;", "modifier": "protected", "type": "Map<String, ClassLoader>", "declarator": "pluginClassLoaders", "var_name": "pluginClassLoaders"}, {"original_string": "protected List<PluginWrapper> unresolvedPlugins;", "modifier": "protected", "type": "List<PluginWrapper>", "declarator": "unresolvedPlugins", "var_name": "unresolvedPlugins"}, {"original_string": "protected List<PluginWrapper> resolvedPlugins;", "modifier": "protected", "type": "List<PluginWrapper>", "declarator": "resolvedPlugins", "var_name": "resolvedPlugins"}, {"original_string": "protected List<PluginWrapper> startedPlugins;", "modifier": "protected", "type": "List<PluginWrapper>", "declarator": "startedPlugins", "var_name": "startedPlugins"}, {"original_string": "protected List<PluginStateListener> pluginStateListeners;", "modifier": "protected", "type": "List<PluginStateListener>", "declarator": "pluginStateListeners", "var_name": "pluginStateListeners"}, {"original_string": "protected RuntimeMode runtimeMode;", "modifier": "protected", "type": "RuntimeMode", "declarator": "runtimeMode", "var_name": "runtimeMode"}, {"original_string": "protected String systemVersion = \"0.0.0\";", "modifier": "protected", "type": "String", "declarator": "systemVersion = \"0.0.0\"", "var_name": "systemVersion"}, {"original_string": "protected PluginRepository pluginRepository;", "modifier": "protected", "type": "PluginRepository", "declarator": "pluginRepository", "var_name": "pluginRepository"}, {"original_string": "protected PluginFactory pluginFactory;", "modifier": "protected", "type": "PluginFactory", "declarator": "pluginFactory", "var_name": "pluginFactory"}, {"original_string": "protected ExtensionFactory extensionFactory;", "modifier": "protected", "type": "ExtensionFactory", "declarator": "extensionFactory", "var_name": "extensionFactory"}, {"original_string": "protected PluginStatusProvider pluginStatusProvider;", "modifier": "protected", "type": "PluginStatusProvider", "declarator": "pluginStatusProvider", "var_name": "pluginStatusProvider"}, {"original_string": "protected DependencyResolver dependencyResolver;", "modifier": "protected", "type": "DependencyResolver", "declarator": "dependencyResolver", "var_name": "dependencyResolver"}, {"original_string": "protected PluginLoader pluginLoader;", "modifier": "protected", "type": "PluginLoader", "declarator": "pluginLoader", "var_name": "pluginLoader"}, {"original_string": "protected boolean exactVersionAllowed = false;", "modifier": "protected", "type": "boolean", "declarator": "exactVersionAllowed = false", "var_name": "exactVersionAllowed"}, {"original_string": "protected VersionManager versionManager;", "modifier": "protected", "type": "VersionManager", "declarator": "versionManager", "var_name": "versionManager"}], "methods": [{"identifier": "AbstractPluginManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractPluginManager()", "full_signature": "public  AbstractPluginManager()", "class_method_signature": "AbstractPluginManager.AbstractPluginManager()", "testcase": false, "constructor": true}, {"identifier": "AbstractPluginManager", "parameters": "(Path pluginsRoot)", "modifiers": "public", "return": "", "signature": " AbstractPluginManager(Path pluginsRoot)", "full_signature": "public  AbstractPluginManager(Path pluginsRoot)", "class_method_signature": "AbstractPluginManager.AbstractPluginManager(Path pluginsRoot)", "testcase": false, "constructor": true}, {"identifier": "setSystemVersion", "parameters": "(String version)", "modifiers": "@Override public", "return": "void", "signature": "void setSystemVersion(String version)", "full_signature": "@Override public void setSystemVersion(String version)", "class_method_signature": "AbstractPluginManager.setSystemVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getSystemVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSystemVersion()", "full_signature": "@Override public String getSystemVersion()", "class_method_signature": "AbstractPluginManager.getSystemVersion()", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "@Override public", "return": "List<PluginWrapper>", "signature": "List<PluginWrapper> getPlugins()", "full_signature": "@Override public List<PluginWrapper> getPlugins()", "class_method_signature": "AbstractPluginManager.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "(PluginState pluginState)", "modifiers": "@Override public", "return": "List<PluginWrapper>", "signature": "List<PluginWrapper> getPlugins(PluginState pluginState)", "full_signature": "@Override public List<PluginWrapper> getPlugins(PluginState pluginState)", "class_method_signature": "AbstractPluginManager.getPlugins(PluginState pluginState)", "testcase": false, "constructor": false}, {"identifier": "getResolvedPlugins", "parameters": "()", "modifiers": "@Override public", "return": "List<PluginWrapper>", "signature": "List<PluginWrapper> getResolvedPlugins()", "full_signature": "@Override public List<PluginWrapper> getResolvedPlugins()", "class_method_signature": "AbstractPluginManager.getResolvedPlugins()", "testcase": false, "constructor": false}, {"identifier": "getUnresolvedPlugins", "parameters": "()", "modifiers": "@Override public", "return": "List<PluginWrapper>", "signature": "List<PluginWrapper> getUnresolvedPlugins()", "full_signature": "@Override public List<PluginWrapper> getUnresolvedPlugins()", "class_method_signature": "AbstractPluginManager.getUnresolvedPlugins()", "testcase": false, "constructor": false}, {"identifier": "getStartedPlugins", "parameters": "()", "modifiers": "@Override public", "return": "List<PluginWrapper>", "signature": "List<PluginWrapper> getStartedPlugins()", "full_signature": "@Override public List<PluginWrapper> getStartedPlugins()", "class_method_signature": "AbstractPluginManager.getStartedPlugins()", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "PluginWrapper", "signature": "PluginWrapper getPlugin(String pluginId)", "full_signature": "@Override public PluginWrapper getPlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.getPlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "String", "signature": "String loadPlugin(Path pluginPath)", "full_signature": "@Override public String loadPlugin(Path pluginPath)", "class_method_signature": "AbstractPluginManager.loadPlugin(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "loadPlugins", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void loadPlugins()", "full_signature": "@Override public void loadPlugins()", "class_method_signature": "AbstractPluginManager.loadPlugins()", "testcase": false, "constructor": false}, {"identifier": "unloadPlugins", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unloadPlugins()", "full_signature": "@Override public void unloadPlugins()", "class_method_signature": "AbstractPluginManager.unloadPlugins()", "testcase": false, "constructor": false}, {"identifier": "unloadPlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unloadPlugin(String pluginId)", "full_signature": "@Override public boolean unloadPlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.unloadPlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "unloadPlugin", "parameters": "(String pluginId, boolean unloadDependents)", "modifiers": "protected", "return": "boolean", "signature": "boolean unloadPlugin(String pluginId, boolean unloadDependents)", "full_signature": "protected boolean unloadPlugin(String pluginId, boolean unloadDependents)", "class_method_signature": "AbstractPluginManager.unloadPlugin(String pluginId, boolean unloadDependents)", "testcase": false, "constructor": false}, {"identifier": "deletePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePlugin(String pluginId)", "full_signature": "@Override public boolean deletePlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.deletePlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "startPlugins", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startPlugins()", "full_signature": "@Override public void startPlugins()", "class_method_signature": "AbstractPluginManager.startPlugins()", "testcase": false, "constructor": false}, {"identifier": "startPlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "PluginState", "signature": "PluginState startPlugin(String pluginId)", "full_signature": "@Override public PluginState startPlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.startPlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "stopPlugins", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopPlugins()", "full_signature": "@Override public void stopPlugins()", "class_method_signature": "AbstractPluginManager.stopPlugins()", "testcase": false, "constructor": false}, {"identifier": "stopPlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "PluginState", "signature": "PluginState stopPlugin(String pluginId)", "full_signature": "@Override public PluginState stopPlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.stopPlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "stopPlugin", "parameters": "(String pluginId, boolean stopDependents)", "modifiers": "protected", "return": "PluginState", "signature": "PluginState stopPlugin(String pluginId, boolean stopDependents)", "full_signature": "protected PluginState stopPlugin(String pluginId, boolean stopDependents)", "class_method_signature": "AbstractPluginManager.stopPlugin(String pluginId, boolean stopDependents)", "testcase": false, "constructor": false}, {"identifier": "checkPluginId", "parameters": "(String pluginId)", "modifiers": "protected", "return": "void", "signature": "void checkPluginId(String pluginId)", "full_signature": "protected void checkPluginId(String pluginId)", "class_method_signature": "AbstractPluginManager.checkPluginId(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "disablePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean disablePlugin(String pluginId)", "full_signature": "@Override public boolean disablePlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.disablePlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "enablePlugin", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean enablePlugin(String pluginId)", "full_signature": "@Override public boolean enablePlugin(String pluginId)", "class_method_signature": "AbstractPluginManager.enablePlugin(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getPluginClassLoader", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "ClassLoader", "signature": "ClassLoader getPluginClassLoader(String pluginId)", "full_signature": "@Override public ClassLoader getPluginClassLoader(String pluginId)", "class_method_signature": "AbstractPluginManager.getPluginClassLoader(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClasses", "parameters": "(String pluginId)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "List<Class<?>>", "signature": "List<Class<?>> getExtensionClasses(String pluginId)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public List<Class<?>> getExtensionClasses(String pluginId)", "class_method_signature": "AbstractPluginManager.getExtensionClasses(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClasses", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "List<Class<? extends T>>", "signature": "List<Class<? extends T>> getExtensionClasses(Class<T> type)", "full_signature": "@Override public List<Class<? extends T>> getExtensionClasses(Class<T> type)", "class_method_signature": "AbstractPluginManager.getExtensionClasses(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClasses", "parameters": "(Class<T> type, String pluginId)", "modifiers": "@Override public", "return": "List<Class<? extends T>>", "signature": "List<Class<? extends T>> getExtensionClasses(Class<T> type, String pluginId)", "full_signature": "@Override public List<Class<? extends T>> getExtensionClasses(Class<T> type, String pluginId)", "class_method_signature": "AbstractPluginManager.getExtensionClasses(Class<T> type, String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> getExtensions(Class<T> type)", "full_signature": "@Override public List<T> getExtensions(Class<T> type)", "class_method_signature": "AbstractPluginManager.getExtensions(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "(Class<T> type, String pluginId)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> getExtensions(Class<T> type, String pluginId)", "full_signature": "@Override public List<T> getExtensions(Class<T> type, String pluginId)", "class_method_signature": "AbstractPluginManager.getExtensions(Class<T> type, String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "(String pluginId)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List", "signature": "List getExtensions(String pluginId)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List getExtensions(String pluginId)", "class_method_signature": "AbstractPluginManager.getExtensions(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClassNames", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getExtensionClassNames(String pluginId)", "full_signature": "@Override public Set<String> getExtensionClassNames(String pluginId)", "class_method_signature": "AbstractPluginManager.getExtensionClassNames(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "getExtensionFactory", "parameters": "()", "modifiers": "@Override public", "return": "ExtensionFactory", "signature": "ExtensionFactory getExtensionFactory()", "full_signature": "@Override public ExtensionFactory getExtensionFactory()", "class_method_signature": "AbstractPluginManager.getExtensionFactory()", "testcase": false, "constructor": false}, {"identifier": "getPluginLoader", "parameters": "()", "modifiers": "public", "return": "PluginLoader", "signature": "PluginLoader getPluginLoader()", "full_signature": "public PluginLoader getPluginLoader()", "class_method_signature": "AbstractPluginManager.getPluginLoader()", "testcase": false, "constructor": false}, {"identifier": "getPluginsRoot", "parameters": "()", "modifiers": "public", "return": "Path", "signature": "Path getPluginsRoot()", "full_signature": "public Path getPluginsRoot()", "class_method_signature": "AbstractPluginManager.getPluginsRoot()", "testcase": false, "constructor": false}, {"identifier": "getRuntimeMode", "parameters": "()", "modifiers": "@Override public", "return": "RuntimeMode", "signature": "RuntimeMode getRuntimeMode()", "full_signature": "@Override public RuntimeMode getRuntimeMode()", "class_method_signature": "AbstractPluginManager.getRuntimeMode()", "testcase": false, "constructor": false}, {"identifier": "whichPlugin", "parameters": "(Class<?> clazz)", "modifiers": "@Override public", "return": "PluginWrapper", "signature": "PluginWrapper whichPlugin(Class<?> clazz)", "full_signature": "@Override public PluginWrapper whichPlugin(Class<?> clazz)", "class_method_signature": "AbstractPluginManager.whichPlugin(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "addPluginStateListener", "parameters": "(PluginStateListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addPluginStateListener(PluginStateListener listener)", "full_signature": "@Override public synchronized void addPluginStateListener(PluginStateListener listener)", "class_method_signature": "AbstractPluginManager.addPluginStateListener(PluginStateListener listener)", "testcase": false, "constructor": false}, {"identifier": "removePluginStateListener", "parameters": "(PluginStateListener listener)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removePluginStateListener(PluginStateListener listener)", "full_signature": "@Override public synchronized void removePluginStateListener(PluginStateListener listener)", "class_method_signature": "AbstractPluginManager.removePluginStateListener(PluginStateListener listener)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "AbstractPluginManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "createPluginRepository", "parameters": "()", "modifiers": "protected abstract", "return": "PluginRepository", "signature": "PluginRepository createPluginRepository()", "full_signature": "protected abstract PluginRepository createPluginRepository()", "class_method_signature": "AbstractPluginManager.createPluginRepository()", "testcase": false, "constructor": false}, {"identifier": "createPluginFactory", "parameters": "()", "modifiers": "protected abstract", "return": "PluginFactory", "signature": "PluginFactory createPluginFactory()", "full_signature": "protected abstract PluginFactory createPluginFactory()", "class_method_signature": "AbstractPluginManager.createPluginFactory()", "testcase": false, "constructor": false}, {"identifier": "createExtensionFactory", "parameters": "()", "modifiers": "protected abstract", "return": "ExtensionFactory", "signature": "ExtensionFactory createExtensionFactory()", "full_signature": "protected abstract ExtensionFactory createExtensionFactory()", "class_method_signature": "AbstractPluginManager.createExtensionFactory()", "testcase": false, "constructor": false}, {"identifier": "createPluginDescriptorFinder", "parameters": "()", "modifiers": "protected abstract", "return": "PluginDescriptorFinder", "signature": "PluginDescriptorFinder createPluginDescriptorFinder()", "full_signature": "protected abstract PluginDescriptorFinder createPluginDescriptorFinder()", "class_method_signature": "AbstractPluginManager.createPluginDescriptorFinder()", "testcase": false, "constructor": false}, {"identifier": "createExtensionFinder", "parameters": "()", "modifiers": "protected abstract", "return": "ExtensionFinder", "signature": "ExtensionFinder createExtensionFinder()", "full_signature": "protected abstract ExtensionFinder createExtensionFinder()", "class_method_signature": "AbstractPluginManager.createExtensionFinder()", "testcase": false, "constructor": false}, {"identifier": "createPluginStatusProvider", "parameters": "()", "modifiers": "protected abstract", "return": "PluginStatusProvider", "signature": "PluginStatusProvider createPluginStatusProvider()", "full_signature": "protected abstract PluginStatusProvider createPluginStatusProvider()", "class_method_signature": "AbstractPluginManager.createPluginStatusProvider()", "testcase": false, "constructor": false}, {"identifier": "createPluginLoader", "parameters": "()", "modifiers": "protected abstract", "return": "PluginLoader", "signature": "PluginLoader createPluginLoader()", "full_signature": "protected abstract PluginLoader createPluginLoader()", "class_method_signature": "AbstractPluginManager.createPluginLoader()", "testcase": false, "constructor": false}, {"identifier": "createVersionManager", "parameters": "()", "modifiers": "protected abstract", "return": "VersionManager", "signature": "VersionManager createVersionManager()", "full_signature": "protected abstract VersionManager createVersionManager()", "class_method_signature": "AbstractPluginManager.createVersionManager()", "testcase": false, "constructor": false}, {"identifier": "getPluginDescriptorFinder", "parameters": "()", "modifiers": "protected", "return": "PluginDescriptorFinder", "signature": "PluginDescriptorFinder getPluginDescriptorFinder()", "full_signature": "protected PluginDescriptorFinder getPluginDescriptorFinder()", "class_method_signature": "AbstractPluginManager.getPluginDescriptorFinder()", "testcase": false, "constructor": false}, {"identifier": "getPluginFactory", "parameters": "()", "modifiers": "protected", "return": "PluginFactory", "signature": "PluginFactory getPluginFactory()", "full_signature": "protected PluginFactory getPluginFactory()", "class_method_signature": "AbstractPluginManager.getPluginFactory()", "testcase": false, "constructor": false}, {"identifier": "getPluginClassLoaders", "parameters": "()", "modifiers": "protected", "return": "Map<String, ClassLoader>", "signature": "Map<String, ClassLoader> getPluginClassLoaders()", "full_signature": "protected Map<String, ClassLoader> getPluginClassLoaders()", "class_method_signature": "AbstractPluginManager.getPluginClassLoaders()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initialize()", "full_signature": "protected void initialize()", "class_method_signature": "AbstractPluginManager.initialize()", "testcase": false, "constructor": false}, {"identifier": "createPluginsRoot", "parameters": "()", "modifiers": "protected", "return": "Path", "signature": "Path createPluginsRoot()", "full_signature": "protected Path createPluginsRoot()", "class_method_signature": "AbstractPluginManager.createPluginsRoot()", "testcase": false, "constructor": false}, {"identifier": "isPluginValid", "parameters": "(PluginWrapper pluginWrapper)", "modifiers": "protected", "return": "boolean", "signature": "boolean isPluginValid(PluginWrapper pluginWrapper)", "full_signature": "protected boolean isPluginValid(PluginWrapper pluginWrapper)", "class_method_signature": "AbstractPluginManager.isPluginValid(PluginWrapper pluginWrapper)", "testcase": false, "constructor": false}, {"identifier": "isPluginDisabled", "parameters": "(String pluginId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isPluginDisabled(String pluginId)", "full_signature": "protected boolean isPluginDisabled(String pluginId)", "class_method_signature": "AbstractPluginManager.isPluginDisabled(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "resolvePlugins", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void resolvePlugins()", "full_signature": "protected void resolvePlugins()", "class_method_signature": "AbstractPluginManager.resolvePlugins()", "testcase": false, "constructor": false}, {"identifier": "firePluginStateEvent", "parameters": "(PluginStateEvent event)", "modifiers": "protected synchronized", "return": "void", "signature": "void firePluginStateEvent(PluginStateEvent event)", "full_signature": "protected synchronized void firePluginStateEvent(PluginStateEvent event)", "class_method_signature": "AbstractPluginManager.firePluginStateEvent(PluginStateEvent event)", "testcase": false, "constructor": false}, {"identifier": "loadPluginFromPath", "parameters": "(Path pluginPath)", "modifiers": "protected", "return": "PluginWrapper", "signature": "PluginWrapper loadPluginFromPath(Path pluginPath)", "full_signature": "protected PluginWrapper loadPluginFromPath(Path pluginPath)", "class_method_signature": "AbstractPluginManager.loadPluginFromPath(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "idForPath", "parameters": "(Path pluginPath)", "modifiers": "protected", "return": "String", "signature": "String idForPath(Path pluginPath)", "full_signature": "protected String idForPath(Path pluginPath)", "class_method_signature": "AbstractPluginManager.idForPath(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "validatePluginDescriptor", "parameters": "(PluginDescriptor descriptor)", "modifiers": "protected", "return": "void", "signature": "void validatePluginDescriptor(PluginDescriptor descriptor)", "full_signature": "protected void validatePluginDescriptor(PluginDescriptor descriptor)", "class_method_signature": "AbstractPluginManager.validatePluginDescriptor(PluginDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "isExactVersionAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExactVersionAllowed()", "full_signature": "public boolean isExactVersionAllowed()", "class_method_signature": "AbstractPluginManager.isExactVersionAllowed()", "testcase": false, "constructor": false}, {"identifier": "setExactVersionAllowed", "parameters": "(boolean exactVersionAllowed)", "modifiers": "public", "return": "void", "signature": "void setExactVersionAllowed(boolean exactVersionAllowed)", "full_signature": "public void setExactVersionAllowed(boolean exactVersionAllowed)", "class_method_signature": "AbstractPluginManager.setExactVersionAllowed(boolean exactVersionAllowed)", "testcase": false, "constructor": false}, {"identifier": "getVersionManager", "parameters": "()", "modifiers": "@Override public", "return": "VersionManager", "signature": "VersionManager getVersionManager()", "full_signature": "@Override public VersionManager getVersionManager()", "class_method_signature": "AbstractPluginManager.getVersionManager()", "testcase": false, "constructor": false}, {"identifier": "getPluginLabel", "parameters": "(PluginDescriptor pluginDescriptor)", "modifiers": "protected", "return": "String", "signature": "String getPluginLabel(PluginDescriptor pluginDescriptor)", "full_signature": "protected String getPluginLabel(PluginDescriptor pluginDescriptor)", "class_method_signature": "AbstractPluginManager.getPluginLabel(PluginDescriptor pluginDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getExtensionClasses", "parameters": "(List<ExtensionWrapper<T>> extensionsWrapper)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<Class<? extends T>>", "signature": "List<Class<? extends T>> getExtensionClasses(List<ExtensionWrapper<T>> extensionsWrapper)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<Class<? extends T>> getExtensionClasses(List<ExtensionWrapper<T>> extensionsWrapper)", "class_method_signature": "AbstractPluginManager.getExtensionClasses(List<ExtensionWrapper<T>> extensionsWrapper)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "(List<ExtensionWrapper<T>> extensionsWrapper)", "modifiers": "protected", "return": "List<T>", "signature": "List<T> getExtensions(List<ExtensionWrapper<T>> extensionsWrapper)", "full_signature": "protected List<T> getExtensions(List<ExtensionWrapper<T>> extensionsWrapper)", "class_method_signature": "AbstractPluginManager.getExtensions(List<ExtensionWrapper<T>> extensionsWrapper)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/AbstractPluginManager.java"}, "focal_method": {"identifier": "getExtensions", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public <T> List<T> getExtensions(Class<T> type) {\n        return getExtensions(extensionFinder.find(type));\n    }", "signature": "List<T> getExtensions(Class<T> type)", "full_signature": "@Override public List<T> getExtensions(Class<T> type)", "class_method_signature": "AbstractPluginManager.getExtensions(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["getExtensions", "find"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}