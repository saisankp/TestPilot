{"test_class": {"identifier": "AmqpValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AmqpValidator UNDER_TEST = AmqpValidator.newInstance();", "modifier": "private static final", "type": "AmqpValidator", "declarator": "UNDER_TEST = AmqpValidator.newInstance()", "var_name": "UNDER_TEST"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpValidatorTest.java"}, "test_case": {"identifier": "testValidPlaceholdersInTargetAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidPlaceholdersInTargetAddress() {\n        final Target target = newTargetBuilder()\n                .address(\"some.address.{{ topic:action-subject }}.{{ thing:id }}.{{ header:correlation-id }}\")\n                .authorizationContext(AUTHORIZATION_CONTEXT)\n                .topics(Topic.LIVE_COMMANDS)\n                .build();\n\n        UNDER_TEST.validateTarget(target, DittoHeaders.empty(), () -> \"testTarget\");\n    }", "signature": "void testValidPlaceholdersInTargetAddress()", "full_signature": "@Test public void testValidPlaceholdersInTargetAddress()", "class_method_signature": "AmqpValidatorTest.testValidPlaceholdersInTargetAddress()", "testcase": true, "constructor": false, "invocations": ["build", "topics", "authorizationContext", "address", "newTargetBuilder", "validateTarget", "empty"]}, "focal_class": {"identifier": "AmqpValidator", "superclass": "extends AbstractProtocolValidator", "interfaces": "", "fields": [{"original_string": "private static final Collection<String> ACCEPTED_SCHEMES =\n            Collections.unmodifiableList(Arrays.asList(\"amqp\", \"amqps\"));", "modifier": "private static final", "type": "Collection<String>", "declarator": "ACCEPTED_SCHEMES =\n            Collections.unmodifiableList(Arrays.asList(\"amqp\", \"amqps\"))", "var_name": "ACCEPTED_SCHEMES"}, {"original_string": "private static final Collection<String> SECURE_SCHEMES = Collections.singletonList(\"amqps\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "SECURE_SCHEMES = Collections.singletonList(\"amqps\")", "var_name": "SECURE_SCHEMES"}], "methods": [{"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "AmqpValidator", "signature": "AmqpValidator newInstance()", "full_signature": "public static AmqpValidator newInstance()", "class_method_signature": "AmqpValidator.newInstance()", "testcase": false, "constructor": false}, {"identifier": "validateSource", "parameters": "(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "full_signature": "@Override protected void validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "class_method_signature": "AmqpValidator.validateSource(final Source source, final DittoHeaders dittoHeaders,\n            final Supplier<String> sourceDescription)", "testcase": false, "constructor": false}, {"identifier": "validateTarget", "parameters": "(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "modifiers": "@Override protected", "return": "void", "signature": "void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "full_signature": "@Override protected void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "class_method_signature": "AmqpValidator.validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override public", "return": "ConnectionType", "signature": "ConnectionType type()", "full_signature": "@Override public ConnectionType type()", "class_method_signature": "AmqpValidator.type()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "full_signature": "@Override public void validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "class_method_signature": "AmqpValidator.validate(final Connection connection, final DittoHeaders dittoHeaders, final ActorSystem actorSystem)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/amqp/AmqpValidator.java"}, "focal_method": {"identifier": "validateTarget", "parameters": "(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription) {\n        target.getHeaderMapping().ifPresent(mapping -> validateHeaderMapping(mapping, dittoHeaders));\n        validateTemplate(target.getAddress(), dittoHeaders, Resolvers.getPlaceholders());\n    }", "signature": "void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "full_signature": "@Override protected void validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "class_method_signature": "AmqpValidator.validateTarget(final Target target, final DittoHeaders dittoHeaders,\n            final Supplier<String> targetDescription)", "testcase": false, "constructor": false, "invocations": ["ifPresent", "getHeaderMapping", "validateHeaderMapping", "validateTemplate", "getAddress", "getPlaceholders"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}