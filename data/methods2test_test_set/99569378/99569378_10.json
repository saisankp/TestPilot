{"test_class": {"identifier": "ActorsProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RoundEnvironment mEnvironment;", "modifier": "@Mock\n    private", "type": "RoundEnvironment", "declarator": "mEnvironment", "var_name": "mEnvironment"}, {"original_string": "@Mock\n    private ModelFactory mFactory;", "modifier": "@Mock\n    private", "type": "ModelFactory", "declarator": "mFactory", "var_name": "mFactory"}, {"original_string": "@Mock\n    private ProcessingEnvironment mProcessingEnvironment;", "modifier": "@Mock\n    private", "type": "ProcessingEnvironment", "declarator": "mProcessingEnvironment", "var_name": "mProcessingEnvironment"}, {"original_string": "@Mock\n    private Filer mFiler;", "modifier": "@Mock\n    private", "type": "Filer", "declarator": "mFiler", "var_name": "mFiler"}], "file": "generator/src/test/java/com/truecaller/androidactors/ActorsProcessorTest.java"}, "test_case": {"identifier": "validateModel_false_moreThanOnePackageAnnotations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateModel_false_moreThanOnePackageAnnotations() {\n        ActorParsedModel model = new ActorParsedModel();\n        ActorsPackageDescription packageDescription = Mockito.mock(ActorsPackageDescription.class);\n        Mockito.doReturn(true).when(packageDescription).validate();\n\n        model.packages.add(packageDescription);\n        model.packages.add(packageDescription);\n\n        ActorsProcessor processor = new ActorsProcessor(mFactory);\n        Assert.assertEquals(false, processor.validateModel(model));\n\n        Assert.assertEquals(1, model.errors.size());\n        Assert.assertEquals(true, model.errors.get(0).isError);\n        Assert.assertEquals(GenerationError.ER0009, model.errors.get(0).message);\n    }", "signature": "void validateModel_false_moreThanOnePackageAnnotations()", "full_signature": "@Test public void validateModel_false_moreThanOnePackageAnnotations()", "class_method_signature": "ActorsProcessorTest.validateModel_false_moreThanOnePackageAnnotations()", "testcase": true, "constructor": false, "invocations": ["mock", "validate", "when", "doReturn", "add", "add", "assertEquals", "validateModel", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ActorsProcessor", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [{"original_string": "private final ModelFactory mModelFactory;", "modifier": "private final", "type": "ModelFactory", "declarator": "mModelFactory", "var_name": "mModelFactory"}, {"original_string": "private ActorParsedModel mParsedModel;", "modifier": "private", "type": "ActorParsedModel", "declarator": "mParsedModel", "var_name": "mParsedModel"}, {"original_string": "private ActorGeneratedModel mGeneratedModel;", "modifier": "private", "type": "ActorGeneratedModel", "declarator": "mGeneratedModel", "var_name": "mGeneratedModel"}], "methods": [{"identifier": "ActorsProcessor", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "", "signature": " ActorsProcessor()", "full_signature": "@SuppressWarnings(\"unused\") public  ActorsProcessor()", "class_method_signature": "ActorsProcessor.ActorsProcessor()", "testcase": false, "constructor": true}, {"identifier": "ActorsProcessor", "parameters": "(@NotNull ModelFactory modelFactory)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ActorsProcessor(@NotNull ModelFactory modelFactory)", "full_signature": "@VisibleForTesting  ActorsProcessor(@NotNull ModelFactory modelFactory)", "class_method_signature": "ActorsProcessor.ActorsProcessor(@NotNull ModelFactory modelFactory)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ProcessingEnvironment processingEnv)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void init(ProcessingEnvironment processingEnv)", "full_signature": "@Override public synchronized void init(ProcessingEnvironment processingEnv)", "class_method_signature": "ActorsProcessor.init(ProcessingEnvironment processingEnv)", "testcase": false, "constructor": false}, {"identifier": "getSupportedSourceVersion", "parameters": "()", "modifiers": "@Override public", "return": "SourceVersion", "signature": "SourceVersion getSupportedSourceVersion()", "full_signature": "@Override public SourceVersion getSupportedSourceVersion()", "class_method_signature": "ActorsProcessor.getSupportedSourceVersion()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "full_signature": "@Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "class_method_signature": "ActorsProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "testcase": false, "constructor": false}, {"identifier": "configureModel", "parameters": "(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "modifiers": "private", "return": "void", "signature": "void configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "full_signature": "private void configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "class_method_signature": "ActorsProcessor.configureModel(@NotNull Set<? extends TypeElement> annotations, @NotNull ActorParsedModel model)", "testcase": false, "constructor": false}, {"identifier": "parseModel", "parameters": "(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "full_signature": "@VisibleForTesting void parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "class_method_signature": "ActorsProcessor.parseModel(@NotNull ActorParsedModel model, @NotNull RoundEnvironment environment)", "testcase": false, "constructor": false}, {"identifier": "validateModel", "parameters": "(@NotNull ActorParsedModel model)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean validateModel(@NotNull ActorParsedModel model)", "full_signature": "@VisibleForTesting boolean validateModel(@NotNull ActorParsedModel model)", "class_method_signature": "ActorsProcessor.validateModel(@NotNull ActorParsedModel model)", "testcase": false, "constructor": false}, {"identifier": "generateFromModel", "parameters": "(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "full_signature": "@VisibleForTesting void generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "class_method_signature": "ActorsProcessor.generateFromModel(@NotNull ActorParsedModel model, @NotNull ActorGeneratedModel generated)", "testcase": false, "constructor": false}, {"identifier": "writeModel", "parameters": "(@NotNull ActorGeneratedModel model)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean writeModel(@NotNull ActorGeneratedModel model)", "full_signature": "@VisibleForTesting boolean writeModel(@NotNull ActorGeneratedModel model)", "class_method_signature": "ActorsProcessor.writeModel(@NotNull ActorGeneratedModel model)", "testcase": false, "constructor": false}, {"identifier": "containsAnnotation", "parameters": "(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "modifiers": "private", "return": "boolean", "signature": "boolean containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "full_signature": "private boolean containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "class_method_signature": "ActorsProcessor.containsAnnotation(Set<? extends TypeElement> annotations, Class<? extends Annotation> needle)", "testcase": false, "constructor": false}], "file": "generator/src/main/java/com/truecaller/androidactors/ActorsProcessor.java"}, "focal_method": {"identifier": "validateModel", "parameters": "(@NotNull ActorParsedModel model)", "modifiers": "@VisibleForTesting", "return": "boolean", "body": "@VisibleForTesting\n    /* package */ boolean validateModel(@NotNull ActorParsedModel model) {\n        boolean result = true;\n\n        if (model.collectInterfaces) {\n            for (ActorInterfaceDescription _interface : model.interfaces) {\n                if (!_interface.validate()) {\n                    _interface.describeProblems(model.errors);\n                    result = false;\n                }\n            }\n        }\n\n        if (!model.collectInterfaces || model.collectPackages) {\n            int packages = 0;\n            for (ActorsPackageDescription _package : model.packages) {\n                if (!_package.validate()) {\n                    _package.describeProblems(model.errors);\n                } else {\n                    ++packages;\n                }\n            }\n\n            switch (packages) {\n                case 0:\n                    model.errors.add(new GenerationError(GenerationError.ER0010));\n                    result = false;\n                    break;\n                case 1:\n                    break;\n                default:\n                    model.errors.add(new GenerationError(GenerationError.ER0009));\n                    result = false;\n                    break;\n            }\n        }\n\n        return result;\n    }", "signature": "boolean validateModel(@NotNull ActorParsedModel model)", "full_signature": "@VisibleForTesting boolean validateModel(@NotNull ActorParsedModel model)", "class_method_signature": "ActorsProcessor.validateModel(@NotNull ActorParsedModel model)", "testcase": false, "constructor": false, "invocations": ["validate", "describeProblems", "validate", "describeProblems", "add", "add"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}