{"test_class": {"identifier": "FileWatcherTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/src/test/java/ship/util/FileWatcherTest.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test @PrepareForTest(File.class) public", "return": "void", "body": "@Test\n  @PrepareForTest(File.class)\n  public void testProcess() throws Exception {\n    // Given\n    final File base = mock(File.class);\n\n    // When\n    final FileWatcher fileWatcher = new FileWatcher(base);\n    fileWatcher.process();\n\n    // Then\n  }", "signature": "void testProcess()", "full_signature": "@Test @PrepareForTest(File.class) public void testProcess()", "class_method_signature": "FileWatcherTest.testProcess()", "testcase": true, "constructor": false, "invocations": ["mock", "process"]}, "focal_class": {"identifier": "FileWatcher", "superclass": "extends ThreadServer", "interfaces": "implements Runnable", "fields": [{"original_string": "public static final int RESET = 0x11;", "modifier": "public static final", "type": "int", "declarator": "RESET = 0x11", "var_name": "RESET"}, {"original_string": "public static final int FILE_ADDED = 0x12;", "modifier": "public static final", "type": "int", "declarator": "FILE_ADDED = 0x12", "var_name": "FILE_ADDED"}, {"original_string": "public static final int FILE_REMOVED = 0x13;", "modifier": "public static final", "type": "int", "declarator": "FILE_REMOVED = 0x13", "var_name": "FILE_REMOVED"}, {"original_string": "public static final int FILE_CHANGED = 0x14;", "modifier": "public static final", "type": "int", "declarator": "FILE_CHANGED = 0x14", "var_name": "FILE_CHANGED"}, {"original_string": "public static final int ANY_CHANGED = 0x18;", "modifier": "public static final", "type": "int", "declarator": "ANY_CHANGED = 0x18", "var_name": "ANY_CHANGED"}, {"original_string": "@Getter\n  @Setter\n  protected long interval = 300;", "modifier": "@Getter\n  @Setter\n  protected", "type": "long", "declarator": "interval = 300", "var_name": "interval"}, {"original_string": "protected final HashMap<File, Long> base2lastModified1 = new HashMap<>();", "modifier": "protected final", "type": "HashMap<File, Long>", "declarator": "base2lastModified1 = new HashMap<>()", "var_name": "base2lastModified1"}, {"original_string": "protected final File base;", "modifier": "protected final", "type": "File", "declarator": "base", "var_name": "base"}, {"original_string": "protected long lastModified = 0;", "modifier": "protected", "type": "long", "declarator": "lastModified = 0", "var_name": "lastModified"}, {"original_string": "protected Set<File> previouslyChecked = new HashSet<>();", "modifier": "protected", "type": "Set<File>", "declarator": "previouslyChecked = new HashSet<>()", "var_name": "previouslyChecked"}, {"original_string": "protected Set<String> ignores = new HashSet<>();", "modifier": "protected", "type": "Set<String>", "declarator": "ignores = new HashSet<>()", "var_name": "ignores"}], "methods": [{"identifier": "FileWatcher", "parameters": "(final File basePath)", "modifiers": "public", "return": "", "signature": " FileWatcher(final File basePath)", "full_signature": "public  FileWatcher(final File basePath)", "class_method_signature": "FileWatcher.FileWatcher(final File basePath)", "testcase": false, "constructor": true}, {"identifier": "addIgnore", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void addIgnore(final String name)", "full_signature": "public void addIgnore(final String name)", "class_method_signature": "FileWatcher.addIgnore(final String name)", "testcase": false, "constructor": false}, {"identifier": "rake", "parameters": "(final Set<File> checked, final Set<File> changed)", "modifiers": "protected", "return": "void", "signature": "void rake(final Set<File> checked, final Set<File> changed)", "full_signature": "protected void rake(final Set<File> checked, final Set<File> changed)", "class_method_signature": "FileWatcher.rake(final Set<File> checked, final Set<File> changed)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"unsafe\"}) protected", "return": "void", "signature": "void process()", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"unsafe\"}) protected void process()", "class_method_signature": "FileWatcher.process()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/util/FileWatcher.java"}, "focal_method": {"identifier": "process", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"unsafe\"}) protected", "return": "void", "body": "@Override\n  @SuppressWarnings({\"unchecked\", \"unsafe\"})\n  protected void process() throws Exception {\n    trySleep(getInterval());\n    final HashSet<File> checkedFiles = new HashSet<>();\n    final HashSet<File> changed = new HashSet<>();\n\n    rake(checkedFiles, changed);\n    logger.debug(\"Changed: {}\", changed);\n\n    final BeforeAndAfter<File> beforeAndAfter =\n        new BeforeAndAfter<>(previouslyChecked, checkedFiles);\n    previouslyChecked = checkedFiles;\n\n    final Set<File> added = beforeAndAfter.getAddedItems();\n    final Set<File> removed = beforeAndAfter.getRemovedItems();\n    final Set<File> any = asList(added, removed, changed).stream()\n        .flatMap(Collection::stream).collect(toSet());\n\n    asList(\n        new Pair<>(added, FILE_ADDED),\n        new Pair<>(removed, FILE_REMOVED),\n        new Pair<>(changed, FILE_CHANGED),\n        new Pair<>(any, ANY_CHANGED)\n    ).stream().filter(pair -> !pair.v1.isEmpty())\n        .map(pair -> new ServerEvent(this, pair.v2, unmodifiableCollection(pair.v1)))\n        .forEach(this::fireEvent);\n  }", "signature": "void process()", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"unsafe\"}) protected void process()", "class_method_signature": "FileWatcher.process()", "testcase": false, "constructor": false, "invocations": ["trySleep", "getInterval", "rake", "debug", "getAddedItems", "getRemovedItems", "collect", "flatMap", "stream", "asList", "toSet", "forEach", "map", "filter", "stream", "asList", "isEmpty", "unmodifiableCollection"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}