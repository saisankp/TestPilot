{"test_class": {"identifier": "ManifestProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId THING_ID = ThingId.of(\"org.eclipse.ditto.test\",\"myThing\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"org.eclipse.ditto.test\",\"myThing\")", "var_name": "THING_ID"}, {"original_string": "private static final Thing THING = Thing.newBuilder()\n            .setId(THING_ID)\n            .build();", "modifier": "private static final", "type": "Thing", "declarator": "THING = Thing.newBuilder()\n            .setId(THING_ID)\n            .build()", "var_name": "THING"}, {"original_string": "private ManifestProvider underTest = null;", "modifier": "private", "type": "ManifestProvider", "declarator": "underTest = null", "var_name": "underTest"}], "file": "services/utils/cluster/src/test/java/org/eclipse/ditto/services/utils/cluster/ManifestProviderTest.java"}, "test_case": {"identifier": "getManifestFromCommandNotSupportedException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getManifestFromCommandNotSupportedException() {\n        final DittoRuntimeException exception = CommandNotSupportedException.newBuilder(1).build();\n        final String manifest = underTest.apply(exception);\n\n        assertThat(manifest).isEqualTo(exception.getErrorCode());\n    }", "signature": "void getManifestFromCommandNotSupportedException()", "full_signature": "@Test public void getManifestFromCommandNotSupportedException()", "class_method_signature": "ManifestProviderTest.getManifestFromCommandNotSupportedException()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "apply", "isEqualTo", "assertThat", "getErrorCode"]}, "focal_class": {"identifier": "ManifestProvider", "superclass": "", "interfaces": "implements Function<Object, String>", "fields": [{"original_string": "private static final ManifestProvider INSTANCE = new ManifestProvider();", "modifier": "private static final", "type": "ManifestProvider", "declarator": "INSTANCE = new ManifestProvider()", "var_name": "INSTANCE"}], "methods": [{"identifier": "ManifestProvider", "parameters": "()", "modifiers": "private", "return": "", "signature": " ManifestProvider()", "full_signature": "private  ManifestProvider()", "class_method_signature": "ManifestProvider.ManifestProvider()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ManifestProvider", "signature": "ManifestProvider getInstance()", "full_signature": "public static ManifestProvider getInstance()", "class_method_signature": "ManifestProvider.getInstance()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "String", "signature": "String apply(final Object o)", "full_signature": "@Override public String apply(final Object o)", "class_method_signature": "ManifestProvider.apply(final Object o)", "testcase": false, "constructor": false}], "file": "services/utils/cluster/src/main/java/org/eclipse/ditto/services/utils/cluster/ManifestProvider.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String apply(final Object o) {\n        checkNotNull(o, \"object\");\n        final Class<?> oClass = o.getClass();\n        if (WithManifest.class.isAssignableFrom(oClass)) {\n            final WithManifest withManifest = (WithManifest) o;\n            return withManifest.getManifest();\n        }\n        // Important: use the simple name without package!\n        return oClass.getSimpleName();\n    }", "signature": "String apply(final Object o)", "full_signature": "@Override public String apply(final Object o)", "class_method_signature": "ManifestProvider.apply(final Object o)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "getClass", "isAssignableFrom", "getManifest", "getSimpleName"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}