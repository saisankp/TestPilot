{"test_class": {"identifier": "GDBTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/composition/boosting/GDBTrainerTest.java"}, "test_case": {"identifier": "testUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdate() {\n        int sampleSize = 100;\n        double[] xs = new double[sampleSize];\n        double[] ys = new double[sampleSize];\n\n        for (int i = 0; i < sampleSize; i++) {\n            xs[i] = i;\n            ys[i] = ((int)(xs[i] / 10.0) % 2) == 0 ? -1.0 : 1.0;\n        }\n\n        Map<Integer, double[]> learningSample = new HashMap<>();\n        for (int i = 0; i < sampleSize; i++)\n            learningSample.put(i, new double[] {xs[i], ys[i]});\n        IgniteBiFunction<Integer, double[], Vector> fExtr = (k, v) -> VectorUtils.of(v[0]);\n        IgniteBiFunction<Integer, double[], Double> lExtr = (k, v) -> v[1];\n\n        GDBTrainer classifTrainer = new GDBBinaryClassifierOnTreesTrainer(0.3, 500, 3, 0.0)\n            .withUsingIdx(true)\n            .withCheckConvergenceStgyFactory(new MeanAbsValueConvergenceCheckerFactory(0.3));\n        GDBTrainer regressTrainer = new GDBRegressionOnTreesTrainer(0.3, 500, 3, 0.0)\n            .withUsingIdx(true)\n            .withCheckConvergenceStgyFactory(new MeanAbsValueConvergenceCheckerFactory(0.3));\n\n        //testUpdate(learningSample, fExtr, lExtr, classifTrainer);\n        //testUpdate(learningSample, fExtr, lExtr, regressTrainer);\n    }", "signature": "void testUpdate()", "full_signature": "@Test public void testUpdate()", "class_method_signature": "GDBTrainerTest.testUpdate()", "testcase": true, "constructor": false, "invocations": ["put", "of", "withCheckConvergenceStgyFactory", "withUsingIdx", "withCheckConvergenceStgyFactory", "withUsingIdx"]}, "focal_class": {"identifier": "GDBTrainer", "superclass": "extends DatasetTrainer<ModelsComposition, Double>", "interfaces": "", "fields": [{"original_string": "private final double gradientStep;", "modifier": "private final", "type": "double", "declarator": "gradientStep", "var_name": "gradientStep"}, {"original_string": "private final int cntOfIterations;", "modifier": "private final", "type": "int", "declarator": "cntOfIterations", "var_name": "cntOfIterations"}, {"original_string": "protected final Loss loss;", "modifier": "protected final", "type": "Loss", "declarator": "loss", "var_name": "loss"}, {"original_string": "protected ConvergenceCheckerFactory checkConvergenceStgyFactory = new MeanAbsValueConvergenceCheckerFactory(0.001);", "modifier": "protected", "type": "ConvergenceCheckerFactory", "declarator": "checkConvergenceStgyFactory = new MeanAbsValueConvergenceCheckerFactory(0.001)", "var_name": "checkConvergenceStgyFactory"}], "methods": [{"identifier": "GDBTrainer", "parameters": "(double gradStepSize, Integer cntOfIterations, Loss loss)", "modifiers": "public", "return": "", "signature": " GDBTrainer(double gradStepSize, Integer cntOfIterations, Loss loss)", "full_signature": "public  GDBTrainer(double gradStepSize, Integer cntOfIterations, Loss loss)", "class_method_signature": "GDBTrainer.GDBTrainer(double gradStepSize, Integer cntOfIterations, Loss loss)", "testcase": false, "constructor": true}, {"identifier": "fitWithInitializedDeployingContext", "parameters": "(DatasetBuilder<K, V> datasetBuilder,\n                                                  Preprocessor<K, V> preprocessor)", "modifiers": "@Override public", "return": "ModelsComposition", "signature": "ModelsComposition fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                  Preprocessor<K, V> preprocessor)", "full_signature": "@Override public ModelsComposition fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                  Preprocessor<K, V> preprocessor)", "class_method_signature": "GDBTrainer.fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                  Preprocessor<K, V> preprocessor)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(ModelsComposition mdl,\n                                                             DatasetBuilder<K, V> datasetBuilder,\n                                                             Preprocessor<K, V> preprocessor)", "modifiers": "@Override protected", "return": "ModelsComposition", "signature": "ModelsComposition updateModel(ModelsComposition mdl,\n                                                             DatasetBuilder<K, V> datasetBuilder,\n                                                             Preprocessor<K, V> preprocessor)", "full_signature": "@Override protected ModelsComposition updateModel(ModelsComposition mdl,\n                                                             DatasetBuilder<K, V> datasetBuilder,\n                                                             Preprocessor<K, V> preprocessor)", "class_method_signature": "GDBTrainer.updateModel(ModelsComposition mdl,\n                                                             DatasetBuilder<K, V> datasetBuilder,\n                                                             Preprocessor<K, V> preprocessor)", "testcase": false, "constructor": false}, {"identifier": "isUpdateable", "parameters": "(ModelsComposition mdl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateable(ModelsComposition mdl)", "full_signature": "@Override public boolean isUpdateable(ModelsComposition mdl)", "class_method_signature": "GDBTrainer.isUpdateable(ModelsComposition mdl)", "testcase": false, "constructor": false}, {"identifier": "withEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder envBuilder)", "modifiers": "@Override public", "return": "GDBTrainer", "signature": "GDBTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "full_signature": "@Override public GDBTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "class_method_signature": "GDBTrainer.withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}, {"identifier": "learnLabels", "parameters": "(DatasetBuilder<K, V> builder,\n                                                  Preprocessor<K, V> preprocessor)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean learnLabels(DatasetBuilder<K, V> builder,\n                                                  Preprocessor<K, V> preprocessor)", "full_signature": "protected abstract boolean learnLabels(DatasetBuilder<K, V> builder,\n                                                  Preprocessor<K, V> preprocessor)", "class_method_signature": "GDBTrainer.learnLabels(DatasetBuilder<K, V> builder,\n                                                  Preprocessor<K, V> preprocessor)", "testcase": false, "constructor": false}, {"identifier": "buildBaseModelTrainer", "parameters": "()", "modifiers": "@NotNull protected abstract", "return": "DatasetTrainer<? extends IgniteModel<Vector, Double>, Double>", "signature": "DatasetTrainer<? extends IgniteModel<Vector, Double>, Double> buildBaseModelTrainer()", "full_signature": "@NotNull protected abstract DatasetTrainer<? extends IgniteModel<Vector, Double>, Double> buildBaseModelTrainer()", "class_method_signature": "GDBTrainer.buildBaseModelTrainer()", "testcase": false, "constructor": false}, {"identifier": "externalLabelToInternal", "parameters": "(double lbl)", "modifiers": "protected abstract", "return": "double", "signature": "double externalLabelToInternal(double lbl)", "full_signature": "protected abstract double externalLabelToInternal(double lbl)", "class_method_signature": "GDBTrainer.externalLabelToInternal(double lbl)", "testcase": false, "constructor": false}, {"identifier": "internalLabelToExternal", "parameters": "(double lbl)", "modifiers": "protected abstract", "return": "double", "signature": "double internalLabelToExternal(double lbl)", "full_signature": "protected abstract double internalLabelToExternal(double lbl)", "class_method_signature": "GDBTrainer.internalLabelToExternal(double lbl)", "testcase": false, "constructor": false}, {"identifier": "computeInitialValue", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> builder,\n        Preprocessor<K, V> preprocessor)", "modifiers": "protected", "return": "IgniteBiTuple<Double, Long>", "signature": "IgniteBiTuple<Double, Long> computeInitialValue(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> builder,\n        Preprocessor<K, V> preprocessor)", "full_signature": "protected IgniteBiTuple<Double, Long> computeInitialValue(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> builder,\n        Preprocessor<K, V> preprocessor)", "class_method_signature": "GDBTrainer.computeInitialValue(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> builder,\n        Preprocessor<K, V> preprocessor)", "testcase": false, "constructor": false}, {"identifier": "withCheckConvergenceStgyFactory", "parameters": "(ConvergenceCheckerFactory factory)", "modifiers": "public", "return": "GDBTrainer", "signature": "GDBTrainer withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "full_signature": "public GDBTrainer withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "class_method_signature": "GDBTrainer.withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getLearningStrategy", "parameters": "()", "modifiers": "protected", "return": "GDBLearningStrategy", "signature": "GDBLearningStrategy getLearningStrategy()", "full_signature": "protected GDBLearningStrategy getLearningStrategy()", "class_method_signature": "GDBTrainer.getLearningStrategy()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/composition/boosting/GDBTrainer.java"}, "focal_method": {"identifier": "withCheckConvergenceStgyFactory", "parameters": "(ConvergenceCheckerFactory factory)", "modifiers": "public", "return": "GDBTrainer", "body": "public GDBTrainer withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory) {\n        this.checkConvergenceStgyFactory = factory;\n        return this;\n    }", "signature": "GDBTrainer withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "full_signature": "public GDBTrainer withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "class_method_signature": "GDBTrainer.withCheckConvergenceStgyFactory(ConvergenceCheckerFactory factory)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}