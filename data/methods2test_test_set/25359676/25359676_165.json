{"test_class": {"identifier": "MaxValueIncrementerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private DataSource mysql;", "modifier": "@Mock private", "type": "DataSource", "declarator": "mysql", "var_name": "mysql"}, {"original_string": "@Mock private DataSource oracle;", "modifier": "@Mock private", "type": "DataSource", "declarator": "oracle", "var_name": "oracle"}, {"original_string": "@Mock private DataSource bad;", "modifier": "@Mock private", "type": "DataSource", "declarator": "bad", "var_name": "bad"}], "file": "rice-framework/krad-data/src/test/java/org/kuali/rice/krad/data/platform/MaxValueIncrementerFactoryTest.java"}, "test_case": {"identifier": "testGetIncrementer_NullIncrementerName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testGetIncrementer_NullIncrementerName() throws Exception {\n        MaxValueIncrementerFactory.getIncrementer(mysql, null);\n    }", "signature": "void testGetIncrementer_NullIncrementerName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testGetIncrementer_NullIncrementerName()", "class_method_signature": "MaxValueIncrementerFactoryTest.testGetIncrementer_NullIncrementerName()", "testcase": true, "constructor": false, "invocations": ["getIncrementer"]}, "focal_class": {"identifier": "MaxValueIncrementerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ID_COLUMN_NAME = \"ID\";", "modifier": "private static final", "type": "String", "declarator": "ID_COLUMN_NAME = \"ID\"", "var_name": "ID_COLUMN_NAME"}, {"original_string": "public static final String PLATFORM_INCREMENTER_PREFIX = \"rice.krad.data.platform.incrementer.\";", "modifier": "public static final", "type": "String", "declarator": "PLATFORM_INCREMENTER_PREFIX = \"rice.krad.data.platform.incrementer.\"", "var_name": "PLATFORM_INCREMENTER_PREFIX"}, {"original_string": "private static final Map<DataSource, ConcurrentMap<String, DataFieldMaxValueIncrementer>> cache\n            = Collections.synchronizedMap(new IdentityHashMap<DataSource, ConcurrentMap<String, DataFieldMaxValueIncrementer>>(8));", "modifier": "private static final", "type": "Map<DataSource, ConcurrentMap<String, DataFieldMaxValueIncrementer>>", "declarator": "cache\n            = Collections.synchronizedMap(new IdentityHashMap<DataSource, ConcurrentMap<String, DataFieldMaxValueIncrementer>>(8))", "var_name": "cache"}], "methods": [{"identifier": "getIncrementer", "parameters": "(DataSource dataSource, String incrementerName)", "modifiers": "public static", "return": "DataFieldMaxValueIncrementer", "signature": "DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName)", "full_signature": "public static DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName)", "class_method_signature": "MaxValueIncrementerFactory.getIncrementer(DataSource dataSource, String incrementerName)", "testcase": false, "constructor": false}, {"identifier": "createIncrementer", "parameters": "(DataSource dataSource, String incrementerName)", "modifiers": "private static", "return": "DataFieldMaxValueIncrementer", "signature": "DataFieldMaxValueIncrementer createIncrementer(DataSource dataSource, String incrementerName)", "full_signature": "private static DataFieldMaxValueIncrementer createIncrementer(DataSource dataSource, String incrementerName)", "class_method_signature": "MaxValueIncrementerFactory.createIncrementer(DataSource dataSource, String incrementerName)", "testcase": false, "constructor": false}, {"identifier": "getCustomizedIncrementer", "parameters": "(DatabasePlatformInfo platformInfo, DataSource dataSource, String incrementerName, String columnName)", "modifiers": "private static", "return": "DataFieldMaxValueIncrementer", "signature": "DataFieldMaxValueIncrementer getCustomizedIncrementer(DatabasePlatformInfo platformInfo, DataSource dataSource, String incrementerName, String columnName)", "full_signature": "private static DataFieldMaxValueIncrementer getCustomizedIncrementer(DatabasePlatformInfo platformInfo, DataSource dataSource, String incrementerName, String columnName)", "class_method_signature": "MaxValueIncrementerFactory.getCustomizedIncrementer(DatabasePlatformInfo platformInfo, DataSource dataSource, String incrementerName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "MaxValueIncrementerFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " MaxValueIncrementerFactory()", "full_signature": "private  MaxValueIncrementerFactory()", "class_method_signature": "MaxValueIncrementerFactory.MaxValueIncrementerFactory()", "testcase": false, "constructor": true}], "file": "rice-framework/krad-data/src/main/java/org/kuali/rice/krad/data/platform/MaxValueIncrementerFactory.java"}, "focal_method": {"identifier": "getIncrementer", "parameters": "(DataSource dataSource, String incrementerName)", "modifiers": "public static", "return": "DataFieldMaxValueIncrementer", "body": "public static DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName) {\n        if (dataSource == null) {\n            throw new IllegalArgumentException(\"DataSource must not be null\");\n        }\n        if (StringUtils.isBlank(incrementerName)) {\n            throw new IllegalArgumentException(\"Incrementer name must not be null or blank\");\n        }\n\n        // yes, we want to check if it's there first, then put if absent, for max speed! This is like ConcurrentMap's\n        // version of double-checked locking.\n        ConcurrentMap<String, DataFieldMaxValueIncrementer> incrementerCache = cache.get(dataSource);\n\n        if (incrementerCache == null) {\n            cache.put(dataSource,\n                    new ConcurrentHashMap<String, DataFieldMaxValueIncrementer>(8, 0.9f, 1));\n            if (incrementerCache == null) {\n                incrementerCache = cache.get(dataSource);\n            }\n        }\n\n        // now check if we have a cached incrementer\n        DataFieldMaxValueIncrementer incrementer = incrementerCache.get(incrementerName.toUpperCase());\n        if (incrementer == null) {\n            incrementer = incrementerCache.putIfAbsent(incrementerName.toUpperCase(), createIncrementer(dataSource,\n                    incrementerName));\n            if (incrementer == null) {\n                incrementer = incrementerCache.get(incrementerName.toUpperCase());\n            }\n        }\n        return incrementer;\n\n    }", "signature": "DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName)", "full_signature": "public static DataFieldMaxValueIncrementer getIncrementer(DataSource dataSource, String incrementerName)", "class_method_signature": "MaxValueIncrementerFactory.getIncrementer(DataSource dataSource, String incrementerName)", "testcase": false, "constructor": false, "invocations": ["isBlank", "get", "put", "get", "get", "toUpperCase", "putIfAbsent", "toUpperCase", "createIncrementer", "get", "toUpperCase"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}