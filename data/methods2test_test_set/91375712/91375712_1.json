{"test_class": {"identifier": "RxOptionalTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SHOULD_NOT_EXECUTE = \"should not execute\";", "modifier": "public static final", "type": "String", "declarator": "SHOULD_NOT_EXECUTE = \"should not execute\"", "var_name": "SHOULD_NOT_EXECUTE"}], "file": "library/src/test/java/com/carterhudson/rxoptional/RxOptionalTest.java"}, "test_case": {"identifier": "or", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void or() {\n        assertEquals(\"1\", RxOptional.maybe(null).or(\"1\").get());\n    }", "signature": "void or()", "full_signature": "@Test public void or()", "class_method_signature": "RxOptionalTest.or()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "or", "maybe"]}, "focal_class": {"identifier": "RxOptional", "superclass": "extends Maybe<T>", "interfaces": "", "fields": [{"original_string": "private static RxOptional<?> EMPTY = new RxOptional<>();", "modifier": "private static", "type": "RxOptional<?>", "declarator": "EMPTY = new RxOptional<>()", "var_name": "EMPTY"}, {"original_string": "private T value;", "modifier": "private", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "private Maybe<T> delegate;", "modifier": "private", "type": "Maybe<T>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "RxOptional", "parameters": "()", "modifiers": "private", "return": "", "signature": " RxOptional()", "full_signature": "private  RxOptional()", "class_method_signature": "RxOptional.RxOptional()", "testcase": false, "constructor": true}, {"identifier": "RxOptional", "parameters": "(T value)", "modifiers": "private", "return": "", "signature": " RxOptional(T value)", "full_signature": "private  RxOptional(T value)", "class_method_signature": "RxOptional.RxOptional(T value)", "testcase": false, "constructor": true}, {"identifier": "maybe", "parameters": "(T value)", "modifiers": "public static", "return": "RxOptional<T>", "signature": "RxOptional<T> maybe(T value)", "full_signature": "public static RxOptional<T> maybe(T value)", "class_method_signature": "RxOptional.maybe(T value)", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "RxOptional<T>", "signature": "RxOptional<T> empty()", "full_signature": "@SuppressWarnings(\"unchecked\") public static RxOptional<T> empty()", "class_method_signature": "RxOptional.empty()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(T anotherValue)", "modifiers": "public", "return": "RxOptional<T>", "signature": "RxOptional<T> or(T anotherValue)", "full_signature": "public RxOptional<T> or(T anotherValue)", "class_method_signature": "RxOptional.or(T anotherValue)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(Function<T, Iterable<? extends U>> mapper)", "modifiers": "public", "return": "Observable<U>", "signature": "Observable<U> flatten(Function<T, Iterable<? extends U>> mapper)", "full_signature": "public Observable<U> flatten(Function<T, Iterable<? extends U>> mapper)", "class_method_signature": "RxOptional.flatten(Function<T, Iterable<? extends U>> mapper)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T get()", "full_signature": "public T get()", "class_method_signature": "RxOptional.get()", "testcase": false, "constructor": false}, {"identifier": "ifPresent", "parameters": "(@Nonnull Consumer<T> consumer)", "modifiers": "@Nonnull public", "return": "RxOptional<T>", "signature": "RxOptional<T> ifPresent(@Nonnull Consumer<T> consumer)", "full_signature": "@Nonnull public RxOptional<T> ifPresent(@Nonnull Consumer<T> consumer)", "class_method_signature": "RxOptional.ifPresent(@Nonnull Consumer<T> consumer)", "testcase": false, "constructor": false}, {"identifier": "ifNotPresent", "parameters": "(@Nonnull Action action)", "modifiers": "@Nonnull public", "return": "RxOptional<T>", "signature": "RxOptional<T> ifNotPresent(@Nonnull Action action)", "full_signature": "@Nonnull public RxOptional<T> ifNotPresent(@Nonnull Action action)", "class_method_signature": "RxOptional.ifNotPresent(@Nonnull Action action)", "testcase": false, "constructor": false}, {"identifier": "mapIfNotPresent", "parameters": "(@Nonnull Supplier<T> supplier)", "modifiers": "@Nonnull public", "return": "RxOptional<T>", "signature": "RxOptional<T> mapIfNotPresent(@Nonnull Supplier<T> supplier)", "full_signature": "@Nonnull public RxOptional<T> mapIfNotPresent(@Nonnull Supplier<T> supplier)", "class_method_signature": "RxOptional.mapIfNotPresent(@Nonnull Supplier<T> supplier)", "testcase": false, "constructor": false}, {"identifier": "mapIfPresent", "parameters": "(@Nonnull Function<T, R> function)", "modifiers": "@Nonnull public", "return": "RxOptional<R>", "signature": "RxOptional<R> mapIfPresent(@Nonnull Function<T, R> function)", "full_signature": "@Nonnull public RxOptional<R> mapIfPresent(@Nonnull Function<T, R> function)", "class_method_signature": "RxOptional.mapIfPresent(@Nonnull Function<T, R> function)", "testcase": false, "constructor": false}, {"identifier": "flatMapIfNotPresent", "parameters": "(@Nonnull Supplier<RxOptional<T>> supplier)", "modifiers": "@Nonnull public", "return": "RxOptional<T>", "signature": "RxOptional<T> flatMapIfNotPresent(@Nonnull Supplier<RxOptional<T>> supplier)", "full_signature": "@Nonnull public RxOptional<T> flatMapIfNotPresent(@Nonnull Supplier<RxOptional<T>> supplier)", "class_method_signature": "RxOptional.flatMapIfNotPresent(@Nonnull Supplier<RxOptional<T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "flatMapIfPresent", "parameters": "(@Nonnull Function<T, RxOptional<R>> function)", "modifiers": "@Nonnull public", "return": "RxOptional<R>", "signature": "RxOptional<R> flatMapIfPresent(@Nonnull Function<T, RxOptional<R>> function)", "full_signature": "@Nonnull public RxOptional<R> flatMapIfPresent(@Nonnull Function<T, RxOptional<R>> function)", "class_method_signature": "RxOptional.flatMapIfPresent(@Nonnull Function<T, RxOptional<R>> function)", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(MaybeObserver<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(MaybeObserver<? super T> observer)", "full_signature": "@Override protected void subscribeActual(MaybeObserver<? super T> observer)", "class_method_signature": "RxOptional.subscribeActual(MaybeObserver<? super T> observer)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/carterhudson/rxoptional/RxOptional.java"}, "focal_method": {"identifier": "or", "parameters": "(T anotherValue)", "modifiers": "public", "return": "RxOptional<T>", "body": "public RxOptional<T> or(T anotherValue) {\n        if (value == null) {\n            return new RxOptional<>(anotherValue);\n        }\n\n        return this;\n    }", "signature": "RxOptional<T> or(T anotherValue)", "full_signature": "public RxOptional<T> or(T anotherValue)", "class_method_signature": "RxOptional.or(T anotherValue)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 91375712, "url": "https://github.com/carterhudson/RxOptional", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 163, "license": "licensed"}}