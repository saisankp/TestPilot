{"test_class": {"identifier": "UpdateActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "private static final Base64.Decoder base64Decoder = Base64.getDecoder();", "modifier": "private static final", "type": "Base64.Decoder", "declarator": "base64Decoder = Base64.getDecoder()", "var_name": "base64Decoder"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "UpdateActionConfig updateActionConfig;", "modifier": "", "type": "UpdateActionConfig", "declarator": "updateActionConfig", "var_name": "updateActionConfig"}, {"original_string": "UpdateAction updateAction;", "modifier": "", "type": "UpdateAction", "declarator": "updateAction", "var_name": "updateAction"}, {"original_string": "Secret secret = new Secret(15, \"newSecret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(15, \"newSecret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null, null, null,\n      ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SecretDetailResponse secretDetailResponse = SecretDetailResponse.fromSecret(secret, null, null);", "modifier": "", "type": "SecretDetailResponse", "declarator": "secretDetailResponse = SecretDetailResponse.fromSecret(secret, null, null)", "var_name": "secretDetailResponse"}], "file": "cli/src/test/java/keywhiz/cli/commands/UpdateActionTest.java"}, "test_case": {"identifier": "updateCallsUpdateForSecret", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateCallsUpdateForSecret() throws Exception {\n    updateActionConfig.name = secret.getDisplayName();\n    updateActionConfig.expiry = \"2006-01-02T15:04:05Z\";\n    updateActionConfig.contentProvided = true;\n\n    byte[] content = base64Decoder.decode(secret.getSecret());\n    updateAction.stream = new ByteArrayInputStream(content);\n    when(keywhizClient.getSanitizedSecretByName(secret.getName()))\n        .thenThrow(new NotFoundException()); // Call checks for existence.\n\n    when(keywhizClient.updateSecret(secret.getName(), false, \"\", true, content, false,\n        updateActionConfig.getMetadata(Jackson.newObjectMapper()), true, 1136214245))\n        .thenReturn(secretDetailResponse);\n\n    updateAction.run();\n    verify(keywhizClient, times(1)).updateSecret(secret.getName(), false, \"\", true, content, false,\n        updateActionConfig.getMetadata(Jackson.newObjectMapper()), true, 1136214245);\n  }", "signature": "void updateCallsUpdateForSecret()", "full_signature": "@Test public void updateCallsUpdateForSecret()", "class_method_signature": "UpdateActionTest.updateCallsUpdateForSecret()", "testcase": true, "constructor": false, "invocations": ["getDisplayName", "decode", "getSecret", "thenThrow", "when", "getSanitizedSecretByName", "getName", "thenReturn", "when", "updateSecret", "getName", "getMetadata", "newObjectMapper", "run", "updateSecret", "verify", "times", "getName", "getMetadata", "newObjectMapper"]}, "focal_class": {"identifier": "UpdateAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(UpdateAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UpdateAction.class)", "var_name": "logger"}, {"original_string": "private final UpdateActionConfig config;", "modifier": "private final", "type": "UpdateActionConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "InputStream stream = System.in;", "modifier": "", "type": "InputStream", "declarator": "stream = System.in", "var_name": "stream"}], "methods": [{"identifier": "UpdateAction", "parameters": "(UpdateActionConfig config, KeywhizClient client,\n      ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " UpdateAction(UpdateActionConfig config, KeywhizClient client,\n      ObjectMapper mapper)", "full_signature": "public  UpdateAction(UpdateActionConfig config, KeywhizClient client,\n      ObjectMapper mapper)", "class_method_signature": "UpdateAction.UpdateAction(UpdateActionConfig config, KeywhizClient client,\n      ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "UpdateAction.run()", "testcase": false, "constructor": false}, {"identifier": "partialUpdateSecret", "parameters": "(String secretName, byte[] content,\n      AddOrUpdateActionConfig config)", "modifiers": "private", "return": "void", "signature": "void partialUpdateSecret(String secretName, byte[] content,\n      AddOrUpdateActionConfig config)", "full_signature": "private void partialUpdateSecret(String secretName, byte[] content,\n      AddOrUpdateActionConfig config)", "class_method_signature": "UpdateAction.partialUpdateSecret(String secretName, byte[] content,\n      AddOrUpdateActionConfig config)", "testcase": false, "constructor": false}, {"identifier": "readSecretContent", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] readSecretContent()", "full_signature": "private byte[] readSecretContent()", "class_method_signature": "UpdateAction.readSecretContent()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/UpdateAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    String secretName = config.name;\n\n    if (secretName == null || !validName(secretName)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n\n    byte[] content = {};\n    if (config.contentProvided) {\n      content = readSecretContent();\n      if (content.length == 0) {\n        throw new IllegalArgumentException(\"Secret content must be provided if --content flag is present; check inputs\");\n      }\n    }\n    partialUpdateSecret(secretName, content, config);\n\n    // If it appears that content was piped in but --content was not specified, print a warning\n    if (!config.contentProvided) {\n      try {\n        InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n        if (reader.ready()) {\n          System.out.println(\"\\nWarning: Specify the --content flag to update a secret's content.\");\n          System.out.println(\"The secret has not been updated with any provided content.\");\n        }\n      } catch (IOException e) {\n        logger.warn(\"Unexpected error trying to create an InputStreamReader for stdin: '{}'\", e.getMessage());\n      }\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "UpdateAction.run()", "testcase": false, "constructor": false, "invocations": ["validName", "format", "readSecretContent", "partialUpdateSecret", "ready", "println", "println", "warn", "getMessage"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}