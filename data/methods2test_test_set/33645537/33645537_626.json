{"test_class": {"identifier": "PackageUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/PackageUtilTest.java"}, "test_case": {"identifier": "getResourceInPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getResourceInPackage() throws IOException {\n        // null\n        assertNull(PackageUtil.getResourceInPackage(null));\n        assertNull(PackageUtil.getResourceInPackage(\"\"));\n        assertNull(PackageUtil.getResourceInPackage(\"     \"));\n\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getResourceInPackage(\"com.baidu.beidou.xxx\")));\n        assertTrue(CollectionUtil.isEmpty(PackageUtil.getResourceInPackage(\"notexist\")));\n        List<String> utils = PackageUtil.getResourceInPackage(\"com.baidu.unbiz.common\");\n        assertTrue(CollectionUtil.isNotEmpty(utils));\n        List<String> subUtils = PackageUtil.getResourceInPackage(\"com.baidu.unbiz.common.*\");\n        assertTrue(CollectionUtil.isNotEmpty(subUtils));\n        assertEquals(utils, subUtils);\n\n        List<String> langs = PackageUtil.getResourceInPackage(\"org.slf4j\");\n        assertTrue(CollectionUtil.isNotEmpty(langs));\n        List<String> subLangs = PackageUtil.getResourceInPackage(\"org.slf4j.*\");\n        assertTrue(CollectionUtil.isNotEmpty(subLangs));\n        // FIXME\n        assertEquals(subLangs, langs);\n\n    }", "signature": "void getResourceInPackage()", "full_signature": "@Test public void getResourceInPackage()", "class_method_signature": "PackageUtilTest.getResourceInPackage()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getResourceInPackage", "assertNull", "getResourceInPackage", "assertNull", "getResourceInPackage", "assertTrue", "isEmpty", "getResourceInPackage", "assertTrue", "isEmpty", "getResourceInPackage", "getResourceInPackage", "assertTrue", "isNotEmpty", "getResourceInPackage", "assertTrue", "isNotEmpty", "assertEquals", "getResourceInPackage", "assertTrue", "isNotEmpty", "getResourceInPackage", "assertTrue", "isNotEmpty", "assertEquals"]}, "focal_class": {"identifier": "PackageUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> EMPTY_LIST = Collections.emptyList();", "modifier": "private static final", "type": "List<String>", "declarator": "EMPTY_LIST = Collections.emptyList()", "var_name": "EMPTY_LIST"}], "methods": [{"identifier": "getResourceInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getResourceInPackage(String packageName)", "full_signature": "public static List<String> getResourceInPackage(String packageName)", "class_method_signature": "PackageUtil.getResourceInPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getClassesInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getClassesInPackage(String packageName)", "full_signature": "public static List<String> getClassesInPackage(String packageName)", "class_method_signature": "PackageUtil.getClassesInPackage(String packageName)", "testcase": false, "constructor": false}, {"identifier": "getClassesInPackage", "parameters": "(String packageName, List<String> included, List<String> excluded)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "full_signature": "public static List<String> getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "class_method_signature": "PackageUtil.getClassesInPackage(String packageName, List<String> included, List<String> excluded)", "testcase": false, "constructor": false}, {"identifier": "findClassesInJarPackage", "parameters": "(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "full_signature": "private static void findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "class_method_signature": "PackageUtil.findClassesInJarPackage(URL url, String packageName, List<String> included,\n            List<String> excluded, String packageDirName, final boolean recursive, List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "findClassesInDirPackage", "parameters": "(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "full_signature": "private static void findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "class_method_signature": "PackageUtil.findClassesInDirPackage(String packageName, List<String> included, List<String> excluded,\n            String packagePath, final boolean recursive, List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "filterClass", "parameters": "(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "modifiers": "private static", "return": "void", "signature": "void filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "full_signature": "private static void filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "class_method_signature": "PackageUtil.filterClass(String packageName, String className, List<String> included, List<String> excluded,\n            List<String> classes)", "testcase": false, "constructor": false}, {"identifier": "findResourceInJarPackage", "parameters": "(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "modifiers": "private static", "return": "void", "signature": "void findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "full_signature": "private static void findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "class_method_signature": "PackageUtil.findResourceInJarPackage(URL url, String packageName, String packageDirName, boolean recursive,\n            List<String> resources)", "testcase": false, "constructor": false}, {"identifier": "findResourceInDirPackage", "parameters": "(String packageName, String packagePath, List<String> resources)", "modifiers": "private static", "return": "void", "signature": "void findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "full_signature": "private static void findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "class_method_signature": "PackageUtil.findResourceInDirPackage(String packageName, String packagePath, List<String> resources)", "testcase": false, "constructor": false}, {"identifier": "getPackagePath", "parameters": "(String packageName)", "modifiers": "private static", "return": "String", "signature": "String getPackagePath(String packageName)", "full_signature": "private static String getPackagePath(String packageName)", "class_method_signature": "PackageUtil.getPackagePath(String packageName)", "testcase": false, "constructor": false}, {"identifier": "isIncluded", "parameters": "(String name, List<String> included, List<String> excluded)", "modifiers": "private static", "return": "boolean", "signature": "boolean isIncluded(String name, List<String> included, List<String> excluded)", "full_signature": "private static boolean isIncluded(String name, List<String> included, List<String> excluded)", "class_method_signature": "PackageUtil.isIncluded(String name, List<String> included, List<String> excluded)", "testcase": false, "constructor": false}, {"identifier": "isMatched", "parameters": "(String name, List<String> list)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMatched(String name, List<String> list)", "full_signature": "private static boolean isMatched(String name, List<String> list)", "class_method_signature": "PackageUtil.isMatched(String name, List<String> list)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Package", "signature": "Package getPackage(Class<?> clazz)", "full_signature": "public static Package getPackage(Class<?> clazz)", "class_method_signature": "PackageUtil.getPackage(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPackageNameForObject", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getPackageNameForObject(Object object)", "full_signature": "public static String getPackageNameForObject(Object object)", "class_method_signature": "PackageUtil.getPackageNameForObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getPackageName(Class<?> clazz)", "full_signature": "public static String getPackageName(Class<?> clazz)", "class_method_signature": "PackageUtil.getPackageName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "(String javaClassName)", "modifiers": "public static", "return": "String", "signature": "String getPackageName(String javaClassName)", "full_signature": "public static String getPackageName(String javaClassName)", "class_method_signature": "PackageUtil.getPackageName(String javaClassName)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForObjectClass", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForObjectClass(Object object)", "full_signature": "public static String getResourceNameForObjectClass(Object object)", "class_method_signature": "PackageUtil.getResourceNameForObjectClass(Object object)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForClass(Class<?> clazz)", "full_signature": "public static String getResourceNameForClass(Class<?> clazz)", "class_method_signature": "PackageUtil.getResourceNameForClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForClass", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForClass(String className)", "full_signature": "public static String getResourceNameForClass(String className)", "class_method_signature": "PackageUtil.getResourceNameForClass(String className)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForObjectPackage", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForObjectPackage(Object object)", "full_signature": "public static String getResourceNameForObjectPackage(Object object)", "class_method_signature": "PackageUtil.getResourceNameForObjectPackage(Object object)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForPackage", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForPackage(Class<?> clazz)", "full_signature": "public static String getResourceNameForPackage(Class<?> clazz)", "class_method_signature": "PackageUtil.getResourceNameForPackage(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getResourceNameForPackage", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getResourceNameForPackage(String className)", "full_signature": "public static String getResourceNameForPackage(String className)", "class_method_signature": "PackageUtil.getResourceNameForPackage(String className)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/PackageUtil.java"}, "focal_method": {"identifier": "getResourceInPackage", "parameters": "(String packageName)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getResourceInPackage(String packageName) throws IOException {\n        if (StringUtil.isBlank(packageName)) {\n            return null;\n        }\n\n        boolean recursive = packageName.endsWith(\".*\");\n        String packagePath = getPackagePath(packageName);\n        List<String> resources = CollectionUtil.createArrayList();\n        String packageDirName = packagePath.replace('.', '/');\n\n        URL[] dirs = ClassLoaderUtil.getResources(packageDirName);\n        for (URL url : dirs) {\n            String protocol = url.getProtocol();\n            if (\"file\".equals(protocol)) {\n                findResourceInDirPackage(packagePath, URLDecoder.decode(url.getFile(), \"UTF-8\"), resources);\n            } else if (\"jar\".equals(protocol)) {\n                findResourceInJarPackage(url, packageName, packageDirName, recursive, resources);\n            }\n\n        }\n        return resources;\n    }", "signature": "List<String> getResourceInPackage(String packageName)", "full_signature": "public static List<String> getResourceInPackage(String packageName)", "class_method_signature": "PackageUtil.getResourceInPackage(String packageName)", "testcase": false, "constructor": false, "invocations": ["isBlank", "endsWith", "getPackagePath", "createArrayList", "replace", "getResources", "getProtocol", "equals", "findResourceInDirPackage", "decode", "getFile", "equals", "findResourceInJarPackage"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}