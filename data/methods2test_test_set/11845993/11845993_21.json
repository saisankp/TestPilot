{"test_class": {"identifier": "TagExcludingSpanEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TagExcludingSpanEventListener tagExcludingSpanEventListener;", "modifier": "private", "type": "TagExcludingSpanEventListener", "declarator": "tagExcludingSpanEventListener", "var_name": "tagExcludingSpanEventListener"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/tagexclude/TagExcludingSpanEventListenerTest.java"}, "test_case": {"identifier": "testOtherExclude", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOtherExclude() throws Exception {\n\t\twhen(tracingPlugin.getExcludedTags()).thenReturn(Collections.singleton(\"bar\"));\n\t\tassertThat(tagExcludingSpanEventListener.onSetTag(\"foo\", \"bar\")).isEqualTo(\"bar\");\n\t\tassertThat(tagExcludingSpanEventListener.onSetTag(\"foo\", 1)).isEqualTo(1);\n\t}", "signature": "void testOtherExclude()", "full_signature": "@Test public void testOtherExclude()", "class_method_signature": "TagExcludingSpanEventListenerTest.testOtherExclude()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getExcludedTags", "singleton", "isEqualTo", "assertThat", "onSetTag", "isEqualTo", "assertThat", "onSetTag"]}, "focal_class": {"identifier": "TagExcludingSpanEventListener", "superclass": "extends StatelessSpanEventListener", "interfaces": "", "fields": [{"original_string": "private final TracingPlugin tracingPlugin;", "modifier": "private final", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "methods": [{"identifier": "TagExcludingSpanEventListener", "parameters": "(TracingPlugin tracingPlugin)", "modifiers": "public", "return": "", "signature": " TagExcludingSpanEventListener(TracingPlugin tracingPlugin)", "full_signature": "public  TagExcludingSpanEventListener(TracingPlugin tracingPlugin)", "class_method_signature": "TagExcludingSpanEventListener.TagExcludingSpanEventListener(TracingPlugin tracingPlugin)", "testcase": false, "constructor": true}, {"identifier": "onSetTag", "parameters": "(String key, Number value)", "modifiers": "@Override public", "return": "Number", "signature": "Number onSetTag(String key, Number value)", "full_signature": "@Override public Number onSetTag(String key, Number value)", "class_method_signature": "TagExcludingSpanEventListener.onSetTag(String key, Number value)", "testcase": false, "constructor": false}, {"identifier": "onSetTag", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "String", "signature": "String onSetTag(String key, String value)", "full_signature": "@Override public String onSetTag(String key, String value)", "class_method_signature": "TagExcludingSpanEventListener.onSetTag(String key, String value)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/tagexclude/TagExcludingSpanEventListener.java"}, "focal_method": {"identifier": "onSetTag", "parameters": "(String key, Number value)", "modifiers": "@Override public", "return": "Number", "body": "@Override\n\tpublic Number onSetTag(String key, Number value) {\n\t\tif (tracingPlugin.getExcludedTags().contains(key)) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}", "signature": "Number onSetTag(String key, Number value)", "full_signature": "@Override public Number onSetTag(String key, Number value)", "class_method_signature": "TagExcludingSpanEventListener.onSetTag(String key, Number value)", "testcase": false, "constructor": false, "invocations": ["contains", "getExcludedTags"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}