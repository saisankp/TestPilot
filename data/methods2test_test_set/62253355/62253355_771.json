{"test_class": {"identifier": "SimpleNamedGraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "com.mobi.rdf.impl.sesame/src/test/java/com/mobi/rdf/core/impl/sesame/SimpleNamedGraphTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        IRI s = new SimpleIRI(\"http://test.com/s\");\n        IRI p = new SimpleIRI(\"http://test.com/p\");\n        IRI o = new SimpleIRI(\"http://test.com/o\");\n        Literal o2 = new SimpleLiteral(\"Mobi\");\n        BNode b = new SimpleBNode(\"_:mobi1\");\n        BNode b2 = new SimpleBNode(\"_:mobi2\");\n\n        SimpleNamedGraph graph1 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG1\"));\n        SimpleNamedGraph graph2 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG1\"));\n        SimpleNamedGraph graph3 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG3\"));\n        SimpleNamedGraph graph4 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG4\"));\n        SimpleNamedGraph graph5 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG4\"));\n        SimpleNamedGraph graph6 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG6\"));\n        SimpleNamedGraph graph7 = new SimpleNamedGraph(new SimpleIRI(\"http://test.com/NG6\"));\n\n        graph1.add(s, p, o);\n        graph2.add(s, p, o);\n\n        graph4.add(s, p, o);\n        graph4.add(s, p, b);\n        graph4.add(b, p, o2);\n        graph5.add(s, p, o);\n        graph5.add(s, p, b);\n        graph5.add(b, p, o2);\n\n        graph6.add(s, p, b);\n        graph6.add(b, p, o2);\n        graph7.add(s, p, b2);\n        graph7.add(b2, p, o2);\n\n        assertEquals(graph1, graph2);\n        assertEquals(graph4, graph5);\n        assertNotEquals(graph1, graph3);\n        assertEquals(graph6, graph7);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "SimpleNamedGraphTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "assertEquals", "assertNotEquals", "assertEquals"]}, "focal_class": {"identifier": "SimpleNamedGraph", "superclass": "extends AbstractStatementSet", "interfaces": "implements NamedGraph", "fields": [{"original_string": "private static final long serialVersionUID = -2898304389277771420L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2898304389277771420L", "var_name": "serialVersionUID"}, {"original_string": "private Resource graphID;", "modifier": "private", "type": "Resource", "declarator": "graphID", "var_name": "graphID"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}, {"original_string": "private ModelFactory factory = LinkedHashModelFactory.getInstance();", "modifier": "private", "type": "ModelFactory", "declarator": "factory = LinkedHashModelFactory.getInstance()", "var_name": "factory"}, {"original_string": "private static final ValueFactory MOBI_VF = SimpleValueFactory.getInstance();", "modifier": "private static final", "type": "ValueFactory", "declarator": "MOBI_VF = SimpleValueFactory.getInstance()", "var_name": "MOBI_VF"}], "methods": [{"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID, ModelFactory factory)", "modifiers": "protected", "return": "", "signature": " SimpleNamedGraph(Resource graphID, ModelFactory factory)", "full_signature": "protected  SimpleNamedGraph(Resource graphID, ModelFactory factory)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID, ModelFactory factory)", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph()", "full_signature": "public  SimpleNamedGraph()", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph()", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID)", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph(Resource graphID)", "full_signature": "public  SimpleNamedGraph(Resource graphID)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID)", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID, @Nonnull Model model)", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph(Resource graphID, @Nonnull Model model)", "full_signature": "public  SimpleNamedGraph(Resource graphID, @Nonnull Model model)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID, @Nonnull Model model)", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID, @Nonnull Collection<@Nonnull ? extends Statement> c)", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph(Resource graphID, @Nonnull Collection<@Nonnull ? extends Statement> c)", "full_signature": "public  SimpleNamedGraph(Resource graphID, @Nonnull Collection<@Nonnull ? extends Statement> c)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID, @Nonnull Collection<@Nonnull ? extends Statement> c)", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces)", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces)", "full_signature": "public  SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces)", "testcase": false, "constructor": true}, {"identifier": "SimpleNamedGraph", "parameters": "(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces, @Nonnull Collection<@Nonnull ? extends Statement> c)", "modifiers": "public", "return": "", "signature": " SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces, @Nonnull Collection<@Nonnull ? extends Statement> c)", "full_signature": "public  SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces, @Nonnull Collection<@Nonnull ? extends Statement> c)", "class_method_signature": "SimpleNamedGraph.SimpleNamedGraph(Resource graphID, @Nonnull Set<@Nonnull Namespace> namespaces, @Nonnull Collection<@Nonnull ? extends Statement> c)", "testcase": false, "constructor": true}, {"identifier": "setDelegate", "parameters": "(Model model)", "modifiers": "protected", "return": "void", "signature": "void setDelegate(Model model)", "full_signature": "protected void setDelegate(Model model)", "class_method_signature": "SimpleNamedGraph.setDelegate(Model model)", "testcase": false, "constructor": false}, {"identifier": "validStatement", "parameters": "(Statement statement)", "modifiers": "private", "return": "boolean", "signature": "boolean validStatement(Statement statement)", "full_signature": "private boolean validStatement(Statement statement)", "class_method_signature": "SimpleNamedGraph.validStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "getGraphID", "parameters": "()", "modifiers": "@Override public", "return": "Resource", "signature": "Resource getGraphID()", "full_signature": "@Override public Resource getGraphID()", "class_method_signature": "SimpleNamedGraph.getGraphID()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object)", "full_signature": "@Override public boolean add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object)", "class_method_signature": "SimpleNamedGraph.add(@Nonnull Resource subject, @Nonnull IRI predicate, @Nonnull Value object)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "SimpleNamedGraph.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "SimpleNamedGraph.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(@Nonnull Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(@Nonnull Object o)", "full_signature": "@Override public boolean contains(@Nonnull Object o)", "class_method_signature": "SimpleNamedGraph.contains(@Nonnull Object o)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public @Nonnull", "return": "Iterator<Statement>", "signature": "Iterator<Statement> iterator()", "full_signature": "@Override public @Nonnull Iterator<Statement> iterator()", "class_method_signature": "SimpleNamedGraph.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Nonnull Statement statement)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(@Nonnull Statement statement)", "full_signature": "@Override public boolean add(@Nonnull Statement statement)", "class_method_signature": "SimpleNamedGraph.add(@Nonnull Statement statement)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Resource subject, IRI predicate, Value object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Resource subject, IRI predicate, Value object)", "full_signature": "@Override public boolean contains(Resource subject, IRI predicate, Value object)", "class_method_signature": "SimpleNamedGraph.contains(Resource subject, IRI predicate, Value object)", "testcase": false, "constructor": false}, {"identifier": "contexts", "parameters": "()", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> contexts()", "full_signature": "@Override public Set<Resource> contexts()", "class_method_signature": "SimpleNamedGraph.contexts()", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Set<Namespace>", "signature": "Set<Namespace> getNamespaces()", "full_signature": "@Override public Set<Namespace> getNamespaces()", "class_method_signature": "SimpleNamedGraph.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "removeNamespace", "parameters": "(@Nonnull String prefix)", "modifiers": "@Override public", "return": "Optional<Namespace>", "signature": "Optional<Namespace> removeNamespace(@Nonnull String prefix)", "full_signature": "@Override public Optional<Namespace> removeNamespace(@Nonnull String prefix)", "class_method_signature": "SimpleNamedGraph.removeNamespace(@Nonnull String prefix)", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(@Nonnull Namespace namespace)", "modifiers": "@Override public", "return": "void", "signature": "void setNamespace(@Nonnull Namespace namespace)", "full_signature": "@Override public void setNamespace(@Nonnull Namespace namespace)", "class_method_signature": "SimpleNamedGraph.setNamespace(@Nonnull Namespace namespace)", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(@Nonnull String prefix, @Nonnull String name)", "modifiers": "@Override public", "return": "Namespace", "signature": "Namespace setNamespace(@Nonnull String prefix, @Nonnull String name)", "full_signature": "@Override public Namespace setNamespace(@Nonnull String prefix, @Nonnull String name)", "class_method_signature": "SimpleNamedGraph.setNamespace(@Nonnull String prefix, @Nonnull String name)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Resource subject, IRI predicate, Value object)", "modifiers": "@Override public", "return": "Model", "signature": "Model filter(Resource subject, IRI predicate, Value object)", "full_signature": "@Override public Model filter(Resource subject, IRI predicate, Value object)", "class_method_signature": "SimpleNamedGraph.filter(Resource subject, IRI predicate, Value object)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Resource subject, IRI predicate, Value object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Resource subject, IRI predicate, Value object)", "full_signature": "@Override public boolean remove(Resource subject, IRI predicate, Value object)", "class_method_signature": "SimpleNamedGraph.remove(Resource subject, IRI predicate, Value object)", "testcase": false, "constructor": false}, {"identifier": "unmodifiable", "parameters": "()", "modifiers": "@Override public", "return": "NamedGraph", "signature": "NamedGraph unmodifiable()", "full_signature": "@Override public NamedGraph unmodifiable()", "class_method_signature": "SimpleNamedGraph.unmodifiable()", "testcase": false, "constructor": false}, {"identifier": "asModel", "parameters": "()", "modifiers": "@Override public", "return": "Model", "signature": "Model asModel()", "full_signature": "@Override public Model asModel()", "class_method_signature": "SimpleNamedGraph.asModel()", "testcase": false, "constructor": false}, {"identifier": "asModel", "parameters": "(@Nonnull ModelFactory factory)", "modifiers": "@Override public", "return": "Model", "signature": "Model asModel(@Nonnull ModelFactory factory)", "full_signature": "@Override public Model asModel(@Nonnull ModelFactory factory)", "class_method_signature": "SimpleNamedGraph.asModel(@Nonnull ModelFactory factory)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(@Nonnull Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(@Nonnull Object o)", "full_signature": "@Override public boolean remove(@Nonnull Object o)", "class_method_signature": "SimpleNamedGraph.remove(@Nonnull Object o)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "SimpleNamedGraph.clear()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SimpleNamedGraph.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleNamedGraph.hashCode()", "testcase": false, "constructor": false}], "file": "com.mobi.rdf.impl.sesame/src/main/java/com/mobi/rdf/core/impl/sesame/SimpleNamedGraph.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o instanceof SimpleNamedGraph) {\n            SimpleNamedGraph graph = (SimpleNamedGraph) o;\n\n            if (!getGraphID().equals(graph.getGraphID()))\n                return false;\n\n            SesameModelWrapper model1 = new SesameModelWrapper(new org.eclipse.rdf4j.model.impl.LinkedHashModel());\n            model1.addAll(this);\n\n            SesameModelWrapper model2 = new SesameModelWrapper(new org.eclipse.rdf4j.model.impl.LinkedHashModel());\n            model2.addAll(graph);\n\n            return Models.isomorphic(model1.getSesameModel(), model2.getSesameModel());\n        }\n        return false;\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SimpleNamedGraph.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "getGraphID", "getGraphID", "addAll", "addAll", "isomorphic", "getSesameModel", "getSesameModel"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}