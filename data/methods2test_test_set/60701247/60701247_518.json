{"test_class": {"identifier": "AbstractPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/AbstractPropertyTest.java"}, "test_case": {"identifier": "testGetAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetAll() {\n    TestInvokeStrategy testStrategy = new TestInvokeStrategy();\n    ListenerManager listeners = new ListenerManager(testStrategy);\n\n    ObjectWithObservableProperties dummy = new ObjectWithObservableProperties();\n    CountingRunnable counter = new CountingRunnable();\n\n    List<AbstractProperty<?>> dummyProperties = AbstractProperty.getAll(dummy);\n    assert !dummyProperties.isEmpty();\n\n    listeners.listenAll(dummyProperties).with(counter);\n\n    assertThat(counter.myRunCount).isEqualTo(0);\n    dummy.bool().set(true);\n    testStrategy.updateOneStep();\n    assertThat(counter.myRunCount).isEqualTo(1);\n    dummy.integer().set(1);\n    testStrategy.updateOneStep();\n    assertThat(counter.myRunCount).isEqualTo(2);\n    dummy._double().set(1.0);\n    testStrategy.updateOneStep();\n    assertThat(counter.myRunCount).isEqualTo(3);\n    dummy.string.set(\"test\");\n    testStrategy.updateOneStep();\n    assertThat(counter.myRunCount).isEqualTo(4);\n  }", "signature": "void testGetAll()", "full_signature": "@Test public void testGetAll()", "class_method_signature": "AbstractPropertyTest.testGetAll()", "testcase": true, "constructor": false, "invocations": ["getAll", "isEmpty", "with", "listenAll", "isEqualTo", "assertThat", "set", "bool", "updateOneStep", "isEqualTo", "assertThat", "set", "integer", "updateOneStep", "isEqualTo", "assertThat", "set", "_double", "updateOneStep", "isEqualTo", "assertThat", "set", "updateOneStep", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AbstractProperty", "superclass": "extends AbstractObservableValue<T>", "interfaces": "implements SettableValue<T>", "fields": [{"original_string": "@Nullable List<Constraint<T>> myConstraints;", "modifier": "@Nullable", "type": "List<Constraint<T>>", "declarator": "myConstraints", "var_name": "myConstraints"}], "methods": [{"identifier": "getAll", "parameters": "(Object object)", "modifiers": "@NotNull public static", "return": "List<AbstractProperty<?>>", "signature": "List<AbstractProperty<?>> getAll(Object object)", "full_signature": "@NotNull public static List<AbstractProperty<?>> getAll(Object object)", "class_method_signature": "AbstractProperty.getAll(Object object)", "testcase": false, "constructor": false}, {"identifier": "addConstraint", "parameters": "(@NotNull Constraint<T> constraint)", "modifiers": "public final", "return": "void", "signature": "void addConstraint(@NotNull Constraint<T> constraint)", "full_signature": "public final void addConstraint(@NotNull Constraint<T> constraint)", "class_method_signature": "AbstractProperty.addConstraint(@NotNull Constraint<T> constraint)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(@NotNull T value)", "modifiers": "@Override public final", "return": "void", "signature": "void set(@NotNull T value)", "full_signature": "@Override public final void set(@NotNull T value)", "class_method_signature": "AbstractProperty.set(@NotNull T value)", "testcase": false, "constructor": false}, {"identifier": "isValueEqual", "parameters": "(@Nullable T value)", "modifiers": "protected", "return": "boolean", "signature": "boolean isValueEqual(@Nullable T value)", "full_signature": "protected boolean isValueEqual(@Nullable T value)", "class_method_signature": "AbstractProperty.isValueEqual(@Nullable T value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(@NotNull ObservableValue<T> value)", "modifiers": "public final", "return": "void", "signature": "void set(@NotNull ObservableValue<T> value)", "full_signature": "public final void set(@NotNull ObservableValue<T> value)", "class_method_signature": "AbstractProperty.set(@NotNull ObservableValue<T> value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractProperty.toString()", "testcase": false, "constructor": false}, {"identifier": "setDirectly", "parameters": "(@NotNull T value)", "modifiers": "protected abstract", "return": "void", "signature": "void setDirectly(@NotNull T value)", "full_signature": "protected abstract void setDirectly(@NotNull T value)", "class_method_signature": "AbstractProperty.setDirectly(@NotNull T value)", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/AbstractProperty.java"}, "focal_method": {"identifier": "getAll", "parameters": "(Object object)", "modifiers": "@NotNull public static", "return": "List<AbstractProperty<?>>", "body": "@NotNull\n  public static List<AbstractProperty<?>> getAll(Object object) {\n    ArrayList<AbstractProperty<?>> properties = new ArrayList<>();\n    for (Field field : object.getClass().getDeclaredFields()) {\n      if (AbstractProperty.class.isAssignableFrom(field.getType())) {\n        try {\n          // We change the access level of this field to avoid getting an IllegalAccessException.\n          boolean isFieldPrivate = !field.isAccessible();\n          field.setAccessible(true);\n          properties.add((AbstractProperty<?>)field.get(object));\n          if (isFieldPrivate) {\n            field.setAccessible(false);\n          }\n        }\n        catch (IllegalAccessException ignored) {\n        }\n      }\n    }\n    return properties;\n  }", "signature": "List<AbstractProperty<?>> getAll(Object object)", "full_signature": "@NotNull public static List<AbstractProperty<?>> getAll(Object object)", "class_method_signature": "AbstractProperty.getAll(Object object)", "testcase": false, "constructor": false, "invocations": ["getDeclaredFields", "getClass", "isAssignableFrom", "getType", "isAccessible", "setAccessible", "add", "get", "setAccessible"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}