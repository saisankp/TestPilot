{"test_class": {"identifier": "JavaDocParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "umlet-swing/src/test/java/com/baselet/plugin/refactoring/JavaDocParserTest.java"}, "test_case": {"identifier": "testHtmlTagNoClosingParenthesis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHtmlTagNoClosingParenthesis() {\n\t\tString source = \"/**<a<b>*/\";\n\t\tJavaDocCommentNode comment = new JavaDocParser(source).comment();\n\t\tassertEquals(1, comment.children.size());\n\t\tassertEquals(new HtmlTagStartNode(new SourceString(source, 6, 7), 5, 8), comment.children.get(0));\n\t}", "signature": "void testHtmlTagNoClosingParenthesis()", "full_signature": "@Test public void testHtmlTagNoClosingParenthesis()", "class_method_signature": "JavaDocParserTest.testHtmlTagNoClosingParenthesis()", "testcase": true, "constructor": false, "invocations": ["comment", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "JavaDocParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String source;", "modifier": "private final", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "private int idx;", "modifier": "private", "type": "int", "declarator": "idx", "var_name": "idx"}, {"original_string": "private int sourceEnd;", "modifier": "private", "type": "int", "declarator": "sourceEnd", "var_name": "sourceEnd"}], "methods": [{"identifier": "JavaDocParser", "parameters": "(String source)", "modifiers": "public", "return": "", "signature": " JavaDocParser(String source)", "full_signature": "public  JavaDocParser(String source)", "class_method_signature": "JavaDocParser.JavaDocParser(String source)", "testcase": false, "constructor": true}, {"identifier": "JavaDocParser", "parameters": "(String source, int sourceStart, int sourceEnd)", "modifiers": "public", "return": "", "signature": " JavaDocParser(String source, int sourceStart, int sourceEnd)", "full_signature": "public  JavaDocParser(String source, int sourceStart, int sourceEnd)", "class_method_signature": "JavaDocParser.JavaDocParser(String source, int sourceStart, int sourceEnd)", "testcase": false, "constructor": true}, {"identifier": "comment", "parameters": "()", "modifiers": "public", "return": "JavaDocCommentNode", "signature": "JavaDocCommentNode comment()", "full_signature": "public JavaDocCommentNode comment()", "class_method_signature": "JavaDocParser.comment()", "testcase": false, "constructor": false}, {"identifier": "htmlTagStart", "parameters": "()", "modifiers": "public", "return": "HtmlTagStartNode", "signature": "HtmlTagStartNode htmlTagStart()", "full_signature": "public HtmlTagStartNode htmlTagStart()", "class_method_signature": "JavaDocParser.htmlTagStart()", "testcase": false, "constructor": false}, {"identifier": "attrs", "parameters": "()", "modifiers": "public", "return": "List<HtmlTagAttr>", "signature": "List<HtmlTagAttr> attrs()", "full_signature": "public List<HtmlTagAttr> attrs()", "class_method_signature": "JavaDocParser.attrs()", "testcase": false, "constructor": false}, {"identifier": "optWhitespace", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void optWhitespace()", "full_signature": "public void optWhitespace()", "class_method_signature": "JavaDocParser.optWhitespace()", "testcase": false, "constructor": false}, {"identifier": "ident", "parameters": "()", "modifiers": "public", "return": "SourceString", "signature": "SourceString ident()", "full_signature": "public SourceString ident()", "class_method_signature": "JavaDocParser.ident()", "testcase": false, "constructor": false}, {"identifier": "isEof", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isEof()", "full_signature": "private boolean isEof()", "class_method_signature": "JavaDocParser.isEof()", "testcase": false, "constructor": false}, {"identifier": "nextCp", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void nextCp()", "full_signature": "private void nextCp()", "class_method_signature": "JavaDocParser.nextCp()", "testcase": false, "constructor": false}, {"identifier": "cp", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int cp()", "full_signature": "private int cp()", "class_method_signature": "JavaDocParser.cp()", "testcase": false, "constructor": false}, {"identifier": "consume", "parameters": "(char ch)", "modifiers": "private", "return": "boolean", "signature": "boolean consume(char ch)", "full_signature": "private boolean consume(char ch)", "class_method_signature": "JavaDocParser.consume(char ch)", "testcase": false, "constructor": false}], "file": "umlet-swing/src/main/java/com/baselet/plugin/refactoring/JavaDocParser.java"}, "focal_method": {"identifier": "comment", "parameters": "()", "modifiers": "public", "return": "JavaDocCommentNode", "body": "public JavaDocCommentNode comment() {\n\t\tJavaDocCommentNode result = new JavaDocCommentNode();\n\t\twhile (!isEof()) {\n\t\t\tint start = idx;\n\t\t\tHtmlTagStartNode node = htmlTagStart();\n\t\t\tif (node != null) {\n\t\t\t\tresult.children.add(node);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tidx = start;\n\t\t\tnextCp();\n\t\t}\n\t\treturn result;\n\t}", "signature": "JavaDocCommentNode comment()", "full_signature": "public JavaDocCommentNode comment()", "class_method_signature": "JavaDocParser.comment()", "testcase": false, "constructor": false, "invocations": ["isEof", "htmlTagStart", "add", "nextCp"]}, "repository": {"repo_id": 32446940, "url": "https://github.com/umlet/umlet", "language": "Java", "is_fork": false, "fork_count": 207, "stargazer_count": 848, "size": 59577, "license": "GNU General Public License v3.0"}}