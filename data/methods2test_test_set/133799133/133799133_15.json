{"test_class": {"identifier": "CvcTlsCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CERTIFICATE_VALID = \"certificate valid\";", "modifier": "private static final", "type": "String", "declarator": "CERTIFICATE_VALID = \"certificate valid\"", "var_name": "CERTIFICATE_VALID"}, {"original_string": "private static final String JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\") + \"/poseidas\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\") + \"/poseidas\"", "var_name": "JAVA_IO_TMPDIR"}, {"original_string": "private static String tempDirectory;", "modifier": "private static", "type": "String", "declarator": "tempDirectory", "var_name": "tempDirectory"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/server/idprovider/config/CvcTlsCheckTest.java"}, "test_case": {"identifier": "testNonHttpsServer", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testNonHttpsServer() throws Exception\n  {\n    tempDirectory = JAVA_IO_TMPDIR + \"-\" + (int)(Math.random() * 1000000);\n    Files.createDirectory(Paths.get(tempDirectory));\n    log.trace(\"Generated random temp dir: {}\", tempDirectory);\n    Path resourceDirectory = Paths.get(\"src\", \"test\", \"resources\");\n    File source = new File(resourceDirectory + \"/POSeIDAS-nonhttps.xml\");\n    File dest = new File(tempDirectory + \"/POSeIDAS.xml\");\n    Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);\n    System.setProperty(\"spring.config.additional-location\", Paths.get(tempDirectory).toString());\n\n    TerminalPermissionAO terminalPermission = mock(TerminalPermissionAO.class);\n    CvcTlsCheck check = new CvcTlsCheck(terminalPermission);\n    CvcTlsCheckResult result = check.check();\n    assertFalse(CERTIFICATE_VALID, result.isServerTlsValid());\n  }", "signature": "void testNonHttpsServer()", "full_signature": "@Test void testNonHttpsServer()", "class_method_signature": "CvcTlsCheckTest.testNonHttpsServer()", "testcase": true, "constructor": false, "invocations": ["random", "createDirectory", "get", "trace", "get", "copy", "toPath", "toPath", "setProperty", "toString", "get", "mock", "check", "assertFalse", "isServerTlsValid"]}, "focal_class": {"identifier": "CvcTlsCheck", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TerminalPermissionAO facade;", "modifier": "private", "type": "TerminalPermissionAO", "declarator": "facade", "var_name": "facade"}], "methods": [{"identifier": "check", "parameters": "()", "modifiers": "public", "return": "CvcTlsCheckResult", "signature": "CvcTlsCheckResult check()", "full_signature": "public CvcTlsCheckResult check()", "class_method_signature": "CvcTlsCheck.check()", "testcase": false, "constructor": false}, {"identifier": "testCvcTlsMatch", "parameters": "(TerminalData data, Optional<X509Certificate> certificate)", "modifiers": "private static", "return": "boolean", "signature": "boolean testCvcTlsMatch(TerminalData data, Optional<X509Certificate> certificate)", "full_signature": "private static boolean testCvcTlsMatch(TerminalData data, Optional<X509Certificate> certificate)", "class_method_signature": "CvcTlsCheck.testCvcTlsMatch(TerminalData data, Optional<X509Certificate> certificate)", "testcase": false, "constructor": false}, {"identifier": "testCvcUrlMatch", "parameters": "(TerminalData data, String serverUrl)", "modifiers": "private static", "return": "boolean", "signature": "boolean testCvcUrlMatch(TerminalData data, String serverUrl)", "full_signature": "private static boolean testCvcUrlMatch(TerminalData data, String serverUrl)", "class_method_signature": "CvcTlsCheck.testCvcUrlMatch(TerminalData data, String serverUrl)", "testcase": false, "constructor": false}, {"identifier": "getOwnTlsCertificate", "parameters": "(String url)", "modifiers": "private static", "return": "Optional<X509Certificate>", "signature": "Optional<X509Certificate> getOwnTlsCertificate(String url)", "full_signature": "private static Optional<X509Certificate> getOwnTlsCertificate(String url)", "class_method_signature": "CvcTlsCheck.getOwnTlsCertificate(String url)", "testcase": false, "constructor": false}, {"identifier": "getSSLSocketFactory", "parameters": "()", "modifiers": "private static", "return": "SSLSocketFactory", "signature": "SSLSocketFactory getSSLSocketFactory()", "full_signature": "private static SSLSocketFactory getSSLSocketFactory()", "class_method_signature": "CvcTlsCheck.getSSLSocketFactory()", "testcase": false, "constructor": false}, {"identifier": "testTlsValidity", "parameters": "(X509Certificate certificate)", "modifiers": "private static", "return": "boolean", "signature": "boolean testTlsValidity(X509Certificate certificate)", "full_signature": "private static boolean testTlsValidity(X509Certificate certificate)", "class_method_signature": "CvcTlsCheck.testTlsValidity(X509Certificate certificate)", "testcase": false, "constructor": false}, {"identifier": "testCvcExpired", "parameters": "(TerminalData data)", "modifiers": "private static", "return": "boolean", "signature": "boolean testCvcExpired(TerminalData data)", "full_signature": "private static boolean testCvcExpired(TerminalData data)", "class_method_signature": "CvcTlsCheck.testCvcExpired(TerminalData data)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/server/idprovider/config/CvcTlsCheck.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "public", "return": "CvcTlsCheckResult", "body": "public CvcTlsCheckResult check()\n  {\n    CoreConfigurationDto config = PoseidasConfigurator.getInstance().getCurrentConfig();\n\n    CvcTlsCheckResult resultHolder = new CvcTlsCheckResult();\n    Optional<X509Certificate> certificate = getOwnTlsCertificate(config.getServerUrl());\n\n    // Test TLS Certificates\n    if (certificate.isPresent())\n    {\n      resultHolder.setServerTlsValid(testTlsValidity(certificate.get()));\n    }\n    else\n    {\n      log.warn(\"TLS certificate not found for url {} \", config.getServerUrl());\n    }\n\n    // Check CVCs\n    for ( ServiceProviderDto sp : config.getServiceProvider().values() )\n    {\n      CvcCheckResults cvcResults = new CvcCheckResults();\n      TerminalPermission tp = facade.getTerminalPermission(sp.getEpaConnectorConfiguration().getCVCRefID());\n      if (tp == null)\n      {\n        resultHolder.getProviderCvcChecks().put(sp.getEntityID(), cvcResults);\n        continue;\n      }\n      try\n      {\n        TerminalData data = tp.getFullCvc();\n        cvcResults.setCvcPresent(true);\n        cvcResults.setCvcValidity(testCvcExpired(data));\n        cvcResults.setCvcUrlMatch(testCvcUrlMatch(data, config.getServerUrl()));\n        cvcResults.setCvcTlsMatch(testCvcTlsMatch(data, certificate));\n      }\n      catch (IllegalArgumentException e)\n      {\n        // happens if no cvc in terminalpermission\n      }\n      resultHolder.getProviderCvcChecks().put(sp.getEntityID(), cvcResults);\n    }\n    return resultHolder;\n  }", "signature": "CvcTlsCheckResult check()", "full_signature": "public CvcTlsCheckResult check()", "class_method_signature": "CvcTlsCheck.check()", "testcase": false, "constructor": false, "invocations": ["getCurrentConfig", "getInstance", "getOwnTlsCertificate", "getServerUrl", "isPresent", "setServerTlsValid", "testTlsValidity", "get", "warn", "getServerUrl", "values", "getServiceProvider", "getTerminalPermission", "getCVCRefID", "getEpaConnectorConfiguration", "put", "getProviderCvcChecks", "getEntityID", "getFullCvc", "setCvcPresent", "setCvcValidity", "testCvcExpired", "setCvcUrlMatch", "testCvcUrlMatch", "getServerUrl", "setCvcTlsMatch", "testCvcTlsMatch", "put", "getProviderCvcChecks", "getEntityID"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}