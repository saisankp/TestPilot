{"test_class": {"identifier": "AutonomiccsSystemVirtualMachinesTemplateRegisterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n    @InjectMocks\n    private AutonomiccsSystemVirtualMachinesTemplateRegister spy;", "modifier": "@Spy\n    @InjectMocks\n    private", "type": "AutonomiccsSystemVirtualMachinesTemplateRegister", "declarator": "spy", "var_name": "spy"}, {"original_string": "@Mock\n    private TemplateApiService templateService;", "modifier": "@Mock\n    private", "type": "TemplateApiService", "declarator": "templateService", "var_name": "templateService"}, {"original_string": "@Mock\n    private GuestOsService guestOsService;", "modifier": "@Mock\n    private", "type": "GuestOsService", "declarator": "guestOsService", "var_name": "guestOsService"}, {"original_string": "@Mock\n    private HostService hostService;", "modifier": "@Mock\n    private", "type": "HostService", "declarator": "hostService", "var_name": "hostService"}, {"original_string": "@Mock\n    private AutonomiccsSystemVmTemplateService autonomiccsSystemVmTemplateService;", "modifier": "@Mock\n    private", "type": "AutonomiccsSystemVmTemplateService", "declarator": "autonomiccsSystemVmTemplateService", "var_name": "autonomiccsSystemVmTemplateService"}, {"original_string": "@Mock\n    private AutonomicClusterManagementHeuristicService autonomicManagementHeuristicService;", "modifier": "@Mock\n    private", "type": "AutonomicClusterManagementHeuristicService", "declarator": "autonomicManagementHeuristicService", "var_name": "autonomicManagementHeuristicService"}, {"original_string": "@Mock\n    private AccountService accountService;", "modifier": "@Mock\n    private", "type": "AccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@Mock\n    private ReflectionUtils reflectionUtils;", "modifier": "@Mock\n    private", "type": "ReflectionUtils", "declarator": "reflectionUtils", "var_name": "reflectionUtils"}, {"original_string": "private final Long allAvailableZoneMagicNumber = -1L;", "modifier": "private final", "type": "Long", "declarator": "allAvailableZoneMagicNumber = -1L", "var_name": "allAvailableZoneMagicNumber"}, {"original_string": "private final Long systemAccountDomainId = 1L;", "modifier": "private final", "type": "Long", "declarator": "systemAccountDomainId = 1L", "var_name": "systemAccountDomainId"}, {"original_string": "private String guestOsName = \"Debian GNU/Linux 7(64-bit)\";", "modifier": "private", "type": "String", "declarator": "guestOsName = \"Debian GNU/Linux 7(64-bit)\"", "var_name": "guestOsName"}], "file": "autonomic-plugin-common/src/test/java/br/com/autonomiccs/autonomic/plugin/common/template/AutonomiccsSystemVirtualMachinesTemplateRegisterTest.java"}, "test_case": {"identifier": "getSupportedImageFormatTestExpectCloudRuntimeException", "parameters": "()", "modifiers": "@Test(expected = CloudRuntimeException.class) public", "return": "void", "body": "@Test(expected = CloudRuntimeException.class)\n    public void getSupportedImageFormatTestExpectCloudRuntimeException() {\n        spy.getSupportedImageFormat(HypervisorType.Any);\n    }", "signature": "void getSupportedImageFormatTestExpectCloudRuntimeException()", "full_signature": "@Test(expected = CloudRuntimeException.class) public void getSupportedImageFormatTestExpectCloudRuntimeException()", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegisterTest.getSupportedImageFormatTestExpectCloudRuntimeException()", "testcase": true, "constructor": false, "invocations": ["getSupportedImageFormat"]}, "focal_class": {"identifier": "AutonomiccsSystemVirtualMachinesTemplateRegister", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "protected Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private static final long ONE_MINUTE_IN_MILLISECONDS = 60000;", "modifier": "private static final", "type": "long", "declarator": "ONE_MINUTE_IN_MILLISECONDS = 60000", "var_name": "ONE_MINUTE_IN_MILLISECONDS"}, {"original_string": "private static final int NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES = 10;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES = 10", "var_name": "NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES"}, {"original_string": "@Autowired\n    private TemplateApiService templateService;", "modifier": "@Autowired\n    private", "type": "TemplateApiService", "declarator": "templateService", "var_name": "templateService"}, {"original_string": "@Autowired\n    private GuestOsService guestOsService;", "modifier": "@Autowired\n    private", "type": "GuestOsService", "declarator": "guestOsService", "var_name": "guestOsService"}, {"original_string": "@Autowired\n    private HostService hostService;", "modifier": "@Autowired\n    private", "type": "HostService", "declarator": "hostService", "var_name": "hostService"}, {"original_string": "@Autowired\n    private AutonomiccsSystemVmTemplateService autonomiccsSystemVmTemplateService;", "modifier": "@Autowired\n    private", "type": "AutonomiccsSystemVmTemplateService", "declarator": "autonomiccsSystemVmTemplateService", "var_name": "autonomiccsSystemVmTemplateService"}, {"original_string": "@Autowired\n    private AutonomicClusterManagementHeuristicService autonomicManagementHeuristicService;", "modifier": "@Autowired\n    private", "type": "AutonomicClusterManagementHeuristicService", "declarator": "autonomicManagementHeuristicService", "var_name": "autonomicManagementHeuristicService"}, {"original_string": "@Autowired\n    private AccountService accountService;", "modifier": "@Autowired\n    private", "type": "AccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@Autowired\n    private ReflectionUtils reflectionUtils;", "modifier": "@Autowired\n    private", "type": "ReflectionUtils", "declarator": "reflectionUtils", "var_name": "reflectionUtils"}, {"original_string": "private final Long allAvailableZoneMagicNumber = -1L;", "modifier": "private final", "type": "Long", "declarator": "allAvailableZoneMagicNumber = -1L", "var_name": "allAvailableZoneMagicNumber"}, {"original_string": "private final Long systemAccountDomainId = 1L;", "modifier": "private final", "type": "Long", "declarator": "systemAccountDomainId = 1L", "var_name": "systemAccountDomainId"}, {"original_string": "private String guestOsName = \"Debian GNU/Linux 7(64-bit)\";", "modifier": "private", "type": "String", "declarator": "guestOsName = \"Debian GNU/Linux 7(64-bit)\"", "var_name": "guestOsName"}], "methods": [{"identifier": "registerTemplatesIfNeeded", "parameters": "()", "modifiers": "@Scheduled(initialDelay = ONE_MINUTE_IN_MILLISECONDS, fixedDelay = ONE_MINUTE_IN_MILLISECONDS * NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES) public", "return": "void", "signature": "void registerTemplatesIfNeeded()", "full_signature": "@Scheduled(initialDelay = ONE_MINUTE_IN_MILLISECONDS, fixedDelay = ONE_MINUTE_IN_MILLISECONDS * NUMBER_OF_MINUTES_BETWEEN_REGISTRATION_OF_TEMPLATES) public void registerTemplatesIfNeeded()", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.registerTemplatesIfNeeded()", "testcase": false, "constructor": false}, {"identifier": "createRegisterTemplateCommandForHypervisor", "parameters": "(HypervisorType hypervisor)", "modifiers": "protected", "return": "RegisterTemplateCmd", "signature": "RegisterTemplateCmd createRegisterTemplateCommandForHypervisor(HypervisorType hypervisor)", "full_signature": "protected RegisterTemplateCmd createRegisterTemplateCommandForHypervisor(HypervisorType hypervisor)", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.createRegisterTemplateCommandForHypervisor(HypervisorType hypervisor)", "testcase": false, "constructor": false}, {"identifier": "createTemplateDetails", "parameters": "()", "modifiers": "protected", "return": "Map<Object, Object>", "signature": "Map<Object, Object> createTemplateDetails()", "full_signature": "protected Map<Object, Object> createTemplateDetails()", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.createTemplateDetails()", "testcase": false, "constructor": false}, {"identifier": "getSupportedImageFormat", "parameters": "(HypervisorType hypervisor)", "modifiers": "protected", "return": "String", "signature": "String getSupportedImageFormat(HypervisorType hypervisor)", "full_signature": "protected String getSupportedImageFormat(HypervisorType hypervisor)", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.getSupportedImageFormat(HypervisorType hypervisor)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.afterPropertiesSet()", "testcase": false, "constructor": false}], "file": "autonomic-plugin-common/src/main/java/br/com/autonomiccs/autonomic/plugin/common/template/AutonomiccsSystemVirtualMachinesTemplateRegister.java"}, "focal_method": {"identifier": "getSupportedImageFormat", "parameters": "(HypervisorType hypervisor)", "modifiers": "protected", "return": "String", "body": "protected String getSupportedImageFormat(HypervisorType hypervisor) {\n        ImageFormat supportedImageFormat = Hypervisor.HypervisorType.getSupportedImageFormat(hypervisor);\n        if (supportedImageFormat != null) {\n            return supportedImageFormat.name();\n        }\n        throw new CloudRuntimeException(String.format(\"Could not find a supported image format for hypervisor [%s]\", hypervisor));\n    }", "signature": "String getSupportedImageFormat(HypervisorType hypervisor)", "full_signature": "protected String getSupportedImageFormat(HypervisorType hypervisor)", "class_method_signature": "AutonomiccsSystemVirtualMachinesTemplateRegister.getSupportedImageFormat(HypervisorType hypervisor)", "testcase": false, "constructor": false, "invocations": ["getSupportedImageFormat", "name", "format"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}