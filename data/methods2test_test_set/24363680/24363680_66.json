{"test_class": {"identifier": "ECKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ECKeyTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ECKeyTest.class)", "var_name": "log"}, {"original_string": "private SecureRandom secureRandom;", "modifier": "private", "type": "SecureRandom", "declarator": "secureRandom", "var_name": "secureRandom"}, {"original_string": "private KeyCrypter keyCrypter;", "modifier": "private", "type": "KeyCrypter", "declarator": "keyCrypter", "var_name": "keyCrypter"}, {"original_string": "private static CharSequence PASSWORD1 = \"my hovercraft has eels\";", "modifier": "private static", "type": "CharSequence", "declarator": "PASSWORD1 = \"my hovercraft has eels\"", "var_name": "PASSWORD1"}, {"original_string": "private static CharSequence WRONG_PASSWORD = \"it is a snowy day today\";", "modifier": "private static", "type": "CharSequence", "declarator": "WRONG_PASSWORD = \"it is a snowy day today\"", "var_name": "WRONG_PASSWORD"}], "file": "core/src/test/java/com/google/bitcoin/core/ECKeyTest.java"}, "test_case": {"identifier": "sValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sValue() throws Exception {\n        // Check that we never generate an S value that is larger than half the curve order. This avoids a malleability\n        // issue that can allow someone to change a transaction [hash] without invalidating the signature.\n        final int ITERATIONS = 10;\n        ListeningExecutorService executor = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(ITERATIONS));\n        List<ListenableFuture<ECKey.ECDSASignature>> sigFutures = Lists.newArrayList();\n        final ECKey key = new ECKey();\n        for (byte i = 0; i < ITERATIONS; i++) {\n            final Sha256Hash hash = Sha256Hash.create(new byte[]{i});\n            sigFutures.add(executor.submit(new Callable<ECKey.ECDSASignature>() {\n                @Override\n                public ECKey.ECDSASignature call() throws Exception {\n                    return key.sign(hash);\n                }\n            }));\n        }\n        List<ECKey.ECDSASignature> sigs = Futures.allAsList(sigFutures).get();\n        for (ECKey.ECDSASignature signature : sigs) {\n            assertTrue(signature.s.compareTo(ECKey.HALF_CURVE_ORDER) <= 0);\n        }\n    }", "signature": "void sValue()", "full_signature": "@Test public void sValue()", "class_method_signature": "ECKeyTest.sValue()", "testcase": true, "constructor": false, "invocations": ["listeningDecorator", "newFixedThreadPool", "newArrayList", "create", "add", "submit", "sign", "get", "allAsList", "assertTrue", "compareTo"]}, "focal_class": {"identifier": "ECKey", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ECKey.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ECKey.class)", "var_name": "log"}, {"original_string": "public static final ECDomainParameters CURVE;", "modifier": "public static final", "type": "ECDomainParameters", "declarator": "CURVE", "var_name": "CURVE"}, {"original_string": "public static final BigInteger HALF_CURVE_ORDER;", "modifier": "public static final", "type": "BigInteger", "declarator": "HALF_CURVE_ORDER", "var_name": "HALF_CURVE_ORDER"}, {"original_string": "private static final SecureRandom secureRandom;", "modifier": "private static final", "type": "SecureRandom", "declarator": "secureRandom", "var_name": "secureRandom"}, {"original_string": "private static final long serialVersionUID = -728224901792295832L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -728224901792295832L", "var_name": "serialVersionUID"}, {"original_string": "private BigInteger priv;", "modifier": "private", "type": "BigInteger", "declarator": "priv", "var_name": "priv"}, {"original_string": "private byte[] pub;", "modifier": "private", "type": "byte[]", "declarator": "pub", "var_name": "pub"}, {"original_string": "private long creationTimeSeconds;", "modifier": "private", "type": "long", "declarator": "creationTimeSeconds", "var_name": "creationTimeSeconds"}, {"original_string": "transient private KeyCrypter keyCrypter;", "modifier": "transient private", "type": "KeyCrypter", "declarator": "keyCrypter", "var_name": "keyCrypter"}, {"original_string": "private EncryptedPrivateKey encryptedPrivateKey;", "modifier": "private", "type": "EncryptedPrivateKey", "declarator": "encryptedPrivateKey", "var_name": "encryptedPrivateKey"}, {"original_string": "transient private byte[] pubKeyHash;", "modifier": "transient private", "type": "byte[]", "declarator": "pubKeyHash", "var_name": "pubKeyHash"}, {"original_string": "@VisibleForTesting\n    public static boolean FAKE_SIGNATURES = false;", "modifier": "@VisibleForTesting\n    public static", "type": "boolean", "declarator": "FAKE_SIGNATURES = false", "var_name": "FAKE_SIGNATURES"}], "methods": [{"identifier": "ECKey", "parameters": "()", "modifiers": "public", "return": "", "signature": " ECKey()", "full_signature": "public  ECKey()", "class_method_signature": "ECKey.ECKey()", "testcase": false, "constructor": true}, {"identifier": "compressPoint", "parameters": "(ECPoint uncompressed)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint compressPoint(ECPoint uncompressed)", "full_signature": "private static ECPoint compressPoint(ECPoint uncompressed)", "class_method_signature": "ECKey.compressPoint(ECPoint uncompressed)", "testcase": false, "constructor": false}, {"identifier": "fromASN1", "parameters": "(byte[] asn1privkey)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey fromASN1(byte[] asn1privkey)", "full_signature": "public static ECKey fromASN1(byte[] asn1privkey)", "class_method_signature": "ECKey.fromASN1(byte[] asn1privkey)", "testcase": false, "constructor": false}, {"identifier": "ECKey", "parameters": "(BigInteger privKey)", "modifiers": "public", "return": "", "signature": " ECKey(BigInteger privKey)", "full_signature": "public  ECKey(BigInteger privKey)", "class_method_signature": "ECKey.ECKey(BigInteger privKey)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(BigInteger privKey, BigInteger pubKey)", "modifiers": "public", "return": "", "signature": " ECKey(BigInteger privKey, BigInteger pubKey)", "full_signature": "public  ECKey(BigInteger privKey, BigInteger pubKey)", "class_method_signature": "ECKey.ECKey(BigInteger privKey, BigInteger pubKey)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(@Nullable byte[] privKeyBytes, @Nullable byte[] pubKey)", "modifiers": "public", "return": "", "signature": " ECKey(@Nullable byte[] privKeyBytes, @Nullable byte[] pubKey)", "full_signature": "public  ECKey(@Nullable byte[] privKeyBytes, @Nullable byte[] pubKey)", "class_method_signature": "ECKey.ECKey(@Nullable byte[] privKeyBytes, @Nullable byte[] pubKey)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(@Nullable EncryptedPrivateKey encryptedPrivateKey, @Nullable byte[] pubKey, KeyCrypter keyCrypter)", "modifiers": "public", "return": "", "signature": " ECKey(@Nullable EncryptedPrivateKey encryptedPrivateKey, @Nullable byte[] pubKey, KeyCrypter keyCrypter)", "full_signature": "public  ECKey(@Nullable EncryptedPrivateKey encryptedPrivateKey, @Nullable byte[] pubKey, KeyCrypter keyCrypter)", "class_method_signature": "ECKey.ECKey(@Nullable EncryptedPrivateKey encryptedPrivateKey, @Nullable byte[] pubKey, KeyCrypter keyCrypter)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(@Nullable BigInteger privKey, @Nullable byte[] pubKey, boolean compressed)", "modifiers": "public", "return": "", "signature": " ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey, boolean compressed)", "full_signature": "public  ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey, boolean compressed)", "class_method_signature": "ECKey.ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey, boolean compressed)", "testcase": false, "constructor": true}, {"identifier": "ECKey", "parameters": "(@Nullable BigInteger privKey, @Nullable byte[] pubKey)", "modifiers": "private", "return": "", "signature": " ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey)", "full_signature": "private  ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey)", "class_method_signature": "ECKey.ECKey(@Nullable BigInteger privKey, @Nullable byte[] pubKey)", "testcase": false, "constructor": true}, {"identifier": "isPubKeyOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyOnly()", "full_signature": "public boolean isPubKeyOnly()", "class_method_signature": "ECKey.isPubKeyOnly()", "testcase": false, "constructor": false}, {"identifier": "hasPrivKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasPrivKey()", "full_signature": "public boolean hasPrivKey()", "class_method_signature": "ECKey.hasPrivKey()", "testcase": false, "constructor": false}, {"identifier": "toASN1", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] toASN1()", "full_signature": "public byte[] toASN1()", "class_method_signature": "ECKey.toASN1()", "testcase": false, "constructor": false}, {"identifier": "publicKeyFromPrivate", "parameters": "(BigInteger privKey, boolean compressed)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "full_signature": "public static byte[] publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "class_method_signature": "ECKey.publicKeyFromPrivate(BigInteger privKey, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "getPubKeyHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKeyHash()", "full_signature": "public byte[] getPubKeyHash()", "class_method_signature": "ECKey.getPubKeyHash()", "testcase": false, "constructor": false}, {"identifier": "getPubKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKey()", "full_signature": "public byte[] getPubKey()", "class_method_signature": "ECKey.getPubKey()", "testcase": false, "constructor": false}, {"identifier": "isCompressed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCompressed()", "full_signature": "public boolean isCompressed()", "class_method_signature": "ECKey.isCompressed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ECKey.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringWithPrivate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toStringWithPrivate()", "full_signature": "public String toStringWithPrivate()", "class_method_signature": "ECKey.toStringWithPrivate()", "testcase": false, "constructor": false}, {"identifier": "toAddress", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "Address", "signature": "Address toAddress(NetworkParameters params)", "full_signature": "public Address toAddress(NetworkParameters params)", "class_method_signature": "ECKey.toAddress(NetworkParameters params)", "testcase": false, "constructor": false}, {"identifier": "clearPrivateKey", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearPrivateKey()", "full_signature": "public void clearPrivateKey()", "class_method_signature": "ECKey.clearPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(Sha256Hash input)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature sign(Sha256Hash input)", "full_signature": "public ECDSASignature sign(Sha256Hash input)", "class_method_signature": "ECKey.sign(Sha256Hash input)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(Sha256Hash input, @Nullable KeyParameter aesKey)", "modifiers": "public", "return": "ECDSASignature", "signature": "ECDSASignature sign(Sha256Hash input, @Nullable KeyParameter aesKey)", "full_signature": "public ECDSASignature sign(Sha256Hash input, @Nullable KeyParameter aesKey)", "class_method_signature": "ECKey.sign(Sha256Hash input, @Nullable KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, ECDSASignature signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, ECDSASignature signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, ECDSASignature signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature, byte[] pub)", "modifiers": "public static", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature, byte[] pub)", "full_signature": "public static boolean verify(byte[] data, byte[] signature, byte[] pub)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature, byte[] pub)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(byte[] data, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(byte[] data, byte[] signature)", "full_signature": "public boolean verify(byte[] data, byte[] signature)", "class_method_signature": "ECKey.verify(byte[] data, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(Sha256Hash sigHash, ECDSASignature signature)", "modifiers": "public", "return": "boolean", "signature": "boolean verify(Sha256Hash sigHash, ECDSASignature signature)", "full_signature": "public boolean verify(Sha256Hash sigHash, ECDSASignature signature)", "class_method_signature": "ECKey.verify(Sha256Hash sigHash, ECDSASignature signature)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyCanonical()", "full_signature": "public boolean isPubKeyCanonical()", "class_method_signature": "ECKey.isPubKeyCanonical()", "testcase": false, "constructor": false}, {"identifier": "isPubKeyCanonical", "parameters": "(byte[] pubkey)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPubKeyCanonical(byte[] pubkey)", "full_signature": "public static boolean isPubKeyCanonical(byte[] pubkey)", "class_method_signature": "ECKey.isPubKeyCanonical(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "extractKeyFromASN1", "parameters": "(byte[] asn1privkey)", "modifiers": "private static", "return": "ECKey", "signature": "ECKey extractKeyFromASN1(byte[] asn1privkey)", "full_signature": "private static ECKey extractKeyFromASN1(byte[] asn1privkey)", "class_method_signature": "ECKey.extractKeyFromASN1(byte[] asn1privkey)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(String message)", "modifiers": "public", "return": "String", "signature": "String signMessage(String message)", "full_signature": "public String signMessage(String message)", "class_method_signature": "ECKey.signMessage(String message)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(String message, @Nullable KeyParameter aesKey)", "modifiers": "public", "return": "String", "signature": "String signMessage(String message, @Nullable KeyParameter aesKey)", "full_signature": "public String signMessage(String message, @Nullable KeyParameter aesKey)", "class_method_signature": "ECKey.signMessage(String message, @Nullable KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "signedMessageToKey", "parameters": "(String message, String signatureBase64)", "modifiers": "public static", "return": "ECKey", "signature": "ECKey signedMessageToKey(String message, String signatureBase64)", "full_signature": "public static ECKey signedMessageToKey(String message, String signatureBase64)", "class_method_signature": "ECKey.signedMessageToKey(String message, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "verifyMessage", "parameters": "(String message, String signatureBase64)", "modifiers": "public", "return": "void", "signature": "void verifyMessage(String message, String signatureBase64)", "full_signature": "public void verifyMessage(String message, String signatureBase64)", "class_method_signature": "ECKey.verifyMessage(String message, String signatureBase64)", "testcase": false, "constructor": false}, {"identifier": "recoverFromSignature", "parameters": "(int recId, ECDSASignature sig, Sha256Hash message, boolean compressed)", "modifiers": "@Nullable public static", "return": "ECKey", "signature": "ECKey recoverFromSignature(int recId, ECDSASignature sig, Sha256Hash message, boolean compressed)", "full_signature": "@Nullable public static ECKey recoverFromSignature(int recId, ECDSASignature sig, Sha256Hash message, boolean compressed)", "class_method_signature": "ECKey.recoverFromSignature(int recId, ECDSASignature sig, Sha256Hash message, boolean compressed)", "testcase": false, "constructor": false}, {"identifier": "decompressKey", "parameters": "(BigInteger xBN, boolean yBit)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint decompressKey(BigInteger xBN, boolean yBit)", "full_signature": "private static ECPoint decompressKey(BigInteger xBN, boolean yBit)", "class_method_signature": "ECKey.decompressKey(BigInteger xBN, boolean yBit)", "testcase": false, "constructor": false}, {"identifier": "getPrivKeyBytes", "parameters": "()", "modifiers": "@Nullable public", "return": "byte[]", "signature": "byte[] getPrivKeyBytes()", "full_signature": "@Nullable public byte[] getPrivKeyBytes()", "class_method_signature": "ECKey.getPrivKeyBytes()", "testcase": false, "constructor": false}, {"identifier": "getPrivateKeyEncoded", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "DumpedPrivateKey", "signature": "DumpedPrivateKey getPrivateKeyEncoded(NetworkParameters params)", "full_signature": "public DumpedPrivateKey getPrivateKeyEncoded(NetworkParameters params)", "class_method_signature": "ECKey.getPrivateKeyEncoded(NetworkParameters params)", "testcase": false, "constructor": false}, {"identifier": "getCreationTimeSeconds", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTimeSeconds()", "full_signature": "public long getCreationTimeSeconds()", "class_method_signature": "ECKey.getCreationTimeSeconds()", "testcase": false, "constructor": false}, {"identifier": "setCreationTimeSeconds", "parameters": "(long newCreationTimeSeconds)", "modifiers": "public", "return": "void", "signature": "void setCreationTimeSeconds(long newCreationTimeSeconds)", "full_signature": "public void setCreationTimeSeconds(long newCreationTimeSeconds)", "class_method_signature": "ECKey.setCreationTimeSeconds(long newCreationTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ECKey.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ECKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public", "return": "ECKey", "signature": "ECKey encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public ECKey encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "ECKey.encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public", "return": "ECKey", "signature": "ECKey decrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public ECKey decrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "ECKey.decrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "encryptionIsReversible", "parameters": "(ECKey originalKey, ECKey encryptedKey, KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public static", "return": "boolean", "signature": "boolean encryptionIsReversible(ECKey originalKey, ECKey encryptedKey, KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public static boolean encryptionIsReversible(ECKey originalKey, ECKey encryptedKey, KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "ECKey.encryptionIsReversible(ECKey originalKey, ECKey encryptedKey, KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "isEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEncrypted()", "full_signature": "public boolean isEncrypted()", "class_method_signature": "ECKey.isEncrypted()", "testcase": false, "constructor": false}, {"identifier": "getEncryptedPrivateKey", "parameters": "()", "modifiers": "@Nullable public", "return": "EncryptedPrivateKey", "signature": "EncryptedPrivateKey getEncryptedPrivateKey()", "full_signature": "@Nullable public EncryptedPrivateKey getEncryptedPrivateKey()", "class_method_signature": "ECKey.getEncryptedPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getKeyCrypter", "parameters": "()", "modifiers": "public", "return": "KeyCrypter", "signature": "KeyCrypter getKeyCrypter()", "full_signature": "public KeyCrypter getKeyCrypter()", "class_method_signature": "ECKey.getKeyCrypter()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/ECKey.java"}, "focal_method": {"identifier": "sign", "parameters": "(Sha256Hash input)", "modifiers": "public", "return": "ECDSASignature", "body": "public ECDSASignature sign(Sha256Hash input) throws KeyCrypterException {\n        return sign(input, null);\n    }", "signature": "ECDSASignature sign(Sha256Hash input)", "full_signature": "public ECDSASignature sign(Sha256Hash input)", "class_method_signature": "ECKey.sign(Sha256Hash input)", "testcase": false, "constructor": false, "invocations": ["sign"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}