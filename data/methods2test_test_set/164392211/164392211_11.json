{"test_class": {"identifier": "SamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/sample/SamplerTest.java"}, "test_case": {"identifier": "testSampleIndex_SizeTooLarge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSampleIndex_SizeTooLarge() {\n        assertThrows(IllegalArgumentException.class, () -> Sampler.sampleIndex(6, 5, new Random(5)));\n    }", "signature": "void testSampleIndex_SizeTooLarge()", "full_signature": "@Test public void testSampleIndex_SizeTooLarge()", "class_method_signature": "SamplerTest.testSampleIndex_SizeTooLarge()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "sampleIndex"]}, "focal_class": {"identifier": "Sampler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Random defaultRandom = new SecureRandom();", "modifier": "private static", "type": "Random", "declarator": "defaultRandom = new SecureRandom()", "var_name": "defaultRandom"}], "methods": [{"identifier": "getDefaultRandom", "parameters": "()", "modifiers": "public static", "return": "Random", "signature": "Random getDefaultRandom()", "full_signature": "public static Random getDefaultRandom()", "class_method_signature": "Sampler.getDefaultRandom()", "testcase": false, "constructor": false}, {"identifier": "sampleIndex", "parameters": "(int sampleSize, int originalSize)", "modifiers": "public static", "return": "IntSeries", "signature": "IntSeries sampleIndex(int sampleSize, int originalSize)", "full_signature": "public static IntSeries sampleIndex(int sampleSize, int originalSize)", "class_method_signature": "Sampler.sampleIndex(int sampleSize, int originalSize)", "testcase": false, "constructor": false}, {"identifier": "sampleIndex", "parameters": "(int sampleSize, int originalSize, Random random)", "modifiers": "public static", "return": "IntSeries", "signature": "IntSeries sampleIndex(int sampleSize, int originalSize, Random random)", "full_signature": "public static IntSeries sampleIndex(int sampleSize, int originalSize, Random random)", "class_method_signature": "Sampler.sampleIndex(int sampleSize, int originalSize, Random random)", "testcase": false, "constructor": false}, {"identifier": "intSequence", "parameters": "(int size)", "modifiers": "private static", "return": "int[]", "signature": "int[] intSequence(int size)", "full_signature": "private static int[] intSequence(int size)", "class_method_signature": "Sampler.intSequence(int size)", "testcase": false, "constructor": false}, {"identifier": "shuffle", "parameters": "(int[] ints, Random random)", "modifiers": "private static", "return": "void", "signature": "void shuffle(int[] ints, Random random)", "full_signature": "private static void shuffle(int[] ints, Random random)", "class_method_signature": "Sampler.shuffle(int[] ints, Random random)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int[] ints, int i, int j)", "modifiers": "private static", "return": "void", "signature": "void swap(int[] ints, int i, int j)", "full_signature": "private static void swap(int[] ints, int i, int j)", "class_method_signature": "Sampler.swap(int[] ints, int i, int j)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/sample/Sampler.java"}, "focal_method": {"identifier": "sampleIndex", "parameters": "(int sampleSize, int originalSize)", "modifiers": "public static", "return": "IntSeries", "body": "public static IntSeries sampleIndex(int sampleSize, int originalSize) {\n        return sampleIndex(sampleSize, originalSize, defaultRandom);\n    }", "signature": "IntSeries sampleIndex(int sampleSize, int originalSize)", "full_signature": "public static IntSeries sampleIndex(int sampleSize, int originalSize)", "class_method_signature": "Sampler.sampleIndex(int sampleSize, int originalSize)", "testcase": false, "constructor": false, "invocations": ["sampleIndex"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}