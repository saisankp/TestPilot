{"test_class": {"identifier": "PersistenceProtoFilesLabelerTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/metadata/PersistenceProtoFilesLabelerTest.java"}, "test_case": {"identifier": "testGenerateLabels", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGenerateLabels() throws URISyntaxException, IOException {\n        final PersistenceProtoFilesLabeler labeler = new PersistenceProtoFilesLabeler();\n        final File protoFile = new File(this.getClass().getResource(\"/kogito-types.proto\").toURI());\n        final File kogitoApplication = new File(this.getClass().getResource(\"/kogito-application.proto\").toURI());\n\n        String originalContent = new String(Files.readAllBytes(protoFile.toPath()));\n        \n        assertThat(protoFile).isNotNull();\n        assertThat(kogitoApplication).isNotNull();\n\n        labeler.processProto(protoFile);\n        labeler.processProto(kogitoApplication);\n\n        final Map<String, String> labels = labeler.generateLabels();\n\n        assertThat(labels).size().isEqualTo(1);\n        assertThat(labels).containsKey(labeler.generateKey(protoFile));\n        final byte[] bytes = Base64.getDecoder().decode(labels.get(\"org.kie/persistence/proto/kogito-types.proto\"));        \n        \n        byte[] decompresed = decompres(bytes);\n        String roundTrip = new String(decompresed);\n        assertThat(roundTrip).isEqualTo(originalContent);\n    }", "signature": "void testGenerateLabels()", "full_signature": "@Test void testGenerateLabels()", "class_method_signature": "PersistenceProtoFilesLabelerTest.testGenerateLabels()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "getClass", "toURI", "getResource", "getClass", "readAllBytes", "toPath", "isNotNull", "assertThat", "isNotNull", "assertThat", "processProto", "processProto", "generateLabels", "isEqualTo", "size", "assertThat", "containsKey", "assertThat", "generateKey", "decode", "getDecoder", "get", "decompres", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "PersistenceProtoFilesLabeler", "superclass": "", "interfaces": "implements Labeler", "fields": [{"original_string": "private static final String PERSISTENCE_PROTO_LABEL_PREFIX = ImageMetaData.LABEL_PREFIX + \"persistence/proto/\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENCE_PROTO_LABEL_PREFIX = ImageMetaData.LABEL_PREFIX + \"persistence/proto/\"", "var_name": "PERSISTENCE_PROTO_LABEL_PREFIX"}, {"original_string": "private static final String KOGITO_APPLICATION_PROTO = \"kogito-application.proto\";", "modifier": "private static final", "type": "String", "declarator": "KOGITO_APPLICATION_PROTO = \"kogito-application.proto\"", "var_name": "KOGITO_APPLICATION_PROTO"}, {"original_string": "public static final String PROTO_FILE_EXT = \".proto\";", "modifier": "public static final", "type": "String", "declarator": "PROTO_FILE_EXT = \".proto\"", "var_name": "PROTO_FILE_EXT"}, {"original_string": "private final Map<String, String> encodedProtos = new HashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "encodedProtos = new HashMap<>()", "var_name": "encodedProtos"}], "methods": [{"identifier": "processProto", "parameters": "(final File file)", "modifiers": "public", "return": "void", "signature": "void processProto(final File file)", "full_signature": "public void processProto(final File file)", "class_method_signature": "PersistenceProtoFilesLabeler.processProto(final File file)", "testcase": false, "constructor": false}, {"identifier": "compressFile", "parameters": "(final File file)", "modifiers": "protected", "return": "String", "signature": "String compressFile(final File file)", "full_signature": "protected String compressFile(final File file)", "class_method_signature": "PersistenceProtoFilesLabeler.compressFile(final File file)", "testcase": false, "constructor": false}, {"identifier": "generateKey", "parameters": "(final File file)", "modifiers": "protected", "return": "String", "signature": "String generateKey(final File file)", "full_signature": "protected String generateKey(final File file)", "class_method_signature": "PersistenceProtoFilesLabeler.generateKey(final File file)", "testcase": false, "constructor": false}, {"identifier": "generateLabels", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> generateLabels()", "full_signature": "@Override public Map<String, String> generateLabels()", "class_method_signature": "PersistenceProtoFilesLabeler.generateLabels()", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/metadata/PersistenceProtoFilesLabeler.java"}, "focal_method": {"identifier": "generateLabels", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "body": "@Override\n    public Map<String, String> generateLabels() {\n        return encodedProtos;\n    }", "signature": "Map<String, String> generateLabels()", "full_signature": "@Override public Map<String, String> generateLabels()", "class_method_signature": "PersistenceProtoFilesLabeler.generateLabels()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}