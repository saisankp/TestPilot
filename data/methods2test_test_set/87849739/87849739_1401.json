{"test_class": {"identifier": "InvalidRqlExpressionExceptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_FILTER_STR = \"eq(thingId,4711)\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FILTER_STR = \"eq(thingId,4711)\"", "var_name": "KNOWN_FILTER_STR"}, {"original_string": "private static final String KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE = \"Invalid filter: \" + KNOWN_FILTER_STR;", "modifier": "private static final", "type": "String", "declarator": "KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE = \"Invalid filter: \" + KNOWN_FILTER_STR", "var_name": "KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE"}, {"original_string": "private static final InvalidRqlExpressionException INVALID_FILTER_EXCEPTION =\n            InvalidRqlExpressionException\n                    .newBuilder().message(KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE).build();", "modifier": "private static final", "type": "InvalidRqlExpressionException", "declarator": "INVALID_FILTER_EXCEPTION =\n            InvalidRqlExpressionException\n                    .newBuilder().message(KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE).build()", "var_name": "INVALID_FILTER_EXCEPTION"}, {"original_string": "private static final String EXPECTED_MESSAGE = KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE;", "modifier": "private static final", "type": "String", "declarator": "EXPECTED_MESSAGE = KNOWN_INVALID_FILTER_EXCEPTION_MESSAGE", "var_name": "EXPECTED_MESSAGE"}, {"original_string": "private static final JsonObject KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(DittoRuntimeException.JsonFields.STATUS, InvalidRqlExpressionException.STATUS_CODE.toInt())\n            .set(DittoRuntimeException.JsonFields.ERROR_CODE, InvalidRqlExpressionException.ERROR_CODE)\n            .set(DittoRuntimeException.JsonFields.MESSAGE,\n                    INVALID_FILTER_EXCEPTION.getMessage())\n            .set(DittoRuntimeException.JsonFields.DESCRIPTION,\n                    INVALID_FILTER_EXCEPTION.getDescription().orElse(null),\n                    JsonField.isValueNonNull())\n            .set(DittoRuntimeException.JsonFields.HREF,\n                    INVALID_FILTER_EXCEPTION.getHref().map(URI::toString).orElse(null),\n                    JsonField.isValueNonNull())\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(DittoRuntimeException.JsonFields.STATUS, InvalidRqlExpressionException.STATUS_CODE.toInt())\n            .set(DittoRuntimeException.JsonFields.ERROR_CODE, InvalidRqlExpressionException.ERROR_CODE)\n            .set(DittoRuntimeException.JsonFields.MESSAGE,\n                    INVALID_FILTER_EXCEPTION.getMessage())\n            .set(DittoRuntimeException.JsonFields.DESCRIPTION,\n                    INVALID_FILTER_EXCEPTION.getDescription().orElse(null),\n                    JsonField.isValueNonNull())\n            .set(DittoRuntimeException.JsonFields.HREF,\n                    INVALID_FILTER_EXCEPTION.getHref().map(URI::toString).orElse(null),\n                    JsonField.isValueNonNull())\n            .build()", "var_name": "KNOWN_JSON"}], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/exceptions/InvalidRqlExpressionExceptionTest.java"}, "test_case": {"identifier": "copy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copy() {\n        final DittoRuntimeException copy =\n                DittoRuntimeException.newBuilder(INVALID_FILTER_EXCEPTION).build();\n        assertThat(copy).isEqualTo(INVALID_FILTER_EXCEPTION);\n    }", "signature": "void copy()", "full_signature": "@Test public void copy()", "class_method_signature": "InvalidRqlExpressionExceptionTest.copy()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "InvalidRqlExpressionException", "superclass": "extends DittoRuntimeException", "interfaces": "", "fields": [{"original_string": "public static final String ERROR_CODE = \"rql.expression.invalid\";", "modifier": "public static final", "type": "String", "declarator": "ERROR_CODE = \"rql.expression.invalid\"", "var_name": "ERROR_CODE"}, {"original_string": "static final String DEFAULT_DESCRIPTION = \"Ensure that all opening parentheses have also closing ones and that \" +\n            \"the RQL expression is valid.\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_DESCRIPTION = \"Ensure that all opening parentheses have also closing ones and that \" +\n            \"the RQL expression is valid.\"", "var_name": "DEFAULT_DESCRIPTION"}, {"original_string": "static final HttpStatusCode STATUS_CODE = HttpStatusCode.BAD_REQUEST;", "modifier": "static final", "type": "HttpStatusCode", "declarator": "STATUS_CODE = HttpStatusCode.BAD_REQUEST", "var_name": "STATUS_CODE"}, {"original_string": "private static final long serialVersionUID = 8900314242209005665L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8900314242209005665L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "InvalidRqlExpressionException", "parameters": "(final DittoHeaders dittoHeaders,\n            final String message,\n            final String description,\n            final Throwable cause,\n            final URI href)", "modifiers": "private", "return": "", "signature": " InvalidRqlExpressionException(final DittoHeaders dittoHeaders,\n            final String message,\n            final String description,\n            final Throwable cause,\n            final URI href)", "full_signature": "private  InvalidRqlExpressionException(final DittoHeaders dittoHeaders,\n            final String message,\n            final String description,\n            final Throwable cause,\n            final URI href)", "class_method_signature": "InvalidRqlExpressionException.InvalidRqlExpressionException(final DittoHeaders dittoHeaders,\n            final String message,\n            final String description,\n            final Throwable cause,\n            final URI href)", "testcase": false, "constructor": true}, {"identifier": "getEmptyBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "DittoRuntimeExceptionBuilder<? extends DittoRuntimeException>", "signature": "DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getEmptyBuilder()", "full_signature": "@Override protected DittoRuntimeExceptionBuilder<? extends DittoRuntimeException> getEmptyBuilder()", "class_method_signature": "InvalidRqlExpressionException.getEmptyBuilder()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "InvalidRqlExpressionException.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "fromMessage", "parameters": "(@Nullable final String message,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "InvalidRqlExpressionException", "signature": "InvalidRqlExpressionException fromMessage(@Nullable final String message,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static InvalidRqlExpressionException fromMessage(@Nullable final String message,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "InvalidRqlExpressionException.fromMessage(@Nullable final String message,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "InvalidRqlExpressionException", "signature": "InvalidRqlExpressionException fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static InvalidRqlExpressionException fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "InvalidRqlExpressionException.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/exceptions/InvalidRqlExpressionException.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder() {\n        return new Builder();\n    }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "InvalidRqlExpressionException.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}