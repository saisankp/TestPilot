{"test_class": {"identifier": "HttpClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String url = \"http://www.mopub.com\";", "modifier": "static final", "type": "String", "declarator": "url = \"http://www.mopub.com\"", "var_name": "url"}, {"original_string": "private Activity context;", "modifier": "private", "type": "Activity", "declarator": "context", "var_name": "context"}, {"original_string": "private String userAgent;", "modifier": "private", "type": "String", "declarator": "userAgent", "var_name": "userAgent"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java"}, "test_case": {"identifier": "initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {\n        HttpGet httpGet = initializeHttpGet(url, null);\n\n        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);\n        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();\n    }", "signature": "void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader()", "full_signature": "@Test public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader()", "class_method_signature": "HttpClientTest.initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader()", "testcase": true, "constructor": false, "invocations": ["initializeHttpGet", "isEqualTo", "assertThat", "toString", "toURL", "getURI", "isNull", "assertThat", "getFirstHeader", "getKey"]}, "focal_class": {"identifier": "HttpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CONNECTION_TIMEOUT = 10000;", "modifier": "private static final", "type": "int", "declarator": "CONNECTION_TIMEOUT = 10000", "var_name": "CONNECTION_TIMEOUT"}, {"original_string": "private static final int SOCKET_TIMEOUT = 10000;", "modifier": "private static final", "type": "int", "declarator": "SOCKET_TIMEOUT = 10000", "var_name": "SOCKET_TIMEOUT"}, {"original_string": "private static String sWebViewUserAgent;", "modifier": "private static", "type": "String", "declarator": "sWebViewUserAgent", "var_name": "sWebViewUserAgent"}], "methods": [{"identifier": "getHttpClient", "parameters": "()", "modifiers": "public static", "return": "AndroidHttpClient", "signature": "AndroidHttpClient getHttpClient()", "full_signature": "public static AndroidHttpClient getHttpClient()", "class_method_signature": "HttpClient.getHttpClient()", "testcase": false, "constructor": false}, {"identifier": "initializeHttpGet", "parameters": "(final String url, final Context context)", "modifiers": "public static", "return": "HttpGet", "signature": "HttpGet initializeHttpGet(final String url, final Context context)", "full_signature": "public static HttpGet initializeHttpGet(final String url, final Context context)", "class_method_signature": "HttpClient.initializeHttpGet(final String url, final Context context)", "testcase": false, "constructor": false}, {"identifier": "makeTrackingHttpRequest", "parameters": "(final Iterable<String> urls, final Context context)", "modifiers": "public static", "return": "void", "signature": "void makeTrackingHttpRequest(final Iterable<String> urls, final Context context)", "full_signature": "public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context)", "class_method_signature": "HttpClient.makeTrackingHttpRequest(final Iterable<String> urls, final Context context)", "testcase": false, "constructor": false}, {"identifier": "makeTrackingHttpRequest", "parameters": "(final Iterable<String> urls,\n            final Context context,\n            final MoPubEvents.Type type)", "modifiers": "public static", "return": "void", "signature": "void makeTrackingHttpRequest(final Iterable<String> urls,\n            final Context context,\n            final MoPubEvents.Type type)", "full_signature": "public static void makeTrackingHttpRequest(final Iterable<String> urls,\n            final Context context,\n            final MoPubEvents.Type type)", "class_method_signature": "HttpClient.makeTrackingHttpRequest(final Iterable<String> urls,\n            final Context context,\n            final MoPubEvents.Type type)", "testcase": false, "constructor": false}, {"identifier": "makeTrackingHttpRequest", "parameters": "(final String url,\n            final Context context)", "modifiers": "public static", "return": "void", "signature": "void makeTrackingHttpRequest(final String url,\n            final Context context)", "full_signature": "public static void makeTrackingHttpRequest(final String url,\n            final Context context)", "class_method_signature": "HttpClient.makeTrackingHttpRequest(final String url,\n            final Context context)", "testcase": false, "constructor": false}, {"identifier": "makeTrackingHttpRequest", "parameters": "(final String url,\n            final Context context,\n            final MoPubEvents.Type type)", "modifiers": "public static", "return": "void", "signature": "void makeTrackingHttpRequest(final String url,\n            final Context context,\n            final MoPubEvents.Type type)", "full_signature": "public static void makeTrackingHttpRequest(final String url,\n            final Context context,\n            final MoPubEvents.Type type)", "class_method_signature": "HttpClient.makeTrackingHttpRequest(final String url,\n            final Context context,\n            final MoPubEvents.Type type)", "testcase": false, "constructor": false}, {"identifier": "getWebViewUserAgent", "parameters": "(String defaultUserAgent)", "modifiers": "public synchronized static", "return": "String", "signature": "String getWebViewUserAgent(String defaultUserAgent)", "full_signature": "public synchronized static String getWebViewUserAgent(String defaultUserAgent)", "class_method_signature": "HttpClient.getWebViewUserAgent(String defaultUserAgent)", "testcase": false, "constructor": false}, {"identifier": "getWebViewUserAgent", "parameters": "()", "modifiers": "public synchronized static", "return": "String", "signature": "String getWebViewUserAgent()", "full_signature": "public synchronized static String getWebViewUserAgent()", "class_method_signature": "HttpClient.getWebViewUserAgent()", "testcase": false, "constructor": false}, {"identifier": "setWebViewUserAgent", "parameters": "(final String userAgent)", "modifiers": "public synchronized static", "return": "void", "signature": "void setWebViewUserAgent(final String userAgent)", "full_signature": "public synchronized static void setWebViewUserAgent(final String userAgent)", "class_method_signature": "HttpClient.setWebViewUserAgent(final String userAgent)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java"}, "focal_method": {"identifier": "initializeHttpGet", "parameters": "(final String url, final Context context)", "modifiers": "public static", "return": "HttpGet", "body": "public static HttpGet initializeHttpGet(final String url, final Context context) {\n        final HttpGet httpGet = new HttpGet(url);\n\n        if (getWebViewUserAgent() == null && context != null) {\n            // Memoize the user agent since creating WebViews is expensive\n            setWebViewUserAgent(new WebView(context).getSettings().getUserAgentString());\n        }\n\n\n        final String webViewUserAgent = getWebViewUserAgent();\n        if (webViewUserAgent != null) {\n            httpGet.addHeader(USER_AGENT.getKey(), webViewUserAgent);\n        }\n\n        return httpGet;\n    }", "signature": "HttpGet initializeHttpGet(final String url, final Context context)", "full_signature": "public static HttpGet initializeHttpGet(final String url, final Context context)", "class_method_signature": "HttpClient.initializeHttpGet(final String url, final Context context)", "testcase": false, "constructor": false, "invocations": ["getWebViewUserAgent", "setWebViewUserAgent", "getUserAgentString", "getSettings", "getWebViewUserAgent", "addHeader", "getKey"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}