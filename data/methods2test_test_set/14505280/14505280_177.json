{"test_class": {"identifier": "LogCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/general/LogCommandTest.java"}, "test_case": {"identifier": "testLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLog() throws Exception {\n\t\tLogRequest request = new LogRequest();\n\t\trequest.setLevel(LogRequest.LEVEL_INFO);\n\t\trequest.setStatement(\"Test log command\");\n\t\tCommandResponse response = dispatcher.execute(LogRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\n\t\trequest.setLevel(LogRequest.LEVEL_DEBUG);\n\t\trequest.setStatement(\"Test debug log command\");\n\t\tresponse = dispatcher.execute(LogRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\n\t\trequest.setLevel(LogRequest.LEVEL_WARN);\n\t\trequest.setStatement(\"Test warn log command\");\n\t\tresponse = dispatcher.execute(LogRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\n\t\trequest.setLevel(LogRequest.LEVEL_ERROR);\n\t\trequest.setStatement(\"Test error log command\");\n\t\tresponse = dispatcher.execute(LogRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t}", "signature": "void testLog()", "full_signature": "@Test public void testLog()", "class_method_signature": "LogCommandTest.testLog()", "testcase": true, "constructor": false, "invocations": ["setLevel", "setStatement", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "setLevel", "setStatement", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "setLevel", "setStatement", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "setLevel", "setStatement", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError"]}, "focal_class": {"identifier": "LogCommand", "superclass": "", "interfaces": "implements CommandHasRequest<LogRequest, CommandResponse>", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(LogCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LogCommand.class)", "var_name": "log"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "LogRequest", "signature": "LogRequest getEmptyCommandRequest()", "full_signature": "@Override public LogRequest getEmptyCommandRequest()", "class_method_signature": "LogCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "CommandResponse", "signature": "CommandResponse getEmptyCommandResponse()", "full_signature": "@Override public CommandResponse getEmptyCommandResponse()", "class_method_signature": "LogCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(LogRequest request, CommandResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(LogRequest request, CommandResponse response)", "full_signature": "@Override public void execute(LogRequest request, CommandResponse response)", "class_method_signature": "LogCommand.execute(LogRequest request, CommandResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/general/LogCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(LogRequest request, CommandResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(LogRequest request, CommandResponse response) throws Exception {\n\t\tswitch (request.getLevel()) {\n\t\t\tcase LogRequest.LEVEL_DEBUG:\n\t\t\t\tlog.debug(request.getStatement());\n\t\t\t\tbreak;\n\t\t\tcase LogRequest.LEVEL_INFO:\n\t\t\t\tlog.info(request.getStatement());\n\t\t\t\tbreak;\n\t\t\tcase LogRequest.LEVEL_WARN:\n\t\t\t\tlog.warn(request.getStatement());\n\t\t\t\tbreak;\n\t\t\tcase LogRequest.LEVEL_ERROR:\n\t\t\t\tlog.error(request.getStatement());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Unknown log level \" + request.getLevel());\n\t\t}\n\t}", "signature": "void execute(LogRequest request, CommandResponse response)", "full_signature": "@Override public void execute(LogRequest request, CommandResponse response)", "class_method_signature": "LogCommand.execute(LogRequest request, CommandResponse response)", "testcase": false, "constructor": false, "invocations": ["getLevel", "debug", "getStatement", "info", "getStatement", "warn", "getStatement", "error", "getStatement", "getLevel"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}