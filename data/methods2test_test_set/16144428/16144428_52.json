{"test_class": {"identifier": "BitVectorImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "wdtk-storage/src/test/java/org/wikidata/wdtk/storage/datastructures/BitVectorImplTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToString() {\n\t\tBitVectorImpl bv = new BitVectorImpl();\n\t\tfor (int i = 0; i < 0x10; i++) {\n\t\t\tboolean value = (i % 3) == 0;\n\t\t\tbv.addBit(value);\n\t\t}\n\t\tAssert.assertEquals(\"1001001001001001\", bv.toString());\n\n\t\tfor (int i = 0; i < 0x10; i++) {\n\t\t\tboolean value = (i % 2) == 0;\n\t\t\tbv.addBit(value);\n\t\t}\n\t\tAssert.assertEquals(\"10010010010010011010101010101010\", bv.toString());\n\n\t\tfor (int i = 0; i < 0x20; i++) {\n\t\t\tbv.setBit(i, bv.getBit(i));\n\t\t}\n\t\tAssert.assertEquals(\"10010010010010011010101010101010\", bv.toString());\n\n\t\tfor (int i = 0; i < 0x20; i++) {\n\t\t\tbv.setBit(i, !bv.getBit(i));\n\t\t}\n\t\tAssert.assertEquals(\"01101101101101100101010101010101\", bv.toString());\n\n\t}", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "BitVectorImplTest.testToString()", "testcase": true, "constructor": false, "invocations": ["addBit", "assertEquals", "toString", "addBit", "assertEquals", "toString", "setBit", "getBit", "assertEquals", "toString", "setBit", "getBit", "assertEquals", "toString"]}, "focal_class": {"identifier": "BitVectorImpl", "superclass": "", "interfaces": "implements BitVector, Iterable<Boolean>", "fields": [{"original_string": "static final int GROWTH_FACTOR = 2;", "modifier": "static final", "type": "int", "declarator": "GROWTH_FACTOR = 2", "var_name": "GROWTH_FACTOR"}, {"original_string": "static final int LG_WORD_SIZE = 6;", "modifier": "static final", "type": "int", "declarator": "LG_WORD_SIZE = 6", "var_name": "LG_WORD_SIZE"}, {"original_string": "static final int MINIMUM_ARRAY_SIZE = 1;", "modifier": "static final", "type": "int", "declarator": "MINIMUM_ARRAY_SIZE = 1", "var_name": "MINIMUM_ARRAY_SIZE"}, {"original_string": "static final int WORD_MASK = 0x3F;", "modifier": "static final", "type": "int", "declarator": "WORD_MASK = 0x3F", "var_name": "WORD_MASK"}, {"original_string": "static final int WORD_SIZE = 0x40;", "modifier": "static final", "type": "int", "declarator": "WORD_SIZE = 0x40", "var_name": "WORD_SIZE"}, {"original_string": "long[] arrayOfBits;", "modifier": "", "type": "long[]", "declarator": "arrayOfBits", "var_name": "arrayOfBits"}, {"original_string": "int hashCode;", "modifier": "", "type": "int", "declarator": "hashCode", "var_name": "hashCode"}, {"original_string": "long size;", "modifier": "", "type": "long", "declarator": "size", "var_name": "size"}, {"original_string": "boolean validHashCode = false;", "modifier": "", "type": "boolean", "declarator": "validHashCode = false", "var_name": "validHashCode"}], "methods": [{"identifier": "BitVectorImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " BitVectorImpl()", "full_signature": "public  BitVectorImpl()", "class_method_signature": "BitVectorImpl.BitVectorImpl()", "testcase": false, "constructor": true}, {"identifier": "BitVectorImpl", "parameters": "(BitVector bitVector)", "modifiers": "public", "return": "", "signature": " BitVectorImpl(BitVector bitVector)", "full_signature": "public  BitVectorImpl(BitVector bitVector)", "class_method_signature": "BitVectorImpl.BitVectorImpl(BitVector bitVector)", "testcase": false, "constructor": true}, {"identifier": "BitVectorImpl", "parameters": "(long initialSize)", "modifiers": "public", "return": "", "signature": " BitVectorImpl(long initialSize)", "full_signature": "public  BitVectorImpl(long initialSize)", "class_method_signature": "BitVectorImpl.BitVectorImpl(long initialSize)", "testcase": false, "constructor": true}, {"identifier": "getBitInWord", "parameters": "(byte position, long word)", "modifiers": "static", "return": "boolean", "signature": "boolean getBitInWord(byte position, long word)", "full_signature": "static boolean getBitInWord(byte position, long word)", "class_method_signature": "BitVectorImpl.getBitInWord(byte position, long word)", "testcase": false, "constructor": false}, {"identifier": "getMinimumArraySize", "parameters": "(long bitVectorSize)", "modifiers": "static", "return": "int", "signature": "int getMinimumArraySize(long bitVectorSize)", "full_signature": "static int getMinimumArraySize(long bitVectorSize)", "class_method_signature": "BitVectorImpl.getMinimumArraySize(long bitVectorSize)", "testcase": false, "constructor": false}, {"identifier": "setBitInWord", "parameters": "(byte position, boolean bit, long word)", "modifiers": "static", "return": "long", "signature": "long setBitInWord(byte position, boolean bit, long word)", "full_signature": "static long setBitInWord(byte position, boolean bit, long word)", "class_method_signature": "BitVectorImpl.setBitInWord(byte position, boolean bit, long word)", "testcase": false, "constructor": false}, {"identifier": "wordToString", "parameters": "(long word)", "modifiers": "static", "return": "String", "signature": "String wordToString(long word)", "full_signature": "static String wordToString(long word)", "class_method_signature": "BitVectorImpl.wordToString(long word)", "testcase": false, "constructor": false}, {"identifier": "getSizeInWords", "parameters": "(long sizeInBits)", "modifiers": "static", "return": "int", "signature": "int getSizeInWords(long sizeInBits)", "full_signature": "static int getSizeInWords(long sizeInBits)", "class_method_signature": "BitVectorImpl.getSizeInWords(long sizeInBits)", "testcase": false, "constructor": false}, {"identifier": "addBit", "parameters": "(boolean bit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addBit(boolean bit)", "full_signature": "@Override public boolean addBit(boolean bit)", "class_method_signature": "BitVectorImpl.addBit(boolean bit)", "testcase": false, "constructor": false}, {"identifier": "assertNonNegativePosition", "parameters": "(long position)", "modifiers": "", "return": "void", "signature": "void assertNonNegativePosition(long position)", "full_signature": " void assertNonNegativePosition(long position)", "class_method_signature": "BitVectorImpl.assertNonNegativePosition(long position)", "testcase": false, "constructor": false}, {"identifier": "ensureSize", "parameters": "(long position)", "modifiers": "", "return": "void", "signature": "void ensureSize(long position)", "full_signature": " void ensureSize(long position)", "class_method_signature": "BitVectorImpl.ensureSize(long position)", "testcase": false, "constructor": false}, {"identifier": "computeHashCode", "parameters": "()", "modifiers": "", "return": "int", "signature": "int computeHashCode()", "full_signature": " int computeHashCode()", "class_method_signature": "BitVectorImpl.computeHashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "BitVectorImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getBit", "parameters": "(long position)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getBit(long position)", "full_signature": "@Override public boolean getBit(long position)", "class_method_signature": "BitVectorImpl.getBit(long position)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BitVectorImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Boolean>", "signature": "Iterator<Boolean> iterator()", "full_signature": "@Override public Iterator<Boolean> iterator()", "class_method_signature": "BitVectorImpl.iterator()", "testcase": false, "constructor": false}, {"identifier": "resizeArray", "parameters": "(int newArraySize)", "modifiers": "", "return": "void", "signature": "void resizeArray(int newArraySize)", "full_signature": " void resizeArray(int newArraySize)", "class_method_signature": "BitVectorImpl.resizeArray(int newArraySize)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(long position, boolean bit)", "modifiers": "@Override public", "return": "void", "signature": "void setBit(long position, boolean bit)", "full_signature": "@Override public void setBit(long position, boolean bit)", "class_method_signature": "BitVectorImpl.setBit(long position, boolean bit)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "BitVectorImpl.size()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BitVectorImpl.toString()", "testcase": false, "constructor": false}], "file": "wdtk-storage/src/main/java/org/wikidata/wdtk/storage/datastructures/BitVectorImpl.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String toString() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (long position = 0; position < this.size;) {\n\t\t\tsb.append(getBit(position) ? \"1\" : \"0\");\n\t\t\tposition++;\n\t\t}\n\t\treturn sb.toString();\n\t}", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BitVectorImpl.toString()", "testcase": false, "constructor": false, "invocations": ["append", "getBit", "toString"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}