{"test_class": {"identifier": "DiscreteNaiveBayesTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [{"original_string": "private static final double PRECISION = 1e-2;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 1e-2", "var_name": "PRECISION"}, {"original_string": "private static final double LABEL_1 = 1.;", "modifier": "private static final", "type": "double", "declarator": "LABEL_1 = 1.", "var_name": "LABEL_1"}, {"original_string": "private static final double LABEL_2 = 2.;", "modifier": "private static final", "type": "double", "declarator": "LABEL_2 = 2.", "var_name": "LABEL_2"}, {"original_string": "private static final Map<Integer, double[]> binarizedData = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "binarizedData = new HashMap<>()", "var_name": "binarizedData"}, {"original_string": "private static final Map<Integer, double[]> data = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "data = new HashMap<>()", "var_name": "data"}, {"original_string": "private static final double[][] binarizedDatathresholds = new double[][] {{.5}, {.5}, {.5}, {.5}, {.5}};", "modifier": "private static final", "type": "double[][]", "declarator": "binarizedDatathresholds = new double[][] {{.5}, {.5}, {.5}, {.5}, {.5}}", "var_name": "binarizedDatathresholds"}, {"original_string": "private static final double[][] thresholds = new double[][] {{4, 8}, {.5}, {.3, .4, .5}, {250, 500, 750}};", "modifier": "private static final", "type": "double[][]", "declarator": "thresholds = new double[][] {{4, 8}, {.5}, {.3, .4, .5}, {250, 500, 750}}", "var_name": "thresholds"}, {"original_string": "private DiscreteNaiveBayesTrainer trainer;", "modifier": "private", "type": "DiscreteNaiveBayesTrainer", "declarator": "trainer", "var_name": "trainer"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/naivebayes/discrete/DiscreteNaiveBayesTrainerTest.java"}, "test_case": {"identifier": "testReturnsCorrectPriorProbabilitiesWithDefferentThresholds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReturnsCorrectPriorProbabilitiesWithDefferentThresholds() {\n        double[][][] expectedPriorProbabilites = new double[][][] {\n            {\n                {4. / 8, 2. / 8, 2. / 8},\n                {.5, .5},\n                {1. / 8, 3. / 8, 2. / 8, 2. / 8},\n                {1. / 8, 2. / 8, 2. / 8, 3. / 8}},\n            {\n                {2. / 4, 1. / 4, 1. / 4},\n                {1. / 4, 3. / 4},\n                {1. / 4, 0, 2. / 4, 1. / 4},\n                {2. / 4, 1. / 4, 1. / 4, 0}}\n        };\n\n        DiscreteNaiveBayesModel model = trainer\n            .setBucketThresholds(thresholds)\n            .fit(\n                new LocalDatasetBuilder<>(data, parts),\n                new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n            );\n\n        for (int i = 0; i < expectedPriorProbabilites.length; i++) {\n            for (int j = 0; j < expectedPriorProbabilites[i].length; j++)\n                Assert.assertArrayEquals(expectedPriorProbabilites[i][j], model.getProbabilities()[i][j], PRECISION);\n        }\n    }", "signature": "void testReturnsCorrectPriorProbabilitiesWithDefferentThresholds()", "full_signature": "@Test public void testReturnsCorrectPriorProbabilitiesWithDefferentThresholds()", "class_method_signature": "DiscreteNaiveBayesTrainerTest.testReturnsCorrectPriorProbabilitiesWithDefferentThresholds()", "testcase": true, "constructor": false, "invocations": ["fit", "setBucketThresholds", "labeled", "assertArrayEquals", "getProbabilities"]}, "focal_class": {"identifier": "DiscreteNaiveBayesTrainer", "superclass": "extends SingleLabelDatasetTrainer<DiscreteNaiveBayesModel>", "interfaces": "", "fields": [{"original_string": "private static final double PRECISION = 1e-10;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 1e-10", "var_name": "PRECISION"}, {"original_string": "private double[] priorProbabilities;", "modifier": "private", "type": "double[]", "declarator": "priorProbabilities", "var_name": "priorProbabilities"}, {"original_string": "private boolean equiprobableClasses;", "modifier": "private", "type": "boolean", "declarator": "equiprobableClasses", "var_name": "equiprobableClasses"}, {"original_string": "private double[][] bucketThresholds;", "modifier": "private", "type": "double[][]", "declarator": "bucketThresholds", "var_name": "bucketThresholds"}], "methods": [{"identifier": "fitWithInitializedDeployingContext", "parameters": "(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "modifiers": "@Override public", "return": "DiscreteNaiveBayesModel", "signature": "DiscreteNaiveBayesModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "full_signature": "@Override public DiscreteNaiveBayesModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "class_method_signature": "DiscreteNaiveBayesTrainer.fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "isUpdateable", "parameters": "(DiscreteNaiveBayesModel mdl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateable(DiscreteNaiveBayesModel mdl)", "full_signature": "@Override public boolean isUpdateable(DiscreteNaiveBayesModel mdl)", "class_method_signature": "DiscreteNaiveBayesTrainer.isUpdateable(DiscreteNaiveBayesModel mdl)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(DiscreteNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "modifiers": "@Override protected", "return": "DiscreteNaiveBayesModel", "signature": "DiscreteNaiveBayesModel updateModel(DiscreteNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "full_signature": "@Override protected DiscreteNaiveBayesModel updateModel(DiscreteNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "class_method_signature": "DiscreteNaiveBayesTrainer.updateModel(DiscreteNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "checkSumsHolder", "parameters": "(DiscreteNaiveBayesSumsHolder holder1, DiscreteNaiveBayesSumsHolder holder2)", "modifiers": "private", "return": "boolean", "signature": "boolean checkSumsHolder(DiscreteNaiveBayesSumsHolder holder1, DiscreteNaiveBayesSumsHolder holder2)", "full_signature": "private boolean checkSumsHolder(DiscreteNaiveBayesSumsHolder holder1, DiscreteNaiveBayesSumsHolder holder2)", "class_method_signature": "DiscreteNaiveBayesTrainer.checkSumsHolder(DiscreteNaiveBayesSumsHolder holder1, DiscreteNaiveBayesSumsHolder holder2)", "testcase": false, "constructor": false}, {"identifier": "withEquiprobableClasses", "parameters": "()", "modifiers": "public", "return": "DiscreteNaiveBayesTrainer", "signature": "DiscreteNaiveBayesTrainer withEquiprobableClasses()", "full_signature": "public DiscreteNaiveBayesTrainer withEquiprobableClasses()", "class_method_signature": "DiscreteNaiveBayesTrainer.withEquiprobableClasses()", "testcase": false, "constructor": false}, {"identifier": "setPriorProbabilities", "parameters": "(double[] priorProbabilities)", "modifiers": "public", "return": "DiscreteNaiveBayesTrainer", "signature": "DiscreteNaiveBayesTrainer setPriorProbabilities(double[] priorProbabilities)", "full_signature": "public DiscreteNaiveBayesTrainer setPriorProbabilities(double[] priorProbabilities)", "class_method_signature": "DiscreteNaiveBayesTrainer.setPriorProbabilities(double[] priorProbabilities)", "testcase": false, "constructor": false}, {"identifier": "setBucketThresholds", "parameters": "(double[][] bucketThresholds)", "modifiers": "public", "return": "DiscreteNaiveBayesTrainer", "signature": "DiscreteNaiveBayesTrainer setBucketThresholds(double[][] bucketThresholds)", "full_signature": "public DiscreteNaiveBayesTrainer setBucketThresholds(double[][] bucketThresholds)", "class_method_signature": "DiscreteNaiveBayesTrainer.setBucketThresholds(double[][] bucketThresholds)", "testcase": false, "constructor": false}, {"identifier": "resetProbabilitiesSettings", "parameters": "()", "modifiers": "public", "return": "DiscreteNaiveBayesTrainer", "signature": "DiscreteNaiveBayesTrainer resetProbabilitiesSettings()", "full_signature": "public DiscreteNaiveBayesTrainer resetProbabilitiesSettings()", "class_method_signature": "DiscreteNaiveBayesTrainer.resetProbabilitiesSettings()", "testcase": false, "constructor": false}, {"identifier": "toBucketNumber", "parameters": "(double val, double[] thresholds)", "modifiers": "private", "return": "int", "signature": "int toBucketNumber(double val, double[] thresholds)", "full_signature": "private int toBucketNumber(double val, double[] thresholds)", "class_method_signature": "DiscreteNaiveBayesTrainer.toBucketNumber(double val, double[] thresholds)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/naivebayes/discrete/DiscreteNaiveBayesTrainer.java"}, "focal_method": {"identifier": "setBucketThresholds", "parameters": "(double[][] bucketThresholds)", "modifiers": "public", "return": "DiscreteNaiveBayesTrainer", "body": "public DiscreteNaiveBayesTrainer setBucketThresholds(double[][] bucketThresholds) {\n        this.bucketThresholds = bucketThresholds;\n        return this;\n    }", "signature": "DiscreteNaiveBayesTrainer setBucketThresholds(double[][] bucketThresholds)", "full_signature": "public DiscreteNaiveBayesTrainer setBucketThresholds(double[][] bucketThresholds)", "class_method_signature": "DiscreteNaiveBayesTrainer.setBucketThresholds(double[][] bucketThresholds)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}