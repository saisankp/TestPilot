{"test_class": {"identifier": "TrafficOptionsPanelTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [{"original_string": "private TrafficOptionsPanel mTrafficOptionsPanel;", "modifier": "private", "type": "TrafficOptionsPanel", "declarator": "mTrafficOptionsPanel", "var_name": "mTrafficOptionsPanel"}, {"original_string": "private boolean mCallbackCalled;", "modifier": "private", "type": "boolean", "declarator": "mCallbackCalled", "var_name": "mCallbackCalled"}], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/routing/TrafficOptionsPanelTest.java"}, "test_case": {"identifier": "testChangeListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChangeListener() {\n        DynamicPenalty dynamicPenalty = MockUtils.getDynamicPenality(Route.TrafficPenaltyMode.DISABLED);\n        mTrafficOptionsPanel.setDynamicPenalty(dynamicPenalty);\n        mTrafficOptionsPanel.setListener(new OptionsPanel.Listener() {\n            @Override\n            public void onOptionCreated(List<OptionItem> item) {\n                mCallbackCalled = false;\n            }\n\n            @Override\n            public void onOptionChanged(OptionItem item) {\n                mCallbackCalled = true;\n            }\n        });\n        // negate one part\n        dynamicPenalty = MockUtils.getDynamicPenality(Route.TrafficPenaltyMode.AVOID_LONG_TERM_CLOSURES);\n        mTrafficOptionsPanel.setDynamicPenalty(dynamicPenalty);\n        assertThat(mCallbackCalled, is(true));\n    }", "signature": "void testChangeListener()", "full_signature": "@Test public void testChangeListener()", "class_method_signature": "TrafficOptionsPanelTest.testChangeListener()", "testcase": true, "constructor": false, "invocations": ["getDynamicPenality", "setDynamicPenalty", "setListener", "getDynamicPenality", "setDynamicPenalty", "assertThat", "is"]}, "focal_class": {"identifier": "TrafficOptionsPanel", "superclass": "extends OptionsPanel", "interfaces": "implements OptionItem.OnChangedListener", "fields": [{"original_string": "private Map<Route.TrafficPenaltyMode, String> mResourceKey;", "modifier": "private", "type": "Map<Route.TrafficPenaltyMode, String>", "declarator": "mResourceKey", "var_name": "mResourceKey"}, {"original_string": "private OptionItem mSubOptionItem;", "modifier": "private", "type": "OptionItem", "declarator": "mSubOptionItem", "var_name": "mSubOptionItem"}, {"original_string": "private DynamicPenalty mDynamicPenalty;", "modifier": "private", "type": "DynamicPenalty", "declarator": "mDynamicPenalty", "var_name": "mDynamicPenalty"}], "methods": [{"identifier": "TrafficOptionsPanel", "parameters": "(final Context context)", "modifiers": "public", "return": "", "signature": " TrafficOptionsPanel(final Context context)", "full_signature": "public  TrafficOptionsPanel(final Context context)", "class_method_signature": "TrafficOptionsPanel.TrafficOptionsPanel(final Context context)", "testcase": false, "constructor": true}, {"identifier": "TrafficOptionsPanel", "parameters": "(final Context context, final AttributeSet attrs)", "modifiers": "public", "return": "", "signature": " TrafficOptionsPanel(final Context context, final AttributeSet attrs)", "full_signature": "public  TrafficOptionsPanel(final Context context, final AttributeSet attrs)", "class_method_signature": "TrafficOptionsPanel.TrafficOptionsPanel(final Context context, final AttributeSet attrs)", "testcase": false, "constructor": true}, {"identifier": "TrafficOptionsPanel", "parameters": "(final Context context, final AttributeSet attrs, final int defStyleAttr)", "modifiers": "public", "return": "", "signature": " TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr)", "full_signature": "public  TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr)", "class_method_signature": "TrafficOptionsPanel.TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr)", "testcase": false, "constructor": true}, {"identifier": "TrafficOptionsPanel", "parameters": "(final Context context, final AttributeSet attrs, final int defStyleAttr, final int defStyleRes)", "modifiers": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public", "return": "", "signature": " TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr, final int defStyleRes)", "full_signature": "@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public  TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr, final int defStyleRes)", "class_method_signature": "TrafficOptionsPanel.TrafficOptionsPanel(final Context context, final AttributeSet attrs, final int defStyleAttr, final int defStyleRes)", "testcase": false, "constructor": true}, {"identifier": "populateResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateResources()", "full_signature": "private void populateResources()", "class_method_signature": "TrafficOptionsPanel.populateResources()", "testcase": false, "constructor": false}, {"identifier": "createPanel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createPanel()", "full_signature": "private void createPanel()", "class_method_signature": "TrafficOptionsPanel.createPanel()", "testcase": false, "constructor": false}, {"identifier": "getDynamicPenalty", "parameters": "()", "modifiers": "public", "return": "DynamicPenalty", "signature": "DynamicPenalty getDynamicPenalty()", "full_signature": "public DynamicPenalty getDynamicPenalty()", "class_method_signature": "TrafficOptionsPanel.getDynamicPenalty()", "testcase": false, "constructor": false}, {"identifier": "setDynamicPenalty", "parameters": "(final DynamicPenalty penalty)", "modifiers": "public", "return": "void", "signature": "void setDynamicPenalty(final DynamicPenalty penalty)", "full_signature": "public void setDynamicPenalty(final DynamicPenalty penalty)", "class_method_signature": "TrafficOptionsPanel.setDynamicPenalty(final DynamicPenalty penalty)", "testcase": false, "constructor": false}, {"identifier": "populateDynamicPenalty", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void populateDynamicPenalty()", "full_signature": "public void populateDynamicPenalty()", "class_method_signature": "TrafficOptionsPanel.populateDynamicPenalty()", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(final Route.TrafficPenaltyMode mode)", "modifiers": "private", "return": "void", "signature": "void select(final Route.TrafficPenaltyMode mode)", "full_signature": "private void select(final Route.TrafficPenaltyMode mode)", "class_method_signature": "TrafficOptionsPanel.select(final Route.TrafficPenaltyMode mode)", "testcase": false, "constructor": false}, {"identifier": "onChanged", "parameters": "(OptionItem item)", "modifiers": "@Override public", "return": "void", "signature": "void onChanged(OptionItem item)", "full_signature": "@Override public void onChanged(OptionItem item)", "class_method_signature": "TrafficOptionsPanel.onChanged(OptionItem item)", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/routing/TrafficOptionsPanel.java"}, "focal_method": {"identifier": "setDynamicPenalty", "parameters": "(final DynamicPenalty penalty)", "modifiers": "public", "return": "void", "body": "public void setDynamicPenalty(final DynamicPenalty penalty) {\n        mDynamicPenalty = penalty;\n        select(mDynamicPenalty.getTrafficPenaltyMode());\n    }", "signature": "void setDynamicPenalty(final DynamicPenalty penalty)", "full_signature": "public void setDynamicPenalty(final DynamicPenalty penalty)", "class_method_signature": "TrafficOptionsPanel.setDynamicPenalty(final DynamicPenalty penalty)", "testcase": false, "constructor": false, "invocations": ["select", "getTrafficPenaltyMode"]}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}