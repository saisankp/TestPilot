{"test_class": {"identifier": "NativeAdViewHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Activity context;", "modifier": "private", "type": "Activity", "declarator": "context", "var_name": "context"}, {"original_string": "private RelativeLayout relativeLayout;", "modifier": "private", "type": "RelativeLayout", "declarator": "relativeLayout", "var_name": "relativeLayout"}, {"original_string": "private ViewGroup viewGroup;", "modifier": "private", "type": "ViewGroup", "declarator": "viewGroup", "var_name": "viewGroup"}, {"original_string": "private BaseForwardingNativeAd mNativeAd;", "modifier": "private", "type": "BaseForwardingNativeAd", "declarator": "mNativeAd", "var_name": "mNativeAd"}, {"original_string": "private ViewBinder viewBinder;", "modifier": "private", "type": "ViewBinder", "declarator": "viewBinder", "var_name": "viewBinder"}, {"original_string": "private TextView titleView;", "modifier": "private", "type": "TextView", "declarator": "titleView", "var_name": "titleView"}, {"original_string": "private TextView textView;", "modifier": "private", "type": "TextView", "declarator": "textView", "var_name": "textView"}, {"original_string": "private TextView callToActionView;", "modifier": "private", "type": "TextView", "declarator": "callToActionView", "var_name": "callToActionView"}, {"original_string": "@Mock private NativeResponse mockNativeResponse1;", "modifier": "@Mock private", "type": "NativeResponse", "declarator": "mockNativeResponse1", "var_name": "mockNativeResponse1"}, {"original_string": "@Mock private NativeResponse mockNativeResponse2;", "modifier": "@Mock private", "type": "NativeResponse", "declarator": "mockNativeResponse2", "var_name": "mockNativeResponse2"}, {"original_string": "@Mock private ImpressionTracker mockImpressionTracker;", "modifier": "@Mock private", "type": "ImpressionTracker", "declarator": "mockImpressionTracker", "var_name": "mockImpressionTracker"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java"}, "test_case": {"identifier": "getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {\n        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);\n        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(false);\n\n        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);\n\n        verify(mockImpressionTracker).addView(relativeLayout, mockNativeResponse1);\n        verify(mockNativeResponse1).prepare(relativeLayout);\n    }", "signature": "void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse()", "full_signature": "@Test public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse()", "class_method_signature": "NativeAdViewHelperTest.getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "isOverridingImpressionTracker", "getAdView", "addView", "verify", "prepare", "verify"]}, "focal_class": {"identifier": "NativeAdViewHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final WeakHashMap<Context, ImpressionTracker> sImpressionTrackerMap =\n            new WeakHashMap<Context, ImpressionTracker>();", "modifier": "@VisibleForTesting\n    static final", "type": "WeakHashMap<Context, ImpressionTracker>", "declarator": "sImpressionTrackerMap =\n            new WeakHashMap<Context, ImpressionTracker>()", "var_name": "sImpressionTrackerMap"}, {"original_string": "static private final WeakHashMap<View, NativeResponse> sNativeResponseMap =\n            new WeakHashMap<View, NativeResponse>();", "modifier": "static private final", "type": "WeakHashMap<View, NativeResponse>", "declarator": "sNativeResponseMap =\n            new WeakHashMap<View, NativeResponse>()", "var_name": "sNativeResponseMap"}], "methods": [{"identifier": "NativeAdViewHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " NativeAdViewHelper()", "full_signature": "private  NativeAdViewHelper()", "class_method_signature": "NativeAdViewHelper.NativeAdViewHelper()", "testcase": false, "constructor": true}, {"identifier": "getAdView", "parameters": "(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "modifiers": "@Deprecated @NonNull static", "return": "View", "signature": "View getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "full_signature": "@Deprecated @NonNull static View getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "class_method_signature": "NativeAdViewHelper.getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "testcase": false, "constructor": false}, {"identifier": "clearNativeResponse", "parameters": "(@NonNull final Context context,\n            @NonNull final View view)", "modifiers": "private static", "return": "void", "signature": "void clearNativeResponse(@NonNull final Context context,\n            @NonNull final View view)", "full_signature": "private static void clearNativeResponse(@NonNull final Context context,\n            @NonNull final View view)", "class_method_signature": "NativeAdViewHelper.clearNativeResponse(@NonNull final Context context,\n            @NonNull final View view)", "testcase": false, "constructor": false}, {"identifier": "prepareNativeResponse", "parameters": "(@NonNull final Context context,\n            @NonNull final View view,\n            @NonNull final NativeResponse nativeResponse)", "modifiers": "private static", "return": "void", "signature": "void prepareNativeResponse(@NonNull final Context context,\n            @NonNull final View view,\n            @NonNull final NativeResponse nativeResponse)", "full_signature": "private static void prepareNativeResponse(@NonNull final Context context,\n            @NonNull final View view,\n            @NonNull final NativeResponse nativeResponse)", "class_method_signature": "NativeAdViewHelper.prepareNativeResponse(@NonNull final Context context,\n            @NonNull final View view,\n            @NonNull final NativeResponse nativeResponse)", "testcase": false, "constructor": false}, {"identifier": "getImpressionTracker", "parameters": "(@NonNull final Context context)", "modifiers": "private static", "return": "ImpressionTracker", "signature": "ImpressionTracker getImpressionTracker(@NonNull final Context context)", "full_signature": "private static ImpressionTracker getImpressionTracker(@NonNull final Context context)", "class_method_signature": "NativeAdViewHelper.getImpressionTracker(@NonNull final Context context)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java"}, "focal_method": {"identifier": "getAdView", "parameters": "(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "modifiers": "@Deprecated @NonNull static", "return": "View", "body": "@Deprecated\n    @NonNull\n    static View getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder) {\n\n        final MoPubNativeAdRenderer moPubNativeAdRenderer = new MoPubNativeAdRenderer(viewBinder);\n        if (convertView == null) {\n            convertView = moPubNativeAdRenderer.createAdView(context, parent);\n        }\n\n        clearNativeResponse(context, convertView);\n\n        if (nativeResponse.isDestroyed()) {\n            MoPubLog.d(\"NativeResponse is destroyed, returning hidden view.\");\n            convertView.setVisibility(GONE);\n        } else {\n            prepareNativeResponse(context, convertView, nativeResponse);\n            moPubNativeAdRenderer.renderAdView(convertView, nativeResponse);\n        }\n\n        return convertView;\n    }", "signature": "View getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "full_signature": "@Deprecated @NonNull static View getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "class_method_signature": "NativeAdViewHelper.getAdView(@Nullable View convertView,\n            @Nullable final ViewGroup parent,\n            @NonNull final Context context,\n            @NonNull final NativeResponse nativeResponse,\n            @NonNull final ViewBinder viewBinder)", "testcase": false, "constructor": false, "invocations": ["createAdView", "clearNativeResponse", "isDestroyed", "d", "setVisibility", "prepareNativeResponse", "renderAdView"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}