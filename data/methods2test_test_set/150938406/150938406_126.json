{"test_class": {"identifier": "LdaUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/lda/LdaUtilTest.java"}, "test_case": {"identifier": "dirichletExpectationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void dirichletExpectationTest() {\n\t\tdouble[] sparkCmp = new double[] {\n\t\t\t0.8936825549031158,\n\t\t\t0.9650683744577933,\n\t\t\t1.1760851442955271,\n\t\t\t0.889011463028263,\n\t\t\t1.0355502890838704,\n\t\t\t1.1720254142865503,\n\t\t\t0.8496512959061578,\n\t\t\t1.1564109073902848,\n\t\t\t0.8528198328651976,\n\t\t\t1.072261907065107,\n\t\t\t1.0112487630821958,\n\t\t\t1.0288027427394206,\n\t\t\t1.1256918577237478,\n\t\t\t1.0641131417250107,\n\t\t\t0.9830788207753957,\n\t\t\t0.9519235842178695,\n\t\t\t1.0531103642783968,\n\t\t\t1.0846663792488604,\n\t\t\t0.9317316401779444,\n\t\t\t0.9816247167440154,\n\t\t\t0.953061129524052,\n\t\t\t0.8836097897537777,\n\t\t\t0.8539728772760822,\n\t\t\t1.109432137460693,\n\t\t\t0.9801693423689286,\n\t\t\t0.9385725168762017,\n\t\t\t1.009886079821316,\n\t\t\t0.9741390218380398,\n\t\t\t0.8734624459614093,\n\t\t\t0.8548583255850564,\n\t\t\t0.8934120594879987,\n\t\t\t1.0200469492393616,\n\t\t\t0.9461610896051537,\n\t\t\t1.1912819895664948,\n\t\t\t0.9650275833536232,\n\t\t\t0.9312815665885328,\n\t\t\t0.984681817963758,\n\t\t\t1.1412711858668625,\n\t\t\t1.1159082714127344,\n\t\t\t1.0219124026668207,\n\t\t\t1.1052645047308647,\n\t\t\t1.1380919062139254,\n\t\t\t0.9684793634316371,\n\t\t\t1.023922805813918,\n\t\t\t1.0777999541431174,\n\t\t\t0.8730213177341947,\n\t\t\t1.0353598060502658,\n\t\t\t1.047104264664753,\n\t\t\t1.1284793487722498,\n\t\t\t0.8898021261569816,\n\t\t\t1.1634869627283706,\n\t\t\t0.817874601150865,\n\t\t\t1.0424867867765728,\n\t\t\t1.167773175905418,\n\t\t\t0.915224402643435};\n\t\tDenseMatrix lambda = new DenseMatrix(11, 5, sparkCmp, false);\n\n\t\tDenseMatrix expElogbeta = LdaUtil.dirichletExpectation(lambda);\n\n\t\tAssert.assertTrue(Math.abs(expElogbeta.get(0, 0) + 2.2832832787919575) < 10e-4);\n\t}", "signature": "void dirichletExpectationTest()", "full_signature": "@Test public void dirichletExpectationTest()", "class_method_signature": "LdaUtilTest.dirichletExpectationTest()", "testcase": true, "constructor": false, "invocations": ["dirichletExpectation", "assertTrue", "abs", "get"]}, "focal_class": {"identifier": "LdaUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "digamma", "parameters": "(double x)", "modifiers": "public static", "return": "double", "signature": "double digamma(double x)", "full_signature": "public static double digamma(double x)", "class_method_signature": "LdaUtil.digamma(double x)", "testcase": false, "constructor": false}, {"identifier": "digamma", "parameters": "(DenseMatrix x)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix digamma(DenseMatrix x)", "full_signature": "private static DenseMatrix digamma(DenseMatrix x)", "class_method_signature": "LdaUtil.digamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "trigamma", "parameters": "(double x)", "modifiers": "static", "return": "double", "signature": "double trigamma(double x)", "full_signature": "static double trigamma(double x)", "class_method_signature": "LdaUtil.trigamma(double x)", "testcase": false, "constructor": false}, {"identifier": "trigamma", "parameters": "(DenseMatrix x)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix trigamma(DenseMatrix x)", "full_signature": "static DenseMatrix trigamma(DenseMatrix x)", "class_method_signature": "LdaUtil.trigamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "lgamma", "parameters": "(double x)", "modifiers": "static", "return": "double", "signature": "double lgamma(double x)", "full_signature": "static double lgamma(double x)", "class_method_signature": "LdaUtil.lgamma(double x)", "testcase": false, "constructor": false}, {"identifier": "lgamma", "parameters": "(DenseMatrix x)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix lgamma(DenseMatrix x)", "full_signature": "static DenseMatrix lgamma(DenseMatrix x)", "class_method_signature": "LdaUtil.lgamma(DenseMatrix x)", "testcase": false, "constructor": false}, {"identifier": "dirichletExpectation", "parameters": "(DenseMatrix alpha)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix dirichletExpectation(DenseMatrix alpha)", "full_signature": "static DenseMatrix dirichletExpectation(DenseMatrix alpha)", "class_method_signature": "LdaUtil.dirichletExpectation(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "dirichletExpectationVec", "parameters": "(DenseMatrix alpha)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix dirichletExpectationVec(DenseMatrix alpha)", "full_signature": "static DenseMatrix dirichletExpectationVec(DenseMatrix alpha)", "class_method_signature": "LdaUtil.dirichletExpectationVec(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(DenseMatrix dm)", "modifiers": "public static", "return": "void", "signature": "void exp(DenseMatrix dm)", "full_signature": "public static void exp(DenseMatrix dm)", "class_method_signature": "LdaUtil.exp(DenseMatrix dm)", "testcase": false, "constructor": false}, {"identifier": "expDirichletExpectation", "parameters": "(DenseMatrix alpha)", "modifiers": "public static", "return": "DenseMatrix", "signature": "DenseMatrix expDirichletExpectation(DenseMatrix alpha)", "full_signature": "public static DenseMatrix expDirichletExpectation(DenseMatrix alpha)", "class_method_signature": "LdaUtil.expDirichletExpectation(DenseMatrix alpha)", "testcase": false, "constructor": false}, {"identifier": "getTopicDistributionMethod", "parameters": "(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "modifiers": "public static", "return": "double[]", "signature": "double[] getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "full_signature": "public static double[] getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "class_method_signature": "LdaUtil.getTopicDistributionMethod(SparseVector sv,\n                                                         DenseMatrix expELogBeta,\n                                                         DenseMatrix alphaMatrix,\n                                                         int topicNum)", "testcase": false, "constructor": false}, {"identifier": "geneGamma", "parameters": "(int numTopic)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix geneGamma(int numTopic)", "full_signature": "static DenseMatrix geneGamma(int numTopic)", "class_method_signature": "LdaUtil.geneGamma(int numTopic)", "testcase": false, "constructor": false}, {"identifier": "getTopicDistributionMethod", "parameters": "(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "modifiers": "static", "return": "Tuple2<DenseMatrix, DenseMatrix>", "signature": "Tuple2<DenseMatrix, DenseMatrix> getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "full_signature": "static Tuple2<DenseMatrix, DenseMatrix> getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "class_method_signature": "LdaUtil.getTopicDistributionMethod(SparseVector sv,\n                                                                       DenseMatrix expELogBeta,\n                                                                       DenseMatrix alphaMatrix,\n                                                                       DenseMatrix gammad,\n                                                                       int topicNum)", "testcase": false, "constructor": false}, {"identifier": "vectorToMatrix", "parameters": "(double[] vec)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix vectorToMatrix(double[] vec)", "full_signature": "private static DenseMatrix vectorToMatrix(double[] vec)", "class_method_signature": "LdaUtil.vectorToMatrix(double[] vec)", "testcase": false, "constructor": false}, {"identifier": "diffDenseMatrix", "parameters": "(DenseMatrix A, DenseMatrix B, int topicNum)", "modifiers": "private static", "return": "double", "signature": "double diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "full_signature": "private static double diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "class_method_signature": "LdaUtil.diffDenseMatrix(DenseMatrix A, DenseMatrix B, int topicNum)", "testcase": false, "constructor": false}, {"identifier": "elementWiseProduct", "parameters": "(DenseMatrix matA, DenseMatrix matB)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "full_signature": "static DenseMatrix elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "class_method_signature": "LdaUtil.elementWiseProduct(DenseMatrix matA, DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "elementWiseDivide", "parameters": "(DenseMatrix matA, DenseMatrix matB)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "full_signature": "static DenseMatrix elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "class_method_signature": "LdaUtil.elementWiseDivide(DenseMatrix matA, DenseMatrix matB)", "testcase": false, "constructor": false}, {"identifier": "sumByCol", "parameters": "(DenseMatrix mat)", "modifiers": "private static", "return": "DenseMatrix", "signature": "DenseMatrix sumByCol(DenseMatrix mat)", "full_signature": "private static DenseMatrix sumByCol(DenseMatrix mat)", "class_method_signature": "LdaUtil.sumByCol(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "sumByRow", "parameters": "(DenseMatrix mat)", "modifiers": "static", "return": "DenseMatrix", "signature": "DenseMatrix sumByRow(DenseMatrix mat)", "full_signature": "static DenseMatrix sumByRow(DenseMatrix mat)", "class_method_signature": "LdaUtil.sumByRow(DenseMatrix mat)", "testcase": false, "constructor": false}, {"identifier": "setWordIdWeightTrain", "parameters": "(List<String> list)", "modifiers": "public static", "return": "HashMap<Integer, String>", "signature": "HashMap<Integer, String> setWordIdWeightTrain(List<String> list)", "full_signature": "public static HashMap<Integer, String> setWordIdWeightTrain(List<String> list)", "class_method_signature": "LdaUtil.setWordIdWeightTrain(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "setWordIdWeightPredict", "parameters": "(List<String> list)", "modifiers": "public static", "return": "HashMap<String, Tuple2<Integer, Double>>", "signature": "HashMap<String, Tuple2<Integer, Double>> setWordIdWeightPredict(List<String> list)", "full_signature": "public static HashMap<String, Tuple2<Integer, Double>> setWordIdWeightPredict(List<String> list)", "class_method_signature": "LdaUtil.setWordIdWeightPredict(List<String> list)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/lda/LdaUtil.java"}, "focal_method": {"identifier": "dirichletExpectation", "parameters": "(DenseMatrix alpha)", "modifiers": "static", "return": "DenseMatrix", "body": "static DenseMatrix dirichletExpectation(DenseMatrix alpha) {\n        DenseMatrix rowSum = sumByCol(alpha);\n        DenseMatrix digAlpha = digamma(alpha);\n        DenseMatrix digRowSum = digamma(rowSum);\n        for (int j = 0; j < alpha.numCols(); j++) {\n            for (int i = 0; i < alpha.numRows(); i++) {\n                digAlpha.set(i, j, digAlpha.get(i, j) - digRowSum.get(0, i));\n            }\n        }\n        return digAlpha;\n    }", "signature": "DenseMatrix dirichletExpectation(DenseMatrix alpha)", "full_signature": "static DenseMatrix dirichletExpectation(DenseMatrix alpha)", "class_method_signature": "LdaUtil.dirichletExpectation(DenseMatrix alpha)", "testcase": false, "constructor": false, "invocations": ["sumByCol", "digamma", "digamma", "numCols", "numRows", "set", "get", "get"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}