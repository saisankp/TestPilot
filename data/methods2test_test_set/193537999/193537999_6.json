{"test_class": {"identifier": "TransposerTest", "superclass": "", "interfaces": "", "fields": [], "file": "vortex-api/src/test/java/mil/army/usace/hec/vortex/geo/TransposerTest.java"}, "test_case": {"identifier": "testTranspose", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testTranspose(){\n        String inFile = new File(getClass().getResource(\n                \"/normalizer/qpe.dss\").getFile()).toString();\n        String variableName = \"///PRECIPITATION/02JAN2017:1200/02JAN2017:1300//\";\n\n        DataReader reader = DataReader.builder()\n                .path(inFile)\n                .variable(variableName)\n                .build();\n\n        List<VortexGrid> grids = reader.getDtos().stream().map(grid -> (VortexGrid)grid).collect(Collectors.toList());\n        VortexGrid grid = grids.get(0);\n\n        Transposer transposer = Transposer.builder()\n                .grid(grid)\n                .angle(30)\n                .build();\n\n        transposer.transpose();\n    }", "signature": "void testTranspose()", "full_signature": "@Test void testTranspose()", "class_method_signature": "TransposerTest.testTranspose()", "testcase": true, "constructor": false, "invocations": ["toString", "getFile", "getResource", "getClass", "build", "variable", "path", "builder", "collect", "map", "stream", "getDtos", "toList", "get", "build", "angle", "grid", "builder", "transpose"]}, "focal_class": {"identifier": "Transposer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VortexGrid grid;", "modifier": "private", "type": "VortexGrid", "declarator": "grid", "var_name": "grid"}, {"original_string": "private double angle;", "modifier": "private", "type": "double", "declarator": "angle", "var_name": "angle"}, {"original_string": "private Double stormCenterX;", "modifier": "private", "type": "Double", "declarator": "stormCenterX", "var_name": "stormCenterX"}, {"original_string": "private Double stormCenterY;", "modifier": "private", "type": "Double", "declarator": "stormCenterY", "var_name": "stormCenterY"}, {"original_string": "private boolean debug;", "modifier": "private", "type": "boolean", "declarator": "debug", "var_name": "debug"}, {"original_string": "private Path tempDir;", "modifier": "private", "type": "Path", "declarator": "tempDir", "var_name": "tempDir"}], "methods": [{"identifier": "Transposer", "parameters": "(TransposerBuilder builder)", "modifiers": "private", "return": "", "signature": " Transposer(TransposerBuilder builder)", "full_signature": "private  Transposer(TransposerBuilder builder)", "class_method_signature": "Transposer.Transposer(TransposerBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "TransposerBuilder", "signature": "TransposerBuilder builder()", "full_signature": "public static TransposerBuilder builder()", "class_method_signature": "Transposer.builder()", "testcase": false, "constructor": false}, {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "VortexGrid", "signature": "VortexGrid transpose()", "full_signature": "public VortexGrid transpose()", "class_method_signature": "Transposer.transpose()", "testcase": false, "constructor": false}], "file": "vortex-api/src/main/java/mil/army/usace/hec/vortex/geo/Transposer.java"}, "focal_method": {"identifier": "transpose", "parameters": "()", "modifiers": "public", "return": "VortexGrid", "body": "public VortexGrid transpose(){\n        if (angle == 0 && (stormCenterX == null || stormCenterX.isNaN())\n                && (stormCenterY == null || stormCenterY.isNaN())){\n            return grid;\n        }\n\n        VortexGrid sanatized;\n        String desc = grid.description().toLowerCase();\n        if (desc.contains(\"precipitation\")\n                || desc.contains(\"precip\")\n                || desc.contains(\"precip\") && desc.contains(\"rate\")\n                || desc.contains(\"qpe01h\")\n                || ((desc.contains(\"short\") && desc.contains(\"wave\") || desc.contains(\"solar\"))\n                && desc.contains(\"radiation\"))\n                || ((desc.contains(\"snow\")) && (desc.contains(\"water\")) && (desc.contains(\"equivalent\")))\n                || desc.contains(\"albedo\")) {\n\n            sanatized = Sanitizer.builder()\n                    .inputGrid(grid)\n                    .minimumThreshold(0)\n                    .minimumReplacementValue(Float.NaN)\n                    .build()\n                    .sanitize();\n        } else {\n            sanatized = grid;\n        }\n\n        Dataset datasetIn = RasterUtils.getDatasetFromVortexGrid(sanatized);\n\n        if (debug) {\n            ArrayList<String> options = new ArrayList<>();\n            options.add(\"-of\");\n            options.add(\"Gtiff\");\n            TranslateOptions translateOptions1 = new TranslateOptions(new Vector<>(options));\n            Path pathToPreTransposed = Paths.get(tempDir.toString(), \"pre-transpose.tif\");\n            Dataset out = gdal.Translate(pathToPreTransposed.toString(), datasetIn, translateOptions1);\n            out.FlushCache();\n            out.delete();\n        }\n\n        double[] geoTransform = datasetIn.GetGeoTransform();\n        double dx = geoTransform[1];\n        double dy = geoTransform[5];\n        double originX = geoTransform[0];\n        double originY = geoTransform[3];\n        int nx = datasetIn.GetRasterXSize();\n        int ny = datasetIn.GetRasterYSize();\n        double terminusX = originX + dx * nx;\n        double terminusY = originY + dy * ny;\n        double width = Math.abs(terminusX - originX);\n        double height = Math.abs(terminusY - originY);\n        double centerX = originX + Math.signum(dx) * 0.5 * width;\n        double centerY = originY + Math.signum(dy) * 0.5 * height;\n        double x1 = originX - centerX;\n        double y1 = originY - centerY;\n\n        Band band = datasetIn.GetRasterBand(1);\n        float[] data = new float[nx * ny];\n        band.ReadRaster(0, 0, nx, ny, GDT_Float32, data);\n        band.delete();\n\n        double angleRad = Math.toRadians(angle);\n\n        double adjustedCenterX;\n        if (stormCenterX != null && !Double.isNaN(stormCenterX)){\n            adjustedCenterX = stormCenterX;\n        } else {\n            adjustedCenterX = centerX;\n        }\n\n        double adjustedCenterY;\n        if (stormCenterY != null && !Double.isNaN(stormCenterY)){\n            adjustedCenterY = stormCenterY;\n        } else {\n            adjustedCenterY = centerY;\n        }\n\n        double[] transposedGeoTransform = new double[]{\n                adjustedCenterX + Math.signum(dx) * (x1 * Math.cos(angleRad) + y1 * Math.sin(angleRad)),\n                Math.cos(angleRad) * dx,\n                -Math.sin(angleRad) * dx,\n                adjustedCenterY + Math.signum(dy) * (x1 * Math.sin(angleRad) - y1 * Math.cos(angleRad)),\n                Math.sin(angleRad) * dy,\n                Math.cos(angleRad) * dy\n        };\n\n        Dataset transposed = gdal.GetDriverByName(\"MEM\").Create(\"\", nx, ny, 1, GDT_Float32);\n        transposed.SetGeoTransform(transposedGeoTransform);\n        transposed.SetProjection(datasetIn.GetProjection());\n        Band transposedBand = transposed.GetRasterBand(1);\n        transposedBand.WriteRaster(0, 0, nx, ny, data);\n        transposedBand.FlushCache();\n        transposed.FlushCache();\n\n        datasetIn.delete();\n\n        if (debug) {\n            ArrayList<String> options = new ArrayList<>();\n            options.add(\"-of\");\n            options.add(\"Gtiff\");\n            TranslateOptions translateOptions = new TranslateOptions(new Vector<>(options));\n            Path pathToTransposed = Paths.get(tempDir.toString(), \"transposed.tif\");\n            Dataset out = gdal.Translate(pathToTransposed.toString(), transposed, translateOptions);\n            out.FlushCache();\n            translateOptions.delete();\n            out.delete();\n        }\n\n        ArrayList<String> options = new ArrayList<>();\n        options.add(\"-of\");\n        options.add(\"MEM\");\n        options.add(\"-r\");\n        options.add(\"bilinear\");\n        WarpOptions warpOptions = new WarpOptions(new Vector<>(options));\n        Dataset[] datasets = new Dataset[]{transposed};\n        Dataset transposedWarped = gdal.Warp(\n                \"\",\n                datasets,\n                warpOptions\n        );\n        transposedWarped.FlushCache();\n        warpOptions.delete();\n        transposed.delete();\n\n        double[] transposedWarpedGeoTransform = transposedWarped.GetGeoTransform();\n        double transposedDx = transposedWarpedGeoTransform[1];\n        double transposedDy = transposedWarpedGeoTransform[5];\n        double transposedOriginX = transposedWarpedGeoTransform[0];\n        double transposedOriginY = transposedWarpedGeoTransform[3];\n        int transposedNx = transposedWarped.GetRasterXSize();\n        int transposedNy = transposedWarped.GetRasterYSize();\n        double transposedTerminusX = transposedOriginX + transposedDx * transposedNx;\n        double transposedTerminusY = transposedOriginY + transposedDy * transposedNy;\n\n        //Specify resampling parameters\n        double cellSize = grid.dx();\n        double maxX = Math.ceil(Math.max(transposedOriginX, transposedTerminusX) / cellSize) * cellSize;\n        double minX = Math.floor(Math.min(transposedOriginX, transposedTerminusX) / cellSize) * cellSize;\n        double maxY = Math.ceil(Math.max(transposedOriginY, transposedTerminusY) / cellSize) * cellSize;\n        double minY = Math.floor(Math.min(transposedOriginY, transposedTerminusY) / cellSize) * cellSize;\n\n        options.clear();\n        options.add(\"-of\");\n        options.add(\"MEM\");\n        options.add(\"-te\");\n        options.add(Double.toString(minX));\n        options.add(Double.toString(minY));\n        options.add(Double.toString(maxX));\n        options.add(Double.toString(maxY));\n        options.add(\"-tr\");\n        options.add(Double.toString(cellSize));\n        options.add(Double.toString(cellSize));\n        options.add(\"-r\");\n        options.add(\"bilinear\");\n        Dataset transposedResampled = gdal.Warp(\n                \"\",\n                new Dataset[]{transposedWarped},\n                new WarpOptions(new Vector<>(options))\n        );\n        transposedResampled.FlushCache();\n        transposedWarped.delete();\n\n        double[] resampledGeoTransform = transposedResampled.GetGeoTransform();\n        double resampledDx = resampledGeoTransform[1];\n        double resampledDy = resampledGeoTransform[5];\n        double resampledOriginX = resampledGeoTransform[0];\n        double resampledOriginY = resampledGeoTransform[3];\n        int resampledNx = transposedResampled.GetRasterXSize();\n        int resampledNy = transposedResampled.GetRasterYSize();\n\n        Band resampledBand = transposedResampled.GetRasterBand(1);\n        float[] resampledData = new float[resampledNx * resampledNy];\n        resampledBand.ReadRaster(0, 0, resampledNx, resampledNy, resampledData);\n        transposedResampled.delete();\n        resampledBand.delete();\n\n        VortexGrid resampledGrid = VortexGrid.builder()\n                .dx(resampledDx).dy(resampledDy)\n                .nx(resampledNx).ny(resampledNy)\n                .originX(resampledOriginX).originY(resampledOriginY)\n                .wkt(grid.wkt()).data(resampledData).units(grid.units())\n                .fileName(grid.fileName()).shortName(grid.shortName())\n                .fullName(grid.shortName()).description(grid.description())\n                .startTime(grid.startTime()).endTime(grid.endTime()).interval(grid.interval())\n                .build();\n\n        if (debug) {\n            Dataset transposedResampledGrid = RasterUtils.getDatasetFromVortexGrid(resampledGrid);\n            options.clear();\n            options.add(\"-of\");\n            options.add(\"Gtiff\");\n            TranslateOptions translateOptions = new TranslateOptions(new Vector<>(options));\n            Path pathToTransposedResampled = Paths.get(tempDir.toString(), \"transposed-resampled.tif\");\n            Dataset out = gdal.Translate(pathToTransposedResampled.toString(), transposedResampledGrid, translateOptions);\n            out.FlushCache();\n            out.delete();\n        }\n\n        return resampledGrid;\n    }", "signature": "VortexGrid transpose()", "full_signature": "public VortexGrid transpose()", "class_method_signature": "Transposer.transpose()", "testcase": false, "constructor": false, "invocations": ["isNaN", "isNaN", "toLowerCase", "description", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "contains", "sanitize", "build", "minimumReplacementValue", "minimumThreshold", "inputGrid", "builder", "getDatasetFromVortexGrid", "add", "add", "get", "toString", "Translate", "toString", "FlushCache", "delete", "GetGeoTransform", "GetRasterXSize", "GetRasterYSize", "abs", "abs", "signum", "signum", "GetRasterBand", "ReadRaster", "delete", "toRadians", "isNaN", "isNaN", "signum", "cos", "sin", "cos", "sin", "signum", "sin", "cos", "sin", "cos", "Create", "GetDriverByName", "SetGeoTransform", "SetProjection", "GetProjection", "GetRasterBand", "WriteRaster", "FlushCache", "FlushCache", "delete", "add", "add", "get", "toString", "Translate", "toString", "FlushCache", "delete", "delete", "add", "add", "add", "add", "Warp", "FlushCache", "delete", "delete", "GetGeoTransform", "GetRasterXSize", "GetRasterYSize", "dx", "ceil", "max", "floor", "min", "ceil", "max", "floor", "min", "clear", "add", "add", "add", "add", "toString", "add", "toString", "add", "toString", "add", "toString", "add", "add", "toString", "add", "toString", "add", "add", "Warp", "FlushCache", "delete", "GetGeoTransform", "GetRasterXSize", "GetRasterYSize", "GetRasterBand", "ReadRaster", "delete", "delete", "build", "interval", "endTime", "startTime", "description", "fullName", "shortName", "fileName", "units", "data", "wkt", "originY", "originX", "ny", "nx", "dy", "dx", "builder", "wkt", "units", "fileName", "shortName", "shortName", "description", "startTime", "endTime", "interval", "getDatasetFromVortexGrid", "clear", "add", "add", "get", "toString", "Translate", "toString", "FlushCache", "delete"]}, "repository": {"repo_id": 193537999, "url": "https://github.com/HydrologicEngineeringCenter/Vortex", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 448543, "license": "licensed"}}