{"test_class": {"identifier": "RootTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "PlatformMap map = mock(PlatformMap.class);", "modifier": "", "type": "PlatformMap", "declarator": "map = mock(PlatformMap.class)", "var_name": "map"}, {"original_string": "Root root = new Root(\"test\", map);", "modifier": "", "type": "Root", "declarator": "root = new Root(\"test\", map)", "var_name": "root"}, {"original_string": "Literal<CommandSender> literal = Literal.of(\"a\").alias(\"a1\").build();", "modifier": "", "type": "Literal<CommandSender>", "declarator": "literal = Literal.of(\"a\").alias(\"a1\").build()", "var_name": "literal"}], "file": "commons/src/test/java/com/karuslabs/commons/command/tree/nodes/RootTest.java"}, "test_case": {"identifier": "addChild_bukkit_contains_name", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void addChild_bukkit_contains_name() {\n        var command = new DispatcherCommand(\"a\", null, null, null, List.of(\"a1\"));\n        command.setLabel(\"label\");\n        \n        when(map.register(literal)).thenReturn(command);\n        \n        root.addChild(literal);\n        \n        assertNull(root.getChild(\"a\"));\n        assertNotNull(root.getChild(\"test:a\"));\n        assertNotNull(root.getChild(\"a1\"));\n        assertNotNull(root.getChild(\"test:a1\"));\n    }", "signature": "void addChild_bukkit_contains_name()", "full_signature": "@Test void addChild_bukkit_contains_name()", "class_method_signature": "RootTest.addChild_bukkit_contains_name()", "testcase": true, "constructor": false, "invocations": ["of", "setLabel", "thenReturn", "when", "register", "addChild", "assertNull", "getChild", "assertNotNull", "getChild", "assertNotNull", "getChild", "assertNotNull", "getChild"]}, "focal_class": {"identifier": "Root", "superclass": "extends RootCommandNode<CommandSender>", "interfaces": "implements Mutable<CommandSender>", "fields": [{"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private PlatformMap map;", "modifier": "private", "type": "PlatformMap", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "Root", "parameters": "(String prefix, PlatformMap map)", "modifiers": "public", "return": "", "signature": " Root(String prefix, PlatformMap map)", "full_signature": "public  Root(String prefix, PlatformMap map)", "class_method_signature": "Root.Root(String prefix, PlatformMap map)", "testcase": false, "constructor": true}, {"identifier": "addChild", "parameters": "(CommandNode<CommandSender> command)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(CommandNode<CommandSender> command)", "full_signature": "@Override public void addChild(CommandNode<CommandSender> command)", "class_method_signature": "Root.addChild(CommandNode<CommandSender> command)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(String child)", "modifiers": "@Override public", "return": "CommandNode<CommandSender>", "signature": "CommandNode<CommandSender> removeChild(String child)", "full_signature": "@Override public CommandNode<CommandSender> removeChild(String child)", "class_method_signature": "Root.removeChild(String child)", "testcase": false, "constructor": false}, {"identifier": "setCommand", "parameters": "(@Ignored com.mojang.brigadier.Command<CommandSender> command)", "modifiers": "@Override public", "return": "void", "signature": "void setCommand(@Ignored com.mojang.brigadier.Command<CommandSender> command)", "full_signature": "@Override public void setCommand(@Ignored com.mojang.brigadier.Command<CommandSender> command)", "class_method_signature": "Root.setCommand(@Ignored com.mojang.brigadier.Command<CommandSender> command)", "testcase": false, "constructor": false}, {"identifier": "setRedirect", "parameters": "(@Ignored CommandNode<CommandSender> destination)", "modifiers": "@Override public", "return": "void", "signature": "void setRedirect(@Ignored CommandNode<CommandSender> destination)", "full_signature": "@Override public void setRedirect(@Ignored CommandNode<CommandSender> destination)", "class_method_signature": "Root.setRedirect(@Ignored CommandNode<CommandSender> destination)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "()", "modifiers": "public", "return": "PlatformMap", "signature": "PlatformMap map()", "full_signature": "public PlatformMap map()", "class_method_signature": "Root.map()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/tree/nodes/Root.java"}, "focal_method": {"identifier": "addChild", "parameters": "(CommandNode<CommandSender> command)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addChild(CommandNode<CommandSender> command) {\n        if (getChild(command.getName()) != null) {\n            throw new IllegalArgumentException(\"Invalid command: '\" + command.getName() + \"', root already contains a child with the same name\");\n            \n        }  else if (!(command instanceof LiteralCommandNode<?>)) {\n            throw new IllegalArgumentException(\"Invalid command: '\" + command.getName() + \"', commands registered to root must be a literal\");\n        }\n        \n        var literal = (LiteralCommandNode<CommandSender>) command;\n        \n        var wrapper = map.register(literal);\n        if (wrapper == null) {\n            return;\n        }\n        \n        super.addChild(Literal.alias(literal, prefix + \":\" + literal.getName()));\n        if (wrapper.getName().equals(wrapper.getLabel())) {\n            super.addChild(literal);\n        }\n        \n        if (literal instanceof Aliasable<?>) {\n            for (var alias : new ArrayList<>((((Aliasable<CommandSender>) literal).aliases()))) {\n                if (wrapper.getAliases().contains(alias.getName())) {\n                    super.addChild(Literal.alias(literal, prefix + \":\" + alias.getName()));\n                    super.addChild(alias);\n                }\n            }\n        }\n    }", "signature": "void addChild(CommandNode<CommandSender> command)", "full_signature": "@Override public void addChild(CommandNode<CommandSender> command)", "class_method_signature": "Root.addChild(CommandNode<CommandSender> command)", "testcase": false, "constructor": false, "invocations": ["getChild", "getName", "getName", "getName", "register", "addChild", "alias", "getName", "equals", "getName", "getLabel", "addChild", "aliases", "contains", "getAliases", "getName", "addChild", "alias", "getName", "addChild"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}