{"test_class": {"identifier": "SchedulerWhenTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/schedulers/SchedulerWhenTest.java"}, "test_case": {"identifier": "testAsyncMaxConcurrent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsyncMaxConcurrent() {\n        TestScheduler tSched = new TestScheduler();\n        SchedulerWhen sched = maxConcurrentScheduler(tSched);\n        TestSubscriber<Long> tSub = TestSubscriber.create();\n\n        asyncWork(sched).subscribe(tSub);\n\n        tSub.assertValueCount(0);\n\n        tSched.advanceTimeBy(0, SECONDS);\n        tSub.assertValueCount(0);\n\n        tSched.advanceTimeBy(1, SECONDS);\n        tSub.assertValueCount(2);\n\n        tSched.advanceTimeBy(1, SECONDS);\n        tSub.assertValueCount(4);\n\n        tSched.advanceTimeBy(1, SECONDS);\n        tSub.assertValueCount(5);\n        tSub.assertComplete();\n\n        sched.dispose();\n    }", "signature": "void testAsyncMaxConcurrent()", "full_signature": "@Test public void testAsyncMaxConcurrent()", "class_method_signature": "SchedulerWhenTest.testAsyncMaxConcurrent()", "testcase": true, "constructor": false, "invocations": ["maxConcurrentScheduler", "create", "subscribe", "asyncWork", "assertValueCount", "advanceTimeBy", "assertValueCount", "advanceTimeBy", "assertValueCount", "advanceTimeBy", "assertValueCount", "advanceTimeBy", "assertValueCount", "assertComplete", "dispose"]}, "focal_class": {"identifier": "SchedulerWhen", "superclass": "extends Scheduler", "interfaces": "implements Disposable", "fields": [{"original_string": "private final Scheduler actualScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "actualScheduler", "var_name": "actualScheduler"}, {"original_string": "private final FlowableProcessor<Flowable<Completable>> workerProcessor;", "modifier": "private final", "type": "FlowableProcessor<Flowable<Completable>>", "declarator": "workerProcessor", "var_name": "workerProcessor"}, {"original_string": "private Disposable disposable;", "modifier": "private", "type": "Disposable", "declarator": "disposable", "var_name": "disposable"}, {"original_string": "static final Disposable SUBSCRIBED = new SubscribedDisposable();", "modifier": "static final", "type": "Disposable", "declarator": "SUBSCRIBED = new SubscribedDisposable()", "var_name": "SUBSCRIBED"}, {"original_string": "static final Disposable DISPOSED = Disposables.disposed();", "modifier": "static final", "type": "Disposable", "declarator": "DISPOSED = Disposables.disposed()", "var_name": "DISPOSED"}], "methods": [{"identifier": "SchedulerWhen", "parameters": "(Function<Flowable<Flowable<Completable>>, Completable> combine, Scheduler actualScheduler)", "modifiers": "public", "return": "", "signature": " SchedulerWhen(Function<Flowable<Flowable<Completable>>, Completable> combine, Scheduler actualScheduler)", "full_signature": "public  SchedulerWhen(Function<Flowable<Flowable<Completable>>, Completable> combine, Scheduler actualScheduler)", "class_method_signature": "SchedulerWhen.SchedulerWhen(Function<Flowable<Flowable<Completable>>, Completable> combine, Scheduler actualScheduler)", "testcase": false, "constructor": true}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SchedulerWhen.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "SchedulerWhen.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@NonNull @Override public Worker createWorker()", "class_method_signature": "SchedulerWhen.createWorker()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerWhen.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        disposable.dispose();\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "SchedulerWhen.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}