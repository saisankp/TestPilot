{"test_class": {"identifier": "DMNScenarioRunnerHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"NAME\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"NAME\"", "var_name": "NAME"}, {"original_string": "private static final String FEEL_EXPRESSION_NAME = \"\\\"\" + NAME + \"\\\"\";", "modifier": "private static final", "type": "String", "declarator": "FEEL_EXPRESSION_NAME = \"\\\"\" + NAME + \"\\\"\"", "var_name": "FEEL_EXPRESSION_NAME"}, {"original_string": "private static final BigDecimal AMOUNT = BigDecimal.valueOf(10);", "modifier": "private static final", "type": "BigDecimal", "declarator": "AMOUNT = BigDecimal.valueOf(10)", "var_name": "AMOUNT"}, {"original_string": "private static final String DMN_FILE_PATH = \"dmnFilePath\";", "modifier": "private static final", "type": "String", "declarator": "DMN_FILE_PATH = \"dmnFilePath\"", "var_name": "DMN_FILE_PATH"}, {"original_string": "private static final String TEST_DESCRIPTION = \"Test description\";", "modifier": "private static final", "type": "String", "declarator": "TEST_DESCRIPTION = \"Test description\"", "var_name": "TEST_DESCRIPTION"}, {"original_string": "private static final ClassLoader classLoader = RuleScenarioRunnerHelperTest.class.getClassLoader();", "modifier": "private static final", "type": "ClassLoader", "declarator": "classLoader = RuleScenarioRunnerHelperTest.class.getClassLoader()", "var_name": "classLoader"}, {"original_string": "private static final ExpressionEvaluatorFactory expressionEvaluatorFactory = ExpressionEvaluatorFactory.create(classLoader, ScenarioSimulationModel.Type.DMN);", "modifier": "private static final", "type": "ExpressionEvaluatorFactory", "declarator": "expressionEvaluatorFactory = ExpressionEvaluatorFactory.create(classLoader, ScenarioSimulationModel.Type.DMN)", "var_name": "expressionEvaluatorFactory"}, {"original_string": "private static final ExpressionEvaluator expressionEvaluator = new DMNFeelExpressionEvaluator(classLoader);", "modifier": "private static final", "type": "ExpressionEvaluator", "declarator": "expressionEvaluator = new DMNFeelExpressionEvaluator(classLoader)", "var_name": "expressionEvaluator"}, {"original_string": "private final DMNScenarioRunnerHelper runnerHelper = new DMNScenarioRunnerHelper() {\n        @Override\n        protected DMNScenarioExecutableBuilder createBuilderWrapper(KieContainer kieContainer) {\n            return dmnScenarioExecutableBuilderMock;\n        }\n    };", "modifier": "private final", "type": "DMNScenarioRunnerHelper", "declarator": "runnerHelper = new DMNScenarioRunnerHelper() {\n        @Override\n        protected DMNScenarioExecutableBuilder createBuilderWrapper(KieContainer kieContainer) {\n            return dmnScenarioExecutableBuilderMock;\n        }\n    }", "var_name": "runnerHelper"}, {"original_string": "@Mock\n    protected Map<String, Object> requestContextMock;", "modifier": "@Mock\n    protected", "type": "Map<String, Object>", "declarator": "requestContextMock", "var_name": "requestContextMock"}, {"original_string": "@Mock\n    protected DMNResult dmnResultMock;", "modifier": "@Mock\n    protected", "type": "DMNResult", "declarator": "dmnResultMock", "var_name": "dmnResultMock"}, {"original_string": "@Mock\n    protected DMNDecisionResult dmnDecisionResultMock;", "modifier": "@Mock\n    protected", "type": "DMNDecisionResult", "declarator": "dmnDecisionResultMock", "var_name": "dmnDecisionResultMock"}, {"original_string": "@Mock\n    protected DMNModel dmnModelMock;", "modifier": "@Mock\n    protected", "type": "DMNModel", "declarator": "dmnModelMock", "var_name": "dmnModelMock"}, {"original_string": "@Mock\n    protected DMNScenarioExecutableBuilder dmnScenarioExecutableBuilderMock;", "modifier": "@Mock\n    protected", "type": "DMNScenarioExecutableBuilder", "declarator": "dmnScenarioExecutableBuilderMock", "var_name": "dmnScenarioExecutableBuilderMock"}, {"original_string": "@Mock\n    protected KieContainer kieContainerMock;", "modifier": "@Mock\n    protected", "type": "KieContainer", "declarator": "kieContainerMock", "var_name": "kieContainerMock"}, {"original_string": "private Simulation simulation;", "modifier": "private", "type": "Simulation", "declarator": "simulation", "var_name": "simulation"}, {"original_string": "private Settings settings;", "modifier": "private", "type": "Settings", "declarator": "settings", "var_name": "settings"}, {"original_string": "private FactIdentifier personFactIdentifier;", "modifier": "private", "type": "FactIdentifier", "declarator": "personFactIdentifier", "var_name": "personFactIdentifier"}, {"original_string": "private ExpressionIdentifier firstNameGivenExpressionIdentifier;", "modifier": "private", "type": "ExpressionIdentifier", "declarator": "firstNameGivenExpressionIdentifier", "var_name": "firstNameGivenExpressionIdentifier"}, {"original_string": "private FactMapping firstNameGivenFactMapping;", "modifier": "private", "type": "FactMapping", "declarator": "firstNameGivenFactMapping", "var_name": "firstNameGivenFactMapping"}, {"original_string": "private Scenario scenario1;", "modifier": "private", "type": "Scenario", "declarator": "scenario1", "var_name": "scenario1"}, {"original_string": "private Scenario scenario2;", "modifier": "private", "type": "Scenario", "declarator": "scenario2", "var_name": "scenario2"}, {"original_string": "private ExpressionIdentifier firstNameExpectedExpressionIdentifier;", "modifier": "private", "type": "ExpressionIdentifier", "declarator": "firstNameExpectedExpressionIdentifier", "var_name": "firstNameExpectedExpressionIdentifier"}, {"original_string": "private FactMapping firstNameExpectedFactMapping;", "modifier": "private", "type": "FactMapping", "declarator": "firstNameExpectedFactMapping", "var_name": "firstNameExpectedFactMapping"}, {"original_string": "private FactIdentifier disputeFactIdentifier;", "modifier": "private", "type": "FactIdentifier", "declarator": "disputeFactIdentifier", "var_name": "disputeFactIdentifier"}, {"original_string": "private ExpressionIdentifier amountGivenExpressionIdentifier;", "modifier": "private", "type": "ExpressionIdentifier", "declarator": "amountGivenExpressionIdentifier", "var_name": "amountGivenExpressionIdentifier"}, {"original_string": "private FactMapping amountNameGivenFactMapping;", "modifier": "private", "type": "FactMapping", "declarator": "amountNameGivenFactMapping", "var_name": "amountNameGivenFactMapping"}, {"original_string": "private ExpressionIdentifier amountExpectedExpressionIdentifier;", "modifier": "private", "type": "ExpressionIdentifier", "declarator": "amountExpectedExpressionIdentifier", "var_name": "amountExpectedExpressionIdentifier"}, {"original_string": "private FactMapping amountNameExpectedFactMapping;", "modifier": "private", "type": "FactMapping", "declarator": "amountNameExpectedFactMapping", "var_name": "amountNameExpectedFactMapping"}, {"original_string": "private FactMappingValue amountNameExpectedFactMappingValue;", "modifier": "private", "type": "FactMappingValue", "declarator": "amountNameExpectedFactMappingValue", "var_name": "amountNameExpectedFactMappingValue"}, {"original_string": "private FactMappingValue firstNameExpectedValue;", "modifier": "private", "type": "FactMappingValue", "declarator": "firstNameExpectedValue", "var_name": "firstNameExpectedValue"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/DMNScenarioRunnerHelperTest.java"}, "test_case": {"identifier": "verifyConditions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyConditions() {\n        ScenarioRunnerData scenarioRunnerData1 = new ScenarioRunnerData();\n        scenarioRunnerData1.addExpect(new ScenarioExpect(personFactIdentifier, singletonList(firstNameExpectedValue)));\n\n        // test 1 - no decision generated for specific decisionName\n        assertThatThrownBy(() -> runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(), scenarioRunnerData1, expressionEvaluatorFactory, requestContextMock))\n                .isInstanceOf(ScenarioException.class)\n                .hasMessage(\"DMN execution has not generated a decision result with name Fact 1\");\n\n        when(dmnResultMock.getDecisionResultByName(anyString())).thenReturn(dmnDecisionResultMock);\n        when(dmnDecisionResultMock.getEvaluationStatus()).thenReturn(DecisionEvaluationStatus.SUCCEEDED);\n\n        // test 2 - when decisionResult contains a null value skip the steps and just do the comparison (that should be false in this case)\n        runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(), scenarioRunnerData1, expressionEvaluatorFactory, requestContextMock);\n\n        assertEquals(1, scenarioRunnerData1.getResults().size());\n        assertFalse(scenarioRunnerData1.getResults().get(0).getResult());\n\n        when(dmnDecisionResultMock.getResult()).thenReturn(\"\");\n\n        // test 3 - now result is not null but data structure is wrong (expected steps but data is a simple string)\n        assertThatThrownBy(() -> runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(), scenarioRunnerData1, expressionEvaluatorFactory, requestContextMock))\n                .isInstanceOf(ScenarioException.class)\n                .hasMessage(\"Wrong resultRaw structure because it is not a complex type as expected\");\n\n        Map<String, Object> resultMap = new HashMap<>();\n        resultMap.put(\"firstName\", \"WrongValue\");\n\n        when(dmnDecisionResultMock.getResult()).thenReturn(resultMap);\n\n        ScenarioRunnerData scenarioRunnerData2 = new ScenarioRunnerData();\n        scenarioRunnerData2.addExpect(new ScenarioExpect(personFactIdentifier, singletonList(firstNameExpectedValue)));\n\n        // test 4 - check are performed (but fail)\n        runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(), scenarioRunnerData2, expressionEvaluatorFactory, requestContextMock);\n\n        assertEquals(1, scenarioRunnerData2.getResults().size());\n        assertFalse(scenarioRunnerData2.getResults().get(0).getResult());\n\n        ScenarioRunnerData scenarioRunnerData3 = new ScenarioRunnerData();\n        scenarioRunnerData3.addExpect(new ScenarioExpect(personFactIdentifier, singletonList(firstNameExpectedValue)));\n        resultMap.put(\"firstName\", NAME);\n\n        // test 5 - check are performed (but success)\n        runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(), scenarioRunnerData3, expressionEvaluatorFactory, requestContextMock);\n\n        assertEquals(1, scenarioRunnerData3.getResults().size());\n        assertTrue(scenarioRunnerData3.getResults().get(0).getResult());\n\n        // test 6 - verify that when expression evaluation fails the corresponding expression is marked as error\n        ExpressionEvaluatorFactory expressionEvaluatorFactoryMock = mock(ExpressionEvaluatorFactory.class);\n        when(expressionEvaluatorFactoryMock.getOrCreate(any())).thenReturn(mock(ExpressionEvaluator.class));\n        runnerHelper.verifyConditions(simulation.getScesimModelDescriptor(),\n                                      scenarioRunnerData3,\n                                      expressionEvaluatorFactoryMock,\n                                      requestContextMock);\n        assertEquals(FactMappingValueStatus.FAILED_WITH_ERROR, scenarioRunnerData3.getResults().get(0).getFactMappingValue().getStatus());\n    }", "signature": "void verifyConditions()", "full_signature": "@Test public void verifyConditions()", "class_method_signature": "DMNScenarioRunnerHelperTest.verifyConditions()", "testcase": true, "constructor": false, "invocations": ["addExpect", "singletonList", "hasMessage", "isInstanceOf", "assertThatThrownBy", "verifyConditions", "getScesimModelDescriptor", "thenReturn", "when", "getDecisionResultByName", "anyString", "thenReturn", "when", "getEvaluationStatus", "verifyConditions", "getScesimModelDescriptor", "assertEquals", "size", "getResults", "assertFalse", "getResult", "get", "getResults", "thenReturn", "when", "getResult", "hasMessage", "isInstanceOf", "assertThatThrownBy", "verifyConditions", "getScesimModelDescriptor", "put", "thenReturn", "when", "getResult", "addExpect", "singletonList", "verifyConditions", "getScesimModelDescriptor", "assertEquals", "size", "getResults", "assertFalse", "getResult", "get", "getResults", "addExpect", "singletonList", "put", "verifyConditions", "getScesimModelDescriptor", "assertEquals", "size", "getResults", "assertTrue", "getResult", "get", "getResults", "mock", "thenReturn", "when", "getOrCreate", "any", "mock", "verifyConditions", "getScesimModelDescriptor", "assertEquals", "getStatus", "getFactMappingValue", "get", "getResults"]}, "focal_class": {"identifier": "DMNScenarioRunnerHelper", "superclass": "extends AbstractRunnerHelper", "interfaces": "", "fields": [], "methods": [{"identifier": "executeScenario", "parameters": "(KieContainer kieContainer,\n                                                  ScenarioRunnerData scenarioRunnerData,\n                                                  ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                  ScesimModelDescriptor scesimModelDescriptor,\n                                                  Settings settings)", "modifiers": "@Override protected", "return": "Map<String, Object>", "signature": "Map<String, Object> executeScenario(KieContainer kieContainer,\n                                                  ScenarioRunnerData scenarioRunnerData,\n                                                  ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                  ScesimModelDescriptor scesimModelDescriptor,\n                                                  Settings settings)", "full_signature": "@Override protected Map<String, Object> executeScenario(KieContainer kieContainer,\n                                                  ScenarioRunnerData scenarioRunnerData,\n                                                  ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                  ScesimModelDescriptor scesimModelDescriptor,\n                                                  Settings settings)", "class_method_signature": "DMNScenarioRunnerHelper.executeScenario(KieContainer kieContainer,\n                                                  ScenarioRunnerData scenarioRunnerData,\n                                                  ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                                  ScesimModelDescriptor scesimModelDescriptor,\n                                                  Settings settings)", "testcase": false, "constructor": false}, {"identifier": "loadInputData", "parameters": "(List<InstanceGiven> dataToLoad, DMNScenarioExecutableBuilder executableBuilder)", "modifiers": "protected", "return": "void", "signature": "void loadInputData(List<InstanceGiven> dataToLoad, DMNScenarioExecutableBuilder executableBuilder)", "full_signature": "protected void loadInputData(List<InstanceGiven> dataToLoad, DMNScenarioExecutableBuilder executableBuilder)", "class_method_signature": "DMNScenarioRunnerHelper.loadInputData(List<InstanceGiven> dataToLoad, DMNScenarioExecutableBuilder executableBuilder)", "testcase": false, "constructor": false}, {"identifier": "extractResultMetadata", "parameters": "(Map<String, Object> requestContext,\n                                                           ScenarioWithIndex scenarioWithIndex)", "modifiers": "@Override protected", "return": "ScenarioResultMetadata", "signature": "ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext,\n                                                           ScenarioWithIndex scenarioWithIndex)", "full_signature": "@Override protected ScenarioResultMetadata extractResultMetadata(Map<String, Object> requestContext,\n                                                           ScenarioWithIndex scenarioWithIndex)", "class_method_signature": "DMNScenarioRunnerHelper.extractResultMetadata(Map<String, Object> requestContext,\n                                                           ScenarioWithIndex scenarioWithIndex)", "testcase": false, "constructor": false}, {"identifier": "verifyConditions", "parameters": "(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "modifiers": "@Override protected", "return": "void", "signature": "void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "full_signature": "@Override protected void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "class_method_signature": "DMNScenarioRunnerHelper.verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "testcase": false, "constructor": false}, {"identifier": "getSingleFactValueResult", "parameters": "(FactMapping factMapping,\n                                                    FactMappingValue expectedResult,\n                                                    DMNDecisionResult decisionResult,\n                                                    ExpressionEvaluator expressionEvaluator)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "ValueWrapper", "signature": "ValueWrapper getSingleFactValueResult(FactMapping factMapping,\n                                                    FactMappingValue expectedResult,\n                                                    DMNDecisionResult decisionResult,\n                                                    ExpressionEvaluator expressionEvaluator)", "full_signature": "@SuppressWarnings(\"unchecked\") protected ValueWrapper getSingleFactValueResult(FactMapping factMapping,\n                                                    FactMappingValue expectedResult,\n                                                    DMNDecisionResult decisionResult,\n                                                    ExpressionEvaluator expressionEvaluator)", "class_method_signature": "DMNScenarioRunnerHelper.getSingleFactValueResult(FactMapping factMapping,\n                                                    FactMappingValue expectedResult,\n                                                    DMNDecisionResult decisionResult,\n                                                    ExpressionEvaluator expressionEvaluator)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override protected", "return": "Object", "signature": "Object createObject(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override protected Object createObject(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "class_method_signature": "DMNScenarioRunnerHelper.createObject(ValueWrapper<Object> initialInstance, String className, Map<List<String>, Object> params, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "createBuilderWrapper", "parameters": "(KieContainer kieContainer)", "modifiers": "protected", "return": "DMNScenarioExecutableBuilder", "signature": "DMNScenarioExecutableBuilder createBuilderWrapper(KieContainer kieContainer)", "full_signature": "protected DMNScenarioExecutableBuilder createBuilderWrapper(KieContainer kieContainer)", "class_method_signature": "DMNScenarioRunnerHelper.createBuilderWrapper(KieContainer kieContainer)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/DMNScenarioRunnerHelper.java"}, "focal_method": {"identifier": "verifyConditions", "parameters": "(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext) {\n        DMNResult dmnResult = (DMNResult) requestContext.get(DMNScenarioExecutableBuilder.DMN_RESULT);\n\n        for (ScenarioExpect output : scenarioRunnerData.getExpects()) {\n            FactIdentifier factIdentifier = output.getFactIdentifier();\n            String decisionName = factIdentifier.getName();\n            DMNDecisionResult decisionResult = dmnResult.getDecisionResultByName(decisionName);\n            if (decisionResult == null) {\n                throw new ScenarioException(\"DMN execution has not generated a decision result with name \" + decisionName);\n            }\n\n            for (FactMappingValue expectedResult : output.getExpectedResult()) {\n                ExpressionIdentifier expressionIdentifier = expectedResult.getExpressionIdentifier();\n\n                FactMapping factMapping = scesimModelDescriptor.getFactMapping(factIdentifier, expressionIdentifier)\n                        .orElseThrow(() -> new IllegalStateException(\"Wrong expression, this should not happen\"));\n\n                ExpressionEvaluator expressionEvaluator = expressionEvaluatorFactory.getOrCreate(expectedResult);\n\n                ScenarioResult scenarioResult = fillResult(expectedResult,\n                                                           () -> getSingleFactValueResult(factMapping, expectedResult, decisionResult, expressionEvaluator),\n                                                           expressionEvaluator);\n\n                scenarioRunnerData.addResult(scenarioResult);\n            }\n        }\n    }", "signature": "void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "full_signature": "@Override protected void verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "class_method_signature": "DMNScenarioRunnerHelper.verifyConditions(ScesimModelDescriptor scesimModelDescriptor,\n                                    ScenarioRunnerData scenarioRunnerData,\n                                    ExpressionEvaluatorFactory expressionEvaluatorFactory,\n                                    Map<String, Object> requestContext)", "testcase": false, "constructor": false, "invocations": ["get", "getExpects", "getFactIdentifier", "getName", "getDecisionResultByName", "getExpectedResult", "getExpressionIdentifier", "orElseThrow", "getFactMapping", "getOrCreate", "fillResult", "getSingleFactValueResult", "addResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}