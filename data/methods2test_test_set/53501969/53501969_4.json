{"test_class": {"identifier": "LtSegProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Registry _registry;", "modifier": "static", "type": "Registry", "declarator": "_registry", "var_name": "_registry"}, {"original_string": "static String _lm_id = \"testlm\";", "modifier": "static", "type": "String", "declarator": "_lm_id = \"testlm\"", "var_name": "_lm_id"}, {"original_string": "static File _src_dir = new File(ClassLoader.getSystemClassLoader().getResource(\"testlm\").getPath());", "modifier": "static", "type": "File", "declarator": "_src_dir = new File(ClassLoader.getSystemClassLoader().getResource(\"testlm\").getPath())", "var_name": "_src_dir"}, {"original_string": "static String _host = \"localhost\";", "modifier": "static", "type": "String", "declarator": "_host = \"localhost\"", "var_name": "_host"}, {"original_string": "static int _rmiport = 1099;", "modifier": "static", "type": "int", "declarator": "_rmiport = 1099", "var_name": "_rmiport"}, {"original_string": "static int _app_port = 0;", "modifier": "static", "type": "int", "declarator": "_app_port = 0", "var_name": "_app_port"}, {"original_string": "static int _lm_order = 3;", "modifier": "static", "type": "int", "declarator": "_lm_order = 3", "var_name": "_lm_order"}], "file": "lt.lm/src/test/java/de/tudarmstadt/lt/lm/service/LtSegProviderTest.java"}, "test_case": {"identifier": "testFiltering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFiltering() throws Exception {\n\t\tStringProviderMXBean strprovider = AbstractStringProvider.connectToServer(_host, _rmiport, _lm_id);\n\t\tList<String>[] ngrams = strprovider.getNgrams(\"The qu1ck br0wn fox jumps over the lazy dog.\");\n\t\tSystem.out.println(Arrays.asList(ngrams));\n\t}", "signature": "void testFiltering()", "full_signature": "@Test public void testFiltering()", "class_method_signature": "LtSegProviderTest.testFiltering()", "testcase": true, "constructor": false, "invocations": ["connectToServer", "getNgrams", "println", "asList"]}, "focal_class": {"identifier": "LtSegProvider", "superclass": "extends AbstractStringProvider", "interfaces": "implements StringProviderMXBean", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(LtSegProvider.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LtSegProvider.class)", "var_name": "LOG"}, {"original_string": "private ThreadLocal<ITokenizer> _tokenizer;", "modifier": "private", "type": "ThreadLocal<ITokenizer>", "declarator": "_tokenizer", "var_name": "_tokenizer"}, {"original_string": "private ThreadLocal<ISentenceSplitter> _sentenceSplitter;", "modifier": "private", "type": "ThreadLocal<ISentenceSplitter>", "declarator": "_sentenceSplitter", "var_name": "_sentenceSplitter"}], "methods": [{"identifier": "LtSegProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " LtSegProvider()", "full_signature": "public  LtSegProvider()", "class_method_signature": "LtSegProvider.LtSegProvider()", "testcase": false, "constructor": true}, {"identifier": "getNgrams", "parameters": "(String text, String language_code)", "modifiers": "@Override public", "return": "List<String>[]", "signature": "List<String>[] getNgrams(String text, String language_code)", "full_signature": "@Override public List<String>[] getNgrams(String text, String language_code)", "class_method_signature": "LtSegProvider.getNgrams(String text, String language_code)", "testcase": false, "constructor": false}, {"identifier": "splitSentences", "parameters": "(String text, String language_code)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> splitSentences(String text, String language_code)", "full_signature": "@Override public List<String> splitSentences(String text, String language_code)", "class_method_signature": "LtSegProvider.splitSentences(String text, String language_code)", "testcase": false, "constructor": false}, {"identifier": "split_and_add_sentences", "parameters": "(String text, List<String> sentences)", "modifiers": "private", "return": "void", "signature": "void split_and_add_sentences(String text, List<String> sentences)", "full_signature": "private void split_and_add_sentences(String text, List<String> sentences)", "class_method_signature": "LtSegProvider.split_and_add_sentences(String text, List<String> sentences)", "testcase": false, "constructor": false}, {"identifier": "tokenizeSentence_intern", "parameters": "(String sentence, String language_code)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> tokenizeSentence_intern(String sentence, String language_code)", "full_signature": "@Override public List<String> tokenizeSentence_intern(String sentence, String language_code)", "class_method_signature": "LtSegProvider.tokenizeSentence_intern(String sentence, String language_code)", "testcase": false, "constructor": false}], "file": "lt.lm/src/main/java/de/tudarmstadt/lt/lm/service/LtSegProvider.java"}, "focal_method": {"identifier": "getNgrams", "parameters": "(String text, String language_code)", "modifiers": "@Override public", "return": "List<String>[]", "body": "@Override\n\tpublic List<String>[] getNgrams(String text, String language_code) throws Exception {\n\t\tLOG.trace(String.format(\"Computing ngrams from text: %s\", StringUtils.abbreviate(text, 200)));\n\t\tList<String>[] ngrams = null;\n\n\t\tfor(String sentence : splitSentences(text, language_code)){\n\t\t\tList<String> tokens = tokenizeSentence(sentence, language_code);\n\t\t\tif(tokens.isEmpty())\n\t\t\t\tcontinue;\n\t\t\tLOG.trace(String.format(\"Current sentence: %s\", StringUtils.abbreviate(tokens.toString(), 200)));\n\t\t\tList<String>[] current_ngrams = getNgramSequenceFromSentence(tokens);\n\n\t\t\tLOG.trace(String.format(\"Current ngrams: %s\", StringUtils.abbreviate(Arrays.toString(current_ngrams), 200)));\n\t\t\tif (ngrams == null)\n\t\t\t\tngrams = current_ngrams;\n\t\t\telse\n\t\t\t\tngrams = ArrayUtils.getConcatinatedArray(ngrams, current_ngrams);\n\t\t}\n\n\t\tif (ngrams == null)\n\t\t\tngrams = EMPTY_NGRAM_LIST;\n\t\tLOG.trace(String.format(\"Ngrams for text: '%s': %s \", StringUtils.abbreviate(text, 200), StringUtils.abbreviate(Arrays.toString(ngrams), 200)));\n\t\treturn ngrams;\n\t}", "signature": "List<String>[] getNgrams(String text, String language_code)", "full_signature": "@Override public List<String>[] getNgrams(String text, String language_code)", "class_method_signature": "LtSegProvider.getNgrams(String text, String language_code)", "testcase": false, "constructor": false, "invocations": ["trace", "format", "abbreviate", "splitSentences", "tokenizeSentence", "isEmpty", "trace", "format", "abbreviate", "toString", "getNgramSequenceFromSentence", "trace", "format", "abbreviate", "toString", "getConcatinatedArray", "trace", "format", "abbreviate", "abbreviate", "toString"]}, "repository": {"repo_id": 53501969, "url": "https://github.com/tudarmstadt-lt/topicrawler", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 6504, "license": "licensed"}}