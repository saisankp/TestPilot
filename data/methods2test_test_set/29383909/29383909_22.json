{"test_class": {"identifier": "NovaLauncherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> ports = new HashSet<>();", "modifier": "private static final", "type": "Set<String>", "declarator": "ports = new HashSet<>()", "var_name": "ports"}, {"original_string": "private NovaContext novaContext;", "modifier": "private", "type": "NovaContext", "declarator": "novaContext", "var_name": "novaContext"}, {"original_string": "private SshKeyPair sshKeyPair;", "modifier": "private", "type": "SshKeyPair", "declarator": "sshKeyPair", "var_name": "sshKeyPair"}, {"original_string": "private NovaCredentials novaCredentials;", "modifier": "private", "type": "NovaCredentials", "declarator": "novaCredentials", "var_name": "novaCredentials"}, {"original_string": "private ContextBuilder builder;", "modifier": "private", "type": "ContextBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private ComputeServiceContext serviceContext;", "modifier": "private", "type": "ComputeServiceContext", "declarator": "serviceContext", "var_name": "serviceContext"}, {"original_string": "private ComputeService novaComputeService;", "modifier": "private", "type": "ComputeService", "declarator": "novaComputeService", "var_name": "novaComputeService"}, {"original_string": "private NovaApi novaApi;", "modifier": "private", "type": "NovaApi", "declarator": "novaApi", "var_name": "novaApi"}, {"original_string": "private SecurityGroupApi securityGroupApi;", "modifier": "private", "type": "SecurityGroupApi", "declarator": "securityGroupApi", "var_name": "securityGroupApi"}, {"original_string": "private KeyPairApi keyPairApi;", "modifier": "private", "type": "KeyPairApi", "declarator": "keyPairApi", "var_name": "keyPairApi"}, {"original_string": "private Optional securityGroupApiOptional;", "modifier": "private", "type": "Optional", "declarator": "securityGroupApiOptional", "var_name": "securityGroupApiOptional"}, {"original_string": "private Optional keyPairApiOptional;", "modifier": "private", "type": "Optional", "declarator": "keyPairApiOptional", "var_name": "keyPairApiOptional"}, {"original_string": "private SecurityGroup securityGroupCreated;", "modifier": "private", "type": "SecurityGroup", "declarator": "securityGroupCreated", "var_name": "securityGroupCreated"}, {"original_string": "private String clusterName;", "modifier": "private", "type": "String", "declarator": "clusterName", "var_name": "clusterName"}, {"original_string": "private String groupName;", "modifier": "private", "type": "String", "declarator": "groupName", "var_name": "groupName"}, {"original_string": "private Nova nova;", "modifier": "private", "type": "Nova", "declarator": "nova", "var_name": "nova"}], "file": "karamel-core/src/test/java/se/kth/karamel/backend/launcher/nova/NovaLauncherTest.java"}, "test_case": {"identifier": "testForkMachines", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n  @Test\n  public void testForkMachines() throws KaramelException, RunNodesException {\n    NovaLauncher novaLauncher = new NovaLauncher(novaContext, sshKeyPair);\n    //mocking uploadSSHPublicKey\n    String keypairName = \"pepeKeyPair\";\n    KeyPair pair = mock(KeyPair.class);\n\n    List<KeyPair> keyPairList = new ArrayList<>();\n    keyPairList.add(pair);\n    FluentIterable<KeyPair> keys = FluentIterable.from(keyPairList);\n\n    when(keyPairApi.list()).thenReturn(keys);\n    when(keyPairApi.delete(keypairName)).thenReturn(true);\n    when(keyPairApi.createWithPublicKey(keypairName, sshKeyPair.getPublicKey())).thenReturn(pair);\n\n    //mocking\n    JsonCluster cluster = mock(JsonCluster.class);\n    ClusterRuntime clusterRuntime = mock(ClusterRuntime.class);\n    when(clusterRuntime.getName()).thenReturn(clusterName);\n    List<JsonGroup> groups = new ArrayList<>();\n\n    //mocking json group\n    JsonGroup group = mock(JsonGroup.class);\n    groups.add(group);\n    when(group.getName()).thenReturn(groupName);\n    when(group.getProvider()).thenReturn(nova);\n    when(group.getSize()).thenReturn(1);\n\n    //mocking json cluster\n    when(cluster.getGroups()).thenReturn(groups);\n    when(cluster.getProvider()).thenReturn(nova);\n    when(cluster.getName()).thenReturn(clusterName);\n\n    //mocking group runtime\n    List<GroupRuntime> groupRuntimes = new ArrayList<>();\n    GroupRuntime groupRuntime = mock(GroupRuntime.class);\n    when(groupRuntime.getName()).thenReturn(groupName);\n    when(groupRuntime.getId()).thenReturn(\"10\");\n    when(groupRuntime.getCluster()).thenReturn(clusterRuntime);\n    groupRuntimes.add(groupRuntime);\n\n    //mocking clusterRuntime\n    when(clusterRuntime.getGroups()).thenReturn(groupRuntimes);\n\n    //mocking templateOptions\n    NovaTemplateOptions novaTemplateOptions = mock(NovaTemplateOptions.class);\n    TemplateBuilder templateBuilder = mock(TemplateBuilder.class);\n\n    TemplateOptions templateOptions = mock(TemplateOptions.class);\n\n    when(novaContext.getComputeService()).thenReturn(novaComputeService);\n    when(novaComputeService.templateOptions()).thenReturn(novaTemplateOptions);\n\n    when(novaTemplateOptions.securityGroups(Matchers.anyCollection())).thenReturn(novaTemplateOptions);\n    when(templateOptions.as(NovaTemplateOptions.class)).thenReturn(novaTemplateOptions);\n    when(novaComputeService.templateBuilder()).thenReturn(templateBuilder);\n\n    //mock builder\n    when(novaTemplateOptions.keyPairName(keypairName)).thenReturn(novaTemplateOptions);\n    when(novaTemplateOptions.autoAssignFloatingIp(true)).thenReturn(novaTemplateOptions);\n    when(novaTemplateOptions.nodeNames(Matchers.anyCollection())).thenReturn(novaTemplateOptions);\n\n    //mock success nodes\n    Set<NodeMetadata> succeededNodes = new HashSet<>();\n    NodeMetadata succeededNode = mock(NodeMetadata.class);\n\n    succeededNodes.add(succeededNode);\n    doReturn(succeededNodes).when(novaComputeService)\n            .createNodesInGroup(Matchers.anyString(), eq(1), Matchers.any(Template.class));\n\n    LoginCredentials loginCredentials = mock(LoginCredentials.class);\n    Set<String> ipAddresses = new HashSet<>();\n    ipAddresses.add(\"127.0.0.1\");\n    when(succeededNode.getPublicAddresses()).thenReturn(ipAddresses);\n    when(succeededNode.getPrivateAddresses()).thenReturn(ipAddresses);\n    when(succeededNode.getLoginPort()).thenReturn(22);\n    when(succeededNode.getCredentials()).thenReturn(loginCredentials);\n    when(loginCredentials.getUser()).thenReturn(\"ubuntu\");\n\n    //testing method\n    List<MachineRuntime> forkedMachines =novaLauncher.forkMachines(cluster,clusterRuntime,groupName);\n\n    assertNotNull(forkedMachines);\n    assertFalse(forkedMachines.isEmpty());\n  }", "signature": "void testForkMachines()", "full_signature": "@Ignore @Test public void testForkMachines()", "class_method_signature": "NovaLauncherTest.testForkMachines()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "from", "thenReturn", "when", "list", "thenReturn", "when", "delete", "thenReturn", "when", "createWithPublicKey", "getPublicKey", "mock", "mock", "thenReturn", "when", "getName", "mock", "add", "thenReturn", "when", "getName", "thenReturn", "when", "getProvider", "thenReturn", "when", "getSize", "thenReturn", "when", "getGroups", "thenReturn", "when", "getProvider", "thenReturn", "when", "getName", "mock", "thenReturn", "when", "getName", "thenReturn", "when", "getId", "thenReturn", "when", "getCluster", "add", "thenReturn", "when", "getGroups", "mock", "mock", "mock", "thenReturn", "when", "getComputeService", "thenReturn", "when", "templateOptions", "thenReturn", "when", "securityGroups", "anyCollection", "thenReturn", "when", "as", "thenReturn", "when", "templateBuilder", "thenReturn", "when", "keyPairName", "thenReturn", "when", "autoAssignFloatingIp", "thenReturn", "when", "nodeNames", "anyCollection", "mock", "add", "createNodesInGroup", "when", "doReturn", "anyString", "eq", "any", "mock", "add", "thenReturn", "when", "getPublicAddresses", "thenReturn", "when", "getPrivateAddresses", "thenReturn", "when", "getLoginPort", "thenReturn", "when", "getCredentials", "thenReturn", "when", "getUser", "forkMachines", "assertNotNull", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "NovaLauncher", "superclass": "extends Launcher", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(NovaLauncher.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(NovaLauncher.class)", "var_name": "logger"}, {"original_string": "private static boolean TESTING = true;", "modifier": "private static", "type": "boolean", "declarator": "TESTING = true", "var_name": "TESTING"}, {"original_string": "private final NovaContext novaContext;", "modifier": "private final", "type": "NovaContext", "declarator": "novaContext", "var_name": "novaContext"}, {"original_string": "private final SshKeyPair sshKeyPair;", "modifier": "private final", "type": "SshKeyPair", "declarator": "sshKeyPair", "var_name": "sshKeyPair"}, {"original_string": "private Set<String> keys = new HashSet<>();", "modifier": "private", "type": "Set<String>", "declarator": "keys = new HashSet<>()", "var_name": "keys"}], "methods": [{"identifier": "NovaLauncher", "parameters": "(NovaContext novaContext, SshKeyPair sshKeyPair)", "modifiers": "public", "return": "", "signature": " NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "full_signature": "public  NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "class_method_signature": "NovaLauncher.NovaLauncher(NovaContext novaContext, SshKeyPair sshKeyPair)", "testcase": false, "constructor": true}, {"identifier": "validateCredentials", "parameters": "(NovaCredentials novaCredentials, ContextBuilder builder)", "modifiers": "public static", "return": "NovaContext", "signature": "NovaContext validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "full_signature": "public static NovaContext validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "class_method_signature": "NovaLauncher.validateCredentials(NovaCredentials novaCredentials, ContextBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "readCredentials", "parameters": "(Confs confs)", "modifiers": "public static", "return": "NovaCredentials", "signature": "NovaCredentials readCredentials(Confs confs)", "full_signature": "public static NovaCredentials readCredentials(Confs confs)", "class_method_signature": "NovaLauncher.readCredentials(Confs confs)", "testcase": false, "constructor": false}, {"identifier": "createSecurityGroup", "parameters": "(String clusterName, String groupName, Nova nova, Set<String> ports)", "modifiers": "public", "return": "String", "signature": "String createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "full_signature": "public String createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "class_method_signature": "NovaLauncher.createSecurityGroup(String clusterName, String groupName, Nova nova, Set<String> ports)", "testcase": false, "constructor": false}, {"identifier": "uploadSshPublicKey", "parameters": "(String keyPairName, Nova nova, boolean removeOld)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "full_signature": "public boolean uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "class_method_signature": "NovaLauncher.uploadSshPublicKey(String keyPairName, Nova nova, boolean removeOld)", "testcase": false, "constructor": false}, {"identifier": "cleanupFailedNodes", "parameters": "(Map<NodeMetadata, Throwable> failedNodes)", "modifiers": "public", "return": "boolean", "signature": "boolean cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "full_signature": "public boolean cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "class_method_signature": "NovaLauncher.cleanupFailedNodes(Map<NodeMetadata, Throwable> failedNodes)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(JsonCluster definition, ClusterRuntime runtime)", "modifiers": "@Override public", "return": "void", "signature": "void cleanup(JsonCluster definition, ClusterRuntime runtime)", "full_signature": "@Override public void cleanup(JsonCluster definition, ClusterRuntime runtime)", "class_method_signature": "NovaLauncher.cleanup(JsonCluster definition, ClusterRuntime runtime)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "modifiers": "public", "return": "void", "signature": "void cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "full_signature": "public void cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "class_method_signature": "NovaLauncher.cleanup(String clusterName, Set<String> vmIds, Set<String> vmNames, Map<String, String> groupRegion)", "testcase": false, "constructor": false}, {"identifier": "forkGroup", "parameters": "(JsonCluster definition, ClusterRuntime runtime, String name)", "modifiers": "@Override public", "return": "String", "signature": "String forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "full_signature": "@Override public String forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "class_method_signature": "NovaLauncher.forkGroup(JsonCluster definition, ClusterRuntime runtime, String name)", "testcase": false, "constructor": false}, {"identifier": "forkMachines", "parameters": "(JsonCluster definition, ClusterRuntime runtime, String name)", "modifiers": "@Override public", "return": "List<MachineRuntime>", "signature": "List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "full_signature": "@Override public List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "class_method_signature": "NovaLauncher.forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "testcase": false, "constructor": false}, {"identifier": "requestNodes", "parameters": "(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "modifiers": "private", "return": "List<MachineRuntime>", "signature": "List<MachineRuntime> requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "full_signature": "private List<MachineRuntime> requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "class_method_signature": "NovaLauncher.requestNodes(String keypairName, GroupRuntime groupRuntime, Set<String> groupIds,\n                                            Integer totalSize, Nova nova)", "testcase": false, "constructor": false}, {"identifier": "addSuccessAndLostNodes", "parameters": "(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "modifiers": "private", "return": "void", "signature": "void addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "full_signature": "private void addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "class_method_signature": "NovaLauncher.addSuccessAndLostNodes(RunNodesException rnex, Set<NodeMetadata> successfulNodes, Map<NodeMetadata,\n          Throwable> lostNodes)", "testcase": false, "constructor": false}, {"identifier": "findLeftVmNames", "parameters": "(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "modifiers": "private", "return": "List<String>", "signature": "List<String> findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "full_signature": "private List<String> findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "class_method_signature": "NovaLauncher.findLeftVmNames(Set<? extends NodeMetadata> successfulNodes, List<String> vmNames)", "testcase": false, "constructor": false}, {"identifier": "withPredicate", "parameters": "(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "modifiers": "public static", "return": "Predicate<NodeMetadata>", "signature": "Predicate<NodeMetadata> withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "full_signature": "public static Predicate<NodeMetadata> withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "class_method_signature": "NovaLauncher.withPredicate(final Set<String> ids, final Set<String> names,\n                                                      final Set<String> groupNames)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/launcher/nova/NovaLauncher.java"}, "focal_method": {"identifier": "forkMachines", "parameters": "(JsonCluster definition, ClusterRuntime runtime, String name)", "modifiers": "@Override public", "return": "List<MachineRuntime>", "body": "@Override\n  public List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)\n          throws KaramelException {\n    Nova nova = (Nova) UserClusterDataExtractor.getGroupProvider(definition,name);\n    JsonGroup definedGroup = UserClusterDataExtractor.findGroup(definition, name);\n    GroupRuntime groupRuntime = UserClusterDataExtractor.findGroup(runtime,name);\n    Set<String> groupIds = new HashSet<>();\n    groupIds.add(groupRuntime.getId());\n\n    String keypairName = NovaSetting.NOVA_KEYPAIR_NAME(runtime.getName(), novaContext.getNovaCredentials().getRegion());\n    if(!keys.contains(keypairName)) {\n      uploadSshPublicKey(keypairName,nova,true);\n      keys.add(keypairName);\n    }\n    return requestNodes(keypairName,groupRuntime,groupIds,Integer.valueOf(definedGroup.getSize()),nova);\n  }", "signature": "List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "full_signature": "@Override public List<MachineRuntime> forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "class_method_signature": "NovaLauncher.forkMachines(JsonCluster definition, ClusterRuntime runtime, String name)", "testcase": false, "constructor": false, "invocations": ["getGroupProvider", "findGroup", "findGroup", "add", "getId", "NOVA_KEYPAIR_NAME", "getName", "getRegion", "getNovaCredentials", "contains", "uploadSshPublicKey", "add", "requestNodes", "valueOf", "getSize"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}