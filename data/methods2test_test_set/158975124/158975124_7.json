{"test_class": {"identifier": "FloatDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FloatDecoderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FloatDecoderTest.class)", "var_name": "logger"}, {"original_string": "private final double delta = 0.0000001;", "modifier": "private final", "type": "double", "declarator": "delta = 0.0000001", "var_name": "delta"}, {"original_string": "private final int floatMaxPointValue = 10000;", "modifier": "private final", "type": "int", "declarator": "floatMaxPointValue = 10000", "var_name": "floatMaxPointValue"}, {"original_string": "private final int floatMaxPointNumber = 4;", "modifier": "private final", "type": "int", "declarator": "floatMaxPointNumber = 4", "var_name": "floatMaxPointNumber"}, {"original_string": "private final long doubleMaxPointValue = 1000000000000000L;", "modifier": "private final", "type": "long", "declarator": "doubleMaxPointValue = 1000000000000000L", "var_name": "doubleMaxPointValue"}, {"original_string": "private final int doubleMaxPointNumber = 15;", "modifier": "private final", "type": "int", "declarator": "doubleMaxPointNumber = 15", "var_name": "doubleMaxPointNumber"}, {"original_string": "private List<Float> floatList;", "modifier": "private", "type": "List<Float>", "declarator": "floatList", "var_name": "floatList"}, {"original_string": "private List<Double> doubleList;", "modifier": "private", "type": "List<Double>", "declarator": "doubleList", "var_name": "doubleList"}], "file": "tsfile/src/test/java/org/apache/iotdb/tsfile/encoding/decoder/FloatDecoderTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() throws Exception {\n\n    float value = 7.101f;\n    Encoder encoder = new FloatEncoder(TSEncoding.RLE, TSDataType.FLOAT, 3);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    encoder.encode(value, baos);\n    encoder.flush(baos);\n    encoder.encode(value + 2, baos);\n    encoder.flush(baos);\n    ByteBuffer buffer = ByteBuffer.wrap(baos.toByteArray());\n    Decoder decoder1 = new FloatDecoder(TSEncoding.RLE, TSDataType.FLOAT);\n    Decoder decoder2 = new FloatDecoder(TSEncoding.RLE, TSDataType.FLOAT);\n    float value1_ = decoder1.readFloat(buffer);\n    float value2_ = decoder2.readFloat(buffer);\n    assertEquals(value, value1_, delta);\n    assertEquals(value + 2, value2_, delta);\n    logger.debug(\"{} // {}\", value, value1_);\n    logger.debug(\"{} // {}\", value + 2, value2_);\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "FloatDecoderTest.test()", "testcase": true, "constructor": false, "invocations": ["encode", "flush", "encode", "flush", "wrap", "toByteArray", "readFloat", "readFloat", "assertEquals", "assertEquals", "debug", "debug"]}, "focal_class": {"identifier": "FloatDecoder", "superclass": "extends Decoder", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FloatDecoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FloatDecoder.class)", "var_name": "logger"}, {"original_string": "private Decoder decoder;", "modifier": "private", "type": "Decoder", "declarator": "decoder", "var_name": "decoder"}, {"original_string": "private double maxPointValue;", "modifier": "private", "type": "double", "declarator": "maxPointValue", "var_name": "maxPointValue"}, {"original_string": "private boolean isMaxPointNumberRead;", "modifier": "private", "type": "boolean", "declarator": "isMaxPointNumberRead", "var_name": "isMaxPointNumberRead"}], "methods": [{"identifier": "FloatDecoder", "parameters": "(TSEncoding encodingType, TSDataType dataType)", "modifiers": "public", "return": "", "signature": " FloatDecoder(TSEncoding encodingType, TSDataType dataType)", "full_signature": "public  FloatDecoder(TSEncoding encodingType, TSDataType dataType)", "class_method_signature": "FloatDecoder.FloatDecoder(TSEncoding encodingType, TSDataType dataType)", "testcase": false, "constructor": true}, {"identifier": "readFloat", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "float", "signature": "float readFloat(ByteBuffer buffer)", "full_signature": "@Override public float readFloat(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readFloat(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readDouble", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "double", "signature": "double readDouble(ByteBuffer buffer)", "full_signature": "@Override public double readDouble(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readDouble(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readMaxPointValue", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "void", "signature": "void readMaxPointValue(ByteBuffer buffer)", "full_signature": "private void readMaxPointValue(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readMaxPointValue(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext(ByteBuffer buffer)", "full_signature": "@Override public boolean hasNext(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.hasNext(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readBinary", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "Binary", "signature": "Binary readBinary(ByteBuffer buffer)", "full_signature": "@Override public Binary readBinary(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readBinary(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readBoolean", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean readBoolean(ByteBuffer buffer)", "full_signature": "@Override public boolean readBoolean(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readBoolean(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readShort", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "short", "signature": "short readShort(ByteBuffer buffer)", "full_signature": "@Override public short readShort(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readShort(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "int", "signature": "int readInt(ByteBuffer buffer)", "full_signature": "@Override public int readInt(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readInt(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "long", "signature": "long readLong(ByteBuffer buffer)", "full_signature": "@Override public long readLong(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readLong(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "FloatDecoder.reset()", "testcase": false, "constructor": false}], "file": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/decoder/FloatDecoder.java"}, "focal_method": {"identifier": "readFloat", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "float", "body": "@Override\n  public float readFloat(ByteBuffer buffer) {\n    readMaxPointValue(buffer);\n    int value = decoder.readInt(buffer);\n    double result = value / maxPointValue;\n    return (float) result;\n  }", "signature": "float readFloat(ByteBuffer buffer)", "full_signature": "@Override public float readFloat(ByteBuffer buffer)", "class_method_signature": "FloatDecoder.readFloat(ByteBuffer buffer)", "testcase": false, "constructor": false, "invocations": ["readMaxPointValue", "readInt"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}