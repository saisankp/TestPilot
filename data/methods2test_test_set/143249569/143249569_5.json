{"test_class": {"identifier": "SlotValuesArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SlotValuesArgumentResolver resolver = new SlotValuesArgumentResolver();", "modifier": "private", "type": "SlotValuesArgumentResolver", "declarator": "resolver = new SlotValuesArgumentResolver()", "var_name": "resolver"}, {"original_string": "@Mock\n    SkillContext mockSkillContext;", "modifier": "@Mock", "type": "SkillContext", "declarator": "mockSkillContext", "var_name": "mockSkillContext"}], "file": "ask-sdk-mvc/src/test/java/com/amazon/ask/mvc/argument/SlotValuesArgumentResolverTest.java"}, "test_case": {"identifier": "testDoesntSupport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoesntSupport() throws NoSuchMethodException {\n        MethodParameter methodParameter = new MethodParameter(\n                this.getClass().getMethod(\"testSupportAndResolve\"),\n                0,\n                Object.class, //<---- wrong class\n                MethodParameter.EMPTY_ANNOTATIONS\n        );\n\n        RequestEnvelope envelope = Utils.buildSimpleEnvelope(\"intent\");\n        ArgumentResolverContext input = new ArgumentResolverContext(mockSkillContext, methodParameter, HandlerInput.builder().withRequestEnvelope(envelope).build());\n\n        assertFalse(resolver.resolve(input).isPresent());\n    }", "signature": "void testDoesntSupport()", "full_signature": "@Test public void testDoesntSupport()", "class_method_signature": "SlotValuesArgumentResolverTest.testDoesntSupport()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getClass", "buildSimpleEnvelope", "build", "withRequestEnvelope", "builder", "assertFalse", "isPresent", "resolve"]}, "focal_class": {"identifier": "SlotValuesArgumentResolver", "superclass": "", "interfaces": "implements ArgumentResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotValuesArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false}], "file": "ask-sdk-mvc/src/main/java/com/amazon/ask/mvc/argument/SlotValuesArgumentResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(ArgumentResolverContext input)", "modifiers": "@Override public", "return": "Optional<Object>", "body": "@Override\n    public Optional<Object> resolve(ArgumentResolverContext input) {\n        if (input.requestTypeEquals(IntentRequest.class)\n            && input.parameterTypeEquals(Map.class)\n            && input.getMethodParameter().findAnnotation(SlotValues.class).isPresent()) {\n\n            IntentRequest request = (IntentRequest) input.unwrapRequest();\n\n\n            return Optional.of(request.getIntent()\n                .getSlots().entrySet().stream()\n                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().getValue())));\n        } else {\n            return Optional.empty();\n        }\n    }", "signature": "Optional<Object> resolve(ArgumentResolverContext input)", "full_signature": "@Override public Optional<Object> resolve(ArgumentResolverContext input)", "class_method_signature": "SlotValuesArgumentResolver.resolve(ArgumentResolverContext input)", "testcase": false, "constructor": false, "invocations": ["requestTypeEquals", "parameterTypeEquals", "isPresent", "findAnnotation", "getMethodParameter", "unwrapRequest", "of", "collect", "stream", "entrySet", "getSlots", "getIntent", "toMap", "getValue", "getValue", "empty"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}