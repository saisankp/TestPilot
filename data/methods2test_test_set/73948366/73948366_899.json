{"test_class": {"identifier": "DynamoDBSSHRecordStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private AmazonDynamoDB dbClient;", "modifier": "@Mock private", "type": "AmazonDynamoDB", "declarator": "dbClient", "var_name": "dbClient"}, {"original_string": "@Mock private Table table;", "modifier": "@Mock private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "@Mock private DynamoDB dynamoDB;", "modifier": "@Mock private", "type": "DynamoDB", "declarator": "dynamoDB", "var_name": "dynamoDB"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBSSHRecordStoreFactoryTest.java"}, "test_case": {"identifier": "testGetDynamoDBClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDynamoDBClient() {\n        System.setProperty(ZTS_PROP_DYNAMODB_KEY_PATH, \"test.keypath\");\n        System.setProperty(ZTS_PROP_DYNAMODB_CERT_PATH, \"test.certpath\");\n        System.setProperty(ZTS_PROP_DYNAMODB_DOMAIN, \"test.domain\");\n        System.setProperty(ZTS_PROP_DYNAMODB_REGION, \"test.region\");\n        System.setProperty(ZTS_PROP_DYNAMODB_ROLE, \"test.role\");\n        System.setProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE, \"test.truststore\");\n        System.setProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_PASSWORD, \"test.truststore.password\");\n        System.setProperty(ZTS_PROP_DYNAMODB_ZTS_URL, \"test.ztsurl\");\n        System.setProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_APPNAME, \"test.appname\");\n        PrivateKeyStore keyStore = Mockito.mock(PrivateKeyStore.class);\n        when(keyStore.getApplicationSecret(Mockito.eq(\"test.appname\"), Mockito.eq(\"test.truststore.password\")))\n                .thenReturn(\"decryptedPassword\");\n\n        DynamoDBSSHRecordStoreFactory factory = new DynamoDBSSHRecordStoreFactory();\n        ZTSClientNotificationSenderImpl ztsClientNotificationSender = Mockito.mock(ZTSClientNotificationSenderImpl.class);\n        PrivateKeyStore privateKeyStore = Mockito.mock(PrivateKeyStore.class);\n        AmazonDynamoDB dynamoDBClient = factory.getDynamoDBClient(ztsClientNotificationSender, privateKeyStore);\n        assertNotNull(dynamoDBClient);\n\n        System.clearProperty(ZTS_PROP_DYNAMODB_KEY_PATH);\n        System.clearProperty(ZTS_PROP_DYNAMODB_CERT_PATH);\n        System.clearProperty(ZTS_PROP_DYNAMODB_DOMAIN);\n        System.clearProperty(ZTS_PROP_DYNAMODB_REGION);\n        System.clearProperty(ZTS_PROP_DYNAMODB_ROLE);\n        System.clearProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE);\n        System.clearProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_PASSWORD);\n        System.clearProperty(ZTS_PROP_DYNAMODB_ZTS_URL);\n        System.clearProperty(ZTS_PROP_DYNAMODB_TRUSTSTORE_APPNAME);\n    }", "signature": "void testGetDynamoDBClient()", "full_signature": "@Test public void testGetDynamoDBClient()", "class_method_signature": "DynamoDBSSHRecordStoreFactoryTest.testGetDynamoDBClient()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "mock", "thenReturn", "when", "getApplicationSecret", "eq", "eq", "mock", "mock", "getDynamoDBClient", "assertNotNull", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "DynamoDBSSHRecordStoreFactory", "superclass": "", "interfaces": "implements SSHRecordStoreFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBSSHRecordStoreFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBSSHRecordStoreFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "SSHRecordStore", "signature": "SSHRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public SSHRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBSSHRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "", "return": "AmazonDynamoDB", "signature": "AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": " AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBSSHRecordStoreFactory.getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBSSHRecordStoreFactory.java"}, "focal_method": {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "", "return": "AmazonDynamoDB", "body": "AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore) {\n        DynamoDBClientFetcher dynamoDBClientFetcher = DynamoDBClientFetcherFactory.getDynamoDBClientFetcher();\n        return dynamoDBClientFetcher.getDynamoDBClient(ztsClientNotificationSender, keyStore).getAmazonDynamoDB();\n    }", "signature": "AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": " AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBSSHRecordStoreFactory.getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getDynamoDBClientFetcher", "getAmazonDynamoDB", "getDynamoDBClient"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}