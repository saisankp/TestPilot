{"test_class": {"identifier": "KalmanFlattenedMatrixFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanFlattenedMatrixFilterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanFlattenedMatrixFilterTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/kalmanfilter/KalmanFlattenedMatrixFilterTest.java"}, "test_case": {"identifier": "reduceToVectorKalmanFilterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reduceToVectorKalmanFilterTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 4)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/2gaussians-500points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = Drainer.drainIngest(conf);\n        assertEquals(500, data.size());\n\n        KalmanVectorFilter f = new KalmanVectorFilter(new ArrayRealVector(2), 1e-6, 1);\n\n        RealMatrix shapeMatrix = new BlockRealMatrix(2, 1);\n        KalmanFlattenedMatrixFilter mf = new KalmanFlattenedMatrixFilter(shapeMatrix, 1e-6, 1);\n\n        List<Datum> oneCluster = data.subList(201, 500);\n        List<RealVector> vectorFiltered = oneCluster.stream().map(d -> f.step(d.metrics(), 1)).collect(Collectors.toList());\n        List<RealMatrix> matrixFiltered = oneCluster.stream()\n                .map(d -> mf.step(AlgebraUtils.reshapeMatrixByColumns(d.metrics(), shapeMatrix), 1))\n                .collect(Collectors.toList());\n\n        for (int i = 0; i < 10; i++) {\n            int ri = conf.getRandom().nextInt(300);\n            assertEquals(vectorFiltered.get(ri), AlgebraUtils.flattenMatrixByColumns(matrixFiltered.get(ri)));\n        }\n    }", "signature": "void reduceToVectorKalmanFilterTest()", "full_signature": "@Test public void reduceToVectorKalmanFilterTest()", "class_method_signature": "KalmanFlattenedMatrixFilterTest.reduceToVectorKalmanFilterTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "drainIngest", "assertEquals", "size", "subList", "collect", "map", "stream", "step", "metrics", "toList", "collect", "map", "stream", "step", "reshapeMatrixByColumns", "metrics", "toList", "nextInt", "getRandom", "assertEquals", "get", "flattenMatrixByColumns", "get"]}, "focal_class": {"identifier": "KalmanFlattenedMatrixFilter", "superclass": "extends KalmanVectorFilter", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanFlattenedMatrixFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanFlattenedMatrixFilter.class)", "var_name": "log"}], "methods": [{"identifier": "KalmanFlattenedMatrixFilter", "parameters": "(RealMatrix startLoc, double qScale, double rScale)", "modifiers": "public", "return": "", "signature": " KalmanFlattenedMatrixFilter(RealMatrix startLoc, double qScale, double rScale)", "full_signature": "public  KalmanFlattenedMatrixFilter(RealMatrix startLoc, double qScale, double rScale)", "class_method_signature": "KalmanFlattenedMatrixFilter.KalmanFlattenedMatrixFilter(RealMatrix startLoc, double qScale, double rScale)", "testcase": false, "constructor": true}, {"identifier": "step", "parameters": "(RealMatrix observation, int time)", "modifiers": "public", "return": "RealMatrix", "signature": "RealMatrix step(RealMatrix observation, int time)", "full_signature": "public RealMatrix step(RealMatrix observation, int time)", "class_method_signature": "KalmanFlattenedMatrixFilter.step(RealMatrix observation, int time)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/kalmanfilter/KalmanFlattenedMatrixFilter.java"}, "focal_method": {"identifier": "step", "parameters": "(RealMatrix observation, int time)", "modifiers": "public", "return": "RealMatrix", "body": "public RealMatrix step(RealMatrix observation, int time) {\n        RealVector v = super.step(AlgebraUtils.flattenMatrixByColumns(observation), time);\n        return AlgebraUtils.reshapeMatrixByColumns(v, observation);\n    }", "signature": "RealMatrix step(RealMatrix observation, int time)", "full_signature": "public RealMatrix step(RealMatrix observation, int time)", "class_method_signature": "KalmanFlattenedMatrixFilter.step(RealMatrix observation, int time)", "testcase": false, "constructor": false, "invocations": ["step", "flattenMatrixByColumns", "reshapeMatrixByColumns"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}