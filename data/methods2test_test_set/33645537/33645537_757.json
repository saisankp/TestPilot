{"test_class": {"identifier": "NewThreadSchedulerTest", "superclass": "extends AbstractSchedulerConcurrencyTests", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/schedulers/NewThreadSchedulerTest.java"}, "test_case": {"identifier": "testNoSelfInterrupt", "parameters": "()", "modifiers": "@Test(timeout = 3000) public", "return": "void", "body": "@Test(timeout = 3000)\n    public void testNoSelfInterrupt() throws InterruptedException {\n        Scheduler.Worker worker = Schedulers.newThread().createWorker();\n        try {\n            final CountDownLatch run = new CountDownLatch(1);\n            final CountDownLatch done = new CountDownLatch(1);\n            final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n            final AtomicBoolean interruptFlag = new AtomicBoolean();\n            \n            ScheduledAction sa = (ScheduledAction)worker.schedule(new Action0() {\n                @Override\n                public void call() {\n                    try {\n                        run.await();\n                    } catch (InterruptedException ex) {\n                        exception.set(ex);\n                    }\n                }\n            });\n            \n            sa.add(Subscriptions.create(new Action0() {\n                @Override\n                public void call() {\n                    interruptFlag.set(Thread.currentThread().isInterrupted());\n                    done.countDown();\n                }\n            }));\n            \n            run.countDown();\n            \n            done.await();\n            \n            Assert.assertEquals(null, exception.get());\n            Assert.assertFalse(\"Interrupted?!\", interruptFlag.get());\n        } finally {\n            worker.unsubscribe();\n        }\n    }", "signature": "void testNoSelfInterrupt()", "full_signature": "@Test(timeout = 3000) public void testNoSelfInterrupt()", "class_method_signature": "NewThreadSchedulerTest.testNoSelfInterrupt()", "testcase": true, "constructor": false, "invocations": ["createWorker", "newThread", "schedule", "await", "set", "add", "create", "set", "isInterrupted", "currentThread", "countDown", "countDown", "await", "assertEquals", "get", "assertFalse", "get", "unsubscribe"]}, "focal_class": {"identifier": "NewThreadScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "private static final String THREAD_NAME_PREFIX = \"RxNewThreadScheduler-\";", "modifier": "private static final", "type": "String", "declarator": "THREAD_NAME_PREFIX = \"RxNewThreadScheduler-\"", "var_name": "THREAD_NAME_PREFIX"}, {"original_string": "private static final RxThreadFactory THREAD_FACTORY = new RxThreadFactory(THREAD_NAME_PREFIX);", "modifier": "private static final", "type": "RxThreadFactory", "declarator": "THREAD_FACTORY = new RxThreadFactory(THREAD_NAME_PREFIX)", "var_name": "THREAD_FACTORY"}, {"original_string": "private static final NewThreadScheduler INSTANCE = new NewThreadScheduler();", "modifier": "private static final", "type": "NewThreadScheduler", "declarator": "INSTANCE = new NewThreadScheduler()", "var_name": "INSTANCE"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "static", "return": "NewThreadScheduler", "signature": "NewThreadScheduler instance()", "full_signature": "static NewThreadScheduler instance()", "class_method_signature": "NewThreadScheduler.instance()", "testcase": false, "constructor": false}, {"identifier": "NewThreadScheduler", "parameters": "()", "modifiers": "private", "return": "", "signature": " NewThreadScheduler()", "full_signature": "private  NewThreadScheduler()", "class_method_signature": "NewThreadScheduler.NewThreadScheduler()", "testcase": false, "constructor": true}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "NewThreadScheduler.createWorker()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/schedulers/NewThreadScheduler.java"}, "focal_method": {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "body": "@Override\n    public Worker createWorker() {\n        return new NewThreadWorker(THREAD_FACTORY);\n    }", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "NewThreadScheduler.createWorker()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}