{"test_class": {"identifier": "ZMSUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/utils/ZMSUtilsTest.java"}, "test_case": {"identifier": "testGetProviderResourceGroupRolePrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetProviderResourceGroupRolePrefix() {\n        assertEquals(\"sports.hosted.res_group.hockey.\",\n                ZMSUtils.getProviderResourceGroupRolePrefix(\"sports\", \"hosted\", \"hockey\"));\n        assertEquals(\"sports.hosted.\",\n                ZMSUtils.getProviderResourceGroupRolePrefix(\"sports\", \"hosted\", null));\n    }", "signature": "void testGetProviderResourceGroupRolePrefix()", "full_signature": "@Test public void testGetProviderResourceGroupRolePrefix()", "class_method_signature": "ZMSUtilsTest.testGetProviderResourceGroupRolePrefix()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getProviderResourceGroupRolePrefix", "assertEquals", "getProviderResourceGroupRolePrefix"]}, "focal_class": {"identifier": "ZMSUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZMSUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZMSUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "addAssertion", "parameters": "(Policy policy, String resource, String action, String role,\n            AssertionEffect effect)", "modifiers": "public static", "return": "void", "signature": "void addAssertion(Policy policy, String resource, String action, String role,\n            AssertionEffect effect)", "full_signature": "public static void addAssertion(Policy policy, String resource, String action, String role,\n            AssertionEffect effect)", "class_method_signature": "ZMSUtils.addAssertion(Policy policy, String resource, String action, String role,\n            AssertionEffect effect)", "testcase": false, "constructor": false}, {"identifier": "makeAdminRole", "parameters": "(String domainName, List<String> adminUsers)", "modifiers": "public static", "return": "Role", "signature": "Role makeAdminRole(String domainName, List<String> adminUsers)", "full_signature": "public static Role makeAdminRole(String domainName, List<String> adminUsers)", "class_method_signature": "ZMSUtils.makeAdminRole(String domainName, List<String> adminUsers)", "testcase": false, "constructor": false}, {"identifier": "makeAdminPolicy", "parameters": "(String domainName, Role adminsRole)", "modifiers": "public static", "return": "Policy", "signature": "Policy makeAdminPolicy(String domainName, Role adminsRole)", "full_signature": "public static Policy makeAdminPolicy(String domainName, Role adminsRole)", "class_method_signature": "ZMSUtils.makeAdminPolicy(String domainName, Role adminsRole)", "testcase": false, "constructor": false}, {"identifier": "generateResourceName", "parameters": "(String domainName, String resName, String resType)", "modifiers": "private static", "return": "String", "signature": "String generateResourceName(String domainName, String resName, String resType)", "full_signature": "private static String generateResourceName(String domainName, String resName, String resType)", "class_method_signature": "ZMSUtils.generateResourceName(String domainName, String resName, String resType)", "testcase": false, "constructor": false}, {"identifier": "roleResourceName", "parameters": "(String domainName, String roleName)", "modifiers": "public static", "return": "String", "signature": "String roleResourceName(String domainName, String roleName)", "full_signature": "public static String roleResourceName(String domainName, String roleName)", "class_method_signature": "ZMSUtils.roleResourceName(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "groupResourceName", "parameters": "(String domainName, String groupName)", "modifiers": "public static", "return": "String", "signature": "String groupResourceName(String domainName, String groupName)", "full_signature": "public static String groupResourceName(String domainName, String groupName)", "class_method_signature": "ZMSUtils.groupResourceName(String domainName, String groupName)", "testcase": false, "constructor": false}, {"identifier": "policyResourceName", "parameters": "(String domainName, String policyName)", "modifiers": "public static", "return": "String", "signature": "String policyResourceName(String domainName, String policyName)", "full_signature": "public static String policyResourceName(String domainName, String policyName)", "class_method_signature": "ZMSUtils.policyResourceName(String domainName, String policyName)", "testcase": false, "constructor": false}, {"identifier": "serviceResourceName", "parameters": "(String domainName, String serviceName)", "modifiers": "public static", "return": "String", "signature": "String serviceResourceName(String domainName, String serviceName)", "full_signature": "public static String serviceResourceName(String domainName, String serviceName)", "class_method_signature": "ZMSUtils.serviceResourceName(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "entityResourceName", "parameters": "(String domainName, String serviceName)", "modifiers": "public static", "return": "String", "signature": "String entityResourceName(String domainName, String serviceName)", "full_signature": "public static String entityResourceName(String domainName, String serviceName)", "class_method_signature": "ZMSUtils.entityResourceName(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "removeDomainPrefix", "parameters": "(String objectName, String domainName, String objectPrefix)", "modifiers": "public static", "return": "String", "signature": "String removeDomainPrefix(String objectName, String domainName, String objectPrefix)", "full_signature": "public static String removeDomainPrefix(String objectName, String domainName, String objectPrefix)", "class_method_signature": "ZMSUtils.removeDomainPrefix(String objectName, String domainName, String objectPrefix)", "testcase": false, "constructor": false}, {"identifier": "removeDomainPrefixForService", "parameters": "(String serviceName, String domainName)", "modifiers": "public static", "return": "String", "signature": "String removeDomainPrefixForService(String serviceName, String domainName)", "full_signature": "public static String removeDomainPrefixForService(String serviceName, String domainName)", "class_method_signature": "ZMSUtils.removeDomainPrefixForService(String serviceName, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getTenantResourceGroupRolePrefix", "parameters": "(String provSvcName, String tenantDomain, String resourceGroup)", "modifiers": "public static", "return": "String", "signature": "String getTenantResourceGroupRolePrefix(String provSvcName, String tenantDomain, String resourceGroup)", "full_signature": "public static String getTenantResourceGroupRolePrefix(String provSvcName, String tenantDomain, String resourceGroup)", "class_method_signature": "ZMSUtils.getTenantResourceGroupRolePrefix(String provSvcName, String tenantDomain, String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "getProviderResourceGroupRolePrefix", "parameters": "(String provSvcDomain, String provSvcName, String resourceGroup)", "modifiers": "public static", "return": "String", "signature": "String getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "full_signature": "public static String getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "class_method_signature": "ZMSUtils.getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "getTrustedResourceGroupRolePrefix", "parameters": "(String provSvcDomain, String provSvcName,\n            String tenantDomain, String resourceGroup)", "modifiers": "public static", "return": "String", "signature": "String getTrustedResourceGroupRolePrefix(String provSvcDomain, String provSvcName,\n            String tenantDomain, String resourceGroup)", "full_signature": "public static String getTrustedResourceGroupRolePrefix(String provSvcDomain, String provSvcName,\n            String tenantDomain, String resourceGroup)", "class_method_signature": "ZMSUtils.getTrustedResourceGroupRolePrefix(String provSvcDomain, String provSvcName,\n            String tenantDomain, String resourceGroup)", "testcase": false, "constructor": false}, {"identifier": "convertRoleMembersToMembers", "parameters": "(List<RoleMember> members)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> convertRoleMembersToMembers(List<RoleMember> members)", "full_signature": "public static List<String> convertRoleMembersToMembers(List<RoleMember> members)", "class_method_signature": "ZMSUtils.convertRoleMembersToMembers(List<RoleMember> members)", "testcase": false, "constructor": false}, {"identifier": "convertMembersToRoleMembers", "parameters": "(List<String> members)", "modifiers": "public static", "return": "List<RoleMember>", "signature": "List<RoleMember> convertMembersToRoleMembers(List<String> members)", "full_signature": "public static List<RoleMember> convertMembersToRoleMembers(List<String> members)", "class_method_signature": "ZMSUtils.convertMembersToRoleMembers(List<String> members)", "testcase": false, "constructor": false}, {"identifier": "getAuditLogMsgBuilder", "parameters": "(ResourceContext ctx,\n            AuditLogger auditLogger, String domainName, String auditRef, String caller,\n            String method)", "modifiers": "public static", "return": "AuditLogMsgBuilder", "signature": "AuditLogMsgBuilder getAuditLogMsgBuilder(ResourceContext ctx,\n            AuditLogger auditLogger, String domainName, String auditRef, String caller,\n            String method)", "full_signature": "public static AuditLogMsgBuilder getAuditLogMsgBuilder(ResourceContext ctx,\n            AuditLogger auditLogger, String domainName, String auditRef, String caller,\n            String method)", "class_method_signature": "ZMSUtils.getAuditLogMsgBuilder(ResourceContext ctx,\n            AuditLogger auditLogger, String domainName, String auditRef, String caller,\n            String method)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(int code, String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException error(int code, String msg, String caller)", "full_signature": "public static RuntimeException error(int code, String msg, String caller)", "class_method_signature": "ZMSUtils.error(int code, String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "requestError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException requestError(String msg, String caller)", "full_signature": "public static RuntimeException requestError(String msg, String caller)", "class_method_signature": "ZMSUtils.requestError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "unauthorizedError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException unauthorizedError(String msg, String caller)", "full_signature": "public static RuntimeException unauthorizedError(String msg, String caller)", "class_method_signature": "ZMSUtils.unauthorizedError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "forbiddenError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException forbiddenError(String msg, String caller)", "full_signature": "public static RuntimeException forbiddenError(String msg, String caller)", "class_method_signature": "ZMSUtils.forbiddenError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "notFoundError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException notFoundError(String msg, String caller)", "full_signature": "public static RuntimeException notFoundError(String msg, String caller)", "class_method_signature": "ZMSUtils.notFoundError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "internalServerError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException internalServerError(String msg, String caller)", "full_signature": "public static RuntimeException internalServerError(String msg, String caller)", "class_method_signature": "ZMSUtils.internalServerError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "quotaLimitError", "parameters": "(String msg, String caller)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException quotaLimitError(String msg, String caller)", "full_signature": "public static RuntimeException quotaLimitError(String msg, String caller)", "class_method_signature": "ZMSUtils.quotaLimitError(String msg, String caller)", "testcase": false, "constructor": false}, {"identifier": "emitMonmetricError", "parameters": "(int errorCode, String caller)", "modifiers": "public static", "return": "boolean", "signature": "boolean emitMonmetricError(int errorCode, String caller)", "full_signature": "public static boolean emitMonmetricError(int errorCode, String caller)", "class_method_signature": "ZMSUtils.emitMonmetricError(int errorCode, String caller)", "testcase": false, "constructor": false}, {"identifier": "threadSleep", "parameters": "(long millis)", "modifiers": "public static", "return": "void", "signature": "void threadSleep(long millis)", "full_signature": "public static void threadSleep(long millis)", "class_method_signature": "ZMSUtils.threadSleep(long millis)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(final String value, boolean defaultValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean parseBoolean(final String value, boolean defaultValue)", "full_signature": "public static boolean parseBoolean(final String value, boolean defaultValue)", "class_method_signature": "ZMSUtils.parseBoolean(final String value, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "principalType", "parameters": "(final String memberName, final String userDomainPrefix,\n                                               final List<String> addlUserCheckDomainPrefixList)", "modifiers": "public static", "return": "Principal.Type", "signature": "Principal.Type principalType(final String memberName, final String userDomainPrefix,\n                                               final List<String> addlUserCheckDomainPrefixList)", "full_signature": "public static Principal.Type principalType(final String memberName, final String userDomainPrefix,\n                                               final List<String> addlUserCheckDomainPrefixList)", "class_method_signature": "ZMSUtils.principalType(final String memberName, final String userDomainPrefix,\n                                               final List<String> addlUserCheckDomainPrefixList)", "testcase": false, "constructor": false}, {"identifier": "isUserDomainPrincipal", "parameters": "(final String memberName, final String userDomainPrefix,\n            final List<String> addlUserCheckDomainPrefixList)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUserDomainPrincipal(final String memberName, final String userDomainPrefix,\n            final List<String> addlUserCheckDomainPrefixList)", "full_signature": "public static boolean isUserDomainPrincipal(final String memberName, final String userDomainPrefix,\n            final List<String> addlUserCheckDomainPrefixList)", "class_method_signature": "ZMSUtils.isUserDomainPrincipal(final String memberName, final String userDomainPrefix,\n            final List<String> addlUserCheckDomainPrefixList)", "testcase": false, "constructor": false}, {"identifier": "extractObjectName", "parameters": "(String domainName, String fullName, String objType)", "modifiers": "public static", "return": "String", "signature": "String extractObjectName(String domainName, String fullName, String objType)", "full_signature": "public static String extractObjectName(String domainName, String fullName, String objType)", "class_method_signature": "ZMSUtils.extractObjectName(String domainName, String fullName, String objType)", "testcase": false, "constructor": false}, {"identifier": "extractRoleName", "parameters": "(String domainName, String fullRoleName)", "modifiers": "public static", "return": "String", "signature": "String extractRoleName(String domainName, String fullRoleName)", "full_signature": "public static String extractRoleName(String domainName, String fullRoleName)", "class_method_signature": "ZMSUtils.extractRoleName(String domainName, String fullRoleName)", "testcase": false, "constructor": false}, {"identifier": "extractGroupName", "parameters": "(String domainName, String fullGroupName)", "modifiers": "public static", "return": "String", "signature": "String extractGroupName(String domainName, String fullGroupName)", "full_signature": "public static String extractGroupName(String domainName, String fullGroupName)", "class_method_signature": "ZMSUtils.extractGroupName(String domainName, String fullGroupName)", "testcase": false, "constructor": false}, {"identifier": "extractPolicyName", "parameters": "(String domainName, String fullPolicyName)", "modifiers": "public static", "return": "String", "signature": "String extractPolicyName(String domainName, String fullPolicyName)", "full_signature": "public static String extractPolicyName(String domainName, String fullPolicyName)", "class_method_signature": "ZMSUtils.extractPolicyName(String domainName, String fullPolicyName)", "testcase": false, "constructor": false}, {"identifier": "extractServiceName", "parameters": "(String domainName, String fullServiceName)", "modifiers": "public static", "return": "String", "signature": "String extractServiceName(String domainName, String fullServiceName)", "full_signature": "public static String extractServiceName(String domainName, String fullServiceName)", "class_method_signature": "ZMSUtils.extractServiceName(String domainName, String fullServiceName)", "testcase": false, "constructor": false}, {"identifier": "isUserAuthorityFilterValid", "parameters": "(Authority userAuthority, final String filterList, final String memberName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUserAuthorityFilterValid(Authority userAuthority, final String filterList, final String memberName)", "full_signature": "public static boolean isUserAuthorityFilterValid(Authority userAuthority, final String filterList, final String memberName)", "class_method_signature": "ZMSUtils.isUserAuthorityFilterValid(Authority userAuthority, final String filterList, final String memberName)", "testcase": false, "constructor": false}, {"identifier": "combineUserAuthorityFilters", "parameters": "(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "modifiers": "public static", "return": "String", "signature": "String combineUserAuthorityFilters(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "full_signature": "public static String combineUserAuthorityFilters(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "class_method_signature": "ZMSUtils.combineUserAuthorityFilters(final String roleUserAuthorityFilter, final String domainUserAuthorityFilter)", "testcase": false, "constructor": false}, {"identifier": "lowerDomainInResource", "parameters": "(String resource)", "modifiers": "public static", "return": "String", "signature": "String lowerDomainInResource(String resource)", "full_signature": "public static String lowerDomainInResource(String resource)", "class_method_signature": "ZMSUtils.lowerDomainInResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "userAuthorityAttrMissing", "parameters": "(final String origAttrList, final String checkAttrList)", "modifiers": "public static", "return": "boolean", "signature": "boolean userAuthorityAttrMissing(final String origAttrList, final String checkAttrList)", "full_signature": "public static boolean userAuthorityAttrMissing(final String origAttrList, final String checkAttrList)", "class_method_signature": "ZMSUtils.userAuthorityAttrMissing(final String origAttrList, final String checkAttrList)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/utils/ZMSUtils.java"}, "focal_method": {"identifier": "getProviderResourceGroupRolePrefix", "parameters": "(String provSvcDomain, String provSvcName, String resourceGroup)", "modifiers": "public static", "return": "String", "body": "public static String getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup) {\n        \n        StringBuilder rolePrefix = new StringBuilder(256);\n        rolePrefix.append(provSvcDomain).append('.').append(provSvcName).append('.');\n        if (resourceGroup != null) {\n            rolePrefix.append(\"res_group.\").append(resourceGroup).append('.');\n        }\n        return rolePrefix.toString();\n    }", "signature": "String getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "full_signature": "public static String getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "class_method_signature": "ZMSUtils.getProviderResourceGroupRolePrefix(String provSvcDomain, String provSvcName, String resourceGroup)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}