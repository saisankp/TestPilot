{"test_class": {"identifier": "FileToArchiveWriterTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private List<String> originalContentOfZip = Arrays.asList(\"firstFile.txt\",\"secondFile.txt\",\"inner/thirdFile.txt\");", "modifier": "private", "type": "List<String>", "declarator": "originalContentOfZip = Arrays.asList(\"firstFile.txt\",\"secondFile.txt\",\"inner/thirdFile.txt\")", "var_name": "originalContentOfZip"}, {"original_string": "private File archiveToAddFileIn;", "modifier": "private", "type": "File", "declarator": "archiveToAddFileIn", "var_name": "archiveToAddFileIn"}, {"original_string": "private File fileToAddIntoArchive;", "modifier": "private", "type": "File", "declarator": "fileToAddIntoArchive", "var_name": "fileToAddIntoArchive"}, {"original_string": "private String contentOfInnerFile = \"content of inner file\";", "modifier": "private", "type": "String", "declarator": "contentOfInnerFile = \"content of inner file\"", "var_name": "contentOfInnerFile"}, {"original_string": "private Path innerPath;", "modifier": "private", "type": "Path", "declarator": "innerPath", "var_name": "innerPath"}, {"original_string": "private FileToArchiveWriter fileToArchiveWriter;", "modifier": "private", "type": "FileToArchiveWriter", "declarator": "fileToArchiveWriter", "var_name": "fileToArchiveWriter"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/outputHandlers/FileToArchiveWriterTest.java"}, "test_case": {"identifier": "testAddFileToArchive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddFileToArchive() throws Exception {\n        fileToArchiveWriter.addFileToArchive(fileToAddIntoArchive.toPath(), archiveToAddFileIn.toPath(), innerPath);\n        List<String> filesInZip = listContentsOfZip(archiveToAddFileIn);\n        assertThat(filesInZip.stream().map(Paths::get)).contains(innerPath);\n        originalContentOfZip.forEach(\n                f -> assertThat(filesInZip).contains(f));\n\n        String contentOfAddedFile = getContentOfEntryInZip(archiveToAddFileIn, innerPath.toString());\n        assertThat(contentOfAddedFile).isEqualTo(contentOfInnerFile);\n\n    }", "signature": "void testAddFileToArchive()", "full_signature": "@Test public void testAddFileToArchive()", "class_method_signature": "FileToArchiveWriterTest.testAddFileToArchive()", "testcase": true, "constructor": false, "invocations": ["addFileToArchive", "toPath", "toPath", "listContentsOfZip", "contains", "assertThat", "map", "stream", "forEach", "contains", "assertThat", "getContentOfEntryInZip", "toString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "FileToArchiveWriter", "superclass": "extends AbstractOutputHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileToArchiveWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileToArchiveWriter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String INSTRUCTIONS_KEY = \"instructions\";", "modifier": "private static final", "type": "String", "declarator": "INSTRUCTIONS_KEY = \"instructions\"", "var_name": "INSTRUCTIONS_KEY"}, {"original_string": "private final List<FileToArchiveWriterInstruction> writeToArchiveInstructions = new ArrayList<>();", "modifier": "private final", "type": "List<FileToArchiveWriterInstruction>", "declarator": "writeToArchiveInstructions = new ArrayList<>()", "var_name": "writeToArchiveInstructions"}], "methods": [{"identifier": "FileToArchiveWriter", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileToArchiveWriter()", "full_signature": "public  FileToArchiveWriter()", "class_method_signature": "FileToArchiveWriter.FileToArchiveWriter()", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(Map<String, IAttachable> generatedOutput)", "modifiers": "@Override public", "return": "void", "signature": "void handle(Map<String, IAttachable> generatedOutput)", "full_signature": "@Override public void handle(Map<String, IAttachable> generatedOutput)", "class_method_signature": "FileToArchiveWriter.handle(Map<String, IAttachable> generatedOutput)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "FileToArchiveWriter.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}, {"identifier": "handleWriteToArchiveInstructions", "parameters": "(FileToArchiveWriterInstruction instruction, Map<String, IAttachable> generatedOutput)", "modifiers": "private", "return": "void", "signature": "void handleWriteToArchiveInstructions(FileToArchiveWriterInstruction instruction, Map<String, IAttachable> generatedOutput)", "full_signature": "private void handleWriteToArchiveInstructions(FileToArchiveWriterInstruction instruction, Map<String, IAttachable> generatedOutput)", "class_method_signature": "FileToArchiveWriter.handleWriteToArchiveInstructions(FileToArchiveWriterInstruction instruction, Map<String, IAttachable> generatedOutput)", "testcase": false, "constructor": false}, {"identifier": "addFileToArchive", "parameters": "(Path sourcePath, Path zipFile, Path pathInArchive)", "modifiers": "public", "return": "void", "signature": "void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "full_signature": "public void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "class_method_signature": "FileToArchiveWriter.addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "testcase": false, "constructor": false}, {"identifier": "addNewEntryToZipFile", "parameters": "(Path zipFile, Path pathInArchive, Path sourcePath)", "modifiers": "private", "return": "void", "signature": "void addNewEntryToZipFile(Path zipFile, Path pathInArchive, Path sourcePath)", "full_signature": "private void addNewEntryToZipFile(Path zipFile, Path pathInArchive, Path sourcePath)", "class_method_signature": "FileToArchiveWriter.addNewEntryToZipFile(Path zipFile, Path pathInArchive, Path sourcePath)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/outputHandlers/FileToArchiveWriter.java"}, "focal_method": {"identifier": "addFileToArchive", "parameters": "(Path sourcePath, Path zipFile, Path pathInArchive)", "modifiers": "public", "return": "void", "body": "public void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive) {\n        if (pathInArchive == null){\n            throw new ExecutionException(\"The argument pathInArchive was empty\");\n        }\n        if(sourcePath == null) {\n            throw new ExecutionException(\"The argument sourcePath was empty\");\n        }\n\n        if(! sourcePath.toFile().exists()){\n            throw new ExecutionException(\"Source file=[\"+sourcePath+\"] does not exist\");\n        }\n\n        try {\n            addNewEntryToZipFile(zipFile, pathInArchive, sourcePath);\n        } catch (IOException | URISyntaxException e) {\n            throw new ExecutionException(\"The file=[\" + sourcePath + \"] could not be added to the archive=[\" + zipFile + \"]\", e);\n        }\n    }", "signature": "void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "full_signature": "public void addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "class_method_signature": "FileToArchiveWriter.addFileToArchive(Path sourcePath, Path zipFile, Path pathInArchive)", "testcase": false, "constructor": false, "invocations": ["exists", "toFile", "addNewEntryToZipFile"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}