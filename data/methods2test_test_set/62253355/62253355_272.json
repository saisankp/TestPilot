{"test_class": {"identifier": "CommitRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private static final String USER_IRI = \"http://mobi.com/users/tester\";", "modifier": "private static final", "type": "String", "declarator": "USER_IRI = \"http://mobi.com/users/tester\"", "var_name": "USER_IRI"}, {"original_string": "private static final String RECORD_IRI = \"http://mobi.com/records/test\";", "modifier": "private static final", "type": "String", "declarator": "RECORD_IRI = \"http://mobi.com/records/test\"", "var_name": "RECORD_IRI"}, {"original_string": "private static final String ERROR_IRI = \"http://mobi.com/error\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_IRI = \"http://mobi.com/error\"", "var_name": "ERROR_IRI"}, {"original_string": "private static final String[] COMMIT_IRIS = new String[] {\n            \"http://mobi.com/commits/0\",\n            \"http://mobi.com/commits/1\",\n            \"http://mobi.com/commits/2\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "COMMIT_IRIS = new String[] {\n            \"http://mobi.com/commits/0\",\n            \"http://mobi.com/commits/1\",\n            \"http://mobi.com/commits/2\"\n    }", "var_name": "COMMIT_IRIS"}, {"original_string": "private static final String[] ENTITY_IRI = new String[] {\n            \"http://mobi.com/commits/1\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "ENTITY_IRI = new String[] {\n            \"http://mobi.com/commits/1\"\n    }", "var_name": "ENTITY_IRI"}, {"original_string": "private CommitRest rest;", "modifier": "private", "type": "CommitRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private OrmFactory<Record> recordFactory;", "modifier": "private", "type": "OrmFactory<Record>", "declarator": "recordFactory", "var_name": "recordFactory"}, {"original_string": "private Record testRecord;", "modifier": "private", "type": "Record", "declarator": "testRecord", "var_name": "testRecord"}, {"original_string": "private List<Commit> entityCommits;", "modifier": "private", "type": "List<Commit>", "declarator": "entityCommits", "var_name": "entityCommits"}, {"original_string": "private List<Commit> testCommits;", "modifier": "private", "type": "List<Commit>", "declarator": "testCommits", "var_name": "testCommits"}, {"original_string": "private User user;", "modifier": "private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "private IRI typeIRI;", "modifier": "private", "type": "IRI", "declarator": "typeIRI", "var_name": "typeIRI"}, {"original_string": "@Mock\n    private CatalogManager catalogManager;", "modifier": "@Mock\n    private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private SesameTransformer transformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private PaginatedSearchResults<Record> results;", "modifier": "@Mock\n    private", "type": "PaginatedSearchResults<Record>", "declarator": "results", "var_name": "results"}, {"original_string": "@Mock\n    private Conflict conflict;", "modifier": "@Mock\n    private", "type": "Conflict", "declarator": "conflict", "var_name": "conflict"}, {"original_string": "@Mock\n    private Difference difference;", "modifier": "@Mock\n    private", "type": "Difference", "declarator": "difference", "var_name": "difference"}, {"original_string": "@Mock\n    private BNodeService bNodeService;", "modifier": "@Mock\n    private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}], "file": "com.mobi.catalog.rest/src/test/java/com/mobi/catalog/rest/CommitRestTest.java"}, "test_case": {"identifier": "getCommitWithErrorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCommitWithErrorTest() {\n        // Setup:\n        when(catalogManager.getCommit(vf.createIRI(ERROR_IRI))).thenThrow(new IllegalArgumentException());\n\n        Response response = target().path(\"commits/\" + encode(ERROR_IRI))\n                .request().get();\n        assertEquals(response.getStatus(), 500);\n    }", "signature": "void getCommitWithErrorTest()", "full_signature": "@Test public void getCommitWithErrorTest()", "class_method_signature": "CommitRestTest.getCommitWithErrorTest()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getCommit", "createIRI", "get", "request", "path", "target", "encode", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "CommitRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CommitRest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CommitRest.class)", "var_name": "logger"}, {"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private BNodeService bNodeService;", "modifier": "private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "private CatalogManager catalogManager;", "modifier": "private", "type": "CatalogManager", "declarator": "catalogManager", "var_name": "catalogManager"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "protected EngineManager engineManager;", "modifier": "protected", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}], "methods": [{"identifier": "setbNodeService", "parameters": "(BNodeService bNodeService)", "modifiers": "@Reference", "return": "void", "signature": "void setbNodeService(BNodeService bNodeService)", "full_signature": "@Reference void setbNodeService(BNodeService bNodeService)", "class_method_signature": "CommitRest.setbNodeService(BNodeService bNodeService)", "testcase": false, "constructor": false}, {"identifier": "setCatalogManager", "parameters": "(CatalogManager catalogManager)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogManager(CatalogManager catalogManager)", "full_signature": "@Reference void setCatalogManager(CatalogManager catalogManager)", "class_method_signature": "CommitRest.setCatalogManager(CatalogManager catalogManager)", "testcase": false, "constructor": false}, {"identifier": "setTransformer", "parameters": "(SesameTransformer transformer)", "modifiers": "@Reference", "return": "void", "signature": "void setTransformer(SesameTransformer transformer)", "full_signature": "@Reference void setTransformer(SesameTransformer transformer)", "class_method_signature": "CommitRest.setTransformer(SesameTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "CommitRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "CommitRest.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "getCommit", "parameters": "(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "modifiers": "@GET @Path(\"{commitId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public", "return": "Response", "signature": "Response getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "full_signature": "@GET @Path(\"{commitId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public Response getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "class_method_signature": "CommitRest.getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "testcase": false, "constructor": false}, {"identifier": "getCommitHistory", "parameters": "(@Context UriInfo uriInfo,\n                              @PathParam(\"commitId\") String commitId,\n                              @QueryParam(\"targetId\") String targetId,\n                              @QueryParam(\"entityId\") String entityId,\n                              @QueryParam(\"offset\") int offset,\n                              @QueryParam(\"limit\") int limit)", "modifiers": "@GET @Path(\"{commitId}/history\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit history specified by the provided ID.\") public", "return": "Response", "signature": "Response getCommitHistory(@Context UriInfo uriInfo,\n                              @PathParam(\"commitId\") String commitId,\n                              @QueryParam(\"targetId\") String targetId,\n                              @QueryParam(\"entityId\") String entityId,\n                              @QueryParam(\"offset\") int offset,\n                              @QueryParam(\"limit\") int limit)", "full_signature": "@GET @Path(\"{commitId}/history\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit history specified by the provided ID.\") public Response getCommitHistory(@Context UriInfo uriInfo,\n                              @PathParam(\"commitId\") String commitId,\n                              @QueryParam(\"targetId\") String targetId,\n                              @QueryParam(\"entityId\") String entityId,\n                              @QueryParam(\"offset\") int offset,\n                              @QueryParam(\"limit\") int limit)", "class_method_signature": "CommitRest.getCommitHistory(@Context UriInfo uriInfo,\n                              @PathParam(\"commitId\") String commitId,\n                              @QueryParam(\"targetId\") String targetId,\n                              @QueryParam(\"entityId\") String entityId,\n                              @QueryParam(\"offset\") int offset,\n                              @QueryParam(\"limit\") int limit)", "testcase": false, "constructor": false}, {"identifier": "getCompiledResource", "parameters": "(@PathParam(\"commitId\") String commitId,\n                                 @QueryParam(\"entityId\") String entityId)", "modifiers": "@GET @Path(\"{commitId}/resource\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public", "return": "Response", "signature": "Response getCompiledResource(@PathParam(\"commitId\") String commitId,\n                                 @QueryParam(\"entityId\") String entityId)", "full_signature": "@GET @Path(\"{commitId}/resource\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public Response getCompiledResource(@PathParam(\"commitId\") String commitId,\n                                 @QueryParam(\"entityId\") String entityId)", "class_method_signature": "CommitRest.getCompiledResource(@PathParam(\"commitId\") String commitId,\n                                 @QueryParam(\"entityId\") String entityId)", "testcase": false, "constructor": false}, {"identifier": "getDifference", "parameters": "(@PathParam(\"sourceId\") String sourceId,\n                                  @QueryParam(\"targetId\") String targetId,\n                                  @DefaultValue(\"jsonld\") @QueryParam(\"format\") String rdfFormat)", "modifiers": "@GET @Path(\"{sourceId}/difference\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Difference of the two specified Commits.\") public", "return": "Response", "signature": "Response getDifference(@PathParam(\"sourceId\") String sourceId,\n                                  @QueryParam(\"targetId\") String targetId,\n                                  @DefaultValue(\"jsonld\") @QueryParam(\"format\") String rdfFormat)", "full_signature": "@GET @Path(\"{sourceId}/difference\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Difference of the two specified Commits.\") public Response getDifference(@PathParam(\"sourceId\") String sourceId,\n                                  @QueryParam(\"targetId\") String targetId,\n                                  @DefaultValue(\"jsonld\") @QueryParam(\"format\") String rdfFormat)", "class_method_signature": "CommitRest.getDifference(@PathParam(\"sourceId\") String sourceId,\n                                  @QueryParam(\"targetId\") String targetId,\n                                  @DefaultValue(\"jsonld\") @QueryParam(\"format\") String rdfFormat)", "testcase": false, "constructor": false}], "file": "com.mobi.catalog.rest/src/main/java/com/mobi/catalog/rest/CommitRest.java"}, "focal_method": {"identifier": "getCommit", "parameters": "(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "modifiers": "@GET @Path(\"{commitId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public", "return": "Response", "body": "@GET\n    @Path(\"{commitId}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Retrieves the Commit specified by the provided ID.\")\n    public Response getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format) {\n        long start = System.currentTimeMillis();\n        try {\n            Optional<Commit> optCommit = catalogManager.getCommit(vf.createIRI(commitId));\n\n            if (optCommit.isPresent()) {\n                return createCommitResponse(optCommit.get(), transformer, bNodeService);\n            } else {\n                return Response.status(Response.Status.NOT_FOUND).build();\n            }\n        } finally {\n            logger.trace(\"getCommit took {}ms\", System.currentTimeMillis() - start);\n        }\n    }", "signature": "Response getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "full_signature": "@GET @Path(\"{commitId}\") @Produces(MediaType.APPLICATION_JSON) @RolesAllowed(\"user\") @ApiOperation(\"Retrieves the Commit specified by the provided ID.\") public Response getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "class_method_signature": "CommitRest.getCommit(@PathParam(\"commitId\") String commitId,\n                       @DefaultValue(\"jsonld\") @QueryParam(\"format\") String format)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getCommit", "createIRI", "isPresent", "createCommitResponse", "get", "build", "status", "trace", "currentTimeMillis"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}