{"test_class": {"identifier": "ServerConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/config/ServerConfigTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        ServerConfig config1 = new ServerConfig();\n        Assert.assertTrue(config1.equals(config1));\n        Assert.assertFalse(config1.equals(null));\n        Assert.assertFalse(config1.equals(\"\"));\n\n        ServerConfig config2 = new ServerConfig();\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setHost(\"127.0.0.1\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setHost(\"127.0.0.2\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setHost(\"127.0.0.1\");\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setPort(1234);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setPort(1235);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setPort(1234);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setProtocol(\"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setProtocol(\"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setProtocol(\"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ServerConfigTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "setHost", "assertFalse", "equals", "setHost", "assertFalse", "equals", "setHost", "assertTrue", "equals", "setPort", "assertFalse", "equals", "setPort", "assertFalse", "equals", "setPort", "assertTrue", "equals", "setProtocol", "assertFalse", "equals", "setProtocol", "assertFalse", "equals", "setProtocol", "assertTrue", "equals"]}, "focal_class": {"identifier": "ServerConfig", "superclass": "extends AbstractIdConfig", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long                 serialVersionUID = -574374673831680403L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -574374673831680403L", "var_name": "serialVersionUID"}, {"original_string": "protected String                          protocol         = getStringValue(DEFAULT_PROTOCOL);", "modifier": "protected", "type": "String", "declarator": "protocol         = getStringValue(DEFAULT_PROTOCOL)", "var_name": "protocol"}, {"original_string": "protected String                          host             = getStringValue(SERVER_HOST);", "modifier": "protected", "type": "String", "declarator": "host             = getStringValue(SERVER_HOST)", "var_name": "host"}, {"original_string": "protected int                             port             = getIntValue(SERVER_PORT_START);", "modifier": "protected", "type": "int", "declarator": "port             = getIntValue(SERVER_PORT_START)", "var_name": "port"}, {"original_string": "protected String                          contextPath      = getStringValue(SERVER_CONTEXT_PATH);", "modifier": "protected", "type": "String", "declarator": "contextPath      = getStringValue(SERVER_CONTEXT_PATH)", "var_name": "contextPath"}, {"original_string": "protected int                             ioThreads        = getIntValue(SERVER_IOTHREADS);", "modifier": "protected", "type": "int", "declarator": "ioThreads        = getIntValue(SERVER_IOTHREADS)", "var_name": "ioThreads"}, {"original_string": "protected String                          threadPoolType   = getStringValue(SERVER_POOL_TYPE);", "modifier": "protected", "type": "String", "declarator": "threadPoolType   = getStringValue(SERVER_POOL_TYPE)", "var_name": "threadPoolType"}, {"original_string": "protected int                             coreThreads      = getIntValue(SERVER_POOL_CORE);", "modifier": "protected", "type": "int", "declarator": "coreThreads      = getIntValue(SERVER_POOL_CORE)", "var_name": "coreThreads"}, {"original_string": "protected int                             maxThreads       = getIntValue(SERVER_POOL_MAX);", "modifier": "protected", "type": "int", "declarator": "maxThreads       = getIntValue(SERVER_POOL_MAX)", "var_name": "maxThreads"}, {"original_string": "protected boolean                         telnet           = getBooleanValue(SERVER_TELNET);", "modifier": "protected", "type": "boolean", "declarator": "telnet           = getBooleanValue(SERVER_TELNET)", "var_name": "telnet"}, {"original_string": "protected String                          queueType        = getStringValue(SERVER_POOL_QUEUE_TYPE);", "modifier": "protected", "type": "String", "declarator": "queueType        = getStringValue(SERVER_POOL_QUEUE_TYPE)", "var_name": "queueType"}, {"original_string": "protected int                             queues           = getIntValue(SERVER_POOL_QUEUE);", "modifier": "protected", "type": "int", "declarator": "queues           = getIntValue(SERVER_POOL_QUEUE)", "var_name": "queues"}, {"original_string": "protected int                             aliveTime        = getIntValue(SERVER_POOL_ALIVETIME);", "modifier": "protected", "type": "int", "declarator": "aliveTime        = getIntValue(SERVER_POOL_ALIVETIME)", "var_name": "aliveTime"}, {"original_string": "protected boolean                         preStartCore     = getBooleanValue(SERVER_POOL_PRE_START);", "modifier": "protected", "type": "boolean", "declarator": "preStartCore     = getBooleanValue(SERVER_POOL_PRE_START)", "var_name": "preStartCore"}, {"original_string": "protected int                             accepts          = getIntValue(SERVER_ACCEPTS);", "modifier": "protected", "type": "int", "declarator": "accepts          = getIntValue(SERVER_ACCEPTS)", "var_name": "accepts"}, {"original_string": "@Deprecated\n    protected int                             payload          = getIntValue(TRANSPORT_PAYLOAD_MAX);", "modifier": "@Deprecated\n    protected", "type": "int", "declarator": "payload          = getIntValue(TRANSPORT_PAYLOAD_MAX)", "var_name": "payload"}, {"original_string": "protected String                          serialization    = getStringValue(DEFAULT_SERIALIZATION);", "modifier": "protected", "type": "String", "declarator": "serialization    = getStringValue(DEFAULT_SERIALIZATION)", "var_name": "serialization"}, {"original_string": "@Deprecated\n    protected String                          dispatcher       = RpcConstants.DISPATCHER_MESSAGE;", "modifier": "@Deprecated\n    protected", "type": "String", "declarator": "dispatcher       = RpcConstants.DISPATCHER_MESSAGE", "var_name": "dispatcher"}, {"original_string": "protected Map<String, String>             parameters;", "modifier": "protected", "type": "Map<String, String>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "protected String                          virtualHost;", "modifier": "protected", "type": "String", "declarator": "virtualHost", "var_name": "virtualHost"}, {"original_string": "protected Integer                         virtualPort;", "modifier": "protected", "type": "Integer", "declarator": "virtualPort", "var_name": "virtualPort"}, {"original_string": "protected transient List<ChannelListener> onConnect;", "modifier": "protected transient", "type": "List<ChannelListener>", "declarator": "onConnect", "var_name": "onConnect"}, {"original_string": "protected boolean                         epoll            = getBooleanValue(SERVER_EPOLL);", "modifier": "protected", "type": "boolean", "declarator": "epoll            = getBooleanValue(SERVER_EPOLL)", "var_name": "epoll"}, {"original_string": "protected boolean                         daemon           = getBooleanValue(SERVER_DAEMON);", "modifier": "protected", "type": "boolean", "declarator": "daemon           = getBooleanValue(SERVER_DAEMON)", "var_name": "daemon"}, {"original_string": "protected boolean                         adaptivePort     = getBooleanValue(SEVER_ADAPTIVE_PORT);", "modifier": "protected", "type": "boolean", "declarator": "adaptivePort     = getBooleanValue(SEVER_ADAPTIVE_PORT)", "var_name": "adaptivePort"}, {"original_string": "protected String                          transport        = getStringValue(DEFAULT_TRANSPORT);", "modifier": "protected", "type": "String", "declarator": "transport        = getStringValue(DEFAULT_TRANSPORT)", "var_name": "transport"}, {"original_string": "protected boolean                         autoStart        = getBooleanValue(SEVER_AUTO_START);", "modifier": "protected", "type": "boolean", "declarator": "autoStart        = getBooleanValue(SEVER_AUTO_START)", "var_name": "autoStart"}, {"original_string": "protected int                             stopTimeout      = getIntValue(SERVER_STOP_TIMEOUT);", "modifier": "protected", "type": "int", "declarator": "stopTimeout      = getIntValue(SERVER_STOP_TIMEOUT)", "var_name": "stopTimeout"}, {"original_string": "protected boolean                         keepAlive        = getBooleanValue(TRANSPORT_SERVER_KEEPALIVE);", "modifier": "protected", "type": "boolean", "declarator": "keepAlive        = getBooleanValue(TRANSPORT_SERVER_KEEPALIVE)", "var_name": "keepAlive"}, {"original_string": "private transient volatile Server         server;", "modifier": "private transient volatile", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private transient String                  boundHost;", "modifier": "private transient", "type": "String", "declarator": "boundHost", "var_name": "boundHost"}], "methods": [{"identifier": "buildIfAbsent", "parameters": "()", "modifiers": "public synchronized", "return": "Server", "signature": "Server buildIfAbsent()", "full_signature": "public synchronized Server buildIfAbsent()", "class_method_signature": "ServerConfig.buildIfAbsent()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void destroy()", "full_signature": "public synchronized void destroy()", "class_method_signature": "ServerConfig.destroy()", "testcase": false, "constructor": false}, {"identifier": "getProtocol", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProtocol()", "full_signature": "public String getProtocol()", "class_method_signature": "ServerConfig.getProtocol()", "testcase": false, "constructor": false}, {"identifier": "setProtocol", "parameters": "(String protocol)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setProtocol(String protocol)", "full_signature": "public ServerConfig setProtocol(String protocol)", "class_method_signature": "ServerConfig.setProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "ServerConfig.getHost()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(String host)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setHost(String host)", "full_signature": "public ServerConfig setHost(String host)", "class_method_signature": "ServerConfig.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "ServerConfig.getPort()", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setPort(int port)", "full_signature": "public ServerConfig setPort(int port)", "class_method_signature": "ServerConfig.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "getContextPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContextPath()", "full_signature": "public String getContextPath()", "class_method_signature": "ServerConfig.getContextPath()", "testcase": false, "constructor": false}, {"identifier": "setContextPath", "parameters": "(String contextPath)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setContextPath(String contextPath)", "full_signature": "public ServerConfig setContextPath(String contextPath)", "class_method_signature": "ServerConfig.setContextPath(String contextPath)", "testcase": false, "constructor": false}, {"identifier": "getIoThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIoThreads()", "full_signature": "public int getIoThreads()", "class_method_signature": "ServerConfig.getIoThreads()", "testcase": false, "constructor": false}, {"identifier": "setIoThreads", "parameters": "(int ioThreads)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setIoThreads(int ioThreads)", "full_signature": "public ServerConfig setIoThreads(int ioThreads)", "class_method_signature": "ServerConfig.setIoThreads(int ioThreads)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getThreadPoolType()", "full_signature": "public String getThreadPoolType()", "class_method_signature": "ServerConfig.getThreadPoolType()", "testcase": false, "constructor": false}, {"identifier": "setThreadPoolType", "parameters": "(String threadPoolType)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setThreadPoolType(String threadPoolType)", "full_signature": "public ServerConfig setThreadPoolType(String threadPoolType)", "class_method_signature": "ServerConfig.setThreadPoolType(String threadPoolType)", "testcase": false, "constructor": false}, {"identifier": "getCoreThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCoreThreads()", "full_signature": "public int getCoreThreads()", "class_method_signature": "ServerConfig.getCoreThreads()", "testcase": false, "constructor": false}, {"identifier": "setCoreThreads", "parameters": "(int coreThreads)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setCoreThreads(int coreThreads)", "full_signature": "public ServerConfig setCoreThreads(int coreThreads)", "class_method_signature": "ServerConfig.setCoreThreads(int coreThreads)", "testcase": false, "constructor": false}, {"identifier": "getMaxThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxThreads()", "full_signature": "public int getMaxThreads()", "class_method_signature": "ServerConfig.getMaxThreads()", "testcase": false, "constructor": false}, {"identifier": "setMaxThreads", "parameters": "(int maxThreads)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setMaxThreads(int maxThreads)", "full_signature": "public ServerConfig setMaxThreads(int maxThreads)", "class_method_signature": "ServerConfig.setMaxThreads(int maxThreads)", "testcase": false, "constructor": false}, {"identifier": "isTelnet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTelnet()", "full_signature": "public boolean isTelnet()", "class_method_signature": "ServerConfig.isTelnet()", "testcase": false, "constructor": false}, {"identifier": "setTelnet", "parameters": "(boolean telnet)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setTelnet(boolean telnet)", "full_signature": "public ServerConfig setTelnet(boolean telnet)", "class_method_signature": "ServerConfig.setTelnet(boolean telnet)", "testcase": false, "constructor": false}, {"identifier": "getQueueType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQueueType()", "full_signature": "public String getQueueType()", "class_method_signature": "ServerConfig.getQueueType()", "testcase": false, "constructor": false}, {"identifier": "setQueueType", "parameters": "(String queueType)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setQueueType(String queueType)", "full_signature": "public ServerConfig setQueueType(String queueType)", "class_method_signature": "ServerConfig.setQueueType(String queueType)", "testcase": false, "constructor": false}, {"identifier": "getQueues", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueues()", "full_signature": "public int getQueues()", "class_method_signature": "ServerConfig.getQueues()", "testcase": false, "constructor": false}, {"identifier": "setQueues", "parameters": "(int queues)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setQueues(int queues)", "full_signature": "public ServerConfig setQueues(int queues)", "class_method_signature": "ServerConfig.setQueues(int queues)", "testcase": false, "constructor": false}, {"identifier": "getAliveTime", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAliveTime()", "full_signature": "public int getAliveTime()", "class_method_signature": "ServerConfig.getAliveTime()", "testcase": false, "constructor": false}, {"identifier": "setAliveTime", "parameters": "(int aliveTime)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setAliveTime(int aliveTime)", "full_signature": "public ServerConfig setAliveTime(int aliveTime)", "class_method_signature": "ServerConfig.setAliveTime(int aliveTime)", "testcase": false, "constructor": false}, {"identifier": "isPreStartCore", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPreStartCore()", "full_signature": "public boolean isPreStartCore()", "class_method_signature": "ServerConfig.isPreStartCore()", "testcase": false, "constructor": false}, {"identifier": "setPreStartCore", "parameters": "(boolean preStartCore)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setPreStartCore(boolean preStartCore)", "full_signature": "public ServerConfig setPreStartCore(boolean preStartCore)", "class_method_signature": "ServerConfig.setPreStartCore(boolean preStartCore)", "testcase": false, "constructor": false}, {"identifier": "getAccepts", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAccepts()", "full_signature": "public int getAccepts()", "class_method_signature": "ServerConfig.getAccepts()", "testcase": false, "constructor": false}, {"identifier": "setAccepts", "parameters": "(int accepts)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setAccepts(int accepts)", "full_signature": "public ServerConfig setAccepts(int accepts)", "class_method_signature": "ServerConfig.setAccepts(int accepts)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPayload()", "full_signature": "public int getPayload()", "class_method_signature": "ServerConfig.getPayload()", "testcase": false, "constructor": false}, {"identifier": "setPayload", "parameters": "(int payload)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setPayload(int payload)", "full_signature": "public ServerConfig setPayload(int payload)", "class_method_signature": "ServerConfig.setPayload(int payload)", "testcase": false, "constructor": false}, {"identifier": "getSerialization", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSerialization()", "full_signature": "public String getSerialization()", "class_method_signature": "ServerConfig.getSerialization()", "testcase": false, "constructor": false}, {"identifier": "setSerialization", "parameters": "(String serialization)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setSerialization(String serialization)", "full_signature": "public ServerConfig setSerialization(String serialization)", "class_method_signature": "ServerConfig.setSerialization(String serialization)", "testcase": false, "constructor": false}, {"identifier": "getDispatcher", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDispatcher()", "full_signature": "public String getDispatcher()", "class_method_signature": "ServerConfig.getDispatcher()", "testcase": false, "constructor": false}, {"identifier": "setDispatcher", "parameters": "(String dispatcher)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setDispatcher(String dispatcher)", "full_signature": "public ServerConfig setDispatcher(String dispatcher)", "class_method_signature": "ServerConfig.setDispatcher(String dispatcher)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getParameters()", "full_signature": "public Map<String, String> getParameters()", "class_method_signature": "ServerConfig.getParameters()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setParameters(Map<String, String> parameters)", "full_signature": "public ServerConfig setParameters(Map<String, String> parameters)", "class_method_signature": "ServerConfig.setParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "getVirtualHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVirtualHost()", "full_signature": "public String getVirtualHost()", "class_method_signature": "ServerConfig.getVirtualHost()", "testcase": false, "constructor": false}, {"identifier": "setVirtualHost", "parameters": "(String virtualHost)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setVirtualHost(String virtualHost)", "full_signature": "public ServerConfig setVirtualHost(String virtualHost)", "class_method_signature": "ServerConfig.setVirtualHost(String virtualHost)", "testcase": false, "constructor": false}, {"identifier": "getVirtualPort", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getVirtualPort()", "full_signature": "public Integer getVirtualPort()", "class_method_signature": "ServerConfig.getVirtualPort()", "testcase": false, "constructor": false}, {"identifier": "setVirtualPort", "parameters": "(Integer virtualPort)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setVirtualPort(Integer virtualPort)", "full_signature": "public ServerConfig setVirtualPort(Integer virtualPort)", "class_method_signature": "ServerConfig.setVirtualPort(Integer virtualPort)", "testcase": false, "constructor": false}, {"identifier": "getOnConnect", "parameters": "()", "modifiers": "public", "return": "List<ChannelListener>", "signature": "List<ChannelListener> getOnConnect()", "full_signature": "public List<ChannelListener> getOnConnect()", "class_method_signature": "ServerConfig.getOnConnect()", "testcase": false, "constructor": false}, {"identifier": "setOnConnect", "parameters": "(List<ChannelListener> onConnect)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setOnConnect(List<ChannelListener> onConnect)", "full_signature": "public ServerConfig setOnConnect(List<ChannelListener> onConnect)", "class_method_signature": "ServerConfig.setOnConnect(List<ChannelListener> onConnect)", "testcase": false, "constructor": false}, {"identifier": "isEpoll", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEpoll()", "full_signature": "public boolean isEpoll()", "class_method_signature": "ServerConfig.isEpoll()", "testcase": false, "constructor": false}, {"identifier": "setEpoll", "parameters": "(boolean epoll)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setEpoll(boolean epoll)", "full_signature": "public ServerConfig setEpoll(boolean epoll)", "class_method_signature": "ServerConfig.setEpoll(boolean epoll)", "testcase": false, "constructor": false}, {"identifier": "isDaemon", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDaemon()", "full_signature": "public boolean isDaemon()", "class_method_signature": "ServerConfig.isDaemon()", "testcase": false, "constructor": false}, {"identifier": "setDaemon", "parameters": "(boolean daemon)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setDaemon(boolean daemon)", "full_signature": "public ServerConfig setDaemon(boolean daemon)", "class_method_signature": "ServerConfig.setDaemon(boolean daemon)", "testcase": false, "constructor": false}, {"identifier": "getTransport", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTransport()", "full_signature": "public String getTransport()", "class_method_signature": "ServerConfig.getTransport()", "testcase": false, "constructor": false}, {"identifier": "setTransport", "parameters": "(String transport)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setTransport(String transport)", "full_signature": "public ServerConfig setTransport(String transport)", "class_method_signature": "ServerConfig.setTransport(String transport)", "testcase": false, "constructor": false}, {"identifier": "isAdaptivePort", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAdaptivePort()", "full_signature": "public boolean isAdaptivePort()", "class_method_signature": "ServerConfig.isAdaptivePort()", "testcase": false, "constructor": false}, {"identifier": "setAdaptivePort", "parameters": "(boolean adaptivePort)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setAdaptivePort(boolean adaptivePort)", "full_signature": "public ServerConfig setAdaptivePort(boolean adaptivePort)", "class_method_signature": "ServerConfig.setAdaptivePort(boolean adaptivePort)", "testcase": false, "constructor": false}, {"identifier": "isAutoStart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoStart()", "full_signature": "public boolean isAutoStart()", "class_method_signature": "ServerConfig.isAutoStart()", "testcase": false, "constructor": false}, {"identifier": "setAutoStart", "parameters": "(boolean autoStart)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setAutoStart(boolean autoStart)", "full_signature": "public ServerConfig setAutoStart(boolean autoStart)", "class_method_signature": "ServerConfig.setAutoStart(boolean autoStart)", "testcase": false, "constructor": false}, {"identifier": "getStopTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStopTimeout()", "full_signature": "public int getStopTimeout()", "class_method_signature": "ServerConfig.getStopTimeout()", "testcase": false, "constructor": false}, {"identifier": "setStopTimeout", "parameters": "(int stopTimeout)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setStopTimeout(int stopTimeout)", "full_signature": "public ServerConfig setStopTimeout(int stopTimeout)", "class_method_signature": "ServerConfig.setStopTimeout(int stopTimeout)", "testcase": false, "constructor": false}, {"identifier": "getServer", "parameters": "()", "modifiers": "public", "return": "Server", "signature": "Server getServer()", "full_signature": "public Server getServer()", "class_method_signature": "ServerConfig.getServer()", "testcase": false, "constructor": false}, {"identifier": "setServer", "parameters": "(Server server)", "modifiers": "public", "return": "void", "signature": "void setServer(Server server)", "full_signature": "public void setServer(Server server)", "class_method_signature": "ServerConfig.setServer(Server server)", "testcase": false, "constructor": false}, {"identifier": "setBoundHost", "parameters": "(String boundHost)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setBoundHost(String boundHost)", "full_signature": "public ServerConfig setBoundHost(String boundHost)", "class_method_signature": "ServerConfig.setBoundHost(String boundHost)", "testcase": false, "constructor": false}, {"identifier": "getBoundHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBoundHost()", "full_signature": "public String getBoundHost()", "class_method_signature": "ServerConfig.getBoundHost()", "testcase": false, "constructor": false}, {"identifier": "isKeepAlive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isKeepAlive()", "full_signature": "public boolean isKeepAlive()", "class_method_signature": "ServerConfig.isKeepAlive()", "testcase": false, "constructor": false}, {"identifier": "setKeepAlive", "parameters": "(boolean keepAlive)", "modifiers": "public", "return": "ServerConfig", "signature": "ServerConfig setKeepAlive(boolean keepAlive)", "full_signature": "public ServerConfig setKeepAlive(boolean keepAlive)", "class_method_signature": "ServerConfig.setKeepAlive(boolean keepAlive)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ServerConfig.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ServerConfig.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ServerConfig.toString()", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/config/ServerConfig.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        ServerConfig other = (ServerConfig) obj;\n        if (host == null) {\n            if (other.host != null) {\n                return false;\n            }\n        } else if (!host.equals(other.host)) {\n            return false;\n        }\n        if (port != other.port) {\n            return false;\n        }\n        if (protocol == null) {\n            if (other.protocol != null) {\n                return false;\n            }\n        } else if (!protocol.equals(other.protocol)) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ServerConfig.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}