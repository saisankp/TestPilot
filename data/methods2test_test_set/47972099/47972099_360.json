{"test_class": {"identifier": "MergeIteratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeComparator<Tuple2<Integer, String>> comparator;", "modifier": "private", "type": "TypeComparator<Tuple2<Integer, String>>", "declarator": "comparator", "var_name": "comparator"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/sort/MergeIteratorTest.java"}, "test_case": {"identifier": "testMergeOfTenStreams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMergeOfTenStreams() throws Exception\n\t{\n\t\t// iterators\n\t\tList<MutableObjectIterator<Tuple2<Integer, String>>> iterators = new ArrayList<>();\n\t\titerators.add(newIterator(new int[] { 1, 2, 17, 23, 23 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 2, 6, 7, 8, 9 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 4, 10, 11, 11, 12 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 3, 6, 7, 10, 12 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 7, 10, 15, 19, 44 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 6, 6, 11, 17, 18 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 1, 2, 4, 5, 10 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 5, 10, 19, 23, 29 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 9, 9, 9, 9, 9 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\t\titerators.add(newIterator(new int[] { 8, 8, 14, 14, 15 }, new String[] { \"A\", \"B\", \"C\", \"D\", \"E\" }));\n\n\t\t// comparator\n\t\tTypeComparator<Integer> comparator = new IntComparator(true);\n\n\t\t// merge iterator\n\t\tMutableObjectIterator<Tuple2<Integer, String>> iterator = new MergeIterator<>(iterators, this.comparator);\n\n\t\tint elementsFound = 1;\n\t\t// check expected order\n\t\tTuple2<Integer, String> rec1 = new Tuple2<>();\n\t\tTuple2<Integer, String> rec2 = new Tuple2<>();\n\t\t\n\t\tAssert.assertTrue((rec1 = iterator.next(rec1)) != null);\n\t\twhile ((rec2 = iterator.next(rec2)) != null) {\n\t\t\telementsFound++;\n\n\t\t\tAssert.assertTrue(comparator.compare(rec1.f0, rec2.f0) <= 0);\n\t\t\t\n\t\t\tTuple2<Integer, String> tmp = rec1;\n\t\t\trec1 = rec2;\n\t\t\trec2 = tmp;\n\t\t}\n\t\t\n\t\tAssert.assertEquals(\"Too few elements returned from stream.\", 50, elementsFound);\n\t}", "signature": "void testMergeOfTenStreams()", "full_signature": "@Test public void testMergeOfTenStreams()", "class_method_signature": "MergeIteratorTest.testMergeOfTenStreams()", "testcase": true, "constructor": false, "invocations": ["add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "add", "newIterator", "assertTrue", "next", "next", "assertTrue", "compare", "assertEquals"]}, "focal_class": {"identifier": "MergeIterator", "superclass": "", "interfaces": "implements MutableObjectIterator<E>", "fields": [{"original_string": "private final PartialOrderPriorityQueue<HeadStream<E>> heap;", "modifier": "private final", "type": "PartialOrderPriorityQueue<HeadStream<E>>", "declarator": "heap", "var_name": "heap"}], "methods": [{"identifier": "MergeIterator", "parameters": "(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator)", "modifiers": "public", "return": "", "signature": " MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator)", "full_signature": "public  MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator)", "class_method_signature": "MergeIterator.MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator)", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "(E reuse)", "modifiers": "@Override public", "return": "E", "signature": "E next(E reuse)", "full_signature": "@Override public E next(E reuse)", "class_method_signature": "MergeIterator.next(E reuse)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "E", "signature": "E next()", "full_signature": "@Override public E next()", "class_method_signature": "MergeIterator.next()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/sort/MergeIterator.java"}, "focal_method": {"identifier": "next", "parameters": "(E reuse)", "modifiers": "@Override public", "return": "E", "body": "@Override\n\tpublic E next(E reuse) throws IOException {\n\t\t/* There are three ways to handle object reuse:\n\t\t * 1) reuse and return the given object\n\t\t * 2) ignore the given object and return a new object\n\t\t * 3) exchange the given object for an existing object\n\t\t *\n\t\t * The first option is not available here as the return value has\n\t\t * already been deserialized from the heap's top iterator. The second\n\t\t * option avoids object reuse. The third option is implemented below\n\t\t * by passing the given object to the heap's top iterator into which\n\t\t * the next value will be deserialized.\n\t\t */\n\n\t\tif (this.heap.size() > 0) {\n\t\t\t// get the smallest element\n\t\t\tfinal HeadStream<E> top = this.heap.peek();\n\t\t\tE result = top.getHead();\n\n\t\t\t// read an element\n\t\t\tif (!top.nextHead(reuse)) {\n\t\t\t\tthis.heap.poll();\n\t\t\t} else {\n\t\t\t\tthis.heap.adjustTop();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "E next(E reuse)", "full_signature": "@Override public E next(E reuse)", "class_method_signature": "MergeIterator.next(E reuse)", "testcase": false, "constructor": false, "invocations": ["size", "peek", "getHead", "nextHead", "poll", "adjustTop"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}