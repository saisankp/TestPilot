{"test_class": {"identifier": "IgniteFutureImplTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String CTX_THREAD_NAME = \"test-async\";", "modifier": "private static final", "type": "String", "declarator": "CTX_THREAD_NAME = \"test-async\"", "var_name": "CTX_THREAD_NAME"}, {"original_string": "private static final String CUSTOM_THREAD_NAME = \"test-custom-async\";", "modifier": "private static final", "type": "String", "declarator": "CUSTOM_THREAD_NAME = \"test-custom-async\"", "var_name": "CUSTOM_THREAD_NAME"}, {"original_string": "private ExecutorService ctxExec;", "modifier": "private", "type": "ExecutorService", "declarator": "ctxExec", "var_name": "ctxExec"}, {"original_string": "private ExecutorService customExec;", "modifier": "private", "type": "ExecutorService", "declarator": "customExec", "var_name": "customExec"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/util/future/IgniteFutureImplTest.java"}, "test_case": {"identifier": "testChainAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChainAsync() throws Exception {\n        GridFutureAdapter<String> fut0 = new GridFutureAdapter<>();\n\n        IgniteFuture<String> fut = createFuture(fut0);\n\n        C1<IgniteFuture<String>, Integer> chainClos = new C1<IgniteFuture<String>, Integer>() {\n            @Override public Integer apply(IgniteFuture<String> fut) {\n                assertEquals(CUSTOM_THREAD_NAME, Thread.currentThread().getName());\n\n                return Integer.valueOf(fut.get());\n            }\n        };\n\n        IgniteFuture<Integer> chained1 = fut.chainAsync(chainClos, customExec);\n\n        assertFalse(chained1.isDone());\n\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        class TestClosure implements CI1<IgniteFuture<Integer>> {\n            private final CountDownLatch latch;\n\n            private TestClosure(CountDownLatch latch) {\n                this.latch = latch;\n            }\n\n            @Override public void apply(IgniteFuture<Integer> fut) {\n                assertEquals(CUSTOM_THREAD_NAME, Thread.currentThread().getName());\n                assertEquals(10, (int)fut.get());\n\n                latch.countDown();\n            }\n        }\n\n        chained1.listen(new TestClosure(latch));\n\n        fut0.onDone(\"10\");\n\n        // Chained future will be completed asynchronously.\n        chained1.get(100, TimeUnit.MILLISECONDS);\n\n        assertTrue(chained1.isDone());\n\n        assertEquals(10, (int)chained1.get());\n\n        assert latch.await(100, TimeUnit.MILLISECONDS);\n\n        assertTrue(fut.isDone());\n\n        assertEquals(\"10\", fut.get());\n\n        // Test finished future\n        GridFinishedFuture<String> ffut0 = new GridFinishedFuture<>(\"10\");\n\n        CountDownLatch latch1 = new CountDownLatch(1);\n\n        IgniteFuture<Integer> chained2 = createFuture(ffut0).chainAsync(chainClos, customExec);\n\n        chained2.listen(new TestClosure(latch1));\n\n        chained2.get(100, TimeUnit.MILLISECONDS);\n\n        assertTrue(chained2.isDone());\n\n        assertEquals(10, (int)chained2.get());\n\n        assert latch1.await(100, TimeUnit.MILLISECONDS);\n    }", "signature": "void testChainAsync()", "full_signature": "@Test public void testChainAsync()", "class_method_signature": "IgniteFutureImplTest.testChainAsync()", "testcase": true, "constructor": false, "invocations": ["createFuture", "assertEquals", "getName", "currentThread", "valueOf", "get", "chainAsync", "assertFalse", "isDone", "assertEquals", "getName", "currentThread", "assertEquals", "get", "countDown", "listen", "onDone", "get", "assertTrue", "isDone", "assertEquals", "get", "await", "assertTrue", "isDone", "assertEquals", "get", "chainAsync", "createFuture", "listen", "get", "assertTrue", "isDone", "assertEquals", "get", "await"]}, "focal_class": {"identifier": "IgniteFutureImpl", "superclass": "", "interfaces": "implements IgniteFuture<V>", "fields": [{"original_string": "protected final IgniteInternalFuture<V> fut;", "modifier": "protected final", "type": "IgniteInternalFuture<V>", "declarator": "fut", "var_name": "fut"}], "methods": [{"identifier": "IgniteFutureImpl", "parameters": "(IgniteInternalFuture<V> fut)", "modifiers": "public", "return": "", "signature": " IgniteFutureImpl(IgniteInternalFuture<V> fut)", "full_signature": "public  IgniteFutureImpl(IgniteInternalFuture<V> fut)", "class_method_signature": "IgniteFutureImpl.IgniteFutureImpl(IgniteInternalFuture<V> fut)", "testcase": false, "constructor": true}, {"identifier": "internalFuture", "parameters": "()", "modifiers": "public", "return": "IgniteInternalFuture<V>", "signature": "IgniteInternalFuture<V> internalFuture()", "full_signature": "public IgniteInternalFuture<V> internalFuture()", "class_method_signature": "IgniteFutureImpl.internalFuture()", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "@Override public boolean isCancelled()", "class_method_signature": "IgniteFutureImpl.isCancelled()", "testcase": false, "constructor": false}, {"identifier": "isDone", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDone()", "full_signature": "@Override public boolean isDone()", "class_method_signature": "IgniteFutureImpl.isDone()", "testcase": false, "constructor": false}, {"identifier": "listen", "parameters": "(IgniteInClosure<? super IgniteFuture<V>> lsnr)", "modifiers": "@Override public", "return": "void", "signature": "void listen(IgniteInClosure<? super IgniteFuture<V>> lsnr)", "full_signature": "@Override public void listen(IgniteInClosure<? super IgniteFuture<V>> lsnr)", "class_method_signature": "IgniteFutureImpl.listen(IgniteInClosure<? super IgniteFuture<V>> lsnr)", "testcase": false, "constructor": false}, {"identifier": "listenAsync", "parameters": "(IgniteInClosure<? super IgniteFuture<V>> lsnr, Executor exec)", "modifiers": "@Override public", "return": "void", "signature": "void listenAsync(IgniteInClosure<? super IgniteFuture<V>> lsnr, Executor exec)", "full_signature": "@Override public void listenAsync(IgniteInClosure<? super IgniteFuture<V>> lsnr, Executor exec)", "class_method_signature": "IgniteFutureImpl.listenAsync(IgniteInClosure<? super IgniteFuture<V>> lsnr, Executor exec)", "testcase": false, "constructor": false}, {"identifier": "chain", "parameters": "(final IgniteClosure<? super IgniteFuture<V>, T> doneCb)", "modifiers": "@Override public", "return": "IgniteFuture<T>", "signature": "IgniteFuture<T> chain(final IgniteClosure<? super IgniteFuture<V>, T> doneCb)", "full_signature": "@Override public IgniteFuture<T> chain(final IgniteClosure<? super IgniteFuture<V>, T> doneCb)", "class_method_signature": "IgniteFutureImpl.chain(final IgniteClosure<? super IgniteFuture<V>, T> doneCb)", "testcase": false, "constructor": false}, {"identifier": "chainAsync", "parameters": "(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "modifiers": "@Override public", "return": "IgniteFuture<T>", "signature": "IgniteFuture<T> chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "full_signature": "@Override public IgniteFuture<T> chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "class_method_signature": "IgniteFutureImpl.chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "testcase": false, "constructor": false}, {"identifier": "chainInternal", "parameters": "(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        @Nullable Executor exec)", "modifiers": "protected", "return": "IgniteInternalFuture<T>", "signature": "IgniteInternalFuture<T> chainInternal(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        @Nullable Executor exec)", "full_signature": "protected IgniteInternalFuture<T> chainInternal(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        @Nullable Executor exec)", "class_method_signature": "IgniteFutureImpl.chainInternal(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        @Nullable Executor exec)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancel()", "full_signature": "@Override public boolean cancel()", "class_method_signature": "IgniteFutureImpl.cancel()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "V", "signature": "V get()", "full_signature": "@Override public V get()", "class_method_signature": "IgniteFutureImpl.get()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long timeout)", "modifiers": "@Override public", "return": "V", "signature": "V get(long timeout)", "full_signature": "@Override public V get(long timeout)", "class_method_signature": "IgniteFutureImpl.get(long timeout)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "V", "signature": "V get(long timeout, TimeUnit unit)", "full_signature": "@Override public V get(long timeout, TimeUnit unit)", "class_method_signature": "IgniteFutureImpl.get(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "convertException", "parameters": "(IgniteCheckedException e)", "modifiers": "protected", "return": "RuntimeException", "signature": "RuntimeException convertException(IgniteCheckedException e)", "full_signature": "protected RuntimeException convertException(IgniteCheckedException e)", "class_method_signature": "IgniteFutureImpl.convertException(IgniteCheckedException e)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IgniteFutureImpl.toString()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java"}, "focal_method": {"identifier": "chainAsync", "parameters": "(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "modifiers": "@Override public", "return": "IgniteFuture<T>", "body": "@Override public <T> IgniteFuture<T> chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec) {\n        A.notNull(doneCb, \"doneCb\");\n        A.notNull(exec, \"exec\");\n\n        return new IgniteFutureImpl<>(chainInternal(doneCb, exec));\n    }", "signature": "IgniteFuture<T> chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "full_signature": "@Override public IgniteFuture<T> chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "class_method_signature": "IgniteFutureImpl.chainAsync(final IgniteClosure<? super IgniteFuture<V>, T> doneCb,\n        Executor exec)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "chainInternal"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}