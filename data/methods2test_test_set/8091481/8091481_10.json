{"test_class": {"identifier": "ContextExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dexter-core/src/test/java/it/cnr/isti/hpc/dexter/spot/ContextExtractorTest.java"}, "test_case": {"identifier": "testBinSearch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBinSearch() {\n\t\tContextExtractor extractor = new ContextExtractor(\n\t\t\t\t\"diego ceccarelli prova test pippo pluto belen\");\n\t\tList<Integer> test = Arrays.asList(new Integer[] { 1, 5, 10, 50, 100,\n\t\t\t\t110 });\n\t\tassertEquals(0, extractor.closest(2, test));\n\t\tassertEquals(0, extractor.closest(3, test));\n\t\tassertEquals(0, extractor.closest(4, test));\n\t\tassertEquals(1, extractor.closest(5, test));\n\t\tassertEquals(4, extractor.closest(105, test));\n\t\tassertEquals(5, extractor.closest(120, test));\n\t\tassertEquals(3, extractor.closest(99, test));\n\n\t\ttest = Arrays.asList(new Integer[] { 0, 1 });\n\n\t\tassertEquals(1, extractor.closest(10000, test));\n\t\tassertEquals(0, extractor.closest(0, test));\n\n\t\ttest = Arrays.asList(new Integer[] { 0, 1 });\n\n\t\tassertEquals(1, extractor.closest(10000, test));\n\t\tassertEquals(0, extractor.closest(0, test));\n\t\ttest = Arrays.asList(new Integer[] { 1, 5, 10, 50, 100, 110, 1000 });\n\t\tassertEquals(0, extractor.closest(2, test));\n\t\tassertEquals(0, extractor.closest(3, test));\n\t\tassertEquals(0, extractor.closest(4, test));\n\t\tassertEquals(1, extractor.closest(5, test));\n\t\tassertEquals(4, extractor.closest(105, test));\n\t\tassertEquals(5, extractor.closest(120, test));\n\n\t\tassertEquals(6, extractor.closest(1000, test));\n\t\tassertEquals(6, extractor.closest(10000, test));\n\n\t}", "signature": "void testBinSearch()", "full_signature": "@Test public void testBinSearch()", "class_method_signature": "ContextExtractorTest.testBinSearch()", "testcase": true, "constructor": false, "invocations": ["asList", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "asList", "assertEquals", "closest", "assertEquals", "closest", "asList", "assertEquals", "closest", "assertEquals", "closest", "asList", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest", "assertEquals", "closest"]}, "focal_class": {"identifier": "ContextExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ContextExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ContextExtractor.class)", "var_name": "logger"}, {"original_string": "private int windowSize = 50;", "modifier": "private", "type": "int", "declarator": "windowSize = 50", "var_name": "windowSize"}, {"original_string": "protected String text;", "modifier": "protected", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "protected List<Integer> positions = new ArrayList<Integer>();", "modifier": "protected", "type": "List<Integer>", "declarator": "positions = new ArrayList<Integer>()", "var_name": "positions"}, {"original_string": "private final int MAX_TERM_NUMBER=300;", "modifier": "private final", "type": "int", "declarator": "MAX_TERM_NUMBER=300", "var_name": "MAX_TERM_NUMBER"}], "methods": [{"identifier": "ContextExtractor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " ContextExtractor()", "full_signature": "protected  ContextExtractor()", "class_method_signature": "ContextExtractor.ContextExtractor()", "testcase": false, "constructor": true}, {"identifier": "ContextExtractor", "parameters": "(Field field)", "modifiers": "public", "return": "", "signature": " ContextExtractor(Field field)", "full_signature": "public  ContextExtractor(Field field)", "class_method_signature": "ContextExtractor.ContextExtractor(Field field)", "testcase": false, "constructor": true}, {"identifier": "ContextExtractor", "parameters": "(String text)", "modifiers": "protected", "return": "", "signature": " ContextExtractor(String text)", "full_signature": "protected  ContextExtractor(String text)", "class_method_signature": "ContextExtractor.ContextExtractor(String text)", "testcase": false, "constructor": true}, {"identifier": "cleanContext", "parameters": "(String context)", "modifiers": "private", "return": "String", "signature": "String cleanContext(String context)", "full_signature": "private String cleanContext(String context)", "class_method_signature": "ContextExtractor.cleanContext(String context)", "testcase": false, "constructor": false}, {"identifier": "closest", "parameters": "(int key, List<Integer> list)", "modifiers": "protected", "return": "int", "signature": "int closest(int key, List<Integer> list)", "full_signature": "protected int closest(int key, List<Integer> list)", "class_method_signature": "ContextExtractor.closest(int key, List<Integer> list)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(int l, int r)", "modifiers": "private", "return": "String", "signature": "String getContext(int l, int r)", "full_signature": "private String getContext(int l, int r)", "class_method_signature": "ContextExtractor.getContext(int l, int r)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(String label)", "modifiers": "public", "return": "String", "signature": "String getContext(String label)", "full_signature": "public String getContext(String label)", "class_method_signature": "ContextExtractor.getContext(String label)", "testcase": false, "constructor": false}, {"identifier": "getWindowSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWindowSize()", "full_signature": "public int getWindowSize()", "class_method_signature": "ContextExtractor.getWindowSize()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(String text)", "modifiers": "protected", "return": "void", "signature": "void init(String text)", "full_signature": "protected void init(String text)", "class_method_signature": "ContextExtractor.init(String text)", "testcase": false, "constructor": false}, {"identifier": "setWindowSize", "parameters": "(int windowSize)", "modifiers": "public", "return": "void", "signature": "void setWindowSize(int windowSize)", "full_signature": "public void setWindowSize(int windowSize)", "class_method_signature": "ContextExtractor.setWindowSize(int windowSize)", "testcase": false, "constructor": false}, {"identifier": "termPos", "parameters": "(int pos)", "modifiers": "private", "return": "int", "signature": "int termPos(int pos)", "full_signature": "private int termPos(int pos)", "class_method_signature": "ContextExtractor.termPos(int pos)", "testcase": false, "constructor": false}], "file": "dexter-core/src/main/java/it/cnr/isti/hpc/dexter/spot/ContextExtractor.java"}, "focal_method": {"identifier": "closest", "parameters": "(int key, List<Integer> list)", "modifiers": "protected", "return": "int", "body": "protected int closest(int key, List<Integer> list) {\n\t\tint size = list.size();\n\t\tint delta = size / 2;\n\t\tint i = size / 2;\n\t\twhile (delta > 1) {\n\t\t\tlogger.debug(\"i = {} \\t delta = {} \", i, delta);\n\n\t\t\tint elem = list.get(i);\n\t\t\tdelta = (delta % 2 == 0) ? (delta) / 2 : (delta + 1) / 2;\n\t\t\tif (elem == key)\n\t\t\t\treturn i;\n\t\t\tif (elem > key) {\n\t\t\t\ti = Math.max(i - delta, 0);\n\t\t\t} else {\n\t\t\t\ti = Math.min(delta + i, size - 1);\n\t\t\t}\n\n\t\t}\n\t\tint elem = list.get(i);\n\t\tif (elem > key)\n\t\t\treturn i - 1;\n\t\treturn i;\n\t}", "signature": "int closest(int key, List<Integer> list)", "full_signature": "protected int closest(int key, List<Integer> list)", "class_method_signature": "ContextExtractor.closest(int key, List<Integer> list)", "testcase": false, "constructor": false, "invocations": ["size", "debug", "get", "max", "min", "get"]}, "repository": {"repo_id": 8091481, "url": "https://github.com/dexter/dexter", "language": "Java", "is_fork": false, "fork_count": 52, "stargazer_count": 196, "size": 17631, "license": "licensed"}}