{"test_class": {"identifier": "MeshRegistryTest", "superclass": "extends BaseMeshTest", "interfaces": "", "fields": [{"original_string": "private RegistryConfig registryConfig;", "modifier": "private", "type": "RegistryConfig", "declarator": "registryConfig", "var_name": "registryConfig"}, {"original_string": "private MeshRegistry   registry;", "modifier": "private", "type": "MeshRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private HttpMockServer httpMockServer;", "modifier": "private", "type": "HttpMockServer", "declarator": "httpMockServer", "var_name": "httpMockServer"}], "file": "registry/registry-mesh/src/test/java/com/alipay/sofa/rpc/registry/mesh/MeshRegistryTest.java"}, "test_case": {"identifier": "testOnlyPublish", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnlyPublish() throws InterruptedException {\n\n        Field registedAppField = null;\n        try {\n            registedAppField = MeshRegistry.class.getDeclaredField(\"registedApp\");\n            registedAppField.setAccessible(true);\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        }\n\n        Boolean registedAppValue = null;\n        // in case of effected by other case.\n        try {\n            registedAppValue = (Boolean) registedAppField.get(registry);\n            registedAppField.set(registry, false);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n        ServerConfig serverConfig = new ServerConfig()\n            .setProtocol(\"bolt\")\n            .setHost(\"0.0.0.0\")\n            .setPort(12200);\n        ProviderConfig<?> provider = new ProviderConfig();\n        provider.setInterfaceId(\"com.alipay.xxx.TestService\")\n            .setUniqueId(\"unique123Id\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setProxy(\"javassist\")\n            .setRegister(true)\n            .setRegistry(registryConfig)\n            .setSerialization(\"hessian2\")\n            .setServer(serverConfig)\n            .setWeight(222)\n            .setTimeout(3000);\n\n        registry.register(provider);\n        Thread.sleep(3000);\n\n        try {\n            registedAppValue = (Boolean) registedAppField.get(registry);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n        LOGGER.info(\"final registedAppValue is \" + registedAppValue);\n\n        Assert.assertTrue(registedAppValue);\n    }", "signature": "void testOnlyPublish()", "full_signature": "@Test public void testOnlyPublish()", "class_method_signature": "MeshRegistryTest.testOnlyPublish()", "testcase": true, "constructor": false, "invocations": ["getDeclaredField", "setAccessible", "printStackTrace", "get", "set", "printStackTrace", "setPort", "setHost", "setProtocol", "setTimeout", "setWeight", "setServer", "setSerialization", "setRegistry", "setRegister", "setProxy", "setApplication", "setUniqueId", "setInterfaceId", "setAppName", "register", "sleep", "get", "printStackTrace", "info", "assertTrue"]}, "focal_class": {"identifier": "MeshRegistry", "superclass": "extends Registry", "interfaces": "", "fields": [{"original_string": "private static final Logger         LOGGER                        = LoggerFactory.getLogger(MeshRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER                        = LoggerFactory.getLogger(MeshRegistry.class)", "var_name": "LOGGER"}, {"original_string": "private static final String         VERSION                       = \"4.0\";", "modifier": "private static final", "type": "String", "declarator": "VERSION                       = \"4.0\"", "var_name": "VERSION"}, {"original_string": "protected MeshApiClient             client;", "modifier": "protected", "type": "MeshApiClient", "declarator": "client", "var_name": "client"}, {"original_string": "protected boolean                   inited;", "modifier": "protected", "type": "boolean", "declarator": "inited", "var_name": "inited"}, {"original_string": "protected boolean                   registedApp;", "modifier": "protected", "type": "boolean", "declarator": "registedApp", "var_name": "registedApp"}, {"original_string": "protected static ThreadPoolExecutor asyncCreateConnectionExecutor = initThreadPoolExecutor();", "modifier": "protected static", "type": "ThreadPoolExecutor", "declarator": "asyncCreateConnectionExecutor = initThreadPoolExecutor()", "var_name": "asyncCreateConnectionExecutor"}], "methods": [{"identifier": "initThreadPoolExecutor", "parameters": "()", "modifiers": "private static", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor initThreadPoolExecutor()", "full_signature": "private static ThreadPoolExecutor initThreadPoolExecutor()", "class_method_signature": "MeshRegistry.initThreadPoolExecutor()", "testcase": false, "constructor": false}, {"identifier": "MeshRegistry", "parameters": "(RegistryConfig registryConfig)", "modifiers": "protected", "return": "", "signature": " MeshRegistry(RegistryConfig registryConfig)", "full_signature": "protected  MeshRegistry(RegistryConfig registryConfig)", "class_method_signature": "MeshRegistry.MeshRegistry(RegistryConfig registryConfig)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "MeshRegistry.init()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "MeshRegistry.start()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "MeshRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(final String appName, final String serviceName, final ProviderInfo providerInfo,\n                              final String protocol)", "modifiers": "protected", "return": "void", "signature": "void doRegister(final String appName, final String serviceName, final ProviderInfo providerInfo,\n                              final String protocol)", "full_signature": "protected void doRegister(final String appName, final String serviceName, final ProviderInfo providerInfo,\n                              final String protocol)", "class_method_signature": "MeshRegistry.doRegister(final String appName, final String serviceName, final ProviderInfo providerInfo,\n                              final String protocol)", "testcase": false, "constructor": false}, {"identifier": "buildPublishServiceRequest", "parameters": "(String serviceName, String protocol,\n                                                               ProviderInfo providerInfo,\n                                                               String appName)", "modifiers": "protected", "return": "PublishServiceRequest", "signature": "PublishServiceRequest buildPublishServiceRequest(String serviceName, String protocol,\n                                                               ProviderInfo providerInfo,\n                                                               String appName)", "full_signature": "protected PublishServiceRequest buildPublishServiceRequest(String serviceName, String protocol,\n                                                               ProviderInfo providerInfo,\n                                                               String appName)", "class_method_signature": "MeshRegistry.buildPublishServiceRequest(String serviceName, String protocol,\n                                                               ProviderInfo providerInfo,\n                                                               String appName)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unRegister(ProviderConfig config)", "full_signature": "@Override public void unRegister(ProviderConfig config)", "class_method_signature": "MeshRegistry.unRegister(ProviderConfig config)", "testcase": false, "constructor": false}, {"identifier": "doUnRegister", "parameters": "(String serviceName, ProviderInfo providerInfo)", "modifiers": "protected", "return": "void", "signature": "void doUnRegister(String serviceName, ProviderInfo providerInfo)", "full_signature": "protected void doUnRegister(String serviceName, ProviderInfo providerInfo)", "class_method_signature": "MeshRegistry.doUnRegister(String serviceName, ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "batchUnRegister", "parameters": "(List<ProviderConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnRegister(List<ProviderConfig> configs)", "full_signature": "@Override public void batchUnRegister(List<ProviderConfig> configs)", "class_method_signature": "MeshRegistry.batchUnRegister(List<ProviderConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(final ConsumerConfig config)", "modifiers": "@Override public", "return": "List<ProviderGroup>", "signature": "List<ProviderGroup> subscribe(final ConsumerConfig config)", "full_signature": "@Override public List<ProviderGroup> subscribe(final ConsumerConfig config)", "class_method_signature": "MeshRegistry.subscribe(final ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "buildSubscribeServiceRequest", "parameters": "(ConsumerConfig consumerConfig)", "modifiers": "protected", "return": "SubscribeServiceRequest", "signature": "SubscribeServiceRequest buildSubscribeServiceRequest(ConsumerConfig consumerConfig)", "full_signature": "protected SubscribeServiceRequest buildSubscribeServiceRequest(ConsumerConfig consumerConfig)", "class_method_signature": "MeshRegistry.buildSubscribeServiceRequest(ConsumerConfig consumerConfig)", "testcase": false, "constructor": false}, {"identifier": "registerAppInfoOnce", "parameters": "(String appName)", "modifiers": "protected", "return": "void", "signature": "void registerAppInfoOnce(String appName)", "full_signature": "protected void registerAppInfoOnce(String appName)", "class_method_signature": "MeshRegistry.registerAppInfoOnce(String appName)", "testcase": false, "constructor": false}, {"identifier": "buildApplicationRequest", "parameters": "(String appName)", "modifiers": "protected", "return": "ApplicationInfoRequest", "signature": "ApplicationInfoRequest buildApplicationRequest(String appName)", "full_signature": "protected ApplicationInfoRequest buildApplicationRequest(String appName)", "class_method_signature": "MeshRegistry.buildApplicationRequest(String appName)", "testcase": false, "constructor": false}, {"identifier": "fillProtocolAndVersion", "parameters": "(SubscribeServiceResult subscribeServiceResult, String targetURL,\n                                            String serviceName, String protocol)", "modifiers": "protected", "return": "String", "signature": "String fillProtocolAndVersion(SubscribeServiceResult subscribeServiceResult, String targetURL,\n                                            String serviceName, String protocol)", "full_signature": "protected String fillProtocolAndVersion(SubscribeServiceResult subscribeServiceResult, String targetURL,\n                                            String serviceName, String protocol)", "class_method_signature": "MeshRegistry.fillProtocolAndVersion(SubscribeServiceResult subscribeServiceResult, String targetURL,\n                                            String serviceName, String protocol)", "testcase": false, "constructor": false}, {"identifier": "unSubscribe", "parameters": "(ConsumerConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void unSubscribe(ConsumerConfig config)", "full_signature": "@Override public void unSubscribe(ConsumerConfig config)", "class_method_signature": "MeshRegistry.unSubscribe(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "buildUnSubscribeServiceRequest", "parameters": "(ConsumerConfig config)", "modifiers": "protected", "return": "UnSubscribeServiceRequest", "signature": "UnSubscribeServiceRequest buildUnSubscribeServiceRequest(ConsumerConfig config)", "full_signature": "protected UnSubscribeServiceRequest buildUnSubscribeServiceRequest(ConsumerConfig config)", "class_method_signature": "MeshRegistry.buildUnSubscribeServiceRequest(ConsumerConfig config)", "testcase": false, "constructor": false}, {"identifier": "batchUnSubscribe", "parameters": "(List<ConsumerConfig> configs)", "modifiers": "@Override public", "return": "void", "signature": "void batchUnSubscribe(List<ConsumerConfig> configs)", "full_signature": "@Override public void batchUnSubscribe(List<ConsumerConfig> configs)", "class_method_signature": "MeshRegistry.batchUnSubscribe(List<ConsumerConfig> configs)", "testcase": false, "constructor": false}, {"identifier": "judgeMeshPort", "parameters": "(String protocol)", "modifiers": "protected", "return": "String", "signature": "String judgeMeshPort(String protocol)", "full_signature": "protected String judgeMeshPort(String protocol)", "class_method_signature": "MeshRegistry.judgeMeshPort(String protocol)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MeshRegistry.destroy()", "testcase": false, "constructor": false}], "file": "registry/registry-mesh/src/main/java/com/alipay/sofa/rpc/registry/mesh/MeshRegistry.java"}, "focal_method": {"identifier": "register", "parameters": "(ProviderConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void register(ProviderConfig config) {\n        String appName = config.getAppName();\n        if (!registryConfig.isRegister()) {\n            if (LOGGER.isInfoEnabled(appName)) {\n                LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_REGISTRY_IGNORE));\n            }\n            return;\n        }\n        if (!config.isRegister()) { // \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u6ce8\u518c\u6216\u8005\u670d\u52a1\u4e0d\u6ce8\u518c\n            return;\n        }\n        List<ServerConfig> serverConfigs = config.getServer();\n        if (CommonUtils.isNotEmpty(serverConfigs)) {\n            for (ServerConfig server : serverConfigs) {\n                String serviceName = MeshRegistryHelper.buildMeshKey(config, server.getProtocol());\n                ProviderInfo providerInfo = MeshRegistryHelper.convertProviderToProviderInfo(config, server);\n                if (LOGGER.isInfoEnabled(appName)) {\n                    LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_START, serviceName));\n                }\n                doRegister(appName, serviceName, providerInfo, server.getProtocol());\n\n                if (LOGGER.isInfoEnabled(appName)) {\n                    LOGGER.infoWithApp(appName, LogCodes.getLog(LogCodes.INFO_ROUTE_REGISTRY_PUB_OVER, serviceName));\n                }\n            }\n            if (EventBus.isEnable(ProviderPubEvent.class)) {\n                ProviderPubEvent event = new ProviderPubEvent(config);\n                EventBus.post(event);\n            }\n\n        }\n    }", "signature": "void register(ProviderConfig config)", "full_signature": "@Override public void register(ProviderConfig config)", "class_method_signature": "MeshRegistry.register(ProviderConfig config)", "testcase": false, "constructor": false, "invocations": ["getAppName", "isRegister", "isInfoEnabled", "infoWithApp", "getLog", "isRegister", "getServer", "isNotEmpty", "buildMeshKey", "getProtocol", "convertProviderToProviderInfo", "isInfoEnabled", "infoWithApp", "getLog", "doRegister", "getProtocol", "isInfoEnabled", "infoWithApp", "getLog", "isEnable", "post"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}