{"test_class": {"identifier": "BrokerAccessTokenProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FakeKDC fakeKDC;", "modifier": "private static", "type": "FakeKDC", "declarator": "fakeKDC", "var_name": "fakeKDC"}, {"original_string": "@Rule\n    public static final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();", "modifier": "@Rule\n    public static final", "type": "GrpcCleanupRule", "declarator": "grpcCleanup = new GrpcCleanupRule()", "var_name": "grpcCleanup"}], "file": "code/client/hadoop-connector/src/test/java/com/google/cloud/broker/client/hadoop/fs/BrokerAccessTokenProviderTest.java"}, "test_case": {"identifier": "testProviderRefreshWithoutAccessBoundary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProviderRefreshWithoutAccessBoundary() throws IOException {\n        TestingTools.startServer(new FakeServer(fakeKDC), grpcCleanup);\n        Configuration conf = TestingTools.getBrokerConfig();\n        conf.set(\"gcp.token.broker.access.boundary.enabled\", \"false\");\n        Subject alice = fakeKDC.login(ALICE);\n        UserGroupInformation.loginUserFromSubject(alice);\n        AccessToken token = refresh(conf);\n        assertEquals(\"FakeAccessToken/AuthenticatedUser=\" + ALICE + \";Owner=\" + ALICE + \";Target=\", token.getToken());\n        UserGroupInformation.setLoginUser(null);\n    }", "signature": "void testProviderRefreshWithoutAccessBoundary()", "full_signature": "@Test public void testProviderRefreshWithoutAccessBoundary()", "class_method_signature": "BrokerAccessTokenProviderTest.testProviderRefreshWithoutAccessBoundary()", "testcase": true, "constructor": false, "invocations": ["startServer", "getBrokerConfig", "set", "login", "loginUserFromSubject", "refresh", "assertEquals", "getToken", "setLoginUser"]}, "focal_class": {"identifier": "BrokerAccessTokenProvider", "superclass": "", "interfaces": "implements AccessTokenProvider", "fields": [{"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private AccessToken accessToken;", "modifier": "private", "type": "AccessToken", "declarator": "accessToken", "var_name": "accessToken"}, {"original_string": "private BrokerTokenIdentifier tokenIdentifier;", "modifier": "private", "type": "BrokerTokenIdentifier", "declarator": "tokenIdentifier", "var_name": "tokenIdentifier"}, {"original_string": "private Text service;", "modifier": "private", "type": "Text", "declarator": "service", "var_name": "service"}, {"original_string": "private final static AccessToken EXPIRED_TOKEN = new AccessToken(\"\", -1L);", "modifier": "private final static", "type": "AccessToken", "declarator": "EXPIRED_TOKEN = new AccessToken(\"\", -1L)", "var_name": "EXPIRED_TOKEN"}], "methods": [{"identifier": "BrokerAccessTokenProvider", "parameters": "(Text service)", "modifiers": "public", "return": "", "signature": " BrokerAccessTokenProvider(Text service)", "full_signature": "public  BrokerAccessTokenProvider(Text service)", "class_method_signature": "BrokerAccessTokenProvider.BrokerAccessTokenProvider(Text service)", "testcase": false, "constructor": true}, {"identifier": "BrokerAccessTokenProvider", "parameters": "(Text service, BrokerTokenIdentifier bti)", "modifiers": "public", "return": "", "signature": " BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti)", "full_signature": "public  BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti)", "class_method_signature": "BrokerAccessTokenProvider.BrokerAccessTokenProvider(Text service, BrokerTokenIdentifier bti)", "testcase": false, "constructor": true}, {"identifier": "getAccessToken", "parameters": "()", "modifiers": "@Override public", "return": "AccessToken", "signature": "AccessToken getAccessToken()", "full_signature": "@Override public AccessToken getAccessToken()", "class_method_signature": "BrokerAccessTokenProvider.getAccessToken()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "BrokerAccessTokenProvider.refresh()", "testcase": false, "constructor": false}, {"identifier": "setConf", "parameters": "(Configuration config)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(Configuration config)", "full_signature": "@Override public void setConf(Configuration config)", "class_method_signature": "BrokerAccessTokenProvider.setConf(Configuration config)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "@Override public Configuration getConf()", "class_method_signature": "BrokerAccessTokenProvider.getConf()", "testcase": false, "constructor": false}], "file": "code/client/hadoop-connector/src/main/java/com/google/cloud/broker/client/hadoop/fs/BrokerAccessTokenProvider.java"}, "focal_method": {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void refresh() {\n        // Retrieve the current and login users from the ambient context\n        UserGroupInformation currentUser;\n        UserGroupInformation loginUser;\n        try {\n            currentUser = UserGroupInformation.getCurrentUser();\n            loginUser = UserGroupInformation.getLoginUser();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        // Instantiate the proper credentials class based on the type of authentication (direct or delegated)\n        BrokerServerInfo serverInfo = Utils.getBrokerDetailsFromConfig(config);\n        BrokerBaseCredentials credentials;\n        if (tokenIdentifier == null) {\n            // Use direct authentication\n            credentials = new BrokerKerberosCredentials(\n                serverInfo,\n                currentUser.getUserName(),\n                Collections.singleton(BrokerTokenIdentifier.GCS_SCOPE),\n                Utils.getTarget(config, service));\n        }\n        else {\n            // Use delegated authentication\n            credentials = new BrokerSessionCredentials(serverInfo, tokenIdentifier.getSessionToken());\n        }\n\n        // Generate the access token\n        loginUser.doAs((PrivilegedAction<Void>) () -> {\n            try {\n                credentials.refresh();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            return null;\n        });\n        com.google.auth.oauth2.AccessToken token = credentials.getAccessToken();\n        accessToken = new AccessToken(token.getTokenValue(), token.getExpirationTime().getTime());\n    }", "signature": "void refresh()", "full_signature": "@Override public void refresh()", "class_method_signature": "BrokerAccessTokenProvider.refresh()", "testcase": false, "constructor": false, "invocations": ["getCurrentUser", "getLoginUser", "getBrokerDetailsFromConfig", "getUserName", "singleton", "getTarget", "getSessionToken", "doAs", "refresh", "getAccessToken", "getTokenValue", "getTime", "getExpirationTime"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}