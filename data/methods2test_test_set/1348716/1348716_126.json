{"test_class": {"identifier": "DecliningBalanceLoanInterestCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DecliningBalanceLoanInterestCalculator decliningBalanceLoanInterestCalculator;", "modifier": "private", "type": "DecliningBalanceLoanInterestCalculator", "declarator": "decliningBalanceLoanInterestCalculator", "var_name": "decliningBalanceLoanInterestCalculator"}], "file": "appdomain/src/test/java/org/mifos/clientportfolio/newloan/domain/DecliningBalanceLoanInterestCalculatorTest.java"}, "test_case": {"identifier": "shouldCalculateLoanInterestWithPrincipalOnlyGraceAndGraceDuration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCalculateLoanInterestWithPrincipalOnlyGraceAndGraceDuration() {\n\n        // setup\n        LoanInterestCalculationDetails loanInterestCalculationDetails = new LoanInterestCalculationDetailsBuilder().withLoanAmount(\"100.0\")\n                                                                                                                   .withInterestRate(\"10.0\")\n                                                                                                                   .withDurationInYears(\"1.0\")\n                                                                                                                   .withGraceType(GraceType.PRINCIPALONLYGRACE)\n                                                                                                                   .withGraceDurationOf(3)\n                                                                                                                   .withNumberOfInstallments(6)\n                                                                                                                   .withInterestFractionalRatePerInstallmentOf(\"0.16\")\n                                                                                                                   .build();\n\n        // exercise test\n        Money calculatedInterest = decliningBalanceLoanInterestCalculator.calculate(loanInterestCalculationDetails);\n\n        // verification\n        assertThat(moneyOf(calculatedInterest), is(moneyOf(TestMoneyUtil.createMoney(\"81.6\"))));\n    }", "signature": "void shouldCalculateLoanInterestWithPrincipalOnlyGraceAndGraceDuration()", "full_signature": "@Test public void shouldCalculateLoanInterestWithPrincipalOnlyGraceAndGraceDuration()", "class_method_signature": "DecliningBalanceLoanInterestCalculatorTest.shouldCalculateLoanInterestWithPrincipalOnlyGraceAndGraceDuration()", "testcase": true, "constructor": false, "invocations": ["build", "withInterestFractionalRatePerInstallmentOf", "withNumberOfInstallments", "withGraceDurationOf", "withGraceType", "withDurationInYears", "withInterestRate", "withLoanAmount", "calculate", "assertThat", "moneyOf", "is", "moneyOf", "createMoney"]}, "focal_class": {"identifier": "DecliningBalanceLoanInterestCalculator", "superclass": "", "interfaces": "implements LoanInterestCalculator", "fields": [], "methods": [{"identifier": "calculate", "parameters": "(LoanInterestCalculationDetails loanInterestCalculationDetails)", "modifiers": "@Override public", "return": "Money", "signature": "Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "full_signature": "@Override public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "testcase": false, "constructor": false}, {"identifier": "getDecliningInterestAmount_v2", "parameters": "(GraceType graceType, Integer gracePeriodDuration, Integer numOfInstallments,\n            Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningInterestAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numOfInstallments,\n            Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningInterestAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numOfInstallments,\n            Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.getDecliningInterestAmount_v2(GraceType graceType, Integer gracePeriodDuration, Integer numOfInstallments,\n            Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}, {"identifier": "getDecliningInterestAmountGrace_v2", "parameters": "(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.getDecliningInterestAmountGrace_v2(Money loanAmount, Integer gracePeriodDuration, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}, {"identifier": "getDecliningInterestAmountNonGrace_v2", "parameters": "(final int numNonGraceInstallments, Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getDecliningInterestAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "full_signature": "private Money getDecliningInterestAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.getDecliningInterestAmountNonGrace_v2(final int numNonGraceInstallments, Money loanAmount, Double interestRate, Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}, {"identifier": "getPaymentPerPeriodForDecliningInterest_v2", "parameters": "(final int numInstallments, Double interestRate, Money loanAmount,\n            Double interestFractionalRatePerInstallment)", "modifiers": "private", "return": "Money", "signature": "Money getPaymentPerPeriodForDecliningInterest_v2(final int numInstallments, Double interestRate, Money loanAmount,\n            Double interestFractionalRatePerInstallment)", "full_signature": "private Money getPaymentPerPeriodForDecliningInterest_v2(final int numInstallments, Double interestRate, Money loanAmount,\n            Double interestFractionalRatePerInstallment)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.getPaymentPerPeriodForDecliningInterest_v2(final int numInstallments, Double interestRate, Money loanAmount,\n            Double interestFractionalRatePerInstallment)", "testcase": false, "constructor": false}], "file": "appdomain/src/main/java/org/mifos/clientportfolio/newloan/domain/DecliningBalanceLoanInterestCalculator.java"}, "focal_method": {"identifier": "calculate", "parameters": "(LoanInterestCalculationDetails loanInterestCalculationDetails)", "modifiers": "@Override public", "return": "Money", "body": "@Override\n    public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails) {\n\n        Money loanAmount = loanInterestCalculationDetails.getLoanAmount();\n        Double interestRate = loanInterestCalculationDetails.getInterestRate();\n\n        GraceType graceType = loanInterestCalculationDetails.getGraceType();\n        Integer gracePeriodDuration = loanInterestCalculationDetails.getGracePeriodDuration();\n        Integer numberOfInstallments = loanInterestCalculationDetails.getNumberOfInstallments();\n        Double interestFractionalRatePerInstallment = loanInterestCalculationDetails.getInterestFractionalRatePerInstallment();\n\n        return getDecliningInterestAmount_v2(graceType, gracePeriodDuration, numberOfInstallments, loanAmount, interestRate, interestFractionalRatePerInstallment);\n\n    }", "signature": "Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "full_signature": "@Override public Money calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "class_method_signature": "DecliningBalanceLoanInterestCalculator.calculate(LoanInterestCalculationDetails loanInterestCalculationDetails)", "testcase": false, "constructor": false, "invocations": ["getLoanAmount", "getInterestRate", "getGraceType", "getGracePeriodDuration", "getNumberOfInstallments", "getInterestFractionalRatePerInstallment", "getDecliningInterestAmount_v2"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}