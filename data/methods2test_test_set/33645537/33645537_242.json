{"test_class": {"identifier": "GoThroughMatrixInSpiralTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GoThroughMatrixInSpiral goThroughMatrixInSpiral;", "modifier": "private", "type": "GoThroughMatrixInSpiral", "declarator": "goThroughMatrixInSpiral", "var_name": "goThroughMatrixInSpiral"}], "file": "algs/src/test/java/com/github/pedrovgs/problem41/GoThroughMatrixInSpiralTest.java"}, "test_case": {"identifier": "shouldGoThroughTheMatrixInSpiral", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldGoThroughTheMatrixInSpiral() {\n    int[][] matrix = {\n        { 1, 2, 3, 4, 5, 6 }, { 20, 21, 22, 23, 24, 7 }, { 19, 32, 33, 34, 25, 8 },\n        { 18, 31, 36, 35, 26, 9 }, { 17, 30, 29, 28, 27, 10 }, { 16, 15, 14, 13, 12, 11 }\n    };\n\n    int[] result = goThroughMatrixInSpiral.go(matrix);\n\n    int[] expected = {\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36\n    };\n    assertArrayEquals(expected, result);\n  }", "signature": "void shouldGoThroughTheMatrixInSpiral()", "full_signature": "@Test public void shouldGoThroughTheMatrixInSpiral()", "class_method_signature": "GoThroughMatrixInSpiralTest.shouldGoThroughTheMatrixInSpiral()", "testcase": true, "constructor": false, "invocations": ["go", "assertArrayEquals"]}, "focal_class": {"identifier": "GoThroughMatrixInSpiral", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "go", "parameters": "(int[][] matrix)", "modifiers": "public", "return": "int[]", "signature": "int[] go(int[][] matrix)", "full_signature": "public int[] go(int[][] matrix)", "class_method_signature": "GoThroughMatrixInSpiral.go(int[][] matrix)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem41/GoThroughMatrixInSpiral.java"}, "focal_method": {"identifier": "go", "parameters": "(int[][] matrix)", "modifiers": "public", "return": "int[]", "body": "public int[] go(int[][] matrix) {\n    if (matrix == null) {\n      throw new IllegalArgumentException(\"You can't pass a null insantece as input.\");\n    }\n    if (matrix.length == 0) {\n      return new int[0];\n    }\n\n    //Calculate sizes\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int resultIndex = 0;\n    int[] result = new int[m * n];\n\n    int x = 0;\n    int y = 0;\n\n    //We are going to iterate over m and n subtracting 2 in each iteration.\n    while (m > 0 && n > 0) {\n\n      //If one row/column left, no circle can be formed\n      //Special cases where the size of the matrix is odd\n      if (m == 1) {\n        for (int i = 0; i < n; i++) {\n          result[resultIndex++] = matrix[x][y];\n          y++;\n        }\n        break;\n      } else if (n == 1) {\n        for (int i = 0; i < m; i++) {\n          result[resultIndex++] = matrix[x][y];\n          x++;\n        }\n        break;\n      }\n\n      //Process a circle\n\n      //top - move right. Move n positions -1 to the right\n      for (int i = 0; i < n - 1; i++) {\n        result[resultIndex++] = matrix[x][y];\n        y++;\n      }\n\n      //right - move down. Move n positions -1 to down.\n      for (int i = 0; i < m - 1; i++) {\n        result[resultIndex++] = matrix[x][y];\n        x++;\n      }\n\n      //bottom - move left. Move n positions -1 left\n      for (int i = 0; i < n - 1; i++) {\n        result[resultIndex++] = matrix[x][y];\n        y--;\n      }\n\n      //left - move up. ove n postitions .1 up\n      for (int i = 0; i < m - 1; i++) {\n        result[resultIndex++] = matrix[x][y];\n        x--;\n      }\n\n      //Increment x and y pointers.\n      x++;\n      y++;\n      //Update sizes to reduce the diameter.\n      m = m - 2;\n      n = n - 2;\n    }\n    return result;\n  }", "signature": "int[] go(int[][] matrix)", "full_signature": "public int[] go(int[][] matrix)", "class_method_signature": "GoThroughMatrixInSpiral.go(int[][] matrix)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}