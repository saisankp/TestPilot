{"test_class": {"identifier": "HexUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String line = \"Wondering how this works out. I would expect it's all going to work out fine, but it's hard to tell\";", "modifier": "private", "type": "String", "declarator": "line = \"Wondering how this works out. I would expect it's all going to work out fine, but it's hard to tell\"", "var_name": "line"}], "file": "preon-emitter/src/test/java/org/codehaus/preon/emitter/HexUtilsTest.java"}, "test_case": {"identifier": "shouldRenderCorrectlyWithoutAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRenderCorrectlyWithoutAddress() throws IOException {\n        byte[] buffer = line.getBytes(\"UTF-8\");\n        StringBuilder builder = new StringBuilder();\n        HexUtils.dump(buffer, builder, 16);\n        String[] lines = builder.toString().split(\"\\n\");\n        assertThat(lines.length, is(7));\n        assertThat(lines[0], is(\"57 6f 6e 64 65 72 69 6e  67 20 68 6f 77 20 74 68  |Wondering.how.th|\"));\n        assertThat(lines[1], is(\"69 73 20 77 6f 72 6b 73  20 6f 75 74 2e 20 49 20  |is.works.out..I.|\"));\n        assertThat(lines[2], is(\"77 6f 75 6c 64 20 65 78  70 65 63 74 20 69 74 27  |would.expect.it.|\"));\n        assertThat(lines[3], is(\"73 20 61 6c 6c 20 67 6f  69 6e 67 20 74 6f 20 77  |s.all.going.to.w|\"));\n        assertThat(lines[4], is(\"6f 72 6b 20 6f 75 74 20  66 69 6e 65 2c 20 62 75  |ork.out.fine..bu|\"));\n        assertThat(lines[5], is(\"74 20 69 74 27 73 20 68  61 72 64 20 74 6f 20 74  |t.it.s.hard.to.t|\"));\n        assertThat(lines[6], is(\"65 6c 6c                                          |ell             |\"));\n    }", "signature": "void shouldRenderCorrectlyWithoutAddress()", "full_signature": "@Test public void shouldRenderCorrectlyWithoutAddress()", "class_method_signature": "HexUtilsTest.shouldRenderCorrectlyWithoutAddress()", "testcase": true, "constructor": false, "invocations": ["getBytes", "dump", "split", "toString", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "HexUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] symbols = { '0', '1', '2', '3', '4', '5', '6',\n            '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };", "modifier": "private static final", "type": "char[]", "declarator": "symbols = { '0', '1', '2', '3', '4', '5', '6',\n            '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }", "var_name": "symbols"}, {"original_string": "private static final int ADDRESS_LENGTH = 6;", "modifier": "private static final", "type": "int", "declarator": "ADDRESS_LENGTH = 6", "var_name": "ADDRESS_LENGTH"}, {"original_string": "private static final char[] asc = new char[256];", "modifier": "private static final", "type": "char[]", "declarator": "asc = new char[256]", "var_name": "asc"}, {"original_string": "private static final char SPACE = ' ';", "modifier": "private static final", "type": "char", "declarator": "SPACE = ' '", "var_name": "SPACE"}, {"original_string": "private static final char EXTRA_SPACE = SPACE;", "modifier": "private static final", "type": "char", "declarator": "EXTRA_SPACE = SPACE", "var_name": "EXTRA_SPACE"}], "methods": [{"identifier": "dump", "parameters": "(byte[] buffer, Appendable out)", "modifiers": "public static", "return": "void", "signature": "void dump(byte[] buffer, Appendable out)", "full_signature": "public static void dump(byte[] buffer, Appendable out)", "class_method_signature": "HexUtils.dump(byte[] buffer, Appendable out)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(byte[] buffer, Appendable out,\n            boolean prependAddress)", "modifiers": "public static", "return": "void", "signature": "void dump(byte[] buffer, Appendable out,\n            boolean prependAddress)", "full_signature": "public static void dump(byte[] buffer, Appendable out,\n            boolean prependAddress)", "class_method_signature": "HexUtils.dump(byte[] buffer, Appendable out,\n            boolean prependAddress)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(byte[] buffer, Appendable out, int bytesPerLine)", "modifiers": "public static", "return": "void", "signature": "void dump(byte[] buffer, Appendable out, int bytesPerLine)", "full_signature": "public static void dump(byte[] buffer, Appendable out, int bytesPerLine)", "class_method_signature": "HexUtils.dump(byte[] buffer, Appendable out, int bytesPerLine)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(byte[] buffer, Appendable out, int bytesPerLine, boolean prependAddress)", "modifiers": "public static", "return": "void", "signature": "void dump(byte[] buffer, Appendable out, int bytesPerLine, boolean prependAddress)", "full_signature": "public static void dump(byte[] buffer, Appendable out, int bytesPerLine, boolean prependAddress)", "class_method_signature": "HexUtils.dump(byte[] buffer, Appendable out, int bytesPerLine, boolean prependAddress)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(ByteBuffer buffer, Appendable out, int bytesPerLine,\n            boolean prependAddress)", "modifiers": "public static", "return": "void", "signature": "void dump(ByteBuffer buffer, Appendable out, int bytesPerLine,\n            boolean prependAddress)", "full_signature": "public static void dump(ByteBuffer buffer, Appendable out, int bytesPerLine,\n            boolean prependAddress)", "class_method_signature": "HexUtils.dump(ByteBuffer buffer, Appendable out, int bytesPerLine,\n            boolean prependAddress)", "testcase": false, "constructor": false}, {"identifier": "prependAddress", "parameters": "(boolean prependAddress, int line, int bytesPerLine, Appendable out)", "modifiers": "private static", "return": "void", "signature": "void prependAddress(boolean prependAddress, int line, int bytesPerLine, Appendable out)", "full_signature": "private static void prependAddress(boolean prependAddress, int line, int bytesPerLine, Appendable out)", "class_method_signature": "HexUtils.prependAddress(boolean prependAddress, int line, int bytesPerLine, Appendable out)", "testcase": false, "constructor": false}, {"identifier": "appendAscii", "parameters": "(byte[] buffer, int nrBytes, Appendable out, int bytesPerLine)", "modifiers": "private static", "return": "void", "signature": "void appendAscii(byte[] buffer, int nrBytes, Appendable out, int bytesPerLine)", "full_signature": "private static void appendAscii(byte[] buffer, int nrBytes, Appendable out, int bytesPerLine)", "class_method_signature": "HexUtils.appendAscii(byte[] buffer, int nrBytes, Appendable out, int bytesPerLine)", "testcase": false, "constructor": false}, {"identifier": "hiword", "parameters": "(byte b)", "modifiers": "private static", "return": "int", "signature": "int hiword(byte b)", "full_signature": "private static int hiword(byte b)", "class_method_signature": "HexUtils.hiword(byte b)", "testcase": false, "constructor": false}, {"identifier": "loword", "parameters": "(byte b)", "modifiers": "private static", "return": "int", "signature": "int loword(byte b)", "full_signature": "private static int loword(byte b)", "class_method_signature": "HexUtils.loword(byte b)", "testcase": false, "constructor": false}], "file": "preon-emitter/src/main/java/org/codehaus/preon/emitter/HexUtils.java"}, "focal_method": {"identifier": "dump", "parameters": "(byte[] buffer, Appendable out)", "modifiers": "public static", "return": "void", "body": "public static void dump(byte[] buffer, Appendable out) throws IOException {\n        dump(buffer, out, false);\n    }", "signature": "void dump(byte[] buffer, Appendable out)", "full_signature": "public static void dump(byte[] buffer, Appendable out)", "class_method_signature": "HexUtils.dump(byte[] buffer, Appendable out)", "testcase": false, "constructor": false, "invocations": ["dump"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}