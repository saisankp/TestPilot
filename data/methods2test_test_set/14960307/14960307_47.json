{"test_class": {"identifier": "CharsetUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CharsetUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CharsetUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-charset/src/test/java/com/cloudhopper/commons/charset/CharsetUtilTest.java"}, "test_case": {"identifier": "normalize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalize() throws Exception {\n        String in = null;\n\n        // try every charset with simple A-Z, a-z, and 0-9 which should work in all charsets\n        in = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefjhijklmnopqrstuvwxyz01234567890?&@\";\n        for (Map.Entry<String,Charset> entry : CharsetUtil.getCharsetMap().entrySet()) {\n            Assert.assertEquals(\"Charset \" + entry.getKey() + \" implementation broken\", in, CharsetUtil.normalize(in, entry.getValue()));\n        }\n\n        in = \"\\u20AC\";  // euro currency char (only supported in a couple charsets)\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_GSM));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_PACKED_GSM));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_AIRWIDE_GSM));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_VFD2_GSM));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_VFTR_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_ISO_8859_1));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_ISO_8859_15));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UCS_2));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UCS_2LE));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UTF_8));\n        Assert.assertEquals(\"\\u20AC\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_TMOBILENL_GSM));\n\n        in = \"\\u6025\";  // arabic char (only supported in a couple charsets)\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_PACKED_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_AIRWIDE_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_VFD2_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_VFTR_GSM));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_ISO_8859_1));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_ISO_8859_15));\n        Assert.assertEquals(\"\\u6025\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UCS_2));\n        Assert.assertEquals(\"\\u6025\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UCS_2LE));\n        Assert.assertEquals(\"\\u6025\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_UTF_8));\n        Assert.assertEquals(\"?\", CharsetUtil.normalize(in, CharsetUtil.CHARSET_TMOBILENL_GSM));\n    }", "signature": "void normalize()", "full_signature": "@Test public void normalize()", "class_method_signature": "CharsetUtilTest.normalize()", "testcase": true, "constructor": false, "invocations": ["entrySet", "getCharsetMap", "assertEquals", "getKey", "normalize", "getValue", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize", "assertEquals", "normalize"]}, "focal_class": {"identifier": "CharsetUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final HashMap<String,Charset> charsets;", "modifier": "public static final", "type": "HashMap<String,Charset>", "declarator": "charsets", "var_name": "charsets"}, {"original_string": "public static final String NAME_ISO_8859_1 = \"ISO-8859-1\";", "modifier": "public static final", "type": "String", "declarator": "NAME_ISO_8859_1 = \"ISO-8859-1\"", "var_name": "NAME_ISO_8859_1"}, {"original_string": "public static final String NAME_ISO_8859_15 = \"ISO-8859-15\";", "modifier": "public static final", "type": "String", "declarator": "NAME_ISO_8859_15 = \"ISO-8859-15\"", "var_name": "NAME_ISO_8859_15"}, {"original_string": "public static final String NAME_GSM = \"GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_GSM = \"GSM\"", "var_name": "NAME_GSM"}, {"original_string": "public static final String NAME_PACKED_GSM = \"PACKED-GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_PACKED_GSM = \"PACKED-GSM\"", "var_name": "NAME_PACKED_GSM"}, {"original_string": "public static final String NAME_UCS_2 = \"UCS-2\";", "modifier": "public static final", "type": "String", "declarator": "NAME_UCS_2 = \"UCS-2\"", "var_name": "NAME_UCS_2"}, {"original_string": "public static final String NAME_UCS_2LE = \"UCS-2LE\";", "modifier": "public static final", "type": "String", "declarator": "NAME_UCS_2LE = \"UCS-2LE\"", "var_name": "NAME_UCS_2LE"}, {"original_string": "public static final String NAME_UTF_8 = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "NAME_UTF_8 = \"UTF-8\"", "var_name": "NAME_UTF_8"}, {"original_string": "public static final String NAME_MODIFIED_UTF8 = \"MODIFIED-UTF8\";", "modifier": "public static final", "type": "String", "declarator": "NAME_MODIFIED_UTF8 = \"MODIFIED-UTF8\"", "var_name": "NAME_MODIFIED_UTF8"}, {"original_string": "public static final String NAME_AIRWIDE_IA5 = \"AIRWIDE-IA5\";", "modifier": "public static final", "type": "String", "declarator": "NAME_AIRWIDE_IA5 = \"AIRWIDE-IA5\"", "var_name": "NAME_AIRWIDE_IA5"}, {"original_string": "public static final String NAME_VFD2_GSM = \"VFD2-GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_VFD2_GSM = \"VFD2-GSM\"", "var_name": "NAME_VFD2_GSM"}, {"original_string": "public static final String NAME_VFTR_GSM = \"VFTR-GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_VFTR_GSM = \"VFTR-GSM\"", "var_name": "NAME_VFTR_GSM"}, {"original_string": "public static final String NAME_GSM7 = \"GSM7\";", "modifier": "public static final", "type": "String", "declarator": "NAME_GSM7 = \"GSM7\"", "var_name": "NAME_GSM7"}, {"original_string": "public static final String NAME_GSM8 = \"GSM8\";", "modifier": "public static final", "type": "String", "declarator": "NAME_GSM8 = \"GSM8\"", "var_name": "NAME_GSM8"}, {"original_string": "public static final String NAME_AIRWIDE_GSM = \"AIRWIDE-GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_AIRWIDE_GSM = \"AIRWIDE-GSM\"", "var_name": "NAME_AIRWIDE_GSM"}, {"original_string": "public static final String NAME_TMOBILENL_GSM = \"TMOBILE-NL-GSM\";", "modifier": "public static final", "type": "String", "declarator": "NAME_TMOBILENL_GSM = \"TMOBILE-NL-GSM\"", "var_name": "NAME_TMOBILENL_GSM"}, {"original_string": "public static final Charset CHARSET_ISO_8859_1 = new ISO88591Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_ISO_8859_1 = new ISO88591Charset()", "var_name": "CHARSET_ISO_8859_1"}, {"original_string": "public static final Charset CHARSET_ISO_8859_15 = new ISO885915Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_ISO_8859_15 = new ISO885915Charset()", "var_name": "CHARSET_ISO_8859_15"}, {"original_string": "public static final Charset CHARSET_GSM = new GSMCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_GSM = new GSMCharset()", "var_name": "CHARSET_GSM"}, {"original_string": "public static final Charset CHARSET_PACKED_GSM = new PackedGSMCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_PACKED_GSM = new PackedGSMCharset()", "var_name": "CHARSET_PACKED_GSM"}, {"original_string": "public static final Charset CHARSET_UCS_2 = new UCS2Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_UCS_2 = new UCS2Charset()", "var_name": "CHARSET_UCS_2"}, {"original_string": "public static final Charset CHARSET_UCS_2LE = new UCS2LECharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_UCS_2LE = new UCS2LECharset()", "var_name": "CHARSET_UCS_2LE"}, {"original_string": "public static final Charset CHARSET_UTF_8 = new UTF8Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_UTF_8 = new UTF8Charset()", "var_name": "CHARSET_UTF_8"}, {"original_string": "public static final Charset CHARSET_MODIFIED_UTF8 = new ModifiedUTF8Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_MODIFIED_UTF8 = new ModifiedUTF8Charset()", "var_name": "CHARSET_MODIFIED_UTF8"}, {"original_string": "public static final Charset CHARSET_AIRWIDE_IA5 = new AirwideIA5Charset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_AIRWIDE_IA5 = new AirwideIA5Charset()", "var_name": "CHARSET_AIRWIDE_IA5"}, {"original_string": "public static final Charset CHARSET_VFD2_GSM = new VFD2GSMCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_VFD2_GSM = new VFD2GSMCharset()", "var_name": "CHARSET_VFD2_GSM"}, {"original_string": "public static final Charset CHARSET_VFTR_GSM = new VFTRGSMCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_VFTR_GSM = new VFTRGSMCharset()", "var_name": "CHARSET_VFTR_GSM"}, {"original_string": "public static final Charset CHARSET_GSM7 = CHARSET_PACKED_GSM;", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_GSM7 = CHARSET_PACKED_GSM", "var_name": "CHARSET_GSM7"}, {"original_string": "public static final Charset CHARSET_GSM8 = CHARSET_GSM;", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_GSM8 = CHARSET_GSM", "var_name": "CHARSET_GSM8"}, {"original_string": "public static final Charset CHARSET_AIRWIDE_GSM = CHARSET_AIRWIDE_IA5;", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_AIRWIDE_GSM = CHARSET_AIRWIDE_IA5", "var_name": "CHARSET_AIRWIDE_GSM"}, {"original_string": "public static final Charset CHARSET_TMOBILENL_GSM = new TMobileNlGSMCharset();", "modifier": "public static final", "type": "Charset", "declarator": "CHARSET_TMOBILENL_GSM = new TMobileNlGSMCharset()", "var_name": "CHARSET_TMOBILENL_GSM"}], "methods": [{"identifier": "getCharsetMap", "parameters": "()", "modifiers": "static public", "return": "HashMap<String,Charset>", "signature": "HashMap<String,Charset> getCharsetMap()", "full_signature": "static public HashMap<String,Charset> getCharsetMap()", "class_method_signature": "CharsetUtil.getCharsetMap()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(String charsetName)", "modifiers": "static public", "return": "Charset", "signature": "Charset map(String charsetName)", "full_signature": "static public Charset map(String charsetName)", "class_method_signature": "CharsetUtil.map(String charsetName)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(CharSequence str0, String charsetName)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] encode(CharSequence str0, String charsetName)", "full_signature": "static public byte[] encode(CharSequence str0, String charsetName)", "class_method_signature": "CharsetUtil.encode(CharSequence str0, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(CharSequence str0, Charset charset)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] encode(CharSequence str0, Charset charset)", "full_signature": "static public byte[] encode(CharSequence str0, Charset charset)", "class_method_signature": "CharsetUtil.encode(CharSequence str0, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, StringBuilder buffer, String charsetName)", "modifiers": "static public", "return": "void", "signature": "void decode(byte[] bytes, StringBuilder buffer, String charsetName)", "full_signature": "static public void decode(byte[] bytes, StringBuilder buffer, String charsetName)", "class_method_signature": "CharsetUtil.decode(byte[] bytes, StringBuilder buffer, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, StringBuilder buffer, Charset charset)", "modifiers": "static public", "return": "void", "signature": "void decode(byte[] bytes, StringBuilder buffer, Charset charset)", "full_signature": "static public void decode(byte[] bytes, StringBuilder buffer, Charset charset)", "class_method_signature": "CharsetUtil.decode(byte[] bytes, StringBuilder buffer, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, String charsetName)", "modifiers": "static public", "return": "String", "signature": "String decode(byte[] bytes, String charsetName)", "full_signature": "static public String decode(byte[] bytes, String charsetName)", "class_method_signature": "CharsetUtil.decode(byte[] bytes, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes, Charset charset)", "modifiers": "static public", "return": "String", "signature": "String decode(byte[] bytes, Charset charset)", "full_signature": "static public String decode(byte[] bytes, Charset charset)", "class_method_signature": "CharsetUtil.decode(byte[] bytes, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(CharSequence str0, String charsetName)", "modifiers": "static public", "return": "String", "signature": "String normalize(CharSequence str0, String charsetName)", "full_signature": "static public String normalize(CharSequence str0, String charsetName)", "class_method_signature": "CharsetUtil.normalize(CharSequence str0, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(CharSequence str0, Charset charset)", "modifiers": "static public", "return": "String", "signature": "String normalize(CharSequence str0, Charset charset)", "full_signature": "static public String normalize(CharSequence str0, Charset charset)", "class_method_signature": "CharsetUtil.normalize(CharSequence str0, Charset charset)", "testcase": false, "constructor": false}], "file": "ch-commons-charset/src/main/java/com/cloudhopper/commons/charset/CharsetUtil.java"}, "focal_method": {"identifier": "normalize", "parameters": "(CharSequence str0, String charsetName)", "modifiers": "static public", "return": "String", "body": "static public String normalize(CharSequence str0, String charsetName) {\n        Charset charset = map(charsetName);\n        if (charset == null) {\n            throw new IllegalArgumentException(\"Unsupported charset [\" + charsetName + \"]\");\n        }\n        return normalize(str0, charset);\n    }", "signature": "String normalize(CharSequence str0, String charsetName)", "full_signature": "static public String normalize(CharSequence str0, String charsetName)", "class_method_signature": "CharsetUtil.normalize(CharSequence str0, String charsetName)", "testcase": false, "constructor": false, "invocations": ["map", "normalize"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}