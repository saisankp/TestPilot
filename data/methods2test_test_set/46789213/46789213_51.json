{"test_class": {"identifier": "LengthAdjustmentTest", "superclass": "", "interfaces": "", "fields": [], "file": "tools/ot/src/test/java/dk/alexandra/fresco/tools/ot/otextension/LengthAdjustmentTest.java"}, "test_case": {"identifier": "testAdjustNullCandidate", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n  public void testAdjustNullCandidate() {\n    LengthAdjustment.adjust(null, 10);\n  }", "signature": "void testAdjustNullCandidate()", "full_signature": "@Test(expected = NullPointerException.class) public void testAdjustNullCandidate()", "class_method_signature": "LengthAdjustmentTest.testAdjustNullCandidate()", "testcase": true, "constructor": false, "invocations": ["adjust"]}, "focal_class": {"identifier": "LengthAdjustment", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String DIGEST_ALGO = \"SHA-256\";", "modifier": "static final", "type": "String", "declarator": "DIGEST_ALGO = \"SHA-256\"", "var_name": "DIGEST_ALGO"}], "methods": [{"identifier": "LengthAdjustment", "parameters": "()", "modifiers": "private", "return": "", "signature": " LengthAdjustment()", "full_signature": "private  LengthAdjustment()", "class_method_signature": "LengthAdjustment.LengthAdjustment()", "testcase": false, "constructor": true}, {"identifier": "adjust", "parameters": "(byte[] candidate, int byteLength)", "modifiers": "static", "return": "byte[]", "signature": "byte[] adjust(byte[] candidate, int byteLength)", "full_signature": "static byte[] adjust(byte[] candidate, int byteLength)", "class_method_signature": "LengthAdjustment.adjust(byte[] candidate, int byteLength)", "testcase": false, "constructor": false}, {"identifier": "getDigest", "parameters": "(String algo)", "modifiers": "private static", "return": "MessageDigest", "signature": "MessageDigest getDigest(String algo)", "full_signature": "private static MessageDigest getDigest(String algo)", "class_method_signature": "LengthAdjustment.getDigest(String algo)", "testcase": false, "constructor": false}, {"identifier": "intToBytes", "parameters": "(int i)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] intToBytes(int i)", "full_signature": "private static byte[] intToBytes(int i)", "class_method_signature": "LengthAdjustment.intToBytes(int i)", "testcase": false, "constructor": false}], "file": "tools/ot/src/main/java/dk/alexandra/fresco/tools/ot/otextension/LengthAdjustment.java"}, "focal_method": {"identifier": "adjust", "parameters": "(byte[] candidate, int byteLength)", "modifiers": "static", "return": "byte[]", "body": "static byte[] adjust(byte[] candidate, int byteLength) {\n    Objects.requireNonNull(candidate);\n    if (byteLength < 0) {\n      throw new IllegalArgumentException(\"Can not adjust length to negative length: \" + byteLength);\n    }\n    byte[] key;\n    if (candidate.length >= byteLength) {\n      key = Arrays.copyOf(candidate, byteLength);\n    } else {\n      key = new byte[byteLength];\n      int offset = 0;\n      int counter = 0;\n      while (offset < byteLength) {\n        MessageDigest digest = getDigest(DIGEST_ALGO);\n        digest.update(intToBytes(counter++));\n        digest.update(candidate);\n        int len = Math.min(digest.getDigestLength(), byteLength - offset);\n        System.arraycopy(digest.digest(), 0, key, offset, len);\n        offset += len;\n      }\n    }\n    return key;\n  }", "signature": "byte[] adjust(byte[] candidate, int byteLength)", "full_signature": "static byte[] adjust(byte[] candidate, int byteLength)", "class_method_signature": "LengthAdjustment.adjust(byte[] candidate, int byteLength)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "copyOf", "getDigest", "update", "intToBytes", "update", "min", "getDigestLength", "arraycopy", "digest"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}