{"test_class": {"identifier": "RuleDatabaseItemUpdateRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context mockContext;", "modifier": "private", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private SingleWriterMultipleReaderFile singleWriterMultipleReaderFile;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "singleWriterMultipleReaderFile", "var_name": "singleWriterMultipleReaderFile"}, {"original_string": "private HttpURLConnection connection;", "modifier": "private", "type": "HttpURLConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private CountingAnswer finishAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "finishAnswer", "var_name": "finishAnswer"}, {"original_string": "private CountingAnswer failAnswer;", "modifier": "private", "type": "CountingAnswer", "declarator": "failAnswer", "var_name": "failAnswer"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private RuleDatabaseUpdateTask realTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "realTask", "var_name": "realTask"}, {"original_string": "private RuleDatabaseUpdateTask mockTask;", "modifier": "private", "type": "RuleDatabaseUpdateTask", "declarator": "mockTask", "var_name": "mockTask"}, {"original_string": "private ContentResolver mockResolver;", "modifier": "private", "type": "ContentResolver", "declarator": "mockResolver", "var_name": "mockResolver"}], "file": "app/src/test/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnableTest.java"}, "test_case": {"identifier": "testShouldDownload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldDownload() throws Exception {\n        Configuration.Item item = new Configuration.Item();\n        item.state = Configuration.Item.STATE_DENY;\n        item.location = \"example.com\";\n        item.title = \"host-uri\";\n\n        RuleDatabaseItemUpdateRunnable itemUpdateRunnable = new RuleDatabaseItemUpdateRunnable(mockTask, mockContext, item);\n\n        // File should not be downloaded\n        assertFalse(itemUpdateRunnable.shouldDownload());\n\n        // Content URI should\n        item.location = \"content://foo\";\n        assertTrue(itemUpdateRunnable.shouldDownload());\n\n        // Do not download ignored URIs\n        item.state = Configuration.Item.STATE_IGNORE;\n        assertFalse(itemUpdateRunnable.shouldDownload());\n        item.state = Configuration.Item.STATE_DENY;\n\n        item.location = \"https://foo\";\n        assertTrue(itemUpdateRunnable.shouldDownload());\n\n        item.location = \"http://foo\";\n        assertTrue(itemUpdateRunnable.shouldDownload());\n    }", "signature": "void testShouldDownload()", "full_signature": "@Test public void testShouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnableTest.testShouldDownload()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "shouldDownload", "assertTrue", "shouldDownload", "assertFalse", "shouldDownload", "assertTrue", "shouldDownload", "assertTrue", "shouldDownload"]}, "focal_class": {"identifier": "RuleDatabaseItemUpdateRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final int CONNECT_TIMEOUT_MILLIS = 30000;", "modifier": "private static final", "type": "int", "declarator": "CONNECT_TIMEOUT_MILLIS = 30000", "var_name": "CONNECT_TIMEOUT_MILLIS"}, {"original_string": "private static final int READ_TIMEOUT_MILLIS = 10000;", "modifier": "private static final", "type": "int", "declarator": "READ_TIMEOUT_MILLIS = 10000", "var_name": "READ_TIMEOUT_MILLIS"}, {"original_string": "private static final String TAG = \"RuleDbItemUpdate\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"RuleDbItemUpdate\"", "var_name": "TAG"}, {"original_string": "RuleDatabaseUpdateTask parentTask;", "modifier": "", "type": "RuleDatabaseUpdateTask", "declarator": "parentTask", "var_name": "parentTask"}, {"original_string": "Configuration.Item item;", "modifier": "", "type": "Configuration.Item", "declarator": "item", "var_name": "item"}, {"original_string": "Context context;", "modifier": "", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "RuleDatabaseItemUpdateRunnable", "parameters": "(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "modifiers": "", "return": "", "signature": " RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "full_signature": "  RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.RuleDatabaseItemUpdateRunnable(@NonNull RuleDatabaseUpdateTask parentTask, @NonNull Context context, @NonNull Configuration.Item item)", "testcase": false, "constructor": true}, {"identifier": "shouldDownload", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean shouldDownload()", "full_signature": " boolean shouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.shouldDownload()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "parseUri", "parameters": "(String uri)", "modifiers": "", "return": "Uri", "signature": "Uri parseUri(String uri)", "full_signature": " Uri parseUri(String uri)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.parseUri(String uri)", "testcase": false, "constructor": false}, {"identifier": "getHttpURLConnection", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "modifiers": "@NonNull", "return": "HttpURLConnection", "signature": "HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "full_signature": "@NonNull HttpURLConnection getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.getHttpURLConnection(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, URL url)", "testcase": false, "constructor": false}, {"identifier": "internalOpenHttpConnection", "parameters": "(URL url)", "modifiers": "", "return": "HttpURLConnection", "signature": "HttpURLConnection internalOpenHttpConnection(URL url)", "full_signature": " HttpURLConnection internalOpenHttpConnection(URL url)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.internalOpenHttpConnection(URL url)", "testcase": false, "constructor": false}, {"identifier": "validateResponse", "parameters": "(HttpURLConnection connection)", "modifiers": "", "return": "boolean", "signature": "boolean validateResponse(HttpURLConnection connection)", "full_signature": " boolean validateResponse(HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.validateResponse(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "modifiers": "", "return": "void", "signature": "void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "full_signature": " void downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.downloadFile(File file, SingleWriterMultipleReaderFile singleWriterMultipleReaderFile, HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "copyStream", "parameters": "(InputStream inStream, OutputStream outStream)", "modifiers": "", "return": "void", "signature": "void copyStream(InputStream inStream, OutputStream outStream)", "full_signature": " void copyStream(InputStream inStream, OutputStream outStream)", "class_method_signature": "RuleDatabaseItemUpdateRunnable.copyStream(InputStream inStream, OutputStream outStream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/db/RuleDatabaseItemUpdateRunnable.java"}, "focal_method": {"identifier": "shouldDownload", "parameters": "()", "modifiers": "", "return": "boolean", "body": "boolean shouldDownload() {\n        if (item.state == Configuration.Item.STATE_IGNORE) {\n            return false;\n        }\n\n        // Not sure if that is slow or not.\n        if (item.location.startsWith(\"content:/\")) {\n            return true;\n        }\n\n        file = FileHelper.getItemFile(context, item);\n        if (file == null || !item.isDownloadable()) {\n            return false;\n        }\n\n        try {\n            url = new URL(item.location);\n        } catch (MalformedURLException e) {\n            parentTask.addError(item, context.getString(R.string.invalid_url_s, item.location));\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean shouldDownload()", "full_signature": " boolean shouldDownload()", "class_method_signature": "RuleDatabaseItemUpdateRunnable.shouldDownload()", "testcase": false, "constructor": false, "invocations": ["startsWith", "getItemFile", "isDownloadable", "addError", "getString"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}