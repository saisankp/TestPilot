{"test_class": {"identifier": "GroupedRandomAccessSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] data;", "modifier": "", "type": "byte[]", "declarator": "data", "var_name": "data"}], "file": "itext/src/test/java/com/itextpdf/text/io/GroupedRandomAccessSourceTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGet() throws Exception {\n\t\tArrayRandomAccessSource source1 = new ArrayRandomAccessSource(data);\n\t\tArrayRandomAccessSource source2 = new ArrayRandomAccessSource(data);\n\t\tArrayRandomAccessSource source3 = new ArrayRandomAccessSource(data);\n\t\t\n\t\tRandomAccessSource[] inputs = new RandomAccessSource[]{\n\t\t\t\tsource1, source2, source3\n\t\t};\n\t\t\n\t\tGroupedRandomAccessSource grouped = new GroupedRandomAccessSource(inputs);\n\t\t\n\t\tAssert.assertEquals(source1.length() + source2.length() + source3.length(), grouped.length());\n\n\t\tAssert.assertEquals(source1.get(99),  grouped.get(99));\n\t\tAssert.assertEquals(source2.get(0),  grouped.get(100));\n\t\tAssert.assertEquals(source2.get(1),  grouped.get(101));\n\t\tAssert.assertEquals(source1.get(99),  grouped.get(99));\n\t\tAssert.assertEquals(source3.get(99),  grouped.get(299));\n\n\t\tAssert.assertEquals(-1, grouped.get(300));\n\t}", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "GroupedRandomAccessSourceTest.testGet()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "length", "length", "length", "length", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "GroupedRandomAccessSource", "superclass": "", "interfaces": "implements RandomAccessSource", "fields": [{"original_string": "private final SourceEntry[] sources;", "modifier": "private final", "type": "SourceEntry[]", "declarator": "sources", "var_name": "sources"}, {"original_string": "private SourceEntry currentSourceEntry;", "modifier": "private", "type": "SourceEntry", "declarator": "currentSourceEntry", "var_name": "currentSourceEntry"}, {"original_string": "private final long size;", "modifier": "private final", "type": "long", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "GroupedRandomAccessSource", "parameters": "(RandomAccessSource[] sources)", "modifiers": "public", "return": "", "signature": " GroupedRandomAccessSource(RandomAccessSource[] sources)", "full_signature": "public  GroupedRandomAccessSource(RandomAccessSource[] sources)", "class_method_signature": "GroupedRandomAccessSource.GroupedRandomAccessSource(RandomAccessSource[] sources)", "testcase": false, "constructor": true}, {"identifier": "getStartingSourceIndex", "parameters": "(long offset)", "modifiers": "protected", "return": "int", "signature": "int getStartingSourceIndex(long offset)", "full_signature": "protected int getStartingSourceIndex(long offset)", "class_method_signature": "GroupedRandomAccessSource.getStartingSourceIndex(long offset)", "testcase": false, "constructor": false}, {"identifier": "getSourceEntryForOffset", "parameters": "(long offset)", "modifiers": "private", "return": "SourceEntry", "signature": "SourceEntry getSourceEntryForOffset(long offset)", "full_signature": "private SourceEntry getSourceEntryForOffset(long offset)", "class_method_signature": "GroupedRandomAccessSource.getSourceEntryForOffset(long offset)", "testcase": false, "constructor": false}, {"identifier": "sourceReleased", "parameters": "(RandomAccessSource source)", "modifiers": "protected", "return": "void", "signature": "void sourceReleased(RandomAccessSource source)", "full_signature": "protected void sourceReleased(RandomAccessSource source)", "class_method_signature": "GroupedRandomAccessSource.sourceReleased(RandomAccessSource source)", "testcase": false, "constructor": false}, {"identifier": "sourceInUse", "parameters": "(RandomAccessSource source)", "modifiers": "protected", "return": "void", "signature": "void sourceInUse(RandomAccessSource source)", "full_signature": "protected void sourceInUse(RandomAccessSource source)", "class_method_signature": "GroupedRandomAccessSource.sourceInUse(RandomAccessSource source)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long position)", "modifiers": "public", "return": "int", "signature": "int get(long position)", "full_signature": "public int get(long position)", "class_method_signature": "GroupedRandomAccessSource.get(long position)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long position, byte[] bytes, int off, int len)", "modifiers": "public", "return": "int", "signature": "int get(long position, byte[] bytes, int off, int len)", "full_signature": "public int get(long position, byte[] bytes, int off, int len)", "class_method_signature": "GroupedRandomAccessSource.get(long position, byte[] bytes, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long length()", "full_signature": "public long length()", "class_method_signature": "GroupedRandomAccessSource.length()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "GroupedRandomAccessSource.close()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/io/GroupedRandomAccessSource.java"}, "focal_method": {"identifier": "get", "parameters": "(long position)", "modifiers": "public", "return": "int", "body": "public int get(long position) throws IOException {\n\t\tSourceEntry entry = getSourceEntryForOffset(position);\n\t\t\n        if (entry == null) // we have run out of data to read from\n        \treturn -1;\n        \n        return entry.source.get(entry.offsetN(position));\n\n\t}", "signature": "int get(long position)", "full_signature": "public int get(long position)", "class_method_signature": "GroupedRandomAccessSource.get(long position)", "testcase": false, "constructor": false, "invocations": ["getSourceEntryForOffset", "get", "offsetN"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}