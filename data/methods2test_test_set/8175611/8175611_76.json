{"test_class": {"identifier": "DefaultDataProviderMethodResolverTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Spy\n    private DefaultDataProviderMethodResolver underTest;", "modifier": "@Spy\n    private", "type": "DefaultDataProviderMethodResolver", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private DataConverter dataConverter;", "modifier": "@Mock\n    private", "type": "DataConverter", "declarator": "dataConverter", "var_name": "dataConverter"}, {"original_string": "@Mock\n    private TestValidator testValidator;", "modifier": "@Mock\n    private", "type": "TestValidator", "declarator": "testValidator", "var_name": "testValidator"}, {"original_string": "@Mock\n    private TestGenerator testGenerator;", "modifier": "@Mock\n    private", "type": "TestGenerator", "declarator": "testGenerator", "var_name": "testGenerator"}, {"original_string": "@Mock\n    private TestGenerator frameworkMethodGenerator;", "modifier": "@Mock\n    private", "type": "TestGenerator", "declarator": "frameworkMethodGenerator", "var_name": "frameworkMethodGenerator"}, {"original_string": "@Mock\n    private TestClass testClass;", "modifier": "@Mock\n    private", "type": "TestClass", "declarator": "testClass", "var_name": "testClass"}, {"original_string": "@Mock\n    private FrameworkMethod testMethod;", "modifier": "@Mock\n    private", "type": "FrameworkMethod", "declarator": "testMethod", "var_name": "testMethod"}, {"original_string": "@Mock\n    private FrameworkMethod dataProviderMethod;", "modifier": "@Mock\n    private", "type": "FrameworkMethod", "declarator": "dataProviderMethod", "var_name": "dataProviderMethod"}, {"original_string": "@Mock\n    private UseDataProvider useDataProvider;", "modifier": "@Mock\n    private", "type": "UseDataProvider", "declarator": "useDataProvider", "var_name": "useDataProvider"}, {"original_string": "@Mock\n    private DataProvider dataProvider;", "modifier": "@Mock\n    private", "type": "DataProvider", "declarator": "dataProvider", "var_name": "dataProvider"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/internal/DefaultDataProviderMethodResolverTest.java"}, "test_case": {"identifier": "testFindDataProviderMethodsShouldReturnEmptyListIfLocationsIsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataProviderMethodsShouldReturnEmptyListIfLocationsIsEmpty() {\n        // When:\n        List<FrameworkMethod> result = underTest.findDataProviderMethods(testClassesFor(), \"testMethodName\", \"useDataProviderValue\");\n\n        // Then:\n        assertThat(result).isEmpty();\n    }", "signature": "void testFindDataProviderMethodsShouldReturnEmptyListIfLocationsIsEmpty()", "full_signature": "@Test public void testFindDataProviderMethodsShouldReturnEmptyListIfLocationsIsEmpty()", "class_method_signature": "DefaultDataProviderMethodResolverTest.testFindDataProviderMethodsShouldReturnEmptyListIfLocationsIsEmpty()", "testcase": true, "constructor": false, "invocations": ["findDataProviderMethods", "testClassesFor", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "DefaultDataProviderMethodResolver", "superclass": "extends com.tngtech.junit.dataprovider.resolver.DefaultDataProviderMethodResolver", "interfaces": "implements DataProviderMethodResolver", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(FrameworkMethod testMethod, UseDataProvider useDataProvider)", "modifiers": "@Override public", "return": "List<FrameworkMethod>", "signature": "List<FrameworkMethod> resolve(FrameworkMethod testMethod, UseDataProvider useDataProvider)", "full_signature": "@Override public List<FrameworkMethod> resolve(FrameworkMethod testMethod, UseDataProvider useDataProvider)", "class_method_signature": "DefaultDataProviderMethodResolver.resolve(FrameworkMethod testMethod, UseDataProvider useDataProvider)", "testcase": false, "constructor": false}, {"identifier": "findDataProviderLocations", "parameters": "(FrameworkMethod testMethod, Class<?>[] useDataProviderLocation)", "modifiers": "protected", "return": "List<TestClass>", "signature": "List<TestClass> findDataProviderLocations(FrameworkMethod testMethod, Class<?>[] useDataProviderLocation)", "full_signature": "protected List<TestClass> findDataProviderLocations(FrameworkMethod testMethod, Class<?>[] useDataProviderLocation)", "class_method_signature": "DefaultDataProviderMethodResolver.findDataProviderLocations(FrameworkMethod testMethod, Class<?>[] useDataProviderLocation)", "testcase": false, "constructor": false}, {"identifier": "findDataProviderMethods", "parameters": "(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "modifiers": "protected", "return": "List<FrameworkMethod>", "signature": "List<FrameworkMethod> findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "full_signature": "protected List<FrameworkMethod> findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "class_method_signature": "DefaultDataProviderMethodResolver.findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "testcase": false, "constructor": false}, {"identifier": "findDataProviderMethod", "parameters": "(TestClass location, String testMethodName, String useDataProviderValue)", "modifiers": "protected", "return": "FrameworkMethod", "signature": "FrameworkMethod findDataProviderMethod(TestClass location, String testMethodName, String useDataProviderValue)", "full_signature": "protected FrameworkMethod findDataProviderMethod(TestClass location, String testMethodName, String useDataProviderValue)", "class_method_signature": "DefaultDataProviderMethodResolver.findDataProviderMethod(TestClass location, String testMethodName, String useDataProviderValue)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/internal/DefaultDataProviderMethodResolver.java"}, "focal_method": {"identifier": "findDataProviderMethods", "parameters": "(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "modifiers": "protected", "return": "List<FrameworkMethod>", "body": "protected List<FrameworkMethod> findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue) {\n        List<FrameworkMethod> result = new ArrayList<FrameworkMethod>();\n        for (TestClass location : locations) {\n            FrameworkMethod method = findDataProviderMethod(location, testMethodName, useDataProviderValue);\n            if (method != null) {\n                result.add(method);\n            }\n        }\n        return result;\n    }", "signature": "List<FrameworkMethod> findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "full_signature": "protected List<FrameworkMethod> findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "class_method_signature": "DefaultDataProviderMethodResolver.findDataProviderMethods(List<TestClass> locations, String testMethodName, String useDataProviderValue)", "testcase": false, "constructor": false, "invocations": ["findDataProviderMethod", "add"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}