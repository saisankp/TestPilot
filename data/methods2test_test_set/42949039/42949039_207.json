{"test_class": {"identifier": "Hive13DdlGeneratorTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/Hive13DdlGeneratorTest.java"}, "test_case": {"identifier": "testGetHivePathRegex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHivePathRegex()\n    {\n        List<String> expectedRegularExpressions = Arrays\n            .asList(\"^(?:(\\\\/[^/]*|_\\\\$folder\\\\$))$\", \"^(?:(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_1|Column-1)=([^/]+)(\\\\/[^/]*|_\\\\$folder\\\\$))))$\",\n                \"^(?:(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_1|Column-1)=([^/]+)(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_2|Column-2)=([^/]+)\" +\n                    \"(\\\\/[^/]*|_\\\\$folder\\\\$))))))$\",\n                \"^(?:(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_1|Column-1)=([^/]+)(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_2|Column-2)=([^/]+)\" +\n                    \"(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_3|Column-3)=([^/]+)(\\\\/[^/]*|_\\\\$folder\\\\$))))))))$\",\n                \"^(?:(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_1|Column-1)=([^/]+)(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_2|Column-2)=([^/]+)\" +\n                    \"(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_3|Column-3)=([^/]+)(?:(?:\\\\/|_\\\\$folder\\\\$)|(?:\\\\/(?:(?i)Column_4|Column-4)=([^/]+)\" +\n                    \"(\\\\/[^/]*|_\\\\$folder\\\\$))))))))))$\");\n\n        assertEquals(expectedRegularExpressions.get(0), hive13DdlGenerator.getHivePathRegex(new ArrayList<>()));\n        assertEquals(expectedRegularExpressions.get(1), hive13DdlGenerator.getHivePathRegex(getPartitionColumns(Collections.singletonList(\"Column_1\"))));\n        assertEquals(expectedRegularExpressions.get(2), hive13DdlGenerator.getHivePathRegex(getPartitionColumns(Arrays.asList(\"Column_1\", \"Column_2\"))));\n        assertEquals(expectedRegularExpressions.get(3),\n            hive13DdlGenerator.getHivePathRegex(getPartitionColumns(Arrays.asList(\"Column_1\", \"Column_2\", \"Column_3\"))));\n        assertEquals(expectedRegularExpressions.get(4),\n            hive13DdlGenerator.getHivePathRegex(getPartitionColumns(Arrays.asList(\"Column_1\", \"Column_2\", \"Column_3\", \"Column_4\"))));\n    }", "signature": "void testGetHivePathRegex()", "full_signature": "@Test public void testGetHivePathRegex()", "class_method_signature": "Hive13DdlGeneratorTest.testGetHivePathRegex()", "testcase": true, "constructor": false, "invocations": ["asList", "assertEquals", "get", "getHivePathRegex", "assertEquals", "get", "getHivePathRegex", "getPartitionColumns", "singletonList", "assertEquals", "get", "getHivePathRegex", "getPartitionColumns", "asList", "assertEquals", "get", "getHivePathRegex", "getPartitionColumns", "asList", "assertEquals", "get", "getHivePathRegex", "getPartitionColumns", "asList"]}, "focal_class": {"identifier": "Hive13DdlGenerator", "superclass": "extends DdlGenerator", "interfaces": "", "fields": [{"original_string": "public static final String NO_PARTITIONING_PARTITION_KEY = \"partition\";", "modifier": "public static final", "type": "String", "declarator": "NO_PARTITIONING_PARTITION_KEY = \"partition\"", "var_name": "NO_PARTITIONING_PARTITION_KEY"}, {"original_string": "public static final String NO_PARTITIONING_PARTITION_VALUE = \"none\";", "modifier": "public static final", "type": "String", "declarator": "NO_PARTITIONING_PARTITION_VALUE = \"none\"", "var_name": "NO_PARTITIONING_PARTITION_VALUE"}, {"original_string": "public static final String ORC_HIVE_FILE_FORMAT = \"ORC\";", "modifier": "public static final", "type": "String", "declarator": "ORC_HIVE_FILE_FORMAT = \"ORC\"", "var_name": "ORC_HIVE_FILE_FORMAT"}, {"original_string": "public static final String PARQUET_HIVE_FILE_FORMAT = \"PARQUET\";", "modifier": "public static final", "type": "String", "declarator": "PARQUET_HIVE_FILE_FORMAT = \"PARQUET\"", "var_name": "PARQUET_HIVE_FILE_FORMAT"}, {"original_string": "public static final String TEXT_HIVE_FILE_FORMAT = \"TEXTFILE\";", "modifier": "public static final", "type": "String", "declarator": "TEXT_HIVE_FILE_FORMAT = \"TEXTFILE\"", "var_name": "TEXT_HIVE_FILE_FORMAT"}, {"original_string": "public static final String JSON_HIVE_FILE_FORMAT = \"JSONFILE\";", "modifier": "public static final", "type": "String", "declarator": "JSON_HIVE_FILE_FORMAT = \"JSONFILE\"", "var_name": "JSON_HIVE_FILE_FORMAT"}, {"original_string": "public static final String REGEX_S3_EMPTY_PARTITION = \"_\\\\$folder\\\\$\";", "modifier": "public static final", "type": "String", "declarator": "REGEX_S3_EMPTY_PARTITION = \"_\\\\$folder\\\\$\"", "var_name": "REGEX_S3_EMPTY_PARTITION"}, {"original_string": "private static final List<String> HIVE_COMPLEX_DATA_TYPES =\n        Arrays.asList(Category.LIST.toString(), Category.MAP.toString(), Category.UNION.toString(), Category.STRUCT.toString());", "modifier": "private static final", "type": "List<String>", "declarator": "HIVE_COMPLEX_DATA_TYPES =\n        Arrays.asList(Category.LIST.toString(), Category.MAP.toString(), Category.UNION.toString(), Category.STRUCT.toString())", "var_name": "HIVE_COMPLEX_DATA_TYPES"}, {"original_string": "@Autowired\n    private BusinessObjectDataDdlPartitionsHelper businessObjectDataDdlPartitionsHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDdlPartitionsHelper", "declarator": "businessObjectDataDdlPartitionsHelper", "var_name": "businessObjectDataDdlPartitionsHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private BusinessObjectFormatHelper businessObjectFormatHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectFormatHelper", "declarator": "businessObjectFormatHelper", "var_name": "businessObjectFormatHelper"}], "methods": [{"identifier": "escapeSingleQuotes", "parameters": "(String string)", "modifiers": "public", "return": "String", "signature": "String escapeSingleQuotes(String string)", "full_signature": "public String escapeSingleQuotes(String string)", "class_method_signature": "Hive13DdlGenerator.escapeSingleQuotes(String string)", "testcase": false, "constructor": false}, {"identifier": "generateCreateTableDdl", "parameters": "(BusinessObjectDataDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity, List<String> storageNames, List<StorageEntity> requestedStorageEntities,\n        Map<String, StorageEntity> cachedStorageEntities, Map<String, String> cachedS3BucketNames)", "modifiers": "@Override public", "return": "String", "signature": "String generateCreateTableDdl(BusinessObjectDataDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity, List<String> storageNames, List<StorageEntity> requestedStorageEntities,\n        Map<String, StorageEntity> cachedStorageEntities, Map<String, String> cachedS3BucketNames)", "full_signature": "@Override public String generateCreateTableDdl(BusinessObjectDataDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity, List<String> storageNames, List<StorageEntity> requestedStorageEntities,\n        Map<String, StorageEntity> cachedStorageEntities, Map<String, String> cachedS3BucketNames)", "class_method_signature": "Hive13DdlGenerator.generateCreateTableDdl(BusinessObjectDataDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity, List<String> storageNames, List<StorageEntity> requestedStorageEntities,\n        Map<String, StorageEntity> cachedStorageEntities, Map<String, String> cachedS3BucketNames)", "testcase": false, "constructor": false}, {"identifier": "generateCreateTableDdl", "parameters": "(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity)", "modifiers": "@Override public", "return": "String", "signature": "String generateCreateTableDdl(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity)", "full_signature": "@Override public String generateCreateTableDdl(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity)", "class_method_signature": "Hive13DdlGenerator.generateCreateTableDdl(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity,\n        CustomDdlEntity customDdlEntity)", "testcase": false, "constructor": false}, {"identifier": "generateReplaceColumnsStatement", "parameters": "(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity)", "modifiers": "@Override public", "return": "String", "signature": "String generateReplaceColumnsStatement(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity)", "full_signature": "@Override public String generateReplaceColumnsStatement(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity)", "class_method_signature": "Hive13DdlGenerator.generateReplaceColumnsStatement(BusinessObjectFormatDdlRequest request, BusinessObjectFormatEntity businessObjectFormatEntity)", "testcase": false, "constructor": false}, {"identifier": "getDdlCharacterValue", "parameters": "(String string)", "modifiers": "public", "return": "String", "signature": "String getDdlCharacterValue(String string)", "full_signature": "public String getDdlCharacterValue(String string)", "class_method_signature": "Hive13DdlGenerator.getDdlCharacterValue(String string)", "testcase": false, "constructor": false}, {"identifier": "getDdlCharacterValue", "parameters": "(String string, boolean escapeSingleBackslash)", "modifiers": "public", "return": "String", "signature": "String getDdlCharacterValue(String string, boolean escapeSingleBackslash)", "full_signature": "public String getDdlCharacterValue(String string, boolean escapeSingleBackslash)", "class_method_signature": "Hive13DdlGenerator.getDdlCharacterValue(String string, boolean escapeSingleBackslash)", "testcase": false, "constructor": false}, {"identifier": "getDdlOutputFormat", "parameters": "()", "modifiers": "@Override public", "return": "BusinessObjectDataDdlOutputFormatEnum", "signature": "BusinessObjectDataDdlOutputFormatEnum getDdlOutputFormat()", "full_signature": "@Override public BusinessObjectDataDdlOutputFormatEnum getDdlOutputFormat()", "class_method_signature": "Hive13DdlGenerator.getDdlOutputFormat()", "testcase": false, "constructor": false}, {"identifier": "getHivePartitions", "parameters": "(BusinessObjectDataKey businessObjectDataKey, List<SchemaColumn> autoDiscoverableSubPartitionColumns,\n        String s3KeyPrefix, Collection<String> storageFiles, String storageName)", "modifiers": "public", "return": "List<HivePartitionDto>", "signature": "List<HivePartitionDto> getHivePartitions(BusinessObjectDataKey businessObjectDataKey, List<SchemaColumn> autoDiscoverableSubPartitionColumns,\n        String s3KeyPrefix, Collection<String> storageFiles, String storageName)", "full_signature": "public List<HivePartitionDto> getHivePartitions(BusinessObjectDataKey businessObjectDataKey, List<SchemaColumn> autoDiscoverableSubPartitionColumns,\n        String s3KeyPrefix, Collection<String> storageFiles, String storageName)", "class_method_signature": "Hive13DdlGenerator.getHivePartitions(BusinessObjectDataKey businessObjectDataKey, List<SchemaColumn> autoDiscoverableSubPartitionColumns,\n        String s3KeyPrefix, Collection<String> storageFiles, String storageName)", "testcase": false, "constructor": false}, {"identifier": "getHivePathPattern", "parameters": "(List<SchemaColumn> partitionColumns)", "modifiers": "public", "return": "Pattern", "signature": "Pattern getHivePathPattern(List<SchemaColumn> partitionColumns)", "full_signature": "public Pattern getHivePathPattern(List<SchemaColumn> partitionColumns)", "class_method_signature": "Hive13DdlGenerator.getHivePathPattern(List<SchemaColumn> partitionColumns)", "testcase": false, "constructor": false}, {"identifier": "getHivePathRegex", "parameters": "(List<SchemaColumn> partitionColumns)", "modifiers": "public", "return": "String", "signature": "String getHivePathRegex(List<SchemaColumn> partitionColumns)", "full_signature": "public String getHivePathRegex(List<SchemaColumn> partitionColumns)", "class_method_signature": "Hive13DdlGenerator.getHivePathRegex(List<SchemaColumn> partitionColumns)", "testcase": false, "constructor": false}, {"identifier": "assertSchemaColumnsNotEmpty", "parameters": "(BusinessObjectFormat businessObjectFormat, BusinessObjectFormatEntity businessObjectFormatEntity)", "modifiers": "private", "return": "void", "signature": "void assertSchemaColumnsNotEmpty(BusinessObjectFormat businessObjectFormat, BusinessObjectFormatEntity businessObjectFormatEntity)", "full_signature": "private void assertSchemaColumnsNotEmpty(BusinessObjectFormat businessObjectFormat, BusinessObjectFormatEntity businessObjectFormatEntity)", "class_method_signature": "Hive13DdlGenerator.assertSchemaColumnsNotEmpty(BusinessObjectFormat businessObjectFormat, BusinessObjectFormatEntity businessObjectFormatEntity)", "testcase": false, "constructor": false}, {"identifier": "generateCreateTableDdlHelper", "parameters": "(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest)", "modifiers": "private", "return": "String", "signature": "String generateCreateTableDdlHelper(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest)", "full_signature": "private String generateCreateTableDdlHelper(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest)", "class_method_signature": "Hive13DdlGenerator.generateCreateTableDdlHelper(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest)", "testcase": false, "constructor": false}, {"identifier": "generateDdlColumns", "parameters": "(BusinessObjectFormatEntity businessObjectFormatEntity, BusinessObjectFormat businessObjectFormat)", "modifiers": "private", "return": "String", "signature": "String generateDdlColumns(BusinessObjectFormatEntity businessObjectFormatEntity, BusinessObjectFormat businessObjectFormat)", "full_signature": "private String generateDdlColumns(BusinessObjectFormatEntity businessObjectFormatEntity, BusinessObjectFormat businessObjectFormat)", "class_method_signature": "Hive13DdlGenerator.generateDdlColumns(BusinessObjectFormatEntity businessObjectFormatEntity, BusinessObjectFormat businessObjectFormat)", "testcase": false, "constructor": false}, {"identifier": "generateStandardBaseDdl", "parameters": "(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "modifiers": "private", "return": "void", "signature": "void generateStandardBaseDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "full_signature": "private void generateStandardBaseDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "class_method_signature": "Hive13DdlGenerator.generateStandardBaseDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "testcase": false, "constructor": false}, {"identifier": "getHiveDataType", "parameters": "(SchemaColumn schemaColumn, BusinessObjectFormatEntity businessObjectFormatEntity)", "modifiers": "private", "return": "String", "signature": "String getHiveDataType(SchemaColumn schemaColumn, BusinessObjectFormatEntity businessObjectFormatEntity)", "full_signature": "private String getHiveDataType(SchemaColumn schemaColumn, BusinessObjectFormatEntity businessObjectFormatEntity)", "class_method_signature": "Hive13DdlGenerator.getHiveDataType(SchemaColumn schemaColumn, BusinessObjectFormatEntity businessObjectFormatEntity)", "testcase": false, "constructor": false}, {"identifier": "isHiveComplexDataType", "parameters": "(String inputString)", "modifiers": "private", "return": "boolean", "signature": "boolean isHiveComplexDataType(String inputString)", "full_signature": "private boolean isHiveComplexDataType(String inputString)", "class_method_signature": "Hive13DdlGenerator.isHiveComplexDataType(String inputString)", "testcase": false, "constructor": false}, {"identifier": "getHiveFileFormat", "parameters": "(BusinessObjectFormatEntity businessObjectFormatEntity)", "modifiers": "private", "return": "String", "signature": "String getHiveFileFormat(BusinessObjectFormatEntity businessObjectFormatEntity)", "full_signature": "private String getHiveFileFormat(BusinessObjectFormatEntity businessObjectFormatEntity)", "class_method_signature": "Hive13DdlGenerator.getHiveFileFormat(BusinessObjectFormatEntity businessObjectFormatEntity)", "testcase": false, "constructor": false}, {"identifier": "processPartitionFiltersForGenerateDdl", "parameters": "(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        HashMap<String, String> replacements, BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "modifiers": "private", "return": "void", "signature": "void processPartitionFiltersForGenerateDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        HashMap<String, String> replacements, BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "full_signature": "private void processPartitionFiltersForGenerateDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        HashMap<String, String> replacements, BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "class_method_signature": "Hive13DdlGenerator.processPartitionFiltersForGenerateDdl(BusinessObjectDataDdlPartitionsHelper.GenerateDdlRequestWrapper generateDdlRequest, StringBuilder sb,\n        HashMap<String, String> replacements, BusinessObjectFormat businessObjectFormat, String ifNotExistsOption)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/Hive13DdlGenerator.java"}, "focal_method": {"identifier": "getHivePathRegex", "parameters": "(List<SchemaColumn> partitionColumns)", "modifiers": "public", "return": "String", "body": "public String getHivePathRegex(List<SchemaColumn> partitionColumns)\n    {\n        StringBuilder sb = new StringBuilder(26);\n\n        sb.append(\"^(?:\");      // Start a non-capturing group for the entire regex.\n\n        // For each partition column, add a regular expression to match \"<COLUMN_NAME|COLUMN-NAME>=<VALUE>\" sub-directory.\n        for (SchemaColumn partitionColumn : partitionColumns)\n        {\n            sb.append(\"(?:\");   // Start a non-capturing group for the remainder of the regex.\n            sb.append(\"(?:\");   // Start a non-capturing group for folder markers.\n            sb.append(\"\\\\/\");   // Add a trailing \"/\".\n            sb.append('|');     // Ann an OR.\n            sb.append(REGEX_S3_EMPTY_PARTITION);    // Add a trailing \"_$folder$\", which represents an empty partition in S3.\n            sb.append(')');     // Close the non-capturing group for folder markers.\n            sb.append('|');     // Add an OR.\n            sb.append(\"(?:\");   // Start a non-capturing group for \"/<column name>=<column value>\".\n            sb.append(\"\\\\/\");   // Add a \"/\".\n            // We are using a non-capturing group for the partition column names here - this is done by adding \"?:\" to the beginning of a capture group.\n            sb.append(\"(?:\");   // Start a non-capturing group for column name.\n            sb.append(\"(?i)\");  // Match partition column names case insensitive.\n            sb.append(Matcher.quoteReplacement(partitionColumn.getName()));\n            sb.append('|');     // Add an OR.\n            // For sub-partition folder, we do support partition column names having all underscores replaced with hyphens.\n            sb.append(Matcher.quoteReplacement(partitionColumn.getName().replace(\"_\", \"-\")));\n            sb.append(')');     // Close the non-capturing group for column name.\n            sb.append(\"=([^/]+)\"); // Add a capturing group for a column value.\n        }\n\n        // Add additional regular expression for the trailing empty folder marker and/or \"/\" followed by an optional file name.\n        sb.append(\"(\");     // Start a capturing group for folder markers and an optional file name.\n        sb.append(\"\\\\/\");   // Add a trailing \"/\".\n        sb.append(\"[^/]*\"); // Add an optional file name.\n        sb.append('|');     // Add an OR.\n        sb.append(REGEX_S3_EMPTY_PARTITION);    // Add a trailing \"_$folder$\", which represents an empty partition in S3.\n        sb.append(\")\");     // Close the capturing group for folder markers and an optional file name.\n\n        // Close all non-capturing groups that are still open.\n        for (int i = 0; i < 2 * partitionColumns.size(); i++)\n        {\n            sb.append(')');\n        }\n\n        sb.append(')');     // Close the non-capturing group for the entire regex.\n        sb.append('$');\n\n        return sb.toString();\n    }", "signature": "String getHivePathRegex(List<SchemaColumn> partitionColumns)", "full_signature": "public String getHivePathRegex(List<SchemaColumn> partitionColumns)", "class_method_signature": "Hive13DdlGenerator.getHivePathRegex(List<SchemaColumn> partitionColumns)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "quoteReplacement", "getName", "append", "append", "quoteReplacement", "replace", "getName", "append", "append", "append", "append", "append", "append", "append", "append", "size", "append", "append", "append", "toString"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}