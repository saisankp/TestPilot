{"test_class": {"identifier": "DoubleArraySeriesTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/series/DoubleArraySeriesTest.java"}, "test_case": {"identifier": "testGetDouble_Offset_OutOfBounds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDouble_Offset_OutOfBounds() {\n        DoubleArraySeries s = new DoubleArraySeries(new double[]{1., 2.1, 3.2, 4}, 1, 2);\n\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> s.getDouble(2));\n    }", "signature": "void testGetDouble_Offset_OutOfBounds()", "full_signature": "@Test public void testGetDouble_Offset_OutOfBounds()", "class_method_signature": "DoubleArraySeriesTest.testGetDouble_Offset_OutOfBounds()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "getDouble"]}, "focal_class": {"identifier": "DoubleArraySeries", "superclass": "extends DoubleBaseSeries", "interfaces": "", "fields": [{"original_string": "private final double[] data;", "modifier": "private final", "type": "double[]", "declarator": "data", "var_name": "data"}, {"original_string": "private final int offset;", "modifier": "private final", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "DoubleArraySeries", "parameters": "(double... data)", "modifiers": "public", "return": "", "signature": " DoubleArraySeries(double... data)", "full_signature": "public  DoubleArraySeries(double... data)", "class_method_signature": "DoubleArraySeries.DoubleArraySeries(double... data)", "testcase": false, "constructor": true}, {"identifier": "DoubleArraySeries", "parameters": "(double[] data, int offset, int size)", "modifiers": "public", "return": "", "signature": " DoubleArraySeries(double[] data, int offset, int size)", "full_signature": "public  DoubleArraySeries(double[] data, int offset, int size)", "class_method_signature": "DoubleArraySeries.DoubleArraySeries(double[] data, int offset, int size)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DoubleArraySeries.size()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int index)", "modifiers": "@Override public", "return": "double", "signature": "double getDouble(int index)", "full_signature": "@Override public double getDouble(int index)", "class_method_signature": "DoubleArraySeries.getDouble(int index)", "testcase": false, "constructor": false}, {"identifier": "copyToDouble", "parameters": "(double[] to, int fromOffset, int toOffset, int len)", "modifiers": "@Override public", "return": "void", "signature": "void copyToDouble(double[] to, int fromOffset, int toOffset, int len)", "full_signature": "@Override public void copyToDouble(double[] to, int fromOffset, int toOffset, int len)", "class_method_signature": "DoubleArraySeries.copyToDouble(double[] to, int fromOffset, int toOffset, int len)", "testcase": false, "constructor": false}, {"identifier": "headDouble", "parameters": "(int len)", "modifiers": "@Override public", "return": "DoubleSeries", "signature": "DoubleSeries headDouble(int len)", "full_signature": "@Override public DoubleSeries headDouble(int len)", "class_method_signature": "DoubleArraySeries.headDouble(int len)", "testcase": false, "constructor": false}, {"identifier": "tailDouble", "parameters": "(int len)", "modifiers": "@Override public", "return": "DoubleSeries", "signature": "DoubleSeries tailDouble(int len)", "full_signature": "@Override public DoubleSeries tailDouble(int len)", "class_method_signature": "DoubleArraySeries.tailDouble(int len)", "testcase": false, "constructor": false}, {"identifier": "rangeOpenClosedDouble", "parameters": "(int fromInclusive, int toExclusive)", "modifiers": "@Override public", "return": "DoubleSeries", "signature": "DoubleSeries rangeOpenClosedDouble(int fromInclusive, int toExclusive)", "full_signature": "@Override public DoubleSeries rangeOpenClosedDouble(int fromInclusive, int toExclusive)", "class_method_signature": "DoubleArraySeries.rangeOpenClosedDouble(int fromInclusive, int toExclusive)", "testcase": false, "constructor": false}, {"identifier": "materializeDouble", "parameters": "()", "modifiers": "@Override public", "return": "DoubleSeries", "signature": "DoubleSeries materializeDouble()", "full_signature": "@Override public DoubleSeries materializeDouble()", "class_method_signature": "DoubleArraySeries.materializeDouble()", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double max()", "full_signature": "@Override public double max()", "class_method_signature": "DoubleArraySeries.max()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double min()", "full_signature": "@Override public double min()", "class_method_signature": "DoubleArraySeries.min()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double sum()", "full_signature": "@Override public double sum()", "class_method_signature": "DoubleArraySeries.sum()", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double average()", "full_signature": "@Override public double average()", "class_method_signature": "DoubleArraySeries.average()", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double median()", "full_signature": "@Override public double median()", "class_method_signature": "DoubleArraySeries.median()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/series/DoubleArraySeries.java"}, "focal_method": {"identifier": "getDouble", "parameters": "(int index)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double getDouble(int index) {\n        if (index >= size) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n\n        return data[offset + index];\n    }", "signature": "double getDouble(int index)", "full_signature": "@Override public double getDouble(int index)", "class_method_signature": "DoubleArraySeries.getDouble(int index)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}