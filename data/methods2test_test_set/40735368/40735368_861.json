{"test_class": {"identifier": "EnvFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExecutorService executor = Executors.newFixedThreadPool(2);", "modifier": "private final", "type": "ExecutorService", "declarator": "executor = Executors.newFixedThreadPool(2)", "var_name": "executor"}, {"original_string": "private final FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);", "modifier": "private final", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(null)", "var_name": "ff"}], "file": "modules/library/main/src/test/java/org/geotools/filter/function/EnvFunctionTest.java"}, "test_case": {"identifier": "testSetGlobalValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetGlobalValues() throws Exception {\n        System.out.println(\"   setGlobalValues\");\n\n        final Map<String, Object> table = new HashMap<String, Object>();\n        table.put(\"foo\", 1);\n        table.put(\"bar\", 2);\n        EnvFunction.setGlobalValues(table);\n\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        class Task implements Runnable {\n            final String key;\n\n            Task(String key) {\n                if (!table.containsKey(key)) {\n                    throw new IllegalArgumentException(\"Invalid arg \" + key);\n                }\n                this.key = key;\n            }\n\n            public void run() {\n                // set the global value assigned to this thread then wait for the other\n                // thread to do the same\n                EnvFunction.setGlobalValue(key, table.get(key));\n                latch.countDown();\n                try {\n                    latch.await();\n                } catch (InterruptedException ex) {\n                    throw new IllegalStateException(ex);\n                }\n\n                for (String name : table.keySet()) {\n                    Object result = ff.function(\"env\", ff.literal(name)).evaluate(null);\n                    int value = ((Number) result).intValue();\n                    assertEquals(table.get(name), value);\n                }\n            }\n        }\n\n        Future f1 = executor.submit(new Task(\"foo\"));\n        Future f2 = executor.submit(new Task(\"bar\"));\n\n        // calling get on the Futures ensures that this test method\n        // completes before another starts\n        f1.get();\n        f2.get();\n    }", "signature": "void testSetGlobalValues()", "full_signature": "@Test public void testSetGlobalValues()", "class_method_signature": "EnvFunctionTest.testSetGlobalValues()", "testcase": true, "constructor": false, "invocations": ["println", "put", "put", "setGlobalValues", "containsKey", "setGlobalValue", "get", "countDown", "await", "keySet", "evaluate", "function", "literal", "intValue", "assertEquals", "get", "submit", "submit", "get", "get"]}, "focal_class": {"identifier": "EnvFunction", "superclass": "extends FunctionExpressionImpl", "interfaces": "", "fields": [{"original_string": "private static final LocalLookup localLookup = new LocalLookup();", "modifier": "private static final", "type": "LocalLookup", "declarator": "localLookup = new LocalLookup()", "var_name": "localLookup"}, {"original_string": "private static ConcurrentMap<String, Object> globalLookup = new ConcurrentHashMap<String, Object>();", "modifier": "private static", "type": "ConcurrentMap<String, Object>", "declarator": "globalLookup = new ConcurrentHashMap<String, Object>()", "var_name": "globalLookup"}, {"original_string": "public static FunctionName NAME = new FunctionNameImpl(\"env\",\n            parameter(\"value\", Object.class),\n            parameter(\"variable\", String.class));", "modifier": "public static", "type": "FunctionName", "declarator": "NAME = new FunctionNameImpl(\"env\",\n            parameter(\"value\", Object.class),\n            parameter(\"variable\", String.class))", "var_name": "NAME"}], "methods": [{"identifier": "EnvFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " EnvFunction()", "full_signature": "public  EnvFunction()", "class_method_signature": "EnvFunction.EnvFunction()", "testcase": false, "constructor": true}, {"identifier": "setLocalValues", "parameters": "(Map<String, Object> values)", "modifiers": "public static", "return": "void", "signature": "void setLocalValues(Map<String, Object> values)", "full_signature": "public static void setLocalValues(Map<String, Object> values)", "class_method_signature": "EnvFunction.setLocalValues(Map<String, Object> values)", "testcase": false, "constructor": false}, {"identifier": "clearLocalValues", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearLocalValues()", "full_signature": "public static void clearLocalValues()", "class_method_signature": "EnvFunction.clearLocalValues()", "testcase": false, "constructor": false}, {"identifier": "setGlobalValues", "parameters": "(Map<String, Object> values)", "modifiers": "public static", "return": "void", "signature": "void setGlobalValues(Map<String, Object> values)", "full_signature": "public static void setGlobalValues(Map<String, Object> values)", "class_method_signature": "EnvFunction.setGlobalValues(Map<String, Object> values)", "testcase": false, "constructor": false}, {"identifier": "clearGlobalValues", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearGlobalValues()", "full_signature": "public static void clearGlobalValues()", "class_method_signature": "EnvFunction.clearGlobalValues()", "testcase": false, "constructor": false}, {"identifier": "setLocalValue", "parameters": "(String name, Object value)", "modifiers": "public static", "return": "void", "signature": "void setLocalValue(String name, Object value)", "full_signature": "public static void setLocalValue(String name, Object value)", "class_method_signature": "EnvFunction.setLocalValue(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "setGlobalValue", "parameters": "(String name, Object value)", "modifiers": "public static", "return": "void", "signature": "void setGlobalValue(String name, Object value)", "full_signature": "public static void setGlobalValue(String name, Object value)", "class_method_signature": "EnvFunction.setGlobalValue(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object feature)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(Object feature)", "full_signature": "@Override public Object evaluate(Object feature)", "class_method_signature": "EnvFunction.evaluate(Object feature)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(List params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(List params)", "full_signature": "@Override public void setParameters(List params)", "class_method_signature": "EnvFunction.setParameters(List params)", "testcase": false, "constructor": false}, {"identifier": "setFallbackValue", "parameters": "(Literal fallback)", "modifiers": "@Override public", "return": "void", "signature": "void setFallbackValue(Literal fallback)", "full_signature": "@Override public void setFallbackValue(Literal fallback)", "class_method_signature": "EnvFunction.setFallbackValue(Literal fallback)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/function/EnvFunction.java"}, "focal_method": {"identifier": "setGlobalValues", "parameters": "(Map<String, Object> values)", "modifiers": "public static", "return": "void", "body": "public static void setGlobalValues(Map<String, Object> values) {\n        globalLookup.clear();\n\n        if (values != null) {\n            for (Entry<String, Object> e : values.entrySet()) {\n                globalLookup.put(e.getKey().toUpperCase(), e.getValue());\n            }\n        }\n    }", "signature": "void setGlobalValues(Map<String, Object> values)", "full_signature": "public static void setGlobalValues(Map<String, Object> values)", "class_method_signature": "EnvFunction.setGlobalValues(Map<String, Object> values)", "testcase": false, "constructor": false, "invocations": ["clear", "entrySet", "put", "toUpperCase", "getKey", "getValue"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}