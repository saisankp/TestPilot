{"test_class": {"identifier": "TestDoublyLinkedList", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/util/TestDoublyLinkedList.java"}, "test_case": {"identifier": "testAddAfter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddAfter()\n    {\n        DoublyLinkedList<Integer> list = new DoublyLinkedList<Integer>();\n        list.add(1);\n        ListNode2<Integer> node2 = list.add(2);\n        ListNode2<Integer> node4 = list.add(4);\n\n        list.addAfter(node2, 3);\n        assertEquals(4, list.size());\n        assertArrayEquals(new Integer[]{1, 2, 3, 4}, list.toArray());\n\n        ListNode2<Integer> node5 = list.addAfter(node4, 5);\n        assertEquals(5, list.size());\n        assertArrayEquals(new Integer[]{1, 2, 3, 4, 5}, list.toArray());\n        assertEquals(new Integer(5), list.last());\n        assertEquals(node5, list.head());\n    }", "signature": "void testAddAfter()", "full_signature": "@Test public void testAddAfter()", "class_method_signature": "TestDoublyLinkedList.testAddAfter()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "addAfter", "assertEquals", "size", "assertArrayEquals", "toArray", "addAfter", "assertEquals", "size", "assertArrayEquals", "toArray", "assertEquals", "last", "assertEquals", "head"]}, "focal_class": {"identifier": "DoublyLinkedList", "superclass": "", "interfaces": "implements Iterable<T>", "fields": [{"original_string": "protected int size;", "modifier": "protected", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "protected ListNode2<T> tail;", "modifier": "protected", "type": "ListNode2<T>", "declarator": "tail", "var_name": "tail"}, {"original_string": "protected ListNode2<T> head;", "modifier": "protected", "type": "ListNode2<T>", "declarator": "head", "var_name": "head"}], "methods": [{"identifier": "add", "parameters": "(T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> add(T value)", "full_signature": "public ListNode2<T> add(T value)", "class_method_signature": "DoublyLinkedList.add(T value)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> enqueue(T value)", "full_signature": "public ListNode2<T> enqueue(T value)", "class_method_signature": "DoublyLinkedList.enqueue(T value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(ListNode2<T> node)", "modifiers": "public", "return": "void", "signature": "void add(ListNode2<T> node)", "full_signature": "public void add(ListNode2<T> node)", "class_method_signature": "DoublyLinkedList.add(ListNode2<T> node)", "testcase": false, "constructor": false}, {"identifier": "addAfter", "parameters": "(ListNode2<T> node, T value)", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> addAfter(ListNode2<T> node, T value)", "full_signature": "public ListNode2<T> addAfter(ListNode2<T> node, T value)", "class_method_signature": "DoublyLinkedList.addAfter(ListNode2<T> node, T value)", "testcase": false, "constructor": false}, {"identifier": "addAfter", "parameters": "(ListNode2<T> node, ListNode2<T> newNode)", "modifiers": "public", "return": "void", "signature": "void addAfter(ListNode2<T> node, ListNode2<T> newNode)", "full_signature": "public void addAfter(ListNode2<T> node, ListNode2<T> newNode)", "class_method_signature": "DoublyLinkedList.addAfter(ListNode2<T> node, ListNode2<T> newNode)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(ListNode2<T> node)", "modifiers": "public", "return": "void", "signature": "void remove(ListNode2<T> node)", "full_signature": "public void remove(ListNode2<T> node)", "class_method_signature": "DoublyLinkedList.remove(ListNode2<T> node)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "DoublyLinkedList.size()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "DoublyLinkedList.iterator()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T first()", "full_signature": "public T first()", "class_method_signature": "DoublyLinkedList.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T last()", "full_signature": "public T last()", "class_method_signature": "DoublyLinkedList.last()", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "()", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> head()", "full_signature": "public ListNode2<T> head()", "class_method_signature": "DoublyLinkedList.head()", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "()", "modifiers": "public", "return": "ListNode2<T>", "signature": "ListNode2<T> tail()", "full_signature": "public ListNode2<T> tail()", "class_method_signature": "DoublyLinkedList.tail()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "DoublyLinkedList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T[]", "signature": "T[] toArray()", "full_signature": "@SuppressWarnings(\"unchecked\") public T[] toArray()", "class_method_signature": "DoublyLinkedList.toArray()", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/util/DoublyLinkedList.java"}, "focal_method": {"identifier": "addAfter", "parameters": "(ListNode2<T> node, T value)", "modifiers": "public", "return": "ListNode2<T>", "body": "public ListNode2<T> addAfter(ListNode2<T> node, T value)\n    {\n        ListNode2<T> newNode = new ListNode2<T>(value);\n        addAfter(node, newNode);\n        return newNode;\n    }", "signature": "ListNode2<T> addAfter(ListNode2<T> node, T value)", "full_signature": "public ListNode2<T> addAfter(ListNode2<T> node, T value)", "class_method_signature": "DoublyLinkedList.addAfter(ListNode2<T> node, T value)", "testcase": false, "constructor": false, "invocations": ["addAfter"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}