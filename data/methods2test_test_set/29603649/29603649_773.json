{"test_class": {"identifier": "StubResponseGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEQUENCE_DESCRIPTOR_KEY = \"seqdesckey\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_DESCRIPTOR_KEY = \"seqdesckey\"", "var_name": "SEQUENCE_DESCRIPTOR_KEY"}, {"original_string": "private static final String WILMA_LOGGER_ID = \"test\";", "modifier": "private static final", "type": "String", "declarator": "WILMA_LOGGER_ID = \"test\"", "var_name": "WILMA_LOGGER_ID"}, {"original_string": "private final byte[] templateResource = \"template-resource\".getBytes();", "modifier": "private final", "type": "byte[]", "declarator": "templateResource = \"template-resource\".getBytes()", "var_name": "templateResource"}, {"original_string": "@Mock\n    private MapBasedResponseDescriptorAccess responseDescriptorAccess;", "modifier": "@Mock\n    private", "type": "MapBasedResponseDescriptorAccess", "declarator": "responseDescriptorAccess", "var_name": "responseDescriptorAccess"}, {"original_string": "@Mock\n    private StackTraceToStringConverter stackTraceConverter;", "modifier": "@Mock\n    private", "type": "StackTraceToStringConverter", "declarator": "stackTraceConverter", "var_name": "stackTraceConverter"}, {"original_string": "@Mock\n    private WaitProvider waitProvider;", "modifier": "@Mock\n    private", "type": "WaitProvider", "declarator": "waitProvider", "var_name": "waitProvider"}, {"original_string": "@Mock\n    private StubResponseHeaderConfigurer headerConfigurer;", "modifier": "@Mock\n    private", "type": "StubResponseHeaderConfigurer", "declarator": "headerConfigurer", "var_name": "headerConfigurer"}, {"original_string": "@Mock\n    private HttpServletRequestTransformer requestTransformer;", "modifier": "@Mock\n    private", "type": "HttpServletRequestTransformer", "declarator": "requestTransformer", "var_name": "requestTransformer"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private ResponseDescriptorDTO responseDescriptorDTO;", "modifier": "@Mock\n    private", "type": "ResponseDescriptorDTO", "declarator": "responseDescriptorDTO", "var_name": "responseDescriptorDTO"}, {"original_string": "@Mock\n    private ResponseDescriptor responseDescriptor;", "modifier": "@Mock\n    private", "type": "ResponseDescriptor", "declarator": "responseDescriptor", "var_name": "responseDescriptor"}, {"original_string": "@Mock\n    private Template template;", "modifier": "@Mock\n    private", "type": "Template", "declarator": "template", "var_name": "template"}, {"original_string": "@Mock\n    private ResponseFormatterDescriptor responseFormatterDescriptor;", "modifier": "@Mock\n    private", "type": "ResponseFormatterDescriptor", "declarator": "responseFormatterDescriptor", "var_name": "responseFormatterDescriptor"}, {"original_string": "@Mock\n    private ResponseFormatter responseFormatter;", "modifier": "@Mock\n    private", "type": "ResponseFormatter", "declarator": "responseFormatter", "var_name": "responseFormatter"}, {"original_string": "@Mock\n    private WilmaHttpRequest wilmaRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "wilmaRequest", "var_name": "wilmaRequest"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private SequenceHeaderUtil headerCreator;", "modifier": "@Mock\n    private", "type": "SequenceHeaderUtil", "declarator": "headerCreator", "var_name": "headerCreator"}, {"original_string": "@Mock\n    private SequenceMatcher matcher;", "modifier": "@Mock\n    private", "type": "SequenceMatcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "@Mock\n    private SequenceResponseGuard sequenceResponseGuard;", "modifier": "@Mock\n    private", "type": "SequenceResponseGuard", "declarator": "sequenceResponseGuard", "var_name": "sequenceResponseGuard"}, {"original_string": "@InjectMocks\n    private StubResponseGenerator underTest;", "modifier": "@InjectMocks\n    private", "type": "StubResponseGenerator", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private Set<ResponseFormatterDescriptor> responseFormatterDescriptors;", "modifier": "private", "type": "Set<ResponseFormatterDescriptor>", "declarator": "responseFormatterDescriptors", "var_name": "responseFormatterDescriptors"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/StubResponseGeneratorTest.java"}, "test_case": {"identifier": "testGenerateResponseShouldReturnTemplateResourceAndSetResponseHeadersWhenResponseFormatterDefined", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateResponseShouldReturnTemplateResourceAndSetResponseHeadersWhenResponseFormatterDefined() throws Exception {\n        //GIVEN\n        ParameterList params = new ParameterList();\n        responseFormatterDescriptors.add(responseFormatterDescriptor);\n        mockTemplateResource();\n        given(responseFormatterDescriptor.getParams()).willReturn(params);\n        given(responseFormatterDescriptor.getResponseFormatter()).willReturn(responseFormatter);\n        given(responseFormatter.formatResponse(wilmaRequest, response, templateResource, params)).willReturn(templateResource);\n        //WHEN\n        byte[] actual = underTest.generateResponse(request, response);\n        //THEN\n        verify(headerConfigurer).setResponseContentTypeAndStatus(response, responseDescriptorDTO);\n        Assert.assertEquals(actual, templateResource);\n    }", "signature": "void testGenerateResponseShouldReturnTemplateResourceAndSetResponseHeadersWhenResponseFormatterDefined()", "full_signature": "@Test public void testGenerateResponseShouldReturnTemplateResourceAndSetResponseHeadersWhenResponseFormatterDefined()", "class_method_signature": "StubResponseGeneratorTest.testGenerateResponseShouldReturnTemplateResourceAndSetResponseHeadersWhenResponseFormatterDefined()", "testcase": true, "constructor": false, "invocations": ["add", "mockTemplateResource", "willReturn", "given", "getParams", "willReturn", "given", "getResponseFormatter", "willReturn", "given", "formatResponse", "generateResponse", "setResponseContentTypeAndStatus", "verify", "assertEquals"]}, "focal_class": {"identifier": "StubResponseGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(StubResponseGenerator.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StubResponseGenerator.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private MapBasedResponseDescriptorAccess mapBasedResponseDescriptorAccess;", "modifier": "@Autowired\n    private", "type": "MapBasedResponseDescriptorAccess", "declarator": "mapBasedResponseDescriptorAccess", "var_name": "mapBasedResponseDescriptorAccess"}, {"original_string": "@Autowired\n    private StackTraceToStringConverter stackTraceToStringConverter;", "modifier": "@Autowired\n    private", "type": "StackTraceToStringConverter", "declarator": "stackTraceToStringConverter", "var_name": "stackTraceToStringConverter"}, {"original_string": "@Autowired\n    private WaitProvider waitProvider;", "modifier": "@Autowired\n    private", "type": "WaitProvider", "declarator": "waitProvider", "var_name": "waitProvider"}, {"original_string": "@Autowired\n    private StubResponseHeaderConfigurer stubResponseHeaderConfigurer;", "modifier": "@Autowired\n    private", "type": "StubResponseHeaderConfigurer", "declarator": "stubResponseHeaderConfigurer", "var_name": "stubResponseHeaderConfigurer"}, {"original_string": "@Autowired\n    private HttpServletRequestTransformer httpServletRequestTransformer;", "modifier": "@Autowired\n    private", "type": "HttpServletRequestTransformer", "declarator": "httpServletRequestTransformer", "var_name": "httpServletRequestTransformer"}, {"original_string": "@Autowired\n    private SequenceHeaderUtil sequenceHeaderUtil;", "modifier": "@Autowired\n    private", "type": "SequenceHeaderUtil", "declarator": "sequenceHeaderUtil", "var_name": "sequenceHeaderUtil"}, {"original_string": "@Autowired\n    private SequenceMatcher sequenceMatcher;", "modifier": "@Autowired\n    private", "type": "SequenceMatcher", "declarator": "sequenceMatcher", "var_name": "sequenceMatcher"}, {"original_string": "@Autowired\n    private SequenceResponseGuard sequenceResponseGuard;", "modifier": "@Autowired\n    private", "type": "SequenceResponseGuard", "declarator": "sequenceResponseGuard", "var_name": "sequenceResponseGuard"}], "methods": [{"identifier": "generateResponse", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "public", "return": "byte[]", "signature": "byte[] generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "public byte[] generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "StubResponseGenerator.generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final HttpServletResponse resp, final ResponseDescriptorDTO responseDescriptorDTO,\n            final Set<ResponseFormatterDescriptor> responseFormatterDescriptors, final WilmaHttpRequest wilmaRequest)", "modifiers": "private", "return": "byte[]", "signature": "byte[] generate(final HttpServletResponse resp, final ResponseDescriptorDTO responseDescriptorDTO,\n            final Set<ResponseFormatterDescriptor> responseFormatterDescriptors, final WilmaHttpRequest wilmaRequest)", "full_signature": "private byte[] generate(final HttpServletResponse resp, final ResponseDescriptorDTO responseDescriptorDTO,\n            final Set<ResponseFormatterDescriptor> responseFormatterDescriptors, final WilmaHttpRequest wilmaRequest)", "class_method_signature": "StubResponseGenerator.generate(final HttpServletResponse resp, final ResponseDescriptorDTO responseDescriptorDTO,\n            final Set<ResponseFormatterDescriptor> responseFormatterDescriptors, final WilmaHttpRequest wilmaRequest)", "testcase": false, "constructor": false}, {"identifier": "getErrorMessageWithStackTrace", "parameters": "(final Exception e)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getErrorMessageWithStackTrace(final Exception e)", "full_signature": "private byte[] getErrorMessageWithStackTrace(final Exception e)", "class_method_signature": "StubResponseGenerator.getErrorMessageWithStackTrace(final Exception e)", "testcase": false, "constructor": false}, {"identifier": "delayResponse", "parameters": "(final int delay)", "modifiers": "private", "return": "void", "signature": "void delayResponse(final int delay)", "full_signature": "private void delayResponse(final int delay)", "class_method_signature": "StubResponseGenerator.delayResponse(final int delay)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/StubResponseGenerator.java"}, "focal_method": {"identifier": "generateResponse", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "public", "return": "byte[]", "body": "public byte[] generateResponse(final HttpServletRequest req, final HttpServletResponse resp) {\n        String wilmaLoggerId = req.getHeader(WilmaHttpRequest.WILMA_LOGGER_ID);\n        byte[] result = null;\n        if (wilmaLoggerId != null) {\n            ResponseDescriptorDTO responseDescriptorDTO = mapBasedResponseDescriptorAccess.getResponseDescriptor(wilmaLoggerId);\n            Set<ResponseFormatterDescriptor> responseFormatterDescriptors = responseDescriptorDTO.getResponseDescriptor().getResponseFormatters();\n            //generate pure WilmaHttpRequest\n            WilmaHttpRequest wilmaRequest = httpServletRequestTransformer.transformToWilmaHttpRequest(wilmaLoggerId, req, responseDescriptorDTO);\n            //add wilma information to response header\n            stubResponseHeaderConfigurer.addWilmaInfoToResponseHeader(req, resp, responseDescriptorDTO.getDialogDescriptorName());\n            //set headers generate response body\n            result = generate(resp, responseDescriptorDTO, responseFormatterDescriptors, wilmaRequest);\n        }\n        return result;\n    }", "signature": "byte[] generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "public byte[] generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "StubResponseGenerator.generateResponse(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["getHeader", "getResponseDescriptor", "getResponseFormatters", "getResponseDescriptor", "transformToWilmaHttpRequest", "addWilmaInfoToResponseHeader", "getDialogDescriptorName", "generate"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}