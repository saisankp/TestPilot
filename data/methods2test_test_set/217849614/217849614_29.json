{"test_class": {"identifier": "PersistentFiltersJobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PersistentFiltersJob job;", "modifier": "private", "type": "PersistentFiltersJob", "declarator": "job", "var_name": "job"}, {"original_string": "private BloomFilterManager<BloomFilter, ?> bloomFilterManager;", "modifier": "private", "type": "BloomFilterManager<BloomFilter, ?>", "declarator": "bloomFilterManager", "var_name": "bloomFilterManager"}, {"original_string": "private PersistentManager<BloomFilter> persistentManager;", "modifier": "private", "type": "PersistentManager<BloomFilter>", "declarator": "persistentManager", "var_name": "persistentManager"}, {"original_string": "private LongAdder filterUpdateTimesCounter;", "modifier": "private", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}, {"original_string": "private TriggerPersistenceCriteria criteria = new TriggerPersistenceCriteria(Duration.ofSeconds(1), 10);", "modifier": "private", "type": "TriggerPersistenceCriteria", "declarator": "criteria = new TriggerPersistenceCriteria(Duration.ofSeconds(1), 10)", "var_name": "criteria"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/PersistentFiltersJobTest.java"}, "test_case": {"identifier": "testCriteriaNotMeet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCriteriaNotMeet() throws IOException {\n        filterUpdateTimesCounter.reset();\n        filterUpdateTimesCounter.add(5);\n        job.run();\n        assertThat(filterUpdateTimesCounter.sum()).isEqualTo(5);\n        verify(persistentManager, never()).freezeAllFilters(bloomFilterManager);\n    }", "signature": "void testCriteriaNotMeet()", "full_signature": "@Test public void testCriteriaNotMeet()", "class_method_signature": "PersistentFiltersJobTest.testCriteriaNotMeet()", "testcase": true, "constructor": false, "invocations": ["reset", "add", "run", "isEqualTo", "assertThat", "sum", "freezeAllFilters", "verify", "never"]}, "focal_class": {"identifier": "PersistentFiltersJob", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PersistentFiltersJob.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PersistentFiltersJob.class)", "var_name": "logger"}, {"original_string": "private final BloomFilterManager<F, ?> bloomFilterManager;", "modifier": "private final", "type": "BloomFilterManager<F, ?>", "declarator": "bloomFilterManager", "var_name": "bloomFilterManager"}, {"original_string": "private final PersistentManager<F> persistentManager;", "modifier": "private final", "type": "PersistentManager<F>", "declarator": "persistentManager", "var_name": "persistentManager"}, {"original_string": "private final LongAdder filterUpdateTimesCounter;", "modifier": "private final", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}, {"original_string": "private final TriggerPersistenceCriteria criteria;", "modifier": "private final", "type": "TriggerPersistenceCriteria", "declarator": "criteria", "var_name": "criteria"}], "methods": [{"identifier": "PersistentFiltersJob", "parameters": "(BloomFilterManager<F, ?> bloomFilterManager,\n                         PersistentManager<F> persistentManager,\n                         LongAdder filterUpdateTimesCounter,\n                         TriggerPersistenceCriteria criteria)", "modifiers": "", "return": "", "signature": " PersistentFiltersJob(BloomFilterManager<F, ?> bloomFilterManager,\n                         PersistentManager<F> persistentManager,\n                         LongAdder filterUpdateTimesCounter,\n                         TriggerPersistenceCriteria criteria)", "full_signature": "  PersistentFiltersJob(BloomFilterManager<F, ?> bloomFilterManager,\n                         PersistentManager<F> persistentManager,\n                         LongAdder filterUpdateTimesCounter,\n                         TriggerPersistenceCriteria criteria)", "class_method_signature": "PersistentFiltersJob.PersistentFiltersJob(BloomFilterManager<F, ?> bloomFilterManager,\n                         PersistentManager<F> persistentManager,\n                         LongAdder filterUpdateTimesCounter,\n                         TriggerPersistenceCriteria criteria)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "PersistentFiltersJob.run()", "testcase": false, "constructor": false}, {"identifier": "doPersistence", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doPersistence()", "full_signature": "private void doPersistence()", "class_method_signature": "PersistentFiltersJob.doPersistence()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/PersistentFiltersJob.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        // synchronized on an instance of a class only to prevent several PersistentFiltersJob to\n        // access on the same filterUpdateTimesCounter. It's not mean to and can't prevent thread\n        // not in PersistentFiltersJob to access this counter\n        synchronized (filterUpdateTimesCounter) {\n            final long sum = filterUpdateTimesCounter.sum();\n            if (sum > criteria.updatesThreshold()) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Updated {} times in last {} seconds meets threshold {} to persistence filters\",\n                            sum, criteria.checkingPeriod().getSeconds(), criteria.updatesThreshold());\n                }\n\n                filterUpdateTimesCounter.reset();\n                doPersistence();\n            }\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "PersistentFiltersJob.run()", "testcase": false, "constructor": false, "invocations": ["sum", "updatesThreshold", "isDebugEnabled", "debug", "getSeconds", "checkingPeriod", "updatesThreshold", "reset", "doPersistence"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}