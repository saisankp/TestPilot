{"test_class": {"identifier": "ConditionDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAGNAME_CONDITION_SET = \"condition-set\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_CONDITION_SET = \"condition-set\"", "var_name": "TAGNAME_CONDITION_SET"}, {"original_string": "private static final String TAGNAME_COND_SET_INVOKER = \"condition-set-invoker\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_COND_SET_INVOKER = \"condition-set-invoker\"", "var_name": "TAGNAME_COND_SET_INVOKER"}, {"original_string": "private static final String TAGNAME_NOT = \"not\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_NOT = \"not\"", "var_name": "TAGNAME_NOT"}, {"original_string": "private static final String TAGNAME_OR = \"or\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_OR = \"or\"", "var_name": "TAGNAME_OR"}, {"original_string": "private static final String TAGNAME_AND = \"and\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_AND = \"and\"", "var_name": "TAGNAME_AND"}, {"original_string": "private static final String PARAM_NAME = \"exampleParam\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_NAME = \"exampleParam\"", "var_name": "PARAM_NAME"}, {"original_string": "private static final String PARAM_ATTRIBUTE = \"param\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_ATTRIBUTE = \"param\"", "var_name": "PARAM_ATTRIBUTE"}, {"original_string": "private static final String CLASS_NAME = \"SIMPLE_CLASS_NAME\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = \"SIMPLE_CLASS_NAME\"", "var_name": "CLASS_NAME"}, {"original_string": "private static final String CLASS_ATTRIBUTE = \"class\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_ATTRIBUTE = \"class\"", "var_name": "CLASS_ATTRIBUTE"}, {"original_string": "private static final String TAGNAME_CONDITION = \"condition\";", "modifier": "private static final", "type": "String", "declarator": "TAGNAME_CONDITION = \"condition\"", "var_name": "TAGNAME_CONDITION"}, {"original_string": "private SimpleConditionParser simpleConditionParser;", "modifier": "private", "type": "SimpleConditionParser", "declarator": "simpleConditionParser", "var_name": "simpleConditionParser"}, {"original_string": "@Mock\n    private Element node;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "node", "var_name": "node"}, {"original_string": "@Mock\n    private MyNodeList nodeList;", "modifier": "@Mock\n    private", "type": "MyNodeList", "declarator": "nodeList", "var_name": "nodeList"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Mock\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Mock\n    private Element paramElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "paramElement", "var_name": "paramElement"}, {"original_string": "@Mock\n    private Element paramElement2;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "paramElement2", "var_name": "paramElement2"}, {"original_string": "@Mock\n    private Element conditionSetElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "conditionSetElement", "var_name": "conditionSetElement"}, {"original_string": "@Mock\n    private ConditionCheckerInitializer conditionCheckerInitializer;", "modifier": "@Mock\n    private", "type": "ConditionCheckerInitializer", "declarator": "conditionCheckerInitializer", "var_name": "conditionCheckerInitializer"}, {"original_string": "@Mock\n    private ConditionChecker conditionChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "conditionChecker", "var_name": "conditionChecker"}, {"original_string": "@Mock\n    private CustomXQueryCheckerValidator xQueryCheckerValidator;", "modifier": "@Mock\n    private", "type": "CustomXQueryCheckerValidator", "declarator": "xQueryCheckerValidator", "var_name": "xQueryCheckerValidator"}, {"original_string": "@Mock\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private PropertyDto properties;", "modifier": "@Mock\n    private", "type": "PropertyDto", "declarator": "properties", "var_name": "properties"}, {"original_string": "@InjectMocks\n    private ConditionDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "ConditionDescriptorParser", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/ConditionDescriptorParserTest.java"}, "test_case": {"identifier": "testParseNodeShouldReturnWithNullConditionWhenConditionNodeArgumentHasOneChildWithUnknownTagName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodeShouldReturnWithNullConditionWhenConditionNodeArgumentHasOneChildWithUnknownTagName() {\n        //GIVEN\n        given(node.getChildNodes()).willReturn(nodeList);\n        given(nodeList.getLength()).willReturn(1);\n        given(nodeList.item(0)).willReturn(node);\n        given(node.getNodeType()).willReturn(Node.ELEMENT_NODE);\n        given(node.getTagName()).willReturn(\"UNKNOWN_TAG_NAME\");\n        //WHEN\n        ConditionDescriptor actual = underTest.parseNode(node, document);\n        //THEN\n        assertNull(actual.getCondition());\n    }", "signature": "void testParseNodeShouldReturnWithNullConditionWhenConditionNodeArgumentHasOneChildWithUnknownTagName()", "full_signature": "@Test public void testParseNodeShouldReturnWithNullConditionWhenConditionNodeArgumentHasOneChildWithUnknownTagName()", "class_method_signature": "ConditionDescriptorParserTest.testParseNodeShouldReturnWithNullConditionWhenConditionNodeArgumentHasOneChildWithUnknownTagName()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getChildNodes", "willReturn", "given", "getLength", "willReturn", "given", "item", "willReturn", "given", "getNodeType", "willReturn", "given", "getTagName", "parseNode", "assertNull", "getCondition"]}, "focal_class": {"identifier": "ConditionDescriptorParser", "superclass": "", "interfaces": "implements NodeParser<ConditionDescriptor>", "fields": [{"original_string": "private Integer maxDepthOfXmlTree;", "modifier": "private", "type": "Integer", "declarator": "maxDepthOfXmlTree", "var_name": "maxDepthOfXmlTree"}, {"original_string": "@Autowired\n    private StubConfigXPathEvaluator xPathEvaluator;", "modifier": "@Autowired\n    private", "type": "StubConfigXPathEvaluator", "declarator": "xPathEvaluator", "var_name": "xPathEvaluator"}, {"original_string": "@Autowired\n    private SimpleConditionParser simpleConditionParser;", "modifier": "@Autowired\n    private", "type": "SimpleConditionParser", "declarator": "simpleConditionParser", "var_name": "simpleConditionParser"}, {"original_string": "@Autowired\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}], "methods": [{"identifier": "parseNode", "parameters": "(final Node conDes, final Document document)", "modifiers": "@Override public", "return": "ConditionDescriptor", "signature": "ConditionDescriptor parseNode(final Node conDes, final Document document)", "full_signature": "@Override public ConditionDescriptor parseNode(final Node conDes, final Document document)", "class_method_signature": "ConditionDescriptorParser.parseNode(final Node conDes, final Document document)", "testcase": false, "constructor": false}, {"identifier": "parseConditions", "parameters": "(final NodeList conditions, final Document document, final int depth)", "modifiers": "private", "return": "List<Condition>", "signature": "List<Condition> parseConditions(final NodeList conditions, final Document document, final int depth)", "full_signature": "private List<Condition> parseConditions(final NodeList conditions, final Document document, final int depth)", "class_method_signature": "ConditionDescriptorParser.parseConditions(final NodeList conditions, final Document document, final int depth)", "testcase": false, "constructor": false}, {"identifier": "parseConditionSet", "parameters": "(final Document document, final List<Condition> parsedCondition, final Element el, final int depth)", "modifiers": "private", "return": "void", "signature": "void parseConditionSet(final Document document, final List<Condition> parsedCondition, final Element el, final int depth)", "full_signature": "private void parseConditionSet(final Document document, final List<Condition> parsedCondition, final Element el, final int depth)", "class_method_signature": "ConditionDescriptorParser.parseConditionSet(final Document document, final List<Condition> parsedCondition, final Element el, final int depth)", "testcase": false, "constructor": false}, {"identifier": "validateDepth", "parameters": "(final int depth, final String invokerName)", "modifiers": "private", "return": "int", "signature": "int validateDepth(final int depth, final String invokerName)", "full_signature": "private int validateDepth(final int depth, final String invokerName)", "class_method_signature": "ConditionDescriptorParser.validateDepth(final int depth, final String invokerName)", "testcase": false, "constructor": false}, {"identifier": "getMaxDepth", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getMaxDepth()", "full_signature": "private void getMaxDepth()", "class_method_signature": "ConditionDescriptorParser.getMaxDepth()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/ConditionDescriptorParser.java"}, "focal_method": {"identifier": "parseNode", "parameters": "(final Node conDes, final Document document)", "modifiers": "@Override public", "return": "ConditionDescriptor", "body": "@Override\n    public ConditionDescriptor parseNode(final Node conDes, final Document document) {\n        //This number represents the depth of the subtree\n        int depth = 0;\n        Condition condition = null;\n        if (conDes != null) {\n            Element el = (Element) conDes;\n            List<Condition> parsedConditions = parseConditions(el.getChildNodes(), document, depth);\n            if (!parsedConditions.isEmpty()) {\n                condition = parsedConditions.get(0);\n            }\n        }\n        return new ConditionDescriptor(condition);\n    }", "signature": "ConditionDescriptor parseNode(final Node conDes, final Document document)", "full_signature": "@Override public ConditionDescriptor parseNode(final Node conDes, final Document document)", "class_method_signature": "ConditionDescriptorParser.parseNode(final Node conDes, final Document document)", "testcase": false, "constructor": false, "invocations": ["parseConditions", "getChildNodes", "isEmpty", "get"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}