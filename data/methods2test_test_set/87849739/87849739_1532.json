{"test_class": {"identifier": "ConditionCheckerTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/common/ConditionCheckerTest.java"}, "test_case": {"identifier": "checkArgumentWithPredicate", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void checkArgumentWithPredicate() {\n        final String argument = \"\";\n        ConditionChecker.checkArgument(argument, s -> !s.isEmpty());\n    }", "signature": "void checkArgumentWithPredicate()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void checkArgumentWithPredicate()", "class_method_signature": "ConditionCheckerTest.checkArgumentWithPredicate()", "testcase": true, "constructor": false, "invocations": ["checkArgument", "isEmpty"]}, "focal_class": {"identifier": "ConditionChecker", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ConditionChecker", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConditionChecker()", "full_signature": "private  ConditionChecker()", "class_method_signature": "ConditionChecker.ConditionChecker()", "testcase": false, "constructor": true}, {"identifier": "checkNotNull", "parameters": "(@Nullable final T argument)", "modifiers": "public static", "return": "T", "signature": "T checkNotNull(@Nullable final T argument)", "full_signature": "public static T checkNotNull(@Nullable final T argument)", "class_method_signature": "ConditionChecker.checkNotNull(@Nullable final T argument)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(@Nullable final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T checkNotNull(@Nullable final T argument, final String argumentName)", "full_signature": "public static T checkNotNull(@Nullable final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.checkNotNull(@Nullable final T argument, final String argumentName)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T checkNotEmpty(final T argument, final String argumentName)", "full_signature": "public static T checkNotEmpty(final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.checkNotEmpty(final T argument, final String argumentName)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T checkNotEmpty(final T argument, final String argumentName)", "full_signature": "public static T checkNotEmpty(final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.checkNotEmpty(final T argument, final String argumentName)", "testcase": false, "constructor": false}, {"identifier": "checkArgument", "parameters": "(@Nullable final T argument, final Predicate<T> argumentPredicate)", "modifiers": "@Nullable public static", "return": "T", "signature": "T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "full_signature": "@Nullable public static T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "class_method_signature": "ConditionChecker.checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "testcase": false, "constructor": false}, {"identifier": "checkArgument", "parameters": "(@Nullable final T argument, final Predicate<T> argumentPredicate,\n            final Supplier<String> messageSupplier)", "modifiers": "@Nullable public static", "return": "T", "signature": "T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate,\n            final Supplier<String> messageSupplier)", "full_signature": "@Nullable public static T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate,\n            final Supplier<String> messageSupplier)", "class_method_signature": "ConditionChecker.checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate,\n            final Supplier<String> messageSupplier)", "testcase": false, "constructor": false}, {"identifier": "argumentNotNull", "parameters": "(@Nullable final T argument)", "modifiers": "public static", "return": "T", "signature": "T argumentNotNull(@Nullable final T argument)", "full_signature": "public static T argumentNotNull(@Nullable final T argument)", "class_method_signature": "ConditionChecker.argumentNotNull(@Nullable final T argument)", "testcase": false, "constructor": false}, {"identifier": "argumentNotNull", "parameters": "(@Nullable final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T argumentNotNull(@Nullable final T argument, final String argumentName)", "full_signature": "public static T argumentNotNull(@Nullable final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.argumentNotNull(@Nullable final T argument, final String argumentName)", "testcase": false, "constructor": false}, {"identifier": "argumentNotEmpty", "parameters": "(final T argument)", "modifiers": "public static", "return": "T", "signature": "T argumentNotEmpty(final T argument)", "full_signature": "public static T argumentNotEmpty(final T argument)", "class_method_signature": "ConditionChecker.argumentNotEmpty(final T argument)", "testcase": false, "constructor": false}, {"identifier": "argumentNotEmpty", "parameters": "(final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T argumentNotEmpty(final T argument, final String argumentName)", "full_signature": "public static T argumentNotEmpty(final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.argumentNotEmpty(final T argument, final String argumentName)", "testcase": false, "constructor": false}, {"identifier": "argumentNotEmpty", "parameters": "(final T argument)", "modifiers": "public static", "return": "T", "signature": "T argumentNotEmpty(final T argument)", "full_signature": "public static T argumentNotEmpty(final T argument)", "class_method_signature": "ConditionChecker.argumentNotEmpty(final T argument)", "testcase": false, "constructor": false}, {"identifier": "argumentNotEmpty", "parameters": "(final T argument, final String argumentName)", "modifiers": "public static", "return": "T", "signature": "T argumentNotEmpty(final T argument, final String argumentName)", "full_signature": "public static T argumentNotEmpty(final T argument, final String argumentName)", "class_method_signature": "ConditionChecker.argumentNotEmpty(final T argument, final String argumentName)", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/common/ConditionChecker.java"}, "focal_method": {"identifier": "checkArgument", "parameters": "(@Nullable final T argument, final Predicate<T> argumentPredicate)", "modifiers": "@Nullable public static", "return": "T", "body": "@Nullable\n    public static <T> T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate) {\n        if (!argumentPredicate.test(argument)) {\n            throw new IllegalArgumentException(\"The argument is invalid!\");\n        }\n        return argument;\n    }", "signature": "T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "full_signature": "@Nullable public static T checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "class_method_signature": "ConditionChecker.checkArgument(@Nullable final T argument, final Predicate<T> argumentPredicate)", "testcase": false, "constructor": false, "invocations": ["test"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}