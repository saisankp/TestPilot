{"test_class": {"identifier": "SessionFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/SessionFacadeTest.java"}, "test_case": {"identifier": "testItemExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testItemExists() throws Exception {\n        Session delegate = mock(Session.class);\n        SessionFacade<Session> facade = getFacade(delegate);\n        final String path = \"/correct/path\";\n        when(delegate.itemExists(anyString())).thenReturn(false);\n        when(delegate.itemExists(path)).thenReturn(true);\n        assertFalse(\"not exists at empty path\", facade.itemExists(\"\"));\n        assertTrue(\"exists at correct path\", facade.itemExists(path));\n    }", "signature": "void testItemExists()", "full_signature": "@Test public void testItemExists()", "class_method_signature": "SessionFacadeTest.testItemExists()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "thenReturn", "when", "itemExists", "anyString", "thenReturn", "when", "itemExists", "assertFalse", "itemExists", "assertTrue", "itemExists"]}, "focal_class": {"identifier": "SessionFacade", "superclass": "", "interfaces": "implements Session", "fields": [{"original_string": "protected final @NotNull S delegate;", "modifier": "protected final @NotNull", "type": "S", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final boolean notProtected;", "modifier": "private final", "type": "boolean", "declarator": "notProtected", "var_name": "notProtected"}], "methods": [{"identifier": "SessionFacade", "parameters": "(final @NotNull S delegate, final boolean notProtected)", "modifiers": "public", "return": "", "signature": " SessionFacade(final @NotNull S delegate, final boolean notProtected)", "full_signature": "public  SessionFacade(final @NotNull S delegate, final boolean notProtected)", "class_method_signature": "SessionFacade.SessionFacade(final @NotNull S delegate, final boolean notProtected)", "testcase": false, "constructor": true}, {"identifier": "findBestWrapper", "parameters": "(final @Nullable Session session, final boolean notProtected)", "modifiers": "public static @Nullable", "return": "Session", "signature": "Session findBestWrapper(final @Nullable Session session, final boolean notProtected)", "full_signature": "public static @Nullable Session findBestWrapper(final @Nullable Session session, final boolean notProtected)", "class_method_signature": "SessionFacade.findBestWrapper(final @Nullable Session session, final boolean notProtected)", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "@Override public final", "return": "Repository", "signature": "Repository getRepository()", "full_signature": "@Override public final Repository getRepository()", "class_method_signature": "SessionFacade.getRepository()", "testcase": false, "constructor": false}, {"identifier": "getAccessControlManager", "parameters": "()", "modifiers": "@Override public final", "return": "AccessControlManager", "signature": "AccessControlManager getAccessControlManager()", "full_signature": "@Override public final AccessControlManager getAccessControlManager()", "class_method_signature": "SessionFacade.getAccessControlManager()", "testcase": false, "constructor": false}, {"identifier": "getRetentionManager", "parameters": "()", "modifiers": "@Override public final", "return": "RetentionManager", "signature": "RetentionManager getRetentionManager()", "full_signature": "@Override public final RetentionManager getRetentionManager()", "class_method_signature": "SessionFacade.getRetentionManager()", "testcase": false, "constructor": false}, {"identifier": "getWorkspace", "parameters": "()", "modifiers": "@Override public final", "return": "Workspace", "signature": "Workspace getWorkspace()", "full_signature": "@Override public final Workspace getWorkspace()", "class_method_signature": "SessionFacade.getWorkspace()", "testcase": false, "constructor": false}, {"identifier": "getUserID", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getUserID()", "full_signature": "@Override public final String getUserID()", "class_method_signature": "SessionFacade.getUserID()", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@Override public final", "return": "String[]", "signature": "String[] getAttributeNames()", "full_signature": "@Override public final String[] getAttributeNames()", "class_method_signature": "SessionFacade.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(final String name)", "modifiers": "@Override public final", "return": "Object", "signature": "Object getAttribute(final String name)", "full_signature": "@Override public final Object getAttribute(final String name)", "class_method_signature": "SessionFacade.getAttribute(final String name)", "testcase": false, "constructor": false}, {"identifier": "getRootNode", "parameters": "()", "modifiers": "@Override public final", "return": "Node", "signature": "Node getRootNode()", "full_signature": "@Override public final Node getRootNode()", "class_method_signature": "SessionFacade.getRootNode()", "testcase": false, "constructor": false}, {"identifier": "impersonate", "parameters": "(Credentials credentials)", "modifiers": "@Override public final", "return": "Session", "signature": "Session impersonate(Credentials credentials)", "full_signature": "@Override public final Session impersonate(Credentials credentials)", "class_method_signature": "SessionFacade.impersonate(Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "getNodeByUUID", "parameters": "(String uuid)", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public final", "return": "Node", "signature": "Node getNodeByUUID(String uuid)", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public final Node getNodeByUUID(String uuid)", "class_method_signature": "SessionFacade.getNodeByUUID(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getNodeByIdentifier", "parameters": "(String id)", "modifiers": "@Override public final", "return": "Node", "signature": "Node getNodeByIdentifier(String id)", "full_signature": "@Override public final Node getNodeByIdentifier(String id)", "class_method_signature": "SessionFacade.getNodeByIdentifier(String id)", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "Item", "signature": "Item getItem(String absPath)", "full_signature": "@Override public final Item getItem(String absPath)", "class_method_signature": "SessionFacade.getItem(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "Node", "signature": "Node getNode(String absPath)", "full_signature": "@Override public final Node getNode(String absPath)", "class_method_signature": "SessionFacade.getNode(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "Property", "signature": "Property getProperty(String absPath)", "full_signature": "@Override public final Property getProperty(String absPath)", "class_method_signature": "SessionFacade.getProperty(String absPath)", "testcase": false, "constructor": false}, {"identifier": "itemExists", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean itemExists(String absPath)", "full_signature": "@Override public final boolean itemExists(String absPath)", "class_method_signature": "SessionFacade.itemExists(String absPath)", "testcase": false, "constructor": false}, {"identifier": "nodeExists", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean nodeExists(String absPath)", "full_signature": "@Override public final boolean nodeExists(String absPath)", "class_method_signature": "SessionFacade.nodeExists(String absPath)", "testcase": false, "constructor": false}, {"identifier": "propertyExists", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean propertyExists(String absPath)", "full_signature": "@Override public final boolean propertyExists(String absPath)", "class_method_signature": "SessionFacade.propertyExists(String absPath)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(boolean keepChanges)", "modifiers": "@Override public final", "return": "void", "signature": "void refresh(boolean keepChanges)", "full_signature": "@Override public final void refresh(boolean keepChanges)", "class_method_signature": "SessionFacade.refresh(boolean keepChanges)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void logout()", "full_signature": "@Override public final void logout()", "class_method_signature": "SessionFacade.logout()", "testcase": false, "constructor": false}, {"identifier": "isLive", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isLive()", "full_signature": "@Override public final boolean isLive()", "class_method_signature": "SessionFacade.isLive()", "testcase": false, "constructor": false}, {"identifier": "hasPendingChanges", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean hasPendingChanges()", "full_signature": "@Override public final boolean hasPendingChanges()", "class_method_signature": "SessionFacade.hasPendingChanges()", "testcase": false, "constructor": false}, {"identifier": "getValueFactory", "parameters": "()", "modifiers": "@Override public final", "return": "ValueFactory", "signature": "ValueFactory getValueFactory()", "full_signature": "@Override public final ValueFactory getValueFactory()", "class_method_signature": "SessionFacade.getValueFactory()", "testcase": false, "constructor": false}, {"identifier": "hasPermission", "parameters": "(String absPath, String actions)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean hasPermission(String absPath, String actions)", "full_signature": "@Override public final boolean hasPermission(String absPath, String actions)", "class_method_signature": "SessionFacade.hasPermission(String absPath, String actions)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(String absPath, String actions)", "modifiers": "@Override public final", "return": "void", "signature": "void checkPermission(String absPath, String actions)", "full_signature": "@Override public final void checkPermission(String absPath, String actions)", "class_method_signature": "SessionFacade.checkPermission(String absPath, String actions)", "testcase": false, "constructor": false}, {"identifier": "hasCapability", "parameters": "(String methodName, Object target, Object[] arguments)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean hasCapability(String methodName, Object target, Object[] arguments)", "full_signature": "@Override public final boolean hasCapability(String methodName, Object target, Object[] arguments)", "class_method_signature": "SessionFacade.hasCapability(String methodName, Object target, Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "exportSystemView", "parameters": "(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "modifiers": "@Override public final", "return": "void", "signature": "void exportSystemView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "full_signature": "@Override public final void exportSystemView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "class_method_signature": "SessionFacade.exportSystemView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "testcase": false, "constructor": false}, {"identifier": "exportSystemView", "parameters": "(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "modifiers": "@Override public final", "return": "void", "signature": "void exportSystemView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "full_signature": "@Override public final void exportSystemView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "class_method_signature": "SessionFacade.exportSystemView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "testcase": false, "constructor": false}, {"identifier": "exportDocumentView", "parameters": "(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "modifiers": "@Override public final", "return": "void", "signature": "void exportDocumentView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "full_signature": "@Override public final void exportDocumentView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "class_method_signature": "SessionFacade.exportDocumentView(String absPath, ContentHandler contentHandler, boolean skipBinary, boolean noRecurse)", "testcase": false, "constructor": false}, {"identifier": "exportDocumentView", "parameters": "(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "modifiers": "@Override public final", "return": "void", "signature": "void exportDocumentView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "full_signature": "@Override public final void exportDocumentView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "class_method_signature": "SessionFacade.exportDocumentView(String absPath, OutputStream out, boolean skipBinary, boolean noRecurse)", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefixes", "parameters": "()", "modifiers": "@Override public final", "return": "String[]", "signature": "String[] getNamespacePrefixes()", "full_signature": "@Override public final String[] getNamespacePrefixes()", "class_method_signature": "SessionFacade.getNamespacePrefixes()", "testcase": false, "constructor": false}, {"identifier": "getNamespaceURI", "parameters": "(String prefix)", "modifiers": "@Override public final", "return": "String", "signature": "String getNamespaceURI(String prefix)", "full_signature": "@Override public final String getNamespaceURI(String prefix)", "class_method_signature": "SessionFacade.getNamespaceURI(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getNamespacePrefix", "parameters": "(String uri)", "modifiers": "@Override public final", "return": "String", "signature": "String getNamespacePrefix(String uri)", "full_signature": "@Override public final String getNamespacePrefix(String uri)", "class_method_signature": "SessionFacade.getNamespacePrefix(String uri)", "testcase": false, "constructor": false}, {"identifier": "addLockToken", "parameters": "(String lt)", "modifiers": "@Override public final", "return": "void", "signature": "void addLockToken(String lt)", "full_signature": "@Override public final void addLockToken(String lt)", "class_method_signature": "SessionFacade.addLockToken(String lt)", "testcase": false, "constructor": false}, {"identifier": "getLockTokens", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public final", "return": "String[]", "signature": "String[] getLockTokens()", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public final String[] getLockTokens()", "class_method_signature": "SessionFacade.getLockTokens()", "testcase": false, "constructor": false}, {"identifier": "removeLockToken", "parameters": "(String lt)", "modifiers": "@Override public final", "return": "void", "signature": "void removeLockToken(String lt)", "full_signature": "@Override public final void removeLockToken(String lt)", "class_method_signature": "SessionFacade.removeLockToken(String lt)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(String srcAbsPath, String destAbsPath)", "modifiers": "@Override public final", "return": "void", "signature": "void move(String srcAbsPath, String destAbsPath)", "full_signature": "@Override public final void move(String srcAbsPath, String destAbsPath)", "class_method_signature": "SessionFacade.move(String srcAbsPath, String destAbsPath)", "testcase": false, "constructor": false}, {"identifier": "removeItem", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "void", "signature": "void removeItem(String absPath)", "full_signature": "@Override public final void removeItem(String absPath)", "class_method_signature": "SessionFacade.removeItem(String absPath)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void save()", "full_signature": "@Override public final void save()", "class_method_signature": "SessionFacade.save()", "testcase": false, "constructor": false}, {"identifier": "getImportContentHandler", "parameters": "(String parentAbsPath, int uuidBehavior)", "modifiers": "@Override public final", "return": "ContentHandler", "signature": "ContentHandler getImportContentHandler(String parentAbsPath, int uuidBehavior)", "full_signature": "@Override public final ContentHandler getImportContentHandler(String parentAbsPath, int uuidBehavior)", "class_method_signature": "SessionFacade.getImportContentHandler(String parentAbsPath, int uuidBehavior)", "testcase": false, "constructor": false}, {"identifier": "importXML", "parameters": "(String parentAbsPath, InputStream in, int uuidBehavior)", "modifiers": "@Override public final", "return": "void", "signature": "void importXML(String parentAbsPath, InputStream in, int uuidBehavior)", "full_signature": "@Override public final void importXML(String parentAbsPath, InputStream in, int uuidBehavior)", "class_method_signature": "SessionFacade.importXML(String parentAbsPath, InputStream in, int uuidBehavior)", "testcase": false, "constructor": false}, {"identifier": "setNamespacePrefix", "parameters": "(String prefix, String uri)", "modifiers": "@Override public final", "return": "void", "signature": "void setNamespacePrefix(String prefix, String uri)", "full_signature": "@Override public final void setNamespacePrefix(String prefix, String uri)", "class_method_signature": "SessionFacade.setNamespacePrefix(String prefix, String uri)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/SessionFacade.java"}, "focal_method": {"identifier": "itemExists", "parameters": "(String absPath)", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean itemExists(String absPath) throws RepositoryException {\n        return delegate.itemExists(absPath);\n    }", "signature": "boolean itemExists(String absPath)", "full_signature": "@Override public final boolean itemExists(String absPath)", "class_method_signature": "SessionFacade.itemExists(String absPath)", "testcase": false, "constructor": false, "invocations": ["itemExists"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}