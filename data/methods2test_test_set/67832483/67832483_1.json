{"test_class": {"identifier": "MonetaryAmountMinValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Validator validator;", "modifier": "private static", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "@Mock\n    private MonetaryMin monetaryMin;", "modifier": "@Mock\n    private", "type": "MonetaryMin", "declarator": "monetaryMin", "var_name": "monetaryMin"}, {"original_string": "private MonetaryAmountMinValidator monetaryValidator;", "modifier": "private", "type": "MonetaryAmountMinValidator", "declarator": "monetaryValidator", "var_name": "monetaryValidator"}, {"original_string": "private ConstraintValidatorContext context;", "modifier": "private", "type": "ConstraintValidatorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private MonetaryAmount money;", "modifier": "private", "type": "MonetaryAmount", "declarator": "money", "var_name": "money"}], "file": "artemis-demo-java-se/bean-validation/src/test/java/org/jnosql/artemis/demo/se/parking/validation/MonetaryAmountMinValidatorTest.java"}, "test_case": {"identifier": "shouldReturnsTrueWhenIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnsTrueWhenIsNull() {\n        Assertions.assertTrue(monetaryValidator.isValid(null, context));\n    }", "signature": "void shouldReturnsTrueWhenIsNull()", "full_signature": "@Test public void shouldReturnsTrueWhenIsNull()", "class_method_signature": "MonetaryAmountMinValidatorTest.shouldReturnsTrueWhenIsNull()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isValid"]}, "focal_class": {"identifier": "MonetaryAmountMinValidator", "superclass": "", "interfaces": "implements ConstraintValidator<MonetaryMin, MonetaryAmount>", "fields": [{"original_string": "private BigDecimal number;", "modifier": "private", "type": "BigDecimal", "declarator": "number", "var_name": "number"}], "methods": [{"identifier": "initialize", "parameters": "(MonetaryMin constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(MonetaryMin constraintAnnotation)", "full_signature": "@Override public void initialize(MonetaryMin constraintAnnotation)", "class_method_signature": "MonetaryAmountMinValidator.initialize(MonetaryMin constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "class_method_signature": "MonetaryAmountMinValidator.isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "artemis-demo-java-se/bean-validation/src/main/java/org/jnosql/artemis/demo/se/parking/validation/MonetaryAmountMinValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n   public boolean isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context) {\n      if (value == null) {\n         return true;\n      }\n      return value.isGreaterThanOrEqualTo(value.getFactory().setNumber(number).create());\n   }", "signature": "boolean isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "class_method_signature": "MonetaryAmountMinValidator.isValid(MonetaryAmount value,\n                          ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["isGreaterThanOrEqualTo", "create", "setNumber", "getFactory"]}, "repository": {"repo_id": 67832483, "url": "https://github.com/JNOSQL/artemis-demo", "stars": 21, "created": "9/9/2016 9:01:24 PM +00:00", "updates": "2020-01-06T09:37:32+00:00", "fork": "False", "license": "licensed"}}