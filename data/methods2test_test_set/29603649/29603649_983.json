{"test_class": {"identifier": "LogFileHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_CONTENT = \"content\";", "modifier": "private static final", "type": "String", "declarator": "FILE_CONTENT = \"content\"", "var_name": "FILE_CONTENT"}, {"original_string": "@Mock\n    private FileListJsonBuilder messageFileListJsonBuilder;", "modifier": "@Mock\n    private", "type": "FileListJsonBuilder", "declarator": "messageFileListJsonBuilder", "var_name": "messageFileListJsonBuilder"}, {"original_string": "@Mock\n    private FileReader messageFileReader;", "modifier": "@Mock\n    private", "type": "FileReader", "declarator": "messageFileReader", "var_name": "messageFileReader"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}, {"original_string": "@Mock\n    private FileInputStream fileInputStream;", "modifier": "@Mock\n    private", "type": "FileInputStream", "declarator": "fileInputStream", "var_name": "fileInputStream"}, {"original_string": "@Mock\n    private Path path;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "path", "var_name": "path"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private InputStreamUtil inputStreamConverter;", "modifier": "@Mock\n    private", "type": "InputStreamUtil", "declarator": "inputStreamConverter", "var_name": "inputStreamConverter"}, {"original_string": "@Mock\n    private WebAppConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "WebAppConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private FileListJsonProperties properties;", "modifier": "@Mock\n    private", "type": "FileListJsonProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "@Mock\n    private PropertyDTO propertyDTO;", "modifier": "@Mock\n    private", "type": "PropertyDTO", "declarator": "propertyDTO", "var_name": "propertyDTO"}, {"original_string": "@InjectMocks\n    private LogFileHandler underTest;", "modifier": "@InjectMocks\n    private", "type": "LogFileHandler", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/helper/LogFileHandlerTest.java"}, "test_case": {"identifier": "testWriteFileContentToResponseShouldWriteErrorMessageWhenPathIsAnInvalidFileName", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testWriteFileContentToResponseShouldWriteErrorMessageWhenPathIsAnInvalidFileName() throws IOException {\n        // GIVEN\n        given(messageFileReader.readFile(\"invalidfilename\", path)).willReturn(null);\n        // WHEN\n        underTest.writeFileContentToResponse(request, response, \"invalidfilename\", path);\n        // THEN\n        verify(response).setContentType(\"text/html\");\n        verify(printWriter).write(\"Requested file not found.\");\n        verify(printWriter).flush();\n        verify(printWriter).close();\n    }", "signature": "void testWriteFileContentToResponseShouldWriteErrorMessageWhenPathIsAnInvalidFileName()", "full_signature": "@Test public final void testWriteFileContentToResponseShouldWriteErrorMessageWhenPathIsAnInvalidFileName()", "class_method_signature": "LogFileHandlerTest.testWriteFileContentToResponseShouldWriteErrorMessageWhenPathIsAnInvalidFileName()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "readFile", "writeFileContentToResponse", "setContentType", "verify", "write", "verify", "flush", "verify", "close", "verify"]}, "focal_class": {"identifier": "LogFileHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APPLICATION_JSON = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_JSON = \"application/json\"", "var_name": "APPLICATION_JSON"}, {"original_string": "private static final String TEXT_HTML = \"text/html\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_HTML = \"text/html\"", "var_name": "TEXT_HTML"}, {"original_string": "private static final String TEXT_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_PLAIN = \"text/plain\"", "var_name": "TEXT_PLAIN"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final String FILE_NOT_FOUND_MSG = \"Requested file not found.\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NOT_FOUND_MSG = \"Requested file not found.\"", "var_name": "FILE_NOT_FOUND_MSG"}, {"original_string": "@Autowired\n    private FileListJsonBuilder messageFileJsonBuilder;", "modifier": "@Autowired\n    private", "type": "FileListJsonBuilder", "declarator": "messageFileJsonBuilder", "var_name": "messageFileJsonBuilder"}, {"original_string": "@Autowired\n    private FileReader messageFileReader;", "modifier": "@Autowired\n    private", "type": "FileReader", "declarator": "messageFileReader", "var_name": "messageFileReader"}, {"original_string": "@Autowired\n    private InputStreamUtil inputStreamConverter;", "modifier": "@Autowired\n    private", "type": "InputStreamUtil", "declarator": "inputStreamConverter", "var_name": "inputStreamConverter"}], "methods": [{"identifier": "writeFileNamesToResponse", "parameters": "(final HttpServletResponse resp, final Path path)", "modifiers": "public", "return": "void", "signature": "void writeFileNamesToResponse(final HttpServletResponse resp, final Path path)", "full_signature": "public void writeFileNamesToResponse(final HttpServletResponse resp, final Path path)", "class_method_signature": "LogFileHandler.writeFileNamesToResponse(final HttpServletResponse resp, final Path path)", "testcase": false, "constructor": false}, {"identifier": "writeFileContentToResponse", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "modifiers": "public", "return": "void", "signature": "void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "full_signature": "public void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "class_method_signature": "LogFileHandler.writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "testcase": false, "constructor": false}, {"identifier": "writeFileToResponse", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream)", "modifiers": "private", "return": "void", "signature": "void writeFileToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream)", "full_signature": "private void writeFileToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream)", "class_method_signature": "LogFileHandler.writeFileToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream)", "testcase": false, "constructor": false}, {"identifier": "messageFileExists", "parameters": "(final InputStream inputStream)", "modifiers": "private", "return": "boolean", "signature": "boolean messageFileExists(final InputStream inputStream)", "full_signature": "private boolean messageFileExists(final InputStream inputStream)", "class_method_signature": "LogFileHandler.messageFileExists(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "sendMessageFileAsAttachmentInResponse", "parameters": "(final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream, final String userAgent)", "modifiers": "private", "return": "void", "signature": "void sendMessageFileAsAttachmentInResponse(final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream, final String userAgent)", "full_signature": "private void sendMessageFileAsAttachmentInResponse(final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream, final String userAgent)", "class_method_signature": "LogFileHandler.sendMessageFileAsAttachmentInResponse(final HttpServletResponse resp, final String requestedFilename,\n            final InputStream messageFileInputStream, final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "sendFileContentInResponse", "parameters": "(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "modifiers": "private", "return": "void", "signature": "void sendFileContentInResponse(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "full_signature": "private void sendFileContentInResponse(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "class_method_signature": "LogFileHandler.sendFileContentInResponse(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "writeErrorToResponse", "parameters": "(final HttpServletResponse resp)", "modifiers": "private", "return": "void", "signature": "void writeErrorToResponse(final HttpServletResponse resp)", "full_signature": "private void writeErrorToResponse(final HttpServletResponse resp)", "class_method_signature": "LogFileHandler.writeErrorToResponse(final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "setHeaders", "parameters": "(final HttpServletResponse resp, final String requestedFilename)", "modifiers": "private", "return": "void", "signature": "void setHeaders(final HttpServletResponse resp, final String requestedFilename)", "full_signature": "private void setHeaders(final HttpServletResponse resp, final String requestedFilename)", "class_method_signature": "LogFileHandler.setHeaders(final HttpServletResponse resp, final String requestedFilename)", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "modifiers": "private", "return": "void", "signature": "void setContent(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "full_signature": "private void setContent(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "class_method_signature": "LogFileHandler.setContent(final HttpServletResponse resp, final InputStream messageFileInputStream, final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "getContentFromInputStream", "parameters": "(final InputStream messageFileInputStream, final String userAgent)", "modifiers": "private", "return": "String", "signature": "String getContentFromInputStream(final InputStream messageFileInputStream, final String userAgent)", "full_signature": "private String getContentFromInputStream(final InputStream messageFileInputStream, final String userAgent)", "class_method_signature": "LogFileHandler.getContentFromInputStream(final InputStream messageFileInputStream, final String userAgent)", "testcase": false, "constructor": false}, {"identifier": "userIsOnWindows", "parameters": "(final String userAgent)", "modifiers": "private", "return": "boolean", "signature": "boolean userIsOnWindows(final String userAgent)", "full_signature": "private boolean userIsOnWindows(final String userAgent)", "class_method_signature": "LogFileHandler.userIsOnWindows(final String userAgent)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/helper/LogFileHandler.java"}, "focal_method": {"identifier": "writeFileContentToResponse", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "modifiers": "public", "return": "void", "body": "public void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)\n        throws IOException {\n        String requestedFilename = pathInfo.substring(1);\n        InputStream messageFileInputStream = messageFileReader.readFile(requestedFilename, path);\n        if (messageFileExists(messageFileInputStream)) {\n            writeFileToResponse(req, resp, requestedFilename, messageFileInputStream);\n        } else {\n            writeErrorToResponse(resp);\n        }\n    }", "signature": "void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "full_signature": "public void writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "class_method_signature": "LogFileHandler.writeFileContentToResponse(final HttpServletRequest req, final HttpServletResponse resp, final String pathInfo, final Path path)", "testcase": false, "constructor": false, "invocations": ["substring", "readFile", "messageFileExists", "writeFileToResponse", "writeErrorToResponse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}