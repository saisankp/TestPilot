{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "abi/src/test/java/org/web3j/abi/UtilsTest.java"}, "test_case": {"identifier": "testGetTypeName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTypeName() throws ClassNotFoundException {\n        assertThat(Utils.getTypeName(new TypeReference<Uint>(){}), is(\"uint256\"));\n        assertThat(Utils.getTypeName(new TypeReference<Int>(){}), is(\"int256\"));\n        assertThat(Utils.getTypeName(new TypeReference<Ufixed>(){}), is(\"ufixed256\"));\n        assertThat(Utils.getTypeName(new TypeReference<Fixed>(){}), is(\"fixed256\"));\n\n        assertThat(Utils.getTypeName(new TypeReference<Uint64>(){}), is(\"uint64\"));\n        assertThat(Utils.getTypeName(new TypeReference<Int64>(){}), is(\"int64\"));\n        assertThat(Utils.getTypeName(new TypeReference<Bool>(){}), is(\"bool\"));\n        assertThat(Utils.getTypeName(new TypeReference<Utf8String>(){}), is(\"string\"));\n        assertThat(Utils.getTypeName(new TypeReference<DynamicBytes>(){}), is(\"bytes\"));\n\n        assertThat(Utils.getTypeName(\n                new TypeReference.StaticArrayTypeReference<StaticArray<Uint>>(5){}),\n                is(\"uint256[5]\"));\n        assertThat(Utils.getTypeName(\n                new TypeReference<DynamicArray<Uint>>(){}),\n                is(\"uint256[]\"));\n    }", "signature": "void testGetTypeName()", "full_signature": "@Test public void testGetTypeName()", "class_method_signature": "UtilsTest.testGetTypeName()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is", "assertThat", "getTypeName", "is"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "getTypeName", "parameters": "(TypeReference<T> typeReference)", "modifiers": "static", "return": "String", "signature": "String getTypeName(TypeReference<T> typeReference)", "full_signature": "static String getTypeName(TypeReference<T> typeReference)", "class_method_signature": "Utils.getTypeName(TypeReference<T> typeReference)", "testcase": false, "constructor": false}, {"identifier": "getSimpleTypeName", "parameters": "(Class<?> type)", "modifiers": "static", "return": "String", "signature": "String getSimpleTypeName(Class<?> type)", "full_signature": "static String getSimpleTypeName(Class<?> type)", "class_method_signature": "Utils.getSimpleTypeName(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedTypeName", "parameters": "(\n            TypeReference<T> typeReference, Class<?> type)", "modifiers": "static", "return": "String", "signature": "String getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "full_signature": "static String getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "class_method_signature": "Utils.getParameterizedTypeName(\n            TypeReference<T> typeReference, Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getParameterizedTypeFromArray", "parameters": "(\n            TypeReference typeReference)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "Class<T>", "signature": "Class<T> getParameterizedTypeFromArray(\n            TypeReference typeReference)", "full_signature": "@SuppressWarnings(\"unchecked\") static Class<T> getParameterizedTypeFromArray(\n            TypeReference typeReference)", "class_method_signature": "Utils.getParameterizedTypeFromArray(\n            TypeReference typeReference)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(List<TypeReference<?>> input)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "List<TypeReference<Type>>", "signature": "List<TypeReference<Type>> convert(List<TypeReference<?>> input)", "full_signature": "@SuppressWarnings(\"unchecked\") public static List<TypeReference<Type>> convert(List<TypeReference<?>> input)", "class_method_signature": "Utils.convert(List<TypeReference<?>> input)", "testcase": false, "constructor": false}, {"identifier": "typeMap", "parameters": "(List<T> input, Class<R> destType)", "modifiers": "public static", "return": "List<R>", "signature": "List<R> typeMap(List<T> input, Class<R> destType)", "full_signature": "public static List<R> typeMap(List<T> input, Class<R> destType)", "class_method_signature": "Utils.typeMap(List<T> input, Class<R> destType)", "testcase": false, "constructor": false}], "file": "abi/src/main/java/org/web3j/abi/Utils.java"}, "focal_method": {"identifier": "getTypeName", "parameters": "(TypeReference<T> typeReference)", "modifiers": "static", "return": "String", "body": "static <T extends Type> String getTypeName(TypeReference<T> typeReference) {\n        try {\n            java.lang.reflect.Type reflectedType = typeReference.getType();\n\n            Class<?> type;\n            if (reflectedType instanceof ParameterizedType) {\n                type = (Class<?>) ((ParameterizedType) reflectedType).getRawType();\n                return getParameterizedTypeName(typeReference, type);\n            } else {\n                type = Class.forName(((Class) reflectedType).getName());\n                return getSimpleTypeName(type);\n            }\n        } catch (ClassNotFoundException e) {\n            throw new UnsupportedOperationException(\"Invalid class reference provided\", e);\n        }\n    }", "signature": "String getTypeName(TypeReference<T> typeReference)", "full_signature": "static String getTypeName(TypeReference<T> typeReference)", "class_method_signature": "Utils.getTypeName(TypeReference<T> typeReference)", "testcase": false, "constructor": false, "invocations": ["getType", "getRawType", "getParameterizedTypeName", "forName", "getName", "getSimpleTypeName"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}