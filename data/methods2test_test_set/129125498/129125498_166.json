{"test_class": {"identifier": "CusumDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double WEAK_SIGMAS = 3.0;", "modifier": "private static final", "type": "double", "declarator": "WEAK_SIGMAS = 3.0", "var_name": "WEAK_SIGMAS"}, {"original_string": "private static final double STRONG_SIGMAS = 4.0;", "modifier": "private static final", "type": "double", "declarator": "STRONG_SIGMAS = 4.0", "var_name": "STRONG_SIGMAS"}, {"original_string": "private static final double TOLERANCE = 0.01;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.01", "var_name": "TOLERANCE"}, {"original_string": "private static final int WARMUP_PERIOD = 25;", "modifier": "private static final", "type": "int", "declarator": "WARMUP_PERIOD = 25", "var_name": "WARMUP_PERIOD"}, {"original_string": "private UUID detectorUuid;", "modifier": "private", "type": "UUID", "declarator": "detectorUuid", "var_name": "detectorUuid"}, {"original_string": "private MetricDefinition metricDefinition;", "modifier": "private", "type": "MetricDefinition", "declarator": "metricDefinition", "var_name": "metricDefinition"}, {"original_string": "private long epochSecond;", "modifier": "private", "type": "long", "declarator": "epochSecond", "var_name": "epochSecond"}, {"original_string": "private static List<CusumDetectorTestRow> data;", "modifier": "private static", "type": "List<CusumDetectorTestRow>", "declarator": "data", "var_name": "data"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/cusum/CusumDetectorTest.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testName() {\n        val anomalyType = AnomalyType.TWO_TAILED;\n        val trusted = true;\n        val params = new CusumDetectorParams()\n                .setType(anomalyType)\n                .setTargetValue(1000.0)\n                .setWeakSigmas(WEAK_SIGMAS)\n                .setStrongSigmas(STRONG_SIGMAS)\n                .setSlackParam(0.5)\n                .setInitMeanEstimate(1000.0)\n                .setWarmUpPeriod(5);\n\n        val detector = new CusumDetector(detectorUuid, params, trusted);\n        Assert.assertNotNull(detector.getName());\n        Assert.assertEquals(\"cusum\", detector.getName());\n    }", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "CusumDetectorTest.testName()", "testcase": true, "constructor": false, "invocations": ["setWarmUpPeriod", "setInitMeanEstimate", "setSlackParam", "setStrongSigmas", "setWeakSigmas", "setTargetValue", "setType", "assertNotNull", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "CusumDetector", "superclass": "extends AbstractOutlierDetector", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"cusum\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"cusum\"", "var_name": "NAME"}, {"original_string": "private static final double STD_DEV_DIVISOR = 1.128;", "modifier": "private static final", "type": "double", "declarator": "STD_DEV_DIVISOR = 1.128", "var_name": "STD_DEV_DIVISOR"}, {"original_string": "@Getter\n    private CusumDetectorParams params;", "modifier": "@Getter\n    private", "type": "CusumDetectorParams", "declarator": "params", "var_name": "params"}, {"original_string": "@Getter\n    private boolean trusted;", "modifier": "@Getter\n    private", "type": "boolean", "declarator": "trusted", "var_name": "trusted"}, {"original_string": "private int totalDataPoints = 1;", "modifier": "private", "type": "int", "declarator": "totalDataPoints = 1", "var_name": "totalDataPoints"}, {"original_string": "@Getter\n    private double sumHigh = 0.0;", "modifier": "@Getter\n    private", "type": "double", "declarator": "sumHigh = 0.0", "var_name": "sumHigh"}, {"original_string": "@Getter\n    private double sumLow = 0.0;", "modifier": "@Getter\n    private", "type": "double", "declarator": "sumLow = 0.0", "var_name": "sumLow"}, {"original_string": "private double movingRange = 0.0;", "modifier": "private", "type": "double", "declarator": "movingRange = 0.0", "var_name": "movingRange"}, {"original_string": "private double prevValue;", "modifier": "private", "type": "double", "declarator": "prevValue", "var_name": "prevValue"}], "methods": [{"identifier": "CusumDetector", "parameters": "(UUID uuid, CusumDetectorParams params, boolean trusted)", "modifiers": "public", "return": "", "signature": " CusumDetector(UUID uuid, CusumDetectorParams params, boolean trusted)", "full_signature": "public  CusumDetector(UUID uuid, CusumDetectorParams params, boolean trusted)", "class_method_signature": "CusumDetector.CusumDetector(UUID uuid, CusumDetectorParams params, boolean trusted)", "testcase": false, "constructor": true}, {"identifier": "detect", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "DetectorResult", "signature": "DetectorResult detect(MetricData metricData)", "full_signature": "@Override public DetectorResult detect(MetricData metricData)", "class_method_signature": "CusumDetector.detect(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CusumDetector.getName()", "testcase": false, "constructor": false}, {"identifier": "resetSums", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetSums()", "full_signature": "private void resetSums()", "class_method_signature": "CusumDetector.resetSums()", "testcase": false, "constructor": false}, {"identifier": "avgMovingRange", "parameters": "()", "modifiers": "private", "return": "double", "signature": "double avgMovingRange()", "full_signature": "private double avgMovingRange()", "class_method_signature": "CusumDetector.avgMovingRange()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/cusum/CusumDetector.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        return NAME;\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CusumDetector.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}