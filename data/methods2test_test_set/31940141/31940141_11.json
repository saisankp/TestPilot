{"test_class": {"identifier": "ClassResourceClassInformationRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassResourceClassInformationRepository repo;", "modifier": "private", "type": "ClassResourceClassInformationRepository", "declarator": "repo", "var_name": "repo"}], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/asm/ClassResourceClassInformationRepositoryTest.java"}, "test_case": {"identifier": "mustGetClassInformationForBoolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustGetClassInformationForBoolean() {\n        ClassInformation info = repo.getInformation(\"java/lang/Boolean\");\n        \n        assertEquals(\"java/lang/Object\", info.getSuperClassName());\n        assertEquals(2, info.getInterfaces().size());\n        assertTrue(info.getInterfaces().contains(\"java/lang/Comparable\"));\n        assertTrue(info.getInterfaces().contains(\"java/io/Serializable\"));\n        assertFalse(info.isInterface());\n    }", "signature": "void mustGetClassInformationForBoolean()", "full_signature": "@Test public void mustGetClassInformationForBoolean()", "class_method_signature": "ClassResourceClassInformationRepositoryTest.mustGetClassInformationForBoolean()", "testcase": true, "constructor": false, "invocations": ["getInformation", "assertEquals", "getSuperClassName", "assertEquals", "size", "getInterfaces", "assertTrue", "contains", "getInterfaces", "assertTrue", "contains", "getInterfaces", "assertFalse", "isInterface"]}, "focal_class": {"identifier": "ClassResourceClassInformationRepository", "superclass": "", "interfaces": "implements ClassInformationRepository", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "methods": [{"identifier": "ClassResourceClassInformationRepository", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ClassResourceClassInformationRepository(ClassLoader classLoader)", "full_signature": "public  ClassResourceClassInformationRepository(ClassLoader classLoader)", "class_method_signature": "ClassResourceClassInformationRepository.ClassResourceClassInformationRepository(ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "getInformation", "parameters": "(String internalClassName)", "modifiers": "@Override public", "return": "ClassInformation", "signature": "ClassInformation getInformation(String internalClassName)", "full_signature": "@Override public ClassInformation getInformation(String internalClassName)", "class_method_signature": "ClassResourceClassInformationRepository.getInformation(String internalClassName)", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/asm/ClassResourceClassInformationRepository.java"}, "focal_method": {"identifier": "getInformation", "parameters": "(String internalClassName)", "modifiers": "@Override public", "return": "ClassInformation", "body": "@Override\n    public ClassInformation getInformation(String internalClassName) {\n        Validate.notNull(internalClassName);\n        \n        try (InputStream is = classLoader.getResourceAsStream(internalClassName + \".class\")) {\n            if (is == null) {\n                return null;\n            }\n            \n            return InternalUtils.getClassInformation(is);\n        } catch (IOException ioe) {\n            throw new IllegalStateException(ioe); // this should never happen\n        }\n    }", "signature": "ClassInformation getInformation(String internalClassName)", "full_signature": "@Override public ClassInformation getInformation(String internalClassName)", "class_method_signature": "ClassResourceClassInformationRepository.getInformation(String internalClassName)", "testcase": false, "constructor": false, "invocations": ["notNull", "getResourceAsStream", "getClassInformation"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}