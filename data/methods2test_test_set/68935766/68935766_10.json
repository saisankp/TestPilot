{"test_class": {"identifier": "MaybeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Maybe<String> maybe = new Maybe<>(() -> \"expected\");", "modifier": "", "type": "Maybe<String>", "declarator": "maybe = new Maybe<>(() -> \"expected\")", "var_name": "maybe"}, {"original_string": "Maybe<String> exceptional = new Maybe<>(() -> { throw new IllegalArgumentException(); }, null);", "modifier": "", "type": "Maybe<String>", "declarator": "exceptional = new Maybe<>(() -> { throw new IllegalArgumentException(); }, null)", "var_name": "exceptional"}], "file": "commons/src/test/java/com/karuslabs/commons/util/concurrent/MaybeTest.java"}, "test_case": {"identifier": "some_timeout", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void some_timeout() {\n        assertEquals(\"expected\", maybe.some(1, TimeUnit.MINUTES).orElseThrow());\n    }", "signature": "void some_timeout()", "full_signature": "@Test void some_timeout()", "class_method_signature": "MaybeTest.some_timeout()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "orElseThrow", "some"]}, "focal_class": {"identifier": "Maybe", "superclass": "extends FutureTask<T>", "interfaces": "", "fields": [{"original_string": "private static final Callable<?> CALLABLE = () -> null;", "modifier": "private static final", "type": "Callable<?>", "declarator": "CALLABLE = () -> null", "var_name": "CALLABLE"}], "methods": [{"identifier": "value", "parameters": "(T value)", "modifiers": "public static", "return": "Maybe<T>", "signature": "Maybe<T> value(T value)", "full_signature": "public static Maybe<T> value(T value)", "class_method_signature": "Maybe.value(T value)", "testcase": false, "constructor": false}, {"identifier": "Maybe", "parameters": "(Callable<T> callable)", "modifiers": "public", "return": "", "signature": " Maybe(Callable<T> callable)", "full_signature": "public  Maybe(Callable<T> callable)", "class_method_signature": "Maybe.Maybe(Callable<T> callable)", "testcase": false, "constructor": true}, {"identifier": "Maybe", "parameters": "(Runnable runnable, T result)", "modifiers": "public", "return": "", "signature": " Maybe(Runnable runnable, T result)", "full_signature": "public  Maybe(Runnable runnable, T result)", "class_method_signature": "Maybe.Maybe(Runnable runnable, T result)", "testcase": false, "constructor": true}, {"identifier": "some", "parameters": "()", "modifiers": "@Blocking public", "return": "Optional<T>", "signature": "Optional<T> some()", "full_signature": "@Blocking public Optional<T> some()", "class_method_signature": "Maybe.some()", "testcase": false, "constructor": false}, {"identifier": "some", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Blocking public", "return": "Optional<T>", "signature": "Optional<T> some(long timeout, TimeUnit unit)", "full_signature": "@Blocking public Optional<T> some(long timeout, TimeUnit unit)", "class_method_signature": "Maybe.some(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "@Blocking public @Nullable", "return": "T", "signature": "T value()", "full_signature": "@Blocking public @Nullable T value()", "class_method_signature": "Maybe.value()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Blocking public @Nullable", "return": "T", "signature": "T value(long timeout, TimeUnit unit)", "full_signature": "@Blocking public @Nullable T value(long timeout, TimeUnit unit)", "class_method_signature": "Maybe.value(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/concurrent/Maybe.java"}, "focal_method": {"identifier": "some", "parameters": "()", "modifiers": "@Blocking public", "return": "Optional<T>", "body": "@Blocking\n    public Optional<T> some() {\n        try {\n            return Optional.ofNullable(get());\n            \n        } catch (ExecutionException | InterruptedException ignored) {\n            return Optional.empty();\n        }\n    }", "signature": "Optional<T> some()", "full_signature": "@Blocking public Optional<T> some()", "class_method_signature": "Maybe.some()", "testcase": false, "constructor": false, "invocations": ["ofNullable", "get", "empty"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}