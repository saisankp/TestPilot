{"test_class": {"identifier": "TestCertificateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder workDir = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "workDir = new TemporaryFolder()", "var_name": "workDir"}, {"original_string": "private File secDir;", "modifier": "private", "type": "File", "declarator": "secDir", "var_name": "secDir"}, {"original_string": "private CertificateManager certMan;", "modifier": "private", "type": "CertificateManager", "declarator": "certMan", "var_name": "certMan"}], "file": "slider-core/src/test/java/org/apache/slider/server/services/security/TestCertificateManager.java"}, "test_case": {"identifier": "testContainerCertificateGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testContainerCertificateGeneration() throws Exception {\n    certMan.generateContainerCertificate(\"testhost\", \"container1\");\n    Assert.assertTrue(\"container certificate not generated\",\n                      new File(secDir, \"container1.crt\").exists());\n  }", "signature": "void testContainerCertificateGeneration()", "full_signature": "@Test public void testContainerCertificateGeneration()", "class_method_signature": "TestCertificateManager.testContainerCertificateGeneration()", "testcase": true, "constructor": false, "invocations": ["generateContainerCertificate", "assertTrue", "exists"]}, "focal_class": {"identifier": "CertificateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(CertificateManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(CertificateManager.class)", "var_name": "LOG"}, {"original_string": "private static final String GEN_SRVR_KEY = \"openssl genrsa -des3 \" +\n      \"-passout pass:{0} -out {1}\" + File.separator + \"{2} 4096 \";", "modifier": "private static final", "type": "String", "declarator": "GEN_SRVR_KEY = \"openssl genrsa -des3 \" +\n      \"-passout pass:{0} -out {1}\" + File.separator + \"{2} 4096 \"", "var_name": "GEN_SRVR_KEY"}, {"original_string": "private static final String GEN_SRVR_REQ = \"openssl req -passin pass:{0} \" +\n      \"-new -key {1}\" + File.separator + \"{2} -out {1}\" + File.separator +\n      \"{5} -config {1}\" + File.separator + \"ca.config \" +\n      \"-subj {6} -batch\";", "modifier": "private static final", "type": "String", "declarator": "GEN_SRVR_REQ = \"openssl req -passin pass:{0} \" +\n      \"-new -key {1}\" + File.separator + \"{2} -out {1}\" + File.separator +\n      \"{5} -config {1}\" + File.separator + \"ca.config \" +\n      \"-subj {6} -batch\"", "var_name": "GEN_SRVR_REQ"}, {"original_string": "private static final String SIGN_SRVR_CRT = \"openssl ca -create_serial \" +\n    \"-out {1}\" + File.separator + \"{3} -days 365 -keyfile {1}\" + File.separator\n    + \"{2} -key {0} -selfsign -extensions jdk7_ca -config {1}\" + File.separator\n    + \"ca.config -batch -infiles {1}\" + File.separator + \"{5}\";", "modifier": "private static final", "type": "String", "declarator": "SIGN_SRVR_CRT = \"openssl ca -create_serial \" +\n    \"-out {1}\" + File.separator + \"{3} -days 365 -keyfile {1}\" + File.separator\n    + \"{2} -key {0} -selfsign -extensions jdk7_ca -config {1}\" + File.separator\n    + \"ca.config -batch -infiles {1}\" + File.separator + \"{5}\"", "var_name": "SIGN_SRVR_CRT"}, {"original_string": "private static final String EXPRT_KSTR = \"openssl pkcs12 -export\" +\n      \" -in {2}\" + File.separator + \"{4} -inkey {2}\" + File.separator +\n      \"{3} -certfile {2}\" + File.separator + \"{4} -out {2}\" + File.separator +\n      \"{5} -password pass:{1} -passin pass:{0} \\n\";", "modifier": "private static final", "type": "String", "declarator": "EXPRT_KSTR = \"openssl pkcs12 -export\" +\n      \" -in {2}\" + File.separator + \"{4} -inkey {2}\" + File.separator +\n      \"{3} -certfile {2}\" + File.separator + \"{4} -out {2}\" + File.separator +\n      \"{5} -password pass:{1} -passin pass:{0} \\n\"", "var_name": "EXPRT_KSTR"}, {"original_string": "private static final String REVOKE_AGENT_CRT = \"openssl ca \" +\n      \"-config {0}\" + File.separator + \"ca.config -keyfile {0}\" +\n      File.separator + \"{4} -revoke {0}\" + File.separator + \"{2} -batch \" +\n      \"-passin pass:{3} -cert {0}\" + File.separator + \"{5}\";", "modifier": "private static final", "type": "String", "declarator": "REVOKE_AGENT_CRT = \"openssl ca \" +\n      \"-config {0}\" + File.separator + \"ca.config -keyfile {0}\" +\n      File.separator + \"{4} -revoke {0}\" + File.separator + \"{2} -batch \" +\n      \"-passin pass:{3} -cert {0}\" + File.separator + \"{5}\"", "var_name": "REVOKE_AGENT_CRT"}, {"original_string": "private static final String SIGN_AGENT_CRT = \"openssl ca -config \" +\n      \"{0}\" + File.separator + \"ca.config -in {0}\" + File.separator +\n      \"{1} -out {0}\" + File.separator + \"{2} -batch -passin pass:{3} \" +\n      \"-keyfile {0}\" + File.separator + \"{4} -cert {0}\" + File.separator + \"{5}\";", "modifier": "private static final", "type": "String", "declarator": "SIGN_AGENT_CRT = \"openssl ca -config \" +\n      \"{0}\" + File.separator + \"ca.config -in {0}\" + File.separator +\n      \"{1} -out {0}\" + File.separator + \"{2} -batch -passin pass:{3} \" +\n      \"-keyfile {0}\" + File.separator + \"{4} -cert {0}\" + File.separator + \"{5}\"", "var_name": "SIGN_AGENT_CRT"}, {"original_string": "private static final String GEN_AGENT_KEY=\"openssl req -new -newkey \" +\n      \"rsa:1024 -nodes -keyout {0}\" + File.separator +\n      \"{2}.key -subj {1} -out {0}\" + File.separator + \"{2}.csr \" +\n      \"-config {3}\" + File.separator + \"ca.config \";", "modifier": "private static final", "type": "String", "declarator": "GEN_AGENT_KEY=\"openssl req -new -newkey \" +\n      \"rsa:1024 -nodes -keyout {0}\" + File.separator +\n      \"{2}.key -subj {1} -out {0}\" + File.separator + \"{2}.csr \" +\n      \"-config {3}\" + File.separator + \"ca.config \"", "var_name": "GEN_AGENT_KEY"}, {"original_string": "private String passphrase;", "modifier": "private", "type": "String", "declarator": "passphrase", "var_name": "passphrase"}, {"original_string": "private String applicationName;", "modifier": "private", "type": "String", "declarator": "applicationName", "var_name": "applicationName"}], "methods": [{"identifier": "initialize", "parameters": "(MapOperations compOperations)", "modifiers": "public", "return": "void", "signature": "void initialize(MapOperations compOperations)", "full_signature": "public void initialize(MapOperations compOperations)", "class_method_signature": "CertificateManager.initialize(MapOperations compOperations)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(MapOperations compOperations,\n                         String hostname, String containerId,\n                         String appName)", "modifiers": "public", "return": "void", "signature": "void initialize(MapOperations compOperations,\n                         String hostname, String containerId,\n                         String appName)", "full_signature": "public void initialize(MapOperations compOperations,\n                         String hostname, String containerId,\n                         String appName)", "class_method_signature": "CertificateManager.initialize(MapOperations compOperations,\n                         String hostname, String containerId,\n                         String appName)", "testcase": false, "constructor": false}, {"identifier": "isCertExists", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isCertExists()", "full_signature": "private boolean isCertExists()", "class_method_signature": "CertificateManager.isCertExists()", "testcase": false, "constructor": false}, {"identifier": "setPassphrase", "parameters": "(String passphrase)", "modifiers": "public", "return": "void", "signature": "void setPassphrase(String passphrase)", "full_signature": "public void setPassphrase(String passphrase)", "class_method_signature": "CertificateManager.setPassphrase(String passphrase)", "testcase": false, "constructor": false}, {"identifier": "runCommand", "parameters": "(String command)", "modifiers": "private", "return": "int", "signature": "int runCommand(String command)", "full_signature": "private int runCommand(String command)", "class_method_signature": "CertificateManager.runCommand(String command)", "testcase": false, "constructor": false}, {"identifier": "generateContainerCertificate", "parameters": "(String hostname,\n                                                        String identifier)", "modifiers": "public synchronized", "return": "void", "signature": "void generateContainerCertificate(String hostname,\n                                                        String identifier)", "full_signature": "public synchronized void generateContainerCertificate(String hostname,\n                                                        String identifier)", "class_method_signature": "CertificateManager.generateContainerCertificate(String hostname,\n                                                        String identifier)", "testcase": false, "constructor": false}, {"identifier": "generateContainerKeystore", "parameters": "(String hostname,\n                                                              String requesterId,\n                                                              String role,\n                                                              String keystorePass)", "modifiers": "public synchronized", "return": "SecurityStore", "signature": "SecurityStore generateContainerKeystore(String hostname,\n                                                              String requesterId,\n                                                              String role,\n                                                              String keystorePass)", "full_signature": "public synchronized SecurityStore generateContainerKeystore(String hostname,\n                                                              String requesterId,\n                                                              String role,\n                                                              String keystorePass)", "class_method_signature": "CertificateManager.generateContainerKeystore(String hostname,\n                                                              String requesterId,\n                                                              String role,\n                                                              String keystorePass)", "testcase": false, "constructor": false}, {"identifier": "getKeystoreFileName", "parameters": "(String containerId,\n                                            String role)", "modifiers": "private static", "return": "String", "signature": "String getKeystoreFileName(String containerId,\n                                            String role)", "full_signature": "private static String getKeystoreFileName(String containerId,\n                                            String role)", "class_method_signature": "CertificateManager.getKeystoreFileName(String containerId,\n                                            String role)", "testcase": false, "constructor": false}, {"identifier": "generateAMKeystore", "parameters": "(String hostname, String containerId)", "modifiers": "private", "return": "void", "signature": "void generateAMKeystore(String hostname, String containerId)", "full_signature": "private void generateAMKeystore(String hostname, String containerId)", "class_method_signature": "CertificateManager.generateAMKeystore(String hostname, String containerId)", "testcase": false, "constructor": false}, {"identifier": "generateContainerTruststore", "parameters": "(String containerId,\n                                                   String role,\n                                                   String truststorePass)", "modifiers": "public", "return": "SecurityStore", "signature": "SecurityStore generateContainerTruststore(String containerId,\n                                                   String role,\n                                                   String truststorePass)", "full_signature": "public SecurityStore generateContainerTruststore(String containerId,\n                                                   String role,\n                                                   String truststorePass)", "class_method_signature": "CertificateManager.generateContainerTruststore(String containerId,\n                                                   String role,\n                                                   String truststorePass)", "testcase": false, "constructor": false}, {"identifier": "getTruststoreFileName", "parameters": "(String role, String containerId)", "modifiers": "private static", "return": "String", "signature": "String getTruststoreFileName(String role, String containerId)", "full_signature": "private static String getTruststoreFileName(String role, String containerId)", "class_method_signature": "CertificateManager.getTruststoreFileName(String role, String containerId)", "testcase": false, "constructor": false}, {"identifier": "getServerCert", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServerCert()", "full_signature": "public String getServerCert()", "class_method_signature": "CertificateManager.getServerCert()", "testcase": false, "constructor": false}, {"identifier": "getServerCertficateFilePath", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File getServerCertficateFilePath()", "full_signature": "public static File getServerCertficateFilePath()", "class_method_signature": "CertificateManager.getServerCertficateFilePath()", "testcase": false, "constructor": false}, {"identifier": "getAgentCertficateFilePath", "parameters": "(String containerId)", "modifiers": "public static", "return": "File", "signature": "File getAgentCertficateFilePath(String containerId)", "full_signature": "public static File getAgentCertficateFilePath(String containerId)", "class_method_signature": "CertificateManager.getAgentCertficateFilePath(String containerId)", "testcase": false, "constructor": false}, {"identifier": "getContainerKeystoreFilePath", "parameters": "(String containerId,\n                                                  String role)", "modifiers": "public static", "return": "File", "signature": "File getContainerKeystoreFilePath(String containerId,\n                                                  String role)", "full_signature": "public static File getContainerKeystoreFilePath(String containerId,\n                                                  String role)", "class_method_signature": "CertificateManager.getContainerKeystoreFilePath(String containerId,\n                                                  String role)", "testcase": false, "constructor": false}, {"identifier": "getContainerTruststoreFilePath", "parameters": "(String role,\n                                                    String containerId)", "modifiers": "public static", "return": "File", "signature": "File getContainerTruststoreFilePath(String role,\n                                                    String containerId)", "full_signature": "public static File getContainerTruststoreFilePath(String role,\n                                                    String containerId)", "class_method_signature": "CertificateManager.getContainerTruststoreFilePath(String role,\n                                                    String containerId)", "testcase": false, "constructor": false}, {"identifier": "getAgentKeyFilePath", "parameters": "(String containerId)", "modifiers": "public static", "return": "File", "signature": "File getAgentKeyFilePath(String containerId)", "full_signature": "public static File getAgentKeyFilePath(String containerId)", "class_method_signature": "CertificateManager.getAgentKeyFilePath(String containerId)", "testcase": false, "constructor": false}, {"identifier": "signAgentCrt", "parameters": "(String agentHostname,\n                                                    String agentCrtReqContent,\n                                                    String passphraseAgent)", "modifiers": "public synchronized", "return": "SignCertResponse", "signature": "SignCertResponse signAgentCrt(String agentHostname,\n                                                    String agentCrtReqContent,\n                                                    String passphraseAgent)", "full_signature": "public synchronized SignCertResponse signAgentCrt(String agentHostname,\n                                                    String agentCrtReqContent,\n                                                    String passphraseAgent)", "class_method_signature": "CertificateManager.signAgentCrt(String agentHostname,\n                                                    String agentCrtReqContent,\n                                                    String passphraseAgent)", "testcase": false, "constructor": false}, {"identifier": "signAgentCertificate", "parameters": "(String containerId)", "modifiers": "private", "return": "String", "signature": "String signAgentCertificate(String containerId)", "full_signature": "private String signAgentCertificate(String containerId)", "class_method_signature": "CertificateManager.signAgentCertificate(String containerId)", "testcase": false, "constructor": false}, {"identifier": "getSubjectDN", "parameters": "(String hostname, String containerId,\n                              String appName)", "modifiers": "private", "return": "String", "signature": "String getSubjectDN(String hostname, String containerId,\n                              String appName)", "full_signature": "private String getSubjectDN(String hostname, String containerId,\n                              String appName)", "class_method_signature": "CertificateManager.getSubjectDN(String hostname, String containerId,\n                              String appName)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/server/services/security/CertificateManager.java"}, "focal_method": {"identifier": "generateContainerCertificate", "parameters": "(String hostname,\n                                                        String identifier)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void generateContainerCertificate(String hostname,\n                                                        String identifier) {\n    LOG.info(\"Generation of certificate for {}\", hostname);\n\n    String srvrKstrDir = SecurityUtils.getSecurityDir();\n    Object[] scriptArgs = {srvrKstrDir, getSubjectDN(hostname, identifier,\n        this.applicationName), identifier, SecurityUtils.getSecurityDir()};\n\n    try {\n      String command = MessageFormat.format(GEN_AGENT_KEY, scriptArgs);\n      runCommand(command);\n\n      signAgentCertificate(identifier);\n\n    } catch (SliderException e) {\n      LOG.error(\"Error generating the agent certificate\", e);\n    }\n  }", "signature": "void generateContainerCertificate(String hostname,\n                                                        String identifier)", "full_signature": "public synchronized void generateContainerCertificate(String hostname,\n                                                        String identifier)", "class_method_signature": "CertificateManager.generateContainerCertificate(String hostname,\n                                                        String identifier)", "testcase": false, "constructor": false, "invocations": ["info", "getSecurityDir", "getSubjectDN", "getSecurityDir", "format", "runCommand", "signAgentCertificate", "error"]}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}