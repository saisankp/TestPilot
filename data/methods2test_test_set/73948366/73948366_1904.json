{"test_class": {"identifier": "TestZpeUpdPolLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String TEST_POL_DIR  = \"./src/test/resources/upd_pol_dir/\";", "modifier": "static", "type": "String", "declarator": "TEST_POL_DIR  = \"./src/test/resources/upd_pol_dir/\"", "var_name": "TEST_POL_DIR"}, {"original_string": "static String TEST_POL_FILE = \"angler.pol\";", "modifier": "static", "type": "String", "declarator": "TEST_POL_FILE = \"angler.pol\"", "var_name": "TEST_POL_FILE"}, {"original_string": "static String TEST_POL_GOOD_FILE = \"./src/test/resources/pol_dir/angler.pol\";", "modifier": "static", "type": "String", "declarator": "TEST_POL_GOOD_FILE = \"./src/test/resources/pol_dir/angler.pol\"", "var_name": "TEST_POL_GOOD_FILE"}], "file": "clients/java/zpe/src/test/java/com/yahoo/athenz/zpe/TestZpeUpdPolLoader.java"}, "test_case": {"identifier": "testLoadFileStatusNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadFileStatusNull() {\n        ZpeUpdPolLoader loader = new ZpeUpdPolLoader(\"./noexist\");\n        ZpeUpdMonitor monitor = new ZpeUpdMonitor(loader);\n        File[] files = monitor.loadFileStatus();\n        assertNull(files);\n        loader.close();\n    }", "signature": "void testLoadFileStatusNull()", "full_signature": "@Test public void testLoadFileStatusNull()", "class_method_signature": "TestZpeUpdPolLoader.testLoadFileStatusNull()", "testcase": true, "constructor": false, "invocations": ["loadFileStatus", "assertNull", "close"]}, "focal_class": {"identifier": "ZpeUpdPolLoader", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZpeUpdPolLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZpeUpdPolLoader.class)", "var_name": "LOG"}, {"original_string": "static boolean skipPolicyDirCheck;", "modifier": "static", "type": "boolean", "declarator": "skipPolicyDirCheck", "var_name": "skipPolicyDirCheck"}, {"original_string": "static long sleepTimeMillis = -1;", "modifier": "static", "type": "long", "declarator": "sleepTimeMillis = -1", "var_name": "sleepTimeMillis"}, {"original_string": "static long cleanupTokenInterval = 600000;", "modifier": "static", "type": "long", "declarator": "cleanupTokenInterval = 600000", "var_name": "cleanupTokenInterval"}, {"original_string": "static long lastRoleTokenCleanup = System.currentTimeMillis();", "modifier": "static", "type": "long", "declarator": "lastRoleTokenCleanup = System.currentTimeMillis()", "var_name": "lastRoleTokenCleanup"}, {"original_string": "static long lastAccessTokenCleanup = System.currentTimeMillis();", "modifier": "static", "type": "long", "declarator": "lastAccessTokenCleanup = System.currentTimeMillis()", "var_name": "lastAccessTokenCleanup"}, {"original_string": "private ScheduledThreadPoolExecutor scheduledExecutorSvc = new ScheduledThreadPoolExecutor(\n            1, new ZpeThreadFactory(\"ZpeUpdPolLoader\"));", "modifier": "private", "type": "ScheduledThreadPoolExecutor", "declarator": "scheduledExecutorSvc = new ScheduledThreadPoolExecutor(\n            1, new ZpeThreadFactory(\"ZpeUpdPolLoader\"))", "var_name": "scheduledExecutorSvc"}, {"original_string": "private ZpeUpdMonitor updMonWorker;", "modifier": "private", "type": "ZpeUpdMonitor", "declarator": "updMonWorker", "var_name": "updMonWorker"}, {"original_string": "ConcurrentHashMap<String, Map<String, List<Struct>>> domStandardRoleAllowMap = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, Map<String, List<Struct>>>", "declarator": "domStandardRoleAllowMap = new ConcurrentHashMap<>()", "var_name": "domStandardRoleAllowMap"}, {"original_string": "ConcurrentHashMap<String, Map<String, List<Struct>>> domWildcardRoleAllowMap = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, Map<String, List<Struct>>>", "declarator": "domWildcardRoleAllowMap = new ConcurrentHashMap<>()", "var_name": "domWildcardRoleAllowMap"}, {"original_string": "ConcurrentHashMap<String, Map<String, List<Struct>>> domStandardRoleDenyMap = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, Map<String, List<Struct>>>", "declarator": "domStandardRoleDenyMap = new ConcurrentHashMap<>()", "var_name": "domStandardRoleDenyMap"}, {"original_string": "ConcurrentHashMap<String, Map<String, List<Struct>>> domWildcardRoleDenyMap = new ConcurrentHashMap<>();", "modifier": "", "type": "ConcurrentHashMap<String, Map<String, List<Struct>>>", "declarator": "domWildcardRoleDenyMap = new ConcurrentHashMap<>()", "var_name": "domWildcardRoleDenyMap"}, {"original_string": "static ConcurrentHashMap<String, RoleToken> roleTokenCacheMap = new ConcurrentHashMap<>();", "modifier": "static", "type": "ConcurrentHashMap<String, RoleToken>", "declarator": "roleTokenCacheMap = new ConcurrentHashMap<>()", "var_name": "roleTokenCacheMap"}, {"original_string": "static ConcurrentHashMap<String, AccessToken> accessTokenCacheMap = new ConcurrentHashMap<>();", "modifier": "static", "type": "ConcurrentHashMap<String, AccessToken>", "declarator": "accessTokenCacheMap = new ConcurrentHashMap<>()", "var_name": "accessTokenCacheMap"}, {"original_string": "private Map<String, ZpeFileStatus> fileStatusRef = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, ZpeFileStatus>", "declarator": "fileStatusRef = new ConcurrentHashMap<>()", "var_name": "fileStatusRef"}, {"original_string": "private String polDirName;", "modifier": "private", "type": "String", "declarator": "polDirName", "var_name": "polDirName"}], "methods": [{"identifier": "ZpeUpdPolLoader", "parameters": "(String dirName)", "modifiers": "", "return": "", "signature": " ZpeUpdPolLoader(String dirName)", "full_signature": "  ZpeUpdPolLoader(String dirName)", "class_method_signature": "ZpeUpdPolLoader.ZpeUpdPolLoader(String dirName)", "testcase": false, "constructor": true}, {"identifier": "getDirName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getDirName()", "full_signature": " String getDirName()", "class_method_signature": "ZpeUpdPolLoader.getDirName()", "testcase": false, "constructor": false}, {"identifier": "getFileStatusMap", "parameters": "()", "modifiers": "", "return": "Map<String, ZpeFileStatus>", "signature": "Map<String, ZpeFileStatus> getFileStatusMap()", "full_signature": " Map<String, ZpeFileStatus> getFileStatusMap()", "class_method_signature": "ZpeUpdPolLoader.getFileStatusMap()", "testcase": false, "constructor": false}, {"identifier": "getWildcardRoleAllowMap", "parameters": "(String domainName)", "modifiers": "public", "return": "Map<String, List<Struct>>", "signature": "Map<String, List<Struct>> getWildcardRoleAllowMap(String domainName)", "full_signature": "public Map<String, List<Struct>> getWildcardRoleAllowMap(String domainName)", "class_method_signature": "ZpeUpdPolLoader.getWildcardRoleAllowMap(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getStandardRoleAllowMap", "parameters": "(String domainName)", "modifiers": "public", "return": "Map<String, List<Struct>>", "signature": "Map<String, List<Struct>> getStandardRoleAllowMap(String domainName)", "full_signature": "public Map<String, List<Struct>> getStandardRoleAllowMap(String domainName)", "class_method_signature": "ZpeUpdPolLoader.getStandardRoleAllowMap(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getWildcardRoleDenyMap", "parameters": "(String domainName)", "modifiers": "public", "return": "Map<String, List<Struct>>", "signature": "Map<String, List<Struct>> getWildcardRoleDenyMap(String domainName)", "full_signature": "public Map<String, List<Struct>> getWildcardRoleDenyMap(String domainName)", "class_method_signature": "ZpeUpdPolLoader.getWildcardRoleDenyMap(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getStandardRoleDenyMap", "parameters": "(String domainName)", "modifiers": "public", "return": "Map<String, List<Struct>>", "signature": "Map<String, List<Struct>> getStandardRoleDenyMap(String domainName)", "full_signature": "public Map<String, List<Struct>> getStandardRoleDenyMap(String domainName)", "class_method_signature": "ZpeUpdPolLoader.getStandardRoleDenyMap(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getRoleTokenCacheMap", "parameters": "()", "modifiers": "static public", "return": "Map<String, RoleToken>", "signature": "Map<String, RoleToken> getRoleTokenCacheMap()", "full_signature": "static public Map<String, RoleToken> getRoleTokenCacheMap()", "class_method_signature": "ZpeUpdPolLoader.getRoleTokenCacheMap()", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenCacheMap", "parameters": "()", "modifiers": "static public", "return": "Map<String, AccessToken>", "signature": "Map<String, AccessToken> getAccessTokenCacheMap()", "full_signature": "static public Map<String, AccessToken> getAccessTokenCacheMap()", "class_method_signature": "ZpeUpdPolLoader.getAccessTokenCacheMap()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "ZpeUpdPolLoader.start()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ZpeUpdPolLoader.close()", "testcase": false, "constructor": false}, {"identifier": "cleanupRoleTokenCache", "parameters": "()", "modifiers": "static public", "return": "void", "signature": "void cleanupRoleTokenCache()", "full_signature": "static public void cleanupRoleTokenCache()", "class_method_signature": "ZpeUpdPolLoader.cleanupRoleTokenCache()", "testcase": false, "constructor": false}, {"identifier": "cleanupAccessTokenCache", "parameters": "()", "modifiers": "static public", "return": "void", "signature": "void cleanupAccessTokenCache()", "full_signature": "static public void cleanupAccessTokenCache()", "class_method_signature": "ZpeUpdPolLoader.cleanupAccessTokenCache()", "testcase": false, "constructor": false}, {"identifier": "loadDb", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadDb()", "full_signature": " void loadDb()", "class_method_signature": "ZpeUpdPolLoader.loadDb()", "testcase": false, "constructor": false}, {"identifier": "loadDb", "parameters": "(File []polFileNames)", "modifiers": "", "return": "void", "signature": "void loadDb(File []polFileNames)", "full_signature": " void loadDb(File []polFileNames)", "class_method_signature": "ZpeUpdPolLoader.loadDb(File []polFileNames)", "testcase": false, "constructor": false}, {"identifier": "getMatchObject", "parameters": "(String value)", "modifiers": "", "return": "ZpeMatch", "signature": "ZpeMatch getMatchObject(String value)", "full_signature": " ZpeMatch getMatchObject(String value)", "class_method_signature": "ZpeUpdPolLoader.getMatchObject(String value)", "testcase": false, "constructor": false}, {"identifier": "loadFile", "parameters": "(File polFile)", "modifiers": "private", "return": "void", "signature": "void loadFile(File polFile)", "full_signature": "private void loadFile(File polFile)", "class_method_signature": "ZpeUpdPolLoader.loadFile(File polFile)", "testcase": false, "constructor": false}], "file": "clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/ZpeUpdPolLoader.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        if (updMonWorker != null) {\n            updMonWorker.cancel();\n        }\n        scheduledExecutorSvc.shutdownNow();\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ZpeUpdPolLoader.close()", "testcase": false, "constructor": false, "invocations": ["cancel", "shutdownNow"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}