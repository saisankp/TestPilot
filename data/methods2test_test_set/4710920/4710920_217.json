{"test_class": {"identifier": "RmiProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "int availablePort = NetUtils.getAvailablePort();", "modifier": "", "type": "int", "declarator": "availablePort = NetUtils.getAvailablePort()", "var_name": "availablePort"}], "file": "dubbo-rpc/dubbo-rpc-rmi/src/test/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocolTest.java"}, "test_case": {"identifier": "testRmiProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRmiProtocol() throws Exception {\n        {\n            DemoService service = new DemoServiceImpl();\n            Exporter<?> rpcExporter = protocol.export(proxy.getInvoker(service, DemoService.class, URL.valueOf(\"rmi://127.0.0.1:\" + availablePort + \"/TestService\")));\n\n            service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(\"rmi://127.0.0.1:\" + availablePort + \"/TestService\")));\n            assertEquals(service.getSize(null), -1);\n            assertEquals(service.getSize(new String[]{\"\", \"\", \"\"}), 3);\n            Object result = service.invoke(\"rmi://127.0.0.1:\" + availablePort + \"/TestService\", \"invoke\");\n            assertEquals(\"rmi://127.0.0.1:\" + availablePort + \"/TestService:invoke\", result);\n\n            rpcExporter.unexport();\n        }\n\n        {\n            int port = NetUtils.getAvailablePort();\n            RemoteService remoteService = new RemoteServiceImpl();\n            Exporter<?> rpcExporter = protocol.export(proxy.getInvoker(remoteService, RemoteService.class, URL.valueOf(\"rmi://127.0.0.1:\" + port + \"/remoteService\")));\n\n            remoteService = proxy.getProxy(protocol.refer(RemoteService.class, URL.valueOf(\"rmi://127.0.0.1:\" + port + \"/remoteService\")));\n            remoteService.getThreadName();\n            for (int i = 0; i < 100; i++) {\n                String say = remoteService.sayHello(\"abcd\");\n                assertEquals(\"hello abcd@\" + RemoteServiceImpl.class.getName(), say);\n            }\n            rpcExporter.unexport();\n        }\n    }", "signature": "void testRmiProtocol()", "full_signature": "@Test public void testRmiProtocol()", "class_method_signature": "RmiProtocolTest.testRmiProtocol()", "testcase": true, "constructor": false, "invocations": ["export", "getInvoker", "valueOf", "getProxy", "refer", "valueOf", "assertEquals", "getSize", "assertEquals", "getSize", "invoke", "assertEquals", "unexport", "getAvailablePort", "export", "getInvoker", "valueOf", "getProxy", "refer", "valueOf", "getThreadName", "sayHello", "assertEquals", "getName", "unexport"]}, "focal_class": {"identifier": "RmiProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_PORT = 1099;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 1099", "var_name": "DEFAULT_PORT"}], "methods": [{"identifier": "RmiProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " RmiProtocol()", "full_signature": "public  RmiProtocol()", "class_method_signature": "RmiProtocol.RmiProtocol()", "testcase": false, "constructor": true}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "RmiProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(final T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(final T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(final T impl, Class<T> type, URL url)", "class_method_signature": "RmiProtocol.doExport(final T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(final Class<T> serviceType, final URL url)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T doRefer(final Class<T> serviceType, final URL url)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected T doRefer(final Class<T> serviceType, final URL url)", "class_method_signature": "RmiProtocol.doRefer(final Class<T> serviceType, final URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "RmiProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "createExporter", "parameters": "(T impl, Class<?> type, URL url, boolean isGeneric)", "modifiers": "private", "return": "RmiServiceExporter", "signature": "RmiServiceExporter createExporter(T impl, Class<?> type, URL url, boolean isGeneric)", "full_signature": "private RmiServiceExporter createExporter(T impl, Class<?> type, URL url, boolean isGeneric)", "class_method_signature": "RmiProtocol.createExporter(T impl, Class<?> type, URL url, boolean isGeneric)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-rmi/src/main/java/org/apache/dubbo/rpc/protocol/rmi/RmiProtocol.java"}, "focal_method": {"identifier": "RmiProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public RmiProtocol() {\n        super(RemoteAccessException.class, RemoteException.class);\n    }", "signature": " RmiProtocol()", "full_signature": "public  RmiProtocol()", "class_method_signature": "RmiProtocol.RmiProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}