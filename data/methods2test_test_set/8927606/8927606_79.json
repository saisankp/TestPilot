{"test_class": {"identifier": "HttpSenderTest", "superclass": "extends HttpSenderTestBase<HttpSender>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/http/HttpSenderTest.java"}, "test_case": {"identifier": "testContentType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testContentType() throws Throwable {\n\t\tHttpSender sender = getSender(false); //Cannot add headers (aka parameters) for this test!\n\t\tsender.setContentType(\"text/xml\");\n\t\tsender.configure();\n\t\tassertEquals(\"text/xml; charset=UTF-8\", sender.getFullContentType().toString());\n\t}", "signature": "void testContentType()", "full_signature": "@Test public void testContentType()", "class_method_signature": "HttpSenderTest.testContentType()", "testcase": true, "constructor": false, "invocations": ["getSender", "setContentType", "configure", "assertEquals", "toString", "getFullContentType"]}, "focal_class": {"identifier": "HttpSender", "superclass": "extends HttpSenderBase", "interfaces": "", "fields": [{"original_string": "private String streamResultToFileNameSessionKey = null;", "modifier": "private", "type": "String", "declarator": "streamResultToFileNameSessionKey = null", "var_name": "streamResultToFileNameSessionKey"}, {"original_string": "private String storeResultAsStreamInSessionKey;", "modifier": "private", "type": "String", "declarator": "storeResultAsStreamInSessionKey", "var_name": "storeResultAsStreamInSessionKey"}, {"original_string": "private String storeResultAsByteArrayInSessionKey;", "modifier": "private", "type": "String", "declarator": "storeResultAsByteArrayInSessionKey", "var_name": "storeResultAsByteArrayInSessionKey"}, {"original_string": "private boolean base64=false;", "modifier": "private", "type": "boolean", "declarator": "base64=false", "var_name": "base64"}, {"original_string": "private boolean streamResultToServlet=false;", "modifier": "private", "type": "boolean", "declarator": "streamResultToServlet=false", "var_name": "streamResultToServlet"}, {"original_string": "private boolean paramsInUrl=true;", "modifier": "private", "type": "boolean", "declarator": "paramsInUrl=true", "var_name": "paramsInUrl"}, {"original_string": "private boolean ignoreRedirects=false;", "modifier": "private", "type": "boolean", "declarator": "ignoreRedirects=false", "var_name": "ignoreRedirects"}, {"original_string": "private String inputMessageParam=null;", "modifier": "private", "type": "String", "declarator": "inputMessageParam=null", "var_name": "inputMessageParam"}, {"original_string": "private boolean multipartResponse=false;", "modifier": "private", "type": "boolean", "declarator": "multipartResponse=false", "var_name": "multipartResponse"}, {"original_string": "private String multipartXmlSessionKey;", "modifier": "private", "type": "String", "declarator": "multipartXmlSessionKey", "var_name": "multipartXmlSessionKey"}, {"original_string": "private String mtomContentTransferEncoding = null;", "modifier": "private", "type": "String", "declarator": "mtomContentTransferEncoding = null", "var_name": "mtomContentTransferEncoding"}, {"original_string": "private boolean encodeMessages = false;", "modifier": "private", "type": "boolean", "declarator": "encodeMessages = false", "var_name": "encodeMessages"}, {"original_string": "private PostType postType = PostType.RAW;", "modifier": "private", "type": "PostType", "declarator": "postType = PostType.RAW", "var_name": "postType"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "HttpSender.configure()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(URI url, Message message, ParameterValueList parameters, IPipeLineSession session)", "modifiers": "@Override protected", "return": "HttpRequestBase", "signature": "HttpRequestBase getMethod(URI url, Message message, ParameterValueList parameters, IPipeLineSession session)", "full_signature": "@Override protected HttpRequestBase getMethod(URI url, Message message, ParameterValueList parameters, IPipeLineSession session)", "class_method_signature": "HttpSender.getMethod(URI url, Message message, ParameterValueList parameters, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "encodeQueryParameters", "parameters": "(URI url)", "modifiers": "private", "return": "URI", "signature": "URI encodeQueryParameters(URI url)", "full_signature": "private URI encodeQueryParameters(URI url)", "class_method_signature": "HttpSender.encodeQueryParameters(URI url)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(URI uri, Message message, ParameterValueList parameters)", "modifiers": "protected", "return": "HttpRequestBase", "signature": "HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters)", "full_signature": "protected HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters)", "class_method_signature": "HttpSender.getMethod(URI uri, Message message, ParameterValueList parameters)", "testcase": false, "constructor": false}, {"identifier": "getMultipartPostMethodWithParamsInBody", "parameters": "(URI uri, String message, ParameterValueList parameters, IPipeLineSession session)", "modifiers": "protected", "return": "HttpPost", "signature": "HttpPost getMultipartPostMethodWithParamsInBody(URI uri, String message, ParameterValueList parameters, IPipeLineSession session)", "full_signature": "protected HttpPost getMultipartPostMethodWithParamsInBody(URI uri, String message, ParameterValueList parameters, IPipeLineSession session)", "class_method_signature": "HttpSender.getMultipartPostMethodWithParamsInBody(URI uri, String message, ParameterValueList parameters, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "createMultipartBodypart", "parameters": "(String name, String message)", "modifiers": "protected", "return": "FormBodyPart", "signature": "FormBodyPart createMultipartBodypart(String name, String message)", "full_signature": "protected FormBodyPart createMultipartBodypart(String name, String message)", "class_method_signature": "HttpSender.createMultipartBodypart(String name, String message)", "testcase": false, "constructor": false}, {"identifier": "createMultipartBodypart", "parameters": "(String name, String message, String contentType)", "modifiers": "protected", "return": "FormBodyPart", "signature": "FormBodyPart createMultipartBodypart(String name, String message, String contentType)", "full_signature": "protected FormBodyPart createMultipartBodypart(String name, String message, String contentType)", "class_method_signature": "HttpSender.createMultipartBodypart(String name, String message, String contentType)", "testcase": false, "constructor": false}, {"identifier": "createMultipartBodypart", "parameters": "(String name, InputStream is, String fileName)", "modifiers": "protected", "return": "FormBodyPart", "signature": "FormBodyPart createMultipartBodypart(String name, InputStream is, String fileName)", "full_signature": "protected FormBodyPart createMultipartBodypart(String name, InputStream is, String fileName)", "class_method_signature": "HttpSender.createMultipartBodypart(String name, InputStream is, String fileName)", "testcase": false, "constructor": false}, {"identifier": "createMultipartBodypart", "parameters": "(String name, InputStream is, String fileName, String contentType)", "modifiers": "protected", "return": "FormBodyPart", "signature": "FormBodyPart createMultipartBodypart(String name, InputStream is, String fileName, String contentType)", "full_signature": "protected FormBodyPart createMultipartBodypart(String name, InputStream is, String fileName, String contentType)", "class_method_signature": "HttpSender.createMultipartBodypart(String name, InputStream is, String fileName, String contentType)", "testcase": false, "constructor": false}, {"identifier": "createMultiPartEntity", "parameters": "(String message, ParameterValueList parameters, IPipeLineSession session)", "modifiers": "protected", "return": "HttpEntity", "signature": "HttpEntity createMultiPartEntity(String message, ParameterValueList parameters, IPipeLineSession session)", "full_signature": "protected HttpEntity createMultiPartEntity(String message, ParameterValueList parameters, IPipeLineSession session)", "class_method_signature": "HttpSender.createMultiPartEntity(String message, ParameterValueList parameters, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "elementToFormBodyPart", "parameters": "(Element element, IPipeLineSession session)", "modifiers": "protected", "return": "FormBodyPart", "signature": "FormBodyPart elementToFormBodyPart(Element element, IPipeLineSession session)", "full_signature": "protected FormBodyPart elementToFormBodyPart(Element element, IPipeLineSession session)", "class_method_signature": "HttpSender.elementToFormBodyPart(Element element, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "extractResult", "parameters": "(HttpResponseHandler responseHandler, IPipeLineSession session)", "modifiers": "@Override protected", "return": "Message", "signature": "Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "full_signature": "@Override protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "class_method_signature": "HttpSender.extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "getResponseBodyAsString", "parameters": "(HttpResponseHandler responseHandler)", "modifiers": "public", "return": "String", "signature": "String getResponseBodyAsString(HttpResponseHandler responseHandler)", "full_signature": "public String getResponseBodyAsString(HttpResponseHandler responseHandler)", "class_method_signature": "HttpSender.getResponseBodyAsString(HttpResponseHandler responseHandler)", "testcase": false, "constructor": false}, {"identifier": "getResponseBodyAsBase64", "parameters": "(InputStream is)", "modifiers": "public", "return": "Message", "signature": "Message getResponseBodyAsBase64(InputStream is)", "full_signature": "public Message getResponseBodyAsBase64(InputStream is)", "class_method_signature": "HttpSender.getResponseBodyAsBase64(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "handleMultipartResponse", "parameters": "(HttpResponseHandler httpHandler, IPipeLineSession session)", "modifiers": "public static", "return": "Message", "signature": "Message handleMultipartResponse(HttpResponseHandler httpHandler, IPipeLineSession session)", "full_signature": "public static Message handleMultipartResponse(HttpResponseHandler httpHandler, IPipeLineSession session)", "class_method_signature": "HttpSender.handleMultipartResponse(HttpResponseHandler httpHandler, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "handleMultipartResponse", "parameters": "(String mimeType, InputStream inputStream, IPipeLineSession session, HttpResponseHandler httpHandler)", "modifiers": "public static", "return": "Message", "signature": "Message handleMultipartResponse(String mimeType, InputStream inputStream, IPipeLineSession session, HttpResponseHandler httpHandler)", "full_signature": "public static Message handleMultipartResponse(String mimeType, InputStream inputStream, IPipeLineSession session, HttpResponseHandler httpHandler)", "class_method_signature": "HttpSender.handleMultipartResponse(String mimeType, InputStream inputStream, IPipeLineSession session, HttpResponseHandler httpHandler)", "testcase": false, "constructor": false}, {"identifier": "streamResponseBody", "parameters": "(HttpResponseHandler responseHandler, HttpServletResponse response)", "modifiers": "public", "return": "void", "signature": "void streamResponseBody(HttpResponseHandler responseHandler, HttpServletResponse response)", "full_signature": "public void streamResponseBody(HttpResponseHandler responseHandler, HttpServletResponse response)", "class_method_signature": "HttpSender.streamResponseBody(HttpResponseHandler responseHandler, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "streamResponseBody", "parameters": "(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix)", "modifiers": "public static", "return": "void", "signature": "void streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix)", "full_signature": "public static void streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix)", "class_method_signature": "HttpSender.streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix)", "testcase": false, "constructor": false}, {"identifier": "streamResponseBody", "parameters": "(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix, String redirectLocation)", "modifiers": "public static", "return": "void", "signature": "void streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix, String redirectLocation)", "full_signature": "public static void streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix, String redirectLocation)", "class_method_signature": "HttpSender.streamResponseBody(InputStream is, String contentType,\n\t\t\tString contentDisposition, HttpServletResponse response,\n\t\t\tLogger log, String logPrefix, String redirectLocation)", "testcase": false, "constructor": false}, {"identifier": "setPostType", "parameters": "(String type)", "modifiers": "@IbisDoc({\"When false and <code>methodeType=POST</code> the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM]\", \"RAW\"}) public", "return": "void", "signature": "void setPostType(String type)", "full_signature": "@IbisDoc({\"When false and <code>methodeType=POST</code> the type of post request, must be one of [RAW (text/xml/json), BINARY (file), URLENCODED, FORMDATA, MTOM]\", \"RAW\"}) public void setPostType(String type)", "class_method_signature": "HttpSender.setPostType(String type)", "testcase": false, "constructor": false}, {"identifier": "setParamsInUrl", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"When false and <code>methodeType=POST</code>, request parameters are put in the request body instead of in the url\", \"true\"}) public", "return": "void", "signature": "void setParamsInUrl(boolean b)", "full_signature": "@IbisDoc({\"When false and <code>methodeType=POST</code>, request parameters are put in the request body instead of in the url\", \"true\"}) public void setParamsInUrl(boolean b)", "class_method_signature": "HttpSender.setParamsInUrl(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isParamsInUrl", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParamsInUrl()", "full_signature": "public boolean isParamsInUrl()", "class_method_signature": "HttpSender.isParamsInUrl()", "testcase": false, "constructor": false}, {"identifier": "setInputMessageParam", "parameters": "(String inputMessageParam)", "modifiers": "@IbisDoc({\"(Only used when <code>methodeType=POST</code> and <code>paramsInUrl=false</code>) Name of the request parameter which is used to put the input message in\", \"\"}) public", "return": "void", "signature": "void setInputMessageParam(String inputMessageParam)", "full_signature": "@IbisDoc({\"(Only used when <code>methodeType=POST</code> and <code>paramsInUrl=false</code>) Name of the request parameter which is used to put the input message in\", \"\"}) public void setInputMessageParam(String inputMessageParam)", "class_method_signature": "HttpSender.setInputMessageParam(String inputMessageParam)", "testcase": false, "constructor": false}, {"identifier": "getInputMessageParam", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInputMessageParam()", "full_signature": "public String getInputMessageParam()", "class_method_signature": "HttpSender.getInputMessageParam()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreRedirects", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful\", \"false\"}) public", "return": "void", "signature": "void setIgnoreRedirects(boolean b)", "full_signature": "@IbisDoc({\"When true, besides http status code 200 (OK) also the code 301 (MOVED_PERMANENTLY), 302 (MOVED_TEMPORARILY) and 307 (TEMPORARY_REDIRECT) are considered successful\", \"false\"}) public void setIgnoreRedirects(boolean b)", "class_method_signature": "HttpSender.setIgnoreRedirects(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreRedirects", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreRedirects()", "full_signature": "public boolean isIgnoreRedirects()", "class_method_signature": "HttpSender.isIgnoreRedirects()", "testcase": false, "constructor": false}, {"identifier": "getStreamResultToFileNameSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStreamResultToFileNameSessionKey()", "full_signature": "public String getStreamResultToFileNameSessionKey()", "class_method_signature": "HttpSender.getStreamResultToFileNameSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setStreamResultToFileNameSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"}) public", "return": "void", "signature": "void setStreamResultToFileNameSessionKey(String string)", "full_signature": "@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"}) public void setStreamResultToFileNameSessionKey(String string)", "class_method_signature": "HttpSender.setStreamResultToFileNameSessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "getStoreResultAsStreamInSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStoreResultAsStreamInSessionKey()", "full_signature": "public String getStoreResultAsStreamInSessionKey()", "class_method_signature": "HttpSender.getStoreResultAsStreamInSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setStoreResultAsStreamInSessionKey", "parameters": "(String storeResultAsStreamInSessionKey)", "modifiers": "@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"}) public", "return": "void", "signature": "void setStoreResultAsStreamInSessionKey(String storeResultAsStreamInSessionKey)", "full_signature": "@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"}) public void setStoreResultAsStreamInSessionKey(String storeResultAsStreamInSessionKey)", "class_method_signature": "HttpSender.setStoreResultAsStreamInSessionKey(String storeResultAsStreamInSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getStoreResultAsByteArrayInSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStoreResultAsByteArrayInSessionKey()", "full_signature": "public String getStoreResultAsByteArrayInSessionKey()", "class_method_signature": "HttpSender.getStoreResultAsByteArrayInSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setStoreResultAsByteArrayInSessionKey", "parameters": "(String storeResultAsByteArrayInSessionKey)", "modifiers": "public", "return": "void", "signature": "void setStoreResultAsByteArrayInSessionKey(String storeResultAsByteArrayInSessionKey)", "full_signature": "public void setStoreResultAsByteArrayInSessionKey(String storeResultAsByteArrayInSessionKey)", "class_method_signature": "HttpSender.setStoreResultAsByteArrayInSessionKey(String storeResultAsByteArrayInSessionKey)", "testcase": false, "constructor": false}, {"identifier": "setBase64", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when true, the result is base64 encoded\", \"false\"}) public", "return": "void", "signature": "void setBase64(boolean b)", "full_signature": "@IbisDoc({\"when true, the result is base64 encoded\", \"false\"}) public void setBase64(boolean b)", "class_method_signature": "HttpSender.setBase64(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isBase64", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBase64()", "full_signature": "public boolean isBase64()", "class_method_signature": "HttpSender.isBase64()", "testcase": false, "constructor": false}, {"identifier": "setStreamResultToServlet", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string)\", \"false\"}) public", "return": "void", "signature": "void setStreamResultToServlet(boolean b)", "full_signature": "@IbisDoc({\"if set, the result is streamed to the httpservletresponse object of the restservicedispatcher (instead of passed as a string)\", \"false\"}) public void setStreamResultToServlet(boolean b)", "class_method_signature": "HttpSender.setStreamResultToServlet(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isStreamResultToServlet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStreamResultToServlet()", "full_signature": "public boolean isStreamResultToServlet()", "class_method_signature": "HttpSender.isStreamResultToServlet()", "testcase": false, "constructor": false}, {"identifier": "setMultipart", "parameters": "(boolean b)", "modifiers": "@Deprecated @ConfigurationWarning(\"multipart has been replaced by postType='formdata'\") @IbisDoc({\"when true and <code>methodetype=post</code> and <code>paramsinurl=false</code>, request parameters are put in a multipart/form-data entity instead of in the request body\", \"false\"}) public", "return": "void", "signature": "void setMultipart(boolean b)", "full_signature": "@Deprecated @ConfigurationWarning(\"multipart has been replaced by postType='formdata'\") @IbisDoc({\"when true and <code>methodetype=post</code> and <code>paramsinurl=false</code>, request parameters are put in a multipart/form-data entity instead of in the request body\", \"false\"}) public void setMultipart(boolean b)", "class_method_signature": "HttpSender.setMultipart(boolean b)", "testcase": false, "constructor": false}, {"identifier": "setMultipartResponse", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also <a href=\\\"https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html\\\">https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html</a>). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read.\", \"false\"}) public", "return": "void", "signature": "void setMultipartResponse(boolean b)", "full_signature": "@IbisDoc({\"when true the response body is expected to be in mime multipart which is the case when a soap message with attachments is received (see also <a href=\\\"https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html\\\">https://docs.oracle.com/javaee/7/api/javax/xml/soap/soapmessage.html</a>). the first part will be returned as result of this sender. other parts are returned as streams in sessionkeys with names multipart1, multipart2, etc. the http connection is held open until the last stream is read.\", \"false\"}) public void setMultipartResponse(boolean b)", "class_method_signature": "HttpSender.setMultipartResponse(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isMultipartResponse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMultipartResponse()", "full_signature": "public boolean isMultipartResponse()", "class_method_signature": "HttpSender.isMultipartResponse()", "testcase": false, "constructor": false}, {"identifier": "setMultipartXmlSessionKey", "parameters": "(String multipartXmlSessionKey)", "modifiers": "@IbisDoc({\"if set and <code>methodetype=post</code> and <code>paramsinurl=false</code>, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created\", \"\"}) public", "return": "void", "signature": "void setMultipartXmlSessionKey(String multipartXmlSessionKey)", "full_signature": "@IbisDoc({\"if set and <code>methodetype=post</code> and <code>paramsinurl=false</code>, a multipart/form-data entity is created instead of a request body. for each part element in the session key a part in the multipart entity is created\", \"\"}) public void setMultipartXmlSessionKey(String multipartXmlSessionKey)", "class_method_signature": "HttpSender.setMultipartXmlSessionKey(String multipartXmlSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getMultipartXmlSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMultipartXmlSessionKey()", "full_signature": "public String getMultipartXmlSessionKey()", "class_method_signature": "HttpSender.getMultipartXmlSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setMtomEnabled", "parameters": "(boolean b)", "modifiers": "@Deprecated @ConfigurationWarning(\"mtomEnabled has been replaced by postType='mtom'\") public", "return": "void", "signature": "void setMtomEnabled(boolean b)", "full_signature": "@Deprecated @ConfigurationWarning(\"mtomEnabled has been replaced by postType='mtom'\") public void setMtomEnabled(boolean b)", "class_method_signature": "HttpSender.setMtomEnabled(boolean b)", "testcase": false, "constructor": false}, {"identifier": "getMtomContentTransferEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMtomContentTransferEncoding()", "full_signature": "public String getMtomContentTransferEncoding()", "class_method_signature": "HttpSender.getMtomContentTransferEncoding()", "testcase": false, "constructor": false}, {"identifier": "setMtomContentTransferEncoding", "parameters": "(String mtomContentTransferEncoding)", "modifiers": "public", "return": "void", "signature": "void setMtomContentTransferEncoding(String mtomContentTransferEncoding)", "full_signature": "public void setMtomContentTransferEncoding(String mtomContentTransferEncoding)", "class_method_signature": "HttpSender.setMtomContentTransferEncoding(String mtomContentTransferEncoding)", "testcase": false, "constructor": false}, {"identifier": "setEncodeMessages", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"64\", \"specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc.\", \"false\"}) public", "return": "void", "signature": "void setEncodeMessages(boolean b)", "full_signature": "@IbisDoc({\"64\", \"specifies whether messages will encoded, e.g. spaces will be replaced by '+' etc.\", \"false\"}) public void setEncodeMessages(boolean b)", "class_method_signature": "HttpSender.setEncodeMessages(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isEncodeMessages", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEncodeMessages()", "full_signature": "public boolean isEncodeMessages()", "class_method_signature": "HttpSender.isEncodeMessages()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\t//For backwards compatibility we have to set the contentType to text/html on POST and PUT requests\n\t\tif(StringUtils.isEmpty(getContentType()) && (getMethodType().equals(\"POST\") || getMethodType().equals(\"PUT\"))) {\n\t\t\tsetContentType(\"text/html\");\n\t\t}\n\n\t\tsuper.configure();\n\n\t\tif (!getMethodType().equals(\"POST\")) {\n\t\t\tif (!isParamsInUrl()) {\n\t\t\t\tthrow new ConfigurationException(getLogPrefix()+\"paramsInUrl can only be set to false for methodType POST\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotEmpty(getInputMessageParam())) {\n\t\t\t\tthrow new ConfigurationException(getLogPrefix()+\"inputMessageParam can only be set for methodType POST\");\n\t\t\t}\n\t\t}\n\t}", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "HttpSender.configure()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getContentType", "equals", "getMethodType", "equals", "getMethodType", "setContentType", "configure", "equals", "getMethodType", "isParamsInUrl", "getLogPrefix", "isNotEmpty", "getInputMessageParam", "getLogPrefix"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}