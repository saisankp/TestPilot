{"test_class": {"identifier": "InsertDefinitionModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InsertDefinitionModel model;", "modifier": "private", "type": "InsertDefinitionModel", "declarator": "model", "var_name": "model"}], "file": "tiles-template/src/test/java/org/apache/tiles/template/InsertDefinitionModelTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws IOException {\n        TilesContainer container = createMock(TilesContainer.class);\n        Request request = createMock(Request.class);\n        AttributeContext attributeContext = createMock(AttributeContext.class);\n        Map<String, Object> requestScope = new HashMap<String, Object>();\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        ModelBody modelBody = createMock(ModelBody.class);\n\n        modelBody.evaluateWithoutWriting();\n        expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\n        expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\n        expect(container.startContext(request)).andReturn(attributeContext);\n        expect(container.getAttributeContext(request)).andReturn(attributeContext);\n        container.endContext(request);\n        attributeContext.setPreparer(\"myPreparer\");\n        attributeContext.setTemplateAttribute((Attribute) notNull());\n        container.render(\"myDefinitionName\", request);\n\n        replay(container, attributeContext, request, applicationContext, modelBody);\n        model.execute(\"myDefinitionName\", \"myTemplate\", \"myTemplateType\",\n                \"myTemplateExpression\", \"myRole\", \"myPreparer\",\n                false, request, modelBody);\n        verify(container, attributeContext, request, applicationContext, modelBody);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "InsertDefinitionModelTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "put", "createMock", "createMock", "evaluateWithoutWriting", "times", "andReturn", "expect", "getApplicationContext", "anyTimes", "andReturn", "expect", "getContext", "andReturn", "expect", "startContext", "andReturn", "expect", "getAttributeContext", "endContext", "setPreparer", "setTemplateAttribute", "notNull", "render", "replay", "execute", "verify"]}, "focal_class": {"identifier": "InsertDefinitionModel", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "signature": "void execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "full_signature": "public void execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "class_method_signature": "InsertDefinitionModel.execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "testcase": false, "constructor": false}, {"identifier": "renderDefinition", "parameters": "(TilesContainer container,\n            String definitionName, String template, String templateType,\n            String templateExpression, String role, String preparer,\n            boolean flush, Request request)", "modifiers": "private", "return": "void", "signature": "void renderDefinition(TilesContainer container,\n            String definitionName, String template, String templateType,\n            String templateExpression, String role, String preparer,\n            boolean flush, Request request)", "full_signature": "private void renderDefinition(TilesContainer container,\n            String definitionName, String template, String templateType,\n            String templateExpression, String role, String preparer,\n            boolean flush, Request request)", "class_method_signature": "InsertDefinitionModel.renderDefinition(TilesContainer container,\n            String definitionName, String template, String templateType,\n            String templateExpression, String role, String preparer,\n            boolean flush, Request request)", "testcase": false, "constructor": false}], "file": "tiles-template/src/main/java/org/apache/tiles/template/InsertDefinitionModel.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "modifiers": "public", "return": "void", "body": "public void execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)\n            throws IOException {\n        TilesContainer container = TilesAccess.getCurrentContainer(request);\n        container.startContext(request);\n        modelBody.evaluateWithoutWriting();\n        container = TilesAccess.getCurrentContainer(request);\n        renderDefinition(container, definitionName, template, templateType,\n                templateExpression, role, preparer, flush, request);\n    }", "signature": "void execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "full_signature": "public void execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "class_method_signature": "InsertDefinitionModel.execute(\n            @Parameter(name = \"name\", required = true) String definitionName,\n            String template, String templateType, String templateExpression,\n            String role, String preparer, boolean flush, Request request, ModelBody modelBody)", "testcase": false, "constructor": false, "invocations": ["getCurrentContainer", "startContext", "evaluateWithoutWriting", "getCurrentContainer", "renderDefinition"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}