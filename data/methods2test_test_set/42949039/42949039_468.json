{"test_class": {"identifier": "HerdJmsDestinationResolverTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    HerdJmsDestinationResolver herdJmsDestinationResolver;", "modifier": "@Autowired", "type": "HerdJmsDestinationResolver", "declarator": "herdJmsDestinationResolver", "var_name": "herdJmsDestinationResolver"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/HerdJmsDestinationResolverTest.java"}, "test_case": {"identifier": "testResolveDestinationHerdIncoming", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveDestinationHerdIncoming() throws Exception\n    {\n        Session session = mock(Session.class);\n        Queue queue = mock(Queue.class);\n\n        // Mock the call to external methods\n        when(session.createQueue(any())).thenReturn(queue);\n\n        // Call the method under test\n        Destination destination = herdJmsDestinationResolver.resolveDestinationName(session, HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, false);\n\n        assertThat(\"Destination is null.\", destination, not(nullValue()));\n\n        // Verify the calls to external methods\n        verify(session, times(1)).createQueue(any());\n    }", "signature": "void testResolveDestinationHerdIncoming()", "full_signature": "@Test public void testResolveDestinationHerdIncoming()", "class_method_signature": "HerdJmsDestinationResolverTest.testResolveDestinationHerdIncoming()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "createQueue", "any", "resolveDestinationName", "assertThat", "not", "nullValue", "createQueue", "verify", "times", "any"]}, "focal_class": {"identifier": "HerdJmsDestinationResolver", "superclass": "", "interfaces": "implements DestinationResolver", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdJmsDestinationResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdJmsDestinationResolver.class)", "var_name": "LOGGER"}, {"original_string": "public static final String SQS_DESTINATION_HERD_INCOMING = \"herd_incoming_queue\";", "modifier": "public static final", "type": "String", "declarator": "SQS_DESTINATION_HERD_INCOMING = \"herd_incoming_queue\"", "var_name": "SQS_DESTINATION_HERD_INCOMING"}, {"original_string": "public static final String SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE = \"storage_policy_selector_job_sqs_queue\";", "modifier": "public static final", "type": "String", "declarator": "SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE = \"storage_policy_selector_job_sqs_queue\"", "var_name": "SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE"}, {"original_string": "public static final String SQS_DESTINATION_SAMPLE_DATA_QUEUE = \"sample_data_queue\";", "modifier": "public static final", "type": "String", "declarator": "SQS_DESTINATION_SAMPLE_DATA_QUEUE = \"sample_data_queue\"", "var_name": "SQS_DESTINATION_SAMPLE_DATA_QUEUE"}, {"original_string": "public static final String SQS_DESTINATION_SEARCH_INDEX_UPDATE_QUEUE = \"search_index_update_queue\";", "modifier": "public static final", "type": "String", "declarator": "SQS_DESTINATION_SEARCH_INDEX_UPDATE_QUEUE = \"search_index_update_queue\"", "var_name": "SQS_DESTINATION_SEARCH_INDEX_UPDATE_QUEUE"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}], "methods": [{"identifier": "resolveDestinationName", "parameters": "(Session session, String destinationName, boolean pubSubDomain)", "modifiers": "@Override public", "return": "Destination", "signature": "Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "full_signature": "@Override public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "class_method_signature": "HerdJmsDestinationResolver.resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "testcase": false, "constructor": false}, {"identifier": "getSqsQueueName", "parameters": "(ConfigurationValue configurationValue)", "modifiers": "private", "return": "String", "signature": "String getSqsQueueName(ConfigurationValue configurationValue)", "full_signature": "private String getSqsQueueName(ConfigurationValue configurationValue)", "class_method_signature": "HerdJmsDestinationResolver.getSqsQueueName(ConfigurationValue configurationValue)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/HerdJmsDestinationResolver.java"}, "focal_method": {"identifier": "resolveDestinationName", "parameters": "(Session session, String destinationName, boolean pubSubDomain)", "modifiers": "@Override public", "return": "Destination", "body": "@Override\n    public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException\n    {\n        String sqsQueueName;\n\n        switch (destinationName)\n        {\n            case SQS_DESTINATION_HERD_INCOMING:\n                // Get the incoming SQS queue name.\n                sqsQueueName = getSqsQueueName(ConfigurationValue.HERD_NOTIFICATION_SQS_INCOMING_QUEUE_NAME);\n                break;\n            case SQS_DESTINATION_STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE:\n                // Get the storage policy selector job SQS queue name.\n                sqsQueueName = getSqsQueueName(ConfigurationValue.STORAGE_POLICY_SELECTOR_JOB_SQS_QUEUE_NAME);\n                break;\n            case SQS_DESTINATION_SAMPLE_DATA_QUEUE:\n                // Get the storage policy selector job SQS queue name.\n                sqsQueueName = getSqsQueueName(ConfigurationValue.SAMPLE_DATA_SQS_QUEUE_NAME);\n                break;\n            case SQS_DESTINATION_SEARCH_INDEX_UPDATE_QUEUE:\n                // Get the storage policy selector job SQS queue name.\n                sqsQueueName = getSqsQueueName(ConfigurationValue.SEARCH_INDEX_UPDATE_SQS_QUEUE_NAME);\n                break;\n            default:\n                LOGGER.warn(\"Failed to resolve the destination name: \\\"%s\\\".\", destinationName);\n                sqsQueueName = \"\";\n                break;\n        }\n\n        Destination destination;\n\n        try\n        {\n            destination = session.createQueue(sqsQueueName);\n        }\n        catch (Exception ex)\n        {\n            throw new IllegalStateException(String.format(\"Failed to resolve the SQS queue: \\\"%s\\\".\", sqsQueueName), ex);\n        }\n\n        return destination;\n    }", "signature": "Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "full_signature": "@Override public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "class_method_signature": "HerdJmsDestinationResolver.resolveDestinationName(Session session, String destinationName, boolean pubSubDomain)", "testcase": false, "constructor": false, "invocations": ["getSqsQueueName", "getSqsQueueName", "getSqsQueueName", "getSqsQueueName", "warn", "createQueue", "format"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}