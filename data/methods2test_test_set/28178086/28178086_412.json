{"test_class": {"identifier": "UtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/calendars/UtilitiesTest.java"}, "test_case": {"identifier": "computeJulianEasterMeanCorrections", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void computeJulianEasterMeanCorrections() {\n        // we compute the occurences of julian Easter (in gregorian dates)\n        // from 1 April to 20 Mey, from 1583 to 1583*2*532\n        // of course, that choice is arbitrary...\n        int[] prob = new int[50];\n        for (int i = 0; i < 2 * Utilities.CYCLE; ++i) {\n            Day julianEaster = Utilities.julianEaster3(1583 + i, true);\n            Day first = new Day(1583 + i, Month.April, 0);\n            prob[julianEaster.difference(first)]++;\n        }\n        // now, we compute the average length of Easter effect in the different months\n\n//        // March\n        // effect length from 1 to 30\n        double[] march = new double[30], april = new double[30], may = new double[30];\n        for (int l = 1; l <= 30; ++l) {\n            for (int ie = 0; ie < prob.length; ++ie) {\n                double p = prob[ie];\n                if (p > 0) {\n                    int d0 = ie - l, d1 = ie; // d0 is the first day of the Easter effect (included), d1 the last day (excluded)\n                    \n                    // number of days in march:\n                    int n0 = -d0;\n                    if (n0 > 0) {\n                        march[l - 1]  +=p * n0;\n                    }else{\n                        n0=0;\n                    }\n                    // number of days in april\n                    int n1=Math.min(d1, 30)-Math.max(0, d0);\n                    if (n1 > 0) {\n                        april[l - 1] += p * n1;\n                    }else\n                        n1=0;\n                    // number of day in may\n                    int n2=l-n1-n0;\n                    if (n2 > 0) {\n                        may[l - 1] += p * n2;\n                    }\n                    \n\n                }\n            }\n        }\n        for (int i = 0; i < march.length; ++i) {\n            System.out.print(march[i]);\n            System.out.print('\\t');\n        }\n        System.out.println(\"\");\n        // April\n        for (int i = 0; i < april.length; ++i) {\n            System.out.print(april[i]);\n            System.out.print('\\t');\n        }\n        System.out.println(\"\");\n        for (int i = 0; i < may.length; ++i) {\n            System.out.print(may[i]);\n            System.out.print('\\t');\n        }\n        System.out.println(\"\");\n    }", "signature": "void computeJulianEasterMeanCorrections()", "full_signature": "@Test @Ignore public void computeJulianEasterMeanCorrections()", "class_method_signature": "UtilitiesTest.computeJulianEasterMeanCorrections()", "testcase": true, "constructor": false, "invocations": ["julianEaster3", "difference", "min", "max", "print", "print", "println", "print", "print", "println", "print", "print", "println"]}, "focal_class": {"identifier": "Utilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double LUNARY = 29.53059, DEC_LUNARY = .53059;", "modifier": "public static final", "type": "double", "declarator": "LUNARY = 29.53059", "var_name": "LUNARY"}, {"original_string": "static final int CYCLE = 532, TWOCYCLE=CYCLE<<1;", "modifier": "static final", "type": "int", "declarator": "CYCLE = 532", "var_name": "CYCLE"}, {"original_string": "static final int[] PROB = new int[]{\n        4, 8, 8, 12, 16, 16, 20, 16, 16, 20, 16, 16, 20, 16, 20, 20, 16, 20, 16, 16, 20, 16, 16, 20, 16, 20, 16, 16, 20, 16, 12, 12, 8, 8, 4\n    };", "modifier": "static final", "type": "int[]", "declarator": "PROB = new int[]{\n        4, 8, 8, 12, 16, 16, 20, 16, 16, 20, 16, 16, 20, 16, 20, 20, 16, 20, 16, 16, 20, 16, 16, 20, 16, 20, 16, 16, 20, 16, 12, 12, 8, 8, 4\n    }", "var_name": "PROB"}, {"original_string": "private static final int[] JD={\n        1,1,3,9,15,11,14,27,36,28,24,32,40,39,33,31,\n        34,36,42,39,33,31,33,42,38,33,30,32,39,40,\n        33,29,26,31,33,22,7,15,12,7,1,1,1\n    };", "modifier": "private static final", "type": "int[]", "declarator": "JD={\n        1,1,3,9,15,11,14,27,36,28,24,32,40,39,33,31,\n        34,36,42,39,33,31,33,42,38,33,30,32,39,40,\n        33,29,26,31,33,22,7,15,12,7,1,1,1\n    }", "var_name": "JD"}], "methods": [{"identifier": "daysCount", "parameters": "(TsDomain domain)", "modifiers": "public static", "return": "int[]", "signature": "int[] daysCount(TsDomain domain)", "full_signature": "public static int[] daysCount(TsDomain domain)", "class_method_signature": "Utilities.daysCount(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "daysCount", "parameters": "(TsDomain domain, DayOfWeek day)", "modifiers": "public static", "return": "int[]", "signature": "int[] daysCount(TsDomain domain, DayOfWeek day)", "full_signature": "public static int[] daysCount(TsDomain domain, DayOfWeek day)", "class_method_signature": "Utilities.daysCount(TsDomain domain, DayOfWeek day)", "testcase": false, "constructor": false}, {"identifier": "easter", "parameters": "(int y)", "modifiers": "public static", "return": "Day", "signature": "Day easter(int y)", "full_signature": "public static Day easter(int y)", "class_method_signature": "Utilities.easter(int y)", "testcase": false, "constructor": false}, {"identifier": "easter2", "parameters": "(int y)", "modifiers": "public static", "return": "Day", "signature": "Day easter2(int y)", "full_signature": "public static Day easter2(int y)", "class_method_signature": "Utilities.easter2(int y)", "testcase": false, "constructor": false}, {"identifier": "julianEaster", "parameters": "(int year, boolean gregorian)", "modifiers": "@Deprecated public static", "return": "Day", "signature": "Day julianEaster(int year, boolean gregorian)", "full_signature": "@Deprecated public static Day julianEaster(int year, boolean gregorian)", "class_method_signature": "Utilities.julianEaster(int year, boolean gregorian)", "testcase": false, "constructor": false}, {"identifier": "julianEaster2", "parameters": "(int year, boolean gregorian)", "modifiers": "@Deprecated public static", "return": "Day", "signature": "Day julianEaster2(int year, boolean gregorian)", "full_signature": "@Deprecated public static Day julianEaster2(int year, boolean gregorian)", "class_method_signature": "Utilities.julianEaster2(int year, boolean gregorian)", "testcase": false, "constructor": false}, {"identifier": "julianDate2JDN", "parameters": "(int year, int month, int day)", "modifiers": "public static", "return": "int", "signature": "int julianDate2JDN(int year, int month, int day)", "full_signature": "public static int julianDate2JDN(int year, int month, int day)", "class_method_signature": "Utilities.julianDate2JDN(int year, int month, int day)", "testcase": false, "constructor": false}, {"identifier": "gregorianDate2JDN", "parameters": "(int year, int month, int day)", "modifiers": "public static", "return": "int", "signature": "int gregorianDate2JDN(int year, int month, int day)", "full_signature": "public static int gregorianDate2JDN(int year, int month, int day)", "class_method_signature": "Utilities.gregorianDate2JDN(int year, int month, int day)", "testcase": false, "constructor": false}, {"identifier": "JDN2GregorianDate", "parameters": "(int jdn)", "modifiers": "public static", "return": "Day", "signature": "Day JDN2GregorianDate(int jdn)", "full_signature": "public static Day JDN2GregorianDate(int jdn)", "class_method_signature": "Utilities.JDN2GregorianDate(int jdn)", "testcase": false, "constructor": false}, {"identifier": "julianEaster3", "parameters": "(int year, boolean gregorian)", "modifiers": "public static", "return": "Day", "signature": "Day julianEaster3(int year, boolean gregorian)", "full_signature": "public static Day julianEaster3(int year, boolean gregorian)", "class_method_signature": "Utilities.julianEaster3(int year, boolean gregorian)", "testcase": false, "constructor": false}, {"identifier": "firstWeekDay", "parameters": "(DayOfWeek day, int year, Month month)", "modifiers": "public static", "return": "Day", "signature": "Day firstWeekDay(DayOfWeek day, int year, Month month)", "full_signature": "public static Day firstWeekDay(DayOfWeek day, int year, Month month)", "class_method_signature": "Utilities.firstWeekDay(DayOfWeek day, int year, Month month)", "testcase": false, "constructor": false}, {"identifier": "lastDay", "parameters": "(TsDomain domain)", "modifiers": "public static", "return": "int[]", "signature": "int[] lastDay(TsDomain domain)", "full_signature": "public static int[] lastDay(TsDomain domain)", "class_method_signature": "Utilities.lastDay(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "leapYear", "parameters": "(TsPeriod start, DataBlock buffer)", "modifiers": "public static", "return": "void", "signature": "void leapYear(TsPeriod start, DataBlock buffer)", "full_signature": "public static void leapYear(TsPeriod start, DataBlock buffer)", "class_method_signature": "Utilities.leapYear(TsPeriod start, DataBlock buffer)", "testcase": false, "constructor": false}, {"identifier": "lengthofPeriod", "parameters": "(TsPeriod start, DataBlock buffer)", "modifiers": "public static", "return": "void", "signature": "void lengthofPeriod(TsPeriod start, DataBlock buffer)", "full_signature": "public static void lengthofPeriod(TsPeriod start, DataBlock buffer)", "class_method_signature": "Utilities.lengthofPeriod(TsPeriod start, DataBlock buffer)", "testcase": false, "constructor": false}, {"identifier": "logJacobian", "parameters": "(LengthOfPeriodType kind, TsDomain domain,\n            boolean back)", "modifiers": "public static", "return": "double", "signature": "double logJacobian(LengthOfPeriodType kind, TsDomain domain,\n            boolean back)", "full_signature": "public static double logJacobian(LengthOfPeriodType kind, TsDomain domain,\n            boolean back)", "class_method_signature": "Utilities.logJacobian(LengthOfPeriodType kind, TsDomain domain,\n            boolean back)", "testcase": false, "constructor": false}, {"identifier": "tradingDays", "parameters": "(TsDomain domain)", "modifiers": "@Deprecated public static", "return": "int[][]", "signature": "int[][] tradingDays(TsDomain domain)", "full_signature": "@Deprecated public static int[][] tradingDays(TsDomain domain)", "class_method_signature": "Utilities.tradingDays(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "tdCount", "parameters": "(TsDomain domain)", "modifiers": "public static", "return": "int[][]", "signature": "int[][] tdCount(TsDomain domain)", "full_signature": "public static int[][] tdCount(TsDomain domain)", "class_method_signature": "Utilities.tdCount(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(LengthOfPeriodType kind, TsData tsdata,\n            boolean back)", "modifiers": "public static", "return": "void", "signature": "void transform(LengthOfPeriodType kind, TsData tsdata,\n            boolean back)", "full_signature": "public static void transform(LengthOfPeriodType kind, TsData tsdata,\n            boolean back)", "class_method_signature": "Utilities.transform(LengthOfPeriodType kind, TsData tsdata,\n            boolean back)", "testcase": false, "constructor": false}, {"identifier": "probJulianEaster", "parameters": "(int pos)", "modifiers": "public static", "return": "double", "signature": "double probJulianEaster(int pos)", "full_signature": "public static double probJulianEaster(int pos)", "class_method_signature": "Utilities.probJulianEaster(int pos)", "testcase": false, "constructor": false}, {"identifier": "probEaster", "parameters": "(int pos)", "modifiers": "public static", "return": "double", "signature": "double probEaster(int pos)", "full_signature": "public static double probEaster(int pos)", "class_method_signature": "Utilities.probEaster(int pos)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/calendars/Utilities.java"}, "focal_method": {"identifier": "julianEaster3", "parameters": "(int year, boolean gregorian)", "modifiers": "public static", "return": "Day", "body": "public static Day julianEaster3(int year, boolean gregorian) {\n        int a = year % 19;\n        int b = year % 4;\n        int c = year % 7;\n        int d = (19 * a + 15) % 30;\n        int e = (2 * b + 4 * c - d + 34) % 7;\n        int f = d + e + 114;\n        /*\n       * month and day give the Easter date in the Julian calendar\n         */\n        int month = f / 31;\n        int day = (f % 31) + 1;\n        Day easterJ = new Day(year, Month.valueOf(month - 1), day - 1);\n        if (gregorian) {\n            return JDN2GregorianDate(julianDate2JDN(year, month, day));\n        } else {\n            return easterJ;\n        }\n    }", "signature": "Day julianEaster3(int year, boolean gregorian)", "full_signature": "public static Day julianEaster3(int year, boolean gregorian)", "class_method_signature": "Utilities.julianEaster3(int year, boolean gregorian)", "testcase": false, "constructor": false, "invocations": ["valueOf", "JDN2GregorianDate", "julianDate2JDN"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}