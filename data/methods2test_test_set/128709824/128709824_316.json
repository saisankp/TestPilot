{"test_class": {"identifier": "BeanIdMatchFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core-impl/filter/src/test/java/com/alipay/sofa/rpc/filter/BeanIdMatchFilterTest.java"}, "test_case": {"identifier": "testIsMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsMatch() {\n        TestCustomizeFilter testCustomizeFilter = new TestCustomizeFilter();\n        Assert.assertTrue(testCustomizeFilter.isMatch(\"\"));\n\n        testCustomizeFilter = new TestCustomizeFilter();\n        testCustomizeFilter.setIdRule(\"AAA,BBB\");\n\n        AbstractInterfaceConfig configA = new ProviderConfig();\n        configA.setInterfaceId(Serializer.class.getName());\n        configA.setId(\"AAA\");\n        FilterInvoker filterInvokerA = new FilterInvoker(null, null, configA);\n        Assert.assertEquals(true, testCustomizeFilter.needToLoad(filterInvokerA));\n    }", "signature": "void testIsMatch()", "full_signature": "@Test public void testIsMatch()", "class_method_signature": "BeanIdMatchFilterTest.testIsMatch()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isMatch", "setIdRule", "setInterfaceId", "getName", "setId", "assertEquals", "needToLoad"]}, "focal_class": {"identifier": "BeanIdMatchFilter", "superclass": "extends Filter", "interfaces": "", "fields": [{"original_string": "private static final String ID_SPLIT     = \",\";", "modifier": "private static final", "type": "String", "declarator": "ID_SPLIT     = \",\"", "var_name": "ID_SPLIT"}, {"original_string": "private static final String ID_EXCLUDE   = \"!\";", "modifier": "private static final", "type": "String", "declarator": "ID_EXCLUDE   = \"!\"", "var_name": "ID_EXCLUDE"}, {"original_string": "private String              idRule;", "modifier": "private", "type": "String", "declarator": "idRule", "var_name": "idRule"}, {"original_string": "private boolean             allEffective = true;", "modifier": "private", "type": "boolean", "declarator": "allEffective = true", "var_name": "allEffective"}, {"original_string": "private List<String>        effectiveId;", "modifier": "private", "type": "List<String>", "declarator": "effectiveId", "var_name": "effectiveId"}, {"original_string": "private List<String>        excludeId;", "modifier": "private", "type": "List<String>", "declarator": "excludeId", "var_name": "excludeId"}, {"original_string": "private volatile boolean    formatComplete;", "modifier": "private volatile", "type": "boolean", "declarator": "formatComplete", "var_name": "formatComplete"}, {"original_string": "private final Object        formatLock   = new Object();", "modifier": "private final", "type": "Object", "declarator": "formatLock   = new Object()", "var_name": "formatLock"}], "methods": [{"identifier": "needToLoad", "parameters": "(FilterInvoker invoker)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean needToLoad(FilterInvoker invoker)", "full_signature": "@Override public boolean needToLoad(FilterInvoker invoker)", "class_method_signature": "BeanIdMatchFilter.needToLoad(FilterInvoker invoker)", "testcase": false, "constructor": false}, {"identifier": "formatId", "parameters": "(String ruleId)", "modifiers": "protected", "return": "void", "signature": "void formatId(String ruleId)", "full_signature": "protected void formatId(String ruleId)", "class_method_signature": "BeanIdMatchFilter.formatId(String ruleId)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(String invokerId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMatch(String invokerId)", "full_signature": "protected boolean isMatch(String invokerId)", "class_method_signature": "BeanIdMatchFilter.isMatch(String invokerId)", "testcase": false, "constructor": false}, {"identifier": "getIdRule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIdRule()", "full_signature": "public String getIdRule()", "class_method_signature": "BeanIdMatchFilter.getIdRule()", "testcase": false, "constructor": false}, {"identifier": "setIdRule", "parameters": "(String idRule)", "modifiers": "public", "return": "void", "signature": "void setIdRule(String idRule)", "full_signature": "public void setIdRule(String idRule)", "class_method_signature": "BeanIdMatchFilter.setIdRule(String idRule)", "testcase": false, "constructor": false}], "file": "core-impl/filter/src/main/java/com/alipay/sofa/rpc/filter/BeanIdMatchFilter.java"}, "focal_method": {"identifier": "isMatch", "parameters": "(String invokerId)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isMatch(String invokerId) {\n\n        if (allEffective) {\n            return true;\n        } else {\n            //\u5982\u679c\u6ca1\u6709\u6392\u9664\uff0c\u90a3\u4e48\u53ea\u751f\u6548\u6307\u5b9aid\uff0c\u5176\u4f59\u4e0d\u751f\u6548\u3002\n            if (excludeId.size() == 0) {\n                return effectiveId.contains(invokerId);\n                //\u5982\u679c\u6709\u6392\u9664\uff0c\u90a3\u4e48\u9664\u6392\u9664id\u5916\uff0c\u5176\u4f59\u90fd\u751f\u6548\u3002\n            } else {\n                return !excludeId.contains(invokerId);\n            }\n        }\n\n    }", "signature": "boolean isMatch(String invokerId)", "full_signature": "protected boolean isMatch(String invokerId)", "class_method_signature": "BeanIdMatchFilter.isMatch(String invokerId)", "testcase": false, "constructor": false, "invocations": ["size", "contains", "contains"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}