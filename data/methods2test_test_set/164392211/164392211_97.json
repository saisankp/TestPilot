{"test_class": {"identifier": "ScalarTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/ScalarTest.java"}, "test_case": {"identifier": "testSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSet() {\n        Scalar<Integer> S = Scalar.at(2);\n        Object[] a = new Object[4];\n        S.set(a, 6);\n        assertEquals(Integer.valueOf(6), a[2]);\n    }", "signature": "void testSet()", "full_signature": "@Test public void testSet()", "class_method_signature": "ScalarTest.testSet()", "testcase": true, "constructor": false, "invocations": ["at", "set", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "Scalar", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}], "methods": [{"identifier": "Scalar", "parameters": "(int position)", "modifiers": "protected", "return": "", "signature": " Scalar(int position)", "full_signature": "protected  Scalar(int position)", "class_method_signature": "Scalar.Scalar(int position)", "testcase": false, "constructor": true}, {"identifier": "at", "parameters": "(int position)", "modifiers": "public static", "return": "Scalar<T>", "signature": "Scalar<T> at(int position)", "full_signature": "public static Scalar<T> at(int position)", "class_method_signature": "Scalar.at(int position)", "testcase": false, "constructor": false}, {"identifier": "at", "parameters": "(E e)", "modifiers": "public static", "return": "Scalar<T>", "signature": "Scalar<T> at(E e)", "full_signature": "public static Scalar<T> at(E e)", "class_method_signature": "Scalar.at(E e)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object[] row)", "modifiers": "public", "return": "T", "signature": "T get(Object[] row)", "full_signature": "public T get(Object[] row)", "class_method_signature": "Scalar.get(Object[] row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Object[] row, T value)", "modifiers": "public", "return": "void", "signature": "void set(Object[] row, T value)", "full_signature": "public void set(Object[] row, T value)", "class_method_signature": "Scalar.set(Object[] row, T value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(RowProxy row)", "modifiers": "public", "return": "T", "signature": "T get(RowProxy row)", "full_signature": "public T get(RowProxy row)", "class_method_signature": "Scalar.get(RowProxy row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(RowBuilder row, T value)", "modifiers": "public", "return": "void", "signature": "void set(RowBuilder row, T value)", "full_signature": "public void set(RowBuilder row, T value)", "class_method_signature": "Scalar.set(RowBuilder row, T value)", "testcase": false, "constructor": false}, {"identifier": "hasher", "parameters": "()", "modifiers": "public", "return": "Hasher", "signature": "Hasher hasher()", "full_signature": "public Hasher hasher()", "class_method_signature": "Scalar.hasher()", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "Aggregator<T>", "signature": "Aggregator<T> first()", "full_signature": "public Aggregator<T> first()", "class_method_signature": "Scalar.first()", "testcase": false, "constructor": false}, {"identifier": "countLong", "parameters": "()", "modifiers": "public", "return": "Aggregator<Long>", "signature": "Aggregator<Long> countLong()", "full_signature": "public Aggregator<Long> countLong()", "class_method_signature": "Scalar.countLong()", "testcase": false, "constructor": false}, {"identifier": "countInt", "parameters": "()", "modifiers": "public", "return": "Aggregator<Integer>", "signature": "Aggregator<Integer> countInt()", "full_signature": "public Aggregator<Integer> countInt()", "class_method_signature": "Scalar.countInt()", "testcase": false, "constructor": false}, {"identifier": "averageDouble", "parameters": "()", "modifiers": "public", "return": "Aggregator<Double>", "signature": "Aggregator<Double> averageDouble()", "full_signature": "public Aggregator<Double> averageDouble()", "class_method_signature": "Scalar.averageDouble()", "testcase": false, "constructor": false}, {"identifier": "medianDouble", "parameters": "()", "modifiers": "public", "return": "Aggregator<Double>", "signature": "Aggregator<Double> medianDouble()", "full_signature": "public Aggregator<Double> medianDouble()", "class_method_signature": "Scalar.medianDouble()", "testcase": false, "constructor": false}, {"identifier": "sumLong", "parameters": "()", "modifiers": "public", "return": "Aggregator<Long>", "signature": "Aggregator<Long> sumLong()", "full_signature": "public Aggregator<Long> sumLong()", "class_method_signature": "Scalar.sumLong()", "testcase": false, "constructor": false}, {"identifier": "sumDouble", "parameters": "()", "modifiers": "public", "return": "Aggregator<Double>", "signature": "Aggregator<Double> sumDouble()", "full_signature": "public Aggregator<Double> sumDouble()", "class_method_signature": "Scalar.sumDouble()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPosition()", "full_signature": "public int getPosition()", "class_method_signature": "Scalar.getPosition()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/Scalar.java"}, "focal_method": {"identifier": "set", "parameters": "(Object[] row, T value)", "modifiers": "public", "return": "void", "body": "public void set(Object[] row, T value) {\n        row[position] = value;\n    }", "signature": "void set(Object[] row, T value)", "full_signature": "public void set(Object[] row, T value)", "class_method_signature": "Scalar.set(Object[] row, T value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}