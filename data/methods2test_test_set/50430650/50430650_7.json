{"test_class": {"identifier": "SyntaxBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/technophobia/substeps/runner/syntax/SyntaxBuilderTest.java"}, "test_case": {"identifier": "testSyntaxBuilder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSyntaxBuilder() {\n\n        final List<Class<?>> stepImpls = new ArrayList<Class<?>>();\n        stepImpls.add(MockStepImplementations.class);\n\n        checkSyntaxBuilderWithStepImpls(stepImpls);\n    }", "signature": "void testSyntaxBuilder()", "full_signature": "@Test public void testSyntaxBuilder()", "class_method_signature": "SyntaxBuilderTest.testSyntaxBuilder()", "testcase": true, "constructor": false, "invocations": ["add", "checkSyntaxBuilderWithStepImpls"]}, "focal_class": {"identifier": "SyntaxBuilder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SyntaxBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " SyntaxBuilder()", "full_signature": "private  SyntaxBuilder()", "class_method_signature": "SyntaxBuilder.SyntaxBuilder()", "testcase": false, "constructor": true}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final List<String> nonStrictKeywordPrecedence)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final List<String> nonStrictKeywordPrecedence)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final List<String> nonStrictKeywordPrecedence)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final List<String> nonStrictKeywordPrecedence)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries, final SyntaxErrorReporter syntaxErrorReporter)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries, final SyntaxErrorReporter syntaxErrorReporter)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries, final SyntaxErrorReporter syntaxErrorReporter)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final File subStepsFile,\n                                     final boolean strict, final String[] nonStrictKeywordPrecedence, final ClassAnalyser classAnalyser,\n                                     final boolean failOnDuplicateEntries, final SyntaxErrorReporter syntaxErrorReporter)", "testcase": false, "constructor": false}, {"identifier": "buildSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses, final PatternMap<ParentStep> loadedSubSteps)", "modifiers": "public static", "return": "Syntax", "signature": "Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final PatternMap<ParentStep> loadedSubSteps)", "full_signature": "public static Syntax buildSyntax(final List<Class<?>> stepImplementationClasses, final PatternMap<ParentStep> loadedSubSteps)", "class_method_signature": "SyntaxBuilder.buildSyntax(final List<Class<?>> stepImplementationClasses, final PatternMap<ParentStep> loadedSubSteps)", "testcase": false, "constructor": false}, {"identifier": "buildBaseSyntax", "parameters": "(final List<Class<?>> stepImplementationClasses,\n                                          final ClassAnalyser classAnalyser, final boolean failOnDuplicateEntries,\n                                          final SyntaxErrorReporter syntaxErrorReporter)", "modifiers": "private static", "return": "Syntax", "signature": "Syntax buildBaseSyntax(final List<Class<?>> stepImplementationClasses,\n                                          final ClassAnalyser classAnalyser, final boolean failOnDuplicateEntries,\n                                          final SyntaxErrorReporter syntaxErrorReporter)", "full_signature": "private static Syntax buildBaseSyntax(final List<Class<?>> stepImplementationClasses,\n                                          final ClassAnalyser classAnalyser, final boolean failOnDuplicateEntries,\n                                          final SyntaxErrorReporter syntaxErrorReporter)", "class_method_signature": "SyntaxBuilder.buildBaseSyntax(final List<Class<?>> stepImplementationClasses,\n                                          final ClassAnalyser classAnalyser, final boolean failOnDuplicateEntries,\n                                          final SyntaxErrorReporter syntaxErrorReporter)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/runner/syntax/SyntaxBuilder.java"}, "focal_method": {"identifier": "SyntaxBuilder", "parameters": "()", "modifiers": "private", "return": "", "body": "private SyntaxBuilder() {\n    }", "signature": " SyntaxBuilder()", "full_signature": "private  SyntaxBuilder()", "class_method_signature": "SyntaxBuilder.SyntaxBuilder()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}