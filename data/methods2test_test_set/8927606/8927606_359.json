{"test_class": {"identifier": "GenericDbmsSupportTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupportTest.java"}, "test_case": {"identifier": "testSplitQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSplitQuery() throws JdbcException, SQLException {\n\t\tString query1 = \"select count(*) from ibisstore;\";\n\t\tString query2 = \"delete from temp where tvarchar='t;st';\";\n\t\tString query3 = \"update temp set tvarchar='new' where tvarchar2='old';\";\n\t\tString query4 = \"ooo BEGIN BEGIN ooo; IF (ooo) THEN ooo; END IF; ooo; IF (ooo) THEN ooo; END IF; END;END;\";\n\t\tList<String> result = (new GenericDbmsSupport()).splitQuery(query1 + query2 + query3 + query4);\n\t\tassertEquals(4, result.size());\n\t\tassertEquals(query1, result.get(0));\n\t\tassertEquals(query2, result.get(1));\n\t\tassertEquals(query3, result.get(2));\n\t\tassertEquals(query4, result.get(3));\n\t}", "signature": "void testSplitQuery()", "full_signature": "@Test public void testSplitQuery()", "class_method_signature": "GenericDbmsSupportTest.testSplitQuery()", "testcase": true, "constructor": false, "invocations": ["splitQuery", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "GenericDbmsSupport", "superclass": "", "interfaces": "implements IDbmsSupport", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this.getClass());", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this.getClass())", "var_name": "log"}, {"original_string": "protected final static String KEYWORD_SELECT=\"select\";", "modifier": "protected final static", "type": "String", "declarator": "KEYWORD_SELECT=\"select\"", "var_name": "KEYWORD_SELECT"}, {"original_string": "protected static final String TYPE_BLOB = \"blob\";", "modifier": "protected static final", "type": "String", "declarator": "TYPE_BLOB = \"blob\"", "var_name": "TYPE_BLOB"}, {"original_string": "protected static final String TYPE_CLOB = \"clob\";", "modifier": "protected static final", "type": "String", "declarator": "TYPE_CLOB = \"clob\"", "var_name": "TYPE_CLOB"}, {"original_string": "protected static final String TYPE_FUNCTION = \"function\";", "modifier": "protected static final", "type": "String", "declarator": "TYPE_FUNCTION = \"function\"", "var_name": "TYPE_FUNCTION"}, {"original_string": "protected static Map<String,ISqlTranslator> sqlTranslators = new HashMap<>();", "modifier": "protected static", "type": "Map<String,ISqlTranslator>", "declarator": "sqlTranslators = new HashMap<>()", "var_name": "sqlTranslators"}], "methods": [{"identifier": "getDbmsName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDbmsName()", "full_signature": "@Override public String getDbmsName()", "class_method_signature": "GenericDbmsSupport.getDbmsName()", "testcase": false, "constructor": false}, {"identifier": "getDbms", "parameters": "()", "modifiers": "@Override public", "return": "Dbms", "signature": "Dbms getDbms()", "full_signature": "@Override public Dbms getDbms()", "class_method_signature": "GenericDbmsSupport.getDbms()", "testcase": false, "constructor": false}, {"identifier": "isParameterTypeMatchRequired", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isParameterTypeMatchRequired()", "full_signature": "@Override public boolean isParameterTypeMatchRequired()", "class_method_signature": "GenericDbmsSupport.isParameterTypeMatchRequired()", "testcase": false, "constructor": false}, {"identifier": "hasSkipLockedFunctionality", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSkipLockedFunctionality()", "full_signature": "@Override public boolean hasSkipLockedFunctionality()", "class_method_signature": "GenericDbmsSupport.hasSkipLockedFunctionality()", "testcase": false, "constructor": false}, {"identifier": "getSysDate", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSysDate()", "full_signature": "@Override public String getSysDate()", "class_method_signature": "GenericDbmsSupport.getSysDate()", "testcase": false, "constructor": false}, {"identifier": "getDateAndOffset", "parameters": "(String dateValue, int daysOffset)", "modifiers": "@Override public", "return": "String", "signature": "String getDateAndOffset(String dateValue, int daysOffset)", "full_signature": "@Override public String getDateAndOffset(String dateValue, int daysOffset)", "class_method_signature": "GenericDbmsSupport.getDateAndOffset(String dateValue, int daysOffset)", "testcase": false, "constructor": false}, {"identifier": "getNumericKeyFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNumericKeyFieldType()", "full_signature": "@Override public String getNumericKeyFieldType()", "class_method_signature": "GenericDbmsSupport.getNumericKeyFieldType()", "testcase": false, "constructor": false}, {"identifier": "getFromForTablelessSelect", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFromForTablelessSelect()", "full_signature": "@Override public String getFromForTablelessSelect()", "class_method_signature": "GenericDbmsSupport.getFromForTablelessSelect()", "testcase": false, "constructor": false}, {"identifier": "getAutoIncrementKeyFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAutoIncrementKeyFieldType()", "full_signature": "@Override public String getAutoIncrementKeyFieldType()", "class_method_signature": "GenericDbmsSupport.getAutoIncrementKeyFieldType()", "testcase": false, "constructor": false}, {"identifier": "autoIncrementKeyMustBeInserted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean autoIncrementKeyMustBeInserted()", "full_signature": "@Override public boolean autoIncrementKeyMustBeInserted()", "class_method_signature": "GenericDbmsSupport.autoIncrementKeyMustBeInserted()", "testcase": false, "constructor": false}, {"identifier": "autoIncrementInsertValue", "parameters": "(String sequenceName)", "modifiers": "@Override public", "return": "String", "signature": "String autoIncrementInsertValue(String sequenceName)", "full_signature": "@Override public String autoIncrementInsertValue(String sequenceName)", "class_method_signature": "GenericDbmsSupport.autoIncrementInsertValue(String sequenceName)", "testcase": false, "constructor": false}, {"identifier": "autoIncrementUsesSequenceObject", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean autoIncrementUsesSequenceObject()", "full_signature": "@Override public boolean autoIncrementUsesSequenceObject()", "class_method_signature": "GenericDbmsSupport.autoIncrementUsesSequenceObject()", "testcase": false, "constructor": false}, {"identifier": "getInsertedAutoIncrementValueQuery", "parameters": "(String sequenceName)", "modifiers": "@Override public", "return": "String", "signature": "String getInsertedAutoIncrementValueQuery(String sequenceName)", "full_signature": "@Override public String getInsertedAutoIncrementValueQuery(String sequenceName)", "class_method_signature": "GenericDbmsSupport.getInsertedAutoIncrementValueQuery(String sequenceName)", "testcase": false, "constructor": false}, {"identifier": "getIbisStoreSummaryQuery", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIbisStoreSummaryQuery()", "full_signature": "@Override public String getIbisStoreSummaryQuery()", "class_method_signature": "GenericDbmsSupport.getIbisStoreSummaryQuery()", "testcase": false, "constructor": false}, {"identifier": "getTimestampFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTimestampFieldType()", "full_signature": "@Override public String getTimestampFieldType()", "class_method_signature": "GenericDbmsSupport.getTimestampFieldType()", "testcase": false, "constructor": false}, {"identifier": "getDatetimeLiteral", "parameters": "(Date date)", "modifiers": "@Override public", "return": "String", "signature": "String getDatetimeLiteral(Date date)", "full_signature": "@Override public String getDatetimeLiteral(Date date)", "class_method_signature": "GenericDbmsSupport.getDatetimeLiteral(Date date)", "testcase": false, "constructor": false}, {"identifier": "getTimestampAsDate", "parameters": "(String columnName)", "modifiers": "@Override public", "return": "String", "signature": "String getTimestampAsDate(String columnName)", "full_signature": "@Override public String getTimestampAsDate(String columnName)", "class_method_signature": "GenericDbmsSupport.getTimestampAsDate(String columnName)", "testcase": false, "constructor": false}, {"identifier": "getClobFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getClobFieldType()", "full_signature": "@Override public String getClobFieldType()", "class_method_signature": "GenericDbmsSupport.getClobFieldType()", "testcase": false, "constructor": false}, {"identifier": "mustInsertEmptyClobBeforeData", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mustInsertEmptyClobBeforeData()", "full_signature": "@Override public boolean mustInsertEmptyClobBeforeData()", "class_method_signature": "GenericDbmsSupport.mustInsertEmptyClobBeforeData()", "testcase": false, "constructor": false}, {"identifier": "getUpdateClobQuery", "parameters": "(String table, String clobField, String keyField)", "modifiers": "@Override public", "return": "String", "signature": "String getUpdateClobQuery(String table, String clobField, String keyField)", "full_signature": "@Override public String getUpdateClobQuery(String table, String clobField, String keyField)", "class_method_signature": "GenericDbmsSupport.getUpdateClobQuery(String table, String clobField, String keyField)", "testcase": false, "constructor": false}, {"identifier": "emptyClobValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String emptyClobValue()", "full_signature": "@Override public String emptyClobValue()", "class_method_signature": "GenericDbmsSupport.emptyClobValue()", "testcase": false, "constructor": false}, {"identifier": "getClobUpdateHandle", "parameters": "(ResultSet rs, int column)", "modifiers": "@Override public", "return": "Object", "signature": "Object getClobUpdateHandle(ResultSet rs, int column)", "full_signature": "@Override public Object getClobUpdateHandle(ResultSet rs, int column)", "class_method_signature": "GenericDbmsSupport.getClobUpdateHandle(ResultSet rs, int column)", "testcase": false, "constructor": false}, {"identifier": "getClobUpdateHandle", "parameters": "(ResultSet rs, String column)", "modifiers": "@Override public", "return": "Object", "signature": "Object getClobUpdateHandle(ResultSet rs, String column)", "full_signature": "@Override public Object getClobUpdateHandle(ResultSet rs, String column)", "class_method_signature": "GenericDbmsSupport.getClobUpdateHandle(ResultSet rs, String column)", "testcase": false, "constructor": false}, {"identifier": "getClobWriter", "parameters": "(ResultSet rs, int column, Object clobUpdateHandle)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer getClobWriter(ResultSet rs, int column, Object clobUpdateHandle)", "full_signature": "@Override public Writer getClobWriter(ResultSet rs, int column, Object clobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.getClobWriter(ResultSet rs, int column, Object clobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "getClobWriter", "parameters": "(ResultSet rs, String column, Object clobUpdateHandle)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer getClobWriter(ResultSet rs, String column, Object clobUpdateHandle)", "full_signature": "@Override public Writer getClobWriter(ResultSet rs, String column, Object clobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.getClobWriter(ResultSet rs, String column, Object clobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "updateClob", "parameters": "(ResultSet rs, int column, Object clobUpdateHandle)", "modifiers": "@Override public", "return": "void", "signature": "void updateClob(ResultSet rs, int column, Object clobUpdateHandle)", "full_signature": "@Override public void updateClob(ResultSet rs, int column, Object clobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.updateClob(ResultSet rs, int column, Object clobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "updateClob", "parameters": "(ResultSet rs, String column, Object clobUpdateHandle)", "modifiers": "@Override public", "return": "void", "signature": "void updateClob(ResultSet rs, String column, Object clobUpdateHandle)", "full_signature": "@Override public void updateClob(ResultSet rs, String column, Object clobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.updateClob(ResultSet rs, String column, Object clobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "getClobReader", "parameters": "(ResultSet rs, int column)", "modifiers": "@Override public", "return": "Reader", "signature": "Reader getClobReader(ResultSet rs, int column)", "full_signature": "@Override public Reader getClobReader(ResultSet rs, int column)", "class_method_signature": "GenericDbmsSupport.getClobReader(ResultSet rs, int column)", "testcase": false, "constructor": false}, {"identifier": "getClobReader", "parameters": "(ResultSet rs, String column)", "modifiers": "@Override public", "return": "Reader", "signature": "Reader getClobReader(ResultSet rs, String column)", "full_signature": "@Override public Reader getClobReader(ResultSet rs, String column)", "class_method_signature": "GenericDbmsSupport.getClobReader(ResultSet rs, String column)", "testcase": false, "constructor": false}, {"identifier": "getBlobFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBlobFieldType()", "full_signature": "@Override public String getBlobFieldType()", "class_method_signature": "GenericDbmsSupport.getBlobFieldType()", "testcase": false, "constructor": false}, {"identifier": "mustInsertEmptyBlobBeforeData", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mustInsertEmptyBlobBeforeData()", "full_signature": "@Override public boolean mustInsertEmptyBlobBeforeData()", "class_method_signature": "GenericDbmsSupport.mustInsertEmptyBlobBeforeData()", "testcase": false, "constructor": false}, {"identifier": "getUpdateBlobQuery", "parameters": "(String table, String blobField, String keyField)", "modifiers": "@Override public", "return": "String", "signature": "String getUpdateBlobQuery(String table, String blobField, String keyField)", "full_signature": "@Override public String getUpdateBlobQuery(String table, String blobField, String keyField)", "class_method_signature": "GenericDbmsSupport.getUpdateBlobQuery(String table, String blobField, String keyField)", "testcase": false, "constructor": false}, {"identifier": "emptyBlobValue", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String emptyBlobValue()", "full_signature": "@Override public String emptyBlobValue()", "class_method_signature": "GenericDbmsSupport.emptyBlobValue()", "testcase": false, "constructor": false}, {"identifier": "getBlobUpdateHandle", "parameters": "(ResultSet rs, int column)", "modifiers": "@Override public", "return": "Object", "signature": "Object getBlobUpdateHandle(ResultSet rs, int column)", "full_signature": "@Override public Object getBlobUpdateHandle(ResultSet rs, int column)", "class_method_signature": "GenericDbmsSupport.getBlobUpdateHandle(ResultSet rs, int column)", "testcase": false, "constructor": false}, {"identifier": "getBlobUpdateHandle", "parameters": "(ResultSet rs, String column)", "modifiers": "@Override public", "return": "Object", "signature": "Object getBlobUpdateHandle(ResultSet rs, String column)", "full_signature": "@Override public Object getBlobUpdateHandle(ResultSet rs, String column)", "class_method_signature": "GenericDbmsSupport.getBlobUpdateHandle(ResultSet rs, String column)", "testcase": false, "constructor": false}, {"identifier": "getBlobOutputStream", "parameters": "(ResultSet rs, Object blobUpdateHandle)", "modifiers": "protected", "return": "OutputStream", "signature": "OutputStream getBlobOutputStream(ResultSet rs, Object blobUpdateHandle)", "full_signature": "protected OutputStream getBlobOutputStream(ResultSet rs, Object blobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.getBlobOutputStream(ResultSet rs, Object blobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "getBlobOutputStream", "parameters": "(ResultSet rs, int column, Object blobUpdateHandle)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream getBlobOutputStream(ResultSet rs, int column, Object blobUpdateHandle)", "full_signature": "@Override public OutputStream getBlobOutputStream(ResultSet rs, int column, Object blobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.getBlobOutputStream(ResultSet rs, int column, Object blobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "getBlobOutputStream", "parameters": "(ResultSet rs, String column, Object blobUpdateHandle)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream getBlobOutputStream(ResultSet rs, String column, Object blobUpdateHandle)", "full_signature": "@Override public OutputStream getBlobOutputStream(ResultSet rs, String column, Object blobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.getBlobOutputStream(ResultSet rs, String column, Object blobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "updateBlob", "parameters": "(ResultSet rs, int column, Object blobUpdateHandle)", "modifiers": "@Override public", "return": "void", "signature": "void updateBlob(ResultSet rs, int column, Object blobUpdateHandle)", "full_signature": "@Override public void updateBlob(ResultSet rs, int column, Object blobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.updateBlob(ResultSet rs, int column, Object blobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "updateBlob", "parameters": "(ResultSet rs, String column, Object blobUpdateHandle)", "modifiers": "@Override public", "return": "void", "signature": "void updateBlob(ResultSet rs, String column, Object blobUpdateHandle)", "full_signature": "@Override public void updateBlob(ResultSet rs, String column, Object blobUpdateHandle)", "class_method_signature": "GenericDbmsSupport.updateBlob(ResultSet rs, String column, Object blobUpdateHandle)", "testcase": false, "constructor": false}, {"identifier": "getBlobInputStream", "parameters": "(ResultSet rs, int column)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getBlobInputStream(ResultSet rs, int column)", "full_signature": "@Override public InputStream getBlobInputStream(ResultSet rs, int column)", "class_method_signature": "GenericDbmsSupport.getBlobInputStream(ResultSet rs, int column)", "testcase": false, "constructor": false}, {"identifier": "getBlobInputStream", "parameters": "(ResultSet rs, String column)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getBlobInputStream(ResultSet rs, String column)", "full_signature": "@Override public InputStream getBlobInputStream(ResultSet rs, String column)", "class_method_signature": "GenericDbmsSupport.getBlobInputStream(ResultSet rs, String column)", "testcase": false, "constructor": false}, {"identifier": "getTextFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTextFieldType()", "full_signature": "@Override public String getTextFieldType()", "class_method_signature": "GenericDbmsSupport.getTextFieldType()", "testcase": false, "constructor": false}, {"identifier": "prepareQueryTextForWorkQueueReading", "parameters": "(int batchSize, String selectQuery)", "modifiers": "@Override public", "return": "String", "signature": "String prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery)", "full_signature": "@Override public String prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery)", "class_method_signature": "GenericDbmsSupport.prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery)", "testcase": false, "constructor": false}, {"identifier": "prepareQueryTextForWorkQueueReading", "parameters": "(int batchSize, String selectQuery, int wait)", "modifiers": "@Override public", "return": "String", "signature": "String prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery, int wait)", "full_signature": "@Override public String prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery, int wait)", "class_method_signature": "GenericDbmsSupport.prepareQueryTextForWorkQueueReading(int batchSize, String selectQuery, int wait)", "testcase": false, "constructor": false}, {"identifier": "prepareQueryTextForWorkQueuePeeking", "parameters": "(int batchSize, String selectQuery)", "modifiers": "@Override public", "return": "String", "signature": "String prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery)", "full_signature": "@Override public String prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery)", "class_method_signature": "GenericDbmsSupport.prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery)", "testcase": false, "constructor": false}, {"identifier": "prepareQueryTextForWorkQueuePeeking", "parameters": "(int batchSize, String selectQuery, int wait)", "modifiers": "@Override public", "return": "String", "signature": "String prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery, int wait)", "full_signature": "@Override public String prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery, int wait)", "class_method_signature": "GenericDbmsSupport.prepareQueryTextForWorkQueuePeeking(int batchSize, String selectQuery, int wait)", "testcase": false, "constructor": false}, {"identifier": "getFirstRecordQuery", "parameters": "(String tableName)", "modifiers": "@Override public", "return": "String", "signature": "String getFirstRecordQuery(String tableName)", "full_signature": "@Override public String getFirstRecordQuery(String tableName)", "class_method_signature": "GenericDbmsSupport.getFirstRecordQuery(String tableName)", "testcase": false, "constructor": false}, {"identifier": "prepareQueryTextForNonLockingRead", "parameters": "(String selectQuery)", "modifiers": "@Override public", "return": "String", "signature": "String prepareQueryTextForNonLockingRead(String selectQuery)", "full_signature": "@Override public String prepareQueryTextForNonLockingRead(String selectQuery)", "class_method_signature": "GenericDbmsSupport.prepareQueryTextForNonLockingRead(String selectQuery)", "testcase": false, "constructor": false}, {"identifier": "prepareSessionForNonLockingRead", "parameters": "(Connection conn)", "modifiers": "@Override public", "return": "JdbcSession", "signature": "JdbcSession prepareSessionForNonLockingRead(Connection conn)", "full_signature": "@Override public JdbcSession prepareSessionForNonLockingRead(Connection conn)", "class_method_signature": "GenericDbmsSupport.prepareSessionForNonLockingRead(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "provideIndexHintAfterFirstKeyword", "parameters": "(String tableName, String indexName)", "modifiers": "@Override public", "return": "String", "signature": "String provideIndexHintAfterFirstKeyword(String tableName, String indexName)", "full_signature": "@Override public String provideIndexHintAfterFirstKeyword(String tableName, String indexName)", "class_method_signature": "GenericDbmsSupport.provideIndexHintAfterFirstKeyword(String tableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "provideFirstRowsHintAfterFirstKeyword", "parameters": "(int rowCount)", "modifiers": "@Override public", "return": "String", "signature": "String provideFirstRowsHintAfterFirstKeyword(int rowCount)", "full_signature": "@Override public String provideFirstRowsHintAfterFirstKeyword(int rowCount)", "class_method_signature": "GenericDbmsSupport.provideFirstRowsHintAfterFirstKeyword(int rowCount)", "testcase": false, "constructor": false}, {"identifier": "provideTrailingFirstRowsHint", "parameters": "(int rowCount)", "modifiers": "@Override public", "return": "String", "signature": "String provideTrailingFirstRowsHint(int rowCount)", "full_signature": "@Override public String provideTrailingFirstRowsHint(int rowCount)", "class_method_signature": "GenericDbmsSupport.provideTrailingFirstRowsHint(int rowCount)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(Connection conn)", "modifiers": "@Override public", "return": "String", "signature": "String getSchema(Connection conn)", "full_signature": "@Override public String getSchema(Connection conn)", "class_method_signature": "GenericDbmsSupport.getSchema(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "isTablePresent", "parameters": "(Connection conn, String tableName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTablePresent(Connection conn, String tableName)", "full_signature": "@Override public boolean isTablePresent(Connection conn, String tableName)", "class_method_signature": "GenericDbmsSupport.isTablePresent(Connection conn, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isTablePresent", "parameters": "(Connection conn, String schemaName, String tableName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTablePresent(Connection conn, String schemaName, String tableName)", "full_signature": "@Override public boolean isTablePresent(Connection conn, String schemaName, String tableName)", "class_method_signature": "GenericDbmsSupport.isTablePresent(Connection conn, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "isColumnPresent", "parameters": "(Connection conn, String tableName, String columnName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isColumnPresent(Connection conn, String tableName, String columnName)", "full_signature": "@Override public boolean isColumnPresent(Connection conn, String tableName, String columnName)", "class_method_signature": "GenericDbmsSupport.isColumnPresent(Connection conn, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "isColumnPresent", "parameters": "(Connection conn, String schemaName, String tableName, String columnName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName)", "full_signature": "@Override public boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName)", "class_method_signature": "GenericDbmsSupport.isColumnPresent(Connection conn, String schemaName, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "doIsTablePresent", "parameters": "(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName)", "modifiers": "protected", "return": "boolean", "signature": "boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName)", "full_signature": "protected boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName)", "class_method_signature": "GenericDbmsSupport.doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "doIsColumnPresent", "parameters": "(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName)", "modifiers": "protected", "return": "boolean", "signature": "boolean doIsColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName)", "full_signature": "protected boolean doIsColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName)", "class_method_signature": "GenericDbmsSupport.doIsColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "isIndexPresent", "parameters": "(Connection conn, String schemaOwner, String tableName, String indexName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIndexPresent(Connection conn, String schemaOwner, String tableName, String indexName)", "full_signature": "@Override public boolean isIndexPresent(Connection conn, String schemaOwner, String tableName, String indexName)", "class_method_signature": "GenericDbmsSupport.isIndexPresent(Connection conn, String schemaOwner, String tableName, String indexName)", "testcase": false, "constructor": false}, {"identifier": "isSequencePresent", "parameters": "(Connection conn, String schemaOwner, String tableName, String sequenceName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSequencePresent(Connection conn, String schemaOwner, String tableName, String sequenceName)", "full_signature": "@Override public boolean isSequencePresent(Connection conn, String schemaOwner, String tableName, String sequenceName)", "class_method_signature": "GenericDbmsSupport.isSequencePresent(Connection conn, String schemaOwner, String tableName, String sequenceName)", "testcase": false, "constructor": false}, {"identifier": "isIndexColumnPresent", "parameters": "(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isIndexColumnPresent(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "full_signature": "@Override public boolean isIndexColumnPresent(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "class_method_signature": "GenericDbmsSupport.isIndexColumnPresent(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "getIndexColumnPosition", "parameters": "(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "modifiers": "@Override public", "return": "int", "signature": "int getIndexColumnPosition(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "full_signature": "@Override public int getIndexColumnPosition(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "class_method_signature": "GenericDbmsSupport.getIndexColumnPosition(Connection conn, String schemaOwner, String tableName, String indexName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "hasIndexOnColumn", "parameters": "(Connection conn, String schemaOwner, String tableName, String columnName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasIndexOnColumn(Connection conn, String schemaOwner, String tableName, String columnName)", "full_signature": "@Override public boolean hasIndexOnColumn(Connection conn, String schemaOwner, String tableName, String columnName)", "class_method_signature": "GenericDbmsSupport.hasIndexOnColumn(Connection conn, String schemaOwner, String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "hasIndexOnColumns", "parameters": "(Connection conn, String schemaOwner, String tableName, List<String> columns)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasIndexOnColumns(Connection conn, String schemaOwner, String tableName, List<String> columns)", "full_signature": "@Override public boolean hasIndexOnColumns(Connection conn, String schemaOwner, String tableName, List<String> columns)", "class_method_signature": "GenericDbmsSupport.hasIndexOnColumns(Connection conn, String schemaOwner, String tableName, List<String> columns)", "testcase": false, "constructor": false}, {"identifier": "getSchemaOwner", "parameters": "(Connection conn)", "modifiers": "@Override public", "return": "String", "signature": "String getSchemaOwner(Connection conn)", "full_signature": "@Override public String getSchemaOwner(Connection conn)", "class_method_signature": "GenericDbmsSupport.getSchemaOwner(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "isUniqueConstraintViolation", "parameters": "(SQLException e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUniqueConstraintViolation(SQLException e)", "full_signature": "@Override public boolean isUniqueConstraintViolation(SQLException e)", "class_method_signature": "GenericDbmsSupport.isUniqueConstraintViolation(SQLException e)", "testcase": false, "constructor": false}, {"identifier": "getRowNumber", "parameters": "(String order, String sort)", "modifiers": "@Override public", "return": "String", "signature": "String getRowNumber(String order, String sort)", "full_signature": "@Override public String getRowNumber(String order, String sort)", "class_method_signature": "GenericDbmsSupport.getRowNumber(String order, String sort)", "testcase": false, "constructor": false}, {"identifier": "getRowNumberShortName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRowNumberShortName()", "full_signature": "@Override public String getRowNumberShortName()", "class_method_signature": "GenericDbmsSupport.getRowNumberShortName()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "(String column)", "modifiers": "@Override public", "return": "String", "signature": "String getLength(String column)", "full_signature": "@Override public String getLength(String column)", "class_method_signature": "GenericDbmsSupport.getLength(String column)", "testcase": false, "constructor": false}, {"identifier": "getBooleanFieldType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBooleanFieldType()", "full_signature": "@Override public String getBooleanFieldType()", "class_method_signature": "GenericDbmsSupport.getBooleanFieldType()", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "(boolean value)", "modifiers": "@Override public", "return": "String", "signature": "String getBooleanValue(boolean value)", "full_signature": "@Override public String getBooleanValue(boolean value)", "class_method_signature": "GenericDbmsSupport.getBooleanValue(boolean value)", "testcase": false, "constructor": false}, {"identifier": "createTranslator", "parameters": "(String source, String target)", "modifiers": "protected", "return": "ISqlTranslator", "signature": "ISqlTranslator createTranslator(String source, String target)", "full_signature": "protected ISqlTranslator createTranslator(String source, String target)", "class_method_signature": "GenericDbmsSupport.createTranslator(String source, String target)", "testcase": false, "constructor": false}, {"identifier": "convertQuery", "parameters": "(QueryExecutionContext queryExecutionContext, String sqlDialectFrom)", "modifiers": "@Override public", "return": "void", "signature": "void convertQuery(QueryExecutionContext queryExecutionContext, String sqlDialectFrom)", "full_signature": "@Override public void convertQuery(QueryExecutionContext queryExecutionContext, String sqlDialectFrom)", "class_method_signature": "GenericDbmsSupport.convertQuery(QueryExecutionContext queryExecutionContext, String sqlDialectFrom)", "testcase": false, "constructor": false}, {"identifier": "warnConvertQuery", "parameters": "(String sqlDialectFrom)", "modifiers": "protected", "return": "void", "signature": "void warnConvertQuery(String sqlDialectFrom)", "full_signature": "protected void warnConvertQuery(String sqlDialectFrom)", "class_method_signature": "GenericDbmsSupport.warnConvertQuery(String sqlDialectFrom)", "testcase": false, "constructor": false}, {"identifier": "isQueryConversionRequired", "parameters": "(String sqlDialectFrom)", "modifiers": "protected", "return": "boolean", "signature": "boolean isQueryConversionRequired(String sqlDialectFrom)", "full_signature": "protected boolean isQueryConversionRequired(String sqlDialectFrom)", "class_method_signature": "GenericDbmsSupport.isQueryConversionRequired(String sqlDialectFrom)", "testcase": false, "constructor": false}, {"identifier": "splitQuery", "parameters": "(String query)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> splitQuery(String query)", "full_signature": "protected List<String> splitQuery(String query)", "class_method_signature": "GenericDbmsSupport.splitQuery(String query)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java"}, "focal_method": {"identifier": "splitQuery", "parameters": "(String query)", "modifiers": "protected", "return": "List<String>", "body": "protected List<String> splitQuery(String query) {\n\t\t// A query can contain multiple queries separated by a semicolon\n\t\tList<String> splittedQueries = new ArrayList<>();\n\t\tif (!query.contains(\";\")) {\n\t\t\tsplittedQueries.add(query);\n\t\t} else {\n\t\t\tint i = 0;\n\t\t\tint j = 0;\n\t\t\twhile (j < query.length()) {\n\t\t\t\tif (query.charAt(j) == ';') {\n\t\t\t\t\tString line = query.substring(i, j + 1);\n\t\t\t\t\t// A semicolon between single quotes is ignored (number of single quotes in the query must be zero or an even number)\n\t\t\t\t\tint countApos = StringUtils.countMatches(line, \"'\");\n\t\t\t\t\t// A semicolon directly after 'END' is ignored when there is also a 'BEGIN' in the query\n\t\t\t\t\tint countBegin = Misc.countRegex(line.toUpperCase().replaceAll(\"\\\\s+\", \"  \"), \"\\\\sBEGIN\\\\s\");\n\t\t\t\t\tint countEnd = Misc.countRegex(line.toUpperCase().replaceAll(\";\", \"; \"), \"\\\\sEND;\");\n\t\t\t\t\tif ((countApos == 0 || (countApos & 1) == 0) && countBegin==countEnd) {\n\t\t\t\t\t\tsplittedQueries.add(line.trim());\n\t\t\t\t\t\ti = j + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j > i)\n\t\t\t\tsplittedQueries.add(query.substring(i, j).trim());\n\t\t}\n\t\treturn splittedQueries;\n\t}", "signature": "List<String> splitQuery(String query)", "full_signature": "protected List<String> splitQuery(String query)", "class_method_signature": "GenericDbmsSupport.splitQuery(String query)", "testcase": false, "constructor": false, "invocations": ["contains", "add", "length", "charAt", "substring", "countMatches", "countRegex", "replaceAll", "toUpperCase", "countRegex", "replaceAll", "toUpperCase", "add", "trim", "add", "trim", "substring"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}