{"test_class": {"identifier": "ReflectionCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Gateway gateway;", "modifier": "private", "type": "Gateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "private ReflectionCommand command;", "modifier": "private", "type": "ReflectionCommand", "declarator": "command", "var_name": "command"}, {"original_string": "private BufferedWriter writer;", "modifier": "private", "type": "BufferedWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private StringWriter sWriter;", "modifier": "private", "type": "StringWriter", "declarator": "sWriter", "var_name": "sWriter"}], "file": "py4j-java/src/test/java/py4j/commands/ReflectionCommandTest.java"}, "test_case": {"identifier": "testMember", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMember() {\n\t\tString inputCommand1 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"java.lang.String\\n\" + \"valueOf\"\n\t\t\t\t+ \"\\ne\\n\";\n\t\tString inputCommand2 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"java.lang.String\\n\" + \"length\"\n\t\t\t\t+ \"\\ne\\n\";\n\t\tString inputCommand3 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"p1.Cat\\n\" + \"meow\" + \"\\ne\\n\";\n\t\tString inputCommand4 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"p1.Cat\\n\" + \"meow20\" + \"\\ne\\n\"; // does not exist\n\t\tString inputCommand5 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"p1.Cat\\n\" + \"meow15\" + \"\\ne\\n\";\n\t\tString inputCommand6 = ReflectionCommand.GET_MEMBER_SUB_COMMAND_NAME + \"\\n\" + \"p1.Cat\\n\" + \"CONSTANT\" + \"\\ne\\n\";\n\t\ttry {\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand1)), writer);\n\t\t\tassertEquals(\"!ym\\n\", sWriter.toString());\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand2)), writer);\n\t\t\tassertEquals(\"!ym\\n!xsTrying to access a non-static member from a \" + \"static context.\\n\",\n\t\t\t\t\tsWriter.toString());\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand3)), writer);\n\t\t\tassertEquals(\n\t\t\t\t\t\"!ym\\n!xsTrying to access a non-static member from a static context.\\n!xsTrying to access a non-static member from a static context.\\n\",\n\t\t\t\t\tsWriter.toString());\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand4)), writer);\n\t\t\tassertEquals(\n\t\t\t\t\t\"!ym\\n!xsTrying to access a non-static member from a static context.\\n!xsTrying to access a non-static member from a static context.\\n!x\\n\",\n\t\t\t\t\tsWriter.toString());\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand5)), writer);\n\t\t\tassertEquals(\n\t\t\t\t\t\"!ym\\n!xsTrying to access a non-static member from a static context.\\n!xsTrying to access a non-static member from a static context.\\n!x\\n!ym\\n\",\n\t\t\t\t\tsWriter.toString());\n\t\t\tcommand.execute(\"r\", new BufferedReader(new StringReader(inputCommand6)), writer);\n\t\t\tassertEquals(\n\t\t\t\t\t\"!ym\\n!xsTrying to access a non-static member from a static context.\\n!xsTrying to access a non-static member from a static context.\\n!x\\n!ym\\n!ysSalut!\\n\",\n\t\t\t\t\tsWriter.toString());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\n\t}", "signature": "void testMember()", "full_signature": "@Test public void testMember()", "class_method_signature": "ReflectionCommandTest.testMember()", "testcase": true, "constructor": false, "invocations": ["execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "execute", "assertEquals", "toString", "printStackTrace", "fail"]}, "focal_class": {"identifier": "ReflectionCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private final Logger logger = Logger.getLogger(ReflectionCommand.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(ReflectionCommand.class.getName())", "var_name": "logger"}, {"original_string": "public final static char GET_UNKNOWN_SUB_COMMAND_NAME = 'u';", "modifier": "public final static", "type": "char", "declarator": "GET_UNKNOWN_SUB_COMMAND_NAME = 'u'", "var_name": "GET_UNKNOWN_SUB_COMMAND_NAME"}, {"original_string": "public final static char GET_MEMBER_SUB_COMMAND_NAME = 'm';", "modifier": "public final static", "type": "char", "declarator": "GET_MEMBER_SUB_COMMAND_NAME = 'm'", "var_name": "GET_MEMBER_SUB_COMMAND_NAME"}, {"original_string": "public final static char GET_JAVA_LANG_CLASS_SUB_COMMAND_NAME = 'c';", "modifier": "public final static", "type": "char", "declarator": "GET_JAVA_LANG_CLASS_SUB_COMMAND_NAME = 'c'", "var_name": "GET_JAVA_LANG_CLASS_SUB_COMMAND_NAME"}, {"original_string": "public static final String REFLECTION_COMMAND_NAME = \"r\";", "modifier": "public static final", "type": "String", "declarator": "REFLECTION_COMMAND_NAME = \"r\"", "var_name": "REFLECTION_COMMAND_NAME"}, {"original_string": "protected ReflectionEngine rEngine;", "modifier": "protected", "type": "ReflectionEngine", "declarator": "rEngine", "var_name": "rEngine"}], "methods": [{"identifier": "ReflectionCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReflectionCommand()", "full_signature": "public  ReflectionCommand()", "class_method_signature": "ReflectionCommand.ReflectionCommand()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ReflectionCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getJavaLangClass", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String getJavaLangClass(BufferedReader reader)", "full_signature": "private String getJavaLangClass(BufferedReader reader)", "class_method_signature": "ReflectionCommand.getJavaLangClass(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "getMember", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String getMember(BufferedReader reader)", "full_signature": "private String getMember(BufferedReader reader)", "class_method_signature": "ReflectionCommand.getMember(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "getUnknownMember", "parameters": "(BufferedReader reader)", "modifiers": "private", "return": "String", "signature": "String getUnknownMember(BufferedReader reader)", "full_signature": "private String getUnknownMember(BufferedReader reader)", "class_method_signature": "ReflectionCommand.getUnknownMember(BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Gateway gateway, Py4JServerConnection connection)", "modifiers": "@Override public", "return": "void", "signature": "void init(Gateway gateway, Py4JServerConnection connection)", "full_signature": "@Override public void init(Gateway gateway, Py4JServerConnection connection)", "class_method_signature": "ReflectionCommand.init(Gateway gateway, Py4JServerConnection connection)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/commands/ReflectionCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(String commandName, BufferedReader reader, BufferedWriter writer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(String commandName, BufferedReader reader, BufferedWriter writer)\n\t\t\tthrows Py4JException, IOException {\n\t\tchar subCommand = safeReadLine(reader).charAt(0);\n\t\tString returnCommand = null;\n\n\t\tif (subCommand == GET_UNKNOWN_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = getUnknownMember(reader);\n\t\t} else if (subCommand == GET_JAVA_LANG_CLASS_SUB_COMMAND_NAME) {\n\t\t\treturnCommand = getJavaLangClass(reader);\n\t\t} else {\n\t\t\treturnCommand = getMember(reader);\n\t\t}\n\n\t\tlogger.finest(\"Returning command: \" + returnCommand);\n\t\twriter.write(returnCommand);\n\t\twriter.flush();\n\t}", "signature": "void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "full_signature": "@Override public void execute(String commandName, BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ReflectionCommand.execute(String commandName, BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false, "invocations": ["charAt", "safeReadLine", "getUnknownMember", "getJavaLangClass", "getMember", "finest", "write", "flush"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}