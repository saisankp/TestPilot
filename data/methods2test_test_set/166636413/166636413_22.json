{"test_class": {"identifier": "TextUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/TextUtilsTest.java"}, "test_case": {"identifier": "markDownToHtmlEscapesBackslash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void markDownToHtmlEscapesBackslash() {\n        String[][] tests = {\n                {\"A\\\\_B\\\\_C\", \"A_B_C\"},\n                {\"_A\\\\_B\\\\_C_\", \"<em>A_B_C</em>\"},\n                {\"A_B\\\\_C\", \"A_B_C\"},\n                {\"A\\\\_B_C\", \"A_B_C\"},\n                {\"A_B_C\", \"A<em>B</em>C\"},\n                {\"\\\\__AB\\\\__\", \"_<em>AB_</em>\"},\n                {\"\\\\\\\\_AB\\\\_\\\\\\\\_\", \"\\\\<em>AB_\\\\</em>\"},\n                {\"A\\\\*B\\\\*C\", \"A*B*C\"},\n                {\"*A\\\\*B\\\\*C*\", \"<em>A*B*C</em>\"},\n                {\"A*B\\\\*C\", \"A*B*C\"},\n                {\"A*B*C\", \"A<em>B</em>C\"},\n                {\"\\\\**AB\\\\**\", \"*<em>AB*</em>\"},\n                {\"\\\\\\\\*AB\\\\*\\\\\\\\*\", \"\\\\<em>AB*\\\\</em>\"},\n                {\"\\\\a\\\\ b\\\\*c\\\\d\\\\_e\", \"\\\\a\\\\ b*c\\\\d_e\"},\n                {\"\\\\#1\", \"#1\"},\n                {\"\\\\#\\\\# 2\", \"## 2\"},\n                {\"works \\\\#when not required too\", \"works #when not required too\"},\n                {\"\\\\\", \"\\\\\"},\n                {\"\\\\\\\\\", \"\\\\\"},\n                {\"\\\\\\\\\\\\\", \"\\\\\\\\\"}};\n\n        for (String[] testCase : tests) {\n            assertEquals(testCase[1], TextUtils.markdownToHtml(testCase[0]));\n        }\n    }", "signature": "void markDownToHtmlEscapesBackslash()", "full_signature": "@Test public void markDownToHtmlEscapesBackslash()", "class_method_signature": "TextUtilsTest.markDownToHtmlEscapesBackslash()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "markdownToHtml"]}, "focal_class": {"identifier": "TextUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ReplaceCallback.Callback createHeader = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            int level = match.group(1).length();\n            return \"<h\" + level + \">\" + match.group(2).replaceAll(\"#+$\", \"\").trim() + \"</h\" + level\n                    + \">\";\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createHeader = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            int level = match.group(1).length();\n            return \"<h\" + level + \">\" + match.group(2).replaceAll(\"#+$\", \"\").trim() + \"</h\" + level\n                    + \">\";\n        }\n    }", "var_name": "createHeader"}, {"original_string": "private static ReplaceCallback.Callback createParagraph = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String trimmed = match.group(1).trim();\n            if (trimmed.matches(\"(?i)^<\\\\/?(h|p|bl)\")) {\n                return match.group(1);\n            }\n            return \"<p>\" + trimmed + \"</p>\";\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createParagraph = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String trimmed = match.group(1).trim();\n            if (trimmed.matches(\"(?i)^<\\\\/?(h|p|bl)\")) {\n                return match.group(1);\n            }\n            return \"<p>\" + trimmed + \"</p>\";\n        }\n    }", "var_name": "createParagraph"}, {"original_string": "private static ReplaceCallback.Callback createSpan = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String attributes = sanitizeAttributes(match.group(1));\n            return \"<font\" + attributes + \">\" + match.group(2).trim() + \"</font>\";\n        }\n\n        // throw away all styles except for color and font-family\n        private String sanitizeAttributes(String attributes) {\n\n            String stylesText = attributes.replaceAll(\"style=[\\\"'](.*?)[\\\"']\", \"$1\");\n            String[] styles = stylesText.trim().split(\";\");\n            StringBuffer stylesOutput = new StringBuffer();\n\n            for (String style : styles) {\n                String[] stylesAttributes = style.trim().split(\":\");\n                if (stylesAttributes[0].equals(\"color\")) {\n                    stylesOutput.append(\" color=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n                if (stylesAttributes[0].equals(\"font-family\")) {\n                    stylesOutput.append(\" face=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n            }\n\n            return stylesOutput.toString();\n        }\n    };", "modifier": "private static", "type": "ReplaceCallback.Callback", "declarator": "createSpan = new ReplaceCallback.Callback() {\n        public String matchFound(MatchResult match) {\n            String attributes = sanitizeAttributes(match.group(1));\n            return \"<font\" + attributes + \">\" + match.group(2).trim() + \"</font>\";\n        }\n\n        // throw away all styles except for color and font-family\n        private String sanitizeAttributes(String attributes) {\n\n            String stylesText = attributes.replaceAll(\"style=[\\\"'](.*?)[\\\"']\", \"$1\");\n            String[] styles = stylesText.trim().split(\";\");\n            StringBuffer stylesOutput = new StringBuffer();\n\n            for (String style : styles) {\n                String[] stylesAttributes = style.trim().split(\":\");\n                if (stylesAttributes[0].equals(\"color\")) {\n                    stylesOutput.append(\" color=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n                if (stylesAttributes[0].equals(\"font-family\")) {\n                    stylesOutput.append(\" face=\\\"\" + stylesAttributes[1] + \"\\\"\");\n                }\n            }\n\n            return stylesOutput.toString();\n        }\n    }", "var_name": "createSpan"}], "methods": [{"identifier": "TextUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TextUtils()", "full_signature": "private  TextUtils()", "class_method_signature": "TextUtils.TextUtils()", "testcase": false, "constructor": true}, {"identifier": "markdownToHtml", "parameters": "(String text)", "modifiers": "protected static", "return": "String", "signature": "String markdownToHtml(String text)", "full_signature": "protected static String markdownToHtml(String text)", "class_method_signature": "TextUtils.markdownToHtml(String text)", "testcase": false, "constructor": false}, {"identifier": "textToHtml", "parameters": "(String text)", "modifiers": "public static", "return": "CharSequence", "signature": "CharSequence textToHtml(String text)", "full_signature": "public static CharSequence textToHtml(String text)", "class_method_signature": "TextUtils.textToHtml(String text)", "testcase": false, "constructor": false}, {"identifier": "ellipsizeBeginning", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String ellipsizeBeginning(String text)", "full_signature": "public static String ellipsizeBeginning(String text)", "class_method_signature": "TextUtils.ellipsizeBeginning(String text)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "modifiers": "public static", "return": "String", "signature": "String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "full_signature": "public static String join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "class_method_signature": "TextUtils.join(@NonNull CharSequence delimiter, @NonNull Iterable tokens)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/TextUtils.java"}, "focal_method": {"identifier": "markdownToHtml", "parameters": "(String text)", "modifiers": "protected static", "return": "String", "body": "protected static String markdownToHtml(String text) {\n\n        text = text.replaceAll(\"<([^a-zA-Z/])\", \"&lt;$1\");\n        // https://github.com/enketo/enketo-transformer/blob/master/src/markdown.js\n\n        // span - replaced &lt; and &gt; with <>\n        text = ReplaceCallback.replace(\"(?s)<\\\\s?span([^\\\\/\\n]*)>((?:(?!<\\\\/).)+)<\\\\/\\\\s?span\\\\s?>\",\n                text, createSpan);\n\n        //intermediary replacements keys for special characters, N/B: These symbols are not meant to be interpreted as markdown\n        text = text.replaceAll(\"(?s)\\\\\\\\#\", \"&#35;\");\n        text = text.replaceAll(\"(?s)\\\\\\\\\\\\\\\\\", \"&#92;\");\n        text = text.replaceAll(\"(?s)\\\\\\\\_\", \"&#95;\");\n        text = text.replaceAll(\"(?s)\\\\\\\\\\\\*\", \"&#42;\");\n\n        // strong\n        text = text.replaceAll(\"(?s)__(.*?)__\", \"<strong>$1</strong>\");\n        text = text.replaceAll(\"(?s)\\\\*\\\\*(.*?)\\\\*\\\\*\", \"<strong>$1</strong>\");\n\n        // emphasis\n        text = text.replaceAll(\"(?s)_([^\\\\s][^_\\n]*)_\", \"<em>$1</em>\");\n        text = text.replaceAll(\"(?s)\\\\*([^\\\\s][^\\\\*\\n]*)\\\\*\", \"<em>$1</em>\");\n\n        // links\n        text = text.replaceAll(\"(?s)\\\\[([^\\\\]]*)\\\\]\\\\(([^\\\\)]+)\\\\)\",\n                \"<a href=\\\"$2\\\" target=\\\"_blank\\\">$1</a>\");\n        // headers - requires ^ or breaks <font color=\"#f58a1f\">color</font>\n        text = ReplaceCallback.replace(\"(?s)^(#+)([^\\n]*)$\", text, createHeader);\n        // paragraphs\n        text = ReplaceCallback.replace(\"(?s)([^\\n]+)\\n\", text, createParagraph);\n\n        // replacing intermediary keys with the proper markdown symbols\n        text = text.replaceAll(\"(?s)&#35;\", \"#\");\n        text = text.replaceAll(\"(?s)&#42;\", \"*\");\n        text = text.replaceAll(\"(?s)&#95;\", \"_\");\n        text = text.replaceAll(\"(?s)&#92;\", \"\\\\\\\\\");\n        return text;\n    }", "signature": "String markdownToHtml(String text)", "full_signature": "protected static String markdownToHtml(String text)", "class_method_signature": "TextUtils.markdownToHtml(String text)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "replace", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replace", "replace", "replaceAll", "replaceAll", "replaceAll", "replaceAll"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}