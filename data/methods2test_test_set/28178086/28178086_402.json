{"test_class": {"identifier": "DiffConstantTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/regression/DiffConstantTest.java"}, "test_case": {"identifier": "testLinear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLinear() {\n        Day start=Day.toDay();\n        TsDomain domain=new TsDomain(new TsPeriod(TsFrequency.Monthly, start), 120);\n        DataBlock data0=new DataBlock(domain.getLength());\n        DataBlock data1=new DataBlock(domain.getLength());\n        DiffConstant dc=new DiffConstant(new BackFilter(UnitRoots.D1), start);\n        LinearTrend t=new LinearTrend(start);\n        dc.data(domain.getStart(), data0);\n        t.data(domain.getStart(), data1);\n        assertTrue(data0.distance(data1)<1e-9);\n    }", "signature": "void testLinear()", "full_signature": "@Test public void testLinear()", "class_method_signature": "DiffConstantTest.testLinear()", "testcase": true, "constructor": false, "invocations": ["toDay", "getLength", "getLength", "data", "getStart", "data", "getStart", "assertTrue", "distance"]}, "focal_class": {"identifier": "DiffConstant", "superclass": "extends AbstractSingleTsVariable", "interfaces": "", "fields": [{"original_string": "private Day m_start;", "modifier": "private", "type": "Day", "declarator": "m_start", "var_name": "m_start"}, {"original_string": "private BackFilter m_ur;", "modifier": "private", "type": "BackFilter", "declarator": "m_ur", "var_name": "m_ur"}], "methods": [{"identifier": "generateMeanEffect", "parameters": "(BackFilter ur, int n)", "modifiers": "public static", "return": "double[]", "signature": "double[] generateMeanEffect(BackFilter ur, int n)", "full_signature": "public static double[] generateMeanEffect(BackFilter ur, int n)", "class_method_signature": "DiffConstant.generateMeanEffect(BackFilter ur, int n)", "testcase": false, "constructor": false}, {"identifier": "DiffConstant", "parameters": "(BackFilter ur, Day start)", "modifiers": "public", "return": "", "signature": " DiffConstant(BackFilter ur, Day start)", "full_signature": "public  DiffConstant(BackFilter ur, Day start)", "class_method_signature": "DiffConstant.DiffConstant(BackFilter ur, Day start)", "testcase": false, "constructor": true}, {"identifier": "data", "parameters": "(TsPeriod start, DataBlock data)", "modifiers": "@Override public", "return": "void", "signature": "void data(TsPeriod start, DataBlock data)", "full_signature": "@Override public void data(TsPeriod start, DataBlock data)", "class_method_signature": "DiffConstant.data(TsPeriod start, DataBlock data)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(TsFrequency context)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(TsFrequency context)", "full_signature": "@Override public String getDescription(TsFrequency context)", "class_method_signature": "DiffConstant.getDescription(TsFrequency context)", "testcase": false, "constructor": false}, {"identifier": "isSignificant", "parameters": "(TsDomain domain)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSignificant(TsDomain domain)", "full_signature": "@Override public boolean isSignificant(TsDomain domain)", "class_method_signature": "DiffConstant.isSignificant(TsDomain domain)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DiffConstant.getName()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/regression/DiffConstant.java"}, "focal_method": {"identifier": "data", "parameters": "(TsPeriod start, DataBlock data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void data(TsPeriod start, DataBlock data) {\n        TsPeriod s = new TsPeriod(start.getFrequency(), m_start);\n        int del = start.minus(s);\n        // raw implementation\n        if (del < 0) {\n            throw new TsException(\"Unexpected DConstant\");\n        }\n        double[] g = generateMeanEffect(m_ur, del + data.getLength());\n        data.copyFrom(g, del);\n    }", "signature": "void data(TsPeriod start, DataBlock data)", "full_signature": "@Override public void data(TsPeriod start, DataBlock data)", "class_method_signature": "DiffConstant.data(TsPeriod start, DataBlock data)", "testcase": false, "constructor": false, "invocations": ["getFrequency", "minus", "generateMeanEffect", "getLength", "copyFrom"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}