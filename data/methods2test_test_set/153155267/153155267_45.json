{"test_class": {"identifier": "MqttSourceTest", "superclass": "extends MqttTestBase", "interfaces": "", "fields": [{"original_string": "private WeldContainer container;", "modifier": "private", "type": "WeldContainer", "declarator": "container", "var_name": "container"}], "file": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSourceTest.java"}, "test_case": {"identifier": "testSourceUsingChannelName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSourceUsingChannelName() {\n        String topic = UUID.randomUUID().toString();\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"channel-name\", topic);\n        config.put(\"host\", address);\n        config.put(\"port\", port);\n        MqttSource source = new MqttSource(vertx, new MqttConnectorIncomingConfiguration(new MapBasedConfig(config)));\n\n        List<MqttMessage<?>> messages = new ArrayList<>();\n        PublisherBuilder<MqttMessage<?>> stream = source.getSource();\n        stream.forEach(messages::add).run();\n        await().until(source::isSubscribed);\n        AtomicInteger counter = new AtomicInteger();\n        new Thread(() -> usage.produceIntegers(topic, 10, null,\n                counter::getAndIncrement)).start();\n\n        await().atMost(2, TimeUnit.MINUTES).until(() -> messages.size() >= 10);\n        assertThat(messages.stream()\n                .map(Message::getPayload)\n                .map(x -> (byte[]) x)\n                .map(bytes -> Integer.valueOf(new String(bytes)))\n                .collect(Collectors.toList()))\n                        .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n    }", "signature": "void testSourceUsingChannelName()", "full_signature": "@Test public void testSourceUsingChannelName()", "class_method_signature": "MqttSourceTest.testSourceUsingChannelName()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "put", "put", "put", "getSource", "run", "forEach", "until", "await", "start", "produceIntegers", "until", "atMost", "await", "size", "containsExactly", "assertThat", "collect", "map", "map", "map", "stream", "valueOf", "toList"]}, "focal_class": {"identifier": "MqttSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PublisherBuilder<MqttMessage<?>> source;", "modifier": "private final", "type": "PublisherBuilder<MqttMessage<?>>", "declarator": "source", "var_name": "source"}, {"original_string": "private final AtomicBoolean subscribed = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "subscribed = new AtomicBoolean()", "var_name": "subscribed"}, {"original_string": "private final Pattern pattern;", "modifier": "private final", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}], "methods": [{"identifier": "MqttSource", "parameters": "(Vertx vertx, MqttConnectorIncomingConfiguration config)", "modifiers": "public", "return": "", "signature": " MqttSource(Vertx vertx, MqttConnectorIncomingConfiguration config)", "full_signature": "public  MqttSource(Vertx vertx, MqttConnectorIncomingConfiguration config)", "class_method_signature": "MqttSource.MqttSource(Vertx vertx, MqttConnectorIncomingConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String topic, MqttPublishMessage m)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(String topic, MqttPublishMessage m)", "full_signature": "private boolean matches(String topic, MqttPublishMessage m)", "class_method_signature": "MqttSource.matches(String topic, MqttPublishMessage m)", "testcase": false, "constructor": false}, {"identifier": "createFailureHandler", "parameters": "(MqttFailureHandler.Strategy strategy, String channel)", "modifiers": "private", "return": "MqttFailureHandler", "signature": "MqttFailureHandler createFailureHandler(MqttFailureHandler.Strategy strategy, String channel)", "full_signature": "private MqttFailureHandler createFailureHandler(MqttFailureHandler.Strategy strategy, String channel)", "class_method_signature": "MqttSource.createFailureHandler(MqttFailureHandler.Strategy strategy, String channel)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<MqttMessage<?>>", "signature": "PublisherBuilder<MqttMessage<?>> getSource()", "full_signature": " PublisherBuilder<MqttMessage<?>> getSource()", "class_method_signature": "MqttSource.getSource()", "testcase": false, "constructor": false}, {"identifier": "isSubscribed", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isSubscribed()", "full_signature": " boolean isSubscribed()", "class_method_signature": "MqttSource.isSubscribed()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSource.java"}, "focal_method": {"identifier": "getSource", "parameters": "()", "modifiers": "", "return": "PublisherBuilder<MqttMessage<?>>", "body": "PublisherBuilder<MqttMessage<?>> getSource() {\n        return source;\n    }", "signature": "PublisherBuilder<MqttMessage<?>> getSource()", "full_signature": " PublisherBuilder<MqttMessage<?>> getSource()", "class_method_signature": "MqttSource.getSource()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}