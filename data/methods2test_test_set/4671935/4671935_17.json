{"test_class": {"identifier": "TrackLabelsTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackLabelsTest.java"}, "test_case": {"identifier": "labels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void labels() {\n        final List<MLocation> points = Arrays.asList(\n                point(0, FlightMode.MODE_GROUND),\n                point(1000, FlightMode.MODE_GROUND),\n                point(2000, FlightMode.MODE_WINGSUIT),\n                point(3000, FlightMode.MODE_WINGSUIT),\n                point(4000, FlightMode.MODE_WINGSUIT),\n                point(5000, FlightMode.MODE_CANOPY),\n                point(6000, FlightMode.MODE_CANOPY),\n                point(7000, FlightMode.MODE_GROUND)\n        );\n        final TrackLabels labels = TrackLabels.from(points);\n        assertNotNull(labels);\n        assertEquals(2, labels.exit);\n        assertEquals(4, labels.deploy);\n        assertEquals(6, labels.land);\n    }", "signature": "void labels()", "full_signature": "@Test public void labels()", "class_method_signature": "TrackLabelsTest.labels()", "testcase": true, "constructor": false, "invocations": ["asList", "point", "point", "point", "point", "point", "point", "point", "point", "from", "assertNotNull", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "TrackLabels", "superclass": "", "interfaces": "", "fields": [{"original_string": "int exit;", "modifier": "", "type": "int", "declarator": "exit", "var_name": "exit"}, {"original_string": "int deploy;", "modifier": "", "type": "int", "declarator": "deploy", "var_name": "deploy"}, {"original_string": "int land;", "modifier": "", "type": "int", "declarator": "land", "var_name": "land"}], "methods": [{"identifier": "TrackLabels", "parameters": "(int exit, int deploy, int land)", "modifiers": "private", "return": "", "signature": " TrackLabels(int exit, int deploy, int land)", "full_signature": "private  TrackLabels(int exit, int deploy, int land)", "class_method_signature": "TrackLabels.TrackLabels(int exit, int deploy, int land)", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(@NonNull List<MLocation> points)", "modifiers": "@Nullable static", "return": "TrackLabels", "signature": "TrackLabels from(@NonNull List<MLocation> points)", "full_signature": "@Nullable static TrackLabels from(@NonNull List<MLocation> points)", "class_method_signature": "TrackLabels.from(@NonNull List<MLocation> points)", "testcase": false, "constructor": false}, {"identifier": "findExitLand", "parameters": "(@NonNull List<MLocation> points)", "modifiers": "@Nullable private static", "return": "TrackLabels", "signature": "TrackLabels findExitLand(@NonNull List<MLocation> points)", "full_signature": "@Nullable private static TrackLabels findExitLand(@NonNull List<MLocation> points)", "class_method_signature": "TrackLabels.findExitLand(@NonNull List<MLocation> points)", "testcase": false, "constructor": false}, {"identifier": "findDeploy", "parameters": "(@NonNull List<MLocation> points, int exit, int land)", "modifiers": "private static", "return": "int", "signature": "int findDeploy(@NonNull List<MLocation> points, int exit, int land)", "full_signature": "private static int findDeploy(@NonNull List<MLocation> points, int exit, int land)", "class_method_signature": "TrackLabels.findDeploy(@NonNull List<MLocation> points, int exit, int land)", "testcase": false, "constructor": false}, {"identifier": "inFlight", "parameters": "(int mode)", "modifiers": "private static", "return": "int", "signature": "int inFlight(int mode)", "full_signature": "private static int inFlight(int mode)", "class_method_signature": "TrackLabels.inFlight(int mode)", "testcase": false, "constructor": false}, {"identifier": "inFreefall", "parameters": "(int mode)", "modifiers": "private static", "return": "int", "signature": "int inFreefall(int mode)", "full_signature": "private static int inFreefall(int mode)", "class_method_signature": "TrackLabels.inFreefall(int mode)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackLabels.java"}, "focal_method": {"identifier": "from", "parameters": "(@NonNull List<MLocation> points)", "modifiers": "@Nullable static", "return": "TrackLabels", "body": "@Nullable\n    static TrackLabels from(@NonNull List<MLocation> points) {\n        try {\n            final TrackLabels labels = findExitLand(points);\n            if (labels != null) {\n                labels.deploy = findDeploy(points, labels.exit, labels.land);\n            }\n            return labels;\n        } catch (Exception e) {\n            Exceptions.report(e);\n            return null;\n        }\n    }", "signature": "TrackLabels from(@NonNull List<MLocation> points)", "full_signature": "@Nullable static TrackLabels from(@NonNull List<MLocation> points)", "class_method_signature": "TrackLabels.from(@NonNull List<MLocation> points)", "testcase": false, "constructor": false, "invocations": ["findExitLand", "findDeploy", "report"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}