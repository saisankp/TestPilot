{"test_class": {"identifier": "DbEnvironmentFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NE_DB_ENVIRONMENT_NAME = \"NonexistentDbEnvironment\";", "modifier": "private static final", "type": "String", "declarator": "NE_DB_ENVIRONMENT_NAME = \"NonexistentDbEnvironment\"", "var_name": "NE_DB_ENVIRONMENT_NAME"}, {"original_string": "private static final String SOME_ENVIRONMENT_NAME = \"SomeDbEnvironment\";", "modifier": "private static final", "type": "String", "declarator": "SOME_ENVIRONMENT_NAME = \"SomeDbEnvironment\"", "var_name": "SOME_ENVIRONMENT_NAME"}, {"original_string": "private static final String NE_DRIVER_CLASS_NAME = \"non.existent.Db.Driver\";", "modifier": "private static final", "type": "String", "declarator": "NE_DRIVER_CLASS_NAME = \"non.existent.Db.Driver\"", "var_name": "NE_DRIVER_CLASS_NAME"}, {"original_string": "private final DbEnvironmentFactory factory = DbEnvironmentFactory.newFactoryInstance();", "modifier": "private final", "type": "DbEnvironmentFactory", "declarator": "factory = DbEnvironmentFactory.newFactoryInstance()", "var_name": "factory"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "dbfit-java/core/src/test/java/dbfit/api/DbEnvironmentFactoryTest.java"}, "test_case": {"identifier": "newDbEnvironmentWithMissingDriverShouldRaiseSelfExplainingException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newDbEnvironmentWithMissingDriverShouldRaiseSelfExplainingException() throws Exception {\n        expectedEx.expectMessage(\"Cannot load \" + SOME_ENVIRONMENT_NAME\n                + \" database driver \" + NE_DRIVER_CLASS_NAME);\n\n        factory.createEnvironmentInstance(SOME_ENVIRONMENT_NAME);\n    }", "signature": "void newDbEnvironmentWithMissingDriverShouldRaiseSelfExplainingException()", "full_signature": "@Test public void newDbEnvironmentWithMissingDriverShouldRaiseSelfExplainingException()", "class_method_signature": "DbEnvironmentFactoryTest.newDbEnvironmentWithMissingDriverShouldRaiseSelfExplainingException()", "testcase": true, "constructor": false, "invocations": ["expectMessage", "createEnvironmentInstance"]}, "focal_class": {"identifier": "DbEnvironmentFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DBEnvironment environment;", "modifier": "private static", "type": "DBEnvironment", "declarator": "environment", "var_name": "environment"}, {"original_string": "private Map<String, EnvironmentDescriptor> environments =\n        new HashMap<String, EnvironmentDescriptor>();", "modifier": "private", "type": "Map<String, EnvironmentDescriptor>", "declarator": "environments =\n        new HashMap<String, EnvironmentDescriptor>()", "var_name": "environments"}], "methods": [{"identifier": "initDefaultEnvironments", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initDefaultEnvironments()", "full_signature": "private void initDefaultEnvironments()", "class_method_signature": "DbEnvironmentFactory.initDefaultEnvironments()", "testcase": false, "constructor": false}, {"identifier": "getDefaultEnvironment", "parameters": "()", "modifiers": "public static", "return": "DBEnvironment", "signature": "DBEnvironment getDefaultEnvironment()", "full_signature": "public static DBEnvironment getDefaultEnvironment()", "class_method_signature": "DbEnvironmentFactory.getDefaultEnvironment()", "testcase": false, "constructor": false}, {"identifier": "setDefaultEnvironment", "parameters": "(DBEnvironment newDefaultEnvironment)", "modifiers": "public static", "return": "void", "signature": "void setDefaultEnvironment(DBEnvironment newDefaultEnvironment)", "full_signature": "public static void setDefaultEnvironment(DBEnvironment newDefaultEnvironment)", "class_method_signature": "DbEnvironmentFactory.setDefaultEnvironment(DBEnvironment newDefaultEnvironment)", "testcase": false, "constructor": false}, {"identifier": "newFactoryInstance", "parameters": "()", "modifiers": "public static", "return": "DbEnvironmentFactory", "signature": "DbEnvironmentFactory newFactoryInstance()", "full_signature": "public static DbEnvironmentFactory newFactoryInstance()", "class_method_signature": "DbEnvironmentFactory.newFactoryInstance()", "testcase": false, "constructor": false}, {"identifier": "DbEnvironmentFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " DbEnvironmentFactory()", "full_signature": "private  DbEnvironmentFactory()", "class_method_signature": "DbEnvironmentFactory.DbEnvironmentFactory()", "testcase": false, "constructor": true}, {"identifier": "normalise", "parameters": "(String environmentName)", "modifiers": "private static", "return": "String", "signature": "String normalise(String environmentName)", "full_signature": "private static String normalise(String environmentName)", "class_method_signature": "DbEnvironmentFactory.normalise(String environmentName)", "testcase": false, "constructor": false}, {"identifier": "registerEnv", "parameters": "(String environmentName, String driverClassName)", "modifiers": "public", "return": "void", "signature": "void registerEnv(String environmentName, String driverClassName)", "full_signature": "public void registerEnv(String environmentName, String driverClassName)", "class_method_signature": "DbEnvironmentFactory.registerEnv(String environmentName, String driverClassName)", "testcase": false, "constructor": false}, {"identifier": "unregisterEnv", "parameters": "(String environmentName)", "modifiers": "public", "return": "EnvironmentDescriptor", "signature": "EnvironmentDescriptor unregisterEnv(String environmentName)", "full_signature": "public EnvironmentDescriptor unregisterEnv(String environmentName)", "class_method_signature": "DbEnvironmentFactory.unregisterEnv(String environmentName)", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentDescriptor", "parameters": "(String requestedEnv)", "modifiers": "private", "return": "EnvironmentDescriptor", "signature": "EnvironmentDescriptor getEnvironmentDescriptor(String requestedEnv)", "full_signature": "private EnvironmentDescriptor getEnvironmentDescriptor(String requestedEnv)", "class_method_signature": "DbEnvironmentFactory.getEnvironmentDescriptor(String requestedEnv)", "testcase": false, "constructor": false}, {"identifier": "createEnvironmentInstance", "parameters": "(String requestedEnv)", "modifiers": "public", "return": "DBEnvironment", "signature": "DBEnvironment createEnvironmentInstance(String requestedEnv)", "full_signature": "public DBEnvironment createEnvironmentInstance(String requestedEnv)", "class_method_signature": "DbEnvironmentFactory.createEnvironmentInstance(String requestedEnv)", "testcase": false, "constructor": false}, {"identifier": "newEnvironmentInstance", "parameters": "(String requestedEnv)", "modifiers": "public static", "return": "DBEnvironment", "signature": "DBEnvironment newEnvironmentInstance(String requestedEnv)", "full_signature": "public static DBEnvironment newEnvironmentInstance(String requestedEnv)", "class_method_signature": "DbEnvironmentFactory.newEnvironmentInstance(String requestedEnv)", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/api/DbEnvironmentFactory.java"}, "focal_method": {"identifier": "createEnvironmentInstance", "parameters": "(String requestedEnv)", "modifiers": "public", "return": "DBEnvironment", "body": "public DBEnvironment createEnvironmentInstance(String requestedEnv) {\n        EnvironmentDescriptor descriptor = getEnvironmentDescriptor(requestedEnv);\n        if (null == descriptor) {\n            throw new IllegalArgumentException(\"DB Environment not supported:\" + requestedEnv);\n        }\n\n        return descriptor.createEnvironmentInstance();\n    }", "signature": "DBEnvironment createEnvironmentInstance(String requestedEnv)", "full_signature": "public DBEnvironment createEnvironmentInstance(String requestedEnv)", "class_method_signature": "DbEnvironmentFactory.createEnvironmentInstance(String requestedEnv)", "testcase": false, "constructor": false, "invocations": ["getEnvironmentDescriptor", "createEnvironmentInstance"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}