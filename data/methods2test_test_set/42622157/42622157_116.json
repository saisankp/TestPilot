{"test_class": {"identifier": "KargerMinCutVariationTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(KargerMinCutVariationTest.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KargerMinCutVariationTest.class)", "var_name": "LOGGER"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/targetallocation/criteria/minexternalconnections/KargerMinCutVariationTest.java"}, "test_case": {"identifier": "twoTargetLabelsOnePossibleResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoTargetLabelsOnePossibleResult() {\n        ServiceTemplateId id = new ServiceTemplateId(\"http://www.winery.opentosca.org/test/targetallocation/servicetemplates\",\n            \"MinExternalConnectionsTest1\", false);\n        TopologyWrapper topology = new TopologyWrapper(repository.getElement(id).getTopologyTemplate());\n        ConnectsToGraph connectsToGraph = new ConnectsToGraph(topology);\n        KargerMinCutVariation kargerMinCutVariation = new KargerMinCutVariation(connectsToGraph);\n        List<ConnectsToGraph> results = new ArrayList<>(kargerMinCutVariation.computeTargetLabelPartitions());\n\n        // testing a monte carlo algorithm doesn't always work\n        if (results.size() != 1 || results.get(0).getEdges().size() != 1) {\n            LOGGER.debug(\"Monte Carlo Algorithm produced wrong result\");\n            return;\n        }\n\n        assertEquals(results.size(), 1);\n        ConnectsToGraph result = results.get(0);\n        assertEquals(result.getEdges().size(), 1);\n        assertEquals(result.getNodes().size(), 2);\n\n        Set<String> pastureProvider = new HashSet<>(Collections.singletonList(\"shetland_pony\"));\n        Set<String> fieldProvider = new HashSet<>(Arrays.asList(\"shetland_pony_2\", \"shetland_pony_3\", \"shetland_pony_4\"));\n        ConnectsToGraph.Node pastureNode = result.getNodes().stream()\n            .filter(node -> node.getTargetLabel().equalsIgnoreCase(\"PastureProvider\")).collect(Collectors.toList()).get(0);\n        ConnectsToGraph.Node fieldNode = result.getNodes().stream()\n            .filter(node -> node.getTargetLabel().equalsIgnoreCase(\"FieldProvider\")).collect(Collectors.toList()).get(0);\n        assertEquals(pastureNode.getNodeTemplateIds(), pastureProvider);\n        assertEquals(fieldNode.getNodeTemplateIds(), fieldProvider);\n    }", "signature": "void twoTargetLabelsOnePossibleResult()", "full_signature": "@Test public void twoTargetLabelsOnePossibleResult()", "class_method_signature": "KargerMinCutVariationTest.twoTargetLabelsOnePossibleResult()", "testcase": true, "constructor": false, "invocations": ["getTopologyTemplate", "getElement", "computeTargetLabelPartitions", "size", "size", "getEdges", "get", "debug", "assertEquals", "size", "get", "assertEquals", "size", "getEdges", "assertEquals", "size", "getNodes", "singletonList", "asList", "get", "collect", "filter", "stream", "getNodes", "equalsIgnoreCase", "getTargetLabel", "toList", "get", "collect", "filter", "stream", "getNodes", "equalsIgnoreCase", "getTargetLabel", "toList", "assertEquals", "getNodeTemplateIds", "assertEquals", "getNodeTemplateIds"]}, "focal_class": {"identifier": "KargerMinCutVariation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger LOGGER = LoggerFactory.getLogger(KargerMinCutVariation.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KargerMinCutVariation.class)", "var_name": "LOGGER"}, {"original_string": "private ConnectsToGraph original;", "modifier": "private", "type": "ConnectsToGraph", "declarator": "original", "var_name": "original"}, {"original_string": "private ConnectsToGraph current;", "modifier": "private", "type": "ConnectsToGraph", "declarator": "current", "var_name": "current"}, {"original_string": "private int repetitions;", "modifier": "private", "type": "int", "declarator": "repetitions", "var_name": "repetitions"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "methods": [{"identifier": "KargerMinCutVariation", "parameters": "(ConnectsToGraph graph)", "modifiers": "public", "return": "", "signature": " KargerMinCutVariation(ConnectsToGraph graph)", "full_signature": "public  KargerMinCutVariation(ConnectsToGraph graph)", "class_method_signature": "KargerMinCutVariation.KargerMinCutVariation(ConnectsToGraph graph)", "testcase": false, "constructor": true}, {"identifier": "computeTargetLabelPartitions", "parameters": "()", "modifiers": "public", "return": "Set<ConnectsToGraph>", "signature": "Set<ConnectsToGraph> computeTargetLabelPartitions()", "full_signature": "public Set<ConnectsToGraph> computeTargetLabelPartitions()", "class_method_signature": "KargerMinCutVariation.computeTargetLabelPartitions()", "testcase": false, "constructor": false}, {"identifier": "minCut", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void minCut()", "full_signature": "private void minCut()", "class_method_signature": "KargerMinCutVariation.minCut()", "testcase": false, "constructor": false}, {"identifier": "getRandomEdge", "parameters": "()", "modifiers": "private", "return": "ConnectsToGraph.Edge", "signature": "ConnectsToGraph.Edge getRandomEdge()", "full_signature": "private ConnectsToGraph.Edge getRandomEdge()", "class_method_signature": "KargerMinCutVariation.getRandomEdge()", "testcase": false, "constructor": false}, {"identifier": "contract", "parameters": "(ConnectsToGraph.Edge edgeToContract)", "modifiers": "private", "return": "void", "signature": "void contract(ConnectsToGraph.Edge edgeToContract)", "full_signature": "private void contract(ConnectsToGraph.Edge edgeToContract)", "class_method_signature": "KargerMinCutVariation.contract(ConnectsToGraph.Edge edgeToContract)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "modifiers": "private", "return": "void", "signature": "void merge(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "full_signature": "private void merge(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "class_method_signature": "KargerMinCutVariation.merge(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "testcase": false, "constructor": false}, {"identifier": "reassignEdges", "parameters": "(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "modifiers": "private", "return": "void", "signature": "void reassignEdges(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "full_signature": "private void reassignEdges(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "class_method_signature": "KargerMinCutVariation.reassignEdges(ConnectsToGraph.Node nodeToMergeInto, ConnectsToGraph.Node nodeToMerge)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/targetallocation/criteria/minexternalconnections/KargerMinCutVariation.java"}, "focal_method": {"identifier": "computeTargetLabelPartitions", "parameters": "()", "modifiers": "public", "return": "Set<ConnectsToGraph>", "body": "public Set<ConnectsToGraph> computeTargetLabelPartitions() {\n        Set<ConnectsToGraph> best = new HashSet<>();\n        int bestMinCut = Integer.MAX_VALUE;\n        int currentMinCut;\n\n        for (int i = 0; i < repetitions; i++) {\n            current = new ConnectsToGraph(original);\n            minCut();\n            currentMinCut = current.getEdges().size();\n\n            if (currentMinCut < bestMinCut) {\n                bestMinCut = currentMinCut;\n                best.clear();\n                best.add(current);\n            } else if (currentMinCut == bestMinCut) {\n                best.add(current);\n            }\n        }\n        LOGGER.debug(\"Minimum cut of \" + bestMinCut +\n            \" found for \" + best.size() + \" possibilities in \" +\n            repetitions + \" repetitions\");\n        return best;\n    }", "signature": "Set<ConnectsToGraph> computeTargetLabelPartitions()", "full_signature": "public Set<ConnectsToGraph> computeTargetLabelPartitions()", "class_method_signature": "KargerMinCutVariation.computeTargetLabelPartitions()", "testcase": false, "constructor": false, "invocations": ["minCut", "size", "getEdges", "clear", "add", "add", "debug", "size"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}