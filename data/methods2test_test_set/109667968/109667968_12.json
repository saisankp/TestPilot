{"test_class": {"identifier": "DataSourceConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/io/ona/kujaku/utils/config/DataSourceConfigTest.java"}, "test_case": {"identifier": "testExtractDataSourceNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractDataSourceNames() throws InvalidMapBoxStyleException {\n        // Assert that the default size is 0\n        Assert.assertEquals(0, DataSourceConfig.extractDataSourceNames(new ArrayList<DataSourceConfig>()).length);\n\n        ArrayList<DataSourceConfig> configs1 = new ArrayList<>();\n        int size1 = 6;\n        for (int i = 0; i < size1; i++) {\n            configs1.add(new DataSourceConfig(String.valueOf(i)));\n        }\n        // Assert the size of the generated list\n        String[] names1 = DataSourceConfig.extractDataSourceNames(configs1);\n        Assert.assertEquals(size1, names1.length);\n        // Assert the order of names\n        for (int i = 0; i < names1.length; i++) {\n            Assert.assertEquals(String.valueOf(i), names1[i]);\n        }\n    }", "signature": "void testExtractDataSourceNames()", "full_signature": "@Test public void testExtractDataSourceNames()", "class_method_signature": "DataSourceConfigTest.testExtractDataSourceNames()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "extractDataSourceNames", "add", "valueOf", "extractDataSourceNames", "assertEquals", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "DataSourceConfig", "superclass": "", "interfaces": "implements Config", "fields": [{"original_string": "public static final String KEY_NAME = \"name\";", "modifier": "public static final", "type": "String", "declarator": "KEY_NAME = \"name\"", "var_name": "KEY_NAME"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "DataSourceConfig", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataSourceConfig()", "full_signature": "public  DataSourceConfig()", "class_method_signature": "DataSourceConfig.DataSourceConfig()", "testcase": false, "constructor": true}, {"identifier": "DataSourceConfig", "parameters": "(@NonNull String name)", "modifiers": "public", "return": "", "signature": " DataSourceConfig(@NonNull String name)", "full_signature": "public  DataSourceConfig(@NonNull String name)", "class_method_signature": "DataSourceConfig.DataSourceConfig(@NonNull String name)", "testcase": false, "constructor": true}, {"identifier": "DataSourceConfig", "parameters": "(JSONObject jsonObject)", "modifiers": "public", "return": "", "signature": " DataSourceConfig(JSONObject jsonObject)", "full_signature": "public  DataSourceConfig(JSONObject jsonObject)", "class_method_signature": "DataSourceConfig.DataSourceConfig(JSONObject jsonObject)", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "@Override public boolean isValid()", "class_method_signature": "DataSourceConfig.isValid()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "DataSourceConfig.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(@NonNull String name)", "modifiers": "public", "return": "void", "signature": "void setName(@NonNull String name)", "full_signature": "public void setName(@NonNull String name)", "class_method_signature": "DataSourceConfig.setName(@NonNull String name)", "testcase": false, "constructor": false}, {"identifier": "toJsonObject", "parameters": "()", "modifiers": "@Override public", "return": "JSONObject", "signature": "JSONObject toJsonObject()", "full_signature": "@Override public JSONObject toJsonObject()", "class_method_signature": "DataSourceConfig.toJsonObject()", "testcase": false, "constructor": false}, {"identifier": "extractDataSourceNames", "parameters": "(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "modifiers": "public static", "return": "String[]", "signature": "String[] extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "full_signature": "public static String[] extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "class_method_signature": "DataSourceConfig.extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/io/ona/kujaku/utils/config/DataSourceConfig.java"}, "focal_method": {"identifier": "extractDataSourceNames", "parameters": "(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "modifiers": "public static", "return": "String[]", "body": "public static String[] extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs) {\n        String[] names = new String[dataSourceConfigs.size()];\n        for (int i = 0; i < dataSourceConfigs.size(); i++) {\n            names[i] = dataSourceConfigs.get(i).getName();\n        }\n\n        return names;\n    }", "signature": "String[] extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "full_signature": "public static String[] extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "class_method_signature": "DataSourceConfig.extractDataSourceNames(@NonNull ArrayList<DataSourceConfig> dataSourceConfigs)", "testcase": false, "constructor": false, "invocations": ["size", "size", "getName", "get"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}