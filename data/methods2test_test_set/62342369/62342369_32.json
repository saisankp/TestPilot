{"test_class": {"identifier": "PluginManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-core/src/test/java/step/core/plugins/PluginManagerTest.java"}, "test_case": {"identifier": "testBuilderWithPluginList3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBuilderWithPluginList3() throws CircularDependencyException {\n\t\tPluginManager<TestPluginInterface> pluginManager = pluginManager().withPlugins(plugins(new TestPlugin1(),new TestPlugin2(),new TestPlugin3(),new TestPlugin4(),new TestPlugin5())).build();\n\t\tassertOrder(pluginManager, TestPlugin1.class, TestPlugin3.class, TestPlugin4.class, TestPlugin5.class, TestPlugin2.class);\n\t}", "signature": "void testBuilderWithPluginList3()", "full_signature": "@Test public void testBuilderWithPluginList3()", "class_method_signature": "PluginManagerTest.testBuilderWithPluginList3()", "testcase": true, "constructor": false, "invocations": ["build", "withPlugins", "pluginManager", "plugins", "assertOrder"]}, "focal_class": {"identifier": "PluginManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(PluginManager.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PluginManager.class)", "var_name": "logger"}, {"original_string": "private final Class<T> pluginClass;", "modifier": "private final", "type": "Class<T>", "declarator": "pluginClass", "var_name": "pluginClass"}, {"original_string": "private final List<T> plugins;", "modifier": "private final", "type": "List<T>", "declarator": "plugins", "var_name": "plugins"}], "methods": [{"identifier": "PluginManager", "parameters": "(Class<T> pluginClass, List<T> plugins)", "modifiers": "private", "return": "", "signature": " PluginManager(Class<T> pluginClass, List<T> plugins)", "full_signature": "private  PluginManager(Class<T> pluginClass, List<T> plugins)", "class_method_signature": "PluginManager.PluginManager(Class<T> pluginClass, List<T> plugins)", "testcase": false, "constructor": true}, {"identifier": "getProxy", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getProxy()", "full_signature": "public T getProxy()", "class_method_signature": "PluginManager.getProxy()", "testcase": false, "constructor": false}, {"identifier": "getProxy", "parameters": "(Class<I> proxyInterface)", "modifiers": "public", "return": "I", "signature": "I getProxy(Class<I> proxyInterface)", "full_signature": "public I getProxy(Class<I> proxyInterface)", "class_method_signature": "PluginManager.getProxy(Class<I> proxyInterface)", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getPlugins()", "full_signature": "public List<T> getPlugins()", "class_method_signature": "PluginManager.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(Class<T> pluginClass)", "modifiers": "public static", "return": "Builder<T>", "signature": "Builder<T> builder(Class<T> pluginClass)", "full_signature": "public static Builder<T> builder(Class<T> pluginClass)", "class_method_signature": "PluginManager.builder(Class<T> pluginClass)", "testcase": false, "constructor": false}], "file": "step-core/src/main/java/step/core/plugins/PluginManager.java"}, "focal_method": {"identifier": "PluginManager", "parameters": "(Class<T> pluginClass, List<T> plugins)", "modifiers": "private", "return": "", "body": "private PluginManager(Class<T> pluginClass, List<T> plugins) {\n\t\tsuper();\n\t\tthis.pluginClass = pluginClass;\n\t\tthis.plugins = plugins;\n\t\t\n\t\tlogger.info(\"Starting plugin manager with following plugins: \"+Arrays.toString(plugins.toArray()));\n\t}", "signature": " PluginManager(Class<T> pluginClass, List<T> plugins)", "full_signature": "private  PluginManager(Class<T> pluginClass, List<T> plugins)", "class_method_signature": "PluginManager.PluginManager(Class<T> pluginClass, List<T> plugins)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}