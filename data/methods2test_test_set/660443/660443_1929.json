{"test_class": {"identifier": "SmilesParserTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static SmilesParser sp = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "private static", "type": "SmilesParser", "declarator": "sp = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "sp"}], "file": "storage/smiles/src/test/java/org/openscience/cdk/smiles/SmilesParserTest.java"}, "test_case": {"identifier": "noReactants", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void noReactants() throws Exception {\n        IReaction reaction = sp.parseReactionSmiles(\">>C\");\n        Assert.assertEquals(0, reaction.getReactantCount());\n        Assert.assertEquals(1, reaction.getProductCount());\n    }", "signature": "void noReactants()", "full_signature": "@Test public void noReactants()", "class_method_signature": "SmilesParserTest.noReactants()", "testcase": true, "constructor": false, "invocations": ["parseReactionSmiles", "assertEquals", "getReactantCount", "assertEquals", "getProductCount"]}, "focal_class": {"identifier": "SmilesParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ILoggingTool logger = LoggingToolFactory.createLoggingTool(SmilesParser.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(SmilesParser.class)", "var_name": "logger"}, {"original_string": "private final IChemObjectBuilder builder;", "modifier": "private final", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private final BeamToCDK          beamToCDK;", "modifier": "private final", "type": "BeamToCDK", "declarator": "beamToCDK", "var_name": "beamToCDK"}, {"original_string": "private boolean                  kekulise = true;", "modifier": "private", "type": "boolean", "declarator": "kekulise = true", "var_name": "kekulise"}, {"original_string": "private boolean                  strict = false;", "modifier": "private", "type": "boolean", "declarator": "strict = false", "var_name": "strict"}], "methods": [{"identifier": "SmilesParser", "parameters": "(final IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " SmilesParser(final IChemObjectBuilder builder)", "full_signature": "public  SmilesParser(final IChemObjectBuilder builder)", "class_method_signature": "SmilesParser.SmilesParser(final IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "setStrict", "parameters": "(boolean strict)", "modifiers": "public", "return": "void", "signature": "void setStrict(boolean strict)", "full_signature": "public void setStrict(boolean strict)", "class_method_signature": "SmilesParser.setStrict(boolean strict)", "testcase": false, "constructor": false}, {"identifier": "parseReactionSmiles", "parameters": "(String smiles)", "modifiers": "public", "return": "IReaction", "signature": "IReaction parseReactionSmiles(String smiles)", "full_signature": "public IReaction parseReactionSmiles(String smiles)", "class_method_signature": "SmilesParser.parseReactionSmiles(String smiles)", "testcase": false, "constructor": false}, {"identifier": "parseSmiles", "parameters": "(String smiles)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer parseSmiles(String smiles)", "full_signature": "public IAtomContainer parseSmiles(String smiles)", "class_method_signature": "SmilesParser.parseSmiles(String smiles)", "testcase": false, "constructor": false}, {"identifier": "parseSmiles", "parameters": "(String smiles, boolean isRxnPart)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer parseSmiles(String smiles, boolean isRxnPart)", "full_signature": "private IAtomContainer parseSmiles(String smiles, boolean isRxnPart)", "class_method_signature": "SmilesParser.parseSmiles(String smiles, boolean isRxnPart)", "testcase": false, "constructor": false}, {"identifier": "parseIntSafe", "parameters": "(String val)", "modifiers": "private", "return": "int", "signature": "int parseIntSafe(String val)", "full_signature": "private int parseIntSafe(String val)", "class_method_signature": "SmilesParser.parseIntSafe(String val)", "testcase": false, "constructor": false}, {"identifier": "parseMolCXSMILES", "parameters": "(String title, IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void parseMolCXSMILES(String title, IAtomContainer mol)", "full_signature": "private void parseMolCXSMILES(String title, IAtomContainer mol)", "class_method_signature": "SmilesParser.parseMolCXSMILES(String title, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "parseRxnCXSMILES", "parameters": "(String title, IReaction rxn)", "modifiers": "private", "return": "void", "signature": "void parseRxnCXSMILES(String title, IReaction rxn)", "full_signature": "private void parseRxnCXSMILES(String title, IReaction rxn)", "class_method_signature": "SmilesParser.parseRxnCXSMILES(String title, IReaction rxn)", "testcase": false, "constructor": false}, {"identifier": "handleFragmentGrouping", "parameters": "(IReaction rxn, CxSmilesState cxstate)", "modifiers": "private", "return": "void", "signature": "void handleFragmentGrouping(IReaction rxn, CxSmilesState cxstate)", "full_signature": "private void handleFragmentGrouping(IReaction rxn, CxSmilesState cxstate)", "class_method_signature": "SmilesParser.handleFragmentGrouping(IReaction rxn, CxSmilesState cxstate)", "testcase": false, "constructor": false}, {"identifier": "assignCxSmilesInfo", "parameters": "(IChemObjectBuilder bldr,\n                                    IChemObject chemObj,\n                                    List<IAtom> atoms,\n                                    Map<IAtom, IAtomContainer> atomToMol,\n                                    CxSmilesState cxstate)", "modifiers": "private", "return": "void", "signature": "void assignCxSmilesInfo(IChemObjectBuilder bldr,\n                                    IChemObject chemObj,\n                                    List<IAtom> atoms,\n                                    Map<IAtom, IAtomContainer> atomToMol,\n                                    CxSmilesState cxstate)", "full_signature": "private void assignCxSmilesInfo(IChemObjectBuilder bldr,\n                                    IChemObject chemObj,\n                                    List<IAtom> atoms,\n                                    Map<IAtom, IAtomContainer> atomToMol,\n                                    CxSmilesState cxstate)", "class_method_signature": "SmilesParser.assignCxSmilesInfo(IChemObjectBuilder bldr,\n                                    IChemObject chemObj,\n                                    List<IAtom> atoms,\n                                    Map<IAtom, IAtomContainer> atomToMol,\n                                    CxSmilesState cxstate)", "testcase": false, "constructor": false}, {"identifier": "setPreservingAromaticity", "parameters": "(boolean preservingAromaticity)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setPreservingAromaticity(boolean preservingAromaticity)", "full_signature": "@Deprecated public void setPreservingAromaticity(boolean preservingAromaticity)", "class_method_signature": "SmilesParser.setPreservingAromaticity(boolean preservingAromaticity)", "testcase": false, "constructor": false}, {"identifier": "isPreservingAromaticity", "parameters": "()", "modifiers": "@Deprecated public", "return": "boolean", "signature": "boolean isPreservingAromaticity()", "full_signature": "@Deprecated public boolean isPreservingAromaticity()", "class_method_signature": "SmilesParser.isPreservingAromaticity()", "testcase": false, "constructor": false}, {"identifier": "kekulise", "parameters": "(boolean kekulise)", "modifiers": "public", "return": "void", "signature": "void kekulise(boolean kekulise)", "full_signature": "public void kekulise(boolean kekulise)", "class_method_signature": "SmilesParser.kekulise(boolean kekulise)", "testcase": false, "constructor": false}], "file": "storage/smiles/src/main/java/org/openscience/cdk/smiles/SmilesParser.java"}, "focal_method": {"identifier": "parseReactionSmiles", "parameters": "(String smiles)", "modifiers": "public", "return": "IReaction", "body": "public IReaction parseReactionSmiles(String smiles) throws InvalidSmilesException {\n\n        if (!smiles.contains(\">\"))\n            throw new InvalidSmilesException(\"Not a reaction SMILES: \" + smiles);\n\n        final int first  = smiles.indexOf('>');\n        final int second = smiles.indexOf('>', first + 1);\n\n        if (second < 0)\n            throw new InvalidSmilesException(\"Invalid reaction SMILES:\" + smiles);\n\n        final String reactants = smiles.substring(0, first);\n        final String agents = smiles.substring(first + 1, second);\n        final String products = smiles.substring(second + 1, smiles.length());\n\n        IReaction reaction = builder.newInstance(IReaction.class);\n\n        // add reactants\n        if (!reactants.isEmpty()) {\n            IAtomContainer reactantContainer = parseSmiles(reactants, true);\n            IAtomContainerSet reactantSet = ConnectivityChecker.partitionIntoMolecules(reactantContainer);\n            for (int i = 0; i < reactantSet.getAtomContainerCount(); i++) {\n                reaction.addReactant(reactantSet.getAtomContainer(i));\n            }\n        }\n\n        // add agents\n        if (!agents.isEmpty()) {\n            IAtomContainer agentContainer = parseSmiles(agents, true);\n            IAtomContainerSet agentSet = ConnectivityChecker.partitionIntoMolecules(agentContainer);\n            for (int i = 0; i < agentSet.getAtomContainerCount(); i++) {\n                reaction.addAgent(agentSet.getAtomContainer(i));\n            }\n        }\n\n        String title = null;\n\n        // add products\n        if (!products.isEmpty()) {\n            IAtomContainer productContainer = parseSmiles(products, true);\n            IAtomContainerSet productSet = ConnectivityChecker.partitionIntoMolecules(productContainer);\n            for (int i = 0; i < productSet.getAtomContainerCount(); i++) {\n                reaction.addProduct(productSet.getAtomContainer(i));\n            }\n            reaction.setProperty(CDKConstants.TITLE, title = productContainer.getProperty(CDKConstants.TITLE));\n        }\n\n        try {\n            // CXSMILES layer\n            parseRxnCXSMILES(title, reaction);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new InvalidSmilesException(\"Error parsing CXSMILES:\" + e.getMessage());\n        }\n\n        return reaction;\n    }", "signature": "IReaction parseReactionSmiles(String smiles)", "full_signature": "public IReaction parseReactionSmiles(String smiles)", "class_method_signature": "SmilesParser.parseReactionSmiles(String smiles)", "testcase": false, "constructor": false, "invocations": ["contains", "indexOf", "indexOf", "substring", "substring", "substring", "length", "newInstance", "isEmpty", "parseSmiles", "partitionIntoMolecules", "getAtomContainerCount", "addReactant", "getAtomContainer", "isEmpty", "parseSmiles", "partitionIntoMolecules", "getAtomContainerCount", "addAgent", "getAtomContainer", "isEmpty", "parseSmiles", "partitionIntoMolecules", "getAtomContainerCount", "addProduct", "getAtomContainer", "setProperty", "getProperty", "parseRxnCXSMILES", "printStackTrace", "getMessage"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}