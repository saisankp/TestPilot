{"test_class": {"identifier": "ConnectionLoggerRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ID = ConnectionLoggerRegistryTest.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "ID = ConnectionLoggerRegistryTest.class.getSimpleName()", "var_name": "ID"}, {"original_string": "private final ConnectionLoggerRegistry underTest =\n            ConnectionLoggerRegistry.fromConfig(TestConstants.MONITORING_CONFIG.logger());", "modifier": "private final", "type": "ConnectionLoggerRegistry", "declarator": "underTest =\n            ConnectionLoggerRegistry.fromConfig(TestConstants.MONITORING_CONFIG.logger())", "var_name": "underTest"}, {"original_string": "private final Duration moreThanLoggingDuration =\n            TestConstants.MONITORING_CONFIG.logger().logDuration()\n                    .plusMinutes(1);", "modifier": "private final", "type": "Duration", "declarator": "moreThanLoggingDuration =\n            TestConstants.MONITORING_CONFIG.logger().logDuration()\n                    .plusMinutes(1)", "var_name": "moreThanLoggingDuration"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/monitoring/logs/ConnectionLoggerRegistryTest.java"}, "test_case": {"identifier": "isActiveForConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isActiveForConnection() {\n        final ConnectionId connectionId = connectionId();\n        underTest.initForConnection(connection(connectionId));\n\n        assertThat(underTest.isActiveForConnection(connectionId)).isFalse();\n\n        underTest.unmuteForConnection(connectionId);\n\n        assertThat(underTest.isActiveForConnection(connectionId)).isTrue();\n\n        underTest.muteForConnection(connectionId);\n\n        assertThat(underTest.isActiveForConnection(connectionId)).isFalse();\n    }", "signature": "void isActiveForConnection()", "full_signature": "@Test public void isActiveForConnection()", "class_method_signature": "ConnectionLoggerRegistryTest.isActiveForConnection()", "testcase": true, "constructor": false, "invocations": ["connectionId", "initForConnection", "connection", "isFalse", "assertThat", "isActiveForConnection", "unmuteForConnection", "isTrue", "assertThat", "isActiveForConnection", "muteForConnection", "isFalse", "assertThat", "isActiveForConnection"]}, "focal_class": {"identifier": "ConnectionLoggerRegistry", "superclass": "", "interfaces": "implements ConnectionMonitorRegistry<ConnectionLogger>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionLoggerRegistry.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConnectionLoggerRegistry.class)", "var_name": "LOGGER"}, {"original_string": "private static final ConcurrentMap<MapKey, MuteableConnectionLogger> loggers = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<MapKey, MuteableConnectionLogger>", "declarator": "loggers = new ConcurrentHashMap<>()", "var_name": "loggers"}, {"original_string": "private static final ConcurrentMap<EntityId, LogMetadata> metadata = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<EntityId, LogMetadata>", "declarator": "metadata = new ConcurrentHashMap<>()", "var_name": "metadata"}, {"original_string": "private static final String RESPONSES_ADDRESS = \"_responses\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSES_ADDRESS = \"_responses\"", "var_name": "RESPONSES_ADDRESS"}, {"original_string": "private final int successCapacity;", "modifier": "private final", "type": "int", "declarator": "successCapacity", "var_name": "successCapacity"}, {"original_string": "private final int failureCapacity;", "modifier": "private final", "type": "int", "declarator": "failureCapacity", "var_name": "failureCapacity"}, {"original_string": "private final TemporalAmount loggingDuration;", "modifier": "private final", "type": "TemporalAmount", "declarator": "loggingDuration", "var_name": "loggingDuration"}, {"original_string": "private final long maximumLogSizeInByte;", "modifier": "private final", "type": "long", "declarator": "maximumLogSizeInByte", "var_name": "maximumLogSizeInByte"}], "methods": [{"identifier": "ConnectionLoggerRegistry", "parameters": "(final int successCapacity, final int failureCapacity,\n            final long maximumLogSizeInByte, final Duration loggingDuration)", "modifiers": "private", "return": "", "signature": " ConnectionLoggerRegistry(final int successCapacity, final int failureCapacity,\n            final long maximumLogSizeInByte, final Duration loggingDuration)", "full_signature": "private  ConnectionLoggerRegistry(final int successCapacity, final int failureCapacity,\n            final long maximumLogSizeInByte, final Duration loggingDuration)", "class_method_signature": "ConnectionLoggerRegistry.ConnectionLoggerRegistry(final int successCapacity, final int failureCapacity,\n            final long maximumLogSizeInByte, final Duration loggingDuration)", "testcase": false, "constructor": true}, {"identifier": "fromConfig", "parameters": "(final MonitoringLoggerConfig config)", "modifiers": "public static", "return": "ConnectionLoggerRegistry", "signature": "ConnectionLoggerRegistry fromConfig(final MonitoringLoggerConfig config)", "full_signature": "public static ConnectionLoggerRegistry fromConfig(final MonitoringLoggerConfig config)", "class_method_signature": "ConnectionLoggerRegistry.fromConfig(final MonitoringLoggerConfig config)", "testcase": false, "constructor": false}, {"identifier": "aggregateLogs", "parameters": "(final ConnectionId connectionId)", "modifiers": "public", "return": "ConnectionLogs", "signature": "ConnectionLogs aggregateLogs(final ConnectionId connectionId)", "full_signature": "public ConnectionLogs aggregateLogs(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.aggregateLogs(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "restrictMaxLogEntriesLength", "parameters": "(final List<LogEntry> originalLogEntries, final ConnectionId connectionId)", "modifiers": "private", "return": "List<LogEntry>", "signature": "List<LogEntry> restrictMaxLogEntriesLength(final List<LogEntry> originalLogEntries, final ConnectionId connectionId)", "full_signature": "private List<LogEntry> restrictMaxLogEntriesLength(final List<LogEntry> originalLogEntries, final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.restrictMaxLogEntriesLength(final List<LogEntry> originalLogEntries, final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "isActiveForConnection", "parameters": "(final ConnectionId connectionId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isActiveForConnection(final ConnectionId connectionId)", "full_signature": "protected boolean isActiveForConnection(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.isActiveForConnection(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "isLoggingExpired", "parameters": "(final ConnectionId connectionId, final Instant timestamp)", "modifiers": "public", "return": "boolean", "signature": "boolean isLoggingExpired(final ConnectionId connectionId, final Instant timestamp)", "full_signature": "public boolean isLoggingExpired(final ConnectionId connectionId, final Instant timestamp)", "class_method_signature": "ConnectionLoggerRegistry.isLoggingExpired(final ConnectionId connectionId, final Instant timestamp)", "testcase": false, "constructor": false}, {"identifier": "muteForConnection", "parameters": "(final ConnectionId connectionId)", "modifiers": "public", "return": "void", "signature": "void muteForConnection(final ConnectionId connectionId)", "full_signature": "public void muteForConnection(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.muteForConnection(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "unmuteForConnection", "parameters": "(final ConnectionId connectionId)", "modifiers": "public", "return": "void", "signature": "void unmuteForConnection(final ConnectionId connectionId)", "full_signature": "public void unmuteForConnection(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.unmuteForConnection(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "streamLoggers", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "Stream<MuteableConnectionLogger>", "signature": "Stream<MuteableConnectionLogger> streamLoggers(final ConnectionId connectionId)", "full_signature": "private Stream<MuteableConnectionLogger> streamLoggers(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.streamLoggers(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "initForConnection", "parameters": "(final Connection connection)", "modifiers": "@Override public", "return": "void", "signature": "void initForConnection(final Connection connection)", "full_signature": "@Override public void initForConnection(final Connection connection)", "class_method_signature": "ConnectionLoggerRegistry.initForConnection(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "initLogger", "parameters": "(final ConnectionId connectionId, final LogCategory logCategory)", "modifiers": "private", "return": "void", "signature": "void initLogger(final ConnectionId connectionId, final LogCategory logCategory)", "full_signature": "private void initLogger(final ConnectionId connectionId, final LogCategory logCategory)", "class_method_signature": "ConnectionLoggerRegistry.initLogger(final ConnectionId connectionId, final LogCategory logCategory)", "testcase": false, "constructor": false}, {"identifier": "initLogger", "parameters": "(final ConnectionId connectionId, final LogCategory logCategory,\n            @Nullable final String address)", "modifiers": "private", "return": "void", "signature": "void initLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            @Nullable final String address)", "full_signature": "private void initLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            @Nullable final String address)", "class_method_signature": "ConnectionLoggerRegistry.initLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            @Nullable final String address)", "testcase": false, "constructor": false}, {"identifier": "resetForConnection", "parameters": "(final Connection connection)", "modifiers": "@Override public", "return": "void", "signature": "void resetForConnection(final Connection connection)", "full_signature": "@Override public void resetForConnection(final Connection connection)", "class_method_signature": "ConnectionLoggerRegistry.resetForConnection(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "resetForConnectionId", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "void", "signature": "void resetForConnectionId(final ConnectionId connectionId)", "full_signature": "private void resetForConnectionId(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.resetForConnectionId(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "refreshMetadata", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "LogMetadata", "signature": "LogMetadata refreshMetadata(final ConnectionId connectionId)", "full_signature": "private LogMetadata refreshMetadata(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.refreshMetadata(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "startMetadata", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "void", "signature": "void startMetadata(final ConnectionId connectionId)", "full_signature": "private void startMetadata(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.startMetadata(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "stopMetadata", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "void", "signature": "void stopMetadata(final ConnectionId connectionId)", "full_signature": "private void stopMetadata(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.stopMetadata(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(final ConnectionId connectionId)", "modifiers": "private", "return": "LogMetadata", "signature": "LogMetadata getMetadata(final ConnectionId connectionId)", "full_signature": "private LogMetadata getMetadata(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.getMetadata(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "forOutboundDispatched", "parameters": "(final ConnectionId connectionId, final String target)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forOutboundDispatched(final ConnectionId connectionId, final String target)", "full_signature": "@Override public ConnectionLogger forOutboundDispatched(final ConnectionId connectionId, final String target)", "class_method_signature": "ConnectionLoggerRegistry.forOutboundDispatched(final ConnectionId connectionId, final String target)", "testcase": false, "constructor": false}, {"identifier": "forOutboundAcknowledged", "parameters": "(final ConnectionId connectionId, final String target)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forOutboundAcknowledged(final ConnectionId connectionId, final String target)", "full_signature": "@Override public ConnectionLogger forOutboundAcknowledged(final ConnectionId connectionId, final String target)", "class_method_signature": "ConnectionLoggerRegistry.forOutboundAcknowledged(final ConnectionId connectionId, final String target)", "testcase": false, "constructor": false}, {"identifier": "forOutboundFiltered", "parameters": "(final ConnectionId connectionId, final String target)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forOutboundFiltered(final ConnectionId connectionId, final String target)", "full_signature": "@Override public ConnectionLogger forOutboundFiltered(final ConnectionId connectionId, final String target)", "class_method_signature": "ConnectionLoggerRegistry.forOutboundFiltered(final ConnectionId connectionId, final String target)", "testcase": false, "constructor": false}, {"identifier": "forOutboundPublished", "parameters": "(final ConnectionId connectionId, final String target)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forOutboundPublished(final ConnectionId connectionId, final String target)", "full_signature": "@Override public ConnectionLogger forOutboundPublished(final ConnectionId connectionId, final String target)", "class_method_signature": "ConnectionLoggerRegistry.forOutboundPublished(final ConnectionId connectionId, final String target)", "testcase": false, "constructor": false}, {"identifier": "forInboundConsumed", "parameters": "(final ConnectionId connectionId, final String source)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forInboundConsumed(final ConnectionId connectionId, final String source)", "full_signature": "@Override public ConnectionLogger forInboundConsumed(final ConnectionId connectionId, final String source)", "class_method_signature": "ConnectionLoggerRegistry.forInboundConsumed(final ConnectionId connectionId, final String source)", "testcase": false, "constructor": false}, {"identifier": "forInboundAcknowledged", "parameters": "(final ConnectionId connectionId, final String source)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forInboundAcknowledged(final ConnectionId connectionId, final String source)", "full_signature": "@Override public ConnectionLogger forInboundAcknowledged(final ConnectionId connectionId, final String source)", "class_method_signature": "ConnectionLoggerRegistry.forInboundAcknowledged(final ConnectionId connectionId, final String source)", "testcase": false, "constructor": false}, {"identifier": "forInboundMapped", "parameters": "(final ConnectionId connectionId, final String source)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forInboundMapped(final ConnectionId connectionId, final String source)", "full_signature": "@Override public ConnectionLogger forInboundMapped(final ConnectionId connectionId, final String source)", "class_method_signature": "ConnectionLoggerRegistry.forInboundMapped(final ConnectionId connectionId, final String source)", "testcase": false, "constructor": false}, {"identifier": "forInboundEnforced", "parameters": "(final ConnectionId connectionId, final String source)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forInboundEnforced(final ConnectionId connectionId, final String source)", "full_signature": "@Override public ConnectionLogger forInboundEnforced(final ConnectionId connectionId, final String source)", "class_method_signature": "ConnectionLoggerRegistry.forInboundEnforced(final ConnectionId connectionId, final String source)", "testcase": false, "constructor": false}, {"identifier": "forInboundDropped", "parameters": "(final ConnectionId connectionId, final String source)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forInboundDropped(final ConnectionId connectionId, final String source)", "full_signature": "@Override public ConnectionLogger forInboundDropped(final ConnectionId connectionId, final String source)", "class_method_signature": "ConnectionLoggerRegistry.forInboundDropped(final ConnectionId connectionId, final String source)", "testcase": false, "constructor": false}, {"identifier": "forResponseDispatched", "parameters": "(final ConnectionId connectionId)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forResponseDispatched(final ConnectionId connectionId)", "full_signature": "@Override public ConnectionLogger forResponseDispatched(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.forResponseDispatched(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "forResponseDropped", "parameters": "(final ConnectionId connectionId)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forResponseDropped(final ConnectionId connectionId)", "full_signature": "@Override public ConnectionLogger forResponseDropped(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.forResponseDropped(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "forResponseMapped", "parameters": "(final ConnectionId connectionId)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forResponseMapped(final ConnectionId connectionId)", "full_signature": "@Override public ConnectionLogger forResponseMapped(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.forResponseMapped(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "forResponsePublished", "parameters": "(final ConnectionId connectionId)", "modifiers": "@Override public", "return": "ConnectionLogger", "signature": "ConnectionLogger forResponsePublished(final ConnectionId connectionId)", "full_signature": "@Override public ConnectionLogger forResponsePublished(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.forResponsePublished(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "forConnection", "parameters": "(final ConnectionId connectionId)", "modifiers": "public", "return": "ConnectionLogger", "signature": "ConnectionLogger forConnection(final ConnectionId connectionId)", "full_signature": "public ConnectionLogger forConnection(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.forConnection(final ConnectionId connectionId)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(\n            final ConnectionId connectionId,\n            final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "modifiers": "public", "return": "ConnectionLogger", "signature": "ConnectionLogger getLogger(\n            final ConnectionId connectionId,\n            final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "full_signature": "public ConnectionLogger getLogger(\n            final ConnectionId connectionId,\n            final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "class_method_signature": "ConnectionLoggerRegistry.getLogger(\n            final ConnectionId connectionId,\n            final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "testcase": false, "constructor": false}, {"identifier": "newMuteableLogger", "parameters": "(final ConnectionId connectionId, final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "modifiers": "private", "return": "MuteableConnectionLogger", "signature": "MuteableConnectionLogger newMuteableLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "full_signature": "private MuteableConnectionLogger newMuteableLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "class_method_signature": "ConnectionLoggerRegistry.newMuteableLogger(final ConnectionId connectionId, final LogCategory logCategory,\n            final LogType logType,\n            @Nullable final String address)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "ConnectionLoggerRegistry.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ConnectionLoggerRegistry.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ConnectionLoggerRegistry.toString()", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/monitoring/logs/ConnectionLoggerRegistry.java"}, "focal_method": {"identifier": "isActiveForConnection", "parameters": "(final ConnectionId connectionId)", "modifiers": "protected", "return": "boolean", "body": "protected boolean isActiveForConnection(final ConnectionId connectionId) {\n        final boolean muted = streamLoggers(connectionId)\n                .findFirst()\n                .map(MuteableConnectionLogger::isMuted)\n                .orElse(true);\n        return !muted;\n    }", "signature": "boolean isActiveForConnection(final ConnectionId connectionId)", "full_signature": "protected boolean isActiveForConnection(final ConnectionId connectionId)", "class_method_signature": "ConnectionLoggerRegistry.isActiveForConnection(final ConnectionId connectionId)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "findFirst", "streamLoggers"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}