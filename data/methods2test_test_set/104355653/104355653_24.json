{"test_class": {"identifier": "ExceptionUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "support/core/src/test/java/com/meiduimall/core/util/ExceptionUtilsTest.java"}, "test_case": {"identifier": "testGetFullStackTrace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetFullStackTrace() throws Exception {\n    String msg = ExceptionUtils.getFullStackTrace(new RuntimeException(\"testGetFullStackTrace\"));\n    List<List> list=JsonUtils.jsonToList(msg,List.class);\n    List e=list.get(0);\n    Assert.assertEquals(\"testGetFullStackTrace\",e.get(3));\n  }", "signature": "void testGetFullStackTrace()", "full_signature": "@Test public void testGetFullStackTrace()", "class_method_signature": "ExceptionUtilsTest.testGetFullStackTrace()", "testcase": true, "constructor": false, "invocations": ["getFullStackTrace", "jsonToList", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ExceptionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getFullStackTrace", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "String", "signature": "String getFullStackTrace(Throwable throwable)", "full_signature": "public static String getFullStackTrace(Throwable throwable)", "class_method_signature": "ExceptionUtils.getFullStackTrace(Throwable throwable)", "testcase": false, "constructor": false}], "file": "support/core/src/main/java/com/meiduimall/core/util/ExceptionUtils.java"}, "focal_method": {"identifier": "getFullStackTrace", "parameters": "(Throwable throwable)", "modifiers": "public static", "return": "String", "body": "public static String getFullStackTrace(Throwable throwable) {\n    StackTraceElement[] stackElements = throwable.getStackTrace();\n    StringBuilder sb = new StringBuilder(\"[\");\n    if (stackElements != null) {\n      for (int i = 0; i < stackElements.length; i++) {\n        sb.append(\"[\");\n        sb.append(\"\\\"\" + stackElements[i].getClassName()).append(\"\\\",\");\n        sb.append(\"\\\"\" + stackElements[i].getFileName()).append(\"\\\",\");\n        sb.append(\"\\\"\" + stackElements[i].getLineNumber()).append(\"\\\",\");\n        sb.append(\"\\\"\" + stackElements[i].getMethodName()).append(\"\\\"],\");\n      }\n    }\n    String str = CharMatcher.anyOf(\",\").trimTrailingFrom(sb.toString());\n    return str + \"]\";\n  }", "signature": "String getFullStackTrace(Throwable throwable)", "full_signature": "public static String getFullStackTrace(Throwable throwable)", "class_method_signature": "ExceptionUtils.getFullStackTrace(Throwable throwable)", "testcase": false, "constructor": false, "invocations": ["getStackTrace", "append", "append", "append", "getClassName", "append", "append", "getFileName", "append", "append", "getLineNumber", "append", "append", "getMethodName", "trimTrailingFrom", "anyOf", "toString"]}, "repository": {"repo_id": 104355653, "url": "https://github.com/chenjy16/mall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 403, "license": "licensed"}}