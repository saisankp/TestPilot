{"test_class": {"identifier": "DistanceMatrixImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DistanceCalculator distanceCalculator;", "modifier": "@Mock\n    private", "type": "DistanceCalculator", "declarator": "distanceCalculator", "var_name": "distanceCalculator"}, {"original_string": "@Mock\n    private DistanceRepository distanceRepository;", "modifier": "@Mock\n    private", "type": "DistanceRepository", "declarator": "distanceRepository", "var_name": "distanceRepository"}, {"original_string": "@InjectMocks\n    private DistanceMatrixImpl distanceMatrix;", "modifier": "@InjectMocks\n    private", "type": "DistanceMatrixImpl", "declarator": "distanceMatrix", "var_name": "distanceMatrix"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/service/distance/DistanceMatrixImplTest.java"}, "test_case": {"identifier": "should_call_router_and_persist_distances_when_repo_is_empty", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void should_call_router_and_persist_distances_when_repo_is_empty() {\n        Location l1 = location(100, -1);\n        Location l2 = location(111, 20);\n        long dist12 = 12;\n        long dist21 = 21;\n        when(distanceRepository.getDistance(any(), any())).thenReturn(-1L);\n        when(distanceCalculator.travelTimeMillis(l1.coordinates(), l2.coordinates())).thenReturn(dist12);\n        when(distanceCalculator.travelTimeMillis(l2.coordinates(), l1.coordinates())).thenReturn(dist21);\n\n        // no calculation for the first location\n        distanceMatrix.addLocation(l1);\n        verifyNoInteractions(distanceCalculator);\n        verifyNoInteractions(distanceRepository);\n\n        distanceMatrix.addLocation(l2);\n\n        // getting distances from the repository (unsuccessful)\n        verify(distanceRepository).getDistance(l2, l1);\n        verify(distanceRepository).getDistance(l1, l2);\n\n        // distances are calculated and persisted\n        verify(distanceRepository).saveDistance(l2, l1, dist21);\n        verify(distanceRepository).saveDistance(l1, l2, dist12);\n    }", "signature": "void should_call_router_and_persist_distances_when_repo_is_empty()", "full_signature": "@Test void should_call_router_and_persist_distances_when_repo_is_empty()", "class_method_signature": "DistanceMatrixImplTest.should_call_router_and_persist_distances_when_repo_is_empty()", "testcase": true, "constructor": false, "invocations": ["location", "location", "thenReturn", "when", "getDistance", "any", "any", "thenReturn", "when", "travelTimeMillis", "coordinates", "coordinates", "thenReturn", "when", "travelTimeMillis", "coordinates", "coordinates", "addLocation", "verifyNoInteractions", "verifyNoInteractions", "addLocation", "getDistance", "verify", "getDistance", "verify", "saveDistance", "verify", "saveDistance", "verify"]}, "focal_class": {"identifier": "DistanceMatrixImpl", "superclass": "", "interfaces": "implements DistanceMatrix", "fields": [{"original_string": "private final DistanceCalculator distanceCalculator;", "modifier": "private final", "type": "DistanceCalculator", "declarator": "distanceCalculator", "var_name": "distanceCalculator"}, {"original_string": "private final DistanceRepository distanceRepository;", "modifier": "private final", "type": "DistanceRepository", "declarator": "distanceRepository", "var_name": "distanceRepository"}, {"original_string": "private final Map<Location, Map<Long, Distance>> matrix = new HashMap<>();", "modifier": "private final", "type": "Map<Location, Map<Long, Distance>>", "declarator": "matrix = new HashMap<>()", "var_name": "matrix"}], "methods": [{"identifier": "DistanceMatrixImpl", "parameters": "(DistanceCalculator distanceCalculator, DistanceRepository distanceRepository)", "modifiers": "@Autowired", "return": "", "signature": " DistanceMatrixImpl(DistanceCalculator distanceCalculator, DistanceRepository distanceRepository)", "full_signature": "@Autowired  DistanceMatrixImpl(DistanceCalculator distanceCalculator, DistanceRepository distanceRepository)", "class_method_signature": "DistanceMatrixImpl.DistanceMatrixImpl(DistanceCalculator distanceCalculator, DistanceRepository distanceRepository)", "testcase": false, "constructor": true}, {"identifier": "addLocation", "parameters": "(Location newLocation)", "modifiers": "@Override public", "return": "DistanceMatrixRow", "signature": "DistanceMatrixRow addLocation(Location newLocation)", "full_signature": "@Override public DistanceMatrixRow addLocation(Location newLocation)", "class_method_signature": "DistanceMatrixImpl.addLocation(Location newLocation)", "testcase": false, "constructor": false}, {"identifier": "calculateOrRestoreDistance", "parameters": "(Location from, Location to)", "modifiers": "private", "return": "Distance", "signature": "Distance calculateOrRestoreDistance(Location from, Location to)", "full_signature": "private Distance calculateOrRestoreDistance(Location from, Location to)", "class_method_signature": "DistanceMatrixImpl.calculateOrRestoreDistance(Location from, Location to)", "testcase": false, "constructor": false}, {"identifier": "removeLocation", "parameters": "(Location location)", "modifiers": "@Override public", "return": "void", "signature": "void removeLocation(Location location)", "full_signature": "@Override public void removeLocation(Location location)", "class_method_signature": "DistanceMatrixImpl.removeLocation(Location location)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "DistanceMatrixImpl.clear()", "testcase": false, "constructor": false}, {"identifier": "dimension", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int dimension()", "full_signature": "public int dimension()", "class_method_signature": "DistanceMatrixImpl.dimension()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/service/distance/DistanceMatrixImpl.java"}, "focal_method": {"identifier": "addLocation", "parameters": "(Location newLocation)", "modifiers": "@Override public", "return": "DistanceMatrixRow", "body": "@Override\n    public DistanceMatrixRow addLocation(Location newLocation) {\n        // Matrix == distance rows.\n        // We're adding a whole new row with distances from the new location to existing ones.\n        // We're also creating a new column by \"appending\" a new cell to each existing row.\n        // This new column contains distances from each existing location to the new one.\n\n        // The map must be thread-safe because:\n        // - we're updating it from the parallel stream below\n        // - it is accessed from solver thread!\n        Map<Long, Distance> distancesToOthers = new ConcurrentHashMap<>(); // the new row\n\n        // distance to self is 0\n        distancesToOthers.put(newLocation.id(), Distance.ZERO);\n\n        // For all entries (rows) in the matrix:\n        matrix.entrySet().stream().parallel().forEach(distanceRow -> {\n            // Entry key is the existing (other) location.\n            Location other = distanceRow.getKey();\n            // Entry value is the data (cells) in the row (distances from the entry key location to any other).\n            Map<Long, Distance> distancesFromOther = distanceRow.getValue();\n            // Add a new cell to the row with the distance from the entry key location to the new location\n            // (results in a new column at the end of the loop).\n            distancesFromOther.put(newLocation.id(), calculateOrRestoreDistance(other, newLocation));\n            // Add a cell to the new distance's row.\n            distancesToOthers.put(other.id(), calculateOrRestoreDistance(newLocation, other));\n        });\n\n        matrix.put(newLocation, distancesToOthers);\n\n        return locationId -> {\n            if (!distancesToOthers.containsKey(locationId)) {\n                throw new IllegalArgumentException(\n                        \"Distance from \" + newLocation\n                                + \" to \" + locationId\n                                + \" hasn't been recorded.\\n\"\n                                + \"We only know distances to \" + distancesToOthers.keySet());\n            }\n            return distancesToOthers.get(locationId);\n        };\n    }", "signature": "DistanceMatrixRow addLocation(Location newLocation)", "full_signature": "@Override public DistanceMatrixRow addLocation(Location newLocation)", "class_method_signature": "DistanceMatrixImpl.addLocation(Location newLocation)", "testcase": false, "constructor": false, "invocations": ["put", "id", "forEach", "parallel", "stream", "entrySet", "getKey", "getValue", "put", "id", "calculateOrRestoreDistance", "put", "id", "calculateOrRestoreDistance", "put", "containsKey", "keySet", "get"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}