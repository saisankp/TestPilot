{"test_class": {"identifier": "TestAuditDBQuery", "superclass": "extends AuditDBUtil", "interfaces": "", "fields": [{"original_string": "SimpleDateFormat formatter = new SimpleDateFormat(AuditUtil.DATE_FORMAT);", "modifier": "", "type": "SimpleDateFormat", "declarator": "formatter = new SimpleDateFormat(AuditUtil.DATE_FORMAT)", "var_name": "formatter"}], "file": "conduit-audit/src/test/java/com/inmobi/conduit/audit/query/TestAuditDBQuery.java"}, "test_case": {"identifier": "testPercentileSetIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPercentileSetIsNull() {\n    Date fromDate = new Date();\n    Date toDate = new Date(fromDate.getTime()+60000000l);\n    AuditDbQuery query = new AuditDbQuery(formatter.format(toDate),\n        formatter.format(fromDate), \"\", \"TIER,TOPIC,HOSTNAME\", null);\n    try {\n      query.parseAndSetArguments();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    Assert.assertTrue(query.percentileSet == null);\n  }", "signature": "void testPercentileSetIsNull()", "full_signature": "@Test public void testPercentileSetIsNull()", "class_method_signature": "TestAuditDBQuery.testPercentileSetIsNull()", "testcase": true, "constructor": false, "invocations": ["getTime", "format", "format", "parseAndSetArguments", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "AuditDbQuery", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int minArgs = 2;", "modifier": "private static final", "type": "int", "declarator": "minArgs = 2", "var_name": "minArgs"}, {"original_string": "private static final String DEFAULT_TIMEZONE = \"GMT\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_TIMEZONE = \"GMT\"", "var_name": "DEFAULT_TIMEZONE"}, {"original_string": "private static final Log LOG = LogFactory.getLog(AuditDbQuery.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(AuditDbQuery.class)", "var_name": "LOG"}, {"original_string": "private String timeZone, filterString, groupByString, toTimeString,\n      fromTimeString, percentileString;", "modifier": "private", "type": "String", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "Map<Tuple, Map<Float, Integer>> percentile;", "modifier": "", "type": "Map<Tuple, Map<Float, Integer>>", "declarator": "percentile", "var_name": "percentile"}, {"original_string": "Date fromTime;", "modifier": "", "type": "Date", "declarator": "fromTime", "var_name": "fromTime"}, {"original_string": "Date toTime;", "modifier": "", "type": "Date", "declarator": "toTime", "var_name": "toTime"}, {"original_string": "GroupBy groupBy;", "modifier": "", "type": "GroupBy", "declarator": "groupBy", "var_name": "groupBy"}, {"original_string": "Filter filter;", "modifier": "", "type": "Filter", "declarator": "filter", "var_name": "filter"}, {"original_string": "Set<Float> percentileSet;", "modifier": "", "type": "Set<Float>", "declarator": "percentileSet", "var_name": "percentileSet"}, {"original_string": "Set<Tuple> tupleSet;", "modifier": "", "type": "Set<Tuple>", "declarator": "tupleSet", "var_name": "tupleSet"}, {"original_string": "Map<GroupBy.Group, Long> received;", "modifier": "", "type": "Map<GroupBy.Group, Long>", "declarator": "received", "var_name": "received"}, {"original_string": "Map<GroupBy.Group, Long> sent;", "modifier": "", "type": "Map<GroupBy.Group, Long>", "declarator": "sent", "var_name": "sent"}, {"original_string": "private final ClientConfig config;", "modifier": "private final", "type": "ClientConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private AuditDBHelper dbHelper;", "modifier": "private", "type": "AuditDBHelper", "declarator": "dbHelper", "var_name": "dbHelper"}], "methods": [{"identifier": "AuditDbQuery", "parameters": "(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone)", "modifiers": "public", "return": "", "signature": " AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone)", "full_signature": "public  AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone)", "class_method_signature": "AuditDbQuery.AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone)", "testcase": false, "constructor": true}, {"identifier": "AuditDbQuery", "parameters": "(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString)", "modifiers": "public", "return": "", "signature": " AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString)", "full_signature": "public  AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString)", "class_method_signature": "AuditDbQuery.AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString)", "testcase": false, "constructor": true}, {"identifier": "AuditDbQuery", "parameters": "(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config)", "modifiers": "public", "return": "", "signature": " AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config)", "full_signature": "public  AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config)", "class_method_signature": "AuditDbQuery.AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config)", "testcase": false, "constructor": true}, {"identifier": "AuditDbQuery", "parameters": "(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config, AuditDBHelper helper)", "modifiers": "public", "return": "", "signature": " AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config, AuditDBHelper helper)", "full_signature": "public  AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config, AuditDBHelper helper)", "class_method_signature": "AuditDbQuery.AuditDbQuery(String toTimeString, String fromTimeString,\n      String filterString, String groupByString, String timeZone,\n      String percentileString, ClientConfig config, AuditDBHelper helper)", "testcase": false, "constructor": true}, {"identifier": "aggregateStats", "parameters": "()", "modifiers": "", "return": "void", "signature": "void aggregateStats()", "full_signature": " void aggregateStats()", "class_method_signature": "AuditDbQuery.aggregateStats()", "testcase": false, "constructor": false}, {"identifier": "setReceivedAndSentStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setReceivedAndSentStats()", "full_signature": "private void setReceivedAndSentStats()", "class_method_signature": "AuditDbQuery.setReceivedAndSentStats()", "testcase": false, "constructor": false}, {"identifier": "populatePercentileMap", "parameters": "(Set<Tuple> tupleSet, Set<Float> percentileSet)", "modifiers": "public static", "return": "Map<Tuple, Map<Float, Integer>>", "signature": "Map<Tuple, Map<Float, Integer>> populatePercentileMap(Set<Tuple> tupleSet, Set<Float> percentileSet)", "full_signature": "public static Map<Tuple, Map<Float, Integer>> populatePercentileMap(Set<Tuple> tupleSet, Set<Float> percentileSet)", "class_method_signature": "AuditDbQuery.populatePercentileMap(Set<Tuple> tupleSet, Set<Float> percentileSet)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String date)", "modifiers": "private", "return": "Date", "signature": "Date getDate(String date)", "full_signature": "private Date getDate(String date)", "class_method_signature": "AuditDbQuery.getDate(String date)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "AuditDbQuery.execute()", "testcase": false, "constructor": false}, {"identifier": "parseAndSetArguments", "parameters": "()", "modifiers": "", "return": "void", "signature": "void parseAndSetArguments()", "full_signature": " void parseAndSetArguments()", "class_method_signature": "AuditDbQuery.parseAndSetArguments()", "testcase": false, "constructor": false}, {"identifier": "getPercentileList", "parameters": "(String percentileString)", "modifiers": "private", "return": "Set<Float>", "signature": "Set<Float> getPercentileList(String percentileString)", "full_signature": "private Set<Float> getPercentileList(String percentileString)", "class_method_signature": "AuditDbQuery.getPercentileList(String percentileString)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String args[])", "modifiers": "public static", "return": "void", "signature": "void main(String args[])", "full_signature": "public static void main(String args[])", "class_method_signature": "AuditDbQuery.main(String args[])", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AuditDbQuery.toString()", "testcase": false, "constructor": false}, {"identifier": "displayResults", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void displayResults()", "full_signature": "public void displayResults()", "class_method_signature": "AuditDbQuery.displayResults()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "AuditDbQuery.printUsage()", "testcase": false, "constructor": false}, {"identifier": "getReceived", "parameters": "()", "modifiers": "@Deprecated public", "return": "Map<GroupBy.Group, Long>", "signature": "Map<GroupBy.Group, Long> getReceived()", "full_signature": "@Deprecated public Map<GroupBy.Group, Long> getReceived()", "class_method_signature": "AuditDbQuery.getReceived()", "testcase": false, "constructor": false}, {"identifier": "getSent", "parameters": "()", "modifiers": "@Deprecated public", "return": "Map<GroupBy.Group, Long>", "signature": "Map<GroupBy.Group, Long> getSent()", "full_signature": "@Deprecated public Map<GroupBy.Group, Long> getSent()", "class_method_signature": "AuditDbQuery.getSent()", "testcase": false, "constructor": false}, {"identifier": "getPercentile", "parameters": "()", "modifiers": "public", "return": "Map<Tuple, Map<Float, Integer>>", "signature": "Map<Tuple, Map<Float, Integer>> getPercentile()", "full_signature": "public Map<Tuple, Map<Float, Integer>> getPercentile()", "class_method_signature": "AuditDbQuery.getPercentile()", "testcase": false, "constructor": false}, {"identifier": "getTupleSet", "parameters": "()", "modifiers": "public", "return": "Set<Tuple>", "signature": "Set<Tuple> getTupleSet()", "full_signature": "public Set<Tuple> getTupleSet()", "class_method_signature": "AuditDbQuery.getTupleSet()", "testcase": false, "constructor": false}, {"identifier": "getPercentileSet", "parameters": "()", "modifiers": "public", "return": "Set<Float>", "signature": "Set<Float> getPercentileSet()", "full_signature": "public Set<Float> getPercentileSet()", "class_method_signature": "AuditDbQuery.getPercentileSet()", "testcase": false, "constructor": false}], "file": "conduit-audit/src/main/java/com/inmobi/conduit/audit/query/AuditDbQuery.java"}, "focal_method": {"identifier": "parseAndSetArguments", "parameters": "()", "modifiers": "", "return": "void", "body": "void parseAndSetArguments() throws ParseException, IOException {\n    groupBy = new GroupBy(groupByString);\n    filter = new Filter(filterString);\n    fromTime = getDate(fromTimeString);\n    toTime = getDate(toTimeString);\n    percentileSet = getPercentileList(percentileString);\n  }", "signature": "void parseAndSetArguments()", "full_signature": " void parseAndSetArguments()", "class_method_signature": "AuditDbQuery.parseAndSetArguments()", "testcase": false, "constructor": false, "invocations": ["getDate", "getDate", "getPercentileList"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}