{"test_class": {"identifier": "LoadBalancedListsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LoadBalancedListsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LoadBalancedListsTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/LoadBalancedListsTest.java"}, "test_case": {"identifier": "getNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNext() throws Exception {\n        LoadBalancedList<String> list = LoadBalancedLists.synchronizedList(new RoundRobinLoadBalancedList<String>());\n\n        // add just one item\n        list.set(\"Item1\", 1);\n        for (int i = 0; i < 50; i++) {\n            Assert.assertTrue(\"Failed on i=\" + i, \"Item1\".equals(list.getNext()));\n        }\n\n        // remove it\n        list.remove(\"Item1\");\n        for (int i = 0; i < 50; i++) {\n            Assert.assertTrue(\"Failed on i=\" + i, list.getNext() == null);\n        }\n\n        // add another item\n        list.set(\"Item2\", 1);\n        for (int i = 0; i < 50; i++) {\n            Assert.assertTrue(\"Failed on i=\" + i, \"Item2\".equals(list.getNext()));\n        }\n\n        // reset weight to zero (should remove it)\n        list.set(\"Item2\", 0);\n        for (int i = 0; i < 50; i++) {\n            Assert.assertTrue(\"Failed on i=\" + i, list.getNext() == null);\n        }\n    }", "signature": "void getNext()", "full_signature": "@Test public void getNext()", "class_method_signature": "LoadBalancedListsTest.getNext()", "testcase": true, "constructor": false, "invocations": ["synchronizedList", "set", "assertTrue", "equals", "getNext", "remove", "assertTrue", "getNext", "set", "assertTrue", "equals", "getNext", "set", "assertTrue", "getNext"]}, "focal_class": {"identifier": "LoadBalancedLists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "synchronizedList", "parameters": "(LoadBalancedList<E> list)", "modifiers": "static public", "return": "LoadBalancedList<E>", "signature": "LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "full_signature": "static public LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "class_method_signature": "LoadBalancedLists.synchronizedList(LoadBalancedList<E> list)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/LoadBalancedLists.java"}, "focal_method": {"identifier": "synchronizedList", "parameters": "(LoadBalancedList<E> list)", "modifiers": "static public", "return": "LoadBalancedList<E>", "body": "static public <E> LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list) {\n        return new ConcurrentLoadBalancedList<E>(list);\n    }", "signature": "LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "full_signature": "static public LoadBalancedList<E> synchronizedList(LoadBalancedList<E> list)", "class_method_signature": "LoadBalancedLists.synchronizedList(LoadBalancedList<E> list)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}