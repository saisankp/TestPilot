{"test_class": {"identifier": "OFConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OFConnectionTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OFConnectionTest.class)", "var_name": "logger"}, {"original_string": "private OFFactory factory;", "modifier": "private", "type": "OFFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private OFConnection conn;", "modifier": "private", "type": "OFConnection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private DatapathId switchId;", "modifier": "private", "type": "DatapathId", "declarator": "switchId", "var_name": "switchId"}, {"original_string": "private Timer timer;", "modifier": "private", "type": "Timer", "declarator": "timer", "var_name": "timer"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/core/OFConnectionTest.java"}, "test_case": {"identifier": "testMessageWriteList", "parameters": "()", "modifiers": "@Test(timeout = 5000) public", "return": "void", "body": "@Test(timeout = 5000)\n    public void testMessageWriteList() throws InterruptedException, ExecutionException {\n        Capture<List<OFMessage>> cMsgList = prepareChannelForWriteList();\n\n        OFHello hello = factory.hello(ImmutableList.<OFHelloElem>of());\n        OFPacketOut packetOut = factory.buildPacketOut()\n                .setData(new byte[] { 0x01, 0x02, 0x03, 0x04 })\n                .setActions(ImmutableList.<OFAction>of( factory.actions().output(OFPort.of(1), 0)))\n                .build();\n\n        conn.write(ImmutableList.of(hello, packetOut));\n\n        assertThat(\"Write should have been written\", cMsgList.hasCaptured(), equalTo(true));\n        List<OFMessage> value = cMsgList.getValue();\n        logger.info(\"Captured channel write: \"+value);\n        assertThat(\"Should have captured MsgList\", cMsgList.getValue(),\n                Matchers.<OFMessage> contains(hello, packetOut));\n    }", "signature": "void testMessageWriteList()", "full_signature": "@Test(timeout = 5000) public void testMessageWriteList()", "class_method_signature": "OFConnectionTest.testMessageWriteList()", "testcase": true, "constructor": false, "invocations": ["prepareChannelForWriteList", "hello", "of", "build", "setActions", "setData", "buildPacketOut", "of", "output", "actions", "of", "write", "of", "assertThat", "hasCaptured", "equalTo", "getValue", "info", "assertThat", "getValue", "contains"]}, "focal_class": {"identifier": "OFConnection", "superclass": "", "interfaces": "implements IOFConnection, IOFConnectionBackend", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OFConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OFConnection.class)", "var_name": "logger"}, {"original_string": "private final DatapathId dpid;", "modifier": "private final", "type": "DatapathId", "declarator": "dpid", "var_name": "dpid"}, {"original_string": "private final OFFactory factory;", "modifier": "private final", "type": "OFFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final Channel channel;", "modifier": "private final", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private final OFAuxId auxId;", "modifier": "private final", "type": "OFAuxId", "declarator": "auxId", "var_name": "auxId"}, {"original_string": "private final Timer timer;", "modifier": "private final", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private final Date connectedSince;", "modifier": "private final", "type": "Date", "declarator": "connectedSince", "var_name": "connectedSince"}, {"original_string": "private final Map<Long, Deliverable<?>> xidDeliverableMap;", "modifier": "private final", "type": "Map<Long, Deliverable<?>>", "declarator": "xidDeliverableMap", "var_name": "xidDeliverableMap"}, {"original_string": "protected final static ThreadLocal<List<OFMessage>> localMsgBuffer =\n            new ThreadLocal<List<OFMessage>>();", "modifier": "protected final static", "type": "ThreadLocal<List<OFMessage>>", "declarator": "localMsgBuffer =\n            new ThreadLocal<List<OFMessage>>()", "var_name": "localMsgBuffer"}, {"original_string": "private static final long DELIVERABLE_TIME_OUT = 60;", "modifier": "private static final", "type": "long", "declarator": "DELIVERABLE_TIME_OUT = 60", "var_name": "DELIVERABLE_TIME_OUT"}, {"original_string": "private static final TimeUnit DELIVERABLE_TIME_OUT_UNIT = TimeUnit.SECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "DELIVERABLE_TIME_OUT_UNIT = TimeUnit.SECONDS", "var_name": "DELIVERABLE_TIME_OUT_UNIT"}, {"original_string": "private final OFConnectionCounters counters;", "modifier": "private final", "type": "OFConnectionCounters", "declarator": "counters", "var_name": "counters"}, {"original_string": "private IOFConnectionListener listener;", "modifier": "private", "type": "IOFConnectionListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "OFConnection", "parameters": "(@Nonnull DatapathId dpid,\n                        @Nonnull OFFactory factory,\n                        @Nonnull Channel channel,\n                        @Nonnull OFAuxId auxId,\n                        @Nonnull IDebugCounterService debugCounters,\n                        @Nonnull Timer timer)", "modifiers": "public", "return": "", "signature": " OFConnection(@Nonnull DatapathId dpid,\n                        @Nonnull OFFactory factory,\n                        @Nonnull Channel channel,\n                        @Nonnull OFAuxId auxId,\n                        @Nonnull IDebugCounterService debugCounters,\n                        @Nonnull Timer timer)", "full_signature": "public  OFConnection(@Nonnull DatapathId dpid,\n                        @Nonnull OFFactory factory,\n                        @Nonnull Channel channel,\n                        @Nonnull OFAuxId auxId,\n                        @Nonnull IDebugCounterService debugCounters,\n                        @Nonnull Timer timer)", "class_method_signature": "OFConnection.OFConnection(@Nonnull DatapathId dpid,\n                        @Nonnull OFFactory factory,\n                        @Nonnull Channel channel,\n                        @Nonnull OFAuxId auxId,\n                        @Nonnull IDebugCounterService debugCounters,\n                        @Nonnull Timer timer)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(OFMessage m)", "modifiers": "@Override public", "return": "void", "signature": "void write(OFMessage m)", "full_signature": "@Override public void write(OFMessage m)", "class_method_signature": "OFConnection.write(OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "writeRequest", "parameters": "(OFRequest<R> request)", "modifiers": "@Override public", "return": "ListenableFuture<R>", "signature": "ListenableFuture<R> writeRequest(OFRequest<R> request)", "full_signature": "@Override public ListenableFuture<R> writeRequest(OFRequest<R> request)", "class_method_signature": "OFConnection.writeRequest(OFRequest<R> request)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Iterable<OFMessage> msglist)", "modifiers": "@Override @LogMessageDoc(level = \"WARN\", message = \"Sending OF message that modifies switch \" + \"state while in the slave role: {switch}\", explanation = \"An application has sent a message to a switch \" + \"that is not valid when the switch is in a slave role\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG) public", "return": "void", "signature": "void write(Iterable<OFMessage> msglist)", "full_signature": "@Override @LogMessageDoc(level = \"WARN\", message = \"Sending OF message that modifies switch \" + \"state while in the slave role: {switch}\", explanation = \"An application has sent a message to a switch \" + \"that is not valid when the switch is in a slave role\", recommendation = LogMessageDoc.REPORT_CONTROLLER_BUG) public void write(Iterable<OFMessage> msglist)", "class_method_signature": "OFConnection.write(Iterable<OFMessage> msglist)", "testcase": false, "constructor": false}, {"identifier": "disconnected", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disconnected()", "full_signature": "public void disconnected()", "class_method_signature": "OFConnection.disconnected()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disconnect()", "full_signature": "@Override public void disconnect()", "class_method_signature": "OFConnection.disconnect()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "OFConnection.toString()", "testcase": false, "constructor": false}, {"identifier": "getConnectedSince", "parameters": "()", "modifiers": "@Override public", "return": "Date", "signature": "Date getConnectedSince()", "full_signature": "@Override public Date getConnectedSince()", "class_method_signature": "OFConnection.getConnectedSince()", "testcase": false, "constructor": false}, {"identifier": "writeStatsRequest", "parameters": "(\n            OFStatsRequest<REPLY> request)", "modifiers": "@Override public", "return": "ListenableFuture<List<REPLY>>", "signature": "ListenableFuture<List<REPLY>> writeStatsRequest(\n            OFStatsRequest<REPLY> request)", "full_signature": "@Override public ListenableFuture<List<REPLY>> writeStatsRequest(\n            OFStatsRequest<REPLY> request)", "class_method_signature": "OFConnection.writeStatsRequest(\n            OFStatsRequest<REPLY> request)", "testcase": false, "constructor": false}, {"identifier": "registerDeliverable", "parameters": "(long xid, Deliverable<?> deliverable)", "modifiers": "private", "return": "void", "signature": "void registerDeliverable(long xid, Deliverable<?> deliverable)", "full_signature": "private void registerDeliverable(long xid, Deliverable<?> deliverable)", "class_method_signature": "OFConnection.registerDeliverable(long xid, Deliverable<?> deliverable)", "testcase": false, "constructor": false}, {"identifier": "handleGenericDeliverable", "parameters": "(OFMessage reply)", "modifiers": "public", "return": "boolean", "signature": "boolean handleGenericDeliverable(OFMessage reply)", "full_signature": "public boolean handleGenericDeliverable(OFMessage reply)", "class_method_signature": "OFConnection.handleGenericDeliverable(OFMessage reply)", "testcase": false, "constructor": false}, {"identifier": "cancelAllPendingRequests", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancelAllPendingRequests()", "full_signature": "@Override public void cancelAllPendingRequests()", "class_method_signature": "OFConnection.cancelAllPendingRequests()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "OFConnection.isConnected()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "OFConnection.flush()", "testcase": false, "constructor": false}, {"identifier": "getRemoteInetAddress", "parameters": "()", "modifiers": "@Override public", "return": "SocketAddress", "signature": "SocketAddress getRemoteInetAddress()", "full_signature": "@Override public SocketAddress getRemoteInetAddress()", "class_method_signature": "OFConnection.getRemoteInetAddress()", "testcase": false, "constructor": false}, {"identifier": "getLocalInetAddress", "parameters": "()", "modifiers": "@Override public", "return": "SocketAddress", "signature": "SocketAddress getLocalInetAddress()", "full_signature": "@Override public SocketAddress getLocalInetAddress()", "class_method_signature": "OFConnection.getLocalInetAddress()", "testcase": false, "constructor": false}, {"identifier": "deliverResponse", "parameters": "(OFMessage m)", "modifiers": "public", "return": "boolean", "signature": "boolean deliverResponse(OFMessage m)", "full_signature": "public boolean deliverResponse(OFMessage m)", "class_method_signature": "OFConnection.deliverResponse(OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "isWritable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWritable()", "full_signature": "@Override public boolean isWritable()", "class_method_signature": "OFConnection.isWritable()", "testcase": false, "constructor": false}, {"identifier": "getDatapathId", "parameters": "()", "modifiers": "@Override public", "return": "DatapathId", "signature": "DatapathId getDatapathId()", "full_signature": "@Override public DatapathId getDatapathId()", "class_method_signature": "OFConnection.getDatapathId()", "testcase": false, "constructor": false}, {"identifier": "getAuxId", "parameters": "()", "modifiers": "@Override public", "return": "OFAuxId", "signature": "OFAuxId getAuxId()", "full_signature": "@Override public OFAuxId getAuxId()", "class_method_signature": "OFConnection.getAuxId()", "testcase": false, "constructor": false}, {"identifier": "getPendingRequestIds", "parameters": "()", "modifiers": "", "return": "Set<Long>", "signature": "Set<Long> getPendingRequestIds()", "full_signature": " Set<Long> getPendingRequestIds()", "class_method_signature": "OFConnection.getPendingRequestIds()", "testcase": false, "constructor": false}, {"identifier": "getOFFactory", "parameters": "()", "modifiers": "@Override public", "return": "OFFactory", "signature": "OFFactory getOFFactory()", "full_signature": "@Override public OFFactory getOFFactory()", "class_method_signature": "OFConnection.getOFFactory()", "testcase": false, "constructor": false}, {"identifier": "getListener", "parameters": "()", "modifiers": "public", "return": "IOFConnectionListener", "signature": "IOFConnectionListener getListener()", "full_signature": "public IOFConnectionListener getListener()", "class_method_signature": "OFConnection.getListener()", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(IOFConnectionListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void setListener(IOFConnectionListener listener)", "full_signature": "@Override public void setListener(IOFConnectionListener listener)", "class_method_signature": "OFConnection.setListener(IOFConnectionListener listener)", "testcase": false, "constructor": false}, {"identifier": "messageReceived", "parameters": "(OFMessage m)", "modifiers": "public", "return": "void", "signature": "void messageReceived(OFMessage m)", "full_signature": "public void messageReceived(OFMessage m)", "class_method_signature": "OFConnection.messageReceived(OFMessage m)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/core/OFConnection.java"}, "focal_method": {"identifier": "write", "parameters": "(OFMessage m)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(OFMessage m) {\n        if (!isConnected()) {\n            if (logger.isDebugEnabled())\n                logger.debug(\"{}: not connected - dropping message {}\", this, m);\n            return;\n        }\n        if (logger.isDebugEnabled())\n            logger.debug(\"{}: send {}\", this, m);\n        List<OFMessage> msgBuffer = localMsgBuffer.get();\n        if (msgBuffer == null) {\n            msgBuffer = new ArrayList<OFMessage>();\n            localMsgBuffer.set(msgBuffer);\n        }\n\n        counters.updateWriteStats(m);\n        msgBuffer.add(m);\n\n        if ((msgBuffer.size() >= Controller.BATCH_MAX_SIZE) || ((m.getType() != OFType.PACKET_OUT) && (m.getType() != OFType.FLOW_MOD))) {\n            this.write(msgBuffer);\n            localMsgBuffer.set(null);\n        }\n    }", "signature": "void write(OFMessage m)", "full_signature": "@Override public void write(OFMessage m)", "class_method_signature": "OFConnection.write(OFMessage m)", "testcase": false, "constructor": false, "invocations": ["isConnected", "isDebugEnabled", "debug", "isDebugEnabled", "debug", "get", "set", "updateWriteStats", "add", "size", "getType", "getType", "write", "set"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}