{"test_class": {"identifier": "MOfNAggregationFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final boolean TRUSTED = true;", "modifier": "public static final", "type": "boolean", "declarator": "TRUSTED = true", "var_name": "TRUSTED"}, {"original_string": "private OutlierDetectorResult normalResult;", "modifier": "private", "type": "OutlierDetectorResult", "declarator": "normalResult", "var_name": "normalResult"}, {"original_string": "private OutlierDetectorResult weakResult;", "modifier": "private", "type": "OutlierDetectorResult", "declarator": "weakResult", "var_name": "weakResult"}, {"original_string": "private OutlierDetectorResult strongResult;", "modifier": "private", "type": "OutlierDetectorResult", "declarator": "strongResult", "var_name": "strongResult"}, {"original_string": "private OutlierDetectorResult warmupResult;", "modifier": "private", "type": "OutlierDetectorResult", "declarator": "warmupResult", "var_name": "warmupResult"}, {"original_string": "@Mock\n    private DetectorRequest detectorRequest;", "modifier": "@Mock\n    private", "type": "DetectorRequest", "declarator": "detectorRequest", "var_name": "detectorRequest"}, {"original_string": "@Mock\n    private DetectorResult mockNonOutlierResult;", "modifier": "@Mock\n    private", "type": "DetectorResult", "declarator": "mockNonOutlierResult", "var_name": "mockNonOutlierResult"}, {"original_string": "@Mock\n    private DetectionFilterChain mockFilterChain;", "modifier": "@Mock\n    private", "type": "DetectionFilterChain", "declarator": "mockFilterChain", "var_name": "mockFilterChain"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/filter/algo/MOfNAggregationFilterTest.java"}, "test_case": {"identifier": "testFilter_nullFilterChain", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testFilter_nullFilterChain() {\n        new MOfNAggregationFilter(3, 5).doFilter(detectorRequest, detectorResponse(mockNonOutlierResult), null);\n    }", "signature": "void testFilter_nullFilterChain()", "full_signature": "@Test(expected = NullPointerException.class) public void testFilter_nullFilterChain()", "class_method_signature": "MOfNAggregationFilterTest.testFilter_nullFilterChain()", "testcase": true, "constructor": false, "invocations": ["doFilter", "detectorResponse"]}, "focal_class": {"identifier": "MOfNAggregationFilter", "superclass": "", "interfaces": "implements DetectionFilter", "fields": [{"original_string": "private int m;", "modifier": "private", "type": "int", "declarator": "m", "var_name": "m"}, {"original_string": "private int n;", "modifier": "private", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "private final AnomalyLevel[] buffer;", "modifier": "private final", "type": "AnomalyLevel[]", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private int bufferIndex = 0;", "modifier": "private", "type": "int", "declarator": "bufferIndex = 0", "var_name": "bufferIndex"}], "methods": [{"identifier": "MOfNAggregationFilter", "parameters": "(@JsonProperty(\"m\") int m, @JsonProperty(\"n\") int n)", "modifiers": "@JsonCreator public", "return": "", "signature": " MOfNAggregationFilter(@JsonProperty(\"m\") int m, @JsonProperty(\"n\") int n)", "full_signature": "@JsonCreator public  MOfNAggregationFilter(@JsonProperty(\"m\") int m, @JsonProperty(\"n\") int n)", "class_method_signature": "MOfNAggregationFilter.MOfNAggregationFilter(@JsonProperty(\"m\") int m, @JsonProperty(\"n\") int n)", "testcase": false, "constructor": true}, {"identifier": "doFilter", "parameters": "(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "full_signature": "@Override public void doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "class_method_signature": "MOfNAggregationFilter.doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "numAnomalies", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int numAnomalies()", "full_signature": "private int numAnomalies()", "class_method_signature": "MOfNAggregationFilter.numAnomalies()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/filter/algo/MOfNAggregationFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain) {\n        chain.doFilter(detectorRequest, detectorResponse);\n        DetectorResult result = detectorResponse.getDetectorResult();\n        if (result instanceof OutlierDetectorResult) {\n            buffer[bufferIndex++] = result.getAnomalyLevel();\n            if (bufferIndex >= getN()) {\n                bufferIndex = 0;\n            }\n            val outlierDetectorResult = (OutlierDetectorResult) result;\n            val aggregatedResult = new OutlierDetectorResult()\n                    .setAnomalyLevel(result.getAnomalyLevel())\n                    .setPredicted(outlierDetectorResult.getPredicted())\n                    .setThresholds(outlierDetectorResult.getThresholds())\n                    .setTrusted(result.isTrusted());\n\n            if (numAnomalies() >= getM()) {\n                aggregatedResult.setAnomalyLevel(AnomalyLevel.STRONG);\n            }\n            detectorResponse.setDetectorResult(aggregatedResult);\n        } else {\n            log.warn(String.format(\"%s can only be used with %s types of DetectorResults. Skipping aggregation.\",\n                    this.getClass().getSimpleName(),\n                    OutlierDetectorResult.class.getSimpleName()));\n            chain.doFilter(detectorRequest, detectorResponse);\n        }\n    }", "signature": "void doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "full_signature": "@Override public void doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "class_method_signature": "MOfNAggregationFilter.doFilter(@NonNull DetectorRequest detectorRequest,\n                         @NonNull DetectorResponse detectorResponse,\n                         @NonNull DetectionFilterChain chain)", "testcase": false, "constructor": false, "invocations": ["doFilter", "getDetectorResult", "getAnomalyLevel", "getN", "setTrusted", "setThresholds", "setPredicted", "setAnomalyLevel", "getAnomalyLevel", "getPredicted", "getThresholds", "isTrusted", "numAnomalies", "getM", "setAnomalyLevel", "setDetectorResult", "warn", "format", "getSimpleName", "getClass", "getSimpleName", "doFilter"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}