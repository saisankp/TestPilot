{"test_class": {"identifier": "EnvironmentInformationTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/util/EnvironmentInformationTest.java"}, "test_case": {"identifier": "testLogEnvironmentInformation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLogEnvironmentInformation() {\n\t\ttry {\n\t\t\tLogger mockLogger = Mockito.mock(Logger.class);\n\t\t\tEnvironmentInformation.logEnvironmentInfo(mockLogger, \"test\", new String[0]);\n\t\t\tEnvironmentInformation.logEnvironmentInfo(mockLogger, \"test\", null);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testLogEnvironmentInformation()", "full_signature": "@Test public void testLogEnvironmentInformation()", "class_method_signature": "EnvironmentInformationTest.testLogEnvironmentInformation()", "testcase": true, "constructor": false, "invocations": ["mock", "logEnvironmentInfo", "logEnvironmentInfo", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "EnvironmentInformation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EnvironmentInformation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EnvironmentInformation.class)", "var_name": "LOG"}, {"original_string": "public static final String UNKNOWN = \"<unknown>\";", "modifier": "public static final", "type": "String", "declarator": "UNKNOWN = \"<unknown>\"", "var_name": "UNKNOWN"}], "methods": [{"identifier": "getVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getVersion()", "full_signature": "public static String getVersion()", "class_method_signature": "EnvironmentInformation.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getRevisionInformation", "parameters": "()", "modifiers": "public static", "return": "RevisionInformation", "signature": "RevisionInformation getRevisionInformation()", "full_signature": "public static RevisionInformation getRevisionInformation()", "class_method_signature": "EnvironmentInformation.getRevisionInformation()", "testcase": false, "constructor": false}, {"identifier": "getUserRunning", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getUserRunning()", "full_signature": "public static String getUserRunning()", "class_method_signature": "EnvironmentInformation.getUserRunning()", "testcase": false, "constructor": false}, {"identifier": "getMaxJvmHeapMemory", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getMaxJvmHeapMemory()", "full_signature": "public static long getMaxJvmHeapMemory()", "class_method_signature": "EnvironmentInformation.getMaxJvmHeapMemory()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfFreeHeapMemoryWithDefrag", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getSizeOfFreeHeapMemoryWithDefrag()", "full_signature": "public static long getSizeOfFreeHeapMemoryWithDefrag()", "class_method_signature": "EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag()", "testcase": false, "constructor": false}, {"identifier": "getSizeOfFreeHeapMemory", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getSizeOfFreeHeapMemory()", "full_signature": "public static long getSizeOfFreeHeapMemory()", "class_method_signature": "EnvironmentInformation.getSizeOfFreeHeapMemory()", "testcase": false, "constructor": false}, {"identifier": "getJvmVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getJvmVersion()", "full_signature": "public static String getJvmVersion()", "class_method_signature": "EnvironmentInformation.getJvmVersion()", "testcase": false, "constructor": false}, {"identifier": "getJvmStartupOptions", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getJvmStartupOptions()", "full_signature": "public static String getJvmStartupOptions()", "class_method_signature": "EnvironmentInformation.getJvmStartupOptions()", "testcase": false, "constructor": false}, {"identifier": "getJvmStartupOptionsArray", "parameters": "()", "modifiers": "public static", "return": "String[]", "signature": "String[] getJvmStartupOptionsArray()", "full_signature": "public static String[] getJvmStartupOptionsArray()", "class_method_signature": "EnvironmentInformation.getJvmStartupOptionsArray()", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFileDirectory", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getTemporaryFileDirectory()", "full_signature": "public static String getTemporaryFileDirectory()", "class_method_signature": "EnvironmentInformation.getTemporaryFileDirectory()", "testcase": false, "constructor": false}, {"identifier": "getOpenFileHandlesLimit", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getOpenFileHandlesLimit()", "full_signature": "public static long getOpenFileHandlesLimit()", "class_method_signature": "EnvironmentInformation.getOpenFileHandlesLimit()", "testcase": false, "constructor": false}, {"identifier": "logEnvironmentInfo", "parameters": "(Logger log, String componentName, String[] commandLineArgs)", "modifiers": "public static", "return": "void", "signature": "void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "full_signature": "public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "class_method_signature": "EnvironmentInformation.logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "testcase": false, "constructor": false}, {"identifier": "EnvironmentInformation", "parameters": "()", "modifiers": "private", "return": "", "signature": " EnvironmentInformation()", "full_signature": "private  EnvironmentInformation()", "class_method_signature": "EnvironmentInformation.EnvironmentInformation()", "testcase": false, "constructor": true}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java"}, "focal_method": {"identifier": "logEnvironmentInfo", "parameters": "(Logger log, String componentName, String[] commandLineArgs)", "modifiers": "public static", "return": "void", "body": "public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs) {\n\t\tif (log.isInfoEnabled()) {\n\t\t\tRevisionInformation rev = getRevisionInformation();\n\t\t\tString version = getVersion();\n\t\t\t\n\t\t\tString user = getUserRunning();\n\t\t\t\n\t\t\tString jvmVersion = getJvmVersion();\n\t\t\tString[] options = getJvmStartupOptionsArray();\n\t\t\t\n\t\t\tString javaHome = System.getenv(\"JAVA_HOME\");\n\t\t\t\n\t\t\tlong maxHeapMegabytes = getMaxJvmHeapMemory() >>> 20;\n\t\t\t\n\t\t\tlog.info(\"--------------------------------------------------------------------------------\");\n\t\t\tlog.info(\" Starting \" + componentName + \" (Version: \" + version + \", \"\n\t\t\t\t\t+ \"Rev:\" + rev.commitId + \", \" + \"Date:\" + rev.commitDate + \")\");\n\t\t\tlog.info(\" Current user: \" + user);\n\t\t\tlog.info(\" JVM: \" + jvmVersion);\n\t\t\tlog.info(\" Maximum heap size: \" + maxHeapMegabytes + \" MiBytes\");\n\t\t\tlog.info(\" JAVA_HOME: \" + (javaHome == null ? \"(not set)\" : javaHome));\n\t\t\tlog.info(\" Hadoop version: \" + VersionInfo.getVersion());\n\n\t\t\tif (options.length == 0) {\n\t\t\t\tlog.info(\" JVM Options: (none)\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.info(\" JVM Options:\");\n\t\t\t\tfor (String s: options) {\n\t\t\t\t\tlog.info(\"    \" + s);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (commandLineArgs == null || commandLineArgs.length == 0) {\n\t\t\t\tlog.info(\" Program Arguments: (none)\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.info(\" Program Arguments:\");\n\t\t\t\tfor (String s: commandLineArgs) {\n\t\t\t\t\tlog.info(\"    \" + s);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlog.info(\" Classpath: \" + System.getProperty(\"java.class.path\"));\n\n\t\t\tlog.info(\"--------------------------------------------------------------------------------\");\n\t\t}\n\t}", "signature": "void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "full_signature": "public static void logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "class_method_signature": "EnvironmentInformation.logEnvironmentInfo(Logger log, String componentName, String[] commandLineArgs)", "testcase": false, "constructor": false, "invocations": ["isInfoEnabled", "getRevisionInformation", "getVersion", "getUserRunning", "getJvmVersion", "getJvmStartupOptionsArray", "getenv", "getMaxJvmHeapMemory", "info", "info", "info", "info", "info", "info", "info", "getVersion", "info", "info", "info", "info", "info", "info", "info", "getProperty", "info"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}