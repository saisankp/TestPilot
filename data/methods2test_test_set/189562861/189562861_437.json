{"test_class": {"identifier": "SpringStatusCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpringStatusChecker springStatusChecker;", "modifier": "private", "type": "SpringStatusChecker", "declarator": "springStatusChecker", "var_name": "springStatusChecker"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/com/alibaba/dubbo/config/spring/status/SpringStatusCheckerTest.java"}, "test_case": {"identifier": "testWithoutApplicationContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithoutApplicationContext() {\n        Status status = springStatusChecker.check();\n\n        assertThat(status.getLevel(), is(Status.Level.UNKNOWN));\n    }", "signature": "void testWithoutApplicationContext()", "full_signature": "@Test public void testWithoutApplicationContext()", "class_method_signature": "SpringStatusCheckerTest.testWithoutApplicationContext()", "testcase": true, "constructor": false, "invocations": ["check", "assertThat", "getLevel", "is"]}, "focal_class": {"identifier": "SpringStatusChecker", "superclass": "", "interfaces": "implements StatusChecker", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SpringStatusChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SpringStatusChecker.class)", "var_name": "logger"}], "methods": [{"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "Status", "signature": "Status check()", "full_signature": "@Override public Status check()", "class_method_signature": "SpringStatusChecker.check()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/com/alibaba/dubbo/config/spring/status/SpringStatusChecker.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override public", "return": "Status", "body": "@Override\n    public Status check() {\n        ApplicationContext context = null;\n        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\n            if (c != null) {\n                context = c;\n                break;\n            }\n        }\n        if (context == null) {\n            return new Status(Status.Level.UNKNOWN);\n        }\n        Status.Level level = Status.Level.OK;\n        if (context instanceof Lifecycle) {\n            if (((Lifecycle) context).isRunning()) {\n                level = Status.Level.OK;\n            } else {\n                level = Status.Level.ERROR;\n            }\n        } else {\n            level = Status.Level.UNKNOWN;\n        }\n        StringBuilder buf = new StringBuilder();\n        try {\n            Class<?> cls = context.getClass();\n            Method method = null;\n            while (cls != null && method == null) {\n                try {\n                    method = cls.getDeclaredMethod(\"getConfigLocations\", new Class<?>[0]);\n                } catch (NoSuchMethodException t) {\n                    cls = cls.getSuperclass();\n                }\n            }\n            if (method != null) {\n                if (!method.isAccessible()) {\n                    method.setAccessible(true);\n                }\n                String[] configs = (String[]) method.invoke(context, new Object[0]);\n                if (configs != null && configs.length > 0) {\n                    for (String config : configs) {\n                        if (buf.length() > 0) {\n                            buf.append(\",\");\n                        }\n                        buf.append(config);\n                    }\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        }\n        return new Status(level, buf.toString());\n    }", "signature": "Status check()", "full_signature": "@Override public Status check()", "class_method_signature": "SpringStatusChecker.check()", "testcase": false, "constructor": false, "invocations": ["getContexts", "isRunning", "getClass", "getDeclaredMethod", "getSuperclass", "isAccessible", "setAccessible", "invoke", "length", "append", "append", "warn", "getMessage", "toString"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}