{"test_class": {"identifier": "BusyLoopEventSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BusyLoopEventScheduler scheduler;", "modifier": "private", "type": "BusyLoopEventScheduler", "declarator": "scheduler", "var_name": "scheduler"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/scheduling/BusyLoopEventSchedulerTest.java"}, "test_case": {"identifier": "testGetQueueSize", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetQueueSize() {\n        Assertions.assertEquals(0, scheduler.getQueueSize());\n\n        scheduler.doAt(1000, Runnables.doNothing());\n        Assertions.assertEquals(1, scheduler.getQueueSize());\n    }", "signature": "void testGetQueueSize()", "full_signature": "@Test void testGetQueueSize()", "class_method_signature": "BusyLoopEventSchedulerTest.testGetQueueSize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getQueueSize", "doAt", "doNothing", "assertEquals", "getQueueSize"]}, "focal_class": {"identifier": "BusyLoopEventScheduler", "superclass": "extends TypedEventScheduler", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(BusyLoopEventScheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BusyLoopEventScheduler.class)", "var_name": "logger"}, {"original_string": "private final BusyLoopQueue busyLoopQueue;", "modifier": "private final", "type": "BusyLoopQueue", "declarator": "busyLoopQueue", "var_name": "busyLoopQueue"}, {"original_string": "private final TimeProvider timeProvider;", "modifier": "private final", "type": "TimeProvider", "declarator": "timeProvider", "var_name": "timeProvider"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final Set<Consumer<Throwable>> failureListeners = new HashSet<>();", "modifier": "private final", "type": "Set<Consumer<Throwable>>", "declarator": "failureListeners = new HashSet<>()", "var_name": "failureListeners"}, {"original_string": "private final Set<Consumer<RecoverableException>> recoverableFailureListeners = new HashSet<>();", "modifier": "private final", "type": "Set<Consumer<RecoverableException>>", "declarator": "recoverableFailureListeners = new HashSet<>()", "var_name": "recoverableFailureListeners"}, {"original_string": "private final Set<Runnable> onShutDowns = new HashSet<>();", "modifier": "private final", "type": "Set<Runnable>", "declarator": "onShutDowns = new HashSet<>()", "var_name": "onShutDowns"}, {"original_string": "private final ThreadManager threadManager;", "modifier": "private final", "type": "ThreadManager", "declarator": "threadManager", "var_name": "threadManager"}, {"original_string": "private final boolean heartbeatMonitor;", "modifier": "private final", "type": "boolean", "declarator": "heartbeatMonitor", "var_name": "heartbeatMonitor"}, {"original_string": "private final long parkDurationNanos;", "modifier": "private final", "type": "long", "declarator": "parkDurationNanos", "var_name": "parkDurationNanos"}, {"original_string": "private final boolean useLowLatencyRunner;", "modifier": "private final", "type": "boolean", "declarator": "useLowLatencyRunner", "var_name": "useLowLatencyRunner"}, {"original_string": "private volatile boolean shouldStop = false;", "modifier": "private volatile", "type": "boolean", "declarator": "shouldStop = false", "var_name": "shouldStop"}, {"original_string": "private volatile long threadId;", "modifier": "private volatile", "type": "long", "declarator": "threadId", "var_name": "threadId"}], "methods": [{"identifier": "BusyLoopEventScheduler", "parameters": "(\n            TimeProvider timeProvider,\n            String name,\n            EventSchedulerType type,\n            ThreadManager threadManager,\n            boolean heartbeatMonitor,\n            BusyLoopQueueType busyLoopQueueType,\n            int size,\n            long parkDurationNanos,\n            boolean useLowLatencyRunner)", "modifiers": "public", "return": "", "signature": " BusyLoopEventScheduler(\n            TimeProvider timeProvider,\n            String name,\n            EventSchedulerType type,\n            ThreadManager threadManager,\n            boolean heartbeatMonitor,\n            BusyLoopQueueType busyLoopQueueType,\n            int size,\n            long parkDurationNanos,\n            boolean useLowLatencyRunner)", "full_signature": "public  BusyLoopEventScheduler(\n            TimeProvider timeProvider,\n            String name,\n            EventSchedulerType type,\n            ThreadManager threadManager,\n            boolean heartbeatMonitor,\n            BusyLoopQueueType busyLoopQueueType,\n            int size,\n            long parkDurationNanos,\n            boolean useLowLatencyRunner)", "class_method_signature": "BusyLoopEventScheduler.BusyLoopEventScheduler(\n            TimeProvider timeProvider,\n            String name,\n            EventSchedulerType type,\n            ThreadManager threadManager,\n            boolean heartbeatMonitor,\n            BusyLoopQueueType busyLoopQueueType,\n            int size,\n            long parkDurationNanos,\n            boolean useLowLatencyRunner)", "testcase": false, "constructor": true}, {"identifier": "BusyLoopEventScheduler", "parameters": "(TimeProvider timeProvider, String name, EventSchedulerType type, ThreadManager threadManager, boolean heartbeatMonitor, long parkDurationNanos, boolean useLowLatencyRunner)", "modifiers": "public", "return": "", "signature": " BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type, ThreadManager threadManager, boolean heartbeatMonitor, long parkDurationNanos, boolean useLowLatencyRunner)", "full_signature": "public  BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type, ThreadManager threadManager, boolean heartbeatMonitor, long parkDurationNanos, boolean useLowLatencyRunner)", "class_method_signature": "BusyLoopEventScheduler.BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type, ThreadManager threadManager, boolean heartbeatMonitor, long parkDurationNanos, boolean useLowLatencyRunner)", "testcase": false, "constructor": true}, {"identifier": "BusyLoopEventScheduler", "parameters": "(TimeProvider timeProvider, String name, EventSchedulerType type)", "modifiers": "public", "return": "", "signature": " BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type)", "full_signature": "public  BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type)", "class_method_signature": "BusyLoopEventScheduler.BusyLoopEventScheduler(TimeProvider timeProvider, String name, EventSchedulerType type)", "testcase": false, "constructor": true}, {"identifier": "cancel", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void cancel(Event event)", "full_signature": "@Override public void cancel(Event event)", "class_method_signature": "BusyLoopEventScheduler.cancel(Event event)", "testcase": false, "constructor": false}, {"identifier": "getTimeProvider", "parameters": "()", "modifiers": "@Override public", "return": "TimeProvider", "signature": "TimeProvider getTimeProvider()", "full_signature": "@Override public TimeProvider getTimeProvider()", "class_method_signature": "BusyLoopEventScheduler.getTimeProvider()", "testcase": false, "constructor": false}, {"identifier": "doNow", "parameters": "(Runnable r, String description)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doNow(Runnable r, String description)", "full_signature": "@Override public Cancelable doNow(Runnable r, String description)", "class_method_signature": "BusyLoopEventScheduler.doNow(Runnable r, String description)", "testcase": false, "constructor": false}, {"identifier": "doAt", "parameters": "(double time, Runnable r, String description, boolean isDaemon)", "modifiers": "@Override public", "return": "Cancelable", "signature": "Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "full_signature": "@Override public Cancelable doAt(double time, Runnable r, String description, boolean isDaemon)", "class_method_signature": "BusyLoopEventScheduler.doAt(double time, Runnable r, String description, boolean isDaemon)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "BusyLoopEventScheduler.start()", "testcase": false, "constructor": false}, {"identifier": "threadStart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void threadStart()", "full_signature": "private void threadStart()", "class_method_signature": "BusyLoopEventScheduler.threadStart()", "testcase": false, "constructor": false}, {"identifier": "runThroughputLoop", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void runThroughputLoop()", "full_signature": "private void runThroughputLoop()", "class_method_signature": "BusyLoopEventScheduler.runThroughputLoop()", "testcase": false, "constructor": false}, {"identifier": "runLowLatencyLoop", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void runLowLatencyLoop()", "full_signature": "private void runLowLatencyLoop()", "class_method_signature": "BusyLoopEventScheduler.runLowLatencyLoop()", "testcase": false, "constructor": false}, {"identifier": "runLowLatencyNowLoop", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void runLowLatencyNowLoop()", "full_signature": "private void runLowLatencyNowLoop()", "class_method_signature": "BusyLoopEventScheduler.runLowLatencyNowLoop()", "testcase": false, "constructor": false}, {"identifier": "runLowLatencyScheduledLoop", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void runLowLatencyScheduledLoop()", "full_signature": "private void runLowLatencyScheduledLoop()", "class_method_signature": "BusyLoopEventScheduler.runLowLatencyScheduledLoop()", "testcase": false, "constructor": false}, {"identifier": "threadExceptionHandler", "parameters": "(Event lastEvent, Throwable t)", "modifiers": "private", "return": "void", "signature": "void threadExceptionHandler(Event lastEvent, Throwable t)", "full_signature": "private void threadExceptionHandler(Event lastEvent, Throwable t)", "class_method_signature": "BusyLoopEventScheduler.threadExceptionHandler(Event lastEvent, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(Event event, Throwable t)", "modifiers": "private", "return": "void", "signature": "void fail(Event event, Throwable t)", "full_signature": "private void fail(Event event, Throwable t)", "class_method_signature": "BusyLoopEventScheduler.fail(Event event, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "hasOnlyDaemonEvents", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasOnlyDaemonEvents()", "full_signature": "@Override public boolean hasOnlyDaemonEvents()", "class_method_signature": "BusyLoopEventScheduler.hasOnlyDaemonEvents()", "testcase": false, "constructor": false}, {"identifier": "registerOnShutDown", "parameters": "(Runnable onShutDown)", "modifiers": "public", "return": "void", "signature": "void registerOnShutDown(Runnable onShutDown)", "full_signature": "public void registerOnShutDown(Runnable onShutDown)", "class_method_signature": "BusyLoopEventScheduler.registerOnShutDown(Runnable onShutDown)", "testcase": false, "constructor": false}, {"identifier": "registerFailureListener", "parameters": "(Consumer<Throwable> l)", "modifiers": "public", "return": "void", "signature": "void registerFailureListener(Consumer<Throwable> l)", "full_signature": "public void registerFailureListener(Consumer<Throwable> l)", "class_method_signature": "BusyLoopEventScheduler.registerFailureListener(Consumer<Throwable> l)", "testcase": false, "constructor": false}, {"identifier": "registerRecoverableFailureListener", "parameters": "(Consumer<RecoverableException> l)", "modifiers": "public", "return": "void", "signature": "void registerRecoverableFailureListener(Consumer<RecoverableException> l)", "full_signature": "public void registerRecoverableFailureListener(Consumer<RecoverableException> l)", "class_method_signature": "BusyLoopEventScheduler.registerRecoverableFailureListener(Consumer<RecoverableException> l)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "BusyLoopEventScheduler.stop()", "testcase": false, "constructor": false}, {"identifier": "onStop", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onStop()", "full_signature": "private void onStop()", "class_method_signature": "BusyLoopEventScheduler.onStop()", "testcase": false, "constructor": false}, {"identifier": "getThreadId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getThreadId()", "full_signature": "@Override public long getThreadId()", "class_method_signature": "BusyLoopEventScheduler.getThreadId()", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "BusyLoopEventScheduler.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "addHeartbeatMonitor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addHeartbeatMonitor()", "full_signature": "private void addHeartbeatMonitor()", "class_method_signature": "BusyLoopEventScheduler.addHeartbeatMonitor()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/scheduling/BusyLoopEventScheduler.java"}, "focal_method": {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getQueueSize() {\n        return busyLoopQueue.size();\n    }", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "BusyLoopEventScheduler.getQueueSize()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}