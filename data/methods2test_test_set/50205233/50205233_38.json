{"test_class": {"identifier": "FiltersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configurator build;", "modifier": "private", "type": "Configurator", "declarator": "build", "var_name": "build"}, {"original_string": "private Filters filters;", "modifier": "private", "type": "Filters", "declarator": "filters", "var_name": "filters"}], "file": "debezium-connector-mongodb/src/test/java/io/debezium/connector/mongodb/FiltersTest.java"}, "test_case": {"identifier": "shouldExcludeDatabaseCoveredByMultipleLiteralsInBlacklist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldExcludeDatabaseCoveredByMultipleLiteralsInBlacklist() {\n        filters = build.excludeDatabases(\"db1,db2\").createFilters();\n        assertThat(filters.databaseFilter().test(\"db1\")).isFalse();\n        assertThat(filters.databaseFilter().test(\"db2\")).isFalse();\n    }", "signature": "void shouldExcludeDatabaseCoveredByMultipleLiteralsInBlacklist()", "full_signature": "@Test public void shouldExcludeDatabaseCoveredByMultipleLiteralsInBlacklist()", "class_method_signature": "FiltersTest.shouldExcludeDatabaseCoveredByMultipleLiteralsInBlacklist()", "testcase": true, "constructor": false, "invocations": ["createFilters", "excludeDatabases", "isFalse", "assertThat", "test", "databaseFilter", "isFalse", "assertThat", "test", "databaseFilter"]}, "focal_class": {"identifier": "Filters", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Set<String> BUILT_IN_DB_NAMES = Collect.unmodifiableSet(\"local\", \"admin\");", "modifier": "protected static final", "type": "Set<String>", "declarator": "BUILT_IN_DB_NAMES = Collect.unmodifiableSet(\"local\", \"admin\")", "var_name": "BUILT_IN_DB_NAMES"}, {"original_string": "private final Predicate<String> databaseFilter;", "modifier": "private final", "type": "Predicate<String>", "declarator": "databaseFilter", "var_name": "databaseFilter"}, {"original_string": "private final Predicate<CollectionId> collectionFilter;", "modifier": "private final", "type": "Predicate<CollectionId>", "declarator": "collectionFilter", "var_name": "collectionFilter"}, {"original_string": "private final FieldSelector fieldSelector;", "modifier": "private final", "type": "FieldSelector", "declarator": "fieldSelector", "var_name": "fieldSelector"}], "methods": [{"identifier": "Filters", "parameters": "(Configuration config)", "modifiers": "public", "return": "", "signature": " Filters(Configuration config)", "full_signature": "public  Filters(Configuration config)", "class_method_signature": "Filters.Filters(Configuration config)", "testcase": false, "constructor": true}, {"identifier": "databaseFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<String>", "signature": "Predicate<String> databaseFilter()", "full_signature": "public Predicate<String> databaseFilter()", "class_method_signature": "Filters.databaseFilter()", "testcase": false, "constructor": false}, {"identifier": "collectionFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<CollectionId>", "signature": "Predicate<CollectionId> collectionFilter()", "full_signature": "public Predicate<CollectionId> collectionFilter()", "class_method_signature": "Filters.collectionFilter()", "testcase": false, "constructor": false}, {"identifier": "fieldFilterFor", "parameters": "(CollectionId id)", "modifiers": "public", "return": "FieldFilter", "signature": "FieldFilter fieldFilterFor(CollectionId id)", "full_signature": "public FieldFilter fieldFilterFor(CollectionId id)", "class_method_signature": "Filters.fieldFilterFor(CollectionId id)", "testcase": false, "constructor": false}, {"identifier": "isNotBuiltIn", "parameters": "(CollectionId id)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNotBuiltIn(CollectionId id)", "full_signature": "protected boolean isNotBuiltIn(CollectionId id)", "class_method_signature": "Filters.isNotBuiltIn(CollectionId id)", "testcase": false, "constructor": false}], "file": "debezium-connector-mongodb/src/main/java/io/debezium/connector/mongodb/Filters.java"}, "focal_method": {"identifier": "databaseFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<String>", "body": "public Predicate<String> databaseFilter() {\n        return databaseFilter;\n    }", "signature": "Predicate<String> databaseFilter()", "full_signature": "public Predicate<String> databaseFilter()", "class_method_signature": "Filters.databaseFilter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}