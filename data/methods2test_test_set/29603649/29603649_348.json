{"test_class": {"identifier": "FastInfosetCompressionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SAXDocumentSerializer saxDocumentSerializer;", "modifier": "@Mock\n    private", "type": "SAXDocumentSerializer", "declarator": "saxDocumentSerializer", "var_name": "saxDocumentSerializer"}, {"original_string": "@Mock\n    private SAXParser saxParser;", "modifier": "@Mock\n    private", "type": "SAXParser", "declarator": "saxParser", "var_name": "saxParser"}, {"original_string": "@Mock\n    private SAXParserFactory saxParserFactory;", "modifier": "@Mock\n    private", "type": "SAXParserFactory", "declarator": "saxParserFactory", "var_name": "saxParserFactory"}, {"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private SAXParserFactoryCreator saxParserFactoryCreator;", "modifier": "@Mock\n    private", "type": "SAXParserFactoryCreator", "declarator": "saxParserFactoryCreator", "var_name": "saxParserFactoryCreator"}, {"original_string": "@Mock\n    private SAXDocumentSerializerFactory documentSerializerFactory;", "modifier": "@Mock\n    private", "type": "SAXDocumentSerializerFactory", "declarator": "documentSerializerFactory", "var_name": "documentSerializerFactory"}, {"original_string": "@Mock\n    private ByteArrayOutputStreamFactory outputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "outputStreamFactory", "var_name": "outputStreamFactory"}, {"original_string": "@Mock\n    private ByteArrayOutputStream baos;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStream", "declarator": "baos", "var_name": "baos"}, {"original_string": "@Mock\n    private Transformer transformer;", "modifier": "@Mock\n    private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private FastInfosetSource fISource;", "modifier": "@Mock\n    private", "type": "FastInfosetSource", "declarator": "fISource", "var_name": "fISource"}, {"original_string": "@Mock\n    private FastInfosetSourceFactory fastInfosetSourceFactory;", "modifier": "@Mock\n    private", "type": "FastInfosetSourceFactory", "declarator": "fastInfosetSourceFactory", "var_name": "fastInfosetSourceFactory"}, {"original_string": "@Mock\n    private FastInfosetTransformerFactory transformerFactory;", "modifier": "@Mock\n    private", "type": "FastInfosetTransformerFactory", "declarator": "transformerFactory", "var_name": "transformerFactory"}, {"original_string": "@Mock\n    private StreamResultFactory streamResultFactory;", "modifier": "@Mock\n    private", "type": "StreamResultFactory", "declarator": "streamResultFactory", "var_name": "streamResultFactory"}, {"original_string": "@InjectMocks\n    private FastInfosetCompressionService underTest;", "modifier": "@InjectMocks\n    private", "type": "FastInfosetCompressionService", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-compression/src/test/java/com/epam/wilma/compression/fis/FastInfosetCompressionServiceTest.java"}, "test_case": {"identifier": "testDecompressShouldDoTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecompressShouldDoTransform() throws TransformerException {\n        //GIVEN\n        StreamResult result = new StreamResult(new StringWriter());\n        given(transformerFactory.createTransformer()).willReturn(transformer);\n        given(fastInfosetSourceFactory.createFastInfosetSource(inputStream)).willReturn(fISource);\n        given(streamResultFactory.createStreamResult()).willReturn(result);\n        given(outputStreamFactory.createByteArrayOutputStream()).willReturn(baos);\n        //WHEN\n        underTest.decompress(inputStream);\n        //THEN\n        verify(transformer).transform(fISource, result);\n    }", "signature": "void testDecompressShouldDoTransform()", "full_signature": "@Test public void testDecompressShouldDoTransform()", "class_method_signature": "FastInfosetCompressionServiceTest.testDecompressShouldDoTransform()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createTransformer", "willReturn", "given", "createFastInfosetSource", "willReturn", "given", "createStreamResult", "willReturn", "given", "createByteArrayOutputStream", "decompress", "transform", "verify"]}, "focal_class": {"identifier": "FastInfosetCompressionService", "superclass": "", "interfaces": "implements CompressionService", "fields": [{"original_string": "@Autowired\n    private SAXParserFactoryCreator saxParserCreator;", "modifier": "@Autowired\n    private", "type": "SAXParserFactoryCreator", "declarator": "saxParserCreator", "var_name": "saxParserCreator"}, {"original_string": "@Autowired\n    private SAXDocumentSerializerFactory documentSerializerFactory;", "modifier": "@Autowired\n    private", "type": "SAXDocumentSerializerFactory", "declarator": "documentSerializerFactory", "var_name": "documentSerializerFactory"}, {"original_string": "@Autowired\n    private ByteArrayOutputStreamFactory outputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "outputStreamFactory", "var_name": "outputStreamFactory"}, {"original_string": "@Autowired\n    private FastInfosetSourceFactory fastInfosetSourceFactory;", "modifier": "@Autowired\n    private", "type": "FastInfosetSourceFactory", "declarator": "fastInfosetSourceFactory", "var_name": "fastInfosetSourceFactory"}, {"original_string": "@Autowired\n    private FastInfosetTransformerFactory fastInfosetTransformerFactory;", "modifier": "@Autowired\n    private", "type": "FastInfosetTransformerFactory", "declarator": "fastInfosetTransformerFactory", "var_name": "fastInfosetTransformerFactory"}, {"original_string": "@Autowired\n    private StreamResultFactory streamResultFactory;", "modifier": "@Autowired\n    private", "type": "StreamResultFactory", "declarator": "streamResultFactory", "var_name": "streamResultFactory"}], "methods": [{"identifier": "compress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream compress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream compress(final InputStream inputStream)", "class_method_signature": "FastInfosetCompressionService.compress(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "decompress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "signature": "ByteArrayOutputStream decompress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream decompress(final InputStream inputStream)", "class_method_signature": "FastInfosetCompressionService.decompress(final InputStream inputStream)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-compression/src/main/java/com/epam/wilma/compression/fis/FastInfosetCompressionService.java"}, "focal_method": {"identifier": "decompress", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public", "return": "ByteArrayOutputStream", "body": "@Override\n    public ByteArrayOutputStream decompress(final InputStream inputStream) {\n        StreamResult streamResult = streamResultFactory.createStreamResult();\n        InputStream fiDocument = inputStream;\n        ByteArrayOutputStream baos = outputStreamFactory.createByteArrayOutputStream();\n        try {\n            Transformer tx = fastInfosetTransformerFactory.createTransformer();\n            tx.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n            tx.setOutputProperty(OutputKeys.INDENT, \"yes\");\n            FastInfosetSource fastInfosetSource = fastInfosetSourceFactory.createFastInfosetSource(fiDocument);\n            tx.transform(fastInfosetSource, streamResult);\n            fiDocument.close();\n            baos.write(streamResult.getWriter().toString().getBytes());\n        } catch (TransformerFactoryConfigurationError | Exception e) {\n            throw new SystemException(\"Could not perform fastinfoset decompression!\", e);\n        }\n        return baos;\n    }", "signature": "ByteArrayOutputStream decompress(final InputStream inputStream)", "full_signature": "@Override public ByteArrayOutputStream decompress(final InputStream inputStream)", "class_method_signature": "FastInfosetCompressionService.decompress(final InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["createStreamResult", "createByteArrayOutputStream", "createTransformer", "setOutputProperty", "setOutputProperty", "createFastInfosetSource", "transform", "close", "write", "getBytes", "toString", "getWriter"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}