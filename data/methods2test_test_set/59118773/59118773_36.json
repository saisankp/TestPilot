{"test_class": {"identifier": "AverageTenderAndAwardPeriodsControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AverageTenderAndAwardPeriodsController averageTenderAndAwardPeriodsController;", "modifier": "@Autowired\n    private", "type": "AverageTenderAndAwardPeriodsController", "declarator": "averageTenderAndAwardPeriodsController", "var_name": "averageTenderAndAwardPeriodsController"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/AverageTenderAndAwardPeriodsControllerTest.java"}, "test_case": {"identifier": "averageAwardPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void averageAwardPeriod() throws Exception {\n        final List<Document> averageAwardPeriod = averageTenderAndAwardPeriodsController\n                .averageAwardPeriod(new YearFilterPagingRequest());\n\n        final Document first = averageAwardPeriod.get(0);\n        int year = (int) first.get(AverageTenderAndAwardPeriodsController.Keys.YEAR);\n        double averageAwardDays = (double) first.get(AverageTenderAndAwardPeriodsController.Keys.AVERAGE_AWARD_DAYS);\n        Assert.assertEquals(2015, year);\n        Assert.assertEquals(365.0, averageAwardDays, 0);\n\n        final Document second = averageAwardPeriod.get(1);\n        year = (int) second.get(AverageTenderAndAwardPeriodsController.Keys.YEAR);\n        averageAwardDays = (double) second.get(AverageTenderAndAwardPeriodsController.Keys.AVERAGE_AWARD_DAYS);\n        Assert.assertEquals(2016, year);\n        Assert.assertEquals(405.0, averageAwardDays, 0);\n    }", "signature": "void averageAwardPeriod()", "full_signature": "@Test public void averageAwardPeriod()", "class_method_signature": "AverageTenderAndAwardPeriodsControllerTest.averageAwardPeriod()", "testcase": true, "constructor": false, "invocations": ["averageAwardPeriod", "get", "get", "get", "assertEquals", "assertEquals", "get", "get", "get", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "AverageTenderAndAwardPeriodsController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "averageTenderPeriod", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Calculates the average tender period, per each year. The year is taken from \" + \"tender.tenderPeriod.startDate and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/averageTenderPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> averageTenderPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Calculates the average tender period, per each year. The year is taken from \" + \"tender.tenderPeriod.startDate and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate\") @RequestMapping(value = \"/api/averageTenderPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> averageTenderPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "AverageTenderAndAwardPeriodsController.averageTenderPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "qualityAverageTenderPeriod", "parameters": "(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Quality indicator for averageTenderPeriod endpoint, \" + \"showing the percentage of tenders that have start and end dates vs the total tenders in the system\") @RequestMapping(value = \"/api/qualityAverageTenderPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> qualityAverageTenderPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Quality indicator for averageTenderPeriod endpoint, \" + \"showing the percentage of tenders that have start and end dates vs the total tenders in the system\") @RequestMapping(value = \"/api/qualityAverageTenderPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> qualityAverageTenderPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "class_method_signature": "AverageTenderAndAwardPeriodsController.qualityAverageTenderPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "averageAwardPeriod", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Calculates the average award period, per each year. The year is taken from \" + \"awards.date and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate. The award has to be active.\") @RequestMapping(value = \"/api/averageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Calculates the average award period, per each year. The year is taken from \" + \"awards.date and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate. The award has to be active.\") @RequestMapping(value = \"/api/averageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "AverageTenderAndAwardPeriodsController.averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "qualityAverageAwardPeriod", "parameters": "(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Quality indicator for averageAwardPeriod endpoint, \" + \"showing the percentage of awards that have start and end dates vs the total tenders in the system\") @RequestMapping(value = \"/api/qualityAverageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> qualityAverageAwardPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Quality indicator for averageAwardPeriod endpoint, \" + \"showing the percentage of awards that have start and end dates vs the total tenders in the system\") @RequestMapping(value = \"/api/qualityAverageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> qualityAverageAwardPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "class_method_signature": "AverageTenderAndAwardPeriodsController.qualityAverageAwardPeriod(@ModelAttribute @Valid final DefaultFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/AverageTenderAndAwardPeriodsController.java"}, "focal_method": {"identifier": "averageAwardPeriod", "parameters": "(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Calculates the average award period, per each year. The year is taken from \" + \"awards.date and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate. The award has to be active.\") @RequestMapping(value = \"/api/averageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Calculates the average award period, per each year. The year is taken from \"\n            + \"awards.date and the duration is taken by counting the days\"\n            + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate. The award has to be active.\")\n    @RequestMapping(value = \"/api/averageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject awardLengthDays = new BasicDBObject(\"$divide\", Arrays.asList(\n                new BasicDBObject(\"$subtract\", Arrays.asList(\n                        ref(MongoConstants.FieldNames.AWARDS_DATE),\n                        ref(MongoConstants.FieldNames.TENDER_PERIOD_END_DATE)\n                )), DAY_MS));\n\n        DBObject project = new BasicDBObject();\n        project.put(Fields.UNDERSCORE_ID, 0);\n        addYearlyMonthlyProjection(filter, project, ref(MongoConstants.FieldNames.AWARDS_DATE));\n        project.put(\"awardLengthDays\", awardLengthDays);\n        project.put(MongoConstants.FieldNames.AWARDS_DATE, 1);\n        project.put(MongoConstants.FieldNames.AWARDS_STATUS, 1);\n        project.put(MongoConstants.FieldNames.TENDER_PERIOD_END_DATE, 1);\n\n        Aggregation agg = newAggregation(\n                // this is repeated so we gain speed by filtering items before\n                // unwind\n                match(where(MongoConstants.FieldNames.TENDER_PERIOD_END_DATE)\n                        .exists(true).and(MongoConstants.FieldNames.AWARDS_DATE).exists(true)\n                        .and(MongoConstants.FieldNames.AWARDS_STATUS).is(Award.Status.active.toString())),\n                unwind(\"awards\"),\n                // we need to filter the awards again after unwind\n                match(where(MongoConstants.FieldNames.AWARDS_DATE).exists(true)\n                        .and(MongoConstants.FieldNames.AWARDS_STATUS)\n                        .is(Award.Status.active.toString())\n                        .andOperator(getYearDefaultFilterCriteria(\n                                filter.awardFiltering(),\n                                MongoConstants.FieldNames.AWARDS_DATE\n                        ))),\n                new CustomOperation(new Document(\"$project\", project)),\n                group(getYearlyMonthlyGroupingFields(filter)).avg(\"$awardLengthDays\").as(Keys.AVERAGE_AWARD_DAYS),\n                transformYearlyGrouping(filter).andInclude(Keys.AVERAGE_AWARD_DAYS),\n                getSortByYearMonth(filter), skip(filter.getSkip()),\n                limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Calculates the average award period, per each year. The year is taken from \" + \"awards.date and the duration is taken by counting the days\" + \"between tender.tenderPeriod.endDate and tender.tenderPeriod.startDate. The award has to be active.\") @RequestMapping(value = \"/api/averageAwardPeriod\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "AverageTenderAndAwardPeriodsController.averageAwardPeriod(@ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["asList", "asList", "ref", "ref", "put", "addYearlyMonthlyProjection", "ref", "put", "put", "put", "put", "newAggregation", "match", "is", "and", "exists", "and", "exists", "where", "toString", "unwind", "match", "andOperator", "is", "and", "exists", "where", "toString", "getYearDefaultFilterCriteria", "awardFiltering", "as", "avg", "group", "getYearlyMonthlyGroupingFields", "andInclude", "transformYearlyGrouping", "getSortByYearMonth", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}