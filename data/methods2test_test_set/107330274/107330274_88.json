{"test_class": {"identifier": "CallbackCountDownLatchTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/concurrency/CallbackCountDownLatchTest.java"}, "test_case": {"identifier": "asyncCallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void asyncCallback() {\n        final Executor mockExecutor = mock(Executor.class);\n        final Runnable noop = () -> {\n        };\n        final CallbackCountDownLatch latch = new CallbackCountDownLatch(2, noop, mockExecutor);\n        verify(mockExecutor, never()).execute(any());\n        latch.countDown();\n        verify(mockExecutor, never()).execute(any());\n        latch.countDown();\n        verify(mockExecutor).execute(any());\n\n        // only called once\n        latch.countDown();\n        verify(mockExecutor).execute(any());\n    }", "signature": "void asyncCallback()", "full_signature": "@Test public void asyncCallback()", "class_method_signature": "CallbackCountDownLatchTest.asyncCallback()", "testcase": true, "constructor": false, "invocations": ["mock", "execute", "verify", "never", "any", "countDown", "execute", "verify", "never", "any", "countDown", "execute", "verify", "any", "countDown", "execute", "verify", "any"]}, "focal_class": {"identifier": "CallbackCountDownLatch", "superclass": "extends CountDownLatch", "interfaces": "", "fields": [{"original_string": "private final CompletableFuture<Void> future;", "modifier": "private final", "type": "CompletableFuture<Void>", "declarator": "future", "var_name": "future"}], "methods": [{"identifier": "CallbackCountDownLatch", "parameters": "(int size, Runnable callback)", "modifiers": "public", "return": "", "signature": " CallbackCountDownLatch(int size, Runnable callback)", "full_signature": "public  CallbackCountDownLatch(int size, Runnable callback)", "class_method_signature": "CallbackCountDownLatch.CallbackCountDownLatch(int size, Runnable callback)", "testcase": false, "constructor": true}, {"identifier": "CallbackCountDownLatch", "parameters": "(int size, Runnable callback, Executor executor)", "modifiers": "public", "return": "", "signature": " CallbackCountDownLatch(int size, Runnable callback, Executor executor)", "full_signature": "public  CallbackCountDownLatch(int size, Runnable callback, Executor executor)", "class_method_signature": "CallbackCountDownLatch.CallbackCountDownLatch(int size, Runnable callback, Executor executor)", "testcase": false, "constructor": true}, {"identifier": "countDown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void countDown()", "full_signature": "@Override public void countDown()", "class_method_signature": "CallbackCountDownLatch.countDown()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/concurrency/CallbackCountDownLatch.java"}, "focal_method": {"identifier": "countDown", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void countDown() {\n        super.countDown();\n        if (getCount() <= 0) {\n            future.complete(null);\n        }\n    }", "signature": "void countDown()", "full_signature": "@Override public void countDown()", "class_method_signature": "CallbackCountDownLatch.countDown()", "testcase": false, "constructor": false, "invocations": ["countDown", "getCount", "complete"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}