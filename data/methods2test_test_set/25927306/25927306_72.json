{"test_class": {"identifier": "RandomConnectionStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/RandomConnectionStrategyTest.java"}, "test_case": {"identifier": "firstAndSecondUrlInactive", "parameters": "()", "modifiers": "@Test(groups = \"conn\") public", "return": "void", "body": "@Test(groups = \"conn\")\n  public void firstAndSecondUrlInactive()\n    throws Exception\n  {\n    final RandomConnectionStrategy strategy = new RandomConnectionStrategy();\n    final ConnectionConfig cc = new ConnectionConfig();\n    cc.setLdapUrl(\"ldap://directory-1.ldaptive.org ldap://directory-2.ldaptive.org ldap://directory-3.ldaptive.org\");\n    cc.setConnectionStrategy(strategy);\n    final MockConnection conn = new MockConnection(cc);\n    conn.setOpenPredicate(new Predicate<>() {\n      private int count;\n\n      @Override\n      public boolean test(final LdapURL url)\n      {\n        if (count == 0 || count == 1) {\n          count++;\n          return false;\n        }\n        return true;\n      }\n    });\n    conn.setTestPredicate(ldapURL -> true);\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n\n    // first and second entry should fail\n    conn.open();\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 1);\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 2);\n\n    // confirm the inactive entries stay at the end\n    List<LdapURL> applyList = StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList());\n    Assert.assertEquals(applyList.size(), 3);\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(0)));\n    Assert.assertTrue(\n      strategy.ldapURLSet.getInactiveUrls().contains(applyList.get(1)));\n    Assert.assertTrue(\n      strategy.ldapURLSet.getInactiveUrls().contains(applyList.get(2)));\n\n    // mark first entry as active\n    strategy.success(strategy.ldapURLSet.getInactiveUrls().iterator().next());\n    applyList = StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList());\n    Assert.assertEquals(applyList.size(), 3);\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 2);\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 1);\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(0)));\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(1)));\n    Assert.assertTrue(\n      strategy.ldapURLSet.getInactiveUrls().contains(applyList.get(2)));\n\n    // mark second entry as active\n    strategy.success(strategy.ldapURLSet.getInactiveUrls().iterator().next());\n    applyList = StreamSupport.stream(strategy.spliterator(), false).collect(Collectors.toList());\n    Assert.assertEquals(applyList.size(), 3);\n    Assert.assertEquals(strategy.ldapURLSet.getActiveUrls().size(), 3);\n    Assert.assertEquals(strategy.ldapURLSet.getInactiveUrls().size(), 0);\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(0)));\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(1)));\n    Assert.assertTrue(strategy.ldapURLSet.getActiveUrls().contains(applyList.get(2)));\n  }", "signature": "void firstAndSecondUrlInactive()", "full_signature": "@Test(groups = \"conn\") public void firstAndSecondUrlInactive()", "class_method_signature": "RandomConnectionStrategyTest.firstAndSecondUrlInactive()", "testcase": true, "constructor": false, "invocations": ["setLdapUrl", "setConnectionStrategy", "setOpenPredicate", "setTestPredicate", "assertEquals", "size", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "open", "assertEquals", "size", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "collect", "stream", "spliterator", "toList", "assertEquals", "size", "assertTrue", "contains", "getActiveUrls", "get", "assertTrue", "contains", "getInactiveUrls", "get", "assertTrue", "contains", "getInactiveUrls", "get", "success", "next", "iterator", "getInactiveUrls", "collect", "stream", "spliterator", "toList", "assertEquals", "size", "assertEquals", "size", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "assertTrue", "contains", "getActiveUrls", "get", "assertTrue", "contains", "getActiveUrls", "get", "assertTrue", "contains", "getInactiveUrls", "get", "success", "next", "iterator", "getInactiveUrls", "collect", "stream", "spliterator", "toList", "assertEquals", "size", "assertEquals", "size", "getActiveUrls", "assertEquals", "size", "getInactiveUrls", "assertTrue", "contains", "getActiveUrls", "get", "assertTrue", "contains", "getActiveUrls", "get", "assertTrue", "contains", "getActiveUrls", "get"]}, "focal_class": {"identifier": "RandomConnectionStrategy", "superclass": "extends AbstractConnectionStrategy", "interfaces": "", "fields": [], "methods": [{"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "RandomConnectionStrategy.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/RandomConnectionStrategy.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LdapURL>", "body": "@Override\n  public Iterator<LdapURL> iterator()\n  {\n    if (!isInitialized()) {\n      throw new IllegalStateException(\"Strategy is not initialized\");\n    }\n    // CheckStyle:AnonInnerLength OFF\n    return new Iterator<>() {\n      private final List<LdapURL> active = ldapURLSet.getActiveUrls().stream().collect(\n        Collectors.collectingAndThen(\n          Collectors.toCollection(ArrayList::new),\n          list -> {\n            Collections.shuffle(list);\n            return list;\n          }));\n      private final List<LdapURL> inactive = ldapURLSet.getInactiveUrls().stream().collect(\n        Collectors.collectingAndThen(\n          Collectors.toCollection(ArrayList::new),\n          list -> {\n            Collections.shuffle(list);\n            return list;\n          }));\n      private int i;\n\n\n      @Override\n      public boolean hasNext()\n      {\n        return i < active.size() + inactive.size();\n      }\n\n\n      @Override\n      public LdapURL next()\n      {\n        final LdapURL url;\n        if (i < active.size()) {\n          url = active.get(i);\n        } else {\n          url = inactive.get(i - active.size());\n        }\n        i++;\n        return url;\n      }\n    };\n    // CheckStyle:AnonInnerLength ON\n  }", "signature": "Iterator<LdapURL> iterator()", "full_signature": "@Override public Iterator<LdapURL> iterator()", "class_method_signature": "RandomConnectionStrategy.iterator()", "testcase": false, "constructor": false, "invocations": ["isInitialized", "collect", "stream", "getActiveUrls", "collectingAndThen", "toCollection", "shuffle", "collect", "stream", "getInactiveUrls", "collectingAndThen", "toCollection", "shuffle", "size", "size", "size", "get", "get", "size"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}