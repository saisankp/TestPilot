{"test_class": {"identifier": "TestLists", "superclass": "", "interfaces": "", "fields": [], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/util/TestLists.java"}, "test_case": {"identifier": "testToArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToArray() {\n    String[] oneString = Lists.toArray(Collections.singletonList(\"foo\"), String.class);\n    assertEquals(1, oneString.length);\n    assertEquals(\"foo\", oneString[0]);\n\n    oneString = Lists.toArray(Collections.<String>singletonList(null), String.class);\n    assertEquals(1, oneString.length);\n    assertNull(oneString[0]);\n\n    String[] emptyOut = Lists.toArray(Collections.<String>emptyList(), String.class);\n    assertNotNull(emptyOut);\n    assertEquals(0, emptyOut.length);\n\n    String[] nulOut = Lists.<String>toArray(null, String.class);\n    assertNotNull(nulOut);\n    assertEquals(0, nulOut.length);\n  }", "signature": "void testToArray()", "full_signature": "@Test public void testToArray()", "class_method_signature": "TestLists.testToArray()", "testcase": true, "constructor": false, "invocations": ["toArray", "singletonList", "assertEquals", "assertEquals", "toArray", "singletonList", "assertEquals", "assertNull", "toArray", "emptyList", "assertNotNull", "assertEquals", "toArray", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Lists", "parameters": "()", "modifiers": "private", "return": "", "signature": " Lists()", "full_signature": "private  Lists()", "class_method_signature": "Lists.Lists()", "testcase": false, "constructor": true}, {"identifier": "foldLeft", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldLeft(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "foldRight", "parameters": "(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "modifiers": "public static", "return": "Y", "signature": "Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "full_signature": "public static Y foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "class_method_signature": "Lists.foldRight(Y initial, List<X> inputList, Aggregator<? super X, Y> op)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(List<X> inputs, Func<? super X, ? extends Y> mapper)", "modifiers": "public static", "return": "List<Y>", "signature": "List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "full_signature": "public static List<Y> map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "class_method_signature": "Lists.map(List<X> inputs, Func<? super X, ? extends Y> mapper)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(List<X> inputs, Class<X> klazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "X[]", "signature": "X[] toArray(List<X> inputs, Class<X> klazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static X[] toArray(List<X> inputs, Class<X> klazz)", "class_method_signature": "Lists.toArray(List<X> inputs, Class<X> klazz)", "testcase": false, "constructor": false}, {"identifier": "distinct", "parameters": "(List<X> inputs)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> distinct(List<X> inputs)", "full_signature": "public static List<X> distinct(List<X> inputs)", "class_method_signature": "Lists.distinct(List<X> inputs)", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/util/Lists.java"}, "focal_method": {"identifier": "toArray", "parameters": "(List<X> inputs, Class<X> klazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "X[]", "body": "@SuppressWarnings(\"unchecked\")\n  public static <X> X[] toArray(List<X> inputs, Class<X> klazz) {\n    if (null == inputs) {\n      return (X[]) Array.newInstance(klazz, 0);\n    }\n\n    X[] out = inputs.toArray((X[]) Array.newInstance(klazz, inputs.size()));\n    return out;\n  }", "signature": "X[] toArray(List<X> inputs, Class<X> klazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static X[] toArray(List<X> inputs, Class<X> klazz)", "class_method_signature": "Lists.toArray(List<X> inputs, Class<X> klazz)", "testcase": false, "constructor": false, "invocations": ["newInstance", "toArray", "newInstance", "size"]}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}