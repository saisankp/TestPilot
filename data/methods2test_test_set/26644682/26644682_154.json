{"test_class": {"identifier": "ReorderStepsUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReorderStepsUtils reorderStepsUtils = new ReorderStepsUtils();", "modifier": "private", "type": "ReorderStepsUtils", "declarator": "reorderStepsUtils = new ReorderStepsUtils()", "var_name": "reorderStepsUtils"}], "file": "dataprep-preparation/src/test/java/org/talend/dataprep/preparation/service/ReorderStepsUtilsTest.java"}, "test_case": {"identifier": "useColumnsBeforeCreationOrAfterDeletion_incoherentStepsList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void useColumnsBeforeCreationOrAfterDeletion_incoherentStepsList() throws Exception {\n        List<AppendStep> steps = new ArrayList<>();\n\n        AppendStep step = createAppendStepMultiColumn(\"[\\\"0003\\\",\\\"0004\\\"]\", emptyList());\n        step.getActions().get(0).getParameters().put(\"scope\", \"multi_columns\");\n        steps.add(step);\n        steps.add(createAppendStep(\"0002\", asList(\"0003\", \"0004\")));\n\n        assertFalse(reorderStepsUtils.isStepOrderInvalid(steps));\n    }", "signature": "void useColumnsBeforeCreationOrAfterDeletion_incoherentStepsList()", "full_signature": "@Test public void useColumnsBeforeCreationOrAfterDeletion_incoherentStepsList()", "class_method_signature": "ReorderStepsUtilsTest.useColumnsBeforeCreationOrAfterDeletion_incoherentStepsList()", "testcase": true, "constructor": false, "invocations": ["createAppendStepMultiColumn", "emptyList", "put", "getParameters", "get", "getActions", "add", "add", "createAppendStep", "asList", "assertFalse", "isStepOrderInvalid"]}, "focal_class": {"identifier": "ReorderStepsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String COLUMN_IDS = \"column_ids\";", "modifier": "protected static final", "type": "String", "declarator": "COLUMN_IDS = \"column_ids\"", "var_name": "COLUMN_IDS"}], "methods": [{"identifier": "isStepOrderInvalid", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "boolean", "signature": "boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "full_signature": " boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.isStepOrderInvalid(List<AppendStep> appendSteps)", "testcase": false, "constructor": false}, {"identifier": "renameCreatedColumns", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "void", "signature": "void renameCreatedColumns(List<AppendStep> appendSteps)", "full_signature": " void renameCreatedColumns(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.renameCreatedColumns(List<AppendStep> appendSteps)", "testcase": false, "constructor": false}], "file": "dataprep-preparation/src/main/java/org/talend/dataprep/preparation/service/ReorderStepsUtils.java"}, "focal_method": {"identifier": "isStepOrderInvalid", "parameters": "(List<AppendStep> appendSteps)", "modifiers": "", "return": "boolean", "body": "boolean isStepOrderInvalid(List<AppendStep> appendSteps) {\n        // Add all the columns created by steps as not available at the beginning\n        final Set<String> notYetAvailableColumnsIds = appendSteps\n                .stream()\n                .flatMap(step -> step.getDiff().getCreatedColumns().stream())\n                .collect(Collectors.toSet());\n\n        return appendSteps.stream().noneMatch(step -> {\n            for (Action action : step.getActions()) {\n                final Map<String, String> parameters = action.getParameters();\n                String[] columnIds = { parameters.get(ImplicitParameters.COLUMN_ID.getKey()) };\n                if (ActionScope.MULTI_COLUMNS\n                        .getDisplayName()\n                        .equals(action.getParameters().get(ImplicitParameters.SCOPE.getKey()))) {\n                    columnIds = ActionsUtils.extractColumnsId(parameters.get(COLUMN_IDS));\n                }\n\n                // remove the created columns from not available columns\n                notYetAvailableColumnsIds.removeAll(step.getDiff().getCreatedColumns());\n\n                for (String columnId : columnIds) {\n                    // if the columns is no\n                    if (notYetAvailableColumnsIds.contains(columnId)) {\n                        return true;\n                    }\n\n                    // add removed columns to non available\n                    if (StringUtils.equalsIgnoreCase(DeleteColumn.DELETE_COLUMN_ACTION_NAME, action.getName())) {\n                        notYetAvailableColumnsIds.add(columnId);\n                    }\n                }\n            }\n            return false;\n        });\n    }", "signature": "boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "full_signature": " boolean isStepOrderInvalid(List<AppendStep> appendSteps)", "class_method_signature": "ReorderStepsUtils.isStepOrderInvalid(List<AppendStep> appendSteps)", "testcase": false, "constructor": false, "invocations": ["collect", "flatMap", "stream", "stream", "getCreatedColumns", "getDiff", "toSet", "noneMatch", "stream", "getActions", "getParameters", "get", "getKey", "equals", "getDisplayName", "get", "getParameters", "getKey", "extractColumnsId", "get", "removeAll", "getCreatedColumns", "getDiff", "contains", "equalsIgnoreCase", "getName", "add"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}