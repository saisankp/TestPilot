{"test_class": {"identifier": "SequenceServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SEQUENCE_DESCRIPTOR_GROUPNAME = \"TestTeam\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_DESCRIPTOR_GROUPNAME = \"TestTeam\"", "var_name": "SEQUENCE_DESCRIPTOR_GROUPNAME"}, {"original_string": "private static final String SEQUENCE_DESCRIPTOR_NAME = \"sequenceOne\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_DESCRIPTOR_NAME = \"sequenceOne\"", "var_name": "SEQUENCE_DESCRIPTOR_NAME"}, {"original_string": "@Mock\n    private WilmaHttpRequest clonedRequest;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "clonedRequest", "var_name": "clonedRequest"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private SequenceDescriptor sequenceDescriptor;", "modifier": "@Mock\n    private", "type": "SequenceDescriptor", "declarator": "sequenceDescriptor", "var_name": "sequenceDescriptor"}, {"original_string": "@Mock\n    private SequenceHandler handler;", "modifier": "@Mock\n    private", "type": "SequenceHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock\n    private SequenceDescriptorEvaluator sequenceEvaluator;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorEvaluator", "declarator": "sequenceEvaluator", "var_name": "sequenceEvaluator"}, {"original_string": "@Mock\n    private WilmaSequence sequenceFirst;", "modifier": "@Mock\n    private", "type": "WilmaSequence", "declarator": "sequenceFirst", "var_name": "sequenceFirst"}, {"original_string": "@Mock\n    private WilmaSequence sequenceSecond;", "modifier": "@Mock\n    private", "type": "WilmaSequence", "declarator": "sequenceSecond", "var_name": "sequenceSecond"}, {"original_string": "@Mock\n    private CurrentDateProvider dateProvider;", "modifier": "@Mock\n    private", "type": "CurrentDateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}, {"original_string": "@Mock\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Mock\n    private SequenceFactory sequenceFactory;", "modifier": "@Mock\n    private", "type": "SequenceFactory", "declarator": "sequenceFactory", "var_name": "sequenceFactory"}, {"original_string": "@Mock\n    private SequenceHeaderUtil headerUtil;", "modifier": "@Mock\n    private", "type": "SequenceHeaderUtil", "declarator": "headerUtil", "var_name": "headerUtil"}, {"original_string": "@Mock\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}, {"original_string": "@Mock\n    private HandlerKeyValidator keyValidator;", "modifier": "@Mock\n    private", "type": "HandlerKeyValidator", "declarator": "keyValidator", "var_name": "keyValidator"}, {"original_string": "@Mock\n    private SequenceIdUtil sequenceIdUtil;", "modifier": "@Mock\n    private", "type": "SequenceIdUtil", "declarator": "sequenceIdUtil", "var_name": "sequenceIdUtil"}, {"original_string": "@InjectMocks\n    private SequenceService underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceService", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-sequence/src/test/java/com/epam/wilma/sequence/service/SequenceServiceTest.java"}, "test_case": {"identifier": "testCheckRequestWhenEvaluationFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckRequestWhenEvaluationFalse() {\n        //GIVEN\n        String sequenceKeyFirst = \"testKey1\";\n        given(sequenceEvaluator.evaluate(request, sequenceDescriptor)).willReturn(false);\n        //WHEN\n        underTest.checkRequest(request, sequenceDescriptor);\n        //THEN\n        verify(request, never()).addSequenceId(sequenceKeyFirst);\n    }", "signature": "void testCheckRequestWhenEvaluationFalse()", "full_signature": "@Test public void testCheckRequestWhenEvaluationFalse()", "class_method_signature": "SequenceServiceTest.testCheckRequestWhenEvaluationFalse()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "evaluate", "checkRequest", "addSequenceId", "verify", "never"]}, "focal_class": {"identifier": "SequenceService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SequenceDescriptorEvaluator sequenceEvaluator;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorEvaluator", "declarator": "sequenceEvaluator", "var_name": "sequenceEvaluator"}, {"original_string": "@Autowired\n    private WilmaHttpRequestCloner requestCloner;", "modifier": "@Autowired\n    private", "type": "WilmaHttpRequestCloner", "declarator": "requestCloner", "var_name": "requestCloner"}, {"original_string": "@Autowired\n    private CurrentDateProvider dateProvider;", "modifier": "@Autowired\n    private", "type": "CurrentDateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}, {"original_string": "@Autowired\n    private SequenceFactory sequenceFactory;", "modifier": "@Autowired\n    private", "type": "SequenceFactory", "declarator": "sequenceFactory", "var_name": "sequenceFactory"}, {"original_string": "@Autowired\n    private SequenceHeaderUtil headerUtil;", "modifier": "@Autowired\n    private", "type": "SequenceHeaderUtil", "declarator": "headerUtil", "var_name": "headerUtil"}, {"original_string": "@Autowired\n    private SequenceIdUtil sequenceIdUtil;", "modifier": "@Autowired\n    private", "type": "SequenceIdUtil", "declarator": "sequenceIdUtil", "var_name": "sequenceIdUtil"}, {"original_string": "@Autowired\n    private HandlerKeyValidator handlerKeyValidator;", "modifier": "@Autowired\n    private", "type": "HandlerKeyValidator", "declarator": "handlerKeyValidator", "var_name": "handlerKeyValidator"}], "methods": [{"identifier": "checkRequest", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "void", "signature": "void checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public void checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceService.checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "appendSequence", "parameters": "(final String sequenceKey, final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "modifiers": "private", "return": "void", "signature": "void appendSequence(final String sequenceKey, final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "full_signature": "private void appendSequence(final String sequenceKey, final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceService.appendSequence(final String sequenceKey, final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false}, {"identifier": "appendSequenceKeyToHeader", "parameters": "(final String sequenceId, final WilmaHttpRequest request)", "modifiers": "private", "return": "void", "signature": "void appendSequenceKeyToHeader(final String sequenceId, final WilmaHttpRequest request)", "full_signature": "private void appendSequenceKeyToHeader(final String sequenceId, final WilmaHttpRequest request)", "class_method_signature": "SequenceService.appendSequenceKeyToHeader(final String sequenceId, final WilmaHttpRequest request)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-sequence/src/main/java/com/epam/wilma/sequence/service/SequenceService.java"}, "focal_method": {"identifier": "checkRequest", "parameters": "(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "modifiers": "public", "return": "void", "body": "public void checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor) {\n        if (sequenceEvaluator.evaluate(request, sequenceDescriptor)) {\n            SequenceHandler handler = sequenceDescriptor.getHandler();\n            String sequenceKey = handler.getExistingSequence(request, sequenceDescriptor.getSequences(), sequenceDescriptor.getParameters());\n            if (sequenceKey == null) {\n                sequenceKey = handler.generateNewSequenceKey(request, sequenceDescriptor.getParameters());\n                handlerKeyValidator.validateGeneratedKey(sequenceKey, handler.getClass().getName());\n                WilmaSequence sequence = sequenceFactory.createNewSequence(sequenceKey, request, sequenceDescriptor.getDefaultTimeout());\n                sequenceDescriptor.putIntoSequences(sequence);\n            } else {\n                appendSequence(sequenceKey, request, sequenceDescriptor);\n            }\n            String sequenceId = sequenceIdUtil.createSequenceId(sequenceKey, sequenceDescriptor);\n            appendSequenceKeyToHeader(sequenceId, request);\n        }\n    }", "signature": "void checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "full_signature": "public void checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "class_method_signature": "SequenceService.checkRequest(final WilmaHttpRequest request, final SequenceDescriptor sequenceDescriptor)", "testcase": false, "constructor": false, "invocations": ["evaluate", "getHandler", "getExistingSequence", "getSequences", "getParameters", "generateNewSequenceKey", "getParameters", "validateGeneratedKey", "getName", "getClass", "createNewSequence", "getDefaultTimeout", "putIntoSequences", "appendSequence", "createSequenceId", "appendSequenceKeyToHeader"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}