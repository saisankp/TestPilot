{"test_class": {"identifier": "SQLWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File FILE = new File(\"src/test/SQLWriterTest.db\");", "modifier": "private static final", "type": "File", "declarator": "FILE = new File(\"src/test/SQLWriterTest.db\")", "var_name": "FILE"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/tableio/sql/SQLWriterTest.java"}, "test_case": {"identifier": "testWritingStringEntries", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testWritingStringEntries() {\n        String tableName = \"string_test\";\n        int numberOfDataPoints = 10;\n\n        TestLineSupplier lineSupplier = new TestLineSupplier(numberOfDataPoints, i -> i, true);\n\n        new SQLWriter().write(lineSupplier, FILE.getAbsolutePath(), tableName);\n\n        try (SQLiteConnection conn = SQLiteConnection.create(FILE.getAbsolutePath())) {\n            checkQuantity(conn, tableName, 1, 1);\n        } catch (SQLException e) {\n            Assertions.fail(\"Failed to read file\\n\" + e);\n        }\n    }", "signature": "void testWritingStringEntries()", "full_signature": "@Test void testWritingStringEntries()", "class_method_signature": "SQLWriterTest.testWritingStringEntries()", "testcase": true, "constructor": false, "invocations": ["write", "getAbsolutePath", "create", "getAbsolutePath", "checkQuantity", "fail"]}, "focal_class": {"identifier": "SQLWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SQLWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SQLWriter.class)", "var_name": "logger"}], "methods": [{"identifier": "write", "parameters": "(WritableToTable supplier, String fileName, String tableName)", "modifiers": "public", "return": "void", "signature": "void write(WritableToTable supplier, String fileName, String tableName)", "full_signature": "public void write(WritableToTable supplier, String fileName, String tableName)", "class_method_signature": "SQLWriter.write(WritableToTable supplier, String fileName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(ImmutableSet<String> header, WritableToTable supplier, String fileName, String tableName)", "modifiers": "private", "return": "void", "signature": "void writeFile(ImmutableSet<String> header, WritableToTable supplier, String fileName, String tableName)", "full_signature": "private void writeFile(ImmutableSet<String> header, WritableToTable supplier, String fileName, String tableName)", "class_method_signature": "SQLWriter.writeFile(ImmutableSet<String> header, WritableToTable supplier, String fileName, String tableName)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/tableio/sql/SQLWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(WritableToTable supplier, String fileName, String tableName)", "modifiers": "public", "return": "void", "body": "public void write(WritableToTable supplier, String fileName, String tableName) {\n        ImmutableSet<String> header = supplier.getHeaders();\n        if (header.isEmpty()) {\n            logger.info(\"Nothing to write to \" + fileName);\n            return;\n        }\n        writeFile(header, supplier, fileName, tableName);\n    }", "signature": "void write(WritableToTable supplier, String fileName, String tableName)", "full_signature": "public void write(WritableToTable supplier, String fileName, String tableName)", "class_method_signature": "SQLWriter.write(WritableToTable supplier, String fileName, String tableName)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "isEmpty", "info", "writeFile"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}