{"test_class": {"identifier": "PublishProcessorTest", "superclass": "extends FlowableProcessorTest<Object>", "interfaces": "", "fields": [{"original_string": "private final Throwable testException = new Throwable();", "modifier": "private final", "type": "Throwable", "declarator": "testException = new Throwable()", "var_name": "testException"}], "file": "rxjava/src/test/java/io/reactivex/processors/PublishProcessorTest.java"}, "test_case": {"identifier": "addRemoveRance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addRemoveRance() throws Exception {\n\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            final TestSubscriber<Integer> ts = pp.test();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    pp.subscribe();\n                }\n            };\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    ts.cancel();\n                }\n            };\n\n            TestHelper.race(r1, r2);\n        }\n    }", "signature": "void addRemoveRance()", "full_signature": "@Test public void addRemoveRance()", "class_method_signature": "PublishProcessorTest.addRemoveRance()", "testcase": true, "constructor": false, "invocations": ["create", "test", "subscribe", "cancel", "race"]}, "focal_class": {"identifier": "PublishProcessor", "superclass": "extends FlowableProcessor<T>", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final PublishSubscription[] TERMINATED = new PublishSubscription[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "PublishSubscription[]", "declarator": "TERMINATED = new PublishSubscription[0]", "var_name": "TERMINATED"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final PublishSubscription[] EMPTY = new PublishSubscription[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "PublishSubscription[]", "declarator": "EMPTY = new PublishSubscription[0]", "var_name": "EMPTY"}, {"original_string": "final AtomicReference<PublishSubscription<T>[]> subscribers;", "modifier": "final", "type": "AtomicReference<PublishSubscription<T>[]>", "declarator": "subscribers", "var_name": "subscribers"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "PublishProcessor<T>", "signature": "PublishProcessor<T> create()", "full_signature": "@CheckReturnValue @NonNull public static PublishProcessor<T> create()", "class_method_signature": "PublishProcessor.create()", "testcase": false, "constructor": false}, {"identifier": "PublishProcessor", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " PublishProcessor()", "full_signature": "@SuppressWarnings(\"unchecked\")  PublishProcessor()", "class_method_signature": "PublishProcessor.PublishProcessor()", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> t)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> t)", "full_signature": "@Override public void subscribeActual(Subscriber<? super T> t)", "class_method_signature": "PublishProcessor.subscribeActual(Subscriber<? super T> t)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(PublishSubscription<T> ps)", "modifiers": "", "return": "boolean", "signature": "boolean add(PublishSubscription<T> ps)", "full_signature": " boolean add(PublishSubscription<T> ps)", "class_method_signature": "PublishProcessor.add(PublishSubscription<T> ps)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(PublishSubscription<T> ps)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(PublishSubscription<T> ps)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(PublishSubscription<T> ps)", "class_method_signature": "PublishProcessor.remove(PublishSubscription<T> ps)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "PublishProcessor.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "PublishProcessor.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onError(Throwable t)", "class_method_signature": "PublishProcessor.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "PublishProcessor.onComplete()", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(T t)", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean offer(T t)", "full_signature": "@Experimental public boolean offer(T t)", "class_method_signature": "PublishProcessor.offer(T t)", "testcase": false, "constructor": false}, {"identifier": "hasSubscribers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSubscribers()", "full_signature": "@Override public boolean hasSubscribers()", "class_method_signature": "PublishProcessor.hasSubscribers()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Override @Nullable public Throwable getThrowable()", "class_method_signature": "PublishProcessor.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Override public boolean hasThrowable()", "class_method_signature": "PublishProcessor.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "@Override public boolean hasComplete()", "class_method_signature": "PublishProcessor.hasComplete()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/processors/PublishProcessor.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "PublishProcessor<T>", "body": "@CheckReturnValue\n    @NonNull\n    public static <T> PublishProcessor<T> create() {\n        return new PublishProcessor<T>();\n    }", "signature": "PublishProcessor<T> create()", "full_signature": "@CheckReturnValue @NonNull public static PublishProcessor<T> create()", "class_method_signature": "PublishProcessor.create()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}