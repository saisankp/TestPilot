{"test_class": {"identifier": "FilterServiceFileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/FilterServiceFileUtilsTest.java"}, "test_case": {"identifier": "atomicMoveWithFallbackFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void atomicMoveWithFallbackFailed() throws Exception {\n        final String tempDir = System.getProperty(\"java.io.tmpdir\", \"/tmp\") +\n                File.separator + \"filter_service_\" + System.nanoTime();\n        FileUtils.forceMkdir(new File(tempDir));\n        Path a = Paths.get(tempDir).resolve(\"path_a\");\n        Path b = Paths.get(tempDir).resolve(\"path_b\");\n        assertThatThrownBy(() -> FilterServiceFileUtils.atomicMoveWithFallback(a, b))\n                .isInstanceOf(NoSuchFileException.class);\n        FileUtils.forceDelete(new File(tempDir));\n    }", "signature": "void atomicMoveWithFallbackFailed()", "full_signature": "@Test public void atomicMoveWithFallbackFailed()", "class_method_signature": "FilterServiceFileUtilsTest.atomicMoveWithFallbackFailed()", "testcase": true, "constructor": false, "invocations": ["getProperty", "nanoTime", "forceMkdir", "resolve", "get", "resolve", "get", "isInstanceOf", "assertThatThrownBy", "atomicMoveWithFallback", "forceDelete"]}, "focal_class": {"identifier": "FilterServiceFileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FilterServiceFileUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FilterServiceFileUtils.class)", "var_name": "logger"}], "methods": [{"identifier": "lockDirectory", "parameters": "(Path baseDir, String lockFileName)", "modifiers": "static", "return": "FileLock", "signature": "FileLock lockDirectory(Path baseDir, String lockFileName)", "full_signature": "static FileLock lockDirectory(Path baseDir, String lockFileName)", "class_method_signature": "FilterServiceFileUtils.lockDirectory(Path baseDir, String lockFileName)", "testcase": false, "constructor": false}, {"identifier": "releaseDirectoryLock", "parameters": "(@Nullable FileLock lock)", "modifiers": "static", "return": "void", "signature": "void releaseDirectoryLock(@Nullable FileLock lock)", "full_signature": "static void releaseDirectoryLock(@Nullable FileLock lock)", "class_method_signature": "FilterServiceFileUtils.releaseDirectoryLock(@Nullable FileLock lock)", "testcase": false, "constructor": false}, {"identifier": "atomicMoveWithFallback", "parameters": "(Path source, Path target)", "modifiers": "static", "return": "void", "signature": "void atomicMoveWithFallback(Path source, Path target)", "full_signature": "static void atomicMoveWithFallback(Path source, Path target)", "class_method_signature": "FilterServiceFileUtils.atomicMoveWithFallback(Path source, Path target)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/FilterServiceFileUtils.java"}, "focal_method": {"identifier": "atomicMoveWithFallback", "parameters": "(Path source, Path target)", "modifiers": "static", "return": "void", "body": "static void atomicMoveWithFallback(Path source, Path target) throws IOException {\n        try {\n            Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);\n        } catch (IOException outer) {\n            try {\n                Files.move(source, target, StandardCopyOption.REPLACE_EXISTING);\n                logger.debug(\"Non-atomic move of {} to {} succeeded after atomic move failed due to {}\", source, target,\n                        outer.getMessage());\n            } catch (IOException inner) {\n                inner.addSuppressed(outer);\n                throw inner;\n            }\n        }\n    }", "signature": "void atomicMoveWithFallback(Path source, Path target)", "full_signature": "static void atomicMoveWithFallback(Path source, Path target)", "class_method_signature": "FilterServiceFileUtils.atomicMoveWithFallback(Path source, Path target)", "testcase": false, "constructor": false, "invocations": ["move", "move", "debug", "getMessage", "addSuppressed"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}