{"test_class": {"identifier": "AbstractExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonNodeFactory factory = JsonNodeFactory.instance;", "modifier": "private static final", "type": "JsonNodeFactory", "declarator": "factory = JsonNodeFactory.instance", "var_name": "factory"}, {"original_string": "private static final AbstractExpressionEvaluator expressionEvaluatorLocal = new AbstractExpressionEvaluator() {\n\n        @Override\n        public String fromObjectToExpression(Object value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected Object extractFieldValue(Object result, String fieldName) {\n            return result;\n        }\n\n        @Override\n        protected boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString) {\n            return true;\n        }\n\n        @Override\n        protected Object internalLiteralEvaluation(String raw, String className) {\n            return raw;\n        }\n\n        @Override\n        protected Object createObject(String className, List<String> genericClasses) {\n            return new HashMap<>();\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        protected void setField(Object toReturn, String fieldName, Object fieldValue) {\n            ((Map) toReturn).put(fieldName, fieldValue);\n        }\n\n        @Override\n        protected Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses) {\n            return new AbstractMap.SimpleEntry<>(\"\", Collections.singletonList(\"\"));\n        }\n    };", "modifier": "private static final", "type": "AbstractExpressionEvaluator", "declarator": "expressionEvaluatorLocal = new AbstractExpressionEvaluator() {\n\n        @Override\n        public String fromObjectToExpression(Object value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        protected Object extractFieldValue(Object result, String fieldName) {\n            return result;\n        }\n\n        @Override\n        protected boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString) {\n            return true;\n        }\n\n        @Override\n        protected Object internalLiteralEvaluation(String raw, String className) {\n            return raw;\n        }\n\n        @Override\n        protected Object createObject(String className, List<String> genericClasses) {\n            return new HashMap<>();\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        protected void setField(Object toReturn, String fieldName, Object fieldValue) {\n            ((Map) toReturn).put(fieldName, fieldValue);\n        }\n\n        @Override\n        protected Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses) {\n            return new AbstractMap.SimpleEntry<>(\"\", Collections.singletonList(\"\"));\n        }\n    }", "var_name": "expressionEvaluatorLocal"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/AbstractExpressionEvaluatorTest.java"}, "test_case": {"identifier": "convertList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertList() {\n        // Test simple list\n        ArrayNode jsonNodes = new ArrayNode(factory);\n        ObjectNode objectNode = new ObjectNode(factory);\n        objectNode.put(VALUE, \"data\");\n        jsonNodes.add(objectNode);\n\n        List<Object> objects = expressionEvaluatorLocal.createAndFillList(jsonNodes,\n                                                                          new ArrayList<>(),\n                                                                          List.class.getCanonicalName(),\n                                                                          Collections.singletonList(String.class.getCanonicalName()));\n        assertEquals(\"data\", objects.get(0));\n    }", "signature": "void convertList()", "full_signature": "@Test public void convertList()", "class_method_signature": "AbstractExpressionEvaluatorTest.convertList()", "testcase": true, "constructor": false, "invocations": ["put", "add", "createAndFillList", "getCanonicalName", "singletonList", "getCanonicalName", "assertEquals", "get"]}, "focal_class": {"identifier": "AbstractExpressionEvaluator", "superclass": "", "interfaces": "implements ExpressionEvaluator", "fields": [], "methods": [{"identifier": "evaluateLiteralExpression", "parameters": "(String rawExpression, String className, List<String> genericClasses)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "full_signature": "@Override public Object evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.evaluateLiteralExpression(String rawExpression, String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "evaluateUnaryExpression", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "full_signature": "@Override public boolean evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "class_method_signature": "AbstractExpressionEvaluator.evaluateUnaryExpression(String rawExpression, Object resultValue, Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "isStructuredResult", "parameters": "(Class<?> resultClass)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStructuredResult(Class<?> resultClass)", "full_signature": "protected boolean isStructuredResult(Class<?> resultClass)", "class_method_signature": "AbstractExpressionEvaluator.isStructuredResult(Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "isStructuredInput", "parameters": "(String className)", "modifiers": "protected", "return": "boolean", "signature": "boolean isStructuredInput(String className)", "full_signature": "protected boolean isStructuredInput(String className)", "class_method_signature": "AbstractExpressionEvaluator.isStructuredInput(String className)", "testcase": false, "constructor": false}, {"identifier": "convertResult", "parameters": "(String rawString, String className, List<String> genericClasses)", "modifiers": "protected", "return": "Object", "signature": "Object convertResult(String rawString, String className, List<String> genericClasses)", "full_signature": "protected Object convertResult(String rawString, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.convertResult(String rawString, String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "createAndFillList", "parameters": "(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "full_signature": "protected List<Object> createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "createAndFillObject", "parameters": "(ObjectNode json, Object toReturn, String className, List<String> genericClasses)", "modifiers": "protected", "return": "Object", "signature": "Object createAndFillObject(ObjectNode json, Object toReturn, String className, List<String> genericClasses)", "full_signature": "protected Object createAndFillObject(ObjectNode json, Object toReturn, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.createAndFillObject(ObjectNode json, Object toReturn, String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "verifyResult", "parameters": "(String rawExpression, Object resultRaw, Class<?> resultClass)", "modifiers": "protected", "return": "boolean", "signature": "boolean verifyResult(String rawExpression, Object resultRaw, Class<?> resultClass)", "full_signature": "protected boolean verifyResult(String rawExpression, Object resultRaw, Class<?> resultClass)", "class_method_signature": "AbstractExpressionEvaluator.verifyResult(String rawExpression, Object resultRaw, Class<?> resultClass)", "testcase": false, "constructor": false}, {"identifier": "verifyList", "parameters": "(ArrayNode json, List resultRaw)", "modifiers": "protected", "return": "boolean", "signature": "boolean verifyList(ArrayNode json, List resultRaw)", "full_signature": "protected boolean verifyList(ArrayNode json, List resultRaw)", "class_method_signature": "AbstractExpressionEvaluator.verifyList(ArrayNode json, List resultRaw)", "testcase": false, "constructor": false}, {"identifier": "verifyObject", "parameters": "(ObjectNode json, Object resultRaw)", "modifiers": "protected", "return": "boolean", "signature": "boolean verifyObject(ObjectNode json, Object resultRaw)", "full_signature": "protected boolean verifyObject(ObjectNode json, Object resultRaw)", "class_method_signature": "AbstractExpressionEvaluator.verifyObject(ObjectNode json, Object resultRaw)", "testcase": false, "constructor": false}, {"identifier": "isNodeEmpty", "parameters": "(JsonNode json)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNodeEmpty(JsonNode json)", "full_signature": "protected boolean isNodeEmpty(JsonNode json)", "class_method_signature": "AbstractExpressionEvaluator.isNodeEmpty(JsonNode json)", "testcase": false, "constructor": false}, {"identifier": "isListEmpty", "parameters": "(ArrayNode json)", "modifiers": "protected", "return": "boolean", "signature": "boolean isListEmpty(ArrayNode json)", "full_signature": "protected boolean isListEmpty(ArrayNode json)", "class_method_signature": "AbstractExpressionEvaluator.isListEmpty(ArrayNode json)", "testcase": false, "constructor": false}, {"identifier": "isObjectEmpty", "parameters": "(ObjectNode json)", "modifiers": "protected", "return": "boolean", "signature": "boolean isObjectEmpty(ObjectNode json)", "full_signature": "protected boolean isObjectEmpty(ObjectNode json)", "class_method_signature": "AbstractExpressionEvaluator.isObjectEmpty(ObjectNode json)", "testcase": false, "constructor": false}, {"identifier": "isEmptyText", "parameters": "(JsonNode jsonNode)", "modifiers": "protected", "return": "boolean", "signature": "boolean isEmptyText(JsonNode jsonNode)", "full_signature": "protected boolean isEmptyText(JsonNode jsonNode)", "class_method_signature": "AbstractExpressionEvaluator.isEmptyText(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "isSimpleTypeNode", "parameters": "(JsonNode jsonNode)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSimpleTypeNode(JsonNode jsonNode)", "full_signature": "protected boolean isSimpleTypeNode(JsonNode jsonNode)", "class_method_signature": "AbstractExpressionEvaluator.isSimpleTypeNode(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "getSimpleTypeNodeTextValue", "parameters": "(JsonNode jsonNode)", "modifiers": "protected", "return": "String", "signature": "String getSimpleTypeNodeTextValue(JsonNode jsonNode)", "full_signature": "protected String getSimpleTypeNodeTextValue(JsonNode jsonNode)", "class_method_signature": "AbstractExpressionEvaluator.getSimpleTypeNodeTextValue(JsonNode jsonNode)", "testcase": false, "constructor": false}, {"identifier": "internalUnaryEvaluation", "parameters": "(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "full_signature": "protected abstract boolean internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "class_method_signature": "AbstractExpressionEvaluator.internalUnaryEvaluation(String rawExpression, Object resultValue, Class<?> resultClass, boolean skipEmptyString)", "testcase": false, "constructor": false}, {"identifier": "internalLiteralEvaluation", "parameters": "(String raw, String className)", "modifiers": "protected abstract", "return": "Object", "signature": "Object internalLiteralEvaluation(String raw, String className)", "full_signature": "protected abstract Object internalLiteralEvaluation(String raw, String className)", "class_method_signature": "AbstractExpressionEvaluator.internalLiteralEvaluation(String raw, String className)", "testcase": false, "constructor": false}, {"identifier": "extractFieldValue", "parameters": "(Object result, String fieldName)", "modifiers": "protected abstract", "return": "Object", "signature": "Object extractFieldValue(Object result, String fieldName)", "full_signature": "protected abstract Object extractFieldValue(Object result, String fieldName)", "class_method_signature": "AbstractExpressionEvaluator.extractFieldValue(Object result, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(String className, List<String> genericClasses)", "modifiers": "protected abstract", "return": "Object", "signature": "Object createObject(String className, List<String> genericClasses)", "full_signature": "protected abstract Object createObject(String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.createObject(String className, List<String> genericClasses)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object toReturn, String fieldName, Object fieldValue)", "modifiers": "protected abstract", "return": "void", "signature": "void setField(Object toReturn, String fieldName, Object fieldValue)", "full_signature": "protected abstract void setField(Object toReturn, String fieldName, Object fieldValue)", "class_method_signature": "AbstractExpressionEvaluator.setField(Object toReturn, String fieldName, Object fieldValue)", "testcase": false, "constructor": false}, {"identifier": "getFieldClassNameAndGenerics", "parameters": "(Object element, String fieldName, String className, List<String> genericClasses)", "modifiers": "protected abstract", "return": "Map.Entry<String, List<String>>", "signature": "Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "full_signature": "protected abstract Map.Entry<String, List<String>> getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.getFieldClassNameAndGenerics(Object element, String fieldName, String className, List<String> genericClasses)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/expression/AbstractExpressionEvaluator.java"}, "focal_method": {"identifier": "createAndFillList", "parameters": "(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "modifiers": "protected", "return": "List<Object>", "body": "protected List<Object> createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses) {\n        for (JsonNode node : json) {\n            if (isSimpleTypeNode(node)) {\n                String generic = genericClasses.get(genericClasses.size() - 1);\n                Object value = internalLiteralEvaluation(getSimpleTypeNodeTextValue(node), generic);\n                toReturn.add(value);\n            } else {\n                String genericClassName = ScenarioSimulationSharedUtils.isMap(className) ? className : genericClasses.get(genericClasses.size() - 1);\n                Object listElement = createObject(genericClassName, genericClasses);\n                Object returnedObject = createAndFillObject((ObjectNode) node, listElement, genericClassName, genericClasses);\n                toReturn.add(returnedObject);\n            }\n        }\n        return toReturn;\n    }", "signature": "List<Object> createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "full_signature": "protected List<Object> createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "class_method_signature": "AbstractExpressionEvaluator.createAndFillList(ArrayNode json, List<Object> toReturn, String className, List<String> genericClasses)", "testcase": false, "constructor": false, "invocations": ["isSimpleTypeNode", "get", "size", "internalLiteralEvaluation", "getSimpleTypeNodeTextValue", "add", "isMap", "get", "size", "createObject", "createAndFillObject", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}