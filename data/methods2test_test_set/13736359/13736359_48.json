{"test_class": {"identifier": "SqlReportEntitiesPersisterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  @Qualifier(\"sqlEntitiesPersister\")\n  private EntityPersister sqlEntitiesPersister;", "modifier": "@Autowired\n  @Qualifier(\"sqlEntitiesPersister\")\n  private", "type": "EntityPersister", "declarator": "sqlEntitiesPersister", "var_name": "sqlEntitiesPersister"}, {"original_string": "@Autowired private Session session;", "modifier": "@Autowired private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@Autowired private SessionFactory sessionFactory;", "modifier": "@Autowired private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "@Autowired private SqlReportEntitiesPersister.Config config;", "modifier": "@Autowired private", "type": "SqlReportEntitiesPersister.Config", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock private Criteria criteria;", "modifier": "@Mock private", "type": "Criteria", "declarator": "criteria", "var_name": "criteria"}, {"original_string": "private InOrder sequence;", "modifier": "private", "type": "InOrder", "declarator": "sequence", "var_name": "sequence"}], "file": "aw-reporting-model/src/test/java/com/google/api/ads/adwords/awreporting/model/persistence/sql/SqlReportEntitiesPersisterTest.java"}, "test_case": {"identifier": "persistReportEntities_retriesAfterDeadlockThenSucceeds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void persistReportEntities_retriesAfterDeadlockThenSucceeds() {\n    AccountPerformanceReport report = generateReport(1);\n\n    Mockito.doThrow(new LockAcquisitionException(\"\", null))\n        .doNothing()\n        .when(session)\n        .saveOrUpdate(any());\n\n    sqlEntitiesPersister.persistReportEntities(Arrays.asList(report));\n\n    sequence.verify(session, Mockito.times(2)).saveOrUpdate(report);\n  }", "signature": "void persistReportEntities_retriesAfterDeadlockThenSucceeds()", "full_signature": "@Test public void persistReportEntities_retriesAfterDeadlockThenSucceeds()", "class_method_signature": "SqlReportEntitiesPersisterTest.persistReportEntities_retriesAfterDeadlockThenSucceeds()", "testcase": true, "constructor": false, "invocations": ["generateReport", "saveOrUpdate", "when", "doNothing", "doThrow", "any", "persistReportEntities", "asList", "saveOrUpdate", "verify", "times"]}, "focal_class": {"identifier": "SqlReportEntitiesPersister", "superclass": "", "interfaces": "implements EntityPersister", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SqlReportEntitiesPersister.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SqlReportEntitiesPersister.class)", "var_name": "logger"}, {"original_string": "private final SessionFactory sessionFactory;", "modifier": "private final", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "private final Config config;", "modifier": "private final", "type": "Config", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "SqlReportEntitiesPersister", "parameters": "(SessionFactory sessionFactory, Config config)", "modifiers": "@Autowired public", "return": "", "signature": " SqlReportEntitiesPersister(SessionFactory sessionFactory, Config config)", "full_signature": "@Autowired public  SqlReportEntitiesPersister(SessionFactory sessionFactory, Config config)", "class_method_signature": "SqlReportEntitiesPersister.SqlReportEntitiesPersister(SessionFactory sessionFactory, Config config)", "testcase": false, "constructor": true}, {"identifier": "persistReportEntities", "parameters": "(List<? extends Report> reportEntities)", "modifiers": "@Override @Transactional @Retryable( value = {LockAcquisitionException.class}, maxAttemptsExpression = \"#{ @systemProperties['retryBackoff'] ?: 20}\", backoff = @Backoff( delayExpression = \"#{ @systemProperties['retryDelay'] ?: 100}\", maxDelayExpression = \"#{ @systemProperties['retryMaxDelay'] ?: 50000 }\", multiplierExpression = \"#{ @systemProperties['retryMultiplier'] ?: 1.5}\")) public", "return": "void", "signature": "void persistReportEntities(List<? extends Report> reportEntities)", "full_signature": "@Override @Transactional @Retryable( value = {LockAcquisitionException.class}, maxAttemptsExpression = \"#{ @systemProperties['retryBackoff'] ?: 20}\", backoff = @Backoff( delayExpression = \"#{ @systemProperties['retryDelay'] ?: 100}\", maxDelayExpression = \"#{ @systemProperties['retryMaxDelay'] ?: 50000 }\", multiplierExpression = \"#{ @systemProperties['retryMultiplier'] ?: 1.5}\")) public void persistReportEntities(List<? extends Report> reportEntities)", "class_method_signature": "SqlReportEntitiesPersister.persistReportEntities(List<? extends Report> reportEntities)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T t)", "modifiers": "@Override @Transactional public", "return": "T", "signature": "T save(T t)", "full_signature": "@Override @Transactional public T save(T t)", "class_method_signature": "SqlReportEntitiesPersister.save(T t)", "testcase": false, "constructor": false}, {"identifier": "createCriteria", "parameters": "(Class<T> classT)", "modifiers": "private", "return": "Criteria", "signature": "Criteria createCriteria(Class<T> classT)", "full_signature": "private Criteria createCriteria(Class<T> classT)", "class_method_signature": "SqlReportEntitiesPersister.createCriteria(Class<T> classT)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> classT, String key, V value)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @Transactional(readOnly = true) public", "return": "List<T>", "signature": "List<T> get(Class<T> classT, String key, V value)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @Transactional(readOnly = true) public List<T> get(Class<T> classT, String key, V value)", "class_method_signature": "SqlReportEntitiesPersister.get(Class<T> classT, String key, V value)", "testcase": false, "constructor": false}], "file": "aw-reporting-model/src/main/java/com/google/api/ads/adwords/awreporting/model/persistence/sql/SqlReportEntitiesPersister.java"}, "focal_method": {"identifier": "persistReportEntities", "parameters": "(List<? extends Report> reportEntities)", "modifiers": "@Override @Transactional @Retryable( value = {LockAcquisitionException.class}, maxAttemptsExpression = \"#{ @systemProperties['retryBackoff'] ?: 20}\", backoff = @Backoff( delayExpression = \"#{ @systemProperties['retryDelay'] ?: 100}\", maxDelayExpression = \"#{ @systemProperties['retryMaxDelay'] ?: 50000 }\", multiplierExpression = \"#{ @systemProperties['retryMultiplier'] ?: 1.5}\")) public", "return": "void", "body": "@Override\n  @Transactional\n  @Retryable(\n      value = {LockAcquisitionException.class},\n      maxAttemptsExpression = \"#{ @systemProperties['retryBackoff'] ?: 20}\",\n      backoff =\n          @Backoff(\n              delayExpression = \"#{ @systemProperties['retryDelay'] ?: 100}\",\n              maxDelayExpression = \"#{ @systemProperties['retryMaxDelay'] ?: 50000 }\",\n              multiplierExpression = \"#{ @systemProperties['retryMultiplier'] ?: 1.5}\"))\n  public void persistReportEntities(List<? extends Report> reportEntities) {\n    int batchFlush = 0;\n    Session session = sessionFactory.getCurrentSession();\n    FlushMode previousFlushMode = session.getHibernateFlushMode();\n    session.setHibernateFlushMode(FlushMode.MANUAL);\n\n    try {\n      for (Report report : reportEntities) {\n        report.setRowId();\n\n        session.saveOrUpdate(report);\n        batchFlush++;\n\n        if (batchFlush == config.getBatchSize()) {\n          session.flush();\n          session.clear();\n          batchFlush = 0;\n        }\n      }\n\n      if (batchFlush > 0) {\n        session.flush();\n        session.clear();\n      }\n    } catch (NonUniqueObjectException ex) {\n      // Github issue 268 & 280\n      //   https://github.com/googleads/aw-reporting/issues/268\n      //   https://github.com/googleads/aw-reporting/issues/280\n      //\n      // Currently we allow specifying report definitions which do not include all primary key\n      // fields. This leads to cryptic hibernate errors without providing a reasonable\n      // resolution strategy.\n      //\n      // This fix explains where to find the list of primary key fields, but does not address\n      // the underlying issue of allowing non-unique rows to be downloaded in the first place.\n      //\n      // Ideally we would guarantee uniqueness of rows without the user having to specify the\n      // PK fields.\n      // However, this would be a substantial migration for the AWReporting user base.\n      // Instead, we just log a (hopefully) useful error message.\n      // Also note that the error message assumes that reportEntities was not empty, because\n      // otherwise the exception would not have been thrown.\n      logger.error(\n          \"Duplicate row detected. This is most likely because your report definition does not \"\n              + \"include the primary key fields defined in {}.setRowId(). \"\n              + \"Please add the missing fields and try again.\",\n          reportEntities.get(0).getClass().getName());\n      throw ex;\n    } finally {\n      session.setHibernateFlushMode(previousFlushMode);\n    }\n  }", "signature": "void persistReportEntities(List<? extends Report> reportEntities)", "full_signature": "@Override @Transactional @Retryable( value = {LockAcquisitionException.class}, maxAttemptsExpression = \"#{ @systemProperties['retryBackoff'] ?: 20}\", backoff = @Backoff( delayExpression = \"#{ @systemProperties['retryDelay'] ?: 100}\", maxDelayExpression = \"#{ @systemProperties['retryMaxDelay'] ?: 50000 }\", multiplierExpression = \"#{ @systemProperties['retryMultiplier'] ?: 1.5}\")) public void persistReportEntities(List<? extends Report> reportEntities)", "class_method_signature": "SqlReportEntitiesPersister.persistReportEntities(List<? extends Report> reportEntities)", "testcase": false, "constructor": false, "invocations": ["getCurrentSession", "getHibernateFlushMode", "setHibernateFlushMode", "setRowId", "saveOrUpdate", "getBatchSize", "flush", "clear", "flush", "clear", "error", "getName", "getClass", "get", "setHibernateFlushMode"]}, "repository": {"repo_id": 13736359, "url": "https://github.com/googleads/aw-reporting", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 120, "size": 5133, "license": "licensed"}}