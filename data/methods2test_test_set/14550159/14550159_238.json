{"test_class": {"identifier": "JsonEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonEntityProvider jsonEntityProvider;", "modifier": "private", "type": "JsonEntityProvider", "declarator": "jsonEntityProvider", "var_name": "jsonEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/JsonEntityProviderTest.java"}, "test_case": {"identifier": "writesObjectToOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writesObjectToOutputStream() throws Exception {\n        Book book = createJunitBook();\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n        jsonEntityProvider.writeTo(book, Book.class, null, null, APPLICATION_JSON_TYPE, new MultivaluedHashMap<>(), out);\n\n        String outputAsString = out.toString();\n        assertTrue(outputAsString.contains(\"\\\"author\\\":\\\"Vincent Massol\\\"\"));\n        assertTrue(outputAsString.contains(\"\\\"title\\\":\\\"JUnit in Action\\\"\"));\n        assertTrue(outputAsString.contains(\"\\\"pages\\\":386\"));\n        assertTrue(outputAsString.contains(\"\\\"price\\\":19.37\"));\n        assertTrue(outputAsString.contains(\"\\\"isdn\\\":93011099534534\"));\n    }", "signature": "void writesObjectToOutputStream()", "full_signature": "@Test public void writesObjectToOutputStream()", "class_method_signature": "JsonEntityProviderTest.writesObjectToOutputStream()", "testcase": true, "constructor": false, "invocations": ["createJunitBook", "writeTo", "toString", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "JsonEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<T>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JsonEntityProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JsonEntityProvider.class)", "var_name": "LOG"}, {"original_string": "private static final Class<?>[] IGNORED = new Class<?>[]{byte[].class, char[].class, DataSource.class,\n                                                             DOMSource.class, File.class, InputStream.class, OutputStream.class,\n                                                             JAXBElement.class, MultivaluedMap.class,\n                                                             Reader.class, Writer.class, SAXSource.class, StreamingOutput.class,\n                                                             StreamSource.class, String.class};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "IGNORED = new Class<?>[]{byte[].class, char[].class, DataSource.class,\n                                                             DOMSource.class, File.class, InputStream.class, OutputStream.class,\n                                                             JAXBElement.class, MultivaluedMap.class,\n                                                             Reader.class, Writer.class, SAXSource.class, StreamingOutput.class,\n                                                             StreamSource.class, String.class}", "var_name": "IGNORED"}], "methods": [{"identifier": "isSupported", "parameters": "(Class<?> type)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSupported(Class<?> type)", "full_signature": "private static boolean isSupported(Class<?> type)", "class_method_signature": "JsonEntityProvider.isSupported(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JsonEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<T> type,\n                      Type genericType,\n                      Annotation[] annotations,\n                      MediaType mediaType,\n                      MultivaluedMap<String, String> httpHeaders,\n                      InputStream entityStream)", "modifiers": "@SuppressWarnings({\"unchecked\"}) @Override public", "return": "T", "signature": "T readFrom(Class<T> type,\n                      Type genericType,\n                      Annotation[] annotations,\n                      MediaType mediaType,\n                      MultivaluedMap<String, String> httpHeaders,\n                      InputStream entityStream)", "full_signature": "@SuppressWarnings({\"unchecked\"}) @Override public T readFrom(Class<T> type,\n                      Type genericType,\n                      Annotation[] annotations,\n                      MediaType mediaType,\n                      MultivaluedMap<String, String> httpHeaders,\n                      InputStream entityStream)", "class_method_signature": "JsonEntityProvider.readFrom(Class<T> type,\n                      Type genericType,\n                      Annotation[] annotations,\n                      MediaType mediaType,\n                      MultivaluedMap<String, String> httpHeaders,\n                      InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(T t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(T t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(T t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JsonEntityProvider.getSize(T t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JsonEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "JsonEntityProvider.writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/JsonEntityProvider.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream) throws IOException {\n        try {\n            JsonValue jsonValue;\n            if (t instanceof JsonValue) {\n                jsonValue = (JsonValue)t;\n            } else {\n                Types jType = JsonUtils.getType(type);\n                if (jType == Types.ARRAY_BOOLEAN || jType == Types.ARRAY_BYTE || jType == Types.ARRAY_SHORT\n                    || jType == Types.ARRAY_INT || jType == Types.ARRAY_LONG || jType == Types.ARRAY_FLOAT\n                    || jType == Types.ARRAY_DOUBLE || jType == Types.ARRAY_CHAR || jType == Types.ARRAY_STRING\n                    || jType == Types.ARRAY_OBJECT) {\n                    jsonValue = JsonGenerator.createJsonArray(t);\n                } else if (jType == Types.COLLECTION) {\n                    jsonValue = JsonGenerator.createJsonArray((Collection<?>)t);\n                } else if (jType == Types.MAP) {\n                    jsonValue = JsonGenerator.createJsonObjectFromMap((Map<String, ?>)t);\n                } else {\n                    jsonValue = JsonGenerator.createJsonObject(t);\n                }\n            }\n            JsonWriter jsonWriter = new JsonWriter(entityStream);\n            jsonValue.writeTo(jsonWriter);\n            jsonWriter.flush();\n        } catch (JsonException e) {\n            LOG.debug(e.getMessage(), e);\n            throw new IOException(String.format(\"Can't write to output stream. %s\", e.getMessage()), e);\n        }\n    }", "signature": "void writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "JsonEntityProvider.writeTo(T t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["getType", "createJsonArray", "createJsonArray", "createJsonObjectFromMap", "createJsonObject", "writeTo", "flush", "debug", "getMessage", "format", "getMessage"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}