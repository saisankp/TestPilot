{"test_class": {"identifier": "JndiAddressProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String jndiKey = \"someKey\";", "modifier": "private final", "type": "String", "declarator": "jndiKey = \"someKey\"", "var_name": "jndiKey"}, {"original_string": "private JndiAddressProvider jndiAdressProvider;", "modifier": "private", "type": "JndiAddressProvider", "declarator": "jndiAdressProvider", "var_name": "jndiAdressProvider"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/config/JndiAddressProviderTest.java"}, "test_case": {"identifier": "getAddressesNullKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAddressesNullKey() {\n        jndiAdressProvider.setJndiKey(null);\n        List<InetSocketAddress> result = jndiAdressProvider.getAddresses();\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        assertEquals(\"127.0.0.1\", result.get(0).getAddress().getHostAddress());\n        assertEquals(11211, result.get(0).getPort());\n\n        jndiAdressProvider = new JndiAddressProvider(null, \"127.0.0.1:11211\");\n        result = jndiAdressProvider.getAddresses();\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        assertEquals(\"127.0.0.1\", result.get(0).getAddress().getHostAddress());\n        assertEquals(11211, result.get(0).getPort());\n    }", "signature": "void getAddressesNullKey()", "full_signature": "@Test public void getAddressesNullKey()", "class_method_signature": "JndiAddressProviderTest.getAddressesNullKey()", "testcase": true, "constructor": false, "invocations": ["setJndiKey", "getAddresses", "assertNotNull", "assertEquals", "size", "assertEquals", "getHostAddress", "getAddress", "get", "assertEquals", "getPort", "get", "getAddresses", "assertNotNull", "assertEquals", "size", "assertEquals", "getHostAddress", "getAddress", "get", "assertEquals", "getPort", "get"]}, "focal_class": {"identifier": "JndiAddressProvider", "superclass": "extends DefaultAddressProvider", "interfaces": "implements InitializingBean", "fields": [{"original_string": "private final JndiTemplate jndiTemplate = new JndiTemplate();", "modifier": "private final", "type": "JndiTemplate", "declarator": "jndiTemplate = new JndiTemplate()", "var_name": "jndiTemplate"}, {"original_string": "@Getter\n    @Setter\n    private String jndiKey;", "modifier": "@Getter\n    @Setter\n    private", "type": "String", "declarator": "jndiKey", "var_name": "jndiKey"}], "methods": [{"identifier": "JndiAddressProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " JndiAddressProvider()", "full_signature": "public  JndiAddressProvider()", "class_method_signature": "JndiAddressProvider.JndiAddressProvider()", "testcase": false, "constructor": true}, {"identifier": "JndiAddressProvider", "parameters": "(final String jndiKey, final String address)", "modifiers": "public", "return": "", "signature": " JndiAddressProvider(final String jndiKey, final String address)", "full_signature": "public  JndiAddressProvider(final String jndiKey, final String address)", "class_method_signature": "JndiAddressProvider.JndiAddressProvider(final String jndiKey, final String address)", "testcase": false, "constructor": true}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "JndiAddressProvider.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "getAddresses", "parameters": "()", "modifiers": "@Override public", "return": "List<InetSocketAddress>", "signature": "List<InetSocketAddress> getAddresses()", "full_signature": "@Override public List<InetSocketAddress> getAddresses()", "class_method_signature": "JndiAddressProvider.getAddresses()", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(final String key)", "modifiers": "protected", "return": "Object", "signature": "Object lookup(final String key)", "full_signature": "protected Object lookup(final String key)", "class_method_signature": "JndiAddressProvider.lookup(final String key)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/config/JndiAddressProvider.java"}, "focal_method": {"identifier": "getAddresses", "parameters": "()", "modifiers": "@Override public", "return": "List<InetSocketAddress>", "body": "@Override\n    public List<InetSocketAddress> getAddresses() {\n        Object ips = null;\n        List<InetSocketAddress> addrs = null;\n        try {\n            if (jndiKey != null && (ips = lookup(jndiKey)) != null) {\n                getLogger().info(\"Addresses from JNDI will be used to connect to memcached servers. Addresses: {}\", ips);\n                addrs = getAddresses((String) ips);\n            } else {\n                addrs = super.getAddresses();\n            }\n        } catch (NamingException ex) {\n            getLogger()\n                    .warn(String.format(\"Name of the JNDI key with memcached addresses is set but wrong value is bound to this key: %s\",\n                            jndiKey), ex);\n            addrs = super.getAddresses();\n        }\n\n        return addrs;\n    }", "signature": "List<InetSocketAddress> getAddresses()", "full_signature": "@Override public List<InetSocketAddress> getAddresses()", "class_method_signature": "JndiAddressProvider.getAddresses()", "testcase": false, "constructor": false, "invocations": ["lookup", "info", "getLogger", "getAddresses", "getAddresses", "warn", "getLogger", "format", "getAddresses"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}