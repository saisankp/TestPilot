{"test_class": {"identifier": "FixationSequenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ArrayList<LinkedList<FixationPoint>> fixationPoints =\n        new ArrayList<>( List.of (\n            new LinkedList<>(\n                List.of(\n                new FixationPoint(123, 200, 20, 40),\n                new FixationPoint(123, 200, 500, 400),\n                new FixationPoint(123, 200, 120, 150),\n                new FixationPoint(123, 50, 300, 450),\n                new FixationPoint(123, 50, 300, 400),\n                new FixationPoint(123, 50, 300, 400),\n                new FixationPoint(123, 50, 300, 400)\n                )\n            ),\n            new LinkedList<>(\n                List.of(\n                    new FixationPoint(123, 200, 20, 40),\n                    new FixationPoint(123, 200, 500, 400),\n                    new FixationPoint(123, 200, 120, 150),\n                    new FixationPoint(123, 50, 300, 450),\n                    new FixationPoint(123, 50, 300, 400),\n                    new FixationPoint(123, 50, 300, 400),\n                    new FixationPoint(123, 50, 300, 400)\n                )\n            )\n    ));", "modifier": "private", "type": "ArrayList<LinkedList<FixationPoint>>", "declarator": "fixationPoints =\n        new ArrayList<>( List.of (\n            new LinkedList<>(\n                List.of(\n                new FixationPoint(123, 200, 20, 40),\n                new FixationPoint(123, 200, 500, 400),\n                new FixationPoint(123, 200, 120, 150),\n                new FixationPoint(123, 50, 300, 450),\n                new FixationPoint(123, 50, 300, 400),\n                new FixationPoint(123, 50, 300, 400),\n                new FixationPoint(123, 50, 300, 400)\n                )\n            ),\n            new LinkedList<>(\n                List.of(\n                    new FixationPoint(123, 200, 20, 40),\n                    new FixationPoint(123, 200, 500, 400),\n                    new FixationPoint(123, 200, 120, 150),\n                    new FixationPoint(123, 50, 300, 450),\n                    new FixationPoint(123, 50, 300, 400),\n                    new FixationPoint(123, 50, 300, 400),\n                    new FixationPoint(123, 50, 300, 400)\n                )\n            )\n    ))", "var_name": "fixationPoints"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/FixationSequenceTest.java"}, "test_case": {"identifier": "shouldSaveImageToFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldSaveImageToFile() throws InterruptedException {\n        Platform.runLater(() -> {\n            File testFile = new File(\"image.png\");\n            FixationSequence sequence = new FixationSequence(1920, 1080, fixationPoints, FixationSequence.MOUSE_FIXATION_SEQUENCE);\n            sequence.saveToFile(testFile);\n\n            assertTrue(testFile.isFile());\n            testFile.delete();\n        });\n        TestingUtils.waitForRunLater();\n\n        Platform.runLater(() -> {\n            File testFile = new File(\"image.png\");\n            FixationSequence sequence = new FixationSequence(1920, 1080, fixationPoints, FixationSequence.GAZE_FIXATION_SEQUENCE);\n            sequence.saveToFile(testFile);\n\n            assertTrue(testFile.isFile());\n            testFile.delete();\n        });\n        TestingUtils.waitForRunLater();\n    }", "signature": "void shouldSaveImageToFile()", "full_signature": "@Test void shouldSaveImageToFile()", "class_method_signature": "FixationSequenceTest.shouldSaveImageToFile()", "testcase": true, "constructor": false, "invocations": ["runLater", "saveToFile", "assertTrue", "isFile", "delete", "waitForRunLater", "runLater", "saveToFile", "assertTrue", "isFile", "delete", "waitForRunLater"]}, "focal_class": {"identifier": "FixationSequence", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Font sanSerifFont = new Font(\"SanSerif\", 10);", "modifier": "private static final", "type": "Font", "declarator": "sanSerifFont = new Font(\"SanSerif\", 10)", "var_name": "sanSerifFont"}, {"original_string": "public static final int MOUSE_FIXATION_SEQUENCE = 0;", "modifier": "public static final", "type": "int", "declarator": "MOUSE_FIXATION_SEQUENCE = 0", "var_name": "MOUSE_FIXATION_SEQUENCE"}, {"original_string": "public static final int GAZE_FIXATION_SEQUENCE = 1;", "modifier": "public static final", "type": "int", "declarator": "GAZE_FIXATION_SEQUENCE = 1", "var_name": "GAZE_FIXATION_SEQUENCE"}, {"original_string": "private final Color[][] colors = {\n        {Color.INDIANRED, Color.DARKRED},\n        {Color.LIGHTBLUE, Color.DARKBLUE}\n    };", "modifier": "private final", "type": "Color[][]", "declarator": "colors = {\n        {Color.INDIANRED, Color.DARKRED},\n        {Color.LIGHTBLUE, Color.DARKBLUE}\n    }", "var_name": "colors"}, {"original_string": "@Getter\n    private final WritableImage image;", "modifier": "@Getter\n    private final", "type": "WritableImage", "declarator": "image", "var_name": "image"}, {"original_string": "@Getter\n    private LinkedList<FixationPoint> sequence;", "modifier": "@Getter\n    private", "type": "LinkedList<FixationPoint>", "declarator": "sequence", "var_name": "sequence"}], "methods": [{"identifier": "FixationSequence", "parameters": "(final int width, final int height, ArrayList<LinkedList<FixationPoint>> fixationPoints, int sequenceIndex)", "modifiers": "public", "return": "", "signature": " FixationSequence(final int width, final int height, ArrayList<LinkedList<FixationPoint>> fixationPoints, int sequenceIndex)", "full_signature": "public  FixationSequence(final int width, final int height, ArrayList<LinkedList<FixationPoint>> fixationPoints, int sequenceIndex)", "class_method_signature": "FixationSequence.FixationSequence(final int width, final int height, ArrayList<LinkedList<FixationPoint>> fixationPoints, int sequenceIndex)", "testcase": false, "constructor": true}, {"identifier": "drawFixationLines", "parameters": "(Canvas canvas, LinkedList<FixationPoint> sequence, Color color)", "modifiers": "private", "return": "GraphicsContext", "signature": "GraphicsContext drawFixationLines(Canvas canvas, LinkedList<FixationPoint> sequence, Color color)", "full_signature": "private GraphicsContext drawFixationLines(Canvas canvas, LinkedList<FixationPoint> sequence, Color color)", "class_method_signature": "FixationSequence.drawFixationLines(Canvas canvas, LinkedList<FixationPoint> sequence, Color color)", "testcase": false, "constructor": false}, {"identifier": "drawFixationCircles", "parameters": "(GraphicsContext gc, LinkedList<FixationPoint> sequence, int sequenceIndex)", "modifiers": "private", "return": "void", "signature": "void drawFixationCircles(GraphicsContext gc, LinkedList<FixationPoint> sequence, int sequenceIndex)", "full_signature": "private void drawFixationCircles(GraphicsContext gc, LinkedList<FixationPoint> sequence, int sequenceIndex)", "class_method_signature": "FixationSequence.drawFixationCircles(GraphicsContext gc, LinkedList<FixationPoint> sequence, int sequenceIndex)", "testcase": false, "constructor": false}, {"identifier": "saveToFile", "parameters": "(final File outputFile)", "modifiers": "public", "return": "void", "signature": "void saveToFile(final File outputFile)", "full_signature": "public void saveToFile(final File outputFile)", "class_method_signature": "FixationSequence.saveToFile(final File outputFile)", "testcase": false, "constructor": false}, {"identifier": "vertexReduction", "parameters": "(final LinkedList<FixationPoint> allPoints, final double tolerance)", "modifiers": "public static", "return": "LinkedList<FixationPoint>", "signature": "LinkedList<FixationPoint> vertexReduction(final LinkedList<FixationPoint> allPoints, final double tolerance)", "full_signature": "public static LinkedList<FixationPoint> vertexReduction(final LinkedList<FixationPoint> allPoints, final double tolerance)", "class_method_signature": "FixationSequence.vertexReduction(final LinkedList<FixationPoint> allPoints, final double tolerance)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/FixationSequence.java"}, "focal_method": {"identifier": "saveToFile", "parameters": "(final File outputFile)", "modifiers": "public", "return": "void", "body": "public void saveToFile(final File outputFile) {\n        final BufferedImage bImage = SwingFXUtils.fromFXImage(image, null);\n        try {\n            ImageIO.write(bImage, \"png\", outputFile);\n        } catch (final IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "void saveToFile(final File outputFile)", "full_signature": "public void saveToFile(final File outputFile)", "class_method_signature": "FixationSequence.saveToFile(final File outputFile)", "testcase": false, "constructor": false, "invocations": ["fromFXImage", "write"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}