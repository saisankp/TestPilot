{"test_class": {"identifier": "ExternalRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SpyBean\n    private ExternalRestService externalRestService;", "modifier": "@SpyBean\n    private", "type": "ExternalRestService", "declarator": "externalRestService", "var_name": "externalRestService"}, {"original_string": "@MockBean\n    private DiscoveryUtils discoveryUtils;", "modifier": "@MockBean\n    private", "type": "DiscoveryUtils", "declarator": "discoveryUtils", "var_name": "discoveryUtils"}, {"original_string": "@MockBean\n    private RestTemplate restTemplate;", "modifier": "@MockBean\n    private", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(8089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(8089)", "var_name": "wireMockRule"}], "file": "acte-service/src/test/java/fr/sictiam/stela/acteservice/service/ExternalRestServiceTest.java"}, "test_case": {"identifier": "getAccessTokenFromKernelErrorFromKernel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAccessTokenFromKernelErrorFromKernel() {\n        stubFor(get(urlPathEqualTo(\"/api/admin/local-authority/987654321/accessToken\"))\n                .willReturn(badRequest()));\n\n        LocalAuthority localAuthority = new LocalAuthority();\n        ReflectionTestUtils.setField(localAuthority, \"uuid\", \"uuid-local-authority-two-test\");\n        localAuthority.setSiren(\"987654321\");\n\n        Optional<String> accessToken = externalRestService.getAccessTokenFromKernel(localAuthority);\n\n        WireMock.verify(getRequestedFor(urlPathEqualTo(\"/api/admin/local-authority/987654321/accessToken\")));\n        Assert.assertFalse(accessToken.isPresent());\n    }", "signature": "void getAccessTokenFromKernelErrorFromKernel()", "full_signature": "@Test public void getAccessTokenFromKernelErrorFromKernel()", "class_method_signature": "ExternalRestServiceTest.getAccessTokenFromKernelErrorFromKernel()", "testcase": true, "constructor": false, "invocations": ["stubFor", "willReturn", "get", "urlPathEqualTo", "badRequest", "setField", "setSiren", "getAccessTokenFromKernel", "verify", "getRequestedFor", "urlPathEqualTo", "assertFalse", "isPresent"]}, "focal_class": {"identifier": "ExternalRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    DiscoveryUtils discoveryUtils;", "modifier": "@Autowired", "type": "DiscoveryUtils", "declarator": "discoveryUtils", "var_name": "discoveryUtils"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ExternalRestService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ExternalRestService.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "getProfile", "parameters": "(String profileUuid)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getProfile(String profileUuid)", "full_signature": "public JsonNode getProfile(String profileUuid)", "class_method_signature": "ExternalRestService.getProfile(String profileUuid)", "testcase": false, "constructor": false}, {"identifier": "getProfileForEmail", "parameters": "(String siren, String email)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getProfileForEmail(String siren, String email)", "full_signature": "public JsonNode getProfileForEmail(String siren, String email)", "class_method_signature": "ExternalRestService.getProfileForEmail(String siren, String email)", "testcase": false, "constructor": false}, {"identifier": "getGroupsForLocalAuthority", "parameters": "(String uuid)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getGroupsForLocalAuthority(String uuid)", "full_signature": "public JsonNode getGroupsForLocalAuthority(String uuid)", "class_method_signature": "ExternalRestService.getGroupsForLocalAuthority(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getProfiles", "parameters": "(String uuid)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getProfiles(String uuid)", "full_signature": "public JsonNode getProfiles(String uuid)", "class_method_signature": "ExternalRestService.getProfiles(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getGenericAccount", "parameters": "(String uuid)", "modifiers": "public", "return": "GenericAccount", "signature": "GenericAccount getGenericAccount(String uuid)", "full_signature": "public GenericAccount getGenericAccount(String uuid)", "class_method_signature": "ExternalRestService.getGenericAccount(String uuid)", "testcase": false, "constructor": false}, {"identifier": "authWithCertificate", "parameters": "(String serial, String vendor)", "modifiers": "public", "return": "GenericAccount", "signature": "GenericAccount authWithCertificate(String serial, String vendor)", "full_signature": "public GenericAccount authWithCertificate(String serial, String vendor)", "class_method_signature": "ExternalRestService.authWithCertificate(String serial, String vendor)", "testcase": false, "constructor": false}, {"identifier": "authWithEmailPassword", "parameters": "(String email, String password)", "modifiers": "public", "return": "GenericAccount", "signature": "GenericAccount authWithEmailPassword(String email, String password)", "full_signature": "public GenericAccount authWithEmailPassword(String email, String password)", "class_method_signature": "ExternalRestService.authWithEmailPassword(String email, String password)", "testcase": false, "constructor": false}, {"identifier": "getPaullConnection", "parameters": "(String sessionID)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getPaullConnection(String sessionID)", "full_signature": "public JsonNode getPaullConnection(String sessionID)", "class_method_signature": "ExternalRestService.getPaullConnection(String sessionID)", "testcase": false, "constructor": false}, {"identifier": "getLocalAuthorityByCertificate", "parameters": "(Certificate certificate)", "modifiers": "public", "return": "LocalAuthority", "signature": "LocalAuthority getLocalAuthorityByCertificate(Certificate certificate)", "full_signature": "public LocalAuthority getLocalAuthorityByCertificate(Certificate certificate)", "class_method_signature": "ExternalRestService.getLocalAuthorityByCertificate(Certificate certificate)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(LocalAuthority localAuthority, String name)", "modifiers": "public", "return": "String", "signature": "String createGroup(LocalAuthority localAuthority, String name)", "full_signature": "public String createGroup(LocalAuthority localAuthority, String name)", "class_method_signature": "ExternalRestService.createGroup(LocalAuthority localAuthority, String name)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenFromKernel", "parameters": "(LocalAuthority localAuthority)", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getAccessTokenFromKernel(LocalAuthority localAuthority)", "full_signature": "public Optional<String> getAccessTokenFromKernel(LocalAuthority localAuthority)", "class_method_signature": "ExternalRestService.getAccessTokenFromKernel(LocalAuthority localAuthority)", "testcase": false, "constructor": false}, {"identifier": "getLocalAuthorityDcId", "parameters": "(LocalAuthority localAuthority)", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getLocalAuthorityDcId(LocalAuthority localAuthority)", "full_signature": "public Optional<String> getLocalAuthorityDcId(LocalAuthority localAuthority)", "class_method_signature": "ExternalRestService.getLocalAuthorityDcId(LocalAuthority localAuthority)", "testcase": false, "constructor": false}, {"identifier": "getProfileByLocalAuthoritySirenAndEmail", "parameters": "(String siren, String email)", "modifiers": "public", "return": "JsonNode", "signature": "JsonNode getProfileByLocalAuthoritySirenAndEmail(String siren, String email)", "full_signature": "public JsonNode getProfileByLocalAuthoritySirenAndEmail(String siren, String email)", "class_method_signature": "ExternalRestService.getProfileByLocalAuthoritySirenAndEmail(String siren, String email)", "testcase": false, "constructor": false}], "file": "acte-service/src/main/java/fr/sictiam/stela/acteservice/service/ExternalRestService.java"}, "focal_method": {"identifier": "getAccessTokenFromKernel", "parameters": "(LocalAuthority localAuthority)", "modifiers": "public", "return": "Optional<String>", "body": "public Optional<String> getAccessTokenFromKernel(LocalAuthority localAuthority) {\n        RestTemplate restTemplate = new RestTemplate();\n\n        try {\n            String accessToken = restTemplate.getForObject(\n                    discoveryUtils.adminServiceUrl() + \"/api/admin/local-authority/{localAuthoritySiren}/accessToken\",\n                    String.class,\n                    localAuthority.getSiren());\n            return Optional.ofNullable(accessToken);\n        } catch (RestClientResponseException e){\n            LOGGER.error(\n                    \"[getAccessTokenFromKernel] An error was occured when tried to get kernel access token for organization {} from {} : Status {} Body {} \",\n                    discoveryUtils.adminServiceUrl(),\n                    e.getRawStatusCode(),\n                    e.getResponseBodyAsString());\n            return Optional.empty();\n        }\n    }", "signature": "Optional<String> getAccessTokenFromKernel(LocalAuthority localAuthority)", "full_signature": "public Optional<String> getAccessTokenFromKernel(LocalAuthority localAuthority)", "class_method_signature": "ExternalRestService.getAccessTokenFromKernel(LocalAuthority localAuthority)", "testcase": false, "constructor": false, "invocations": ["getForObject", "adminServiceUrl", "getSiren", "ofNullable", "error", "adminServiceUrl", "getRawStatusCode", "getResponseBodyAsString", "empty"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}