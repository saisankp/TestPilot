{"test_class": {"identifier": "FeatureCollectionExportTest", "superclass": "", "interfaces": "", "fields": [], "file": "coastal-hazards-export/src/test/java/gov/usgs/cida/coastalhazards/export/FeatureCollectionExportTest.java"}, "test_case": {"identifier": "testWriteToShapefile", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testWriteToShapefile() throws Exception {\n        WFSDataStoreFactory datastore = new WFSDataStoreFactory();\n        Map params = new HashMap<>();\n        params.put(WFSDataStoreFactory.URL.key, new URL(\"http://coastalmap.marine.usgs.gov/cmgp/National/cvi_WFS/MapServer/WFSServer?service=WFS&request=GetCapabilities&version=1.0.0\"));\n        params.put(WFSDataStoreFactory.WFS_STRATEGY.key, \"arcgis\");\n        params.put(WFSDataStoreFactory.TIMEOUT.key, 15000);\n        params.put(WFSDataStoreFactory.TRY_GZIP.key, \"true\");\n        WFSDataStore wfs = datastore.createDataStore(params);\n        String[] typeNames = wfs.getTypeNames();\n        SimpleFeatureSource featureSource = wfs.getFeatureSource(typeNames[2]);\n        \n        FeatureCollectionExport featureCollectionExport = new FeatureCollectionExport(featureSource.getFeatures(), new File(\"/tmp/shpfile\"), \"test3\");\n        featureCollectionExport.addAttribute(\"CVIRISK\");\n        featureCollectionExport.writeToShapefile();\n    }", "signature": "void testWriteToShapefile()", "full_signature": "@Test @Ignore public void testWriteToShapefile()", "class_method_signature": "FeatureCollectionExportTest.testWriteToShapefile()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "createDataStore", "getTypeNames", "getFeatureSource", "getFeatures", "addAttribute", "writeToShapefile"]}, "focal_class": {"identifier": "FeatureCollectionExport", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final CoordinateReferenceSystem DEFAULT_CRS = DefaultGeographicCRS.WGS84;", "modifier": "public static final", "type": "CoordinateReferenceSystem", "declarator": "DEFAULT_CRS = DefaultGeographicCRS.WGS84", "var_name": "DEFAULT_CRS"}, {"original_string": "public static final int NULL_PLACEHOLDER = -999;", "modifier": "public static final", "type": "int", "declarator": "NULL_PLACEHOLDER = -999", "var_name": "NULL_PLACEHOLDER"}, {"original_string": "private static final String IGNORE_LENGTH = \"SHAPE.LEN\";", "modifier": "private static final", "type": "String", "declarator": "IGNORE_LENGTH = \"SHAPE.LEN\"", "var_name": "IGNORE_LENGTH"}, {"original_string": "private SimpleFeatureCollection simpleFeatureCollection;", "modifier": "private", "type": "SimpleFeatureCollection", "declarator": "simpleFeatureCollection", "var_name": "simpleFeatureCollection"}, {"original_string": "private final File outputDirectory;", "modifier": "private final", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}, {"original_string": "private final String namePrefix;", "modifier": "private final", "type": "String", "declarator": "namePrefix", "var_name": "namePrefix"}, {"original_string": "private List<String> attributes;", "modifier": "private", "type": "List<String>", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private CoordinateReferenceSystem crs;", "modifier": "private", "type": "CoordinateReferenceSystem", "declarator": "crs", "var_name": "crs"}, {"original_string": "private boolean downloadAll;", "modifier": "private", "type": "boolean", "declarator": "downloadAll", "var_name": "downloadAll"}], "methods": [{"identifier": "FeatureCollectionExport", "parameters": "(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix)", "modifiers": "public", "return": "", "signature": " FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix)", "full_signature": "public  FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix)", "class_method_signature": "FeatureCollectionExport.FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix)", "testcase": false, "constructor": true}, {"identifier": "FeatureCollectionExport", "parameters": "(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix, boolean downloadAll)", "modifiers": "public", "return": "", "signature": " FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix, boolean downloadAll)", "full_signature": "public  FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix, boolean downloadAll)", "class_method_signature": "FeatureCollectionExport.FeatureCollectionExport(SimpleFeatureCollection simpleFeatureCollection,\n            File outputDirectory, String namePrefix, boolean downloadAll)", "testcase": false, "constructor": true}, {"identifier": "addAttribute", "parameters": "(String attrName)", "modifiers": "public", "return": "void", "signature": "void addAttribute(String attrName)", "full_signature": "public void addAttribute(String attrName)", "class_method_signature": "FeatureCollectionExport.addAttribute(String attrName)", "testcase": false, "constructor": false}, {"identifier": "setCRS", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "public", "return": "void", "signature": "void setCRS(CoordinateReferenceSystem crs)", "full_signature": "public void setCRS(CoordinateReferenceSystem crs)", "class_method_signature": "FeatureCollectionExport.setCRS(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "writeToShapefile", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean writeToShapefile()", "full_signature": "public boolean writeToShapefile()", "class_method_signature": "FeatureCollectionExport.writeToShapefile()", "testcase": false, "constructor": false}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "private", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "private SimpleFeatureType buildFeatureType()", "class_method_signature": "FeatureCollectionExport.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorFromPrototype", "parameters": "(String name)", "modifiers": "private", "return": "AttributeDescriptor", "signature": "AttributeDescriptor getDescriptorFromPrototype(String name)", "full_signature": "private AttributeDescriptor getDescriptorFromPrototype(String name)", "class_method_signature": "FeatureCollectionExport.getDescriptorFromPrototype(String name)", "testcase": false, "constructor": false}, {"identifier": "getGeometryDescriptor", "parameters": "()", "modifiers": "private", "return": "GeometryDescriptor", "signature": "GeometryDescriptor getGeometryDescriptor()", "full_signature": "private GeometryDescriptor getGeometryDescriptor()", "class_method_signature": "FeatureCollectionExport.getGeometryDescriptor()", "testcase": false, "constructor": false}, {"identifier": "attributeExists", "parameters": "(String attrName)", "modifiers": "private", "return": "boolean", "signature": "boolean attributeExists(String attrName)", "full_signature": "private boolean attributeExists(String attrName)", "class_method_signature": "FeatureCollectionExport.attributeExists(String attrName)", "testcase": false, "constructor": false}, {"identifier": "checkAndCreateFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File checkAndCreateFile()", "full_signature": "private File checkAndCreateFile()", "class_method_signature": "FeatureCollectionExport.checkAndCreateFile()", "testcase": false, "constructor": false}], "file": "coastal-hazards-export/src/main/java/gov/usgs/cida/coastalhazards/export/FeatureCollectionExport.java"}, "focal_method": {"identifier": "writeToShapefile", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean writeToShapefile() throws MalformedURLException, IOException {\n        boolean success = false;\n        //SimpleFeatureIterator features = simpleFeatureCollection.features();\n        SimpleFeatureType type = buildFeatureType();\n        FileDataStoreFactorySpi factory = FileDataStoreFinder.getDataStoreFactory(\"shp\");\n        File shpFile = checkAndCreateFile();\n        Map datastoreConfig = new HashMap<>();\n        datastoreConfig.put(\"url\", shpFile.toURI().toURL());\n        ShapefileDataStore shpfileDataStore = (ShapefileDataStore)factory.createNewDataStore(datastoreConfig);\n        shpfileDataStore.createSchema(type);\n        shpfileDataStore.forceSchemaCRS(this.crs);\n        //DataStore dataStore = factory.createNewDataStore(datastoreConfig);\n        SimpleFeatureStore featureStore = (SimpleFeatureStore) shpfileDataStore.getFeatureSource(type.getName());\n        Transaction t = new DefaultTransaction();\n        SimpleFeatureIterator fi = null;\n        try { \n            // Copied directly from Import process\n            featureStore.setTransaction(t);\n            fi = simpleFeatureCollection.features();\n            SimpleFeatureBuilder fb = new SimpleFeatureBuilder(type);\n            while (fi.hasNext()) {\n                SimpleFeature source = fi.next();\n                fb.reset();\n                for (AttributeDescriptor desc : type.getAttributeDescriptors()) {\n\t\t\t\t\tName attributeName = desc.getName();\n\t\t\t\t\tObject attributeValue = source.getAttribute(attributeName);\n\t\t\t\t\tif(null == attributeValue){\n\t\t\t\t\t\tattributeValue = NULL_PLACEHOLDER;\n\t\t\t\t\t}\n                    fb.set(attributeName, attributeValue);\n                }\n                SimpleFeature target = fb.buildFeature(null);\n                featureStore.addFeatures(DataUtilities.collection(target));\n            }\n            // successful if it made it this far\n            success = true;\n        } finally {\n            t.commit();\n            t.close();\n            IOUtils.closeQuietly(fi);\n        }\n        return success;\n    }", "signature": "boolean writeToShapefile()", "full_signature": "public boolean writeToShapefile()", "class_method_signature": "FeatureCollectionExport.writeToShapefile()", "testcase": false, "constructor": false, "invocations": ["buildFeatureType", "getDataStoreFactory", "checkAndCreateFile", "put", "toURL", "toURI", "createNewDataStore", "createSchema", "forceSchemaCRS", "getFeatureSource", "getName", "setTransaction", "features", "hasNext", "next", "reset", "getAttributeDescriptors", "getName", "getAttribute", "set", "buildFeature", "addFeatures", "collection", "commit", "close", "closeQuietly"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}