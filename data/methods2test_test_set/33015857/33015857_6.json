{"test_class": {"identifier": "DblTest", "superclass": "", "interfaces": "", "fields": [], "file": "reflekt/src/test/java/io/advantageous/boon/primitive/DblTest.java"}, "test_case": {"identifier": "testSliceOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSliceOf() throws Exception {\n\n        double[] array = Dbl.array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0);\n        double[] array2 = Dbl.sliceOf(array, 0, 100);\n        Dbl.equalsOrDie(array, array2);\n\n\n    }", "signature": "void testSliceOf()", "full_signature": "@Test public void testSliceOf()", "class_method_signature": "DblTest.testSliceOf()", "testcase": true, "constructor": false, "invocations": ["array", "sliceOf", "equalsOrDie"]}, "focal_class": {"identifier": "Dbl", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "grow", "parameters": "( double[] array, final int size )", "modifiers": "public static", "return": "double[]", "signature": "double[] grow( double[] array, final int size )", "full_signature": "public static double[] grow( double[] array, final int size )", "class_method_signature": "Dbl.grow( double[] array, final int size )", "testcase": false, "constructor": false}, {"identifier": "grow", "parameters": "( double[] array )", "modifiers": "public static", "return": "double[]", "signature": "double[] grow( double[] array )", "full_signature": "public static double[] grow( double[] array )", "class_method_signature": "Dbl.grow( double[] array )", "testcase": false, "constructor": false}, {"identifier": "shrink", "parameters": "( double[] array, int size )", "modifiers": "public static", "return": "double[]", "signature": "double[] shrink( double[] array, int size )", "full_signature": "public static double[] shrink( double[] array, int size )", "class_method_signature": "Dbl.shrink( double[] array, int size )", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "( double[] array )", "modifiers": "public static", "return": "double[]", "signature": "double[] compact( double[] array )", "full_signature": "public static double[] compact( double[] array )", "class_method_signature": "Dbl.compact( double[] array )", "testcase": false, "constructor": false}, {"identifier": "arrayOfDouble", "parameters": "( final int size )", "modifiers": "public static", "return": "double[]", "signature": "double[] arrayOfDouble( final int size )", "full_signature": "public static double[] arrayOfDouble( final int size )", "class_method_signature": "Dbl.arrayOfDouble( final int size )", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "( final double... array )", "modifiers": "public static", "return": "double[]", "signature": "double[] array( final double... array )", "full_signature": "public static double[] array( final double... array )", "class_method_signature": "Dbl.array( final double... array )", "testcase": false, "constructor": false}, {"identifier": "len", "parameters": "( double[] array )", "modifiers": "public static", "return": "int", "signature": "int len( double[] array )", "full_signature": "public static int len( double[] array )", "class_method_signature": "Dbl.len( double[] array )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final double[] array, final int index )", "modifiers": "public static", "return": "double", "signature": "double idx( final double[] array, final int index )", "full_signature": "public static double idx( final double[] array, final int index )", "class_method_signature": "Dbl.idx( final double[] array, final int index )", "testcase": false, "constructor": false}, {"identifier": "idx", "parameters": "( final double[] array, int index, double value )", "modifiers": "public static", "return": "void", "signature": "void idx( final double[] array, int index, double value )", "full_signature": "public static void idx( final double[] array, int index, double value )", "class_method_signature": "Dbl.idx( final double[] array, int index, double value )", "testcase": false, "constructor": false}, {"identifier": "sliceOf", "parameters": "( double[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "double[]", "signature": "double[] sliceOf( double[] array, int startIndex, int endIndex )", "full_signature": "public static double[] sliceOf( double[] array, int startIndex, int endIndex )", "class_method_signature": "Dbl.sliceOf( double[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( double[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "double[]", "signature": "double[] slc( double[] array, int startIndex, int endIndex )", "full_signature": "public static double[] slc( double[] array, int startIndex, int endIndex )", "class_method_signature": "Dbl.slc( double[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slc", "parameters": "( double[] array, int startIndex )", "modifiers": "public static", "return": "double[]", "signature": "double[] slc( double[] array, int startIndex )", "full_signature": "public static double[] slc( double[] array, int startIndex )", "class_method_signature": "Dbl.slc( double[] array, int startIndex )", "testcase": false, "constructor": false}, {"identifier": "endSliceOf", "parameters": "( final double[] array, final int endIndex )", "modifiers": "public static", "return": "double[]", "signature": "double[] endSliceOf( final double[] array, final int endIndex )", "full_signature": "public static double[] endSliceOf( final double[] array, final int endIndex )", "class_method_signature": "Dbl.endSliceOf( final double[] array, final int endIndex )", "testcase": false, "constructor": false}, {"identifier": "slcEnd", "parameters": "( final double[] array, final int endIndex )", "modifiers": "public static", "return": "double[]", "signature": "double[] slcEnd( final double[] array, final int endIndex )", "full_signature": "public static double[] slcEnd( final double[] array, final int endIndex )", "class_method_signature": "Dbl.slcEnd( final double[] array, final int endIndex )", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "( double value, double[] array )", "modifiers": "public static", "return": "boolean", "signature": "boolean in( double value, double[] array )", "full_signature": "public static boolean in( double value, double[] array )", "class_method_signature": "Dbl.in( double value, double[] array )", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "( double[] array )", "modifiers": "public static", "return": "double[]", "signature": "double[] copy( double[] array )", "full_signature": "public static double[] copy( double[] array )", "class_method_signature": "Dbl.copy( double[] array )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( double[] array, double v )", "modifiers": "public static", "return": "double[]", "signature": "double[] add( double[] array, double v )", "full_signature": "public static double[] add( double[] array, double v )", "class_method_signature": "Dbl.add( double[] array, double v )", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( double[] array, double[] array2 )", "modifiers": "public static", "return": "double[]", "signature": "double[] add( double[] array, double[] array2 )", "full_signature": "public static double[] add( double[] array, double[] array2 )", "class_method_signature": "Dbl.add( double[] array, double[] array2 )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final double[] array, final int idx, final double v )", "modifiers": "public static", "return": "double[]", "signature": "double[] insert( final double[] array, final int idx, final double v )", "full_signature": "public static double[] insert( final double[] array, final int idx, final double v )", "class_method_signature": "Dbl.insert( final double[] array, final int idx, final double v )", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "( final double[] array, final int fromIndex, final double[] values )", "modifiers": "public static", "return": "double[]", "signature": "double[] insert( final double[] array, final int fromIndex, final double[] values )", "full_signature": "public static double[] insert( final double[] array, final int fromIndex, final double[] values )", "class_method_signature": "Dbl.insert( final double[] array, final int fromIndex, final double[] values )", "testcase": false, "constructor": false}, {"identifier": "calculateIndex", "parameters": "( double[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateIndex( double[] array, int originalIndex )", "full_signature": "private static int calculateIndex( double[] array, int originalIndex )", "class_method_signature": "Dbl.calculateIndex( double[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "calculateEndIndex", "parameters": "( double[] array, int originalIndex )", "modifiers": "private static", "return": "int", "signature": "int calculateEndIndex( double[] array, int originalIndex )", "full_signature": "private static int calculateEndIndex( double[] array, int originalIndex )", "class_method_signature": "Dbl.calculateEndIndex( double[] array, int originalIndex )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(double[] expected, double[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOrDie(double[] expected, double[] got)", "full_signature": "public static boolean equalsOrDie(double[] expected, double[] got)", "class_method_signature": "Dbl.equalsOrDie(double[] expected, double[] got)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(double[] expected, double[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(double[] expected, double[] got)", "full_signature": "public static boolean equals(double[] expected, double[] got)", "class_method_signature": "Dbl.equals(double[] expected, double[] got)", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final double[] array, ReduceBy reduceBy )", "class_method_signature": "Dbl.reduceBy( final double[] array, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array, final int start, final int length, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array, final int start, final int length, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final double[] array, final int start, final int length, ReduceBy reduceBy )", "class_method_signature": "Dbl.reduceBy( final double[] array, final int start, final int length, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array, final int length, ReduceBy reduceBy )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array, final int length, ReduceBy reduceBy )", "full_signature": "public static double reduceBy( final double[] array, final int length, ReduceBy reduceBy )", "class_method_signature": "Dbl.reduceBy( final double[] array, final int length, ReduceBy reduceBy )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array, T object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array, T object )", "full_signature": "public static double reduceBy( final double[] array, T object )", "class_method_signature": "Dbl.reduceBy( final double[] array, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array,\n                                       final T object,\n                                       final String methodName )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array,\n                                       final T object,\n                                       final String methodName )", "full_signature": "public static double reduceBy( final double[] array,\n                                       final T object,\n                                       final String methodName )", "class_method_signature": "Dbl.reduceBy( final double[] array,\n                                       final T object,\n                                       final String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final double[] array, T object )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final double[] array, T object )", "full_signature": "private static double reduceByR( final double[] array, T object )", "class_method_signature": "Dbl.reduceByR( final double[] array, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final double[] array, T object, String methodName )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final double[] array, T object, String methodName )", "full_signature": "private static double reduceByR( final double[] array, T object, String methodName )", "class_method_signature": "Dbl.reduceByR( final double[] array, T object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final double[] array, int length, T object, String methodName )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final double[] array, int length, T object, String methodName )", "full_signature": "private static double reduceByR( final double[] array, int length, T object, String methodName )", "class_method_signature": "Dbl.reduceByR( final double[] array, int length, T object, String methodName )", "testcase": false, "constructor": false}, {"identifier": "reduceByR", "parameters": "( final double[] array, int length, T object )", "modifiers": "private static", "return": "double", "signature": "double reduceByR( final double[] array, int length, T object )", "full_signature": "private static double reduceByR( final double[] array, int length, T object )", "class_method_signature": "Dbl.reduceByR( final double[] array, int length, T object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array,  int length,\n                                   Object object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array,  int length,\n                                   Object object )", "full_signature": "public static double reduceBy( final double[] array,  int length,\n                                   Object object )", "class_method_signature": "Dbl.reduceBy( final double[] array,  int length,\n                                   Object object )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array,  int length,\n                                   Object function, String functionName )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array,  int length,\n                                   Object function, String functionName )", "full_signature": "public static double reduceBy( final double[] array,  int length,\n                                   Object function, String functionName )", "class_method_signature": "Dbl.reduceBy( final double[] array,  int length,\n                                   Object function, String functionName )", "testcase": false, "constructor": false}, {"identifier": "reduceBy", "parameters": "( final double[] array, int start, int length,\n                                   Object object )", "modifiers": "public static", "return": "double", "signature": "double reduceBy( final double[] array, int start, int length,\n                                   Object object )", "full_signature": "public static double reduceBy( final double[] array, int start, int length,\n                                   Object object )", "class_method_signature": "Dbl.reduceBy( final double[] array, int start, int length,\n                                   Object object )", "testcase": false, "constructor": false}, {"identifier": "equalsOrDie", "parameters": "(double expected, double got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOrDie(double expected, double got)", "full_signature": "public static boolean equalsOrDie(double expected, double got)", "class_method_signature": "Dbl.equalsOrDie(double expected, double got)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(double expected, double got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(double expected, double got)", "full_signature": "public static boolean equals(double expected, double got)", "class_method_signature": "Dbl.equals(double expected, double got)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( double[] values )", "modifiers": "public static", "return": "double", "signature": "double sum( double[] values )", "full_signature": "public static double sum( double[] values )", "class_method_signature": "Dbl.sum( double[] values )", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( final double[] values,  final int length )", "modifiers": "public static", "return": "double", "signature": "double sum( final double[] values,  final int length )", "full_signature": "public static double sum( final double[] values,  final int length )", "class_method_signature": "Dbl.sum( final double[] values,  final int length )", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "( double[] values, int start, int length )", "modifiers": "public static", "return": "double", "signature": "double sum( double[] values, int start, int length )", "full_signature": "public static double sum( double[] values, int start, int length )", "class_method_signature": "Dbl.sum( double[] values, int start, int length )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( double[] values, final int start, final int length )", "modifiers": "public static", "return": "double", "signature": "double max( double[] values, final int start, final int length )", "full_signature": "public static double max( double[] values, final int start, final int length )", "class_method_signature": "Dbl.max( double[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( double[] values )", "modifiers": "public static", "return": "double", "signature": "double max( double[] values )", "full_signature": "public static double max( double[] values )", "class_method_signature": "Dbl.max( double[] values )", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "( double[] values, int length )", "modifiers": "public static", "return": "double", "signature": "double max( double[] values, int length )", "full_signature": "public static double max( double[] values, int length )", "class_method_signature": "Dbl.max( double[] values, int length )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( double[] values, final int start, final int length )", "modifiers": "public static", "return": "double", "signature": "double min( double[] values, final int start, final int length )", "full_signature": "public static double min( double[] values, final int start, final int length )", "class_method_signature": "Dbl.min( double[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( double[] values )", "modifiers": "public static", "return": "double", "signature": "double min( double[] values )", "full_signature": "public static double min( double[] values )", "class_method_signature": "Dbl.min( double[] values )", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "( double[] values, int length )", "modifiers": "public static", "return": "double", "signature": "double min( double[] values, int length )", "full_signature": "public static double min( double[] values, int length )", "class_method_signature": "Dbl.min( double[] values, int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( double[] values, final int start, final int length )", "modifiers": "private static", "return": "double", "signature": "double mean( double[] values, final int start, final int length )", "full_signature": "private static double mean( double[] values, final int start, final int length )", "class_method_signature": "Dbl.mean( double[] values, final int start, final int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( double[] values, final int length )", "modifiers": "public static", "return": "double", "signature": "double mean( double[] values, final int length )", "full_signature": "public static double mean( double[] values, final int length )", "class_method_signature": "Dbl.mean( double[] values, final int length )", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "( double[] values )", "modifiers": "public static", "return": "double", "signature": "double mean( double[] values )", "full_signature": "public static double mean( double[] values )", "class_method_signature": "Dbl.mean( double[] values )", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(double[] values, final int start, final int length)", "modifiers": "public static", "return": "double", "signature": "double variance(double[] values, final int start, final int length)", "full_signature": "public static double variance(double[] values, final int start, final int length)", "class_method_signature": "Dbl.variance(double[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "varianceDouble", "parameters": "(double[] values, final int start, final int length)", "modifiers": "public static", "return": "double", "signature": "double varianceDouble(double[] values, final int start, final int length)", "full_signature": "public static double varianceDouble(double[] values, final int start, final int length)", "class_method_signature": "Dbl.varianceDouble(double[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(double[] values,  final int length)", "modifiers": "public static", "return": "double", "signature": "double variance(double[] values,  final int length)", "full_signature": "public static double variance(double[] values,  final int length)", "class_method_signature": "Dbl.variance(double[] values,  final int length)", "testcase": false, "constructor": false}, {"identifier": "variance", "parameters": "(double[] values)", "modifiers": "public static", "return": "double", "signature": "double variance(double[] values)", "full_signature": "public static double variance(double[] values)", "class_method_signature": "Dbl.variance(double[] values)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(double[] values, final int start, final int length)", "modifiers": "public static", "return": "double", "signature": "double standardDeviation(double[] values, final int start, final int length)", "full_signature": "public static double standardDeviation(double[] values, final int start, final int length)", "class_method_signature": "Dbl.standardDeviation(double[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(double[] values,  final int length)", "modifiers": "public static", "return": "double", "signature": "double standardDeviation(double[] values,  final int length)", "full_signature": "public static double standardDeviation(double[] values,  final int length)", "class_method_signature": "Dbl.standardDeviation(double[] values,  final int length)", "testcase": false, "constructor": false}, {"identifier": "standardDeviation", "parameters": "(double[] values)", "modifiers": "public static", "return": "double", "signature": "double standardDeviation(double[] values)", "full_signature": "public static double standardDeviation(double[] values)", "class_method_signature": "Dbl.standardDeviation(double[] values)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(double[] values, final int start, final int length)", "modifiers": "public static", "return": "double", "signature": "double median(double[] values, final int start, final int length)", "full_signature": "public static double median(double[] values, final int start, final int length)", "class_method_signature": "Dbl.median(double[] values, final int start, final int length)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(double[] values, final int length)", "modifiers": "public static", "return": "double", "signature": "double median(double[] values, final int length)", "full_signature": "public static double median(double[] values, final int length)", "class_method_signature": "Dbl.median(double[] values, final int length)", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "(double[] values)", "modifiers": "public static", "return": "double", "signature": "double median(double[] values)", "full_signature": "public static double median(double[] values)", "class_method_signature": "Dbl.median(double[] values)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(int start, int end, double[] expected, double[] got)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(int start, int end, double[] expected, double[] got)", "full_signature": "public static boolean equals(int start, int end, double[] expected, double[] got)", "class_method_signature": "Dbl.equals(int start, int end, double[] expected, double[] got)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(double array[])", "modifiers": "public static", "return": "int", "signature": "int hashCode(double array[])", "full_signature": "public static int hashCode(double array[])", "class_method_signature": "Dbl.hashCode(double array[])", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "(int start, int end, double array[])", "modifiers": "public static", "return": "int", "signature": "int hashCode(int start, int end, double array[])", "full_signature": "public static int hashCode(int start, int end, double array[])", "class_method_signature": "Dbl.hashCode(int start, int end, double array[])", "testcase": false, "constructor": false}], "file": "reflekt/src/main/java/io/advantageous/boon/primitive/Dbl.java"}, "focal_method": {"identifier": "sliceOf", "parameters": "( double[] array, int startIndex, int endIndex )", "modifiers": "public static", "return": "double[]", "body": "public static double[] sliceOf( double[] array, int startIndex, int endIndex ) {\n        return slc(array, startIndex, endIndex);\n    }", "signature": "double[] sliceOf( double[] array, int startIndex, int endIndex )", "full_signature": "public static double[] sliceOf( double[] array, int startIndex, int endIndex )", "class_method_signature": "Dbl.sliceOf( double[] array, int startIndex, int endIndex )", "testcase": false, "constructor": false, "invocations": ["slc"]}, "repository": {"repo_id": 33015857, "url": "https://github.com/advantageous/boon", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 18, "size": 6174, "license": "licensed"}}