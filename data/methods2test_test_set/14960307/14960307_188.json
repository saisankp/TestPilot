{"test_class": {"identifier": "FileUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FileUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileUtilTest.class)", "var_name": "logger"}, {"original_string": "private static final String TEST_FILE = \"CHANGELOG.md\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"CHANGELOG.md\"", "var_name": "TEST_FILE"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/FileUtilTest.java"}, "test_case": {"identifier": "fileNameDateTimeComparatorClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fileNameDateTimeComparatorClass() throws Exception {\n        //\n        // create sample directory with a couple entries\n        //\n        File targetDir = new File(\"target/sample/fileNameDateTimeComparatorClass\");\n        targetDir.mkdirs();\n\n        File file0 = new File(targetDir, \"sample1-2009-06-25.log\");\n        file0.createNewFile();\n\n        File file1 = new File(targetDir, \"sample2-2009-06-23.log\");\n        file1.createNewFile();\n\n        File file2 = new File(targetDir, \"sample3-2009-06-24.log\");\n        file2.createNewFile();\n\n        //\n        // alphabetically, these files should actually go sample1, sample2, then sample3\n        // but if we sort by the embedded date, they shoudl go sample2, sample3, then sample1\n        //\n\n        // try 1 extension\n        File[] files = FileUtil.findFiles(targetDir, new FileNameDateTimeFilter(new DateTime(2009,6,25,0,0,0,0,DateTimeZone.UTC)));\n\n        // sort by embedded date\n        Arrays.sort(files, new FileUtil.FileNameDateTimeComparator(\"yyyy-MM-dd\", DateTimeZone.UTC));\n\n        Assert.assertEquals(3, files.length);\n        Assert.assertEquals(file1, files[0]);\n        Assert.assertEquals(file2, files[1]);\n        Assert.assertEquals(file0, files[2]);\n    }", "signature": "void fileNameDateTimeComparatorClass()", "full_signature": "@Test public void fileNameDateTimeComparatorClass()", "class_method_signature": "FileUtilTest.fileNameDateTimeComparatorClass()", "testcase": true, "constructor": false, "invocations": ["mkdirs", "createNewFile", "createNewFile", "createNewFile", "findFiles", "sort", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "FileUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FileUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtil()", "full_signature": "private  FileUtil()", "class_method_signature": "FileUtil.FileUtil()", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(InputStream is1, InputStream is2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(InputStream is1, InputStream is2)", "full_signature": "private static boolean equals(InputStream is1, InputStream is2)", "class_method_signature": "FileUtil.equals(InputStream is1, InputStream is2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(File file1, File file2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(File file1, File file2)", "full_signature": "public static boolean equals(File file1, File file2)", "class_method_signature": "FileUtil.equals(File file1, File file2)", "testcase": false, "constructor": false}, {"identifier": "isValidFileExtension", "parameters": "(String extension)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidFileExtension(String extension)", "full_signature": "public static boolean isValidFileExtension(String extension)", "class_method_signature": "FileUtil.isValidFileExtension(String extension)", "testcase": false, "constructor": false}, {"identifier": "parseFileExtension", "parameters": "(String filename)", "modifiers": "public static", "return": "String", "signature": "String parseFileExtension(String filename)", "full_signature": "public static String parseFileExtension(String filename)", "class_method_signature": "FileUtil.parseFileExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "findFiles", "parameters": "(File dir, FileFilter filter)", "modifiers": "public static", "return": "File[]", "signature": "File[] findFiles(File dir, FileFilter filter)", "full_signature": "public static File[] findFiles(File dir, FileFilter filter)", "class_method_signature": "FileUtil.findFiles(File dir, FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File sourceFile, File targetFile)", "modifiers": "public static", "return": "void", "signature": "void copy(File sourceFile, File targetFile)", "full_signature": "public static void copy(File sourceFile, File targetFile)", "class_method_signature": "FileUtil.copy(File sourceFile, File targetFile)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(File sourceFile, File targetFile, boolean overwrite)", "modifiers": "public static", "return": "boolean", "signature": "boolean copy(File sourceFile, File targetFile, boolean overwrite)", "full_signature": "public static boolean copy(File sourceFile, File targetFile, boolean overwrite)", "class_method_signature": "FileUtil.copy(File sourceFile, File targetFile, boolean overwrite)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/FileUtil.java"}, "focal_method": {"identifier": "findFiles", "parameters": "(File dir, FileFilter filter)", "modifiers": "public static", "return": "File[]", "body": "public static File[] findFiles(File dir, FileFilter filter) throws FileNotFoundException {\n        if (!dir.exists()) {\n            throw new FileNotFoundException(\"Directory \" + dir + \" does not exist.\");\n        }\n\n        if (!dir.isDirectory()) {\n            throw new FileNotFoundException(\"File \" + dir + \" is not a directory.\");\n        }\n\n        // being matching process, create array for returning results\n        ArrayList<File> files = new ArrayList<File>();\n\n        // get all files in this directory\n        File[] allFiles = dir.listFiles();\n\n        // were any files returned?\n        if (allFiles != null && allFiles.length > 0) {\n            // loop thru every file in the dir\n            for (File f : allFiles) {\n                // only match files, not a directory\n                if (f.isFile()) {\n                    // delegate matching to provided file matcher\n                    if (filter.accept(f)) {\n                        files.add(f);\n                    }\n                }\n            }\n        }\n\n        // based on filesystem, order of files not guaranteed -- sort now\n        File[] r = files.toArray(new File[0]);\n        Arrays.sort(r);\n        return r;\n    }", "signature": "File[] findFiles(File dir, FileFilter filter)", "full_signature": "public static File[] findFiles(File dir, FileFilter filter)", "class_method_signature": "FileUtil.findFiles(File dir, FileFilter filter)", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "listFiles", "isFile", "accept", "add", "toArray", "sort"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}