{"test_class": {"identifier": "MesureRessemblanceToponymeSamalTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-util/src/test/java/fr/ign/cogit/geoxygene/util/string/MesureRessemblanceToponymeSamalTest.java"}, "test_case": {"identifier": "testToponyme", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToponyme() {\n    System.out.println(\"=============== 1 ===================\");\n    System.out.println(\"('Borde', 'la borde') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Borde\", \"la borde\"));\n    System.out.println(\"('Brosses', 'croix des brosses') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Brosses\", \"croix des brosses\"));\n    System.out.println(\"('Chaume-du-Roi', 'la chaume du roi') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Chaume-du-Roi\", \"la chaume du roi\"));\n    System.out.println(\"('Maison-Rouge', 'maison rouge') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Maison-Rouge\", \"maison rouge\"));\n    System.out.println(\"('Saint-Roch', 'croix saint-roch') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Saint-Roch\", \"croix saint-roch\"));\n    System.out.println(\"('Ramisse', 'pont de la ramisse') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Ramisse\", \"pont de la ramisse\"));\n    System.out.println(\"('Pont-de-Colonne', 'pont de colomne') : \" + MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(\"Pont-de-Colonne\", \"pont de colomne\"));\n  }", "signature": "void testToponyme()", "full_signature": "@Test public void testToponyme()", "class_method_signature": "MesureRessemblanceToponymeSamalTest.testToponyme()", "testcase": true, "constructor": false, "invocations": ["println", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal", "println", "mesureRessemblanceToponymeSamal"]}, "focal_class": {"identifier": "MesureRessemblanceToponymeSamal", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "mesureRessemblanceToponymeSamal", "parameters": "(String string1, String string2)", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "double", "signature": "double mesureRessemblanceToponymeSamal(String string1, String string2)", "full_signature": "@SuppressWarnings(\"unused\") public static double mesureRessemblanceToponymeSamal(String string1, String string2)", "class_method_signature": "MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(String string1, String string2)", "testcase": false, "constructor": false}], "file": "geoxygene-util/src/main/java/fr/ign/cogit/geoxygene/util/string/MesureRessemblanceToponymeSamal.java"}, "focal_method": {"identifier": "mesureRessemblanceToponymeSamal", "parameters": "(String string1, String string2)", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "double", "body": "@SuppressWarnings(\"unused\")\n  public static double mesureRessemblanceToponymeSamal(String string1, String string2) {\n  \n    List<String> tokenLigne = new ArrayList<String>();\n    List<String> tokenColonne = new ArrayList<String>();\n    ApproximateMatcher matcher = new ApproximateMatcher();\n    String toponyme, oronyme;\n    MatriceConfiance matriceToken;\n    StringTokenizer st1, st2;\n    matcher.setIgnoreCase(true);\n    matcher.setIgnoreAccent(true);\n    double ecart = 0, ecartRelatif = 0, confiance = 0;\n    string1 = matcher.process(string1);\n    string1 = TraitementChainesDeCaracteres.ignorePunctuation(string1);\n    string2 = matcher.process(string2);\n    string2 = TraitementChainesDeCaracteres.ignorePunctuation(string2);\n    st1 = new StringTokenizer(string1);\n    st2 = new StringTokenizer(string2);\n    matriceToken = new MatriceConfiance(string1, string2);\n    // initialisation matrice\n    for (int i = 0; i < matriceToken.nbRows; i++) {\n      for (int j = 0; j < matriceToken.nbColumns; j++) {\n        matriceToken.values[i][j] = 0;\n      }\n    }\n    while (st1.hasMoreElements()) {\n      tokenLigne.add(st1.nextToken());\n    }\n    while (st2.hasMoreElements()) {\n      tokenColonne.add(st2.nextToken());\n    }\n    for (int i = 0; i < tokenLigne.size(); i++) {\n      for (int j = 0; j < tokenColonne.size(); j++) {\n        ecart = matcher.distance(tokenLigne.get(i).toString(), tokenColonne\n            .get(j).toString());\n        ecartRelatif = 1 - (ecart / Math.max(tokenLigne.get(i).toString()\n            .length(), tokenColonne.get(j).toString().length()));\n        matriceToken.values[i][j] = ecartRelatif;\n      }\n    }\n    confiance = matriceToken.confidenceMaxsRows();\n    return confiance;\n  }", "signature": "double mesureRessemblanceToponymeSamal(String string1, String string2)", "full_signature": "@SuppressWarnings(\"unused\") public static double mesureRessemblanceToponymeSamal(String string1, String string2)", "class_method_signature": "MesureRessemblanceToponymeSamal.mesureRessemblanceToponymeSamal(String string1, String string2)", "testcase": false, "constructor": false, "invocations": ["setIgnoreCase", "setIgnoreAccent", "process", "ignorePunctuation", "process", "ignorePunctuation", "hasMoreElements", "add", "nextToken", "hasMoreElements", "add", "nextToken", "size", "size", "distance", "toString", "get", "toString", "get", "max", "length", "toString", "get", "length", "toString", "get", "confidenceMaxsRows"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}