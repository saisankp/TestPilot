{"test_class": {"identifier": "GraphiteWithStormQuerierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_RENDER_API_PATH = \"/render\";", "modifier": "private final", "type": "String", "declarator": "TEST_RENDER_API_PATH = \"/render\"", "var_name": "TEST_RENDER_API_PATH"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18089)", "var_name": "wireMockRule"}, {"original_string": "private GraphiteWithStormQuerier querier;", "modifier": "private", "type": "GraphiteWithStormQuerier", "declarator": "querier", "var_name": "querier"}], "file": "streams/runners/storm/metrics/src/test/java/com/hortonworks/streamline/streams/metrics/storm/graphite/GraphiteWithStormQuerierTest.java"}, "test_case": {"identifier": "getRawMetrics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getRawMetrics() throws Exception {\n        stubMetricUrl();\n\n        String metricName = \"metric\";\n        String parameters = \"\";\n        long from = 1234000L;\n        long to = 5678000L;\n\n        Map<String, Map<Long, Double>> metrics = querier.getRawMetrics(metricName, parameters, from, to);\n        assertResult(metrics.get(\"metric\"));\n\n        verify(getRequestedFor(urlPathEqualTo(TEST_RENDER_API_PATH))\n                .withQueryParam(\"target\", equalTo(\"metric\"))\n                .withQueryParam(\"format\", equalTo(\"json\"))\n                .withQueryParam(\"from\", equalTo(\"1234\"))\n                .withQueryParam(\"until\", equalTo(\"5678\")));\n    }", "signature": "void getRawMetrics()", "full_signature": "@Test public void getRawMetrics()", "class_method_signature": "GraphiteWithStormQuerierTest.getRawMetrics()", "testcase": true, "constructor": false, "invocations": ["stubMetricUrl", "getRawMetrics", "assertResult", "get", "verify", "withQueryParam", "withQueryParam", "withQueryParam", "withQueryParam", "getRequestedFor", "urlPathEqualTo", "equalTo", "equalTo", "equalTo", "equalTo"]}, "focal_class": {"identifier": "GraphiteWithStormQuerier", "superclass": "extends AbstractTimeSeriesQuerier", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(GraphiteWithStormQuerier.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(GraphiteWithStormQuerier.class)", "var_name": "log"}, {"original_string": "static final String RENDER_API_URL = \"renderApiUrl\";", "modifier": "static final", "type": "String", "declarator": "RENDER_API_URL = \"renderApiUrl\"", "var_name": "RENDER_API_URL"}, {"original_string": "static final String METRIC_NAME_PREFIX = \"metricNamePrefix\";", "modifier": "static final", "type": "String", "declarator": "METRIC_NAME_PREFIX = \"metricNamePrefix\"", "var_name": "METRIC_NAME_PREFIX"}, {"original_string": "static final String USE_FQDN = \"useFQDN\";", "modifier": "static final", "type": "String", "declarator": "USE_FQDN = \"useFQDN\"", "var_name": "USE_FQDN"}, {"original_string": "private static final List<String> METRICS_NEED_AGGREGATION_ON_STREAMS = Lists.newArrayList(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    );", "modifier": "private static final", "type": "List<String>", "declarator": "METRICS_NEED_AGGREGATION_ON_STREAMS = Lists.newArrayList(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    )", "var_name": "METRICS_NEED_AGGREGATION_ON_STREAMS"}, {"original_string": "public static final String WILDCARD_ALL_COMPONENTS = \"*\";", "modifier": "public static final", "type": "String", "declarator": "WILDCARD_ALL_COMPONENTS = \"*\"", "var_name": "WILDCARD_ALL_COMPONENTS"}, {"original_string": "private Client client;", "modifier": "private", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "private URI renderApiUrl;", "modifier": "private", "type": "URI", "declarator": "renderApiUrl", "var_name": "renderApiUrl"}, {"original_string": "private String metricNamePrefix;", "modifier": "private", "type": "String", "declarator": "metricNamePrefix", "var_name": "metricNamePrefix"}, {"original_string": "private boolean useFQDN;", "modifier": "private", "type": "boolean", "declarator": "useFQDN", "var_name": "useFQDN"}], "methods": [{"identifier": "GraphiteWithStormQuerier", "parameters": "()", "modifiers": "public", "return": "", "signature": " GraphiteWithStormQuerier()", "full_signature": "public  GraphiteWithStormQuerier()", "class_method_signature": "GraphiteWithStormQuerier.GraphiteWithStormQuerier()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Map<String, String> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, String> conf)", "full_signature": "@Override public void init(Map<String, String> conf)", "class_method_signature": "GraphiteWithStormQuerier.init(Map<String, String> conf)", "testcase": false, "constructor": false}, {"identifier": "getTopologyLevelMetrics", "parameters": "(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                        long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                        long from, long to)", "full_signature": "@Override public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                        long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.getMetrics(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                        long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeQueryParameters", "parameters": "(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                       long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeQueryParameters(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                       long from, long to)", "full_signature": "private URI composeQueryParameters(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                       long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.composeQueryParameters(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction,\n                                       long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeRawQueryParameters", "parameters": "(String metricName, Map<String, String> queryParams, long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "full_signature": "private URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "formatDataPointsFromGraphiteToMap", "parameters": "(List<List<Number>> dataPoints)", "modifiers": "private", "return": "Map<Long, Double>", "signature": "Map<Long, Double> formatDataPointsFromGraphiteToMap(List<List<Number>> dataPoints)", "full_signature": "private Map<Long, Double> formatDataPointsFromGraphiteToMap(List<List<Number>> dataPoints)", "class_method_signature": "GraphiteWithStormQuerier.formatDataPointsFromGraphiteToMap(List<List<Number>> dataPoints)", "testcase": false, "constructor": false}, {"identifier": "buildMetricName", "parameters": "(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction)", "modifiers": "private", "return": "String", "signature": "String buildMetricName(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction)", "full_signature": "private String buildMetricName(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction)", "class_method_signature": "GraphiteWithStormQuerier.buildMetricName(String topologyName, String componentId, String metricName, AggregateFunction aggrFunction)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/metrics/src/main/java/com/hortonworks/streamline/streams/metrics/storm/graphite/GraphiteWithStormQuerier.java"}, "focal_method": {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "body": "@Override\n    public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to) {\n        Map<String, String> queryParams = parseParameters(parameters);\n        URI targetUri = composeRawQueryParameters(metricName, queryParams, from, to);\n\n        log.debug(\"Calling {} for querying metric\", targetUri.toString());\n\n        List<Map<String, ?>> responseList = JsonClientUtil.getEntity(client.target(targetUri), List.class);\n        if (responseList.size() > 0) {\n            Map<String, Map<Long, Double>> ret = new HashMap<>(responseList.size());\n            for (Map<String, ?> metric : responseList) {\n                String target = (String) metric.get(\"target\");\n                List<List<Number>> dataPoints = (List<List<Number>>) metric.get(\"datapoints\");\n                Map<Long, Double> pointsForOutput = formatDataPointsFromGraphiteToMap(dataPoints);\n                ret.put(target, pointsForOutput);\n            }\n\n            return ret;\n        } else {\n            return Collections.emptyMap();\n        }\n    }", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "GraphiteWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false, "invocations": ["parseParameters", "composeRawQueryParameters", "debug", "toString", "getEntity", "target", "size", "size", "get", "get", "formatDataPointsFromGraphiteToMap", "put", "emptyMap"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}