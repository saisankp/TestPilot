{"test_class": {"identifier": "HttpCrlFetcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HTTP_TEST_URL = \"http://testUrl.de\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_TEST_URL = \"http://testUrl.de\"", "var_name": "HTTP_TEST_URL"}, {"original_string": "private X509Certificate certificate;", "modifier": "private", "type": "X509Certificate", "declarator": "certificate", "var_name": "certificate"}, {"original_string": "private CertificateFactory cf;", "modifier": "private", "type": "CertificateFactory", "declarator": "cf", "var_name": "cf"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/eidserver/crl/HttpCrlFetcherTest.java"}, "test_case": {"identifier": "throwsCertValidationExceptionBouncyCastleIsNotPresent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void throwsCertValidationExceptionBouncyCastleIsNotPresent() throws Exception\n  {\n    Security.removeProvider(BouncyCastleProvider.PROVIDER_NAME);\n    Set<X509Certificate> trustedSet = new HashSet<>();\n    trustedSet.add(certificate);\n    HttpCrlFetcher crlFetcher = new HttpCrlFetcher(trustedSet);\n    CertificateValidationException certificateValidationException = Assertions.assertThrows(CertificateValidationException.class,\n                                                                                            () -> crlFetcher.httpDownload(\"mock-address\"));\n    Assertions.assertTrue(certificateValidationException.toString()\n                                                        .contains(\"Failed to download CRL 'mock-address'\"));\n\n  }", "signature": "void throwsCertValidationExceptionBouncyCastleIsNotPresent()", "full_signature": "@Test void throwsCertValidationExceptionBouncyCastleIsNotPresent()", "class_method_signature": "HttpCrlFetcherTest.throwsCertValidationExceptionBouncyCastleIsNotPresent()", "testcase": true, "constructor": false, "invocations": ["removeProvider", "add", "assertThrows", "httpDownload", "assertTrue", "contains", "toString"]}, "focal_class": {"identifier": "HttpCrlFetcher", "superclass": "", "interfaces": "implements CrlFetcher", "fields": [{"original_string": "private final Set<X509Certificate> trustAnchors;", "modifier": "private final", "type": "Set<X509Certificate>", "declarator": "trustAnchors", "var_name": "trustAnchors"}], "methods": [{"identifier": "HttpCrlFetcher", "parameters": "(Set<X509Certificate> trustAnchors)", "modifiers": "public", "return": "", "signature": " HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "full_signature": "public  HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "class_method_signature": "HttpCrlFetcher.HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String url)", "modifiers": "@Override public", "return": "X509CRL", "signature": "X509CRL get(String url)", "full_signature": "@Override public X509CRL get(String url)", "class_method_signature": "HttpCrlFetcher.get(String url)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "signature": "X509CRL download(String url)", "full_signature": "protected X509CRL download(String url)", "class_method_signature": "HttpCrlFetcher.download(String url)", "testcase": false, "constructor": false}, {"identifier": "httpDownload", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "signature": "X509CRL httpDownload(String url)", "full_signature": "protected X509CRL httpDownload(String url)", "class_method_signature": "HttpCrlFetcher.httpDownload(String url)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/eidserver/crl/HttpCrlFetcher.java"}, "focal_method": {"identifier": "httpDownload", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "body": "protected X509CRL httpDownload(String url) throws CertificateValidationException\n  {\n    try\n    {\n      CertificateFactory cf = CertificateFactory.getInstance(\"x509\", BouncyCastleProvider.PROVIDER_NAME);\n      return (X509CRL)cf.generateCRL(URI.create(url).toURL().openStream());\n    }\n    catch (IOException | CRLException | CertificateException | NoSuchProviderException e)\n    {\n      throw new CertificateValidationException(String.format(\"Failed to download CRL '%s' (%s)\",\n                                                             url,\n                                                             e.getMessage()),\n                                               e);\n    }\n  }", "signature": "X509CRL httpDownload(String url)", "full_signature": "protected X509CRL httpDownload(String url)", "class_method_signature": "HttpCrlFetcher.httpDownload(String url)", "testcase": false, "constructor": false, "invocations": ["getInstance", "generateCRL", "openStream", "toURL", "create", "format", "getMessage"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}