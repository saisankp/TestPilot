{"test_class": {"identifier": "ChowLinTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/benchmarking/simplets/ChowLinTest.java"}, "test_case": {"identifier": "testChowLin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChowLin() {\n        ChowLin cl = new ChowLin();\n        TsData Y = Data.Y;\n        TsData Q = Data.Q;\n \n        TsVariableList vars = new TsVariableList();\n        vars.add(new TsVariable(Q));\n\n        cl.setConstant(true);\n        cl.process(Y, vars);\n\n//        System.out.println();\n//        System.out.println(\"1\");\n//        System.out.println(cl.getRho());\n//        System.out.println(cl.getDisaggregatedSeries());\n    }", "signature": "void testChowLin()", "full_signature": "@Test public void testChowLin()", "class_method_signature": "ChowLinTest.testChowLin()", "testcase": true, "constructor": false, "invocations": ["add", "setConstant", "process"]}, "focal_class": {"identifier": "ChowLin", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TsData m_res;", "modifier": "private", "type": "TsData", "declarator": "m_res", "var_name": "m_res"}, {"original_string": "private TsData m_s, m_es;", "modifier": "private", "type": "TsData", "declarator": "m_s", "var_name": "m_s"}, {"original_string": "private TsAggregationType m_type = TsAggregationType.Sum;", "modifier": "private", "type": "TsAggregationType", "declarator": "m_type = TsAggregationType.Sum", "var_name": "m_type"}, {"original_string": "private boolean m_zinit;", "modifier": "private", "type": "boolean", "declarator": "m_zinit", "var_name": "m_zinit"}, {"original_string": "private boolean m_diffuseregs;", "modifier": "private", "type": "boolean", "declarator": "m_diffuseregs", "var_name": "m_diffuseregs"}, {"original_string": "private boolean ml_ = true;", "modifier": "private", "type": "boolean", "declarator": "ml_ = true", "var_name": "ml_"}, {"original_string": "private boolean const_ = true, trend_;", "modifier": "private", "type": "boolean", "declarator": "const_ = true", "var_name": "const_"}, {"original_string": "private DiffuseConcentratedLikelihood ll_;", "modifier": "private", "type": "DiffuseConcentratedLikelihood", "declarator": "ll_", "var_name": "ll_"}, {"original_string": "private double rho_, stdeRho_;", "modifier": "private", "type": "double", "declarator": "rho_", "var_name": "rho_"}, {"original_string": "private double eps_ = 1e-9;", "modifier": "private", "type": "double", "declarator": "eps_ = 1e-9", "var_name": "eps_"}, {"original_string": "private IFunction fn_;", "modifier": "private", "type": "IFunction", "declarator": "fn_", "var_name": "fn_"}], "methods": [{"identifier": "ChowLin", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChowLin()", "full_signature": "public  ChowLin()", "class_method_signature": "ChowLin.ChowLin()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(TsData y, TsFrequency freq, int nfcasts)", "modifiers": "public", "return": "boolean", "signature": "boolean process(TsData y, TsFrequency freq, int nfcasts)", "full_signature": "public boolean process(TsData y, TsFrequency freq, int nfcasts)", "class_method_signature": "ChowLin.process(TsData y, TsFrequency freq, int nfcasts)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(TsData y, TsVariableList x)", "modifiers": "public", "return": "boolean", "signature": "boolean process(TsData y, TsVariableList x)", "full_signature": "public boolean process(TsData y, TsVariableList x)", "class_method_signature": "ChowLin.process(TsData y, TsVariableList x)", "testcase": false, "constructor": false}, {"identifier": "analyse", "parameters": "(TsDisaggregation<SsfAr1> disagg)", "modifiers": "private", "return": "void", "signature": "void analyse(TsDisaggregation<SsfAr1> disagg)", "full_signature": "private void analyse(TsDisaggregation<SsfAr1> disagg)", "class_method_signature": "ChowLin.analyse(TsDisaggregation<SsfAr1> disagg)", "testcase": false, "constructor": false}, {"identifier": "algorithm", "parameters": "()", "modifiers": "private", "return": "TsDisaggregation<SsfAr1>", "signature": "TsDisaggregation<SsfAr1> algorithm()", "full_signature": "private TsDisaggregation<SsfAr1> algorithm()", "class_method_signature": "ChowLin.algorithm()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "ChowLin.clear()", "testcase": false, "constructor": false}, {"identifier": "isConstant", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConstant()", "full_signature": "public boolean isConstant()", "class_method_signature": "ChowLin.isConstant()", "testcase": false, "constructor": false}, {"identifier": "setConstant", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setConstant(boolean value)", "full_signature": "public void setConstant(boolean value)", "class_method_signature": "ChowLin.setConstant(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isTrend", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTrend()", "full_signature": "public boolean isTrend()", "class_method_signature": "ChowLin.isTrend()", "testcase": false, "constructor": false}, {"identifier": "setTrend", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setTrend(boolean value)", "full_signature": "public void setTrend(boolean value)", "class_method_signature": "ChowLin.setTrend(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getPrecision", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPrecision()", "full_signature": "public double getPrecision()", "class_method_signature": "ChowLin.getPrecision()", "testcase": false, "constructor": false}, {"identifier": "setPrecision", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setPrecision(double value)", "full_signature": "public void setPrecision(double value)", "class_method_signature": "ChowLin.setPrecision(double value)", "testcase": false, "constructor": false}, {"identifier": "isMaximumLikelihood", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMaximumLikelihood()", "full_signature": "public boolean isMaximumLikelihood()", "class_method_signature": "ChowLin.isMaximumLikelihood()", "testcase": false, "constructor": false}, {"identifier": "setMaximumLikelihood", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setMaximumLikelihood(boolean value)", "full_signature": "public void setMaximumLikelihood(boolean value)", "class_method_signature": "ChowLin.setMaximumLikelihood(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getAggregationType", "parameters": "()", "modifiers": "public", "return": "TsAggregationType", "signature": "TsAggregationType getAggregationType()", "full_signature": "public TsAggregationType getAggregationType()", "class_method_signature": "ChowLin.getAggregationType()", "testcase": false, "constructor": false}, {"identifier": "setAggregationType", "parameters": "(TsAggregationType value)", "modifiers": "public", "return": "void", "signature": "void setAggregationType(TsAggregationType value)", "full_signature": "public void setAggregationType(TsAggregationType value)", "class_method_signature": "ChowLin.setAggregationType(TsAggregationType value)", "testcase": false, "constructor": false}, {"identifier": "isZeroInitialization", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZeroInitialization()", "full_signature": "public boolean isZeroInitialization()", "class_method_signature": "ChowLin.isZeroInitialization()", "testcase": false, "constructor": false}, {"identifier": "setZeroInitialization", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setZeroInitialization(boolean value)", "full_signature": "public void setZeroInitialization(boolean value)", "class_method_signature": "ChowLin.setZeroInitialization(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isDiffuseRegressionCoefficients", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDiffuseRegressionCoefficients()", "full_signature": "public boolean isDiffuseRegressionCoefficients()", "class_method_signature": "ChowLin.isDiffuseRegressionCoefficients()", "testcase": false, "constructor": false}, {"identifier": "setDiffuseRegressionCoefficients", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setDiffuseRegressionCoefficients(boolean value)", "full_signature": "public void setDiffuseRegressionCoefficients(boolean value)", "class_method_signature": "ChowLin.setDiffuseRegressionCoefficients(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getRho", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRho()", "full_signature": "public double getRho()", "class_method_signature": "ChowLin.getRho()", "testcase": false, "constructor": false}, {"identifier": "getRhoStde", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRhoStde()", "full_signature": "public double getRhoStde()", "class_method_signature": "ChowLin.getRhoStde()", "testcase": false, "constructor": false}, {"identifier": "getLikelihoodStatistics", "parameters": "()", "modifiers": "public", "return": "LikelihoodStatistics", "signature": "LikelihoodStatistics getLikelihoodStatistics()", "full_signature": "public LikelihoodStatistics getLikelihoodStatistics()", "class_method_signature": "ChowLin.getLikelihoodStatistics()", "testcase": false, "constructor": false}, {"identifier": "getResiduals", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData getResiduals()", "full_signature": "public TsData getResiduals()", "class_method_signature": "ChowLin.getResiduals()", "testcase": false, "constructor": false}, {"identifier": "getLikelihood", "parameters": "()", "modifiers": "public", "return": "DiffuseConcentratedLikelihood", "signature": "DiffuseConcentratedLikelihood getLikelihood()", "full_signature": "public DiffuseConcentratedLikelihood getLikelihood()", "class_method_signature": "ChowLin.getLikelihood()", "testcase": false, "constructor": false}, {"identifier": "getLikelihoodFunction", "parameters": "()", "modifiers": "public", "return": "IFunction", "signature": "IFunction getLikelihoodFunction()", "full_signature": "public IFunction getLikelihoodFunction()", "class_method_signature": "ChowLin.getLikelihoodFunction()", "testcase": false, "constructor": false}, {"identifier": "getDisaggregatedSeries", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData getDisaggregatedSeries()", "full_signature": "public TsData getDisaggregatedSeries()", "class_method_signature": "ChowLin.getDisaggregatedSeries()", "testcase": false, "constructor": false}, {"identifier": "getDisaggregatedSeriesStde", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData getDisaggregatedSeriesStde()", "full_signature": "public TsData getDisaggregatedSeriesStde()", "class_method_signature": "ChowLin.getDisaggregatedSeriesStde()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/benchmarking/simplets/ChowLin.java"}, "focal_method": {"identifier": "ChowLin", "parameters": "()", "modifiers": "public", "return": "", "body": "public ChowLin() {\n    }", "signature": " ChowLin()", "full_signature": "public  ChowLin()", "class_method_signature": "ChowLin.ChowLin()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}