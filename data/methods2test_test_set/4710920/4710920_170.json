{"test_class": {"identifier": "InvokerInvocationHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Invoker<?> invoker;", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private InvokerInvocationHandler invokerInvocationHandler;", "modifier": "private", "type": "InvokerInvocationHandler", "declarator": "invokerInvocationHandler", "var_name": "invokerInvocationHandler"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandlerTest.java"}, "test_case": {"identifier": "testInvokeToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeToString() throws Throwable {\n        String methodName = \"toString\";\n\n        when(invoker.toString()).thenReturn(methodName);\n        Method method = invoker.getClass().getMethod(methodName);\n\n        Object result = invokerInvocationHandler.invoke(null, method, new Object[]{});\n        Assertions.assertEquals(methodName, result);\n    }", "signature": "void testInvokeToString()", "full_signature": "@Test public void testInvokeToString()", "class_method_signature": "InvokerInvocationHandlerTest.testInvokeToString()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "toString", "getMethod", "getClass", "invoke", "assertEquals"]}, "focal_class": {"identifier": "InvokerInvocationHandler", "superclass": "", "interfaces": "implements InvocationHandler", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(InvokerInvocationHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(InvokerInvocationHandler.class)", "var_name": "logger"}, {"original_string": "private final Invoker<?> invoker;", "modifier": "private final", "type": "Invoker<?>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private ConsumerModel consumerModel;", "modifier": "private", "type": "ConsumerModel", "declarator": "consumerModel", "var_name": "consumerModel"}, {"original_string": "private URL url;", "modifier": "private", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private String protocolServiceKey;", "modifier": "private", "type": "String", "declarator": "protocolServiceKey", "var_name": "protocolServiceKey"}], "methods": [{"identifier": "InvokerInvocationHandler", "parameters": "(Invoker<?> handler)", "modifiers": "public", "return": "", "signature": " InvokerInvocationHandler(Invoker<?> handler)", "full_signature": "public  InvokerInvocationHandler(Invoker<?> handler)", "class_method_signature": "InvokerInvocationHandler.InvokerInvocationHandler(Invoker<?> handler)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "InvokerInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/proxy/InvokerInvocationHandler.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object proxy, Method method, Object[] args)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getDeclaringClass() == Object.class) {\n            return method.invoke(invoker, args);\n        }\n        String methodName = method.getName();\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        if (parameterTypes.length == 0) {\n            if (\"toString\".equals(methodName)) {\n                return invoker.toString();\n            } else if (\"$destroy\".equals(methodName)) {\n                invoker.destroy();\n                return null;\n            } else if (\"hashCode\".equals(methodName)) {\n                return invoker.hashCode();\n            }\n        } else if (parameterTypes.length == 1 && \"equals\".equals(methodName)) {\n            return invoker.equals(args[0]);\n        }\n        RpcInvocation rpcInvocation = new RpcInvocation(method, invoker.getInterface().getName(), protocolServiceKey, args);\n        String serviceKey = invoker.getUrl().getServiceKey();\n        rpcInvocation.setTargetServiceUniqueName(serviceKey);\n\n        // invoker.getUrl() returns consumer url.\n        RpcContext.setRpcContext(invoker.getUrl());\n\n        if (consumerModel != null) {\n            rpcInvocation.put(Constants.CONSUMER_MODEL, consumerModel);\n            rpcInvocation.put(Constants.METHOD_MODEL, consumerModel.getMethodModel(method));\n        }\n\n        return invoker.invoke(rpcInvocation).recreate();\n    }", "signature": "Object invoke(Object proxy, Method method, Object[] args)", "full_signature": "@Override public Object invoke(Object proxy, Method method, Object[] args)", "class_method_signature": "InvokerInvocationHandler.invoke(Object proxy, Method method, Object[] args)", "testcase": false, "constructor": false, "invocations": ["getDeclaringClass", "invoke", "getName", "getParameterTypes", "equals", "toString", "equals", "destroy", "equals", "hashCode", "equals", "equals", "getName", "getInterface", "getServiceKey", "getUrl", "setTargetServiceUniqueName", "setRpcContext", "getUrl", "put", "put", "getMethodModel", "recreate", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}