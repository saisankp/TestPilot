{"test_class": {"identifier": "TemperatureTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static double DELTA = 0.001;", "modifier": "private final static", "type": "double", "declarator": "DELTA = 0.001", "var_name": "DELTA"}], "file": "server/src/test/java/org/jvalue/ods/processor/adapter/domain/weather/models/TemperatureTest.java"}, "test_case": {"identifier": "testFromKelvin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFromKelvin() {\n\t\tTemperature celsiusL = Temperature.fromKelvin(273.15, TemperatureType.CELSIUS);\n\t\tTemperature celsiusM = Temperature.fromKelvin(300, TemperatureType.CELSIUS);\n\t\tTemperature celsiusH = Temperature.fromKelvin(773.15, TemperatureType.CELSIUS);\n\n\t\tTemperature fahrenheitL = Temperature.fromKelvin(273.15, TemperatureType.FAHRENHEIT);\n\t\tTemperature fahrenheitM = Temperature.fromKelvin(300, TemperatureType.FAHRENHEIT);\n\t\tTemperature fahrenheitH = Temperature.fromKelvin(773.15, TemperatureType.FAHRENHEIT);\n\n\t\tAssert.assertEquals(0, celsiusL.getValue(), DELTA);\n\t\tAssert.assertEquals(26.85, celsiusM.getValue(), DELTA);\n\t\tAssert.assertEquals(500, celsiusH.getValue(), DELTA);\n\n\t\tAssert.assertEquals(32, fahrenheitL.getValue(), DELTA);\n\t\tAssert.assertEquals(80.33, fahrenheitM.getValue(), DELTA);\n\t\tAssert.assertEquals(932, fahrenheitH.getValue(), DELTA);\n\t}", "signature": "void testFromKelvin()", "full_signature": "@Test public void testFromKelvin()", "class_method_signature": "TemperatureTest.testFromKelvin()", "testcase": true, "constructor": false, "invocations": ["fromKelvin", "fromKelvin", "fromKelvin", "fromKelvin", "fromKelvin", "fromKelvin", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Temperature", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double value;", "modifier": "private final", "type": "double", "declarator": "value", "var_name": "value"}, {"original_string": "private final TemperatureType type;", "modifier": "private final", "type": "TemperatureType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "Temperature", "parameters": "(\n\t\t@JsonProperty(\"value\") double value,\n\t\t@JsonProperty(\"type\") TemperatureType type)", "modifiers": "@JsonCreator public", "return": "", "signature": " Temperature(\n\t\t@JsonProperty(\"value\") double value,\n\t\t@JsonProperty(\"type\") TemperatureType type)", "full_signature": "@JsonCreator public  Temperature(\n\t\t@JsonProperty(\"value\") double value,\n\t\t@JsonProperty(\"type\") TemperatureType type)", "class_method_signature": "Temperature.Temperature(\n\t\t@JsonProperty(\"value\") double value,\n\t\t@JsonProperty(\"type\") TemperatureType type)", "testcase": false, "constructor": true}, {"identifier": "fromKelvin", "parameters": "(double value, TemperatureType type)", "modifiers": "public static", "return": "Temperature", "signature": "Temperature fromKelvin(double value, TemperatureType type)", "full_signature": "public static Temperature fromKelvin(double value, TemperatureType type)", "class_method_signature": "Temperature.fromKelvin(double value, TemperatureType type)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getValue()", "full_signature": "public double getValue()", "class_method_signature": "Temperature.getValue()", "testcase": false, "constructor": false}, {"identifier": "getValueInKelvin", "parameters": "()", "modifiers": "@JsonIgnore public", "return": "double", "signature": "double getValueInKelvin()", "full_signature": "@JsonIgnore public double getValueInKelvin()", "class_method_signature": "Temperature.getValueInKelvin()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "TemperatureType", "signature": "TemperatureType getType()", "full_signature": "public TemperatureType getType()", "class_method_signature": "Temperature.getType()", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double rawValue)", "modifiers": "private static", "return": "double", "signature": "double round(double rawValue)", "full_signature": "private static double round(double rawValue)", "class_method_signature": "Temperature.round(double rawValue)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Temperature.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Temperature.hashCode()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/processor/adapter/domain/weather/models/Temperature.java"}, "focal_method": {"identifier": "fromKelvin", "parameters": "(double value, TemperatureType type)", "modifiers": "public static", "return": "Temperature", "body": "public static Temperature fromKelvin(double value, TemperatureType type) {\n\t\treturn new Temperature(round(type.fromKelvin(value)), type);\n\t}", "signature": "Temperature fromKelvin(double value, TemperatureType type)", "full_signature": "public static Temperature fromKelvin(double value, TemperatureType type)", "class_method_signature": "Temperature.fromKelvin(double value, TemperatureType type)", "testcase": false, "constructor": false, "invocations": ["round", "fromKelvin"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}