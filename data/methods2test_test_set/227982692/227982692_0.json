{"test_class": {"identifier": "SchedulerServiceTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SchedulerService schedulerService;", "modifier": "@Autowired\n    private", "type": "SchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "@Autowired\n    private EmailServiceClient emailServiceClient;", "modifier": "@Autowired\n    private", "type": "EmailServiceClient", "declarator": "emailServiceClient", "var_name": "emailServiceClient"}], "file": "services/task-server/src/test/java/com/opencloud/task/server/service/SchedulerServiceTest.java"}, "test_case": {"identifier": "getJobList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getJobList() {\n        List<TaskInfo> list = schedulerService.getJobList();\n    }", "signature": "void getJobList()", "full_signature": "@Test public void getJobList()", "class_method_signature": "SchedulerServiceTest.getJobList()", "testcase": true, "constructor": false, "invocations": ["getJobList"]}, "focal_class": {"identifier": "SchedulerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Scheduler scheduler;", "modifier": "@Autowired\n    private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "getJobGroupNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getJobGroupNames()", "full_signature": "public List<String> getJobGroupNames()", "class_method_signature": "SchedulerService.getJobGroupNames()", "testcase": false, "constructor": false}, {"identifier": "getJobList", "parameters": "()", "modifiers": "public", "return": "List<TaskInfo>", "signature": "List<TaskInfo> getJobList()", "full_signature": "public List<TaskInfo> getJobList()", "class_method_signature": "SchedulerService.getJobList()", "testcase": false, "constructor": false}, {"identifier": "addSimpleJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void addSimpleJob(TaskInfo info)", "full_signature": "public void addSimpleJob(TaskInfo info)", "class_method_signature": "SchedulerService.addSimpleJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "addCronJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void addCronJob(TaskInfo info)", "full_signature": "public void addCronJob(TaskInfo info)", "class_method_signature": "SchedulerService.addCronJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "editSimpleJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void editSimpleJob(TaskInfo info)", "full_signature": "public void editSimpleJob(TaskInfo info)", "class_method_signature": "SchedulerService.editSimpleJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "editCronJob", "parameters": "(TaskInfo info)", "modifiers": "public", "return": "void", "signature": "void editCronJob(TaskInfo info)", "full_signature": "public void editCronJob(TaskInfo info)", "class_method_signature": "SchedulerService.editCronJob(TaskInfo info)", "testcase": false, "constructor": false}, {"identifier": "deleteJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void deleteJob(String jobName, String jobGroup)", "full_signature": "public void deleteJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.deleteJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "pauseJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void pauseJob(String jobName, String jobGroup)", "full_signature": "public void pauseJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.pauseJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "resumeJob", "parameters": "(String jobName, String jobGroup)", "modifiers": "public", "return": "void", "signature": "void resumeJob(String jobName, String jobGroup)", "full_signature": "public void resumeJob(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.resumeJob(String jobName, String jobGroup)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String jobName, String jobGroup)", "modifiers": "private", "return": "boolean", "signature": "boolean checkExists(String jobName, String jobGroup)", "full_signature": "private boolean checkExists(String jobName, String jobGroup)", "class_method_signature": "SchedulerService.checkExists(String jobName, String jobGroup)", "testcase": false, "constructor": false}], "file": "services/task-server/src/main/java/com/opencloud/task/server/service/SchedulerService.java"}, "focal_method": {"identifier": "getJobList", "parameters": "()", "modifiers": "public", "return": "List<TaskInfo>", "body": "public List<TaskInfo> getJobList() {\n        List<TaskInfo> list = new ArrayList<>();\n        try {\n            for (String groupJob : getJobGroupNames()) {\n                for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.<JobKey>groupEquals(groupJob))) {\n                    List<? extends Trigger> triggers = scheduler.getTriggersOfJob(jobKey);\n                    for (Trigger trigger : triggers) {\n                        Trigger.TriggerState triggerState = scheduler.getTriggerState(trigger.getKey());\n                        JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n                        String cronExpression = \"\";\n                        Date createTime = null;\n                        Long repeatInterval = 0L;\n                        Integer repeatCount = 0;\n                        Date startDate = null;\n                        Date endDate = null;\n                        if (trigger instanceof CronTrigger) {\n                            CronTrigger cronTrigger = (CronTrigger) trigger;\n                            cronExpression = cronTrigger.getCronExpression();\n                        } else if (trigger instanceof SimpleTrigger) {\n                            SimpleTrigger simpleTrigger = (SimpleTrigger) trigger;\n                            repeatInterval = simpleTrigger.getRepeatInterval();\n                            repeatCount = simpleTrigger.getRepeatCount();\n                            startDate = simpleTrigger.getStartTime();\n                            endDate = simpleTrigger.getEndTime();\n                        }\n                        TaskInfo info = new TaskInfo();\n                        info.setData(jobDetail.getJobDataMap());\n                        info.setJobName(jobKey.getName());\n                        info.setJobTrigger(trigger.getClass().getName());\n                        info.setJobGroupName(jobKey.getGroup());\n                        info.setJobClassName(jobDetail.getJobClass().getName());\n                        info.setJobDescription(jobDetail.getDescription());\n                        info.setJobStatus(triggerState.name());\n                        info.setCronExpression(cronExpression);\n                        info.setCreateTime(createTime);\n                        info.setRepeatInterval(repeatInterval);\n                        info.setRepeatCount(repeatCount);\n                        info.setStartDate(startDate);\n                        info.setEndDate(endDate);\n                        list.add(info);\n                    }\n                }\n            }\n        } catch (SchedulerException e) {\n            e.printStackTrace();\n        }\n        return list;\n    }", "signature": "List<TaskInfo> getJobList()", "full_signature": "public List<TaskInfo> getJobList()", "class_method_signature": "SchedulerService.getJobList()", "testcase": false, "constructor": false, "invocations": ["getJobGroupNames", "getJobKeys", "groupEquals", "getTriggersOfJob", "getTriggerState", "getKey", "getJobDetail", "getCronExpression", "getRepeatInterval", "getRepeatCount", "getStartTime", "getEndTime", "setData", "getJobDataMap", "setJobName", "getName", "setJobTrigger", "getName", "getClass", "setJobGroupName", "getGroup", "setJobClassName", "getName", "getJobClass", "setJobDescription", "getDescription", "setJobStatus", "name", "setCronExpression", "setCreateTime", "setRepeatInterval", "setRepeatCount", "setStartDate", "setEndDate", "add", "printStackTrace"]}, "repository": {"repo_id": 227982692, "url": "https://github.com/uhonliu/open-platform", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 15471, "license": "licensed"}}