{"test_class": {"identifier": "ServiceFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PROXY_HOST = \"my.proxy.com\";", "modifier": "private static final", "type": "String", "declarator": "PROXY_HOST = \"my.proxy.com\"", "var_name": "PROXY_HOST"}, {"original_string": "private static final int PROXY_PORT = 4712;", "modifier": "private static final", "type": "int", "declarator": "PROXY_PORT = 4712", "var_name": "PROXY_PORT"}], "file": "core/model/src/test/java/org/eclipse/sw360/antenna/api/service/ServiceFactoryTest.java"}, "test_case": {"identifier": "testDefaultHttpClientFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDefaultHttpClientFactory() {\n        ServiceFactory factory = new ServiceFactory();\n\n        HttpClient httpClient = factory.createHttpClient(false, null, 0);\n        assertThat(httpClient.getClass().getSimpleName()).isEqualTo(\"HttpClientImpl\");\n    }", "signature": "void testDefaultHttpClientFactory()", "full_signature": "@Test public void testDefaultHttpClientFactory()", "class_method_signature": "ServiceFactoryTest.testDefaultHttpClientFactory()", "testcase": true, "constructor": false, "invocations": ["createHttpClient", "isEqualTo", "assertThat", "getSimpleName", "getClass"]}, "focal_class": {"identifier": "ServiceFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpClientFactory httpClientFactory;", "modifier": "private final", "type": "HttpClientFactory", "declarator": "httpClientFactory", "var_name": "httpClientFactory"}, {"original_string": "private final ConcurrentMap<ProxySettings, HttpClient> httpClients;", "modifier": "private final", "type": "ConcurrentMap<ProxySettings, HttpClient>", "declarator": "httpClients", "var_name": "httpClients"}], "methods": [{"identifier": "ServiceFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " ServiceFactory()", "full_signature": "public  ServiceFactory()", "class_method_signature": "ServiceFactory.ServiceFactory()", "testcase": false, "constructor": true}, {"identifier": "ServiceFactory", "parameters": "(HttpClientFactory httpClientFactory)", "modifiers": "", "return": "", "signature": " ServiceFactory(HttpClientFactory httpClientFactory)", "full_signature": "  ServiceFactory(HttpClientFactory httpClientFactory)", "class_method_signature": "ServiceFactory.ServiceFactory(HttpClientFactory httpClientFactory)", "testcase": false, "constructor": true}, {"identifier": "getObjectMapper", "parameters": "()", "modifiers": "public static", "return": "ObjectMapper", "signature": "ObjectMapper getObjectMapper()", "full_signature": "public static ObjectMapper getObjectMapper()", "class_method_signature": "ServiceFactory.getObjectMapper()", "testcase": false, "constructor": false}, {"identifier": "createHttpClient", "parameters": "(boolean useProxy, String proxyHost, int proxyPort)", "modifiers": "public", "return": "HttpClient", "signature": "HttpClient createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "full_signature": "public HttpClient createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "class_method_signature": "ServiceFactory.createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "testcase": false, "constructor": false}, {"identifier": "createHttpClient", "parameters": "(ProxySettings settings)", "modifiers": "private", "return": "HttpClient", "signature": "HttpClient createHttpClient(ProxySettings settings)", "full_signature": "private HttpClient createHttpClient(ProxySettings settings)", "class_method_signature": "ServiceFactory.createHttpClient(ProxySettings settings)", "testcase": false, "constructor": false}, {"identifier": "createHttpClientConfig", "parameters": "(ProxySettings settings)", "modifiers": "private static", "return": "HttpClientConfig", "signature": "HttpClientConfig createHttpClientConfig(ProxySettings settings)", "full_signature": "private static HttpClientConfig createHttpClientConfig(ProxySettings settings)", "class_method_signature": "ServiceFactory.createHttpClientConfig(ProxySettings settings)", "testcase": false, "constructor": false}], "file": "core/model/src/main/java/org/eclipse/sw360/antenna/api/service/ServiceFactory.java"}, "focal_method": {"identifier": "createHttpClient", "parameters": "(boolean useProxy, String proxyHost, int proxyPort)", "modifiers": "public", "return": "HttpClient", "body": "public HttpClient createHttpClient(boolean useProxy, String proxyHost, int proxyPort) {\n        ProxySettings proxySettings = ProxySettings.fromConfig(useProxy, proxyHost, proxyPort);\n        return httpClients.computeIfAbsent(proxySettings, this::createHttpClient);\n    }", "signature": "HttpClient createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "full_signature": "public HttpClient createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "class_method_signature": "ServiceFactory.createHttpClient(boolean useProxy, String proxyHost, int proxyPort)", "testcase": false, "constructor": false, "invocations": ["fromConfig", "computeIfAbsent"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}