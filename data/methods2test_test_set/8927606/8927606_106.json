{"test_class": {"identifier": "WebServiceSenderTest", "superclass": "extends HttpSenderTestBase<WebServiceSender>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/http/WebServiceSenderTest.java"}, "test_case": {"identifier": "simpleMockedWssMtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void simpleMockedWssMtom() throws Throwable {\n\t\tWebServiceSender sender = getSender();\n\t\tMessage input = new Message(\"<xml>input</xml>\");\n\n\t\ttry {\n\t\t\tIPipeLineSession pls = new PipeLineSessionBase(session);\n\n\t\t\tsender.setMethodType(\"POST\");\n\t\t\tsender.setParamsInUrl(false);\n\t\t\tsender.setInputMessageParam(\"request\");\n\n\t\t\tString xmlMultipart = \"<parts><part type=\\\"file\\\" name=\\\"document.pdf\\\" \"\n\t\t\t\t\t+ \"sessionKey=\\\"part_file\\\" size=\\\"72833\\\" \"\n\t\t\t\t\t+ \"mimeType=\\\"application/pdf\\\"/></parts>\";\n\t\t\tpls.put(\"multipartXml\", xmlMultipart);\n\t\t\tpls.put(\"part_file\", new ByteArrayInputStream(\"<dummy xml file/>\".getBytes()));\n\n\t\t\tsender.setMtomEnabled(true);\n\t\t\tsender.setMultipartXmlSessionKey(\"multipartXml\");\n\n\t\t\tsender.configure();\n\t\t\tsender.open();\n\n\t\t\tString result = sender.sendMessage(input, pls).asString();\n\t\t\tassertEquals(getFile(\"simpleMockedWssMtom.txt\"), result.trim());\n\t\t} catch (SenderException e) {\n\t\t\tthrow e.getCause();\n\t\t}\n\t}", "signature": "void simpleMockedWssMtom()", "full_signature": "@Test public void simpleMockedWssMtom()", "class_method_signature": "WebServiceSenderTest.simpleMockedWssMtom()", "testcase": true, "constructor": false, "invocations": ["getSender", "setMethodType", "setParamsInUrl", "setInputMessageParam", "put", "put", "getBytes", "setMtomEnabled", "setMultipartXmlSessionKey", "configure", "open", "asString", "sendMessage", "assertEquals", "getFile", "trim", "getCause"]}, "focal_class": {"identifier": "WebServiceSender", "superclass": "extends HttpSender", "interfaces": "", "fields": [{"original_string": "private boolean soap = true;", "modifier": "private", "type": "boolean", "declarator": "soap = true", "var_name": "soap"}, {"original_string": "private String soapAction = \"\";", "modifier": "private", "type": "String", "declarator": "soapAction = \"\"", "var_name": "soapAction"}, {"original_string": "private String soapActionParam = \"soapAction\";", "modifier": "private", "type": "String", "declarator": "soapActionParam = \"soapAction\"", "var_name": "soapActionParam"}, {"original_string": "private String encodingStyle=null;", "modifier": "private", "type": "String", "declarator": "encodingStyle=null", "var_name": "encodingStyle"}, {"original_string": "private String serviceNamespace=null;", "modifier": "private", "type": "String", "declarator": "serviceNamespace=null", "var_name": "serviceNamespace"}, {"original_string": "private String serviceNamespaceParam=\"serviceNamespace\";", "modifier": "private", "type": "String", "declarator": "serviceNamespaceParam=\"serviceNamespace\"", "var_name": "serviceNamespaceParam"}, {"original_string": "private String namespaceDefs = null;", "modifier": "private", "type": "String", "declarator": "namespaceDefs = null", "var_name": "namespaceDefs"}, {"original_string": "private boolean throwApplicationFaults=true;", "modifier": "private", "type": "boolean", "declarator": "throwApplicationFaults=true", "var_name": "throwApplicationFaults"}, {"original_string": "private String wssAuthAlias;", "modifier": "private", "type": "String", "declarator": "wssAuthAlias", "var_name": "wssAuthAlias"}, {"original_string": "private String wssUserName;", "modifier": "private", "type": "String", "declarator": "wssUserName", "var_name": "wssUserName"}, {"original_string": "private String wssPassword;", "modifier": "private", "type": "String", "declarator": "wssPassword", "var_name": "wssPassword"}, {"original_string": "private boolean wssPasswordDigest = true;", "modifier": "private", "type": "boolean", "declarator": "wssPasswordDigest = true", "var_name": "wssPasswordDigest"}, {"original_string": "private SoapWrapper soapWrapper;", "modifier": "private", "type": "SoapWrapper", "declarator": "soapWrapper", "var_name": "soapWrapper"}, {"original_string": "private CredentialFactory wsscf=null;", "modifier": "private", "type": "CredentialFactory", "declarator": "wsscf=null", "var_name": "wsscf"}, {"original_string": "private Parameter soapActionParameter;", "modifier": "private", "type": "Parameter", "declarator": "soapActionParameter", "var_name": "soapActionParameter"}, {"original_string": "private Parameter serviceNamespaceURIParameter;", "modifier": "private", "type": "Parameter", "declarator": "serviceNamespaceURIParameter", "var_name": "serviceNamespaceURIParameter"}], "methods": [{"identifier": "WebServiceSender", "parameters": "()", "modifiers": "public", "return": "", "signature": " WebServiceSender()", "full_signature": "public  WebServiceSender()", "class_method_signature": "WebServiceSender.WebServiceSender()", "testcase": false, "constructor": true}, {"identifier": "getLogPrefix", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLogPrefix()", "full_signature": "@Override public String getLogPrefix()", "class_method_signature": "WebServiceSender.getLogPrefix()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "WebServiceSender.configure()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "modifiers": "@Override protected", "return": "HttpRequestBase", "signature": "HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "full_signature": "@Override protected HttpRequestBase getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "class_method_signature": "WebServiceSender.getMethod(URI uri, Message message, ParameterValueList parameters, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "extractResult", "parameters": "(HttpResponseHandler responseHandler, IPipeLineSession session)", "modifiers": "@Override protected", "return": "Message", "signature": "Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "full_signature": "@Override protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "class_method_signature": "WebServiceSender.extractResult(HttpResponseHandler responseHandler, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setSoap", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when <code>true</code>, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline)\", \"<code>true</code>\"}) public", "return": "void", "signature": "void setSoap(boolean b)", "full_signature": "@IbisDoc({\"when <code>true</code>, messages sent are put in a soap envelope and the soap envelope is removed from received messages (soap envelope will not be visible to the pipeline)\", \"<code>true</code>\"}) public void setSoap(boolean b)", "class_method_signature": "WebServiceSender.setSoap(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isSoap", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSoap()", "full_signature": "public boolean isSoap()", "class_method_signature": "WebServiceSender.isSoap()", "testcase": false, "constructor": false}, {"identifier": "setSoapActionURI", "parameters": "(String soapAction)", "modifiers": "@Deprecated @ConfigurationWarning(\"the attribute 'soapActionURI' has been renamed to 'soapAction'\") public", "return": "void", "signature": "void setSoapActionURI(String soapAction)", "full_signature": "@Deprecated @ConfigurationWarning(\"the attribute 'soapActionURI' has been renamed to 'soapAction'\") public void setSoapActionURI(String soapAction)", "class_method_signature": "WebServiceSender.setSoapActionURI(String soapAction)", "testcase": false, "constructor": false}, {"identifier": "setSoapActionURIParam", "parameters": "(String soapActionParam)", "modifiers": "@Deprecated @ConfigurationWarning(\"the attribute 'soapActionURIParam' has been renamed to 'soapActionParam'\") public", "return": "void", "signature": "void setSoapActionURIParam(String soapActionParam)", "full_signature": "@Deprecated @ConfigurationWarning(\"the attribute 'soapActionURIParam' has been renamed to 'soapActionParam'\") public void setSoapActionURIParam(String soapActionParam)", "class_method_signature": "WebServiceSender.setSoapActionURIParam(String soapActionParam)", "testcase": false, "constructor": false}, {"identifier": "getSoapAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapAction()", "full_signature": "public String getSoapAction()", "class_method_signature": "WebServiceSender.getSoapAction()", "testcase": false, "constructor": false}, {"identifier": "setSoapAction", "parameters": "(String soapAction)", "modifiers": "@IbisDoc({\"the soapactionuri to be set in the requestheader\", \"\"}) public", "return": "void", "signature": "void setSoapAction(String soapAction)", "full_signature": "@IbisDoc({\"the soapactionuri to be set in the requestheader\", \"\"}) public void setSoapAction(String soapAction)", "class_method_signature": "WebServiceSender.setSoapAction(String soapAction)", "testcase": false, "constructor": false}, {"identifier": "getSoapActionParam", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapActionParam()", "full_signature": "public String getSoapActionParam()", "class_method_signature": "WebServiceSender.getSoapActionParam()", "testcase": false, "constructor": false}, {"identifier": "setSoapActionParam", "parameters": "(String soapActionParam)", "modifiers": "@IbisDoc({\"parameter to obtain the soapactionuri\", \"\"}) public", "return": "void", "signature": "void setSoapActionParam(String soapActionParam)", "full_signature": "@IbisDoc({\"parameter to obtain the soapactionuri\", \"\"}) public void setSoapActionParam(String soapActionParam)", "class_method_signature": "WebServiceSender.setSoapActionParam(String soapActionParam)", "testcase": false, "constructor": false}, {"identifier": "setEncodingStyleURI", "parameters": "(String encodingStyle)", "modifiers": "@Deprecated @ConfigurationWarning(\"the attribute 'encodingStyleURI' has been renamed to 'encodingStyle'\") public", "return": "void", "signature": "void setEncodingStyleURI(String encodingStyle)", "full_signature": "@Deprecated @ConfigurationWarning(\"the attribute 'encodingStyleURI' has been renamed to 'encodingStyle'\") public void setEncodingStyleURI(String encodingStyle)", "class_method_signature": "WebServiceSender.setEncodingStyleURI(String encodingStyle)", "testcase": false, "constructor": false}, {"identifier": "setEncodingStyle", "parameters": "(String encodingStyle)", "modifiers": "@IbisDoc({\"the encodingstyle to be set in the messageheader\", \"\"}) public", "return": "void", "signature": "void setEncodingStyle(String encodingStyle)", "full_signature": "@IbisDoc({\"the encodingstyle to be set in the messageheader\", \"\"}) public void setEncodingStyle(String encodingStyle)", "class_method_signature": "WebServiceSender.setEncodingStyle(String encodingStyle)", "testcase": false, "constructor": false}, {"identifier": "getEncodingStyle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncodingStyle()", "full_signature": "public String getEncodingStyle()", "class_method_signature": "WebServiceSender.getEncodingStyle()", "testcase": false, "constructor": false}, {"identifier": "setThrowApplicationFaults", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages\", \"true\"}) public", "return": "void", "signature": "void setThrowApplicationFaults(boolean b)", "full_signature": "@IbisDoc({\"controls whether soap faults generated by the application generate an exception, or are treated as 'normal' messages\", \"true\"}) public void setThrowApplicationFaults(boolean b)", "class_method_signature": "WebServiceSender.setThrowApplicationFaults(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isThrowApplicationFaults", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isThrowApplicationFaults()", "full_signature": "public boolean isThrowApplicationFaults()", "class_method_signature": "WebServiceSender.isThrowApplicationFaults()", "testcase": false, "constructor": false}, {"identifier": "setServiceNamespaceURI", "parameters": "(String serviceNamespace)", "modifiers": "@Deprecated @ConfigurationWarning(\"the attribute 'serviceNamespaceURI' has been renamed to 'serviceNamespace'\") public", "return": "void", "signature": "void setServiceNamespaceURI(String serviceNamespace)", "full_signature": "@Deprecated @ConfigurationWarning(\"the attribute 'serviceNamespaceURI' has been renamed to 'serviceNamespace'\") public void setServiceNamespaceURI(String serviceNamespace)", "class_method_signature": "WebServiceSender.setServiceNamespaceURI(String serviceNamespace)", "testcase": false, "constructor": false}, {"identifier": "setServiceNamespace", "parameters": "(String serviceNamespace)", "modifiers": "@IbisDoc({\"the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent\", \"\"}) public", "return": "void", "signature": "void setServiceNamespace(String serviceNamespace)", "full_signature": "@IbisDoc({\"the namespace of the message sent. identifies the service to be called. may be overriden by an actual namespace setting in the message to be sent\", \"\"}) public void setServiceNamespace(String serviceNamespace)", "class_method_signature": "WebServiceSender.setServiceNamespace(String serviceNamespace)", "testcase": false, "constructor": false}, {"identifier": "getServiceNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceNamespace()", "full_signature": "public String getServiceNamespace()", "class_method_signature": "WebServiceSender.getServiceNamespace()", "testcase": false, "constructor": false}, {"identifier": "setServiceNamespaceURIParam", "parameters": "(String serviceNamespaceParam)", "modifiers": "@Deprecated @ConfigurationWarning(\"the attribute 'serviceNamespaceURIParam' has been renamed to 'serviceNamespaceParam'\") public", "return": "void", "signature": "void setServiceNamespaceURIParam(String serviceNamespaceParam)", "full_signature": "@Deprecated @ConfigurationWarning(\"the attribute 'serviceNamespaceURIParam' has been renamed to 'serviceNamespaceParam'\") public void setServiceNamespaceURIParam(String serviceNamespaceParam)", "class_method_signature": "WebServiceSender.setServiceNamespaceURIParam(String serviceNamespaceParam)", "testcase": false, "constructor": false}, {"identifier": "setServiceNamespaceParam", "parameters": "(String serviceNamespaceParam)", "modifiers": "@IbisDoc({\"parameter to obtain the servicenamespace\", \"\"}) public", "return": "void", "signature": "void setServiceNamespaceParam(String serviceNamespaceParam)", "full_signature": "@IbisDoc({\"parameter to obtain the servicenamespace\", \"\"}) public void setServiceNamespaceParam(String serviceNamespaceParam)", "class_method_signature": "WebServiceSender.setServiceNamespaceParam(String serviceNamespaceParam)", "testcase": false, "constructor": false}, {"identifier": "getServiceNamespaceParam", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceNamespaceParam()", "full_signature": "public String getServiceNamespaceParam()", "class_method_signature": "WebServiceSender.getServiceNamespaceParam()", "testcase": false, "constructor": false}, {"identifier": "setNamespaceDefs", "parameters": "(String namespaceDefs)", "modifiers": "@IbisDoc({\"namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions\", \"\"}) public", "return": "void", "signature": "void setNamespaceDefs(String namespaceDefs)", "full_signature": "@IbisDoc({\"namespace defintions to be added in the soap envelope tag. must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions\", \"\"}) public void setNamespaceDefs(String namespaceDefs)", "class_method_signature": "WebServiceSender.setNamespaceDefs(String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceDefs", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespaceDefs()", "full_signature": "public String getNamespaceDefs()", "class_method_signature": "WebServiceSender.getNamespaceDefs()", "testcase": false, "constructor": false}, {"identifier": "setWssUserName", "parameters": "(String string)", "modifiers": "@IbisDoc({\"\", \" \"}) public", "return": "void", "signature": "void setWssUserName(String string)", "full_signature": "@IbisDoc({\"\", \" \"}) public void setWssUserName(String string)", "class_method_signature": "WebServiceSender.setWssUserName(String string)", "testcase": false, "constructor": false}, {"identifier": "getWssUserName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWssUserName()", "full_signature": "public String getWssUserName()", "class_method_signature": "WebServiceSender.getWssUserName()", "testcase": false, "constructor": false}, {"identifier": "setWssPassword", "parameters": "(String string)", "modifiers": "@IbisDoc({\"\", \" \"}) public", "return": "void", "signature": "void setWssPassword(String string)", "full_signature": "@IbisDoc({\"\", \" \"}) public void setWssPassword(String string)", "class_method_signature": "WebServiceSender.setWssPassword(String string)", "testcase": false, "constructor": false}, {"identifier": "getWssPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWssPassword()", "full_signature": "public String getWssPassword()", "class_method_signature": "WebServiceSender.getWssPassword()", "testcase": false, "constructor": false}, {"identifier": "setWssAuthAlias", "parameters": "(String string)", "modifiers": "@IbisDoc({\"alias used to obtain credentials for authentication to web services security\", \"\"}) public", "return": "void", "signature": "void setWssAuthAlias(String string)", "full_signature": "@IbisDoc({\"alias used to obtain credentials for authentication to web services security\", \"\"}) public void setWssAuthAlias(String string)", "class_method_signature": "WebServiceSender.setWssAuthAlias(String string)", "testcase": false, "constructor": false}, {"identifier": "getWssAuthAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getWssAuthAlias()", "full_signature": "public String getWssAuthAlias()", "class_method_signature": "WebServiceSender.getWssAuthAlias()", "testcase": false, "constructor": false}, {"identifier": "setWssPasswordDigest", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when true, the password is sent digested. otherwise it is sent in clear text\", \"true\"}) public", "return": "void", "signature": "void setWssPasswordDigest(boolean b)", "full_signature": "@IbisDoc({\"when true, the password is sent digested. otherwise it is sent in clear text\", \"true\"}) public void setWssPasswordDigest(boolean b)", "class_method_signature": "WebServiceSender.setWssPasswordDigest(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isWssPasswordDigest", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isWssPasswordDigest()", "full_signature": "public boolean isWssPasswordDigest()", "class_method_signature": "WebServiceSender.isWssPasswordDigest()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/http/WebServiceSender.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\tsuper.configure();\n\n\t\tif (isSoap()) {\n\t\t\t//ConfigurationWarnings configWarnings = ConfigurationWarnings.getInstance();\n\t\t\t//String msg = getLogPrefix()+\"the use of attribute soap=true has been deprecated. Please change to SoapWrapperPipe\";\n\t\t\t//configWarnings.add(log, msg);\n\t\t}\n\t\tsoapWrapper = SoapWrapper.getInstance();\n\n\t\tif (paramList!=null && StringUtils.isNotEmpty(getSoapActionParam())) {\n\t\t\tsoapActionParameter=paramList.findParameter(getSoapActionParam());\n\t\t\tif(soapActionParameter != null)\n\t\t\t\taddParameterToSkip(soapActionParameter.getName());\n\t\t\tserviceNamespaceURIParameter=paramList.findParameter(getServiceNamespaceParam());\n\t\t\tif(serviceNamespaceURIParameter != null)\n\t\t\t\taddParameterToSkip(serviceNamespaceURIParameter.getName());\n\t\t}\n\n\t\tif (StringUtils.isNotEmpty(getWssAuthAlias()) || \n\t\t\tStringUtils.isNotEmpty(getWssUserName())) {\n\t\t\t\twsscf = new CredentialFactory(getWssAuthAlias(), getWssUserName(), getWssPassword());\n\t\t\tlog.debug(getLogPrefix()+\"created CredentialFactory for username=[\"+wsscf.getUsername()+\"]\");\n\t\t}\n\t}", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "WebServiceSender.configure()", "testcase": false, "constructor": false, "invocations": ["configure", "isSoap", "getInstance", "isNotEmpty", "getSoapActionParam", "findParameter", "getSoapActionParam", "addParameterToSkip", "getName", "findParameter", "getServiceNamespaceParam", "addParameterToSkip", "getName", "isNotEmpty", "getWssAuthAlias", "isNotEmpty", "getWssUserName", "getWssAuthAlias", "getWssUserName", "getWssPassword", "debug", "getLogPrefix", "getUsername"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}