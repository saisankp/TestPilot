{"test_class": {"identifier": "AppleScriptTest", "superclass": "", "interfaces": "", "fields": [], "file": "mucommander-os-macos/src/test/java/com/mucommander/ui/macos/AppleScriptTest.java"}, "test_case": {"identifier": "testScriptOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScriptOutput() {\n        StringBuilder output = new StringBuilder();\n        boolean success = AppleScript.execute(\"count {\\\"How\\\", \\\"many\\\", \\\"items\\\", \\\"in\\\", \\\"this\\\", \\\"list\\\"}\", output);\n\n        if(OsFamily.MAC_OS_X.isCurrent()) {\n            // Assert that the script was executed successfully and that the output matches what is expected\n            assert success;\n            assert \"6\".equals(output.toString());\n        }\n        else {\n            // We're not running Mac OS X, assert that execute returns false\n            assert !success;\n        }\n    }", "signature": "void testScriptOutput()", "full_signature": "@Test public void testScriptOutput()", "class_method_signature": "AppleScriptTest.testScriptOutput()", "testcase": true, "constructor": false, "invocations": ["execute", "isCurrent", "equals", "toString"]}, "focal_class": {"identifier": "AppleScript", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AppleScript.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AppleScript.class)", "var_name": "LOGGER"}, {"original_string": "public final static String UTF8 = \"UTF-8\";", "modifier": "public final static", "type": "String", "declarator": "UTF8 = \"UTF-8\"", "var_name": "UTF8"}, {"original_string": "public final static String MACROMAN = \"MacRoman\";", "modifier": "public final static", "type": "String", "declarator": "MACROMAN = \"MacRoman\"", "var_name": "MACROMAN"}], "methods": [{"identifier": "execute", "parameters": "(String appleScript, StringBuilder outputBuffer)", "modifiers": "public static", "return": "boolean", "signature": "boolean execute(String appleScript, StringBuilder outputBuffer)", "full_signature": "public static boolean execute(String appleScript, StringBuilder outputBuffer)", "class_method_signature": "AppleScript.execute(String appleScript, StringBuilder outputBuffer)", "testcase": false, "constructor": false}, {"identifier": "getScriptEncoding", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getScriptEncoding()", "full_signature": "public static String getScriptEncoding()", "class_method_signature": "AppleScript.getScriptEncoding()", "testcase": false, "constructor": false}], "file": "mucommander-os-macos/src/main/java/com/mucommander/ui/macos/AppleScript.java"}, "focal_method": {"identifier": "execute", "parameters": "(String appleScript, StringBuilder outputBuffer)", "modifiers": "public static", "return": "boolean", "body": "public static boolean execute(String appleScript, StringBuilder outputBuffer) {\n        // No point in going any further if the current OS is not Mac OS X\n        if(!OsFamily.MAC_OS_X.isCurrent())\n            return false;\n\n        LOGGER.debug(\"Executing AppleScript: \"+appleScript);\n\n        // Use the 'osascript' command to execute the AppleScript. The '-s o' flag tells osascript to print errors to\n        // stdout rather than stderr. The AppleScript is piped to the process instead of passing it as an argument\n        // ('-e' flag), for better control over the encoding and to remove any limitations on the maximum script size.\n        String tokens[] = new String[] {\n            \"osascript\",\n            \"-s\",\n            \"o\",\n        };\n\n        OutputStreamWriter pout = null;\n        try {\n            // Execute the osascript command.\n            AbstractProcess process = ProcessRunner.execute(tokens, outputBuffer==null?null:new ScriptOutputListener(outputBuffer, AppleScript.getScriptEncoding()));\n\n            // Pipe the script to the osascript process.\n            pout = new OutputStreamWriter(process.getOutputStream(), getScriptEncoding());\n            pout.write(appleScript);\n            pout.close();\n\n            // Wait for the process to die\n            int returnCode = process.waitFor();\n\n            LOGGER.debug(\"osascript returned code=\"+returnCode+\", output=\"+ outputBuffer);\n\n            if(returnCode!=0) {\n            \tLOGGER.debug(\"osascript terminated abnormally\");\n                return false;\n            }\n\n            return true;\n        }\n        catch(Exception e) {        // IOException, InterruptedException\n            // Shouldn't normally happen\n        \tLOGGER.debug(\"Unexcepted exception while executing AppleScript\", e);\n\n            try {\n                if(pout!=null)\n                    pout.close();\n            }\n            catch(IOException e1) {\n                // Can't do much about it\n            }\n\n            return false;\n        }\n    }", "signature": "boolean execute(String appleScript, StringBuilder outputBuffer)", "full_signature": "public static boolean execute(String appleScript, StringBuilder outputBuffer)", "class_method_signature": "AppleScript.execute(String appleScript, StringBuilder outputBuffer)", "testcase": false, "constructor": false, "invocations": ["isCurrent", "debug", "execute", "getScriptEncoding", "getOutputStream", "getScriptEncoding", "write", "close", "waitFor", "debug", "debug", "debug", "close"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}