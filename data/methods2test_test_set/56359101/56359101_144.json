{"test_class": {"identifier": "ClusterResourcesServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final static int MEGA_BYTES_TO_BYTES = 1000000;", "modifier": "protected final static", "type": "int", "declarator": "MEGA_BYTES_TO_BYTES = 1000000", "var_name": "MEGA_BYTES_TO_BYTES"}, {"original_string": "protected ClusterResourcesService clusterResourcesService = new ClusterResourcesService();", "modifier": "protected", "type": "ClusterResourcesService", "declarator": "clusterResourcesService = new ClusterResourcesService()", "var_name": "clusterResourcesService"}, {"original_string": "protected Random random = new Random();", "modifier": "protected", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private HostResourcesTestUtils hostResourcesUtils = new HostResourcesTestUtils();", "modifier": "private", "type": "HostResourcesTestUtils", "declarator": "hostResourcesUtils = new HostResourcesTestUtils()", "var_name": "hostResourcesUtils"}], "file": "autonomic-algorithms-commons/src/test/java/br/com/autonomiccs/autonomic/algorithms/commons/services/ClusterResourcesServiceTest.java"}, "test_case": {"identifier": "createClusterResourcesUpOneHostTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createClusterResourcesUpOneHostTest() {\n        List<HostResources> hosts = createClusterHomogeneousHosts(1);\n        ClusterResourcesUp cluster = clusterResourcesService.createClusterResourcesUp(random.nextLong(), \"cluster\", hosts);\n\n        Assert.assertEquals(512, cluster.getUsedMemory());\n        Assert.assertEquals(1000l, cluster.getUsedCpu());\n\n        checkCpuAndMemory(cluster);\n    }", "signature": "void createClusterResourcesUpOneHostTest()", "full_signature": "@Test public void createClusterResourcesUpOneHostTest()", "class_method_signature": "ClusterResourcesServiceTest.createClusterResourcesUpOneHostTest()", "testcase": true, "constructor": false, "invocations": ["createClusterHomogeneousHosts", "createClusterResourcesUp", "nextLong", "assertEquals", "getUsedMemory", "assertEquals", "getUsedCpu", "checkCpuAndMemory"]}, "focal_class": {"identifier": "ClusterResourcesService", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createClusterResourcesUp", "parameters": "(long clusterId, String clusterName, List<HostResources> hostsResources)", "modifiers": "public", "return": "ClusterResourcesUp", "signature": "ClusterResourcesUp createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "full_signature": "public ClusterResourcesUp createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "class_method_signature": "ClusterResourcesService.createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "testcase": false, "constructor": false}, {"identifier": "createClusterResourcesAvailableToStart", "parameters": "(long clusterId, String clusterName, List<HostResources> hostsToStart)", "modifiers": "public", "return": "ClusterResourcesAvailableToStart", "signature": "ClusterResourcesAvailableToStart createClusterResourcesAvailableToStart(long clusterId, String clusterName, List<HostResources> hostsToStart)", "full_signature": "public ClusterResourcesAvailableToStart createClusterResourcesAvailableToStart(long clusterId, String clusterName, List<HostResources> hostsToStart)", "class_method_signature": "ClusterResourcesService.createClusterResourcesAvailableToStart(long clusterId, String clusterName, List<HostResources> hostsToStart)", "testcase": false, "constructor": false}], "file": "autonomic-algorithms-commons/src/main/java/br/com/autonomiccs/autonomic/algorithms/commons/services/ClusterResourcesService.java"}, "focal_method": {"identifier": "createClusterResourcesUp", "parameters": "(long clusterId, String clusterName, List<HostResources> hostsResources)", "modifiers": "public", "return": "ClusterResourcesUp", "body": "public ClusterResourcesUp createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources) {\n        long clusterUsedCpu = 0, clusterCpuSpeed = 0, clusterMemory = 0, clusterUsedMemory = 0;\n        int clusterCpus = 0;\n        for (HostResources currentHost : hostsResources) {\n            clusterMemory += currentHost.getTotalMemoryInBytes() * currentHost.getMemoryOverprovisioning();\n            clusterUsedMemory += currentHost.getUsedMemoryInMegaBytes();\n            clusterUsedCpu += currentHost.getUsedCpu();\n            clusterCpuSpeed += currentHost.getSpeed() * currentHost.getCpuOverprovisioning();\n            clusterCpus += currentHost.getCpus();\n        }\n\n        ClusterResourcesUp clusterResourcesUp = new ClusterResourcesUp(clusterId, clusterName, clusterCpuSpeed, clusterUsedCpu, clusterCpus, clusterMemory, clusterUsedMemory,\n                hostsResources);\n\n        return clusterResourcesUp;\n    }", "signature": "ClusterResourcesUp createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "full_signature": "public ClusterResourcesUp createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "class_method_signature": "ClusterResourcesService.createClusterResourcesUp(long clusterId, String clusterName, List<HostResources> hostsResources)", "testcase": false, "constructor": false, "invocations": ["getTotalMemoryInBytes", "getMemoryOverprovisioning", "getUsedMemoryInMegaBytes", "getUsedCpu", "getSpeed", "getCpuOverprovisioning", "getCpus"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}