{"test_class": {"identifier": "TransformAPITest", "superclass": "extends ApiServiceTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ContentCache contentCache;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}], "file": "dataprep-api/src/test/java/org/talend/dataprep/api/service/TransformAPITest.java"}, "test_case": {"identifier": "retrieveDictionary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void retrieveDictionary() throws Exception {\n        // when\n        final InputStream dictionary = given()\n                .when() //\n                .expect()\n                .statusCode(200)\n                .log()\n                .ifError() //\n                .get(\"/api/transform/dictionary\")\n                .asInputStream();\n\n        // then\n        final ObjectInputStream ois = new ObjectInputStream(new GZIPInputStream(dictionary));\n        final Object object = ois.readObject();\n        Assert.assertEquals(TdqCategories.class, object.getClass());\n\n        final TdqCategories serviceDictionary = (TdqCategories) object;\n        final Directory dictionaryDirectory = serviceDictionary.getDictionary().asDirectory(); // Test Lucene directory\n                                                                                               // creation.\n        assertNotNull(dictionaryDirectory);\n        final Directory keywordDirectory = serviceDictionary.getKeyword().asDirectory(); // Test Lucene directory\n                                                                                         // creation.\n        assertNotNull(keywordDirectory);\n    }", "signature": "void retrieveDictionary()", "full_signature": "@Test public void retrieveDictionary()", "class_method_signature": "TransformAPITest.retrieveDictionary()", "testcase": true, "constructor": false, "invocations": ["asInputStream", "get", "ifError", "log", "statusCode", "expect", "when", "given", "readObject", "assertEquals", "getClass", "asDirectory", "getDictionary", "assertNotNull", "asDirectory", "getKeyword", "assertNotNull"]}, "focal_class": {"identifier": "TransformAPI", "superclass": "extends APIService", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CommonAPI commonAPI;", "modifier": "@Autowired\n    private", "type": "CommonAPI", "declarator": "commonAPI", "var_name": "commonAPI"}], "methods": [{"identifier": "columnActions", "parameters": "(@ApiParam(value = \"Optional column Metadata content as JSON\") InputStream body)", "modifiers": "@RequestMapping(value = \"/api/transform/actions/column\", method = RequestMethod.POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions for a data set column.\", notes = \"Returns all actions for the given column.\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> columnActions(@ApiParam(value = \"Optional column Metadata content as JSON\") InputStream body)", "full_signature": "@RequestMapping(value = \"/api/transform/actions/column\", method = RequestMethod.POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions for a data set column.\", notes = \"Returns all actions for the given column.\") @Timed public Stream<ActionForm> columnActions(@ApiParam(value = \"Optional column Metadata content as JSON\") InputStream body)", "class_method_signature": "TransformAPI.columnActions(@ApiParam(value = \"Optional column Metadata content as JSON\") InputStream body)", "testcase": false, "constructor": false}, {"identifier": "suggestColumnActions", "parameters": "(@ApiParam(value = \"Column Metadata content as JSON\") InputStream body)", "modifiers": "@RequestMapping(value = \"/api/transform/suggest/column\", method = RequestMethod.POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get suggested actions for a data set column.\", notes = \"Returns the suggested actions for the given column in decreasing order of likeness.\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> suggestColumnActions(@ApiParam(value = \"Column Metadata content as JSON\") InputStream body)", "full_signature": "@RequestMapping(value = \"/api/transform/suggest/column\", method = RequestMethod.POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get suggested actions for a data set column.\", notes = \"Returns the suggested actions for the given column in decreasing order of likeness.\") @Timed public Stream<ActionForm> suggestColumnActions(@ApiParam(value = \"Column Metadata content as JSON\") InputStream body)", "class_method_signature": "TransformAPI.suggestColumnActions(@ApiParam(value = \"Column Metadata content as JSON\") InputStream body)", "testcase": false, "constructor": false}, {"identifier": "lineActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/transform/actions/line\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions on line\", notes = \"Returns all actions for a line.\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> lineActions()", "full_signature": "@RequestMapping(value = \"/api/transform/actions/line\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions on line\", notes = \"Returns all actions for a line.\") @Timed public Stream<ActionForm> lineActions()", "class_method_signature": "TransformAPI.lineActions()", "testcase": false, "constructor": false}, {"identifier": "datasetActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/transform/actions/dataset\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions the whole dataset.\", notes = \"Returns all actions for the whole dataset..\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> datasetActions()", "full_signature": "@RequestMapping(value = \"/api/transform/actions/dataset\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions the whole dataset.\", notes = \"Returns all actions for the whole dataset..\") @Timed public Stream<ActionForm> datasetActions()", "class_method_signature": "TransformAPI.datasetActions()", "testcase": false, "constructor": false}, {"identifier": "multiColumnsActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/transform/actions/multi_columns\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions the selected columns.\", notes = \"Returns all actions for the selected columns..\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> multiColumnsActions()", "full_signature": "@RequestMapping(value = \"/api/transform/actions/multi_columns\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all actions the selected columns.\", notes = \"Returns all actions for the selected columns..\") @Timed public Stream<ActionForm> multiColumnsActions()", "class_method_signature": "TransformAPI.multiColumnsActions()", "testcase": false, "constructor": false}, {"identifier": "suggestActionParams", "parameters": "(\n            @ApiParam(value = \"Transformation name.\") @PathVariable(\"action\") final String action, @ApiParam(\n                    value = \"Suggested dynamic transformation input (preparation id or dataset id\") @Valid final DynamicParamsInput dynamicParamsInput)", "modifiers": "@RequestMapping(value = \"/api/transform/suggest/{action}/params\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the transformation dynamic parameters\", notes = \"Returns the transformation parameters.\") @Timed public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> suggestActionParams(\n            @ApiParam(value = \"Transformation name.\") @PathVariable(\"action\") final String action, @ApiParam(\n                    value = \"Suggested dynamic transformation input (preparation id or dataset id\") @Valid final DynamicParamsInput dynamicParamsInput)", "full_signature": "@RequestMapping(value = \"/api/transform/suggest/{action}/params\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the transformation dynamic parameters\", notes = \"Returns the transformation parameters.\") @Timed public ResponseEntity<StreamingResponseBody> suggestActionParams(\n            @ApiParam(value = \"Transformation name.\") @PathVariable(\"action\") final String action, @ApiParam(\n                    value = \"Suggested dynamic transformation input (preparation id or dataset id\") @Valid final DynamicParamsInput dynamicParamsInput)", "class_method_signature": "TransformAPI.suggestActionParams(\n            @ApiParam(value = \"Transformation name.\") @PathVariable(\"action\") final String action, @ApiParam(\n                    value = \"Suggested dynamic transformation input (preparation id or dataset id\") @Valid final DynamicParamsInput dynamicParamsInput)", "testcase": false, "constructor": false}, {"identifier": "getDictionary", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/transform/dictionary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\", notes = \"Returns a DQ dictionary serialized usin Java serialization and GZIP-ed.\") @Timed public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody getDictionary()", "full_signature": "@RequestMapping(value = \"/api/transform/dictionary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\", notes = \"Returns a DQ dictionary serialized usin Java serialization and GZIP-ed.\") @Timed public StreamingResponseBody getDictionary()", "class_method_signature": "TransformAPI.getDictionary()", "testcase": false, "constructor": false}], "file": "dataprep-api/src/main/java/org/talend/dataprep/api/service/TransformAPI.java"}, "focal_method": {"identifier": "getDictionary", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/transform/dictionary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\", notes = \"Returns a DQ dictionary serialized usin Java serialization and GZIP-ed.\") @Timed public", "return": "StreamingResponseBody", "body": "@RequestMapping(value = \"/api/transform/dictionary\", method = GET, produces = APPLICATION_JSON_VALUE)\n    @ApiOperation(value = \"Get current dictionary (as serialized object).\",\n            notes = \"Returns a DQ dictionary serialized usin Java serialization and GZIP-ed.\")\n    @Timed\n    public StreamingResponseBody getDictionary() {\n        // get preparation/dataset content\n        HystrixCommand<InputStream> dictionaryCommand = getCommand(DictionaryCommand.class);\n        return CommandHelper.toStreaming(dictionaryCommand);\n    }", "signature": "StreamingResponseBody getDictionary()", "full_signature": "@RequestMapping(value = \"/api/transform/dictionary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get current dictionary (as serialized object).\", notes = \"Returns a DQ dictionary serialized usin Java serialization and GZIP-ed.\") @Timed public StreamingResponseBody getDictionary()", "class_method_signature": "TransformAPI.getDictionary()", "testcase": false, "constructor": false, "invocations": ["getCommand", "toStreaming"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}