{"test_class": {"identifier": "PluginManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ADAPTOR_1 = \"testadaptor.jar\";", "modifier": "public static final", "type": "String", "declarator": "ADAPTOR_1 = \"testadaptor.jar\"", "var_name": "ADAPTOR_1"}, {"original_string": "public static final String ADAPTOR_1_NAME = \"TestAdaptor\";", "modifier": "public static final", "type": "String", "declarator": "ADAPTOR_1_NAME = \"TestAdaptor\"", "var_name": "ADAPTOR_1_NAME"}, {"original_string": "public static final String ADAPTOR_1_VERSION = \"0.1\";", "modifier": "public static final", "type": "String", "declarator": "ADAPTOR_1_VERSION = \"0.1\"", "var_name": "ADAPTOR_1_VERSION"}, {"original_string": "public static final String ADAPTOR_2 = \"testadaptor-0.2.jar\";", "modifier": "public static final", "type": "String", "declarator": "ADAPTOR_2 = \"testadaptor-0.2.jar\"", "var_name": "ADAPTOR_2"}, {"original_string": "private static final Logger LOG = LoggerFactory\n\t\t\t.getLogger(PluginManagerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory\n\t\t\t.getLogger(PluginManagerTest.class)", "var_name": "LOG"}, {"original_string": "private static final int SECOND = 1000;", "modifier": "private static final", "type": "int", "declarator": "SECOND = 1000", "var_name": "SECOND"}, {"original_string": "private PluginManager manager;", "modifier": "private", "type": "PluginManager", "declarator": "manager", "var_name": "manager"}], "file": "core/src/test/java/eu/scape_project/watch/plugin/PluginManagerTest.java"}, "test_case": {"identifier": "shouldObtainPluginManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldObtainPluginManager() {\n\t\tLOG.debug(\"------ Should Start PluginInterface Manager Test ------\");\n\t\tthis.manager = PluginManager.getDefaultPluginManager();\n\t\tAssert.assertNotNull(this.manager);\n\n\t}", "signature": "void shouldObtainPluginManager()", "full_signature": "@Test public void shouldObtainPluginManager()", "class_method_signature": "PluginManagerTest.shouldObtainPluginManager()", "testcase": true, "constructor": false, "invocations": ["debug", "getDefaultPluginManager", "assertNotNull"]}, "focal_class": {"identifier": "PluginManager", "superclass": "", "interfaces": "implements Observable", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n\t\t\t.getLogger(PluginManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n\t\t\t.getLogger(PluginManager.class)", "var_name": "LOGGER"}, {"original_string": "private static final long SCANNER_PERIOD = 60L * 1000;", "modifier": "private static final", "type": "long", "declarator": "SCANNER_PERIOD = 60L * 1000", "var_name": "SCANNER_PERIOD"}, {"original_string": "private static final String CLASS_EXTENSION = \".class\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_EXTENSION = \".class\"", "var_name": "CLASS_EXTENSION"}, {"original_string": "private static PluginManager defaultPluginManager = null;", "modifier": "private static", "type": "PluginManager", "declarator": "defaultPluginManager = null", "var_name": "defaultPluginManager"}, {"original_string": "private File pluginsDirectory = null;", "modifier": "private", "type": "File", "declarator": "pluginsDirectory = null", "var_name": "pluginsDirectory"}, {"original_string": "private Timer scannerTimer = null;", "modifier": "private", "type": "Timer", "declarator": "scannerTimer = null", "var_name": "scannerTimer"}, {"original_string": "private Map<File, JarPlugin> pluginRegistry = new HashMap<File, JarPlugin>();", "modifier": "private", "type": "Map<File, JarPlugin>", "declarator": "pluginRegistry = new HashMap<File, JarPlugin>()", "var_name": "pluginRegistry"}, {"original_string": "private ConfigUtils config;", "modifier": "private", "type": "ConfigUtils", "declarator": "config", "var_name": "config"}, {"original_string": "private boolean loading = false;", "modifier": "private", "type": "boolean", "declarator": "loading = false", "var_name": "loading"}, {"original_string": "private HashSet<ScoutComponentListener> observers;", "modifier": "private", "type": "HashSet<ScoutComponentListener>", "declarator": "observers", "var_name": "observers"}], "methods": [{"identifier": "getDefaultPluginManager", "parameters": "()", "modifiers": "public static synchronized", "return": "PluginManager", "signature": "PluginManager getDefaultPluginManager()", "full_signature": "public static synchronized PluginManager getDefaultPluginManager()", "class_method_signature": "PluginManager.getDefaultPluginManager()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setup()", "full_signature": "public void setup()", "class_method_signature": "PluginManager.setup()", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(final String pluginID, final String version)", "modifiers": "public", "return": "PluginInterface", "signature": "PluginInterface getPlugin(final String pluginID, final String version)", "full_signature": "public PluginInterface getPlugin(final String pluginID, final String version)", "class_method_signature": "PluginManager.getPlugin(final String pluginID, final String version)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(final PluginInfo info)", "modifiers": "public", "return": "PluginInterface", "signature": "PluginInterface getPlugin(final PluginInfo info)", "full_signature": "public PluginInterface getPlugin(final PluginInfo info)", "class_method_signature": "PluginManager.getPlugin(final PluginInfo info)", "testcase": false, "constructor": false}, {"identifier": "getPluginInfo", "parameters": "()", "modifiers": "public", "return": "List<PluginInfo>", "signature": "List<PluginInfo> getPluginInfo()", "full_signature": "public List<PluginInfo> getPluginInfo()", "class_method_signature": "PluginManager.getPluginInfo()", "testcase": false, "constructor": false}, {"identifier": "getPluginInfo", "parameters": "(final PluginType type)", "modifiers": "public", "return": "List<PluginInfo>", "signature": "List<PluginInfo> getPluginInfo(final PluginType type)", "full_signature": "public List<PluginInfo> getPluginInfo(final PluginType type)", "class_method_signature": "PluginManager.getPluginInfo(final PluginType type)", "testcase": false, "constructor": false}, {"identifier": "getPluginInfo", "parameters": "(final String name)", "modifiers": "public", "return": "List<PluginInfo>", "signature": "List<PluginInfo> getPluginInfo(final String name)", "full_signature": "public List<PluginInfo> getPluginInfo(final String name)", "class_method_signature": "PluginManager.getPluginInfo(final String name)", "testcase": false, "constructor": false}, {"identifier": "getPluginInfo", "parameters": "(final String name, final String version)", "modifiers": "public", "return": "PluginInfo", "signature": "PluginInfo getPluginInfo(final String name, final String version)", "full_signature": "public PluginInfo getPluginInfo(final String name, final String version)", "class_method_signature": "PluginManager.getPluginInfo(final String name, final String version)", "testcase": false, "constructor": false}, {"identifier": "reScan", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reScan()", "full_signature": "public void reScan()", "class_method_signature": "PluginManager.reScan()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "ConfigUtils", "signature": "ConfigUtils getConfig()", "full_signature": "public ConfigUtils getConfig()", "class_method_signature": "PluginManager.getConfig()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "public synchronized void shutdown()", "class_method_signature": "PluginManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "PluginManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " PluginManager()", "full_signature": "private  PluginManager()", "class_method_signature": "PluginManager.PluginManager()", "testcase": false, "constructor": true}, {"identifier": "startTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startTimer()", "full_signature": "private void startTimer()", "class_method_signature": "PluginManager.startTimer()", "testcase": false, "constructor": false}, {"identifier": "cancelTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelTimer()", "full_signature": "private void cancelTimer()", "class_method_signature": "PluginManager.cancelTimer()", "testcase": false, "constructor": false}, {"identifier": "getPluginDirectory", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getPluginDirectory()", "full_signature": "public File getPluginDirectory()", "class_method_signature": "PluginManager.getPluginDirectory()", "testcase": false, "constructor": false}, {"identifier": "addObserver", "parameters": "(ScoutComponentListener scoutComponent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addObserver(ScoutComponentListener scoutComponent)", "full_signature": "@Override public boolean addObserver(ScoutComponentListener scoutComponent)", "class_method_signature": "PluginManager.addObserver(ScoutComponentListener scoutComponent)", "testcase": false, "constructor": false}, {"identifier": "removeObserver", "parameters": "(ScoutComponentListener scoutComponent)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeObserver(ScoutComponentListener scoutComponent)", "full_signature": "@Override public boolean removeObserver(ScoutComponentListener scoutComponent)", "class_method_signature": "PluginManager.removeObserver(ScoutComponentListener scoutComponent)", "testcase": false, "constructor": false}, {"identifier": "notifyObservers", "parameters": "(ScoutChangeEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void notifyObservers(ScoutChangeEvent evt)", "full_signature": "@Override public void notifyObservers(ScoutChangeEvent evt)", "class_method_signature": "PluginManager.notifyObservers(ScoutChangeEvent evt)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "PluginManager.clear()", "testcase": false, "constructor": false}, {"identifier": "lazyLoadObservers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lazyLoadObservers()", "full_signature": "private void lazyLoadObservers()", "class_method_signature": "PluginManager.lazyLoadObservers()", "testcase": false, "constructor": false}, {"identifier": "waitForLoadingToFinish", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void waitForLoadingToFinish()", "full_signature": "private void waitForLoadingToFinish()", "class_method_signature": "PluginManager.waitForLoadingToFinish()", "testcase": false, "constructor": false}, {"identifier": "setPluginDirectory", "parameters": "(final File pluginDirectory)", "modifiers": "private", "return": "void", "signature": "void setPluginDirectory(final File pluginDirectory)", "full_signature": "private void setPluginDirectory(final File pluginDirectory)", "class_method_signature": "PluginManager.setPluginDirectory(final File pluginDirectory)", "testcase": false, "constructor": false}, {"identifier": "loadPlugins", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPlugins()", "full_signature": "private void loadPlugins()", "class_method_signature": "PluginManager.loadPlugins()", "testcase": false, "constructor": false}, {"identifier": "loadPlugins", "parameters": "(final File dir)", "modifiers": "private", "return": "void", "signature": "void loadPlugins(final File dir)", "full_signature": "private void loadPlugins(final File dir)", "class_method_signature": "PluginManager.loadPlugins(final File dir)", "testcase": false, "constructor": false}, {"identifier": "loadPlugin", "parameters": "(final File jarFile, final URL[] jarURLs)", "modifiers": "private", "return": "PluginInterface", "signature": "PluginInterface loadPlugin(final File jarFile, final URL[] jarURLs)", "full_signature": "private PluginInterface loadPlugin(final File jarFile, final URL[] jarURLs)", "class_method_signature": "PluginManager.loadPlugin(final File jarFile, final URL[] jarURLs)", "testcase": false, "constructor": false}, {"identifier": "createInstance", "parameters": "(final Class<?> clazz)", "modifiers": "private", "return": "PluginInterface", "signature": "PluginInterface createInstance(final Class<?> clazz)", "full_signature": "private PluginInterface createInstance(final Class<?> clazz)", "class_method_signature": "PluginManager.createInstance(final Class<?> clazz)", "testcase": false, "constructor": false}], "file": "core/src/main/java/eu/scape_project/watch/plugin/PluginManager.java"}, "focal_method": {"identifier": "getDefaultPluginManager", "parameters": "()", "modifiers": "public static synchronized", "return": "PluginManager", "body": "public static synchronized PluginManager getDefaultPluginManager() {\n\t\tif (PluginManager.defaultPluginManager == null) {\n\t\t\tLOGGER.debug(\"Creating new default instance of the plugin manager\");\n\t\t\tPluginManager.defaultPluginManager = new PluginManager();\n\t\t}\n\t\treturn PluginManager.defaultPluginManager;\n\t}", "signature": "PluginManager getDefaultPluginManager()", "full_signature": "public static synchronized PluginManager getDefaultPluginManager()", "class_method_signature": "PluginManager.getDefaultPluginManager()", "testcase": false, "constructor": false, "invocations": ["debug"]}, "repository": {"repo_id": 3145735, "url": "https://github.com/openpreserve/scout", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 13, "size": 74687, "license": "licensed"}}