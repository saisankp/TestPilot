{"test_class": {"identifier": "SubscriptionArbiterTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscriptions/SubscriptionArbiterTest.java"}, "test_case": {"identifier": "drainMissedRequestedMoreProduced", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void drainMissedRequestedMoreProduced() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            SubscriptionArbiter sa = new SubscriptionArbiter();\n\n            sa.getAndIncrement();\n\n            sa.requested = 0;\n\n            sa.missedRequested.set(1);\n\n            sa.missedProduced.set(2);\n\n            sa.drainLoop();\n\n            assertEquals(0, sa.requested);\n\n            TestHelper.assertError(errors, 0, IllegalStateException.class, \"More produced than requested: -1\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void drainMissedRequestedMoreProduced()", "full_signature": "@Test public void drainMissedRequestedMoreProduced()", "class_method_signature": "SubscriptionArbiterTest.drainMissedRequestedMoreProduced()", "testcase": true, "constructor": false, "invocations": ["trackPluginErrors", "getAndIncrement", "set", "set", "drainLoop", "assertEquals", "assertError", "reset"]}, "focal_class": {"identifier": "SubscriptionArbiter", "superclass": "extends AtomicInteger", "interfaces": "implements Subscription", "fields": [{"original_string": "private static final long serialVersionUID = -2189523197179400958L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2189523197179400958L", "var_name": "serialVersionUID"}, {"original_string": "Subscription actual;", "modifier": "", "type": "Subscription", "declarator": "actual", "var_name": "actual"}, {"original_string": "long requested;", "modifier": "", "type": "long", "declarator": "requested", "var_name": "requested"}, {"original_string": "final AtomicReference<Subscription> missedSubscription;", "modifier": "final", "type": "AtomicReference<Subscription>", "declarator": "missedSubscription", "var_name": "missedSubscription"}, {"original_string": "final AtomicLong missedRequested;", "modifier": "final", "type": "AtomicLong", "declarator": "missedRequested", "var_name": "missedRequested"}, {"original_string": "final AtomicLong missedProduced;", "modifier": "final", "type": "AtomicLong", "declarator": "missedProduced", "var_name": "missedProduced"}, {"original_string": "volatile boolean cancelled;", "modifier": "volatile", "type": "boolean", "declarator": "cancelled", "var_name": "cancelled"}, {"original_string": "protected boolean unbounded;", "modifier": "protected", "type": "boolean", "declarator": "unbounded", "var_name": "unbounded"}], "methods": [{"identifier": "SubscriptionArbiter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubscriptionArbiter()", "full_signature": "public  SubscriptionArbiter()", "class_method_signature": "SubscriptionArbiter.SubscriptionArbiter()", "testcase": false, "constructor": true}, {"identifier": "setSubscription", "parameters": "(Subscription s)", "modifiers": "public final", "return": "void", "signature": "void setSubscription(Subscription s)", "full_signature": "public final void setSubscription(Subscription s)", "class_method_signature": "SubscriptionArbiter.setSubscription(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public final", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public final void request(long n)", "class_method_signature": "SubscriptionArbiter.request(long n)", "testcase": false, "constructor": false}, {"identifier": "produced", "parameters": "(long n)", "modifiers": "public final", "return": "void", "signature": "void produced(long n)", "full_signature": "public final void produced(long n)", "class_method_signature": "SubscriptionArbiter.produced(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "SubscriptionArbiter.cancel()", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void drain()", "full_signature": "final void drain()", "class_method_signature": "SubscriptionArbiter.drain()", "testcase": false, "constructor": false}, {"identifier": "drainLoop", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void drainLoop()", "full_signature": "final void drainLoop()", "class_method_signature": "SubscriptionArbiter.drainLoop()", "testcase": false, "constructor": false}, {"identifier": "isUnbounded", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isUnbounded()", "full_signature": "public final boolean isUnbounded()", "class_method_signature": "SubscriptionArbiter.isUnbounded()", "testcase": false, "constructor": false}, {"identifier": "isCancelled", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isCancelled()", "full_signature": "public final boolean isCancelled()", "class_method_signature": "SubscriptionArbiter.isCancelled()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java"}, "focal_method": {"identifier": "drainLoop", "parameters": "()", "modifiers": "final", "return": "void", "body": "final void drainLoop() {\n        int missed = 1;\n\n        long requestAmount = 0L;\n        Subscription requestTarget = null;\n\n        for (; ; ) {\n\n            Subscription ms = missedSubscription.get();\n\n            if (ms != null) {\n                ms = missedSubscription.getAndSet(null);\n            }\n\n            long mr = missedRequested.get();\n            if (mr != 0L) {\n                mr = missedRequested.getAndSet(0L);\n            }\n\n            long mp = missedProduced.get();\n            if (mp != 0L) {\n                mp = missedProduced.getAndSet(0L);\n            }\n\n            Subscription a = actual;\n\n            if (cancelled) {\n                if (a != null) {\n                    a.cancel();\n                    actual = null;\n                }\n                if (ms != null) {\n                    ms.cancel();\n                }\n            } else {\n                long r = requested;\n                if (r != Long.MAX_VALUE) {\n                    long u = BackpressureHelper.addCap(r, mr);\n\n                    if (u != Long.MAX_VALUE) {\n                        long v = u - mp;\n                        if (v < 0L) {\n                            SubscriptionHelper.reportMoreProduced(v);\n                            v = 0;\n                        }\n                        r = v;\n                    } else {\n                        r = u;\n                    }\n                    requested = r;\n                }\n\n                if (ms != null) {\n                    if (a != null) {\n                        a.cancel();\n                    }\n                    actual = ms;\n                    if (r != 0L) {\n                        requestAmount = BackpressureHelper.addCap(requestAmount, r);\n                        requestTarget = ms;\n                    }\n                } else if (a != null && mr != 0L) {\n                    requestAmount = BackpressureHelper.addCap(requestAmount, mr);\n                    requestTarget = a;\n                }\n            }\n\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                if (requestAmount != 0L) {\n                    requestTarget.request(requestAmount);\n                }\n                return;\n            }\n        }\n    }", "signature": "void drainLoop()", "full_signature": "final void drainLoop()", "class_method_signature": "SubscriptionArbiter.drainLoop()", "testcase": false, "constructor": false, "invocations": ["get", "getAndSet", "get", "getAndSet", "get", "getAndSet", "cancel", "cancel", "addCap", "reportMoreProduced", "cancel", "addCap", "addCap", "addAndGet", "request"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}