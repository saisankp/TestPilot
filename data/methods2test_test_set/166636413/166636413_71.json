{"test_class": {"identifier": "AudioPlayerViewModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MediaPlayer mediaPlayer = mock(MediaPlayer.class);", "modifier": "private final", "type": "MediaPlayer", "declarator": "mediaPlayer = mock(MediaPlayer.class)", "var_name": "mediaPlayer"}, {"original_string": "private final FakeScheduler fakeScheduler = new FakeScheduler();", "modifier": "private final", "type": "FakeScheduler", "declarator": "fakeScheduler = new FakeScheduler()", "var_name": "fakeScheduler"}, {"original_string": "private final LiveDataTester liveDataTester = new LiveDataTester();", "modifier": "private final", "type": "LiveDataTester", "declarator": "liveDataTester = new LiveDataTester()", "var_name": "liveDataTester"}, {"original_string": "private AudioPlayerViewModel viewModel;", "modifier": "private", "type": "AudioPlayerViewModel", "declarator": "viewModel", "var_name": "viewModel"}], "file": "collect_app/src/test/java/org/odk/collect/android/audio/AudioPlayerViewModelTest.java"}, "test_case": {"identifier": "playInOrder_whenThereIsAnErrorContinuesWithNextClip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void playInOrder_whenThereIsAnErrorContinuesWithNextClip() throws Exception {\n        doThrow(IOException.class).when(mediaPlayer).setDataSource(\"file://missing.mp3\");\n\n        viewModel.playInOrder(asList(\n                new Clip(\"clip1\", \"file://missing.mp3\"),\n                new Clip(\"clip2\", \"file://not-missing.mp3\")\n        ));\n\n        verify(mediaPlayer).setDataSource(\"file://not-missing.mp3\");\n        verify(mediaPlayer, times(1)).start();\n    }", "signature": "void playInOrder_whenThereIsAnErrorContinuesWithNextClip()", "full_signature": "@Test public void playInOrder_whenThereIsAnErrorContinuesWithNextClip()", "class_method_signature": "AudioPlayerViewModelTest.playInOrder_whenThereIsAnErrorContinuesWithNextClip()", "testcase": true, "constructor": false, "invocations": ["setDataSource", "when", "doThrow", "playInOrder", "asList", "setDataSource", "verify", "start", "verify", "times"]}, "focal_class": {"identifier": "AudioPlayerViewModel", "superclass": "extends ViewModel", "interfaces": "implements MediaPlayer.OnCompletionListener", "fields": [{"original_string": "private final MediaPlayerFactory mediaPlayerFactory;", "modifier": "private final", "type": "MediaPlayerFactory", "declarator": "mediaPlayerFactory", "var_name": "mediaPlayerFactory"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private MediaPlayer mediaPlayer;", "modifier": "private", "type": "MediaPlayer", "declarator": "mediaPlayer", "var_name": "mediaPlayer"}, {"original_string": "private final MutableLiveData<CurrentlyPlaying> currentlyPlaying = new MutableLiveData<>();", "modifier": "private final", "type": "MutableLiveData<CurrentlyPlaying>", "declarator": "currentlyPlaying = new MutableLiveData<>()", "var_name": "currentlyPlaying"}, {"original_string": "private final MutableLiveData<Exception> error = new MutableLiveData<>();", "modifier": "private final", "type": "MutableLiveData<Exception>", "declarator": "error = new MutableLiveData<>()", "var_name": "error"}, {"original_string": "private final Map<String, MutableLiveData<Integer>> positions = new HashMap<>();", "modifier": "private final", "type": "Map<String, MutableLiveData<Integer>>", "declarator": "positions = new HashMap<>()", "var_name": "positions"}, {"original_string": "private Boolean scheduledDurationUpdates = false;", "modifier": "private", "type": "Boolean", "declarator": "scheduledDurationUpdates = false", "var_name": "scheduledDurationUpdates"}], "methods": [{"identifier": "AudioPlayerViewModel", "parameters": "(MediaPlayerFactory mediaPlayerFactory, Scheduler scheduler)", "modifiers": "", "return": "", "signature": " AudioPlayerViewModel(MediaPlayerFactory mediaPlayerFactory, Scheduler scheduler)", "full_signature": "  AudioPlayerViewModel(MediaPlayerFactory mediaPlayerFactory, Scheduler scheduler)", "class_method_signature": "AudioPlayerViewModel.AudioPlayerViewModel(MediaPlayerFactory mediaPlayerFactory, Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "play", "parameters": "(Clip clip)", "modifiers": "public", "return": "void", "signature": "void play(Clip clip)", "full_signature": "public void play(Clip clip)", "class_method_signature": "AudioPlayerViewModel.play(Clip clip)", "testcase": false, "constructor": false}, {"identifier": "playInOrder", "parameters": "(List<Clip> clips)", "modifiers": "public", "return": "void", "signature": "void playInOrder(List<Clip> clips)", "full_signature": "public void playInOrder(List<Clip> clips)", "class_method_signature": "AudioPlayerViewModel.playInOrder(List<Clip> clips)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "AudioPlayerViewModel.stop()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "AudioPlayerViewModel.pause()", "testcase": false, "constructor": false}, {"identifier": "isPlaying", "parameters": "(@NonNull String clipID)", "modifiers": "public", "return": "LiveData<Boolean>", "signature": "LiveData<Boolean> isPlaying(@NonNull String clipID)", "full_signature": "public LiveData<Boolean> isPlaying(@NonNull String clipID)", "class_method_signature": "AudioPlayerViewModel.isPlaying(@NonNull String clipID)", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "(String clipID)", "modifiers": "public", "return": "LiveData<Integer>", "signature": "LiveData<Integer> getPosition(String clipID)", "full_signature": "public LiveData<Integer> getPosition(String clipID)", "class_method_signature": "AudioPlayerViewModel.getPosition(String clipID)", "testcase": false, "constructor": false}, {"identifier": "setPosition", "parameters": "(String clipID, Integer newPosition)", "modifiers": "public", "return": "void", "signature": "void setPosition(String clipID, Integer newPosition)", "full_signature": "public void setPosition(String clipID, Integer newPosition)", "class_method_signature": "AudioPlayerViewModel.setPosition(String clipID, Integer newPosition)", "testcase": false, "constructor": false}, {"identifier": "background", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void background()", "full_signature": "public void background()", "class_method_signature": "AudioPlayerViewModel.background()", "testcase": false, "constructor": false}, {"identifier": "onCleared", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onCleared()", "full_signature": "@Override protected void onCleared()", "class_method_signature": "AudioPlayerViewModel.onCleared()", "testcase": false, "constructor": false}, {"identifier": "playNext", "parameters": "(Queue<Clip> playlist)", "modifiers": "private", "return": "void", "signature": "void playNext(Queue<Clip> playlist)", "full_signature": "private void playNext(Queue<Clip> playlist)", "class_method_signature": "AudioPlayerViewModel.playNext(Queue<Clip> playlist)", "testcase": false, "constructor": false}, {"identifier": "getExceptionMsg", "parameters": "(String uri)", "modifiers": "private", "return": "int", "signature": "int getExceptionMsg(String uri)", "full_signature": "private int getExceptionMsg(String uri)", "class_method_signature": "AudioPlayerViewModel.getExceptionMsg(String uri)", "testcase": false, "constructor": false}, {"identifier": "onCompletion", "parameters": "(MediaPlayer mediaPlayer)", "modifiers": "@Override public", "return": "void", "signature": "void onCompletion(MediaPlayer mediaPlayer)", "full_signature": "@Override public void onCompletion(MediaPlayer mediaPlayer)", "class_method_signature": "AudioPlayerViewModel.onCompletion(MediaPlayer mediaPlayer)", "testcase": false, "constructor": false}, {"identifier": "cleanUpAfterClip", "parameters": "()", "modifiers": "private", "return": "CurrentlyPlaying", "signature": "CurrentlyPlaying cleanUpAfterClip()", "full_signature": "private CurrentlyPlaying cleanUpAfterClip()", "class_method_signature": "AudioPlayerViewModel.cleanUpAfterClip()", "testcase": false, "constructor": false}, {"identifier": "getPositionForClip", "parameters": "(String clipID)", "modifiers": "@NonNull private", "return": "MutableLiveData<Integer>", "signature": "MutableLiveData<Integer> getPositionForClip(String clipID)", "full_signature": "@NonNull private MutableLiveData<Integer> getPositionForClip(String clipID)", "class_method_signature": "AudioPlayerViewModel.getPositionForClip(String clipID)", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "public", "return": "LiveData<Exception>", "signature": "LiveData<Exception> getError()", "full_signature": "public LiveData<Exception> getError()", "class_method_signature": "AudioPlayerViewModel.getError()", "testcase": false, "constructor": false}, {"identifier": "dismissError", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dismissError()", "full_signature": "public void dismissError()", "class_method_signature": "AudioPlayerViewModel.dismissError()", "testcase": false, "constructor": false}, {"identifier": "schedulePositionUpdates", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void schedulePositionUpdates()", "full_signature": "private void schedulePositionUpdates()", "class_method_signature": "AudioPlayerViewModel.schedulePositionUpdates()", "testcase": false, "constructor": false}, {"identifier": "cancelPositionUpdates", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelPositionUpdates()", "full_signature": "private void cancelPositionUpdates()", "class_method_signature": "AudioPlayerViewModel.cancelPositionUpdates()", "testcase": false, "constructor": false}, {"identifier": "releaseMediaPlayer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseMediaPlayer()", "full_signature": "private void releaseMediaPlayer()", "class_method_signature": "AudioPlayerViewModel.releaseMediaPlayer()", "testcase": false, "constructor": false}, {"identifier": "getMediaPlayer", "parameters": "()", "modifiers": "private", "return": "MediaPlayer", "signature": "MediaPlayer getMediaPlayer()", "full_signature": "private MediaPlayer getMediaPlayer()", "class_method_signature": "AudioPlayerViewModel.getMediaPlayer()", "testcase": false, "constructor": false}, {"identifier": "isCurrentPlayingClip", "parameters": "(String clipID, CurrentlyPlaying currentlyPlayingValue)", "modifiers": "private", "return": "boolean", "signature": "boolean isCurrentPlayingClip(String clipID, CurrentlyPlaying currentlyPlayingValue)", "full_signature": "private boolean isCurrentPlayingClip(String clipID, CurrentlyPlaying currentlyPlayingValue)", "class_method_signature": "AudioPlayerViewModel.isCurrentPlayingClip(String clipID, CurrentlyPlaying currentlyPlayingValue)", "testcase": false, "constructor": false}, {"identifier": "loadNewClip", "parameters": "(String uri)", "modifiers": "private", "return": "void", "signature": "void loadNewClip(String uri)", "full_signature": "private void loadNewClip(String uri)", "class_method_signature": "AudioPlayerViewModel.loadNewClip(String uri)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java"}, "focal_method": {"identifier": "playInOrder", "parameters": "(List<Clip> clips)", "modifiers": "public", "return": "void", "body": "public void playInOrder(List<Clip> clips) {\n        Queue<Clip> playlist = new LinkedList<>(clips);\n        playNext(playlist);\n    }", "signature": "void playInOrder(List<Clip> clips)", "full_signature": "public void playInOrder(List<Clip> clips)", "class_method_signature": "AudioPlayerViewModel.playInOrder(List<Clip> clips)", "testcase": false, "constructor": false, "invocations": ["playNext"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}