{"test_class": {"identifier": "ThreadPoolManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/common/ThreadPoolManagerTest.java"}, "test_case": {"identifier": "testGetScheduledPool", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetScheduledPool() {\n        ThreadPoolExecutor result = (ThreadPoolExecutor) ThreadPoolManager.getScheduledPool(\"test1\");\n\n        assertThat(result, instanceOf(ScheduledExecutorService.class));\n\n        assertTrue(result.allowsCoreThreadTimeOut());\n        assertEquals(ThreadPoolManager.THREAD_TIMEOUT, result.getKeepAliveTime(TimeUnit.SECONDS));\n        assertEquals(ThreadPoolManager.DEFAULT_THREAD_POOL_SIZE, result.getCorePoolSize());\n    }", "signature": "void testGetScheduledPool()", "full_signature": "@Test public void testGetScheduledPool()", "class_method_signature": "ThreadPoolManagerTest.testGetScheduledPool()", "testcase": true, "constructor": false, "invocations": ["getScheduledPool", "assertThat", "instanceOf", "assertTrue", "allowsCoreThreadTimeOut", "assertEquals", "getKeepAliveTime", "assertEquals", "getCorePoolSize"]}, "focal_class": {"identifier": "ThreadPoolManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CONFIGURATION_PID = \"org.openhab.threadpool\";", "modifier": "public static final", "type": "String", "declarator": "CONFIGURATION_PID = \"org.openhab.threadpool\"", "var_name": "CONFIGURATION_PID"}, {"original_string": "public static final String THREAD_POOL_NAME_COMMON = \"common\";", "modifier": "public static final", "type": "String", "declarator": "THREAD_POOL_NAME_COMMON = \"common\"", "var_name": "THREAD_POOL_NAME_COMMON"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class)", "var_name": "LOGGER"}, {"original_string": "protected static final int DEFAULT_THREAD_POOL_SIZE = 5;", "modifier": "protected static final", "type": "int", "declarator": "DEFAULT_THREAD_POOL_SIZE = 5", "var_name": "DEFAULT_THREAD_POOL_SIZE"}, {"original_string": "protected static final long THREAD_TIMEOUT = 65L;", "modifier": "protected static final", "type": "long", "declarator": "THREAD_TIMEOUT = 65L", "var_name": "THREAD_TIMEOUT"}, {"original_string": "protected static final long THREAD_MONITOR_SLEEP = 60000;", "modifier": "protected static final", "type": "long", "declarator": "THREAD_MONITOR_SLEEP = 60000", "var_name": "THREAD_MONITOR_SLEEP"}, {"original_string": "protected static Map<String, ExecutorService> pools = new WeakHashMap<>();", "modifier": "protected static", "type": "Map<String, ExecutorService>", "declarator": "pools = new WeakHashMap<>()", "var_name": "pools"}, {"original_string": "private static Map<String, Integer> configs = new ConcurrentHashMap<>();", "modifier": "private static", "type": "Map<String, Integer>", "declarator": "configs = new ConcurrentHashMap<>()", "var_name": "configs"}], "methods": [{"identifier": "activate", "parameters": "(Map<String, Object> properties)", "modifiers": "protected", "return": "void", "signature": "void activate(Map<String, Object> properties)", "full_signature": "protected void activate(Map<String, Object> properties)", "class_method_signature": "ThreadPoolManager.activate(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "modified", "parameters": "(Map<String, Object> properties)", "modifiers": "protected", "return": "void", "signature": "void modified(Map<String, Object> properties)", "full_signature": "protected void modified(Map<String, Object> properties)", "class_method_signature": "ThreadPoolManager.modified(Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "getScheduledPool", "parameters": "(String poolName)", "modifiers": "public static", "return": "ScheduledExecutorService", "signature": "ScheduledExecutorService getScheduledPool(String poolName)", "full_signature": "public static ScheduledExecutorService getScheduledPool(String poolName)", "class_method_signature": "ThreadPoolManager.getScheduledPool(String poolName)", "testcase": false, "constructor": false}, {"identifier": "getPool", "parameters": "(String poolName)", "modifiers": "public static", "return": "ExecutorService", "signature": "ExecutorService getPool(String poolName)", "full_signature": "public static ExecutorService getPool(String poolName)", "class_method_signature": "ThreadPoolManager.getPool(String poolName)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String poolName)", "modifiers": "protected static", "return": "int", "signature": "int getConfig(String poolName)", "full_signature": "protected static int getConfig(String poolName)", "class_method_signature": "ThreadPoolManager.getConfig(String poolName)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/common/ThreadPoolManager.java"}, "focal_method": {"identifier": "getScheduledPool", "parameters": "(String poolName)", "modifiers": "public static", "return": "ScheduledExecutorService", "body": "public static ScheduledExecutorService getScheduledPool(String poolName) {\n        ExecutorService pool = pools.get(poolName);\n        if (pool == null) {\n            synchronized (pools) {\n                // do a double check if it is still null or if another thread might have created it meanwhile\n                pool = pools.get(poolName);\n                if (pool == null) {\n                    int cfg = getConfig(poolName);\n                    pool = new WrappedScheduledExecutorService(cfg,\n                            new NamedThreadFactory(poolName, true, Thread.NORM_PRIORITY));\n                    ((ThreadPoolExecutor) pool).setKeepAliveTime(THREAD_TIMEOUT, TimeUnit.SECONDS);\n                    ((ThreadPoolExecutor) pool).allowCoreThreadTimeOut(true);\n                    ((ScheduledThreadPoolExecutor) pool).setRemoveOnCancelPolicy(true);\n                    pools.put(poolName, pool);\n                    LOGGER.debug(\"Created scheduled thread pool '{}' of size {}\", poolName, cfg);\n                }\n            }\n        }\n        if (pool instanceof ScheduledExecutorService) {\n            return (ScheduledExecutorService) pool;\n        } else {\n            throw new IllegalArgumentException(\"Pool \" + poolName + \" is not a scheduled pool!\");\n        }\n    }", "signature": "ScheduledExecutorService getScheduledPool(String poolName)", "full_signature": "public static ScheduledExecutorService getScheduledPool(String poolName)", "class_method_signature": "ThreadPoolManager.getScheduledPool(String poolName)", "testcase": false, "constructor": false, "invocations": ["get", "get", "getConfig", "setKeepAliveTime", "allowCoreThreadTimeOut", "setRemoveOnCancelPolicy", "put", "debug"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}