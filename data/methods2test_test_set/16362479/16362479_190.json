{"test_class": {"identifier": "AbstractReplicatedLogImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockAbstractReplicatedLogImpl replicatedLogImpl;", "modifier": "private", "type": "MockAbstractReplicatedLogImpl", "declarator": "replicatedLogImpl", "var_name": "replicatedLogImpl"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/AbstractReplicatedLogImplTest.java"}, "test_case": {"identifier": "testSnapshotPreCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSnapshotPreCommit() {\n        //add 4 more entries\n        replicatedLogImpl.append(new SimpleReplicatedLogEntry(4, 2, new MockPayload(\"E\")));\n        replicatedLogImpl.append(new SimpleReplicatedLogEntry(5, 2, new MockPayload(\"F\")));\n        replicatedLogImpl.append(new SimpleReplicatedLogEntry(6, 3, new MockPayload(\"G\")));\n        replicatedLogImpl.append(new SimpleReplicatedLogEntry(7, 3, new MockPayload(\"H\")));\n\n        //sending negative values should not cause any changes\n        replicatedLogImpl.snapshotPreCommit(-1, -1);\n        assertEquals(8, replicatedLogImpl.size());\n        assertEquals(-1, replicatedLogImpl.getSnapshotIndex());\n        assertEquals(-1, replicatedLogImpl.getSnapshotTerm());\n\n        replicatedLogImpl.snapshotPreCommit(4, 2);\n        assertEquals(3, replicatedLogImpl.size());\n        assertEquals(4, replicatedLogImpl.getSnapshotIndex());\n        assertEquals(2, replicatedLogImpl.getSnapshotTerm());\n\n        replicatedLogImpl.snapshotPreCommit(6, 3);\n        assertEquals(1, replicatedLogImpl.size());\n        assertEquals(6, replicatedLogImpl.getSnapshotIndex());\n        assertEquals(3, replicatedLogImpl.getSnapshotTerm());\n\n        replicatedLogImpl.snapshotPreCommit(7, 3);\n        assertEquals(0, replicatedLogImpl.size());\n        assertEquals(7, replicatedLogImpl.getSnapshotIndex());\n        assertEquals(3, replicatedLogImpl.getSnapshotTerm());\n\n        //running it again on an empty list should not throw exception\n        replicatedLogImpl.snapshotPreCommit(7, 3);\n        assertEquals(0, replicatedLogImpl.size());\n        assertEquals(7, replicatedLogImpl.getSnapshotIndex());\n        assertEquals(3, replicatedLogImpl.getSnapshotTerm());\n    }", "signature": "void testSnapshotPreCommit()", "full_signature": "@Test public void testSnapshotPreCommit()", "class_method_signature": "AbstractReplicatedLogImplTest.testSnapshotPreCommit()", "testcase": true, "constructor": false, "invocations": ["append", "append", "append", "append", "snapshotPreCommit", "assertEquals", "size", "assertEquals", "getSnapshotIndex", "assertEquals", "getSnapshotTerm", "snapshotPreCommit", "assertEquals", "size", "assertEquals", "getSnapshotIndex", "assertEquals", "getSnapshotTerm", "snapshotPreCommit", "assertEquals", "size", "assertEquals", "getSnapshotIndex", "assertEquals", "getSnapshotTerm", "snapshotPreCommit", "assertEquals", "size", "assertEquals", "getSnapshotIndex", "assertEquals", "getSnapshotTerm", "snapshotPreCommit", "assertEquals", "size", "assertEquals", "getSnapshotIndex", "assertEquals", "getSnapshotTerm"]}, "focal_class": {"identifier": "AbstractReplicatedLogImpl", "superclass": "", "interfaces": "implements ReplicatedLog", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractReplicatedLogImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractReplicatedLogImpl.class)", "var_name": "LOG"}, {"original_string": "private final String logContext;", "modifier": "private final", "type": "String", "declarator": "logContext", "var_name": "logContext"}, {"original_string": "private ArrayList<ReplicatedLogEntry> journal;", "modifier": "private", "type": "ArrayList<ReplicatedLogEntry>", "declarator": "journal", "var_name": "journal"}, {"original_string": "private long snapshotIndex = -1;", "modifier": "private", "type": "long", "declarator": "snapshotIndex = -1", "var_name": "snapshotIndex"}, {"original_string": "private long snapshotTerm = -1;", "modifier": "private", "type": "long", "declarator": "snapshotTerm = -1", "var_name": "snapshotTerm"}, {"original_string": "private ArrayList<ReplicatedLogEntry> snapshottedJournal;", "modifier": "private", "type": "ArrayList<ReplicatedLogEntry>", "declarator": "snapshottedJournal", "var_name": "snapshottedJournal"}, {"original_string": "private long previousSnapshotIndex = -1;", "modifier": "private", "type": "long", "declarator": "previousSnapshotIndex = -1", "var_name": "previousSnapshotIndex"}, {"original_string": "private long previousSnapshotTerm = -1;", "modifier": "private", "type": "long", "declarator": "previousSnapshotTerm = -1", "var_name": "previousSnapshotTerm"}, {"original_string": "private int dataSize = 0;", "modifier": "private", "type": "int", "declarator": "dataSize = 0", "var_name": "dataSize"}], "methods": [{"identifier": "AbstractReplicatedLogImpl", "parameters": "(long snapshotIndex, long snapshotTerm,\n            List<ReplicatedLogEntry> unAppliedEntries, String logContext)", "modifiers": "protected", "return": "", "signature": " AbstractReplicatedLogImpl(long snapshotIndex, long snapshotTerm,\n            List<ReplicatedLogEntry> unAppliedEntries, String logContext)", "full_signature": "protected  AbstractReplicatedLogImpl(long snapshotIndex, long snapshotTerm,\n            List<ReplicatedLogEntry> unAppliedEntries, String logContext)", "class_method_signature": "AbstractReplicatedLogImpl.AbstractReplicatedLogImpl(long snapshotIndex, long snapshotTerm,\n            List<ReplicatedLogEntry> unAppliedEntries, String logContext)", "testcase": false, "constructor": true}, {"identifier": "AbstractReplicatedLogImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " AbstractReplicatedLogImpl()", "full_signature": "protected  AbstractReplicatedLogImpl()", "class_method_signature": "AbstractReplicatedLogImpl.AbstractReplicatedLogImpl()", "testcase": false, "constructor": true}, {"identifier": "adjustedIndex", "parameters": "(long logEntryIndex)", "modifiers": "protected", "return": "int", "signature": "int adjustedIndex(long logEntryIndex)", "full_signature": "protected int adjustedIndex(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.adjustedIndex(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(long logEntryIndex)", "modifiers": "@Override public", "return": "ReplicatedLogEntry", "signature": "ReplicatedLogEntry get(long logEntryIndex)", "full_signature": "@Override public ReplicatedLogEntry get(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.get(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@Override public", "return": "ReplicatedLogEntry", "signature": "ReplicatedLogEntry last()", "full_signature": "@Override public ReplicatedLogEntry last()", "class_method_signature": "AbstractReplicatedLogImpl.last()", "testcase": false, "constructor": false}, {"identifier": "lastIndex", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lastIndex()", "full_signature": "@Override public long lastIndex()", "class_method_signature": "AbstractReplicatedLogImpl.lastIndex()", "testcase": false, "constructor": false}, {"identifier": "lastTerm", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lastTerm()", "full_signature": "@Override public long lastTerm()", "class_method_signature": "AbstractReplicatedLogImpl.lastTerm()", "testcase": false, "constructor": false}, {"identifier": "removeFrom", "parameters": "(long logEntryIndex)", "modifiers": "@Override public", "return": "long", "signature": "long removeFrom(long logEntryIndex)", "full_signature": "@Override public long removeFrom(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.removeFrom(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(ReplicatedLogEntry replicatedLogEntry)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean append(ReplicatedLogEntry replicatedLogEntry)", "full_signature": "@Override public boolean append(ReplicatedLogEntry replicatedLogEntry)", "class_method_signature": "AbstractReplicatedLogImpl.append(ReplicatedLogEntry replicatedLogEntry)", "testcase": false, "constructor": false}, {"identifier": "increaseJournalLogCapacity", "parameters": "(int amount)", "modifiers": "@Override public", "return": "void", "signature": "void increaseJournalLogCapacity(int amount)", "full_signature": "@Override public void increaseJournalLogCapacity(int amount)", "class_method_signature": "AbstractReplicatedLogImpl.increaseJournalLogCapacity(int amount)", "testcase": false, "constructor": false}, {"identifier": "getFrom", "parameters": "(long logEntryIndex)", "modifiers": "@Override public", "return": "List<ReplicatedLogEntry>", "signature": "List<ReplicatedLogEntry> getFrom(long logEntryIndex)", "full_signature": "@Override public List<ReplicatedLogEntry> getFrom(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.getFrom(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "getFrom", "parameters": "(long logEntryIndex, int maxEntries, long maxDataSize)", "modifiers": "@Override public", "return": "List<ReplicatedLogEntry>", "signature": "List<ReplicatedLogEntry> getFrom(long logEntryIndex, int maxEntries, long maxDataSize)", "full_signature": "@Override public List<ReplicatedLogEntry> getFrom(long logEntryIndex, int maxEntries, long maxDataSize)", "class_method_signature": "AbstractReplicatedLogImpl.getFrom(long logEntryIndex, int maxEntries, long maxDataSize)", "testcase": false, "constructor": false}, {"identifier": "copyJournalEntries", "parameters": "(int fromIndex, int toIndex, long maxDataSize)", "modifiers": "private", "return": "List<ReplicatedLogEntry>", "signature": "List<ReplicatedLogEntry> copyJournalEntries(int fromIndex, int toIndex, long maxDataSize)", "full_signature": "private List<ReplicatedLogEntry> copyJournalEntries(int fromIndex, int toIndex, long maxDataSize)", "class_method_signature": "AbstractReplicatedLogImpl.copyJournalEntries(int fromIndex, int toIndex, long maxDataSize)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "AbstractReplicatedLogImpl.size()", "testcase": false, "constructor": false}, {"identifier": "dataSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int dataSize()", "full_signature": "@Override public int dataSize()", "class_method_signature": "AbstractReplicatedLogImpl.dataSize()", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "(long logEntryIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPresent(long logEntryIndex)", "full_signature": "@Override public boolean isPresent(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.isPresent(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "isInSnapshot", "parameters": "(long logEntryIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInSnapshot(long logEntryIndex)", "full_signature": "@Override public boolean isInSnapshot(long logEntryIndex)", "class_method_signature": "AbstractReplicatedLogImpl.isInSnapshot(long logEntryIndex)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotIndex", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSnapshotIndex()", "full_signature": "@Override public long getSnapshotIndex()", "class_method_signature": "AbstractReplicatedLogImpl.getSnapshotIndex()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotTerm", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSnapshotTerm()", "full_signature": "@Override public long getSnapshotTerm()", "class_method_signature": "AbstractReplicatedLogImpl.getSnapshotTerm()", "testcase": false, "constructor": false}, {"identifier": "setSnapshotIndex", "parameters": "(long snapshotIndex)", "modifiers": "@Override public", "return": "void", "signature": "void setSnapshotIndex(long snapshotIndex)", "full_signature": "@Override public void setSnapshotIndex(long snapshotIndex)", "class_method_signature": "AbstractReplicatedLogImpl.setSnapshotIndex(long snapshotIndex)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotTerm", "parameters": "(long snapshotTerm)", "modifiers": "@Override public", "return": "void", "signature": "void setSnapshotTerm(long snapshotTerm)", "full_signature": "@Override public void setSnapshotTerm(long snapshotTerm)", "class_method_signature": "AbstractReplicatedLogImpl.setSnapshotTerm(long snapshotTerm)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(int startIndex, int endIndex)", "modifiers": "@Override public", "return": "void", "signature": "void clear(int startIndex, int endIndex)", "full_signature": "@Override public void clear(int startIndex, int endIndex)", "class_method_signature": "AbstractReplicatedLogImpl.clear(int startIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "snapshotPreCommit", "parameters": "(long snapshotCapturedIndex, long snapshotCapturedTerm)", "modifiers": "@Override public", "return": "void", "signature": "void snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "full_signature": "@Override public void snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "class_method_signature": "AbstractReplicatedLogImpl.snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "testcase": false, "constructor": false}, {"identifier": "snapshotCommit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void snapshotCommit()", "full_signature": "@Override public void snapshotCommit()", "class_method_signature": "AbstractReplicatedLogImpl.snapshotCommit()", "testcase": false, "constructor": false}, {"identifier": "snapshotRollback", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void snapshotRollback()", "full_signature": "@Override public void snapshotRollback()", "class_method_signature": "AbstractReplicatedLogImpl.snapshotRollback()", "testcase": false, "constructor": false}, {"identifier": "getAtPhysicalIndex", "parameters": "(int index)", "modifiers": "@VisibleForTesting", "return": "ReplicatedLogEntry", "signature": "ReplicatedLogEntry getAtPhysicalIndex(int index)", "full_signature": "@VisibleForTesting ReplicatedLogEntry getAtPhysicalIndex(int index)", "class_method_signature": "AbstractReplicatedLogImpl.getAtPhysicalIndex(int index)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/AbstractReplicatedLogImpl.java"}, "focal_method": {"identifier": "snapshotPreCommit", "parameters": "(long snapshotCapturedIndex, long snapshotCapturedTerm)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm) {\n        Preconditions.checkArgument(snapshotCapturedIndex >= snapshotIndex,\n                \"snapshotCapturedIndex must be greater than or equal to snapshotIndex\");\n\n        snapshottedJournal = new ArrayList<>(journal.size());\n\n        List<ReplicatedLogEntry> snapshotJournalEntries =\n                journal.subList(0, (int) (snapshotCapturedIndex - snapshotIndex));\n\n        snapshottedJournal.addAll(snapshotJournalEntries);\n        snapshotJournalEntries.clear();\n\n        previousSnapshotIndex = snapshotIndex;\n        setSnapshotIndex(snapshotCapturedIndex);\n\n        previousSnapshotTerm = snapshotTerm;\n        setSnapshotTerm(snapshotCapturedTerm);\n    }", "signature": "void snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "full_signature": "@Override public void snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "class_method_signature": "AbstractReplicatedLogImpl.snapshotPreCommit(long snapshotCapturedIndex, long snapshotCapturedTerm)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "size", "subList", "addAll", "clear", "setSnapshotIndex", "setSnapshotTerm"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}