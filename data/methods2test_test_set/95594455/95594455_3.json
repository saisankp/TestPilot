{"test_class": {"identifier": "CountedMethodBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String COUNTER_NAME = \"countedMethod\";", "modifier": "private final static", "type": "String", "declarator": "COUNTER_NAME = \"countedMethod\"", "var_name": "COUNTER_NAME"}, {"original_string": "private static MetricID counterMetricID;", "modifier": "private static", "type": "MetricID", "declarator": "counterMetricID", "var_name": "counterMetricID"}, {"original_string": "private final static AtomicLong COUNTER_COUNT = new AtomicLong();", "modifier": "private final static", "type": "AtomicLong", "declarator": "COUNTER_COUNT = new AtomicLong()", "var_name": "COUNTER_COUNT"}, {"original_string": "@Inject\n    private MetricRegistry registry;", "modifier": "@Inject\n    private", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Inject\n    private CountedMethodBean<Long> bean;", "modifier": "@Inject\n    private", "type": "CountedMethodBean<Long>", "declarator": "bean", "var_name": "bean"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/CountedMethodBeanTest.java"}, "test_case": {"identifier": "removeCounterFromRegistry", "parameters": "()", "modifiers": "@Test @InSequence(4) public", "return": "void", "body": "@Test\n    @InSequence(4)\n    public void removeCounterFromRegistry() {\n        Counter counter = registry.getCounter(counterMetricID);\n        assertThat(\"Counter is not registered correctly\", counter, notNullValue());\n\n        // Remove the counter from metrics registry\n        registry.remove(counterMetricID);\n\n        try {\n            // Call the counted method and assert an exception is thrown\n            bean.countedMethod(new Callable<Long>() {\n                @Override\n                public Long call() throws Exception {\n                    return null;\n                }\n            });\n        }\n        catch (Exception cause) {\n            assertThat(cause, is(Matchers.<Exception>instanceOf(IllegalStateException.class)));\n            // Make sure that the counter hasn't been called\n            assertThat(\"Counter count is incorrect\", counter.getCount(), is(equalTo(COUNTER_COUNT.get())));\n            return;\n        }\n\n        fail(\"No exception has been re-thrown!\");\n    }", "signature": "void removeCounterFromRegistry()", "full_signature": "@Test @InSequence(4) public void removeCounterFromRegistry()", "class_method_signature": "CountedMethodBeanTest.removeCounterFromRegistry()", "testcase": true, "constructor": false, "invocations": ["getCounter", "assertThat", "notNullValue", "remove", "countedMethod", "assertThat", "is", "instanceOf", "assertThat", "getCount", "is", "equalTo", "get", "fail"]}, "focal_class": {"identifier": "CountedMethodBean", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countedMethod", "parameters": "(Callable<T> callable)", "modifiers": "@Counted(name = \"countedMethod\", absolute = true) public", "return": "T", "signature": "T countedMethod(Callable<T> callable)", "full_signature": "@Counted(name = \"countedMethod\", absolute = true) public T countedMethod(Callable<T> callable)", "class_method_signature": "CountedMethodBean.countedMethod(Callable<T> callable)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/metrics/CountedMethodBean.java"}, "focal_method": {"identifier": "countedMethod", "parameters": "(Callable<T> callable)", "modifiers": "@Counted(name = \"countedMethod\", absolute = true) public", "return": "T", "body": "@Counted(name = \"countedMethod\", absolute = true)\n    public T countedMethod(Callable<T> callable) {\n        try {\n            return callable.call();\n        }\n        catch (Exception cause) {\n            throw new RuntimeException(cause);\n        }\n    }", "signature": "T countedMethod(Callable<T> callable)", "full_signature": "@Counted(name = \"countedMethod\", absolute = true) public T countedMethod(Callable<T> callable)", "class_method_signature": "CountedMethodBean.countedMethod(Callable<T> callable)", "testcase": false, "constructor": false, "invocations": ["call"]}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}