{"test_class": {"identifier": "CommitMarkerCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n  public static final TemporaryFolder TMP_FOLDER = new TemporaryFolder();", "modifier": "@ClassRule\n  public static final", "type": "TemporaryFolder", "declarator": "TMP_FOLDER = new TemporaryFolder()", "var_name": "TMP_FOLDER"}, {"original_string": "private static final String LOG_FILE = \"txlog\";", "modifier": "private static final", "type": "String", "declarator": "LOG_FILE = \"txlog\"", "var_name": "LOG_FILE"}, {"original_string": "private static final Random RANDOM = new Random();", "modifier": "private static final", "type": "Random", "declarator": "RANDOM = new Random()", "var_name": "RANDOM"}, {"original_string": "private static MiniDFSCluster dfsCluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "dfsCluster", "var_name": "dfsCluster"}, {"original_string": "private static Configuration conf;", "modifier": "private static", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private static FileSystem fs;", "modifier": "private static", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}], "file": "tephra-core/src/test/java/co/cask/tephra/persist/CommitMarkerCodecTest.java"}, "test_case": {"identifier": "testIncompleteCommitMarker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIncompleteCommitMarker() throws Exception {\n    Path newLog = new Path(TMP_FOLDER.newFolder().getAbsolutePath(), LOG_FILE);\n    try (SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, newLog, LongWritable.class,\n                                                                LongWritable.class,\n                                                                SequenceFile.CompressionType.NONE)) {\n      String key = TxConstants.TransactionLog.NUM_ENTRIES_APPENDED;\n      SequenceFile.ValueBytes valueBytes = new IncompleteValueBytes();\n      writer.appendRaw(key.getBytes(), 0, key.length(), valueBytes);\n      writer.hflush();\n      writer.hsync();\n    }\n\n    // Read the incomplete commit marker\n    try (SequenceFile.Reader reader = new SequenceFile.Reader(fs, newLog, conf);\n         CommitMarkerCodec markerCodec = new CommitMarkerCodec()) {\n      try {\n        markerCodec.readMarker(reader);\n        Assert.fail(\"Expected EOF Exception to be thrown\");\n      } catch (EOFException e) {\n        // expected since we didn't write the value bytes\n      }\n    }\n  }", "signature": "void testIncompleteCommitMarker()", "full_signature": "@Test public void testIncompleteCommitMarker()", "class_method_signature": "CommitMarkerCodecTest.testIncompleteCommitMarker()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "newFolder", "createWriter", "appendRaw", "getBytes", "length", "hflush", "hsync", "readMarker", "fail"]}, "focal_class": {"identifier": "CommitMarkerCodec", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final byte[] KEY_BYTES = TxConstants.TransactionLog.NUM_ENTRIES_APPENDED.getBytes(Charsets.UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "KEY_BYTES = TxConstants.TransactionLog.NUM_ENTRIES_APPENDED.getBytes(Charsets.UTF_8)", "var_name": "KEY_BYTES"}, {"original_string": "private final DataOutputBuffer rawKey;", "modifier": "private final", "type": "DataOutputBuffer", "declarator": "rawKey", "var_name": "rawKey"}, {"original_string": "private final DataOutputBuffer rawValue;", "modifier": "private final", "type": "DataOutputBuffer", "declarator": "rawValue", "var_name": "rawValue"}, {"original_string": "private SequenceFile.ValueBytes valueBytes;", "modifier": "private", "type": "SequenceFile.ValueBytes", "declarator": "valueBytes", "var_name": "valueBytes"}], "methods": [{"identifier": "CommitMarkerCodec", "parameters": "()", "modifiers": "public", "return": "", "signature": " CommitMarkerCodec()", "full_signature": "public  CommitMarkerCodec()", "class_method_signature": "CommitMarkerCodec.CommitMarkerCodec()", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CommitMarkerCodec.close()", "testcase": false, "constructor": false}, {"identifier": "readMarker", "parameters": "(SequenceFile.Reader reader)", "modifiers": "public", "return": "int", "signature": "int readMarker(SequenceFile.Reader reader)", "full_signature": "public int readMarker(SequenceFile.Reader reader)", "class_method_signature": "CommitMarkerCodec.readMarker(SequenceFile.Reader reader)", "testcase": false, "constructor": false}, {"identifier": "isMarkerValid", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isMarkerValid()", "full_signature": "private boolean isMarkerValid()", "class_method_signature": "CommitMarkerCodec.isMarkerValid()", "testcase": false, "constructor": false}, {"identifier": "writeMarker", "parameters": "(SequenceFile.Writer writer, int count)", "modifiers": "public static", "return": "void", "signature": "void writeMarker(SequenceFile.Writer writer, int count)", "full_signature": "public static void writeMarker(SequenceFile.Writer writer, int count)", "class_method_signature": "CommitMarkerCodec.writeMarker(SequenceFile.Writer writer, int count)", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/persist/CommitMarkerCodec.java"}, "focal_method": {"identifier": "readMarker", "parameters": "(SequenceFile.Reader reader)", "modifiers": "public", "return": "int", "body": "public int readMarker(SequenceFile.Reader reader) throws IOException {\n    if (valueBytes == null) {\n      valueBytes = reader.createValueBytes();\n    }\n    rawKey.reset();\n    rawValue.reset();\n\n    // valueBytes need not be reset since nextRaw call does it (and it is a private method)\n    int status = reader.nextRaw(rawKey, valueBytes);\n\n    // if we reach EOF, return -1\n    if (status == -1) {\n      return -1;\n    }\n\n    // Check if the marker key is valid and return the count\n    if (isMarkerValid()) {\n      valueBytes.writeUncompressedBytes(rawValue);\n      rawValue.flush();\n      // rawValue.getData() may return a larger byte array but Ints.fromByteArray will only read the first four bytes\n      return Ints.fromByteArray(rawValue.getData());\n    }\n\n    // EOF not reached and marker is not valid, then thrown an IOException since we can't make progress\n    throw new IOException(String.format(\"Invalid key for num entries appended found %s, expected : %s\",\n                                        new String(rawKey.getData()), TxConstants.TransactionLog.NUM_ENTRIES_APPENDED));\n  }", "signature": "int readMarker(SequenceFile.Reader reader)", "full_signature": "public int readMarker(SequenceFile.Reader reader)", "class_method_signature": "CommitMarkerCodec.readMarker(SequenceFile.Reader reader)", "testcase": false, "constructor": false, "invocations": ["createValueBytes", "reset", "reset", "nextRaw", "isMarkerValid", "writeUncompressedBytes", "flush", "fromByteArray", "getData", "format", "getData"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}