{"test_class": {"identifier": "MnemonicUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SAMPLE_FILE = \"build/resources/test/mnemonics/test-vectors.txt\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_FILE = \"build/resources/test/mnemonics/test-vectors.txt\"", "var_name": "SAMPLE_FILE"}, {"original_string": "private byte[] initialEntropy;", "modifier": "private", "type": "byte[]", "declarator": "initialEntropy", "var_name": "initialEntropy"}, {"original_string": "private String mnemonic;", "modifier": "private", "type": "String", "declarator": "mnemonic", "var_name": "mnemonic"}, {"original_string": "private byte[] seed;", "modifier": "private", "type": "byte[]", "declarator": "seed", "var_name": "seed"}], "file": "crypto/src/test/java/org/web3j/crypto/MnemonicUtilsTest.java"}, "test_case": {"identifier": "generateSeedShouldGenerateExpectedSeeds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateSeedShouldGenerateExpectedSeeds() {\n        byte[] actualSeed = MnemonicUtils.generateSeed(mnemonic, \"TREZOR\");\n\n        assertArrayEquals(seed, actualSeed);\n    }", "signature": "void generateSeedShouldGenerateExpectedSeeds()", "full_signature": "@Test public void generateSeedShouldGenerateExpectedSeeds()", "class_method_signature": "MnemonicUtilsTest.generateSeedShouldGenerateExpectedSeeds()", "testcase": true, "constructor": false, "invocations": ["generateSeed", "assertArrayEquals"]}, "focal_class": {"identifier": "MnemonicUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SEED_ITERATIONS = 2048;", "modifier": "private static final", "type": "int", "declarator": "SEED_ITERATIONS = 2048", "var_name": "SEED_ITERATIONS"}, {"original_string": "private static final int SEED_KEY_SIZE = 512;", "modifier": "private static final", "type": "int", "declarator": "SEED_KEY_SIZE = 512", "var_name": "SEED_KEY_SIZE"}, {"original_string": "private static final List<String> WORD_LIST = populateWordList();", "modifier": "private static final", "type": "List<String>", "declarator": "WORD_LIST = populateWordList()", "var_name": "WORD_LIST"}], "methods": [{"identifier": "generateMnemonic", "parameters": "(byte[] initialEntropy)", "modifiers": "public static", "return": "String", "signature": "String generateMnemonic(byte[] initialEntropy)", "full_signature": "public static String generateMnemonic(byte[] initialEntropy)", "class_method_signature": "MnemonicUtils.generateMnemonic(byte[] initialEntropy)", "testcase": false, "constructor": false}, {"identifier": "generateSeed", "parameters": "(String mnemonic, String passphrase)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] generateSeed(String mnemonic, String passphrase)", "full_signature": "public static byte[] generateSeed(String mnemonic, String passphrase)", "class_method_signature": "MnemonicUtils.generateSeed(String mnemonic, String passphrase)", "testcase": false, "constructor": false}, {"identifier": "validateMnemonic", "parameters": "(String mnemonic)", "modifiers": "private static", "return": "void", "signature": "void validateMnemonic(String mnemonic)", "full_signature": "private static void validateMnemonic(String mnemonic)", "class_method_signature": "MnemonicUtils.validateMnemonic(String mnemonic)", "testcase": false, "constructor": false}, {"identifier": "nextElevenBits", "parameters": "(boolean[] bits, int i)", "modifiers": "private static", "return": "boolean[]", "signature": "boolean[] nextElevenBits(boolean[] bits, int i)", "full_signature": "private static boolean[] nextElevenBits(boolean[] bits, int i)", "class_method_signature": "MnemonicUtils.nextElevenBits(boolean[] bits, int i)", "testcase": false, "constructor": false}, {"identifier": "validateInitialEntropy", "parameters": "(byte[] initialEntropy)", "modifiers": "private static", "return": "void", "signature": "void validateInitialEntropy(byte[] initialEntropy)", "full_signature": "private static void validateInitialEntropy(byte[] initialEntropy)", "class_method_signature": "MnemonicUtils.validateInitialEntropy(byte[] initialEntropy)", "testcase": false, "constructor": false}, {"identifier": "convertToBits", "parameters": "(byte[] initialEntropy, byte checksum)", "modifiers": "private static", "return": "boolean[]", "signature": "boolean[] convertToBits(byte[] initialEntropy, byte checksum)", "full_signature": "private static boolean[] convertToBits(byte[] initialEntropy, byte checksum)", "class_method_signature": "MnemonicUtils.convertToBits(byte[] initialEntropy, byte checksum)", "testcase": false, "constructor": false}, {"identifier": "toBit", "parameters": "(byte value, int index)", "modifiers": "private static", "return": "boolean", "signature": "boolean toBit(byte value, int index)", "full_signature": "private static boolean toBit(byte value, int index)", "class_method_signature": "MnemonicUtils.toBit(byte value, int index)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(boolean[] bits)", "modifiers": "private static", "return": "int", "signature": "int toInt(boolean[] bits)", "full_signature": "private static int toInt(boolean[] bits)", "class_method_signature": "MnemonicUtils.toInt(boolean[] bits)", "testcase": false, "constructor": false}, {"identifier": "calculateChecksum", "parameters": "(byte[] initialEntropy)", "modifiers": "private static", "return": "byte", "signature": "byte calculateChecksum(byte[] initialEntropy)", "full_signature": "private static byte calculateChecksum(byte[] initialEntropy)", "class_method_signature": "MnemonicUtils.calculateChecksum(byte[] initialEntropy)", "testcase": false, "constructor": false}, {"identifier": "populateWordList", "parameters": "()", "modifiers": "private static", "return": "List<String>", "signature": "List<String> populateWordList()", "full_signature": "private static List<String> populateWordList()", "class_method_signature": "MnemonicUtils.populateWordList()", "testcase": false, "constructor": false}, {"identifier": "readAllLines", "parameters": "(String path)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readAllLines(String path)", "full_signature": "public static List<String> readAllLines(String path)", "class_method_signature": "MnemonicUtils.readAllLines(String path)", "testcase": false, "constructor": false}], "file": "crypto/src/main/java/org/web3j/crypto/MnemonicUtils.java"}, "focal_method": {"identifier": "generateSeed", "parameters": "(String mnemonic, String passphrase)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] generateSeed(String mnemonic, String passphrase) {\n        validateMnemonic(mnemonic);\n        passphrase = passphrase == null ? \"\" : passphrase;\n\n        String salt = String.format(\"mnemonic%s\", passphrase);\n        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA512Digest());\n        gen.init(mnemonic.getBytes(Charset.forName(\"UTF-8\")), salt.getBytes(Charset.forName(\"UTF-8\")), SEED_ITERATIONS);\n\n        return ((KeyParameter) gen.generateDerivedParameters(SEED_KEY_SIZE)).getKey();\n    }", "signature": "byte[] generateSeed(String mnemonic, String passphrase)", "full_signature": "public static byte[] generateSeed(String mnemonic, String passphrase)", "class_method_signature": "MnemonicUtils.generateSeed(String mnemonic, String passphrase)", "testcase": false, "constructor": false, "invocations": ["validateMnemonic", "format", "init", "getBytes", "forName", "getBytes", "forName", "getKey", "generateDerivedParameters"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}