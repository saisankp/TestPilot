{"test_class": {"identifier": "CrescentHighlighterTest", "superclass": "extends CrescentTestCaseUtil", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/search/highlight/CrescentHighlighterTest.java"}, "test_case": {"identifier": "fastVectorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fastVectorTest() throws IOException {\n\t\t//Directory dir = new RAMDirectory();\n        //IndexWriter indexWriter = new IndexWriter(dir, new IndexWriterConfig(Lucene.VERSION, Lucene.STANDARD_ANALYZER));\n \n        //indexWriter.addDocument(doc().add(field(\"_id\", \"1\")).add(field(\"content\", \"the big bad dog\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS)).build());\n \n        //IndexReader reader = IndexReader.open(indexWriter, true);\n        //IndexSearcher searcher = new IndexSearcher(reader);\n        //TopDocs topDocs = searcher.search(new TermQuery(new Term(\"_id\", \"1\")), 1);\n \n\t\tSearchRequest searchRequest = new SearchRequest();\n\t\tsearchRequest.setKeyword(\"\uc785\ub2c8\ub2e4\");\n\t\tsearchRequest.setCollectionName(\"sample\");\n\t\tsearchRequest.setSearchField(\"title,dscr\");\n\n\t\t//IndexWriterManager indexWriterManager = IndexWriterManager.getIndexWriterManager();\n\t\t//IndexWriter indexWriter = indexWriterManager.getIndexWriter(\"sample\");\n\t\t//IndexReader indexReader = IndexReader.open(indexWriter, true);\n\t\t\n\t\tSearcherManager searcherManager = crescentSearcherManager.getSearcherManager(\"sample\");\n\t\tIndexSearcher indexSearcher = searcherManager.acquire();\n\t\t\n\t\tIndexReader indexReader = indexSearcher.getIndexReader();\n\t\t\n\t\tTopDocs topDocs = indexSearcher.search(new TermQuery(new Term(\"dscr\", \"\uc785\ub2c8\ub2e4\")), 3);\n\t\t\n\t\tSystem.out.println(\"ddd : \" + indexReader.document(0));\n\t\tSystem.out.println(topDocs.totalHits);\n\n\t\tFastVectorHighlighter highlighter = new FastVectorHighlighter();\n\t\t\n\t\tSystem.out.println(\"field query : \" + highlighter.getFieldQuery(new TermQuery(new Term(\"dscr\", \"\uc785\ub2c8\ub2e4\"))));\n\t\t\n\t\t//System.out.println(topDocs.scoreDocs[0].doc);\n\t\tString fragment = highlighter.getBestFragment(highlighter.getFieldQuery(new TermQuery(new Term(\"dscr\", \"\ud14d\uc2a4\ud2b8\"))),\n\t\t\t\tindexReader, topDocs.scoreDocs[0].doc, \"dscr\", 30);\n\t\t\n\t\tSystem.out.println(fragment);\n\t\t\n//        assertThat(topDocs.totalHits, equalTo(1));\n// \n//        FastVectorHighlighter highlighter = new FastVectorHighlighter();\n//        String fragment = highlighter.getBestFragment(highlighter.getFieldQuery(new TermQuery(new Term(\"content\", \"bad\"))),\n//                reader, topDocs.scoreDocs[0].doc, \"content\", 30);\n//        assertThat(fragment, notNullValue());\n//        System.out.println(fragment);\n\t\t\n\t}", "signature": "void fastVectorTest()", "full_signature": "@Test public void fastVectorTest()", "class_method_signature": "CrescentHighlighterTest.fastVectorTest()", "testcase": true, "constructor": false, "invocations": ["setKeyword", "setCollectionName", "setSearchField", "getSearcherManager", "acquire", "getIndexReader", "search", "println", "document", "println", "println", "getFieldQuery", "getBestFragment", "getFieldQuery", "println"]}, "focal_class": {"identifier": "CrescentHighlighter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(CrescentHighlighter.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CrescentHighlighter.class)", "var_name": "logger"}, {"original_string": "private SimpleHTMLFormatter formatter = new SimpleHTMLFormatter(\"<b>\",\"</b>\");", "modifier": "private", "type": "SimpleHTMLFormatter", "declarator": "formatter = new SimpleHTMLFormatter(\"<b>\",\"</b>\")", "var_name": "formatter"}], "methods": [{"identifier": "getBestFragment", "parameters": "(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "modifiers": "public", "return": "String", "signature": "String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "full_signature": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "class_method_signature": "CrescentHighlighter.getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/search/highlight/CrescentHighlighter.java"}, "focal_method": {"identifier": "getBestFragment", "parameters": "(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "modifiers": "public", "return": "String", "body": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer) throws CrescentInvalidRequestException {\n\t\tString fragment = \"\";\n\n\t\tlogger.debug(\"fieldName : {}\", field.getName());\n\n\t\ttry {\n\t\t\t\n\t\t\tlogger.debug(\"query for highlighter : {}\" , query);\n\n\t\t\tQueryScorer scorer = new QueryScorer(query);\n\n\t\t\tHighlighter highlighter = new Highlighter(formatter, scorer);\n\t\t\thighlighter.setTextFragmenter(new SimpleFragmenter(50));\n\n\n\t\t\tTokenStream stream = analyzer.tokenStream(field.getName(), new StringReader(value));\n\t\t\tfragment = highlighter.getBestFragments(stream, value, 1, \"...\");\n\n\t\t\tif(fragment == null || \"\".equals(fragment)) {\n\t\t\t\tif(value.length() > 100) {\n\t\t\t\t\tfragment = value.substring(0,100);\n\t\t\t\t} else {\n\t\t\t\t\tfragment = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn fragment;\n\t\t\t\n\t\t} catch (IOException e) {\n\n\t\t\tlogger.error(\"error in crescent highlighter\", e);\n\n\t\t\treturn value;\n\t\t\t\n\t\t} catch (InvalidTokenOffsetsException e) {\n\n\t\t\tlogger.error(\"error in crescent highlighter\", e);\n\n\t\t\treturn value;\n\t\t}\n\n\t}", "signature": "String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "full_signature": "public String getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "class_method_signature": "CrescentHighlighter.getBestFragment(CrescentCollectionField field, String value, Query query, Analyzer analyzer)", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "debug", "setTextFragmenter", "tokenStream", "getName", "getBestFragments", "equals", "length", "substring", "error", "error"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}