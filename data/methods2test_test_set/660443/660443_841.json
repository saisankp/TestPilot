{"test_class": {"identifier": "TemplateHandlerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "public boolean                           standAlone = false;", "modifier": "public", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}, {"original_string": "private static ILoggingTool              logger     = LoggingToolFactory\n                                                                .createLoggingTool(TemplateHandlerTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger     = LoggingToolFactory\n                                                                .createLoggingTool(TemplateHandlerTest.class)", "var_name": "logger"}, {"original_string": "private static SmilesParser              sp         = null;", "modifier": "private static", "type": "SmilesParser", "declarator": "sp         = null", "var_name": "sp"}, {"original_string": "private static StructureDiagramGenerator sdg        = null;", "modifier": "private static", "type": "StructureDiagramGenerator", "declarator": "sdg        = null", "var_name": "sdg"}], "file": "tool/sdg/src/test/java/org/openscience/cdk/layout/TemplateHandlerTest.java"}, "test_case": {"identifier": "testOtherBondOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOtherBondOrder() throws Exception {\n        boolean itIsInThere = false;\n        TemplateHandler th = new TemplateHandler(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = TestMoleculeFactory.makeSteran();\n        itIsInThere = th.mapTemplates(mol);\n        Assert.assertTrue(itIsInThere);\n        mol.getBond(0).setOrder(IBond.Order.DOUBLE);\n        itIsInThere = th.mapTemplates(mol);\n        Assert.assertTrue(itIsInThere);\n    }", "signature": "void testOtherBondOrder()", "full_signature": "@Test public void testOtherBondOrder()", "class_method_signature": "TemplateHandlerTest.testOtherBondOrder()", "testcase": true, "constructor": false, "invocations": ["getInstance", "makeSteran", "mapTemplates", "assertTrue", "setOrder", "getBond", "mapTemplates", "assertTrue"]}, "focal_class": {"identifier": "TemplateHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ILoggingTool         LOGGER       = LoggingToolFactory.createLoggingTool(TemplateHandler.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER       = LoggingToolFactory.createLoggingTool(TemplateHandler.class)", "var_name": "LOGGER"}, {"original_string": "private final        List<IAtomContainer> templates    = new ArrayList<>();", "modifier": "private final", "type": "List<IAtomContainer>", "declarator": "templates    = new ArrayList<>()", "var_name": "templates"}, {"original_string": "private final        List<Pattern>        anonPatterns = new ArrayList<>();", "modifier": "private final", "type": "List<Pattern>", "declarator": "anonPatterns = new ArrayList<>()", "var_name": "anonPatterns"}, {"original_string": "private final        List<Pattern>        elemPatterns = new ArrayList<>();", "modifier": "private final", "type": "List<Pattern>", "declarator": "elemPatterns = new ArrayList<>()", "var_name": "elemPatterns"}, {"original_string": "private final AtomMatcher elemAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return a.getAtomicNumber().equals(b.getAtomicNumber());\n        }\n    };", "modifier": "private final", "type": "AtomMatcher", "declarator": "elemAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return a.getAtomicNumber().equals(b.getAtomicNumber());\n        }\n    }", "var_name": "elemAtomMatcher"}, {"original_string": "private final AtomMatcher anonAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return true;\n        }\n    };", "modifier": "private final", "type": "AtomMatcher", "declarator": "anonAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return true;\n        }\n    }", "var_name": "anonAtomMatcher"}, {"original_string": "private final BondMatcher anonBondMatcher = new BondMatcher() {\n        @Override\n        public boolean matches(IBond a, IBond b) {\n            return true;\n        }\n    };", "modifier": "private final", "type": "BondMatcher", "declarator": "anonBondMatcher = new BondMatcher() {\n        @Override\n        public boolean matches(IBond a, IBond b) {\n            return true;\n        }\n    }", "var_name": "anonBondMatcher"}], "methods": [{"identifier": "TemplateHandler", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " TemplateHandler(IChemObjectBuilder builder)", "full_signature": "public  TemplateHandler(IChemObjectBuilder builder)", "class_method_signature": "TemplateHandler.TemplateHandler(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "TemplateHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " TemplateHandler()", "full_signature": "public  TemplateHandler()", "class_method_signature": "TemplateHandler.TemplateHandler()", "testcase": false, "constructor": true}, {"identifier": "loadTemplates", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "void", "signature": "void loadTemplates(IChemObjectBuilder builder)", "full_signature": "public void loadTemplates(IChemObjectBuilder builder)", "class_method_signature": "TemplateHandler.loadTemplates(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "addMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "void", "signature": "void addMolecule(IAtomContainer molecule)", "full_signature": "public void addMolecule(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.addMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "removeMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer removeMolecule(IAtomContainer molecule)", "full_signature": "public IAtomContainer removeMolecule(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.removeMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "mapTemplateExact", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "boolean", "signature": "boolean mapTemplateExact(IAtomContainer molecule)", "full_signature": "public boolean mapTemplateExact(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.mapTemplateExact(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "mapTemplates", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "boolean", "signature": "boolean mapTemplates(IAtomContainer molecule)", "full_signature": "public boolean mapTemplates(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.mapTemplates(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getTemplateCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTemplateCount()", "full_signature": "public int getTemplateCount()", "class_method_signature": "TemplateHandler.getTemplateCount()", "testcase": false, "constructor": false}, {"identifier": "getTemplateAt", "parameters": "(int position)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getTemplateAt(int position)", "full_signature": "public IAtomContainer getTemplateAt(int position)", "class_method_signature": "TemplateHandler.getTemplateAt(int position)", "testcase": false, "constructor": false}, {"identifier": "getMappedSubstructures", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getMappedSubstructures(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getMappedSubstructures(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.getMappedSubstructures(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "createSingleton", "parameters": "(IAtomContainer template)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createSingleton(IAtomContainer template)", "full_signature": "public static TemplateHandler createSingleton(IAtomContainer template)", "class_method_signature": "TemplateHandler.createSingleton(IAtomContainer template)", "testcase": false, "constructor": false}, {"identifier": "createFromSubstructure", "parameters": "(Pattern ptrn, Iterable<IAtomContainer> mols)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "full_signature": "public static TemplateHandler createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "class_method_signature": "TemplateHandler.createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "testcase": false, "constructor": false}, {"identifier": "createFromSubstructure", "parameters": "(Pattern ptrn, IAtomContainer mol)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "full_signature": "public static TemplateHandler createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "class_method_signature": "TemplateHandler.createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "toIdentityTemplateLibrary", "parameters": "()", "modifiers": "", "return": "IdentityTemplateLibrary", "signature": "IdentityTemplateLibrary toIdentityTemplateLibrary()", "full_signature": " IdentityTemplateLibrary toIdentityTemplateLibrary()", "class_method_signature": "TemplateHandler.toIdentityTemplateLibrary()", "testcase": false, "constructor": false}], "file": "tool/sdg/src/main/java/org/openscience/cdk/layout/TemplateHandler.java"}, "focal_method": {"identifier": "mapTemplates", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "boolean", "body": "public boolean mapTemplates(IAtomContainer molecule) throws CDKException {\n        // match element patterns first so hetero atoms are oriented correctly\n        for (Pattern anonPattern : elemPatterns) {\n            for (Map<IAtom, IAtom> atoms : anonPattern.matchAll(molecule).toAtomMap()) {\n                for (Map.Entry<IAtom, IAtom> e : atoms.entrySet()) {\n                    e.getValue().setPoint2d(new Point2d(e.getKey().getPoint2d()));\n                    e.getValue().setFlag(CDKConstants.ISPLACED, true);\n                }\n                if (!atoms.isEmpty())\n                    return true;\n            }\n        }\n        // no element pattern matched, try anonymous patterns\n        for (Pattern anonPattern : anonPatterns) {\n            for (Map<IAtom, IAtom> atoms : anonPattern.matchAll(molecule).toAtomMap()) {\n                for (Map.Entry<IAtom, IAtom> e : atoms.entrySet()) {\n                    e.getValue().setPoint2d(new Point2d(e.getKey().getPoint2d()));\n                    e.getValue().setFlag(CDKConstants.ISPLACED, true);\n                }\n                if (!atoms.isEmpty())\n                    return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean mapTemplates(IAtomContainer molecule)", "full_signature": "public boolean mapTemplates(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.mapTemplates(IAtomContainer molecule)", "testcase": false, "constructor": false, "invocations": ["toAtomMap", "matchAll", "entrySet", "setPoint2d", "getValue", "getPoint2d", "getKey", "setFlag", "getValue", "isEmpty", "toAtomMap", "matchAll", "entrySet", "setPoint2d", "getValue", "getPoint2d", "getKey", "setFlag", "getValue", "isEmpty"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}