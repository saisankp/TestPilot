{"test_class": {"identifier": "SonarPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    SonarPlugin sonar;", "modifier": "@InjectMocks", "type": "SonarPlugin", "declarator": "sonar", "var_name": "sonar"}, {"original_string": "@Mock\n    GenericSoftwareClient client;", "modifier": "@Mock", "type": "GenericSoftwareClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Mock\n    SonarConnectionFactory sonarConnectionFactory;", "modifier": "@Mock", "type": "SonarConnectionFactory", "declarator": "sonarConnectionFactory", "var_name": "sonarConnectionFactory"}, {"original_string": "@Mock\n    SonarVersionExtractor sonarVersionExtractor;", "modifier": "@Mock", "type": "SonarVersionExtractor", "declarator": "sonarVersionExtractor", "var_name": "sonarVersionExtractor"}, {"original_string": "@Mock\n    SonarDetector sonarDetector;", "modifier": "@Mock", "type": "SonarDetector", "declarator": "sonarDetector", "var_name": "sonarDetector"}, {"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/sonar/SonarPluginTest.java"}, "test_case": {"identifier": "should_get_valid_version", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_get_valid_version() {\n        assertTrue(sonar.getVersion() > 0);\n    }", "signature": "void should_get_valid_version()", "full_signature": "@Test public void should_get_valid_version()", "class_method_signature": "SonarPluginTest.should_get_valid_version()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getVersion"]}, "focal_class": {"identifier": "SonarPlugin", "superclass": "", "interfaces": "implements VisuwallPlugin<SonarConnection>", "fields": [{"original_string": "private static final double SONAR_MINIMUM_COMPATIBLE_VERSION = 2.4;", "modifier": "private static final", "type": "double", "declarator": "SONAR_MINIMUM_COMPATIBLE_VERSION = 2.4", "var_name": "SONAR_MINIMUM_COMPATIBLE_VERSION"}, {"original_string": "static final String SONAR_CORE_VERSION_KEY = \"sonar.core.version\";", "modifier": "static final", "type": "String", "declarator": "SONAR_CORE_VERSION_KEY = \"sonar.core.version\"", "var_name": "SONAR_CORE_VERSION_KEY"}, {"original_string": "private GenericSoftwareClient client;", "modifier": "private", "type": "GenericSoftwareClient", "declarator": "client", "var_name": "client"}, {"original_string": "private SonarConnectionFactory sonarConnectionFactory;", "modifier": "private", "type": "SonarConnectionFactory", "declarator": "sonarConnectionFactory", "var_name": "sonarConnectionFactory"}, {"original_string": "private SonarDetector sonarDetector = new SonarDetector();", "modifier": "private", "type": "SonarDetector", "declarator": "sonarDetector = new SonarDetector()", "var_name": "sonarDetector"}, {"original_string": "private SonarVersionExtractor sonarVersionExtractor = new SonarVersionExtractor();", "modifier": "private", "type": "SonarVersionExtractor", "declarator": "sonarVersionExtractor = new SonarVersionExtractor()", "var_name": "sonarVersionExtractor"}, {"original_string": "private SonarCompatibleVersionChecker sonarCompatibleVersionChecker = new SonarCompatibleVersionChecker(\n            SONAR_MINIMUM_COMPATIBLE_VERSION);", "modifier": "private", "type": "SonarCompatibleVersionChecker", "declarator": "sonarCompatibleVersionChecker = new SonarCompatibleVersionChecker(\n            SONAR_MINIMUM_COMPATIBLE_VERSION)", "var_name": "sonarCompatibleVersionChecker"}], "methods": [{"identifier": "SonarPlugin", "parameters": "()", "modifiers": "public", "return": "", "signature": " SonarPlugin()", "full_signature": "public  SonarPlugin()", "class_method_signature": "SonarPlugin.SonarPlugin()", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SonarConnection", "signature": "SonarConnection getConnection(URL url, Map<String, String> properties)", "full_signature": "@Override public SonarConnection getConnection(URL url, Map<String, String> properties)", "class_method_signature": "SonarPlugin.getConnection(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "getConnectionClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<SonarConnection>", "signature": "Class<SonarConnection> getConnectionClass()", "full_signature": "@Override public Class<SonarConnection> getConnectionClass()", "class_method_signature": "SonarPlugin.getConnectionClass()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SonarPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "SonarPlugin.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "SonarPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "createSoftwareIdFromWelcomePage", "parameters": "(URL url)", "modifiers": "private", "return": "SoftwareId", "signature": "SoftwareId createSoftwareIdFromWelcomePage(URL url)", "full_signature": "private SoftwareId createSoftwareIdFromWelcomePage(URL url)", "class_method_signature": "SonarPlugin.createSoftwareIdFromWelcomePage(URL url)", "testcase": false, "constructor": false}, {"identifier": "createSoftwareIdFromProperties", "parameters": "(URL url)", "modifiers": "private", "return": "SoftwareId", "signature": "SoftwareId createSoftwareIdFromProperties(URL url)", "full_signature": "private SoftwareId createSoftwareIdFromProperties(URL url)", "class_method_signature": "SonarPlugin.createSoftwareIdFromProperties(URL url)", "testcase": false, "constructor": false}, {"identifier": "createSoftwareId", "parameters": "(String version)", "modifiers": "private", "return": "SoftwareId", "signature": "SoftwareId createSoftwareId(String version)", "full_signature": "private SoftwareId createSoftwareId(String version)", "class_method_signature": "SonarPlugin.createSoftwareId(String version)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SonarPlugin.toString()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesWithDefaultValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getPropertiesWithDefaultValue()", "full_signature": "@Override public Map<String, String> getPropertiesWithDefaultValue()", "class_method_signature": "SonarPlugin.getPropertiesWithDefaultValue()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/sonar/SonarPlugin.java"}, "focal_method": {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "body": "@Override\n    public float getVersion() {\n        return 1.0f;\n    }", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "SonarPlugin.getVersion()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}