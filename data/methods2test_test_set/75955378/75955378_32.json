{"test_class": {"identifier": "ArraySplitOperationTest", "superclass": "extends OperationTest", "interfaces": "", "fields": [], "file": "operations/src/test/java/com/nextdoor/bender/operation/json/array/ArraySplitOperationTest.java"}, "test_case": {"identifier": "testMetadataMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMetadataMatch()\n      throws JsonSyntaxException, UnsupportedEncodingException, IOException {\n    JsonParser parser = new JsonParser();\n    TestContext t = new TestContext();\n    t.setFunctionName(\"foo\");\n    LambdaContext lctx = new LambdaContext(t);\n\n    JsonElement input = parser.parse(getResourceString(\"array_input.json\"));\n\n    GenericJsonEvent devent = new GenericJsonEvent(input.getAsJsonObject());\n    ArraySplitOperation operation = new ArraySplitOperation(\"$.arr\");\n\n    InternalEvent ievent = new InternalEvent(\"\", lctx, 1);\n    ievent.setEventObj(devent);\n    List<InternalEvent> events = operation.perform(ievent);\n\n\n    assertEquals(new Long(1), events.get(0).getEventMetadata().get(\"arrivalEpochMs\"));\n    assertEquals(\"6a00541bfa24fd59884de557be71f3a5a1344613\",\n        events.get(0).getEventMetadata().get(\"eventSha1Hash\"));\n\n    assertEquals(new Long(1), events.get(1).getEventMetadata().get(\"arrivalEpochMs\"));\n    assertEquals(\"5cbc013a144777d9ce51385ac24a95ce05f77075\",\n        events.get(1).getEventMetadata().get(\"eventSha1Hash\"));\n\n    assertEquals(new Long(1), events.get(2).getEventMetadata().get(\"arrivalEpochMs\"));\n    assertEquals(\"6c3023db7ef03721c27df9f33b26e0d2cbc84d6b\",\n        events.get(2).getEventMetadata().get(\"eventSha1Hash\"));\n  }", "signature": "void testMetadataMatch()", "full_signature": "@Test public void testMetadataMatch()", "class_method_signature": "ArraySplitOperationTest.testMetadataMatch()", "testcase": true, "constructor": false, "invocations": ["setFunctionName", "parse", "getResourceString", "getAsJsonObject", "setEventObj", "perform", "assertEquals", "get", "getEventMetadata", "get", "assertEquals", "get", "getEventMetadata", "get", "assertEquals", "get", "getEventMetadata", "get", "assertEquals", "get", "getEventMetadata", "get", "assertEquals", "get", "getEventMetadata", "get", "assertEquals", "get", "getEventMetadata", "get"]}, "focal_class": {"identifier": "ArraySplitOperation", "superclass": "", "interfaces": "implements MultiplexOperation", "fields": [{"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final List<String> fieldsToKeep;", "modifier": "private final", "type": "List<String>", "declarator": "fieldsToKeep", "var_name": "fieldsToKeep"}], "methods": [{"identifier": "ArraySplitOperation", "parameters": "(String path)", "modifiers": "public", "return": "", "signature": " ArraySplitOperation(String path)", "full_signature": "public  ArraySplitOperation(String path)", "class_method_signature": "ArraySplitOperation.ArraySplitOperation(String path)", "testcase": false, "constructor": true}, {"identifier": "ArraySplitOperation", "parameters": "(String path,\n                             List<String> fieldsToKeep)", "modifiers": "public", "return": "", "signature": " ArraySplitOperation(String path,\n                             List<String> fieldsToKeep)", "full_signature": "public  ArraySplitOperation(String path,\n                             List<String> fieldsToKeep)", "class_method_signature": "ArraySplitOperation.ArraySplitOperation(String path,\n                             List<String> fieldsToKeep)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "List<InternalEvent>", "signature": "List<InternalEvent> perform(InternalEvent ievent)", "full_signature": "@Override public List<InternalEvent> perform(InternalEvent ievent)", "class_method_signature": "ArraySplitOperation.perform(InternalEvent ievent)", "testcase": false, "constructor": false}], "file": "operations/src/main/java/com/nextdoor/bender/operation/json/array/ArraySplitOperation.java"}, "focal_method": {"identifier": "perform", "parameters": "(InternalEvent ievent)", "modifiers": "@Override public", "return": "List<InternalEvent>", "body": "@Override\n  public List<InternalEvent> perform(InternalEvent ievent) throws OperationException {\n    {\n      if (ievent.getEventObj() == null) {\n        throw new OperationException(\"Deserialized object is null\");\n      }\n\n      Object payload;\n      try {\n        payload = ievent.getEventObj().getField(this.path);\n      } catch (FieldNotFoundException e) {\n        throw new OperationException(e);\n      }\n\n      if (!(payload instanceof JsonArray)) {\n        throw new OperationException(\"Payload data is not a JsonArray\");\n      }\n\n      LinkedHashMap<String, String> partitions = ievent.getPartitions();\n\n      JsonArray arr = (JsonArray) payload;\n\n      ArrayList<InternalEvent> output = new ArrayList<InternalEvent>();\n      for (JsonElement elm : arr) {\n        try {\n          JsonObject newObject = elm.getAsJsonObject();\n          for (String field : this.fieldsToKeep) {\n            JsonObject jsonObject = (JsonObject) ievent.getEventObj().getPayload();\n            newObject.add(field, jsonObject.get(field));\n          }\n\n          InternalEvent newEvent = new InternalEvent(newObject.toString(), ievent.getCtx(), ievent.getArrivalTime());\n          DeserializedEvent newDeserEvent = new GenericJsonEvent(newObject);\n          newEvent.setEventObj(newDeserEvent);\n          newEvent.setEventTime(ievent.getEventTime());\n\n          /*\n           * Deep clone the partitions\n           */\n          if (partitions != null) {\n            LinkedHashMap<String, String> newPartitions =\n                new LinkedHashMap<String, String>(partitions.size());\n\n            partitions.entrySet().forEach(kv -> {\n              newPartitions.put(new String(kv.getKey()), new String(kv.getValue()));\n            });\n\n            newEvent.setPartitions(newPartitions);\n          }\n\n          output.add(newEvent);\n        } catch (Exception e) {\n          throw new OperationException(e);\n        }\n      }\n\n      return output;\n    }\n  }", "signature": "List<InternalEvent> perform(InternalEvent ievent)", "full_signature": "@Override public List<InternalEvent> perform(InternalEvent ievent)", "class_method_signature": "ArraySplitOperation.perform(InternalEvent ievent)", "testcase": false, "constructor": false, "invocations": ["getEventObj", "getField", "getEventObj", "getPartitions", "getAsJsonObject", "getPayload", "getEventObj", "add", "get", "toString", "getCtx", "getArrivalTime", "setEventObj", "setEventTime", "getEventTime", "size", "forEach", "entrySet", "put", "getKey", "getValue", "setPartitions", "add"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}