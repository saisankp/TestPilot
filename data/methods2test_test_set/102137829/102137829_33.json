{"test_class": {"identifier": "KeepassHeaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/domain/KeepassHeaderTest.java"}, "test_case": {"identifier": "whenCompressionIsSetNoneShouldReturnHeaderWithNoneCompression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenCompressionIsSetNoneShouldReturnHeaderWithNoneCompression() {\n        KeePassHeader header = createHeaderAndSetValue(3, new byte[4]);\n        Assert.assertEquals(CompressionAlgorithm.None, header.getCompression());\n    }", "signature": "void whenCompressionIsSetNoneShouldReturnHeaderWithNoneCompression()", "full_signature": "@Test public void whenCompressionIsSetNoneShouldReturnHeaderWithNoneCompression()", "class_method_signature": "KeepassHeaderTest.whenCompressionIsSetNoneShouldReturnHeaderWithNoneCompression()", "testcase": true, "constructor": false, "invocations": ["createHeaderAndSetValue", "assertEquals", "getCompression"]}, "focal_class": {"identifier": "KeePassHeader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int SIZE_OF_FIELD_LENGTH_BUFFER = 3;", "modifier": "private static final", "type": "int", "declarator": "SIZE_OF_FIELD_LENGTH_BUFFER = 3", "var_name": "SIZE_OF_FIELD_LENGTH_BUFFER"}, {"original_string": "public static final int CIPHER = 2;", "modifier": "public static final", "type": "int", "declarator": "CIPHER = 2", "var_name": "CIPHER"}, {"original_string": "public static final int COMPRESSION = 3;", "modifier": "public static final", "type": "int", "declarator": "COMPRESSION = 3", "var_name": "COMPRESSION"}, {"original_string": "public static final int MASTER_SEED = 4;", "modifier": "public static final", "type": "int", "declarator": "MASTER_SEED = 4", "var_name": "MASTER_SEED"}, {"original_string": "public static final int TRANSFORM_SEED = 5;", "modifier": "public static final", "type": "int", "declarator": "TRANSFORM_SEED = 5", "var_name": "TRANSFORM_SEED"}, {"original_string": "public static final int TRANSFORM_ROUNDS = 6;", "modifier": "public static final", "type": "int", "declarator": "TRANSFORM_ROUNDS = 6", "var_name": "TRANSFORM_ROUNDS"}, {"original_string": "public static final int ENCRYPTION_IV = 7;", "modifier": "public static final", "type": "int", "declarator": "ENCRYPTION_IV = 7", "var_name": "ENCRYPTION_IV"}, {"original_string": "public static final int PROTECTED_STREAM_KEY = 8;", "modifier": "public static final", "type": "int", "declarator": "PROTECTED_STREAM_KEY = 8", "var_name": "PROTECTED_STREAM_KEY"}, {"original_string": "public static final int STREAM_START_BYTES = 9;", "modifier": "public static final", "type": "int", "declarator": "STREAM_START_BYTES = 9", "var_name": "STREAM_START_BYTES"}, {"original_string": "public static final int INNER_RANDOM_STREAM_ID = 10;", "modifier": "public static final", "type": "int", "declarator": "INNER_RANDOM_STREAM_ID = 10", "var_name": "INNER_RANDOM_STREAM_ID"}, {"original_string": "public static final int KDF_PARAMETERS = 11;", "modifier": "public static final", "type": "int", "declarator": "KDF_PARAMETERS = 11", "var_name": "KDF_PARAMETERS"}, {"original_string": "public static final int PUBLIC_CUSTOM_DATA = 12;", "modifier": "public static final", "type": "int", "declarator": "PUBLIC_CUSTOM_DATA = 12", "var_name": "PUBLIC_CUSTOM_DATA"}, {"original_string": "private static final byte[] DATABASE_V2_FILE_SIGNATURE_1 = ByteUtils.hexStringToByteArray(\"03d9a29a\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATABASE_V2_FILE_SIGNATURE_1 = ByteUtils.hexStringToByteArray(\"03d9a29a\")", "var_name": "DATABASE_V2_FILE_SIGNATURE_1"}, {"original_string": "private static final byte[] DATABASE_V2_FILE_SIGNATURE_2 = ByteUtils.hexStringToByteArray(\"67fb4bb5\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATABASE_V2_FILE_SIGNATURE_2 = ByteUtils.hexStringToByteArray(\"67fb4bb5\")", "var_name": "DATABASE_V2_FILE_SIGNATURE_2"}, {"original_string": "private static final byte[] DATABASE_V2_FILE_VERSION = ByteUtils.hexStringToByteArray(\"00000300\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATABASE_V2_FILE_VERSION = ByteUtils.hexStringToByteArray(\"00000300\")", "var_name": "DATABASE_V2_FILE_VERSION"}, {"original_string": "private static final int FILE_VERSION_CRITICAL_MASK = 0xFFFF0000;", "modifier": "private static final", "type": "int", "declarator": "FILE_VERSION_CRITICAL_MASK = 0xFFFF0000", "var_name": "FILE_VERSION_CRITICAL_MASK"}, {"original_string": "private static final int DATABASE_V3_FILE_VERSION_INT = 0x00030001;", "modifier": "private static final", "type": "int", "declarator": "DATABASE_V3_FILE_VERSION_INT = 0x00030001", "var_name": "DATABASE_V3_FILE_VERSION_INT"}, {"original_string": "private static final int DATABASE_V4_FILE_VERSION_INT = 0x00040000;", "modifier": "private static final", "type": "int", "declarator": "DATABASE_V4_FILE_VERSION_INT = 0x00040000", "var_name": "DATABASE_V4_FILE_VERSION_INT"}, {"original_string": "private static final byte[] DATABASE_V2_AES_CIPHER = ByteUtils.hexStringToByteArray(\"31C1F2E6BF714350BE5805216AFC5AFF\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATABASE_V2_AES_CIPHER = ByteUtils.hexStringToByteArray(\"31C1F2E6BF714350BE5805216AFC5AFF\")", "var_name": "DATABASE_V2_AES_CIPHER"}, {"original_string": "public static final int VERSION_SIGNATURE_LENGTH = 12;", "modifier": "public static final", "type": "int", "declarator": "VERSION_SIGNATURE_LENGTH = 12", "var_name": "VERSION_SIGNATURE_LENGTH"}, {"original_string": "private static final int DATABASE_V2_FILE_SIGNATURE_1_INT = 0x9AA2D903 & 0xFF;", "modifier": "private static final", "type": "int", "declarator": "DATABASE_V2_FILE_SIGNATURE_1_INT = 0x9AA2D903 & 0xFF", "var_name": "DATABASE_V2_FILE_SIGNATURE_1_INT"}, {"original_string": "private static final int DATABASE_V2_FILE_SIGNATURE_2_INT = 0xB54BFB67 & 0xFF;", "modifier": "private static final", "type": "int", "declarator": "DATABASE_V2_FILE_SIGNATURE_2_INT = 0xB54BFB67 & 0xFF", "var_name": "DATABASE_V2_FILE_SIGNATURE_2_INT"}, {"original_string": "private static final int OLD_DATABASE_V1_FILE_SIGNATURE_1_INT = 0x9AA2D903 & 0xFF;", "modifier": "private static final", "type": "int", "declarator": "OLD_DATABASE_V1_FILE_SIGNATURE_1_INT = 0x9AA2D903 & 0xFF", "var_name": "OLD_DATABASE_V1_FILE_SIGNATURE_1_INT"}, {"original_string": "private static final int OLD_DATABASE_V1_FILE_SIGNATURE_2_INT = 0xB54BFB65 & 0xFF;", "modifier": "private static final", "type": "int", "declarator": "OLD_DATABASE_V1_FILE_SIGNATURE_2_INT = 0xB54BFB65 & 0xFF", "var_name": "OLD_DATABASE_V1_FILE_SIGNATURE_2_INT"}, {"original_string": "private byte[] encryptionCipher;", "modifier": "private", "type": "byte[]", "declarator": "encryptionCipher", "var_name": "encryptionCipher"}, {"original_string": "private byte[] encryptionIV;", "modifier": "private", "type": "byte[]", "declarator": "encryptionIV", "var_name": "encryptionIV"}, {"original_string": "private byte[] streamStartBytes;", "modifier": "private", "type": "byte[]", "declarator": "streamStartBytes", "var_name": "streamStartBytes"}, {"original_string": "private byte[] masterSeed;", "modifier": "private", "type": "byte[]", "declarator": "masterSeed", "var_name": "masterSeed"}, {"original_string": "private byte[] transformSeed;", "modifier": "private", "type": "byte[]", "declarator": "transformSeed", "var_name": "transformSeed"}, {"original_string": "private byte[] protectedStreamKey;", "modifier": "private", "type": "byte[]", "declarator": "protectedStreamKey", "var_name": "protectedStreamKey"}, {"original_string": "private CompressionAlgorithm compressionAlgorithm;", "modifier": "private", "type": "CompressionAlgorithm", "declarator": "compressionAlgorithm", "var_name": "compressionAlgorithm"}, {"original_string": "private long transformRounds;", "modifier": "private", "type": "long", "declarator": "transformRounds", "var_name": "transformRounds"}, {"original_string": "private CrsAlgorithm crsAlgorithm;", "modifier": "private", "type": "CrsAlgorithm", "declarator": "crsAlgorithm", "var_name": "crsAlgorithm"}, {"original_string": "private int fileFormatVersion;", "modifier": "private", "type": "int", "declarator": "fileFormatVersion", "var_name": "fileFormatVersion"}, {"original_string": "private VariantDictionary variantDictionary;", "modifier": "private", "type": "VariantDictionary", "declarator": "variantDictionary", "var_name": "variantDictionary"}], "methods": [{"identifier": "KeePassHeader", "parameters": "()", "modifiers": "public", "return": "", "signature": " KeePassHeader()", "full_signature": "public  KeePassHeader()", "class_method_signature": "KeePassHeader.KeePassHeader()", "testcase": false, "constructor": true}, {"identifier": "KeePassHeader", "parameters": "(ByteGenerator byteGenerator)", "modifiers": "public", "return": "", "signature": " KeePassHeader(ByteGenerator byteGenerator)", "full_signature": "public  KeePassHeader(ByteGenerator byteGenerator)", "class_method_signature": "KeePassHeader.KeePassHeader(ByteGenerator byteGenerator)", "testcase": false, "constructor": true}, {"identifier": "setValue", "parameters": "(int headerId, byte[] value)", "modifiers": "public", "return": "void", "signature": "void setValue(int headerId, byte[] value)", "full_signature": "public void setValue(int headerId, byte[] value)", "class_method_signature": "KeePassHeader.setValue(int headerId, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "checkVersionSupport", "parameters": "(byte[] keepassFile)", "modifiers": "public", "return": "void", "signature": "void checkVersionSupport(byte[] keepassFile)", "full_signature": "public void checkVersionSupport(byte[] keepassFile)", "class_method_signature": "KeePassHeader.checkVersionSupport(byte[] keepassFile)", "testcase": false, "constructor": false}, {"identifier": "isVersionSupported", "parameters": "(int version)", "modifiers": "private", "return": "boolean", "signature": "boolean isVersionSupported(int version)", "full_signature": "private boolean isVersionSupported(int version)", "class_method_signature": "KeePassHeader.isVersionSupported(int version)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] keepassFile)", "modifiers": "@SuppressWarnings(\"resource\") public", "return": "void", "signature": "void read(byte[] keepassFile)", "full_signature": "@SuppressWarnings(\"resource\") public void read(byte[] keepassFile)", "class_method_signature": "KeePassHeader.read(byte[] keepassFile)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBytes()", "full_signature": "public byte[] getBytes()", "class_method_signature": "KeePassHeader.getBytes()", "testcase": false, "constructor": false}, {"identifier": "getEndOfHeader", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getEndOfHeader()", "full_signature": "private byte[] getEndOfHeader()", "class_method_signature": "KeePassHeader.getEndOfHeader()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(int headerId)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getValue(int headerId)", "full_signature": "public byte[] getValue(int headerId)", "class_method_signature": "KeePassHeader.getValue(int headerId)", "testcase": false, "constructor": false}, {"identifier": "setInnerRandomStreamId", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setInnerRandomStreamId(byte[] value)", "full_signature": "private void setInnerRandomStreamId(byte[] value)", "class_method_signature": "KeePassHeader.setInnerRandomStreamId(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getInnerRandomStreamId", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getInnerRandomStreamId()", "full_signature": "private byte[] getInnerRandomStreamId()", "class_method_signature": "KeePassHeader.getInnerRandomStreamId()", "testcase": false, "constructor": false}, {"identifier": "setStreamStartBytes", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setStreamStartBytes(byte[] value)", "full_signature": "private void setStreamStartBytes(byte[] value)", "class_method_signature": "KeePassHeader.setStreamStartBytes(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setProtectedStreamKey", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setProtectedStreamKey(byte[] value)", "full_signature": "private void setProtectedStreamKey(byte[] value)", "class_method_signature": "KeePassHeader.setProtectedStreamKey(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setEncryptionIV", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setEncryptionIV(byte[] value)", "full_signature": "private void setEncryptionIV(byte[] value)", "class_method_signature": "KeePassHeader.setEncryptionIV(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setTransformRounds", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setTransformRounds(byte[] value)", "full_signature": "private void setTransformRounds(byte[] value)", "class_method_signature": "KeePassHeader.setTransformRounds(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setTransformSeed", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setTransformSeed(byte[] value)", "full_signature": "private void setTransformSeed(byte[] value)", "class_method_signature": "KeePassHeader.setTransformSeed(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setMasterSeed", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setMasterSeed(byte[] value)", "full_signature": "private void setMasterSeed(byte[] value)", "class_method_signature": "KeePassHeader.setMasterSeed(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setCompressionFlag", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setCompressionFlag(byte[] value)", "full_signature": "private void setCompressionFlag(byte[] value)", "class_method_signature": "KeePassHeader.setCompressionFlag(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "setCompression", "parameters": "(CompressionAlgorithm algorithm)", "modifiers": "public", "return": "void", "signature": "void setCompression(CompressionAlgorithm algorithm)", "full_signature": "public void setCompression(CompressionAlgorithm algorithm)", "class_method_signature": "KeePassHeader.setCompression(CompressionAlgorithm algorithm)", "testcase": false, "constructor": false}, {"identifier": "getCompressionFlag", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getCompressionFlag()", "full_signature": "private byte[] getCompressionFlag()", "class_method_signature": "KeePassHeader.getCompressionFlag()", "testcase": false, "constructor": false}, {"identifier": "setCipher", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setCipher(byte[] value)", "full_signature": "private void setCipher(byte[] value)", "class_method_signature": "KeePassHeader.setCipher(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getCipher", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getCipher()", "full_signature": "public byte[] getCipher()", "class_method_signature": "KeePassHeader.getCipher()", "testcase": false, "constructor": false}, {"identifier": "getCompression", "parameters": "()", "modifiers": "public", "return": "CompressionAlgorithm", "signature": "CompressionAlgorithm getCompression()", "full_signature": "public CompressionAlgorithm getCompression()", "class_method_signature": "KeePassHeader.getCompression()", "testcase": false, "constructor": false}, {"identifier": "getTransformRounds", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTransformRounds()", "full_signature": "public long getTransformRounds()", "class_method_signature": "KeePassHeader.getTransformRounds()", "testcase": false, "constructor": false}, {"identifier": "setTransformRounds", "parameters": "(long rounds)", "modifiers": "public", "return": "void", "signature": "void setTransformRounds(long rounds)", "full_signature": "public void setTransformRounds(long rounds)", "class_method_signature": "KeePassHeader.setTransformRounds(long rounds)", "testcase": false, "constructor": false}, {"identifier": "getTransformRoundsByte", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getTransformRoundsByte()", "full_signature": "private byte[] getTransformRoundsByte()", "class_method_signature": "KeePassHeader.getTransformRoundsByte()", "testcase": false, "constructor": false}, {"identifier": "getEncryptionIV", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getEncryptionIV()", "full_signature": "public byte[] getEncryptionIV()", "class_method_signature": "KeePassHeader.getEncryptionIV()", "testcase": false, "constructor": false}, {"identifier": "getStreamStartBytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getStreamStartBytes()", "full_signature": "public byte[] getStreamStartBytes()", "class_method_signature": "KeePassHeader.getStreamStartBytes()", "testcase": false, "constructor": false}, {"identifier": "getCrsAlgorithm", "parameters": "()", "modifiers": "public", "return": "CrsAlgorithm", "signature": "CrsAlgorithm getCrsAlgorithm()", "full_signature": "public CrsAlgorithm getCrsAlgorithm()", "class_method_signature": "KeePassHeader.getCrsAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "setCrsAlgorithm", "parameters": "(CrsAlgorithm algorithm)", "modifiers": "public", "return": "void", "signature": "void setCrsAlgorithm(CrsAlgorithm algorithm)", "full_signature": "public void setCrsAlgorithm(CrsAlgorithm algorithm)", "class_method_signature": "KeePassHeader.setCrsAlgorithm(CrsAlgorithm algorithm)", "testcase": false, "constructor": false}, {"identifier": "getMasterSeed", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getMasterSeed()", "full_signature": "public byte[] getMasterSeed()", "class_method_signature": "KeePassHeader.getMasterSeed()", "testcase": false, "constructor": false}, {"identifier": "getTransformSeed", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getTransformSeed()", "full_signature": "public byte[] getTransformSeed()", "class_method_signature": "KeePassHeader.getTransformSeed()", "testcase": false, "constructor": false}, {"identifier": "setKdfParameters", "parameters": "(byte[] value)", "modifiers": "private", "return": "void", "signature": "void setKdfParameters(byte[] value)", "full_signature": "private void setKdfParameters(byte[] value)", "class_method_signature": "KeePassHeader.setKdfParameters(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getKdfParameters", "parameters": "()", "modifiers": "public", "return": "VariantDictionary", "signature": "VariantDictionary getKdfParameters()", "full_signature": "public VariantDictionary getKdfParameters()", "class_method_signature": "KeePassHeader.getKdfParameters()", "testcase": false, "constructor": false}, {"identifier": "getHeaderSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHeaderSize()", "full_signature": "public int getHeaderSize()", "class_method_signature": "KeePassHeader.getHeaderSize()", "testcase": false, "constructor": false}, {"identifier": "getProtectedStreamKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getProtectedStreamKey()", "full_signature": "public byte[] getProtectedStreamKey()", "class_method_signature": "KeePassHeader.getProtectedStreamKey()", "testcase": false, "constructor": false}, {"identifier": "getFileFormatVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFileFormatVersion()", "full_signature": "public int getFileFormatVersion()", "class_method_signature": "KeePassHeader.getFileFormatVersion()", "testcase": false, "constructor": false}, {"identifier": "wrapInBuffer", "parameters": "(byte[] value)", "modifiers": "private", "return": "ByteBuffer", "signature": "ByteBuffer wrapInBuffer(byte[] value)", "full_signature": "private ByteBuffer wrapInBuffer(byte[] value)", "class_method_signature": "KeePassHeader.wrapInBuffer(byte[] value)", "testcase": false, "constructor": false}, {"identifier": "wrapInBuffer", "parameters": "(int value)", "modifiers": "private", "return": "byte[]", "signature": "byte[] wrapInBuffer(int value)", "full_signature": "private byte[] wrapInBuffer(int value)", "class_method_signature": "KeePassHeader.wrapInBuffer(int value)", "testcase": false, "constructor": false}, {"identifier": "wrapInBuffer", "parameters": "(long value)", "modifiers": "private", "return": "byte[]", "signature": "byte[] wrapInBuffer(long value)", "full_signature": "private byte[] wrapInBuffer(long value)", "class_method_signature": "KeePassHeader.wrapInBuffer(long value)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/KeePassHeader.java"}, "focal_method": {"identifier": "getCompression", "parameters": "()", "modifiers": "public", "return": "CompressionAlgorithm", "body": "public CompressionAlgorithm getCompression() {\n        return compressionAlgorithm;\n    }", "signature": "CompressionAlgorithm getCompression()", "full_signature": "public CompressionAlgorithm getCompression()", "class_method_signature": "KeePassHeader.getCompression()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}