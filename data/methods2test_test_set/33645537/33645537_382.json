{"test_class": {"identifier": "BinaryTreeEqualsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeEquals binaryTreeEquals;", "modifier": "private", "type": "BinaryTreeEquals", "declarator": "binaryTreeEquals", "var_name": "binaryTreeEquals"}], "file": "algs/src/test/java/com/github/pedrovgs/problem17/BinaryTreeEqualsTest.java"}, "test_case": {"identifier": "shouldReturnFalseIfTreesAreNotEqualsRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnFalseIfTreesAreNotEqualsRecursive() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    root.setLeft(n1);\n    BinaryNode<Integer> root1 = new BinaryNode<Integer>(0);\n\n    assertFalse(binaryTreeEquals.areEqualsRecursive(root, root1));\n  }", "signature": "void shouldReturnFalseIfTreesAreNotEqualsRecursive()", "full_signature": "@Test public void shouldReturnFalseIfTreesAreNotEqualsRecursive()", "class_method_signature": "BinaryTreeEqualsTest.shouldReturnFalseIfTreesAreNotEqualsRecursive()", "testcase": true, "constructor": false, "invocations": ["setLeft", "assertFalse", "areEqualsRecursive"]}, "focal_class": {"identifier": "BinaryTreeEquals", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "areEqualsRecursive", "parameters": "(BinaryNode tree1, BinaryNode tree2)", "modifiers": "public", "return": "boolean", "signature": "boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "full_signature": "public boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "class_method_signature": "BinaryTreeEquals.areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "testcase": false, "constructor": false}, {"identifier": "areEqualsInner", "parameters": "(BinaryNode tree1, BinaryNode tree2)", "modifiers": "private", "return": "boolean", "signature": "boolean areEqualsInner(BinaryNode tree1, BinaryNode tree2)", "full_signature": "private boolean areEqualsInner(BinaryNode tree1, BinaryNode tree2)", "class_method_signature": "BinaryTreeEquals.areEqualsInner(BinaryNode tree1, BinaryNode tree2)", "testcase": false, "constructor": false}, {"identifier": "areEqualsIterative", "parameters": "(BinaryNode<Integer> tree1, BinaryNode<Integer> tree2)", "modifiers": "public", "return": "boolean", "signature": "boolean areEqualsIterative(BinaryNode<Integer> tree1, BinaryNode<Integer> tree2)", "full_signature": "public boolean areEqualsIterative(BinaryNode<Integer> tree1, BinaryNode<Integer> tree2)", "class_method_signature": "BinaryTreeEquals.areEqualsIterative(BinaryNode<Integer> tree1, BinaryNode<Integer> tree2)", "testcase": false, "constructor": false}, {"identifier": "addNodeToStack", "parameters": "(Stack<BinaryNode> stack, BinaryNode node)", "modifiers": "private", "return": "void", "signature": "void addNodeToStack(Stack<BinaryNode> stack, BinaryNode node)", "full_signature": "private void addNodeToStack(Stack<BinaryNode> stack, BinaryNode node)", "class_method_signature": "BinaryTreeEquals.addNodeToStack(Stack<BinaryNode> stack, BinaryNode node)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(BinaryNode tree1, BinaryNode tree2)", "modifiers": "private", "return": "void", "signature": "void validateInput(BinaryNode tree1, BinaryNode tree2)", "full_signature": "private void validateInput(BinaryNode tree1, BinaryNode tree2)", "class_method_signature": "BinaryTreeEquals.validateInput(BinaryNode tree1, BinaryNode tree2)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem17/BinaryTreeEquals.java"}, "focal_method": {"identifier": "areEqualsRecursive", "parameters": "(BinaryNode tree1, BinaryNode tree2)", "modifiers": "public", "return": "boolean", "body": "public boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2) {\n    validateInput(tree1, tree2);\n    return areEqualsInner(tree1, tree2);\n  }", "signature": "boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "full_signature": "public boolean areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "class_method_signature": "BinaryTreeEquals.areEqualsRecursive(BinaryNode tree1, BinaryNode tree2)", "testcase": false, "constructor": false, "invocations": ["validateInput", "areEqualsInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}