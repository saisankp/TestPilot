{"test_class": {"identifier": "FPGrowthTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(StreamingFPGrowthTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(StreamingFPGrowthTest.class)", "var_name": "log"}], "file": "legacy/src/test/java/macrobase/analysis/summary/itemset/FPGrowthTest.java"}, "test_case": {"identifier": "testGetSupport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSupport() {\n        List<Set<Integer>> txns = new ArrayList<>();\n        txns.add(intIfy(\"a, c, d\"));\n        txns.add(intIfy(\"a, c, d, e\"));\n        txns.add(intIfy(\"c\"));\n        txns.add(intIfy(\"a\"));\n        txns.add(intIfy(\"a\"));\n        txns.add(intIfy(\"a\"));\n        txns.add(intIfy(\"a\"));\n        txns.add(intIfy(\"a\"));\n        txns.add(intIfy(\"b\"));\n        txns.add(intIfy(\"b\"));\n        txns.add(intIfy(\"b\"));\n        txns.add(intIfy(\"a, b, d\"));\n        txns.add(intIfy(\"a, b, e, c\"));\n\n        FPGrowth.FPTree fpt = new FPGrowth().constructTree(txns, 0);\n        fpt.printTreeDebug();\n\n        assertEquals(2, fpt.getSupport(intIfy(\"a, b\")));\n        assertEquals(0, fpt.getSupport(intIfy(\"a, b, c, d\")));\n\n    }", "signature": "void testGetSupport()", "full_signature": "@Test public void testGetSupport()", "class_method_signature": "FPGrowthTest.testGetSupport()", "testcase": true, "constructor": false, "invocations": ["add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "add", "intIfy", "constructTree", "printTreeDebug", "assertEquals", "getSupport", "intIfy", "assertEquals", "getSupport", "intIfy"]}, "focal_class": {"identifier": "FPGrowth", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FPGrowth.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FPGrowth.class)", "var_name": "log"}, {"original_string": "private final Timer singleItemCounts = MacroBase.metrics.timer(name(FPGrowth.class, \"itemCounts\"));", "modifier": "private final", "type": "Timer", "declarator": "singleItemCounts = MacroBase.metrics.timer(name(FPGrowth.class, \"itemCounts\"))", "var_name": "singleItemCounts"}, {"original_string": "private final Timer insertTransactions = MacroBase.metrics.timer(name(FPGrowth.class, \"insertTransactions\"));", "modifier": "private final", "type": "Timer", "declarator": "insertTransactions = MacroBase.metrics.timer(name(FPGrowth.class, \"insertTransactions\"))", "var_name": "insertTransactions"}, {"original_string": "private final Timer fpMine = MacroBase.metrics.timer(name(FPGrowth.class, \"fpMine\"));", "modifier": "private final", "type": "Timer", "declarator": "fpMine = MacroBase.metrics.timer(name(FPGrowth.class, \"fpMine\"))", "var_name": "fpMine"}], "methods": [{"identifier": "getItemsetsWithSupportRatio", "parameters": "(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "class_method_signature": "FPGrowth.getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Double supportRatio)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportRatio", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "class_method_signature": "FPGrowth.getItemsetsWithSupportRatio(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportRatio)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Double supportCount)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount)", "testcase": false, "constructor": false}, {"identifier": "constructTree", "parameters": "(List<Set<Integer>> transactions, int supportCount)", "modifiers": "protected", "return": "FPTree", "signature": "FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "full_signature": "protected FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "class_method_signature": "FPGrowth.constructTree(List<Set<Integer>> transactions, int supportCount)", "testcase": false, "constructor": false}, {"identifier": "getItemsetsWithSupportCount", "parameters": "(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "full_signature": "public List<ItemsetWithCount> getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "class_method_signature": "FPGrowth.getItemsetsWithSupportCount(List<Set<Integer>> transactions,\n                                                              Map<Integer, Double> initialCounts,\n                                                              Double supportCount,\n                                                              boolean printTreeDebug)", "testcase": false, "constructor": false}, {"identifier": "getCounts", "parameters": "(\n            List<Datum> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "modifiers": "public", "return": "List<ItemsetWithCount>", "signature": "List<ItemsetWithCount> getCounts(\n            List<Datum> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "full_signature": "public List<ItemsetWithCount> getCounts(\n            List<Datum> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "class_method_signature": "FPGrowth.getCounts(\n            List<Datum> transactions,\n            Map<Integer, Double> initialCounts,\n            Set<Integer> targetItems,\n            List<ItemsetWithCount> toCount)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/summary/itemset/FPGrowth.java"}, "focal_method": {"identifier": "constructTree", "parameters": "(List<Set<Integer>> transactions, int supportCount)", "modifiers": "protected", "return": "FPTree", "body": "protected FPTree constructTree(List<Set<Integer>> transactions, int supportCount) {\n        FPTree fp = new FPTree();\n        fp.insertFrequentItems(transactions, supportCount);\n        fp.insertTransactions(transactions);\n        return fp;\n    }", "signature": "FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "full_signature": "protected FPTree constructTree(List<Set<Integer>> transactions, int supportCount)", "class_method_signature": "FPGrowth.constructTree(List<Set<Integer>> transactions, int supportCount)", "testcase": false, "constructor": false, "invocations": ["insertFrequentItems", "insertTransactions"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}