{"test_class": {"identifier": "KalmanVectorFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanVectorFilterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanVectorFilterTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/kalmanfilter/KalmanVectorFilterTest.java"}, "test_case": {"identifier": "runTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void runTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 4)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/2gaussians-500points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = Drainer.drainIngest(conf);\n        assertEquals(500, data.size());\n\n        KalmanVectorFilter f = new KalmanVectorFilter(new ArrayRealVector(2), 1e-6, 1.);\n\n        List<Datum> oneCluster = data.subList(201, 500);\n        List<RealVector> filtered = oneCluster.stream().map(d -> f.step(d.metrics(), 1)).collect(Collectors.toList());\n        List<Datum> unfilteredlast10 = oneCluster.subList(oneCluster.size() - 10, oneCluster.size());\n        List<RealVector> filteredlast10 = filtered.subList(filtered.size() - 10, filtered.size());\n        double filteredMax = filteredlast10.stream().mapToDouble(d -> d.getEntry(0)).max().getAsDouble();\n        double filteredMin = filteredlast10.stream().mapToDouble(d -> d.getEntry(0)).min().getAsDouble();\n        double unfilteredMax = unfilteredlast10.stream().mapToDouble(d -> d.metrics().getEntry(0)).max().getAsDouble();\n        double unfilteredMin = unfilteredlast10.stream().mapToDouble(d -> d.metrics().getEntry(0)).min().getAsDouble();\n        assert filteredMax < unfilteredMax;\n        assert filteredMin > unfilteredMin;\n    }", "signature": "void runTest()", "full_signature": "@Test public void runTest()", "class_method_signature": "KalmanVectorFilterTest.runTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "drainIngest", "assertEquals", "size", "subList", "collect", "map", "stream", "step", "metrics", "toList", "subList", "size", "size", "subList", "size", "size", "getAsDouble", "max", "mapToDouble", "stream", "getEntry", "getAsDouble", "min", "mapToDouble", "stream", "getEntry", "getAsDouble", "max", "mapToDouble", "stream", "getEntry", "metrics", "getAsDouble", "min", "mapToDouble", "stream", "getEntry", "metrics"]}, "focal_class": {"identifier": "KalmanVectorFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KalmanVectorFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KalmanVectorFilter.class)", "var_name": "log"}, {"original_string": "protected double qScale;", "modifier": "protected", "type": "double", "declarator": "qScale", "var_name": "qScale"}, {"original_string": "protected double rScale;", "modifier": "protected", "type": "double", "declarator": "rScale", "var_name": "rScale"}, {"original_string": "private final RealMatrix H;", "modifier": "private final", "type": "RealMatrix", "declarator": "H", "var_name": "H"}, {"original_string": "protected RealMatrix state;", "modifier": "protected", "type": "RealMatrix", "declarator": "state", "var_name": "state"}, {"original_string": "protected RealMatrix cov;", "modifier": "protected", "type": "RealMatrix", "declarator": "cov", "var_name": "cov"}], "methods": [{"identifier": "KalmanVectorFilter", "parameters": "(RealVector startLoc, double qScale)", "modifiers": "public", "return": "", "signature": " KalmanVectorFilter(RealVector startLoc, double qScale)", "full_signature": "public  KalmanVectorFilter(RealVector startLoc, double qScale)", "class_method_signature": "KalmanVectorFilter.KalmanVectorFilter(RealVector startLoc, double qScale)", "testcase": false, "constructor": true}, {"identifier": "KalmanVectorFilter", "parameters": "(RealVector startLoc, double qScale, double rScale)", "modifiers": "public", "return": "", "signature": " KalmanVectorFilter(RealVector startLoc, double qScale, double rScale)", "full_signature": "public  KalmanVectorFilter(RealVector startLoc, double qScale, double rScale)", "class_method_signature": "KalmanVectorFilter.KalmanVectorFilter(RealVector startLoc, double qScale, double rScale)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "(RealVector startLoc)", "modifiers": "public", "return": "void", "signature": "void reset(RealVector startLoc)", "full_signature": "public void reset(RealVector startLoc)", "class_method_signature": "KalmanVectorFilter.reset(RealVector startLoc)", "testcase": false, "constructor": false}, {"identifier": "measure", "parameters": "(RealMatrix state)", "modifiers": "protected", "return": "RealVector", "signature": "RealVector measure(RealMatrix state)", "full_signature": "protected RealVector measure(RealMatrix state)", "class_method_signature": "KalmanVectorFilter.measure(RealMatrix state)", "testcase": false, "constructor": false}, {"identifier": "step", "parameters": "(RealVector observation, int time)", "modifiers": "public", "return": "RealVector", "signature": "RealVector step(RealVector observation, int time)", "full_signature": "public RealVector step(RealVector observation, int time)", "class_method_signature": "KalmanVectorFilter.step(RealVector observation, int time)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/kalmanfilter/KalmanVectorFilter.java"}, "focal_method": {"identifier": "step", "parameters": "(RealVector observation, int time)", "modifiers": "public", "return": "RealVector", "body": "public RealVector step(RealVector observation, int time) {\n        // Create g = [t^2 / 2, t]^T matrix\n        RealVector g = new ArrayRealVector(2);\n        g.setEntry(0, 0.5 * time * time);\n        g.setEntry(1, time);\n        RealMatrix Q = g.outerProduct(g).scalarMultiply(qScale);\n        RealMatrix R = MatrixUtils.createRealIdentityMatrix(1).scalarMultiply(rScale);\n        R = R.scalarMultiply(time * time);\n\n        RealMatrix F = MatrixUtils.createRealIdentityMatrix(2);\n        F.setEntry(0, 1, time);\n\n        RealMatrix priorNextState = F.multiply(state);\n        RealMatrix priorNextCov = F.multiply(cov).multiply(F.transpose()).add(Q); // F * cov * F^T + Q\n\n        RealVector measurementResidual = observation.subtract(measure(priorNextState)); // row vector\n        RealMatrix residualCovariance = H.multiply(priorNextCov).multiply(H.transpose()).add(R);\n        RealMatrix kalmanGain = priorNextCov.multiply(H.transpose()).multiply(AlgebraUtils.invertMatrix(residualCovariance));\n        // kalmanGain should be a 1x2 matrix\n        state = priorNextState.add(kalmanGain.getColumnVector(0).outerProduct(measurementResidual));\n        cov = MatrixUtils.createRealIdentityMatrix(2).subtract(kalmanGain.multiply(H)).multiply(priorNextCov);\n\n        return measure(state);\n    }", "signature": "RealVector step(RealVector observation, int time)", "full_signature": "public RealVector step(RealVector observation, int time)", "class_method_signature": "KalmanVectorFilter.step(RealVector observation, int time)", "testcase": false, "constructor": false, "invocations": ["setEntry", "setEntry", "scalarMultiply", "outerProduct", "scalarMultiply", "createRealIdentityMatrix", "scalarMultiply", "createRealIdentityMatrix", "setEntry", "multiply", "add", "multiply", "multiply", "transpose", "subtract", "measure", "add", "multiply", "multiply", "transpose", "multiply", "multiply", "transpose", "invertMatrix", "add", "outerProduct", "getColumnVector", "multiply", "subtract", "createRealIdentityMatrix", "multiply", "measure"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}