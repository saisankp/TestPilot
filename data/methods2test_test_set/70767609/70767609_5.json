{"test_class": {"identifier": "OrderHistoryClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private OrderHistoryClient orderHistoryClient;", "modifier": "@Autowired\n  private", "type": "OrderHistoryClient", "declarator": "orderHistoryClient", "var_name": "orderHistoryClient"}, {"original_string": "@Autowired\n  private WebServiceTemplate webServiceTemplate;", "modifier": "@Autowired\n  private", "type": "WebServiceTemplate", "declarator": "webServiceTemplate", "var_name": "webServiceTemplate"}, {"original_string": "private MockWebServiceServer mockWebServiceServer;", "modifier": "private", "type": "MockWebServiceServer", "declarator": "mockWebServiceServer", "var_name": "mockWebServiceServer"}], "file": "spring-ws-tolerant-reader/src/test/java/com/codenotfound/ws/client/OrderHistoryClientTest.java"}, "test_case": {"identifier": "testGetOrderHistoryOnlyNeededElements", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetOrderHistoryOnlyNeededElements() throws IOException {\n    Source requestPayload = new StringSource(\n        \"<ns1:getOrderHistoryRequest xmlns:ns1=\\\"http://codenotfound.com/types/orderhistory\\\">\"\n            + \"<ns1:userId>def456</ns1:userId>\" + \"</ns1:getOrderHistoryRequest>\");\n\n    Source responsePayload = new StringSource(\n        \"<ns1:getOrderHistoryResponse xmlns:ns1=\\\"http://codenotfound.com/types/orderhistory\\\">\"\n            + \"<ns1:orderHistory>\" + \"<ns1:orderList>\"\n            + \"<ns1:order><ns1:orderId>order4</ns1:orderId><ns1:orderName>order-name-1</ns1:orderName></ns1:order>\"\n            + \"<ns1:order><ns1:orderId>order5</ns1:orderId><ns1:orderName>order-name-2</ns1:orderName></ns1:order>\"\n            + \"<ns1:order><ns1:orderId>order6</ns1:orderId><ns1:orderName>order-name-3</ns1:orderName></ns1:order>\"\n            + \"</ns1:orderList>\" + \"</ns1:orderHistory>\" + \"</ns1:getOrderHistoryResponse>\");\n\n    mockWebServiceServer.expect(payload(requestPayload)).andRespond(withPayload(responsePayload));\n\n    OrderHistory orderHistory = orderHistoryClient.getOrderHistory(\"def456\");\n    assertThat(orderHistory.getOrders().get(2).getOrderId()).isEqualTo(\"order6\");\n\n    mockWebServiceServer.verify();\n  }", "signature": "void testGetOrderHistoryOnlyNeededElements()", "full_signature": "@Test public void testGetOrderHistoryOnlyNeededElements()", "class_method_signature": "OrderHistoryClientTest.testGetOrderHistoryOnlyNeededElements()", "testcase": true, "constructor": false, "invocations": ["andRespond", "expect", "payload", "withPayload", "getOrderHistory", "isEqualTo", "assertThat", "getOrderId", "get", "getOrders", "verify"]}, "focal_class": {"identifier": "OrderHistoryClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(OrderHistoryClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(OrderHistoryClient.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n  private XPathExpression orderXPath;", "modifier": "@Autowired\n  private", "type": "XPathExpression", "declarator": "orderXPath", "var_name": "orderXPath"}, {"original_string": "@Autowired\n  private XPathExpression orderIdXPath;", "modifier": "@Autowired\n  private", "type": "XPathExpression", "declarator": "orderIdXPath", "var_name": "orderIdXPath"}, {"original_string": "@Autowired\n  private WebServiceTemplate webServiceTemplate;", "modifier": "@Autowired\n  private", "type": "WebServiceTemplate", "declarator": "webServiceTemplate", "var_name": "webServiceTemplate"}], "methods": [{"identifier": "getOrderHistory", "parameters": "(String userId)", "modifiers": "public", "return": "OrderHistory", "signature": "OrderHistory getOrderHistory(String userId)", "full_signature": "public OrderHistory getOrderHistory(String userId)", "class_method_signature": "OrderHistoryClient.getOrderHistory(String userId)", "testcase": false, "constructor": false}], "file": "spring-ws-tolerant-reader/src/main/java/com/codenotfound/ws/client/OrderHistoryClient.java"}, "focal_method": {"identifier": "getOrderHistory", "parameters": "(String userId)", "modifiers": "public", "return": "OrderHistory", "body": "public OrderHistory getOrderHistory(String userId) throws IOException {\n    // create the request\n    ObjectFactory factory = new ObjectFactory();\n    GetOrderHistoryRequest getOrderHistoryRequest = factory.createGetOrderHistoryRequest();\n    getOrderHistoryRequest.setUserId(userId);\n\n    // marshal the request\n    WebServiceMessage request = webServiceTemplate.getMessageFactory().createWebServiceMessage();\n    MarshallingUtils.marshal(webServiceTemplate.getMarshaller(), getOrderHistoryRequest, request);\n\n    // call the service\n    DOMResult responseResult = new DOMResult();\n    webServiceTemplate.sendSourceAndReceiveToResult(request.getPayloadSource(), responseResult);\n\n    // extract the needed elements\n    List<Order> orders = orderXPath.evaluate(responseResult.getNode(), new NodeMapper<Order>() {\n\n      @Override\n      public Order mapNode(Node node, int nodeNum) {\n        // get the orderId\n        String orderId = orderIdXPath.evaluateAsString(node);\n        // create an order\n        return new Order(orderId);\n      }\n    });\n\n    OrderHistory result = new OrderHistory();\n    result.setOrders(orders);\n    LOGGER.info(\"found '{}' orders for userId='{}'\", result.getOrders().size(), userId);\n\n    return result;\n  }", "signature": "OrderHistory getOrderHistory(String userId)", "full_signature": "public OrderHistory getOrderHistory(String userId)", "class_method_signature": "OrderHistoryClient.getOrderHistory(String userId)", "testcase": false, "constructor": false, "invocations": ["createGetOrderHistoryRequest", "setUserId", "createWebServiceMessage", "getMessageFactory", "marshal", "getMarshaller", "sendSourceAndReceiveToResult", "getPayloadSource", "evaluate", "getNode", "evaluateAsString", "setOrders", "info", "size", "getOrders"]}, "repository": {"repo_id": 70767609, "url": "https://github.com/code-not-found/spring-ws", "language": "Java", "is_fork": false, "fork_count": 220, "stargazer_count": 68, "size": 161, "license": "licensed"}}