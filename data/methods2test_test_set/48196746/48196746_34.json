{"test_class": {"identifier": "DependencyRulesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CODE_ASSERT = \"guru.nidi.codeassert.\";", "modifier": "private static final", "type": "String", "declarator": "CODE_ASSERT = \"guru.nidi.codeassert.\"", "var_name": "CODE_ASSERT"}, {"original_string": "private static final String DEP = CODE_ASSERT + \"dependency.\";", "modifier": "private static final", "type": "String", "declarator": "DEP = CODE_ASSERT + \"dependency.\"", "var_name": "DEP"}, {"original_string": "private static final Set<String> WILDCARD_UNDEFINED = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"model\"), ca(\"util\"), ca(\"junit\"), dep(\"a\"), dep(\"b\"), dep(\"c\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "WILDCARD_UNDEFINED = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"model\"), ca(\"util\"), ca(\"junit\"), dep(\"a\"), dep(\"b\"), dep(\"c\"))", "var_name": "WILDCARD_UNDEFINED"}, {"original_string": "private static final Set<String> WILDCARD_UNDEFINED2 = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"model\"), ca(\"util\"), ca(\"junit\"), dep(\"b.a\"), dep(\"b.b\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "WILDCARD_UNDEFINED2 = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"model\"), ca(\"util\"), ca(\"junit\"), dep(\"b.a\"), dep(\"b.b\"))", "var_name": "WILDCARD_UNDEFINED2"}, {"original_string": "private static final Set<String> UNDEFINED = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"junit\"), ca(\"model\"), ca(\"util\"), dep(\"a.a\"), dep(\"a.b\"), dep(\"b.a\"), dep(\"b.b\"), dep(\"c.a\"), dep(\"c.b\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "UNDEFINED = set(\"guru.nidi.codeassert\", ca(\"config\"), ca(\"dependency\"), ca(\"junit\"), ca(\"model\"), ca(\"util\"), dep(\"a.a\"), dep(\"a.b\"), dep(\"b.a\"), dep(\"b.b\"), dep(\"c.a\"), dep(\"c.b\"))", "var_name": "UNDEFINED"}, {"original_string": "private static final Set<DependencyMap> CYCLES = new HashSet<>(asList(new DependencyMap()\n                    .with(1, dep(\"a.a\"), set(dep(\"a.a.Aa1\")), dep(\"b.a\"))\n                    .with(1, dep(\"b.a\"), set(dep(\"b.a.Ba1\")), dep(\"a.a\"))\n                    .with(1, dep(\"b.a\"), set(dep(\"b.a.Ba2\")), dep(\"c.a\"))\n                    .with(1, dep(\"c.a\"), set(dep(\"c.a.Ca1\")), dep(\"a.a\"))\n                    .with(1, dep(\"c.a\"), set(dep(\"c.a.Ca1\")), dep(\"b.a\")),\n            new DependencyMap()\n                    .with(1, dep(\"c\"), set(dep(\"c.C2\"), dep(\"c.C1\")), dep(\"b\"))\n                    .with(1, dep(\"c\"), set(dep(\"c.C1\")), dep(\"a\"))\n                    .with(1, dep(\"b\"), set(dep(\"b.B1\")), dep(\"c\"))\n                    .with(1, dep(\"b\"), set(dep(\"b.B1\")), dep(\"a\"))\n                    .with(1, dep(\"a\"), set(dep(\"a.A1\")), dep(\"c\"))));", "modifier": "private static final", "type": "Set<DependencyMap>", "declarator": "CYCLES = new HashSet<>(asList(new DependencyMap()\n                    .with(1, dep(\"a.a\"), set(dep(\"a.a.Aa1\")), dep(\"b.a\"))\n                    .with(1, dep(\"b.a\"), set(dep(\"b.a.Ba1\")), dep(\"a.a\"))\n                    .with(1, dep(\"b.a\"), set(dep(\"b.a.Ba2\")), dep(\"c.a\"))\n                    .with(1, dep(\"c.a\"), set(dep(\"c.a.Ca1\")), dep(\"a.a\"))\n                    .with(1, dep(\"c.a\"), set(dep(\"c.a.Ca1\")), dep(\"b.a\")),\n            new DependencyMap()\n                    .with(1, dep(\"c\"), set(dep(\"c.C2\"), dep(\"c.C1\")), dep(\"b\"))\n                    .with(1, dep(\"c\"), set(dep(\"c.C1\")), dep(\"a\"))\n                    .with(1, dep(\"b\"), set(dep(\"b.B1\")), dep(\"c\"))\n                    .with(1, dep(\"b\"), set(dep(\"b.B1\")), dep(\"a\"))\n                    .with(1, dep(\"a\"), set(dep(\"a.A1\")), dep(\"c\"))))", "var_name": "CYCLES"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}], "file": "code-assert-core/src/test/java/guru/nidi/codeassert/dependency/DependencyRulesTest.java"}, "test_case": {"identifier": "wildcardNotAtEnd", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void wildcardNotAtEnd() {\n        assertThrows(IllegalArgumentException.class, () -> DependencyRule.allowAll(\"a*b\"));\n    }", "signature": "void wildcardNotAtEnd()", "full_signature": "@Test void wildcardNotAtEnd()", "class_method_signature": "DependencyRulesTest.wildcardNotAtEnd()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "allowAll"]}, "focal_class": {"identifier": "DependencyRules", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DependencyRules.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DependencyRules.class)", "var_name": "LOG"}, {"original_string": "private static final Pattern ANONYMOUS_CLASS = Pattern.compile(\".*?\\\\$\\\\d+\");", "modifier": "private static final", "type": "Pattern", "declarator": "ANONYMOUS_CLASS = Pattern.compile(\".*?\\\\$\\\\d+\")", "var_name": "ANONYMOUS_CLASS"}, {"original_string": "private static final ThreadLocal<DependencyRules> CURRENT = new ThreadLocal<>();", "modifier": "private static final", "type": "ThreadLocal<DependencyRules>", "declarator": "CURRENT = new ThreadLocal<>()", "var_name": "CURRENT"}, {"original_string": "private final List<DependencyRule> rules;", "modifier": "private final", "type": "List<DependencyRule>", "declarator": "rules", "var_name": "rules"}, {"original_string": "private final boolean allowAll;", "modifier": "private final", "type": "boolean", "declarator": "allowAll", "var_name": "allowAll"}, {"original_string": "private final boolean allowIntraPackageCycles;", "modifier": "private final", "type": "boolean", "declarator": "allowIntraPackageCycles", "var_name": "allowIntraPackageCycles"}, {"original_string": "final boolean allowIntraPackageDeps;", "modifier": "final", "type": "boolean", "declarator": "allowIntraPackageDeps", "var_name": "allowIntraPackageDeps"}], "methods": [{"identifier": "DependencyRules", "parameters": "(List<DependencyRule> rules, boolean allowAll,\n                            boolean allowIntraPackageCycles, boolean allowIntraPackageDeps)", "modifiers": "private", "return": "", "signature": " DependencyRules(List<DependencyRule> rules, boolean allowAll,\n                            boolean allowIntraPackageCycles, boolean allowIntraPackageDeps)", "full_signature": "private  DependencyRules(List<DependencyRule> rules, boolean allowAll,\n                            boolean allowIntraPackageCycles, boolean allowIntraPackageDeps)", "class_method_signature": "DependencyRules.DependencyRules(List<DependencyRule> rules, boolean allowAll,\n                            boolean allowIntraPackageCycles, boolean allowIntraPackageDeps)", "testcase": false, "constructor": true}, {"identifier": "allowAll", "parameters": "()", "modifiers": "public static", "return": "DependencyRules", "signature": "DependencyRules allowAll()", "full_signature": "public static DependencyRules allowAll()", "class_method_signature": "DependencyRules.allowAll()", "testcase": false, "constructor": false}, {"identifier": "denyAll", "parameters": "()", "modifiers": "public static", "return": "DependencyRules", "signature": "DependencyRules denyAll()", "full_signature": "public static DependencyRules denyAll()", "class_method_signature": "DependencyRules.denyAll()", "testcase": false, "constructor": false}, {"identifier": "allowIntraPackageCycles", "parameters": "(boolean allowIntraPackageCycles)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules allowIntraPackageCycles(boolean allowIntraPackageCycles)", "full_signature": "public DependencyRules allowIntraPackageCycles(boolean allowIntraPackageCycles)", "class_method_signature": "DependencyRules.allowIntraPackageCycles(boolean allowIntraPackageCycles)", "testcase": false, "constructor": false}, {"identifier": "allowIntraPackageDependencies", "parameters": "(boolean allowIntraPackageDeps)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules allowIntraPackageDependencies(boolean allowIntraPackageDeps)", "full_signature": "public DependencyRules allowIntraPackageDependencies(boolean allowIntraPackageDeps)", "class_method_signature": "DependencyRules.allowIntraPackageDependencies(boolean allowIntraPackageDeps)", "testcase": false, "constructor": false}, {"identifier": "addRule", "parameters": "(String pack)", "modifiers": "public", "return": "DependencyRule", "signature": "DependencyRule addRule(String pack)", "full_signature": "public DependencyRule addRule(String pack)", "class_method_signature": "DependencyRules.addRule(String pack)", "testcase": false, "constructor": false}, {"identifier": "addRule", "parameters": "(DependencyRule pack)", "modifiers": "public", "return": "DependencyRule", "signature": "DependencyRule addRule(DependencyRule pack)", "full_signature": "public DependencyRule addRule(DependencyRule pack)", "class_method_signature": "DependencyRules.addRule(DependencyRule pack)", "testcase": false, "constructor": false}, {"identifier": "addExternal", "parameters": "(String pack)", "modifiers": "public", "return": "DependencyRule", "signature": "DependencyRule addExternal(String pack)", "full_signature": "public DependencyRule addExternal(String pack)", "class_method_signature": "DependencyRules.addExternal(String pack)", "testcase": false, "constructor": false}, {"identifier": "withRules", "parameters": "(String basePackage, DependencyRuler ruler)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules withRules(String basePackage, DependencyRuler ruler)", "full_signature": "public DependencyRules withRules(String basePackage, DependencyRuler ruler)", "class_method_signature": "DependencyRules.withRules(String basePackage, DependencyRuler ruler)", "testcase": false, "constructor": false}, {"identifier": "withAbsoluteRules", "parameters": "(DependencyRuler... rulers)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules withAbsoluteRules(DependencyRuler... rulers)", "full_signature": "public DependencyRules withAbsoluteRules(DependencyRuler... rulers)", "class_method_signature": "DependencyRules.withAbsoluteRules(DependencyRuler... rulers)", "testcase": false, "constructor": false}, {"identifier": "withRelativeRules", "parameters": "(DependencyRuler... rulers)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules withRelativeRules(DependencyRuler... rulers)", "full_signature": "public DependencyRules withRelativeRules(DependencyRuler... rulers)", "class_method_signature": "DependencyRules.withRelativeRules(DependencyRuler... rulers)", "testcase": false, "constructor": false}, {"identifier": "withExternals", "parameters": "(DependencyRuler... rulers)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules withExternals(DependencyRuler... rulers)", "full_signature": "public DependencyRules withExternals(DependencyRuler... rulers)", "class_method_signature": "DependencyRules.withExternals(DependencyRuler... rulers)", "testcase": false, "constructor": false}, {"identifier": "withExternals", "parameters": "(String... externals)", "modifiers": "public", "return": "DependencyRules", "signature": "DependencyRules withExternals(String... externals)", "full_signature": "public DependencyRules withExternals(String... externals)", "class_method_signature": "DependencyRules.withExternals(String... externals)", "testcase": false, "constructor": false}, {"identifier": "doWithRules", "parameters": "(boolean withRulerName, boolean external, DependencyRuler... rulers)", "modifiers": "private", "return": "DependencyRules", "signature": "DependencyRules doWithRules(boolean withRulerName, boolean external, DependencyRuler... rulers)", "full_signature": "private DependencyRules doWithRules(boolean withRulerName, boolean external, DependencyRuler... rulers)", "class_method_signature": "DependencyRules.doWithRules(boolean withRulerName, boolean external, DependencyRuler... rulers)", "testcase": false, "constructor": false}, {"identifier": "doWithRules", "parameters": "(String basePackage, boolean external, DependencyRuler ruler)", "modifiers": "private", "return": "DependencyRules", "signature": "DependencyRules doWithRules(String basePackage, boolean external, DependencyRuler ruler)", "full_signature": "private DependencyRules doWithRules(String basePackage, boolean external, DependencyRuler ruler)", "class_method_signature": "DependencyRules.doWithRules(String basePackage, boolean external, DependencyRuler ruler)", "testcase": false, "constructor": false}, {"identifier": "addRuleToCurrent", "parameters": "(DependencyRule rule)", "modifiers": "static", "return": "DependencyRule", "signature": "DependencyRule addRuleToCurrent(DependencyRule rule)", "full_signature": "static DependencyRule addRuleToCurrent(DependencyRule rule)", "class_method_signature": "DependencyRules.addRuleToCurrent(DependencyRule rule)", "testcase": false, "constructor": false}, {"identifier": "initFields", "parameters": "(String basePackage, DependencyRuler ruler)", "modifiers": "private", "return": "List<DependencyRule>", "signature": "List<DependencyRule> initFields(String basePackage, DependencyRuler ruler)", "full_signature": "private List<DependencyRule> initFields(String basePackage, DependencyRuler ruler)", "class_method_signature": "DependencyRules.initFields(String basePackage, DependencyRuler ruler)", "testcase": false, "constructor": false}, {"identifier": "initField", "parameters": "(String basePackage, DependencyRuler ruler, Field f)", "modifiers": "private", "return": "DependencyRule", "signature": "DependencyRule initField(String basePackage, DependencyRuler ruler, Field f)", "full_signature": "private DependencyRule initField(String basePackage, DependencyRuler ruler, Field f)", "class_method_signature": "DependencyRules.initField(String basePackage, DependencyRuler ruler, Field f)", "testcase": false, "constructor": false}, {"identifier": "deprecationWarnings", "parameters": "(String name)", "modifiers": "private", "return": "void", "signature": "void deprecationWarnings(String name)", "full_signature": "private void deprecationWarnings(String name)", "class_method_signature": "DependencyRules.deprecationWarnings(String name)", "testcase": false, "constructor": false}, {"identifier": "postProcessFields", "parameters": "(List<DependencyRule> ruleFields, boolean external)", "modifiers": "private", "return": "void", "signature": "void postProcessFields(List<DependencyRule> ruleFields, boolean external)", "full_signature": "private void postProcessFields(List<DependencyRule> ruleFields, boolean external)", "class_method_signature": "DependencyRules.postProcessFields(List<DependencyRule> ruleFields, boolean external)", "testcase": false, "constructor": false}, {"identifier": "addPackages", "parameters": "(String base, Class<?> clazz)", "modifiers": "private", "return": "String", "signature": "String addPackages(String base, Class<?> clazz)", "full_signature": "private String addPackages(String base, Class<?> clazz)", "class_method_signature": "DependencyRules.addPackages(String base, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "addPackages", "parameters": "(String p1, String p2)", "modifiers": "private", "return": "String", "signature": "String addPackages(String p1, String p2)", "full_signature": "private String addPackages(String p1, String p2)", "class_method_signature": "DependencyRules.addPackages(String p1, String p2)", "testcase": false, "constructor": false}, {"identifier": "isAnonymous", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "boolean", "signature": "boolean isAnonymous(Class<?> clazz)", "full_signature": "private boolean isAnonymous(Class<?> clazz)", "class_method_signature": "DependencyRules.isAnonymous(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "reallySimpleName", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "String", "signature": "String reallySimpleName(Class<?> clazz)", "full_signature": "private String reallySimpleName(Class<?> clazz)", "class_method_signature": "DependencyRules.reallySimpleName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "camelCaseToDotCase", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String camelCaseToDotCase(String s)", "full_signature": "private static String camelCaseToDotCase(String s)", "class_method_signature": "DependencyRules.camelCaseToDotCase(String s)", "testcase": false, "constructor": false}, {"identifier": "rule", "parameters": "(String pattern)", "modifiers": "public", "return": "DependencyRule", "signature": "DependencyRule rule(String pattern)", "full_signature": "public DependencyRule rule(String pattern)", "class_method_signature": "DependencyRules.rule(String pattern)", "testcase": false, "constructor": false}, {"identifier": "processChar", "parameters": "(boolean dollarMode, boolean firstChar, char c)", "modifiers": "private static", "return": "String", "signature": "String processChar(boolean dollarMode, boolean firstChar, char c)", "full_signature": "private static String processChar(boolean dollarMode, boolean firstChar, char c)", "class_method_signature": "DependencyRules.processChar(boolean dollarMode, boolean firstChar, char c)", "testcase": false, "constructor": false}, {"identifier": "analyzeRules", "parameters": "(Scope<T> scope)", "modifiers": "public", "return": "Dependencies", "signature": "Dependencies analyzeRules(Scope<T> scope)", "full_signature": "public Dependencies analyzeRules(Scope<T> scope)", "class_method_signature": "DependencyRules.analyzeRules(Scope<T> scope)", "testcase": false, "constructor": false}, {"identifier": "mostSpecificUsageMatch", "parameters": "(T from, T to, RuleAccessor accessor)", "modifiers": "", "return": "int", "signature": "int mostSpecificUsageMatch(T from, T to, RuleAccessor accessor)", "full_signature": " int mostSpecificUsageMatch(T from, T to, RuleAccessor accessor)", "class_method_signature": "DependencyRules.mostSpecificUsageMatch(T from, T to, RuleAccessor accessor)", "testcase": false, "constructor": false}], "file": "code-assert-core/src/main/java/guru/nidi/codeassert/dependency/DependencyRules.java"}, "focal_method": {"identifier": "allowAll", "parameters": "()", "modifiers": "public static", "return": "DependencyRules", "body": "public static DependencyRules allowAll() {\n        return new DependencyRules(new ArrayList<>(), true, true, true);\n    }", "signature": "DependencyRules allowAll()", "full_signature": "public static DependencyRules allowAll()", "class_method_signature": "DependencyRules.allowAll()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}