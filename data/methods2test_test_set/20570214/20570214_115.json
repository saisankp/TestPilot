{"test_class": {"identifier": "JwtMacWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JwtMacWrapper wrapper = new JwtMacWrapper();", "modifier": "private final", "type": "JwtMacWrapper", "declarator": "wrapper = new JwtMacWrapper()", "var_name": "wrapper"}], "file": "java_src/src/test/java/com/google/crypto/tink/jwt/JwtMacWrapperTest.java"}, "test_case": {"identifier": "test_wrapMultiple_works", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_wrapMultiple_works() throws Exception {\n    PrimitiveSet<JwtMac> primitiveSet = PrimitiveSet.newPrimitiveSet(JwtMac.class);\n    JwtMac mac1 = new JwtHmac(\"HS256\", new SecretKeySpec(Random.randBytes(32), \"HMAC\"));\n    primitiveSet.addPrimitive(\n        mac1,\n        Keyset.Key.newBuilder()\n            .setKeyId(202020)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build());\n\n    JwtMac mac2 = new JwtHmac(\"HS256\", new SecretKeySpec(Random.randBytes(32), \"HMAC\"));\n    PrimitiveSet.Entry<JwtMac> entry =\n        primitiveSet.addPrimitive(\n            mac2,\n            Keyset.Key.newBuilder()\n                .setKeyId(202021)\n                .setStatus(KeyStatusType.ENABLED)\n                .setOutputPrefixType(OutputPrefixType.RAW)\n                .build());\n\n    primitiveSet.setPrimary(entry);\n    JwtMac wrapped = wrapper.wrap(primitiveSet);\n\n    ToBeSignedJwt tbs = new ToBeSignedJwt.Builder().setJwtId(\"blah\").build();\n    String compact = wrapped.createCompact(tbs);\n    JwtValidator validator = new JwtValidator.Builder().build();\n    Jwt token = wrapped.verifyCompact(compact, validator);\n    Jwt token2 = mac2.verifyCompact(compact, validator);\n\n    assertThrows(GeneralSecurityException.class, () -> mac1.verifyCompact(compact, validator));\n    assertThat(token.getJwtId()).isEqualTo(\"blah\");\n    assertThat(token.getAlgorithm()).isEqualTo(\"HS256\");\n    assertThat(token2.getJwtId()).isEqualTo(\"blah\");\n    assertThat(token2.getAlgorithm()).isEqualTo(\"HS256\");\n  }", "signature": "void test_wrapMultiple_works()", "full_signature": "@Test public void test_wrapMultiple_works()", "class_method_signature": "JwtMacWrapperTest.test_wrapMultiple_works()", "testcase": true, "constructor": false, "invocations": ["newPrimitiveSet", "randBytes", "addPrimitive", "build", "setOutputPrefixType", "setStatus", "setKeyId", "newBuilder", "randBytes", "addPrimitive", "build", "setOutputPrefixType", "setStatus", "setKeyId", "newBuilder", "setPrimary", "wrap", "build", "setJwtId", "createCompact", "build", "verifyCompact", "verifyCompact", "assertThrows", "verifyCompact", "isEqualTo", "assertThat", "getJwtId", "isEqualTo", "assertThat", "getAlgorithm", "isEqualTo", "assertThat", "getJwtId", "isEqualTo", "assertThat", "getAlgorithm"]}, "focal_class": {"identifier": "JwtMacWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<JwtMac, JwtMac>", "fields": [], "methods": [{"identifier": "validate", "parameters": "(PrimitiveSet<JwtMac> primitiveSet)", "modifiers": "private static", "return": "void", "signature": "void validate(PrimitiveSet<JwtMac> primitiveSet)", "full_signature": "private static void validate(PrimitiveSet<JwtMac> primitiveSet)", "class_method_signature": "JwtMacWrapper.validate(PrimitiveSet<JwtMac> primitiveSet)", "testcase": false, "constructor": false}, {"identifier": "JwtMacWrapper", "parameters": "()", "modifiers": "", "return": "", "signature": " JwtMacWrapper()", "full_signature": "  JwtMacWrapper()", "class_method_signature": "JwtMacWrapper.JwtMacWrapper()", "testcase": false, "constructor": true}, {"identifier": "wrap", "parameters": "(final PrimitiveSet<JwtMac> primitives)", "modifiers": "@Override public", "return": "JwtMac", "signature": "JwtMac wrap(final PrimitiveSet<JwtMac> primitives)", "full_signature": "@Override public JwtMac wrap(final PrimitiveSet<JwtMac> primitives)", "class_method_signature": "JwtMacWrapper.wrap(final PrimitiveSet<JwtMac> primitives)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<JwtMac>", "signature": "Class<JwtMac> getPrimitiveClass()", "full_signature": "@Override public Class<JwtMac> getPrimitiveClass()", "class_method_signature": "JwtMacWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<JwtMac>", "signature": "Class<JwtMac> getInputPrimitiveClass()", "full_signature": "@Override public Class<JwtMac> getInputPrimitiveClass()", "class_method_signature": "JwtMacWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "JwtMacWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/jwt/JwtMacWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<JwtMac> primitives)", "modifiers": "@Override public", "return": "JwtMac", "body": "@Override\n  public JwtMac wrap(final PrimitiveSet<JwtMac> primitives) throws GeneralSecurityException {\n    validate(primitives);\n    return new WrappedJwtMac(primitives);\n  }", "signature": "JwtMac wrap(final PrimitiveSet<JwtMac> primitives)", "full_signature": "@Override public JwtMac wrap(final PrimitiveSet<JwtMac> primitives)", "class_method_signature": "JwtMacWrapper.wrap(final PrimitiveSet<JwtMac> primitives)", "testcase": false, "constructor": false, "invocations": ["validate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}