{"test_class": {"identifier": "UnionFeatureCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);", "modifier": "", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(null)", "var_name": "ff"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/UnionFeatureCollectionTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();\n        tb.setName(\"featureType\");\n        tb.add(\"geometry\", Geometry.class);\n        tb.add(\"integer\", Integer.class);\n\n        GeometryFactory gf = new GeometryFactory();\n        SimpleFeatureBuilder b = new SimpleFeatureBuilder(tb.buildFeatureType());\n\n        DefaultFeatureCollection features = new DefaultFeatureCollection(null, b.getFeatureType());\n        DefaultFeatureCollection secondFeatures = new DefaultFeatureCollection(null, b\n                .getFeatureType());\n        Geometry[] firstArrayGeometry = new Geometry[5];\n        Geometry[] secondArrayGeometry = new Geometry[5];\n        for (int numFeatures = 0; numFeatures < 5; numFeatures++) {\n            Coordinate firstArray[] = new Coordinate[5];\n            for (int j = 0; j < 4; j++) {\n                firstArray[j] = new Coordinate(j + numFeatures, j + numFeatures);\n            }\n            firstArray[4] = new Coordinate(0 + numFeatures, 0 + numFeatures);\n            LinearRing shell = new LinearRing(firstArray, new PrecisionModel(), 0);\n            b.add(gf.createPolygon(shell, null));\n            b.add(0);\n            firstArrayGeometry[numFeatures] = gf.createPolygon(shell, null);\n            features.add(b.buildFeature(numFeatures + \"\"));\n\n        }\n        for (int numFeatures = 0; numFeatures < 5; numFeatures++) {\n            Coordinate array[] = new Coordinate[5];\n            for (int j = 0; j < 4; j++) {\n                array[j] = new Coordinate(j + numFeatures + 50, j + numFeatures + 50);\n            }\n            array[4] = new Coordinate(0 + numFeatures + 50, 0 + numFeatures + 50);\n            LinearRing shell = new LinearRing(array, new PrecisionModel(), 0);\n            b.add(gf.createPolygon(shell, null));\n            b.add(0);\n            secondArrayGeometry[numFeatures] = gf.createPolygon(shell, null);\n            secondFeatures.add(b.buildFeature(numFeatures + \"\"));\n\n        }\n        UnionFeatureCollection process = new UnionFeatureCollection();\n        SimpleFeatureCollection output = process.execute(features, secondFeatures);\n        assertEquals(5, output.size());\n\n        Geometry[] union = new Geometry[10];\n        for (int i = 0; i < firstArrayGeometry.length; i++) {\n            union[i] = firstArrayGeometry[i];\n        }\n        for (int i = 0; i < secondArrayGeometry.length; i++) {\n            union[i + 5] = secondArrayGeometry[i];\n        }\n        GeometryCollection unionCollection = new GeometryCollection(union, new GeometryFactory());\n        SimpleFeatureIterator iterator = output.features();\n\n        for (int h = 0; h < unionCollection.getNumGeometries(); h++) {\n            Geometry expected = (Geometry) unionCollection.getGeometryN(h);\n            SimpleFeature sf = iterator.next();\n            assertTrue(expected.equals((Geometry) sf.getDefaultGeometry()));\n        }\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "UnionFeatureCollectionTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["setName", "add", "add", "buildFeatureType", "getFeatureType", "getFeatureType", "add", "createPolygon", "add", "createPolygon", "add", "buildFeature", "add", "createPolygon", "add", "createPolygon", "add", "buildFeature", "execute", "assertEquals", "size", "features", "getNumGeometries", "getGeometryN", "next", "assertTrue", "equals", "getDefaultGeometry"]}, "focal_class": {"identifier": "UnionFeatureCollection", "superclass": "", "interfaces": "implements VectorProcess", "fields": [{"original_string": "static final String SCHEMA_NAME = \"Union_Layer\";", "modifier": "static final", "type": "String", "declarator": "SCHEMA_NAME = \"Union_Layer\"", "var_name": "SCHEMA_NAME"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "class_method_signature": "UnionFeatureCollection.execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/UnionFeatureCollection.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "modifiers": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(name = \"result\", description = \"Output feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)\n            throws ClassNotFoundException {\n        if (!(firstFeatures.features().next().getDefaultGeometry().getClass().equals(secondFeatures\n                .features().next().getDefaultGeometry().getClass()))) {\n            throw new ProcessException(\"Different default geometries, cannot perform union\");\n        } else {\n            return new UnitedFeatureCollection(firstFeatures, secondFeatures);\n        }\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "full_signature": "@DescribeResult(name = \"result\", description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "class_method_signature": "UnionFeatureCollection.execute(\n            @DescribeParameter(name = \"first\", description = \"First input feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "testcase": false, "constructor": false, "invocations": ["equals", "getClass", "getDefaultGeometry", "next", "features", "getClass", "getDefaultGeometry", "next", "features"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}