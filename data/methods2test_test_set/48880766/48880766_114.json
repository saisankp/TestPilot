{"test_class": {"identifier": "CsvReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LINE_END = System.lineSeparator();", "modifier": "private static final", "type": "String", "declarator": "LINE_END = System.lineSeparator()", "var_name": "LINE_END"}, {"original_string": "private final ColumnType[] bus_types = {SHORT, STRING, STRING, FLOAT, FLOAT};", "modifier": "private final", "type": "ColumnType[]", "declarator": "bus_types = {SHORT, STRING, STRING, FLOAT, FLOAT}", "var_name": "bus_types"}, {"original_string": "private final ColumnType[] bus_types_with_SKIP = {SHORT, STRING, SKIP, DOUBLE, DOUBLE};", "modifier": "private final", "type": "ColumnType[]", "declarator": "bus_types_with_SKIP = {SHORT, STRING, SKIP, DOUBLE, DOUBLE}", "var_name": "bus_types_with_SKIP"}], "file": "core/src/test/java/tech/tablesaw/io/csv/CsvReaderTest.java"}, "test_case": {"identifier": "testDateTimeDetection3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDateTimeDetection3() {\n\n    final Reader reader =\n        new StringReader(\n            \"Date\"\n                + LINE_END\n                + \"09-NOV-2014 13:03:04\"\n                + LINE_END\n                + \"09-OCT-2014 13:03:56\"\n                + LINE_END);\n\n    final boolean header = true;\n\n    CsvReadOptions options =\n        CsvReadOptions.builder(reader)\n            .header(header)\n            .dateTimeFormat(\n                new DateTimeFormatterBuilder()\n                    .parseCaseInsensitive()\n                    .appendPattern(\"dd-MMM-yyyy HH:mm:ss\")\n                    .toFormatter())\n            .build();\n\n    final List<ColumnType> actual = asList(new CsvReader().detectColumnTypes(reader, options));\n\n    assertEquals(Collections.singletonList(LOCAL_DATE_TIME), actual);\n  }", "signature": "void testDateTimeDetection3()", "full_signature": "@Test public void testDateTimeDetection3()", "class_method_signature": "CsvReaderTest.testDateTimeDetection3()", "testcase": true, "constructor": false, "invocations": ["build", "dateTimeFormat", "header", "builder", "toFormatter", "appendPattern", "parseCaseInsensitive", "asList", "detectColumnTypes", "assertEquals", "singletonList"]}, "focal_class": {"identifier": "CsvReader", "superclass": "extends FileReader", "interfaces": "implements DataReader<CsvReadOptions>", "fields": [{"original_string": "private static final CsvReader INSTANCE = new CsvReader();", "modifier": "private static final", "type": "CsvReader", "declarator": "INSTANCE = new CsvReader()", "var_name": "INSTANCE"}], "methods": [{"identifier": "register", "parameters": "(ReaderRegistry registry)", "modifiers": "public static", "return": "void", "signature": "void register(ReaderRegistry registry)", "full_signature": "public static void register(ReaderRegistry registry)", "class_method_signature": "CsvReader.register(ReaderRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "CsvReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " CsvReader()", "full_signature": "public  CsvReader()", "class_method_signature": "CsvReader.CsvReader()", "testcase": false, "constructor": true}, {"identifier": "getReaderAndColumnTypes", "parameters": "(Source source, CsvReadOptions options)", "modifiers": "private", "return": "Pair<Reader, ColumnType[]>", "signature": "Pair<Reader, ColumnType[]> getReaderAndColumnTypes(Source source, CsvReadOptions options)", "full_signature": "private Pair<Reader, ColumnType[]> getReaderAndColumnTypes(Source source, CsvReadOptions options)", "class_method_signature": "CsvReader.getReaderAndColumnTypes(Source source, CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(CsvReadOptions options)", "modifiers": "public", "return": "Table", "signature": "Table read(CsvReadOptions options)", "full_signature": "public Table read(CsvReadOptions options)", "class_method_signature": "CsvReader.read(CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(CsvReadOptions options, boolean headerOnly)", "modifiers": "private", "return": "Table", "signature": "Table read(CsvReadOptions options, boolean headerOnly)", "full_signature": "private Table read(CsvReadOptions options, boolean headerOnly)", "class_method_signature": "CsvReader.read(CsvReadOptions options, boolean headerOnly)", "testcase": false, "constructor": false}, {"identifier": "printColumnTypes", "parameters": "(CsvReadOptions options)", "modifiers": "public", "return": "String", "signature": "String printColumnTypes(CsvReadOptions options)", "full_signature": "public String printColumnTypes(CsvReadOptions options)", "class_method_signature": "CsvReader.printColumnTypes(CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "detectColumnTypes", "parameters": "(Reader reader, CsvReadOptions options)", "modifiers": "protected", "return": "ColumnType[]", "signature": "ColumnType[] detectColumnTypes(Reader reader, CsvReadOptions options)", "full_signature": "protected ColumnType[] detectColumnTypes(Reader reader, CsvReadOptions options)", "class_method_signature": "CsvReader.detectColumnTypes(Reader reader, CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "csvParser", "parameters": "(CsvReadOptions options)", "modifiers": "private", "return": "CsvParser", "signature": "CsvParser csvParser(CsvReadOptions options)", "full_signature": "private CsvParser csvParser(CsvReadOptions options)", "class_method_signature": "CsvReader.csvParser(CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "csvFormat", "parameters": "(CsvReadOptions options)", "modifiers": "private", "return": "CsvFormat", "signature": "CsvFormat csvFormat(CsvReadOptions options)", "full_signature": "private CsvFormat csvFormat(CsvReadOptions options)", "class_method_signature": "CsvReader.csvFormat(CsvReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Source source)", "modifiers": "@Override public", "return": "Table", "signature": "Table read(Source source)", "full_signature": "@Override public Table read(Source source)", "class_method_signature": "CsvReader.read(Source source)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/csv/CsvReader.java"}, "focal_method": {"identifier": "detectColumnTypes", "parameters": "(Reader reader, CsvReadOptions options)", "modifiers": "protected", "return": "ColumnType[]", "body": "protected ColumnType[] detectColumnTypes(Reader reader, CsvReadOptions options) {\n    boolean header = options.header();\n    int linesToSkip = header ? 1 : 0;\n\n    CsvParser parser = csvParser(options);\n\n    try {\n      return getColumnTypes(reader, options, linesToSkip, parser);\n    } finally {\n      parser.stopParsing();\n      // we don't close the reader since we didn't create it\n    }\n  }", "signature": "ColumnType[] detectColumnTypes(Reader reader, CsvReadOptions options)", "full_signature": "protected ColumnType[] detectColumnTypes(Reader reader, CsvReadOptions options)", "class_method_signature": "CsvReader.detectColumnTypes(Reader reader, CsvReadOptions options)", "testcase": false, "constructor": false, "invocations": ["header", "csvParser", "getColumnTypes", "stopParsing"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}