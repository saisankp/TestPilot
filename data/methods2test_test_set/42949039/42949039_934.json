{"test_class": {"identifier": "DataBridgeAppTest", "superclass": "extends AbstractDataBridgeTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public EnvironmentVariables environmentVariables = new EnvironmentVariables();", "modifier": "@Rule\n    public", "type": "EnvironmentVariables", "declarator": "environmentVariables = new EnvironmentVariables()", "var_name": "environmentVariables"}, {"original_string": "private MockDataBridgeApp dataBridgeApp = new MockDataBridgeApp();", "modifier": "private", "type": "MockDataBridgeApp", "declarator": "dataBridgeApp = new MockDataBridgeApp()", "var_name": "dataBridgeApp"}], "file": "herd-code/herd-tools/herd-tools-common/src/test/java/org/finra/herd/tools/common/databridge/DataBridgeAppTest.java"}, "test_case": {"identifier": "testParseLongCommandLineArgumentsSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseLongCommandLineArgumentsSuccess()\n    {\n        String[] arguments = {\"--s3AccessKey\", S3_ACCESS_KEY, \"--s3SecretKey\", S3_SECRET_KEY, \"--s3Endpoint\", S3_ENDPOINT_US_STANDARD, \"--localPath\",\n            LOCAL_TEMP_PATH_INPUT.toString(), \"--manifestPath\", STRING_VALUE, \"--regServerHost\", WEB_SERVICE_HOSTNAME, \"--regServerPort\",\n            WEB_SERVICE_HTTPS_PORT.toString(), \"--httpProxyHost\", HTTP_PROXY_HOST, \"--httpProxyPort\", HTTP_PROXY_PORT.toString(), \"--ssl\", \"true\", \"-u\",\n            WEB_SERVICE_HTTPS_USERNAME, \"-w\", WEB_SERVICE_HTTPS_PASSWORD, \"--trustSelfSignedCertificate\", \"true\", \"--disableHostnameVerification\", \"true\"};\n        assertNull(dataBridgeApp.parseCommandLineArguments(arguments, applicationContext));\n    }", "signature": "void testParseLongCommandLineArgumentsSuccess()", "full_signature": "@Test public void testParseLongCommandLineArgumentsSuccess()", "class_method_signature": "DataBridgeAppTest.testParseLongCommandLineArgumentsSuccess()", "testcase": true, "constructor": false, "invocations": ["toString", "toString", "toString", "assertNull", "parseCommandLineArguments"]}, "focal_class": {"identifier": "DataBridgeApp", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BUILD_INFO_STRING_FORMAT = \"buildDate: %s\\nbuildNumber: %s\\nbuildOS: %s\\nbuildUser: %s\";", "modifier": "public static final", "type": "String", "declarator": "BUILD_INFO_STRING_FORMAT = \"buildDate: %s\\nbuildNumber: %s\\nbuildOS: %s\\nbuildUser: %s\"", "var_name": "BUILD_INFO_STRING_FORMAT"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DataBridgeApp.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DataBridgeApp.class)", "var_name": "LOGGER"}, {"original_string": "protected Option s3AccessKeyOpt;", "modifier": "protected", "type": "Option", "declarator": "s3AccessKeyOpt", "var_name": "s3AccessKeyOpt"}, {"original_string": "protected Option s3SecretKeyOpt;", "modifier": "protected", "type": "Option", "declarator": "s3SecretKeyOpt", "var_name": "s3SecretKeyOpt"}, {"original_string": "protected Option s3EndpointOpt;", "modifier": "protected", "type": "Option", "declarator": "s3EndpointOpt", "var_name": "s3EndpointOpt"}, {"original_string": "protected Option localPathOpt;", "modifier": "protected", "type": "Option", "declarator": "localPathOpt", "var_name": "localPathOpt"}, {"original_string": "protected Option manifestPathOpt;", "modifier": "protected", "type": "Option", "declarator": "manifestPathOpt", "var_name": "manifestPathOpt"}, {"original_string": "protected Option regServerHostOpt;", "modifier": "protected", "type": "Option", "declarator": "regServerHostOpt", "var_name": "regServerHostOpt"}, {"original_string": "protected Option regServerPortOpt;", "modifier": "protected", "type": "Option", "declarator": "regServerPortOpt", "var_name": "regServerPortOpt"}, {"original_string": "protected Option dmRegServerHostOpt;", "modifier": "protected", "type": "Option", "declarator": "dmRegServerHostOpt", "var_name": "dmRegServerHostOpt"}, {"original_string": "protected Option dmRegServerPortOpt;", "modifier": "protected", "type": "Option", "declarator": "dmRegServerPortOpt", "var_name": "dmRegServerPortOpt"}, {"original_string": "protected Option sslOpt;", "modifier": "protected", "type": "Option", "declarator": "sslOpt", "var_name": "sslOpt"}, {"original_string": "protected Option usernameOpt;", "modifier": "protected", "type": "Option", "declarator": "usernameOpt", "var_name": "usernameOpt"}, {"original_string": "protected Option passwordOpt;", "modifier": "protected", "type": "Option", "declarator": "passwordOpt", "var_name": "passwordOpt"}, {"original_string": "protected Option enableEnvVariablesOpt;", "modifier": "protected", "type": "Option", "declarator": "enableEnvVariablesOpt", "var_name": "enableEnvVariablesOpt"}, {"original_string": "protected Option trustSelfSignedCertificateOpt;", "modifier": "protected", "type": "Option", "declarator": "trustSelfSignedCertificateOpt", "var_name": "trustSelfSignedCertificateOpt"}, {"original_string": "protected Option disableHostnameVerificationOpt;", "modifier": "protected", "type": "Option", "declarator": "disableHostnameVerificationOpt", "var_name": "disableHostnameVerificationOpt"}, {"original_string": "protected Option helpOpt;", "modifier": "protected", "type": "Option", "declarator": "helpOpt", "var_name": "helpOpt"}, {"original_string": "protected Option versionOpt;", "modifier": "protected", "type": "Option", "declarator": "versionOpt", "var_name": "versionOpt"}, {"original_string": "protected Option httpProxyHostOpt;", "modifier": "protected", "type": "Option", "declarator": "httpProxyHostOpt", "var_name": "httpProxyHostOpt"}, {"original_string": "protected Option httpProxyPortOpt;", "modifier": "protected", "type": "Option", "declarator": "httpProxyPortOpt", "var_name": "httpProxyPortOpt"}, {"original_string": "protected Option maxThreadsOpt;", "modifier": "protected", "type": "Option", "declarator": "maxThreadsOpt", "var_name": "maxThreadsOpt"}, {"original_string": "protected Option socketTimeoutOpt;", "modifier": "protected", "type": "Option", "declarator": "socketTimeoutOpt", "var_name": "socketTimeoutOpt"}, {"original_string": "protected Boolean useSsl;", "modifier": "protected", "type": "Boolean", "declarator": "useSsl", "var_name": "useSsl"}, {"original_string": "protected Boolean trustSelfSignedCertificate;", "modifier": "protected", "type": "Boolean", "declarator": "trustSelfSignedCertificate", "var_name": "trustSelfSignedCertificate"}, {"original_string": "protected Boolean disableHostnameVerification;", "modifier": "protected", "type": "Boolean", "declarator": "disableHostnameVerification", "var_name": "disableHostnameVerification"}, {"original_string": "protected Integer regServerPort;", "modifier": "protected", "type": "Integer", "declarator": "regServerPort", "var_name": "regServerPort"}, {"original_string": "protected Integer httpProxyPort;", "modifier": "protected", "type": "Integer", "declarator": "httpProxyPort", "var_name": "httpProxyPort"}, {"original_string": "protected Integer maxThreads;", "modifier": "protected", "type": "Integer", "declarator": "maxThreads", "var_name": "maxThreads"}, {"original_string": "protected String regServerHost;", "modifier": "protected", "type": "String", "declarator": "regServerHost", "var_name": "regServerHost"}], "methods": [{"identifier": "getArgumentParser", "parameters": "()", "modifiers": "public abstract", "return": "ArgumentParser", "signature": "ArgumentParser getArgumentParser()", "full_signature": "public abstract ArgumentParser getArgumentParser()", "class_method_signature": "DataBridgeApp.getArgumentParser()", "testcase": false, "constructor": false}, {"identifier": "go", "parameters": "(String[] args)", "modifiers": "public abstract", "return": "ReturnValue", "signature": "ReturnValue go(String[] args)", "full_signature": "public abstract ReturnValue go(String[] args)", "class_method_signature": "DataBridgeApp.go(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected", "return": "ReturnValue", "signature": "ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "DataBridgeApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "createApplicationContext", "parameters": "()", "modifiers": "protected", "return": "ApplicationContext", "signature": "ApplicationContext createApplicationContext()", "full_signature": "protected ApplicationContext createApplicationContext()", "class_method_signature": "DataBridgeApp.createApplicationContext()", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-tools-common/src/main/java/org/finra/herd/tools/common/databridge/DataBridgeApp.java"}, "focal_method": {"identifier": "parseCommandLineArguments", "parameters": "(String[] args, ApplicationContext applicationContext)", "modifiers": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected", "return": "ReturnValue", "body": "@SuppressWarnings(\"PMD.SystemPrintln\")\n    @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\")\n    protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)\n    {\n        // Get the application argument parser.\n        ArgumentParser argParser = getArgumentParser();\n\n        try\n        {\n            s3AccessKeyOpt = argParser.addArgument(\"a\", \"s3AccessKey\", true, \"S3 access key.\", false);\n            s3SecretKeyOpt = argParser.addArgument(\"p\", \"s3SecretKey\", true, \"S3 secret key.\", false);\n            s3EndpointOpt = argParser.addArgument(\"e\", \"s3Endpoint\", true, \"S3 endpoint.\", false);\n            localPathOpt = argParser.addArgument(\"l\", \"localPath\", true, \"The path to files on your local file system.\", true);\n            manifestPathOpt = argParser.addArgument(\"m\", \"manifestPath\", true, \"Local path to the manifest file.\", true);\n            regServerHostOpt = argParser.addArgument(\"H\", \"regServerHost\", true, \"Registration Service hostname.\", false);\n            regServerPortOpt = argParser.addArgument(\"P\", \"regServerPort\", true, \"Registration Service port.\", false);\n            dmRegServerHostOpt = argParser.addArgument(\"Y\", \"dmRegServerHost\", true, \"Registration Service hostname (deprecated - use regServerHost).\", false);\n            dmRegServerPortOpt = argParser.addArgument(\"Z\", \"dmRegServerPort\", true, \"Registration Service port (deprecated - use regServerPort.\", false);\n            sslOpt = argParser.addArgument(\"s\", \"ssl\", true, \"Enable or disable SSL (HTTPS).\", false);\n            usernameOpt = argParser.addArgument(\"u\", \"username\", true, \"The username for HTTPS client authentication.\", false);\n            passwordOpt = argParser.addArgument(\"w\", \"password\", true, \"The password used for HTTPS client authentication.\", false);\n            enableEnvVariablesOpt = argParser.addArgument(\"E\", \"enableEnvVariables\", true,\n                \"The enableEnvVariables used for HTTPS client authentication through environment provided variable.\", false);\n            trustSelfSignedCertificateOpt =\n                argParser.addArgument(\"C\", \"trustSelfSignedCertificate\", true, \"If set to true, makes HTTPS client trust self-signed certificate.\", false);\n            disableHostnameVerificationOpt =\n                argParser.addArgument(\"d\", \"disableHostnameVerification\", true, \"If set to true, turns off hostname verification.\", false);\n            helpOpt = argParser.addArgument(\"h\", \"help\", false, \"Display usage information and exit.\", false);\n            versionOpt = argParser.addArgument(\"v\", \"version\", false, \"Display version information and exit.\", false);\n            httpProxyHostOpt = argParser.addArgument(\"n\", \"httpProxyHost\", true, \"HTTP proxy host.\", false);\n            httpProxyPortOpt = argParser.addArgument(\"o\", \"httpProxyPort\", true, \"HTTP proxy port.\", false);\n            maxThreadsOpt = argParser.addArgument(\"t\", \"maxThreads\", true, \"Maximum number of threads.\", false);\n            socketTimeoutOpt =\n                argParser.addArgument(\"c\", \"socketTimeout\", true, \"The socket timeout in milliseconds. 0 indicates no timeout. Default 50000.\", false);\n\n            // Parse command line arguments without failing on any missing required arguments by passing \"false\" as the second argument.\n            argParser.parseArguments(args, false);\n\n            // If help option was specified, then display usage information and return success.\n            if (argParser.getBooleanValue(helpOpt))\n            {\n                System.out.println(argParser.getUsageInformation());\n                return ReturnValue.SUCCESS;\n            }\n\n            // If version option was specified, then display version information and return success.\n            if (argParser.getBooleanValue(versionOpt))\n            {\n                BuildInformation buildInformation = applicationContext.getBean(BuildInformation.class);\n                System.out.println(String\n                    .format(BUILD_INFO_STRING_FORMAT, buildInformation.getBuildDate(), buildInformation.getBuildNumber(), buildInformation.getBuildOs(),\n                        buildInformation.getBuildUser()));\n                return ReturnValue.SUCCESS;\n            }\n\n            // Parse command line arguments for the second time, enforcing the required arguments by passing \"true\" as the second argument.\n            argParser.parseArguments(args, true);\n\n            // Extract boolean option values passing \"false\" as a default value.\n            useSsl = argParser.getStringValueAsBoolean(sslOpt, false);\n            trustSelfSignedCertificate = argParser.getStringValueAsBoolean(trustSelfSignedCertificateOpt, false);\n            disableHostnameVerification = argParser.getStringValueAsBoolean(disableHostnameVerificationOpt, false);\n\n            if (useSsl)\n            {\n                // Username is required when useSsl is enabled.\n                if (StringUtils.isBlank(argParser.getStringValue(usernameOpt)))\n                {\n                    throw new ParseException(\"Username is required when SSL is enabled.\");\n                }\n                // Password or enableEnvVariables with corresponding env var is required when useSsl is enabled.\n                ToolsArgumentHelper.validateCliEnvArgument(argParser, passwordOpt, enableEnvVariablesOpt);\n            }\n\n            // Ensure that both the S3 secret and access keys were specified or both not specified.\n            if (StringUtils.isNotBlank(argParser.getStringValue(s3SecretKeyOpt)) && StringUtils.isBlank(argParser.getStringValue(s3AccessKeyOpt)))\n            {\n                throw new ParseException(\"S3 access key must be specified when S3 secret key is present.\");\n            }\n            if (StringUtils.isNotBlank(argParser.getStringValue(s3AccessKeyOpt)) && StringUtils.isBlank(argParser.getStringValue(s3SecretKeyOpt)))\n            {\n                throw new ParseException(\"S3 secret key must be specified when S3 access key is present.\");\n            }\n\n            // Get the registration server host\n            regServerHost = argParser.getStringValue(regServerHostOpt);\n            if (StringUtils.isBlank(regServerHost))\n            {\n                regServerHost = argParser.getStringValue(dmRegServerHostOpt);\n                if (StringUtils.isBlank(regServerHost))\n                {\n                    throw new ParseException(\"A registration host must be specified.\");\n                }\n            }\n            else\n            {\n                if (StringUtils.isNotBlank(argParser.getStringValue(dmRegServerHostOpt)))\n                {\n                    throw new ParseException(\"The regServerHost and the dmRegServerHost options can't both be specified.\");\n                }\n            }\n\n            // Get the registration server port\n            regServerPort = argParser.getIntegerValue(regServerPortOpt);\n            if (regServerPort == null)\n            {\n                regServerPort = argParser.getIntegerValue(dmRegServerPortOpt);\n                if (regServerPort == null)\n                {\n                    throw new ParseException(\"A registration port must be specified.\");\n                }\n            }\n            else\n            {\n                if (argParser.getIntegerValue(dmRegServerPortOpt) != null)\n                {\n                    throw new ParseException(\"The regServerPort and the dmRegServerPort options can't both be specified.\");\n                }\n            }\n\n            // Extract all Integer option values here to catch any NumberFormatException exceptions.\n            httpProxyPort = argParser.getIntegerValue(httpProxyPortOpt);\n            maxThreads = argParser.getIntegerValue(maxThreadsOpt, ToolsCommonConstants.DEFAULT_THREADS);\n        }\n        catch (ParseException ex)\n        {\n            // Log a friendly error and return a failure which will cause the application to exit.\n            LOGGER.error(\"Error parsing command line arguments: \" + ex.getMessage() + \"\\n\" + argParser.getUsageInformation());\n            return ReturnValue.FAILURE;\n        }\n\n        // The command line arguments were all parsed successfully so return null to continue processing.\n        return null;\n    }", "signature": "ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "full_signature": "@SuppressWarnings(\"PMD.SystemPrintln\") @SuppressFBWarnings(value = \"VA_FORMAT_STRING_USES_NEWLINE\", justification = \"We will use the standard carriage return character.\") protected ReturnValue parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "class_method_signature": "DataBridgeApp.parseCommandLineArguments(String[] args, ApplicationContext applicationContext)", "testcase": false, "constructor": false, "invocations": ["getArgumentParser", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "addArgument", "parseArguments", "getBooleanValue", "println", "getUsageInformation", "getBooleanValue", "getBean", "println", "format", "getBuildDate", "getBuildNumber", "getBuildOs", "getBuildUser", "parseArguments", "getStringValueAsBoolean", "getStringValueAsBoolean", "getStringValueAsBoolean", "isBlank", "getStringValue", "validateCliEnvArgument", "isNotBlank", "getStringValue", "isBlank", "getStringValue", "isNotBlank", "getStringValue", "isBlank", "getStringValue", "getStringValue", "isBlank", "getStringValue", "isBlank", "isNotBlank", "getStringValue", "getIntegerValue", "getIntegerValue", "getIntegerValue", "getIntegerValue", "getIntegerValue", "error", "getMessage", "getUsageInformation"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}