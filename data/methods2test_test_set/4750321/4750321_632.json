{"test_class": {"identifier": "FilterToCQLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FilterToCQL toCQL = new FilterToCQL();", "modifier": "", "type": "FilterToCQL", "declarator": "toCQL = new FilterToCQL()", "var_name": "toCQL"}], "file": "modules/library/cql/src/test/java/org/geotools/filter/text/cql2/FilterToCQLTest.java"}, "test_case": {"identifier": "testAfter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testAfter() throws Exception{\n    \t\n    \tcqlTest(\"attr AFTER 2006-12-31T01:30:00Z\");\n    }", "signature": "void testAfter()", "full_signature": "@Test public void testAfter()", "class_method_signature": "FilterToCQLTest.testAfter()", "testcase": true, "constructor": false, "invocations": ["cqlTest"]}, "focal_class": {"identifier": "FilterToCQL", "superclass": "", "interfaces": "implements FilterVisitor, ExpressionVisitor", "fields": [{"original_string": "private static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.filter\");", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.filter\")", "var_name": "LOGGER"}, {"original_string": "private static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";", "modifier": "private static final", "type": "String", "declarator": "DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss'Z'\"", "var_name": "DATE_FORMAT"}], "methods": [{"identifier": "asStringBuffer", "parameters": "( Object extraData)", "modifiers": "protected", "return": "StringBuffer", "signature": "StringBuffer asStringBuffer( Object extraData)", "full_signature": "protected StringBuffer asStringBuffer( Object extraData)", "class_method_signature": "FilterToCQL.asStringBuffer( Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExcludeFilter filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(ExcludeFilter filter, Object extraData)", "full_signature": "public Object visit(ExcludeFilter filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(ExcludeFilter filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(IncludeFilter filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(IncludeFilter filter, Object extraData)", "full_signature": "public Object visit(IncludeFilter filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(IncludeFilter filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(And filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(And filter, Object extraData)", "full_signature": "public Object visit(And filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(And filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Id filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Id filter, Object extraData)", "full_signature": "public Object visit(Id filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Id filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Not filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Not filter, Object extraData)", "full_signature": "public Object visit(Not filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Not filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Or filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Or filter, Object extraData)", "full_signature": "public Object visit(Or filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Or filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsBetween filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsBetween filter, Object extraData)", "full_signature": "public Object visit(PropertyIsBetween filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsBetween filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsEqualTo filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsEqualTo filter, Object extraData)", "full_signature": "public Object visit(PropertyIsEqualTo filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsEqualTo filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNotEqualTo filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsNotEqualTo filter, Object extraData)", "full_signature": "public Object visit(PropertyIsNotEqualTo filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsNotEqualTo filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThan filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThan filter, Object extraData)", "full_signature": "public Object visit(PropertyIsGreaterThan filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsGreaterThan filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "comparisonHasDate", "parameters": "( Filter filter)", "modifiers": "private", "return": "boolean", "signature": "boolean comparisonHasDate( Filter filter)", "full_signature": "private boolean comparisonHasDate( Filter filter)", "class_method_signature": "FilterToCQL.comparisonHasDate( Filter filter)", "testcase": false, "constructor": false}, {"identifier": "after", "parameters": "( PropertyIsGreaterThan filter, StringBuffer output )", "modifiers": "private", "return": "StringBuffer", "signature": "StringBuffer after( PropertyIsGreaterThan filter, StringBuffer output )", "full_signature": "private StringBuffer after( PropertyIsGreaterThan filter, StringBuffer output )", "class_method_signature": "FilterToCQL.after( PropertyIsGreaterThan filter, StringBuffer output )", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThanOrEqualTo filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThanOrEqualTo filter, Object extraData)", "full_signature": "public Object visit(PropertyIsGreaterThanOrEqualTo filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsGreaterThanOrEqualTo filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThan filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLessThan filter, Object extraData)", "full_signature": "public Object visit(PropertyIsLessThan filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsLessThan filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThanOrEqualTo filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLessThanOrEqualTo filter, Object extraData)", "full_signature": "public Object visit(PropertyIsLessThanOrEqualTo filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsLessThanOrEqualTo filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLike filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLike filter, Object extraData)", "full_signature": "public Object visit(PropertyIsLike filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsLike filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNull filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsNull filter, Object extraData)", "full_signature": "public Object visit(PropertyIsNull filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyIsNull filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BBOX filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(BBOX filter, Object extraData)", "full_signature": "public Object visit(BBOX filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(BBOX filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Beyond filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Beyond filter, Object extraData)", "full_signature": "public Object visit(Beyond filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Beyond filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Contains filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Contains filter, Object extraData)", "full_signature": "public Object visit(Contains filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Contains filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Crosses filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Crosses filter, Object extraData)", "full_signature": "public Object visit(Crosses filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Crosses filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Disjoint filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Disjoint filter, Object extraData)", "full_signature": "public Object visit(Disjoint filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Disjoint filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(DWithin filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(DWithin filter, Object extraData)", "full_signature": "public Object visit(DWithin filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(DWithin filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Equals filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Equals filter, Object extraData)", "full_signature": "public Object visit(Equals filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Equals filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Intersects filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Intersects filter, Object extraData)", "full_signature": "public Object visit(Intersects filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Intersects filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Overlaps filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Overlaps filter, Object extraData)", "full_signature": "public Object visit(Overlaps filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Overlaps filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Touches filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Touches filter, Object extraData)", "full_signature": "public Object visit(Touches filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Touches filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Within filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Within filter, Object extraData)", "full_signature": "public Object visit(Within filter, Object extraData)", "class_method_signature": "FilterToCQL.visit(Within filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visitNullFilter", "parameters": "(Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visitNullFilter(Object extraData)", "full_signature": "public Object visitNullFilter(Object extraData)", "class_method_signature": "FilterToCQL.visitNullFilter(Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(NilExpression expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(NilExpression expression, Object extraData)", "full_signature": "public Object visit(NilExpression expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(NilExpression expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Add expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Add expression, Object extraData)", "full_signature": "public Object visit(Add expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(Add expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Divide expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Divide expression, Object extraData)", "full_signature": "public Object visit(Divide expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(Divide expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Function function, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Function function, Object extraData)", "full_signature": "public Object visit(Function function, Object extraData)", "class_method_signature": "FilterToCQL.visit(Function function, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Literal expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Literal expression, Object extraData)", "full_signature": "public Object visit(Literal expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(Literal expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "date", "parameters": "( Date date, StringBuffer output )", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer date( Date date, StringBuffer output )", "full_signature": "public StringBuffer date( Date date, StringBuffer output )", "class_method_signature": "FilterToCQL.date( Date date, StringBuffer output )", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Multiply expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Multiply expression, Object extraData)", "full_signature": "public Object visit(Multiply expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(Multiply expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyName expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyName expression, Object extraData)", "full_signature": "public Object visit(PropertyName expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(PropertyName expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Subtract expression, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Subtract expression, Object extraData)", "full_signature": "public Object visit(Subtract expression, Object extraData)", "class_method_signature": "FilterToCQL.visit(Subtract expression, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(After after, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(After after, Object extraData)", "full_signature": "public Object visit(After after, Object extraData)", "class_method_signature": "FilterToCQL.visit(After after, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnyInteracts anyInteracts, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(AnyInteracts anyInteracts, Object extraData)", "full_signature": "public Object visit(AnyInteracts anyInteracts, Object extraData)", "class_method_signature": "FilterToCQL.visit(AnyInteracts anyInteracts, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Before before, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Before before, Object extraData)", "full_signature": "public Object visit(Before before, Object extraData)", "class_method_signature": "FilterToCQL.visit(Before before, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Begins begins, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Begins begins, Object extraData)", "full_signature": "public Object visit(Begins begins, Object extraData)", "class_method_signature": "FilterToCQL.visit(Begins begins, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BegunBy begunBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(BegunBy begunBy, Object extraData)", "full_signature": "public Object visit(BegunBy begunBy, Object extraData)", "class_method_signature": "FilterToCQL.visit(BegunBy begunBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(During during, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(During during, Object extraData)", "full_signature": "public Object visit(During during, Object extraData)", "class_method_signature": "FilterToCQL.visit(During during, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(EndedBy endedBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(EndedBy endedBy, Object extraData)", "full_signature": "public Object visit(EndedBy endedBy, Object extraData)", "class_method_signature": "FilterToCQL.visit(EndedBy endedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Ends ends, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Ends ends, Object extraData)", "full_signature": "public Object visit(Ends ends, Object extraData)", "class_method_signature": "FilterToCQL.visit(Ends ends, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Meets meets, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Meets meets, Object extraData)", "full_signature": "public Object visit(Meets meets, Object extraData)", "class_method_signature": "FilterToCQL.visit(Meets meets, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(MetBy metBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(MetBy metBy, Object extraData)", "full_signature": "public Object visit(MetBy metBy, Object extraData)", "class_method_signature": "FilterToCQL.visit(MetBy metBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(OverlappedBy overlappedBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(OverlappedBy overlappedBy, Object extraData)", "full_signature": "public Object visit(OverlappedBy overlappedBy, Object extraData)", "class_method_signature": "FilterToCQL.visit(OverlappedBy overlappedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TContains contains, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TContains contains, Object extraData)", "full_signature": "public Object visit(TContains contains, Object extraData)", "class_method_signature": "FilterToCQL.visit(TContains contains, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TEquals equals, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TEquals equals, Object extraData)", "full_signature": "public Object visit(TEquals equals, Object extraData)", "class_method_signature": "FilterToCQL.visit(TEquals equals, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TOverlaps contains, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TOverlaps contains, Object extraData)", "full_signature": "public Object visit(TOverlaps contains, Object extraData)", "class_method_signature": "FilterToCQL.visit(TOverlaps contains, Object extraData)", "testcase": false, "constructor": false}], "file": "modules/library/cql/src/main/java/org/geotools/filter/text/cql2/FilterToCQL.java"}, "focal_method": {"identifier": "after", "parameters": "( PropertyIsGreaterThan filter, StringBuffer output )", "modifiers": "private", "return": "StringBuffer", "body": "private StringBuffer after( PropertyIsGreaterThan filter, StringBuffer output ){\n        LOGGER.finer(\"exporting AFTER\");\n        \n        Object expr1 = filter.getExpression1();\n        if( expr1 instanceof PropertyName){\n        \tPropertyName propertyName = (PropertyName) expr1;\n        \tpropertyName.accept(this, output);\n        \toutput.append(\" AFTER \");\n            filter.getExpression2().accept(this, output);        \n        }else { \n        \tPropertyName propertyName = (PropertyName) filter.getExpression2();\n            propertyName.accept(this, output);\n            output.append(\" BEFORE \");\n            filter.getExpression1().accept(this, output);        \n        }\n        return output;\n        \n    }", "signature": "StringBuffer after( PropertyIsGreaterThan filter, StringBuffer output )", "full_signature": "private StringBuffer after( PropertyIsGreaterThan filter, StringBuffer output )", "class_method_signature": "FilterToCQL.after( PropertyIsGreaterThan filter, StringBuffer output )", "testcase": false, "constructor": false, "invocations": ["finer", "getExpression1", "accept", "append", "accept", "getExpression2", "getExpression2", "accept", "append", "accept", "getExpression1"]}, "repository": {"repo_id": 4750321, "url": "https://github.com/HGitMaster/geotools-osgi", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 114107, "license": "licensed"}}