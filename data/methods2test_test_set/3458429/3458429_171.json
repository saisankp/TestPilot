{"test_class": {"identifier": "TestStringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String WHITESPACE;", "modifier": "static final", "type": "String", "declarator": "WHITESPACE", "var_name": "WHITESPACE"}, {"original_string": "static final String NON_WHITESPACE;", "modifier": "static final", "type": "String", "declarator": "NON_WHITESPACE", "var_name": "NON_WHITESPACE"}, {"original_string": "static final String HARD_SPACE;", "modifier": "static final", "type": "String", "declarator": "HARD_SPACE", "var_name": "HARD_SPACE"}, {"original_string": "static final String TRIMMABLE;", "modifier": "static final", "type": "String", "declarator": "TRIMMABLE", "var_name": "TRIMMABLE"}, {"original_string": "static final String NON_TRIMMABLE;", "modifier": "static final", "type": "String", "declarator": "NON_TRIMMABLE", "var_name": "NON_TRIMMABLE"}], "file": "firefly-common/src/test/java/com/fireflysource/common/string/TestStringUtils.java"}, "test_case": {"identifier": "testSplitByWholeString_StringStringBooleanInt", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testSplitByWholeString_StringStringBooleanInt() {\n        assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, \".\", 3));\n\n        assertEquals(0, StringUtils.splitByWholeSeparator(\"\", \".\", 3).length);\n\n        final String stringToSplitOnNulls = \"ab   de fg\";\n        final String[] splitOnNullExpectedResults = {\"ab\", \"de fg\"};\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2);\n        assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);\n        for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) {\n            assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);\n        }\n\n        final String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\";\n\n        final String[] splitOnStringExpectedResults = {\"abstemiously\", \"abstemiouslyaeiouyabstemiously\"};\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, \"aeiouy\", 2);\n        assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);\n        for (int i = 0; i < splitOnStringExpectedResults.length; i++) {\n            assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);\n        }\n    }", "signature": "void testSplitByWholeString_StringStringBooleanInt()", "full_signature": "@Test void testSplitByWholeString_StringStringBooleanInt()", "class_method_signature": "TestStringUtils.testSplitByWholeString_StringStringBooleanInt()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "splitByWholeSeparator", "assertEquals", "splitByWholeSeparator", "splitByWholeSeparator", "assertEquals", "assertEquals", "splitByWholeSeparator", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String EMPTY = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final String FOLDER_SEPARATOR = \"/\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_SEPARATOR = \"/\"", "var_name": "FOLDER_SEPARATOR"}, {"original_string": "private static final char EXTENSION_SEPARATOR = '.';", "modifier": "private static final", "type": "char", "declarator": "EXTENSION_SEPARATOR = '.'", "var_name": "EXTENSION_SEPARATOR"}, {"original_string": "private static final char[] LOWER_CASE = {'\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007', '\\010',\n            '\\011', '\\012', '\\013', '\\014', '\\015', '\\016', '\\017', '\\020', '\\021', '\\022', '\\023', '\\024', '\\025',\n            '\\026', '\\027', '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037', '\\040', '\\041', '\\042',\n            '\\043', '\\044', '\\045', '\\046', '\\047', '\\050', '\\051', '\\052', '\\053', '\\054', '\\055', '\\056', '\\057',\n            '\\060', '\\061', '\\062', '\\063', '\\064', '\\065', '\\066', '\\067', '\\070', '\\071', '\\072', '\\073', '\\074',\n            '\\075', '\\076', '\\077', '\\100', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147', '\\150', '\\151',\n            '\\152', '\\153', '\\154', '\\155', '\\156', '\\157', '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166',\n            '\\167', '\\170', '\\171', '\\172', '\\133', '\\134', '\\135', '\\136', '\\137', '\\140', '\\141', '\\142', '\\143',\n            '\\144', '\\145', '\\146', '\\147', '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157', '\\160',\n            '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167', '\\170', '\\171', '\\172', '\\173', '\\174', '\\175',\n            '\\176', '\\177'};", "modifier": "private static final", "type": "char[]", "declarator": "LOWER_CASE = {'\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007', '\\010',\n            '\\011', '\\012', '\\013', '\\014', '\\015', '\\016', '\\017', '\\020', '\\021', '\\022', '\\023', '\\024', '\\025',\n            '\\026', '\\027', '\\030', '\\031', '\\032', '\\033', '\\034', '\\035', '\\036', '\\037', '\\040', '\\041', '\\042',\n            '\\043', '\\044', '\\045', '\\046', '\\047', '\\050', '\\051', '\\052', '\\053', '\\054', '\\055', '\\056', '\\057',\n            '\\060', '\\061', '\\062', '\\063', '\\064', '\\065', '\\066', '\\067', '\\070', '\\071', '\\072', '\\073', '\\074',\n            '\\075', '\\076', '\\077', '\\100', '\\141', '\\142', '\\143', '\\144', '\\145', '\\146', '\\147', '\\150', '\\151',\n            '\\152', '\\153', '\\154', '\\155', '\\156', '\\157', '\\160', '\\161', '\\162', '\\163', '\\164', '\\165', '\\166',\n            '\\167', '\\170', '\\171', '\\172', '\\133', '\\134', '\\135', '\\136', '\\137', '\\140', '\\141', '\\142', '\\143',\n            '\\144', '\\145', '\\146', '\\147', '\\150', '\\151', '\\152', '\\153', '\\154', '\\155', '\\156', '\\157', '\\160',\n            '\\161', '\\162', '\\163', '\\164', '\\165', '\\166', '\\167', '\\170', '\\171', '\\172', '\\173', '\\174', '\\175',\n            '\\176', '\\177'}", "var_name": "LOWER_CASE"}, {"original_string": "private static final Trie<String> CHARSETS = new ArrayTrie<>(256);", "modifier": "private static final", "type": "Trie<String>", "declarator": "CHARSETS = new ArrayTrie<>(256)", "var_name": "CHARSETS"}, {"original_string": "private static final String ISO_8859_1 = \"iso-8859-1\";", "modifier": "private static final", "type": "String", "declarator": "ISO_8859_1 = \"iso-8859-1\"", "var_name": "ISO_8859_1"}, {"original_string": "private static final String UTF8 = \"utf-8\";", "modifier": "private static final", "type": "String", "declarator": "UTF8 = \"utf-8\"", "var_name": "UTF8"}, {"original_string": "private static final String __UTF16 = \"utf-16\";", "modifier": "private static final", "type": "String", "declarator": "__UTF16 = \"utf-16\"", "var_name": "__UTF16"}], "methods": [{"identifier": "split", "parameters": "(String str)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str)", "full_signature": "public static String[] split(String str)", "class_method_signature": "StringUtils.split(String str)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, String separatorChars)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, String separatorChars)", "full_signature": "public static String[] split(String str, String separatorChars)", "class_method_signature": "StringUtils.split(String str, String separatorChars)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, char separatorChar)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, char separatorChar)", "full_signature": "public static String[] split(String str, char separatorChar)", "class_method_signature": "StringUtils.split(String str, char separatorChar)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, String separatorChars, int max)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, String separatorChars, int max)", "full_signature": "public static String[] split(String str, String separatorChars, int max)", "class_method_signature": "StringUtils.split(String str, String separatorChars, int max)", "testcase": false, "constructor": false}, {"identifier": "splitWorker", "parameters": "(String str, String separatorChars, int max, boolean preserveAllTokens)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)", "full_signature": "private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)", "class_method_signature": "StringUtils.splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)", "testcase": false, "constructor": false}, {"identifier": "splitWorker", "parameters": "(String str, char separatorChar, boolean preserveAllTokens)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)", "full_signature": "private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)", "class_method_signature": "StringUtils.splitWorker(String str, char separatorChar, boolean preserveAllTokens)", "testcase": false, "constructor": false}, {"identifier": "splitByWholeSeparator", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByWholeSeparator(String str, String separator)", "full_signature": "public static String[] splitByWholeSeparator(String str, String separator)", "class_method_signature": "StringUtils.splitByWholeSeparator(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "splitByWholeSeparator", "parameters": "(String str, String separator, int max)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitByWholeSeparator(String str, String separator, int max)", "full_signature": "public static String[] splitByWholeSeparator(String str, String separator, int max)", "class_method_signature": "StringUtils.splitByWholeSeparator(String str, String separator, int max)", "testcase": false, "constructor": false}, {"identifier": "splitByWholeSeparatorWorker", "parameters": "(String str, String separator, int max,\n                                                        boolean preserveAllTokens)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitByWholeSeparatorWorker(String str, String separator, int max,\n                                                        boolean preserveAllTokens)", "full_signature": "private static String[] splitByWholeSeparatorWorker(String str, String separator, int max,\n                                                        boolean preserveAllTokens)", "class_method_signature": "StringUtils.splitByWholeSeparatorWorker(String str, String separator, int max,\n                                                        boolean preserveAllTokens)", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasText(String str)", "full_signature": "public static boolean hasText(String str)", "class_method_signature": "StringUtils.hasText(String str)", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "(CharSequence str)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasText(CharSequence str)", "full_signature": "public static boolean hasText(CharSequence str)", "class_method_signature": "StringUtils.hasText(CharSequence str)", "testcase": false, "constructor": false}, {"identifier": "hasLength", "parameters": "(CharSequence str)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasLength(CharSequence str)", "full_signature": "public static boolean hasLength(CharSequence str)", "class_method_signature": "StringUtils.hasLength(CharSequence str)", "testcase": false, "constructor": false}, {"identifier": "hasLength", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasLength(String str)", "full_signature": "public static boolean hasLength(String str)", "class_method_signature": "StringUtils.hasLength(String str)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String s, Map<String, Object> map)", "modifiers": "public static", "return": "String", "signature": "String replace(String s, Map<String, Object> map)", "full_signature": "public static String replace(String s, Map<String, Object> map)", "class_method_signature": "StringUtils.replace(String s, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String s, Object... objs)", "modifiers": "public static", "return": "String", "signature": "String replace(String s, Object... objs)", "full_signature": "public static String replace(String s, Object... objs)", "class_method_signature": "StringUtils.replace(String s, Object... objs)", "testcase": false, "constructor": false}, {"identifier": "replaceStr", "parameters": "(String s, String sub, String with)", "modifiers": "public static", "return": "String", "signature": "String replaceStr(String s, String sub, String with)", "full_signature": "public static String replaceStr(String s, String sub, String with)", "class_method_signature": "StringUtils.replaceStr(String s, String sub, String with)", "testcase": false, "constructor": false}, {"identifier": "escapeXML", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String escapeXML(String str)", "full_signature": "public static String escapeXML(String str)", "class_method_signature": "StringUtils.escapeXML(String str)", "testcase": false, "constructor": false}, {"identifier": "unicodeToString", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String unicodeToString(String s)", "full_signature": "public static String unicodeToString(String s)", "class_method_signature": "StringUtils.unicodeToString(String s)", "testcase": false, "constructor": false}, {"identifier": "getFilenameExtension", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getFilenameExtension(String path)", "full_signature": "public static String getFilenameExtension(String path)", "class_method_signature": "StringUtils.getFilenameExtension(String path)", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String getFilename(String path)", "full_signature": "public static String getFilename(String path)", "class_method_signature": "StringUtils.getFilename(String path)", "testcase": false, "constructor": false}, {"identifier": "getUtf8Bytes", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getUtf8Bytes(String string)", "full_signature": "public static byte[] getUtf8Bytes(String string)", "class_method_signature": "StringUtils.getUtf8Bytes(String string)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytes(String string)", "full_signature": "public static byte[] getBytes(String string)", "class_method_signature": "StringUtils.getBytes(String string)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(String string, int from)", "modifiers": "public static", "return": "int", "signature": "int toInt(String string, int from)", "full_signature": "public static int toInt(String string, int from)", "class_method_signature": "StringUtils.toInt(String string, int from)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder buf, byte b, int base)", "modifiers": "public static", "return": "void", "signature": "void append(StringBuilder buf, byte b, int base)", "full_signature": "public static void append(StringBuilder buf, byte b, int base)", "class_method_signature": "StringUtils.append(StringBuilder buf, byte b, int base)", "testcase": false, "constructor": false}, {"identifier": "append2digits", "parameters": "(StringBuilder buf, int i)", "modifiers": "public static", "return": "void", "signature": "void append2digits(StringBuilder buf, int i)", "full_signature": "public static void append2digits(StringBuilder buf, int i)", "class_method_signature": "StringUtils.append2digits(StringBuilder buf, int i)", "testcase": false, "constructor": false}, {"identifier": "asciiToLowerCase", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String asciiToLowerCase(String s)", "full_signature": "public static String asciiToLowerCase(String s)", "class_method_signature": "StringUtils.asciiToLowerCase(String s)", "testcase": false, "constructor": false}, {"identifier": "normalizeCharset", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String normalizeCharset(String s)", "full_signature": "public static String normalizeCharset(String s)", "class_method_signature": "StringUtils.normalizeCharset(String s)", "testcase": false, "constructor": false}, {"identifier": "normalizeCharset", "parameters": "(String s, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String normalizeCharset(String s, int offset, int length)", "full_signature": "public static String normalizeCharset(String s, int offset, int length)", "class_method_signature": "StringUtils.normalizeCharset(String s, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "isHex", "parameters": "(String str, int offset, int length)", "modifiers": "public static", "return": "boolean", "signature": "boolean isHex(String str, int offset, int length)", "full_signature": "public static boolean isHex(String str, int offset, int length)", "class_method_signature": "StringUtils.isHex(String str, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String str, int maxSize)", "modifiers": "public static", "return": "String", "signature": "String truncate(String str, int maxSize)", "full_signature": "public static String truncate(String str, int maxSize)", "class_method_signature": "StringUtils.truncate(String str, int maxSize)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/string/StringUtils.java"}, "focal_method": {"identifier": "splitByWholeSeparator", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String[]", "body": "public static String[] splitByWholeSeparator(String str, String separator) {\n        return splitByWholeSeparatorWorker(str, separator, -1, false);\n    }", "signature": "String[] splitByWholeSeparator(String str, String separator)", "full_signature": "public static String[] splitByWholeSeparator(String str, String separator)", "class_method_signature": "StringUtils.splitByWholeSeparator(String str, String separator)", "testcase": false, "constructor": false, "invocations": ["splitByWholeSeparatorWorker"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}