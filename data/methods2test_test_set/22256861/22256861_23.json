{"test_class": {"identifier": "RayleighCorrAlgorithmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RayleighCorrAlgorithm algo;", "modifier": "private", "type": "RayleighCorrAlgorithm", "declarator": "algo", "var_name": "algo"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/RayleighCorrAlgorithmTest.java"}, "test_case": {"identifier": "testCrossSectionSigma", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCrossSectionSigma() {\n        Product product = new Product(\"dummy\", \"dummy\");\n        Band b1 = createBand(\"radiance_1\", 1);\n        Band b2 = createBand(\"radiance_2\", 2);\n        Band b3 = createBand(\"radiance_3\", 3);\n        Band b4 = createBand(\"radiance_4\", 4);\n\n        product.addBand(b1);\n        product.addBand(b2);\n        product.addBand(b3);\n        product.addBand(b4);\n\n        double[] allWavelengths = algo.getCrossSectionSigma(product, 3, \"radiance_%d\");\n        assertArrayEquals(new double[]{1.0041580107718594E-9, 3.915403961025194E-12, 1.5231224042681756E-13}, allWavelengths, 1e-8);\n\n    }", "signature": "void testCrossSectionSigma()", "full_signature": "@Test public void testCrossSectionSigma()", "class_method_signature": "RayleighCorrAlgorithmTest.testCrossSectionSigma()", "testcase": true, "constructor": false, "invocations": ["createBand", "createBand", "createBand", "createBand", "addBand", "addBand", "addBand", "addBand", "getCrossSectionSigma", "assertArrayEquals"]}, "focal_class": {"identifier": "RayleighCorrAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Sensor sensor;", "modifier": "private", "type": "Sensor", "declarator": "sensor", "var_name": "sensor"}, {"original_string": "private int numBands;", "modifier": "private", "type": "int", "declarator": "numBands", "var_name": "numBands"}, {"original_string": "private String bandNamePattern;", "modifier": "private", "type": "String", "declarator": "bandNamePattern", "var_name": "bandNamePattern"}], "methods": [{"identifier": "RayleighCorrAlgorithm", "parameters": "(String bandPattern, int numBands)", "modifiers": "public", "return": "", "signature": " RayleighCorrAlgorithm(String bandPattern, int numBands)", "full_signature": "public  RayleighCorrAlgorithm(String bandPattern, int numBands)", "class_method_signature": "RayleighCorrAlgorithm.RayleighCorrAlgorithm(String bandPattern, int numBands)", "testcase": false, "constructor": true}, {"identifier": "RayleighCorrAlgorithm", "parameters": "(Sensor sensor)", "modifiers": "public", "return": "", "signature": " RayleighCorrAlgorithm(Sensor sensor)", "full_signature": "public  RayleighCorrAlgorithm(Sensor sensor)", "class_method_signature": "RayleighCorrAlgorithm.RayleighCorrAlgorithm(Sensor sensor)", "testcase": false, "constructor": true}, {"identifier": "waterVaporCorrection709", "parameters": "(double[] reflectances, double[] bWVRefTile, double[] bWVTile)", "modifiers": "", "return": "double[]", "signature": "double[] waterVaporCorrection709(double[] reflectances, double[] bWVRefTile, double[] bWVTile)", "full_signature": " double[] waterVaporCorrection709(double[] reflectances, double[] bWVRefTile, double[] bWVTile)", "class_method_signature": "RayleighCorrAlgorithm.waterVaporCorrection709(double[] reflectances, double[] bWVRefTile, double[] bWVTile)", "testcase": false, "constructor": false}, {"identifier": "getCrossSectionSigma", "parameters": "(Product sourceProduct, int numBands, String getBandNamePattern)", "modifiers": "", "return": "double[]", "signature": "double[] getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "full_signature": " double[] getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "class_method_signature": "RayleighCorrAlgorithm.getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "testcase": false, "constructor": false}, {"identifier": "isSentinelB", "parameters": "(Product sourceProduct)", "modifiers": "private", "return": "boolean", "signature": "boolean isSentinelB(Product sourceProduct)", "full_signature": "private boolean isSentinelB(Product sourceProduct)", "class_method_signature": "RayleighCorrAlgorithm.isSentinelB(Product sourceProduct)", "testcase": false, "constructor": false}, {"identifier": "getCrossSection", "parameters": "(double[] lambdas)", "modifiers": "", "return": "double[]", "signature": "double[] getCrossSection(double[] lambdas)", "full_signature": " double[] getCrossSection(double[] lambdas)", "class_method_signature": "RayleighCorrAlgorithm.getCrossSection(double[] lambdas)", "testcase": false, "constructor": false}, {"identifier": "getCorrOzone", "parameters": "(double[] rho_ng_ref, double absorpO, double[] ozones, double[] cosOZARads,\n                          double[] cosSZARads)", "modifiers": "", "return": "double[]", "signature": "double[] getCorrOzone(double[] rho_ng_ref, double absorpO, double[] ozones, double[] cosOZARads,\n                          double[] cosSZARads)", "full_signature": " double[] getCorrOzone(double[] rho_ng_ref, double absorpO, double[] ozones, double[] cosOZARads,\n                          double[] cosSZARads)", "class_method_signature": "RayleighCorrAlgorithm.getCorrOzone(double[] rho_ng_ref, double absorpO, double[] ozones, double[] cosOZARads,\n                          double[] cosSZARads)", "testcase": false, "constructor": false}, {"identifier": "getCorrOzone", "parameters": "(double rho_ng, double absorpO, double ozone, double cts, double ctv)", "modifiers": "", "return": "double", "signature": "double getCorrOzone(double rho_ng, double absorpO, double ozone, double cts, double ctv)", "full_signature": " double getCorrOzone(double rho_ng, double absorpO, double ozone, double cts, double ctv)", "class_method_signature": "RayleighCorrAlgorithm.getCorrOzone(double rho_ng, double absorpO, double ozone, double cts, double ctv)", "testcase": false, "constructor": false}, {"identifier": "getRhoBrr", "parameters": "(RayleighAux rayleighAux, double[] rayleighOpticalThickness, double[] corrOzoneRefl)", "modifiers": "", "return": "double[]", "signature": "double[] getRhoBrr(RayleighAux rayleighAux, double[] rayleighOpticalThickness, double[] corrOzoneRefl)", "full_signature": " double[] getRhoBrr(RayleighAux rayleighAux, double[] rayleighOpticalThickness, double[] corrOzoneRefl)", "class_method_signature": "RayleighCorrAlgorithm.getRhoBrr(RayleighAux rayleighAux, double[] rayleighOpticalThickness, double[] corrOzoneRefl)", "testcase": false, "constructor": false}, {"identifier": "getRhoRayleigh", "parameters": "(RayleighAux rayleighAux, double[] rayleighOpticalThickness,\n                            double[] corrOzoneRefl)", "modifiers": "", "return": "double[]", "signature": "double[] getRhoRayleigh(RayleighAux rayleighAux, double[] rayleighOpticalThickness,\n                            double[] corrOzoneRefl)", "full_signature": " double[] getRhoRayleigh(RayleighAux rayleighAux, double[] rayleighOpticalThickness,\n                            double[] corrOzoneRefl)", "class_method_signature": "RayleighCorrAlgorithm.getRhoRayleigh(RayleighAux rayleighAux, double[] rayleighOpticalThickness,\n                            double[] corrOzoneRefl)", "testcase": false, "constructor": false}, {"identifier": "getFourierSeries", "parameters": "(double rayleighOpticalThickness, double massAir, double cosOZARad,\n                              double cosSZARad, List<double[]> interpolateValues, double[] fourierSeriesCof)", "modifiers": "", "return": "double[]", "signature": "double[] getFourierSeries(double rayleighOpticalThickness, double massAir, double cosOZARad,\n                              double cosSZARad, List<double[]> interpolateValues, double[] fourierSeriesCof)", "full_signature": " double[] getFourierSeries(double rayleighOpticalThickness, double massAir, double cosOZARad,\n                              double cosSZARad, List<double[]> interpolateValues, double[] fourierSeriesCof)", "class_method_signature": "RayleighCorrAlgorithm.getFourierSeries(double rayleighOpticalThickness, double massAir, double cosOZARad,\n                              double cosSZARad, List<double[]> interpolateValues, double[] fourierSeriesCof)", "testcase": false, "constructor": false}, {"identifier": "getRayleighReflectance", "parameters": "(RayleighInput rayleighInput, RayleighAux rayleighAux,\n                                                 double[] absorptionOfBand, Product product)", "modifiers": "public", "return": "RayleighOutput", "signature": "RayleighOutput getRayleighReflectance(RayleighInput rayleighInput, RayleighAux rayleighAux,\n                                                 double[] absorptionOfBand, Product product)", "full_signature": "public RayleighOutput getRayleighReflectance(RayleighInput rayleighInput, RayleighAux rayleighAux,\n                                                 double[] absorptionOfBand, Product product)", "class_method_signature": "RayleighCorrAlgorithm.getRayleighReflectance(RayleighInput rayleighInput, RayleighAux rayleighAux,\n                                                 double[] absorptionOfBand, Product product)", "testcase": false, "constructor": false}, {"identifier": "getRayleigh", "parameters": "(RayleighAux rayleighAux, double absorptionOfBand, double[] thicknessAllBand,\n                                float[] ref)", "modifiers": "private", "return": "float[]", "signature": "float[] getRayleigh(RayleighAux rayleighAux, double absorptionOfBand, double[] thicknessAllBand,\n                                float[] ref)", "full_signature": "private float[] getRayleigh(RayleighAux rayleighAux, double absorptionOfBand, double[] thicknessAllBand,\n                                float[] ref)", "class_method_signature": "RayleighCorrAlgorithm.getRayleigh(RayleighAux rayleighAux, double absorptionOfBand, double[] thicknessAllBand,\n                                float[] ref)", "testcase": false, "constructor": false}, {"identifier": "convertFloatToDouble", "parameters": "(float[] ref)", "modifiers": "private", "return": "double[]", "signature": "double[] convertFloatToDouble(float[] ref)", "full_signature": "private double[] convertFloatToDouble(float[] ref)", "class_method_signature": "RayleighCorrAlgorithm.convertFloatToDouble(float[] ref)", "testcase": false, "constructor": false}, {"identifier": "convertDoubleToFloat", "parameters": "(double[] ref)", "modifiers": "private", "return": "float[]", "signature": "float[] convertDoubleToFloat(double[] ref)", "full_signature": "private float[] convertDoubleToFloat(double[] ref)", "class_method_signature": "RayleighCorrAlgorithm.convertDoubleToFloat(double[] ref)", "testcase": false, "constructor": false}, {"identifier": "getRayleighThickness", "parameters": "(RayleighAux rayleighAux,\n                                  double[] crossSectionSigma,\n                                  int sourceBandIndex,\n                                  String targetBandName)", "modifiers": "", "return": "double[]", "signature": "double[] getRayleighThickness(RayleighAux rayleighAux,\n                                  double[] crossSectionSigma,\n                                  int sourceBandIndex,\n                                  String targetBandName)", "full_signature": " double[] getRayleighThickness(RayleighAux rayleighAux,\n                                  double[] crossSectionSigma,\n                                  int sourceBandIndex,\n                                  String targetBandName)", "class_method_signature": "RayleighCorrAlgorithm.getRayleighThickness(RayleighAux rayleighAux,\n                                  double[] crossSectionSigma,\n                                  int sourceBandIndex,\n                                  String targetBandName)", "testcase": false, "constructor": false}, {"identifier": "getRayleighThicknessBodhaineTest", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void getRayleighThicknessBodhaineTest()", "full_signature": "public void getRayleighThicknessBodhaineTest()", "class_method_signature": "RayleighCorrAlgorithm.getRayleighThicknessBodhaineTest()", "testcase": false, "constructor": false}, {"identifier": "getRayleighOpticalThickness", "parameters": "(double sigma, double seaLevelPressure, double altitude,\n                                       double latitude)", "modifiers": "", "return": "double", "signature": "double getRayleighOpticalThickness(double sigma, double seaLevelPressure, double altitude,\n                                       double latitude)", "full_signature": " double getRayleighOpticalThickness(double sigma, double seaLevelPressure, double altitude,\n                                       double latitude)", "class_method_signature": "RayleighCorrAlgorithm.getRayleighOpticalThickness(double sigma, double seaLevelPressure, double altitude,\n                                       double latitude)", "testcase": false, "constructor": false}, {"identifier": "getRayleightOptThickness", "parameters": "(double sigma, double altitude, double latitude, double pressure)", "modifiers": "private", "return": "double", "signature": "double getRayleightOptThickness(double sigma, double altitude, double latitude, double pressure)", "full_signature": "private double getRayleightOptThickness(double sigma, double altitude, double latitude, double pressure)", "class_method_signature": "RayleighCorrAlgorithm.getRayleightOptThickness(double sigma, double altitude, double latitude, double pressure)", "testcase": false, "constructor": false}, {"identifier": "convertRadsToRefls", "parameters": "(double[] radiance, double[] solarIrradiance, double[] sza)", "modifiers": "", "return": "double[]", "signature": "double[] convertRadsToRefls(double[] radiance, double[] solarIrradiance, double[] sza)", "full_signature": " double[] convertRadsToRefls(double[] radiance, double[] solarIrradiance, double[] sza)", "class_method_signature": "RayleighCorrAlgorithm.convertRadsToRefls(double[] radiance, double[] solarIrradiance, double[] sza)", "testcase": false, "constructor": false}, {"identifier": "getCrossSectionSigmaIndex", "parameters": "(int sourceBandIndex, String targetBandName)", "modifiers": "private", "return": "int", "signature": "int getCrossSectionSigmaIndex(int sourceBandIndex, String targetBandName)", "full_signature": "private int getCrossSectionSigmaIndex(int sourceBandIndex, String targetBandName)", "class_method_signature": "RayleighCorrAlgorithm.getCrossSectionSigmaIndex(int sourceBandIndex, String targetBandName)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/RayleighCorrAlgorithm.java"}, "focal_method": {"identifier": "getCrossSectionSigma", "parameters": "(Product sourceProduct, int numBands, String getBandNamePattern)", "modifiers": "", "return": "double[]", "body": "double[] getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern) {\n        if (sensor != null && sensor == Sensor.S2_MSI) {\n            // use 'true' instead of central wavelengths instead\n            // CB/GK 20170721, following https://earth.esa.int/documents/247904/685211/Sentinel-2+MSI+Spectral+Responses/\n            return getCrossSection(S2Utils.getS2TrueWavelengths());\n        } else if (sensor != null && sensor == Sensor.OLCI) {\n            double[] wavelength;\n            if (isSentinelB(sourceProduct)) {\n                //these are the wavelengths for S3B\n                wavelength = new double[]{400.5946791630635, 411.9509453369866, 442.9881235940998, 490.3991247296052, 510.4022075929168,\n                        560.3663252369439, 620.2839618019312, 665.1312164230563, 673.8681527151621, 681.3856157084324,\n                        708.9820148630681, 754.0283289464179, 761.5594400832483, 764.6921706636257, 767.8224408129396,\n                        779.0792072094514, 865.2710905079641, 884.1272744748017, 899.121616355846, 938.7977736873601,\n                        1015.7390081732657};\n            } else {\n                //these wavelengths belong to S3A\n                wavelength = new double[]{400.3031914558257, 411.8452957525705, 442.9625672120682, 490.4930356580268, 510.46748124416945,\n                        560.4502797598624, 620.4092905501666, 665.2744162328253, 674.0251490485472, 681.5706005756095,\n                        709.1148593849875, 754.1813240203888, 761.7260948029898, 764.8247093465473, 767.9174355161354,\n                        779.2567595815481, 865.4296340763456, 884.3082558969855, 899.3107685704568, 938.9730748611009,\n                        1015.7990909091901};\n            }\n            return getCrossSection(wavelength);\n        } else {\n            double[] wavelength = new double[numBands];\n            for (int i = 0; i < numBands; i++) {\n                wavelength[i] = sourceProduct.getBand(String.format(getBandNamePattern, i + 1)).getSpectralWavelength();\n            }\n            return getCrossSection(wavelength);\n        }\n    }", "signature": "double[] getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "full_signature": " double[] getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "class_method_signature": "RayleighCorrAlgorithm.getCrossSectionSigma(Product sourceProduct, int numBands, String getBandNamePattern)", "testcase": false, "constructor": false, "invocations": ["getCrossSection", "getS2TrueWavelengths", "isSentinelB", "getCrossSection", "getSpectralWavelength", "getBand", "format", "getCrossSection"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}