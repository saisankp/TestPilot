{"test_class": {"identifier": "SetupDataBaseServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SetupDataBaseService setupDataBaseService;", "modifier": "@Mock\n    private", "type": "SetupDataBaseService", "declarator": "setupDataBaseService", "var_name": "setupDataBaseService"}, {"original_string": "private ConnectionRequest connectionRequest = ConnectionRequest.builder().db_user(\"name\").build();", "modifier": "private", "type": "ConnectionRequest", "declarator": "connectionRequest = ConnectionRequest.builder().db_user(\"name\").build()", "var_name": "connectionRequest"}, {"original_string": "private DasGroup dasGroup = DasGroup.builder().id(1L).build();", "modifier": "private", "type": "DasGroup", "declarator": "dasGroup = DasGroup.builder().id(1L).build()", "var_name": "dasGroup"}, {"original_string": "private LoginUser user = LoginUser.builder().id(1L).build();", "modifier": "private", "type": "LoginUser", "declarator": "user = LoginUser.builder().id(1L).build()", "var_name": "user"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/SetupDataBaseServiceTest.java"}, "test_case": {"identifier": "tableConsistentTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tableConsistentTest() throws Exception {\n        Assert.assertTrue(setupDataBaseService.tableConsistent(\"code_gen\"));\n    }", "signature": "void tableConsistentTest()", "full_signature": "@Test public void tableConsistentTest()", "class_method_signature": "SetupDataBaseServiceTest.tableConsistentTest()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "tableConsistent"]}, "focal_class": {"identifier": "SetupDataBaseService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Object LOCK = new Object();", "modifier": "public static final", "type": "Object", "declarator": "LOCK = new Object()", "var_name": "LOCK"}, {"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private SetupDatabaseDao setupDBDao;", "modifier": "@Autowired\n    private", "type": "SetupDatabaseDao", "declarator": "setupDBDao", "var_name": "setupDBDao"}, {"original_string": "@Autowired\n    private LoginUserDao loginUserDao;", "modifier": "@Autowired\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@Autowired\n    private UserGroupDao userGroupDao;", "modifier": "@Autowired\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@Getter\n    @Setter\n    private boolean initialized = false;", "modifier": "@Getter\n    @Setter\n    private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private final String APPLICATIONNAME = \"application.properties\";", "modifier": "private final", "type": "String", "declarator": "APPLICATIONNAME = \"application.properties\"", "var_name": "APPLICATIONNAME"}, {"original_string": "private final String DATASOURCE_XML = \"datasource.xml\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_XML = \"datasource.xml\"", "var_name": "DATASOURCE_XML"}, {"original_string": "private final String DATASOURCE = \"Datasource\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE = \"Datasource\"", "var_name": "DATASOURCE"}, {"original_string": "private final String DATASOURCE_NAME = \"name\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_NAME = \"name\"", "var_name": "DATASOURCE_NAME"}, {"original_string": "private final String DATASOURCE_USERNAME = \"userName\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_USERNAME = \"userName\"", "var_name": "DATASOURCE_USERNAME"}, {"original_string": "private final String DATASOURCE_PASSWORD = \"password\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_PASSWORD = \"password\"", "var_name": "DATASOURCE_PASSWORD"}, {"original_string": "private final String DATASOURCE_CONNECTION_URL = \"connectionUrl\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_CONNECTION_URL = \"connectionUrl\"", "var_name": "DATASOURCE_CONNECTION_URL"}, {"original_string": "private final String DATASOURCE_DRIVER_CLASS = \"driverClassName\";", "modifier": "private final", "type": "String", "declarator": "DATASOURCE_DRIVER_CLASS = \"driverClassName\"", "var_name": "DATASOURCE_DRIVER_CLASS"}, {"original_string": "public final static String DATASOURCE_MYSQL_DRIVER = \"com.mysql.jdbc.Driver\";", "modifier": "public final static", "type": "String", "declarator": "DATASOURCE_MYSQL_DRIVER = \"com.mysql.jdbc.Driver\"", "var_name": "DATASOURCE_MYSQL_DRIVER"}, {"original_string": "private final String SCRIPT_FILE = \"script.sql\";", "modifier": "private final", "type": "String", "declarator": "SCRIPT_FILE = \"script.sql\"", "var_name": "SCRIPT_FILE"}, {"original_string": "public final static String jdbcUrlTemplate = \"jdbc:mysql://%s:%s/%s\";", "modifier": "public final static", "type": "String", "declarator": "jdbcUrlTemplate = \"jdbc:mysql://%s:%s/%s\"", "var_name": "jdbcUrlTemplate"}, {"original_string": "private static final String CREATE_TABLE = \"CREATE TABLE\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_TABLE = \"CREATE TABLE\"", "var_name": "CREATE_TABLE"}, {"original_string": "private static ClassLoader classLoader = null;", "modifier": "private static", "type": "ClassLoader", "declarator": "classLoader = null", "var_name": "classLoader"}], "methods": [{"identifier": "connectionTest", "parameters": "(ConnectionRequest connectionRequest)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult connectionTest(ConnectionRequest connectionRequest)", "full_signature": "public ServiceResult connectionTest(ConnectionRequest connectionRequest)", "class_method_signature": "SetupDataBaseService.connectionTest(ConnectionRequest connectionRequest)", "testcase": false, "constructor": false}, {"identifier": "tableConsistent", "parameters": "(String catalog)", "modifiers": "public", "return": "boolean", "signature": "boolean tableConsistent(String catalog)", "full_signature": "public boolean tableConsistent(String catalog)", "class_method_signature": "SetupDataBaseService.tableConsistent(String catalog)", "testcase": false, "constructor": false}, {"identifier": "getScriptTableNames", "parameters": "(String script)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getScriptTableNames(String script)", "full_signature": "private Set<String> getScriptTableNames(String script)", "class_method_signature": "SetupDataBaseService.getScriptTableNames(String script)", "testcase": false, "constructor": false}, {"identifier": "resourceExists", "parameters": "(String fileName)", "modifiers": "private", "return": "boolean", "signature": "boolean resourceExists(String fileName)", "full_signature": "private boolean resourceExists(String fileName)", "class_method_signature": "SetupDataBaseService.resourceExists(String fileName)", "testcase": false, "constructor": false}, {"identifier": "setupAdmin", "parameters": "(DasGroup dasGroup, LoginUser user)", "modifiers": "public", "return": "boolean", "signature": "boolean setupAdmin(DasGroup dasGroup, LoginUser user)", "full_signature": "public boolean setupAdmin(DasGroup dasGroup, LoginUser user)", "class_method_signature": "SetupDataBaseService.setupAdmin(DasGroup dasGroup, LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "isDalInitialized", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDalInitialized()", "full_signature": "public boolean isDalInitialized()", "class_method_signature": "SetupDataBaseService.isDalInitialized()", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/SetupDataBaseService.java"}, "focal_method": {"identifier": "tableConsistent", "parameters": "(String catalog)", "modifiers": "public", "return": "boolean", "body": "public boolean tableConsistent(String catalog) throws Exception {\n        Set<String> catalogTableNames = setupDBDao.getCatalogTableNames(catalog);\n        if (CollectionUtils.isEmpty(catalogTableNames)) {\n            return false;\n        }\n        String scriptContent = ResourceUtil.getSingleInstance().getScriptContent(SCRIPT_FILE);\n        Set<String> scriptTableNames = getScriptTableNames(scriptContent);\n        if (CollectionUtils.isNotEmpty(scriptTableNames)) {\n            for (String tableName : scriptTableNames) {\n                if (!catalogTableNames.contains(tableName)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "signature": "boolean tableConsistent(String catalog)", "full_signature": "public boolean tableConsistent(String catalog)", "class_method_signature": "SetupDataBaseService.tableConsistent(String catalog)", "testcase": false, "constructor": false, "invocations": ["getCatalogTableNames", "isEmpty", "getScriptContent", "getSingleInstance", "getScriptTableNames", "isNotEmpty", "contains"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}