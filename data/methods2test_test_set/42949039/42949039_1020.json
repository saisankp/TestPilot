{"test_class": {"identifier": "UploaderControllerTest", "superclass": "extends AbstractUploaderTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UploaderControllerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UploaderControllerTest.class)", "var_name": "LOGGER"}], "file": "herd-code/herd-tools/herd-uploader/src/test/java/org/finra/herd/tools/uploader/UploaderControllerTest.java"}, "test_case": {"identifier": "testPerformUpload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPerformUpload() throws Exception\n    {\n        // Upload and register business object data parents.\n        uploadAndRegisterTestDataParents(uploaderWebClient);\n\n        runUpload(UploaderController.MIN_THREADS);\n    }", "signature": "void testPerformUpload()", "full_signature": "@Test public void testPerformUpload()", "class_method_signature": "UploaderControllerTest.testPerformUpload()", "testcase": true, "constructor": false, "invocations": ["uploadAndRegisterTestDataParents", "runUpload"]}, "focal_class": {"identifier": "UploaderController", "superclass": "extends DataBridgeController", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UploaderController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UploaderController.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private HerdThreadHelper herdThreadHelper;", "modifier": "@Autowired\n    private", "type": "HerdThreadHelper", "declarator": "herdThreadHelper", "var_name": "herdThreadHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private UploaderManifestReader manifestReader;", "modifier": "@Autowired\n    private", "type": "UploaderManifestReader", "declarator": "manifestReader", "var_name": "manifestReader"}, {"original_string": "@Autowired\n    private StorageHelper storageHelper;", "modifier": "@Autowired\n    private", "type": "StorageHelper", "declarator": "storageHelper", "var_name": "storageHelper"}, {"original_string": "@Autowired\n    private UploaderWebClient uploaderWebClient;", "modifier": "@Autowired\n    private", "type": "UploaderWebClient", "declarator": "uploaderWebClient", "var_name": "uploaderWebClient"}], "methods": [{"identifier": "performUpload", "parameters": "(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "modifiers": "@SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", justification = \"manifestReader.readJsonManifest will always return an UploaderInputManifestDto object.\") public", "return": "void", "signature": "void performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "full_signature": "@SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", justification = \"manifestReader.readJsonManifest will always return an UploaderInputManifestDto object.\") public void performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "class_method_signature": "UploaderController.performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "testcase": false, "constructor": false}, {"identifier": "addStorageFilesWithRetry", "parameters": "(BusinessObjectDataKey businessObjectDataKey, UploaderInputManifestDto manifest, S3FileTransferRequestParamsDto params,\n        String storageName, Integer maxRetryAttempts, Integer retryDelaySecs)", "modifiers": "private", "return": "void", "signature": "void addStorageFilesWithRetry(BusinessObjectDataKey businessObjectDataKey, UploaderInputManifestDto manifest, S3FileTransferRequestParamsDto params,\n        String storageName, Integer maxRetryAttempts, Integer retryDelaySecs)", "full_signature": "private void addStorageFilesWithRetry(BusinessObjectDataKey businessObjectDataKey, UploaderInputManifestDto manifest, S3FileTransferRequestParamsDto params,\n        String storageName, Integer maxRetryAttempts, Integer retryDelaySecs)", "class_method_signature": "UploaderController.addStorageFilesWithRetry(BusinessObjectDataKey businessObjectDataKey, UploaderInputManifestDto manifest, S3FileTransferRequestParamsDto params,\n        String storageName, Integer maxRetryAttempts, Integer retryDelaySecs)", "testcase": false, "constructor": false}, {"identifier": "checkLatestBusinessObjectDataVersion", "parameters": "(UploaderInputManifestDto manifest, Boolean force)", "modifiers": "private", "return": "void", "signature": "void checkLatestBusinessObjectDataVersion(UploaderInputManifestDto manifest, Boolean force)", "full_signature": "private void checkLatestBusinessObjectDataVersion(UploaderInputManifestDto manifest, Boolean force)", "class_method_signature": "UploaderController.checkLatestBusinessObjectDataVersion(UploaderInputManifestDto manifest, Boolean force)", "testcase": false, "constructor": false}, {"identifier": "findDuplicateFiles", "parameters": "(List<File> files)", "modifiers": "private", "return": "List<File>", "signature": "List<File> findDuplicateFiles(List<File> files)", "full_signature": "private List<File> findDuplicateFiles(List<File> files)", "class_method_signature": "UploaderController.findDuplicateFiles(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "getValidatedLocalFiles", "parameters": "(String localDir, List<ManifestFile> manifestFiles)", "modifiers": "private", "return": "List<File>", "signature": "List<File> getValidatedLocalFiles(String localDir, List<ManifestFile> manifestFiles)", "full_signature": "private List<File> getValidatedLocalFiles(String localDir, List<ManifestFile> manifestFiles)", "class_method_signature": "UploaderController.getValidatedLocalFiles(String localDir, List<ManifestFile> manifestFiles)", "testcase": false, "constructor": false}, {"identifier": "logS3KeyPrefixContents", "parameters": "(S3FileTransferRequestParamsDto params)", "modifiers": "private", "return": "void", "signature": "void logS3KeyPrefixContents(S3FileTransferRequestParamsDto params)", "full_signature": "private void logS3KeyPrefixContents(S3FileTransferRequestParamsDto params)", "class_method_signature": "UploaderController.logS3KeyPrefixContents(S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-uploader/src/main/java/org/finra/herd/tools/uploader/UploaderController.java"}, "focal_method": {"identifier": "performUpload", "parameters": "(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "modifiers": "@SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", justification = \"manifestReader.readJsonManifest will always return an UploaderInputManifestDto object.\") public", "return": "void", "body": "@SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\",\n        justification = \"manifestReader.readJsonManifest will always return an UploaderInputManifestDto object.\")\n    public void performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)\n        throws InterruptedException, JAXBException, IOException, URISyntaxException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException\n    {\n        boolean cleanUpS3KeyPrefixOnFailure = false;\n        BusinessObjectDataKey businessObjectDataKey = null;\n\n        try\n        {\n            // Process manifest file\n            UploaderInputManifestDto manifest = manifestReader.readJsonManifest(manifestPath);\n\n            String storageName = getStorageNameFromManifest(manifest);\n            manifest.setStorageName(storageName);\n\n            // Validate local files and prepare a list of source files to copy to S3.\n            List<File> sourceFiles = getValidatedLocalFiles(params.getLocalPath(), manifest.getManifestFiles());\n\n            // Validate that we do not have duplicate files listed in the manifest file.\n            List<File> duplicateFiles = findDuplicateFiles(sourceFiles);\n\n            if (!duplicateFiles.isEmpty())\n            {\n                throw new IllegalArgumentException(\n                    String.format(\"Manifest contains duplicate file names. Duplicates: [\\\"%s\\\"]\", StringUtils.join(duplicateFiles, \"\\\", \\\"\")));\n            }\n\n            // Initialize uploader web client.\n            uploaderWebClient.setRegServerAccessParamsDto(regServerAccessParamsDto);\n\n            // Handle the latest business object data version if one exists.\n            checkLatestBusinessObjectDataVersion(manifest, force);\n\n            // Pre-register a new version of business object data in UPLOADING state with the registration server.\n            BusinessObjectData businessObjectData = uploaderWebClient.preRegisterBusinessObjectData(manifest, storageName, createNewVersion);\n\n            // Get business object data key.\n            businessObjectDataKey = businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);\n\n            // Get the business object data version.\n            Integer businessObjectDataVersion = businessObjectDataKey.getBusinessObjectDataVersion();\n\n            // Add credential provider.\n            params.getAdditionalAwsCredentialsProviders().add(new AutoRefreshCredentialProvider()\n            {\n                @Override\n                public AwsCredential getNewAwsCredential() throws Exception\n                {\n                    return uploaderWebClient.getBusinessObjectDataUploadCredential(manifest, storageName, businessObjectDataVersion, null).getAwsCredential();\n                }\n            });\n\n            // Get S3 key prefix from the business object data pre-registration response.\n            String s3KeyPrefix = IterableUtils.get(businessObjectData.getStorageUnits(), 0).getStorageDirectory().getDirectoryPath();\n\n            // Get S3 bucket information.\n            Storage storage = uploaderWebClient.getStorage(storageName);\n\n            // Get S3 bucket name.  Please note that since this value is required we pass a \"true\" flag.\n            String s3BucketName =\n                storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME), storage, true);\n\n            // Set the KMS ID, if available\n            String kmsKeyId =\n                storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KMS_KEY_ID), storage, false);\n            params.setKmsKeyId(kmsKeyId);\n\n            // Special handling for the maxThreads command line option.\n            params.setMaxThreads(adjustIntegerValue(params.getMaxThreads(), MIN_THREADS, MAX_THREADS));\n\n            // Populate several missing fields in the S3 file transfer request parameters DTO.\n            params.setS3BucketName(s3BucketName);\n            // Since the S3 key prefix represents a directory, we add a trailing '/' character to it.\n            params.setS3KeyPrefix(s3KeyPrefix + \"/\");\n            params.setFiles(sourceFiles);\n\n            // Check if the destination S3 key prefix is empty.\n            // When listing S3 files, by default, we do not ignore 0 byte objects that represent S3 directories.\n            if (s3Service.listDirectory(params).isEmpty())\n            {\n                cleanUpS3KeyPrefixOnFailure = true;\n            }\n            else\n            {\n                throw new IllegalStateException(String\n                    .format(\"The destination S3 folder is not empty. S3 Bucket Name: \\\"%s\\\". S3 key prefix: \\\"%s\\\".\", params.getS3BucketName(),\n                        params.getS3KeyPrefix()));\n            }\n\n            // Upload files.\n            s3Service.uploadFileList(params);\n\n            // Get the list of files uploaded to S3 key prefix.\n            if (LOGGER.isInfoEnabled())\n            {\n                logS3KeyPrefixContents(params);\n            }\n\n            // Add storage files to the business object data.\n            addStorageFilesWithRetry(businessObjectDataKey, manifest, params, storage.getName(), maxRetryAttempts, retryDelaySecs);\n\n            // Change status of the business object data to VALID.\n            uploaderWebClient.updateBusinessObjectDataStatus(businessObjectDataKey, BusinessObjectDataStatusEntity.VALID);\n        }\n        catch (InterruptedException | JAXBException | IOException | URISyntaxException e)\n        {\n            // If we got to the point of checking the target S3 key prefix before this failure\n            // occurred, let's rollback the data transfer (clean up the S3 key prefix).\n            if (cleanUpS3KeyPrefixOnFailure)\n            {\n                LOGGER.info(String\n                    .format(\"Rolling back the S3 data transfer by deleting keys/objects with prefix \\\"%s\\\" from bucket \\\"%s\\\".\", params.getS3KeyPrefix(),\n                        params.getS3BucketName()));\n                s3Service.deleteDirectoryIgnoreException(params);\n            }\n\n            // If a new business object data version got pre-registered, update it's status to INVALID.\n            if (businessObjectDataKey != null)\n            {\n                uploaderWebClient.updateBusinessObjectDataStatusIgnoreException(businessObjectDataKey, BusinessObjectDataStatusEntity.INVALID);\n            }\n\n            throw e;\n        }\n    }", "signature": "void performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "full_signature": "@SuppressFBWarnings(value = \"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE\", justification = \"manifestReader.readJsonManifest will always return an UploaderInputManifestDto object.\") public void performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "class_method_signature": "UploaderController.performUpload(RegServerAccessParamsDto regServerAccessParamsDto, File manifestPath, S3FileTransferRequestParamsDto params,\n        Boolean createNewVersion, Boolean force, Integer maxRetryAttempts, Integer retryDelaySecs)", "testcase": false, "constructor": false, "invocations": ["readJsonManifest", "getStorageNameFromManifest", "setStorageName", "getValidatedLocalFiles", "getLocalPath", "getManifestFiles", "findDuplicateFiles", "isEmpty", "format", "join", "setRegServerAccessParamsDto", "checkLatestBusinessObjectDataVersion", "preRegisterBusinessObjectData", "getBusinessObjectDataKey", "getBusinessObjectDataVersion", "add", "getAdditionalAwsCredentialsProviders", "getAwsCredential", "getBusinessObjectDataUploadCredential", "getDirectoryPath", "getStorageDirectory", "get", "getStorageUnits", "getStorage", "getStorageAttributeValueByName", "getProperty", "getStorageAttributeValueByName", "getProperty", "setKmsKeyId", "setMaxThreads", "adjustIntegerValue", "getMaxThreads", "setS3BucketName", "setS3KeyPrefix", "setFiles", "isEmpty", "listDirectory", "format", "getS3BucketName", "getS3KeyPrefix", "uploadFileList", "isInfoEnabled", "logS3KeyPrefixContents", "addStorageFilesWithRetry", "getName", "updateBusinessObjectDataStatus", "info", "format", "getS3KeyPrefix", "getS3BucketName", "deleteDirectoryIgnoreException", "updateBusinessObjectDataStatusIgnoreException"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}