{"test_class": {"identifier": "InsertOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GraphElementFactory graphElementFactory;", "modifier": "private", "type": "GraphElementFactory", "declarator": "graphElementFactory", "var_name": "graphElementFactory"}, {"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Spy\n    private InsertOperation operation;", "modifier": "@Spy\n    private", "type": "InsertOperation", "declarator": "operation", "var_name": "operation"}], "file": "neo4j/src/test/java/eu/drus/jpa/unit/neo4j/operation/InsertOperationTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        // GIVEN\n        final Node n1 = graphElementFactory.createNode(\"n1\", Arrays.asList(\"A\"),\n                ImmutableMap.<String, Object>builder().put(\"id\", 1l).build());\n        final Node n2 = graphElementFactory.createNode(\"n2\", Arrays.asList(\"A\"),\n                ImmutableMap.<String, Object>builder().put(\"id\", 2l).build());\n        final Edge e1 = graphElementFactory.createEdge(n1, n2, \"e1\", Arrays.asList(\"E\"),\n                ImmutableMap.<String, Object>builder().put(\"id\", 3l).build());\n\n        final Graph<Node, Edge> graph = new DefaultDirectedGraph<>(new ClassBasedEdgeFactory<>(Edge.class));\n        graph.addVertex(n1);\n        graph.addVertex(n2);\n        graph.addEdge(e1.getSourceNode(), e1.getTargetNode(), e1);\n\n        // WHEN\n        operation.execute(connection, graph);\n\n        // THEN\n        final ArgumentCaptor<String> queryCaptor = ArgumentCaptor.forClass(String.class);\n        verify(operation).executeQuery(eq(connection), queryCaptor.capture());\n        final String query = queryCaptor.getValue();\n        assertThat(query, containsString(\"CREATE (n1:A {id:1}),(n2:A {id:2}),(n1)-[e1:E {id:3}]->(n2)\"));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "InsertOperationTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["createNode", "asList", "build", "put", "builder", "createNode", "asList", "build", "put", "builder", "createEdge", "asList", "build", "put", "builder", "addVertex", "addVertex", "addEdge", "getSourceNode", "getTargetNode", "execute", "forClass", "executeQuery", "verify", "eq", "capture", "getValue", "assertThat", "containsString"]}, "focal_class": {"identifier": "InsertOperation", "superclass": "extends AbstractNeo4JOperation", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "(final Connection connection, final Graph<Node, Edge> graph)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final Connection connection, final Graph<Node, Edge> graph)", "full_signature": "@Override public void execute(final Connection connection, final Graph<Node, Edge> graph)", "class_method_signature": "InsertOperation.execute(final Connection connection, final Graph<Node, Edge> graph)", "testcase": false, "constructor": false}], "file": "neo4j/src/main/java/eu/drus/jpa/unit/neo4j/operation/InsertOperation.java"}, "focal_method": {"identifier": "execute", "parameters": "(final Connection connection, final Graph<Node, Edge> graph)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final Connection connection, final Graph<Node, Edge> graph) throws SQLException {\n        // create query to insert nodes and edges\n        final List<Path> paths = graph.vertexSet().stream().map(n -> n.toPath().withAllAttributes().build()).collect(toList());\n        graph.edgeSet().stream().map(e -> e.toPath().withAllAttributes().build()).collect(toCollection(() -> paths));\n\n        final UpdateNext query = create(paths.toArray(new Path[paths.size()]));\n\n        executeQuery(connection, query.toString());\n    }", "signature": "void execute(final Connection connection, final Graph<Node, Edge> graph)", "full_signature": "@Override public void execute(final Connection connection, final Graph<Node, Edge> graph)", "class_method_signature": "InsertOperation.execute(final Connection connection, final Graph<Node, Edge> graph)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "vertexSet", "build", "withAllAttributes", "toPath", "toList", "collect", "map", "stream", "edgeSet", "build", "withAllAttributes", "toPath", "toCollection", "create", "toArray", "size", "executeQuery", "toString"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}