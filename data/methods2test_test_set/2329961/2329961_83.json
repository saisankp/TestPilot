{"test_class": {"identifier": "ConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String fakeServiceName = \"myservice\";", "modifier": "private static final", "type": "String", "declarator": "fakeServiceName = \"myservice\"", "var_name": "fakeServiceName"}, {"original_string": "private static final String fakeClassName = \"org.cloudname.log.SomeClass\";", "modifier": "private static final", "type": "String", "declarator": "fakeClassName = \"org.cloudname.log.SomeClass\"", "var_name": "fakeClassName"}, {"original_string": "private static final String fakeMethodName = \"theMethod\";", "modifier": "private static final", "type": "String", "declarator": "fakeMethodName = \"theMethod\"", "var_name": "fakeMethodName"}, {"original_string": "private static final String logMessage = \"this is the logmessage\";", "modifier": "private static final", "type": "String", "declarator": "logMessage = \"this is the logmessage\"", "var_name": "logMessage"}, {"original_string": "private static LogRecord rec;", "modifier": "private static", "type": "LogRecord", "declarator": "rec", "var_name": "rec"}], "file": "log/src/test/java/org/cloudname/log/ConverterTest.java"}, "test_case": {"identifier": "testException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testException() {\n        Converter conv = new Converter(fakeServiceName);\n        LogRecord rec = new LogRecord(Level.INFO, \"bleh\");\n        rec.setThrown(new RuntimeException(\"meh\"));\n        Timber.LogEvent event = conv.convertFrom(rec);\n\n        assertEquals(\"msg\", event.getPayload(0).getName());\n        assertEquals(\"application/java-exception\", event.getPayload(1).getContentType());\n    }", "signature": "void testException()", "full_signature": "@Test public void testException()", "class_method_signature": "ConverterTest.testException()", "testcase": true, "constructor": false, "invocations": ["setThrown", "convertFrom", "assertEquals", "getName", "getPayload", "assertEquals", "getContentType", "getPayload"]}, "focal_class": {"identifier": "Converter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String hostName;", "modifier": "private static", "type": "String", "declarator": "hostName", "var_name": "hostName"}, {"original_string": "private String serviceName;", "modifier": "private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}], "methods": [{"identifier": "Converter", "parameters": "(String serviceName)", "modifiers": "public", "return": "", "signature": " Converter(String serviceName)", "full_signature": "public  Converter(String serviceName)", "class_method_signature": "Converter.Converter(String serviceName)", "testcase": false, "constructor": true}, {"identifier": "convertFrom", "parameters": "(LogRecord rec)", "modifiers": "public", "return": "Timber.LogEvent", "signature": "Timber.LogEvent convertFrom(LogRecord rec)", "full_signature": "public Timber.LogEvent convertFrom(LogRecord rec)", "class_method_signature": "Converter.convertFrom(LogRecord rec)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/Converter.java"}, "focal_method": {"identifier": "convertFrom", "parameters": "(LogRecord rec)", "modifiers": "public", "return": "Timber.LogEvent", "body": "public Timber.LogEvent convertFrom(LogRecord rec) {\n        Timber.LogEvent.Builder eventBuilder =  Timber.LogEvent.newBuilder()\n            .setTimestamp(rec.getMillis())\n            .setConsistencyLevel(ConsistencyLevel.BESTEFFORT)\n            .setLevel(rec.getLevel().intValue())\n            .setHost(hostName)\n            .setServiceName(serviceName)\n            .setSource(rec.getSourceClassName() + \"#\" + rec.getSourceMethodName())\n            .setPid(0)\n            .setTid(rec.getThreadID())\n            .setType(\"T\")\n            .addPayload(\n                Timber.Payload.newBuilder()\n                .setName(\"msg\")\n                .setPayload(ByteString.copyFromUtf8(rec.getMessage())));\n\n        // Check if we have an exception\n        Throwable cause = rec.getThrown();\n        if (cause != null) {\n            // Awkward\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            cause.printStackTrace(new PrintStream(os));\n\n            eventBuilder.addPayload(\n                Timber.Payload.newBuilder()\n                .setName(\"exception\")\n                .setContentType(\"application/java-exception\")\n                .setPayload(ByteString.copyFrom(os.toByteArray()))\n            );\n        }\n\n        return eventBuilder.build();\n    }", "signature": "Timber.LogEvent convertFrom(LogRecord rec)", "full_signature": "public Timber.LogEvent convertFrom(LogRecord rec)", "class_method_signature": "Converter.convertFrom(LogRecord rec)", "testcase": false, "constructor": false, "invocations": ["addPayload", "setType", "setTid", "setPid", "setSource", "setServiceName", "setHost", "setLevel", "setConsistencyLevel", "setTimestamp", "newBuilder", "getMillis", "intValue", "getLevel", "getSourceClassName", "getSourceMethodName", "getThreadID", "setPayload", "setName", "newBuilder", "copyFromUtf8", "getMessage", "getThrown", "printStackTrace", "addPayload", "setPayload", "setContentType", "setName", "newBuilder", "copyFrom", "toByteArray", "build"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}