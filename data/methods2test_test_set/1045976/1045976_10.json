{"test_class": {"identifier": "TypeConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "py4j-java/src/test/java/py4j/reflection/TypeConverterTest.java"}, "test_case": {"identifier": "testIntConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIntConversion() {\n\t\tTypeConverter converter = new TypeConverter(TypeConverter.INT_TO_SHORT);\n\t\tassertEquals((short) 100, converter.convert(100));\n\t\tassertTrue(converter.convert(100) instanceof Short);\n\n\t\tconverter = new TypeConverter(TypeConverter.INT_TO_BYTE);\n\t\tassertEquals((byte) 100, converter.convert(100));\n\t\tassertTrue(converter.convert(102) instanceof Byte);\n\t}", "signature": "void testIntConversion()", "full_signature": "@Test public void testIntConversion()", "class_method_signature": "TypeConverterTest.testIntConversion()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "convert", "assertTrue", "convert", "assertEquals", "convert", "assertTrue", "convert"]}, "focal_class": {"identifier": "TypeConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int NO_CONVERSION = -1;", "modifier": "public final static", "type": "int", "declarator": "NO_CONVERSION = -1", "var_name": "NO_CONVERSION"}, {"original_string": "public final static int DOUBLE_TO_FLOAT = 0;", "modifier": "public final static", "type": "int", "declarator": "DOUBLE_TO_FLOAT = 0", "var_name": "DOUBLE_TO_FLOAT"}, {"original_string": "public final static int INT_TO_SHORT = 1;", "modifier": "public final static", "type": "int", "declarator": "INT_TO_SHORT = 1", "var_name": "INT_TO_SHORT"}, {"original_string": "public final static int INT_TO_BYTE = 2;", "modifier": "public final static", "type": "int", "declarator": "INT_TO_BYTE = 2", "var_name": "INT_TO_BYTE"}, {"original_string": "public final static int STRING_TO_CHAR = 3;", "modifier": "public final static", "type": "int", "declarator": "STRING_TO_CHAR = 3", "var_name": "STRING_TO_CHAR"}, {"original_string": "public final static int NUM_TO_LONG = 4;", "modifier": "public final static", "type": "int", "declarator": "NUM_TO_LONG = 4", "var_name": "NUM_TO_LONG"}, {"original_string": "private final int conversion;", "modifier": "private final", "type": "int", "declarator": "conversion", "var_name": "conversion"}, {"original_string": "public final static TypeConverter NO_CONVERTER = new TypeConverter();", "modifier": "public final static", "type": "TypeConverter", "declarator": "NO_CONVERTER = new TypeConverter()", "var_name": "NO_CONVERTER"}, {"original_string": "public final static TypeConverter FLOAT_CONVERTER = new TypeConverter(DOUBLE_TO_FLOAT);", "modifier": "public final static", "type": "TypeConverter", "declarator": "FLOAT_CONVERTER = new TypeConverter(DOUBLE_TO_FLOAT)", "var_name": "FLOAT_CONVERTER"}, {"original_string": "public final static TypeConverter SHORT_CONVERTER = new TypeConverter(INT_TO_SHORT);", "modifier": "public final static", "type": "TypeConverter", "declarator": "SHORT_CONVERTER = new TypeConverter(INT_TO_SHORT)", "var_name": "SHORT_CONVERTER"}, {"original_string": "public final static TypeConverter BYTE_CONVERTER = new TypeConverter(INT_TO_BYTE);", "modifier": "public final static", "type": "TypeConverter", "declarator": "BYTE_CONVERTER = new TypeConverter(INT_TO_BYTE)", "var_name": "BYTE_CONVERTER"}, {"original_string": "public final static TypeConverter CHAR_CONVERTER = new TypeConverter(STRING_TO_CHAR);", "modifier": "public final static", "type": "TypeConverter", "declarator": "CHAR_CONVERTER = new TypeConverter(STRING_TO_CHAR)", "var_name": "CHAR_CONVERTER"}, {"original_string": "public final static TypeConverter LONG_CONVERTER = new TypeConverter(NUM_TO_LONG);", "modifier": "public final static", "type": "TypeConverter", "declarator": "LONG_CONVERTER = new TypeConverter(NUM_TO_LONG)", "var_name": "LONG_CONVERTER"}], "methods": [{"identifier": "TypeConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " TypeConverter()", "full_signature": "public  TypeConverter()", "class_method_signature": "TypeConverter.TypeConverter()", "testcase": false, "constructor": true}, {"identifier": "TypeConverter", "parameters": "(int conversion)", "modifiers": "public", "return": "", "signature": " TypeConverter(int conversion)", "full_signature": "public  TypeConverter(int conversion)", "class_method_signature": "TypeConverter.TypeConverter(int conversion)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "public", "return": "Object", "signature": "Object convert(Object obj)", "full_signature": "public Object convert(Object obj)", "class_method_signature": "TypeConverter.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getConversion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConversion()", "full_signature": "public int getConversion()", "class_method_signature": "TypeConverter.getConversion()", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/reflection/TypeConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "public", "return": "Object", "body": "public Object convert(Object obj) {\n\t\tObject newObject = null;\n\n\t\tswitch (conversion) {\n\t\tcase NO_CONVERSION:\n\t\t\tnewObject = obj;\n\t\t\tbreak;\n\t\tcase DOUBLE_TO_FLOAT:\n\t\t\tnewObject = ((Double) obj).floatValue();\n\t\t\tbreak;\n\t\tcase INT_TO_SHORT:\n\t\t\tnewObject = ((Integer) obj).shortValue();\n\t\t\tbreak;\n\t\tcase INT_TO_BYTE:\n\t\t\tnewObject = ((Integer) obj).byteValue();\n\t\t\tbreak;\n\t\tcase STRING_TO_CHAR:\n\t\t\tnewObject = ((CharSequence) obj).charAt(0);\n\t\t\tbreak;\n\t\tcase NUM_TO_LONG:\n\t\t\tnewObject = Long.parseLong(obj.toString());\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tnewObject = null;\n\t\t}\n\n\t\treturn newObject;\n\t}", "signature": "Object convert(Object obj)", "full_signature": "public Object convert(Object obj)", "class_method_signature": "TypeConverter.convert(Object obj)", "testcase": false, "constructor": false, "invocations": ["floatValue", "shortValue", "byteValue", "charAt", "parseLong", "toString"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}