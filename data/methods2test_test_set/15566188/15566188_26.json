{"test_class": {"identifier": "TodoControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CREATION_TIME = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "CREATION_TIME = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "CREATION_TIME"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final Long ID = 1L;", "modifier": "private static final", "type": "Long", "declarator": "ID = 1L", "var_name": "ID"}, {"original_string": "private static final String MODIFICATION_TIME = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "MODIFICATION_TIME = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "MODIFICATION_TIME"}, {"original_string": "private static final String TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "private static final String SEARCH_TERM = \"IT\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM = \"IT\"", "var_name": "SEARCH_TERM"}, {"original_string": "private static final int PAGE_NUMBER = 0;", "modifier": "private static final", "type": "int", "declarator": "PAGE_NUMBER = 0", "var_name": "PAGE_NUMBER"}, {"original_string": "private static final String PAGE_NUMBER_STRING = PAGE_NUMBER + \"\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_NUMBER_STRING = PAGE_NUMBER + \"\"", "var_name": "PAGE_NUMBER_STRING"}, {"original_string": "private static final int PAGE_SIZE = 10;", "modifier": "private static final", "type": "int", "declarator": "PAGE_SIZE = 10", "var_name": "PAGE_SIZE"}, {"original_string": "private static final String PAGE_SIZE_STRING = PAGE_SIZE + \"\";", "modifier": "private static final", "type": "String", "declarator": "PAGE_SIZE_STRING = PAGE_SIZE + \"\"", "var_name": "PAGE_SIZE_STRING"}, {"original_string": "private static final String SORT_FIELD = \"id\";", "modifier": "private static final", "type": "String", "declarator": "SORT_FIELD = \"id\"", "var_name": "SORT_FIELD"}, {"original_string": "private static final String SORT_ORDER = \"DESC\";", "modifier": "private static final", "type": "String", "declarator": "SORT_ORDER = \"DESC\"", "var_name": "SORT_ORDER"}, {"original_string": "private static final long TOTAL_NUMBER_OF_ITEMS = 1L;", "modifier": "private static final", "type": "long", "declarator": "TOTAL_NUMBER_OF_ITEMS = 1L", "var_name": "TOTAL_NUMBER_OF_ITEMS"}, {"original_string": "private static final int ONE_ITEM_FOUND = 1;", "modifier": "private static final", "type": "int", "declarator": "ONE_ITEM_FOUND = 1", "var_name": "ONE_ITEM_FOUND"}, {"original_string": "private static final int ONE_PAGE_FOUND = 1;", "modifier": "private static final", "type": "int", "declarator": "ONE_PAGE_FOUND = 1", "var_name": "ONE_PAGE_FOUND"}, {"original_string": "private static final int ZERO_ITEMS_FOUND = 0;", "modifier": "private static final", "type": "int", "declarator": "ZERO_ITEMS_FOUND = 0", "var_name": "ZERO_ITEMS_FOUND"}, {"original_string": "private static final int ZERO_PAGES_FOUND = 0;", "modifier": "private static final", "type": "int", "declarator": "ZERO_PAGES_FOUND = 0", "var_name": "ZERO_PAGES_FOUND"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@Autowired\n    private ObjectMapper objectMapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}, {"original_string": "@Autowired\n    private TodoCrudService todoCrudServiceMock;", "modifier": "@Autowired\n    private", "type": "TodoCrudService", "declarator": "todoCrudServiceMock", "var_name": "todoCrudServiceMock"}, {"original_string": "@Autowired\n    private TodoSearchService todoSearchServiceMock;", "modifier": "@Autowired\n    private", "type": "TodoSearchService", "declarator": "todoSearchServiceMock", "var_name": "todoSearchServiceMock"}, {"original_string": "@Autowired\n    private WebApplicationContext webAppContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webAppContext", "var_name": "webAppContext"}], "file": "jooq-only/src/test/java/net/petrikainulainen/spring/jooq/todo/controller/TodoControllerTest.java"}, "test_case": {"identifier": "update_TodoEntryNotFound_ShouldReturnHttpStatusCodeNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void update_TodoEntryNotFound_ShouldReturnHttpStatusCodeNotFound() throws Exception {\n        TodoDTO updatedTodoEntry = new TodoDTOBuilder()\n                .description(DESCRIPTION)\n                .title(TITLE)\n                .build();\n\n        when(todoCrudServiceMock.update(isA(TodoDTO.class))).thenThrow(new TodoNotFoundException(\"\"));\n\n        mockMvc.perform(put(\"/api/todo/{id}\", ID)\n                .contentType(WebTestConstants.APPLICATION_JSON_UTF8)\n                .content(objectMapper.writeValueAsBytes(updatedTodoEntry))\n        )\n                .andExpect(status().isNotFound());\n\n        ArgumentCaptor<TodoDTO> serviceMethodArgument = ArgumentCaptor.forClass(TodoDTO.class);\n\n        verify(todoCrudServiceMock, times(1)).update(serviceMethodArgument.capture());\n        verifyNoMoreInteractions(todoCrudServiceMock);\n        verifyZeroInteractions(todoSearchServiceMock);\n\n        TodoDTO serviceMethodArgumentValue = serviceMethodArgument.getValue();\n        assertThatTodoDTO(serviceMethodArgumentValue)\n                .hasId(ID)\n                .hasNoCreationTime()\n                .hasDescription(DESCRIPTION)\n                .hasNoModificationTime()\n                .hasTitle(TITLE);\n    }", "signature": "void update_TodoEntryNotFound_ShouldReturnHttpStatusCodeNotFound()", "full_signature": "@Test public void update_TodoEntryNotFound_ShouldReturnHttpStatusCodeNotFound()", "class_method_signature": "TodoControllerTest.update_TodoEntryNotFound_ShouldReturnHttpStatusCodeNotFound()", "testcase": true, "constructor": false, "invocations": ["build", "title", "description", "thenThrow", "when", "update", "isA", "andExpect", "perform", "content", "contentType", "put", "writeValueAsBytes", "isNotFound", "status", "forClass", "update", "verify", "times", "capture", "verifyNoMoreInteractions", "verifyZeroInteractions", "getValue", "hasTitle", "hasNoModificationTime", "hasDescription", "hasNoCreationTime", "hasId", "assertThatTodoDTO"]}, "focal_class": {"identifier": "TodoController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TodoController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TodoController.class)", "var_name": "LOGGER"}, {"original_string": "private final TodoCrudService crudService;", "modifier": "private final", "type": "TodoCrudService", "declarator": "crudService", "var_name": "crudService"}, {"original_string": "private final TodoSearchService searchService;", "modifier": "private final", "type": "TodoSearchService", "declarator": "searchService", "var_name": "searchService"}], "methods": [{"identifier": "TodoController", "parameters": "(TodoCrudService crudService, TodoSearchService searchService)", "modifiers": "@Autowired public", "return": "", "signature": " TodoController(TodoCrudService crudService, TodoSearchService searchService)", "full_signature": "@Autowired public  TodoController(TodoCrudService crudService, TodoSearchService searchService)", "class_method_signature": "TodoController.TodoController(TodoCrudService crudService, TodoSearchService searchService)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(@RequestBody @Valid TodoDTO dto)", "modifiers": "@RequestMapping(method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public", "return": "TodoDTO", "signature": "TodoDTO add(@RequestBody @Valid TodoDTO dto)", "full_signature": "@RequestMapping(method = RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public TodoDTO add(@RequestBody @Valid TodoDTO dto)", "class_method_signature": "TodoController.add(@RequestBody @Valid TodoDTO dto)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE) public", "return": "TodoDTO", "signature": "TodoDTO delete(@PathVariable(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE) public TodoDTO delete(@PathVariable(\"id\") Long id)", "class_method_signature": "TodoController.delete(@PathVariable(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@RequestMapping(method = RequestMethod.GET) public", "return": "List<TodoDTO>", "signature": "List<TodoDTO> findAll()", "full_signature": "@RequestMapping(method = RequestMethod.GET) public List<TodoDTO> findAll()", "class_method_signature": "TodoController.findAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(@PathVariable(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.GET) public", "return": "TodoDTO", "signature": "TodoDTO findById(@PathVariable(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/{id}\", method = RequestMethod.GET) public TodoDTO findById(@PathVariable(\"id\") Long id)", "class_method_signature": "TodoController.findById(@PathVariable(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "findBySearchTerm", "parameters": "(@RequestParam(\"searchTerm\") String searchTerm, Pageable pageable)", "modifiers": "@RequestMapping(value = \"/search\", method = RequestMethod.GET) public", "return": "Page<TodoDTO>", "signature": "Page<TodoDTO> findBySearchTerm(@RequestParam(\"searchTerm\") String searchTerm, Pageable pageable)", "full_signature": "@RequestMapping(value = \"/search\", method = RequestMethod.GET) public Page<TodoDTO> findBySearchTerm(@RequestParam(\"searchTerm\") String searchTerm, Pageable pageable)", "class_method_signature": "TodoController.findBySearchTerm(@RequestParam(\"searchTerm\") String searchTerm, Pageable pageable)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT) public", "return": "TodoDTO", "signature": "TodoDTO update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "full_signature": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT) public TodoDTO update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "class_method_signature": "TodoController.update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "testcase": false, "constructor": false}], "file": "jooq-only/src/main/java/net/petrikainulainen/spring/jooq/todo/controller/TodoController.java"}, "focal_method": {"identifier": "update", "parameters": "(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "modifiers": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT) public", "return": "TodoDTO", "body": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    public TodoDTO update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto) {\n        dto.setId(id);\n\n        LOGGER.info(\"Updating todo entry with information: {}\", dto);\n\n        TodoDTO updated = crudService.update(dto);\n\n        LOGGER.info(\"Updated todo entry: {}\", updated);\n\n        return updated;\n    }", "signature": "TodoDTO update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "full_signature": "@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT) public TodoDTO update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "class_method_signature": "TodoController.update(@PathVariable(\"id\") Long id, @RequestBody @Valid TodoDTO dto)", "testcase": false, "constructor": false, "invocations": ["setId", "info", "update", "info"]}, "repository": {"repo_id": 15566188, "url": "https://github.com/pkainulainen/jooq-with-spring-examples", "language": "Java", "is_fork": false, "fork_count": 51, "stargazer_count": 70, "size": 370, "license": "licensed"}}