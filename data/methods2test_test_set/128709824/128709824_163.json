{"test_class": {"identifier": "ModuleFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/module/ModuleFactoryTest.java"}, "test_case": {"identifier": "needLoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void needLoad() throws Exception {\n        Assert.assertTrue(ModuleFactory.needLoad(\"*\", \"xxx\"));\n        Assert.assertTrue(ModuleFactory.needLoad(\"*,xxx\", \"xxx\"));\n        Assert.assertTrue(ModuleFactory.needLoad(\"xxx\", \"xxx\"));\n        Assert.assertTrue(ModuleFactory.needLoad(\"xxx,yyy\", \"xxx\"));\n        Assert.assertTrue(ModuleFactory.needLoad(\"yyy,xxx\", \"xxx\"));\n        Assert.assertTrue(ModuleFactory.needLoad(\"yyy,xxx,zzz\", \"xxx\"));\n\n        Assert.assertFalse(ModuleFactory.needLoad(\"\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"yyy\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"xxxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"xxxx,yyy\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"yyy,xxxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"*,-xxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"a,b,-xxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"xxx,-xxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"*,!xxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"a,b,!xxx\", \"xxx\"));\n        Assert.assertFalse(ModuleFactory.needLoad(\"xxx,!xxx\", \"xxx\"));\n    }", "signature": "void needLoad()", "full_signature": "@Test public void needLoad()", "class_method_signature": "ModuleFactoryTest.needLoad()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "needLoad", "assertTrue", "needLoad", "assertTrue", "needLoad", "assertTrue", "needLoad", "assertTrue", "needLoad", "assertTrue", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad", "assertFalse", "needLoad"]}, "focal_class": {"identifier": "ModuleFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger                LOGGER            = LoggerFactory.getLogger(ModuleFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER            = LoggerFactory.getLogger(ModuleFactory.class)", "var_name": "LOGGER"}, {"original_string": "static final ConcurrentMap<String, Module> INSTALLED_MODULES = new ConcurrentHashMap<String, Module>();", "modifier": "static final", "type": "ConcurrentMap<String, Module>", "declarator": "INSTALLED_MODULES = new ConcurrentHashMap<String, Module>()", "var_name": "INSTALLED_MODULES"}], "methods": [{"identifier": "needLoad", "parameters": "(String moduleLoadList, String moduleName)", "modifiers": "static", "return": "boolean", "signature": "boolean needLoad(String moduleLoadList, String moduleName)", "full_signature": "static boolean needLoad(String moduleLoadList, String moduleName)", "class_method_signature": "ModuleFactory.needLoad(String moduleLoadList, String moduleName)", "testcase": false, "constructor": false}, {"identifier": "installModules", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void installModules()", "full_signature": "public static void installModules()", "class_method_signature": "ModuleFactory.installModules()", "testcase": false, "constructor": false}, {"identifier": "uninstallModules", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void uninstallModules()", "full_signature": "public static void uninstallModules()", "class_method_signature": "ModuleFactory.uninstallModules()", "testcase": false, "constructor": false}, {"identifier": "uninstallModule", "parameters": "(String moduleName)", "modifiers": "public static", "return": "void", "signature": "void uninstallModule(String moduleName)", "full_signature": "public static void uninstallModule(String moduleName)", "class_method_signature": "ModuleFactory.uninstallModule(String moduleName)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/module/ModuleFactory.java"}, "focal_method": {"identifier": "needLoad", "parameters": "(String moduleLoadList, String moduleName)", "modifiers": "static", "return": "boolean", "body": "static boolean needLoad(String moduleLoadList, String moduleName) {\n        String[] activatedModules = StringUtils.splitWithCommaOrSemicolon(moduleLoadList);\n        boolean match = false;\n        for (String activatedModule : activatedModules) {\n            if (StringUtils.ALL.equals(activatedModule)) {\n                match = true;\n            } else if (activatedModule.equals(moduleName)) {\n                match = true;\n            } else if (match && (activatedModule.equals(\"!\" + moduleName)\n                || activatedModule.equals(\"-\" + moduleName))) {\n                match = false;\n                break;\n            }\n        }\n        return match;\n    }", "signature": "boolean needLoad(String moduleLoadList, String moduleName)", "full_signature": "static boolean needLoad(String moduleLoadList, String moduleName)", "class_method_signature": "ModuleFactory.needLoad(String moduleLoadList, String moduleName)", "testcase": false, "constructor": false, "invocations": ["splitWithCommaOrSemicolon", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}