{"test_class": {"identifier": "ScanArtifactMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/ScanArtifactMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/ScanArtifactMojoTest\")", "var_name": "testOutBaseDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/ScanArtifactMojoTest.java"}, "test_case": {"identifier": "testGetScanArtifactFile_failWhenEmpty", "parameters": "()", "modifiers": "@Test(expected = MojoFailureException.class) public", "return": "void", "body": "@Test(expected = MojoFailureException.class)\n    public void testGetScanArtifactFile_failWhenEmpty() throws Exception {\n        newMojo().getScanArtifactFile();\n    }", "signature": "void testGetScanArtifactFile_failWhenEmpty()", "full_signature": "@Test(expected = MojoFailureException.class) public void testGetScanArtifactFile_failWhenEmpty()", "class_method_signature": "ScanArtifactMojoTest.testGetScanArtifactFile_failWhenEmpty()", "testcase": true, "constructor": false, "invocations": ["getScanArtifactFile", "newMojo"]}, "focal_class": {"identifier": "ScanArtifactMojo", "superclass": "extends AbstractITestWithPlanMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(property = \"oakpal.scan.skip\")\n    public boolean skip;", "modifier": "@Parameter(property = \"oakpal.scan.skip\")\n    public", "type": "boolean", "declarator": "skip", "var_name": "skip"}], "methods": [{"identifier": "isIndividuallySkipped", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isIndividuallySkipped()", "full_signature": "@Override protected boolean isIndividuallySkipped()", "class_method_signature": "ScanArtifactMojo.isIndividuallySkipped()", "testcase": false, "constructor": false}, {"identifier": "getScanArtifactFile", "parameters": "()", "modifiers": "final @NotNull", "return": "File", "signature": "File getScanArtifactFile()", "full_signature": "final @NotNull File getScanArtifactFile()", "class_method_signature": "ScanArtifactMojo.getScanArtifactFile()", "testcase": false, "constructor": false}, {"identifier": "executeGuardedIntegrationTest", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void executeGuardedIntegrationTest()", "full_signature": "@Override protected void executeGuardedIntegrationTest()", "class_method_signature": "ScanArtifactMojo.executeGuardedIntegrationTest()", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/ScanArtifactMojo.java"}, "focal_method": {"identifier": "getScanArtifactFile", "parameters": "()", "modifiers": "final @NotNull", "return": "File", "body": "final @NotNull File getScanArtifactFile() throws MojoFailureException {\n        Optional<File> packageArtifact = getProject()\n                .flatMap(p -> Optional.ofNullable(p.getArtifact()))\n                .flatMap(a -> Optional.ofNullable(a.getFile()));\n        if (packageArtifact.isPresent() && packageArtifact.get().exists()) {\n            return packageArtifact.get();\n        } else {\n            throw new MojoFailureException(\"Failed to resolve file for project artifact.\");\n        }\n    }", "signature": "File getScanArtifactFile()", "full_signature": "final @NotNull File getScanArtifactFile()", "class_method_signature": "ScanArtifactMojo.getScanArtifactFile()", "testcase": false, "constructor": false, "invocations": ["flatMap", "flatMap", "getProject", "ofNullable", "getArtifact", "ofNullable", "getFile", "isPresent", "exists", "get", "get"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}