{"test_class": {"identifier": "NumericalSurfaceTest", "superclass": "", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/geometry/surface/NumericalSurfaceTest.java"}, "test_case": {"identifier": "testCranbinSurface", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCranbinSurface() throws Exception {\n        IChemObjectBuilder bldr = SilentChemObjectBuilder.getInstance();\n        IChemFile chemFile;\n        String path = \"/data/pdb/1CRN.pdb\";\n        try (InputStream in = getClass().getResourceAsStream(path);\n             PDBReader pdbr = new PDBReader(in)) {\n            chemFile = pdbr.read(bldr.newInstance(IChemFile.class));\n        }\n        IAtomContainer   mol     = ChemFileManipulator.getAllAtomContainers(chemFile).get(0);\n        NumericalSurface surface = new NumericalSurface(mol);\n        Map<IAtom, List<Point3d>> map = surface.getAtomSurfaceMap();\n        assertThat(map.size(), CoreMatchers.is(222));\n        assertThat(mol.getAtomCount(), CoreMatchers.is(327));\n    }", "signature": "void testCranbinSurface()", "full_signature": "@Test public void testCranbinSurface()", "class_method_signature": "NumericalSurfaceTest.testCranbinSurface()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getResourceAsStream", "getClass", "read", "newInstance", "get", "getAllAtomContainers", "getAtomSurfaceMap", "assertThat", "size", "is", "assertThat", "getAtomCount", "is"]}, "focal_class": {"identifier": "NumericalSurface", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger         = LoggingToolFactory.createLoggingTool(NumericalSurface.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger         = LoggingToolFactory.createLoggingTool(NumericalSurface.class)", "var_name": "logger"}, {"original_string": "double          solventRadius  = 1.4;", "modifier": "", "type": "double", "declarator": "solventRadius  = 1.4", "var_name": "solventRadius"}, {"original_string": "int             tesslevel      = 4;", "modifier": "", "type": "int", "declarator": "tesslevel      = 4", "var_name": "tesslevel"}, {"original_string": "IAtom[]         atoms;", "modifier": "", "type": "IAtom[]", "declarator": "atoms", "var_name": "atoms"}, {"original_string": "List<Point3d>[] surfPoints;", "modifier": "", "type": "List<Point3d>[]", "declarator": "surfPoints", "var_name": "surfPoints"}, {"original_string": "double[]        areas;", "modifier": "", "type": "double[]", "declarator": "areas", "var_name": "areas"}, {"original_string": "double[]        volumes;", "modifier": "", "type": "double[]", "declarator": "volumes", "var_name": "volumes"}], "methods": [{"identifier": "NumericalSurface", "parameters": "(IAtomContainer atomContainer)", "modifiers": "public", "return": "", "signature": " NumericalSurface(IAtomContainer atomContainer)", "full_signature": "public  NumericalSurface(IAtomContainer atomContainer)", "class_method_signature": "NumericalSurface.NumericalSurface(IAtomContainer atomContainer)", "testcase": false, "constructor": true}, {"identifier": "NumericalSurface", "parameters": "(IAtomContainer atomContainer, double solventRadius, int tesslevel)", "modifiers": "public", "return": "", "signature": " NumericalSurface(IAtomContainer atomContainer, double solventRadius, int tesslevel)", "full_signature": "public  NumericalSurface(IAtomContainer atomContainer, double solventRadius, int tesslevel)", "class_method_signature": "NumericalSurface.NumericalSurface(IAtomContainer atomContainer, double solventRadius, int tesslevel)", "testcase": false, "constructor": true}, {"identifier": "calculateSurface", "parameters": "()", "modifiers": "@Deprecated public", "return": "void", "signature": "void calculateSurface()", "full_signature": "@Deprecated public void calculateSurface()", "class_method_signature": "NumericalSurface.calculateSurface()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "NumericalSurface.init()", "testcase": false, "constructor": false}, {"identifier": "getAllSurfacePoints", "parameters": "()", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] getAllSurfacePoints()", "full_signature": "public Point3d[] getAllSurfacePoints()", "class_method_signature": "NumericalSurface.getAllSurfacePoints()", "testcase": false, "constructor": false}, {"identifier": "getAtomSurfaceMap", "parameters": "()", "modifiers": "public", "return": "Map<IAtom, List<Point3d>>", "signature": "Map<IAtom, List<Point3d>> getAtomSurfaceMap()", "full_signature": "public Map<IAtom, List<Point3d>> getAtomSurfaceMap()", "class_method_signature": "NumericalSurface.getAtomSurfaceMap()", "testcase": false, "constructor": false}, {"identifier": "getSurfacePoints", "parameters": "(int atomIdx)", "modifiers": "public", "return": "Point3d[]", "signature": "Point3d[] getSurfacePoints(int atomIdx)", "full_signature": "public Point3d[] getSurfacePoints(int atomIdx)", "class_method_signature": "NumericalSurface.getSurfacePoints(int atomIdx)", "testcase": false, "constructor": false}, {"identifier": "getSurfaceArea", "parameters": "(int atomIdx)", "modifiers": "public", "return": "double", "signature": "double getSurfaceArea(int atomIdx)", "full_signature": "public double getSurfaceArea(int atomIdx)", "class_method_signature": "NumericalSurface.getSurfaceArea(int atomIdx)", "testcase": false, "constructor": false}, {"identifier": "getAllSurfaceAreas", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getAllSurfaceAreas()", "full_signature": "public double[] getAllSurfaceAreas()", "class_method_signature": "NumericalSurface.getAllSurfaceAreas()", "testcase": false, "constructor": false}, {"identifier": "getTotalSurfaceArea", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTotalSurfaceArea()", "full_signature": "public double getTotalSurfaceArea()", "class_method_signature": "NumericalSurface.getTotalSurfaceArea()", "testcase": false, "constructor": false}, {"identifier": "translatePoints", "parameters": "(int atmIdx, Point3d[][] points, int pointDensity, IAtom atom, Point3d cp)", "modifiers": "private", "return": "void", "signature": "void translatePoints(int atmIdx, Point3d[][] points, int pointDensity, IAtom atom, Point3d cp)", "full_signature": "private void translatePoints(int atmIdx, Point3d[][] points, int pointDensity, IAtom atom, Point3d cp)", "class_method_signature": "NumericalSurface.translatePoints(int atmIdx, Point3d[][] points, int pointDensity, IAtom atom, Point3d cp)", "testcase": false, "constructor": false}, {"identifier": "atomicSurfacePoints", "parameters": "(NeighborList nbrlist, int currAtomIdx, IAtom atom, Tessellate tess)", "modifiers": "private", "return": "Point3d[][]", "signature": "Point3d[][] atomicSurfacePoints(NeighborList nbrlist, int currAtomIdx, IAtom atom, Tessellate tess)", "full_signature": "private Point3d[][] atomicSurfacePoints(NeighborList nbrlist, int currAtomIdx, IAtom atom, Tessellate tess)", "class_method_signature": "NumericalSurface.atomicSurfacePoints(NeighborList nbrlist, int currAtomIdx, IAtom atom, Tessellate tess)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/geometry/surface/NumericalSurface.java"}, "focal_method": {"identifier": "getAtomSurfaceMap", "parameters": "()", "modifiers": "public", "return": "Map<IAtom, List<Point3d>>", "body": "public Map<IAtom, List<Point3d>> getAtomSurfaceMap() {\n        Map<IAtom,List<Point3d>> map = new HashMap<>();\n        for (int i = 0; i < this.surfPoints.length; i++) {\n            if (!this.surfPoints[i].isEmpty())\n                map.put(this.atoms[i], Collections.unmodifiableList(this.surfPoints[i]));\n        }\n        return map;\n    }", "signature": "Map<IAtom, List<Point3d>> getAtomSurfaceMap()", "full_signature": "public Map<IAtom, List<Point3d>> getAtomSurfaceMap()", "class_method_signature": "NumericalSurface.getAtomSurfaceMap()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "put", "unmodifiableList"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}