{"test_class": {"identifier": "AcceptTokenTest", "superclass": "", "interfaces": "", "fields": [], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/AcceptTokenTest.java"}, "test_case": {"identifier": "throwExceptionWhenAcceptTokenHeaderIsNull", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void throwExceptionWhenAcceptTokenHeaderIsNull() {\n        AcceptToken.valueOf(null);\n    }", "signature": "void throwExceptionWhenAcceptTokenHeaderIsNull()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void throwExceptionWhenAcceptTokenHeaderIsNull()", "class_method_signature": "AcceptTokenTest.throwExceptionWhenAcceptTokenHeaderIsNull()", "testcase": true, "constructor": false, "invocations": ["valueOf"]}, "focal_class": {"identifier": "AcceptToken", "superclass": "", "interfaces": "implements QualityValue", "fields": [{"original_string": "private static final char PARAMETERS_SEPARATOR = ';';", "modifier": "private static final", "type": "char", "declarator": "PARAMETERS_SEPARATOR = ';'", "var_name": "PARAMETERS_SEPARATOR"}, {"original_string": "private final Token token;", "modifier": "private final", "type": "Token", "declarator": "token", "var_name": "token"}, {"original_string": "private final float qValue;", "modifier": "private final", "type": "float", "declarator": "qValue", "var_name": "qValue"}], "methods": [{"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "AcceptToken", "signature": "AcceptToken valueOf(String value)", "full_signature": "public static AcceptToken valueOf(String value)", "class_method_signature": "AcceptToken.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "AcceptToken", "parameters": "(String token)", "modifiers": "public", "return": "", "signature": " AcceptToken(String token)", "full_signature": "public  AcceptToken(String token)", "class_method_signature": "AcceptToken.AcceptToken(String token)", "testcase": false, "constructor": true}, {"identifier": "AcceptToken", "parameters": "(String token, float qValue)", "modifiers": "public", "return": "", "signature": " AcceptToken(String token, float qValue)", "full_signature": "public  AcceptToken(String token, float qValue)", "class_method_signature": "AcceptToken.AcceptToken(String token, float qValue)", "testcase": false, "constructor": true}, {"identifier": "getToken", "parameters": "()", "modifiers": "public", "return": "Token", "signature": "Token getToken()", "full_signature": "public Token getToken()", "class_method_signature": "AcceptToken.getToken()", "testcase": false, "constructor": false}, {"identifier": "getQvalue", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getQvalue()", "full_signature": "@Override public float getQvalue()", "class_method_signature": "AcceptToken.getQvalue()", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(AcceptToken other)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(AcceptToken other)", "full_signature": "public boolean isCompatible(AcceptToken other)", "class_method_signature": "AcceptToken.isCompatible(AcceptToken other)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(Token other)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(Token other)", "full_signature": "public boolean isCompatible(Token other)", "class_method_signature": "AcceptToken.isCompatible(Token other)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(String other)", "modifiers": "public", "return": "boolean", "signature": "boolean isCompatible(String other)", "full_signature": "public boolean isCompatible(String other)", "class_method_signature": "AcceptToken.isCompatible(String other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AcceptToken.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "AcceptToken.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AcceptToken.hashCode()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/AcceptToken.java"}, "focal_method": {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "AcceptToken", "body": "public static AcceptToken valueOf(String value) {\n        if (value == null) {\n            throw new IllegalArgumentException();\n        }\n        try {\n            int separator = scan(value, PARAMETERS_SEPARATOR);\n            boolean hasParameters = charAtIs(value, separator, PARAMETERS_SEPARATOR);\n            String token = hasParameters ? value.substring(0, separator).trim() : value.trim();\n            token = token.trim();\n\n            int i;\n            if ((i = isToken(token)) != -1) {\n                throw new IllegalArgumentException(String.format(\"Not valid character at index %d in %s\", i, token));\n            }\n\n            if (hasParameters) {\n                Map<String, String> param = new HeaderParameterParser().parse(value);\n                if (param.containsKey(QVALUE)) {\n                    return new AcceptToken(token, parseQualityValue(param.get(QVALUE)));\n                }\n            }\n\n            return new AcceptToken(token);\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "signature": "AcceptToken valueOf(String value)", "full_signature": "public static AcceptToken valueOf(String value)", "class_method_signature": "AcceptToken.valueOf(String value)", "testcase": false, "constructor": false, "invocations": ["scan", "charAtIs", "trim", "substring", "trim", "trim", "isToken", "format", "parse", "containsKey", "parseQualityValue", "get"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}