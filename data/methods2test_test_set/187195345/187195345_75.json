{"test_class": {"identifier": "IteratorHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int LIST_SIZE = 3;", "modifier": "private static final", "type": "int", "declarator": "LIST_SIZE = 3", "var_name": "LIST_SIZE"}], "file": "map/src/test/java/openlr/map/utils/IteratorHelperTest.java"}, "test_case": {"identifier": "testIteratorHelper", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testIteratorHelper() {\n\n        List<String> fruits = new ArrayList<String>(LIST_SIZE);\n        fruits.add(\"Apple\");\n        fruits.add(\"Orange\");\n        fruits.add(\"Pear\");\n\n        assertTrue(IteratorHelper.contains(fruits.iterator(), \"Apple\"));\n        assertFalse(IteratorHelper.contains(fruits.iterator(), \"Potato\"));\n\n        try {\n            IteratorHelper.contains(fruits.iterator(), null);\n            Assert.fail(\"Expected NullPointerException missing\");\n        } catch (NullPointerException e) {\n            // that's expected\n            assertNotNull(e); // to satisfy checkstyle\n        }\n\n        try {\n            IteratorHelper.contains(null, \"Apple\");\n            fail(\"Expected NullPointerException missing\");\n        } catch (NullPointerException e) {\n            // that's expected\n            assertNotNull(e); // to satisfy checkstyle\n        }\n\n        assertEquals(IteratorHelper.size(fruits.iterator()), LIST_SIZE,\n                \"Unexpected size delivered.\");\n\n        try {\n            IteratorHelper.size(null);\n            Assert.fail(\"Expected NullPointerException missing\");\n        } catch (NullPointerException e) {\n            // that's expected\n            assertNotNull(e); // to satisfy checkstyle\n        }\n\n    }", "signature": "void testIteratorHelper()", "full_signature": "@Test public final void testIteratorHelper()", "class_method_signature": "IteratorHelperTest.testIteratorHelper()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "assertTrue", "contains", "iterator", "assertFalse", "contains", "iterator", "contains", "iterator", "fail", "assertNotNull", "contains", "fail", "assertNotNull", "assertEquals", "size", "iterator", "size", "fail", "assertNotNull"]}, "focal_class": {"identifier": "IteratorHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "IteratorHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " IteratorHelper()", "full_signature": "private  IteratorHelper()", "class_method_signature": "IteratorHelper.IteratorHelper()", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(final Iterator<? extends E> iter, final E item)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(final Iterator<? extends E> iter, final E item)", "full_signature": "public static boolean contains(final Iterator<? extends E> iter, final E item)", "class_method_signature": "IteratorHelper.contains(final Iterator<? extends E> iter, final E item)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "(final Iterator<E> iter)", "modifiers": "public static", "return": "int", "signature": "int size(final Iterator<E> iter)", "full_signature": "public static int size(final Iterator<E> iter)", "class_method_signature": "IteratorHelper.size(final Iterator<E> iter)", "testcase": false, "constructor": false}], "file": "map/src/main/java/openlr/map/utils/IteratorHelper.java"}, "focal_method": {"identifier": "IteratorHelper", "parameters": "()", "modifiers": "private", "return": "", "body": "private IteratorHelper() {\n        throw new UnsupportedOperationException();\n    }", "signature": " IteratorHelper()", "full_signature": "private  IteratorHelper()", "class_method_signature": "IteratorHelper.IteratorHelper()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}