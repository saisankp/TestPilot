{"test_class": {"identifier": "NvaLeaderSelectorListenerAdapterTest", "superclass": "", "interfaces": "", "fields": [], "file": "nvadaemon/src/test/java/com/microsoft/azure/practices/nvadaemon/NvaLeaderSelectorListenerAdapterTest.java"}, "test_case": {"identifier": "testTakeLeadershipInterrupted", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testTakeLeadershipInterrupted() throws Exception {\n        ZookeeperConfiguration zookeeperConfiguration =\n            new ZookeeperConfiguration(\"connection-string\", \"/leader-selector-path\", null, null);\n        List<MonitorConfiguration> monitors = new ArrayList<>();\n        Map<String, Object> settings = new HashMap<>();\n        settings.put(\"constructorShouldThrowException\", \"false\");\n        settings.put(\"shouldCauseInterrupt\", \"false\");\n        monitors.add(\n            new MonitorConfiguration(\n                \"com.microsoft.azure.practices.nvadaemon.NvaMonitorTest$MonitorValidConstructor\",\n                settings));\n        DaemonConfiguration daemonConfiguration = new DaemonConfiguration(monitors, null);\n        NvaDaemonConfiguration nvaDaemonConfiguration = new NvaDaemonConfiguration(\n            zookeeperConfiguration, daemonConfiguration);\n\n        CuratorFramework curatorFramework = mock(CuratorFramework.class);\n        NvaLeaderSelectorListenerAdapter nvaLeaderSelectorListenerAdapter =\n            new NvaLeaderSelectorListenerAdapter(nvaDaemonConfiguration, curatorFramework);\n        AtomicReference<Thread> thread = new AtomicReference<>();\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        Future<Void> task = executorService.submit(\n            () -> {\n                thread.set(Thread.currentThread());\n                nvaLeaderSelectorListenerAdapter.takeLeadership(curatorFramework);\n                return null;\n            });\n        Thread.sleep(3000);\n        thread.get().interrupt();\n//        Assertions.assertThrows(IllegalStateException.class,\n//            () -> nvaLeaderSelectorListenerAdapter.close());\n        task.get();\n//        Assertions.assertThrows(ExecutionException.class,\n//            () -> nvaLeaderSelectorListenerAdapter.takeLeadership(curatorFramework));\n    }", "signature": "void testTakeLeadershipInterrupted()", "full_signature": "@Test void testTakeLeadershipInterrupted()", "class_method_signature": "NvaLeaderSelectorListenerAdapterTest.testTakeLeadershipInterrupted()", "testcase": true, "constructor": false, "invocations": ["put", "put", "add", "mock", "newSingleThreadExecutor", "submit", "set", "currentThread", "takeLeadership", "sleep", "interrupt", "get", "get"]}, "focal_class": {"identifier": "NvaLeaderSelectorListenerAdapter", "superclass": "extends LeaderSelectorListenerAdapter", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(NvaLeaderSelectorListenerAdapter.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NvaLeaderSelectorListenerAdapter.class)", "var_name": "log"}, {"original_string": "private final LeaderSelector leaderSelector;", "modifier": "private final", "type": "LeaderSelector", "declarator": "leaderSelector", "var_name": "leaderSelector"}, {"original_string": "private final NvaDaemonConfiguration configuration;", "modifier": "private final", "type": "NvaDaemonConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final NvaMonitor nvaMonitor;", "modifier": "private final", "type": "NvaMonitor", "declarator": "nvaMonitor", "var_name": "nvaMonitor"}], "methods": [{"identifier": "NvaLeaderSelectorListenerAdapter", "parameters": "(NvaDaemonConfiguration configuration,\n                                            CuratorFramework client)", "modifiers": "public", "return": "", "signature": " NvaLeaderSelectorListenerAdapter(NvaDaemonConfiguration configuration,\n                                            CuratorFramework client)", "full_signature": "public  NvaLeaderSelectorListenerAdapter(NvaDaemonConfiguration configuration,\n                                            CuratorFramework client)", "class_method_signature": "NvaLeaderSelectorListenerAdapter.NvaLeaderSelectorListenerAdapter(NvaDaemonConfiguration configuration,\n                                            CuratorFramework client)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void start()", "full_signature": "public synchronized void start()", "class_method_signature": "NvaLeaderSelectorListenerAdapter.start()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "NvaLeaderSelectorListenerAdapter.close()", "testcase": false, "constructor": false}, {"identifier": "takeLeadership", "parameters": "(CuratorFramework curatorFramework)", "modifiers": "@Override public", "return": "void", "signature": "void takeLeadership(CuratorFramework curatorFramework)", "full_signature": "@Override public void takeLeadership(CuratorFramework curatorFramework)", "class_method_signature": "NvaLeaderSelectorListenerAdapter.takeLeadership(CuratorFramework curatorFramework)", "testcase": false, "constructor": false}], "file": "nvadaemon/src/main/java/com/microsoft/azure/practices/nvadaemon/NvaLeaderSelectorListenerAdapter.java"}, "focal_method": {"identifier": "takeLeadership", "parameters": "(CuratorFramework curatorFramework)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void takeLeadership(CuratorFramework curatorFramework) throws Exception {\n        log.info(\"Leadership acquired\");\n        try {\n            log.info(\"Starting nvaMonitor\");\n            Future<Void> task = nvaMonitor.start();\n            task.get();\n            log.debug(\"task.get() returned\");\n        } catch (InterruptedException e) {\n            log.info(\"takeLeadership interrupted\");\n            Thread.currentThread().interrupt();\n        } catch (NvaMonitorException e){\n            log.error(\"Error creating NvaMonitor\", e);\n            throw e;\n        } catch (ExecutionException e) {\n            // This should happen when there is an exception starting the nvaMonitor.  We need to\n            // relinquish leadership so someone else can try.  However, if this is a configuration\n            // issue, it will just bounce from leader to leader, so we need to log it.\n            log.error(\"Error executing NvaMonitor\", e);\n            throw e;\n        } finally {\n            this.nvaMonitor.stop();\n        }\n    }", "signature": "void takeLeadership(CuratorFramework curatorFramework)", "full_signature": "@Override public void takeLeadership(CuratorFramework curatorFramework)", "class_method_signature": "NvaLeaderSelectorListenerAdapter.takeLeadership(CuratorFramework curatorFramework)", "testcase": false, "constructor": false, "invocations": ["info", "info", "start", "get", "debug", "info", "interrupt", "currentThread", "error", "error", "stop"]}, "repository": {"repo_id": 70932660, "url": "https://github.com/mspnp/ha-nva", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 27, "size": 38331, "license": "licensed"}}