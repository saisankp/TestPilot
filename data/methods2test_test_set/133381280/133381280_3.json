{"test_class": {"identifier": "MetricImporterUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateway/metrics/pipeline/src/test/java/com/alipay/sofa/lookout/gateway/metrics/pipeline/common/MetricImporterUtilsTest.java"}, "test_case": {"identifier": "testResolveExtraTagsFromURI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveExtraTagsFromURI() {\n        Map<String, String> map = new HashMap<>();\n        MetricImporterUtils.resolveExtraTagsFromURI(\"a/b/\", \"a/b/tk1/tv1/tk2/tv2\"\n                , map);\n\n        Assert.assertEquals(2, map.size());\n    }", "signature": "void testResolveExtraTagsFromURI()", "full_signature": "@Test public void testResolveExtraTagsFromURI()", "class_method_signature": "MetricImporterUtilsTest.testResolveExtraTagsFromURI()", "testcase": true, "constructor": false, "invocations": ["resolveExtraTagsFromURI", "assertEquals", "size"]}, "focal_class": {"identifier": "MetricImporterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MetricImporterUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MetricImporterUtils()", "full_signature": "private  MetricImporterUtils()", "class_method_signature": "MetricImporterUtils.MetricImporterUtils()", "testcase": false, "constructor": true}, {"identifier": "validExtraTags", "parameters": "(Map<String, String> extraTags)", "modifiers": "public static", "return": "void", "signature": "void validExtraTags(Map<String, String> extraTags)", "full_signature": "public static void validExtraTags(Map<String, String> extraTags)", "class_method_signature": "MetricImporterUtils.validExtraTags(Map<String, String> extraTags)", "testcase": false, "constructor": false}, {"identifier": "mergeWithExtraTags", "parameters": "(Metric metric, Map<String, String> extraTags)", "modifiers": "public static", "return": "Metric", "signature": "Metric mergeWithExtraTags(Metric metric, Map<String, String> extraTags)", "full_signature": "public static Metric mergeWithExtraTags(Metric metric, Map<String, String> extraTags)", "class_method_signature": "MetricImporterUtils.mergeWithExtraTags(Metric metric, Map<String, String> extraTags)", "testcase": false, "constructor": false}, {"identifier": "resolveExtraTagsFromURI", "parameters": "(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "modifiers": "public static", "return": "void", "signature": "void resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "full_signature": "public static void resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "class_method_signature": "MetricImporterUtils.resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "resolveExtraTagsFromRequestHeaders", "parameters": "(ServerRequest request,\n                                                                         Map<String, String> map)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> resolveExtraTagsFromRequestHeaders(ServerRequest request,\n                                                                         Map<String, String> map)", "full_signature": "public static Map<String, String> resolveExtraTagsFromRequestHeaders(ServerRequest request,\n                                                                         Map<String, String> map)", "class_method_signature": "MetricImporterUtils.resolveExtraTagsFromRequestHeaders(ServerRequest request,\n                                                                         Map<String, String> map)", "testcase": false, "constructor": false}], "file": "gateway/metrics/pipeline/src/main/java/com/alipay/sofa/lookout/gateway/metrics/pipeline/common/MetricImporterUtils.java"}, "focal_method": {"identifier": "resolveExtraTagsFromURI", "parameters": "(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "modifiers": "public static", "return": "void", "body": "public static void resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map) {\n        Preconditions.checkNotNull(baseURIPath);\n        Preconditions.checkNotNull(requestURI);\n        // /*/metrics/{key1}/{value1}/{key2}/{value2}/...\n        String subPath = requestURI.substring(baseURIPath.length());\n        // \u53bb\u6389\u672b\u5c3e\u7684/\n        if (subPath.endsWith(\"/\")) {\n            subPath = subPath.substring(0, subPath.length() - 1);\n        }\n\n        String[] ss = StringUtils.split(subPath, '/');\n        if (ss.length % 2 != 0) {\n            throw new IllegalArgumentException(\"\u5b50\u8def\u5f84\u5fc5\u987b\u6709\u5076\u6570\u4e2a\u8282\");\n        }\n        for (int i = 0; i < ss.length; i += 2) {\n            map.put(ss[i], ss[i + 1]);\n        }\n    }", "signature": "void resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "full_signature": "public static void resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "class_method_signature": "MetricImporterUtils.resolveExtraTagsFromURI(String baseURIPath, String requestURI,\n                                               Map<String, String> map)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "substring", "length", "endsWith", "substring", "length", "split", "put"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}