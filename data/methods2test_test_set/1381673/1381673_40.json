{"test_class": {"identifier": "DOMParserUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MAIN_NODE = \"Main\";", "modifier": "private static final", "type": "String", "declarator": "MAIN_NODE = \"Main\"", "var_name": "MAIN_NODE"}, {"original_string": "private static final String MAIN_ATTRIBUTE_NAME = \"mainattribute\";", "modifier": "private static final", "type": "String", "declarator": "MAIN_ATTRIBUTE_NAME = \"mainattribute\"", "var_name": "MAIN_ATTRIBUTE_NAME"}, {"original_string": "private static final String ATTRIBUTE_VALUE = \"default\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIBUTE_VALUE = \"default\"", "var_name": "ATTRIBUTE_VALUE"}, {"original_string": "private static final String TEST_NODE = \"testnode\";", "modifier": "private static final", "type": "String", "declarator": "TEST_NODE = \"testnode\"", "var_name": "TEST_NODE"}, {"original_string": "private static final String TEST_NODE_CONTENT = \"testnodecontent\";", "modifier": "private static final", "type": "String", "declarator": "TEST_NODE_CONTENT = \"testnodecontent\"", "var_name": "TEST_NODE_CONTENT"}, {"original_string": "private static final String TEST_NODE_TOREMOVE_1 = \"toremove1\";", "modifier": "private static final", "type": "String", "declarator": "TEST_NODE_TOREMOVE_1 = \"toremove1\"", "var_name": "TEST_NODE_TOREMOVE_1"}, {"original_string": "private static final String TEST_NODE_TOREMOVE_2 = \"toremove2\";", "modifier": "private static final", "type": "String", "declarator": "TEST_NODE_TOREMOVE_2 = \"toremove2\"", "var_name": "TEST_NODE_TOREMOVE_2"}, {"original_string": "private static final String CHILD_NODE = \"child\";", "modifier": "private static final", "type": "String", "declarator": "CHILD_NODE = \"child\"", "var_name": "CHILD_NODE"}, {"original_string": "private static final String CHILD_ATTRIBUTE_NAME = \"childattribute\";", "modifier": "private static final", "type": "String", "declarator": "CHILD_ATTRIBUTE_NAME = \"childattribute\"", "var_name": "CHILD_ATTRIBUTE_NAME"}, {"original_string": "private static final String OTHER_NODE = \"othernode\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_NODE = \"othernode\"", "var_name": "OTHER_NODE"}, {"original_string": "private static final String OTHER_NODE_CONTENT_1 = \"othernodecontent1\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_NODE_CONTENT_1 = \"othernodecontent1\"", "var_name": "OTHER_NODE_CONTENT_1"}, {"original_string": "private static final String OTHER_NODE_CONTENT_2 = \"othernodecontent2\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_NODE_CONTENT_2 = \"othernodecontent2\"", "var_name": "OTHER_NODE_CONTENT_2"}, {"original_string": "private static final String NOT_EXISTING = \"NOT_EXISTING\";", "modifier": "private static final", "type": "String", "declarator": "NOT_EXISTING = \"NOT_EXISTING\"", "var_name": "NOT_EXISTING"}, {"original_string": "private static final String NESTING_NODE = \"nesting\";", "modifier": "private static final", "type": "String", "declarator": "NESTING_NODE = \"nesting\"", "var_name": "NESTING_NODE"}, {"original_string": "private static final String NESTED_NODE = \"nested\";", "modifier": "private static final", "type": "String", "declarator": "NESTED_NODE = \"nested\"", "var_name": "NESTED_NODE"}, {"original_string": "private static final String XML = \"<\" + MAIN_NODE + \" \" + MAIN_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_CONTENT + \"</\" + TEST_NODE + \">\" +\n            \"<\" + CHILD_NODE + \" \" + CHILD_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_TOREMOVE_1 + \"</\" + TEST_NODE + \">\" +\n            \"<\" + OTHER_NODE + \">\" + OTHER_NODE_CONTENT_1 + \"</\" + OTHER_NODE + \">\" +\n            \"<\" + NESTING_NODE + \">\" +\n            \"<\" + NESTED_NODE + \"/>\" +\n            \"</\" + NESTING_NODE + \">\" +\n            \"</\" + CHILD_NODE + \">\" +\n            \"<\" + CHILD_NODE + \" \" + CHILD_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_TOREMOVE_2 + \"</\" + TEST_NODE + \">\" +\n            \"<\" + OTHER_NODE + \">\" + OTHER_NODE_CONTENT_2 + \"</\" + OTHER_NODE + \">\" +\n            \"<\" + NESTING_NODE + \">\" +\n            \"<\" + NESTED_NODE + \"/>\" +\n            \"</\" + NESTING_NODE + \">\" +\n            \"</\" + CHILD_NODE + \">\" +\n            \"</\" + MAIN_NODE + \">\";", "modifier": "private static final", "type": "String", "declarator": "XML = \"<\" + MAIN_NODE + \" \" + MAIN_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_CONTENT + \"</\" + TEST_NODE + \">\" +\n            \"<\" + CHILD_NODE + \" \" + CHILD_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_TOREMOVE_1 + \"</\" + TEST_NODE + \">\" +\n            \"<\" + OTHER_NODE + \">\" + OTHER_NODE_CONTENT_1 + \"</\" + OTHER_NODE + \">\" +\n            \"<\" + NESTING_NODE + \">\" +\n            \"<\" + NESTED_NODE + \"/>\" +\n            \"</\" + NESTING_NODE + \">\" +\n            \"</\" + CHILD_NODE + \">\" +\n            \"<\" + CHILD_NODE + \" \" + CHILD_ATTRIBUTE_NAME + \" =\\\"\" + ATTRIBUTE_VALUE + \"\\\">\" +\n            \"<\" + TEST_NODE + \">\" + TEST_NODE_TOREMOVE_2 + \"</\" + TEST_NODE + \">\" +\n            \"<\" + OTHER_NODE + \">\" + OTHER_NODE_CONTENT_2 + \"</\" + OTHER_NODE + \">\" +\n            \"<\" + NESTING_NODE + \">\" +\n            \"<\" + NESTED_NODE + \"/>\" +\n            \"</\" + NESTING_NODE + \">\" +\n            \"</\" + CHILD_NODE + \">\" +\n            \"</\" + MAIN_NODE + \">\"", "var_name": "XML"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/util/DOMParserUtilTest.java"}, "test_case": {"identifier": "asStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void asStream() throws Exception {\n        Document document = DOMParserUtil.getDocument(XML);\n        final NodeList mainNodeList = document.getElementsByTagName(\"Main\");\n        commonCheckNodeStream(mainNodeList);\n        final NodeList childNodesList = mainNodeList.item(0).getChildNodes();\n        commonCheckNodeStream(childNodesList);\n        final NodeList innerNodesList = childNodesList.item(0).getChildNodes();\n        commonCheckNodeStream(innerNodesList);\n    }", "signature": "void asStream()", "full_signature": "@Test public void asStream()", "class_method_signature": "DOMParserUtilTest.asStream()", "testcase": true, "constructor": false, "invocations": ["getDocument", "getElementsByTagName", "commonCheckNodeStream", "getChildNodes", "item", "commonCheckNodeStream", "getChildNodes", "item", "commonCheckNodeStream"]}, "focal_class": {"identifier": "DOMParserUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DOMParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DOMParserUtil()", "full_signature": "private  DOMParserUtil()", "class_method_signature": "DOMParserUtil.DOMParserUtil()", "testcase": false, "constructor": true}, {"identifier": "cleanupNodes", "parameters": "(String fullXml, String containerNodeName, String nodeToRemoveName)", "modifiers": "public static", "return": "String", "signature": "String cleanupNodes(String fullXml, String containerNodeName, String nodeToRemoveName)", "full_signature": "public static String cleanupNodes(String fullXml, String containerNodeName, String nodeToRemoveName)", "class_method_signature": "DOMParserUtil.cleanupNodes(String fullXml, String containerNodeName, String nodeToRemoveName)", "testcase": false, "constructor": false}, {"identifier": "cleanupNodes", "parameters": "(Document document, String containerNodeName, String nodeToRemoveName)", "modifiers": "public static", "return": "void", "signature": "void cleanupNodes(Document document, String containerNodeName, String nodeToRemoveName)", "full_signature": "public static void cleanupNodes(Document document, String containerNodeName, String nodeToRemoveName)", "class_method_signature": "DOMParserUtil.cleanupNodes(Document document, String containerNodeName, String nodeToRemoveName)", "testcase": false, "constructor": false}, {"identifier": "replaceNodeText", "parameters": "(Document document, String containerNodeName, String nodeName, String toReplace, String replacement)", "modifiers": "public static", "return": "void", "signature": "void replaceNodeText(Document document, String containerNodeName, String nodeName, String toReplace, String replacement)", "full_signature": "public static void replaceNodeText(Document document, String containerNodeName, String nodeName, String toReplace, String replacement)", "class_method_signature": "DOMParserUtil.replaceNodeText(Document document, String containerNodeName, String nodeName, String toReplace, String replacement)", "testcase": false, "constructor": false}, {"identifier": "replaceNodeName", "parameters": "(Document document, String containerNodeName, String childNodeNameToReplace, String childNodeNameReplacement)", "modifiers": "public static", "return": "String", "signature": "String replaceNodeName(Document document, String containerNodeName, String childNodeNameToReplace, String childNodeNameReplacement)", "full_signature": "public static String replaceNodeName(Document document, String containerNodeName, String childNodeNameToReplace, String childNodeNameReplacement)", "class_method_signature": "DOMParserUtil.replaceNodeName(Document document, String containerNodeName, String childNodeNameToReplace, String childNodeNameReplacement)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(Node containerNode, String attributeName)", "modifiers": "public static", "return": "String", "signature": "String getAttributeValue(Node containerNode, String attributeName)", "full_signature": "public static String getAttributeValue(Node containerNode, String attributeName)", "class_method_signature": "DOMParserUtil.getAttributeValue(Node containerNode, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValues", "parameters": "(Document document, String containerNodeName, String attributeName)", "modifiers": "public static", "return": "Map<Node, String>", "signature": "Map<Node, String> getAttributeValues(Document document, String containerNodeName, String attributeName)", "full_signature": "public static Map<Node, String> getAttributeValues(Document document, String containerNodeName, String attributeName)", "class_method_signature": "DOMParserUtil.getAttributeValues(Document document, String containerNodeName, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValues", "parameters": "(Document document, String attributeName)", "modifiers": "public static", "return": "Map<Node, String>", "signature": "Map<Node, String> getAttributeValues(Document document, String attributeName)", "full_signature": "public static Map<Node, String> getAttributeValues(Document document, String attributeName)", "class_method_signature": "DOMParserUtil.getAttributeValues(Document document, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "setAttributeValue", "parameters": "(Document document, String containerNodeName, String attributeName, String attributeValue)", "modifiers": "public static", "return": "void", "signature": "void setAttributeValue(Document document, String containerNodeName, String attributeName, String attributeValue)", "full_signature": "public static void setAttributeValue(Document document, String containerNodeName, String attributeName, String attributeValue)", "class_method_signature": "DOMParserUtil.setAttributeValue(Document document, String containerNodeName, String attributeName, String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "createNodes", "parameters": "(Document document, String containerNodeName, String childNodeName, String nodeContent)", "modifiers": "public static", "return": "Map<Node, Node>", "signature": "Map<Node, Node> createNodes(Document document, String containerNodeName, String childNodeName, String nodeContent)", "full_signature": "public static Map<Node, Node> createNodes(Document document, String containerNodeName, String childNodeName, String nodeContent)", "class_method_signature": "DOMParserUtil.createNodes(Document document, String containerNodeName, String childNodeName, String nodeContent)", "testcase": false, "constructor": false}, {"identifier": "createNestedNodes", "parameters": "(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName, String nodeContent)", "modifiers": "public static", "return": "Map<Node, Node>", "signature": "Map<Node, Node> createNestedNodes(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName, String nodeContent)", "full_signature": "public static Map<Node, Node> createNestedNodes(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName, String nodeContent)", "class_method_signature": "DOMParserUtil.createNestedNodes(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName, String nodeContent)", "testcase": false, "constructor": false}, {"identifier": "createNodeAtPosition", "parameters": "(Node containerNode, String nodeToCreateName, String nodeContent, Integer position)", "modifiers": "public static", "return": "Node", "signature": "Node createNodeAtPosition(Node containerNode, String nodeToCreateName, String nodeContent, Integer position)", "full_signature": "public static Node createNodeAtPosition(Node containerNode, String nodeToCreateName, String nodeContent, Integer position)", "class_method_signature": "DOMParserUtil.createNodeAtPosition(Node containerNode, String nodeToCreateName, String nodeContent, Integer position)", "testcase": false, "constructor": false}, {"identifier": "getChildrenNodesMap", "parameters": "(String fullXml, String containerNodeName, String childNodeName)", "modifiers": "public static", "return": "Map<Node, List<Node>>", "signature": "Map<Node, List<Node>> getChildrenNodesMap(String fullXml, String containerNodeName, String childNodeName)", "full_signature": "public static Map<Node, List<Node>> getChildrenNodesMap(String fullXml, String containerNodeName, String childNodeName)", "class_method_signature": "DOMParserUtil.getChildrenNodesMap(String fullXml, String containerNodeName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getChildrenNodesMap", "parameters": "(Document document, String containerNodeName, String childNodeName)", "modifiers": "public static", "return": "Map<Node, List<Node>>", "signature": "Map<Node, List<Node>> getChildrenNodesMap(Document document, String containerNodeName, String childNodeName)", "full_signature": "public static Map<Node, List<Node>> getChildrenNodesMap(Document document, String containerNodeName, String childNodeName)", "class_method_signature": "DOMParserUtil.getChildrenNodesMap(Document document, String containerNodeName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getChildrenNodesMap", "parameters": "(Node node, String containerNodeName, String childNodeName)", "modifiers": "public static", "return": "Map<Node, List<Node>>", "signature": "Map<Node, List<Node>> getChildrenNodesMap(Node node, String containerNodeName, String childNodeName)", "full_signature": "public static Map<Node, List<Node>> getChildrenNodesMap(Node node, String containerNodeName, String childNodeName)", "class_method_signature": "DOMParserUtil.getChildrenNodesMap(Node node, String containerNodeName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getChildrenNodesList", "parameters": "(Node node, String childNodeName)", "modifiers": "public static", "return": "List<Node>", "signature": "List<Node> getChildrenNodesList(Node node, String childNodeName)", "full_signature": "public static List<Node> getChildrenNodesList(Node node, String childNodeName)", "class_method_signature": "DOMParserUtil.getChildrenNodesList(Node node, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getNestedChildrenNodesMap", "parameters": "(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName)", "modifiers": "public static", "return": "Map<Node, List<Node>>", "signature": "Map<Node, List<Node>> getNestedChildrenNodesMap(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName)", "full_signature": "public static Map<Node, List<Node>> getNestedChildrenNodesMap(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName)", "class_method_signature": "DOMParserUtil.getNestedChildrenNodesMap(Document document, String mainContainerNodeName, String containerNodeName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getNestedChildrenNodesList", "parameters": "(Document document, String grandParentNodeName, String parentNodeName, String childNodeName)", "modifiers": "public static", "return": "List<Node>", "signature": "List<Node> getNestedChildrenNodesList(Document document, String grandParentNodeName, String parentNodeName, String childNodeName)", "full_signature": "public static List<Node> getNestedChildrenNodesList(Document document, String grandParentNodeName, String parentNodeName, String childNodeName)", "class_method_signature": "DOMParserUtil.getNestedChildrenNodesList(Document document, String grandParentNodeName, String parentNodeName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getNestedChildrenNodesList", "parameters": "(Node node, String containerName, String childNodeName)", "modifiers": "public static", "return": "List<Node>", "signature": "List<Node> getNestedChildrenNodesList(Node node, String containerName, String childNodeName)", "full_signature": "public static List<Node> getNestedChildrenNodesList(Node node, String containerName, String childNodeName)", "class_method_signature": "DOMParserUtil.getNestedChildrenNodesList(Node node, String containerName, String childNodeName)", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "(String xml)", "modifiers": "public static", "return": "Document", "signature": "Document getDocument(String xml)", "full_signature": "public static Document getDocument(String xml)", "class_method_signature": "DOMParserUtil.getDocument(String xml)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(Document toRead)", "modifiers": "public static", "return": "String", "signature": "String getString(Document toRead)", "full_signature": "public static String getString(Document toRead)", "class_method_signature": "DOMParserUtil.getString(Document toRead)", "testcase": false, "constructor": false}, {"identifier": "populateAttributeValuesMap", "parameters": "(Node node, String attributeName, Map<Node, String> toPopulate)", "modifiers": "protected static", "return": "void", "signature": "void populateAttributeValuesMap(Node node, String attributeName, Map<Node, String> toPopulate)", "full_signature": "protected static void populateAttributeValuesMap(Node node, String attributeName, Map<Node, String> toPopulate)", "class_method_signature": "DOMParserUtil.populateAttributeValuesMap(Node node, String attributeName, Map<Node, String> toPopulate)", "testcase": false, "constructor": false}, {"identifier": "asStream", "parameters": "(NodeList nodeList)", "modifiers": "protected static", "return": "Stream<Node>", "signature": "Stream<Node> asStream(NodeList nodeList)", "full_signature": "protected static Stream<Node> asStream(NodeList nodeList)", "class_method_signature": "DOMParserUtil.asStream(NodeList nodeList)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/util/DOMParserUtil.java"}, "focal_method": {"identifier": "asStream", "parameters": "(NodeList nodeList)", "modifiers": "protected static", "return": "Stream<Node>", "body": "protected static Stream<Node> asStream(NodeList nodeList) {\n        if (nodeList == null) {\n            return new ArrayList<Node>().stream();\n        } else {\n            AtomicInteger n = new AtomicInteger(0);\n            return Stream.generate(() -> nodeList.item(n.getAndIncrement())).limit(nodeList.getLength());\n        }\n    }", "signature": "Stream<Node> asStream(NodeList nodeList)", "full_signature": "protected static Stream<Node> asStream(NodeList nodeList)", "class_method_signature": "DOMParserUtil.asStream(NodeList nodeList)", "testcase": false, "constructor": false, "invocations": ["stream", "limit", "generate", "item", "getAndIncrement", "getLength"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}