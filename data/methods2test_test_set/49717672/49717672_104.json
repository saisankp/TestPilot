{"test_class": {"identifier": "NSEmulatorReceiverTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/NSEmulatorReceiverTest.java"}, "test_case": {"identifier": "onReceiveTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void onReceiveTest() {\n        // TODO\n    }", "signature": "void onReceiveTest()", "full_signature": "@Test public void onReceiveTest()", "class_method_signature": "NSEmulatorReceiverTest.onReceiveTest()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "NSEmulatorReceiver", "superclass": "extends BroadcastReceiver", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"jamorham nsemulator\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"jamorham nsemulator\"", "var_name": "TAG"}, {"original_string": "private static final boolean debug = false;", "modifier": "private static final", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private static final boolean d = false;", "modifier": "private static final", "type": "boolean", "declarator": "d = false", "var_name": "d"}, {"original_string": "private static SharedPreferences prefs;", "modifier": "private static", "type": "SharedPreferences", "declarator": "prefs", "var_name": "prefs"}, {"original_string": "private static final Object lock = new Object();", "modifier": "private static final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "onReceive", "parameters": "(final Context context, final Intent intent)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(final Context context, final Intent intent)", "full_signature": "@Override public void onReceive(final Context context, final Intent intent)", "class_method_signature": "NSEmulatorReceiver.onReceive(final Context context, final Intent intent)", "testcase": false, "constructor": false}, {"identifier": "bgReadingInsertFromData", "parameters": "(long timestamp, double sgv, double slope, boolean do_notification)", "modifiers": "public static", "return": "BgReading", "signature": "BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "full_signature": "public static BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "class_method_signature": "NSEmulatorReceiver.bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/NSEmulatorReceiver.java"}, "focal_method": {"identifier": "onReceive", "parameters": "(final Context context, final Intent intent)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onReceive(final Context context, final Intent intent) {\n        new Thread() {\n            @Override\n            public void run() {\n                PowerManager.WakeLock wl = JoH.getWakeLock(\"nsemulator-receiver\", 60000);\n                synchronized (lock) {\n                    try {\n\n                        Log.d(TAG, \"NSEmulator onReceiver: \" + intent.getAction());\n                        JoH.benchmark(null);\n                        // check source\n                        if (prefs == null)\n                            prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n                        final Bundle bundle = intent.getExtras();\n                        //  BundleScrubber.scrub(bundle);\n                        final String action = intent.getAction();\n\n\n                        if ((bundle != null) && (debug)) {\n                            UserError.Log.d(TAG, \"Action: \" + action);\n                            JoH.dumpBundle(bundle, TAG);\n                        }\n\n                        if (action == null) return;\n\n                        switch (action) {\n                            case Intents.XDRIP_PLUS_NS_EMULATOR:\n\n                                // in future this could have its own data source perhaps instead of follower\n                                if (!Home.get_follower() && DexCollectionType.getDexCollectionType() != DexCollectionType.NSEmulator &&\n                                        !Pref.getBooleanDefaultFalse(\"external_blukon_algorithm\")) { //???DexCollectionType\n                                    Log.e(TAG, \"Received NSEmulator data but we are not a follower or emulator receiver\");\n                                    return;\n                                }\n\n                                if (!Home.get_follower()) {\n                                    // must be NSEmulator here ???? Not true anymore.\n                                    if (!Sensor.isActive()) {\n                                        // warn about problems running without a sensor record\n                                        Home.toaststaticnext(\"Please use: Start Sensor from the menu for best results!\");\n                                    }\n                                }\n\n                                if (bundle == null) break;\n\n                                Log.d(TAG, \"Receiving NSEmulator broadcast\");\n\n                                final String collection = bundle.getString(\"collection\");\n                                if (collection == null) return;\n\n                                switch (collection) {\n\n                                    case \"entries\":\n                                        final String data = bundle.getString(\"data\");\n\n                                        if ((data != null) && (data.length() > 0)) {\n                                            try {\n                                                final JSONArray json_array = new JSONArray(data);\n                                                // if this array is >1 in length then it is from OOP otherwise something like AAPS\n                                                if (json_array.length() > 1) {\n                                                    final JSONObject json_object = json_array.getJSONObject(0);\n                                                    int process_id = -1;\n                                                    try {\n                                                        process_id = json_object.getInt(\"ROW_ID\");\n                                                    }   catch (JSONException e) {\n                                                        // Intentionly ignoring ecxeption.\n                                                    }\n                                                    if(process_id == -1 || process_id == android.os.Process.myPid()) {\n                                                        LibreOOPAlgorithm.HandleData(json_array.getString(1));    \n                                                    } else {\n                                                        Log.d(TAG, \"Ignoring OOP result since process id is wrong \" + process_id);\n                                                    }\n                                                    \n                                                } else {\n                                                    final JSONObject json_object = json_array.getJSONObject(0);\n                                                    final String type = json_object.getString(\"type\");\n                                                    switch (type) {\n                                                        case \"sgv\":\n                                                            double slope = 0;\n                                                            try {\n                                                                slope = BgReading.slopefromName(json_object.getString(\"direction\"));\n                                                            } catch (JSONException e) {\n                                                                //\n                                                            }\n                                                            bgReadingInsertFromData(json_object.getLong(\"date\"),\n                                                                    json_object.getDouble(\"sgv\"), slope, true);\n\n                                                            break;\n                                                        default:\n                                                            Log.e(TAG, \"Unknown entries type: \" + type);\n                                                    }\n                                                }\n\n\n                                            } catch (JSONException e) {\n                                                Log.e(TAG, \"Got JSON exception: \" + e);\n                                            }\n\n                                        }\n                                        break;\n\n                                    case \"devicestatus\":\n                                        final String ddata = bundle.getString(\"data\");\n\n                                        if ((ddata != null) && (ddata.length() > 0)) {\n                                            try {\n                                                Log.d(TAG, \"Got device status data: \" + ddata);\n                                                final JSONArray json_array = new JSONArray(ddata);\n                                                final JSONObject json_object = json_array.getJSONObject(0);\n                                                final JSONObject json_pump_object = json_object.getJSONObject(\"pump\");\n\n                                                try {\n                                                    final double reservoir = json_pump_object.getDouble(\"reservoir\");\n                                                    PumpStatus.setReservoir(reservoir);\n\n                                                } catch (JSONException e) {\n                                                    Log.d(TAG, \"Got exception when processing reservoir: \" + e);\n                                                }\n\n                                                try {\n                                                    final JSONObject battery_object = json_pump_object.getJSONObject(\"battery\");\n                                                    final double battery_percent = battery_object.getDouble(\"percent\");\n                                                    PumpStatus.setBattery(battery_percent);\n\n                                                } catch (JSONException e) {\n                                                    Log.d(TAG, \"Got exception when processing battery: \" + e);\n                                                }\n\n                                                try {\n                                                    final JSONObject iob_object = json_pump_object.getJSONObject(\"iob\");\n                                                    final double bolus_iob = iob_object.getDouble(\"bolusiob\");\n                                                    PumpStatus.setBolusIoB(bolus_iob);\n\n                                                } catch (JSONException e) {\n                                                    Log.d(TAG, \"Got exception when processing iob: \" + e);\n                                                }\n\n                                            } catch (JSONException e) {\n                                                Log.e(TAG, \"Got JSON exception: \" + e);\n                                            } catch (Exception e) {\n                                                Log.e(TAG, \"Got processing exception: \" + e);\n                                            }\n                                            PumpStatus.syncUpdate();\n                                        }\n                                        break;\n\n                                    default:\n                                        Log.d(TAG, \"Unprocessed collection: \" + collection);\n\n                                }\n\n                                break;\n\n                            default:\n                                Log.e(TAG, \"Unknown action! \" + action);\n                                break;\n                        }\n                    } finally {\n                        JoH.benchmark(\"NSEmulator process\");\n                        JoH.releaseWakeLock(wl);\n                    }\n                } // lock\n            }\n        }.start();\n    }", "signature": "void onReceive(final Context context, final Intent intent)", "full_signature": "@Override public void onReceive(final Context context, final Intent intent)", "class_method_signature": "NSEmulatorReceiver.onReceive(final Context context, final Intent intent)", "testcase": false, "constructor": false, "invocations": ["start", "getWakeLock", "d", "getAction", "benchmark", "getDefaultSharedPreferences", "getExtras", "getAction", "d", "dumpBundle", "get_follower", "getDexCollectionType", "getBooleanDefaultFalse", "e", "get_follower", "isActive", "toaststaticnext", "d", "getString", "getString", "length", "length", "getJSONObject", "getInt", "myPid", "HandleData", "getString", "d", "getJSONObject", "getString", "slopefromName", "getString", "bgReadingInsertFromData", "getLong", "getDouble", "e", "e", "getString", "length", "d", "getJSONObject", "getJSONObject", "getDouble", "setReservoir", "d", "getJSONObject", "getDouble", "setBattery", "d", "getJSONObject", "getDouble", "setBolusIoB", "d", "e", "e", "syncUpdate", "d", "e", "benchmark", "releaseWakeLock"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}