{"test_class": {"identifier": "CircuitBreakerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CircuitBreakerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CircuitBreakerTest.class)", "var_name": "LOGGER"}, {"original_string": "private CircuitBreaker circuitBreaker;", "modifier": "private", "type": "CircuitBreaker", "declarator": "circuitBreaker", "var_name": "circuitBreaker"}], "file": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/infra/ws/CircuitBreakerTest.java"}, "test_case": {"identifier": "testClosedAfter2FailuresAndWait", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClosedAfter2FailuresAndWait() {\n        LOGGER.info(\"Test: expect status is CLOSED after two failures and waiting longer than the initial duration\");\n        // Trigger the circuit breaker to open\n        this.markTwoFailures();\n        // Wait until the circuit breaker is closed\n        this.wait(35);\n\n        assertThat(this.circuitBreaker.isClosed()).withFailMessage(\"Status should be CLOSED after waiting for 35 ms\")\n                .isTrue();\n    }", "signature": "void testClosedAfter2FailuresAndWait()", "full_signature": "@Test public void testClosedAfter2FailuresAndWait()", "class_method_signature": "CircuitBreakerTest.testClosedAfter2FailuresAndWait()", "testcase": true, "constructor": false, "invocations": ["info", "markTwoFailures", "wait", "isTrue", "withFailMessage", "assertThat", "isClosed"]}, "focal_class": {"identifier": "CircuitBreaker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CircuitBreaker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CircuitBreaker.class)", "var_name": "LOGGER"}, {"original_string": "private Status status = Status.CLOSED;", "modifier": "private", "type": "Status", "declarator": "status = Status.CLOSED", "var_name": "status"}, {"original_string": "private final int threshold;", "modifier": "private final", "type": "int", "declarator": "threshold", "var_name": "threshold"}, {"original_string": "private final int initialDuration;", "modifier": "private final", "type": "int", "declarator": "initialDuration", "var_name": "initialDuration"}, {"original_string": "private final int maximumDuration;", "modifier": "private final", "type": "int", "declarator": "maximumDuration", "var_name": "maximumDuration"}, {"original_string": "private final int multiplier;", "modifier": "private final", "type": "int", "declarator": "multiplier", "var_name": "multiplier"}, {"original_string": "private int currentDuration;", "modifier": "private", "type": "int", "declarator": "currentDuration", "var_name": "currentDuration"}, {"original_string": "private int countDown;", "modifier": "private", "type": "int", "declarator": "countDown", "var_name": "countDown"}, {"original_string": "private Instant closeCircuitInstant;", "modifier": "private", "type": "Instant", "declarator": "closeCircuitInstant", "var_name": "closeCircuitInstant"}, {"original_string": "private final Lock lock;", "modifier": "private final", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "methods": [{"identifier": "CircuitBreaker", "parameters": "(final Builder builder)", "modifiers": "private", "return": "", "signature": " CircuitBreaker(final Builder builder)", "full_signature": "private  CircuitBreaker(final Builder builder)", "class_method_signature": "CircuitBreaker.CircuitBreaker(final Builder builder)", "testcase": false, "constructor": true}, {"identifier": "openCircuit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void openCircuit()", "full_signature": "public void openCircuit()", "class_method_signature": "CircuitBreaker.openCircuit()", "testcase": false, "constructor": false}, {"identifier": "closeCircuit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeCircuit()", "full_signature": "public void closeCircuit()", "class_method_signature": "CircuitBreaker.closeCircuit()", "testcase": false, "constructor": false}, {"identifier": "halfOpenCircuit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void halfOpenCircuit()", "full_signature": "private void halfOpenCircuit()", "class_method_signature": "CircuitBreaker.halfOpenCircuit()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "CircuitBreaker.isClosed()", "testcase": false, "constructor": false}, {"identifier": "updateAndGetStatus", "parameters": "()", "modifiers": "private", "return": "Status", "signature": "Status updateAndGetStatus()", "full_signature": "private Status updateAndGetStatus()", "class_method_signature": "CircuitBreaker.updateAndGetStatus()", "testcase": false, "constructor": false}, {"identifier": "markSuccess", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markSuccess()", "full_signature": "public void markSuccess()", "class_method_signature": "CircuitBreaker.markSuccess()", "testcase": false, "constructor": false}, {"identifier": "markFailure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void markFailure()", "full_signature": "public void markFailure()", "class_method_signature": "CircuitBreaker.markFailure()", "testcase": false, "constructor": false}, {"identifier": "processFailureWhenClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processFailureWhenClosed()", "full_signature": "private void processFailureWhenClosed()", "class_method_signature": "CircuitBreaker.processFailureWhenClosed()", "testcase": false, "constructor": false}], "file": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/infra/ws/CircuitBreaker.java"}, "focal_method": {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isClosed() {\n        final Status currentStatus = this.updateAndGetStatus();\n\n        return currentStatus != Status.OPEN;\n    }", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "CircuitBreaker.isClosed()", "testcase": false, "constructor": false, "invocations": ["updateAndGetStatus"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}