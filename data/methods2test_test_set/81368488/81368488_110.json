{"test_class": {"identifier": "I18NTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILESEPARATOR = File.separator;", "modifier": "private static final", "type": "String", "declarator": "FILESEPARATOR = File.separator", "var_name": "FILESEPARATOR"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/multilinguism/I18NTest.java"}, "test_case": {"identifier": "shouldLoadTranslationsFromLocalFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldLoadTranslationsFromLocalFile() {\n        final String file = System.getProperty(\"user.dir\") +\n            FILESEPARATOR + \"src\" +\n            FILESEPARATOR + \"test\" +\n            FILESEPARATOR + \"resources\" +\n            FILESEPARATOR + \"data\" +\n            FILESEPARATOR + \"multilinguism\" +\n            FILESEPARATOR + \"translation.csv\";\n        final Map<I18N.Entry, String> translations = I18N.loadFromFile(file);\n        assert translations.size() == 6;\n    }", "signature": "void shouldLoadTranslationsFromLocalFile()", "full_signature": "@Test void shouldLoadTranslationsFromLocalFile()", "class_method_signature": "I18NTest.shouldLoadTranslationsFromLocalFile()", "testcase": true, "constructor": false, "invocations": ["getProperty", "loadFromFile", "size"]}, "focal_class": {"identifier": "I18N", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Entry, String> translations;", "modifier": "private final", "type": "Map<Entry, String>", "declarator": "translations", "var_name": "translations"}], "methods": [{"identifier": "I18N", "parameters": "(String resourcePath)", "modifiers": "public", "return": "", "signature": " I18N(String resourcePath)", "full_signature": "public  I18N(String resourcePath)", "class_method_signature": "I18N.I18N(String resourcePath)", "testcase": false, "constructor": true}, {"identifier": "loadFromFile", "parameters": "(String resourceLocation)", "modifiers": "protected static", "return": "Map<Entry, String>", "signature": "Map<Entry, String> loadFromFile(String resourceLocation)", "full_signature": "protected static Map<Entry, String> loadFromFile(String resourceLocation)", "class_method_signature": "I18N.loadFromFile(String resourceLocation)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(String key, String language)", "modifiers": "public", "return": "String", "signature": "String translate(String key, String language)", "full_signature": "public String translate(String key, String language)", "class_method_signature": "I18N.translate(String key, String language)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/multilinguism/I18N.java"}, "focal_method": {"identifier": "loadFromFile", "parameters": "(String resourceLocation)", "modifiers": "protected static", "return": "Map<Entry, String>", "body": "protected static Map<Entry, String> loadFromFile(String resourceLocation) {\n        final ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n\n        final InputStream is;\n\n        if (new File(resourceLocation).isFile()) {\n            try {\n                is = Files.newInputStream(new File(resourceLocation).toPath());\n            } catch (IOException ie) {\n                log.error(\"Exception while reading file {}\", resourceLocation, ie);\n                throw new RuntimeException(ie);\n            }\n        } else {\n            is = systemClassLoader.getResourceAsStream(resourceLocation);\n        }\n\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n\n            Map<Entry, String> translations = new HashMap<>(1000);\n\n            String line;\n\n            boolean firstline = true;\n\n            String[] languages = null, data;\n\n            while ((line = br.readLine()) != null) {\n                if (firstline) {\n                    languages = line.split(\",\");\n                    firstline = false;\n                } else {\n                    data = line.split(\",\");\n                    String key = data[0].strip();\n                    for (int i = 1; i < data.length; i++) {\n                        translations.put(new Entry(key, languages[i].strip()), data[i].strip());\n                    }\n                }\n            }\n            return translations;\n\n        } catch (Exception e) {\n            log.error(\"Exception while loading resource {}\", resourceLocation, e);\n            throw new RuntimeException(e);\n        }\n    }", "signature": "Map<Entry, String> loadFromFile(String resourceLocation)", "full_signature": "protected static Map<Entry, String> loadFromFile(String resourceLocation)", "class_method_signature": "I18N.loadFromFile(String resourceLocation)", "testcase": false, "constructor": false, "invocations": ["getSystemClassLoader", "isFile", "newInputStream", "toPath", "error", "getResourceAsStream", "readLine", "split", "split", "strip", "put", "strip", "strip", "error"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}