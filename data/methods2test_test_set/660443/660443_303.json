{"test_class": {"identifier": "DeAromatizationToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/tools/DeAromatizationToolTest.java"}, "test_case": {"identifier": "testDeAromatize_IRing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeAromatize_IRing() {\n        Ring butadiene = new Ring(4, \"C\");\n        boolean success = DeAromatizationTool.deAromatize(butadiene);\n        Assert.assertFalse(success);\n    }", "signature": "void testDeAromatize_IRing()", "full_signature": "@Test public void testDeAromatize_IRing()", "class_method_signature": "DeAromatizationToolTest.testDeAromatize_IRing()", "testcase": true, "constructor": false, "invocations": ["deAromatize", "assertFalse"]}, "focal_class": {"identifier": "DeAromatizationTool", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "deAromatize", "parameters": "(IRing ring)", "modifiers": "public static", "return": "boolean", "signature": "boolean deAromatize(IRing ring)", "full_signature": "public static boolean deAromatize(IRing ring)", "class_method_signature": "DeAromatizationTool.deAromatize(IRing ring)", "testcase": false, "constructor": false}, {"identifier": "deAromatizePyridine", "parameters": "(IRing ring)", "modifiers": "private static", "return": "boolean", "signature": "boolean deAromatizePyridine(IRing ring)", "full_signature": "private static boolean deAromatizePyridine(IRing ring)", "class_method_signature": "DeAromatizationTool.deAromatizePyridine(IRing ring)", "testcase": false, "constructor": false}, {"identifier": "deAromatizePyrolle", "parameters": "(IRing ring)", "modifiers": "private static", "return": "boolean", "signature": "boolean deAromatizePyrolle(IRing ring)", "full_signature": "private static boolean deAromatizePyrolle(IRing ring)", "class_method_signature": "DeAromatizationTool.deAromatizePyrolle(IRing ring)", "testcase": false, "constructor": false}, {"identifier": "getNextBond", "parameters": "(IAtom atom, IBond bond, IRing ring)", "modifiers": "private static", "return": "IBond", "signature": "IBond getNextBond(IAtom atom, IBond bond, IRing ring)", "full_signature": "private static IBond getNextBond(IAtom atom, IBond bond, IRing ring)", "class_method_signature": "DeAromatizationTool.getNextBond(IAtom atom, IBond bond, IRing ring)", "testcase": false, "constructor": false}, {"identifier": "deAromatizeBenzene", "parameters": "(IRing ring)", "modifiers": "private static", "return": "boolean", "signature": "boolean deAromatizeBenzene(IRing ring)", "full_signature": "private static boolean deAromatizeBenzene(IRing ring)", "class_method_signature": "DeAromatizationTool.deAromatizeBenzene(IRing ring)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize", "parameters": "(IAtomContainer molecule)", "modifiers": "public static", "return": "void", "signature": "void Dearomatize(IAtomContainer molecule)", "full_signature": "public static void Dearomatize(IAtomContainer molecule)", "class_method_signature": "DeAromatizationTool.Dearomatize(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize666Rings", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize666Rings(IRingSet rings)", "full_signature": "public static boolean Dearomatize666Rings(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize666Rings(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize566Rings", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize566Rings(IRingSet rings)", "full_signature": "public static boolean Dearomatize566Rings(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize566Rings(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize66Rings", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize66Rings(IRingSet rings)", "full_signature": "public static boolean Dearomatize66Rings(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize66Rings(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize56Rings", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize56Rings(IRingSet rings)", "full_signature": "public static boolean Dearomatize56Rings(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize56Rings(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize6Ring", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize6Ring(IRingSet rings)", "full_signature": "public static boolean Dearomatize6Ring(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize6Ring(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "Dearomatize5Ring", "parameters": "(IRingSet rings)", "modifiers": "public static", "return": "boolean", "signature": "boolean Dearomatize5Ring(IRingSet rings)", "full_signature": "public static boolean Dearomatize5Ring(IRingSet rings)", "class_method_signature": "DeAromatizationTool.Dearomatize5Ring(IRingSet rings)", "testcase": false, "constructor": false}, {"identifier": "isAllAtomsAromatic", "parameters": "(IAtomContainer ring)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAllAtomsAromatic(IAtomContainer ring)", "full_signature": "private static boolean isAllAtomsAromatic(IAtomContainer ring)", "class_method_signature": "DeAromatizationTool.isAllAtomsAromatic(IAtomContainer ring)", "testcase": false, "constructor": false}, {"identifier": "isMiddleRing", "parameters": "(IAtomContainer ring, IAtomContainer ringA, IAtomContainer ringB)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMiddleRing(IAtomContainer ring, IAtomContainer ringA, IAtomContainer ringB)", "full_signature": "private static boolean isMiddleRing(IAtomContainer ring, IAtomContainer ringA, IAtomContainer ringB)", "class_method_signature": "DeAromatizationTool.isMiddleRing(IAtomContainer ring, IAtomContainer ringA, IAtomContainer ringB)", "testcase": false, "constructor": false}, {"identifier": "RemoveAromaticFlag", "parameters": "(IAtomContainer ring)", "modifiers": "private static", "return": "void", "signature": "void RemoveAromaticFlag(IAtomContainer ring)", "full_signature": "private static void RemoveAromaticFlag(IAtomContainer ring)", "class_method_signature": "DeAromatizationTool.RemoveAromaticFlag(IAtomContainer ring)", "testcase": false, "constructor": false}, {"identifier": "InvalidateBonds", "parameters": "(IAtomContainer ring)", "modifiers": "private static", "return": "void", "signature": "void InvalidateBonds(IAtomContainer ring)", "full_signature": "private static void InvalidateBonds(IAtomContainer ring)", "class_method_signature": "DeAromatizationTool.InvalidateBonds(IAtomContainer ring)", "testcase": false, "constructor": false}, {"identifier": "DearomatizeRing", "parameters": "(IAtomContainer ring, IAtom startAtom, IBond startBond)", "modifiers": "private static", "return": "void", "signature": "void DearomatizeRing(IAtomContainer ring, IAtom startAtom, IBond startBond)", "full_signature": "private static void DearomatizeRing(IAtomContainer ring, IAtom startAtom, IBond startBond)", "class_method_signature": "DeAromatizationTool.DearomatizeRing(IAtomContainer ring, IAtom startAtom, IBond startBond)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/tools/DeAromatizationTool.java"}, "focal_method": {"identifier": "deAromatize", "parameters": "(IRing ring)", "modifiers": "public static", "return": "boolean", "body": "public static boolean deAromatize(IRing ring) {\n        boolean allaromatic = true;\n        for (int i = 0; i < ring.getBondCount(); i++) {\n            if (!ring.getBond(i).getFlag(CDKConstants.ISAROMATIC)) allaromatic = false;\n        }\n        if (!allaromatic) return false;\n        for (int i = 0; i < ring.getBondCount(); i++) {\n            if (ring.getBond(i).getFlag(CDKConstants.ISAROMATIC)) ring.getBond(i).setOrder(IBond.Order.SINGLE);\n        }\n        boolean result = false;\n        IMolecularFormula formula = MolecularFormulaManipulator.getMolecularFormula(ring);\n        //\t\tMap elementCounts = new MFAnalyser(ring).getFormulaHashtable();\n        if (ring.getRingSize() == 6) {\n            if (MolecularFormulaManipulator.getElementCount(formula, new Element(\"C\")) == 6) {\n                result = DeAromatizationTool.deAromatizeBenzene(ring);\n            } else if (MolecularFormulaManipulator.getElementCount(formula, new Element(\"C\")) == 5\n                    && MolecularFormulaManipulator.getElementCount(formula, new Element(\"N\")) == 1) {\n                result = DeAromatizationTool.deAromatizePyridine(ring);\n            }\n        }\n        if (ring.getRingSize() == 5) {\n            if (MolecularFormulaManipulator.getElementCount(formula, new Element(\"C\")) == 4\n                    && MolecularFormulaManipulator.getElementCount(formula, new Element(\"N\")) == 1) {\n                result = deAromatizePyrolle(ring);\n            }\n        }\n        return result;\n    }", "signature": "boolean deAromatize(IRing ring)", "full_signature": "public static boolean deAromatize(IRing ring)", "class_method_signature": "DeAromatizationTool.deAromatize(IRing ring)", "testcase": false, "constructor": false, "invocations": ["getBondCount", "getFlag", "getBond", "getBondCount", "getFlag", "getBond", "setOrder", "getBond", "getMolecularFormula", "getRingSize", "getElementCount", "deAromatizeBenzene", "getElementCount", "getElementCount", "deAromatizePyridine", "getRingSize", "getElementCount", "getElementCount", "deAromatizePyrolle"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}