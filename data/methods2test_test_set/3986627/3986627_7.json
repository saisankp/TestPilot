{"test_class": {"identifier": "OBRRepositoryConnectorImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OBRRepositoryConnectorImpl fixture;", "modifier": "private", "type": "OBRRepositoryConnectorImpl", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.updatecenter/src/test/java/org/jabylon/updatecenter/repository/impl/OBRRepositoryConnectorImplTest.java"}, "test_case": {"identifier": "testGetHighestBundleVersionsMixed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetHighestBundleVersionsMixed() {\n\t\tList<String> versions = fixture.getHighestBundleVersions(\"a.b_1.0.0.jar\",\"a.b_1.0.1.jar\",\"b_2.0.0.jar\");\n\t\tassertEquals(2, versions.size());\n\t\tassertEquals(\"a.b_1.0.1.jar\", versions.get(0));\n\t\tassertEquals(\"b_2.0.0.jar\", versions.get(1));\n\t}", "signature": "void testGetHighestBundleVersionsMixed()", "full_signature": "@Test public void testGetHighestBundleVersionsMixed()", "class_method_signature": "OBRRepositoryConnectorImplTest.testGetHighestBundleVersionsMixed()", "testcase": true, "constructor": false, "invocations": ["getHighestBundleVersions", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "OBRRepositoryConnectorImpl", "superclass": "", "interfaces": "implements OBRRepositoryService", "fields": [{"original_string": "private static final String DEFAULT_REPOSITORY = \"http://jabylon.org/maven/repository.xml\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_REPOSITORY = \"http://jabylon.org/maven/repository.xml\"", "var_name": "DEFAULT_REPOSITORY"}, {"original_string": "@Reference\n    RepositoryAdmin admin;", "modifier": "@Reference", "type": "RepositoryAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(OBRRepositoryConnectorImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OBRRepositoryConnectorImpl.class)", "var_name": "logger"}, {"original_string": "private static final Pattern BUNDLE_PATTERN = Pattern.compile(\"(.*?)_(.*?)\\\\.jar\");", "modifier": "private static final", "type": "Pattern", "declarator": "BUNDLE_PATTERN = Pattern.compile(\"(.*?)_(.*?)\\\\.jar\")", "var_name": "BUNDLE_PATTERN"}, {"original_string": "private static final Comparator<Version> COMPARATOR = new OSGiVersionComparator();", "modifier": "private static final", "type": "Comparator<Version>", "declarator": "COMPARATOR = new OSGiVersionComparator()", "var_name": "COMPARATOR"}, {"original_string": "private File pluginDir;", "modifier": "private", "type": "File", "declarator": "pluginDir", "var_name": "pluginDir"}, {"original_string": "private BundleContext context;", "modifier": "private", "type": "BundleContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "activate", "parameters": "()", "modifiers": "@Activate public", "return": "void", "signature": "void activate()", "full_signature": "@Activate public void activate()", "class_method_signature": "OBRRepositoryConnectorImpl.activate()", "testcase": false, "constructor": false}, {"identifier": "listInstalledBundles", "parameters": "()", "modifiers": "@Override public", "return": "List<Bundle>", "signature": "List<Bundle> listInstalledBundles()", "full_signature": "@Override public List<Bundle> listInstalledBundles()", "class_method_signature": "OBRRepositoryConnectorImpl.listInstalledBundles()", "testcase": false, "constructor": false}, {"identifier": "deployAddons", "parameters": "(File pluginDir)", "modifiers": "private", "return": "void", "signature": "void deployAddons(File pluginDir)", "full_signature": "private void deployAddons(File pluginDir)", "class_method_signature": "OBRRepositoryConnectorImpl.deployAddons(File pluginDir)", "testcase": false, "constructor": false}, {"identifier": "getHighestBundleVersions", "parameters": "(String... filenames)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getHighestBundleVersions(String... filenames)", "full_signature": "protected List<String> getHighestBundleVersions(String... filenames)", "class_method_signature": "OBRRepositoryConnectorImpl.getHighestBundleVersions(String... filenames)", "testcase": false, "constructor": false}, {"identifier": "getHighestVersion", "parameters": "(List<String> versions)", "modifiers": "protected", "return": "String", "signature": "String getHighestVersion(List<String> versions)", "full_signature": "protected String getHighestVersion(List<String> versions)", "class_method_signature": "OBRRepositoryConnectorImpl.getHighestVersion(List<String> versions)", "testcase": false, "constructor": false}, {"identifier": "getAvailableResources", "parameters": "(ResourceFilter filter)", "modifiers": "@Override public", "return": "List<Resource>", "signature": "List<Resource> getAvailableResources(ResourceFilter filter)", "full_signature": "@Override public List<Resource> getAvailableResources(ResourceFilter filter)", "class_method_signature": "OBRRepositoryConnectorImpl.getAvailableResources(ResourceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "removeOldVersions", "parameters": "(List<Resource> resources)", "modifiers": "private", "return": "List<Resource>", "signature": "List<Resource> removeOldVersions(List<Resource> resources)", "full_signature": "private List<Resource> removeOldVersions(List<Resource> resources)", "class_method_signature": "OBRRepositoryConnectorImpl.removeOldVersions(List<Resource> resources)", "testcase": false, "constructor": false}, {"identifier": "buildMap", "parameters": "(List<Bundle> bundles)", "modifiers": "private", "return": "Multimap<String, Bundle>", "signature": "Multimap<String, Bundle> buildMap(List<Bundle> bundles)", "full_signature": "private Multimap<String, Bundle> buildMap(List<Bundle> bundles)", "class_method_signature": "OBRRepositoryConnectorImpl.buildMap(List<Bundle> bundles)", "testcase": false, "constructor": false}, {"identifier": "getRepository", "parameters": "()", "modifiers": "private", "return": "Repository", "signature": "Repository getRepository()", "full_signature": "private Repository getRepository()", "class_method_signature": "OBRRepositoryConnectorImpl.getRepository()", "testcase": false, "constructor": false}, {"identifier": "applies", "parameters": "(ResourceFilter filter, Multimap<String, Bundle> bundles, Resource resource)", "modifiers": "private", "return": "boolean", "signature": "boolean applies(ResourceFilter filter, Multimap<String, Bundle> bundles, Resource resource)", "full_signature": "private boolean applies(ResourceFilter filter, Multimap<String, Bundle> bundles, Resource resource)", "class_method_signature": "OBRRepositoryConnectorImpl.applies(ResourceFilter filter, Multimap<String, Bundle> bundles, Resource resource)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(String resourceId)", "modifiers": "@Override public", "return": "void", "signature": "void install(String resourceId)", "full_signature": "@Override public void install(String resourceId)", "class_method_signature": "OBRRepositoryConnectorImpl.install(String resourceId)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "(Resource... resources)", "modifiers": "@Override public", "return": "void", "signature": "void install(Resource... resources)", "full_signature": "@Override public void install(Resource... resources)", "class_method_signature": "OBRRepositoryConnectorImpl.install(Resource... resources)", "testcase": false, "constructor": false}, {"identifier": "checkIfUpdate", "parameters": "(Bundle bundle)", "modifiers": "private", "return": "boolean", "signature": "boolean checkIfUpdate(Bundle bundle)", "full_signature": "private boolean checkIfUpdate(Bundle bundle)", "class_method_signature": "OBRRepositoryConnectorImpl.checkIfUpdate(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "(Bundle other)", "modifiers": "private", "return": "boolean", "signature": "boolean isSingleton(Bundle other)", "full_signature": "private boolean isSingleton(Bundle other)", "class_method_signature": "OBRRepositoryConnectorImpl.isSingleton(Bundle other)", "testcase": false, "constructor": false}, {"identifier": "downloadBundle", "parameters": "(Resource resource)", "modifiers": "private", "return": "String", "signature": "String downloadBundle(Resource resource)", "full_signature": "private String downloadBundle(Resource resource)", "class_method_signature": "OBRRepositoryConnectorImpl.downloadBundle(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "findResources", "parameters": "(String id)", "modifiers": "@Override public", "return": "Resource[]", "signature": "Resource[] findResources(String id)", "full_signature": "@Override public Resource[] findResources(String id)", "class_method_signature": "OBRRepositoryConnectorImpl.findResources(String id)", "testcase": false, "constructor": false}], "file": "org.jabylon.updatecenter/src/main/java/org/jabylon/updatecenter/repository/impl/OBRRepositoryConnectorImpl.java"}, "focal_method": {"identifier": "getHighestBundleVersions", "parameters": "(String... filenames)", "modifiers": "protected", "return": "List<String>", "body": "protected List<String> getHighestBundleVersions(String... filenames) {\n\t\tif(filenames==null)\n\t\t\treturn Collections.emptyList();\n\t\tSortedSetMultimap<String, String> map = TreeMultimap.create(Collator.getInstance(), new VersionComparator());\n\t\tfor (String string : filenames) {\n\t\t\tMatcher matcher = BUNDLE_PATTERN.matcher(string);\n\t\t\tif(matcher.matches()) {\n\t\t\t\tString name = matcher.group(1);\n\t\t\t\tString version = matcher.group(2);\n\t\t\t\tmap.put(name, version);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.warn(\"{} does not match the pattern {}. Skipping\",string,BUNDLE_PATTERN);\n\t\t\t}\n\t\t}\n\t\tSet<Entry<String, Collection<String>>> entrySet = map.asMap().entrySet();\n\t\tList<String> result = new ArrayList<String>(entrySet.size());\n\t\tfor (Entry<String, Collection<String>> entry : entrySet) {\n\t\t\tresult.add(entry.getKey()+\"_\"+entry.getValue().iterator().next()+\".jar\");\n\t\t}\n\t\treturn result;\n\t}", "signature": "List<String> getHighestBundleVersions(String... filenames)", "full_signature": "protected List<String> getHighestBundleVersions(String... filenames)", "class_method_signature": "OBRRepositoryConnectorImpl.getHighestBundleVersions(String... filenames)", "testcase": false, "constructor": false, "invocations": ["emptyList", "create", "getInstance", "matcher", "matches", "group", "group", "put", "warn", "entrySet", "asMap", "size", "add", "getKey", "next", "iterator", "getValue"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}