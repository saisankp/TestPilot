{"test_class": {"identifier": "MavenUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "common-utils/src/test/java/com/stnetix/ariaddna/commonutils/mavenutil/MavenUtilTest.java"}, "test_case": {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCurrentVersion() throws Exception {\n        String version = MavenUtil.getCurrentVersion();\n        assertEquals(version, \"1.0-SNAPSHOT\");\n    }", "signature": "void getCurrentVersion()", "full_signature": "@Test public void getCurrentVersion()", "class_method_signature": "MavenUtilTest.getCurrentVersion()", "testcase": true, "constructor": false, "invocations": ["getCurrentVersion", "assertEquals"]}, "focal_class": {"identifier": "MavenUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AriaddnaLogger LOGGER = AriaddnaLogger.getLogger(MavenUtil.class);", "modifier": "private static final", "type": "AriaddnaLogger", "declarator": "LOGGER = AriaddnaLogger.getLogger(MavenUtil.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "MavenUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " MavenUtil()", "full_signature": "private  MavenUtil()", "class_method_signature": "MavenUtil.MavenUtil()", "testcase": false, "constructor": true}, {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getCurrentVersion()", "full_signature": "public static String getCurrentVersion()", "class_method_signature": "MavenUtil.getCurrentVersion()", "testcase": false, "constructor": false}], "file": "common-utils/src/main/java/com/stnetix/ariaddna/commonutils/mavenutil/MavenUtil.java"}, "focal_method": {"identifier": "getCurrentVersion", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getCurrentVersion() {\n        Model model = null;\n        try {\n            MavenXpp3Reader reader = new MavenXpp3Reader();\n            if ((new File(\"pom.xml\")).exists()) {\n                model = reader.read(new FileReader(\"pom.xml\"));\n            } else {\n                model = reader.read(new InputStreamReader(MavenUtil.class.getResourceAsStream(\n                        \"/META-INF/maven/com.stnetix.ariaddna/common-utils/pom.xml\")));\n            }\n\n        } catch (IOException e) {\n            LOGGER.error(\"Can't read Pom.xml file. Exception message is: \", e.getMessage());\n        } catch (XmlPullParserException e) {\n            LOGGER.error(\"Can't parse Pom.xml file. Exception message is: \", e.getMessage());\n        }\n        return model != null ? model.getParent().getVersion() : \"0.0.0\";\n    }", "signature": "String getCurrentVersion()", "full_signature": "public static String getCurrentVersion()", "class_method_signature": "MavenUtil.getCurrentVersion()", "testcase": false, "constructor": false, "invocations": ["exists", "read", "read", "getResourceAsStream", "error", "getMessage", "error", "getMessage", "getVersion", "getParent"]}, "repository": {"repo_id": 73354878, "url": "https://github.com/StnetixDevTeam/ariADDna", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 11, "size": 971, "license": "licensed"}}