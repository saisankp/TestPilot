{"test_class": {"identifier": "MappingsTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendse-model/src/test/java/net/sf/opendse/model/MappingsTest.java"}, "test_case": {"identifier": "testGetSources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSources() {\n\t\tMappings<Task, Resource> mappings = new Mappings<Task, Resource>();\n\t\tTask t = new Task(\"t\");\n\t\tResource r = new Resource(\"r\");\n\t\tMapping<Task, Resource> mapping = new Mapping<Task, Resource>(\"m\", t, r);\n\t\tmappings.add(mapping);\n\n\t\tAssert.assertEquals(Collections.singleton(t), mappings.getSources(r));\n\t}", "signature": "void testGetSources()", "full_signature": "@Test public void testGetSources()", "class_method_signature": "MappingsTest.testGetSources()", "testcase": true, "constructor": false, "invocations": ["add", "assertEquals", "singleton", "getSources"]}, "focal_class": {"identifier": "Mappings", "superclass": "", "interfaces": "implements Iterable<Mapping<T, R>>", "fields": [{"original_string": "protected Set<Mapping<T, R>> mappings = new HashSet<Mapping<T, R>>();", "modifier": "protected", "type": "Set<Mapping<T, R>>", "declarator": "mappings = new HashSet<Mapping<T, R>>()", "var_name": "mappings"}, {"original_string": "protected Map<T, Set<Mapping<T, R>>> taskMappings = LazyMap.decorate(new HashMap<T, Set<Mapping<T, R>>>(),\n\t\t\tnew InstantiateFactory(HashSet.class));", "modifier": "protected", "type": "Map<T, Set<Mapping<T, R>>>", "declarator": "taskMappings = LazyMap.decorate(new HashMap<T, Set<Mapping<T, R>>>(),\n\t\t\tnew InstantiateFactory(HashSet.class))", "var_name": "taskMappings"}, {"original_string": "protected Map<R, Set<Mapping<T, R>>> resourceMappings = LazyMap.decorate(new HashMap<R, Set<Mapping<T, R>>>(),\n\t\t\tnew InstantiateFactory(HashSet.class));", "modifier": "protected", "type": "Map<R, Set<Mapping<T, R>>>", "declarator": "resourceMappings = LazyMap.decorate(new HashMap<R, Set<Mapping<T, R>>>(),\n\t\t\tnew InstantiateFactory(HashSet.class))", "var_name": "resourceMappings"}, {"original_string": "protected Map<T, Bag<R>> targets = LazyMap\n\t\t\t.decorate(new HashMap<T, Bag<R>>(), new InstantiateFactory(HashBag.class));", "modifier": "protected", "type": "Map<T, Bag<R>>", "declarator": "targets = LazyMap\n\t\t\t.decorate(new HashMap<T, Bag<R>>(), new InstantiateFactory(HashBag.class))", "var_name": "targets"}, {"original_string": "protected Map<R, Bag<T>> sources = LazyMap\n\t\t\t.decorate(new HashMap<R, Bag<T>>(), new InstantiateFactory(HashBag.class));", "modifier": "protected", "type": "Map<R, Bag<T>>", "declarator": "sources = LazyMap\n\t\t\t.decorate(new HashMap<R, Bag<T>>(), new InstantiateFactory(HashBag.class))", "var_name": "sources"}], "methods": [{"identifier": "add", "parameters": "(Mapping<T, R> mapping)", "modifiers": "public", "return": "void", "signature": "void add(Mapping<T, R> mapping)", "full_signature": "public void add(Mapping<T, R> mapping)", "class_method_signature": "Mappings.add(Mapping<T, R> mapping)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Mapping<T, R> mapping)", "modifiers": "public", "return": "boolean", "signature": "boolean remove(Mapping<T, R> mapping)", "full_signature": "public boolean remove(Mapping<T, R> mapping)", "class_method_signature": "Mappings.remove(Mapping<T, R> mapping)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<Mapping<T,R>> mappings)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAll(Collection<Mapping<T,R>> mappings)", "full_signature": "public boolean removeAll(Collection<Mapping<T,R>> mappings)", "class_method_signature": "Mappings.removeAll(Collection<Mapping<T,R>> mappings)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Mapping<T, R>>", "signature": "Iterator<Mapping<T, R>> iterator()", "full_signature": "@Override public Iterator<Mapping<T, R>> iterator()", "class_method_signature": "Mappings.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Mappings.size()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(T source)", "modifiers": "public", "return": "Set<Mapping<T, R>>", "signature": "Set<Mapping<T, R>> get(T source)", "full_signature": "public Set<Mapping<T, R>> get(T source)", "class_method_signature": "Mappings.get(T source)", "testcase": false, "constructor": false}, {"identifier": "getTargets", "parameters": "(T source)", "modifiers": "public", "return": "Set<R>", "signature": "Set<R> getTargets(T source)", "full_signature": "public Set<R> getTargets(T source)", "class_method_signature": "Mappings.getTargets(T source)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(R target)", "modifiers": "public", "return": "Set<Mapping<T, R>>", "signature": "Set<Mapping<T, R>> get(R target)", "full_signature": "public Set<Mapping<T, R>> get(R target)", "class_method_signature": "Mappings.get(R target)", "testcase": false, "constructor": false}, {"identifier": "getSources", "parameters": "(R target)", "modifiers": "public", "return": "Set<T>", "signature": "Set<T> getSources(R target)", "full_signature": "public Set<T> getSources(R target)", "class_method_signature": "Mappings.getSources(R target)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(T source, R target)", "modifiers": "public", "return": "Set<Mapping<T, R>>", "signature": "Set<Mapping<T, R>> get(T source, R target)", "full_signature": "public Set<Mapping<T, R>> get(T source, R target)", "class_method_signature": "Mappings.get(T source, R target)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "Set<Mapping<T, R>>", "signature": "Set<Mapping<T, R>> getAll()", "full_signature": "public Set<Mapping<T, R>> getAll()", "class_method_signature": "Mappings.getAll()", "testcase": false, "constructor": false}], "file": "opendse-model/src/main/java/net/sf/opendse/model/Mappings.java"}, "focal_method": {"identifier": "getSources", "parameters": "(R target)", "modifiers": "public", "return": "Set<T>", "body": "public Set<T> getSources(R target) {\n\t\treturn sources.get(target).uniqueSet();\n\t}", "signature": "Set<T> getSources(R target)", "full_signature": "public Set<T> getSources(R target)", "class_method_signature": "Mappings.getSources(R target)", "testcase": false, "constructor": false, "invocations": ["uniqueSet", "get"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}