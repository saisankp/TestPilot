{"test_class": {"identifier": "CoffeeShopTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoffeeShop testObject;", "modifier": "private", "type": "CoffeeShop", "declarator": "testObject", "var_name": "testObject"}], "file": "coffee-shop/src/test/java/com/sebastian_daschner/coffee_shop/orders/boundary/CoffeeShopTest.java"}, "test_case": {"identifier": "testProcessUnfinishedOrders", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\")", "return": "void", "body": "@Test\n    @SuppressWarnings(\"unchecked\")\n    void testProcessUnfinishedOrders() {\n        List<Order> desiredOrders = TestData.unfinishedOrders();\n\n        TypedQuery mockQuery = mock(TypedQuery.class);\n        when(testObject.entityManager.createNamedQuery(Order.FIND_UNFINISHED, Order.class)).thenReturn(mockQuery);\n        when(mockQuery.getResultList()).thenReturn(desiredOrders);\n        ArgumentCaptor<Order> orderCaptor = ArgumentCaptor.forClass(Order.class);\n\n        testObject.processUnfinishedOrders();\n\n        verify(testObject.entityManager).createNamedQuery(Order.FIND_UNFINISHED, Order.class);\n        verify(testObject.orderProcessor, times(desiredOrders.size())).processOrder(orderCaptor.capture());\n\n        assertThat(orderCaptor.getAllValues()).containsExactlyElementsOf(desiredOrders);\n\n        orderCaptor.getAllValues().forEach(o -> assertThat(o).isPreparing());\n    }", "signature": "void testProcessUnfinishedOrders()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") void testProcessUnfinishedOrders()", "class_method_signature": "CoffeeShopTest.testProcessUnfinishedOrders()", "testcase": true, "constructor": false, "invocations": ["unfinishedOrders", "mock", "thenReturn", "when", "createNamedQuery", "thenReturn", "when", "getResultList", "forClass", "processUnfinishedOrders", "createNamedQuery", "verify", "processOrder", "verify", "times", "size", "capture", "containsExactlyElementsOf", "assertThat", "getAllValues", "forEach", "getAllValues", "isPreparing", "assertThat"]}, "focal_class": {"identifier": "CoffeeShop", "superclass": "", "interfaces": "", "fields": [{"original_string": "@PersistenceContext\n    EntityManager entityManager;", "modifier": "@PersistenceContext", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "@Inject\n    OrderProcessor orderProcessor;", "modifier": "@Inject", "type": "OrderProcessor", "declarator": "orderProcessor", "var_name": "orderProcessor"}], "methods": [{"identifier": "getCoffeeTypes", "parameters": "()", "modifiers": "public", "return": "Set<CoffeeType>", "signature": "Set<CoffeeType> getCoffeeTypes()", "full_signature": "public Set<CoffeeType> getCoffeeTypes()", "class_method_signature": "CoffeeShop.getCoffeeTypes()", "testcase": false, "constructor": false}, {"identifier": "getOrigins", "parameters": "(final CoffeeType type)", "modifiers": "public", "return": "Set<Origin>", "signature": "Set<Origin> getOrigins(final CoffeeType type)", "full_signature": "public Set<Origin> getOrigins(final CoffeeType type)", "class_method_signature": "CoffeeShop.getOrigins(final CoffeeType type)", "testcase": false, "constructor": false}, {"identifier": "getOrigin", "parameters": "(String name)", "modifiers": "public", "return": "Origin", "signature": "Origin getOrigin(String name)", "full_signature": "public Origin getOrigin(String name)", "class_method_signature": "CoffeeShop.getOrigin(String name)", "testcase": false, "constructor": false}, {"identifier": "createOrder", "parameters": "(Order order)", "modifiers": "public", "return": "void", "signature": "void createOrder(Order order)", "full_signature": "public void createOrder(Order order)", "class_method_signature": "CoffeeShop.createOrder(Order order)", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "(UUID id)", "modifiers": "public", "return": "Order", "signature": "Order getOrder(UUID id)", "full_signature": "public Order getOrder(UUID id)", "class_method_signature": "CoffeeShop.getOrder(UUID id)", "testcase": false, "constructor": false}, {"identifier": "getOrders", "parameters": "()", "modifiers": "public", "return": "List<Order>", "signature": "List<Order> getOrders()", "full_signature": "public List<Order> getOrders()", "class_method_signature": "CoffeeShop.getOrders()", "testcase": false, "constructor": false}, {"identifier": "processUnfinishedOrders", "parameters": "()", "modifiers": "@Scheduled(every = \"2s\") public", "return": "void", "signature": "void processUnfinishedOrders()", "full_signature": "@Scheduled(every = \"2s\") public void processUnfinishedOrders()", "class_method_signature": "CoffeeShop.processUnfinishedOrders()", "testcase": false, "constructor": false}, {"identifier": "updateOrder", "parameters": "(UUID id, Order order)", "modifiers": "public", "return": "void", "signature": "void updateOrder(UUID id, Order order)", "full_signature": "public void updateOrder(UUID id, Order order)", "class_method_signature": "CoffeeShop.updateOrder(UUID id, Order order)", "testcase": false, "constructor": false}], "file": "coffee-shop/src/main/java/com/sebastian_daschner/coffee_shop/orders/boundary/CoffeeShop.java"}, "focal_method": {"identifier": "processUnfinishedOrders", "parameters": "()", "modifiers": "@Scheduled(every = \"2s\") public", "return": "void", "body": "@Scheduled(every = \"2s\")\n    public void processUnfinishedOrders() {\n        entityManager.createNamedQuery(Order.FIND_UNFINISHED, Order.class)\n                .getResultList()\n                .forEach(orderProcessor::processOrder);\n    }", "signature": "void processUnfinishedOrders()", "full_signature": "@Scheduled(every = \"2s\") public void processUnfinishedOrders()", "class_method_signature": "CoffeeShop.processUnfinishedOrders()", "testcase": false, "constructor": false, "invocations": ["forEach", "getResultList", "createNamedQuery"]}, "repository": {"repo_id": 128915122, "url": "https://github.com/sdaschner/coffee-testing", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 19, "size": 315, "license": "licensed"}}