{"test_class": {"identifier": "LicenseSupportTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/runtime/src/test/java/org/eclipse/sw360/antenna/util/LicenseSupportTest.java"}, "test_case": {"identifier": "singleLicenseIsTreatedSimply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleLicenseIsTreatedSimply() {\n        Collection<String> license = Collections.singletonList(\"Single License\");\n        LicenseInformation actualLicenseSupport = LicenseSupport.mapLicenses(license);\n\n        assertThat(actualLicenseSupport.evaluate()).startsWith(\"Single License\");\n    }", "signature": "void singleLicenseIsTreatedSimply()", "full_signature": "@Test public void singleLicenseIsTreatedSimply()", "class_method_signature": "LicenseSupportTest.singleLicenseIsTreatedSimply()", "testcase": true, "constructor": false, "invocations": ["singletonList", "mapLicenses", "startsWith", "assertThat", "evaluate"]}, "focal_class": {"identifier": "LicenseSupport", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "mapLicenses", "parameters": "(Collection<String> licenses)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation mapLicenses(Collection<String> licenses)", "full_signature": "public static LicenseInformation mapLicenses(Collection<String> licenses)", "class_method_signature": "LicenseSupport.mapLicenses(Collection<String> licenses)", "testcase": false, "constructor": false}, {"identifier": "mapLicenses", "parameters": "(Collection<String> licenses, LicenseOperator operator)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation mapLicenses(Collection<String> licenses, LicenseOperator operator)", "full_signature": "public static LicenseInformation mapLicenses(Collection<String> licenses, LicenseOperator operator)", "class_method_signature": "LicenseSupport.mapLicenses(Collection<String> licenses, LicenseOperator operator)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXExpression", "parameters": "(String spdxExpressionString)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXExpression(String spdxExpressionString)", "full_signature": "public static LicenseInformation fromSPDXExpression(String spdxExpressionString)", "class_method_signature": "LicenseSupport.fromSPDXExpression(String spdxExpressionString)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXExpression", "parameters": "(SpdxExpression spdxExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXExpression(SpdxExpression spdxExpression)", "full_signature": "public static LicenseInformation fromSPDXExpression(SpdxExpression spdxExpression)", "class_method_signature": "LicenseSupport.fromSPDXExpression(SpdxExpression spdxExpression)", "testcase": false, "constructor": false}, {"identifier": "parseSpdxExpression", "parameters": "(String expression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation parseSpdxExpression(String expression)", "full_signature": "public static LicenseInformation parseSpdxExpression(String expression)", "class_method_signature": "LicenseSupport.parseSpdxExpression(String expression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxWithLicense", "parameters": "(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "modifiers": "private static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "full_signature": "private static LicenseInformation fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "class_method_signature": "LicenseSupport.fromSpdxWithLicense(SpdxLicenseWithExceptionExpression spdxWithExceptionExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxLicenseReferenceExpression", "parameters": "(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "full_signature": "public static LicenseInformation fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "class_method_signature": "LicenseSupport.fromSpdxLicenseReferenceExpression(SpdxLicenseReferenceExpression spdxLicenseReferenceExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSpdxLicenseIdExpression", "parameters": "(SpdxLicenseIdExpression spdxLicenseIdExpression)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "full_signature": "public static LicenseInformation fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "class_method_signature": "LicenseSupport.fromSpdxLicenseIdExpression(SpdxLicenseIdExpression spdxLicenseIdExpression)", "testcase": false, "constructor": false}, {"identifier": "fromSPDXCompoundExpression", "parameters": "(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "modifiers": "public static", "return": "LicenseInformation", "signature": "LicenseInformation fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "full_signature": "public static LicenseInformation fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "class_method_signature": "LicenseSupport.fromSPDXCompoundExpression(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "testcase": false, "constructor": false}, {"identifier": "checkCompoundChild", "parameters": "(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "modifiers": "private static", "return": "LicenseInformation", "signature": "LicenseInformation checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "full_signature": "private static LicenseInformation checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "class_method_signature": "LicenseSupport.checkCompoundChild(SpdxCompoundExpression spdxCompoundExpression, LicenseStatement license)", "testcase": false, "constructor": false}], "file": "core/runtime/src/main/java/org/eclipse/sw360/antenna/util/LicenseSupport.java"}, "focal_method": {"identifier": "mapLicenses", "parameters": "(Collection<String> licenses)", "modifiers": "public static", "return": "LicenseInformation", "body": "public static LicenseInformation mapLicenses(Collection<String> licenses) {\n        return mapLicenses(licenses, LicenseOperator.AND);\n    }", "signature": "LicenseInformation mapLicenses(Collection<String> licenses)", "full_signature": "public static LicenseInformation mapLicenses(Collection<String> licenses)", "class_method_signature": "LicenseSupport.mapLicenses(Collection<String> licenses)", "testcase": false, "constructor": false, "invocations": ["mapLicenses"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}