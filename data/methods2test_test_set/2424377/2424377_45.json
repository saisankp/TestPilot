{"test_class": {"identifier": "LanguageComponentsLoaderTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/org/carrot2/language/LanguageComponentsLoaderTest.java"}, "test_case": {"identifier": "testMultipleSpiDeduplicatesProviders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleSpiDeduplicatesProviders() {\n    Map<String, List<LanguageComponentsProvider>> langs =\n        LanguageComponentsLoader.loadProvidersFromSpi(\n            getClass().getClassLoader(), getClass().getClassLoader());\n\n    for (List<LanguageComponentsProvider> perLangProviders : langs.values()) {\n      perLangProviders.stream()\n          .collect(Collectors.groupingBy(LanguageComponentsProvider::getClass))\n          .values()\n          .forEach(\n              providersByClass -> {\n                Assertions.assertThat(providersByClass).hasSize(1);\n              });\n    }\n  }", "signature": "void testMultipleSpiDeduplicatesProviders()", "full_signature": "@Test public void testMultipleSpiDeduplicatesProviders()", "class_method_signature": "LanguageComponentsLoaderTest.testMultipleSpiDeduplicatesProviders()", "testcase": true, "constructor": false, "invocations": ["loadProvidersFromSpi", "getClassLoader", "getClass", "getClassLoader", "getClass", "values", "forEach", "values", "collect", "stream", "groupingBy", "hasSize", "assertThat"]}, "focal_class": {"identifier": "LanguageComponentsLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Set<String> languageRestrictions;", "modifier": "private", "type": "Set<String>", "declarator": "languageRestrictions", "var_name": "languageRestrictions"}, {"original_string": "private Function<LanguageComponentsProvider, ResourceLookup> resourceLookupModifier;", "modifier": "private", "type": "Function<LanguageComponentsProvider, ResourceLookup>", "declarator": "resourceLookupModifier", "var_name": "resourceLookupModifier"}, {"original_string": "private ClusteringAlgorithm[] algorithmRestriction;", "modifier": "private", "type": "ClusteringAlgorithm[]", "declarator": "algorithmRestriction", "var_name": "algorithmRestriction"}], "methods": [{"identifier": "load", "parameters": "()", "modifiers": "public", "return": "LoadedLanguages", "signature": "LoadedLanguages load()", "full_signature": "public LoadedLanguages load()", "class_method_signature": "LanguageComponentsLoader.load()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Map<String, List<LanguageComponentsProvider>> languageProviders)", "modifiers": "public", "return": "LoadedLanguages", "signature": "LoadedLanguages load(Map<String, List<LanguageComponentsProvider>> languageProviders)", "full_signature": "public LoadedLanguages load(Map<String, List<LanguageComponentsProvider>> languageProviders)", "class_method_signature": "LanguageComponentsLoader.load(Map<String, List<LanguageComponentsProvider>> languageProviders)", "testcase": false, "constructor": false}, {"identifier": "limitToLanguages", "parameters": "(String... languages)", "modifiers": "public", "return": "LanguageComponentsLoader", "signature": "LanguageComponentsLoader limitToLanguages(String... languages)", "full_signature": "public LanguageComponentsLoader limitToLanguages(String... languages)", "class_method_signature": "LanguageComponentsLoader.limitToLanguages(String... languages)", "testcase": false, "constructor": false}, {"identifier": "limitToAlgorithms", "parameters": "(ClusteringAlgorithm... algorithms)", "modifiers": "public", "return": "LanguageComponentsLoader", "signature": "LanguageComponentsLoader limitToAlgorithms(ClusteringAlgorithm... algorithms)", "full_signature": "public LanguageComponentsLoader limitToAlgorithms(ClusteringAlgorithm... algorithms)", "class_method_signature": "LanguageComponentsLoader.limitToAlgorithms(ClusteringAlgorithm... algorithms)", "testcase": false, "constructor": false}, {"identifier": "withResourceLookup", "parameters": "(\n      Function<LanguageComponentsProvider, ResourceLookup> resourceLookupModifier)", "modifiers": "public", "return": "LanguageComponentsLoader", "signature": "LanguageComponentsLoader withResourceLookup(\n      Function<LanguageComponentsProvider, ResourceLookup> resourceLookupModifier)", "full_signature": "public LanguageComponentsLoader withResourceLookup(\n      Function<LanguageComponentsProvider, ResourceLookup> resourceLookupModifier)", "class_method_signature": "LanguageComponentsLoader.withResourceLookup(\n      Function<LanguageComponentsProvider, ResourceLookup> resourceLookupModifier)", "testcase": false, "constructor": false}, {"identifier": "sanityCheck", "parameters": "(Map<String, List<LanguageComponentsProvider>> languageProviders)", "modifiers": "private", "return": "void", "signature": "void sanityCheck(Map<String, List<LanguageComponentsProvider>> languageProviders)", "full_signature": "private void sanityCheck(Map<String, List<LanguageComponentsProvider>> languageProviders)", "class_method_signature": "LanguageComponentsLoader.sanityCheck(Map<String, List<LanguageComponentsProvider>> languageProviders)", "testcase": false, "constructor": false}, {"identifier": "defaultSpiClassloader", "parameters": "()", "modifiers": "private", "return": "ClassLoader", "signature": "ClassLoader defaultSpiClassloader()", "full_signature": "private ClassLoader defaultSpiClassloader()", "class_method_signature": "LanguageComponentsLoader.defaultSpiClassloader()", "testcase": false, "constructor": false}, {"identifier": "loadProvidersFromSpi", "parameters": "(\n      ClassLoader... classloaders)", "modifiers": "public static", "return": "Map<String, List<LanguageComponentsProvider>>", "signature": "Map<String, List<LanguageComponentsProvider>> loadProvidersFromSpi(\n      ClassLoader... classloaders)", "full_signature": "public static Map<String, List<LanguageComponentsProvider>> loadProvidersFromSpi(\n      ClassLoader... classloaders)", "class_method_signature": "LanguageComponentsLoader.loadProvidersFromSpi(\n      ClassLoader... classloaders)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/carrot2/language/LanguageComponentsLoader.java"}, "focal_method": {"identifier": "loadProvidersFromSpi", "parameters": "(\n      ClassLoader... classloaders)", "modifiers": "public static", "return": "Map<String, List<LanguageComponentsProvider>>", "body": "public static Map<String, List<LanguageComponentsProvider>> loadProvidersFromSpi(\n      ClassLoader... classloaders) {\n    Map<String, List<LanguageComponentsProvider>> providers = new TreeMap<>();\n\n    BiPredicate<LanguageComponentsProvider, LanguageComponentsProvider> sameProvider =\n        (p1, p2) -> {\n          return Objects.equals(p1.name(), p2.name())\n              && Objects.equals(p1.getClass(), p2.getClass())\n              && Objects.equals(p1.componentTypes(), p2.componentTypes())\n              && Objects.equals(p1.languages(), p2.languages());\n        };\n\n    for (ClassLoader classLoader : classloaders) {\n      for (LanguageComponentsProvider candidate :\n          ServiceLoader.load(LanguageComponentsProvider.class, classLoader)) {\n        for (String language : candidate.languages()) {\n          List<LanguageComponentsProvider> existingProviders =\n              providers.computeIfAbsent(language, key -> new ArrayList<>());\n\n          if (existingProviders.stream()\n              .noneMatch(existing -> sameProvider.test(existing, candidate))) {\n            existingProviders.add(candidate);\n          }\n        }\n      }\n    }\n\n    return providers;\n  }", "signature": "Map<String, List<LanguageComponentsProvider>> loadProvidersFromSpi(\n      ClassLoader... classloaders)", "full_signature": "public static Map<String, List<LanguageComponentsProvider>> loadProvidersFromSpi(\n      ClassLoader... classloaders)", "class_method_signature": "LanguageComponentsLoader.loadProvidersFromSpi(\n      ClassLoader... classloaders)", "testcase": false, "constructor": false, "invocations": ["equals", "name", "name", "equals", "getClass", "getClass", "equals", "componentTypes", "componentTypes", "equals", "languages", "languages", "load", "languages", "computeIfAbsent", "noneMatch", "stream", "test", "add"]}, "repository": {"repo_id": 2424377, "url": "https://github.com/carrot2/carrot2", "stars": 393, "created": "9/20/2011 6:19:05 PM +00:00", "updates": "2020-01-24T20:43:38+00:00", "fork": "False", "license": "licensed"}}