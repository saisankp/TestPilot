{"test_class": {"identifier": "SqlViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/sqlview/SqlViewTest.java"}, "test_case": {"identifier": "testGetCriteria", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCriteria()\n    {\n        Set<String> params = Sets.newHashSet( \"type:NUMBER\", \"aggregationType:AVERAGE\" );\n        \n        Map<String, String> expected = ImmutableMap.of( \"type\", \"NUMBER\", \"aggregationType\", \"AVERAGE\" );\n        \n        assertEquals( expected, SqlView.getCriteria( params ) );\n    }", "signature": "void testGetCriteria()", "full_signature": "@Test public void testGetCriteria()", "class_method_signature": "SqlViewTest.testGetCriteria()", "testcase": true, "constructor": false, "invocations": ["newHashSet", "of", "assertEquals", "getCriteria"]}, "focal_class": {"identifier": "SqlView", "superclass": "extends BaseIdentifiableObject", "interfaces": "implements Cacheable, MetadataObject", "fields": [{"original_string": "public static final String PREFIX_VIEWNAME = \"_view\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_VIEWNAME = \"_view\"", "var_name": "PREFIX_VIEWNAME"}, {"original_string": "public static final Set<String> PROTECTED_TABLES = ImmutableSet.<String>builder().add(\n        \"users\", \"userinfo\", \"trackedentityattribute\", \"trackedentityattributevalue\", \"oauth_access_token\", \"oauth2client\" ).build();", "modifier": "public static final", "type": "Set<String>", "declarator": "PROTECTED_TABLES = ImmutableSet.<String>builder().add(\n        \"users\", \"userinfo\", \"trackedentityattribute\", \"trackedentityattributevalue\", \"oauth_access_token\", \"oauth2client\" ).build()", "var_name": "PROTECTED_TABLES"}, {"original_string": "public static final Set<String> ILLEGAL_KEYWORDS = ImmutableSet.<String>builder().add(\n        \"delete\", \"alter\", \"update\", \"create\", \"drop\", \"commit\", \"createdb\",\n        \"createuser\", \"insert\", \"rename\", \"restore\", \"write\" ).build();", "modifier": "public static final", "type": "Set<String>", "declarator": "ILLEGAL_KEYWORDS = ImmutableSet.<String>builder().add(\n        \"delete\", \"alter\", \"update\", \"create\", \"drop\", \"commit\", \"createdb\",\n        \"createuser\", \"insert\", \"rename\", \"restore\", \"write\" ).build()", "var_name": "ILLEGAL_KEYWORDS"}, {"original_string": "public static final String CURRENT_USER_ID_VARIABLE = \"_current_user_id\";", "modifier": "public static final", "type": "String", "declarator": "CURRENT_USER_ID_VARIABLE = \"_current_user_id\"", "var_name": "CURRENT_USER_ID_VARIABLE"}, {"original_string": "public static final String CURRENT_USERNAME_VARIABLE = \"_current_username\";", "modifier": "public static final", "type": "String", "declarator": "CURRENT_USERNAME_VARIABLE = \"_current_username\"", "var_name": "CURRENT_USERNAME_VARIABLE"}, {"original_string": "public static final Set<String> STANDARD_VARIABLES = ImmutableSet.of(\n        CURRENT_USER_ID_VARIABLE, CURRENT_USERNAME_VARIABLE );", "modifier": "public static final", "type": "Set<String>", "declarator": "STANDARD_VARIABLES = ImmutableSet.of(\n        CURRENT_USER_ID_VARIABLE, CURRENT_USERNAME_VARIABLE )", "var_name": "STANDARD_VARIABLES"}, {"original_string": "private static final String CRITERIA_SEP = \":\";", "modifier": "private static final", "type": "String", "declarator": "CRITERIA_SEP = \":\"", "var_name": "CRITERIA_SEP"}, {"original_string": "private static final String REGEX_SEP = \"|\";", "modifier": "private static final", "type": "String", "declarator": "REGEX_SEP = \"|\"", "var_name": "REGEX_SEP"}, {"original_string": "private static final String QUERY_VALUE_REGEX = \"^[\\\\w\\\\s\\\\-]*$\";", "modifier": "private static final", "type": "String", "declarator": "QUERY_VALUE_REGEX = \"^[\\\\w\\\\s\\\\-]*$\"", "var_name": "QUERY_VALUE_REGEX"}, {"original_string": "private String description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private String sqlQuery;", "modifier": "private", "type": "String", "declarator": "sqlQuery", "var_name": "sqlQuery"}, {"original_string": "private SqlViewType type;", "modifier": "private", "type": "SqlViewType", "declarator": "type", "var_name": "type"}, {"original_string": "private CacheStrategy cacheStrategy = CacheStrategy.RESPECT_SYSTEM_SETTING;", "modifier": "private", "type": "CacheStrategy", "declarator": "cacheStrategy = CacheStrategy.RESPECT_SYSTEM_SETTING", "var_name": "cacheStrategy"}], "methods": [{"identifier": "SqlView", "parameters": "()", "modifiers": "public", "return": "", "signature": " SqlView()", "full_signature": "public  SqlView()", "class_method_signature": "SqlView.SqlView()", "testcase": false, "constructor": true}, {"identifier": "SqlView", "parameters": "( String name, String sqlQuery, SqlViewType type )", "modifiers": "public", "return": "", "signature": " SqlView( String name, String sqlQuery, SqlViewType type )", "full_signature": "public  SqlView( String name, String sqlQuery, SqlViewType type )", "class_method_signature": "SqlView.SqlView( String name, String sqlQuery, SqlViewType type )", "testcase": false, "constructor": true}, {"identifier": "getViewName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getViewName()", "full_signature": "public String getViewName()", "class_method_signature": "SqlView.getViewName()", "testcase": false, "constructor": false}, {"identifier": "getCriteria", "parameters": "( Set<String> params )", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getCriteria( Set<String> params )", "full_signature": "public static Map<String, String> getCriteria( Set<String> params )", "class_method_signature": "SqlView.getCriteria( Set<String> params )", "testcase": false, "constructor": false}, {"identifier": "getInvalidQueryParams", "parameters": "( Set<String> params )", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getInvalidQueryParams( Set<String> params )", "full_signature": "public static Set<String> getInvalidQueryParams( Set<String> params )", "class_method_signature": "SqlView.getInvalidQueryParams( Set<String> params )", "testcase": false, "constructor": false}, {"identifier": "isValidQueryParam", "parameters": "( String param )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidQueryParam( String param )", "full_signature": "public static boolean isValidQueryParam( String param )", "class_method_signature": "SqlView.isValidQueryParam( String param )", "testcase": false, "constructor": false}, {"identifier": "getInvalidQueryValues", "parameters": "( Collection<String> values )", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getInvalidQueryValues( Collection<String> values )", "full_signature": "public static Set<String> getInvalidQueryValues( Collection<String> values )", "class_method_signature": "SqlView.getInvalidQueryValues( Collection<String> values )", "testcase": false, "constructor": false}, {"identifier": "isValidQueryValue", "parameters": "( String value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidQueryValue( String value )", "full_signature": "public static boolean isValidQueryValue( String value )", "class_method_signature": "SqlView.isValidQueryValue( String value )", "testcase": false, "constructor": false}, {"identifier": "getProtectedTablesRegex", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getProtectedTablesRegex()", "full_signature": "public static String getProtectedTablesRegex()", "class_method_signature": "SqlView.getProtectedTablesRegex()", "testcase": false, "constructor": false}, {"identifier": "getIllegalKeywordsRegex", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getIllegalKeywordsRegex()", "full_signature": "public static String getIllegalKeywordsRegex()", "class_method_signature": "SqlView.getIllegalKeywordsRegex()", "testcase": false, "constructor": false}, {"identifier": "isQuery", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isQuery()", "full_signature": "public boolean isQuery()", "class_method_signature": "SqlView.isQuery()", "testcase": false, "constructor": false}, {"identifier": "isView", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isView()", "full_signature": "public boolean isView()", "class_method_signature": "SqlView.isView()", "testcase": false, "constructor": false}, {"identifier": "isMaterializedView", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMaterializedView()", "full_signature": "public boolean isMaterializedView()", "class_method_signature": "SqlView.isMaterializedView()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) @PropertyRange( min = 2 ) public", "return": "String", "signature": "String getDescription()", "full_signature": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) @PropertyRange( min = 2 ) public String getDescription()", "class_method_signature": "SqlView.getDescription()", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "( String description )", "modifiers": "public", "return": "void", "signature": "void setDescription( String description )", "full_signature": "public void setDescription( String description )", "class_method_signature": "SqlView.setDescription( String description )", "testcase": false, "constructor": false}, {"identifier": "getSqlQuery", "parameters": "()", "modifiers": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public", "return": "String", "signature": "String getSqlQuery()", "full_signature": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public String getSqlQuery()", "class_method_signature": "SqlView.getSqlQuery()", "testcase": false, "constructor": false}, {"identifier": "setSqlQuery", "parameters": "( String sqlQuery )", "modifiers": "public", "return": "void", "signature": "void setSqlQuery( String sqlQuery )", "full_signature": "public void setSqlQuery( String sqlQuery )", "class_method_signature": "SqlView.setSqlQuery( String sqlQuery )", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public", "return": "SqlViewType", "signature": "SqlViewType getType()", "full_signature": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) public SqlViewType getType()", "class_method_signature": "SqlView.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "( SqlViewType type )", "modifiers": "public", "return": "void", "signature": "void setType( SqlViewType type )", "full_signature": "public void setType( SqlViewType type )", "class_method_signature": "SqlView.setType( SqlViewType type )", "testcase": false, "constructor": false}, {"identifier": "getCacheStrategy", "parameters": "()", "modifiers": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) @Override public", "return": "CacheStrategy", "signature": "CacheStrategy getCacheStrategy()", "full_signature": "@JsonProperty @JacksonXmlProperty( namespace = DxfNamespaces.DXF_2_0 ) @Override public CacheStrategy getCacheStrategy()", "class_method_signature": "SqlView.getCacheStrategy()", "testcase": false, "constructor": false}, {"identifier": "setCacheStrategy", "parameters": "( CacheStrategy cacheStrategy )", "modifiers": "public", "return": "void", "signature": "void setCacheStrategy( CacheStrategy cacheStrategy )", "full_signature": "public void setCacheStrategy( CacheStrategy cacheStrategy )", "class_method_signature": "SqlView.setCacheStrategy( CacheStrategy cacheStrategy )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/sqlview/SqlView.java"}, "focal_method": {"identifier": "getCriteria", "parameters": "( Set<String> params )", "modifiers": "public static", "return": "Map<String, String>", "body": "public static Map<String, String> getCriteria( Set<String> params )\n    {\n        Map<String, String> map = new HashMap<>();\n\n        if ( params != null )\n        {\n            for ( String param : params )\n            {\n                if ( param != null && param.split( CRITERIA_SEP ).length == 2 )\n                {\n                    String[] criteria = param.split( CRITERIA_SEP );\n                    String filter = criteria[0];\n                    String value = criteria[1];\n\n                    map.put( filter, value );\n                }\n            }\n        }\n\n        return map;\n    }", "signature": "Map<String, String> getCriteria( Set<String> params )", "full_signature": "public static Map<String, String> getCriteria( Set<String> params )", "class_method_signature": "SqlView.getCriteria( Set<String> params )", "testcase": false, "constructor": false, "invocations": ["split", "split", "put"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}