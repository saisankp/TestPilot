{"test_class": {"identifier": "AutoModelSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/x13/AutoModelSpecTest.java"}, "test_case": {"identifier": "testSetUnitRootLimitLowerBound", "parameters": "()", "modifiers": "@Test(expected = X13Exception.class) public", "return": "void", "body": "@Test(expected = X13Exception.class)\n    public void testSetUnitRootLimitLowerBound() {\n        AutoModelSpec expected = new AutoModelSpec();\n        expected.setUnitRootLimit(.9);\n    }", "signature": "void testSetUnitRootLimitLowerBound()", "full_signature": "@Test(expected = X13Exception.class) public void testSetUnitRootLimitLowerBound()", "class_method_signature": "AutoModelSpecTest.testSetUnitRootLimitLowerBound()", "testcase": true, "constructor": false, "invocations": ["setUnitRootLimit"]}, "focal_class": {"identifier": "AutoModelSpec", "superclass": "", "interfaces": "implements Cloneable, InformationSetSerializable", "fields": [{"original_string": "public static final String ENABLED = \"enabled\",\n            ACCEPTDEFAULT = \"acceptdefault\",\n            MIXED = \"mixed\",\n            BALANCED = \"balanced\",\n            CHECKMU = \"checkmu\",\n            HR = \"hrinitial\",\n            LJUNGBOXLIMIT = \"ljungboxlimit\",\n            REDUCECV = \"reducecv\",\n            UB1 = \"ub1\",\n            UB2 = \"ub2\",\n            CANCEL = \"cancel\",\n            ARMALIMIT = \"armalimit\",\n            UBFINAL = \"ubfinal\",\n            PERCENTRSE = \"percentRSE\",\n            ARMA = \"arma\",\n            DIFF = \"diff\";", "modifier": "public static final", "type": "String", "declarator": "ENABLED = \"enabled\"", "var_name": "ENABLED"}, {"original_string": "private boolean enabled_ = false;", "modifier": "private", "type": "boolean", "declarator": "enabled_ = false", "var_name": "enabled_"}, {"original_string": "private OrderSpec diff_, order_;", "modifier": "private", "type": "OrderSpec", "declarator": "diff_", "var_name": "diff_"}, {"original_string": "private boolean acceptdef_ = DEF_ACCEPTDEF, checkmu_ = DEF_CHECKMU, mixed_ = DEF_MIXED, balanced_ = DEF_BALANCED, hr_ = DEF_HR;", "modifier": "private", "type": "boolean", "declarator": "acceptdef_ = DEF_ACCEPTDEF", "var_name": "acceptdef_"}, {"original_string": "private double cancel_ = DEF_CANCEL, fct_ = DEF_FCT, pcr_ = DEF_LJUNGBOX, predcv_ = DEF_PREDCV,\n            tsig_ = DEF_TSIG, ub1_ = DEF_UB1, ub2_ = DEF_UB2, ubfinal_ = DEF_UBFINAL;", "modifier": "private", "type": "double", "declarator": "cancel_ = DEF_CANCEL", "var_name": "cancel_"}, {"original_string": "public static final double DEF_LJUNGBOX = .95, DEF_TSIG = 1, DEF_PREDCV = .14286, DEF_UBFINAL = 1.05, DEF_UB1 = 1 / .96, DEF_UB2 = .88,\n            DEF_CANCEL = 0.1, DEF_FCT = 1 / .9875;", "modifier": "public static final", "type": "double", "declarator": "DEF_LJUNGBOX = .95", "var_name": "DEF_LJUNGBOX"}, {"original_string": "public static final boolean DEF_ACCEPTDEF = false, DEF_CHECKMU = true, DEF_MIXED = true,\n            DEF_BALANCED = false, DEF_HR = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEF_ACCEPTDEF = false", "var_name": "DEF_ACCEPTDEF"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "AutoModelSpec.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "AutoModelSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " AutoModelSpec()", "full_signature": "public  AutoModelSpec()", "class_method_signature": "AutoModelSpec.AutoModelSpec()", "testcase": false, "constructor": true}, {"identifier": "AutoModelSpec", "parameters": "(boolean enabled)", "modifiers": "public", "return": "", "signature": " AutoModelSpec(boolean enabled)", "full_signature": "public  AutoModelSpec(boolean enabled)", "class_method_signature": "AutoModelSpec.AutoModelSpec(boolean enabled)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "AutoModelSpec.reset()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "AutoModelSpec", "signature": "AutoModelSpec clone()", "full_signature": "@Override public AutoModelSpec clone()", "class_method_signature": "AutoModelSpec.clone()", "testcase": false, "constructor": false}, {"identifier": "isAcceptDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAcceptDefault()", "full_signature": "public boolean isAcceptDefault()", "class_method_signature": "AutoModelSpec.isAcceptDefault()", "testcase": false, "constructor": false}, {"identifier": "setAcceptDefault", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setAcceptDefault(boolean value)", "full_signature": "public void setAcceptDefault(boolean value)", "class_method_signature": "AutoModelSpec.setAcceptDefault(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isCheckMu", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCheckMu()", "full_signature": "public boolean isCheckMu()", "class_method_signature": "AutoModelSpec.isCheckMu()", "testcase": false, "constructor": false}, {"identifier": "setCheckMu", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setCheckMu(boolean value)", "full_signature": "public void setCheckMu(boolean value)", "class_method_signature": "AutoModelSpec.setCheckMu(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getArma", "parameters": "()", "modifiers": "public", "return": "OrderSpec", "signature": "OrderSpec getArma()", "full_signature": "public OrderSpec getArma()", "class_method_signature": "AutoModelSpec.getArma()", "testcase": false, "constructor": false}, {"identifier": "setArma", "parameters": "(OrderSpec value)", "modifiers": "public", "return": "void", "signature": "void setArma(OrderSpec value)", "full_signature": "public void setArma(OrderSpec value)", "class_method_signature": "AutoModelSpec.setArma(OrderSpec value)", "testcase": false, "constructor": false}, {"identifier": "getDiff", "parameters": "()", "modifiers": "public", "return": "OrderSpec", "signature": "OrderSpec getDiff()", "full_signature": "public OrderSpec getDiff()", "class_method_signature": "AutoModelSpec.getDiff()", "testcase": false, "constructor": false}, {"identifier": "setDiff", "parameters": "(OrderSpec value)", "modifiers": "public", "return": "void", "signature": "void setDiff(OrderSpec value)", "full_signature": "public void setDiff(OrderSpec value)", "class_method_signature": "AutoModelSpec.setDiff(OrderSpec value)", "testcase": false, "constructor": false}, {"identifier": "isMixed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMixed()", "full_signature": "public boolean isMixed()", "class_method_signature": "AutoModelSpec.isMixed()", "testcase": false, "constructor": false}, {"identifier": "setMixed", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setMixed(boolean value)", "full_signature": "public void setMixed(boolean value)", "class_method_signature": "AutoModelSpec.setMixed(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getLjungBoxLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLjungBoxLimit()", "full_signature": "public double getLjungBoxLimit()", "class_method_signature": "AutoModelSpec.getLjungBoxLimit()", "testcase": false, "constructor": false}, {"identifier": "setLjungBoxLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setLjungBoxLimit(double value)", "full_signature": "public void setLjungBoxLimit(double value)", "class_method_signature": "AutoModelSpec.setLjungBoxLimit(double value)", "testcase": false, "constructor": false}, {"identifier": "getArmaSignificance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getArmaSignificance()", "full_signature": "public double getArmaSignificance()", "class_method_signature": "AutoModelSpec.getArmaSignificance()", "testcase": false, "constructor": false}, {"identifier": "setArmaSignificance", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setArmaSignificance(double value)", "full_signature": "public void setArmaSignificance(double value)", "class_method_signature": "AutoModelSpec.setArmaSignificance(double value)", "testcase": false, "constructor": false}, {"identifier": "getPercentRSE", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPercentRSE()", "full_signature": "public double getPercentRSE()", "class_method_signature": "AutoModelSpec.getPercentRSE()", "testcase": false, "constructor": false}, {"identifier": "setPercentRSE", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setPercentRSE(double value)", "full_signature": "public void setPercentRSE(double value)", "class_method_signature": "AutoModelSpec.setPercentRSE(double value)", "testcase": false, "constructor": false}, {"identifier": "isBalanced", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBalanced()", "full_signature": "public boolean isBalanced()", "class_method_signature": "AutoModelSpec.isBalanced()", "testcase": false, "constructor": false}, {"identifier": "setBalanced", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setBalanced(boolean value)", "full_signature": "public void setBalanced(boolean value)", "class_method_signature": "AutoModelSpec.setBalanced(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isHannanRissannen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHannanRissannen()", "full_signature": "public boolean isHannanRissannen()", "class_method_signature": "AutoModelSpec.isHannanRissannen()", "testcase": false, "constructor": false}, {"identifier": "setHannanRissanen", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setHannanRissanen(boolean value)", "full_signature": "public void setHannanRissanen(boolean value)", "class_method_signature": "AutoModelSpec.setHannanRissanen(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getPercentReductionCV", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPercentReductionCV()", "full_signature": "public double getPercentReductionCV()", "class_method_signature": "AutoModelSpec.getPercentReductionCV()", "testcase": false, "constructor": false}, {"identifier": "setPercentReductionCV", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setPercentReductionCV(double value)", "full_signature": "public void setPercentReductionCV(double value)", "class_method_signature": "AutoModelSpec.setPercentReductionCV(double value)", "testcase": false, "constructor": false}, {"identifier": "getInitialUnitRootLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getInitialUnitRootLimit()", "full_signature": "public double getInitialUnitRootLimit()", "class_method_signature": "AutoModelSpec.getInitialUnitRootLimit()", "testcase": false, "constructor": false}, {"identifier": "setInitialUnitRootLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setInitialUnitRootLimit(double value)", "full_signature": "public void setInitialUnitRootLimit(double value)", "class_method_signature": "AutoModelSpec.setInitialUnitRootLimit(double value)", "testcase": false, "constructor": false}, {"identifier": "getFinalUnitRootLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getFinalUnitRootLimit()", "full_signature": "public double getFinalUnitRootLimit()", "class_method_signature": "AutoModelSpec.getFinalUnitRootLimit()", "testcase": false, "constructor": false}, {"identifier": "setFinalUnitRootLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setFinalUnitRootLimit(double value)", "full_signature": "public void setFinalUnitRootLimit(double value)", "class_method_signature": "AutoModelSpec.setFinalUnitRootLimit(double value)", "testcase": false, "constructor": false}, {"identifier": "getCancelationLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCancelationLimit()", "full_signature": "public double getCancelationLimit()", "class_method_signature": "AutoModelSpec.getCancelationLimit()", "testcase": false, "constructor": false}, {"identifier": "setCancelationLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setCancelationLimit(double value)", "full_signature": "public void setCancelationLimit(double value)", "class_method_signature": "AutoModelSpec.setCancelationLimit(double value)", "testcase": false, "constructor": false}, {"identifier": "getUnitRootLimit", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUnitRootLimit()", "full_signature": "public double getUnitRootLimit()", "class_method_signature": "AutoModelSpec.getUnitRootLimit()", "testcase": false, "constructor": false}, {"identifier": "setUnitRootLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setUnitRootLimit(double value)", "full_signature": "public void setUnitRootLimit(double value)", "class_method_signature": "AutoModelSpec.setUnitRootLimit(double value)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "AutoModelSpec.isDefault()", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "AutoModelSpec.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setEnabled(boolean value)", "full_signature": "public void setEnabled(boolean value)", "class_method_signature": "AutoModelSpec.setEnabled(boolean value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AutoModelSpec.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(AutoModelSpec other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(AutoModelSpec other)", "full_signature": "private boolean equals(AutoModelSpec other)", "class_method_signature": "AutoModelSpec.equals(AutoModelSpec other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AutoModelSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "AutoModelSpec.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "AutoModelSpec.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/x13/AutoModelSpec.java"}, "focal_method": {"identifier": "setUnitRootLimit", "parameters": "(double value)", "modifiers": "public", "return": "void", "body": "public void setUnitRootLimit(double value) {\n        if (value < 1) {\n            throw new X13Exception(\"Unit root limit must be greater than 1\");\n        }\n        ubfinal_ = value;\n    }", "signature": "void setUnitRootLimit(double value)", "full_signature": "public void setUnitRootLimit(double value)", "class_method_signature": "AutoModelSpec.setUnitRootLimit(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}