{"test_class": {"identifier": "ReentrantReadWriteLockGroupTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/util/ReentrantReadWriteLockGroupTest.java"}, "test_case": {"identifier": "ensure_that_calls_with_different_strings_returns_different_locks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ensure_that_calls_with_different_strings_returns_different_locks() {\n        // given\n        ReentrantReadWriteLockGroup locks = new ReentrantReadWriteLockGroup(true, 3);\n\n        // when\n        ReentrantReadWriteLock lock1 = locks.getLock(\"1\");\n        ReentrantReadWriteLock lock2 = locks.getLock(\"2\");\n        ReentrantReadWriteLock lock3 = locks.getLock(\"3\");\n\n        // then\n        assertNotEquals(lock1, lock2);\n        assertNotEquals(lock1, lock3);\n        assertNotEquals(lock2, lock3);\n    }", "signature": "void ensure_that_calls_with_different_strings_returns_different_locks()", "full_signature": "@Test public void ensure_that_calls_with_different_strings_returns_different_locks()", "class_method_signature": "ReentrantReadWriteLockGroupTest.ensure_that_calls_with_different_strings_returns_different_locks()", "testcase": true, "constructor": false, "invocations": ["getLock", "getLock", "getLock", "assertNotEquals", "assertNotEquals", "assertNotEquals"]}, "focal_class": {"identifier": "ReentrantReadWriteLockGroup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final boolean fairness;", "modifier": "private final", "type": "boolean", "declarator": "fairness", "var_name": "fairness"}, {"original_string": "private final int CLEANUP_THRESHOLD;", "modifier": "private final", "type": "int", "declarator": "CLEANUP_THRESHOLD", "var_name": "CLEANUP_THRESHOLD"}, {"original_string": "private int counter = 0;", "modifier": "private", "type": "int", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private ConcurrentHashMap<String, ReentrantReadWriteLock> locks = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentHashMap<String, ReentrantReadWriteLock>", "declarator": "locks = new ConcurrentHashMap<>()", "var_name": "locks"}], "methods": [{"identifier": "ReentrantReadWriteLockGroup", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReentrantReadWriteLockGroup()", "full_signature": "public  ReentrantReadWriteLockGroup()", "class_method_signature": "ReentrantReadWriteLockGroup.ReentrantReadWriteLockGroup()", "testcase": false, "constructor": true}, {"identifier": "ReentrantReadWriteLockGroup", "parameters": "(int counter)", "modifiers": "public", "return": "", "signature": " ReentrantReadWriteLockGroup(int counter)", "full_signature": "public  ReentrantReadWriteLockGroup(int counter)", "class_method_signature": "ReentrantReadWriteLockGroup.ReentrantReadWriteLockGroup(int counter)", "testcase": false, "constructor": true}, {"identifier": "ReentrantReadWriteLockGroup", "parameters": "(boolean fairness)", "modifiers": "public", "return": "", "signature": " ReentrantReadWriteLockGroup(boolean fairness)", "full_signature": "public  ReentrantReadWriteLockGroup(boolean fairness)", "class_method_signature": "ReentrantReadWriteLockGroup.ReentrantReadWriteLockGroup(boolean fairness)", "testcase": false, "constructor": true}, {"identifier": "ReentrantReadWriteLockGroup", "parameters": "(boolean fairness, int counter)", "modifiers": "public", "return": "", "signature": " ReentrantReadWriteLockGroup(boolean fairness, int counter)", "full_signature": "public  ReentrantReadWriteLockGroup(boolean fairness, int counter)", "class_method_signature": "ReentrantReadWriteLockGroup.ReentrantReadWriteLockGroup(boolean fairness, int counter)", "testcase": false, "constructor": true}, {"identifier": "getLock", "parameters": "(String id)", "modifiers": "public", "return": "ReentrantReadWriteLock", "signature": "ReentrantReadWriteLock getLock(String id)", "full_signature": "public ReentrantReadWriteLock getLock(String id)", "class_method_signature": "ReentrantReadWriteLockGroup.getLock(String id)", "testcase": false, "constructor": false}, {"identifier": "cleanUp", "parameters": "(ReentrantReadWriteLock doNotRemove)", "modifiers": "private", "return": "void", "signature": "void cleanUp(ReentrantReadWriteLock doNotRemove)", "full_signature": "private void cleanUp(ReentrantReadWriteLock doNotRemove)", "class_method_signature": "ReentrantReadWriteLockGroup.cleanUp(ReentrantReadWriteLock doNotRemove)", "testcase": false, "constructor": false}, {"identifier": "lockHeldOrAsked", "parameters": "(ReentrantReadWriteLock lock)", "modifiers": "private", "return": "boolean", "signature": "boolean lockHeldOrAsked(ReentrantReadWriteLock lock)", "full_signature": "private boolean lockHeldOrAsked(ReentrantReadWriteLock lock)", "class_method_signature": "ReentrantReadWriteLockGroup.lockHeldOrAsked(ReentrantReadWriteLock lock)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/util/ReentrantReadWriteLockGroup.java"}, "focal_method": {"identifier": "getLock", "parameters": "(String id)", "modifiers": "public", "return": "ReentrantReadWriteLock", "body": "public ReentrantReadWriteLock getLock(String id) {\n        ReentrantReadWriteLock lock = locks.get(id);\n        if (lock == null) {\n            locks.putIfAbsent(id, new ReentrantReadWriteLock(fairness));\n        }\n        lock = locks.get(id);\n\n        if (CLEANUP_THRESHOLD <= ++counter) {\n            cleanUp(lock);\n            counter = 0;\n        }\n        return lock;\n    }", "signature": "ReentrantReadWriteLock getLock(String id)", "full_signature": "public ReentrantReadWriteLock getLock(String id)", "class_method_signature": "ReentrantReadWriteLockGroup.getLock(String id)", "testcase": false, "constructor": false, "invocations": ["get", "putIfAbsent", "get", "cleanUp"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}