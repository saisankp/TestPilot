{"test_class": {"identifier": "AbstractIso7816CommandBuilderTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(AbstractIso7816CommandBuilderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(AbstractIso7816CommandBuilderTest.class)", "var_name": "logger"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/command/AbstractIso7816CommandBuilderTest.java"}, "test_case": {"identifier": "testSetApduRequestDatainLeNon0", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testSetApduRequestDatainLeNon0() {\n    Iso7816CommandBuilder iso7816CommandBuilder =\n        new Iso7816CommandBuilder(CommandRef.COMMAND_1, null);\n    ApduRequest apduRequest =\n        iso7816CommandBuilder.setApduRequest(\n            (byte) 0xCC,\n            CommandRef.COMMAND_1,\n            (byte) 0xB1,\n            (byte) 0xB2,\n            ByteArrayUtil.fromHex(\"11223344\"),\n            (byte) 1);\n  }", "signature": "void testSetApduRequestDatainLeNon0()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testSetApduRequestDatainLeNon0()", "class_method_signature": "AbstractIso7816CommandBuilderTest.testSetApduRequestDatainLeNon0()", "testcase": true, "constructor": false, "invocations": ["setApduRequest", "fromHex"]}, "focal_class": {"identifier": "AbstractIso7816CommandBuilder", "superclass": "extends AbstractApduCommandBuilder", "interfaces": "", "fields": [], "methods": [{"identifier": "AbstractIso7816CommandBuilder", "parameters": "(SeCommand commandReference, ApduRequest request)", "modifiers": "public", "return": "", "signature": " AbstractIso7816CommandBuilder(SeCommand commandReference, ApduRequest request)", "full_signature": "public  AbstractIso7816CommandBuilder(SeCommand commandReference, ApduRequest request)", "class_method_signature": "AbstractIso7816CommandBuilder.AbstractIso7816CommandBuilder(SeCommand commandReference, ApduRequest request)", "testcase": false, "constructor": true}, {"identifier": "allocateBuffer", "parameters": "(byte[] dataIn, Byte le)", "modifiers": "private", "return": "byte[]", "signature": "byte[] allocateBuffer(byte[] dataIn, Byte le)", "full_signature": "private byte[] allocateBuffer(byte[] dataIn, Byte le)", "class_method_signature": "AbstractIso7816CommandBuilder.allocateBuffer(byte[] dataIn, Byte le)", "testcase": false, "constructor": false}, {"identifier": "setApduRequest", "parameters": "(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "modifiers": "protected", "return": "ApduRequest", "signature": "ApduRequest setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "full_signature": "protected ApduRequest setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "class_method_signature": "AbstractIso7816CommandBuilder.setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/command/AbstractIso7816CommandBuilder.java"}, "focal_method": {"identifier": "setApduRequest", "parameters": "(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "modifiers": "protected", "return": "ApduRequest", "body": "protected ApduRequest setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le) {\n    boolean case4;\n    /* sanity check */\n    if (dataIn != null && le != null && le != 0) {\n      throw new IllegalArgumentException(\n          \"Le must be equal to 0 when not null and ingoing data are present.\");\n    }\n\n    /* Buffer allocation */\n    byte[] apdu = allocateBuffer(dataIn, le);\n\n    /* Build APDU buffer from provided arguments */\n    apdu[0] = cla;\n    apdu[1] = command.getInstructionByte();\n    apdu[2] = p1;\n    apdu[3] = p2;\n\n    /* ISO7618 case determination and Le management */\n    if (dataIn != null) {\n      /* append Lc and ingoing data */\n      apdu[4] = (byte) dataIn.length;\n      System.arraycopy(dataIn, 0, apdu, 5, dataIn.length);\n      if (le != null) {\n        /*\n         * case4: ingoing and outgoing data, Le is always set to 0 (see Calypso Reader\n         * Recommendations - T84)\n         */\n        case4 = true;\n        apdu[apdu.length - 1] = le;\n      } else {\n        /* case3: ingoing data only, no Le */\n        case4 = false;\n      }\n    } else {\n      if (le != null) {\n        /* case2: outgoing data only */\n        apdu[4] = le;\n      } else {\n        /* case1: no ingoing, no outgoing data, P3/Le = 0 */\n        apdu[4] = (byte) 0x00;\n      }\n      case4 = false;\n    }\n\n    return new ApduRequest(command.getName(), apdu, case4);\n  }", "signature": "ApduRequest setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "full_signature": "protected ApduRequest setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "class_method_signature": "AbstractIso7816CommandBuilder.setApduRequest(\n      byte cla, SeCommand command, byte p1, byte p2, byte[] dataIn, Byte le)", "testcase": false, "constructor": false, "invocations": ["allocateBuffer", "getInstructionByte", "arraycopy", "getName"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}