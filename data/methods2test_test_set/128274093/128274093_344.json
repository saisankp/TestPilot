{"test_class": {"identifier": "ListCompositeDisposableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/disposables/ListCompositeDisposableTest.java"}, "test_case": {"identifier": "disposeThrows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void disposeThrows() {\n        Disposable d = new Disposable() {\n\n            @Override\n            public void dispose() {\n                throw new TestException();\n            }\n\n            @Override\n            public boolean isDisposed() {\n                return false;\n            }\n\n        };\n\n        ListCompositeDisposable lcd = new ListCompositeDisposable(d, d);\n\n        try {\n            lcd.dispose();\n            fail(\"Should have thrown!\");\n        } catch (CompositeException ex) {\n            List<Throwable> list = ex.getExceptions();\n            TestHelper.assertError(list, 0, TestException.class);\n            TestHelper.assertError(list, 1, TestException.class);\n        }\n\n        lcd = new ListCompositeDisposable(d);\n\n        try {\n            lcd.dispose();\n            fail(\"Should have thrown!\");\n        } catch (TestException  ex) {\n            // expected\n        }\n    }", "signature": "void disposeThrows()", "full_signature": "@Test public void disposeThrows()", "class_method_signature": "ListCompositeDisposableTest.disposeThrows()", "testcase": true, "constructor": false, "invocations": ["dispose", "fail", "getExceptions", "assertError", "assertError", "dispose", "fail"]}, "focal_class": {"identifier": "ListCompositeDisposable", "superclass": "", "interfaces": "implements Disposable, DisposableContainer", "fields": [{"original_string": "List<Disposable> resources;", "modifier": "", "type": "List<Disposable>", "declarator": "resources", "var_name": "resources"}, {"original_string": "volatile boolean disposed;", "modifier": "volatile", "type": "boolean", "declarator": "disposed", "var_name": "disposed"}], "methods": [{"identifier": "ListCompositeDisposable", "parameters": "()", "modifiers": "public", "return": "", "signature": " ListCompositeDisposable()", "full_signature": "public  ListCompositeDisposable()", "class_method_signature": "ListCompositeDisposable.ListCompositeDisposable()", "testcase": false, "constructor": true}, {"identifier": "ListCompositeDisposable", "parameters": "(Disposable... resources)", "modifiers": "public", "return": "", "signature": " ListCompositeDisposable(Disposable... resources)", "full_signature": "public  ListCompositeDisposable(Disposable... resources)", "class_method_signature": "ListCompositeDisposable.ListCompositeDisposable(Disposable... resources)", "testcase": false, "constructor": true}, {"identifier": "ListCompositeDisposable", "parameters": "(Iterable<? extends Disposable> resources)", "modifiers": "public", "return": "", "signature": " ListCompositeDisposable(Iterable<? extends Disposable> resources)", "full_signature": "public  ListCompositeDisposable(Iterable<? extends Disposable> resources)", "class_method_signature": "ListCompositeDisposable.ListCompositeDisposable(Iterable<? extends Disposable> resources)", "testcase": false, "constructor": true}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ListCompositeDisposable.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "ListCompositeDisposable.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Disposable d)", "full_signature": "@Override public boolean add(Disposable d)", "class_method_signature": "ListCompositeDisposable.add(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Disposable... ds)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(Disposable... ds)", "full_signature": "public boolean addAll(Disposable... ds)", "class_method_signature": "ListCompositeDisposable.addAll(Disposable... ds)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Disposable d)", "full_signature": "@Override public boolean remove(Disposable d)", "class_method_signature": "ListCompositeDisposable.remove(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(Disposable d)", "full_signature": "@Override public boolean delete(Disposable d)", "class_method_signature": "ListCompositeDisposable.delete(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ListCompositeDisposable.clear()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "(List<Disposable> set)", "modifiers": "", "return": "void", "signature": "void dispose(List<Disposable> set)", "full_signature": " void dispose(List<Disposable> set)", "class_method_signature": "ListCompositeDisposable.dispose(List<Disposable> set)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        if (disposed) {\n            return;\n        }\n        List<Disposable> set;\n        synchronized (this) {\n            if (disposed) {\n                return;\n            }\n            disposed = true;\n            set = resources;\n            resources = null;\n        }\n\n        dispose(set);\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ListCompositeDisposable.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}