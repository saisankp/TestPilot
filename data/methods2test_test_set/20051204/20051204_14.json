{"test_class": {"identifier": "TestAgentClientProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestAgentClientProvider.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestAgentClientProvider.class)", "var_name": "log"}, {"original_string": "@Rule\n  public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestAgentClientProvider.java"}, "test_case": {"identifier": "testGetApplicationTags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetApplicationTags() throws Exception {\n    Configuration configuration = new Configuration();\n    FileSystem fs = FileSystem.getLocal(configuration);\n    SliderFileSystem sliderFileSystem = new SliderFileSystem(fs, configuration);\n\n    AgentClientProvider provider = new AgentClientProvider(null);\n    String zipFileName = TestUtility.createAppPackage(\n        folder,\n        \"testpkg\",\n        \"test.zip\",\n        \"target/test-classes/org/apache/slider/common/tools/test\");\n    Set<String> tags = provider.getApplicationTags(sliderFileSystem, zipFileName);\n    assert tags != null;\n    assert !tags.isEmpty();\n    assert tags.contains(\"Name: STORM\");\n    assert tags.contains(\"Description: Apache Hadoop Stream processing framework\");\n    assert tags.contains(\"Version: 0.9.1.2.1\");\n\n  }", "signature": "void testGetApplicationTags()", "full_signature": "@Test public void testGetApplicationTags()", "class_method_signature": "TestAgentClientProvider.testGetApplicationTags()", "testcase": true, "constructor": false, "invocations": ["getLocal", "createAppPackage", "getApplicationTags", "isEmpty", "contains", "contains", "contains"]}, "focal_class": {"identifier": "AgentClientProvider", "superclass": "extends AbstractClientProvider", "interfaces": "implements AgentKeys, SliderKeys", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(AgentClientProvider.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(AgentClientProvider.class)", "var_name": "log"}, {"original_string": "protected static final String NAME = \"agent\";", "modifier": "protected static final", "type": "String", "declarator": "NAME = \"agent\"", "var_name": "NAME"}, {"original_string": "private static final ProviderUtils providerUtils = new ProviderUtils(log);", "modifier": "private static final", "type": "ProviderUtils", "declarator": "providerUtils = new ProviderUtils(log)", "var_name": "providerUtils"}, {"original_string": "public static final String E_COULD_NOT_READ_METAINFO\n      = \"Not a valid app package. Could not read metainfo.\";", "modifier": "public static final", "type": "String", "declarator": "E_COULD_NOT_READ_METAINFO\n      = \"Not a valid app package. Could not read metainfo.\"", "var_name": "E_COULD_NOT_READ_METAINFO"}, {"original_string": "protected Map<String, Metainfo> metaInfoMap = new ConcurrentHashMap<String, Metainfo>();", "modifier": "protected", "type": "Map<String, Metainfo>", "declarator": "metaInfoMap = new ConcurrentHashMap<String, Metainfo>()", "var_name": "metaInfoMap"}], "methods": [{"identifier": "AgentClientProvider", "parameters": "(Configuration conf)", "modifiers": "protected", "return": "", "signature": " AgentClientProvider(Configuration conf)", "full_signature": "protected  AgentClientProvider(Configuration conf)", "class_method_signature": "AgentClientProvider.AgentClientProvider(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AgentClientProvider.getName()", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "()", "modifiers": "@Override public", "return": "List<ProviderRole>", "signature": "List<ProviderRole> getRoles()", "full_signature": "@Override public List<ProviderRole> getRoles()", "class_method_signature": "AgentClientProvider.getRoles()", "testcase": false, "constructor": false}, {"identifier": "preflightValidateClusterConfiguration", "parameters": "(SliderFileSystem sliderFileSystem,\n                                                    String clustername,\n                                                    Configuration configuration,\n                                                    AggregateConf instanceDefinition,\n                                                    Path clusterDirPath,\n                                                    Path generatedConfDirPath,\n                                                    boolean secure)", "modifiers": "@Override //Client public", "return": "void", "signature": "void preflightValidateClusterConfiguration(SliderFileSystem sliderFileSystem,\n                                                    String clustername,\n                                                    Configuration configuration,\n                                                    AggregateConf instanceDefinition,\n                                                    Path clusterDirPath,\n                                                    Path generatedConfDirPath,\n                                                    boolean secure)", "full_signature": "@Override //Client public void preflightValidateClusterConfiguration(SliderFileSystem sliderFileSystem,\n                                                    String clustername,\n                                                    Configuration configuration,\n                                                    AggregateConf instanceDefinition,\n                                                    Path clusterDirPath,\n                                                    Path generatedConfDirPath,\n                                                    boolean secure)", "class_method_signature": "AgentClientProvider.preflightValidateClusterConfiguration(SliderFileSystem sliderFileSystem,\n                                                    String clustername,\n                                                    Configuration configuration,\n                                                    AggregateConf instanceDefinition,\n                                                    Path clusterDirPath,\n                                                    Path generatedConfDirPath,\n                                                    boolean secure)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceDefinition", "parameters": "(AggregateConf instanceDefinition, SliderFileSystem fs)", "modifiers": "@Override public", "return": "void", "signature": "void validateInstanceDefinition(AggregateConf instanceDefinition, SliderFileSystem fs)", "full_signature": "@Override public void validateInstanceDefinition(AggregateConf instanceDefinition, SliderFileSystem fs)", "class_method_signature": "AgentClientProvider.validateInstanceDefinition(AggregateConf instanceDefinition, SliderFileSystem fs)", "testcase": false, "constructor": false}, {"identifier": "prepareAMAndConfigForLaunch", "parameters": "(SliderFileSystem fileSystem,\n                                          Configuration serviceConf,\n                                          AbstractLauncher launcher,\n                                          AggregateConf instanceDefinition,\n                                          Path snapshotConfDirPath,\n                                          Path generatedConfDirPath,\n                                          Configuration clientConfExtras,\n                                          String libdir,\n                                          Path tempPath,\n                                          boolean miniClusterTestRun)", "modifiers": "@Override public", "return": "void", "signature": "void prepareAMAndConfigForLaunch(SliderFileSystem fileSystem,\n                                          Configuration serviceConf,\n                                          AbstractLauncher launcher,\n                                          AggregateConf instanceDefinition,\n                                          Path snapshotConfDirPath,\n                                          Path generatedConfDirPath,\n                                          Configuration clientConfExtras,\n                                          String libdir,\n                                          Path tempPath,\n                                          boolean miniClusterTestRun)", "full_signature": "@Override public void prepareAMAndConfigForLaunch(SliderFileSystem fileSystem,\n                                          Configuration serviceConf,\n                                          AbstractLauncher launcher,\n                                          AggregateConf instanceDefinition,\n                                          Path snapshotConfDirPath,\n                                          Path generatedConfDirPath,\n                                          Configuration clientConfExtras,\n                                          String libdir,\n                                          Path tempPath,\n                                          boolean miniClusterTestRun)", "class_method_signature": "AgentClientProvider.prepareAMAndConfigForLaunch(SliderFileSystem fileSystem,\n                                          Configuration serviceConf,\n                                          AbstractLauncher launcher,\n                                          AggregateConf instanceDefinition,\n                                          Path snapshotConfDirPath,\n                                          Path generatedConfDirPath,\n                                          Configuration clientConfExtras,\n                                          String libdir,\n                                          Path tempPath,\n                                          boolean miniClusterTestRun)", "testcase": false, "constructor": false}, {"identifier": "getApplicationTags", "parameters": "(SliderFileSystem fileSystem,\n                                        String appDef)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "full_signature": "@Override public Set<String> getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "class_method_signature": "AgentClientProvider.getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "testcase": false, "constructor": false}, {"identifier": "processClientOperation", "parameters": "(SliderFileSystem fileSystem,\n                                     RegistryOperations rops,\n                                     Configuration configuration,\n                                     String operation,\n                                     File clientInstallPath,\n                                     File appPackage,\n                                     JSONObject config,\n                                     String name)", "modifiers": "@Override public", "return": "void", "signature": "void processClientOperation(SliderFileSystem fileSystem,\n                                     RegistryOperations rops,\n                                     Configuration configuration,\n                                     String operation,\n                                     File clientInstallPath,\n                                     File appPackage,\n                                     JSONObject config,\n                                     String name)", "full_signature": "@Override public void processClientOperation(SliderFileSystem fileSystem,\n                                     RegistryOperations rops,\n                                     Configuration configuration,\n                                     String operation,\n                                     File clientInstallPath,\n                                     File appPackage,\n                                     JSONObject config,\n                                     String name)", "class_method_signature": "AgentClientProvider.processClientOperation(SliderFileSystem fileSystem,\n                                     RegistryOperations rops,\n                                     Configuration configuration,\n                                     String operation,\n                                     File clientInstallPath,\n                                     File appPackage,\n                                     JSONObject config,\n                                     String name)", "testcase": false, "constructor": false}, {"identifier": "runCommand", "parameters": "(\n      File appPkgDir,\n      File agentPkgDir,\n      File cmdDir,\n      String clientScript)", "modifiers": "protected", "return": "void", "signature": "void runCommand(\n      File appPkgDir,\n      File agentPkgDir,\n      File cmdDir,\n      String clientScript)", "full_signature": "protected void runCommand(\n      File appPkgDir,\n      File agentPkgDir,\n      File cmdDir,\n      String clientScript)", "class_method_signature": "AgentClientProvider.runCommand(\n      File appPkgDir,\n      File agentPkgDir,\n      File cmdDir,\n      String clientScript)", "testcase": false, "constructor": false}, {"identifier": "expandAgentTar", "parameters": "(File agentPkgDir)", "modifiers": "private", "return": "void", "signature": "void expandAgentTar(File agentPkgDir)", "full_signature": "private void expandAgentTar(File agentPkgDir)", "class_method_signature": "AgentClientProvider.expandAgentTar(File agentPkgDir)", "testcase": false, "constructor": false}, {"identifier": "expandTar", "parameters": "(File tarFile, File destDir)", "modifiers": "private", "return": "void", "signature": "void expandTar(File tarFile, File destDir)", "full_signature": "private void expandTar(File tarFile, File destDir)", "class_method_signature": "AgentClientProvider.expandTar(File tarFile, File destDir)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigFile", "parameters": "(RegistryOperations rops,\n      Configuration configuration, ConfigFile configFile, String name,\n      String user, File destDir)", "modifiers": "private", "return": "void", "signature": "void retrieveConfigFile(RegistryOperations rops,\n      Configuration configuration, ConfigFile configFile, String name,\n      String user, File destDir)", "full_signature": "private void retrieveConfigFile(RegistryOperations rops,\n      Configuration configuration, ConfigFile configFile, String name,\n      String user, File destDir)", "class_method_signature": "AgentClientProvider.retrieveConfigFile(RegistryOperations rops,\n      Configuration configuration, ConfigFile configFile, String name,\n      String user, File destDir)", "testcase": false, "constructor": false}, {"identifier": "getCommandJson", "parameters": "(JSONObject defaultConfig,\n                                      JSONObject inputConfig,\n                                      Metainfo metainfo,\n                                      File clientInstallPath,\n                                      String name)", "modifiers": "protected", "return": "JSONObject", "signature": "JSONObject getCommandJson(JSONObject defaultConfig,\n                                      JSONObject inputConfig,\n                                      Metainfo metainfo,\n                                      File clientInstallPath,\n                                      String name)", "full_signature": "protected JSONObject getCommandJson(JSONObject defaultConfig,\n                                      JSONObject inputConfig,\n                                      Metainfo metainfo,\n                                      File clientInstallPath,\n                                      String name)", "class_method_signature": "AgentClientProvider.getCommandJson(JSONObject defaultConfig,\n                                      JSONObject inputConfig,\n                                      Metainfo metainfo,\n                                      File clientInstallPath,\n                                      String name)", "testcase": false, "constructor": false}, {"identifier": "readConfigEntries", "parameters": "(JSONObject inpConfig,\n                                 File clientInstallPath,\n                                 JSONObject globalConfig,\n                                 String name, String user)", "modifiers": "private", "return": "void", "signature": "void readConfigEntries(JSONObject inpConfig,\n                                 File clientInstallPath,\n                                 JSONObject globalConfig,\n                                 String name, String user)", "full_signature": "private void readConfigEntries(JSONObject inpConfig,\n                                 File clientInstallPath,\n                                 JSONObject globalConfig,\n                                 String name, String user)", "class_method_signature": "AgentClientProvider.readConfigEntries(JSONObject inpConfig,\n                                 File clientInstallPath,\n                                 JSONObject globalConfig,\n                                 String name, String user)", "testcase": false, "constructor": false}, {"identifier": "extractFile", "parameters": "(ZipInputStream zipInputStream, String filePath)", "modifiers": "private", "return": "void", "signature": "void extractFile(ZipInputStream zipInputStream, String filePath)", "full_signature": "private void extractFile(ZipInputStream zipInputStream, String filePath)", "class_method_signature": "AgentClientProvider.extractFile(ZipInputStream zipInputStream, String filePath)", "testcase": false, "constructor": false}, {"identifier": "getMetainfo", "parameters": "(SliderFileSystem fs, String appDef)", "modifiers": "private", "return": "Metainfo", "signature": "Metainfo getMetainfo(SliderFileSystem fs, String appDef)", "full_signature": "private Metainfo getMetainfo(SliderFileSystem fs, String appDef)", "class_method_signature": "AgentClientProvider.getMetainfo(SliderFileSystem fs, String appDef)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/AgentClientProvider.java"}, "focal_method": {"identifier": "getApplicationTags", "parameters": "(SliderFileSystem fileSystem,\n                                        String appDef)", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n  public Set<String> getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef) throws SliderException {\n    Set<String> tags;\n    Metainfo metaInfo = getMetainfo(fileSystem, appDef);\n\n    if (metaInfo == null) {\n      log.error(\"Error retrieving metainfo from {}\", appDef);\n      throw new SliderException(\"Error parsing metainfo file, possibly bad structure.\");\n    }\n\n    Application application = metaInfo.getApplication();\n    tags = new HashSet<String>();\n    tags.add(\"Name: \" + application.getName());\n    tags.add(\"Version: \" + application.getVersion());\n    tags.add(\"Description: \" + SliderUtils.truncate(application.getComment(), 80));\n\n    return tags;\n  }", "signature": "Set<String> getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "full_signature": "@Override public Set<String> getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "class_method_signature": "AgentClientProvider.getApplicationTags(SliderFileSystem fileSystem,\n                                        String appDef)", "testcase": false, "constructor": false, "invocations": ["getMetainfo", "error", "getApplication", "add", "getName", "add", "getVersion", "add", "truncate", "getComment"]}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}