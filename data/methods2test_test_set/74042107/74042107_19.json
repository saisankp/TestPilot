{"test_class": {"identifier": "ExtendedParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ExtendedParserTest.java"}, "test_case": {"identifier": "testFactor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFactor() throws ParserException {\n        ExtendedParser parser = new ExtendedParser(\"-5\");\n        assertEquals(-5f, parser.readFactor(), 0.0001);\n        \n        parser = new ExtendedParser(\"--3\");\n        assertEquals(3f, parser.readFactor(), 0.0001);\n        \n        parser = new ExtendedParser(\"10\");\n        assertEquals(10f, parser.readFactor(), 0.0001);\n        \n        parser = new ExtendedParser(\"varname\");\n        parser.variables.put(\"varname\", 42f);\n        assertEquals(42f, parser.readFactor(), 0.0001);\n\n        parser = new ExtendedParser(\"-varname\");\n        parser.variables.put(\"varname\", 42f);\n        assertEquals(-42f, parser.readFactor(), 0.0001);\n    }", "signature": "void testFactor()", "full_signature": "@Test public void testFactor()", "class_method_signature": "ExtendedParserTest.testFactor()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "readFactor", "assertEquals", "readFactor", "assertEquals", "readFactor", "put", "assertEquals", "readFactor", "put", "assertEquals", "readFactor"]}, "focal_class": {"identifier": "ExtendedParser", "superclass": "extends BaseParser", "interfaces": "", "fields": [{"original_string": "protected HashMap<String, Float> variables = new HashMap<>();", "modifier": "protected", "type": "HashMap<String, Float>", "declarator": "variables = new HashMap<>()", "var_name": "variables"}], "methods": [{"identifier": "ExtendedParser", "parameters": "(String toParse)", "modifiers": "public", "return": "", "signature": " ExtendedParser(String toParse)", "full_signature": "public  ExtendedParser(String toParse)", "class_method_signature": "ExtendedParser.ExtendedParser(String toParse)", "testcase": false, "constructor": true}, {"identifier": "readExpression", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readExpression()", "full_signature": "protected final float readExpression()", "class_method_signature": "ExtendedParser.readExpression()", "testcase": false, "constructor": false}, {"identifier": "readNumber", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readNumber()", "full_signature": "protected final float readNumber()", "class_method_signature": "ExtendedParser.readNumber()", "testcase": false, "constructor": false}, {"identifier": "readTerm", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readTerm()", "full_signature": "protected final float readTerm()", "class_method_signature": "ExtendedParser.readTerm()", "testcase": false, "constructor": false}, {"identifier": "readFactor", "parameters": "()", "modifiers": "protected final", "return": "float", "signature": "float readFactor()", "full_signature": "protected final float readFactor()", "class_method_signature": "ExtendedParser.readFactor()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ExtendedParser.java"}, "focal_method": {"identifier": "readFactor", "parameters": "()", "modifiers": "protected final", "return": "float", "body": "protected final float readFactor() throws ParserException {\n        if (Character.isDigit(peek())) {\n            return readNumber();\n        } else if (Character.isAlphabetic(peek())) {\n            StringBuilder builder = new StringBuilder();\n            while (available() && (Character.isAlphabetic(peek()) || peek() == '_')) {\n                builder.append(pop());\n            }\n            String variableName = builder.toString();\n            \n            if (variables.containsKey(variableName)) {\n                return variables.get(variableName);\n            } else {\n                die(\"Unknown variable\");\n                return 0;\n            }\n        } else if (peek() == '(') {\n            check('(');\n            skipWhitespaces();\n            float expression = readExpression();\n            skipWhitespaces();\n            check(')');\n            return expression;\n        } else if (peek() == '+') {\n            check('+');\n            return readFactor();\n        } else if (peek() == '-') {\n            check('-');\n            return -readFactor();\n        } else {\n            die(\"Expected mathematical expression.\");\n            return 0;\n        }\n    }", "signature": "float readFactor()", "full_signature": "protected final float readFactor()", "class_method_signature": "ExtendedParser.readFactor()", "testcase": false, "constructor": false, "invocations": ["isDigit", "peek", "readNumber", "isAlphabetic", "peek", "available", "isAlphabetic", "peek", "peek", "append", "pop", "toString", "containsKey", "get", "die", "peek", "check", "skipWhitespaces", "readExpression", "skipWhitespaces", "check", "peek", "check", "readFactor", "peek", "check", "readFactor", "die"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}