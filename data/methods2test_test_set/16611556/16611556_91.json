{"test_class": {"identifier": "DefaultKeyProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DefaultKeyProvider cut;", "modifier": "private static", "type": "DefaultKeyProvider", "declarator": "cut", "var_name": "cut"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/aop/support/DefaultKeyProviderTest.java"}, "test_case": {"identifier": "testKeyMethodArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testKeyMethodArgs() throws Exception {\n        try {\n            cut.getKeyMethod(new KeyObject01());\n            fail(\"Expected exception.\");\n        } catch (InvalidAnnotationException ex) {\n            assertTrue(ex.getMessage().indexOf(\"0 arguments\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            cut.getKeyMethod(new KeyObject02());\n            fail(\"Expected exception.\");\n        } catch (InvalidAnnotationException ex) {\n            assertTrue(ex.getMessage().indexOf(\"String\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            cut.getKeyMethod(new KeyObject03());\n            fail(\"Expected exception.\");\n        } catch (InvalidAnnotationException ex) {\n            assertTrue(ex.getMessage().indexOf(\"String\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        try {\n            cut.getKeyMethod(new KeyObject04());\n            fail(\"Expected exception.\");\n        } catch (InvalidAnnotationException ex) {\n            assertTrue(ex.getMessage().indexOf(\"only one method\") != -1);\n            System.out.println(ex.getMessage());\n        }\n\n        assertEquals(\"doIt\", cut.getKeyMethod(new KeyObject05()).getName());\n        assertEquals(\"toString\", cut.getKeyMethod(new KeyObject06(null)).getName());\n    }", "signature": "void testKeyMethodArgs()", "full_signature": "@Test public void testKeyMethodArgs()", "class_method_signature": "DefaultKeyProviderTest.testKeyMethodArgs()", "testcase": true, "constructor": false, "invocations": ["getKeyMethod", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getKeyMethod", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getKeyMethod", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "getKeyMethod", "fail", "assertTrue", "indexOf", "getMessage", "println", "getMessage", "assertEquals", "getName", "getKeyMethod", "assertEquals", "getName", "getKeyMethod"]}, "focal_class": {"identifier": "DefaultKeyProvider", "superclass": "", "interfaces": "implements KeyProvider", "fields": [{"original_string": "private CacheKeyMethodStore methodStore = new CacheKeyMethodStoreImpl();", "modifier": "private", "type": "CacheKeyMethodStore", "declarator": "methodStore = new CacheKeyMethodStoreImpl()", "var_name": "methodStore"}], "methods": [{"identifier": "setMethodStore", "parameters": "(final CacheKeyMethodStore methodStore)", "modifiers": "public", "return": "void", "signature": "void setMethodStore(final CacheKeyMethodStore methodStore)", "full_signature": "public void setMethodStore(final CacheKeyMethodStore methodStore)", "class_method_signature": "DefaultKeyProvider.setMethodStore(final CacheKeyMethodStore methodStore)", "testcase": false, "constructor": false}, {"identifier": "getMethodStore", "parameters": "()", "modifiers": "public", "return": "CacheKeyMethodStore", "signature": "CacheKeyMethodStore getMethodStore()", "full_signature": "public CacheKeyMethodStore getMethodStore()", "class_method_signature": "DefaultKeyProvider.getMethodStore()", "testcase": false, "constructor": false}, {"identifier": "generateKey", "parameters": "(final Object keyObject)", "modifiers": "@Override public", "return": "String", "signature": "String generateKey(final Object keyObject)", "full_signature": "@Override public String generateKey(final Object keyObject)", "class_method_signature": "DefaultKeyProvider.generateKey(final Object keyObject)", "testcase": false, "constructor": false}, {"identifier": "generateKeys", "parameters": "(final Object[] keyObjects)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] generateKeys(final Object[] keyObjects)", "full_signature": "@Override public String[] generateKeys(final Object[] keyObjects)", "class_method_signature": "DefaultKeyProvider.generateKeys(final Object[] keyObjects)", "testcase": false, "constructor": false}, {"identifier": "getKeyMethod", "parameters": "(final Object keyObject)", "modifiers": "", "return": "Method", "signature": "Method getKeyMethod(final Object keyObject)", "full_signature": " Method getKeyMethod(final Object keyObject)", "class_method_signature": "DefaultKeyProvider.getKeyMethod(final Object keyObject)", "testcase": false, "constructor": false}, {"identifier": "generateObjectId", "parameters": "(final Method keyMethod, final Object keyObject)", "modifiers": "", "return": "String", "signature": "String generateObjectId(final Method keyMethod, final Object keyObject)", "full_signature": " String generateObjectId(final Method keyMethod, final Object keyObject)", "class_method_signature": "DefaultKeyProvider.generateObjectId(final Method keyMethod, final Object keyObject)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/aop/support/DefaultKeyProvider.java"}, "focal_method": {"identifier": "getKeyMethod", "parameters": "(final Object keyObject)", "modifiers": "", "return": "Method", "body": "Method getKeyMethod(final Object keyObject) throws NoSuchMethodException {\n        return methodStore.getKeyMethod(keyObject.getClass());\n    }", "signature": "Method getKeyMethod(final Object keyObject)", "full_signature": " Method getKeyMethod(final Object keyObject)", "class_method_signature": "DefaultKeyProvider.getKeyMethod(final Object keyObject)", "testcase": false, "constructor": false, "invocations": ["getKeyMethod", "getClass"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}