{"test_class": {"identifier": "UUIDTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int loop = 5000;", "modifier": "private final", "type": "int", "declarator": "loop = 5000", "var_name": "loop"}, {"original_string": "private final int concurrency = 20;", "modifier": "private final", "type": "int", "declarator": "concurrency = 20", "var_name": "concurrency"}, {"original_string": "private UUID uuid;", "modifier": "private", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "private String instanceId;", "modifier": "private", "type": "String", "declarator": "instanceId", "var_name": "instanceId"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/lang/UUIDTest.java"}, "test_case": {"identifier": "generate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generate() {\n        newUUID(false);\n\n        String sid = uuid.nextID();\n\n        assertTrue(sid.length() > instanceId.length());\n        assertTrue(sid.startsWith(instanceId));\n\n        assertTrue(sid.matches(\"[A-Za-z0-9-]+\"));\n    }", "signature": "void generate()", "full_signature": "@Test public void generate()", "class_method_signature": "UUIDTest.generate()", "testcase": true, "constructor": false, "invocations": ["newUUID", "nextID", "assertTrue", "length", "length", "assertTrue", "startsWith", "assertTrue", "matches"]}, "focal_class": {"identifier": "UUID", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean noCase;", "modifier": "private", "type": "boolean", "declarator": "noCase", "var_name": "noCase"}, {"original_string": "private String instanceId;", "modifier": "private", "type": "String", "declarator": "instanceId", "var_name": "instanceId"}, {"original_string": "private AtomicInteger counter;", "modifier": "private", "type": "AtomicInteger", "declarator": "counter", "var_name": "counter"}], "methods": [{"identifier": "UUID", "parameters": "()", "modifiers": "public", "return": "", "signature": " UUID()", "full_signature": "public  UUID()", "class_method_signature": "UUID.UUID()", "testcase": false, "constructor": true}, {"identifier": "UUID", "parameters": "(boolean noCase)", "modifiers": "public", "return": "", "signature": " UUID(boolean noCase)", "full_signature": "public  UUID(boolean noCase)", "class_method_signature": "UUID.UUID(boolean noCase)", "testcase": false, "constructor": true}, {"identifier": "getLocalHostAddress", "parameters": "()", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getLocalHostAddress()", "full_signature": "private static byte[] getLocalHostAddress()", "class_method_signature": "UUID.getLocalHostAddress()", "testcase": false, "constructor": false}, {"identifier": "getRandomizedTime", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getRandomizedTime()", "full_signature": "private byte[] getRandomizedTime()", "class_method_signature": "UUID.getRandomizedTime()", "testcase": false, "constructor": false}, {"identifier": "nextID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String nextID()", "full_signature": "public String nextID()", "class_method_signature": "UUID.nextID()", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/lang/UUID.java"}, "focal_method": {"identifier": "nextID", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String nextID() {\n        // MACHINE_ID + JVM_ID + \u5f53\u524d\u65f6\u95f4 + counter\n        return instanceId + \"-\" + StringUtil.longToString(System.currentTimeMillis(), noCase) + \"-\"\n                + StringUtil.longToString(counter.getAndIncrement(), noCase);\n    }", "signature": "String nextID()", "full_signature": "public String nextID()", "class_method_signature": "UUID.nextID()", "testcase": false, "constructor": false, "invocations": ["longToString", "currentTimeMillis", "longToString", "getAndIncrement"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}