{"test_class": {"identifier": "ImagePoolImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ImagePoolImpl myPool;", "modifier": "private", "type": "ImagePoolImpl", "declarator": "myPool", "var_name": "myPool"}], "file": "android/testSrc/com/android/tools/idea/rendering/imagepool/ImagePoolImplTest.java"}, "test_case": {"identifier": "testImageCopy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testImageCopy() throws IOException {\n    BufferedImage original = getSampleImage();\n\n    ImagePoolImpl.ImageImpl image = (ImagePoolImpl.ImageImpl)myPool.copyOf(original);\n    assertNotEquals(original, image.myBuffer);\n\n    BufferedImage copy = new BufferedImage(50, 50, BufferedImage.TYPE_INT_ARGB);\n    image.drawImageTo(copy);\n    ImageDiffUtil.assertImageSimilar(\"pooledimage\", original, copy, 0.0);\n\n    copy = image.getCopy();\n    assertNotEquals(copy, image.myBuffer);\n    ImageDiffUtil.assertImageSimilar(\"pooledimage\", original, copy, 0.0);\n\n    copy = image.getCopy(0, 0, 25, 50);\n    assertNotEquals(copy, image.myBuffer);\n    assertEquals(25, copy.getWidth());\n    assertEquals(50, copy.getHeight());\n    ImageDiffUtil.assertImageSimilar(\"pooledimage\", original.getSubimage(0, 0, 25, 50), copy, 0.0);\n\n    copy = image.getCopy(10, 10, 25, 25);\n    assertNotEquals(copy, image.myBuffer);\n    assertEquals(25, copy.getWidth());\n    assertEquals(25, copy.getHeight());\n    ImageDiffUtil.assertImageSimilar(\"pooledimage\", original.getSubimage(10, 10, 25, 25), copy, 0.0);\n\n    try {\n      //noinspection UnusedAssignment\n      copy = image.getCopy(0, 0, 25, 150);\n      fail(\"IndexOutOfBoundsException expected for height out of bounds\");\n    }\n    catch (IndexOutOfBoundsException ignored) {\n    }\n  }", "signature": "void testImageCopy()", "full_signature": "@Test public void testImageCopy()", "class_method_signature": "ImagePoolImplTest.testImageCopy()", "testcase": true, "constructor": false, "invocations": ["getSampleImage", "copyOf", "assertNotEquals", "drawImageTo", "assertImageSimilar", "getCopy", "assertNotEquals", "assertImageSimilar", "getCopy", "assertNotEquals", "assertEquals", "getWidth", "assertEquals", "getHeight", "assertImageSimilar", "getSubimage", "getCopy", "assertNotEquals", "assertEquals", "getWidth", "assertEquals", "getHeight", "assertImageSimilar", "getSubimage", "getCopy", "fail"]}, "focal_class": {"identifier": "ImagePoolImpl", "superclass": "", "interfaces": "implements ImagePool", "fields": [{"original_string": "private static final Logger LOG = Logger.getInstance(ImagePoolImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getInstance(ImagePoolImpl.class)", "var_name": "LOG"}, {"original_string": "private static final Bucket NULL_BUCKET = new Bucket(0, 0, 0);", "modifier": "private static final", "type": "Bucket", "declarator": "NULL_BUCKET = new Bucket(0, 0, 0)", "var_name": "NULL_BUCKET"}, {"original_string": "private final int[] myBucketSizes;", "modifier": "private final", "type": "int[]", "declarator": "myBucketSizes", "var_name": "myBucketSizes"}, {"original_string": "private final HashMap<String, Bucket> myPool = new HashMap<>();", "modifier": "private final", "type": "HashMap<String, Bucket>", "declarator": "myPool = new HashMap<>()", "var_name": "myPool"}, {"original_string": "private final IdentityHashMap<Bucket, BucketStatsImpl> myBucketStats = new IdentityHashMap<>();", "modifier": "private final", "type": "IdentityHashMap<Bucket, BucketStatsImpl>", "declarator": "myBucketStats = new IdentityHashMap<>()", "var_name": "myBucketStats"}, {"original_string": "private final BiFunction<Integer, Integer, Function<Integer, Integer>> myBucketSizingPolicy;", "modifier": "private final", "type": "BiFunction<Integer, Integer, Function<Integer, Integer>>", "declarator": "myBucketSizingPolicy", "var_name": "myBucketSizingPolicy"}, {"original_string": "@SuppressWarnings(\"IOResourceOpenedButNotSafelyClosed\")\n  private final FinalizableReferenceQueue myFinalizableReferenceQueue = new FinalizableReferenceQueue();", "modifier": "@SuppressWarnings(\"IOResourceOpenedButNotSafelyClosed\")\n  private final", "type": "FinalizableReferenceQueue", "declarator": "myFinalizableReferenceQueue = new FinalizableReferenceQueue()", "var_name": "myFinalizableReferenceQueue"}, {"original_string": "private final Set<Reference<?>> myReferences = Sets.newConcurrentHashSet();", "modifier": "private final", "type": "Set<Reference<?>>", "declarator": "myReferences = Sets.newConcurrentHashSet()", "var_name": "myReferences"}, {"original_string": "private final LongAdder myTotalAllocatedBytes = new LongAdder();", "modifier": "private final", "type": "LongAdder", "declarator": "myTotalAllocatedBytes = new LongAdder()", "var_name": "myTotalAllocatedBytes"}, {"original_string": "private final LongAdder myTotalInUseBytes = new LongAdder();", "modifier": "private final", "type": "LongAdder", "declarator": "myTotalInUseBytes = new LongAdder()", "var_name": "myTotalInUseBytes"}, {"original_string": "private final Stats myStats = new Stats() {\n    @Override\n    public long totalBytesAllocated() {\n      return myTotalAllocatedBytes.sum();\n    }\n\n    @Override\n    public long totalBytesInUse() {\n      return myTotalInUseBytes.sum();\n    }\n\n    @Override\n    public BucketStats[] getBucketStats() {\n      return myBucketStats.values().stream()\n        .toArray(BucketStats[]::new);\n    }\n  };", "modifier": "private final", "type": "Stats", "declarator": "myStats = new Stats() {\n    @Override\n    public long totalBytesAllocated() {\n      return myTotalAllocatedBytes.sum();\n    }\n\n    @Override\n    public long totalBytesInUse() {\n      return myTotalInUseBytes.sum();\n    }\n\n    @Override\n    public BucketStats[] getBucketStats() {\n      return myBucketStats.values().stream()\n        .toArray(BucketStats[]::new);\n    }\n  }", "var_name": "myStats"}, {"original_string": "private boolean isDisposed = false;", "modifier": "private", "type": "boolean", "declarator": "isDisposed = false", "var_name": "isDisposed"}], "methods": [{"identifier": "ImagePoolImpl", "parameters": "(@NotNull int[] bucketSizes, @NotNull BiFunction<Integer, Integer, Function<Integer, Integer>> bucketSizingPolicy)", "modifiers": "", "return": "", "signature": " ImagePoolImpl(@NotNull int[] bucketSizes, @NotNull BiFunction<Integer, Integer, Function<Integer, Integer>> bucketSizingPolicy)", "full_signature": "  ImagePoolImpl(@NotNull int[] bucketSizes, @NotNull BiFunction<Integer, Integer, Function<Integer, Integer>> bucketSizingPolicy)", "class_method_signature": "ImagePoolImpl.ImagePoolImpl(@NotNull int[] bucketSizes, @NotNull BiFunction<Integer, Integer, Function<Integer, Integer>> bucketSizingPolicy)", "testcase": false, "constructor": true}, {"identifier": "getPoolKey", "parameters": "(int w, int h, int type)", "modifiers": "@NotNull private static", "return": "String", "signature": "String getPoolKey(int w, int h, int type)", "full_signature": "@NotNull private static String getPoolKey(int w, int h, int type)", "class_method_signature": "ImagePoolImpl.getPoolKey(int w, int h, int type)", "testcase": false, "constructor": false}, {"identifier": "getTypeBucket", "parameters": "(int w, int h, int type)", "modifiers": "@NotNull private", "return": "Bucket", "signature": "Bucket getTypeBucket(int w, int h, int type)", "full_signature": "@NotNull private Bucket getTypeBucket(int w, int h, int type)", "class_method_signature": "ImagePoolImpl.getTypeBucket(int w, int h, int type)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final int w, final int h, final int type, @Nullable Consumer<BufferedImage> freedCallback)", "modifiers": "@VisibleForTesting @NotNull", "return": "ImageImpl", "signature": "ImageImpl create(final int w, final int h, final int type, @Nullable Consumer<BufferedImage> freedCallback)", "full_signature": "@VisibleForTesting @NotNull ImageImpl create(final int w, final int h, final int type, @Nullable Consumer<BufferedImage> freedCallback)", "class_method_signature": "ImagePoolImpl.create(final int w, final int h, final int type, @Nullable Consumer<BufferedImage> freedCallback)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final int w, final int h, final int type)", "modifiers": "@NotNull public", "return": "ImagePool.Image", "signature": "ImagePool.Image create(final int w, final int h, final int type)", "full_signature": "@NotNull public ImagePool.Image create(final int w, final int h, final int type)", "class_method_signature": "ImagePoolImpl.create(final int w, final int h, final int type)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(@Nullable BufferedImage origin)", "modifiers": "@NotNull public", "return": "ImagePool.Image", "signature": "ImagePool.Image copyOf(@Nullable BufferedImage origin)", "full_signature": "@NotNull public ImagePool.Image copyOf(@Nullable BufferedImage origin)", "class_method_signature": "ImagePoolImpl.copyOf(@Nullable BufferedImage origin)", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "Stats", "signature": "Stats getStats()", "full_signature": "@Nullable @Override public Stats getStats()", "class_method_signature": "ImagePoolImpl.getStats()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "ImagePoolImpl.dispose()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/rendering/imagepool/ImagePoolImpl.java"}, "focal_method": {"identifier": "copyOf", "parameters": "(@Nullable BufferedImage origin)", "modifiers": "@NotNull public", "return": "ImagePool.Image", "body": "@NotNull\n  public ImagePool.Image copyOf(@Nullable BufferedImage origin) {\n    if (origin == null) {\n      return ImagePool.NULL_POOLED_IMAGE;\n    }\n\n    int w = origin.getWidth();\n    int h = origin.getHeight();\n    int type = origin.getType();\n\n    ImageImpl image = create(w, h, type, null);\n    image.drawFrom(origin);\n\n    return image;\n  }", "signature": "ImagePool.Image copyOf(@Nullable BufferedImage origin)", "full_signature": "@NotNull public ImagePool.Image copyOf(@Nullable BufferedImage origin)", "class_method_signature": "ImagePoolImpl.copyOf(@Nullable BufferedImage origin)", "testcase": false, "constructor": false, "invocations": ["getWidth", "getHeight", "getType", "create", "drawFrom"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}