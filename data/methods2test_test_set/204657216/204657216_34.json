{"test_class": {"identifier": "PartitionComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "spark-job/src/test/java/org/apache/cassandra/diff/PartitionComparatorTest.java"}, "test_case": {"identifier": "singleClusteringAllRowsMatching", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleClusteringAllRowsMatching() {\n        TableSpec t = spec(\"table1\", names(\"c1\"), names(\"v1\", \"v2\"));\n        PartitionComparator comparator = comparator(t,\n                                                    rows(row(t, 0, 1, 2),\n                                                         row(t, 1, 11, 12),\n                                                         row(t, 2, 21, 22)),\n                                                    rows(row(t, 0, 1, 2),\n                                                         row(t, 1, 11, 12),\n                                                         row(t, 2, 21, 22)));\n        PartitionStats stats = comparator.call();\n        assertStats(stats, false, true, 3, 6, 0);\n    }", "signature": "void singleClusteringAllRowsMatching()", "full_signature": "@Test public void singleClusteringAllRowsMatching()", "class_method_signature": "PartitionComparatorTest.singleClusteringAllRowsMatching()", "testcase": true, "constructor": false, "invocations": ["spec", "names", "names", "comparator", "rows", "row", "row", "row", "rows", "row", "row", "row", "call", "assertStats"]}, "focal_class": {"identifier": "PartitionComparator", "superclass": "", "interfaces": "implements Callable<PartitionStats>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PartitionComparator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PartitionComparator.class)", "var_name": "logger"}, {"original_string": "private final TableSpec tableSpec;", "modifier": "private final", "type": "TableSpec", "declarator": "tableSpec", "var_name": "tableSpec"}, {"original_string": "private final Iterator<Row> source;", "modifier": "private final", "type": "Iterator<Row>", "declarator": "source", "var_name": "source"}, {"original_string": "private final Iterator<Row> target;", "modifier": "private final", "type": "Iterator<Row>", "declarator": "target", "var_name": "target"}, {"original_string": "private final RetryStrategyProvider retryStrategyProvider;", "modifier": "private final", "type": "RetryStrategyProvider", "declarator": "retryStrategyProvider", "var_name": "retryStrategyProvider"}], "methods": [{"identifier": "PartitionComparator", "parameters": "(TableSpec tableSpec,\n                               Iterator<Row> source,\n                               Iterator<Row> target,\n                               RetryStrategyProvider retryStrategyProvider)", "modifiers": "public", "return": "", "signature": " PartitionComparator(TableSpec tableSpec,\n                               Iterator<Row> source,\n                               Iterator<Row> target,\n                               RetryStrategyProvider retryStrategyProvider)", "full_signature": "public  PartitionComparator(TableSpec tableSpec,\n                               Iterator<Row> source,\n                               Iterator<Row> target,\n                               RetryStrategyProvider retryStrategyProvider)", "class_method_signature": "PartitionComparator.PartitionComparator(TableSpec tableSpec,\n                               Iterator<Row> source,\n                               Iterator<Row> target,\n                               RetryStrategyProvider retryStrategyProvider)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "PartitionStats", "signature": "PartitionStats call()", "full_signature": "public PartitionStats call()", "class_method_signature": "PartitionComparator.call()", "testcase": false, "constructor": false}, {"identifier": "hasNextRow", "parameters": "(Type type)", "modifiers": "private", "return": "boolean", "signature": "boolean hasNextRow(Type type)", "full_signature": "private boolean hasNextRow(Type type)", "class_method_signature": "PartitionComparator.hasNextRow(Type type)", "testcase": false, "constructor": false}, {"identifier": "getNextRow", "parameters": "(Type type)", "modifiers": "private", "return": "Row", "signature": "Row getNextRow(Type type)", "full_signature": "private Row getNextRow(Type type)", "class_method_signature": "PartitionComparator.getNextRow(Type type)", "testcase": false, "constructor": false}, {"identifier": "clusteringsEqual", "parameters": "(Row source, Row target)", "modifiers": "private", "return": "boolean", "signature": "boolean clusteringsEqual(Row source, Row target)", "full_signature": "private boolean clusteringsEqual(Row source, Row target)", "class_method_signature": "PartitionComparator.clusteringsEqual(Row source, Row target)", "testcase": false, "constructor": false}, {"identifier": "checkRegularColumnEquality", "parameters": "(PartitionStats stats, Row source, Row target)", "modifiers": "private", "return": "void", "signature": "void checkRegularColumnEquality(PartitionStats stats, Row source, Row target)", "full_signature": "private void checkRegularColumnEquality(PartitionStats stats, Row source, Row target)", "class_method_signature": "PartitionComparator.checkRegularColumnEquality(PartitionStats stats, Row source, Row target)", "testcase": false, "constructor": false}], "file": "spark-job/src/main/java/org/apache/cassandra/diff/PartitionComparator.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "PartitionStats", "body": "public PartitionStats call() {\n        PartitionStats partitionStats = new PartitionStats();\n\n        if (source == null || target == null) {\n            logger.error(\"Skipping partition because one result was null (timeout despite retries)\");\n            partitionStats.skipped = true;\n            return partitionStats;\n        }\n\n        while (hasNextRow(Type.SOURCE) && hasNextRow(Type.TARGET)) {\n\n            Row sourceRow = getNextRow(Type.SOURCE);\n            Row targetRow = getNextRow(Type.TARGET);\n\n            // if primary keys don't match don't proceed any further, just mark the\n            // partition as mismatched and be done\n            if (!clusteringsEqual(sourceRow, targetRow)) {\n                partitionStats.allClusteringsMatch = false;\n                return partitionStats;\n            }\n\n            partitionStats.matchedRows++;\n\n            // if the rows match, but there are mismatching values in the regular columns\n            // we can continue processing the partition, so just flag it as mismatched and continue\n            checkRegularColumnEquality(partitionStats, sourceRow, targetRow);\n        }\n\n        // if one of the iterators isn't exhausted, then there's a mismatch at the partition level\n        if (hasNextRow(Type.SOURCE) || hasNextRow(Type.TARGET))\n            partitionStats.allClusteringsMatch = false;\n\n        return partitionStats;\n    }", "signature": "PartitionStats call()", "full_signature": "public PartitionStats call()", "class_method_signature": "PartitionComparator.call()", "testcase": false, "constructor": false, "invocations": ["error", "hasNextRow", "hasNextRow", "getNextRow", "getNextRow", "clusteringsEqual", "checkRegularColumnEquality", "hasNextRow", "hasNextRow"]}, "repository": {"repo_id": 204657216, "url": "https://github.com/apache/cassandra-diff", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 112, "license": "licensed"}}