{"test_class": {"identifier": "Jsr160RequestDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Jsr160RequestDispatcher dispatcher;", "modifier": "private", "type": "Jsr160RequestDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "private ProcessingParameters procParams;", "modifier": "private", "type": "ProcessingParameters", "declarator": "procParams", "var_name": "procParams"}], "file": "agent/jsr160/src/test/java/org/jolokia/jsr160/Jsr160RequestDispatcherTest.java"}, "test_case": {"identifier": "simpleDispatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleDispatch() throws InstanceNotFoundException, IOException, ReflectionException, AttributeNotFoundException, MBeanException, NotChangedException {\n        JmxReadRequest req = (JmxReadRequest) preparePostReadRequest(null);\n        Map result = (Map) dispatcher.dispatchRequest(req);\n        assertTrue(result.containsKey(\"HeapMemoryUsage\"));\n    }", "signature": "void simpleDispatch()", "full_signature": "@Test public void simpleDispatch()", "class_method_signature": "Jsr160RequestDispatcherTest.simpleDispatch()", "testcase": true, "constructor": false, "invocations": ["preparePostReadRequest", "dispatchRequest", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "Jsr160RequestDispatcher", "superclass": "", "interfaces": "implements RequestDispatcher", "fields": [{"original_string": "public static final String ALLOWED_TARGETS_SYSPROP = \"org.jolokia.jsr160ProxyAllowedTargets\";", "modifier": "public static final", "type": "String", "declarator": "ALLOWED_TARGETS_SYSPROP = \"org.jolokia.jsr160ProxyAllowedTargets\"", "var_name": "ALLOWED_TARGETS_SYSPROP"}, {"original_string": "public static final String ALLOWED_TARGETS_ENV = \"JOLOKIA_JSR160_PROXY_ALLOWED_TARGETS\";", "modifier": "public static final", "type": "String", "declarator": "ALLOWED_TARGETS_ENV = \"JOLOKIA_JSR160_PROXY_ALLOWED_TARGETS\"", "var_name": "ALLOWED_TARGETS_ENV"}, {"original_string": "private final Set<String> whiteList;", "modifier": "private final", "type": "Set<String>", "declarator": "whiteList", "var_name": "whiteList"}, {"original_string": "private final Set<String> blackList;", "modifier": "private final", "type": "Set<String>", "declarator": "blackList", "var_name": "blackList"}, {"original_string": "private RequestHandlerManager requestHandlerManager;", "modifier": "private", "type": "RequestHandlerManager", "declarator": "requestHandlerManager", "var_name": "requestHandlerManager"}], "methods": [{"identifier": "Jsr160RequestDispatcher", "parameters": "(Converters pConverters,\n                                   ServerHandle pServerInfo,\n                                   Restrictor pRestrictor,\n                                   Configuration pConfig)", "modifiers": "public", "return": "", "signature": " Jsr160RequestDispatcher(Converters pConverters,\n                                   ServerHandle pServerInfo,\n                                   Restrictor pRestrictor,\n                                   Configuration pConfig)", "full_signature": "public  Jsr160RequestDispatcher(Converters pConverters,\n                                   ServerHandle pServerInfo,\n                                   Restrictor pRestrictor,\n                                   Configuration pConfig)", "class_method_signature": "Jsr160RequestDispatcher.Jsr160RequestDispatcher(Converters pConverters,\n                                   ServerHandle pServerInfo,\n                                   Restrictor pRestrictor,\n                                   Configuration pConfig)", "testcase": false, "constructor": true}, {"identifier": "dispatchRequest", "parameters": "(JmxRequest pJmxReq)", "modifiers": "public", "return": "Object", "signature": "Object dispatchRequest(JmxRequest pJmxReq)", "full_signature": "public Object dispatchRequest(JmxRequest pJmxReq)", "class_method_signature": "Jsr160RequestDispatcher.dispatchRequest(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "createConnector", "parameters": "(JmxRequest pJmxReq)", "modifiers": "private", "return": "JMXConnector", "signature": "JMXConnector createConnector(JmxRequest pJmxReq)", "full_signature": "private JMXConnector createConnector(JmxRequest pJmxReq)", "class_method_signature": "Jsr160RequestDispatcher.createConnector(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "releaseConnector", "parameters": "(JMXConnector pConnector)", "modifiers": "private", "return": "void", "signature": "void releaseConnector(JMXConnector pConnector)", "full_signature": "private void releaseConnector(JMXConnector pConnector)", "class_method_signature": "Jsr160RequestDispatcher.releaseConnector(JMXConnector pConnector)", "testcase": false, "constructor": false}, {"identifier": "prepareEnv", "parameters": "(Map<String, String> pTargetConfig)", "modifiers": "protected", "return": "Map<String,Object>", "signature": "Map<String,Object> prepareEnv(Map<String, String> pTargetConfig)", "full_signature": "protected Map<String,Object> prepareEnv(Map<String, String> pTargetConfig)", "class_method_signature": "Jsr160RequestDispatcher.prepareEnv(Map<String, String> pTargetConfig)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(JmxRequest pJmxRequest)", "modifiers": "public", "return": "boolean", "signature": "boolean canHandle(JmxRequest pJmxRequest)", "full_signature": "public boolean canHandle(JmxRequest pJmxRequest)", "class_method_signature": "Jsr160RequestDispatcher.canHandle(JmxRequest pJmxRequest)", "testcase": false, "constructor": false}, {"identifier": "useReturnValueWithPath", "parameters": "(JmxRequest pJmxRequest)", "modifiers": "public", "return": "boolean", "signature": "boolean useReturnValueWithPath(JmxRequest pJmxRequest)", "full_signature": "public boolean useReturnValueWithPath(JmxRequest pJmxRequest)", "class_method_signature": "Jsr160RequestDispatcher.useReturnValueWithPath(JmxRequest pJmxRequest)", "testcase": false, "constructor": false}, {"identifier": "acceptTargetUrl", "parameters": "(String urlS)", "modifiers": "private", "return": "boolean", "signature": "boolean acceptTargetUrl(String urlS)", "full_signature": "private boolean acceptTargetUrl(String urlS)", "class_method_signature": "Jsr160RequestDispatcher.acceptTargetUrl(String urlS)", "testcase": false, "constructor": false}, {"identifier": "checkPattern", "parameters": "(Set<String> patterns, String urlS, boolean isPositive)", "modifiers": "private", "return": "boolean", "signature": "boolean checkPattern(Set<String> patterns, String urlS, boolean isPositive)", "full_signature": "private boolean checkPattern(Set<String> patterns, String urlS, boolean isPositive)", "class_method_signature": "Jsr160RequestDispatcher.checkPattern(Set<String> patterns, String urlS, boolean isPositive)", "testcase": false, "constructor": false}, {"identifier": "extractWhiteList", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> extractWhiteList(Configuration pConfig)", "full_signature": "private Set<String> extractWhiteList(Configuration pConfig)", "class_method_signature": "Jsr160RequestDispatcher.extractWhiteList(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "extractFrom", "parameters": "(String ... paths)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> extractFrom(String ... paths)", "full_signature": "private Set<String> extractFrom(String ... paths)", "class_method_signature": "Jsr160RequestDispatcher.extractFrom(String ... paths)", "testcase": false, "constructor": false}, {"identifier": "readPatterns", "parameters": "(String pPath)", "modifiers": "private", "return": "List<? extends String>", "signature": "List<? extends String> readPatterns(String pPath)", "full_signature": "private List<? extends String> readPatterns(String pPath)", "class_method_signature": "Jsr160RequestDispatcher.readPatterns(String pPath)", "testcase": false, "constructor": false}, {"identifier": "extractBlackList", "parameters": "(Configuration pConfig)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> extractBlackList(Configuration pConfig)", "full_signature": "private Set<String> extractBlackList(Configuration pConfig)", "class_method_signature": "Jsr160RequestDispatcher.extractBlackList(Configuration pConfig)", "testcase": false, "constructor": false}], "file": "agent/jsr160/src/main/java/org/jolokia/jsr160/Jsr160RequestDispatcher.java"}, "focal_method": {"identifier": "dispatchRequest", "parameters": "(JmxRequest pJmxReq)", "modifiers": "public", "return": "Object", "body": "public Object dispatchRequest(JmxRequest pJmxReq)\n            throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException, IOException, NotChangedException {\n\n        JsonRequestHandler handler = requestHandlerManager.getRequestHandler(pJmxReq.getType());\n        JMXConnector connector = null;\n        try {\n            connector = createConnector(pJmxReq);\n            connector.connect();\n            MBeanServerConnection connection = connector.getMBeanServerConnection();\n            if (handler.handleAllServersAtOnce(pJmxReq)) {\n                // There is no way to get remotely all MBeanServers ...\n                MBeanServerExecutor manager = new MBeanServerExecutorRemote(connection);\n                return handler.handleRequest(manager, pJmxReq);\n            } else {\n                return handler.handleRequest(connection, pJmxReq);\n            }\n        } finally {\n            releaseConnector(connector);\n        }\n    }", "signature": "Object dispatchRequest(JmxRequest pJmxReq)", "full_signature": "public Object dispatchRequest(JmxRequest pJmxReq)", "class_method_signature": "Jsr160RequestDispatcher.dispatchRequest(JmxRequest pJmxReq)", "testcase": false, "constructor": false, "invocations": ["getRequestHandler", "getType", "createConnector", "connect", "getMBeanServerConnection", "handleAllServersAtOnce", "handleRequest", "handleRequest", "releaseConnector"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}