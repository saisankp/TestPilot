{"test_class": {"identifier": "AbstractVectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractVector testVector;", "modifier": "private", "type": "AbstractVector", "declarator": "testVector", "var_name": "testVector"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/math/primitives/vector/AbstractVectorTest.java"}, "test_case": {"identifier": "all", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void all() {\n        assertNotNull(MathTestConstants.NULL_VAL, testVector.all());\n\n        assertNotNull(MathTestConstants.NULL_VAL, getAbstractVector(createStorage()).all());\n\n        getAbstractVector().all().iterator().next();\n    }", "signature": "void all()", "full_signature": "@Test(expected = NullPointerException.class) public void all()", "class_method_signature": "AbstractVectorTest.all()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "all", "assertNotNull", "all", "getAbstractVector", "createStorage", "next", "iterator", "all", "getAbstractVector"]}, "focal_class": {"identifier": "AbstractVector", "superclass": "", "interfaces": "implements Vector", "fields": [{"original_string": "private VectorStorage sto;", "modifier": "private", "type": "VectorStorage", "declarator": "sto", "var_name": "sto"}, {"original_string": "private Map<String, Object> meta = new HashMap<>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "meta = new HashMap<>()", "var_name": "meta"}, {"original_string": "private IgniteUuid guid = IgniteUuid.randomUuid();", "modifier": "private", "type": "IgniteUuid", "declarator": "guid = IgniteUuid.randomUuid()", "var_name": "guid"}, {"original_string": "private double lenSq = 0.0;", "modifier": "private", "type": "double", "declarator": "lenSq = 0.0", "var_name": "lenSq"}, {"original_string": "private Element maxElm = null;", "modifier": "private", "type": "Element", "declarator": "maxElm = null", "var_name": "maxElm"}, {"original_string": "private Element minElm = null;", "modifier": "private", "type": "Element", "declarator": "minElm = null", "var_name": "minElm"}, {"original_string": "private boolean readOnly = false;", "modifier": "private", "type": "boolean", "declarator": "readOnly = false", "var_name": "readOnly"}, {"original_string": "private static final String RO_MSG = \"Vector is read-only.\";", "modifier": "private static final", "type": "String", "declarator": "RO_MSG = \"Vector is read-only.\"", "var_name": "RO_MSG"}], "methods": [{"identifier": "ensureReadOnly", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureReadOnly()", "full_signature": "private void ensureReadOnly()", "class_method_signature": "AbstractVector.ensureReadOnly()", "testcase": false, "constructor": false}, {"identifier": "AbstractVector", "parameters": "(VectorStorage sto)", "modifiers": "public", "return": "", "signature": " AbstractVector(VectorStorage sto)", "full_signature": "public  AbstractVector(VectorStorage sto)", "class_method_signature": "AbstractVector.AbstractVector(VectorStorage sto)", "testcase": false, "constructor": true}, {"identifier": "AbstractVector", "parameters": "(boolean readOnly, VectorStorage sto)", "modifiers": "public", "return": "", "signature": " AbstractVector(boolean readOnly, VectorStorage sto)", "full_signature": "public  AbstractVector(boolean readOnly, VectorStorage sto)", "class_method_signature": "AbstractVector.AbstractVector(boolean readOnly, VectorStorage sto)", "testcase": false, "constructor": true}, {"identifier": "AbstractVector", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractVector()", "full_signature": "public  AbstractVector()", "class_method_signature": "AbstractVector.AbstractVector()", "testcase": false, "constructor": true}, {"identifier": "setStorage", "parameters": "(VectorStorage sto)", "modifiers": "protected", "return": "void", "signature": "void setStorage(VectorStorage sto)", "full_signature": "protected void setStorage(VectorStorage sto)", "class_method_signature": "AbstractVector.setStorage(VectorStorage sto)", "testcase": false, "constructor": false}, {"identifier": "storageSet", "parameters": "(int i, double v)", "modifiers": "protected", "return": "void", "signature": "void storageSet(int i, double v)", "full_signature": "protected void storageSet(int i, double v)", "class_method_signature": "AbstractVector.storageSet(int i, double v)", "testcase": false, "constructor": false}, {"identifier": "storageSetRaw", "parameters": "(int i, Serializable v)", "modifiers": "protected", "return": "void", "signature": "void storageSetRaw(int i, Serializable v)", "full_signature": "protected void storageSetRaw(int i, Serializable v)", "class_method_signature": "AbstractVector.storageSetRaw(int i, Serializable v)", "testcase": false, "constructor": false}, {"identifier": "storageGet", "parameters": "(int i)", "modifiers": "protected", "return": "double", "signature": "double storageGet(int i)", "full_signature": "protected double storageGet(int i)", "class_method_signature": "AbstractVector.storageGet(int i)", "testcase": false, "constructor": false}, {"identifier": "storageGetRaw", "parameters": "(int i)", "modifiers": "protected", "return": "T", "signature": "T storageGetRaw(int i)", "full_signature": "protected T storageGetRaw(int i)", "class_method_signature": "AbstractVector.storageGetRaw(int i)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "AbstractVector.size()", "testcase": false, "constructor": false}, {"identifier": "checkIndex", "parameters": "(int idx)", "modifiers": "protected", "return": "void", "signature": "void checkIndex(int idx)", "full_signature": "protected void checkIndex(int idx)", "class_method_signature": "AbstractVector.checkIndex(int idx)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int idx)", "modifiers": "@Override public", "return": "double", "signature": "double get(int idx)", "full_signature": "@Override public double get(int idx)", "class_method_signature": "AbstractVector.get(int idx)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int idx)", "modifiers": "@Override public", "return": "double", "signature": "double getX(int idx)", "full_signature": "@Override public double getX(int idx)", "class_method_signature": "AbstractVector.getX(int idx)", "testcase": false, "constructor": false}, {"identifier": "getRaw", "parameters": "(int idx)", "modifiers": "@Override public", "return": "T", "signature": "T getRaw(int idx)", "full_signature": "@Override public T getRaw(int idx)", "class_method_signature": "AbstractVector.getRaw(int idx)", "testcase": false, "constructor": false}, {"identifier": "getRawX", "parameters": "(int idx)", "modifiers": "@Override public", "return": "T", "signature": "T getRawX(int idx)", "full_signature": "@Override public T getRawX(int idx)", "class_method_signature": "AbstractVector.getRawX(int idx)", "testcase": false, "constructor": false}, {"identifier": "isArrayBased", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isArrayBased()", "full_signature": "@Override public boolean isArrayBased()", "class_method_signature": "AbstractVector.isArrayBased()", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector sort()", "full_signature": "@Override public Vector sort()", "class_method_signature": "AbstractVector.sort()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(IgniteDoubleFunction<Double> fun)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector map(IgniteDoubleFunction<Double> fun)", "full_signature": "@Override public Vector map(IgniteDoubleFunction<Double> fun)", "class_method_signature": "AbstractVector.map(IgniteDoubleFunction<Double> fun)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Vector vec, IgniteBiFunction<Double, Double, Double> fun)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector map(Vector vec, IgniteBiFunction<Double, Double, Double> fun)", "full_signature": "@Override public Vector map(Vector vec, IgniteBiFunction<Double, Double, Double> fun)", "class_method_signature": "AbstractVector.map(Vector vec, IgniteBiFunction<Double, Double, Double> fun)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(IgniteBiFunction<Double, Double, Double> fun, double y)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector map(IgniteBiFunction<Double, Double, Double> fun, double y)", "full_signature": "@Override public Vector map(IgniteBiFunction<Double, Double, Double> fun, double y)", "class_method_signature": "AbstractVector.map(IgniteBiFunction<Double, Double, Double> fun, double y)", "testcase": false, "constructor": false}, {"identifier": "makeElement", "parameters": "(int idx)", "modifiers": "protected", "return": "Element", "signature": "Element makeElement(int idx)", "full_signature": "protected Element makeElement(int idx)", "class_method_signature": "AbstractVector.makeElement(int idx)", "testcase": false, "constructor": false}, {"identifier": "minElement", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element minElement()", "full_signature": "@Override public Element minElement()", "class_method_signature": "AbstractVector.minElement()", "testcase": false, "constructor": false}, {"identifier": "maxElement", "parameters": "()", "modifiers": "@Override public", "return": "Element", "signature": "Element maxElement()", "full_signature": "@Override public Element maxElement()", "class_method_signature": "AbstractVector.maxElement()", "testcase": false, "constructor": false}, {"identifier": "minValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double minValue()", "full_signature": "@Override public double minValue()", "class_method_signature": "AbstractVector.minValue()", "testcase": false, "constructor": false}, {"identifier": "maxValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double maxValue()", "full_signature": "@Override public double maxValue()", "class_method_signature": "AbstractVector.maxValue()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int idx, double val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector set(int idx, double val)", "full_signature": "@Override public Vector set(int idx, double val)", "class_method_signature": "AbstractVector.set(int idx, double val)", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(int idx, double val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector setX(int idx, double val)", "full_signature": "@Override public Vector setX(int idx, double val)", "class_method_signature": "AbstractVector.setX(int idx, double val)", "testcase": false, "constructor": false}, {"identifier": "setRaw", "parameters": "(int idx, Serializable val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector setRaw(int idx, Serializable val)", "full_signature": "@Override public Vector setRaw(int idx, Serializable val)", "class_method_signature": "AbstractVector.setRaw(int idx, Serializable val)", "testcase": false, "constructor": false}, {"identifier": "setRawX", "parameters": "(int idx, Serializable val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector setRawX(int idx, Serializable val)", "full_signature": "@Override public Vector setRawX(int idx, Serializable val)", "class_method_signature": "AbstractVector.setRawX(int idx, Serializable val)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(int idx, double val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector increment(int idx, double val)", "full_signature": "@Override public Vector increment(int idx, double val)", "class_method_signature": "AbstractVector.increment(int idx, double val)", "testcase": false, "constructor": false}, {"identifier": "incrementX", "parameters": "(int idx, double val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector incrementX(int idx, double val)", "full_signature": "@Override public Vector incrementX(int idx, double val)", "class_method_signature": "AbstractVector.incrementX(int idx, double val)", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "(double val)", "modifiers": "protected", "return": "boolean", "signature": "boolean isZero(double val)", "full_signature": "protected boolean isZero(double val)", "class_method_signature": "AbstractVector.isZero(double val)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double sum()", "full_signature": "@Override public double sum()", "class_method_signature": "AbstractVector.sum()", "testcase": false, "constructor": false}, {"identifier": "guid", "parameters": "()", "modifiers": "@Override public", "return": "IgniteUuid", "signature": "IgniteUuid guid()", "full_signature": "@Override public IgniteUuid guid()", "class_method_signature": "AbstractVector.guid()", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Element>", "signature": "Iterable<Element> all()", "full_signature": "@Override public Iterable<Element> all()", "class_method_signature": "AbstractVector.all()", "testcase": false, "constructor": false}, {"identifier": "nonZeroElements", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int nonZeroElements()", "full_signature": "@Override public int nonZeroElements()", "class_method_signature": "AbstractVector.nonZeroElements()", "testcase": false, "constructor": false}, {"identifier": "foldMap", "parameters": "(IgniteBiFunction<T, Double, T> foldFun, IgniteDoubleFunction<Double> mapFun,\n        T zeroVal)", "modifiers": "@Override public", "return": "T", "signature": "T foldMap(IgniteBiFunction<T, Double, T> foldFun, IgniteDoubleFunction<Double> mapFun,\n        T zeroVal)", "full_signature": "@Override public T foldMap(IgniteBiFunction<T, Double, T> foldFun, IgniteDoubleFunction<Double> mapFun,\n        T zeroVal)", "class_method_signature": "AbstractVector.foldMap(IgniteBiFunction<T, Double, T> foldFun, IgniteDoubleFunction<Double> mapFun,\n        T zeroVal)", "testcase": false, "constructor": false}, {"identifier": "foldMap", "parameters": "(Vector vec, IgniteBiFunction<T, Double, T> foldFun,\n        IgniteBiFunction<Double, Double, Double> combFun, T zeroVal)", "modifiers": "@Override public", "return": "T", "signature": "T foldMap(Vector vec, IgniteBiFunction<T, Double, T> foldFun,\n        IgniteBiFunction<Double, Double, Double> combFun, T zeroVal)", "full_signature": "@Override public T foldMap(Vector vec, IgniteBiFunction<T, Double, T> foldFun,\n        IgniteBiFunction<Double, Double, Double> combFun, T zeroVal)", "class_method_signature": "AbstractVector.foldMap(Vector vec, IgniteBiFunction<T, Double, T> foldFun,\n        IgniteBiFunction<Double, Double, Double> combFun, T zeroVal)", "testcase": false, "constructor": false}, {"identifier": "nonZeroes", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Element>", "signature": "Iterable<Element> nonZeroes()", "full_signature": "@Override public Iterable<Element> nonZeroes()", "class_method_signature": "AbstractVector.nonZeroes()", "testcase": false, "constructor": false}, {"identifier": "getMetaStorage", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getMetaStorage()", "full_signature": "@Override public Map<String, Object> getMetaStorage()", "class_method_signature": "AbstractVector.getMetaStorage()", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(double val)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(double val)", "full_signature": "@Override public Vector assign(double val)", "class_method_signature": "AbstractVector.assign(double val)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(double[] vals)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(double[] vals)", "full_signature": "@Override public Vector assign(double[] vals)", "class_method_signature": "AbstractVector.assign(double[] vals)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(Vector vec)", "full_signature": "@Override public Vector assign(Vector vec)", "class_method_signature": "AbstractVector.assign(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(IntToDoubleFunction fun)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector assign(IntToDoubleFunction fun)", "full_signature": "@Override public Vector assign(IntToDoubleFunction fun)", "class_method_signature": "AbstractVector.assign(IntToDoubleFunction fun)", "testcase": false, "constructor": false}, {"identifier": "allSpliterator", "parameters": "()", "modifiers": "@Override public", "return": "Spliterator<Double>", "signature": "Spliterator<Double> allSpliterator()", "full_signature": "@Override public Spliterator<Double> allSpliterator()", "class_method_signature": "AbstractVector.allSpliterator()", "testcase": false, "constructor": false}, {"identifier": "nonZeroSpliterator", "parameters": "()", "modifiers": "@Override public", "return": "Spliterator<Double>", "signature": "Spliterator<Double> nonZeroSpliterator()", "full_signature": "@Override public Spliterator<Double> nonZeroSpliterator()", "class_method_signature": "AbstractVector.nonZeroSpliterator()", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "double", "signature": "double dot(Vector vec)", "full_signature": "@Override public double dot(Vector vec)", "class_method_signature": "AbstractVector.dot(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "getLengthSquared", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getLengthSquared()", "full_signature": "@Override public double getLengthSquared()", "class_method_signature": "AbstractVector.getLengthSquared()", "testcase": false, "constructor": false}, {"identifier": "isDense", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDense()", "full_signature": "@Override public boolean isDense()", "class_method_signature": "AbstractVector.isDense()", "testcase": false, "constructor": false}, {"identifier": "isDistributed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDistributed()", "full_signature": "@Override public boolean isDistributed()", "class_method_signature": "AbstractVector.isDistributed()", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNumeric()", "full_signature": "@Override public boolean isNumeric()", "class_method_signature": "AbstractVector.isNumeric()", "testcase": false, "constructor": false}, {"identifier": "getStorage", "parameters": "()", "modifiers": "@Override public", "return": "VectorStorage", "signature": "VectorStorage getStorage()", "full_signature": "@Override public VectorStorage getStorage()", "class_method_signature": "AbstractVector.getStorage()", "testcase": false, "constructor": false}, {"identifier": "viewPart", "parameters": "(int off, int len)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector viewPart(int off, int len)", "full_signature": "@Override public Vector viewPart(int off, int len)", "class_method_signature": "AbstractVector.viewPart(int off, int len)", "testcase": false, "constructor": false}, {"identifier": "cross", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix cross(Vector vec)", "full_signature": "@Override public Matrix cross(Vector vec)", "class_method_signature": "AbstractVector.cross(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "toMatrix", "parameters": "(boolean rowLike)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix toMatrix(boolean rowLike)", "full_signature": "@Override public Matrix toMatrix(boolean rowLike)", "class_method_signature": "AbstractVector.toMatrix(boolean rowLike)", "testcase": false, "constructor": false}, {"identifier": "toMatrixPlusOne", "parameters": "(boolean rowLike, double zeroVal)", "modifiers": "@Override public", "return": "Matrix", "signature": "Matrix toMatrixPlusOne(boolean rowLike, double zeroVal)", "full_signature": "@Override public Matrix toMatrixPlusOne(boolean rowLike, double zeroVal)", "class_method_signature": "AbstractVector.toMatrixPlusOne(boolean rowLike, double zeroVal)", "testcase": false, "constructor": false}, {"identifier": "getDistanceSquared", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "double", "signature": "double getDistanceSquared(Vector vec)", "full_signature": "@Override public double getDistanceSquared(Vector vec)", "class_method_signature": "AbstractVector.getDistanceSquared(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "checkCardinality", "parameters": "(Vector vec)", "modifiers": "protected", "return": "void", "signature": "void checkCardinality(Vector vec)", "full_signature": "protected void checkCardinality(Vector vec)", "class_method_signature": "AbstractVector.checkCardinality(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "checkCardinality", "parameters": "(double[] vec)", "modifiers": "protected", "return": "void", "signature": "void checkCardinality(double[] vec)", "full_signature": "protected void checkCardinality(double[] vec)", "class_method_signature": "AbstractVector.checkCardinality(double[] vec)", "testcase": false, "constructor": false}, {"identifier": "checkCardinality", "parameters": "(int[] arr)", "modifiers": "protected", "return": "void", "signature": "void checkCardinality(int[] arr)", "full_signature": "protected void checkCardinality(int[] arr)", "class_method_signature": "AbstractVector.checkCardinality(int[] arr)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector minus(Vector vec)", "full_signature": "@Override public Vector minus(Vector vec)", "class_method_signature": "AbstractVector.minus(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector plus(double x)", "full_signature": "@Override public Vector plus(double x)", "class_method_signature": "AbstractVector.plus(double x)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector divide(double x)", "full_signature": "@Override public Vector divide(double x)", "class_method_signature": "AbstractVector.divide(double x)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(double x)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector times(double x)", "full_signature": "@Override public Vector times(double x)", "class_method_signature": "AbstractVector.times(double x)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector times(Vector vec)", "full_signature": "@Override public Vector times(Vector vec)", "class_method_signature": "AbstractVector.times(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector plus(Vector vec)", "full_signature": "@Override public Vector plus(Vector vec)", "class_method_signature": "AbstractVector.plus(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector logNormalize()", "full_signature": "@Override public Vector logNormalize()", "class_method_signature": "AbstractVector.logNormalize()", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "(double power)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector logNormalize(double power)", "full_signature": "@Override public Vector logNormalize(double power)", "class_method_signature": "AbstractVector.logNormalize(double power)", "testcase": false, "constructor": false}, {"identifier": "logNormalize", "parameters": "(double power, double normLen)", "modifiers": "private", "return": "Vector", "signature": "Vector logNormalize(double power, double normLen)", "full_signature": "private Vector logNormalize(double power, double normLen)", "class_method_signature": "AbstractVector.logNormalize(double power, double normLen)", "testcase": false, "constructor": false}, {"identifier": "kNorm", "parameters": "(double power)", "modifiers": "@Override public", "return": "double", "signature": "double kNorm(double power)", "full_signature": "@Override public double kNorm(double power)", "class_method_signature": "AbstractVector.kNorm(double power)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector normalize()", "full_signature": "@Override public Vector normalize()", "class_method_signature": "AbstractVector.normalize()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(double power)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector normalize(double power)", "full_signature": "@Override public Vector normalize(double power)", "class_method_signature": "AbstractVector.normalize(double power)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector copy()", "full_signature": "@Override public Vector copy()", "class_method_signature": "AbstractVector.copy()", "testcase": false, "constructor": false}, {"identifier": "copyOfRange", "parameters": "(int from, int to)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector copyOfRange(int from, int to)", "full_signature": "@Override public Vector copyOfRange(int from, int to)", "class_method_signature": "AbstractVector.copyOfRange(int from, int to)", "testcase": false, "constructor": false}, {"identifier": "dotSelf", "parameters": "()", "modifiers": "protected", "return": "double", "signature": "double dotSelf()", "full_signature": "protected double dotSelf()", "class_method_signature": "AbstractVector.dotSelf()", "testcase": false, "constructor": false}, {"identifier": "getElement", "parameters": "(int idx)", "modifiers": "@Override public", "return": "Element", "signature": "Element getElement(int idx)", "full_signature": "@Override public Element getElement(int idx)", "class_method_signature": "AbstractVector.getElement(int idx)", "testcase": false, "constructor": false}, {"identifier": "writeExternal", "parameters": "(ObjectOutput out)", "modifiers": "@Override public", "return": "void", "signature": "void writeExternal(ObjectOutput out)", "full_signature": "@Override public void writeExternal(ObjectOutput out)", "class_method_signature": "AbstractVector.writeExternal(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "readExternal", "parameters": "(ObjectInput in)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void readExternal(ObjectInput in)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void readExternal(ObjectInput in)", "class_method_signature": "AbstractVector.readExternal(ObjectInput in)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "AbstractVector.destroy()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractVector.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(int idx, IgniteIntDoubleToDoubleBiFunction f)", "modifiers": "@Override public", "return": "void", "signature": "void compute(int idx, IgniteIntDoubleToDoubleBiFunction f)", "full_signature": "@Override public void compute(int idx, IgniteIntDoubleToDoubleBiFunction f)", "class_method_signature": "AbstractVector.compute(int idx, IgniteIntDoubleToDoubleBiFunction f)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/math/primitives/vector/AbstractVector.java"}, "focal_method": {"identifier": "all", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Element>", "body": "@Override public Iterable<Element> all() {\n        return new Iterable<Element>() {\n            private int idx = 0;\n\n            /** {@inheritDoc} */\n            @NotNull\n            @Override public Iterator<Element> iterator() {\n                return new Iterator<Element>() {\n                    /** {@inheritDoc} */\n                    @Override public boolean hasNext() {\n                        return size() > 0 && idx < size();\n                    }\n\n                    /** {@inheritDoc} */\n                    @Override public Element next() {\n                        if (hasNext())\n                            return getElement(idx++);\n\n                        throw new NoSuchElementException();\n                    }\n                };\n            }\n        };\n    }", "signature": "Iterable<Element> all()", "full_signature": "@Override public Iterable<Element> all()", "class_method_signature": "AbstractVector.all()", "testcase": false, "constructor": false, "invocations": ["size", "size", "hasNext", "getElement"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}