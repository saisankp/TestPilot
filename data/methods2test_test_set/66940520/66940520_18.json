{"test_class": {"identifier": "EventTrackerConverterServiceTest", "superclass": "extends DhisConvenienceTest", "interfaces": "", "fields": [{"original_string": "private final static String PROGRAM_STAGE_UID = \"ProgramStageUid\";", "modifier": "private final static", "type": "String", "declarator": "PROGRAM_STAGE_UID = \"ProgramStageUid\"", "var_name": "PROGRAM_STAGE_UID"}, {"original_string": "private final static String ORGANISATION_UNIT_UID = \"OrganisationUnitUid\";", "modifier": "private final static", "type": "String", "declarator": "ORGANISATION_UNIT_UID = \"OrganisationUnitUid\"", "var_name": "ORGANISATION_UNIT_UID"}, {"original_string": "private final static String PROGRAM_UID = \"ProgramUid\";", "modifier": "private final static", "type": "String", "declarator": "PROGRAM_UID = \"ProgramUid\"", "var_name": "PROGRAM_UID"}, {"original_string": "private NotesConverterService notesConverterService = new NotesConverterService();", "modifier": "private", "type": "NotesConverterService", "declarator": "notesConverterService = new NotesConverterService()", "var_name": "notesConverterService"}, {"original_string": "private TrackerConverterService<Event, ProgramStageInstance> trackerConverterService = new EventTrackerConverterService(\n        notesConverterService );", "modifier": "private", "type": "TrackerConverterService<Event, ProgramStageInstance>", "declarator": "trackerConverterService = new EventTrackerConverterService(\n        notesConverterService )", "var_name": "trackerConverterService"}, {"original_string": "@Mock\n    public TrackerPreheat preheat;", "modifier": "@Mock\n    public", "type": "TrackerPreheat", "declarator": "preheat", "var_name": "preheat"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/converter/EventTrackerConverterServiceTest.java"}, "test_case": {"identifier": "testToProgramStageInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToProgramStageInstance()\n    {\n        Event event = new Event();\n        event.setProgram( PROGRAM_UID );\n        event.setProgramStage( PROGRAM_STAGE_UID );\n        event.setOrgUnit( ORGANISATION_UNIT_UID );\n\n        ProgramStageInstance programStageInstance = trackerConverterService.from( preheat, event );\n\n        assertNotNull( programStageInstance );\n        assertNotNull( programStageInstance.getProgramStage() );\n        assertNotNull( programStageInstance.getProgramStage().getProgram() );\n        assertNotNull( programStageInstance.getOrganisationUnit() );\n\n        assertEquals( PROGRAM_UID, programStageInstance.getProgramStage().getProgram().getUid() );\n        assertEquals( PROGRAM_STAGE_UID, programStageInstance.getProgramStage().getUid() );\n        assertEquals( ORGANISATION_UNIT_UID, programStageInstance.getOrganisationUnit().getUid() );\n    }", "signature": "void testToProgramStageInstance()", "full_signature": "@Test public void testToProgramStageInstance()", "class_method_signature": "EventTrackerConverterServiceTest.testToProgramStageInstance()", "testcase": true, "constructor": false, "invocations": ["setProgram", "setProgramStage", "setOrgUnit", "from", "assertNotNull", "assertNotNull", "getProgramStage", "assertNotNull", "getProgram", "getProgramStage", "assertNotNull", "getOrganisationUnit", "assertEquals", "getUid", "getProgram", "getProgramStage", "assertEquals", "getUid", "getProgramStage", "assertEquals", "getUid", "getOrganisationUnit"]}, "focal_class": {"identifier": "EventTrackerConverterService", "superclass": "", "interfaces": "implements TrackerConverterService<Event, ProgramStageInstance>", "fields": [{"original_string": "private final NotesConverterService notesConverterService;", "modifier": "private final", "type": "NotesConverterService", "declarator": "notesConverterService", "var_name": "notesConverterService"}], "methods": [{"identifier": "EventTrackerConverterService", "parameters": "( NotesConverterService notesConverterService )", "modifiers": "public", "return": "", "signature": " EventTrackerConverterService( NotesConverterService notesConverterService )", "full_signature": "public  EventTrackerConverterService( NotesConverterService notesConverterService )", "class_method_signature": "EventTrackerConverterService.EventTrackerConverterService( NotesConverterService notesConverterService )", "testcase": false, "constructor": true}, {"identifier": "to", "parameters": "( ProgramStageInstance programStageInstance )", "modifiers": "@Override public", "return": "Event", "signature": "Event to( ProgramStageInstance programStageInstance )", "full_signature": "@Override public Event to( ProgramStageInstance programStageInstance )", "class_method_signature": "EventTrackerConverterService.to( ProgramStageInstance programStageInstance )", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "( List<ProgramStageInstance> programStageInstances )", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> to( List<ProgramStageInstance> programStageInstances )", "full_signature": "@Override public List<Event> to( List<ProgramStageInstance> programStageInstances )", "class_method_signature": "EventTrackerConverterService.to( List<ProgramStageInstance> programStageInstances )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, Event event )", "modifiers": "@Override public", "return": "ProgramStageInstance", "signature": "ProgramStageInstance from( TrackerPreheat preheat, Event event )", "full_signature": "@Override public ProgramStageInstance from( TrackerPreheat preheat, Event event )", "class_method_signature": "EventTrackerConverterService.from( TrackerPreheat preheat, Event event )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, List<Event> events )", "modifiers": "@Override public", "return": "List<ProgramStageInstance>", "signature": "List<ProgramStageInstance> from( TrackerPreheat preheat, List<Event> events )", "full_signature": "@Override public List<ProgramStageInstance> from( TrackerPreheat preheat, List<Event> events )", "class_method_signature": "EventTrackerConverterService.from( TrackerPreheat preheat, List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "fromForRuleEngine", "parameters": "( TrackerPreheat preheat, Event event )", "modifiers": "@Override public", "return": "ProgramStageInstance", "signature": "ProgramStageInstance fromForRuleEngine( TrackerPreheat preheat, Event event )", "full_signature": "@Override public ProgramStageInstance fromForRuleEngine( TrackerPreheat preheat, Event event )", "class_method_signature": "EventTrackerConverterService.fromForRuleEngine( TrackerPreheat preheat, Event event )", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "( TrackerPreheat preheat, Event event, ProgramStageInstance programStageInstance )", "modifiers": "private", "return": "ProgramStageInstance", "signature": "ProgramStageInstance from( TrackerPreheat preheat, Event event, ProgramStageInstance programStageInstance )", "full_signature": "private ProgramStageInstance from( TrackerPreheat preheat, Event event, ProgramStageInstance programStageInstance )", "class_method_signature": "EventTrackerConverterService.from( TrackerPreheat preheat, Event event, ProgramStageInstance programStageInstance )", "testcase": false, "constructor": false}, {"identifier": "getProgramInstance", "parameters": "( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n        Program program )", "modifiers": "private", "return": "ProgramInstance", "signature": "ProgramInstance getProgramInstance( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n        Program program )", "full_signature": "private ProgramInstance getProgramInstance( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n        Program program )", "class_method_signature": "EventTrackerConverterService.getProgramInstance( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n        Program program )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java"}, "focal_method": {"identifier": "from", "parameters": "( TrackerPreheat preheat, Event event )", "modifiers": "@Override public", "return": "ProgramStageInstance", "body": "@Override\n    public ProgramStageInstance from( TrackerPreheat preheat, Event event )\n    {\n        ProgramStageInstance programStageInstance = preheat.getEvent( TrackerIdScheme.UID, event.getEvent() );\n        return from( preheat, event, programStageInstance );\n    }", "signature": "ProgramStageInstance from( TrackerPreheat preheat, Event event )", "full_signature": "@Override public ProgramStageInstance from( TrackerPreheat preheat, Event event )", "class_method_signature": "EventTrackerConverterService.from( TrackerPreheat preheat, Event event )", "testcase": false, "constructor": false, "invocations": ["getEvent", "getEvent", "from"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}