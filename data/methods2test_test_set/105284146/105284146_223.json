{"test_class": {"identifier": "BranchDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BranchDataTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BranchDataTest.class)", "var_name": "LOG"}, {"original_string": "private static final double TOLERANCE_VOLTAGE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_VOLTAGE = 0.001", "var_name": "TOLERANCE_VOLTAGE"}, {"original_string": "private static final double TOLERANCE_FLOW = 0.01;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_FLOW = 0.01", "var_name": "TOLERANCE_FLOW"}, {"original_string": "private static final double TOLERANCE_BALANCE_EXACT = 1e-10;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_BALANCE_EXACT = 1e-10", "var_name": "TOLERANCE_BALANCE_EXACT"}, {"original_string": "private static final double TOLERANCE_BALANCE_3W_STAR_BUS = 0.8;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_BALANCE_3W_STAR_BUS = 0.8", "var_name": "TOLERANCE_BALANCE_3W_STAR_BUS"}, {"original_string": "private static final double TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_VS = 0.03;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_VS = 0.03", "var_name": "TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_VS"}, {"original_string": "private static final double TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_V1V2V3Y = 0.3;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_V1V2V3Y = 0.3", "var_name": "TOLERANCE_FLOW_WHEN_3W_STAR_BUS_FROM_V1V2V3Y"}], "file": "iidm/iidm-api/src/test/java/com/powsybl/iidm/network/util/BranchDataTest.java"}, "test_case": {"identifier": "testCAS2EntsoeLoadFlowExplicitLineAndPhaseShifter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCAS2EntsoeLoadFlowExplicitLineAndPhaseShifter() {\n        BranchTestCase line = cas2EntsoeLoadFlowExplicitLine();\n        BranchTestCase pst = cas2EntsoeLoadFlowExplicitPhaseShiftTransformer();\n        Flow load = cas2EntsoeLoadFlowExplicitLoad();\n        Flow generator = cas2EntsoeLoadFlowExplicitGenerator();\n\n        // Obtain flows at both ends of line and phase shifter\n        BranchData pline = piModelFlows(line);\n        BranchData ppst = piModelFlows(pst);\n\n        // And check bus balance at each side\n        // At end1 (load) the mismatch should be zero\n        // because load values are given with all significant digits\n        // and voltages have been copied from Excel documentation,\n        // where they have sufficient precision\n        // At end2 (generator, slack bus) the mismatch should be small:\n        // generator injection in P and Q are provided with low precision\n        // (P with 10e-2, Q with 10e-4)\n        LOG.debug(\"\");\n        LOG.debug(\"Balance at ends of parallel branches \" + pline.getId() + \", \" + ppst.getId());\n        Flow line1 = flow(pline, Side.ONE);\n        Flow line2 = flow(pline, Side.TWO);\n        Flow pst1 = flow(ppst, Side.ONE);\n        Flow pst2 = flow(ppst, Side.TWO);\n        checkBusBalance(\"End 1\", TOLERANCE_BALANCE_EXACT, TOLERANCE_BALANCE_EXACT, line1, pst1, load);\n        checkBusBalance(\"End 2\", 1e-2, 1e-4, line2, pst2, generator);\n    }", "signature": "void testCAS2EntsoeLoadFlowExplicitLineAndPhaseShifter()", "full_signature": "@Test public void testCAS2EntsoeLoadFlowExplicitLineAndPhaseShifter()", "class_method_signature": "BranchDataTest.testCAS2EntsoeLoadFlowExplicitLineAndPhaseShifter()", "testcase": true, "constructor": false, "invocations": ["cas2EntsoeLoadFlowExplicitLine", "cas2EntsoeLoadFlowExplicitPhaseShiftTransformer", "cas2EntsoeLoadFlowExplicitLoad", "cas2EntsoeLoadFlowExplicitGenerator", "piModelFlows", "piModelFlows", "debug", "debug", "getId", "getId", "flow", "flow", "flow", "flow", "checkBusBalance", "checkBusBalance"]}, "focal_class": {"identifier": "BranchData", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String id;", "modifier": "private final", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final double r;", "modifier": "private final", "type": "double", "declarator": "r", "var_name": "r"}, {"original_string": "private final double x;", "modifier": "private final", "type": "double", "declarator": "x", "var_name": "x"}, {"original_string": "private final double z;", "modifier": "private final", "type": "double", "declarator": "z", "var_name": "z"}, {"original_string": "private final double y;", "modifier": "private final", "type": "double", "declarator": "y", "var_name": "y"}, {"original_string": "private final double ksi;", "modifier": "private final", "type": "double", "declarator": "ksi", "var_name": "ksi"}, {"original_string": "private final double rho1;", "modifier": "private final", "type": "double", "declarator": "rho1", "var_name": "rho1"}, {"original_string": "private final double rho2;", "modifier": "private final", "type": "double", "declarator": "rho2", "var_name": "rho2"}, {"original_string": "private final double u1;", "modifier": "private final", "type": "double", "declarator": "u1", "var_name": "u1"}, {"original_string": "private final double u2;", "modifier": "private final", "type": "double", "declarator": "u2", "var_name": "u2"}, {"original_string": "private final double theta1;", "modifier": "private final", "type": "double", "declarator": "theta1", "var_name": "theta1"}, {"original_string": "private final double theta2;", "modifier": "private final", "type": "double", "declarator": "theta2", "var_name": "theta2"}, {"original_string": "private final double alpha1;", "modifier": "private final", "type": "double", "declarator": "alpha1", "var_name": "alpha1"}, {"original_string": "private final double alpha2;", "modifier": "private final", "type": "double", "declarator": "alpha2", "var_name": "alpha2"}, {"original_string": "private final double g1;", "modifier": "private final", "type": "double", "declarator": "g1", "var_name": "g1"}, {"original_string": "private final double g2;", "modifier": "private final", "type": "double", "declarator": "g2", "var_name": "g2"}, {"original_string": "private final double b1;", "modifier": "private final", "type": "double", "declarator": "b1", "var_name": "b1"}, {"original_string": "private final double b2;", "modifier": "private final", "type": "double", "declarator": "b2", "var_name": "b2"}, {"original_string": "private final double p1;", "modifier": "private final", "type": "double", "declarator": "p1", "var_name": "p1"}, {"original_string": "private final double q1;", "modifier": "private final", "type": "double", "declarator": "q1", "var_name": "q1"}, {"original_string": "private final double p2;", "modifier": "private final", "type": "double", "declarator": "p2", "var_name": "p2"}, {"original_string": "private final double q2;", "modifier": "private final", "type": "double", "declarator": "q2", "var_name": "q2"}, {"original_string": "int phaseAngleClock;", "modifier": "", "type": "int", "declarator": "phaseAngleClock", "var_name": "phaseAngleClock"}, {"original_string": "private final boolean connected1;", "modifier": "private final", "type": "boolean", "declarator": "connected1", "var_name": "connected1"}, {"original_string": "private final boolean connected2;", "modifier": "private final", "type": "boolean", "declarator": "connected2", "var_name": "connected2"}, {"original_string": "private final boolean mainComponent1;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent1", "var_name": "mainComponent1"}, {"original_string": "private final boolean mainComponent2;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent2", "var_name": "mainComponent2"}, {"original_string": "private double computedP1;", "modifier": "private", "type": "double", "declarator": "computedP1", "var_name": "computedP1"}, {"original_string": "private double computedQ1;", "modifier": "private", "type": "double", "declarator": "computedQ1", "var_name": "computedQ1"}, {"original_string": "private double computedP2;", "modifier": "private", "type": "double", "declarator": "computedP2", "var_name": "computedP2"}, {"original_string": "private double computedQ2;", "modifier": "private", "type": "double", "declarator": "computedQ2", "var_name": "computedQ2"}], "methods": [{"identifier": "BranchData", "parameters": "(String id,\n        double r, double x,\n        double rho1, double rho2,\n        double u1, double u2, double theta1, double theta2,\n        double alpha1, double alpha2,\n        double g1, double g2, double b1, double b2,\n        double p1, double q1, double p2, double q2,\n        boolean connected1, boolean connected2,\n        boolean mainComponent1, boolean mainComponent2,\n        double epsilonX, boolean applyReactanceCorrection)", "modifiers": "public", "return": "", "signature": " BranchData(String id,\n        double r, double x,\n        double rho1, double rho2,\n        double u1, double u2, double theta1, double theta2,\n        double alpha1, double alpha2,\n        double g1, double g2, double b1, double b2,\n        double p1, double q1, double p2, double q2,\n        boolean connected1, boolean connected2,\n        boolean mainComponent1, boolean mainComponent2,\n        double epsilonX, boolean applyReactanceCorrection)", "full_signature": "public  BranchData(String id,\n        double r, double x,\n        double rho1, double rho2,\n        double u1, double u2, double theta1, double theta2,\n        double alpha1, double alpha2,\n        double g1, double g2, double b1, double b2,\n        double p1, double q1, double p2, double q2,\n        boolean connected1, boolean connected2,\n        boolean mainComponent1, boolean mainComponent2,\n        double epsilonX, boolean applyReactanceCorrection)", "class_method_signature": "BranchData.BranchData(String id,\n        double r, double x,\n        double rho1, double rho2,\n        double u1, double u2, double theta1, double theta2,\n        double alpha1, double alpha2,\n        double g1, double g2, double b1, double b2,\n        double p1, double q1, double p2, double q2,\n        boolean connected1, boolean connected2,\n        boolean mainComponent1, boolean mainComponent2,\n        double epsilonX, boolean applyReactanceCorrection)", "testcase": false, "constructor": true}, {"identifier": "BranchData", "parameters": "(String id,\n            double r, double x,\n            double rho1, double rho2,\n            double u1, double u2, double theta1, double theta2,\n            double alpha1, double alpha2,\n            double g1, double g2, double b1, double b2,\n            double p1, double q1, double p2, double q2,\n            boolean connected1, boolean connected2,\n            boolean mainComponent1, boolean mainComponent2,\n            int phaseAngleClock,\n            double epsilonX, boolean applyReactanceCorrection)", "modifiers": "public", "return": "", "signature": " BranchData(String id,\n            double r, double x,\n            double rho1, double rho2,\n            double u1, double u2, double theta1, double theta2,\n            double alpha1, double alpha2,\n            double g1, double g2, double b1, double b2,\n            double p1, double q1, double p2, double q2,\n            boolean connected1, boolean connected2,\n            boolean mainComponent1, boolean mainComponent2,\n            int phaseAngleClock,\n            double epsilonX, boolean applyReactanceCorrection)", "full_signature": "public  BranchData(String id,\n            double r, double x,\n            double rho1, double rho2,\n            double u1, double u2, double theta1, double theta2,\n            double alpha1, double alpha2,\n            double g1, double g2, double b1, double b2,\n            double p1, double q1, double p2, double q2,\n            boolean connected1, boolean connected2,\n            boolean mainComponent1, boolean mainComponent2,\n            int phaseAngleClock,\n            double epsilonX, boolean applyReactanceCorrection)", "class_method_signature": "BranchData.BranchData(String id,\n            double r, double x,\n            double rho1, double rho2,\n            double u1, double u2, double theta1, double theta2,\n            double alpha1, double alpha2,\n            double g1, double g2, double b1, double b2,\n            double p1, double q1, double p2, double q2,\n            boolean connected1, boolean connected2,\n            boolean mainComponent1, boolean mainComponent2,\n            int phaseAngleClock,\n            double epsilonX, boolean applyReactanceCorrection)", "testcase": false, "constructor": true}, {"identifier": "BranchData", "parameters": "(Line line, double epsilonX, boolean applyReactanceCorrection)", "modifiers": "public", "return": "", "signature": " BranchData(Line line, double epsilonX, boolean applyReactanceCorrection)", "full_signature": "public  BranchData(Line line, double epsilonX, boolean applyReactanceCorrection)", "class_method_signature": "BranchData.BranchData(Line line, double epsilonX, boolean applyReactanceCorrection)", "testcase": false, "constructor": true}, {"identifier": "BranchData", "parameters": "(TwoWindingsTransformer twt, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "modifiers": "public", "return": "", "signature": " BranchData(TwoWindingsTransformer twt, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "full_signature": "public  BranchData(TwoWindingsTransformer twt, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.BranchData(TwoWindingsTransformer twt, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": true}, {"identifier": "BranchData", "parameters": "(TwoWindingsTransformer twt, int phaseAngleClock, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "modifiers": "public", "return": "", "signature": " BranchData(TwoWindingsTransformer twt, int phaseAngleClock, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "full_signature": "public  BranchData(TwoWindingsTransformer twt, int phaseAngleClock, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.BranchData(TwoWindingsTransformer twt, int phaseAngleClock, double epsilonX, boolean applyReactanceCorrection, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "(double initialValue, double rtcStepValue, double ptcStepValue)", "modifiers": "private", "return": "double", "signature": "double getValue(double initialValue, double rtcStepValue, double ptcStepValue)", "full_signature": "private double getValue(double initialValue, double rtcStepValue, double ptcStepValue)", "class_method_signature": "BranchData.getValue(double initialValue, double rtcStepValue, double ptcStepValue)", "testcase": false, "constructor": false}, {"identifier": "getR", "parameters": "(TwoWindingsTransformer twt)", "modifiers": "private", "return": "double", "signature": "double getR(TwoWindingsTransformer twt)", "full_signature": "private double getR(TwoWindingsTransformer twt)", "class_method_signature": "BranchData.getR(TwoWindingsTransformer twt)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(TwoWindingsTransformer twt)", "modifiers": "private", "return": "double", "signature": "double getX(TwoWindingsTransformer twt)", "full_signature": "private double getX(TwoWindingsTransformer twt)", "class_method_signature": "BranchData.getX(TwoWindingsTransformer twt)", "testcase": false, "constructor": false}, {"identifier": "getG1", "parameters": "(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "modifiers": "private", "return": "double", "signature": "double getG1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "full_signature": "private double getG1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.getG1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": false}, {"identifier": "getB1", "parameters": "(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "modifiers": "private", "return": "double", "signature": "double getB1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "full_signature": "private double getB1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.getB1(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": false}, {"identifier": "getG2", "parameters": "(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "modifiers": "private", "return": "double", "signature": "double getG2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "full_signature": "private double getG2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.getG2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": false}, {"identifier": "getB2", "parameters": "(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "modifiers": "private", "return": "double", "signature": "double getB2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "full_signature": "private double getB2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "class_method_signature": "BranchData.getB2(TwoWindingsTransformer twt, boolean twtSplitShuntAdmittance)", "testcase": false, "constructor": false}, {"identifier": "getRho1", "parameters": "(TwoWindingsTransformer twt)", "modifiers": "private", "return": "double", "signature": "double getRho1(TwoWindingsTransformer twt)", "full_signature": "private double getRho1(TwoWindingsTransformer twt)", "class_method_signature": "BranchData.getRho1(TwoWindingsTransformer twt)", "testcase": false, "constructor": false}, {"identifier": "computeValues", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void computeValues()", "full_signature": "private void computeValues()", "class_method_signature": "BranchData.computeValues()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "BranchData.getId()", "testcase": false, "constructor": false}, {"identifier": "getR", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getR()", "full_signature": "public double getR()", "class_method_signature": "BranchData.getR()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getX()", "full_signature": "public double getX()", "class_method_signature": "BranchData.getX()", "testcase": false, "constructor": false}, {"identifier": "getZ", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getZ()", "full_signature": "public double getZ()", "class_method_signature": "BranchData.getZ()", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getY()", "full_signature": "public double getY()", "class_method_signature": "BranchData.getY()", "testcase": false, "constructor": false}, {"identifier": "getKsi", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getKsi()", "full_signature": "public double getKsi()", "class_method_signature": "BranchData.getKsi()", "testcase": false, "constructor": false}, {"identifier": "getRho1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRho1()", "full_signature": "public double getRho1()", "class_method_signature": "BranchData.getRho1()", "testcase": false, "constructor": false}, {"identifier": "getRho2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRho2()", "full_signature": "public double getRho2()", "class_method_signature": "BranchData.getRho2()", "testcase": false, "constructor": false}, {"identifier": "getU1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getU1()", "full_signature": "public double getU1()", "class_method_signature": "BranchData.getU1()", "testcase": false, "constructor": false}, {"identifier": "getU2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getU2()", "full_signature": "public double getU2()", "class_method_signature": "BranchData.getU2()", "testcase": false, "constructor": false}, {"identifier": "getTheta1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTheta1()", "full_signature": "public double getTheta1()", "class_method_signature": "BranchData.getTheta1()", "testcase": false, "constructor": false}, {"identifier": "getTheta2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTheta2()", "full_signature": "public double getTheta2()", "class_method_signature": "BranchData.getTheta2()", "testcase": false, "constructor": false}, {"identifier": "getAlpha1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAlpha1()", "full_signature": "public double getAlpha1()", "class_method_signature": "BranchData.getAlpha1()", "testcase": false, "constructor": false}, {"identifier": "getAlpha2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAlpha2()", "full_signature": "public double getAlpha2()", "class_method_signature": "BranchData.getAlpha2()", "testcase": false, "constructor": false}, {"identifier": "getG1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getG1()", "full_signature": "public double getG1()", "class_method_signature": "BranchData.getG1()", "testcase": false, "constructor": false}, {"identifier": "getG2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getG2()", "full_signature": "public double getG2()", "class_method_signature": "BranchData.getG2()", "testcase": false, "constructor": false}, {"identifier": "getB1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getB1()", "full_signature": "public double getB1()", "class_method_signature": "BranchData.getB1()", "testcase": false, "constructor": false}, {"identifier": "getB2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getB2()", "full_signature": "public double getB2()", "class_method_signature": "BranchData.getB2()", "testcase": false, "constructor": false}, {"identifier": "isConnected1", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected1()", "full_signature": "public boolean isConnected1()", "class_method_signature": "BranchData.isConnected1()", "testcase": false, "constructor": false}, {"identifier": "isConnected2", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected2()", "full_signature": "public boolean isConnected2()", "class_method_signature": "BranchData.isConnected2()", "testcase": false, "constructor": false}, {"identifier": "isMainComponent1", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMainComponent1()", "full_signature": "public boolean isMainComponent1()", "class_method_signature": "BranchData.isMainComponent1()", "testcase": false, "constructor": false}, {"identifier": "isMainComponent2", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMainComponent2()", "full_signature": "public boolean isMainComponent2()", "class_method_signature": "BranchData.isMainComponent2()", "testcase": false, "constructor": false}, {"identifier": "getP1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getP1()", "full_signature": "public double getP1()", "class_method_signature": "BranchData.getP1()", "testcase": false, "constructor": false}, {"identifier": "getQ1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getQ1()", "full_signature": "public double getQ1()", "class_method_signature": "BranchData.getQ1()", "testcase": false, "constructor": false}, {"identifier": "getP2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getP2()", "full_signature": "public double getP2()", "class_method_signature": "BranchData.getP2()", "testcase": false, "constructor": false}, {"identifier": "getQ2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getQ2()", "full_signature": "public double getQ2()", "class_method_signature": "BranchData.getQ2()", "testcase": false, "constructor": false}, {"identifier": "getComputedP1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getComputedP1()", "full_signature": "public double getComputedP1()", "class_method_signature": "BranchData.getComputedP1()", "testcase": false, "constructor": false}, {"identifier": "getComputedQ1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getComputedQ1()", "full_signature": "public double getComputedQ1()", "class_method_signature": "BranchData.getComputedQ1()", "testcase": false, "constructor": false}, {"identifier": "getComputedP2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getComputedP2()", "full_signature": "public double getComputedP2()", "class_method_signature": "BranchData.getComputedP2()", "testcase": false, "constructor": false}, {"identifier": "getComputedQ2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getComputedQ2()", "full_signature": "public double getComputedQ2()", "class_method_signature": "BranchData.getComputedQ2()", "testcase": false, "constructor": false}, {"identifier": "getComputedP", "parameters": "(Side side)", "modifiers": "public", "return": "double", "signature": "double getComputedP(Side side)", "full_signature": "public double getComputedP(Side side)", "class_method_signature": "BranchData.getComputedP(Side side)", "testcase": false, "constructor": false}, {"identifier": "getComputedQ", "parameters": "(Side side)", "modifiers": "public", "return": "double", "signature": "double getComputedQ(Side side)", "full_signature": "public double getComputedQ(Side side)", "class_method_signature": "BranchData.getComputedQ(Side side)", "testcase": false, "constructor": false}, {"identifier": "getPhaseAngleClock", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPhaseAngleClock()", "full_signature": "public int getPhaseAngleClock()", "class_method_signature": "BranchData.getPhaseAngleClock()", "testcase": false, "constructor": false}], "file": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/BranchData.java"}, "focal_method": {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getId() {\n        return id;\n    }", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "BranchData.getId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}