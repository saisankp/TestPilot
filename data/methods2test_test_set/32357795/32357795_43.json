{"test_class": {"identifier": "ClassInstanceUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected TopicMapIF        topicmap;", "modifier": "protected", "type": "TopicMapIF", "declarator": "topicmap", "var_name": "topicmap"}, {"original_string": "protected LocatorIF         base;", "modifier": "protected", "type": "LocatorIF", "declarator": "base", "var_name": "base"}, {"original_string": "private final static String testdataDirectory = \"various\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"various\"", "var_name": "testdataDirectory"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/ClassInstanceUtilsTest.java"}, "test_case": {"identifier": "testGetInstancesOfTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetInstancesOfTopic() throws IOException {\n    load(testdataDirectory, \"small-test.ltm\");\n    Collection instances = ClassInstanceUtils.getInstancesOf(topicmap.getTopics(),\n                                                             getTopicById(\"person\"));\n    Assert.assertTrue(\"wrong number of instances\", instances.size() == 3);\n    Assert.assertTrue(\"instances does not contain 'lmg'\",\n               instances.contains(getTopicById(\"lmg\")));\n    Assert.assertTrue(\"instances does not contain 'gra'\",\n               instances.contains(getTopicById(\"gra\")));\n    Assert.assertTrue(\"instances does not contain 'grove'\",\n               instances.contains(getTopicById(\"grove\")));\n  }", "signature": "void testGetInstancesOfTopic()", "full_signature": "@Test public void testGetInstancesOfTopic()", "class_method_signature": "ClassInstanceUtilsTest.testGetInstancesOfTopic()", "testcase": true, "constructor": false, "invocations": ["load", "getInstancesOf", "getTopics", "getTopicById", "assertTrue", "size", "assertTrue", "contains", "getTopicById", "assertTrue", "contains", "getTopicById", "assertTrue", "contains", "getTopicById"]}, "focal_class": {"identifier": "ClassInstanceUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "resolveAssociations1", "parameters": "(TopicMapIF topicmap)", "modifiers": "public static", "return": "void", "signature": "void resolveAssociations1(TopicMapIF topicmap)", "full_signature": "public static void resolveAssociations1(TopicMapIF topicmap)", "class_method_signature": "ClassInstanceUtils.resolveAssociations1(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "resolveAssociations2", "parameters": "(TopicMapIF topicmap)", "modifiers": "public static", "return": "void", "signature": "void resolveAssociations2(TopicMapIF topicmap)", "full_signature": "public static void resolveAssociations2(TopicMapIF topicmap)", "class_method_signature": "ClassInstanceUtils.resolveAssociations2(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "resolveAssociations", "parameters": "(TopicMapIF topicmap,\n                                          LocatorIF assoctype,\n                                          LocatorIF typetype,\n                                          LocatorIF insttype)", "modifiers": "private static", "return": "void", "signature": "void resolveAssociations(TopicMapIF topicmap,\n                                          LocatorIF assoctype,\n                                          LocatorIF typetype,\n                                          LocatorIF insttype)", "full_signature": "private static void resolveAssociations(TopicMapIF topicmap,\n                                          LocatorIF assoctype,\n                                          LocatorIF typetype,\n                                          LocatorIF insttype)", "class_method_signature": "ClassInstanceUtils.resolveAssociations(TopicMapIF topicmap,\n                                          LocatorIF assoctype,\n                                          LocatorIF typetype,\n                                          LocatorIF insttype)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(TypedIF typed, TopicIF type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstanceOf(TypedIF typed, TopicIF type)", "full_signature": "public static boolean isInstanceOf(TypedIF typed, TopicIF type)", "class_method_signature": "ClassInstanceUtils.isInstanceOf(TypedIF typed, TopicIF type)", "testcase": false, "constructor": false}, {"identifier": "isInstanceOf", "parameters": "(TopicIF topic, TopicIF type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstanceOf(TopicIF topic, TopicIF type)", "full_signature": "public static boolean isInstanceOf(TopicIF topic, TopicIF type)", "class_method_signature": "ClassInstanceUtils.isInstanceOf(TopicIF topic, TopicIF type)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOf", "parameters": "(Collection typed, TopicIF type)", "modifiers": "public static", "return": "Collection", "signature": "Collection getInstancesOf(Collection typed, TopicIF type)", "full_signature": "public static Collection getInstancesOf(Collection typed, TopicIF type)", "class_method_signature": "ClassInstanceUtils.getInstancesOf(Collection typed, TopicIF type)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "(Collection typed)", "modifiers": "public static", "return": "Collection", "signature": "Collection getTypes(Collection typed)", "full_signature": "public static Collection getTypes(Collection typed)", "class_method_signature": "ClassInstanceUtils.getTypes(Collection typed)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "(Collection typed, Collection accumulated)", "modifiers": "public static", "return": "Collection", "signature": "Collection getTypes(Collection typed, Collection accumulated)", "full_signature": "public static Collection getTypes(Collection typed, Collection accumulated)", "class_method_signature": "ClassInstanceUtils.getTypes(Collection typed, Collection accumulated)", "testcase": false, "constructor": false}, {"identifier": "getTypeMap", "parameters": "(Collection typed)", "modifiers": "public static", "return": "Map", "signature": "Map getTypeMap(Collection typed)", "full_signature": "public static Map getTypeMap(Collection typed)", "class_method_signature": "ClassInstanceUtils.getTypeMap(Collection typed)", "testcase": false, "constructor": false}, {"identifier": "getTypeMap", "parameters": "(Collection typed, Map accumulated)", "modifiers": "public static", "return": "Map", "signature": "Map getTypeMap(Collection typed, Map accumulated)", "full_signature": "public static Map getTypeMap(Collection typed, Map accumulated)", "class_method_signature": "ClassInstanceUtils.getTypeMap(Collection typed, Map accumulated)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/ClassInstanceUtils.java"}, "focal_method": {"identifier": "getInstancesOf", "parameters": "(Collection typed, TopicIF type)", "modifiers": "public static", "return": "Collection", "body": "public static Collection getInstancesOf(Collection typed, TopicIF type) {\n    Collection result = new ArrayList();\n    \n    // Loop over the typed objects to see if they're instances of the type\n    Iterator iter = typed.iterator();\n    while (iter.hasNext()) {\n      Object object = iter.next();\n      if (object instanceof TypedIF) {\n        if (isInstanceOf((TypedIF)object, type)) result.add(object);\n      } else {\n        if (isInstanceOf((TopicIF)object, type)) result.add(object);\n      }\n    }\n    return result;\n  }", "signature": "Collection getInstancesOf(Collection typed, TopicIF type)", "full_signature": "public static Collection getInstancesOf(Collection typed, TopicIF type)", "class_method_signature": "ClassInstanceUtils.getInstancesOf(Collection typed, TopicIF type)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "next", "isInstanceOf", "add", "isInstanceOf", "add"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}