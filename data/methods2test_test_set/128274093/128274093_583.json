{"test_class": {"identifier": "FlowablePublishTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowablePublishTest.java"}, "test_case": {"identifier": "subscriberSwap", "parameters": "()", "modifiers": "@Test @Ignore(\"publish() keeps consuming the upstream if there are no subscribers, 3.x should change this\") public", "return": "void", "body": "@Test\n    @Ignore(\"publish() keeps consuming the upstream if there are no subscribers, 3.x should change this\")\n    public void subscriberSwap() {\n        final ConnectableFlowable<Integer> cf = Flowable.range(1, 5).publish();\n\n        cf.connect();\n\n        TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                cancel();\n                onComplete();\n            }\n        };\n\n        cf.subscribe(ts1);\n\n        ts1.assertResult(1);\n\n        TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>(0);\n        cf.subscribe(ts2);\n\n        ts2\n        .assertEmpty()\n        .requestMore(4)\n        .assertResult(2, 3, 4, 5);\n    }", "signature": "void subscriberSwap()", "full_signature": "@Test @Ignore(\"publish() keeps consuming the upstream if there are no subscribers, 3.x should change this\") public void subscriberSwap()", "class_method_signature": "FlowablePublishTest.subscriberSwap()", "testcase": true, "constructor": false, "invocations": ["publish", "range", "connect", "onNext", "cancel", "onComplete", "subscribe", "assertResult", "subscribe", "assertResult", "requestMore", "assertEmpty"]}, "focal_class": {"identifier": "FlowablePublish", "superclass": "extends ConnectableFlowable<T>", "interfaces": "implements HasUpstreamPublisher<T>", "fields": [{"original_string": "static final long CANCELLED = Long.MIN_VALUE;", "modifier": "static final", "type": "long", "declarator": "CANCELLED = Long.MIN_VALUE", "var_name": "CANCELLED"}, {"original_string": "final Flowable<T> source;", "modifier": "final", "type": "Flowable<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<PublishSubscriber<T>> current;", "modifier": "final", "type": "AtomicReference<PublishSubscriber<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}, {"original_string": "final Publisher<T> onSubscribe;", "modifier": "final", "type": "Publisher<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}], "methods": [{"identifier": "create", "parameters": "(Flowable<T> source, final int bufferSize)", "modifiers": "public static", "return": "ConnectableFlowable<T>", "signature": "ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "full_signature": "public static ConnectableFlowable<T> create(Flowable<T> source, final int bufferSize)", "class_method_signature": "FlowablePublish.create(Flowable<T> source, final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "FlowablePublish", "parameters": "(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "modifiers": "private", "return": "", "signature": " FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "full_signature": "private  FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "class_method_signature": "FlowablePublish.FlowablePublish(Publisher<T> onSubscribe, Flowable<T> source,\n            final AtomicReference<PublishSubscriber<T>> current, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "Publisher<T>", "signature": "Publisher<T> source()", "full_signature": "@Override public Publisher<T> source()", "class_method_signature": "FlowablePublish.source()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super T> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super T> s)", "class_method_signature": "FlowablePublish.subscribeActual(Subscriber<? super T> s)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "FlowablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowablePublish.java"}, "focal_method": {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect(Consumer<? super Disposable> connection) {\n        boolean doConnect;\n        PublishSubscriber<T> ps;\n        // we loop because concurrent connect/disconnect and termination may change the state\n        for (;;) {\n            // retrieve the current subscriber-to-source instance\n            ps = current.get();\n            // if there is none yet or the current has been disposed\n            if (ps == null || ps.isDisposed()) {\n                // create a new subscriber-to-source\n                PublishSubscriber<T> u = new PublishSubscriber<T>(current, bufferSize);\n                // try setting it as the current subscriber-to-source\n                if (!current.compareAndSet(ps, u)) {\n                    // did not work, perhaps a new subscriber arrived\n                    // and created a new subscriber-to-source as well, retry\n                    continue;\n                }\n                ps = u;\n            }\n            // if connect() was called concurrently, only one of them should actually\n            // connect to the source\n            doConnect = !ps.shouldConnect.get() && ps.shouldConnect.compareAndSet(false, true);\n            break; // NOPMD\n        }\n        /*\n         * Notify the callback that we have a (new) connection which it can dispose\n         * but since ps is unique to a connection, multiple calls to connect() will return the\n         * same Subscription and even if there was a connect-disconnect-connect pair, the older\n         * references won't disconnect the newer connection.\n         * Synchronous source consumers have the opportunity to disconnect via dispose on the\n         * Disposable as subscribe() may never return on its own.\n         *\n         * Note however, that asynchronously disconnecting a running source might leave\n         * child subscribers without any terminal event; PublishProcessor does not have this\n         * issue because the cancellation was always triggered by the child subscribers\n         * themselves.\n         */\n        try {\n            connection.accept(ps);\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            throw ExceptionHelper.wrapOrThrow(ex);\n        }\n        if (doConnect) {\n            source.subscribe(ps);\n        }\n    }", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "FlowablePublish.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false, "invocations": ["get", "isDisposed", "compareAndSet", "get", "compareAndSet", "accept", "throwIfFatal", "wrapOrThrow", "subscribe"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}