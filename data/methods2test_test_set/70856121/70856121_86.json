{"test_class": {"identifier": "RepairManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> TABLES = ImmutableSet.of(\"table1\");", "modifier": "private static final", "type": "Set<String>", "declarator": "TABLES = ImmutableSet.of(\"table1\")", "var_name": "TABLES"}], "file": "src/server/src/test/java/io/cassandrareaper/service/RepairManagerTest.java"}, "test_case": {"identifier": "updateRepairRunIntensityTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void updateRepairRunIntensityTest() throws ReaperException, InterruptedException {\n    final String clusterName = \"reaper\";\n\n    AppContext context = new AppContext();\n    context.config = new ReaperApplicationConfiguration();\n    context.storage = mock(IStorage.class);\n\n    context.storage\n        .addCluster(Cluster.builder().withName(clusterName).withSeedHosts(ImmutableSet.of(\"127.0.0.1\")).build());\n\n    context.repairManager = RepairManager.create(\n        context,\n        Executors.newScheduledThreadPool(1),\n        500,\n        TimeUnit.MILLISECONDS,\n        1,\n        TimeUnit.MILLISECONDS);\n\n    final String ksName = \"reaper\";\n    final Set<String> cfNames = Sets.newHashSet(\"reaper\");\n    final boolean incrementalRepair = false;\n    final Set<String> nodes = Sets.newHashSet(\"127.0.0.1\");\n    final Set<String> datacenters = Collections.emptySet();\n    final int repairThreadCount = 1;\n\n    final RepairUnit cf = RepairUnit.builder()\n        .clusterName(clusterName)\n        .keyspaceName(ksName)\n        .columnFamilies(cfNames)\n        .incrementalRepair(incrementalRepair)\n        .nodes(nodes)\n        .datacenters(datacenters)\n        .repairThreadCount(repairThreadCount)\n        .build(UUIDs.timeBased());\n\n    double intensity = 0.5f;\n\n    final RepairRun run = RepairRun.builder(clusterName, cf.getId())\n            .intensity(intensity)\n            .segmentCount(1)\n            .repairParallelism(RepairParallelism.PARALLEL)\n            .tables(TABLES)\n            .build(UUIDs.timeBased());\n\n    when(context.storage.updateRepairRun(any(), any())).thenReturn(true);\n\n    intensity = 0.1;\n    RepairRun updated = context.repairManager.updateRepairRunIntensity(run, intensity);\n\n    Assertions.assertThat(updated.getId()).isEqualTo(run.getId());\n    Assertions.assertThat(updated.getIntensity()).isEqualTo(intensity);\n    Mockito.verify(context.storage, Mockito.times(1)).updateRepairRun(any(), any());\n  }", "signature": "void updateRepairRunIntensityTest()", "full_signature": "@Test public void updateRepairRunIntensityTest()", "class_method_signature": "RepairManagerTest.updateRepairRunIntensityTest()", "testcase": true, "constructor": false, "invocations": ["mock", "addCluster", "build", "withSeedHosts", "withName", "builder", "of", "create", "newScheduledThreadPool", "newHashSet", "newHashSet", "emptySet", "build", "repairThreadCount", "datacenters", "nodes", "incrementalRepair", "columnFamilies", "keyspaceName", "clusterName", "builder", "timeBased", "build", "tables", "repairParallelism", "segmentCount", "intensity", "builder", "getId", "timeBased", "thenReturn", "when", "updateRepairRun", "any", "any", "updateRepairRunIntensity", "isEqualTo", "assertThat", "getId", "getId", "isEqualTo", "assertThat", "getIntensity", "updateRepairRun", "verify", "times", "any", "any"]}, "focal_class": {"identifier": "RepairManager", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepairManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepairManager.class)", "var_name": "LOG"}, {"original_string": "final Map<UUID, RepairRunner> repairRunners = Maps.newConcurrentMap();", "modifier": "final", "type": "Map<UUID, RepairRunner>", "declarator": "repairRunners = Maps.newConcurrentMap()", "var_name": "repairRunners"}, {"original_string": "private final Lock repairRunnersLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "repairRunnersLock = new ReentrantLock()", "var_name": "repairRunnersLock"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}, {"original_string": "private final ListeningScheduledExecutorService executor;", "modifier": "private final", "type": "ListeningScheduledExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final long repairTimeoutMillis;", "modifier": "private final", "type": "long", "declarator": "repairTimeoutMillis", "var_name": "repairTimeoutMillis"}, {"original_string": "private final long retryDelayMillis;", "modifier": "private final", "type": "long", "declarator": "retryDelayMillis", "var_name": "retryDelayMillis"}], "methods": [{"identifier": "RepairManager", "parameters": "(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "modifiers": "private", "return": "", "signature": " RepairManager(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "full_signature": "private  RepairManager(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "class_method_signature": "RepairManager.RepairManager(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n      AppContext context,\n      ClusterFacade clusterFacadeSupplier,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "modifiers": "@VisibleForTesting static", "return": "RepairManager", "signature": "RepairManager create(\n      AppContext context,\n      ClusterFacade clusterFacadeSupplier,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "full_signature": "@VisibleForTesting static RepairManager create(\n      AppContext context,\n      ClusterFacade clusterFacadeSupplier,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "class_method_signature": "RepairManager.create(\n      AppContext context,\n      ClusterFacade clusterFacadeSupplier,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n      AppContext context,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "modifiers": "public static", "return": "RepairManager", "signature": "RepairManager create(\n      AppContext context,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "full_signature": "public static RepairManager create(\n      AppContext context,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "class_method_signature": "RepairManager.create(\n      AppContext context,\n      ScheduledExecutorService executor,\n      long repairTimeout,\n      TimeUnit repairTimeoutTimeUnit,\n      long retryDelay,\n      TimeUnit retryDelayTimeUnit)", "testcase": false, "constructor": false}, {"identifier": "getRepairTimeoutMillis", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getRepairTimeoutMillis()", "full_signature": " long getRepairTimeoutMillis()", "class_method_signature": "RepairManager.getRepairTimeoutMillis()", "testcase": false, "constructor": false}, {"identifier": "resumeRunningRepairRuns", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resumeRunningRepairRuns()", "full_signature": "public void resumeRunningRepairRuns()", "class_method_signature": "RepairManager.resumeRunningRepairRuns()", "testcase": false, "constructor": false}, {"identifier": "abortAllRunningSegmentsWithNoLeader", "parameters": "(Collection<RepairRun> runningRepairRuns)", "modifiers": "private", "return": "void", "signature": "void abortAllRunningSegmentsWithNoLeader(Collection<RepairRun> runningRepairRuns)", "full_signature": "private void abortAllRunningSegmentsWithNoLeader(Collection<RepairRun> runningRepairRuns)", "class_method_signature": "RepairManager.abortAllRunningSegmentsWithNoLeader(Collection<RepairRun> runningRepairRuns)", "testcase": false, "constructor": false}, {"identifier": "resumeUnkownRunningRepairRuns", "parameters": "(Collection<RepairRun> runningRepairRuns)", "modifiers": "private", "return": "void", "signature": "void resumeUnkownRunningRepairRuns(Collection<RepairRun> runningRepairRuns)", "full_signature": "private void resumeUnkownRunningRepairRuns(Collection<RepairRun> runningRepairRuns)", "class_method_signature": "RepairManager.resumeUnkownRunningRepairRuns(Collection<RepairRun> runningRepairRuns)", "testcase": false, "constructor": false}, {"identifier": "abortAllRunningSegmentsInKnownPausedRepairRuns", "parameters": "(Collection<RepairRun> pausedRepairRuns)", "modifiers": "private", "return": "void", "signature": "void abortAllRunningSegmentsInKnownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "full_signature": "private void abortAllRunningSegmentsInKnownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "class_method_signature": "RepairManager.abortAllRunningSegmentsInKnownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "testcase": false, "constructor": false}, {"identifier": "resumeUnknownPausedRepairRuns", "parameters": "(Collection<RepairRun> pausedRepairRuns)", "modifiers": "private", "return": "void", "signature": "void resumeUnknownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "full_signature": "private void resumeUnknownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "class_method_signature": "RepairManager.resumeUnknownPausedRepairRuns(Collection<RepairRun> pausedRepairRuns)", "testcase": false, "constructor": false}, {"identifier": "abortSegmentsWithNoLeader", "parameters": "(RepairRun repairRun, Collection<RepairSegment> runningSegments)", "modifiers": "private", "return": "void", "signature": "void abortSegmentsWithNoLeader(RepairRun repairRun, Collection<RepairSegment> runningSegments)", "full_signature": "private void abortSegmentsWithNoLeader(RepairRun repairRun, Collection<RepairSegment> runningSegments)", "class_method_signature": "RepairManager.abortSegmentsWithNoLeader(RepairRun repairRun, Collection<RepairSegment> runningSegments)", "testcase": false, "constructor": false}, {"identifier": "abortSegment", "parameters": "(UUID runId, UUID segmentId)", "modifiers": "public", "return": "RepairSegment", "signature": "RepairSegment abortSegment(UUID runId, UUID segmentId)", "full_signature": "public RepairSegment abortSegment(UUID runId, UUID segmentId)", "class_method_signature": "RepairManager.abortSegment(UUID runId, UUID segmentId)", "testcase": false, "constructor": false}, {"identifier": "abortSegments", "parameters": "(Collection<RepairSegment> runningSegments, RepairRun repairRun)", "modifiers": "", "return": "void", "signature": "void abortSegments(Collection<RepairSegment> runningSegments, RepairRun repairRun)", "full_signature": " void abortSegments(Collection<RepairSegment> runningSegments, RepairRun repairRun)", "class_method_signature": "RepairManager.abortSegments(Collection<RepairSegment> runningSegments, RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "startRepairRun", "parameters": "(RepairRun runToBeStarted)", "modifiers": "public", "return": "RepairRun", "signature": "RepairRun startRepairRun(RepairRun runToBeStarted)", "full_signature": "public RepairRun startRepairRun(RepairRun runToBeStarted)", "class_method_signature": "RepairManager.startRepairRun(RepairRun runToBeStarted)", "testcase": false, "constructor": false}, {"identifier": "updateRepairRunIntensity", "parameters": "(RepairRun repairRun, Double intensity)", "modifiers": "public", "return": "RepairRun", "signature": "RepairRun updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "full_signature": "public RepairRun updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "class_method_signature": "RepairManager.updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "testcase": false, "constructor": false}, {"identifier": "startRunner", "parameters": "(UUID runId)", "modifiers": "private", "return": "void", "signature": "void startRunner(UUID runId)", "full_signature": "private void startRunner(UUID runId)", "class_method_signature": "RepairManager.startRunner(UUID runId)", "testcase": false, "constructor": false}, {"identifier": "pauseRepairRun", "parameters": "(RepairRun runToBePaused)", "modifiers": "public", "return": "RepairRun", "signature": "RepairRun pauseRepairRun(RepairRun runToBePaused)", "full_signature": "public RepairRun pauseRepairRun(RepairRun runToBePaused)", "class_method_signature": "RepairManager.pauseRepairRun(RepairRun runToBePaused)", "testcase": false, "constructor": false}, {"identifier": "abortRepairRun", "parameters": "(RepairRun runToBeAborted)", "modifiers": "public", "return": "RepairRun", "signature": "RepairRun abortRepairRun(RepairRun runToBeAborted)", "full_signature": "public RepairRun abortRepairRun(RepairRun runToBeAborted)", "class_method_signature": "RepairManager.abortRepairRun(RepairRun runToBeAborted)", "testcase": false, "constructor": false}, {"identifier": "scheduleRetry", "parameters": "(RepairRunner runner)", "modifiers": "", "return": "void", "signature": "void scheduleRetry(RepairRunner runner)", "full_signature": " void scheduleRetry(RepairRunner runner)", "class_method_signature": "RepairManager.scheduleRetry(RepairRunner runner)", "testcase": false, "constructor": false}, {"identifier": "submitSegment", "parameters": "(SegmentRunner runner)", "modifiers": "", "return": "ListenableFuture<?>", "signature": "ListenableFuture<?> submitSegment(SegmentRunner runner)", "full_signature": " ListenableFuture<?> submitSegment(SegmentRunner runner)", "class_method_signature": "RepairManager.submitSegment(SegmentRunner runner)", "testcase": false, "constructor": false}, {"identifier": "removeRunner", "parameters": "(RepairRunner runner)", "modifiers": "", "return": "void", "signature": "void removeRunner(RepairRunner runner)", "full_signature": " void removeRunner(RepairRunner runner)", "class_method_signature": "RepairManager.removeRunner(RepairRunner runner)", "testcase": false, "constructor": false}, {"identifier": "takeLead", "parameters": "(AppContext context, UUID leaderElectionId)", "modifiers": "private static", "return": "boolean", "signature": "boolean takeLead(AppContext context, UUID leaderElectionId)", "full_signature": "private static boolean takeLead(AppContext context, UUID leaderElectionId)", "class_method_signature": "RepairManager.takeLead(AppContext context, UUID leaderElectionId)", "testcase": false, "constructor": false}, {"identifier": "renewLead", "parameters": "(AppContext context, UUID leaderElectionId)", "modifiers": "private static", "return": "boolean", "signature": "boolean renewLead(AppContext context, UUID leaderElectionId)", "full_signature": "private static boolean renewLead(AppContext context, UUID leaderElectionId)", "class_method_signature": "RepairManager.renewLead(AppContext context, UUID leaderElectionId)", "testcase": false, "constructor": false}, {"identifier": "releaseLead", "parameters": "(AppContext context, UUID leaderElectionId)", "modifiers": "private static", "return": "void", "signature": "void releaseLead(AppContext context, UUID leaderElectionId)", "full_signature": "private static void releaseLead(AppContext context, UUID leaderElectionId)", "class_method_signature": "RepairManager.releaseLead(AppContext context, UUID leaderElectionId)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RepairManager.close()", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/RepairManager.java"}, "focal_method": {"identifier": "updateRepairRunIntensity", "parameters": "(RepairRun repairRun, Double intensity)", "modifiers": "public", "return": "RepairRun", "body": "public RepairRun updateRepairRunIntensity(RepairRun repairRun, Double intensity) throws ReaperException {\n    RepairRun updatedRun = repairRun.with().intensity(intensity).build(repairRun.getId());\n    if (!context.storage.updateRepairRun(updatedRun, Optional.of(false))) {\n      throw new ReaperException(\"failed updating repair run \" + updatedRun.getId());\n    }\n    return updatedRun;\n  }", "signature": "RepairRun updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "full_signature": "public RepairRun updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "class_method_signature": "RepairManager.updateRepairRunIntensity(RepairRun repairRun, Double intensity)", "testcase": false, "constructor": false, "invocations": ["build", "intensity", "with", "getId", "updateRepairRun", "of", "getId"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}