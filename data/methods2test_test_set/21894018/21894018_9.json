{"test_class": {"identifier": "TxUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "tephra-core/src/test/java/co/cask/tephra/util/TxUtilsTest.java"}, "test_case": {"identifier": "testMaxVisibleTimestamp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMaxVisibleTimestamp() {\n    // make sure we don't overflow with MAX_VALUE write pointer\n    assertEquals(Long.MAX_VALUE, TxUtils.getMaxVisibleTimestamp(Transaction.ALL_VISIBLE_LATEST));\n  }", "signature": "void testMaxVisibleTimestamp()", "full_signature": "@Test public void testMaxVisibleTimestamp()", "class_method_signature": "TxUtilsTest.testMaxVisibleTimestamp()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMaxVisibleTimestamp"]}, "focal_class": {"identifier": "TxUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MAX_NON_TX_TIMESTAMP = (long) (System.currentTimeMillis() * 1.1);", "modifier": "private static final", "type": "long", "declarator": "MAX_NON_TX_TIMESTAMP = (long) (System.currentTimeMillis() * 1.1)", "var_name": "MAX_NON_TX_TIMESTAMP"}], "methods": [{"identifier": "getOldestVisibleTimestamp", "parameters": "(Map<byte[], Long> ttlByFamily, Transaction tx)", "modifiers": "public static", "return": "long", "signature": "long getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx)", "full_signature": "public static long getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx)", "class_method_signature": "TxUtils.getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getOldestVisibleTimestamp", "parameters": "(Map<byte[], Long> ttlByFamily, Transaction tx, boolean readNonTxnData)", "modifiers": "public static", "return": "long", "signature": "long getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx, boolean readNonTxnData)", "full_signature": "public static long getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx, boolean readNonTxnData)", "class_method_signature": "TxUtils.getOldestVisibleTimestamp(Map<byte[], Long> ttlByFamily, Transaction tx, boolean readNonTxnData)", "testcase": false, "constructor": false}, {"identifier": "getMaxVisibleTimestamp", "parameters": "(Transaction tx)", "modifiers": "public static", "return": "long", "signature": "long getMaxVisibleTimestamp(Transaction tx)", "full_signature": "public static long getMaxVisibleTimestamp(Transaction tx)", "class_method_signature": "TxUtils.getMaxVisibleTimestamp(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "createDummyTransaction", "parameters": "(TransactionVisibilityState txVisibilityState)", "modifiers": "public static", "return": "Transaction", "signature": "Transaction createDummyTransaction(TransactionVisibilityState txVisibilityState)", "full_signature": "public static Transaction createDummyTransaction(TransactionVisibilityState txVisibilityState)", "class_method_signature": "TxUtils.createDummyTransaction(TransactionVisibilityState txVisibilityState)", "testcase": false, "constructor": false}, {"identifier": "getFirstShortInProgress", "parameters": "(Map<Long, TransactionManager.InProgressTx> inProgress)", "modifiers": "public static", "return": "long", "signature": "long getFirstShortInProgress(Map<Long, TransactionManager.InProgressTx> inProgress)", "full_signature": "public static long getFirstShortInProgress(Map<Long, TransactionManager.InProgressTx> inProgress)", "class_method_signature": "TxUtils.getFirstShortInProgress(Map<Long, TransactionManager.InProgressTx> inProgress)", "testcase": false, "constructor": false}, {"identifier": "getTimestampForTTL", "parameters": "(long cellTs)", "modifiers": "public static", "return": "long", "signature": "long getTimestampForTTL(long cellTs)", "full_signature": "public static long getTimestampForTTL(long cellTs)", "class_method_signature": "TxUtils.getTimestampForTTL(long cellTs)", "testcase": false, "constructor": false}, {"identifier": "getMaxTTL", "parameters": "(Map<byte[], Long> ttlByFamily)", "modifiers": "private static", "return": "long", "signature": "long getMaxTTL(Map<byte[], Long> ttlByFamily)", "full_signature": "private static long getMaxTTL(Map<byte[], Long> ttlByFamily)", "class_method_signature": "TxUtils.getMaxTTL(Map<byte[], Long> ttlByFamily)", "testcase": false, "constructor": false}, {"identifier": "isPreExistingVersion", "parameters": "(long version)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPreExistingVersion(long version)", "full_signature": "public static boolean isPreExistingVersion(long version)", "class_method_signature": "TxUtils.isPreExistingVersion(long version)", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/util/TxUtils.java"}, "focal_method": {"identifier": "getMaxVisibleTimestamp", "parameters": "(Transaction tx)", "modifiers": "public static", "return": "long", "body": "public static long getMaxVisibleTimestamp(Transaction tx) {\n    // NOTE: +1 here because we want read up to writepointer inclusive, but timerange's end is exclusive\n    // however, we also need to guard against overflow in the case write pointer is set to MAX_VALUE\n    return tx.getWritePointer() < Long.MAX_VALUE ?\n        tx.getWritePointer() + 1 : tx.getWritePointer();\n  }", "signature": "long getMaxVisibleTimestamp(Transaction tx)", "full_signature": "public static long getMaxVisibleTimestamp(Transaction tx)", "class_method_signature": "TxUtils.getMaxVisibleTimestamp(Transaction tx)", "testcase": false, "constructor": false, "invocations": ["getWritePointer", "getWritePointer", "getWritePointer"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}