{"test_class": {"identifier": "PsqlEventSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TABLE_NAME = ConnectionConstants.TEST_TABLE_NAME;", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = ConnectionConstants.TEST_TABLE_NAME", "var_name": "TABLE_NAME"}, {"original_string": "private static final String STREAM_NAME = TABLE_NAME + PsqlEventSource.STREAM_NAME_SUFFIX;", "modifier": "private static final", "type": "String", "declarator": "STREAM_NAME = TABLE_NAME + PsqlEventSource.STREAM_NAME_SUFFIX", "var_name": "STREAM_NAME"}, {"original_string": "private static final boolean WITH_AUTO_CONFIG = true;", "modifier": "private static final", "type": "boolean", "declarator": "WITH_AUTO_CONFIG = true", "var_name": "WITH_AUTO_CONFIG"}, {"original_string": "private static final boolean NO_AUTO_CONFIG = false;", "modifier": "private static final", "type": "boolean", "declarator": "NO_AUTO_CONFIG = false", "var_name": "NO_AUTO_CONFIG"}, {"original_string": "private static final String VALID_PAYLOAD = \"{\\\"eventType\\\":\\\"INSERT\\\",\"\n            + \"\\\"tableName\\\":\\\"aTable\\\",\"\n            + \"\\\"newEntity\\\":{\\\"a\\\":\\\"b\\\"},\"\n            + \"\\\"oldEntity\\\":{}}\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PAYLOAD = \"{\\\"eventType\\\":\\\"INSERT\\\",\"\n            + \"\\\"tableName\\\":\\\"aTable\\\",\"\n            + \"\\\"newEntity\\\":{\\\"a\\\":\\\"b\\\"},\"\n            + \"\\\"oldEntity\\\":{}}\"", "var_name": "VALID_PAYLOAD"}, {"original_string": "private static final String INVALID_PAYLOAD = \"{\\\"eventType\\\":\\\"INSERT\\\",\"\n            + \"\\\"tableName\\\":\\\"aTable\\\",\"\n            + \"\\\"newEntity\\\":{\\\"a\\\":\\\"b\\\"},\"\n            + \"\\\"oldEntity\\\":null}\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_PAYLOAD = \"{\\\"eventType\\\":\\\"INSERT\\\",\"\n            + \"\\\"tableName\\\":\\\"aTable\\\",\"\n            + \"\\\"newEntity\\\":{\\\"a\\\":\\\"b\\\"},\"\n            + \"\\\"oldEntity\\\":null}\"", "var_name": "INVALID_PAYLOAD"}, {"original_string": "@Mock\n    private ConnectionProvider connectionProvider;", "modifier": "@Mock\n    private", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "@Mock\n    private PsqlEventMapper mapper;", "modifier": "@Mock\n    private", "type": "PsqlEventMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private Connection mockedConnection;", "modifier": "private", "type": "Connection", "declarator": "mockedConnection", "var_name": "mockedConnection"}, {"original_string": "private PGConnection mockedPgConnection;", "modifier": "private", "type": "PGConnection", "declarator": "mockedPgConnection", "var_name": "mockedPgConnection"}, {"original_string": "EventSource eventSource;", "modifier": "", "type": "EventSource", "declarator": "eventSource", "var_name": "eventSource"}], "file": "reactive-source-psql/src/test/java/org/reactivesource/psql/PsqlEventSourceTest.java"}, "test_case": {"identifier": "testConnectThrowsDataAccessExceptionWhenCanNotGetConnectionToTheDb", "parameters": "()", "modifiers": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class) public", "return": "void", "body": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class)\n    public void testConnectThrowsDataAccessExceptionWhenCanNotGetConnectionToTheDb() {\n        when(connectionProvider.getConnection()).thenThrow(new DataAccessException(\"\"));\n        eventSource.connect();\n    }", "signature": "void testConnectThrowsDataAccessExceptionWhenCanNotGetConnectionToTheDb()", "full_signature": "@Test(groups = SMALL, expectedExceptions = DataAccessException.class) public void testConnectThrowsDataAccessExceptionWhenCanNotGetConnectionToTheDb()", "class_method_signature": "PsqlEventSourceTest.testConnectThrowsDataAccessExceptionWhenCanNotGetConnectionToTheDb()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "getConnection", "connect"]}, "focal_class": {"identifier": "PsqlEventSource", "superclass": "", "interfaces": "implements EventSource", "fields": [{"original_string": "private static final String ERROR_MSG_ILLEGALSTATE = \"Called getNewEvents before calling connect\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MSG_ILLEGALSTATE = \"Called getNewEvents before calling connect\"", "var_name": "ERROR_MSG_ILLEGALSTATE"}, {"original_string": "private static final String ERROR_MSG_GET_NEW_NOTIFICATIONS = \"Could not get notifications for stream: \";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MSG_GET_NEW_NOTIFICATIONS = \"Could not get notifications for stream: \"", "var_name": "ERROR_MSG_GET_NEW_NOTIFICATIONS"}, {"original_string": "private static final String ERROR_MSG_REGISTER_STREAM = \"Could not start listening for notifications for streamName: \";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MSG_REGISTER_STREAM = \"Could not start listening for notifications for streamName: \"", "var_name": "ERROR_MSG_REGISTER_STREAM"}, {"original_string": "private static final String ERROR_MSG_CHECK_CONNECTION = \"Failed to check if connection to DB is alive\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MSG_CHECK_CONNECTION = \"Failed to check if connection to DB is alive\"", "var_name": "ERROR_MSG_CHECK_CONNECTION"}, {"original_string": "private static final String ERROR_MSG_DISCONNECT = \"Failure while trying to disconnect from DB\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MSG_DISCONNECT = \"Failure while trying to disconnect from DB\"", "var_name": "ERROR_MSG_DISCONNECT"}, {"original_string": "static final String REGISTER_STREAM_QUERY = \"LISTEN \";", "modifier": "static final", "type": "String", "declarator": "REGISTER_STREAM_QUERY = \"LISTEN \"", "var_name": "REGISTER_STREAM_QUERY"}, {"original_string": "static final String DUMMY_QUERY = \"SELECT 1\";", "modifier": "static final", "type": "String", "declarator": "DUMMY_QUERY = \"SELECT 1\"", "var_name": "DUMMY_QUERY"}, {"original_string": "static final String STREAM_NAME_SUFFIX = \"_reactivesource\";", "modifier": "static final", "type": "String", "declarator": "STREAM_NAME_SUFFIX = \"_reactivesource\"", "var_name": "STREAM_NAME_SUFFIX"}, {"original_string": "private ConnectionProvider connectionProvider;", "modifier": "private", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "private Connection connection = null;", "modifier": "private", "type": "Connection", "declarator": "connection = null", "var_name": "connection"}, {"original_string": "private String streamName;", "modifier": "private", "type": "String", "declarator": "streamName", "var_name": "streamName"}, {"original_string": "private PsqlEventMapper mapper;", "modifier": "private", "type": "PsqlEventMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private PsqlConfigurator configurator;", "modifier": "private", "type": "PsqlConfigurator", "declarator": "configurator", "var_name": "configurator"}, {"original_string": "private boolean autoConfig;", "modifier": "private", "type": "boolean", "declarator": "autoConfig", "var_name": "autoConfig"}], "methods": [{"identifier": "PsqlEventSource", "parameters": "(String dbUrl, String username, String password, String tableName)", "modifiers": "public", "return": "", "signature": " PsqlEventSource(String dbUrl, String username, String password, String tableName)", "full_signature": "public  PsqlEventSource(String dbUrl, String username, String password, String tableName)", "class_method_signature": "PsqlEventSource.PsqlEventSource(String dbUrl, String username, String password, String tableName)", "testcase": false, "constructor": true}, {"identifier": "PsqlEventSource", "parameters": "(String dbUrl, String username, String password, String tableName, boolean autoConfig)", "modifiers": "public", "return": "", "signature": " PsqlEventSource(String dbUrl, String username, String password, String tableName, boolean autoConfig)", "full_signature": "public  PsqlEventSource(String dbUrl, String username, String password, String tableName, boolean autoConfig)", "class_method_signature": "PsqlEventSource.PsqlEventSource(String dbUrl, String username, String password, String tableName, boolean autoConfig)", "testcase": false, "constructor": true}, {"identifier": "PsqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName)", "modifiers": "public", "return": "", "signature": " PsqlEventSource(ConnectionProvider connectionProvider, String tableName)", "full_signature": "public  PsqlEventSource(ConnectionProvider connectionProvider, String tableName)", "class_method_signature": "PsqlEventSource.PsqlEventSource(ConnectionProvider connectionProvider, String tableName)", "testcase": false, "constructor": true}, {"identifier": "PsqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName, boolean autoConfig)", "modifiers": "public", "return": "", "signature": " PsqlEventSource(ConnectionProvider connectionProvider, String tableName, boolean autoConfig)", "full_signature": "public  PsqlEventSource(ConnectionProvider connectionProvider, String tableName, boolean autoConfig)", "class_method_signature": "PsqlEventSource.PsqlEventSource(ConnectionProvider connectionProvider, String tableName, boolean autoConfig)", "testcase": false, "constructor": true}, {"identifier": "PsqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                                       boolean autoConfig)", "modifiers": "@VisibleForTesting", "return": "", "signature": " PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                                       boolean autoConfig)", "full_signature": "@VisibleForTesting  PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                                       boolean autoConfig)", "class_method_signature": "PsqlEventSource.PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                                       boolean autoConfig)", "testcase": false, "constructor": true}, {"identifier": "PsqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                           boolean autoConfig, PsqlConfigurator configurator)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                           boolean autoConfig, PsqlConfigurator configurator)", "full_signature": "@VisibleForTesting public  PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                           boolean autoConfig, PsqlConfigurator configurator)", "class_method_signature": "PsqlEventSource.PsqlEventSource(ConnectionProvider connectionProvider, String tableName, PsqlEventMapper mapper,\n                           boolean autoConfig, PsqlConfigurator configurator)", "testcase": false, "constructor": true}, {"identifier": "getNewEvents", "parameters": "()", "modifiers": "@Override public", "return": "List<Event<Map<String, Object>>>", "signature": "List<Event<Map<String, Object>>> getNewEvents()", "full_signature": "@Override public List<Event<Map<String, Object>>> getNewEvents()", "class_method_signature": "PsqlEventSource.getNewEvents()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "PsqlEventSource.connect()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disconnect()", "full_signature": "@Override public void disconnect()", "class_method_signature": "PsqlEventSource.disconnect()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "PsqlEventSource.isConnected()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setup()", "full_signature": "@Override public void setup()", "class_method_signature": "PsqlEventSource.setup()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "PsqlEventSource.cleanup()", "testcase": false, "constructor": false}, {"identifier": "isConnectionAlive", "parameters": "(Connection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean isConnectionAlive(Connection connection)", "full_signature": "private boolean isConnectionAlive(Connection connection)", "class_method_signature": "PsqlEventSource.isConnectionAlive(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "isConnectionOpen", "parameters": "(Connection connection)", "modifiers": "private", "return": "boolean", "signature": "boolean isConnectionOpen(Connection connection)", "full_signature": "private boolean isConnectionOpen(Connection connection)", "class_method_signature": "PsqlEventSource.isConnectionOpen(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "subscribeToStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void subscribeToStream()", "full_signature": "private void subscribeToStream()", "class_method_signature": "PsqlEventSource.subscribeToStream()", "testcase": false, "constructor": false}, {"identifier": "getLatestEvents", "parameters": "()", "modifiers": "private", "return": "PGNotification[]", "signature": "PGNotification[] getLatestEvents()", "full_signature": "private PGNotification[] getLatestEvents()", "class_method_signature": "PsqlEventSource.getLatestEvents()", "testcase": false, "constructor": false}, {"identifier": "parseNotificationsArray", "parameters": "(PGNotification[] notifications)", "modifiers": "private", "return": "List<Event<Map<String, Object>>>", "signature": "List<Event<Map<String, Object>>> parseNotificationsArray(PGNotification[] notifications)", "full_signature": "private List<Event<Map<String, Object>>> parseNotificationsArray(PGNotification[] notifications)", "class_method_signature": "PsqlEventSource.parseNotificationsArray(PGNotification[] notifications)", "testcase": false, "constructor": false}, {"identifier": "verifyConfiguration", "parameters": "(ConnectionProvider connectionProvider, String tableName)", "modifiers": "private", "return": "void", "signature": "void verifyConfiguration(ConnectionProvider connectionProvider, String tableName)", "full_signature": "private void verifyConfiguration(ConnectionProvider connectionProvider, String tableName)", "class_method_signature": "PsqlEventSource.verifyConfiguration(ConnectionProvider connectionProvider, String tableName)", "testcase": false, "constructor": false}, {"identifier": "verifyTableExists", "parameters": "(Connection connection, String tableName)", "modifiers": "private", "return": "void", "signature": "void verifyTableExists(Connection connection, String tableName)", "full_signature": "private void verifyTableExists(Connection connection, String tableName)", "class_method_signature": "PsqlEventSource.verifyTableExists(Connection connection, String tableName)", "testcase": false, "constructor": false}], "file": "reactive-source-psql/src/main/java/org/reactivesource/psql/PsqlEventSource.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void connect() throws DataAccessException {\n        if (!isConnected()) {\n            connection = connectionProvider.getConnection();\n        }\n        subscribeToStream();\n    }", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "PsqlEventSource.connect()", "testcase": false, "constructor": false, "invocations": ["isConnected", "getConnection", "subscribeToStream"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}