{"test_class": {"identifier": "ProgramInstanceRepeatableStageCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ProgramInstanceRepeatableStageCheck rule;", "modifier": "private", "type": "ProgramInstanceRepeatableStageCheck", "declarator": "rule", "var_name": "rule"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheckTest.java"}, "test_case": {"identifier": "failOnNonRepeatableStageAndExistingEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failOnNonRepeatableStageAndExistingEvents()\n    {\n        // Data preparation\n        Program program = createProgram( 'P' );\n        \n        TrackedEntityInstance tei = createTrackedEntityInstance( 'A', createOrganisationUnit( 'A' ) );\n\n        event.setProgramStage( CodeGenerator.generateUid() );\n        event.setProgram( program.getUid() );\n        event.setTrackedEntityInstance( tei.getUid() );\n        ProgramStage programStage = createProgramStage( 'A', program );\n        programStage.setRepeatable( false );\n\n        when( workContext.getProgramStage( programStageIdScheme, event.getProgramStage() ) ).thenReturn( programStage );\n\n        Map<String, Program> programMap = new HashMap<>();\n        programMap.put( program.getUid(), program );\n\n        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n        ProgramInstance programInstance = new ProgramInstance();\n        programInstanceMap.put( event.getUid(), programInstance );\n        \n        Pair<TrackedEntityInstance,Boolean> teiPair = Pair.of( tei, true );\n        \n        Map<String,Pair<TrackedEntityInstance,Boolean> > teiMap = new HashMap<>();\n        teiMap.put( event.getUid(), teiPair );\n       \n        when( workContext.getTrackedEntityInstanceMap() ).thenReturn( teiMap );\n        when( workContext.getProgramsMap() ).thenReturn( programMap );\n        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n        when( workContext.getServiceDelegator() ).thenReturn( serviceDelegator );\n        when( serviceDelegator.getJdbcTemplate() ).thenReturn( jdbcTemplate );\n        when( jdbcTemplate.queryForObject( anyString(), eq( Boolean.class ), eq( programStage.getId() ), eq( tei.getId() ) ) )\n            .thenReturn( true );\n\n        // Method under test\n        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n        assertHasError( summary, event, \"Program stage is not repeatable and an event already exists\" );\n    }", "signature": "void failOnNonRepeatableStageAndExistingEvents()", "full_signature": "@Test public void failOnNonRepeatableStageAndExistingEvents()", "class_method_signature": "ProgramInstanceRepeatableStageCheckTest.failOnNonRepeatableStageAndExistingEvents()", "testcase": true, "constructor": false, "invocations": ["createProgram", "createTrackedEntityInstance", "createOrganisationUnit", "setProgramStage", "generateUid", "setProgram", "getUid", "setTrackedEntityInstance", "getUid", "createProgramStage", "setRepeatable", "thenReturn", "when", "getProgramStage", "getProgramStage", "put", "getUid", "put", "getUid", "of", "put", "getUid", "thenReturn", "when", "getTrackedEntityInstanceMap", "thenReturn", "when", "getProgramsMap", "thenReturn", "when", "getProgramInstanceMap", "thenReturn", "when", "getServiceDelegator", "thenReturn", "when", "getJdbcTemplate", "thenReturn", "when", "queryForObject", "anyString", "eq", "eq", "getId", "eq", "getId", "check", "assertHasError"]}, "focal_class": {"identifier": "ProgramInstanceRepeatableStageCheck", "superclass": "", "interfaces": "implements Checker", "fields": [], "methods": [{"identifier": "check", "parameters": "(ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check(ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramInstanceRepeatableStageCheck.check(ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false}, {"identifier": "hasProgramStageInstance", "parameters": "( JdbcTemplate jdbcTemplate, long programStageId, long trackedEntityInstanceId )", "modifiers": "private", "return": "boolean", "signature": "boolean hasProgramStageInstance( JdbcTemplate jdbcTemplate, long programStageId, long trackedEntityInstanceId )", "full_signature": "private boolean hasProgramStageInstance( JdbcTemplate jdbcTemplate, long programStageId, long trackedEntityInstanceId )", "class_method_signature": "ProgramInstanceRepeatableStageCheck.hasProgramStageInstance( JdbcTemplate jdbcTemplate, long programStageId, long trackedEntityInstanceId )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramInstanceRepeatableStageCheck.java"}, "focal_method": {"identifier": "check", "parameters": "(ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check(ImmutableEvent event, WorkContext ctx )\n    {\n        IdScheme scheme = ctx.getImportOptions().getIdSchemes().getProgramStageIdScheme();\n        ProgramStage programStage = ctx.getProgramStage( scheme, event.getProgramStage() );\n        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n        Program program = ctx.getProgramsMap().get( event.getProgram() );\n        TrackedEntityInstance tei = null;\n        \n        if ( program.isRegistration() )\n        {\n            tei = ctx.getTrackedEntityInstanceMap().get( event.getUid() ).getLeft();\n        }\n\n        /*\n         * ProgramInstance should never be null. If it's null, the ProgramInstanceCheck\n         * should report this anomaly.\n         */\n        // @formatter:off\n        if ( programInstance != null && \n             tei != null &&\n             program.isRegistration() && \n             !programStage.getRepeatable() && \n             hasProgramStageInstance( ctx.getServiceDelegator().getJdbcTemplate(), programStage.getId(), tei.getId() ) )\n        {\n            return new ImportSummary( ImportStatus.ERROR,\n                \"Program stage is not repeatable and an event already exists\" ).setReference( event.getEvent() )\n                    .incrementIgnored();\n        }\n        // @formatter:on\n\n        return success();\n    }", "signature": "ImportSummary check(ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check(ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramInstanceRepeatableStageCheck.check(ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["getProgramStageIdScheme", "getIdSchemes", "getImportOptions", "getProgramStage", "getProgramStage", "get", "getProgramInstanceMap", "getUid", "get", "getProgramsMap", "getProgram", "isRegistration", "getLeft", "get", "getTrackedEntityInstanceMap", "getUid", "isRegistration", "getRepeatable", "hasProgramStageInstance", "getJdbcTemplate", "getServiceDelegator", "getId", "getId", "incrementIgnored", "setReference", "getEvent", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}