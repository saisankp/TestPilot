{"test_class": {"identifier": "PSAgentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(PSAgentTest.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(PSAgentTest.class)", "var_name": "LOG"}, {"original_string": "private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;", "modifier": "private static final", "type": "String", "declarator": "LOCAL_FS = LocalFileSystem.DEFAULT_FS", "var_name": "LOCAL_FS"}, {"original_string": "private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");", "modifier": "private static final", "type": "String", "declarator": "TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\")", "var_name": "TMP_PATH"}, {"original_string": "private static AngelClient angelClient;", "modifier": "private static", "type": "AngelClient", "declarator": "angelClient", "var_name": "angelClient"}, {"original_string": "private static WorkerGroupId group0Id;", "modifier": "private static", "type": "WorkerGroupId", "declarator": "group0Id", "var_name": "group0Id"}, {"original_string": "private static WorkerId worker0Id;", "modifier": "private static", "type": "WorkerId", "declarator": "worker0Id", "var_name": "worker0Id"}, {"original_string": "private static WorkerAttemptId worker0Attempt0Id;", "modifier": "private static", "type": "WorkerAttemptId", "declarator": "worker0Attempt0Id", "var_name": "worker0Attempt0Id"}, {"original_string": "private static TaskId task0Id;", "modifier": "private static", "type": "TaskId", "declarator": "task0Id", "var_name": "task0Id"}, {"original_string": "private static TaskId task1Id;", "modifier": "private static", "type": "TaskId", "declarator": "task1Id", "var_name": "task1Id"}, {"original_string": "private static ParameterServerId psId;", "modifier": "private static", "type": "ParameterServerId", "declarator": "psId", "var_name": "psId"}, {"original_string": "private static PSAttemptId psAttempt0Id;", "modifier": "private static", "type": "PSAttemptId", "declarator": "psAttempt0Id", "var_name": "psAttempt0Id"}], "file": "angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java"}, "test_case": {"identifier": "testTaskContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testTaskContext() throws Exception {\n    try {\n      AngelApplicationMaster angelAppMaster = LocalClusterContext.get().getMaster().getAppMaster();\n      assertTrue(angelAppMaster != null);\n\n      AMTaskManager taskManager = angelAppMaster.getAppContext().getTaskManager();\n      assertTrue(taskManager != null);\n\n      WorkerManager workerManager = angelAppMaster.getAppContext().getWorkerManager();\n      assertTrue(workerManager != null);\n\n      Worker worker = LocalClusterContext.get().getWorker(worker0Attempt0Id).getWorker();\n      assertTrue(worker != null);\n\n      PSAgent psAgent = worker.getPSAgent();\n      assertTrue(psAgent != null);\n\n      PSAgentContext psAgentContext = PSAgentContext.get();\n      assertTrue(psAgentContext.getPsAgent() != null);\n\n      TaskContext taskContext1 = psAgentContext.getTaskContext(1);\n      TaskContext taskContext2 = psAgentContext.getTaskContext(2);\n      assertTrue(taskContext1 != null);\n      assertTrue(taskContext2 != null);\n\n      assertEquals(taskContext1.getIndex(), 1);\n      assertEquals(taskContext2.getIndex(), 2);\n\n      assertEquals(taskContext1.getEpoch(), 0);\n      assertEquals(taskContext2.getEpoch(), 0);\n\n      assertEquals(taskContext1.getMatrixClock(1), 0);\n      assertEquals(taskContext2.getMatrixClock(2), 0);\n\n      assertEquals(taskContext1.getMatrixClocks().size(), 1);\n      assertEquals(taskContext2.getMatrixClocks().size(), 1);\n\n      assertEquals(taskContext1.getProgress(), 0.0, 1e-5);\n      assertEquals(taskContext2.getProgress(), 0.0, 1e-5);\n    } catch (Exception x) {\n      LOG.error(\"run testTaskContext failed \", x);\n      throw x;\n    }\n  }", "signature": "void testTaskContext()", "full_signature": "@Test public void testTaskContext()", "class_method_signature": "PSAgentTest.testTaskContext()", "testcase": true, "constructor": false, "invocations": ["getAppMaster", "getMaster", "get", "assertTrue", "getTaskManager", "getAppContext", "assertTrue", "getWorkerManager", "getAppContext", "assertTrue", "getWorker", "getWorker", "get", "assertTrue", "getPSAgent", "assertTrue", "get", "assertTrue", "getPsAgent", "getTaskContext", "getTaskContext", "assertTrue", "assertTrue", "assertEquals", "getIndex", "assertEquals", "getIndex", "assertEquals", "getEpoch", "assertEquals", "getEpoch", "assertEquals", "getMatrixClock", "assertEquals", "getMatrixClock", "assertEquals", "size", "getMatrixClocks", "assertEquals", "size", "getMatrixClocks", "assertEquals", "getProgress", "assertEquals", "getProgress", "error"]}, "focal_class": {"identifier": "PSAgent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(PSAgent.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(PSAgent.class)", "var_name": "LOG"}, {"original_string": "private final Configuration conf;", "modifier": "private final", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private final ApplicationId appId;", "modifier": "private final", "type": "ApplicationId", "declarator": "appId", "var_name": "appId"}, {"original_string": "private final String user;", "modifier": "private final", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private volatile int id;", "modifier": "private volatile", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private final TConnection connection;", "modifier": "private final", "type": "TConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private volatile MasterClient masterClient;", "modifier": "private volatile", "type": "MasterClient", "declarator": "masterClient", "var_name": "masterClient"}, {"original_string": "private volatile PSControlClientManager psControlClientManager;", "modifier": "private volatile", "type": "PSControlClientManager", "declarator": "psControlClientManager", "var_name": "psControlClientManager"}, {"original_string": "private volatile Location location;", "modifier": "private volatile", "type": "Location", "declarator": "location", "var_name": "location"}, {"original_string": "private final Location masterLocation;", "modifier": "private final", "type": "Location", "declarator": "masterLocation", "var_name": "masterLocation"}, {"original_string": "private volatile PSAgentLocationManager locationManager;", "modifier": "private volatile", "type": "PSAgentLocationManager", "declarator": "locationManager", "var_name": "locationManager"}, {"original_string": "private volatile PSAgentMatrixMetaManager matrixMetaManager;", "modifier": "private volatile", "type": "PSAgentMatrixMetaManager", "declarator": "matrixMetaManager", "var_name": "matrixMetaManager"}, {"original_string": "private volatile MatrixOpLogCache opLogCache;", "modifier": "private volatile", "type": "MatrixOpLogCache", "declarator": "opLogCache", "var_name": "opLogCache"}, {"original_string": "private volatile MatrixTransportClient matrixTransClient;", "modifier": "private volatile", "type": "MatrixTransportClient", "declarator": "matrixTransClient", "var_name": "matrixTransClient"}, {"original_string": "private final AtomicBoolean psAgentInitFinishedFlag;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "psAgentInitFinishedFlag", "var_name": "psAgentInitFinishedFlag"}, {"original_string": "private volatile Thread heartbeatThread;", "modifier": "private volatile", "type": "Thread", "declarator": "heartbeatThread", "var_name": "heartbeatThread"}, {"original_string": "private final AtomicBoolean stopped;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "stopped", "var_name": "stopped"}, {"original_string": "private final int heartbeatIntervalMs;", "modifier": "private final", "type": "int", "declarator": "heartbeatIntervalMs", "var_name": "heartbeatIntervalMs"}, {"original_string": "private final Map<String, String> metrics;", "modifier": "private final", "type": "Map<String, String>", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private volatile ConsistencyController consistencyController;", "modifier": "private volatile", "type": "ConsistencyController", "declarator": "consistencyController", "var_name": "consistencyController"}, {"original_string": "private volatile ClockCache clockCache;", "modifier": "private volatile", "type": "ClockCache", "declarator": "clockCache", "var_name": "clockCache"}, {"original_string": "private volatile MatricesCache matricesCache;", "modifier": "private volatile", "type": "MatricesCache", "declarator": "matricesCache", "var_name": "matricesCache"}, {"original_string": "private volatile MatrixStorageManager matrixStorageManager;", "modifier": "private volatile", "type": "MatrixStorageManager", "declarator": "matrixStorageManager", "var_name": "matrixStorageManager"}, {"original_string": "private volatile UserRequestAdapter userRequestAdapter;", "modifier": "private volatile", "type": "UserRequestAdapter", "declarator": "userRequestAdapter", "var_name": "userRequestAdapter"}, {"original_string": "private final boolean needHeartBeat;", "modifier": "private final", "type": "boolean", "declarator": "needHeartBeat", "var_name": "needHeartBeat"}, {"original_string": "private final RunningMode runningMode;", "modifier": "private final", "type": "RunningMode", "declarator": "runningMode", "var_name": "runningMode"}, {"original_string": "private final Executor executor;", "modifier": "private final", "type": "Executor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final AtomicBoolean exitedFlag;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "exitedFlag", "var_name": "exitedFlag"}, {"original_string": "private volatile TConnection controlConnectManager;", "modifier": "private volatile", "type": "TConnection", "declarator": "controlConnectManager", "var_name": "controlConnectManager"}], "methods": [{"identifier": "PSAgent", "parameters": "(String masterIp, int masterPort, int clientIndex)", "modifiers": "public", "return": "", "signature": " PSAgent(String masterIp, int masterPort, int clientIndex)", "full_signature": "public  PSAgent(String masterIp, int masterPort, int clientIndex)", "class_method_signature": "PSAgent.PSAgent(String masterIp, int masterPort, int clientIndex)", "testcase": false, "constructor": true}, {"identifier": "PSAgent", "parameters": "(Configuration conf, String masterIp, int masterPort, int clientIndex)", "modifiers": "public", "return": "", "signature": " PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex)", "full_signature": "public  PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex)", "class_method_signature": "PSAgent.PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex)", "testcase": false, "constructor": true}, {"identifier": "PSAgent", "parameters": "(Configuration conf, ApplicationId appId, String user, String masterIp,\n                 int masterPort, boolean needHeartBeat, Executor executor)", "modifiers": "public", "return": "", "signature": " PSAgent(Configuration conf, ApplicationId appId, String user, String masterIp,\n                 int masterPort, boolean needHeartBeat, Executor executor)", "full_signature": "public  PSAgent(Configuration conf, ApplicationId appId, String user, String masterIp,\n                 int masterPort, boolean needHeartBeat, Executor executor)", "class_method_signature": "PSAgent.PSAgent(Configuration conf, ApplicationId appId, String user, String masterIp,\n                 int masterPort, boolean needHeartBeat, Executor executor)", "testcase": false, "constructor": true}, {"identifier": "PSAgent", "parameters": "(Configuration conf, String masterIp, int masterPort, int clientIndex,\n                 boolean needHeartBeat, Executor executor)", "modifiers": "public", "return": "", "signature": " PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\n                 boolean needHeartBeat, Executor executor)", "full_signature": "public  PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\n                 boolean needHeartBeat, Executor executor)", "class_method_signature": "PSAgent.PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\n                 boolean needHeartBeat, Executor executor)", "testcase": false, "constructor": true}, {"identifier": "initRunningMode", "parameters": "(Configuration conf)", "modifiers": "private", "return": "RunningMode", "signature": "RunningMode initRunningMode(Configuration conf)", "full_signature": "private RunningMode initRunningMode(Configuration conf)", "class_method_signature": "PSAgent.initRunningMode(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "initAndStart", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initAndStart()", "full_signature": "public void initAndStart()", "class_method_signature": "PSAgent.initAndStart()", "testcase": false, "constructor": false}, {"identifier": "refreshMatrixInfo", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshMatrixInfo()", "full_signature": "public void refreshMatrixInfo()", "class_method_signature": "PSAgent.refreshMatrixInfo()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "PSAgent.stop()", "testcase": false, "constructor": false}, {"identifier": "heartbeat", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void heartbeat()", "full_signature": "protected void heartbeat()", "class_method_signature": "PSAgent.heartbeat()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void register()", "full_signature": "private void register()", "class_method_signature": "PSAgent.register()", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "public Configuration getConf()", "class_method_signature": "PSAgent.getConf()", "testcase": false, "constructor": false}, {"identifier": "getMasterLocation", "parameters": "()", "modifiers": "public", "return": "Location", "signature": "Location getMasterLocation()", "full_signature": "public Location getMasterLocation()", "class_method_signature": "PSAgent.getMasterLocation()", "testcase": false, "constructor": false}, {"identifier": "getAppId", "parameters": "()", "modifiers": "public", "return": "ApplicationId", "signature": "ApplicationId getAppId()", "full_signature": "public ApplicationId getAppId()", "class_method_signature": "PSAgent.getAppId()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUser()", "full_signature": "public String getUser()", "class_method_signature": "PSAgent.getUser()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "TConnection", "signature": "TConnection getConnection()", "full_signature": "public TConnection getConnection()", "class_method_signature": "PSAgent.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getMasterClient", "parameters": "()", "modifiers": "public", "return": "MasterClient", "signature": "MasterClient getMasterClient()", "full_signature": "public MasterClient getMasterClient()", "class_method_signature": "PSAgent.getMasterClient()", "testcase": false, "constructor": false}, {"identifier": "getIp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIp()", "full_signature": "public String getIp()", "class_method_signature": "PSAgent.getIp()", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void done()", "full_signature": "public void done()", "class_method_signature": "PSAgent.done()", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String errorMsg)", "modifiers": "public", "return": "void", "signature": "void error(String errorMsg)", "full_signature": "public void error(String errorMsg)", "class_method_signature": "PSAgent.error(String errorMsg)", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "()", "modifiers": "public", "return": "Location", "signature": "Location getLocation()", "full_signature": "public Location getLocation()", "class_method_signature": "PSAgent.getLocation()", "testcase": false, "constructor": false}, {"identifier": "getLocationManager", "parameters": "()", "modifiers": "public", "return": "PSAgentLocationManager", "signature": "PSAgentLocationManager getLocationManager()", "full_signature": "public PSAgentLocationManager getLocationManager()", "class_method_signature": "PSAgent.getLocationManager()", "testcase": false, "constructor": false}, {"identifier": "getMatrixMetaManager", "parameters": "()", "modifiers": "public", "return": "PSAgentMatrixMetaManager", "signature": "PSAgentMatrixMetaManager getMatrixMetaManager()", "full_signature": "public PSAgentMatrixMetaManager getMatrixMetaManager()", "class_method_signature": "PSAgent.getMatrixMetaManager()", "testcase": false, "constructor": false}, {"identifier": "getOpLogCache", "parameters": "()", "modifiers": "public", "return": "MatrixOpLogCache", "signature": "MatrixOpLogCache getOpLogCache()", "full_signature": "public MatrixOpLogCache getOpLogCache()", "class_method_signature": "PSAgent.getOpLogCache()", "testcase": false, "constructor": false}, {"identifier": "getMatrixTransportClient", "parameters": "()", "modifiers": "public", "return": "MatrixTransportClient", "signature": "MatrixTransportClient getMatrixTransportClient()", "full_signature": "public MatrixTransportClient getMatrixTransportClient()", "class_method_signature": "PSAgent.getMatrixTransportClient()", "testcase": false, "constructor": false}, {"identifier": "getMatrixClient", "parameters": "(int matrixId)", "modifiers": "public", "return": "MatrixClient", "signature": "MatrixClient getMatrixClient(int matrixId)", "full_signature": "public MatrixClient getMatrixClient(int matrixId)", "class_method_signature": "PSAgent.getMatrixClient(int matrixId)", "testcase": false, "constructor": false}, {"identifier": "getMatrixClient", "parameters": "(int matrixId, int taskIndex)", "modifiers": "public", "return": "MatrixClient", "signature": "MatrixClient getMatrixClient(int matrixId, int taskIndex)", "full_signature": "public MatrixClient getMatrixClient(int matrixId, int taskIndex)", "class_method_signature": "PSAgent.getMatrixClient(int matrixId, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "getMatrixClient", "parameters": "(String matrixName)", "modifiers": "public", "return": "MatrixClient", "signature": "MatrixClient getMatrixClient(String matrixName)", "full_signature": "public MatrixClient getMatrixClient(String matrixName)", "class_method_signature": "PSAgent.getMatrixClient(String matrixName)", "testcase": false, "constructor": false}, {"identifier": "getMatrixClient", "parameters": "(String matrixName, int taskIndex)", "modifiers": "public", "return": "MatrixClient", "signature": "MatrixClient getMatrixClient(String matrixName, int taskIndex)", "full_signature": "public MatrixClient getMatrixClient(String matrixName, int taskIndex)", "class_method_signature": "PSAgent.getMatrixClient(String matrixName, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "getHeartbeatIntervalMs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHeartbeatIntervalMs()", "full_signature": "public int getHeartbeatIntervalMs()", "class_method_signature": "PSAgent.getHeartbeatIntervalMs()", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getMetrics()", "full_signature": "public Map<String, String> getMetrics()", "class_method_signature": "PSAgent.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getConsistencyController", "parameters": "()", "modifiers": "public", "return": "ConsistencyController", "signature": "ConsistencyController getConsistencyController()", "full_signature": "public ConsistencyController getConsistencyController()", "class_method_signature": "PSAgent.getConsistencyController()", "testcase": false, "constructor": false}, {"identifier": "getClockCache", "parameters": "()", "modifiers": "public", "return": "ClockCache", "signature": "ClockCache getClockCache()", "full_signature": "public ClockCache getClockCache()", "class_method_signature": "PSAgent.getClockCache()", "testcase": false, "constructor": false}, {"identifier": "getMatricesCache", "parameters": "()", "modifiers": "public", "return": "MatricesCache", "signature": "MatricesCache getMatricesCache()", "full_signature": "public MatricesCache getMatricesCache()", "class_method_signature": "PSAgent.getMatricesCache()", "testcase": false, "constructor": false}, {"identifier": "createMatrix", "parameters": "(MatrixContext matrixContext, long timeOutMs)", "modifiers": "public", "return": "void", "signature": "void createMatrix(MatrixContext matrixContext, long timeOutMs)", "full_signature": "public void createMatrix(MatrixContext matrixContext, long timeOutMs)", "class_method_signature": "PSAgent.createMatrix(MatrixContext matrixContext, long timeOutMs)", "testcase": false, "constructor": false}, {"identifier": "getMatrix", "parameters": "(String matrixName)", "modifiers": "public", "return": "MatrixMeta", "signature": "MatrixMeta getMatrix(String matrixName)", "full_signature": "public MatrixMeta getMatrix(String matrixName)", "class_method_signature": "PSAgent.getMatrix(String matrixName)", "testcase": false, "constructor": false}, {"identifier": "removeLocalMatrix", "parameters": "(String matrixName)", "modifiers": "private", "return": "void", "signature": "void removeLocalMatrix(String matrixName)", "full_signature": "private void removeLocalMatrix(String matrixName)", "class_method_signature": "PSAgent.removeLocalMatrix(String matrixName)", "testcase": false, "constructor": false}, {"identifier": "removeCacheData", "parameters": "(int matrixId)", "modifiers": "private", "return": "void", "signature": "void removeCacheData(int matrixId)", "full_signature": "private void removeCacheData(int matrixId)", "class_method_signature": "PSAgent.removeCacheData(int matrixId)", "testcase": false, "constructor": false}, {"identifier": "releaseMatricesUseName", "parameters": "(List<String> matrixNames)", "modifiers": "public", "return": "void", "signature": "void releaseMatricesUseName(List<String> matrixNames)", "full_signature": "public void releaseMatricesUseName(List<String> matrixNames)", "class_method_signature": "PSAgent.releaseMatricesUseName(List<String> matrixNames)", "testcase": false, "constructor": false}, {"identifier": "releaseMatrix", "parameters": "(String matrixName)", "modifiers": "public", "return": "void", "signature": "void releaseMatrix(String matrixName)", "full_signature": "public void releaseMatrix(String matrixName)", "class_method_signature": "PSAgent.releaseMatrix(String matrixName)", "testcase": false, "constructor": false}, {"identifier": "releaseMatrices", "parameters": "(List<Integer> matrixIds)", "modifiers": "public", "return": "void", "signature": "void releaseMatrices(List<Integer> matrixIds)", "full_signature": "public void releaseMatrices(List<Integer> matrixIds)", "class_method_signature": "PSAgent.releaseMatrices(List<Integer> matrixIds)", "testcase": false, "constructor": false}, {"identifier": "releaseMatrix", "parameters": "(int matrixId)", "modifiers": "public", "return": "void", "signature": "void releaseMatrix(int matrixId)", "full_signature": "public void releaseMatrix(int matrixId)", "class_method_signature": "PSAgent.releaseMatrix(int matrixId)", "testcase": false, "constructor": false}, {"identifier": "createMatrices", "parameters": "(List<MatrixContext> matrixContexts, long timeOutMs)", "modifiers": "public", "return": "void", "signature": "void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)", "full_signature": "public void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)", "class_method_signature": "PSAgent.createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)", "testcase": false, "constructor": false}, {"identifier": "getMatrices", "parameters": "(List<String> matrixNames)", "modifiers": "public", "return": "List<MatrixMeta>", "signature": "List<MatrixMeta> getMatrices(List<String> matrixNames)", "full_signature": "public List<MatrixMeta> getMatrices(List<String> matrixNames)", "class_method_signature": "PSAgent.getMatrices(List<String> matrixNames)", "testcase": false, "constructor": false}, {"identifier": "getMatrixStorageManager", "parameters": "()", "modifiers": "public", "return": "MatrixStorageManager", "signature": "MatrixStorageManager getMatrixStorageManager()", "full_signature": "public MatrixStorageManager getMatrixStorageManager()", "class_method_signature": "PSAgent.getMatrixStorageManager()", "testcase": false, "constructor": false}, {"identifier": "getUserRequestAdapter", "parameters": "()", "modifiers": "public", "return": "UserRequestAdapter", "signature": "UserRequestAdapter getUserRequestAdapter()", "full_signature": "public UserRequestAdapter getUserRequestAdapter()", "class_method_signature": "PSAgent.getUserRequestAdapter()", "testcase": false, "constructor": false}, {"identifier": "getRunningMode", "parameters": "()", "modifiers": "public", "return": "RunningMode", "signature": "RunningMode getRunningMode()", "full_signature": "public RunningMode getRunningMode()", "class_method_signature": "PSAgent.getRunningMode()", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "Executor", "signature": "Executor getExecutor()", "full_signature": "public Executor getExecutor()", "class_method_signature": "PSAgent.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "PSAgent.getId()", "testcase": false, "constructor": false}, {"identifier": "getControlConnectManager", "parameters": "()", "modifiers": "public", "return": "TConnection", "signature": "TConnection getControlConnectManager()", "full_signature": "public TConnection getControlConnectManager()", "class_method_signature": "PSAgent.getControlConnectManager()", "testcase": false, "constructor": false}, {"identifier": "getPsControlClientManager", "parameters": "()", "modifiers": "public", "return": "PSControlClientManager", "signature": "PSControlClientManager getPsControlClientManager()", "full_signature": "public PSControlClientManager getPsControlClientManager()", "class_method_signature": "PSAgent.getPsControlClientManager()", "testcase": false, "constructor": false}], "file": "angel-ps/core/src/main/java/com/tencent/angel/psagent/PSAgent.java"}, "focal_method": {"identifier": "error", "parameters": "(String errorMsg)", "modifiers": "public", "return": "void", "body": "public void error(String errorMsg) {\n    if (!exitedFlag.getAndSet(true)) {\n      LOG.info(\"psagent falied\");\n      // Stop all modules\n      if (executor != null) {\n        executor.error(errorMsg);\n      } else {\n        stop();\n      }\n    }\n  }", "signature": "void error(String errorMsg)", "full_signature": "public void error(String errorMsg)", "class_method_signature": "PSAgent.error(String errorMsg)", "testcase": false, "constructor": false, "invocations": ["getAndSet", "info", "error", "stop"]}, "repository": {"repo_id": 89322848, "url": "https://github.com/Angel-ML/angel", "stars": 5692, "created": "4/25/2017 5:57:43 AM +00:00", "updates": "2020-01-27T19:16:33+00:00", "fork": "False", "license": "licensed"}}