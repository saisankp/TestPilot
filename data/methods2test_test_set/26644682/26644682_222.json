{"test_class": {"identifier": "FileSystemPreparationRepositoryTest", "superclass": "extends PreparationRepositoryTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private VersionService versionService;", "modifier": "@Autowired\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/preparation/store/file/FileSystemPreparationRepositoryTest.java"}, "test_case": {"identifier": "shouldOverwriteContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldOverwriteContent() {\n        Preparation expected = getPreparation(\"khdgf\");\n        expected.setName(\"old name\");\n        repository.add(expected);\n        expected.setName(\"new name\");\n        repository.add(expected);\n        final Preparation actual = repository.get(expected.id(), Preparation.class);\n        assertEquals(expected, actual);\n    }", "signature": "void shouldOverwriteContent()", "full_signature": "@Test public void shouldOverwriteContent()", "class_method_signature": "FileSystemPreparationRepositoryTest.shouldOverwriteContent()", "testcase": true, "constructor": false, "invocations": ["getPreparation", "setName", "add", "setName", "add", "get", "id", "assertEquals"]}, "focal_class": {"identifier": "FileSystemPreparationRepository", "superclass": "extends ObjectPreparationRepository", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileSystemPreparationRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileSystemPreparationRepository.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Value(\"${preparation.store.file.location}\")\n    private String preparationsLocation;", "modifier": "@Value(\"${preparation.store.file.location}\")\n    private", "type": "String", "declarator": "preparationsLocation", "var_name": "preparationsLocation"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "FileSystemPreparationRepository.init()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Identifiable object)", "modifiers": "@Override public", "return": "void", "signature": "void add(Identifiable object)", "full_signature": "@Override public void add(Identifiable object)", "class_method_signature": "FileSystemPreparationRepository.add(Identifiable object)", "testcase": false, "constructor": false}, {"identifier": "source", "parameters": "(Class<T> clazz)", "modifiers": "@Override public", "return": "Stream<T>", "signature": "Stream<T> source(Class<T> clazz)", "full_signature": "@Override public Stream<T> source(Class<T> clazz)", "class_method_signature": "FileSystemPreparationRepository.source(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String id, Class<T> clazz)", "modifiers": "private", "return": "T", "signature": "T read(String id, Class<T> clazz)", "full_signature": "private T read(String id, Class<T> clazz)", "class_method_signature": "FileSystemPreparationRepository.read(String id, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "FileSystemPreparationRepository.clear()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Identifiable object)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Identifiable object)", "full_signature": "@Override public void remove(Identifiable object)", "class_method_signature": "FileSystemPreparationRepository.remove(Identifiable object)", "testcase": false, "constructor": false}, {"identifier": "getIdentifiableFile", "parameters": "(Identifiable object)", "modifiers": "private", "return": "File", "signature": "File getIdentifiableFile(Identifiable object)", "full_signature": "private File getIdentifiableFile(Identifiable object)", "class_method_signature": "FileSystemPreparationRepository.getIdentifiableFile(Identifiable object)", "testcase": false, "constructor": false}, {"identifier": "getIdentifiableFile", "parameters": "(Class clazz, String id)", "modifiers": "private", "return": "File", "signature": "File getIdentifiableFile(Class clazz, String id)", "full_signature": "private File getIdentifiableFile(Class clazz, String id)", "class_method_signature": "FileSystemPreparationRepository.getIdentifiableFile(Class clazz, String id)", "testcase": false, "constructor": false}, {"identifier": "stripOptionalPrefix", "parameters": "(Class clazz, String id)", "modifiers": "private", "return": "String", "signature": "String stripOptionalPrefix(Class clazz, String id)", "full_signature": "private String stripOptionalPrefix(Class clazz, String id)", "class_method_signature": "FileSystemPreparationRepository.stripOptionalPrefix(Class clazz, String id)", "testcase": false, "constructor": false}, {"identifier": "getRootFolder", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getRootFolder()", "full_signature": "private File getRootFolder()", "class_method_signature": "FileSystemPreparationRepository.getRootFolder()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/preparation/store/file/FileSystemPreparationRepository.java"}, "focal_method": {"identifier": "add", "parameters": "(Identifiable object)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void add(Identifiable object) {\n\n        // defensive programming\n        if (object == null) {\n            LOG.warn(\"cannot save null...\");\n            return;\n        }\n\n        final File outputFile = getIdentifiableFile(object);\n        try {\n            FileUtils.touch(outputFile);\n        } catch (IOException e) {\n            LOG.error(\"Unable to prepare file for {}.\", object, e);\n        }\n\n        try (GZIPOutputStream output = new GZIPOutputStream(new FileOutputStream(outputFile))) {\n            mapper.writer().writeValue(output, object);\n        } catch (IOException e) {\n            LOG.error(\"Error saving {}\", object, e);\n            throw new TDPException(CommonErrorCodes.UNABLE_TO_SAVE_PREPARATION, e,\n                    ExceptionContext.build().put(\"id\", object.id()));\n        }\n        LOG.debug(\"{} #{} saved\", object.getClass().getSimpleName(), object.id());\n    }", "signature": "void add(Identifiable object)", "full_signature": "@Override public void add(Identifiable object)", "class_method_signature": "FileSystemPreparationRepository.add(Identifiable object)", "testcase": false, "constructor": false, "invocations": ["warn", "getIdentifiableFile", "touch", "error", "writeValue", "writer", "error", "put", "build", "id", "debug", "getSimpleName", "getClass", "id"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}