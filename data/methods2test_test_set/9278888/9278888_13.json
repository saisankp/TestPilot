{"test_class": {"identifier": "TraceMongoCommandListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static BsonDocument LONG_COMMAND = BsonDocument.parse(\"{\" +\n    \"   \\\"insert\\\": \\\"myCollection\\\",\\n\" +\n    \"   \\\"bar\\\": {\" +\n    \"       \\\"test\\\": \\\"asdfghjkl\\\",\\n\" +\n    \"   },\\n\" +\n    \"}\");", "modifier": "static", "type": "BsonDocument", "declarator": "LONG_COMMAND = BsonDocument.parse(\"{\" +\n    \"   \\\"insert\\\": \\\"myCollection\\\",\\n\" +\n    \"   \\\"bar\\\": {\" +\n    \"       \\\"test\\\": \\\"asdfghjkl\\\",\\n\" +\n    \"   },\\n\" +\n    \"}\")", "var_name": "LONG_COMMAND"}, {"original_string": "static Throwable EXCEPTION = new RuntimeException(\"Error occurred\");", "modifier": "static", "type": "Throwable", "declarator": "EXCEPTION = new RuntimeException(\"Error occurred\")", "var_name": "EXCEPTION"}, {"original_string": "@Mock ThreadLocalSpan threadLocalSpan;", "modifier": "@Mock", "type": "ThreadLocalSpan", "declarator": "threadLocalSpan", "var_name": "threadLocalSpan"}, {"original_string": "@Mock Span span;", "modifier": "@Mock", "type": "Span", "declarator": "span", "var_name": "span"}, {"original_string": "TraceMongoCommandListener listener;", "modifier": "", "type": "TraceMongoCommandListener", "declarator": "listener", "var_name": "listener"}], "file": "instrumentation/mongodb/src/test/java/brave/mongodb/TraceMongoCommandListenerTest.java"}, "test_case": {"identifier": "getCollectionName_notAllowListedCommandAndCollectionField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getCollectionName_notAllowListedCommandAndCollectionField() {\n    BsonDocument command = new BsonDocument(Arrays.asList(\n      new BsonElement(\"collection\", new BsonString(\"coll\")),\n      new BsonElement(\"cmd\", new BsonString(\"bar\"))\n    ));\n    assertThat(listener.getCollectionName(command, \"cmd\")).isEqualTo(\n      \"coll\"); // collection field wins\n  }", "signature": "void getCollectionName_notAllowListedCommandAndCollectionField()", "full_signature": "@Test public void getCollectionName_notAllowListedCommandAndCollectionField()", "class_method_signature": "TraceMongoCommandListenerTest.getCollectionName_notAllowListedCommandAndCollectionField()", "testcase": true, "constructor": false, "invocations": ["asList", "isEqualTo", "assertThat", "getCollectionName"]}, "focal_class": {"identifier": "TraceMongoCommandListener", "superclass": "", "interfaces": "implements CommandListener", "fields": [{"original_string": "static final Set<String> COMMANDS_WITH_COLLECTION_NAME = new LinkedHashSet<>(Arrays.asList(\n    \"aggregate\", \"count\", \"distinct\", \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\",\n    \"insert\", \"update\", \"collMod\", \"compact\", \"convertToCapped\", \"create\", \"createIndexes\", \"drop\",\n    \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"));", "modifier": "static final", "type": "Set<String>", "declarator": "COMMANDS_WITH_COLLECTION_NAME = new LinkedHashSet<>(Arrays.asList(\n    \"aggregate\", \"count\", \"distinct\", \"mapReduce\", \"geoSearch\", \"delete\", \"find\", \"findAndModify\",\n    \"insert\", \"update\", \"collMod\", \"compact\", \"convertToCapped\", \"create\", \"createIndexes\", \"drop\",\n    \"dropIndexes\", \"killCursors\", \"listIndexes\", \"reIndex\"))", "var_name": "COMMANDS_WITH_COLLECTION_NAME"}, {"original_string": "final ThreadLocalSpan threadLocalSpan;", "modifier": "final", "type": "ThreadLocalSpan", "declarator": "threadLocalSpan", "var_name": "threadLocalSpan"}], "methods": [{"identifier": "TraceMongoCommandListener", "parameters": "(MongoDBTracing mongoDBTracing)", "modifiers": "", "return": "", "signature": " TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "full_signature": "  TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "class_method_signature": "TraceMongoCommandListener.TraceMongoCommandListener(MongoDBTracing mongoDBTracing)", "testcase": false, "constructor": true}, {"identifier": "TraceMongoCommandListener", "parameters": "(ThreadLocalSpan threadLocalSpan)", "modifiers": "", "return": "", "signature": " TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "full_signature": "  TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "class_method_signature": "TraceMongoCommandListener.TraceMongoCommandListener(ThreadLocalSpan threadLocalSpan)", "testcase": false, "constructor": true}, {"identifier": "commandStarted", "parameters": "(CommandStartedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandStarted(CommandStartedEvent event)", "full_signature": "@Override public void commandStarted(CommandStartedEvent event)", "class_method_signature": "TraceMongoCommandListener.commandStarted(CommandStartedEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandSucceeded", "parameters": "(CommandSucceededEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandSucceeded(CommandSucceededEvent event)", "full_signature": "@Override public void commandSucceeded(CommandSucceededEvent event)", "class_method_signature": "TraceMongoCommandListener.commandSucceeded(CommandSucceededEvent event)", "testcase": false, "constructor": false}, {"identifier": "commandFailed", "parameters": "(CommandFailedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void commandFailed(CommandFailedEvent event)", "full_signature": "@Override public void commandFailed(CommandFailedEvent event)", "class_method_signature": "TraceMongoCommandListener.commandFailed(CommandFailedEvent event)", "testcase": false, "constructor": false}, {"identifier": "getCollectionName", "parameters": "(BsonDocument command, String commandName)", "modifiers": "@Nullable", "return": "String", "signature": "String getCollectionName(BsonDocument command, String commandName)", "full_signature": "@Nullable String getCollectionName(BsonDocument command, String commandName)", "class_method_signature": "TraceMongoCommandListener.getCollectionName(BsonDocument command, String commandName)", "testcase": false, "constructor": false}, {"identifier": "getNonEmptyBsonString", "parameters": "(BsonValue bsonValue)", "modifiers": "@Nullable static", "return": "String", "signature": "String getNonEmptyBsonString(BsonValue bsonValue)", "full_signature": "@Nullable static String getNonEmptyBsonString(BsonValue bsonValue)", "class_method_signature": "TraceMongoCommandListener.getNonEmptyBsonString(BsonValue bsonValue)", "testcase": false, "constructor": false}, {"identifier": "getSpanName", "parameters": "(String commandName, @Nullable String collectionName)", "modifiers": "static", "return": "String", "signature": "String getSpanName(String commandName, @Nullable String collectionName)", "full_signature": "static String getSpanName(String commandName, @Nullable String collectionName)", "class_method_signature": "TraceMongoCommandListener.getSpanName(String commandName, @Nullable String collectionName)", "testcase": false, "constructor": false}], "file": "instrumentation/mongodb/src/main/java/brave/mongodb/TraceMongoCommandListener.java"}, "focal_method": {"identifier": "getCollectionName", "parameters": "(BsonDocument command, String commandName)", "modifiers": "@Nullable", "return": "String", "body": "@Nullable String getCollectionName(BsonDocument command, String commandName) {\n    if (COMMANDS_WITH_COLLECTION_NAME.contains(commandName)) {\n      String collectionName = getNonEmptyBsonString(command.get(commandName));\n      if (collectionName != null) {\n        return collectionName;\n      }\n    }\n    // Some other commands, like getMore, have a field like {\"collection\": collectionName}.\n    return getNonEmptyBsonString(command.get(\"collection\"));\n  }", "signature": "String getCollectionName(BsonDocument command, String commandName)", "full_signature": "@Nullable String getCollectionName(BsonDocument command, String commandName)", "class_method_signature": "TraceMongoCommandListener.getCollectionName(BsonDocument command, String commandName)", "testcase": false, "constructor": false, "invocations": ["contains", "getNonEmptyBsonString", "get", "getNonEmptyBsonString", "get"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}