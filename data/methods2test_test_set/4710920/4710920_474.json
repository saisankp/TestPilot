{"test_class": {"identifier": "ConfigUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java"}, "test_case": {"identifier": "testMergeValuesAddDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeValuesAddDefault() {\n        List<String> merged = ConfigUtils.mergeValues(ThreadPool.class, \"aaa,bbb,default,zzz\",\n                asList(\"fixed\", \"default.limited\", \"cached\"));\n        assertEquals(asList(\"aaa\", \"bbb\", \"fixed\", \"cached\", \"zzz\"), merged);\n    }", "signature": "void testMergeValuesAddDefault()", "full_signature": "@Test public void testMergeValuesAddDefault()", "class_method_signature": "ConfigUtilsTest.testMergeValuesAddDefault()", "testcase": true, "constructor": false, "invocations": ["mergeValues", "asList", "assertEquals", "asList"]}, "focal_class": {"identifier": "ConfigUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConfigUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConfigUtils.class)", "var_name": "logger"}, {"original_string": "private static Pattern VARIABLE_PATTERN = Pattern.compile(\n            \"\\\\$\\\\s*\\\\{?\\\\s*([\\\\._0-9a-zA-Z]+)\\\\s*\\\\}?\");", "modifier": "private static", "type": "Pattern", "declarator": "VARIABLE_PATTERN = Pattern.compile(\n            \"\\\\$\\\\s*\\\\{?\\\\s*([\\\\._0-9a-zA-Z]+)\\\\s*\\\\}?\")", "var_name": "VARIABLE_PATTERN"}, {"original_string": "private static volatile Properties PROPERTIES;", "modifier": "private static volatile", "type": "Properties", "declarator": "PROPERTIES", "var_name": "PROPERTIES"}, {"original_string": "private static int PID = -1;", "modifier": "private static", "type": "int", "declarator": "PID = -1", "var_name": "PID"}], "methods": [{"identifier": "ConfigUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConfigUtils()", "full_signature": "private  ConfigUtils()", "class_method_signature": "ConfigUtils.ConfigUtils()", "testcase": false, "constructor": true}, {"identifier": "isNotEmpty", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String value)", "full_signature": "public static boolean isNotEmpty(String value)", "class_method_signature": "ConfigUtils.isNotEmpty(String value)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String value)", "full_signature": "public static boolean isEmpty(String value)", "class_method_signature": "ConfigUtils.isEmpty(String value)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDefault(String value)", "full_signature": "public static boolean isDefault(String value)", "class_method_signature": "ConfigUtils.isDefault(String value)", "testcase": false, "constructor": false}, {"identifier": "mergeValues", "parameters": "(Class<?> type, String cfg, List<String> def)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> mergeValues(Class<?> type, String cfg, List<String> def)", "full_signature": "public static List<String> mergeValues(Class<?> type, String cfg, List<String> def)", "class_method_signature": "ConfigUtils.mergeValues(Class<?> type, String cfg, List<String> def)", "testcase": false, "constructor": false}, {"identifier": "replaceProperty", "parameters": "(String expression, Map<String, String> params)", "modifiers": "public static", "return": "String", "signature": "String replaceProperty(String expression, Map<String, String> params)", "full_signature": "public static String replaceProperty(String expression, Map<String, String> params)", "class_method_signature": "ConfigUtils.replaceProperty(String expression, Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public static", "return": "Properties", "signature": "Properties getProperties()", "full_signature": "public static Properties getProperties()", "class_method_signature": "ConfigUtils.getProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(Properties properties)", "modifiers": "public static", "return": "void", "signature": "void setProperties(Properties properties)", "full_signature": "public static void setProperties(Properties properties)", "class_method_signature": "ConfigUtils.setProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "addProperties", "parameters": "(Properties properties)", "modifiers": "public static", "return": "void", "signature": "void addProperties(Properties properties)", "full_signature": "public static void addProperties(Properties properties)", "class_method_signature": "ConfigUtils.addProperties(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String getProperty(String key)", "full_signature": "public static String getProperty(String key)", "class_method_signature": "ConfigUtils.getProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key, String defaultValue)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static", "return": "String", "signature": "String getProperty(String key, String defaultValue)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static String getProperty(String key, String defaultValue)", "class_method_signature": "ConfigUtils.getProperty(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSystemProperty", "parameters": "(String key)", "modifiers": "public static", "return": "String", "signature": "String getSystemProperty(String key)", "full_signature": "public static String getSystemProperty(String key)", "class_method_signature": "ConfigUtils.getSystemProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(String fileName)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadProperties(String fileName)", "full_signature": "public static Properties loadProperties(String fileName)", "class_method_signature": "ConfigUtils.loadProperties(String fileName)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(String fileName, boolean allowMultiFile)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadProperties(String fileName, boolean allowMultiFile)", "full_signature": "public static Properties loadProperties(String fileName, boolean allowMultiFile)", "class_method_signature": "ConfigUtils.loadProperties(String fileName, boolean allowMultiFile)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(String fileName, boolean allowMultiFile, boolean optional)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional)", "full_signature": "public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional)", "class_method_signature": "ConfigUtils.loadProperties(String fileName, boolean allowMultiFile, boolean optional)", "testcase": false, "constructor": false}, {"identifier": "checkFileNameExist", "parameters": "(String fileName)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkFileNameExist(String fileName)", "full_signature": "private static boolean checkFileNameExist(String fileName)", "class_method_signature": "ConfigUtils.checkFileNameExist(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getPid", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getPid()", "full_signature": "public static int getPid()", "class_method_signature": "ConfigUtils.getPid()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java"}, "focal_method": {"identifier": "mergeValues", "parameters": "(Class<?> type, String cfg, List<String> def)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> mergeValues(Class<?> type, String cfg, List<String> def) {\n        List<String> defaults = new ArrayList<String>();\n        if (def != null) {\n            for (String name : def) {\n                if (ExtensionLoader.getExtensionLoader(type).hasExtension(name)) {\n                    defaults.add(name);\n                }\n            }\n        }\n\n        List<String> names = new ArrayList<String>();\n\n        // add initial values\n        String[] configs = (cfg == null || cfg.trim().length() == 0) ? new String[0] : COMMA_SPLIT_PATTERN.split(cfg);\n        for (String config : configs) {\n            if (config != null && config.trim().length() > 0) {\n                names.add(config);\n            }\n        }\n\n        // -default is not included\n        if (!names.contains(REMOVE_VALUE_PREFIX + DEFAULT_KEY)) {\n            // add default extension\n            int i = names.indexOf(DEFAULT_KEY);\n            if (i > 0) {\n                names.addAll(i, defaults);\n            } else {\n                names.addAll(0, defaults);\n            }\n            names.remove(DEFAULT_KEY);\n        } else {\n            names.remove(DEFAULT_KEY);\n        }\n\n        // merge - configuration\n        for (String name : new ArrayList<String>(names)) {\n            if (name.startsWith(REMOVE_VALUE_PREFIX)) {\n                names.remove(name);\n                names.remove(name.substring(1));\n            }\n        }\n        return names;\n    }", "signature": "List<String> mergeValues(Class<?> type, String cfg, List<String> def)", "full_signature": "public static List<String> mergeValues(Class<?> type, String cfg, List<String> def)", "class_method_signature": "ConfigUtils.mergeValues(Class<?> type, String cfg, List<String> def)", "testcase": false, "constructor": false, "invocations": ["hasExtension", "getExtensionLoader", "add", "length", "trim", "split", "length", "trim", "add", "contains", "indexOf", "addAll", "addAll", "remove", "remove", "startsWith", "remove", "remove", "substring"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}