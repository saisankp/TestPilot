{"test_class": {"identifier": "HystrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixTest.java"}, "test_case": {"identifier": "testMultipleSemaphoreObservableCommandsInFlight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleSemaphoreObservableCommandsInFlight() throws InterruptedException {\n        int NUM_COMMANDS = 50;\n        List<Observable<Integer>> commands = new ArrayList<Observable<Integer>>();\n        for (int i = 0; i < NUM_COMMANDS; i++) {\n            commands.add(Observable.defer(new Func0<Observable<Integer>>() {\n                @Override\n                public Observable<Integer> call() {\n                    return new AsynchronousObservableCommand().observe();\n                }\n            }));\n        }\n\n        final AtomicBoolean exceptionFound = new AtomicBoolean(false);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        Observable.merge(commands).subscribe(new Subscriber<Integer>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"OnCompleted\");\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"OnError : \" + e);\n                e.printStackTrace();\n                exceptionFound.set(true);\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(Integer n) {\n                System.out.println(\"OnNext : \" + n + \" : \" + Thread.currentThread().getName() + \" : \" + Hystrix.getCommandCount());// + \" : \" + Hystrix.getCurrentThreadExecutingCommand().name() + \" : \" + Hystrix.getCommandCount());\n            }\n        });\n\n        latch.await();\n\n        assertFalse(exceptionFound.get());\n    }", "signature": "void testMultipleSemaphoreObservableCommandsInFlight()", "full_signature": "@Test public void testMultipleSemaphoreObservableCommandsInFlight()", "class_method_signature": "HystrixTest.testMultipleSemaphoreObservableCommandsInFlight()", "testcase": true, "constructor": false, "invocations": ["add", "defer", "observe", "subscribe", "merge", "println", "countDown", "println", "printStackTrace", "set", "countDown", "println", "getName", "currentThread", "getCommandCount", "await", "assertFalse", "get"]}, "focal_class": {"identifier": "Hystrix", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Hystrix.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Hystrix.class)", "var_name": "logger"}, {"original_string": "private static ThreadLocal<ConcurrentStack<HystrixCommandKey>> currentCommand = new ThreadLocal<ConcurrentStack<HystrixCommandKey>>() {\n        @Override\n        protected ConcurrentStack<HystrixCommandKey> initialValue() {\n            return new ConcurrentStack<HystrixCommandKey>();\n        }\n    };", "modifier": "private static", "type": "ThreadLocal<ConcurrentStack<HystrixCommandKey>>", "declarator": "currentCommand = new ThreadLocal<ConcurrentStack<HystrixCommandKey>>() {\n        @Override\n        protected ConcurrentStack<HystrixCommandKey> initialValue() {\n            return new ConcurrentStack<HystrixCommandKey>();\n        }\n    }", "var_name": "currentCommand"}], "methods": [{"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "Hystrix.reset()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(long time, TimeUnit unit)", "modifiers": "public static", "return": "void", "signature": "void reset(long time, TimeUnit unit)", "full_signature": "public static void reset(long time, TimeUnit unit)", "class_method_signature": "Hystrix.reset(long time, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "_reset", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void _reset()", "full_signature": "private static void _reset()", "class_method_signature": "Hystrix._reset()", "testcase": false, "constructor": false}, {"identifier": "getCurrentThreadExecutingCommand", "parameters": "()", "modifiers": "public static", "return": "HystrixCommandKey", "signature": "HystrixCommandKey getCurrentThreadExecutingCommand()", "full_signature": "public static HystrixCommandKey getCurrentThreadExecutingCommand()", "class_method_signature": "Hystrix.getCurrentThreadExecutingCommand()", "testcase": false, "constructor": false}, {"identifier": "startCurrentThreadExecutingCommand", "parameters": "(HystrixCommandKey key)", "modifiers": "static", "return": "Action0", "signature": "Action0 startCurrentThreadExecutingCommand(HystrixCommandKey key)", "full_signature": "static Action0 startCurrentThreadExecutingCommand(HystrixCommandKey key)", "class_method_signature": "Hystrix.startCurrentThreadExecutingCommand(HystrixCommandKey key)", "testcase": false, "constructor": false}, {"identifier": "endCurrentThreadExecutingCommand", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void endCurrentThreadExecutingCommand()", "full_signature": "static void endCurrentThreadExecutingCommand()", "class_method_signature": "Hystrix.endCurrentThreadExecutingCommand()", "testcase": false, "constructor": false}, {"identifier": "endCurrentThreadExecutingCommand", "parameters": "(ConcurrentStack<HystrixCommandKey> list)", "modifiers": "private static", "return": "void", "signature": "void endCurrentThreadExecutingCommand(ConcurrentStack<HystrixCommandKey> list)", "full_signature": "private static void endCurrentThreadExecutingCommand(ConcurrentStack<HystrixCommandKey> list)", "class_method_signature": "Hystrix.endCurrentThreadExecutingCommand(ConcurrentStack<HystrixCommandKey> list)", "testcase": false, "constructor": false}, {"identifier": "getCommandCount", "parameters": "()", "modifiers": "static", "return": "int", "signature": "int getCommandCount()", "full_signature": "static int getCommandCount()", "class_method_signature": "Hystrix.getCommandCount()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/Hystrix.java"}, "focal_method": {"identifier": "getCommandCount", "parameters": "()", "modifiers": "static", "return": "int", "body": "static int getCommandCount() {\n        return currentCommand.get().size();\n    }", "signature": "int getCommandCount()", "full_signature": "static int getCommandCount()", "class_method_signature": "Hystrix.getCommandCount()", "testcase": false, "constructor": false, "invocations": ["size", "get"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}