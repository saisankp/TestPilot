{"test_class": {"identifier": "EmailAddressTokenizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "jmap-mua-util/src/test/java/rs/ltt/jmap/mua/util/EmailAddressTokenizerTest.java"}, "test_case": {"identifier": "simpleStandAloneEmailAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleStandAloneEmailAddress() {\n        final String input = \"test@example.com\";\n        final Collection<EmailAddressToken> expected = ImmutableList.of(\n                new EmailAddressToken(\n                        0,\n                        15,\n                        EmailAddress.builder().email(\"test@example.com\").build()\n                )\n        );\n        final Collection<EmailAddressToken> actual = EmailAddressTokenizer.tokenize(input);\n\n        Assert.assertArrayEquals(\n                expected.toArray(new EmailAddressToken[0]),\n                actual.toArray(new EmailAddressToken[0])\n        );\n    }", "signature": "void simpleStandAloneEmailAddress()", "full_signature": "@Test public void simpleStandAloneEmailAddress()", "class_method_signature": "EmailAddressTokenizerTest.simpleStandAloneEmailAddress()", "testcase": true, "constructor": false, "invocations": ["of", "build", "email", "builder", "tokenize", "assertArrayEquals", "toArray", "toArray"]}, "focal_class": {"identifier": "EmailAddressTokenizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "tokenize", "parameters": "(final CharSequence cs)", "modifiers": "public static", "return": "Collection<EmailAddressToken>", "signature": "Collection<EmailAddressToken> tokenize(final CharSequence cs)", "full_signature": "public static Collection<EmailAddressToken> tokenize(final CharSequence cs)", "class_method_signature": "EmailAddressTokenizer.tokenize(final CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "tokenize", "parameters": "(final CharSequence cs, final boolean requireExplicitDelimiter)", "modifiers": "public static", "return": "Collection<EmailAddressToken>", "signature": "Collection<EmailAddressToken> tokenize(final CharSequence cs, final boolean requireExplicitDelimiter)", "full_signature": "public static Collection<EmailAddressToken> tokenize(final CharSequence cs, final boolean requireExplicitDelimiter)", "class_method_signature": "EmailAddressTokenizer.tokenize(final CharSequence cs, final boolean requireExplicitDelimiter)", "testcase": false, "constructor": false}, {"identifier": "moreThanJustWhiteSpaces", "parameters": "(List<Token> tokens)", "modifiers": "private static", "return": "boolean", "signature": "boolean moreThanJustWhiteSpaces(List<Token> tokens)", "full_signature": "private static boolean moreThanJustWhiteSpaces(List<Token> tokens)", "class_method_signature": "EmailAddressTokenizer.moreThanJustWhiteSpaces(List<Token> tokens)", "testcase": false, "constructor": false}, {"identifier": "isWhitespaceOrDelimiter", "parameters": "(Token token)", "modifiers": "private static", "return": "boolean", "signature": "boolean isWhitespaceOrDelimiter(Token token)", "full_signature": "private static boolean isWhitespaceOrDelimiter(Token token)", "class_method_signature": "EmailAddressTokenizer.isWhitespaceOrDelimiter(Token token)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(final CharSequence charSequence, List<Token> tokenList)", "modifiers": "private static", "return": "EmailAddressToken", "signature": "EmailAddressToken combine(final CharSequence charSequence, List<Token> tokenList)", "full_signature": "private static EmailAddressToken combine(final CharSequence charSequence, List<Token> tokenList)", "class_method_signature": "EmailAddressTokenizer.combine(final CharSequence charSequence, List<Token> tokenList)", "testcase": false, "constructor": false}, {"identifier": "findFirstNonWhiteSpace", "parameters": "(List<Token> tokens, boolean removeQuote)", "modifiers": "private static", "return": "Token", "signature": "Token findFirstNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "full_signature": "private static Token findFirstNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "class_method_signature": "EmailAddressTokenizer.findFirstNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "testcase": false, "constructor": false}, {"identifier": "findLastNonWhiteSpace", "parameters": "(List<Token> tokens, boolean removeQuote)", "modifiers": "private static", "return": "Token", "signature": "Token findLastNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "full_signature": "private static Token findLastNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "class_method_signature": "EmailAddressTokenizer.findLastNonWhiteSpace(List<Token> tokens, boolean removeQuote)", "testcase": false, "constructor": false}], "file": "jmap-mua-util/src/main/java/rs/ltt/jmap/mua/util/EmailAddressTokenizer.java"}, "focal_method": {"identifier": "tokenize", "parameters": "(final CharSequence cs)", "modifiers": "public static", "return": "Collection<EmailAddressToken>", "body": "public static Collection<EmailAddressToken> tokenize(final CharSequence cs) {\n        return tokenize(cs, false);\n    }", "signature": "Collection<EmailAddressToken> tokenize(final CharSequence cs)", "full_signature": "public static Collection<EmailAddressToken> tokenize(final CharSequence cs)", "class_method_signature": "EmailAddressTokenizer.tokenize(final CharSequence cs)", "testcase": false, "constructor": false, "invocations": ["tokenize"]}, "repository": {"repo_id": 175026830, "url": "https://github.com/iNPUTmice/jmap", "stars": 19, "created": "3/11/2019 3:14:44 PM +00:00", "updates": "2020-01-23T18:47:37+00:00", "fork": "False", "license": "licensed"}}