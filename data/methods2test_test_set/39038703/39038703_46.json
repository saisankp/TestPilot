{"test_class": {"identifier": "SpiderDetectorServiceImplTest", "superclass": "extends AbstractDSpaceTest", "interfaces": "", "fields": [{"original_string": "private static final String NOT_A_BOT_ADDRESS = \"192.168.0.1\";", "modifier": "private static final", "type": "String", "declarator": "NOT_A_BOT_ADDRESS = \"192.168.0.1\"", "var_name": "NOT_A_BOT_ADDRESS"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private SpiderDetectorService spiderDetectorService;", "modifier": "private", "type": "SpiderDetectorService", "declarator": "spiderDetectorService", "var_name": "spiderDetectorService"}], "file": "dspace-api/src/test/java/org/dspace/statistics/util/SpiderDetectorServiceImplTest.java"}, "test_case": {"identifier": "testReadPatterns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadPatterns()\n    {\n// FIXME        fail(\"Not yet implemented\");\n    }", "signature": "void testReadPatterns()", "full_signature": "@Test public void testReadPatterns()", "class_method_signature": "SpiderDetectorServiceImplTest.testReadPatterns()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "SpiderDetectorServiceImpl", "superclass": "", "interfaces": "implements SpiderDetectorService", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SpiderDetectorServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SpiderDetectorServiceImpl.class)", "var_name": "log"}, {"original_string": "private Boolean useProxies;", "modifier": "private", "type": "Boolean", "declarator": "useProxies", "var_name": "useProxies"}, {"original_string": "private Boolean useCaseInsensitiveMatching;", "modifier": "private", "type": "Boolean", "declarator": "useCaseInsensitiveMatching", "var_name": "useCaseInsensitiveMatching"}, {"original_string": "private final List<Pattern> agents\n            = Collections.synchronizedList(new ArrayList<Pattern>());", "modifier": "private final", "type": "List<Pattern>", "declarator": "agents\n            = Collections.synchronizedList(new ArrayList<Pattern>())", "var_name": "agents"}, {"original_string": "private final List<Pattern> domains\n            = Collections.synchronizedList(new ArrayList<Pattern>());", "modifier": "private final", "type": "List<Pattern>", "declarator": "domains\n            = Collections.synchronizedList(new ArrayList<Pattern>())", "var_name": "domains"}, {"original_string": "private ConfigurationService configurationService;", "modifier": "private", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "private IPTable table = null;", "modifier": "private", "type": "IPTable", "declarator": "table = null", "var_name": "table"}], "methods": [{"identifier": "SpiderDetectorServiceImpl", "parameters": "(ConfigurationService configurationService)", "modifiers": "@Autowired(required = true) public", "return": "", "signature": " SpiderDetectorServiceImpl(ConfigurationService configurationService)", "full_signature": "@Autowired(required = true) public  SpiderDetectorServiceImpl(ConfigurationService configurationService)", "class_method_signature": "SpiderDetectorServiceImpl.SpiderDetectorServiceImpl(ConfigurationService configurationService)", "testcase": false, "constructor": true}, {"identifier": "getTable", "parameters": "()", "modifiers": "public", "return": "IPTable", "signature": "IPTable getTable()", "full_signature": "public IPTable getTable()", "class_method_signature": "SpiderDetectorServiceImpl.getTable()", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(String clientIP, String proxyIPs, String hostname, String agent)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "full_signature": "public boolean isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(String clientIP, String proxyIPs, String hostname, String agent)", "testcase": false, "constructor": false}, {"identifier": "readPatterns", "parameters": "(File patternFile)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> readPatterns(File patternFile)", "full_signature": "public Set<String> readPatterns(File patternFile)", "class_method_signature": "SpiderDetectorServiceImpl.readPatterns(File patternFile)", "testcase": false, "constructor": false}, {"identifier": "loadPatterns", "parameters": "(String directory, List<Pattern> patternList)", "modifiers": "private", "return": "void", "signature": "void loadPatterns(String directory, List<Pattern> patternList)", "full_signature": "private void loadPatterns(String directory, List<Pattern> patternList)", "class_method_signature": "SpiderDetectorServiceImpl.loadPatterns(String directory, List<Pattern> patternList)", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(HttpServletRequest request)", "full_signature": "public boolean isSpider(HttpServletRequest request)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "isSpider", "parameters": "(String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean isSpider(String ip)", "full_signature": "public boolean isSpider(String ip)", "class_method_signature": "SpiderDetectorServiceImpl.isSpider(String ip)", "testcase": false, "constructor": false}, {"identifier": "loadSpiderIpAddresses", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void loadSpiderIpAddresses()", "full_signature": "public synchronized void loadSpiderIpAddresses()", "class_method_signature": "SpiderDetectorServiceImpl.loadSpiderIpAddresses()", "testcase": false, "constructor": false}, {"identifier": "isUseCaseInsensitiveMatching", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isUseCaseInsensitiveMatching()", "full_signature": "private boolean isUseCaseInsensitiveMatching()", "class_method_signature": "SpiderDetectorServiceImpl.isUseCaseInsensitiveMatching()", "testcase": false, "constructor": false}, {"identifier": "isUseProxies", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isUseProxies()", "full_signature": "private boolean isUseProxies()", "class_method_signature": "SpiderDetectorServiceImpl.isUseProxies()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/statistics/util/SpiderDetectorServiceImpl.java"}, "focal_method": {"identifier": "readPatterns", "parameters": "(File patternFile)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> readPatterns(File patternFile)\n            throws IOException\n    {\n        Set<String> patterns = new HashSet<>();\n\n        if (!patternFile.exists() || !patternFile.isFile())\n        {\n            return patterns;\n        }\n\n        //Read our file & get all them patterns.\n        try (BufferedReader in = new BufferedReader(new FileReader(patternFile)))\n        {\n            String line;\n            while ((line = in.readLine()) != null) {\n                if (!line.startsWith(\"#\")) {\n                    line = line.trim();\n\n                    if (!line.equals(\"\")) {\n                        patterns.add(line);\n                    }\n                } else {\n                    //   ua.add(line.replaceFirst(\"#\",\"\").replaceFirst(\"UA\",\"\").trim());\n                    // ... add this functionality later\n                }\n            }\n        }\n        return patterns;\n    }", "signature": "Set<String> readPatterns(File patternFile)", "full_signature": "public Set<String> readPatterns(File patternFile)", "class_method_signature": "SpiderDetectorServiceImpl.readPatterns(File patternFile)", "testcase": false, "constructor": false, "invocations": ["exists", "isFile", "readLine", "startsWith", "trim", "equals", "add"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}