{"test_class": {"identifier": "ShortCircuitInterceptorCoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ShortCircuitInterceptorCore underTest;", "modifier": "private", "type": "ShortCircuitInterceptorCore", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-extras/short.circuit/src/test/java/com/epam/wilma/extras/shortcircuit/ShortCircuitInterceptorCoreTest.java"}, "test_case": {"identifier": "hashGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hashGeneration() {\n        WilmaHttpRequest request = new WilmaHttpRequest();\n        request.setBody(\"hoopla\");\n        String requestLine = \"GET http://blah.com:1234/gzu?gzu&gzu\";\n        request.setRequestLine(requestLine);\n        String hash = underTest.generateKeyForMap(request);\n        Assert.assertFalse(\"Generated hash is not usable\", hash.contains(\" \"));\n    }", "signature": "void hashGeneration()", "full_signature": "@Test public void hashGeneration()", "class_method_signature": "ShortCircuitInterceptorCoreTest.hashGeneration()", "testcase": true, "constructor": false, "invocations": ["setBody", "setRequestLine", "generateKeyForMap", "assertFalse", "contains"]}, "focal_class": {"identifier": "ShortCircuitInterceptorCore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<String, ShortCircuitResponseInformation> shortCircuitMap = ShortCircuitChecker.getShortCircuitMap();", "modifier": "private static", "type": "Map<String, ShortCircuitResponseInformation>", "declarator": "shortCircuitMap = ShortCircuitChecker.getShortCircuitMap()", "var_name": "shortCircuitMap"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(ShortCircuitInterceptorCore.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ShortCircuitInterceptorCore.class)", "var_name": "logger"}, {"original_string": "private final ShortCircuitResponseInformationFileHandler shortCircuitResponseInformationFileHandler = new ShortCircuitResponseInformationFileHandler();", "modifier": "private final", "type": "ShortCircuitResponseInformationFileHandler", "declarator": "shortCircuitResponseInformationFileHandler = new ShortCircuitResponseInformationFileHandler()", "var_name": "shortCircuitResponseInformationFileHandler"}, {"original_string": "@Autowired\n    private LogFilePathProvider logFilePathProvider;", "modifier": "@Autowired\n    private", "type": "LogFilePathProvider", "declarator": "logFilePathProvider", "var_name": "logFilePathProvider"}, {"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Autowired\n    private FileOutputStreamFactory fileOutputStreamFactory;", "modifier": "@Autowired\n    private", "type": "FileOutputStreamFactory", "declarator": "fileOutputStreamFactory", "var_name": "fileOutputStreamFactory"}], "methods": [{"identifier": "generateKeyForMap", "parameters": "(final WilmaHttpRequest wilmaHttpRequest)", "modifiers": "", "return": "String", "signature": "String generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "full_signature": " String generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "class_method_signature": "ShortCircuitInterceptorCore.generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "testcase": false, "constructor": false}, {"identifier": "handleBasicCall", "parameters": "(String myMethod, HttpServletResponse httpServletResponse, String path)", "modifiers": "", "return": "String", "signature": "String handleBasicCall(String myMethod, HttpServletResponse httpServletResponse, String path)", "full_signature": " String handleBasicCall(String myMethod, HttpServletResponse httpServletResponse, String path)", "class_method_signature": "ShortCircuitInterceptorCore.handleBasicCall(String myMethod, HttpServletResponse httpServletResponse, String path)", "testcase": false, "constructor": false}, {"identifier": "handleComplexCall", "parameters": "(String myMethod, String folder, HttpServletResponse httpServletResponse)", "modifiers": "", "return": "String", "signature": "String handleComplexCall(String myMethod, String folder, HttpServletResponse httpServletResponse)", "full_signature": " String handleComplexCall(String myMethod, String folder, HttpServletResponse httpServletResponse)", "class_method_signature": "ShortCircuitInterceptorCore.handleComplexCall(String myMethod, String folder, HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false}, {"identifier": "handleDeleteById", "parameters": "(String myMethod, String idStr, HttpServletResponse httpServletResponse)", "modifiers": "", "return": "String", "signature": "String handleDeleteById(String myMethod, String idStr, HttpServletResponse httpServletResponse)", "full_signature": " String handleDeleteById(String myMethod, String idStr, HttpServletResponse httpServletResponse)", "class_method_signature": "ShortCircuitInterceptorCore.handleDeleteById(String myMethod, String idStr, HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false}, {"identifier": "preserveResponse", "parameters": "(String shortCircuitHashCode, WilmaHttpResponse wilmaHttpResponse, ParameterList parameterList)", "modifiers": "", "return": "void", "signature": "void preserveResponse(String shortCircuitHashCode, WilmaHttpResponse wilmaHttpResponse, ParameterList parameterList)", "full_signature": " void preserveResponse(String shortCircuitHashCode, WilmaHttpResponse wilmaHttpResponse, ParameterList parameterList)", "class_method_signature": "ShortCircuitInterceptorCore.preserveResponse(String shortCircuitHashCode, WilmaHttpResponse wilmaHttpResponse, ParameterList parameterList)", "testcase": false, "constructor": false}, {"identifier": "allowedContentType", "parameters": "(final String contentType)", "modifiers": "", "return": "boolean", "signature": "boolean allowedContentType(final String contentType)", "full_signature": " boolean allowedContentType(final String contentType)", "class_method_signature": "ShortCircuitInterceptorCore.allowedContentType(final String contentType)", "testcase": false, "constructor": false}, {"identifier": "getShortCircuitMap", "parameters": "(HttpServletResponse httpServletResponse)", "modifiers": "private", "return": "String", "signature": "String getShortCircuitMap(HttpServletResponse httpServletResponse)", "full_signature": "private String getShortCircuitMap(HttpServletResponse httpServletResponse)", "class_method_signature": "ShortCircuitInterceptorCore.getShortCircuitMap(HttpServletResponse httpServletResponse)", "testcase": false, "constructor": false}], "file": "wilma-extras/short.circuit/src/main/java/com/epam/wilma/extras/shortcircuit/ShortCircuitInterceptorCore.java"}, "focal_method": {"identifier": "generateKeyForMap", "parameters": "(final WilmaHttpRequest wilmaHttpRequest)", "modifiers": "", "return": "String", "body": "String generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest) {\n        String hashString = wilmaHttpRequest.getRequestLine() + \" - \" + wilmaHttpRequest.getBody().hashCode();\n        //ensure that it is ok for a header\n        //CHECKSTYLE OFF - we must use \"new String\" here\n        hashString = new String(Base64.encodeBase64(hashString.getBytes()));\n        //CHECKSTYLE ON\n        return hashString;\n    }", "signature": "String generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "full_signature": " String generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "class_method_signature": "ShortCircuitInterceptorCore.generateKeyForMap(final WilmaHttpRequest wilmaHttpRequest)", "testcase": false, "constructor": false, "invocations": ["getRequestLine", "hashCode", "getBody", "encodeBase64", "getBytes"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}