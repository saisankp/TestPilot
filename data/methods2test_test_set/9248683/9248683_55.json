{"test_class": {"identifier": "ProjectedResultMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProjectedResultMapper mapper = new ProjectedResultMapper();", "modifier": "private final", "type": "ProjectedResultMapper", "declarator": "mapper = new ProjectedResultMapper()", "var_name": "mapper"}, {"original_string": "private final SimpleClass s1 = new SimpleClass(100, \"test name\");", "modifier": "private final", "type": "SimpleClass", "declarator": "s1 = new SimpleClass(100, \"test name\")", "var_name": "s1"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/mapper/ProjectedResultMapperTest.java"}, "test_case": {"identifier": "mapTo_Simple_notEnoughPropertyNames", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void mapTo_Simple_notEnoughPropertyNames() {\n        String[] props = props(\"id\", \"not enough property names\");\n        Object[] vals = vals(s1.getId(), s1.getName(), s1.getCreated());\n        mapper.mapTo(SimpleClass.class, vals, props);\n    }", "signature": "void mapTo_Simple_notEnoughPropertyNames()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void mapTo_Simple_notEnoughPropertyNames()", "class_method_signature": "ProjectedResultMapperTest.mapTo_Simple_notEnoughPropertyNames()", "testcase": true, "constructor": false, "invocations": ["props", "vals", "getId", "getName", "getCreated", "mapTo"]}, "focal_class": {"identifier": "ProjectedResultMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ProjectedResultMapper", "parameters": "(ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " ProjectedResultMapper(ObjectMapper mapper)", "full_signature": "public  ProjectedResultMapper(ObjectMapper mapper)", "class_method_signature": "ProjectedResultMapper.ProjectedResultMapper(ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "ProjectedResultMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProjectedResultMapper()", "full_signature": "public  ProjectedResultMapper()", "class_method_signature": "ProjectedResultMapper.ProjectedResultMapper()", "testcase": false, "constructor": true}, {"identifier": "propertyMap", "parameters": "(Object[] properties,\n            String[] propertyNames)", "modifiers": "protected", "return": "Map<String,Object>", "signature": "Map<String,Object> propertyMap(Object[] properties,\n            String[] propertyNames)", "full_signature": "protected Map<String,Object> propertyMap(Object[] properties,\n            String[] propertyNames)", "class_method_signature": "ProjectedResultMapper.propertyMap(Object[] properties,\n            String[] propertyNames)", "testcase": false, "constructor": false}, {"identifier": "mapTo", "parameters": "(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "modifiers": "public", "return": "R", "signature": "R mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "full_signature": "public R mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "class_method_signature": "ProjectedResultMapper.mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/mapper/ProjectedResultMapper.java"}, "focal_method": {"identifier": "mapTo", "parameters": "(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "modifiers": "public", "return": "R", "body": "public <R> R mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames) {\n        return propertyNames.length == 1\n            ? resultClass.cast(properties)\n            : mapper.convertValue(propertyMap((Object[]) properties, propertyNames), resultClass);\n    }", "signature": "R mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "full_signature": "public R mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "class_method_signature": "ProjectedResultMapper.mapTo(Class<R> resultClass, Object properties,\n            String[] propertyNames)", "testcase": false, "constructor": false, "invocations": ["cast", "convertValue", "propertyMap"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}