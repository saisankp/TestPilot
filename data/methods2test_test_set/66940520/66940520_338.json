{"test_class": {"identifier": "TestDefaultTextPatternService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DefaultTextPatternService textPatternService;", "modifier": "@InjectMocks\n    private", "type": "DefaultTextPatternService", "declarator": "textPatternService", "var_name": "textPatternService"}, {"original_string": "private TextPattern pattern;", "modifier": "private", "type": "TextPattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private ImmutableMap<String, String> values;", "modifier": "private", "type": "ImmutableMap<String, String>", "declarator": "values", "var_name": "values"}], "file": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/textpattern/TestDefaultTextPatternService.java"}, "test_case": {"identifier": "testGetRequiredValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRequiredValues()\n    {\n        List<String> required = textPatternService.getRequiredValues( pattern ).get( \"REQUIRED\" );\n\n        assertFalse( required.contains( \"TEXT\" ) );\n        assertFalse( required.contains( \"CURRENT_DATE\" ) );\n        assertTrue( required.contains( \"ORG_UNIT_CODE\" ) );\n        assertFalse( required.contains( \"SEQUENTIAL\" ) );\n        assertEquals( 1, required.size() );\n    }", "signature": "void testGetRequiredValues()", "full_signature": "@Test public void testGetRequiredValues()", "class_method_signature": "TestDefaultTextPatternService.testGetRequiredValues()", "testcase": true, "constructor": false, "invocations": ["get", "getRequiredValues", "assertFalse", "contains", "assertFalse", "contains", "assertTrue", "contains", "assertFalse", "contains", "assertEquals", "size"]}, "focal_class": {"identifier": "DefaultTextPatternService", "superclass": "", "interfaces": "implements TextPatternService", "fields": [], "methods": [{"identifier": "resolvePattern", "parameters": "( TextPattern pattern, Map<String, String> values )", "modifiers": "@Override public", "return": "String", "signature": "String resolvePattern( TextPattern pattern, Map<String, String> values )", "full_signature": "@Override public String resolvePattern( TextPattern pattern, Map<String, String> values )", "class_method_signature": "DefaultTextPatternService.resolvePattern( TextPattern pattern, Map<String, String> values )", "testcase": false, "constructor": false}, {"identifier": "getRequiredValues", "parameters": "( TextPattern pattern )", "modifiers": "@Override public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getRequiredValues( TextPattern pattern )", "full_signature": "@Override public Map<String, List<String>> getRequiredValues( TextPattern pattern )", "class_method_signature": "DefaultTextPatternService.getRequiredValues( TextPattern pattern )", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "( TextPattern textPattern, String text )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean validate( TextPattern textPattern, String text )", "full_signature": "@Override public boolean validate( TextPattern textPattern, String text )", "class_method_signature": "DefaultTextPatternService.validate( TextPattern textPattern, String text )", "testcase": false, "constructor": false}, {"identifier": "handleFixedValues", "parameters": "( TextPatternSegment segment )", "modifiers": "private", "return": "String", "signature": "String handleFixedValues( TextPatternSegment segment )", "full_signature": "private String handleFixedValues( TextPatternSegment segment )", "class_method_signature": "DefaultTextPatternService.handleFixedValues( TextPatternSegment segment )", "testcase": false, "constructor": false}, {"identifier": "handleOptionalValue", "parameters": "( TextPatternSegment segment, String value )", "modifiers": "private", "return": "String", "signature": "String handleOptionalValue( TextPatternSegment segment, String value )", "full_signature": "private String handleOptionalValue( TextPatternSegment segment, String value )", "class_method_signature": "DefaultTextPatternService.handleOptionalValue( TextPatternSegment segment, String value )", "testcase": false, "constructor": false}, {"identifier": "handleRequiredValue", "parameters": "( TextPatternSegment segment, String value )", "modifiers": "private", "return": "String", "signature": "String handleRequiredValue( TextPatternSegment segment, String value )", "full_signature": "private String handleRequiredValue( TextPatternSegment segment, String value )", "class_method_signature": "DefaultTextPatternService.handleRequiredValue( TextPatternSegment segment, String value )", "testcase": false, "constructor": false}, {"identifier": "getFormattedValue", "parameters": "( TextPatternSegment segment, String value )", "modifiers": "private", "return": "String", "signature": "String getFormattedValue( TextPatternSegment segment, String value )", "full_signature": "private String getFormattedValue( TextPatternSegment segment, String value )", "class_method_signature": "DefaultTextPatternService.getFormattedValue( TextPatternSegment segment, String value )", "testcase": false, "constructor": false}, {"identifier": "getSegmentValue", "parameters": "( TextPatternSegment segment, Map<String, String> values )", "modifiers": "private", "return": "String", "signature": "String getSegmentValue( TextPatternSegment segment, Map<String, String> values )", "full_signature": "private String getSegmentValue( TextPatternSegment segment, Map<String, String> values )", "class_method_signature": "DefaultTextPatternService.getSegmentValue( TextPatternSegment segment, Map<String, String> values )", "testcase": false, "constructor": false}, {"identifier": "isRequired", "parameters": "( TextPatternSegment segment )", "modifiers": "private", "return": "boolean", "signature": "boolean isRequired( TextPatternSegment segment )", "full_signature": "private boolean isRequired( TextPatternSegment segment )", "class_method_signature": "DefaultTextPatternService.isRequired( TextPatternSegment segment )", "testcase": false, "constructor": false}, {"identifier": "isOptional", "parameters": "( TextPatternSegment segment )", "modifiers": "private", "return": "boolean", "signature": "boolean isOptional( TextPatternSegment segment )", "full_signature": "private boolean isOptional( TextPatternSegment segment )", "class_method_signature": "DefaultTextPatternService.isOptional( TextPatternSegment segment )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/textpattern/DefaultTextPatternService.java"}, "focal_method": {"identifier": "getRequiredValues", "parameters": "( TextPattern pattern )", "modifiers": "@Override public", "return": "Map<String, List<String>>", "body": "@Override\n    public Map<String, List<String>> getRequiredValues( TextPattern pattern )\n    {\n        return ImmutableMap.<String, List<String>>builder()\n            .put( \"REQUIRED\", pattern.getSegments()\n                .stream()\n                .filter( this::isRequired )\n                .map( segment -> segment.getMethod().name() )\n                .collect( Collectors.toList() ) )\n            .put( \"OPTIONAL\", pattern.getSegments()\n                .stream()\n                .filter( this::isOptional )\n                .map( (segment -> segment.getMethod().name()) )\n                .collect( Collectors.toList() ) )\n            .build();\n    }", "signature": "Map<String, List<String>> getRequiredValues( TextPattern pattern )", "full_signature": "@Override public Map<String, List<String>> getRequiredValues( TextPattern pattern )", "class_method_signature": "DefaultTextPatternService.getRequiredValues( TextPattern pattern )", "testcase": false, "constructor": false, "invocations": ["build", "put", "put", "builder", "collect", "map", "filter", "stream", "getSegments", "name", "getMethod", "toList", "collect", "map", "filter", "stream", "getSegments", "name", "getMethod", "toList"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}