{"test_class": {"identifier": "TestStreamSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractWrapper wrapper = new SystemTime();", "modifier": "private", "type": "AbstractWrapper", "declarator": "wrapper = new SystemTime()", "var_name": "wrapper"}, {"original_string": "private static StorageManager sm =  null;", "modifier": "private static", "type": "StorageManager", "declarator": "sm =  null", "var_name": "sm"}, {"original_string": "private AddressBean[] addressing = new AddressBean[] {new AddressBean(\"system-time\")};", "modifier": "private", "type": "AddressBean[]", "declarator": "addressing = new AddressBean[] {new AddressBean(\"system-time\")}", "var_name": "addressing"}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/beans/TestStreamSource.java"}, "test_case": {"identifier": "testValidate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValidate() {\n\t\tInputStream is = new InputStream();\n\t\tStreamSource ss = new StreamSource().setAlias(\"my-stream\").setAddressing(addressing).setSqlQuery(\"select * from wrapper\").setRawHistorySize(\"10m\");\n\t\tassertTrue(ss.validate());\n\t\tassertFalse(ss.isStorageCountBased());\n\t\tassertEquals(ss.getParsedStorageSize(),10*60*1000);\n\t\tss = new StreamSource().setAlias(\"my-stream\").setAddressing(addressing).setSqlQuery(\"select * from wrapper\").setRawHistorySize(\"10  m\").setInputStream(is);\n\t\tassertFalse(ss.isStorageCountBased());\n\t\tassertEquals(ss.getParsedStorageSize(),10*60*1000);\n\n\n\t\tss = new StreamSource().setAlias(\"my-stream\").setAddressing(addressing).setSqlQuery(\"select * from wrapper\").setRawHistorySize(\"10  s\").setInputStream(is);\n\t\tassertFalse(ss.isStorageCountBased());\n\t\tassertEquals(ss.getParsedStorageSize(),10*1000);\n\t\tassertFalse(ss.isStorageCountBased());\n\n\n\t\tss = new StreamSource().setAlias(\"my-stream\").setAddressing(addressing).setSqlQuery(\"select * from wrapper\").setRawHistorySize(\"2 h\").setInputStream(is);\n\t\tassertFalse(ss.isStorageCountBased());\n\t\tassertEquals(ss.getParsedStorageSize(),2*60*60*1000);\n\t}", "signature": "void testValidate()", "full_signature": "@Test public void testValidate()", "class_method_signature": "TestStreamSource.testValidate()", "testcase": true, "constructor": false, "invocations": ["setRawHistorySize", "setSqlQuery", "setAddressing", "setAlias", "assertTrue", "validate", "assertFalse", "isStorageCountBased", "assertEquals", "getParsedStorageSize", "setInputStream", "setRawHistorySize", "setSqlQuery", "setAddressing", "setAlias", "assertFalse", "isStorageCountBased", "assertEquals", "getParsedStorageSize", "setInputStream", "setRawHistorySize", "setSqlQuery", "setAddressing", "setAlias", "assertFalse", "isStorageCountBased", "assertEquals", "getParsedStorageSize", "assertFalse", "isStorageCountBased", "setInputStream", "setRawHistorySize", "setSqlQuery", "setAddressing", "setAlias", "assertFalse", "isStorageCountBased", "assertEquals", "getParsedStorageSize"]}, "focal_class": {"identifier": "StreamSource", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 5222853537667420098L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5222853537667420098L", "var_name": "serialVersionUID"}, {"original_string": "public static final String DEFAULT_QUERY = \"select * from wrapper\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_QUERY = \"select * from wrapper\"", "var_name": "DEFAULT_QUERY"}, {"original_string": "private static final transient Logger logger             = Logger.getLogger( StreamSource.class );", "modifier": "private static final transient", "type": "Logger", "declarator": "logger             = Logger.getLogger( StreamSource.class )", "var_name": "logger"}, {"original_string": "private String                        alias;", "modifier": "private", "type": "String", "declarator": "alias", "var_name": "alias"}, {"original_string": "private float                        samplingRate       ;", "modifier": "private", "type": "float", "declarator": "samplingRate", "var_name": "samplingRate"}, {"original_string": "private String                        rawHistorySize = null;", "modifier": "private", "type": "String", "declarator": "rawHistorySize = null", "var_name": "rawHistorySize"}, {"original_string": "private String                        rawSlideValue = null;", "modifier": "private", "type": "String", "declarator": "rawSlideValue = null", "var_name": "rawSlideValue"}, {"original_string": "private int                           disconnectedBufferSize;", "modifier": "private", "type": "int", "declarator": "disconnectedBufferSize", "var_name": "disconnectedBufferSize"}, {"original_string": "private String                        sqlQuery;", "modifier": "private", "type": "String", "declarator": "sqlQuery", "var_name": "sqlQuery"}, {"original_string": "protected  int         uid        ;", "modifier": "protected", "type": "int", "declarator": "uid", "var_name": "uid"}, {"original_string": "protected  StringBuilder         uidS    ;", "modifier": "protected", "type": "StringBuilder", "declarator": "uidS", "var_name": "uidS"}, {"original_string": "private static final String [ ]       dateFormats        = new String [ ] { \"yyyy/MM/dd 'at' HH:mm:ss z\" , \"h:mm:ss a\" , \"h:mm a\" };", "modifier": "private static final", "type": "String [ ]", "declarator": "dateFormats        = new String [ ] { \"yyyy/MM/dd 'at' HH:mm:ss z\" , \"h:mm:ss a\" , \"h:mm a\" }", "var_name": "dateFormats"}, {"original_string": "private transient Date                startDate;", "modifier": "private transient", "type": "Date", "declarator": "startDate", "var_name": "startDate"}, {"original_string": "private transient Date                endDate;", "modifier": "private transient", "type": "Date", "declarator": "endDate", "var_name": "endDate"}, {"original_string": "public static final AddressBean[] EMPTY_ADDRESS_BEAN = new AddressBean[] {};", "modifier": "public static final", "type": "AddressBean[]", "declarator": "EMPTY_ADDRESS_BEAN = new AddressBean[] {}", "var_name": "EMPTY_ADDRESS_BEAN"}, {"original_string": "private AddressBean      addressing []        = EMPTY_ADDRESS_BEAN;", "modifier": "private", "type": "AddressBean", "declarator": "addressing []        = EMPTY_ADDRESS_BEAN", "var_name": "addressing"}, {"original_string": "private transient AbstractWrapper      wrapper;", "modifier": "private transient", "type": "AbstractWrapper", "declarator": "wrapper", "var_name": "wrapper"}, {"original_string": "private InputStream inputStream ;", "modifier": "private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "private AddressBean activeAddressBean;", "modifier": "private", "type": "AddressBean", "declarator": "activeAddressBean", "var_name": "activeAddressBean"}, {"original_string": "private transient QueryRewriter queryRewriter;", "modifier": "private transient", "type": "QueryRewriter", "declarator": "queryRewriter", "var_name": "queryRewriter"}, {"original_string": "private transient boolean isStorageCountBased  = false;", "modifier": "private transient", "type": "boolean", "declarator": "isStorageCountBased  = false", "var_name": "isStorageCountBased"}, {"original_string": "private WindowType windowingType = DEFAULT_WINDOW_TYPE;", "modifier": "private", "type": "WindowType", "declarator": "windowingType = DEFAULT_WINDOW_TYPE", "var_name": "windowingType"}, {"original_string": "public static final long   STORAGE_SIZE_NOT_SET = -1;", "modifier": "public static final", "type": "long", "declarator": "STORAGE_SIZE_NOT_SET = -1", "var_name": "STORAGE_SIZE_NOT_SET"}, {"original_string": "public static final long   DEFAULT_SLIDE_VALUE = 1;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_SLIDE_VALUE = 1", "var_name": "DEFAULT_SLIDE_VALUE"}, {"original_string": "public static final WindowType   DEFAULT_WINDOW_TYPE = WindowType.TUPLE_BASED_SLIDE_ON_EACH_TUPLE;", "modifier": "public static final", "type": "WindowType", "declarator": "DEFAULT_WINDOW_TYPE = WindowType.TUPLE_BASED_SLIDE_ON_EACH_TUPLE", "var_name": "DEFAULT_WINDOW_TYPE"}, {"original_string": "private transient long     parsedStorageSize    = STORAGE_SIZE_NOT_SET;", "modifier": "private transient", "type": "long", "declarator": "parsedStorageSize    = STORAGE_SIZE_NOT_SET", "var_name": "parsedStorageSize"}, {"original_string": "private transient long     parsedSlideValue    = DEFAULT_SLIDE_VALUE;", "modifier": "private transient", "type": "long", "declarator": "parsedSlideValue    = DEFAULT_SLIDE_VALUE", "var_name": "parsedSlideValue"}, {"original_string": "private transient boolean isValidated = false;", "modifier": "private transient", "type": "boolean", "declarator": "isValidated = false", "var_name": "isValidated"}, {"original_string": "private transient boolean validationResult = false;", "modifier": "private transient", "type": "boolean", "declarator": "validationResult = false", "var_name": "validationResult"}, {"original_string": "private StringBuilder cachedSqlQuery = null;", "modifier": "private", "type": "StringBuilder", "declarator": "cachedSqlQuery = null", "var_name": "cachedSqlQuery"}], "methods": [{"identifier": "StreamSource", "parameters": "()", "modifiers": "public", "return": "", "signature": " StreamSource()", "full_signature": "public  StreamSource()", "class_method_signature": "StreamSource.StreamSource()", "testcase": false, "constructor": true}, {"identifier": "getRawHistorySize", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRawHistorySize()", "full_signature": "public String getRawHistorySize()", "class_method_signature": "StreamSource.getRawHistorySize()", "testcase": false, "constructor": false}, {"identifier": "setRawHistorySize", "parameters": "(String rawHistorySize)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setRawHistorySize(String rawHistorySize)", "full_signature": "public StreamSource setRawHistorySize(String rawHistorySize)", "class_method_signature": "StreamSource.setRawHistorySize(String rawHistorySize)", "testcase": false, "constructor": false}, {"identifier": "setRawSlideValue", "parameters": "(String rawSlideValue)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setRawSlideValue(String rawSlideValue)", "full_signature": "public StreamSource setRawSlideValue(String rawSlideValue)", "class_method_signature": "StreamSource.setRawSlideValue(String rawSlideValue)", "testcase": false, "constructor": false}, {"identifier": "setAddressing", "parameters": "(AddressBean[] addressing)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setAddressing(AddressBean[] addressing)", "full_signature": "public StreamSource setAddressing(AddressBean[] addressing)", "class_method_signature": "StreamSource.setAddressing(AddressBean[] addressing)", "testcase": false, "constructor": false}, {"identifier": "setAlias", "parameters": "(String alias)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setAlias(String alias)", "full_signature": "public StreamSource setAlias(String alias)", "class_method_signature": "StreamSource.setAlias(String alias)", "testcase": false, "constructor": false}, {"identifier": "setSqlQuery", "parameters": "(String sqlQuery)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setSqlQuery(String sqlQuery)", "full_signature": "public StreamSource setSqlQuery(String sqlQuery)", "class_method_signature": "StreamSource.setSqlQuery(String sqlQuery)", "testcase": false, "constructor": false}, {"identifier": "getAddressing", "parameters": "( )", "modifiers": "public", "return": "AddressBean []", "signature": "AddressBean [] getAddressing( )", "full_signature": "public AddressBean [] getAddressing( )", "class_method_signature": "StreamSource.getAddressing( )", "testcase": false, "constructor": false}, {"identifier": "getAlias", "parameters": "( )", "modifiers": "public", "return": "CharSequence", "signature": "CharSequence getAlias( )", "full_signature": "public CharSequence getAlias( )", "class_method_signature": "StreamSource.getAlias( )", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "public InputStream getInputStream()", "class_method_signature": "StreamSource.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "getDisconnectedBufferSize", "parameters": "( )", "modifiers": "public", "return": "int", "signature": "int getDisconnectedBufferSize( )", "full_signature": "public int getDisconnectedBufferSize( )", "class_method_signature": "StreamSource.getDisconnectedBufferSize( )", "testcase": false, "constructor": false}, {"identifier": "setDisconnectedBufferSize", "parameters": "(int disconnectedBufferSize)", "modifiers": "public", "return": "void", "signature": "void setDisconnectedBufferSize(int disconnectedBufferSize)", "full_signature": "public void setDisconnectedBufferSize(int disconnectedBufferSize)", "class_method_signature": "StreamSource.setDisconnectedBufferSize(int disconnectedBufferSize)", "testcase": false, "constructor": false}, {"identifier": "getSamplingRate", "parameters": "( )", "modifiers": "public", "return": "float", "signature": "float getSamplingRate( )", "full_signature": "public float getSamplingRate( )", "class_method_signature": "StreamSource.getSamplingRate( )", "testcase": false, "constructor": false}, {"identifier": "setSamplingRate", "parameters": "(float newRate )", "modifiers": "public", "return": "void", "signature": "void setSamplingRate(float newRate )", "full_signature": "public void setSamplingRate(float newRate )", "class_method_signature": "StreamSource.setSamplingRate(float newRate )", "testcase": false, "constructor": false}, {"identifier": "getStorageSize", "parameters": "( )", "modifiers": "public", "return": "String", "signature": "String getStorageSize( )", "full_signature": "public String getStorageSize( )", "class_method_signature": "StreamSource.getStorageSize( )", "testcase": false, "constructor": false}, {"identifier": "getSlideValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSlideValue()", "full_signature": "public String getSlideValue()", "class_method_signature": "StreamSource.getSlideValue()", "testcase": false, "constructor": false}, {"identifier": "getSqlQuery", "parameters": "( )", "modifiers": "public", "return": "String", "signature": "String getSqlQuery( )", "full_signature": "public String getSqlQuery( )", "class_method_signature": "StreamSource.getSqlQuery( )", "testcase": false, "constructor": false}, {"identifier": "setWrapper", "parameters": "( AbstractWrapper wrapper  )", "modifiers": "public", "return": "void", "signature": "void setWrapper( AbstractWrapper wrapper  )", "full_signature": "public void setWrapper( AbstractWrapper wrapper  )", "class_method_signature": "StreamSource.setWrapper( AbstractWrapper wrapper  )", "testcase": false, "constructor": false}, {"identifier": "getWrapper", "parameters": "( )", "modifiers": "public", "return": "AbstractWrapper", "signature": "AbstractWrapper getWrapper( )", "full_signature": "public AbstractWrapper getWrapper( )", "class_method_signature": "StreamSource.getWrapper( )", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "( )", "modifiers": "public", "return": "boolean", "signature": "boolean validate( )", "full_signature": "public boolean validate( )", "class_method_signature": "StreamSource.validate( )", "testcase": false, "constructor": false}, {"identifier": "isStorageCountBased", "parameters": "( )", "modifiers": "public", "return": "boolean", "signature": "boolean isStorageCountBased( )", "full_signature": "public boolean isStorageCountBased( )", "class_method_signature": "StreamSource.isStorageCountBased( )", "testcase": false, "constructor": false}, {"identifier": "getParsedStorageSize", "parameters": "( )", "modifiers": "public", "return": "long", "signature": "long getParsedStorageSize( )", "full_signature": "public long getParsedStorageSize( )", "class_method_signature": "StreamSource.getParsedStorageSize( )", "testcase": false, "constructor": false}, {"identifier": "getWindowingType", "parameters": "()", "modifiers": "public", "return": "WindowType", "signature": "WindowType getWindowingType()", "full_signature": "public WindowType getWindowingType()", "class_method_signature": "StreamSource.getWindowingType()", "testcase": false, "constructor": false}, {"identifier": "getParsedSlideValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getParsedSlideValue()", "full_signature": "public long getParsedSlideValue()", "class_method_signature": "StreamSource.getParsedSlideValue()", "testcase": false, "constructor": false}, {"identifier": "windowSlided", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean windowSlided()", "full_signature": "public boolean windowSlided()", "class_method_signature": "StreamSource.windowSlided()", "testcase": false, "constructor": false}, {"identifier": "setQueryRewriter", "parameters": "(QueryRewriter rewriter)", "modifiers": "public", "return": "void", "signature": "void setQueryRewriter(QueryRewriter rewriter)", "full_signature": "public void setQueryRewriter(QueryRewriter rewriter)", "class_method_signature": "StreamSource.setQueryRewriter(QueryRewriter rewriter)", "testcase": false, "constructor": false}, {"identifier": "getQueryRewriter", "parameters": "()", "modifiers": "public", "return": "QueryRewriter", "signature": "QueryRewriter getQueryRewriter()", "full_signature": "public QueryRewriter getQueryRewriter()", "class_method_signature": "StreamSource.getQueryRewriter()", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(String query)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder rewrite(String query)", "full_signature": "public StringBuilder rewrite(String query)", "class_method_signature": "StreamSource.rewrite(String query)", "testcase": false, "constructor": false}, {"identifier": "getUIDStr", "parameters": "()", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getUIDStr()", "full_signature": "public StringBuilder getUIDStr()", "class_method_signature": "StreamSource.getUIDStr()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "StreamSource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toSql", "parameters": "()", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder toSql()", "full_signature": "public StringBuilder toSql()", "class_method_signature": "StreamSource.toSql()", "testcase": false, "constructor": false}, {"identifier": "setInputStream", "parameters": "(InputStream is)", "modifiers": "public", "return": "StreamSource", "signature": "StreamSource setInputStream(InputStream is)", "full_signature": "public StreamSource setInputStream(InputStream is)", "class_method_signature": "StreamSource.setInputStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "getActiveAddressBean", "parameters": "()", "modifiers": "public", "return": "AddressBean", "signature": "AddressBean getActiveAddressBean()", "full_signature": "public AddressBean getActiveAddressBean()", "class_method_signature": "StreamSource.getActiveAddressBean()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "StreamSource.toString()", "testcase": false, "constructor": false}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/beans/StreamSource.java"}, "focal_method": {"identifier": "validate", "parameters": "( )", "modifiers": "public", "return": "boolean", "body": "public boolean validate ( ) {\n    if (isValidated==true)\n      return validationResult;\n    windowingType = DEFAULT_WINDOW_TYPE;\n    isValidated=true;\n    if (samplingRate <=0 ) \n      logger.warn( new StringBuilder( ).append( \"The sampling rate is set to zero (or negative) which means no results. StreamSource = \" )\n          .append( getAlias( ) ).toString( ) );\n    else if(samplingRate > 1){\n    \tsamplingRate = 1;\n    \tlogger.warn( new StringBuilder( ).append( \"The provided sampling rate is greater than 1, resetting it to 1. StreamSource = \" )\n    \t          .append( getAlias( ) ).toString( ) );\n    }\n    if (getAddressing().length==0) {\n      logger.warn(new StringBuilder(\"Validation failed because there is no addressing predicates provided for the stream source (the addressing part of the stream source is empty)\").append(\"stream source alias = \").append(getAlias()));\n      return validationResult=false;\n    }\n    if ( this.rawHistorySize != null ) {\n      this.rawHistorySize = this.rawHistorySize.replace( \" \" , \"\" ).trim( ).toLowerCase( );\n      if ( this.rawHistorySize.equalsIgnoreCase( \"\" ) ) return validationResult = true;\n      final int second = 1000;\n      final int minute = second * 60;\n      final int hour = minute * 60;\n      final int mIndex = this.rawHistorySize.indexOf( \"m\" );\n      final int hIndex = this.rawHistorySize.indexOf( \"h\" );\n      final int sIndex = this.rawHistorySize.indexOf( \"s\" );\n      if ( mIndex < 0 && hIndex < 0 && sIndex < 0 ) {\n        try {\n          this.parsedStorageSize = Long.parseLong(this.rawHistorySize );\n          this.isStorageCountBased = true;\n          windowingType = WindowType.TUPLE_BASED;\n        } catch ( final NumberFormatException e ) {\n          logger.error( new StringBuilder( ).append( \"The storage size, \" ).append( this.rawHistorySize ).append( \", specified for the Stream Source : \" ).append( this.getAlias( ) ).append(\n          \" is not valid.\" ).toString( ) , e );\n          return (validationResult= false);\n        }\n      } else\n        try {\n          final StringBuilder shs = new StringBuilder( this.rawHistorySize );\n          if ( mIndex >= 0 && mIndex == shs.length() - 1) this.parsedStorageSize = Long.parseLong(shs.deleteCharAt( mIndex ).toString( ) ) * minute;\n          else if ( hIndex >= 0 && hIndex == shs.length() - 1) this.parsedStorageSize = Long.parseLong( shs.deleteCharAt( hIndex ).toString( ) ) * hour;\n          else if ( sIndex >= 0 && sIndex == shs.length() - 1) this.parsedStorageSize = Long.parseLong( shs.deleteCharAt( sIndex ).toString( ) ) * second;\n          else Long.parseLong(\"\");\n          this.isStorageCountBased = false;\n          windowingType = WindowType.TIME_BASED;\n        } catch ( NumberFormatException e ) {\n          logger.debug( e.getMessage( ) , e );\n          logger.error( new StringBuilder( ).append( \"The storage size, \" ).append( this.rawHistorySize ).append( \", specified for the Stream Source : \" ).append( this.getAlias( ) ).append(\n          \" is not valid.\" ).toString( ) );\n          return (validationResult=false);\n        }\n    }\n    logger.debug(\"validate() called\");   \n    //Parsing slide value\n    if(this.rawSlideValue == null){\n    \t//If slide value was not specified by the user, consider it as 1 tuple\n    \twindowingType = (windowingType == WindowType.TUPLE_BASED) ? WindowType.TUPLE_BASED_SLIDE_ON_EACH_TUPLE : WindowType.TIME_BASED_SLIDE_ON_EACH_TUPLE;\n    \treturn validationResult = true;\n    } else {\n    \tthis.rawSlideValue = this.rawSlideValue.replace( \" \" , \"\" ).trim( ).toLowerCase( );\n    \t//If slide value was not specified by the user, consider it as 1 tuple    \t\n        if ( this.rawSlideValue.equalsIgnoreCase( \"\" ) ){\n        \twindowingType = (windowingType == WindowType.TUPLE_BASED) ? WindowType.TUPLE_BASED_SLIDE_ON_EACH_TUPLE : WindowType.TIME_BASED_SLIDE_ON_EACH_TUPLE;\n        \treturn validationResult = true;\n        }\n        final int second = 1000;\n        final int minute = second * 60;\n        final int hour = minute * 60;\n        final int mIndex = this.rawSlideValue.indexOf( \"m\" );\n        final int hIndex = this.rawSlideValue.indexOf( \"h\" );\n        final int sIndex = this.rawSlideValue.indexOf( \"s\" );\n        if ( mIndex < 0 && hIndex < 0 && sIndex < 0 ) {\n          try {\n            this.parsedSlideValue = Long.parseLong( this.rawSlideValue );\n            if(parsedSlideValue == 1){//We consider this as a special case\n            \twindowingType = (windowingType == WindowType.TIME_BASED) ? WindowType.TIME_BASED_SLIDE_ON_EACH_TUPLE : WindowType.TUPLE_BASED_SLIDE_ON_EACH_TUPLE;\n            }\n            else if(windowingType == WindowType.TIME_BASED)\n            \twindowingType = WindowType.TIME_BASED_WIN_TUPLE_BASED_SLIDE;\n          } catch ( final NumberFormatException e ) {\n            logger.error( new StringBuilder( ).append( \"The slide value, \" ).append( this.rawSlideValue ).append( \", specified for the Stream Source : \" ).append( this.getAlias( ) ).append(\n            \" is not valid.\" ).toString( ) , e );\n            return (validationResult= false);\n          }\n        } else\n          try {\n            final StringBuilder shs = new StringBuilder( this.rawSlideValue );\n            if ( mIndex >= 0 && mIndex == shs.length() - 1) this.parsedSlideValue = Long.parseLong( shs.deleteCharAt( mIndex ).toString( ) ) * minute;\n            else if ( hIndex >= 0 && hIndex == shs.length() - 1) this.parsedSlideValue = Long.parseLong( shs.deleteCharAt( hIndex ).toString( ) ) * hour;\n            else if ( sIndex >= 0 && sIndex == shs.length() - 1) this.parsedSlideValue = Long.parseLong( shs.deleteCharAt( sIndex ).toString( ) ) * second;\n            else Long.parseLong(\"\");\n            if(windowingType == WindowType.TUPLE_BASED)\n            \twindowingType = WindowType.TUPLE_BASED_WIN_TIME_BASED_SLIDE;\n          } catch ( NumberFormatException e ) {\n            logger.debug( e.getMessage( ) , e );\n            logger.error( new StringBuilder( ).append( \"The slide value, \" ).append( this.rawSlideValue ).append( \", specified for the Stream Source : \" ).append( this.getAlias( ) ).append(\n            \" is not valid.\" ).toString( ) );\n            return (validationResult=false);\n          }\n    }\n    return validationResult=true;\n  }", "signature": "boolean validate( )", "full_signature": "public boolean validate( )", "class_method_signature": "StreamSource.validate( )", "testcase": false, "constructor": false, "invocations": ["warn", "toString", "append", "append", "getAlias", "warn", "toString", "append", "append", "getAlias", "getAddressing", "warn", "append", "append", "getAlias", "toLowerCase", "trim", "replace", "equalsIgnoreCase", "indexOf", "indexOf", "indexOf", "parseLong", "error", "toString", "append", "append", "append", "append", "append", "getAlias", "length", "parseLong", "toString", "deleteCharAt", "length", "parseLong", "toString", "deleteCharAt", "length", "parseLong", "toString", "deleteCharAt", "parseLong", "debug", "getMessage", "error", "toString", "append", "append", "append", "append", "append", "getAlias", "debug", "toLowerCase", "trim", "replace", "equalsIgnoreCase", "indexOf", "indexOf", "indexOf", "parseLong", "error", "toString", "append", "append", "append", "append", "append", "getAlias", "length", "parseLong", "toString", "deleteCharAt", "length", "parseLong", "toString", "deleteCharAt", "length", "parseLong", "toString", "deleteCharAt", "parseLong", "debug", "getMessage", "error", "toString", "append", "append", "append", "append", "append", "getAlias"]}, "repository": {"repo_id": 9221446, "url": "https://github.com/OpenIotOrg/openiot", "language": "Java", "is_fork": false, "fork_count": 201, "stargazer_count": 417, "size": 101270, "license": "licensed"}}