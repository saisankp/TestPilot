{"test_class": {"identifier": "TestProtocolBuilderImpl", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/builder/TestProtocolBuilderImpl.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n  public void build() throws Exception {\n    ProtocolBuilderImpl<BuilderTestClass> protocolBuilder = new BuilderTestClass();\n    protocolBuilder.append(null);\n    protocolBuilder.build();\n    protocolBuilder.append(null);\n  }", "signature": "void build()", "full_signature": "@Test(expected = IllegalStateException.class) public void build()", "class_method_signature": "TestProtocolBuilderImpl.build()", "testcase": true, "constructor": false, "invocations": ["append", "build", "append"]}, "focal_class": {"identifier": "ProtocolBuilderImpl", "superclass": "", "interfaces": "implements ProtocolBuilder", "fields": [{"original_string": "private final boolean parallel;", "modifier": "private final", "type": "boolean", "declarator": "parallel", "var_name": "parallel"}, {"original_string": "private List<ProtocolProducer> protocols;", "modifier": "private", "type": "List<ProtocolProducer>", "declarator": "protocols", "var_name": "protocols"}, {"original_string": "private BuilderFactory<BuilderT> factory;", "modifier": "private", "type": "BuilderFactory<BuilderT>", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "ProtocolBuilderImpl", "parameters": "(\n      BuilderFactory<BuilderT> factory,\n      boolean parallel)", "modifiers": "protected", "return": "", "signature": " ProtocolBuilderImpl(\n      BuilderFactory<BuilderT> factory,\n      boolean parallel)", "full_signature": "protected  ProtocolBuilderImpl(\n      BuilderFactory<BuilderT> factory,\n      boolean parallel)", "class_method_signature": "ProtocolBuilderImpl.ProtocolBuilderImpl(\n      BuilderFactory<BuilderT> factory,\n      boolean parallel)", "testcase": false, "constructor": true}, {"identifier": "createAndAppend", "parameters": "(ProtocolProducer producer)", "modifiers": "private", "return": "void", "signature": "void createAndAppend(ProtocolProducer producer)", "full_signature": "private void createAndAppend(ProtocolProducer producer)", "class_method_signature": "ProtocolBuilderImpl.createAndAppend(ProtocolProducer producer)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(NativeProtocol<T, ?> nativeProtocol)", "modifiers": "public", "return": "DRes<T>", "signature": "DRes<T> append(NativeProtocol<T, ?> nativeProtocol)", "full_signature": "public DRes<T> append(NativeProtocol<T, ?> nativeProtocol)", "class_method_signature": "ProtocolBuilderImpl.append(NativeProtocol<T, ?> nativeProtocol)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "ProtocolProducer", "signature": "ProtocolProducer build()", "full_signature": "public ProtocolProducer build()", "class_method_signature": "ProtocolBuilderImpl.build()", "testcase": false, "constructor": false}, {"identifier": "seq", "parameters": "(Computation<R, BuilderT> function)", "modifiers": "public", "return": "BuildStep<Void, BuilderT, R>", "signature": "BuildStep<Void, BuilderT, R> seq(Computation<R, BuilderT> function)", "full_signature": "public BuildStep<Void, BuilderT, R> seq(Computation<R, BuilderT> function)", "class_method_signature": "ProtocolBuilderImpl.seq(Computation<R, BuilderT> function)", "testcase": false, "constructor": false}, {"identifier": "par", "parameters": "(ComputationParallel<R, BuilderT> f)", "modifiers": "public", "return": "BuildStep<Void, BuilderT, R>", "signature": "BuildStep<Void, BuilderT, R> par(ComputationParallel<R, BuilderT> f)", "full_signature": "public BuildStep<Void, BuilderT, R> par(ComputationParallel<R, BuilderT> f)", "class_method_signature": "ProtocolBuilderImpl.par(ComputationParallel<R, BuilderT> f)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/builder/ProtocolBuilderImpl.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "ProtocolProducer", "body": "public ProtocolProducer build() {\n    if (parallel) {\n      ParallelProtocolProducer parallelProtocolProducer = new ParallelProtocolProducer(protocols);\n      protocols = null;\n      return parallelProtocolProducer;\n    } else {\n      SequentialProtocolProducer sequentialProtocolProducer =\n          new SequentialProtocolProducer(protocols);\n      protocols = null;\n      return sequentialProtocolProducer;\n    }\n  }", "signature": "ProtocolProducer build()", "full_signature": "public ProtocolProducer build()", "class_method_signature": "ProtocolBuilderImpl.build()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}