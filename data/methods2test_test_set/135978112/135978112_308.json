{"test_class": {"identifier": "KStreamFlatMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFlatMapTest.java"}, "test_case": {"identifier": "testFlatMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMap() {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        KeyValueMapper<Integer, String, Iterable<KeyValue<String, String>>> mapper =\n            new KeyValueMapper<Integer, String, Iterable<KeyValue<String, String>>>() {\n                @Override\n                public Iterable<KeyValue<String, String>> apply(Integer key, String value) {\n                    ArrayList<KeyValue<String, String>> result = new ArrayList<>();\n                    for (int i = 0; i < key; i++) {\n                        result.add(KeyValue.pair(Integer.toString(key * 10 + i), value));\n                    }\n                    return result;\n                }\n            };\n\n        final int[] expectedKeys = {0, 1, 2, 3};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<String, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.flatMap(mapper).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"10:V1\", \"20:V2\", \"21:V2\", \"30:V3\", \"31:V3\", \"32:V3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }", "signature": "void testFlatMap()", "full_signature": "@Test public void testFlatMap()", "class_method_signature": "KStreamFlatMapTest.testFlatMap()", "testcase": true, "constructor": false, "invocations": ["add", "pair", "toString", "stream", "Integer", "String", "process", "flatMap", "process", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "KStreamFlatMap", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper;", "modifier": "private final", "type": "KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>>", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "KStreamFlatMap", "parameters": "(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "modifiers": "", "return": "", "signature": " KStreamFlatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "full_signature": "  KStreamFlatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "class_method_signature": "KStreamFlatMap.KStreamFlatMap(KeyValueMapper<K, V, Iterable<KeyValue<K1, V1>>> mapper)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamFlatMap.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamFlatMap.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return new KStreamFlatMapProcessor();\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamFlatMap.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}