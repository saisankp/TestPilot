{"test_class": {"identifier": "HexStringTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "network-level/fl-ho-nl/src/test/java/org/openflow/util/HexStringTest.java"}, "test_case": {"identifier": "testToLongError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToLongError() {\n        String dpidStr = \"09:08:07:06:05:04:03:02:01\";\n        try {\n            HexString.toLong(dpidStr);\n            fail(\"HexString.toLong() should have thrown a NumberFormatException\");\n        }\n        catch (NumberFormatException expected) {\n            // do nothing\n        }\n    }", "signature": "void testToLongError()", "full_signature": "@Test public void testToLongError()", "class_method_signature": "HexStringTest.testToLongError()", "testcase": true, "constructor": false, "invocations": ["toLong", "fail"]}, "focal_class": {"identifier": "HexString", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toHexString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] bytes)", "full_signature": "public static String toHexString(byte[] bytes)", "class_method_signature": "HexString.toHexString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(long val, int padTo)", "modifiers": "public static", "return": "String", "signature": "String toHexString(long val, int padTo)", "full_signature": "public static String toHexString(long val, int padTo)", "class_method_signature": "HexString.toHexString(long val, int padTo)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(long val)", "modifiers": "public static", "return": "String", "signature": "String toHexString(long val)", "full_signature": "public static String toHexString(long val)", "class_method_signature": "HexString.toHexString(long val)", "testcase": false, "constructor": false}, {"identifier": "fromHexString", "parameters": "(String values)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] fromHexString(String values)", "full_signature": "public static byte[] fromHexString(String values)", "class_method_signature": "HexString.fromHexString(String values)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(String values)", "modifiers": "public static", "return": "long", "signature": "long toLong(String values)", "full_signature": "public static long toLong(String values)", "class_method_signature": "HexString.toLong(String values)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/org/openflow/util/HexString.java"}, "focal_method": {"identifier": "toLong", "parameters": "(String values)", "modifiers": "public static", "return": "long", "body": "public static long toLong(String values) throws NumberFormatException {\n        // Long.parseLong() can't handle HexStrings with MSB set. Sigh. \n        BigInteger bi = new BigInteger(values.replaceAll(\":\", \"\"),16);\n        if (bi.bitLength() > 64) \n            throw new NumberFormatException(\"Input string too big to fit in long: \" + values);\n        return bi.longValue();\n    }", "signature": "long toLong(String values)", "full_signature": "public static long toLong(String values)", "class_method_signature": "HexString.toLong(String values)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "bitLength", "longValue"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}