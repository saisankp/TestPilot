{"test_class": {"identifier": "PublicKeyVerifyWrapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/signature/PublicKeyVerifyWrapperTest.java"}, "test_case": {"identifier": "testMultipleKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleKeys() throws Exception {\n    EcdsaPrivateKey tinkPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P521, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key tink =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                tinkPrivateKey.getPublicKey(),\n                new EcdsaVerifyKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            1,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.TINK);\n\n    EcdsaPrivateKey legacyPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P256, HashType.SHA256, EcdsaSignatureEncoding.DER);\n    Key legacy =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                legacyPrivateKey.getPublicKey(),\n                new EcdsaVerifyKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            2,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.LEGACY);\n\n    EcdsaPrivateKey rawPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P384, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key raw =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                rawPrivateKey.getPublicKey(),\n                new EcdsaVerifyKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            3,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n\n    EcdsaPrivateKey crunchyPrivateKey =\n        TestUtil.generateEcdsaPrivKey(\n            EllipticCurveType.NIST_P384, HashType.SHA512, EcdsaSignatureEncoding.DER);\n    Key crunchy =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                crunchyPrivateKey.getPublicKey(),\n                new EcdsaVerifyKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            4,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.CRUNCHY);\n\n    Key[] keys = new Key[] {tink, legacy, raw, crunchy};\n    EcdsaPrivateKey[] privateKeys =\n        new EcdsaPrivateKey[] {tinkPrivateKey, legacyPrivateKey, rawPrivateKey, crunchyPrivateKey};\n\n    int j = keys.length;\n    for (int i = 0; i < j; i++) {\n      KeysetHandle keysetHandle =\n          TestUtil.createKeysetHandle(\n              TestUtil.createKeyset(\n                  keys[i], keys[(i + 1) % j], keys[(i + 2) % j], keys[(i + 3) % j]));\n      PublicKeyVerify verifier =\n          new PublicKeyVerifyWrapper()\n              .wrap(Registry.getPrimitives(keysetHandle, PublicKeyVerify.class));\n      // Signature from any keys in the keyset should be valid.\n      for (int k = 0; k < j; k++) {\n        PublicKeySign signer =\n            PublicKeySignFactory.getPrimitive(\n                TestUtil.createKeysetHandle(\n                    TestUtil.createKeyset(\n                        TestUtil.createKey(\n                            TestUtil.createKeyData(\n                                privateKeys[k],\n                                new EcdsaSignKeyManager().getKeyType(),\n                                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n                            keys[k].getKeyId(),\n                            KeyStatusType.ENABLED,\n                            keys[k].getOutputPrefixType()))));\n        byte[] plaintext = Random.randBytes(1211);\n        byte[] sig = signer.sign(plaintext);\n        try {\n          verifier.verify(sig, plaintext);\n        } catch (GeneralSecurityException ex) {\n          fail(\"Valid signature, should not throw exception: \" + k);\n        }\n      }\n\n      // Signature from a random key should be invalid.\n      EcdsaPrivateKey randomPrivKey =\n          TestUtil.generateEcdsaPrivKey(\n              EllipticCurveType.NIST_P521, HashType.SHA512, EcdsaSignatureEncoding.DER);\n      PublicKeySign signer =\n          PublicKeySignFactory.getPrimitive(\n              TestUtil.createKeysetHandle(\n                  TestUtil.createKeyset(\n                      TestUtil.createKey(\n                          TestUtil.createKeyData(\n                              randomPrivKey,\n                              new EcdsaSignKeyManager().getKeyType(),\n                              KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n                          1,\n                          KeyStatusType.ENABLED,\n                          keys[0].getOutputPrefixType()))));\n      byte[] plaintext = Random.randBytes(1211);\n      byte[] sig = signer.sign(plaintext);\n      try {\n        verifier.verify(sig, plaintext);\n        fail(\"Invalid signature, should have thrown exception\");\n      } catch (GeneralSecurityException expected) {\n        // Expected\n      }\n    }\n  }", "signature": "void testMultipleKeys()", "full_signature": "@Test public void testMultipleKeys()", "class_method_signature": "PublicKeyVerifyWrapperTest.testMultipleKeys()", "testcase": true, "constructor": false, "invocations": ["generateEcdsaPrivKey", "createKey", "createKeyData", "getPublicKey", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getPublicKey", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getPublicKey", "getKeyType", "generateEcdsaPrivKey", "createKey", "createKeyData", "getPublicKey", "getKeyType", "createKeysetHandle", "createKeyset", "wrap", "getPrimitives", "getPrimitive", "createKeysetHandle", "createKeyset", "createKey", "createKeyData", "getKeyType", "getKeyId", "getOutputPrefixType", "randBytes", "sign", "verify", "fail", "generateEcdsaPrivKey", "getPrimitive", "createKeysetHandle", "createKeyset", "createKey", "createKeyData", "getKeyType", "getOutputPrefixType", "randBytes", "sign", "verify", "fail"]}, "focal_class": {"identifier": "PublicKeyVerifyWrapper", "superclass": "", "interfaces": "implements PrimitiveWrapper<PublicKeyVerify, PublicKeyVerify>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(PublicKeyVerifyWrapper.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(PublicKeyVerifyWrapper.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "wrap", "parameters": "(final PrimitiveSet<PublicKeyVerify> primitives)", "modifiers": "@Override public", "return": "PublicKeyVerify", "signature": "PublicKeyVerify wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "full_signature": "@Override public PublicKeyVerify wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "class_method_signature": "PublicKeyVerifyWrapper.wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<PublicKeyVerify>", "signature": "Class<PublicKeyVerify> getPrimitiveClass()", "full_signature": "@Override public Class<PublicKeyVerify> getPrimitiveClass()", "class_method_signature": "PublicKeyVerifyWrapper.getPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitiveClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<PublicKeyVerify>", "signature": "Class<PublicKeyVerify> getInputPrimitiveClass()", "full_signature": "@Override public Class<PublicKeyVerify> getInputPrimitiveClass()", "class_method_signature": "PublicKeyVerifyWrapper.getInputPrimitiveClass()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "PublicKeyVerifyWrapper.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/signature/PublicKeyVerifyWrapper.java"}, "focal_method": {"identifier": "wrap", "parameters": "(final PrimitiveSet<PublicKeyVerify> primitives)", "modifiers": "@Override public", "return": "PublicKeyVerify", "body": "@Override\n  public PublicKeyVerify wrap(final PrimitiveSet<PublicKeyVerify> primitives) {\n    return new WrappedPublicKeyVerify(primitives);\n  }", "signature": "PublicKeyVerify wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "full_signature": "@Override public PublicKeyVerify wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "class_method_signature": "PublicKeyVerifyWrapper.wrap(final PrimitiveSet<PublicKeyVerify> primitives)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}