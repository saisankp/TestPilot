{"test_class": {"identifier": "UniformRandomProducerTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/util/generators/primitives/scalar/UniformRandomProducerTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n        Random random = new Random(0L);\n        double[] bounds = Arrays.asList(random.nextInt(10) - 5, random.nextInt(10) - 5)\n            .stream().sorted().mapToDouble(x -> x)\n            .toArray();\n\n        double min = Math.min(bounds[0], bounds[1]);\n        double max = Math.max(bounds[0], bounds[1]);\n\n        double mean = (min + max) / 2;\n        double variance = Math.pow(min - max, 2) / 12;\n        UniformRandomProducer producer = new UniformRandomProducer(min, max, 0L);\n\n        final int N = 500000;\n        double meanStat = IntStream.range(0, N).mapToDouble(i -> producer.get()).sum() / N;\n        double varianceStat = IntStream.range(0, N).mapToDouble(i -> Math.pow(producer.get() - mean, 2)).sum() / N;\n\n        assertEquals(mean, meanStat, 0.01);\n        assertEquals(variance, varianceStat, 0.1);\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "UniformRandomProducerTest.testGet()", "testcase": true, "constructor": false, "invocations": ["toArray", "mapToDouble", "sorted", "stream", "asList", "nextInt", "nextInt", "min", "max", "pow", "sum", "mapToDouble", "range", "get", "sum", "mapToDouble", "range", "pow", "get", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "UniformRandomProducer", "superclass": "extends RandomProducerWithGenerator", "interfaces": "", "fields": [{"original_string": "private final double from;", "modifier": "private final", "type": "double", "declarator": "from", "var_name": "from"}, {"original_string": "private final double to;", "modifier": "private final", "type": "double", "declarator": "to", "var_name": "to"}], "methods": [{"identifier": "UniformRandomProducer", "parameters": "(double from, double to)", "modifiers": "public", "return": "", "signature": " UniformRandomProducer(double from, double to)", "full_signature": "public  UniformRandomProducer(double from, double to)", "class_method_signature": "UniformRandomProducer.UniformRandomProducer(double from, double to)", "testcase": false, "constructor": true}, {"identifier": "UniformRandomProducer", "parameters": "(double from, double to, long seed)", "modifiers": "public", "return": "", "signature": " UniformRandomProducer(double from, double to, long seed)", "full_signature": "public  UniformRandomProducer(double from, double to, long seed)", "class_method_signature": "UniformRandomProducer.UniformRandomProducer(double from, double to, long seed)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double get()", "full_signature": "@Override public Double get()", "class_method_signature": "UniformRandomProducer.get()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/util/generators/primitives/scalar/UniformRandomProducer.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double get() {\n        double result = generator().nextDouble() * (to - from) + from;\n        if (result > to)\n            result = to;\n\n        return result;\n    }", "signature": "Double get()", "full_signature": "@Override public Double get()", "class_method_signature": "UniformRandomProducer.get()", "testcase": false, "constructor": false, "invocations": ["nextDouble", "generator"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}