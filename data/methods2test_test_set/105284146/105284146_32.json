{"test_class": {"identifier": "StaticVarCompensatorsValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private double p = 0;", "modifier": "private", "type": "double", "declarator": "p = 0", "var_name": "p"}, {"original_string": "private double q = 3.72344;", "modifier": "private", "type": "double", "declarator": "q = 3.72344", "var_name": "q"}, {"original_string": "private double v = 380;", "modifier": "private", "type": "double", "declarator": "v = 380", "var_name": "v"}, {"original_string": "private double nominalV = 380;", "modifier": "private", "type": "double", "declarator": "nominalV = 380", "var_name": "nominalV"}, {"original_string": "private double reactivePowerSetpoint = 3.72344;", "modifier": "private", "type": "double", "declarator": "reactivePowerSetpoint = 3.72344", "var_name": "reactivePowerSetpoint"}, {"original_string": "private final double voltageSetpoint = 380;", "modifier": "private final", "type": "double", "declarator": "voltageSetpoint = 380", "var_name": "voltageSetpoint"}, {"original_string": "private RegulationMode regulationMode = RegulationMode.REACTIVE_POWER;", "modifier": "private", "type": "RegulationMode", "declarator": "regulationMode = RegulationMode.REACTIVE_POWER", "var_name": "regulationMode"}, {"original_string": "private final double bMin = -.01;", "modifier": "private final", "type": "double", "declarator": "bMin = -.01", "var_name": "bMin"}, {"original_string": "private final double bMax = .1;", "modifier": "private final", "type": "double", "declarator": "bMax = .1", "var_name": "bMax"}, {"original_string": "private final boolean connected = true;", "modifier": "private final", "type": "boolean", "declarator": "connected = true", "var_name": "connected"}, {"original_string": "private boolean mainComponent = true;", "modifier": "private", "type": "boolean", "declarator": "mainComponent = true", "var_name": "mainComponent"}, {"original_string": "private BusView svcBusView;", "modifier": "private", "type": "BusView", "declarator": "svcBusView", "var_name": "svcBusView"}, {"original_string": "private Terminal svcTerminal;", "modifier": "private", "type": "Terminal", "declarator": "svcTerminal", "var_name": "svcTerminal"}, {"original_string": "private StaticVarCompensator svc;", "modifier": "private", "type": "StaticVarCompensator", "declarator": "svc", "var_name": "svc"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/StaticVarCompensatorsValidationTest.java"}, "test_case": {"identifier": "checkNetworkSvcs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkNetworkSvcs() throws IOException {\n        Network network = Mockito.mock(Network.class);\n        Mockito.when(network.getId()).thenReturn(\"network\");\n        Mockito.when(network.getStaticVarCompensatorStream()).thenAnswer(dummy -> Stream.of(svc));\n\n        assertTrue(StaticVarCompensatorsValidation.INSTANCE.checkSVCs(network, looseConfig, data));\n\n        assertTrue(ValidationType.SVCS.check(network, looseConfig, tmpDir));\n\n        ValidationWriter validationWriter = ValidationUtils.createValidationWriter(network.getId(), looseConfig, NullWriter.NULL_WRITER, ValidationType.SVCS);\n        assertTrue(ValidationType.SVCS.check(network, looseConfig, validationWriter));\n    }", "signature": "void checkNetworkSvcs()", "full_signature": "@Test public void checkNetworkSvcs()", "class_method_signature": "StaticVarCompensatorsValidationTest.checkNetworkSvcs()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "thenAnswer", "when", "getStaticVarCompensatorStream", "of", "assertTrue", "checkSVCs", "assertTrue", "check", "createValidationWriter", "getId", "assertTrue", "check"]}, "focal_class": {"identifier": "StaticVarCompensatorsValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StaticVarCompensatorsValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StaticVarCompensatorsValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final StaticVarCompensatorsValidation INSTANCE = new StaticVarCompensatorsValidation();", "modifier": "public static final", "type": "StaticVarCompensatorsValidation", "declarator": "INSTANCE = new StaticVarCompensatorsValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "StaticVarCompensatorsValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " StaticVarCompensatorsValidation()", "full_signature": "private  StaticVarCompensatorsValidation()", "class_method_signature": "StaticVarCompensatorsValidation.StaticVarCompensatorsValidation()", "testcase": false, "constructor": true}, {"identifier": "checkSVCs", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkSVCs(Network network, ValidationConfig config, Path file)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkSVCs(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(Network network, ValidationConfig config, ValidationWriter svcsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(Network network, ValidationConfig config, ValidationWriter svcsWriter)", "full_signature": "public boolean checkSVCs(Network network, ValidationConfig config, ValidationWriter svcsWriter)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(Network network, ValidationConfig config, ValidationWriter svcsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(StaticVarCompensator svc, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(StaticVarCompensator svc, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkSVCs(StaticVarCompensator svc, ValidationConfig config, Writer writer)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(StaticVarCompensator svc, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(StaticVarCompensator svc, ValidationConfig config, ValidationWriter svcsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(StaticVarCompensator svc, ValidationConfig config, ValidationWriter svcsWriter)", "full_signature": "public boolean checkSVCs(StaticVarCompensator svc, ValidationConfig config, ValidationWriter svcsWriter)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(StaticVarCompensator svc, ValidationConfig config, ValidationWriter svcsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, Writer writer)", "full_signature": "public boolean checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, Writer writer)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkSVCs", "parameters": "(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, ValidationWriter svcsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, ValidationWriter svcsWriter)", "full_signature": "public boolean checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, ValidationWriter svcsWriter)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(String id, double p, double q, double vControlled, double vController, double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n                                    RegulationMode regulationMode, double bMin, double bMax, boolean connected, boolean mainComponent,\n                                    ValidationConfig config, ValidationWriter svcsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkSVCsNaNValues", "parameters": "(String id, double p, double q, double reactivePowerSetpoint)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkSVCsNaNValues(String id, double p, double q, double reactivePowerSetpoint)", "full_signature": "private static boolean checkSVCsNaNValues(String id, double p, double q, double reactivePowerSetpoint)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCsNaNValues(String id, double p, double q, double reactivePowerSetpoint)", "testcase": false, "constructor": false}, {"identifier": "checkSVCsValues", "parameters": "(String id, double p, double q, double vControlled, double vController,\n        double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n        RegulationMode regulationMode, double bMin, double bMax, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkSVCsValues(String id, double p, double q, double vControlled, double vController,\n        double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n        RegulationMode regulationMode, double bMin, double bMax, ValidationConfig config)", "full_signature": "private static boolean checkSVCsValues(String id, double p, double q, double vControlled, double vController,\n        double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n        RegulationMode regulationMode, double bMin, double bMax, ValidationConfig config)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCsValues(String id, double p, double q, double vControlled, double vController,\n        double nominalVcontroller, double reactivePowerSetpoint, double voltageSetpoint,\n        RegulationMode regulationMode, double bMin, double bMax, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "reactivePowerRegulationModeKo", "parameters": "(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double reactivePowerSetpoint, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean reactivePowerRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double reactivePowerSetpoint, ValidationConfig config)", "full_signature": "private static boolean reactivePowerRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double reactivePowerSetpoint, ValidationConfig config)", "class_method_signature": "StaticVarCompensatorsValidation.reactivePowerRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double reactivePowerSetpoint, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "voltageRegulationModeKo", "parameters": "(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double vControlled, double voltageSetpoint, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean voltageRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double vControlled, double voltageSetpoint, ValidationConfig config)", "full_signature": "private static boolean voltageRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double vControlled, double voltageSetpoint, ValidationConfig config)", "class_method_signature": "StaticVarCompensatorsValidation.voltageRegulationModeKo(RegulationMode regulationMode, double q, double qMin,\n        double qMax, double vControlled, double voltageSetpoint, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "offRegulationModeKo", "parameters": "(RegulationMode regulationMode, double q, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean offRegulationModeKo(RegulationMode regulationMode, double q, ValidationConfig config)", "full_signature": "private static boolean offRegulationModeKo(RegulationMode regulationMode, double q, ValidationConfig config)", "class_method_signature": "StaticVarCompensatorsValidation.offRegulationModeKo(RegulationMode regulationMode, double q, ValidationConfig config)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/StaticVarCompensatorsValidation.java"}, "focal_method": {"identifier": "checkSVCs", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "body": "public boolean checkSVCs(Network network, ValidationConfig config, Path file) throws IOException {\n        Objects.requireNonNull(file);\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(file);\n        try (Writer writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {\n            return checkSVCs(network, config, writer);\n        }\n    }", "signature": "boolean checkSVCs(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkSVCs(Network network, ValidationConfig config, Path file)", "class_method_signature": "StaticVarCompensatorsValidation.checkSVCs(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "newBufferedWriter", "checkSVCs"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}