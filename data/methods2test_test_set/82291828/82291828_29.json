{"test_class": {"identifier": "WeightsTest", "superclass": "", "interfaces": "", "fields": [], "file": "algo/src/test/java/org/neo4j/graphalgo/similarity/WeightsTest.java"}, "test_case": {"identifier": "rleWithMoreThanOneRepeatedValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rleWithMoreThanOneRepeatedValue() throws Exception {\n        Number[] values = {2.0, 2.0, 4.0, 4.0, 6.0, 6.0};\n        List<Number> weightList = Arrays.asList(values);\n        double[] actuals = Weights.buildRleWeights(weightList, 1);\n        System.out.println(\"actuals = \" + Arrays.toString(actuals));\n        assertArrayEquals(new double[]{\n                Double.POSITIVE_INFINITY, 2.0, 2.0,\n                Double.POSITIVE_INFINITY, 2.0, 4.0,\n                Double.POSITIVE_INFINITY, 2.0, 6.0}, actuals, 0.01);\n    }", "signature": "void rleWithMoreThanOneRepeatedValue()", "full_signature": "@Test public void rleWithMoreThanOneRepeatedValue()", "class_method_signature": "WeightsTest.rleWithMoreThanOneRepeatedValue()", "testcase": true, "constructor": false, "invocations": ["asList", "buildRleWeights", "println", "toString", "assertArrayEquals"]}, "focal_class": {"identifier": "Weights", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long REPEAT_CUTOFF = 3L;", "modifier": "public static final", "type": "long", "declarator": "REPEAT_CUTOFF = 3L", "var_name": "REPEAT_CUTOFF"}], "methods": [{"identifier": "buildWeights", "parameters": "(List<Number> weightList)", "modifiers": "public static", "return": "double[]", "signature": "double[] buildWeights(List<Number> weightList)", "full_signature": "public static double[] buildWeights(List<Number> weightList)", "class_method_signature": "Weights.buildWeights(List<Number> weightList)", "testcase": false, "constructor": false}, {"identifier": "buildRleWeights", "parameters": "(List<Number> weightList, int limit)", "modifiers": "public static", "return": "double[]", "signature": "double[] buildRleWeights(List<Number> weightList, int limit)", "full_signature": "public static double[] buildRleWeights(List<Number> weightList, int limit)", "class_method_signature": "Weights.buildRleWeights(List<Number> weightList, int limit)", "testcase": false, "constructor": false}, {"identifier": "buildRleWeights", "parameters": "(double[] weightList, int limit)", "modifiers": "public static", "return": "double[]", "signature": "double[] buildRleWeights(double[] weightList, int limit)", "full_signature": "public static double[] buildRleWeights(double[] weightList, int limit)", "class_method_signature": "Weights.buildRleWeights(double[] weightList, int limit)", "testcase": false, "constructor": false}], "file": "algo/src/main/java/org/neo4j/graphalgo/similarity/Weights.java"}, "focal_method": {"identifier": "buildRleWeights", "parameters": "(List<Number> weightList, int limit)", "modifiers": "public static", "return": "double[]", "body": "public static double[] buildRleWeights(List<Number> weightList, int limit) {\n        double[] weights = new double[weightList.size() + (weightList.size() / (limit * 2))];\n\n        double latestValue = Double.POSITIVE_INFINITY;\n        int counter = 0;\n\n        int i = 0;\n        for (Number value : weightList) {\n            if (value.doubleValue() == latestValue || (Double.isNaN(latestValue) && Double.isNaN(value.doubleValue()))) {\n                counter++;\n            } else {\n                if (counter > limit) {\n                    weights[i++] = Double.POSITIVE_INFINITY;\n                    weights[i++] = counter;\n                    weights[i++] = latestValue;\n                    counter = 1;\n                } else {\n                    if (counter > 0) {\n                        for (int j = 0; j < counter; j++) {\n                            weights[i++] = latestValue;\n                        }\n                    }\n                    counter = 1;\n                }\n                latestValue = value.doubleValue();\n            }\n        }\n\n        if (counter > limit) {\n            weights[i++] = Double.POSITIVE_INFINITY;\n            weights[i++] = counter;\n            weights[i++] = latestValue;\n        } else {\n            for (int j = 0; j < counter; j++) {\n                weights[i++] = latestValue;\n            }\n        }\n\n        return Arrays.copyOf(weights, i);\n    }", "signature": "double[] buildRleWeights(List<Number> weightList, int limit)", "full_signature": "public static double[] buildRleWeights(List<Number> weightList, int limit)", "class_method_signature": "Weights.buildRleWeights(List<Number> weightList, int limit)", "testcase": false, "constructor": false, "invocations": ["size", "size", "doubleValue", "isNaN", "isNaN", "doubleValue", "doubleValue", "copyOf"]}, "repository": {"repo_id": 82291828, "url": "https://github.com/neo4j-contrib/neo4j-graph-algorithms", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 689, "size": 43359, "license": "licensed"}}