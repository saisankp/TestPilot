{"test_class": {"identifier": "CycloneDXGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    File tempDir;", "modifier": "@TempDir", "type": "File", "declarator": "tempDir", "var_name": "tempDir"}, {"original_string": "CycloneDXGenerator generator = new CycloneDXGenerator();", "modifier": "", "type": "CycloneDXGenerator", "declarator": "generator = new CycloneDXGenerator()", "var_name": "generator"}, {"original_string": "Path antennaTargetDir;", "modifier": "", "type": "Path", "declarator": "antennaTargetDir", "var_name": "antennaTargetDir"}], "file": "modules/cyclone-dx/src/test/java/com/eclipse/sw360/antenna/cyclonedx/CycloneDXGeneratorTest.java"}, "test_case": {"identifier": "reportWithMavenAndFiles", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void reportWithMavenAndFiles() throws Exception {\n        List<Artifact> artifacts = readIQDataToArtifacts(\"ReportWithMavenAndFiles.json\");\n        Map<String, IAttachable> map = generator.produce(artifacts);\n\n        IAttachable attachable = map.get(\"cyclonedx-bom\");\n        File bomFile = attachable.getFile();\n        Bom bom = new BomParser().parse(bomFile);\n\n        assertThat(bom.getComponents()).hasSize(30);\n    }", "signature": "void reportWithMavenAndFiles()", "full_signature": "@Test void reportWithMavenAndFiles()", "class_method_signature": "CycloneDXGeneratorTest.reportWithMavenAndFiles()", "testcase": true, "constructor": false, "invocations": ["readIQDataToArtifacts", "produce", "get", "getFile", "parse", "hasSize", "assertThat", "getComponents"]}, "focal_class": {"identifier": "CycloneDXGenerator", "superclass": "extends AbstractGenerator", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CycloneDXGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CycloneDXGenerator.class)", "var_name": "LOG"}], "methods": [{"identifier": "produce", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Map<String, IAttachable>", "signature": "Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "full_signature": "@Override public Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "class_method_signature": "CycloneDXGenerator.produce(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "createTargetFile", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File createTargetFile()", "full_signature": "protected File createTargetFile()", "class_method_signature": "CycloneDXGenerator.createTargetFile()", "testcase": false, "constructor": false}, {"identifier": "doGenerate", "parameters": "(BomGenerator gen, File targetFile)", "modifiers": "private", "return": "void", "signature": "void doGenerate(BomGenerator gen, File targetFile)", "full_signature": "private void doGenerate(BomGenerator gen, File targetFile)", "class_method_signature": "CycloneDXGenerator.doGenerate(BomGenerator gen, File targetFile)", "testcase": false, "constructor": false}, {"identifier": "toComponents", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "private", "return": "List<Component>", "signature": "List<Component> toComponents(Collection<Artifact> artifacts)", "full_signature": "private List<Component> toComponents(Collection<Artifact> artifacts)", "class_method_signature": "CycloneDXGenerator.toComponents(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}], "file": "modules/cyclone-dx/src/main/java/com/eclipse/sw360/antenna/cyclonedx/CycloneDXGenerator.java"}, "focal_method": {"identifier": "produce", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Map<String, IAttachable>", "body": "@Override\n    public Map<String, IAttachable> produce(Collection<Artifact> artifacts) throws ExecutionException {\n        LOG.debug(\"Created a cyclone-dx bill-of-material for {} artifacts\", artifacts.size());\n        List<Component> components = toComponents(artifacts);\n        Bom bom = new Bom();\n        bom.setComponents(components);\n        BomGenerator gen = BomGeneratorFactory.create(CycloneDxSchema.Version.VERSION_11, bom);\n        File targetFile = createTargetFile();\n        doGenerate(gen, targetFile);\n        LOG.debug(\"Bill-of-material created in {}\", targetFile);\n        return Collections.singletonMap(\"cyclonedx-bom\", new Attachable(\"xml\", \"cyclonedx-bom\", targetFile));\n    }", "signature": "Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "full_signature": "@Override public Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "class_method_signature": "CycloneDXGenerator.produce(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["debug", "size", "toComponents", "setComponents", "create", "createTargetFile", "doGenerate", "debug", "singletonMap"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}