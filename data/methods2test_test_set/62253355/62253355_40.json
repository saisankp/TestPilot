{"test_class": {"identifier": "OntologyModelsTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private IRI ontologyIRI;", "modifier": "private", "type": "IRI", "declarator": "ontologyIRI", "var_name": "ontologyIRI"}, {"original_string": "private IRI versionIRI;", "modifier": "private", "type": "IRI", "declarator": "versionIRI", "var_name": "versionIRI"}, {"original_string": "private IRI type;", "modifier": "private", "type": "IRI", "declarator": "type", "var_name": "type"}, {"original_string": "private IRI versionType;", "modifier": "private", "type": "IRI", "declarator": "versionType", "var_name": "versionType"}, {"original_string": "private IRI ontologyObj;", "modifier": "private", "type": "IRI", "declarator": "ontologyObj", "var_name": "ontologyObj"}], "file": "com.mobi.ontology.utils/src/test/java/com/mobi/ontology/utils/OntologyModelsTest.java"}, "test_case": {"identifier": "findFirstVersionIRIMultipleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findFirstVersionIRIMultipleTest() {\n        Model model = mf.createModel();\n        model.add(ontologyIRI, type, ontologyObj);\n        model.add(ontologyIRI, versionType, versionIRI);\n        model.add(ontologyIRI, versionType, vf.createIRI(\"urn:versionIRI2\"));\n        model.add(ontologyIRI, versionType, vf.createIRI(\"urn:versionIRI3\"));\n\n        Optional<IRI> versionIRIOpt = OntologyModels.findFirstVersionIRI(model, ontologyIRI, vf);\n        assertTrue(versionIRIOpt.isPresent());\n        assertTrue(versionIRIOpt.get().equals(versionIRI)\n                || versionIRIOpt.get().equals(vf.createIRI(\"urn:versionIRI2\"))\n                || versionIRIOpt.get().equals(vf.createIRI(\"urn:versionIRI3\")));\n    }", "signature": "void findFirstVersionIRIMultipleTest()", "full_signature": "@Test public void findFirstVersionIRIMultipleTest()", "class_method_signature": "OntologyModelsTest.findFirstVersionIRIMultipleTest()", "testcase": true, "constructor": false, "invocations": ["createModel", "add", "add", "add", "createIRI", "add", "createIRI", "findFirstVersionIRI", "assertTrue", "isPresent", "assertTrue", "equals", "get", "equals", "get", "createIRI", "equals", "get", "createIRI"]}, "focal_class": {"identifier": "OntologyModels", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findFirstOntologyIRI", "parameters": "(Model model, ValueFactory vf)", "modifiers": "public static", "return": "Optional<IRI>", "signature": "Optional<IRI> findFirstOntologyIRI(Model model, ValueFactory vf)", "full_signature": "public static Optional<IRI> findFirstOntologyIRI(Model model, ValueFactory vf)", "class_method_signature": "OntologyModels.findFirstOntologyIRI(Model model, ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "findFirstVersionIRI", "parameters": "(Model model, IRI ontologyIRI, ValueFactory vf)", "modifiers": "public static", "return": "Optional<IRI>", "signature": "Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "full_signature": "public static Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "class_method_signature": "OntologyModels.findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.utils/src/main/java/com/mobi/ontology/utils/OntologyModels.java"}, "focal_method": {"identifier": "findFirstVersionIRI", "parameters": "(Model model, IRI ontologyIRI, ValueFactory vf)", "modifiers": "public static", "return": "Optional<IRI>", "body": "public static Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf) {\n        Optional<Value> optionalValue = Models.findFirstObject(model, ontologyIRI, vf.createIRI(OWL.VERSIONIRI.stringValue()));\n        if (optionalValue.isPresent() && optionalValue.get() instanceof IRI) {\n            return Optional.of((IRI) optionalValue.get());\n        }\n        return Optional.empty();\n    }", "signature": "Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "full_signature": "public static Optional<IRI> findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "class_method_signature": "OntologyModels.findFirstVersionIRI(Model model, IRI ontologyIRI, ValueFactory vf)", "testcase": false, "constructor": false, "invocations": ["findFirstObject", "createIRI", "stringValue", "isPresent", "get", "of", "get", "empty"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}