{"test_class": {"identifier": "ResourcesManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n\tpublic", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}], "file": "core/src/test/java/com/github/swissquote/carnotzet/core/maven/ResourcesManagerTest.java"}, "test_case": {"identifier": "copy_own_resources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void copy_own_resources() throws IOException {\n\t\t// Given\n\t\tURL url = Thread.currentThread().getContextClassLoader().getResource(\"example_copy_own_resources\");\n\t\tFile example = new File(url.getPath());\n\t\tPath resources = temp.newFolder().toPath();\n\t\tFileUtils.copyDirectory(example, resources.toFile());\n\t\tResourcesManager manager = new ResourcesManager(resources, null);\n\t\tList<CarnotzetModule> modules = Arrays.asList(\n\t\t\t\tCarnotzetModule.builder().name(\"service2\").serviceId(\"service2\").build(),\n\t\t\t\tCarnotzetModule.builder().name(\"service1\").serviceId(\"service1\").build()\n\t\t);\n\n\t\t// When\n\t\tmanager.resolveResources(modules);\n\n\t\t// Then\n\t\tassertTrue(resources.resolve(\"resolved/service2/s2\").toFile().exists());\n\t\tassertTrue(resources.resolve(\"resolved/service2/resourcedir/from_service_2\").toFile().exists());\n\t\tassertTrue(resources.resolve(\"resolved/service2/resourcedir/from_service_1\").toFile().exists());\n\t\tassertTrue(resources.resolve(\"resolved/service2/resourcedir2/from_service_1\").toFile().exists());\n\n\t}", "signature": "void copy_own_resources()", "full_signature": "@Test public void copy_own_resources()", "class_method_signature": "ResourcesManagerTest.copy_own_resources()", "testcase": true, "constructor": false, "invocations": ["getResource", "getContextClassLoader", "currentThread", "getPath", "toPath", "newFolder", "copyDirectory", "toFile", "asList", "build", "serviceId", "name", "builder", "build", "serviceId", "name", "builder", "resolveResources", "assertTrue", "exists", "toFile", "resolve", "assertTrue", "exists", "toFile", "resolve", "assertTrue", "exists", "toFile", "resolve", "assertTrue", "exists", "toFile", "resolve"]}, "focal_class": {"identifier": "ResourcesManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int FIND_MAX_DEPTH = 200;", "modifier": "private static final", "type": "int", "declarator": "FIND_MAX_DEPTH = 200", "var_name": "FIND_MAX_DEPTH"}, {"original_string": "@Getter\n\tprivate final Path resourcesRoot;", "modifier": "@Getter\n\tprivate final", "type": "Path", "declarator": "resourcesRoot", "var_name": "resourcesRoot"}, {"original_string": "private final Path expandedJars;", "modifier": "private final", "type": "Path", "declarator": "expandedJars", "var_name": "expandedJars"}, {"original_string": "private final Path resolved;", "modifier": "private final", "type": "Path", "declarator": "resolved", "var_name": "resolved"}, {"original_string": "private final Path topLevelModuleResourcesPath;", "modifier": "private final", "type": "Path", "declarator": "topLevelModuleResourcesPath", "var_name": "topLevelModuleResourcesPath"}, {"original_string": "private final ServiceLoader<FileMerger> fileMergers;", "modifier": "private final", "type": "ServiceLoader<FileMerger>", "declarator": "fileMergers", "var_name": "fileMergers"}], "methods": [{"identifier": "ResourcesManager", "parameters": "(Path resourcesRoot, Path topLevelModuleResourcesPath)", "modifiers": "public", "return": "", "signature": " ResourcesManager(Path resourcesRoot, Path topLevelModuleResourcesPath)", "full_signature": "public  ResourcesManager(Path resourcesRoot, Path topLevelModuleResourcesPath)", "class_method_signature": "ResourcesManager.ResourcesManager(Path resourcesRoot, Path topLevelModuleResourcesPath)", "testcase": false, "constructor": true}, {"identifier": "getResolvedModuleResourcesPath", "parameters": "(CarnotzetModule module)", "modifiers": "public", "return": "Path", "signature": "Path getResolvedModuleResourcesPath(CarnotzetModule module)", "full_signature": "public Path getResolvedModuleResourcesPath(CarnotzetModule module)", "class_method_signature": "ResourcesManager.getResolvedModuleResourcesPath(CarnotzetModule module)", "testcase": false, "constructor": false}, {"identifier": "getOwnModuleResourcesPath", "parameters": "(CarnotzetModule module)", "modifiers": "public", "return": "Path", "signature": "Path getOwnModuleResourcesPath(CarnotzetModule module)", "full_signature": "public Path getOwnModuleResourcesPath(CarnotzetModule module)", "class_method_signature": "ResourcesManager.getOwnModuleResourcesPath(CarnotzetModule module)", "testcase": false, "constructor": false}, {"identifier": "extractResources", "parameters": "(List<CarnotzetModule> modules)", "modifiers": "public", "return": "void", "signature": "void extractResources(List<CarnotzetModule> modules)", "full_signature": "public void extractResources(List<CarnotzetModule> modules)", "class_method_signature": "ResourcesManager.extractResources(List<CarnotzetModule> modules)", "testcase": false, "constructor": false}, {"identifier": "resolveResources", "parameters": "(List<CarnotzetModule> modules)", "modifiers": "public", "return": "void", "signature": "void resolveResources(List<CarnotzetModule> modules)", "full_signature": "public void resolveResources(List<CarnotzetModule> modules)", "class_method_signature": "ResourcesManager.resolveResources(List<CarnotzetModule> modules)", "testcase": false, "constructor": false}, {"identifier": "copyOwnResources", "parameters": "(List<CarnotzetModule> processedModules, CarnotzetModule module)", "modifiers": "private", "return": "void", "signature": "void copyOwnResources(List<CarnotzetModule> processedModules, CarnotzetModule module)", "full_signature": "private void copyOwnResources(List<CarnotzetModule> processedModules, CarnotzetModule module)", "class_method_signature": "ResourcesManager.copyOwnResources(List<CarnotzetModule> processedModules, CarnotzetModule module)", "testcase": false, "constructor": false}, {"identifier": "mergeFiles", "parameters": "(List<CarnotzetModule> processedModules, CarnotzetModule module)", "modifiers": "private", "return": "void", "signature": "void mergeFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "full_signature": "private void mergeFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "class_method_signature": "ResourcesManager.mergeFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "testcase": false, "constructor": false}, {"identifier": "overrideFiles", "parameters": "(List<CarnotzetModule> processedModules, CarnotzetModule module)", "modifiers": "private", "return": "void", "signature": "void overrideFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "full_signature": "private void overrideFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "class_method_signature": "ResourcesManager.overrideFiles(List<CarnotzetModule> processedModules, CarnotzetModule module)", "testcase": false, "constructor": false}, {"identifier": "isPotentialMerge", "parameters": "()", "modifiers": "private", "return": "BiPredicate<Path, BasicFileAttributes>", "signature": "BiPredicate<Path, BasicFileAttributes> isPotentialMerge()", "full_signature": "private BiPredicate<Path, BasicFileAttributes> isPotentialMerge()", "class_method_signature": "ResourcesManager.isPotentialMerge()", "testcase": false, "constructor": false}, {"identifier": "isPotentialOverride", "parameters": "()", "modifiers": "private", "return": "BiPredicate<Path, BasicFileAttributes>", "signature": "BiPredicate<Path, BasicFileAttributes> isPotentialOverride()", "full_signature": "private BiPredicate<Path, BasicFileAttributes> isPotentialOverride()", "class_method_signature": "ResourcesManager.isPotentialOverride()", "testcase": false, "constructor": false}, {"identifier": "isRegularFile", "parameters": "()", "modifiers": "private", "return": "BiPredicate<Path, BasicFileAttributes>", "signature": "BiPredicate<Path, BasicFileAttributes> isRegularFile()", "full_signature": "private BiPredicate<Path, BasicFileAttributes> isRegularFile()", "class_method_signature": "ResourcesManager.isRegularFile()", "testcase": false, "constructor": false}, {"identifier": "nameEndsWithMerge", "parameters": "()", "modifiers": "private", "return": "BiPredicate<Path, BasicFileAttributes>", "signature": "BiPredicate<Path, BasicFileAttributes> nameEndsWithMerge()", "full_signature": "private BiPredicate<Path, BasicFileAttributes> nameEndsWithMerge()", "class_method_signature": "ResourcesManager.nameEndsWithMerge()", "testcase": false, "constructor": false}, {"identifier": "nameMatchesModule", "parameters": "(List<CarnotzetModule> modules)", "modifiers": "private", "return": "BiPredicate<Path, BasicFileAttributes>", "signature": "BiPredicate<Path, BasicFileAttributes> nameMatchesModule(List<CarnotzetModule> modules)", "full_signature": "private BiPredicate<Path, BasicFileAttributes> nameMatchesModule(List<CarnotzetModule> modules)", "class_method_signature": "ResourcesManager.nameMatchesModule(List<CarnotzetModule> modules)", "testcase": false, "constructor": false}, {"identifier": "getFileMerger", "parameters": "(Path file)", "modifiers": "private", "return": "FileMerger", "signature": "FileMerger getFileMerger(Path file)", "full_signature": "private FileMerger getFileMerger(Path file)", "class_method_signature": "ResourcesManager.getFileMerger(Path file)", "testcase": false, "constructor": false}, {"identifier": "copyModuleResources", "parameters": "(CarnotzetModule module, Path moduleResourcesPath)", "modifiers": "private", "return": "void", "signature": "void copyModuleResources(CarnotzetModule module, Path moduleResourcesPath)", "full_signature": "private void copyModuleResources(CarnotzetModule module, Path moduleResourcesPath)", "class_method_signature": "ResourcesManager.copyModuleResources(CarnotzetModule module, Path moduleResourcesPath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/swissquote/carnotzet/core/maven/ResourcesManager.java"}, "focal_method": {"identifier": "resolveResources", "parameters": "(List<CarnotzetModule> modules)", "modifiers": "public", "return": "void", "body": "public void resolveResources(List<CarnotzetModule> modules) {\n\t\ttry {\n\t\t\tlog.debug(\"Resolving resources overrides and merges in [{}]\", resourcesRoot);\n\t\t\tList<CarnotzetModule> processedModules = new ArrayList<>();\n\t\t\tfor (CarnotzetModule module : modules) {\n\t\t\t\tprocessedModules.add(module);\n\t\t\t\tcopyOwnResources(processedModules, module);\n\t\t\t\tmergeFiles(processedModules, module);\n\t\t\t\toverrideFiles(processedModules, module);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new UncheckedIOException(\"Resolve module resources \" + ex, ex);\n\t\t}\n\t}", "signature": "void resolveResources(List<CarnotzetModule> modules)", "full_signature": "public void resolveResources(List<CarnotzetModule> modules)", "class_method_signature": "ResourcesManager.resolveResources(List<CarnotzetModule> modules)", "testcase": false, "constructor": false, "invocations": ["debug", "add", "copyOwnResources", "mergeFiles", "overrideFiles"]}, "repository": {"repo_id": 86467203, "url": "https://github.com/swissquote/carnotzet", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 36, "size": 803, "license": "licensed"}}