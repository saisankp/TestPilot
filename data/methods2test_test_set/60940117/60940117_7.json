{"test_class": {"identifier": "RedisScriptLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@RegisterExtension\n    static RedisStandaloneConnectionSetupExtension extension = new RedisStandaloneConnectionSetupExtension();", "modifier": "@RegisterExtension\n    static", "type": "RedisStandaloneConnectionSetupExtension", "declarator": "extension = new RedisStandaloneConnectionSetupExtension()", "var_name": "extension"}], "file": "ratelimitj-redis/src/test/java/es/moki/ratelimitj/redis/request/RedisScriptLoaderTest.java"}, "test_case": {"identifier": "shouldCache", "parameters": "()", "modifiers": "@Test @DisplayName(\"should cache loaded sha\")", "return": "void", "body": "@Test\n    @DisplayName(\"should cache loaded sha\")\n    void shouldCache() {\n        RedisScriptLoader scriptLoader = new RedisScriptLoader(extension.getScriptingReactiveCommands(), \"hello-world.lua\");\n\n        assertThat(scriptLoader.storedScript().block(Duration.ofSeconds(5)).getSha()).isNotEmpty();\n\n        scriptFlush();\n\n        assertThat(scriptLoader.storedScript().block(Duration.ofSeconds(5)).getSha()).isNotEmpty();\n    }", "signature": "void shouldCache()", "full_signature": "@Test @DisplayName(\"should cache loaded sha\") void shouldCache()", "class_method_signature": "RedisScriptLoaderTest.shouldCache()", "testcase": true, "constructor": false, "invocations": ["getScriptingReactiveCommands", "isNotEmpty", "assertThat", "getSha", "block", "storedScript", "ofSeconds", "scriptFlush", "isNotEmpty", "assertThat", "getSha", "block", "storedScript", "ofSeconds"]}, "focal_class": {"identifier": "RedisScriptLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RedisScriptLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RedisScriptLoader.class)", "var_name": "LOG"}, {"original_string": "private final RedisScriptingReactiveCommands<String, String> redisScriptingCommands;", "modifier": "private final", "type": "RedisScriptingReactiveCommands<String, String>", "declarator": "redisScriptingCommands", "var_name": "redisScriptingCommands"}, {"original_string": "private final String scriptUri;", "modifier": "private final", "type": "String", "declarator": "scriptUri", "var_name": "scriptUri"}, {"original_string": "private final AtomicReference<Flux<String>> storedScript;", "modifier": "private final", "type": "AtomicReference<Flux<String>>", "declarator": "storedScript", "var_name": "storedScript"}], "methods": [{"identifier": "RedisScriptLoader", "parameters": "(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri)", "modifiers": "public", "return": "", "signature": " RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri)", "full_signature": "public  RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri)", "class_method_signature": "RedisScriptLoader.RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri)", "testcase": false, "constructor": true}, {"identifier": "RedisScriptLoader", "parameters": "(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri, boolean eagerLoad)", "modifiers": "public", "return": "", "signature": " RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri, boolean eagerLoad)", "full_signature": "public  RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri, boolean eagerLoad)", "class_method_signature": "RedisScriptLoader.RedisScriptLoader(RedisScriptingReactiveCommands<String, String> redisScriptingCommands, String scriptUri, boolean eagerLoad)", "testcase": false, "constructor": true}, {"identifier": "storedScript", "parameters": "()", "modifiers": "", "return": "Mono<StoredScript>", "signature": "Mono<StoredScript> storedScript()", "full_signature": " Mono<StoredScript> storedScript()", "class_method_signature": "RedisScriptLoader.storedScript()", "testcase": false, "constructor": false}, {"identifier": "loadScript", "parameters": "()", "modifiers": "@SuppressWarnings(\"PreferJavaTimeOverload\") private", "return": "Flux<String>", "signature": "Flux<String> loadScript()", "full_signature": "@SuppressWarnings(\"PreferJavaTimeOverload\") private Flux<String> loadScript()", "class_method_signature": "RedisScriptLoader.loadScript()", "testcase": false, "constructor": false}, {"identifier": "readScriptFile", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readScriptFile()", "full_signature": "private String readScriptFile()", "class_method_signature": "RedisScriptLoader.readScriptFile()", "testcase": false, "constructor": false}], "file": "ratelimitj-redis/src/main/java/es/moki/ratelimitj/redis/request/RedisScriptLoader.java"}, "focal_method": {"identifier": "storedScript", "parameters": "()", "modifiers": "", "return": "Mono<StoredScript>", "body": "Mono<StoredScript> storedScript() {\n        return Mono.defer(() -> {\n            Flux<String> source = this.storedScript.get();\n            return source.next().map(sha -> new StoredScript(sha, source));\n        });\n    }", "signature": "Mono<StoredScript> storedScript()", "full_signature": " Mono<StoredScript> storedScript()", "class_method_signature": "RedisScriptLoader.storedScript()", "testcase": false, "constructor": false, "invocations": ["defer", "get", "map", "next"]}, "repository": {"repo_id": 60940117, "url": "https://github.com/mokies/ratelimitj", "stars": 284, "created": "6/12/2016 3:27:46 AM +00:00", "updates": "2020-01-21T19:53:03+00:00", "fork": "False", "license": "licensed"}}