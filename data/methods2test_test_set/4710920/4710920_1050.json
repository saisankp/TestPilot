{"test_class": {"identifier": "AbstractMonitorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MonitorFactory monitorFactory = new AbstractMonitorFactory() {\n\n        protected Monitor createMonitor(final URL url) {\n            return new Monitor() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return true;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                public void collect(URL statistics) {\n                }\n\n                public List<URL> lookup(URL query) {\n                    return null;\n                }\n\n            };\n        }\n    };", "modifier": "private", "type": "MonitorFactory", "declarator": "monitorFactory = new AbstractMonitorFactory() {\n\n        protected Monitor createMonitor(final URL url) {\n            return new Monitor() {\n\n                public URL getUrl() {\n                    return url;\n                }\n\n                @Override\n                public boolean isAvailable() {\n                    return true;\n                }\n\n                @Override\n                public void destroy() {\n                }\n\n                public void collect(URL statistics) {\n                }\n\n                public List<URL> lookup(URL query) {\n                    return null;\n                }\n\n            };\n        }\n    }", "var_name": "monitorFactory"}], "file": "dubbo-monitor/dubbo-monitor-api/src/test/java/org/apache/dubbo/monitor/support/AbstractMonitorFactoryTest.java"}, "test_case": {"identifier": "testMonitorFactoryGroupCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMonitorFactoryGroupCache() throws Exception {\n        URL url1 = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":2233?group=aaa\");\n        URL url2 = URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":2233?group=bbb\");\n        Monitor monitor1 = monitorFactory.getMonitor(url1);\n        Monitor monitor2 = monitorFactory.getMonitor(url2);\n        if (monitor1 == null || monitor2 == null) {\n            Thread.sleep(2000);\n            monitor1 = monitorFactory.getMonitor(url1);\n            monitor2 = monitorFactory.getMonitor(url2);\n        }\n        Assertions.assertNotSame(monitor1, monitor2);\n    }", "signature": "void testMonitorFactoryGroupCache()", "full_signature": "@Test public void testMonitorFactoryGroupCache()", "class_method_signature": "AbstractMonitorFactoryTest.testMonitorFactoryGroupCache()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getLocalHost", "valueOf", "getLocalHost", "getMonitor", "getMonitor", "sleep", "getMonitor", "getMonitor", "assertNotSame"]}, "focal_class": {"identifier": "AbstractMonitorFactory", "superclass": "", "interfaces": "implements MonitorFactory", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AbstractMonitorFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbstractMonitorFactory.class)", "var_name": "logger"}, {"original_string": "private static final ReentrantLock LOCK = new ReentrantLock();", "modifier": "private static final", "type": "ReentrantLock", "declarator": "LOCK = new ReentrantLock()", "var_name": "LOCK"}, {"original_string": "private static final Map<String, Monitor> MONITORS = new ConcurrentHashMap<String, Monitor>();", "modifier": "private static final", "type": "Map<String, Monitor>", "declarator": "MONITORS = new ConcurrentHashMap<String, Monitor>()", "var_name": "MONITORS"}, {"original_string": "private static final Map<String, CompletableFuture<Monitor>> FUTURES = new ConcurrentHashMap<String, CompletableFuture<Monitor>>();", "modifier": "private static final", "type": "Map<String, CompletableFuture<Monitor>>", "declarator": "FUTURES = new ConcurrentHashMap<String, CompletableFuture<Monitor>>()", "var_name": "FUTURES"}, {"original_string": "private static final ExecutorService EXECUTOR = new ThreadPoolExecutor(0, 10, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new NamedThreadFactory(\"DubboMonitorCreator\", true));", "modifier": "private static final", "type": "ExecutorService", "declarator": "EXECUTOR = new ThreadPoolExecutor(0, 10, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new NamedThreadFactory(\"DubboMonitorCreator\", true))", "var_name": "EXECUTOR"}], "methods": [{"identifier": "getMonitors", "parameters": "()", "modifiers": "public static", "return": "Collection<Monitor>", "signature": "Collection<Monitor> getMonitors()", "full_signature": "public static Collection<Monitor> getMonitors()", "class_method_signature": "AbstractMonitorFactory.getMonitors()", "testcase": false, "constructor": false}, {"identifier": "getMonitor", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Monitor", "signature": "Monitor getMonitor(URL url)", "full_signature": "@Override public Monitor getMonitor(URL url)", "class_method_signature": "AbstractMonitorFactory.getMonitor(URL url)", "testcase": false, "constructor": false}, {"identifier": "createMonitor", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "Monitor", "signature": "Monitor createMonitor(URL url)", "full_signature": "protected abstract Monitor createMonitor(URL url)", "class_method_signature": "AbstractMonitorFactory.createMonitor(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-monitor/dubbo-monitor-api/src/main/java/org/apache/dubbo/monitor/support/AbstractMonitorFactory.java"}, "focal_method": {"identifier": "getMonitor", "parameters": "(URL url)", "modifiers": "@Override public", "return": "Monitor", "body": "@Override\n    public Monitor getMonitor(URL url) {\n        url = url.setPath(MonitorService.class.getName()).addParameter(INTERFACE_KEY, MonitorService.class.getName());\n        String key = url.toServiceStringWithoutResolving();\n        Monitor monitor = MONITORS.get(key);\n        Future<Monitor> future = FUTURES.get(key);\n        if (monitor != null || future != null) {\n            return monitor;\n        }\n\n        LOCK.lock();\n        try {\n            monitor = MONITORS.get(key);\n            future = FUTURES.get(key);\n            if (monitor != null || future != null) {\n                return monitor;\n            }\n\n            final URL monitorUrl = url;\n            final CompletableFuture<Monitor> completableFuture = CompletableFuture.supplyAsync(() -> AbstractMonitorFactory.this.createMonitor(monitorUrl));\n            FUTURES.put(key, completableFuture);\n            completableFuture.thenRunAsync(new MonitorListener(key), EXECUTOR);\n\n            return null;\n        } finally {\n            // unlock\n            LOCK.unlock();\n        }\n    }", "signature": "Monitor getMonitor(URL url)", "full_signature": "@Override public Monitor getMonitor(URL url)", "class_method_signature": "AbstractMonitorFactory.getMonitor(URL url)", "testcase": false, "constructor": false, "invocations": ["addParameter", "setPath", "getName", "getName", "toServiceStringWithoutResolving", "get", "get", "lock", "get", "get", "supplyAsync", "createMonitor", "put", "thenRunAsync", "unlock"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}