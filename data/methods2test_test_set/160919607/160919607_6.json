{"test_class": {"identifier": "RequestFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "networkproxy/src/test/java/com/rain/networkproxy/model/RequestFilterTest.java"}, "test_case": {"identifier": "isMatch_againstMultipleRules", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isMatch_againstMultipleRules() {\n        RequestFilter requestFilter = new RequestFilter(Arrays.asList(\n                \"/todos\",\n                \"/todos/*\",\n                \"/todos/*/comments/*\",\n                \"/todos/*/comments/*/users\"\n        ));\n        assertTrue(requestFilter.isMatch(\"https://www.test.com/todos/1\"));\n        assertTrue(requestFilter.isMatch(\"https://www.test.com/todos/1/\"));\n        assertTrue(requestFilter.isMatch(\"/todos/1/\"));\n        assertTrue(requestFilter.isMatch(\"todos/1/\"));\n        assertTrue(requestFilter.isMatch(\"www.test.com/todos\"));\n        assertTrue(requestFilter.isMatch(\"www.test.com/todos/\"));\n        assertTrue(requestFilter.isMatch(\"todos?query=1\"));\n        assertFalse(requestFilter.isMatch(\"https://www.test.com/todos/1/comments\"));\n        assertFalse(requestFilter.isMatch(\"https://www.test.com/todos/1/comments/\"));\n        assertTrue(requestFilter.isMatch(\"/todos/1/comments/1\"));\n        assertTrue(requestFilter.isMatch(\"/todos/1/comments/1/\"));\n        assertTrue(requestFilter.isMatch(\"https://www.test.com/todos/1/comments/1/users\"));\n        assertTrue(requestFilter.isMatch(\"https://www.test.com/todos/1/comments/1/users/\"));\n        assertFalse(requestFilter.isMatch(\"https://www.test.com/todos/1/comments/1/users/20\"));\n        assertFalse(requestFilter.isMatch(\"https://www.test.com/todos/1/comments/1/users/20/\"));\n        assertFalse(requestFilter.isMatch(\"/comments\"));\n    }", "signature": "void isMatch_againstMultipleRules()", "full_signature": "@Test public void isMatch_againstMultipleRules()", "class_method_signature": "RequestFilterTest.isMatch_againstMultipleRules()", "testcase": true, "constructor": false, "invocations": ["asList", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertFalse", "isMatch", "assertFalse", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertTrue", "isMatch", "assertFalse", "isMatch", "assertFalse", "isMatch", "assertFalse", "isMatch"]}, "focal_class": {"identifier": "RequestFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SerializedName(\"rules\")\n    private final List<String> rules;", "modifier": "@SerializedName(\"rules\")\n    private final", "type": "List<String>", "declarator": "rules", "var_name": "rules"}, {"original_string": "@SerializedName(\"regex\")\n    private final List<String> regex;", "modifier": "@SerializedName(\"regex\")\n    private final", "type": "List<String>", "declarator": "regex", "var_name": "regex"}], "methods": [{"identifier": "RequestFilter", "parameters": "(@NonNull List<String> rules)", "modifiers": "public", "return": "", "signature": " RequestFilter(@NonNull List<String> rules)", "full_signature": "public  RequestFilter(@NonNull List<String> rules)", "class_method_signature": "RequestFilter.RequestFilter(@NonNull List<String> rules)", "testcase": false, "constructor": true}, {"identifier": "constructRegex", "parameters": "(List<String> rules)", "modifiers": "private", "return": "List<String>", "signature": "List<String> constructRegex(List<String> rules)", "full_signature": "private List<String> constructRegex(List<String> rules)", "class_method_signature": "RequestFilter.constructRegex(List<String> rules)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(@NonNull String url)", "modifiers": "public", "return": "boolean", "signature": "boolean isMatch(@NonNull String url)", "full_signature": "public boolean isMatch(@NonNull String url)", "class_method_signature": "RequestFilter.isMatch(@NonNull String url)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RequestFilter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RequestFilter.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestFilter.toString()", "testcase": false, "constructor": false}], "file": "networkproxy/src/main/java/com/rain/networkproxy/model/RequestFilter.java"}, "focal_method": {"identifier": "isMatch", "parameters": "(@NonNull String url)", "modifiers": "public", "return": "boolean", "body": "public boolean isMatch(@NonNull String url) {\n        for (String r : regex) {\n            String trimUrl = url.split(\"\\\\?\")[0];\n            if (!trimUrl.endsWith(\"/\")) {\n                trimUrl = trimUrl + \"/\";\n            }\n            if (trimUrl.matches(r)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean isMatch(@NonNull String url)", "full_signature": "public boolean isMatch(@NonNull String url)", "class_method_signature": "RequestFilter.isMatch(@NonNull String url)", "testcase": false, "constructor": false, "invocations": ["split", "endsWith", "matches"]}, "repository": {"repo_id": 160919607, "url": "https://github.com/nongdenchet/NetworkProxy", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 21, "size": 4469, "license": "licensed"}}