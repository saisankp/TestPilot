{"test_class": {"identifier": "RxJavaComputationSchedulerSensorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long PROBING_INTERVAL_MS = 10;", "modifier": "private static final", "type": "long", "declarator": "PROBING_INTERVAL_MS = 10", "var_name": "PROBING_INTERVAL_MS"}, {"original_string": "private static final long PROGRESS_CHECK_INTERVAL_MS = 10;", "modifier": "private static final", "type": "long", "declarator": "PROGRESS_CHECK_INTERVAL_MS = 10", "var_name": "PROGRESS_CHECK_INTERVAL_MS"}, {"original_string": "private final HiccupRecorderConfiguration configuration = mock(HiccupRecorderConfiguration.class);", "modifier": "private final", "type": "HiccupRecorderConfiguration", "declarator": "configuration = mock(HiccupRecorderConfiguration.class)", "var_name": "configuration"}, {"original_string": "private RxJavaComputationSchedulerSensor sensor;", "modifier": "private", "type": "RxJavaComputationSchedulerSensor", "declarator": "sensor", "var_name": "sensor"}, {"original_string": "private final AtomicReference<StackTraceElement[]> blockedThreadRef = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<StackTraceElement[]>", "declarator": "blockedThreadRef = new AtomicReference<>()", "var_name": "blockedThreadRef"}], "file": "titus-common/src/test/java/com/netflix/titus/common/jhiccup/sensor/RxJavaComputationSchedulerSensorTest.java"}, "test_case": {"identifier": "testExpectedNumberOfComputationThreadsIsDetected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpectedNumberOfComputationThreadsIsDetected() {\n        assertThat(sensor.getLastPercentile(99.5).keySet()).hasSize(Runtime.getRuntime().availableProcessors());\n    }", "signature": "void testExpectedNumberOfComputationThreadsIsDetected()", "full_signature": "@Test public void testExpectedNumberOfComputationThreadsIsDetected()", "class_method_signature": "RxJavaComputationSchedulerSensorTest.testExpectedNumberOfComputationThreadsIsDetected()", "testcase": true, "constructor": false, "invocations": ["hasSize", "assertThat", "keySet", "getLastPercentile", "availableProcessors", "getRuntime"]}, "focal_class": {"identifier": "RxJavaComputationSchedulerSensor", "superclass": "extends AbstractHiccupSensor", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RxJavaComputationSchedulerSensor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RxJavaComputationSchedulerSensor.class)", "var_name": "logger"}, {"original_string": "private static final long MAX_INIT_PROCESSING_WAIT_TIME_MS = 5000;", "modifier": "private static final", "type": "long", "declarator": "MAX_INIT_PROCESSING_WAIT_TIME_MS = 5000", "var_name": "MAX_INIT_PROCESSING_WAIT_TIME_MS"}, {"original_string": "private static final int MAX_LOOP_COUNT = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_LOOP_COUNT = 100", "var_name": "MAX_LOOP_COUNT"}, {"original_string": "private static final long DEFAULT_PROBING_INTERVAL_MS = 20;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_PROBING_INTERVAL_MS = 20", "var_name": "DEFAULT_PROBING_INTERVAL_MS"}, {"original_string": "private static final long DEFAULT_PROGRESS_CHECK_INTERVAL_MS = 20;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_PROGRESS_CHECK_INTERVAL_MS = 20", "var_name": "DEFAULT_PROGRESS_CHECK_INTERVAL_MS"}, {"original_string": "private static final long LOWEST_TRACKABLE_VALUE = 20000;", "modifier": "private static final", "type": "long", "declarator": "LOWEST_TRACKABLE_VALUE = 20000", "var_name": "LOWEST_TRACKABLE_VALUE"}, {"original_string": "private static final long HIGHEST_TRACKABLE_VALUE = 3600000000000L;", "modifier": "private static final", "type": "long", "declarator": "HIGHEST_TRACKABLE_VALUE = 3600000000000L", "var_name": "HIGHEST_TRACKABLE_VALUE"}, {"original_string": "private static final int NUMBER_OF_SIGNIFICANT_DIGITS = 2;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_SIGNIFICANT_DIGITS = 2", "var_name": "NUMBER_OF_SIGNIFICANT_DIGITS"}, {"original_string": "private final List<WorkerTaskScheduler> workerTaskSchedulers;", "modifier": "private final", "type": "List<WorkerTaskScheduler>", "declarator": "workerTaskSchedulers", "var_name": "workerTaskSchedulers"}, {"original_string": "private final WorkerObserver workersObserver;", "modifier": "private final", "type": "WorkerObserver", "declarator": "workersObserver", "var_name": "workersObserver"}, {"original_string": "private final long probingIntervalNs;", "modifier": "private final", "type": "long", "declarator": "probingIntervalNs", "var_name": "probingIntervalNs"}, {"original_string": "private final long progressCheckIntervalMs;", "modifier": "private final", "type": "long", "declarator": "progressCheckIntervalMs", "var_name": "progressCheckIntervalMs"}, {"original_string": "private volatile boolean doRun = true;", "modifier": "private volatile", "type": "boolean", "declarator": "doRun = true", "var_name": "doRun"}], "methods": [{"identifier": "RxJavaComputationSchedulerSensor", "parameters": "(HiccupRecorderConfiguration configuration,\n                                     long probingIntervalMs,\n                                     long progressCheckIntervalMs,\n                                     Registry registry)", "modifiers": "@VisibleForTesting", "return": "", "signature": " RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration,\n                                     long probingIntervalMs,\n                                     long progressCheckIntervalMs,\n                                     Registry registry)", "full_signature": "@VisibleForTesting  RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration,\n                                     long probingIntervalMs,\n                                     long progressCheckIntervalMs,\n                                     Registry registry)", "class_method_signature": "RxJavaComputationSchedulerSensor.RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration,\n                                     long probingIntervalMs,\n                                     long progressCheckIntervalMs,\n                                     Registry registry)", "testcase": false, "constructor": true}, {"identifier": "RxJavaComputationSchedulerSensor", "parameters": "(HiccupRecorderConfiguration configuration, Registry registry)", "modifiers": "public", "return": "", "signature": " RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration, Registry registry)", "full_signature": "public  RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration, Registry registry)", "class_method_signature": "RxJavaComputationSchedulerSensor.RxJavaComputationSchedulerSensor(HiccupRecorderConfiguration configuration, Registry registry)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "RxJavaComputationSchedulerSensor.reset()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "RxJavaComputationSchedulerSensor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void report()", "full_signature": "public void report()", "class_method_signature": "RxJavaComputationSchedulerSensor.report()", "testcase": false, "constructor": false}, {"identifier": "reportBlockedThread", "parameters": "(Thread blockedThread)", "modifiers": "protected", "return": "void", "signature": "void reportBlockedThread(Thread blockedThread)", "full_signature": "protected void reportBlockedThread(Thread blockedThread)", "class_method_signature": "RxJavaComputationSchedulerSensor.reportBlockedThread(Thread blockedThread)", "testcase": false, "constructor": false}, {"identifier": "getLastPercentile", "parameters": "(double percentile)", "modifiers": "@VisibleForTesting", "return": "Map<String, Long>", "signature": "Map<String, Long> getLastPercentile(double percentile)", "full_signature": "@VisibleForTesting Map<String, Long> getLastPercentile(double percentile)", "class_method_signature": "RxJavaComputationSchedulerSensor.getLastPercentile(double percentile)", "testcase": false, "constructor": false}, {"identifier": "findComputationSchedulerWorkers", "parameters": "()", "modifiers": "private", "return": "List<WorkerTaskScheduler>", "signature": "List<WorkerTaskScheduler> findComputationSchedulerWorkers()", "full_signature": "private List<WorkerTaskScheduler> findComputationSchedulerWorkers()", "class_method_signature": "RxJavaComputationSchedulerSensor.findComputationSchedulerWorkers()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/jhiccup/sensor/RxJavaComputationSchedulerSensor.java"}, "focal_method": {"identifier": "getLastPercentile", "parameters": "(double percentile)", "modifiers": "@VisibleForTesting", "return": "Map<String, Long>", "body": "@VisibleForTesting\n    Map<String, Long> getLastPercentile(double percentile) {\n        Map<String, Long> result = new HashMap<>();\n        workerTaskSchedulers.forEach(w -> {\n            result.put(w.getThreadName(), (long) w.report(percentile));\n        });\n        return result;\n    }", "signature": "Map<String, Long> getLastPercentile(double percentile)", "full_signature": "@VisibleForTesting Map<String, Long> getLastPercentile(double percentile)", "class_method_signature": "RxJavaComputationSchedulerSensor.getLastPercentile(double percentile)", "testcase": false, "constructor": false, "invocations": ["forEach", "put", "getThreadName", "report"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}