{"test_class": {"identifier": "GiniImpurityMeasureTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureTest.java"}, "test_case": {"identifier": "testSubtract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubtract() {\n        Random rnd = new Random(0);\n\n        GiniImpurityMeasure a = new GiniImpurityMeasure(\n            new long[]{randCnt(rnd), randCnt(rnd), randCnt(rnd)},\n            new long[]{randCnt(rnd), randCnt(rnd), randCnt(rnd)}\n        );\n\n        GiniImpurityMeasure b = new GiniImpurityMeasure(\n            new long[]{randCnt(rnd), randCnt(rnd), randCnt(rnd)},\n            new long[]{randCnt(rnd), randCnt(rnd), randCnt(rnd)}\n        );\n\n        GiniImpurityMeasure c = a.subtract(b);\n\n        assertEquals(a.getLeft()[0] - b.getLeft()[0], c.getLeft()[0]);\n        assertEquals(a.getLeft()[1] - b.getLeft()[1], c.getLeft()[1]);\n        assertEquals(a.getLeft()[2] - b.getLeft()[2], c.getLeft()[2]);\n\n        assertEquals(a.getRight()[0] - b.getRight()[0], c.getRight()[0]);\n        assertEquals(a.getRight()[1] - b.getRight()[1], c.getRight()[1]);\n        assertEquals(a.getRight()[2] - b.getRight()[2], c.getRight()[2]);\n    }", "signature": "void testSubtract()", "full_signature": "@Test public void testSubtract()", "class_method_signature": "GiniImpurityMeasureTest.testSubtract()", "testcase": true, "constructor": false, "invocations": ["randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "randCnt", "subtract", "assertEquals", "getLeft", "getLeft", "getLeft", "assertEquals", "getLeft", "getLeft", "getLeft", "assertEquals", "getLeft", "getLeft", "getLeft", "assertEquals", "getRight", "getRight", "getRight", "assertEquals", "getRight", "getRight", "getRight", "assertEquals", "getRight", "getRight", "getRight"]}, "focal_class": {"identifier": "GiniImpurityMeasure", "superclass": "", "interfaces": "implements ImpurityMeasure<GiniImpurityMeasure>", "fields": [{"original_string": "private static final long serialVersionUID = 5338129703395229970L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5338129703395229970L", "var_name": "serialVersionUID"}, {"original_string": "private final long[] left;", "modifier": "private final", "type": "long[]", "declarator": "left", "var_name": "left"}, {"original_string": "private final long[] right;", "modifier": "private final", "type": "long[]", "declarator": "right", "var_name": "right"}], "methods": [{"identifier": "GiniImpurityMeasure", "parameters": "(long[] left, long[] right)", "modifiers": "", "return": "", "signature": " GiniImpurityMeasure(long[] left, long[] right)", "full_signature": "  GiniImpurityMeasure(long[] left, long[] right)", "class_method_signature": "GiniImpurityMeasure.GiniImpurityMeasure(long[] left, long[] right)", "testcase": false, "constructor": true}, {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "GiniImpurityMeasure.impurity()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(GiniImpurityMeasure b)", "modifiers": "@Override public", "return": "GiniImpurityMeasure", "signature": "GiniImpurityMeasure add(GiniImpurityMeasure b)", "full_signature": "@Override public GiniImpurityMeasure add(GiniImpurityMeasure b)", "class_method_signature": "GiniImpurityMeasure.add(GiniImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(GiniImpurityMeasure b)", "modifiers": "@Override public", "return": "GiniImpurityMeasure", "signature": "GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "full_signature": "@Override public GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "class_method_signature": "GiniImpurityMeasure.subtract(GiniImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "getLeft", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getLeft()", "full_signature": "public long[] getLeft()", "class_method_signature": "GiniImpurityMeasure.getLeft()", "testcase": false, "constructor": false}, {"identifier": "getRight", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getRight()", "full_signature": "public long[] getRight()", "class_method_signature": "GiniImpurityMeasure.getRight()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasure.java"}, "focal_method": {"identifier": "subtract", "parameters": "(GiniImpurityMeasure b)", "modifiers": "@Override public", "return": "GiniImpurityMeasure", "body": "@Override public GiniImpurityMeasure subtract(GiniImpurityMeasure b) {\n        assert left.length == b.left.length : \"Subtracted measure has to have length \" + left.length;\n        assert left.length == b.right.length : \"Subtracted measure has to have length \" + left.length;\n\n        long[] leftRes = new long[left.length];\n        long[] rightRes = new long[left.length];\n\n        for (int i = 0; i < left.length; i++) {\n            leftRes[i] = left[i] - b.left[i];\n            rightRes[i] = right[i] - b.right[i];\n        }\n\n        return new GiniImpurityMeasure(leftRes, rightRes);\n    }", "signature": "GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "full_signature": "@Override public GiniImpurityMeasure subtract(GiniImpurityMeasure b)", "class_method_signature": "GiniImpurityMeasure.subtract(GiniImpurityMeasure b)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}