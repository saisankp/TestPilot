{"test_class": {"identifier": "GuidedDTDRLPersistenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistenceTest.java"}, "test_case": {"identifier": "testCellCSV", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCellCSV() {\n        GuidedDTDRLPersistence p = new GuidedDTDRLPersistence();\n        assertEquals(\"(\\\"Helsinki, Finland\\\", \\\"Boston\\\")\",\n                     p.makeInList(\"\\\"Helsinki, Finland\\\",Boston\"));\n        assertEquals(\"(\\\"Michael\\\", \\\"Mark\\\", \\\"Peter\\\")\",\n                     p.makeInList(\"Michael, Mark, Peter\"));\n        assertEquals(\"(\\\"Michael\\\")\",\n                     p.makeInList(\"Michael\"));\n        assertEquals(\"(\\\"Michael\\\")\",\n                     p.makeInList(\"\\\"Michael\\\"\"));\n        assertEquals(\"(\\\"Michael\\\", \\\"Ma rk\\\", \\\"Peter\\\")\",\n                     p.makeInList(\"Michael, \\\"Ma rk\\\", Peter\"));\n        assertEquals(\"(WEE WAAH)\",\n                     p.makeInList(\"(WEE WAAH)\"));\n    }", "signature": "void testCellCSV()", "full_signature": "@Test public void testCellCSV()", "class_method_signature": "GuidedDTDRLPersistenceTest.testCellCSV()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "makeInList", "assertEquals", "makeInList", "assertEquals", "makeInList", "assertEquals", "makeInList", "assertEquals", "makeInList", "assertEquals", "makeInList"]}, "focal_class": {"identifier": "GuidedDTDRLPersistence", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "GuidedDTDRLPersistence", "signature": "GuidedDTDRLPersistence getInstance()", "full_signature": "public static GuidedDTDRLPersistence getInstance()", "class_method_signature": "GuidedDTDRLPersistence.getInstance()", "testcase": false, "constructor": false}, {"identifier": "marshal", "parameters": "(final GuidedDecisionTable52 originalDTable)", "modifiers": "public", "return": "String", "signature": "String marshal(final GuidedDecisionTable52 originalDTable)", "full_signature": "public String marshal(final GuidedDecisionTable52 originalDTable)", "class_method_signature": "GuidedDTDRLPersistence.marshal(final GuidedDecisionTable52 originalDTable)", "testcase": false, "constructor": false}, {"identifier": "doActions", "parameters": "(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doActions(List<BaseColumn> allColumns,\n                   List<ActionCol52> actionCols,\n                   TemplateDataProvider rowDataProvider,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          LimitedEntryBRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "full_signature": "private void doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<BaseColumn> allColumns,\n                          BRLActionColumn column,\n                          List<LabelledAction> actions,\n                          TemplateDataProvider rowDataProvider,\n                          List<DTCellValue52> row,\n                          RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLActionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLActionColumn column)", "full_signature": "private boolean hasVariables(BRLActionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLActionColumn column)", "testcase": false, "constructor": false}, {"identifier": "addAction", "parameters": "(IAction action,\n                           List<LabelledAction> actions)", "modifiers": "private", "return": "void", "signature": "void addAction(IAction action,\n                           List<LabelledAction> actions)", "full_signature": "private void addAction(IAction action,\n                           List<LabelledAction> actions)", "class_method_signature": "GuidedDTDRLPersistence.addAction(IAction action,\n                           List<LabelledAction> actions)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionInsertFactCol52 ac,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionSetFieldCol52 sf,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "modifiers": "private", "return": "void", "signature": "void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "full_signature": "private void doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "class_method_signature": "GuidedDTDRLPersistence.doAction(List<LabelledAction> actions,\n                          ActionWorkItemCol52 wi,\n                          String cell)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName)", "testcase": false, "constructor": false}, {"identifier": "findByLabelledAction", "parameters": "(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "modifiers": "private", "return": "LabelledAction", "signature": "LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "full_signature": "private LabelledAction findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "class_method_signature": "GuidedDTDRLPersistence.findByLabelledAction(List<LabelledAction> actions,\n                                                String boundName,\n                                                boolean isUpdate)", "testcase": false, "constructor": false}, {"identifier": "doConditions", "parameters": "(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "full_signature": " void doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doConditions(List<BaseColumn> allColumns,\n                      List<CompositeColumn<? extends BaseColumn>> conditionPatterns,\n                      TemplateDataProvider rowDataProvider,\n                      List<DTCellValue52> row,\n                      List<List<DTCellValue52>> data,\n                      RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             LimitedEntryBRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             BRLConditionColumn column,\n                             List<IPattern> patterns,\n                             TemplateDataProvider rowDataProvider,\n                             List<DTCellValue52> row,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "hasVariables", "parameters": "(BRLConditionColumn column)", "modifiers": "private", "return": "boolean", "signature": "boolean hasVariables(BRLConditionColumn column)", "full_signature": "private boolean hasVariables(BRLConditionColumn column)", "class_method_signature": "GuidedDTDRLPersistence.hasVariables(BRLConditionColumn column)", "testcase": false, "constructor": false}, {"identifier": "doCondition", "parameters": "(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "modifiers": "private", "return": "void", "signature": "void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "full_signature": "private void doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doCondition(List<BaseColumn> allColumns,\n                             Pattern52 pattern,\n                             List<IPattern> patterns,\n                             List<DTCellValue52> row,\n                             List<List<DTCellValue52>> data,\n                             RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "makeInList", "parameters": "(final String cell)", "modifiers": "", "return": "String", "signature": "String makeInList(final String cell)", "full_signature": " String makeInList(final String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeInList(final String cell)", "testcase": false, "constructor": false}, {"identifier": "no", "parameters": "(String operator)", "modifiers": "private", "return": "boolean", "signature": "boolean no(String operator)", "full_signature": "private boolean no(String operator)", "class_method_signature": "GuidedDTDRLPersistence.no(String operator)", "testcase": false, "constructor": false}, {"identifier": "findByFactPattern", "parameters": "(List<IPattern> patterns,\n                                       Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "full_signature": "private IPattern findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.findByFactPattern(List<IPattern> patterns,\n                                       Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByFactPattern", "parameters": "(final List<IPattern> patterns,\n                                         final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "full_signature": "private IPattern doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByFactPattern(final List<IPattern> patterns,\n                                         final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "doFindByNegatedFactPattern", "parameters": "(final List<IPattern> patterns,\n                                                final Pattern52 find)", "modifiers": "private", "return": "IPattern", "signature": "IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "full_signature": "private IPattern doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "class_method_signature": "GuidedDTDRLPersistence.doFindByNegatedFactPattern(final List<IPattern> patterns,\n                                                final Pattern52 find)", "testcase": false, "constructor": false}, {"identifier": "checkNegatedFactPattern", "parameters": "(final FactPattern fp,\n                                                       final String factType)", "modifiers": "private", "return": "Optional<IPattern>", "signature": "Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "full_signature": "private Optional<IPattern> checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "class_method_signature": "GuidedDTDRLPersistence.checkNegatedFactPattern(final FactPattern fp,\n                                                       final String factType)", "testcase": false, "constructor": false}, {"identifier": "doAttribs", "parameters": "(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "full_signature": " void doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doAttribs(List<BaseColumn> allColumns,\n                   List<AttributeCol52> attributeCols,\n                   List<DTCellValue52> row,\n                   RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "doMetadata", "parameters": "(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "modifiers": "", "return": "void", "signature": "void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "full_signature": " void doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "class_method_signature": "GuidedDTDRLPersistence.doMetadata(List<BaseColumn> allColumns,\n                    List<MetadataCol52> metadataCols,\n                    List<DTCellValue52> row,\n                    RuleModel rm)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "modifiers": "", "return": "String", "signature": "String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "full_signature": " String getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "class_method_signature": "GuidedDTDRLPersistence.getName(GuidedDecisionTable52 dt,\n                   List<DTCellValue52> row,\n                   Number num)", "testcase": false, "constructor": false}, {"identifier": "hasStringValue", "parameters": "(final DTCellValue52 dtCellValue52)", "modifiers": "private", "return": "boolean", "signature": "boolean hasStringValue(final DTCellValue52 dtCellValue52)", "full_signature": "private boolean hasStringValue(final DTCellValue52 dtCellValue52)", "class_method_signature": "GuidedDTDRLPersistence.hasStringValue(final DTCellValue52 dtCellValue52)", "testcase": false, "constructor": false}, {"identifier": "validCell", "parameters": "(String c,\n                      DataType.DataTypes dataType)", "modifiers": "", "return": "boolean", "signature": "boolean validCell(String c,\n                      DataType.DataTypes dataType)", "full_signature": " boolean validCell(String c,\n                      DataType.DataTypes dataType)", "class_method_signature": "GuidedDTDRLPersistence.validCell(String c,\n                      DataType.DataTypes dataType)", "testcase": false, "constructor": false}, {"identifier": "validateAttributeCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateAttributeCell(String c)", "full_signature": " boolean validateAttributeCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateAttributeCell(String c)", "testcase": false, "constructor": false}, {"identifier": "validateMetadataCell", "parameters": "(String c)", "modifiers": "", "return": "boolean", "signature": "boolean validateMetadataCell(String c)", "full_signature": " boolean validateMetadataCell(String c)", "class_method_signature": "GuidedDTDRLPersistence.validateMetadataCell(String c)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      String cell)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      String cell)", "testcase": false, "constructor": false}, {"identifier": "makeSingleFieldConstraint", "parameters": "(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "modifiers": "private", "return": "FieldConstraint", "signature": "FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "full_signature": "private FieldConstraint makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "class_method_signature": "GuidedDTDRLPersistence.makeSingleFieldConstraint(ConditionCol52 c,\n                                                      List<BaseColumn> allColumns,\n                                                      List<List<DTCellValue52>> data)", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java"}, "focal_method": {"identifier": "makeInList", "parameters": "(final String cell)", "modifiers": "", "return": "String", "body": "String makeInList(final String cell) {\n        if (cell.startsWith(\"(\")) {\n            return cell;\n        }\n\n        String result = \"\";\n        Iterator<String> iterator = Arrays.asList(ListSplitter.split(\"\\\"\",\n                                                                     true,\n                                                                     cell)).iterator();\n        while (iterator.hasNext()) {\n\n            final String item = iterator.next();\n\n            if (item.startsWith(\"\\\"\")) {\n                result += item;\n            } else {\n                result += \"\\\"\" + item + \"\\\"\";\n            }\n            if (iterator.hasNext()) {\n                result += \", \";\n            }\n        }\n\n        return \"(\" + result + \")\";\n    }", "signature": "String makeInList(final String cell)", "full_signature": " String makeInList(final String cell)", "class_method_signature": "GuidedDTDRLPersistence.makeInList(final String cell)", "testcase": false, "constructor": false, "invocations": ["startsWith", "iterator", "asList", "split", "hasNext", "next", "startsWith", "hasNext"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}