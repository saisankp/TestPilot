{"test_class": {"identifier": "FetchAndUnzipProcessTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FetchAndUnzipProcess instance;", "modifier": "private", "type": "FetchAndUnzipProcess", "declarator": "instance", "var_name": "instance"}, {"original_string": "private static final String TEST_TOKEN = \"ASDFQWER\";", "modifier": "private static final", "type": "String", "declarator": "TEST_TOKEN = \"ASDFQWER\"", "var_name": "TEST_TOKEN"}, {"original_string": "private Path tempDir;", "modifier": "private", "type": "Path", "declarator": "tempDir", "var_name": "tempDir"}], "file": "coastal-hazards-wps/src/test/java/gov/usgs/cida/coastalhazards/wps/FetchAndUnzipProcessTest.java"}, "test_case": {"identifier": "testExecuteWithBadAuth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithBadAuth() {\n        try{\n            instance.execute(\"http://owi.usgs.gov\", TEST_TOKEN + \"wrong\");\n        } catch(ProcessException ex){\n            if(!(ex.getCause() instanceof SecurityException)){\n                fail(\"when presented with a bad token, a SecurityException wrapped in a Process Exception should be thrown\");\n            }\n        }\n    }", "signature": "void testExecuteWithBadAuth()", "full_signature": "@Test public void testExecuteWithBadAuth()", "class_method_signature": "FetchAndUnzipProcessTest.testExecuteWithBadAuth()", "testcase": true, "constructor": false, "invocations": ["execute", "getCause", "fail"]}, "focal_class": {"identifier": "FetchAndUnzipProcess", "superclass": "", "interfaces": "implements GeoServerProcess", "fields": [{"original_string": "static final Logger LOGGER = Logging.getLogger(FetchAndUnzipProcess.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(FetchAndUnzipProcess.class)", "var_name": "LOGGER"}, {"original_string": "static final String TOKEN_PROPERTY_NAME = \"gov.usgs.cida.coastalhazards.wps.fetch.and.unzip.process.token\";", "modifier": "static final", "type": "String", "declarator": "TOKEN_PROPERTY_NAME = \"gov.usgs.cida.coastalhazards.wps.fetch.and.unzip.process.token\"", "var_name": "TOKEN_PROPERTY_NAME"}, {"original_string": "static final String UNZIP_BASE_PROPERTY_NAME = \"gov.usgs.cida.coastalhazards.wps.fetch.and.unzip.process.unzip.base\";", "modifier": "static final", "type": "String", "declarator": "UNZIP_BASE_PROPERTY_NAME = \"gov.usgs.cida.coastalhazards.wps.fetch.and.unzip.process.unzip.base\"", "var_name": "UNZIP_BASE_PROPERTY_NAME"}, {"original_string": "private DynamicReadOnlyProperties properties;", "modifier": "private", "type": "DynamicReadOnlyProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "public static final String FILE_NAME_PREFIX = \"_\";", "modifier": "public static final", "type": "String", "declarator": "FILE_NAME_PREFIX = \"_\"", "var_name": "FILE_NAME_PREFIX"}], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "modifiers": "@DescribeResult(name = \"filePath\", description = \"path to the unzipped file\") public", "return": "String", "signature": "String execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "full_signature": "@DescribeResult(name = \"filePath\", description = \"path to the unzipped file\") public String execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "class_method_signature": "FetchAndUnzipProcess.execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "testcase": false, "constructor": false}, {"identifier": "isAuthorized", "parameters": "(String token)", "modifiers": "", "return": "boolean", "signature": "boolean isAuthorized(String token)", "full_signature": " boolean isAuthorized(String token)", "class_method_signature": "FetchAndUnzipProcess.isAuthorized(String token)", "testcase": false, "constructor": false}, {"identifier": "getNewZipDestination", "parameters": "()", "modifiers": "", "return": "File", "signature": "File getNewZipDestination()", "full_signature": " File getNewZipDestination()", "class_method_signature": "FetchAndUnzipProcess.getNewZipDestination()", "testcase": false, "constructor": false}, {"identifier": "getNewZipDestination", "parameters": "(String unzipBase)", "modifiers": "", "return": "File", "signature": "File getNewZipDestination(String unzipBase)", "full_signature": " File getNewZipDestination(String unzipBase)", "class_method_signature": "FetchAndUnzipProcess.getNewZipDestination(String unzipBase)", "testcase": false, "constructor": false}, {"identifier": "getZipFromUrl", "parameters": "(String zipUrl, HttpClient client)", "modifiers": "", "return": "ZipInputStream", "signature": "ZipInputStream getZipFromUrl(String zipUrl, HttpClient client)", "full_signature": " ZipInputStream getZipFromUrl(String zipUrl, HttpClient client)", "class_method_signature": "FetchAndUnzipProcess.getZipFromUrl(String zipUrl, HttpClient client)", "testcase": false, "constructor": false}, {"identifier": "makeSafeFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String makeSafeFileName()", "full_signature": "public String makeSafeFileName()", "class_method_signature": "FetchAndUnzipProcess.makeSafeFileName()", "testcase": false, "constructor": false}, {"identifier": "unzipToDir", "parameters": "(ZipInputStream zipStream, File zipDir)", "modifiers": "", "return": "File", "signature": "File unzipToDir(ZipInputStream zipStream, File zipDir)", "full_signature": " File unzipToDir(ZipInputStream zipStream, File zipDir)", "class_method_signature": "FetchAndUnzipProcess.unzipToDir(ZipInputStream zipStream, File zipDir)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "", "return": "DynamicReadOnlyProperties", "signature": "DynamicReadOnlyProperties getProperties()", "full_signature": " DynamicReadOnlyProperties getProperties()", "class_method_signature": "FetchAndUnzipProcess.getProperties()", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(DynamicReadOnlyProperties properties)", "modifiers": "", "return": "void", "signature": "void setProperties(DynamicReadOnlyProperties properties)", "full_signature": " void setProperties(DynamicReadOnlyProperties properties)", "class_method_signature": "FetchAndUnzipProcess.setProperties(DynamicReadOnlyProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "()", "modifiers": "", "return": "HttpClient", "signature": "HttpClient getHttpClient()", "full_signature": " HttpClient getHttpClient()", "class_method_signature": "FetchAndUnzipProcess.getHttpClient()", "testcase": false, "constructor": false}, {"identifier": "setHttpClient", "parameters": "(HttpClient httpClient)", "modifiers": "", "return": "void", "signature": "void setHttpClient(HttpClient httpClient)", "full_signature": " void setHttpClient(HttpClient httpClient)", "class_method_signature": "FetchAndUnzipProcess.setHttpClient(HttpClient httpClient)", "testcase": false, "constructor": false}], "file": "coastal-hazards-wps/src/main/java/gov/usgs/cida/coastalhazards/wps/FetchAndUnzipProcess.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "modifiers": "@DescribeResult(name = \"filePath\", description = \"path to the unzipped file\") public", "return": "String", "body": "@DescribeResult(name = \"filePath\", description = \"path to the unzipped file\")\n    public String execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            ){\n        String unzippedPath = null;\n        File unzippedFile = null;\n        if (zipUrl.isEmpty() || token.isEmpty()) {\n            LOGGER.info(\"Missing zipUrl or token in the FetchAndUnzipProcess.\");\n        }\n        else {\n            LOGGER.info(\"In FetchAndUnzipProcess on Geoserver with zip url and token:\" + zipUrl);\n        }\n        \n        if(isAuthorized(token)){\n            ZipInputStream zipStream = getZipFromUrl(zipUrl, getHttpClient());\n            unzippedFile = unzipToDir(zipStream, getNewZipDestination());\n            unzippedPath = unzippedFile.getAbsolutePath();\n        } else {\n            throw new ProcessException( new SecurityException(\"Not Authorized.\"));\n        }\n        return unzippedPath;\n    }", "signature": "String execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "full_signature": "@DescribeResult(name = \"filePath\", description = \"path to the unzipped file\") public String execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "class_method_signature": "FetchAndUnzipProcess.execute(\n            @DescribeParameter(name = \"zipUrl\", min = 1, max = 1, description = \"URL to the zipped file to retrieve\") String zipUrl,\n            @DescribeParameter(name = \"token\", min = 1, max = 1, description = \"Token for authorizing the upload\") String token\n            )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "info", "info", "isAuthorized", "getZipFromUrl", "getHttpClient", "unzipToDir", "getNewZipDestination", "getAbsolutePath"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}