{"test_class": {"identifier": "TestSoapUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String contents =\n        \"<ns2:ImportantQuestion>\" +\n        \"Camel rules as cigarettes as well.  Do Apache Indians smoke it?\" +\n        \"</ns2:ImportantQuestion>\";", "modifier": "private final", "type": "String", "declarator": "contents =\n        \"<ns2:ImportantQuestion>\" +\n        \"Camel rules as cigarettes as well.  Do Apache Indians smoke it?\" +\n        \"</ns2:ImportantQuestion>\"", "var_name": "contents"}, {"original_string": "private final String envelopeWithNamespacePrefixes =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body>\" +\n        contents +\n        \"</soap:Body></soap:Envelope>\";", "modifier": "private final", "type": "String", "declarator": "envelopeWithNamespacePrefixes =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body>\" +\n        contents +\n        \"</soap:Body></soap:Envelope>\"", "var_name": "envelopeWithNamespacePrefixes"}, {"original_string": "private final String envelopeWithoutNamespacePrefixes =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body>\" +\n        contents +\n        \"</Body></Envelope>\";", "modifier": "private final", "type": "String", "declarator": "envelopeWithoutNamespacePrefixes =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body>\" +\n        contents +\n        \"</Body></Envelope>\"", "var_name": "envelopeWithoutNamespacePrefixes"}, {"original_string": "private final String emptyEnvelopeWithNamespacePrefixes =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body xmlns:prefix=\\\"uri\\\"></soap:Body></soap:Envelope>\";", "modifier": "private final", "type": "String", "declarator": "emptyEnvelopeWithNamespacePrefixes =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body xmlns:prefix=\\\"uri\\\"></soap:Body></soap:Envelope>\"", "var_name": "emptyEnvelopeWithNamespacePrefixes"}, {"original_string": "private final String emptyEnvelopeWithoutNamespacePrefixes =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body></Body></Envelope>\";", "modifier": "private final", "type": "String", "declarator": "emptyEnvelopeWithoutNamespacePrefixes =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body></Body></Envelope>\"", "var_name": "emptyEnvelopeWithoutNamespacePrefixes"}, {"original_string": "private final String emptyEnvelopeWithNamespacePrefixesShort =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body attrib=\\\"value\\\" /></soap:Envelope>\";", "modifier": "private final", "type": "String", "declarator": "emptyEnvelopeWithNamespacePrefixesShort =\n        \"<soap:Envelope><soap:Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></soap:Header>\" +\n        \"    <soap:Body attrib=\\\"value\\\" /></soap:Envelope>\"", "var_name": "emptyEnvelopeWithNamespacePrefixesShort"}, {"original_string": "private final String emptyEnvelopeWithoutNamespacePrefixesShort =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body /></Envelope>\";", "modifier": "private final", "type": "String", "declarator": "emptyEnvelopeWithoutNamespacePrefixesShort =\n        \"<Envelope><Header>\" +\n        \"    <thirdns:header value=\\\"12345\\\">some text</thirdns:header></Header>\" +\n        \"    <Body /></Envelope>\"", "var_name": "emptyEnvelopeWithoutNamespacePrefixesShort"}, {"original_string": "private final String totallyBad = \"12345\";", "modifier": "private final", "type": "String", "declarator": "totallyBad = \"12345\"", "var_name": "totallyBad"}], "file": "commons/ihe/ws/src/test/java/org/openehealth/ipf/commons/ihe/ws/utils/TestSoapUtils.java"}, "test_case": {"identifier": "testExctractSoapBody", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExctractSoapBody() {\n        assertEquals(contents, extractSoapBody(envelopeWithNamespacePrefixes));\n        assertEquals(contents, extractSoapBody(envelopeWithoutNamespacePrefixes));\n\n        assertEquals(\"\", extractSoapBody(emptyEnvelopeWithNamespacePrefixes));\n        assertEquals(\"\", extractSoapBody(emptyEnvelopeWithoutNamespacePrefixes));\n        assertEquals(\"\", extractSoapBody(emptyEnvelopeWithNamespacePrefixesShort));\n        assertEquals(\"\", extractSoapBody(emptyEnvelopeWithoutNamespacePrefixesShort));\n        \n        Assert.assertNull(extractSoapBody(null));\n        Assert.assertEquals(totallyBad, extractSoapBody(totallyBad));\n    }", "signature": "void testExctractSoapBody()", "full_signature": "@Test public void testExctractSoapBody()", "class_method_signature": "TestSoapUtils.testExctractSoapBody()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "extractSoapBody", "assertEquals", "extractSoapBody", "assertEquals", "extractSoapBody", "assertEquals", "extractSoapBody", "assertEquals", "extractSoapBody", "assertEquals", "extractSoapBody", "assertNull", "extractSoapBody", "assertEquals", "extractSoapBody"]}, "focal_class": {"identifier": "SoapUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final transient Logger LOG = LoggerFactory.getLogger(SoapUtils.class);", "modifier": "private static final transient", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SoapUtils.class)", "var_name": "LOG"}, {"original_string": "public static final Set<String> WS_ADDRESSING_NS_URIS;", "modifier": "public static final", "type": "Set<String>", "declarator": "WS_ADDRESSING_NS_URIS", "var_name": "WS_ADDRESSING_NS_URIS"}, {"original_string": "public static final Set<String> SOAP_NS_URIS;", "modifier": "public static final", "type": "Set<String>", "declarator": "SOAP_NS_URIS", "var_name": "SOAP_NS_URIS"}], "methods": [{"identifier": "SoapUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " SoapUtils()", "full_signature": "private  SoapUtils()", "class_method_signature": "SoapUtils.SoapUtils()", "testcase": false, "constructor": true}, {"identifier": "getElementNS", "parameters": "(\n            Element root,\n            Set<String> nsUris,\n            String wantedLocalName)", "modifiers": "public static", "return": "Element", "signature": "Element getElementNS(\n            Element root,\n            Set<String> nsUris,\n            String wantedLocalName)", "full_signature": "public static Element getElementNS(\n            Element root,\n            Set<String> nsUris,\n            String wantedLocalName)", "class_method_signature": "SoapUtils.getElementNS(\n            Element root,\n            Set<String> nsUris,\n            String wantedLocalName)", "testcase": false, "constructor": false}, {"identifier": "extractSoapBody", "parameters": "(String soapEnvelope)", "modifiers": "public static", "return": "String", "signature": "String extractSoapBody(String soapEnvelope)", "full_signature": "public static String extractSoapBody(String soapEnvelope)", "class_method_signature": "SoapUtils.extractSoapBody(String soapEnvelope)", "testcase": false, "constructor": false}, {"identifier": "extractNonEmptyElement", "parameters": "(String document, String elementName)", "modifiers": "public static", "return": "String", "signature": "String extractNonEmptyElement(String document, String elementName)", "full_signature": "public static String extractNonEmptyElement(String document, String elementName)", "class_method_signature": "SoapUtils.extractNonEmptyElement(String document, String elementName)", "testcase": false, "constructor": false}, {"identifier": "extractOutgoingException", "parameters": "(Exchange exchange)", "modifiers": "public static", "return": "Exception", "signature": "Exception extractOutgoingException(Exchange exchange)", "full_signature": "public static Exception extractOutgoingException(Exchange exchange)", "class_method_signature": "SoapUtils.extractOutgoingException(Exchange exchange)", "testcase": false, "constructor": false}, {"identifier": "extractOutgoingPayload", "parameters": "(Exchange exchange)", "modifiers": "public static", "return": "String", "signature": "String extractOutgoingPayload(Exchange exchange)", "full_signature": "public static String extractOutgoingPayload(Exchange exchange)", "class_method_signature": "SoapUtils.extractOutgoingPayload(Exchange exchange)", "testcase": false, "constructor": false}], "file": "commons/ihe/ws/src/main/java/org/openehealth/ipf/commons/ihe/ws/utils/SoapUtils.java"}, "focal_method": {"identifier": "extractSoapBody", "parameters": "(String soapEnvelope)", "modifiers": "public static", "return": "String", "body": "public static String extractSoapBody(String soapEnvelope) {\n        try {\n            /*\n             * We search for following positions (variables posXX):\n             *\n             *    <S:Envelope><S:Body>the required information</S:Body><S:Envelope>\n             *                3      4                        1  2    5\n             *\n             *\n             *    <Envelope><Body>the required information</Body><Envelope>\n             *   2                                        1     5\n             *\n             */\n            int pos1, pos2, pos3, pos4, pos5;\n            pos1 = soapEnvelope.lastIndexOf(\"<\");\n            pos1 = soapEnvelope.lastIndexOf(\"<\", pos1 - 1);\n            pos5 = soapEnvelope.indexOf(\">\", pos1);\n            if (soapEnvelope.charAt(pos5 - 1) == '/') {\n                return \"\";\n            }\n            pos2 = soapEnvelope.indexOf(\":\", pos1);\n            String soapPrefix = ((pos2 == -1) || (pos5 < pos2)) ?\n                    \"\" : soapEnvelope.substring(pos1 + 2, pos2 + 1);\n            String bodyElementStart = new StringBuilder()\n                .append('<')\n                .append(soapPrefix)\n                .append(\"Body\")\n                .toString();\n            pos3 = soapEnvelope.indexOf(bodyElementStart);\n            pos4 = soapEnvelope.indexOf('>', pos3 + bodyElementStart.length());\n            return soapEnvelope.substring(pos4 + 1, pos1);\n\n        } catch(Exception e) {\n            LOG.error(\"Invalid contents, probably not a SOAP Envelope in the parameter\", e);\n            return soapEnvelope;\n        }\n    }", "signature": "String extractSoapBody(String soapEnvelope)", "full_signature": "public static String extractSoapBody(String soapEnvelope)", "class_method_signature": "SoapUtils.extractSoapBody(String soapEnvelope)", "testcase": false, "constructor": false, "invocations": ["lastIndexOf", "lastIndexOf", "indexOf", "charAt", "indexOf", "substring", "toString", "append", "append", "append", "indexOf", "indexOf", "length", "substring", "error"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}