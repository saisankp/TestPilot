{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/util/FileUtilsTest.java"}, "test_case": {"identifier": "expandIfZipForZipWithResourceFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void expandIfZipForZipWithResourceFile() throws Exception {\n        PluginZip pluginZip = new PluginZip.Builder(pluginsPath.resolve(\"my-second-plugin-1.2.3.zip\"), \"myPlugin\")\n                .pluginVersion(\"1.2.3\")\n                .addFile(Paths.get(\"classes/META-INF/plugin-file\"), \"plugin\")\n                .build();\n\n        Path unzipped = FileUtils.expandIfZip(pluginZip.path());\n        assertEquals(pluginZip.unzippedPath(), unzipped);\n        assertTrue(Files.exists(unzipped.resolve(\"classes/META-INF/plugin-file\")));\n    }", "signature": "void expandIfZipForZipWithResourceFile()", "full_signature": "@Test public void expandIfZipForZipWithResourceFile()", "class_method_signature": "FileUtilsTest.expandIfZipForZipWithResourceFile()", "testcase": true, "constructor": false, "invocations": ["build", "addFile", "pluginVersion", "resolve", "get", "expandIfZip", "path", "assertEquals", "unzippedPath", "assertTrue", "exists", "resolve"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FileUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FileUtils.class)", "var_name": "log"}], "methods": [{"identifier": "readLines", "parameters": "(Path path, boolean ignoreComments)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> readLines(Path path, boolean ignoreComments)", "full_signature": "public static List<String> readLines(Path path, boolean ignoreComments)", "class_method_signature": "FileUtils.readLines(Path path, boolean ignoreComments)", "testcase": false, "constructor": false}, {"identifier": "writeLines", "parameters": "(Collection<String> lines, File file)", "modifiers": "@Deprecated public static", "return": "void", "signature": "void writeLines(Collection<String> lines, File file)", "full_signature": "@Deprecated public static void writeLines(Collection<String> lines, File file)", "class_method_signature": "FileUtils.writeLines(Collection<String> lines, File file)", "testcase": false, "constructor": false}, {"identifier": "writeLines", "parameters": "(Collection<String> lines, Path path)", "modifiers": "public static", "return": "void", "signature": "void writeLines(Collection<String> lines, Path path)", "full_signature": "public static void writeLines(Collection<String> lines, Path path)", "class_method_signature": "FileUtils.writeLines(Collection<String> lines, Path path)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Path path)", "modifiers": "public static", "return": "void", "signature": "void delete(Path path)", "full_signature": "public static void delete(Path path)", "class_method_signature": "FileUtils.delete(Path path)", "testcase": false, "constructor": false}, {"identifier": "getJars", "parameters": "(Path folder)", "modifiers": "public static", "return": "List<File>", "signature": "List<File> getJars(Path folder)", "full_signature": "public static List<File> getJars(Path folder)", "class_method_signature": "FileUtils.getJars(Path folder)", "testcase": false, "constructor": false}, {"identifier": "getJars", "parameters": "(final List<File> bucket, Path folder)", "modifiers": "private static", "return": "void", "signature": "void getJars(final List<File> bucket, Path folder)", "full_signature": "private static void getJars(final List<File> bucket, Path folder)", "class_method_signature": "FileUtils.getJars(final List<File> bucket, Path folder)", "testcase": false, "constructor": false}, {"identifier": "findWithEnding", "parameters": "(Path basePath, String... endings)", "modifiers": "public static", "return": "Path", "signature": "Path findWithEnding(Path basePath, String... endings)", "full_signature": "public static Path findWithEnding(Path basePath, String... endings)", "class_method_signature": "FileUtils.findWithEnding(Path basePath, String... endings)", "testcase": false, "constructor": false}, {"identifier": "optimisticDelete", "parameters": "(Path path)", "modifiers": "public static", "return": "void", "signature": "void optimisticDelete(Path path)", "full_signature": "public static void optimisticDelete(Path path)", "class_method_signature": "FileUtils.optimisticDelete(Path path)", "testcase": false, "constructor": false}, {"identifier": "expandIfZip", "parameters": "(Path filePath)", "modifiers": "public static", "return": "Path", "signature": "Path expandIfZip(Path filePath)", "full_signature": "public static Path expandIfZip(Path filePath)", "class_method_signature": "FileUtils.expandIfZip(Path filePath)", "testcase": false, "constructor": false}, {"identifier": "isZipFile", "parameters": "(Path path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZipFile(Path path)", "full_signature": "public static boolean isZipFile(Path path)", "class_method_signature": "FileUtils.isZipFile(Path path)", "testcase": false, "constructor": false}, {"identifier": "isJarFile", "parameters": "(Path path)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJarFile(Path path)", "full_signature": "public static boolean isJarFile(Path path)", "class_method_signature": "FileUtils.isJarFile(Path path)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(Path path, String first, String... more)", "modifiers": "public static", "return": "Path", "signature": "Path getPath(Path path, String first, String... more)", "full_signature": "public static Path getPath(Path path, String first, String... more)", "class_method_signature": "FileUtils.getPath(Path path, String first, String... more)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(URI uri, String first, String... more)", "modifiers": "public static", "return": "Path", "signature": "Path getPath(URI uri, String first, String... more)", "full_signature": "public static Path getPath(URI uri, String first, String... more)", "class_method_signature": "FileUtils.getPath(URI uri, String first, String... more)", "testcase": false, "constructor": false}, {"identifier": "closePath", "parameters": "(Path path)", "modifiers": "public static", "return": "void", "signature": "void closePath(Path path)", "full_signature": "public static void closePath(Path path)", "class_method_signature": "FileUtils.closePath(Path path)", "testcase": false, "constructor": false}, {"identifier": "findFile", "parameters": "(Path directoryPath, String fileName)", "modifiers": "public static", "return": "Path", "signature": "Path findFile(Path directoryPath, String fileName)", "full_signature": "public static Path findFile(Path directoryPath, String fileName)", "class_method_signature": "FileUtils.findFile(Path directoryPath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileSystem", "parameters": "(URI uri)", "modifiers": "private static", "return": "FileSystem", "signature": "FileSystem getFileSystem(URI uri)", "full_signature": "private static FileSystem getFileSystem(URI uri)", "class_method_signature": "FileUtils.getFileSystem(URI uri)", "testcase": false, "constructor": false}, {"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}], "file": "pf4j/src/main/java/org/pf4j/util/FileUtils.java"}, "focal_method": {"identifier": "expandIfZip", "parameters": "(Path filePath)", "modifiers": "public static", "return": "Path", "body": "public static Path expandIfZip(Path filePath) throws IOException {\n        if (!isZipFile(filePath)) {\n            return filePath;\n        }\n\n        FileTime pluginZipDate = Files.getLastModifiedTime(filePath);\n        String fileName = filePath.getFileName().toString();\n        String directoryName = fileName.substring(0, fileName.lastIndexOf(\".\"));\n        Path pluginDirectory = filePath.resolveSibling(directoryName);\n\n        if (!Files.exists(pluginDirectory) || pluginZipDate.compareTo(Files.getLastModifiedTime(pluginDirectory)) > 0) {\n            // expand '.zip' file\n            Unzip unzip = new Unzip();\n            unzip.setSource(filePath.toFile());\n            unzip.setDestination(pluginDirectory.toFile());\n            unzip.extract();\n            log.info(\"Expanded plugin zip '{}' in '{}'\", filePath.getFileName(), pluginDirectory.getFileName());\n        }\n\n        return pluginDirectory;\n    }", "signature": "Path expandIfZip(Path filePath)", "full_signature": "public static Path expandIfZip(Path filePath)", "class_method_signature": "FileUtils.expandIfZip(Path filePath)", "testcase": false, "constructor": false, "invocations": ["isZipFile", "getLastModifiedTime", "toString", "getFileName", "substring", "lastIndexOf", "resolveSibling", "exists", "compareTo", "getLastModifiedTime", "setSource", "toFile", "setDestination", "toFile", "extract", "info", "getFileName", "getFileName"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}