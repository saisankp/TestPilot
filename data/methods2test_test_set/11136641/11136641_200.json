{"test_class": {"identifier": "DefaultDirObjectFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Context contextMock;", "modifier": "private", "type": "Context", "declarator": "contextMock", "var_name": "contextMock"}, {"original_string": "private static final Name DN = LdapUtils.newLdapName(\"ou=some unit, dc=jayway, dc=se\");", "modifier": "private static final", "type": "Name", "declarator": "DN = LdapUtils.newLdapName(\"ou=some unit, dc=jayway, dc=se\")", "var_name": "DN"}, {"original_string": "private static final String DN_STRING = \"ou=some unit, dc=jayway, dc=se\";", "modifier": "private static final", "type": "String", "declarator": "DN_STRING = \"ou=some unit, dc=jayway, dc=se\"", "var_name": "DN_STRING"}, {"original_string": "private DefaultDirObjectFactory tested;", "modifier": "private", "type": "DefaultDirObjectFactory", "declarator": "tested", "var_name": "tested"}, {"original_string": "private Context contextMock2;", "modifier": "private", "type": "Context", "declarator": "contextMock2", "var_name": "contextMock2"}], "file": "core/src/test/java/org/springframework/ldap/core/support/DefaultDirObjectFactoryTest.java"}, "test_case": {"identifier": "testGetObjectInstance_BaseSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetObjectInstance_BaseSet() throws Exception {\n\t\tAttributes expectedAttributes = new NameAwareAttributes();\n\t\texpectedAttributes.put(\"someAttribute\", \"someValue\");\n\n\t\twhen(contextMock2.getNameInNamespace()).thenReturn(\"dc=jayway, dc=se\");\n\n\t\tDirContextAdapter adapter = (DirContextAdapter) tested.getObjectInstance(contextMock, LdapUtils.newLdapName(\n\t\t\t\t\"ou=some unit\"), contextMock2, new Hashtable(), expectedAttributes);\n\n        verify(contextMock).close();\n\n\t\tassertThat(adapter.getDn().toString()).isEqualTo(\"ou=some unit\");\n\t\tassertThat(adapter.getNameInNamespace()).isEqualTo(\"ou=some unit,dc=jayway,dc=se\");\n\t\tassertThat(adapter.getAttributes()).isEqualTo(expectedAttributes);\n\t}", "signature": "void testGetObjectInstance_BaseSet()", "full_signature": "@Test public void testGetObjectInstance_BaseSet()", "class_method_signature": "DefaultDirObjectFactoryTest.testGetObjectInstance_BaseSet()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "getNameInNamespace", "getObjectInstance", "newLdapName", "close", "verify", "isEqualTo", "assertThat", "toString", "getDn", "isEqualTo", "assertThat", "getNameInNamespace", "isEqualTo", "assertThat", "getAttributes"]}, "focal_class": {"identifier": "DefaultDirObjectFactory", "superclass": "", "interfaces": "implements DirObjectFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultDirObjectFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultDirObjectFactory.class)", "var_name": "LOG"}, {"original_string": "public static final String JNDI_ENV_BASE_PATH_KEY = \"org.springframework.ldap.base.path\";", "modifier": "public static final", "type": "String", "declarator": "JNDI_ENV_BASE_PATH_KEY = \"org.springframework.ldap.base.path\"", "var_name": "JNDI_ENV_BASE_PATH_KEY"}, {"original_string": "private static final String LDAP_PROTOCOL_PREFIX = \"ldap://\";", "modifier": "private static final", "type": "String", "declarator": "LDAP_PROTOCOL_PREFIX = \"ldap://\"", "var_name": "LDAP_PROTOCOL_PREFIX"}, {"original_string": "private static final String LDAPS_PROTOCOL_PREFIX = \"ldaps://\";", "modifier": "private static final", "type": "String", "declarator": "LDAPS_PROTOCOL_PREFIX = \"ldaps://\"", "var_name": "LDAPS_PROTOCOL_PREFIX"}], "methods": [{"identifier": "getObjectInstance", "parameters": "(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "modifiers": "@Override public final", "return": "Object", "signature": "Object getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "full_signature": "@Override public final Object getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "class_method_signature": "DefaultDirObjectFactory.getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "testcase": false, "constructor": false}, {"identifier": "constructAdapterFromName", "parameters": "(Attributes attrs, Name name, String nameInNamespace)", "modifiers": "", "return": "DirContextAdapter", "signature": "DirContextAdapter constructAdapterFromName(Attributes attrs, Name name, String nameInNamespace)", "full_signature": " DirContextAdapter constructAdapterFromName(Attributes attrs, Name name, String nameInNamespace)", "class_method_signature": "DefaultDirObjectFactory.constructAdapterFromName(Attributes attrs, Name name, String nameInNamespace)", "testcase": false, "constructor": false}, {"identifier": "getObjectInstance", "parameters": "(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)", "modifiers": "@Override public", "return": "Object", "signature": "Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)", "full_signature": "@Override public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)", "class_method_signature": "DefaultDirObjectFactory.getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/support/DefaultDirObjectFactory.java"}, "focal_method": {"identifier": "getObjectInstance", "parameters": "(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "modifiers": "@Override public final", "return": "Object", "body": "@Override\n\tpublic final Object getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs) throws Exception {\n\n\t\ttry {\n\t\t\tString nameInNamespace;\n\t\t\tif (nameCtx != null) {\n\t\t\t\tnameInNamespace = nameCtx.getNameInNamespace();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnameInNamespace = \"\";\n\t\t\t}\n\n\t\t\treturn constructAdapterFromName(attrs, name, nameInNamespace);\n\t\t}\n\t\tfinally {\n\t\t\t// It seems that the object supplied to the obj parameter is a\n\t\t\t// DirContext instance with reference to the same Ldap connection as\n\t\t\t// the original context. Since it is not the same instance (that's\n\t\t\t// the nameCtx parameter) this one really needs to be closed in\n\t\t\t// order to correctly clean up and return the connection to the pool\n\t\t\t// when we're finished with the surrounding operation.\n\t\t\tif (obj instanceof Context) {\n\n\t\t\t\tContext ctx = (Context) obj;\n\t\t\t\ttry {\n\t\t\t\t\tctx.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t// Never mind this\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}", "signature": "Object getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "full_signature": "@Override public final Object getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "class_method_signature": "DefaultDirObjectFactory.getObjectInstance(\n            Object obj,\n            Name name,\n            Context nameCtx,\n            Hashtable<?, ?> environment,\n            Attributes attrs)", "testcase": false, "constructor": false, "invocations": ["getNameInNamespace", "constructAdapterFromName", "close"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}