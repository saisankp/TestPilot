{"test_class": {"identifier": "SerializedSubscriberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Subscriber<String> observer;", "modifier": "", "type": "Subscriber<String>", "declarator": "observer", "var_name": "observer"}], "file": "rxjava/src/test/java/io/reactivex/subscribers/SerializedSubscriberTest.java"}, "test_case": {"identifier": "testMultiThreadedWithNPEinMiddle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiThreadedWithNPEinMiddle() {\n        int n = 10;\n        for (int i = 0; i < n; i++) {\n            TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable(\"one\", \"two\", \"three\", null,\n                    \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n            Flowable<String> w = Flowable.unsafeCreate(onSubscribe);\n\n            BusySubscriber busySubscriber = new BusySubscriber();\n            Subscriber<String> aw = serializedSubscriber(busySubscriber);\n\n            w.subscribe(aw);\n            onSubscribe.waitToFinish();\n\n            System.out.println(\"OnSubscribe maxConcurrentThreads: \" + onSubscribe.maxConcurrentThreads.get() + \"  Subscriber maxConcurrentThreads: \" + busySubscriber.maxConcurrentThreads.get());\n\n            // we can have concurrency ...\n            assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);\n            // ... but the onNext execution should be single threaded\n            assertEquals(1, busySubscriber.maxConcurrentThreads.get());\n\n            // this should not be the full number of items since the error should stop it before it completes all 9\n            System.out.println(\"onNext count: \" + busySubscriber.onNextCount.get());\n            assertFalse(busySubscriber.onComplete);\n            assertTrue(busySubscriber.onError);\n            assertTrue(busySubscriber.onNextCount.get() < 9);\n            // no onComplete because onError was invoked\n            // non-deterministic because unsubscribe happens after 'waitToFinish' releases\n            // so commenting out for now as this is not a critical thing to test here\n            // verify(s, times(1)).unsubscribe();\n        }\n    }", "signature": "void testMultiThreadedWithNPEinMiddle()", "full_signature": "@Test public void testMultiThreadedWithNPEinMiddle()", "class_method_signature": "SerializedSubscriberTest.testMultiThreadedWithNPEinMiddle()", "testcase": true, "constructor": false, "invocations": ["unsafeCreate", "serializedSubscriber", "subscribe", "waitToFinish", "println", "get", "get", "assertTrue", "get", "assertEquals", "get", "println", "get", "assertFalse", "assertTrue", "assertTrue", "get"]}, "focal_class": {"identifier": "SerializedSubscriber", "superclass": "", "interfaces": "implements FlowableSubscriber<T>, Subscription", "fields": [{"original_string": "final Subscriber<? super T> actual;", "modifier": "final", "type": "Subscriber<? super T>", "declarator": "actual", "var_name": "actual"}, {"original_string": "final boolean delayError;", "modifier": "final", "type": "boolean", "declarator": "delayError", "var_name": "delayError"}, {"original_string": "static final int QUEUE_LINK_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "QUEUE_LINK_SIZE = 4", "var_name": "QUEUE_LINK_SIZE"}, {"original_string": "Subscription subscription;", "modifier": "", "type": "Subscription", "declarator": "subscription", "var_name": "subscription"}, {"original_string": "boolean emitting;", "modifier": "", "type": "boolean", "declarator": "emitting", "var_name": "emitting"}, {"original_string": "AppendOnlyLinkedArrayList<Object> queue;", "modifier": "", "type": "AppendOnlyLinkedArrayList<Object>", "declarator": "queue", "var_name": "queue"}, {"original_string": "volatile boolean done;", "modifier": "volatile", "type": "boolean", "declarator": "done", "var_name": "done"}], "methods": [{"identifier": "SerializedSubscriber", "parameters": "(Subscriber<? super T> actual)", "modifiers": "public", "return": "", "signature": " SerializedSubscriber(Subscriber<? super T> actual)", "full_signature": "public  SerializedSubscriber(Subscriber<? super T> actual)", "class_method_signature": "SerializedSubscriber.SerializedSubscriber(Subscriber<? super T> actual)", "testcase": false, "constructor": true}, {"identifier": "SerializedSubscriber", "parameters": "(Subscriber<? super T> actual, boolean delayError)", "modifiers": "public", "return": "", "signature": " SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "full_signature": "public  SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "class_method_signature": "SerializedSubscriber.SerializedSubscriber(Subscriber<? super T> actual, boolean delayError)", "testcase": false, "constructor": true}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public void onSubscribe(Subscription s)", "class_method_signature": "SerializedSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "SerializedSubscriber.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@Override public void onError(Throwable t)", "class_method_signature": "SerializedSubscriber.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@Override public void onComplete()", "class_method_signature": "SerializedSubscriber.onComplete()", "testcase": false, "constructor": false}, {"identifier": "emitLoop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void emitLoop()", "full_signature": " void emitLoop()", "class_method_signature": "SerializedSubscriber.emitLoop()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "@Override public", "return": "void", "signature": "void request(long n)", "full_signature": "@Override public void request(long n)", "class_method_signature": "SerializedSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "SerializedSubscriber.cancel()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java"}, "focal_method": {"identifier": "SerializedSubscriber", "parameters": "(Subscriber<? super T> actual)", "modifiers": "public", "return": "", "body": "public SerializedSubscriber(Subscriber<? super T> actual) {\n        this(actual, false);\n    }", "signature": " SerializedSubscriber(Subscriber<? super T> actual)", "full_signature": "public  SerializedSubscriber(Subscriber<? super T> actual)", "class_method_signature": "SerializedSubscriber.SerializedSubscriber(Subscriber<? super T> actual)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}