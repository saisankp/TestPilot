{"test_class": {"identifier": "UcteRegulationTest", "superclass": "", "interfaces": "", "fields": [], "file": "ucte/ucte-network/src/test/java/com/powsybl/ucte/network/UcteRegulationTest.java"}, "test_case": {"identifier": "testFix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFix() {\n        UcteElementId id = createElementId();\n        UcteRegulation regulation = new UcteRegulation(id, null, null);\n\n        UctePhaseRegulation invalidPhaseRegulation1 = new UctePhaseRegulation(0.0f, 1, 1, -10);\n        UctePhaseRegulation invalidPhaseRegulation2 = new UctePhaseRegulation(Float.NaN, null, null, Float.NaN);\n        UctePhaseRegulation invalidPhaseRegulation3 = new UctePhaseRegulation(Float.NaN, 0, null, Float.NaN);\n        UctePhaseRegulation invalidPhaseRegulation4 = new UctePhaseRegulation(Float.NaN, 1, null, Float.NaN);\n        UctePhaseRegulation invalidPhaseRegulation5 = new UctePhaseRegulation(Float.NaN, 1, 0, Float.NaN);\n\n        regulation.setPhaseRegulation(invalidPhaseRegulation1);\n        regulation.fix();\n        assertNotNull(regulation.getPhaseRegulation());\n        assertTrue(Float.isNaN(invalidPhaseRegulation1.getU()));\n\n        testFix(regulation, invalidPhaseRegulation2);\n        testFix(regulation, invalidPhaseRegulation3);\n        testFix(regulation, invalidPhaseRegulation4);\n        testFix(regulation, invalidPhaseRegulation5);\n\n        UcteAngleRegulation invalidAngleRegulation1 = new UcteAngleRegulation(0.0f, 0.0f, 1, 1, 0.0f, null);\n        UcteAngleRegulation invalidAngleRegulation2 = new UcteAngleRegulation(Float.NaN, Float.NaN, null, null, Float.NaN, null);\n        UcteAngleRegulation invalidAngleRegulation3 = new UcteAngleRegulation(Float.NaN, Float.NaN, 0, null, Float.NaN, null);\n        UcteAngleRegulation invalidAngleRegulation4 = new UcteAngleRegulation(Float.NaN, Float.NaN, 1, null, Float.NaN, null);\n        UcteAngleRegulation invalidAngleRegulation5 = new UcteAngleRegulation(Float.NaN, Float.NaN, 1, 0, Float.NaN, null);\n        UcteAngleRegulation invalidAngleRegulation6 = new UcteAngleRegulation(Float.NaN, Float.NaN, 1, 0, Float.NaN, null);\n        UcteAngleRegulation invalidAngleRegulation7 = new UcteAngleRegulation(0.0f, Float.NaN, 1, 0, Float.NaN, null);\n\n        regulation.setAngleRegulation(invalidAngleRegulation1);\n        regulation.fix();\n        assertNotNull(regulation.getAngleRegulation());\n        assertEquals(UcteAngleRegulationType.ASYM, invalidAngleRegulation1.getType());\n\n        testFix(regulation, invalidAngleRegulation2);\n        testFix(regulation, invalidAngleRegulation3);\n        testFix(regulation, invalidAngleRegulation4);\n        testFix(regulation, invalidAngleRegulation5);\n        testFix(regulation, invalidAngleRegulation6);\n        testFix(regulation, invalidAngleRegulation7);\n    }", "signature": "void testFix()", "full_signature": "@Test public void testFix()", "class_method_signature": "UcteRegulationTest.testFix()", "testcase": true, "constructor": false, "invocations": ["createElementId", "setPhaseRegulation", "fix", "assertNotNull", "getPhaseRegulation", "assertTrue", "isNaN", "getU", "testFix", "testFix", "testFix", "testFix", "setAngleRegulation", "fix", "assertNotNull", "getAngleRegulation", "assertEquals", "getType", "testFix", "testFix", "testFix", "testFix", "testFix", "testFix"]}, "focal_class": {"identifier": "UcteRegulation", "superclass": "", "interfaces": "implements UcteRecord", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UcteRegulation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UcteRegulation.class)", "var_name": "LOGGER"}, {"original_string": "private final UcteElementId transfoId;", "modifier": "private final", "type": "UcteElementId", "declarator": "transfoId", "var_name": "transfoId"}, {"original_string": "private UctePhaseRegulation phaseRegulation;", "modifier": "private", "type": "UctePhaseRegulation", "declarator": "phaseRegulation", "var_name": "phaseRegulation"}, {"original_string": "private UcteAngleRegulation angleRegulation;", "modifier": "private", "type": "UcteAngleRegulation", "declarator": "angleRegulation", "var_name": "angleRegulation"}], "methods": [{"identifier": "UcteRegulation", "parameters": "(UcteElementId transfoId, UctePhaseRegulation phaseRegulation, UcteAngleRegulation angleRegulation)", "modifiers": "public", "return": "", "signature": " UcteRegulation(UcteElementId transfoId, UctePhaseRegulation phaseRegulation, UcteAngleRegulation angleRegulation)", "full_signature": "public  UcteRegulation(UcteElementId transfoId, UctePhaseRegulation phaseRegulation, UcteAngleRegulation angleRegulation)", "class_method_signature": "UcteRegulation.UcteRegulation(UcteElementId transfoId, UctePhaseRegulation phaseRegulation, UcteAngleRegulation angleRegulation)", "testcase": false, "constructor": true}, {"identifier": "getTransfoId", "parameters": "()", "modifiers": "public", "return": "UcteElementId", "signature": "UcteElementId getTransfoId()", "full_signature": "public UcteElementId getTransfoId()", "class_method_signature": "UcteRegulation.getTransfoId()", "testcase": false, "constructor": false}, {"identifier": "getPhaseRegulation", "parameters": "()", "modifiers": "public", "return": "UctePhaseRegulation", "signature": "UctePhaseRegulation getPhaseRegulation()", "full_signature": "public UctePhaseRegulation getPhaseRegulation()", "class_method_signature": "UcteRegulation.getPhaseRegulation()", "testcase": false, "constructor": false}, {"identifier": "setPhaseRegulation", "parameters": "(UctePhaseRegulation phaseRegulation)", "modifiers": "public", "return": "void", "signature": "void setPhaseRegulation(UctePhaseRegulation phaseRegulation)", "full_signature": "public void setPhaseRegulation(UctePhaseRegulation phaseRegulation)", "class_method_signature": "UcteRegulation.setPhaseRegulation(UctePhaseRegulation phaseRegulation)", "testcase": false, "constructor": false}, {"identifier": "getAngleRegulation", "parameters": "()", "modifiers": "public", "return": "UcteAngleRegulation", "signature": "UcteAngleRegulation getAngleRegulation()", "full_signature": "public UcteAngleRegulation getAngleRegulation()", "class_method_signature": "UcteRegulation.getAngleRegulation()", "testcase": false, "constructor": false}, {"identifier": "setAngleRegulation", "parameters": "(UcteAngleRegulation angleRegulation)", "modifiers": "public", "return": "void", "signature": "void setAngleRegulation(UcteAngleRegulation angleRegulation)", "full_signature": "public void setAngleRegulation(UcteAngleRegulation angleRegulation)", "class_method_signature": "UcteRegulation.setAngleRegulation(UcteAngleRegulation angleRegulation)", "testcase": false, "constructor": false}, {"identifier": "fix", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fix()", "full_signature": "@Override public void fix()", "class_method_signature": "UcteRegulation.fix()", "testcase": false, "constructor": false}], "file": "ucte/ucte-network/src/main/java/com/powsybl/ucte/network/UcteRegulation.java"}, "focal_method": {"identifier": "fix", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void fix() {\n        if (phaseRegulation != null) {\n            if (phaseRegulation.getU() <= 0) {\n                LOGGER.warn(\"Phase regulation of transformer '{}' has a bad target voltage {}, set to undefined\",\n                        transfoId, phaseRegulation.getU());\n                phaseRegulation.setU(Float.NaN);\n            }\n            // FIXME: N should be stricly positive and NP in [-n, n]\n            if (phaseRegulation.getN() == null || phaseRegulation.getN() == 0\n                || phaseRegulation.getNp() == null || Float.isNaN(phaseRegulation.getDu())) {\n                LOGGER.warn(\"Phase regulation of transformer '{}' removed because incomplete\", transfoId);\n                phaseRegulation = null;\n            }\n        }\n        if (angleRegulation != null) {\n            // FIXME: N should be stricly positive and NP in [-n, n]\n            if (angleRegulation.getN() == null || angleRegulation.getN() == 0\n                    || angleRegulation.getNp() == null || Float.isNaN(angleRegulation.getDu())\n                    || Float.isNaN(angleRegulation.getTheta())) {\n                LOGGER.warn(\"Angle regulation of transformer '{}' removed because incomplete\", transfoId);\n                angleRegulation = null;\n            } else {\n                // FIXME: type should not be null\n                if (angleRegulation.getType() == null) {\n                    LOGGER.warn(\"Type is missing for angle regulation of transformer '{}', default to {}\", transfoId, UcteAngleRegulationType.ASYM);\n                    angleRegulation.setType(UcteAngleRegulationType.ASYM);\n                }\n            }\n        }\n    }", "signature": "void fix()", "full_signature": "@Override public void fix()", "class_method_signature": "UcteRegulation.fix()", "testcase": false, "constructor": false, "invocations": ["getU", "warn", "getU", "setU", "getN", "getN", "getNp", "isNaN", "getDu", "warn", "getN", "getN", "getNp", "isNaN", "getDu", "isNaN", "getTheta", "warn", "getType", "warn", "setType"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}