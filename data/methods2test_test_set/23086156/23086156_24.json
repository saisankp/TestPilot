{"test_class": {"identifier": "AssertUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/io/nuun/kernel/core/internal/utils/AssertUtilsTest.java"}, "test_case": {"identifier": "testHasAnnotationDeep", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasAnnotationDeep()\n    {\n        assertThat(AssertUtils.hasAnnotationDeep(Class1.class, MetaAnno2.class)).isTrue();\n        assertThat(AssertUtils.hasAnnotationDeep(Class1.class, MetaAnno1.class)).isTrue();\n        assertThat(AssertUtils.hasAnnotationDeep(Class1.class, Anno1.class)).isTrue();\n\n        assertThat(AssertUtils.hasAnnotationDeep(Class2.class, Anno2.class)).isTrue();\n        assertThat(AssertUtils.hasAnnotationDeep(Class2.class, MetaAnno2.class)).isTrue();\n    }", "signature": "void testHasAnnotationDeep()", "full_signature": "@Test public void testHasAnnotationDeep()", "class_method_signature": "AssertUtilsTest.testHasAnnotationDeep()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "hasAnnotationDeep", "isTrue", "assertThat", "hasAnnotationDeep", "isTrue", "assertThat", "hasAnnotationDeep", "isTrue", "assertThat", "hasAnnotationDeep", "isTrue", "assertThat", "hasAnnotationDeep"]}, "focal_class": {"identifier": "AssertUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isInterface", "parameters": "(Class<? extends Object> candidate)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInterface(Class<? extends Object> candidate)", "full_signature": "public static boolean isInterface(Class<? extends Object> candidate)", "class_method_signature": "AssertUtils.isInterface(Class<? extends Object> candidate)", "testcase": false, "constructor": false}, {"identifier": "assertInterface", "parameters": "(Class<? extends Object> candidate)", "modifiers": "public static", "return": "void", "signature": "void assertInterface(Class<? extends Object> candidate)", "full_signature": "public static void assertInterface(Class<? extends Object> candidate)", "class_method_signature": "AssertUtils.assertInterface(Class<? extends Object> candidate)", "testcase": false, "constructor": false}, {"identifier": "isClass", "parameters": "(Class<? extends Object> candidate)", "modifiers": "public static", "return": "boolean", "signature": "boolean isClass(Class<? extends Object> candidate)", "full_signature": "public static boolean isClass(Class<? extends Object> candidate)", "class_method_signature": "AssertUtils.isClass(Class<? extends Object> candidate)", "testcase": false, "constructor": false}, {"identifier": "assertIsClass", "parameters": "(Class<? extends Object> candidate)", "modifiers": "public static", "return": "void", "signature": "void assertIsClass(Class<? extends Object> candidate)", "full_signature": "public static void assertIsClass(Class<? extends Object> candidate)", "class_method_signature": "AssertUtils.assertIsClass(Class<? extends Object> candidate)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotationDeep", "parameters": "(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "full_signature": "public static boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "class_method_signature": "AssertUtils.hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotationDeepRegex", "parameters": "(Class<?> memberDeclaringClass, String metaAnnotationRegex)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasAnnotationDeepRegex(Class<?> memberDeclaringClass, String metaAnnotationRegex)", "full_signature": "public static boolean hasAnnotationDeepRegex(Class<?> memberDeclaringClass, String metaAnnotationRegex)", "class_method_signature": "AssertUtils.hasAnnotationDeepRegex(Class<?> memberDeclaringClass, String metaAnnotationRegex)", "testcase": false, "constructor": false}, {"identifier": "isEquivalent", "parameters": "(Class<? extends Annotation> original, Class<? extends Annotation> copy)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEquivalent(Class<? extends Annotation> original, Class<? extends Annotation> copy)", "full_signature": "public static boolean isEquivalent(Class<? extends Annotation> original, Class<? extends Annotation> copy)", "class_method_signature": "AssertUtils.isEquivalent(Class<? extends Annotation> original, Class<? extends Annotation> copy)", "testcase": false, "constructor": false}, {"identifier": "annotationProxyOf", "parameters": "(Class<A> annotationModelType, Annotation annotationClone)", "modifiers": "public static", "return": "A", "signature": "A annotationProxyOf(Class<A> annotationModelType, Annotation annotationClone)", "full_signature": "public static A annotationProxyOf(Class<A> annotationModelType, Annotation annotationClone)", "class_method_signature": "AssertUtils.annotationProxyOf(Class<A> annotationModelType, Annotation annotationClone)", "testcase": false, "constructor": false}, {"identifier": "assertionIllegalArgument", "parameters": "(boolean asserted, String message)", "modifiers": "public static", "return": "void", "signature": "void assertionIllegalArgument(boolean asserted, String message)", "full_signature": "public static void assertionIllegalArgument(boolean asserted, String message)", "class_method_signature": "AssertUtils.assertionIllegalArgument(boolean asserted, String message)", "testcase": false, "constructor": false}, {"identifier": "assertionNullPointer", "parameters": "(boolean asserted, String message)", "modifiers": "public static", "return": "void", "signature": "void assertionNullPointer(boolean asserted, String message)", "full_signature": "public static void assertionNullPointer(boolean asserted, String message)", "class_method_signature": "AssertUtils.assertionNullPointer(boolean asserted, String message)", "testcase": false, "constructor": false}, {"identifier": "assertLegal", "parameters": "(Object underAssertion, String message)", "modifiers": "public static", "return": "void", "signature": "void assertLegal(Object underAssertion, String message)", "full_signature": "public static void assertLegal(Object underAssertion, String message)", "class_method_signature": "AssertUtils.assertLegal(Object underAssertion, String message)", "testcase": false, "constructor": false}, {"identifier": "assertNotNull", "parameters": "(Object underAssertion, String message)", "modifiers": "public static", "return": "void", "signature": "void assertNotNull(Object underAssertion, String message)", "full_signature": "public static void assertNotNull(Object underAssertion, String message)", "class_method_signature": "AssertUtils.assertNotNull(Object underAssertion, String message)", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/nuun/kernel/core/internal/utils/AssertUtils.java"}, "focal_method": {"identifier": "hasAnnotationDeep", "parameters": "(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "modifiers": "public static", "return": "boolean", "body": "public static boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)\n    {\n\n        if (memberDeclaringClass.equals(candidate))\n        {\n            return true;\n        }\n\n        for (Annotation anno : memberDeclaringClass.getAnnotations())\n        {\n            Class<? extends Annotation> annoClass = anno.annotationType();\n            if (!annoClass.getPackage().getName().startsWith(\"java.lang\") && hasAnnotationDeep(annoClass, candidate))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }", "signature": "boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "full_signature": "public static boolean hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "class_method_signature": "AssertUtils.hasAnnotationDeep(Class<?> memberDeclaringClass, Class<? extends Annotation> candidate)", "testcase": false, "constructor": false, "invocations": ["equals", "getAnnotations", "annotationType", "startsWith", "getName", "getPackage", "hasAnnotationDeep"]}, "repository": {"repo_id": 23086156, "url": "https://github.com/nuun-io/kernel", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 1114, "license": "licensed"}}