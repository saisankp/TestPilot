{"test_class": {"identifier": "HttpCrlFetcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HTTP_TEST_URL = \"http://testUrl.de\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_TEST_URL = \"http://testUrl.de\"", "var_name": "HTTP_TEST_URL"}, {"original_string": "private X509Certificate certificate;", "modifier": "private", "type": "X509Certificate", "declarator": "certificate", "var_name": "certificate"}, {"original_string": "private CertificateFactory cf;", "modifier": "private", "type": "CertificateFactory", "declarator": "cf", "var_name": "cf"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/eidserver/crl/HttpCrlFetcherTest.java"}, "test_case": {"identifier": "crlFetcherThrowsCertValidationExceptionWhitFalseCertificate", "parameters": "()", "modifiers": "@Test @DisplayName(\"throws a CertificateValidationException when the signature cannot be validated\")", "return": "void", "body": "@Test\n  @DisplayName(\"throws a CertificateValidationException when the signature cannot be validated\")\n  void crlFetcherThrowsCertValidationExceptionWhitFalseCertificate() throws Exception\n  {\n    X509Certificate certificate = (X509Certificate)cf.generateCertificate(CertificationRevocationListImplTest.class.getResourceAsStream(\"/wrong-signature-cert.cer\"));\n    HttpCrlFetcher crlFetcher = getCrlFetcher(certificate);\n\n    CertificateValidationException certificateValidationException = Assertions.assertThrows(CertificateValidationException.class,\n                                                                                            () -> crlFetcher.download(HTTP_TEST_URL));\n\n    Assertions.assertEquals(\"Could not verify CRL\", certificateValidationException.getMessage());\n  }", "signature": "void crlFetcherThrowsCertValidationExceptionWhitFalseCertificate()", "full_signature": "@Test @DisplayName(\"throws a CertificateValidationException when the signature cannot be validated\") void crlFetcherThrowsCertValidationExceptionWhitFalseCertificate()", "class_method_signature": "HttpCrlFetcherTest.crlFetcherThrowsCertValidationExceptionWhitFalseCertificate()", "testcase": true, "constructor": false, "invocations": ["generateCertificate", "getResourceAsStream", "getCrlFetcher", "assertThrows", "download", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "HttpCrlFetcher", "superclass": "", "interfaces": "implements CrlFetcher", "fields": [{"original_string": "private final Set<X509Certificate> trustAnchors;", "modifier": "private final", "type": "Set<X509Certificate>", "declarator": "trustAnchors", "var_name": "trustAnchors"}], "methods": [{"identifier": "HttpCrlFetcher", "parameters": "(Set<X509Certificate> trustAnchors)", "modifiers": "public", "return": "", "signature": " HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "full_signature": "public  HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "class_method_signature": "HttpCrlFetcher.HttpCrlFetcher(Set<X509Certificate> trustAnchors)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String url)", "modifiers": "@Override public", "return": "X509CRL", "signature": "X509CRL get(String url)", "full_signature": "@Override public X509CRL get(String url)", "class_method_signature": "HttpCrlFetcher.get(String url)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "signature": "X509CRL download(String url)", "full_signature": "protected X509CRL download(String url)", "class_method_signature": "HttpCrlFetcher.download(String url)", "testcase": false, "constructor": false}, {"identifier": "httpDownload", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "signature": "X509CRL httpDownload(String url)", "full_signature": "protected X509CRL httpDownload(String url)", "class_method_signature": "HttpCrlFetcher.httpDownload(String url)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/eidserver/crl/HttpCrlFetcher.java"}, "focal_method": {"identifier": "download", "parameters": "(String url)", "modifiers": "protected", "return": "X509CRL", "body": "protected X509CRL download(String url) throws CertificateValidationException\n  {\n    try\n    {\n      if (url != null && url.matches(\"http[s]{0,1}://.*\"))\n      {\n        X509CRL crl = httpDownload(url);\n        Optional<X509Certificate> signer = trustAnchors.stream()\n                                                       .filter(s -> s.getSubjectX500Principal()\n                                                                     .equals(crl.getIssuerX500Principal()))\n                                                       .findAny();\n        if (signer.isPresent())\n        {\n          crl.verify(signer.get().getPublicKey(), BouncyCastleProvider.PROVIDER_NAME);\n          return crl;\n        }\n        else\n        {\n          throw new CertificateValidationException(\"Could not verify CRL\");\n        }\n      }\n    }\n    catch (CRLException | InvalidKeyException | NoSuchAlgorithmException | NoSuchProviderException\n      | SignatureException e)\n    {\n      throw new CertificateValidationException(\"Could not verify CRL\", e);\n    }\n    return null;\n  }", "signature": "X509CRL download(String url)", "full_signature": "protected X509CRL download(String url)", "class_method_signature": "HttpCrlFetcher.download(String url)", "testcase": false, "constructor": false, "invocations": ["matches", "httpDownload", "findAny", "filter", "stream", "equals", "getSubjectX500Principal", "getIssuerX500Principal", "isPresent", "verify", "getPublicKey", "get"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}