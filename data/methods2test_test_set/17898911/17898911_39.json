{"test_class": {"identifier": "DataSetLookupEditorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String POPULATION_UUID = \"population\";", "modifier": "public static final", "type": "String", "declarator": "POPULATION_UUID = \"population\"", "var_name": "POPULATION_UUID"}, {"original_string": "public static final String REVENUE_UUID = \"revenue\";", "modifier": "public static final", "type": "String", "declarator": "REVENUE_UUID = \"revenue\"", "var_name": "REVENUE_UUID"}, {"original_string": "public static final DataSetDef POPULATION_DSET = DataSetDefFactory.newStaticDataSetDef()\n            .uuid(POPULATION_UUID)\n            .name(\"Population\")\n            .label(\"continent\")\n            .label(\"country\")\n            .number(\"population\")\n            .date(\"year\")\n            .buildDef();", "modifier": "public static final", "type": "DataSetDef", "declarator": "POPULATION_DSET = DataSetDefFactory.newStaticDataSetDef()\n            .uuid(POPULATION_UUID)\n            .name(\"Population\")\n            .label(\"continent\")\n            .label(\"country\")\n            .number(\"population\")\n            .date(\"year\")\n            .buildDef()", "var_name": "POPULATION_DSET"}, {"original_string": "public static final DataSetDef REVENUE_DSET = DataSetDefFactory.newStaticDataSetDef()\n            .uuid(REVENUE_UUID)\n            .name(\"Revenue\")\n            .label(\"company\")\n            .label(\"sector\")\n            .number(\"revenue\")\n            .date(\"year\")\n            .buildDef();", "modifier": "public static final", "type": "DataSetDef", "declarator": "REVENUE_DSET = DataSetDefFactory.newStaticDataSetDef()\n            .uuid(REVENUE_UUID)\n            .name(\"Revenue\")\n            .label(\"company\")\n            .label(\"sector\")\n            .number(\"revenue\")\n            .date(\"year\")\n            .buildDef()", "var_name": "REVENUE_DSET"}, {"original_string": "public static final List<DataSetDef> DATA_SET_LIST = Arrays.asList(POPULATION_DSET, REVENUE_DSET);", "modifier": "public static final", "type": "List<DataSetDef>", "declarator": "DATA_SET_LIST = Arrays.asList(POPULATION_DSET, REVENUE_DSET)", "var_name": "DATA_SET_LIST"}, {"original_string": "public static final DataSetMetadata POPULATION_META = new DataSetMetadataImpl(\n            POPULATION_DSET, POPULATION_UUID, 0, 4,\n            Arrays.asList(\"continent\", \"country\", \"population\", \"year\"),\n            Arrays.asList(LABEL, LABEL, NUMBER, DATE), 0);", "modifier": "public static final", "type": "DataSetMetadata", "declarator": "POPULATION_META = new DataSetMetadataImpl(\n            POPULATION_DSET, POPULATION_UUID, 0, 4,\n            Arrays.asList(\"continent\", \"country\", \"population\", \"year\"),\n            Arrays.asList(LABEL, LABEL, NUMBER, DATE), 0)", "var_name": "POPULATION_META"}, {"original_string": "public static final DataSetMetadata REVENUE_META = new DataSetMetadataImpl(\n            POPULATION_DSET, REVENUE_UUID, 0, 4,\n            Arrays.asList(\"company\", \"sector\", \"revenue\", \"year\"),\n            Arrays.asList(LABEL, LABEL, NUMBER, DATE), 0);", "modifier": "public static final", "type": "DataSetMetadata", "declarator": "REVENUE_META = new DataSetMetadataImpl(\n            POPULATION_DSET, REVENUE_UUID, 0, 4,\n            Arrays.asList(\"company\", \"sector\", \"revenue\", \"year\"),\n            Arrays.asList(LABEL, LABEL, NUMBER, DATE), 0)", "var_name": "REVENUE_META"}, {"original_string": "public static final DataSetLookupConstraints DATA_2D_MULTIPLE = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(10)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(true)\n            .setExtraColumnsType(ColumnType.NUMBER)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Series\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER});", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "DATA_2D_MULTIPLE = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(10)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(true)\n            .setExtraColumnsType(ColumnType.NUMBER)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Series\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER})", "var_name": "DATA_2D_MULTIPLE"}, {"original_string": "public static final DataSetLookupConstraints DATA_2D_FIXED = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(2)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(false)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Series\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER});", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "DATA_2D_FIXED = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(2)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(false)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Series\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER})", "var_name": "DATA_2D_FIXED"}, {"original_string": "public static final DataSetLookupConstraints DATA_MULTIPLE = new DataSetLookupConstraints()\n            .setGroupAllowed(true)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER});", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "DATA_MULTIPLE = new DataSetLookupConstraints()\n            .setGroupAllowed(true)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER})", "var_name": "DATA_MULTIPLE"}, {"original_string": "public static final DataSetLookupConstraints DATA_MULTIPLE_NO_GROUP = new DataSetLookupConstraints()\n            .setGroupAllowed(false)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER});", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "DATA_MULTIPLE_NO_GROUP = new DataSetLookupConstraints()\n            .setGroupAllowed(false)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER})", "var_name": "DATA_MULTIPLE_NO_GROUP"}, {"original_string": "@Mock\n    DataSetLookupEditor.View view;", "modifier": "@Mock", "type": "DataSetLookupEditor.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    Event<DataSetLookupChangedEvent> event;", "modifier": "@Mock", "type": "Event<DataSetLookupChangedEvent>", "declarator": "event", "var_name": "event"}, {"original_string": "@Mock\n    SyncBeanManager beanManager;", "modifier": "@Mock", "type": "SyncBeanManager", "declarator": "beanManager", "var_name": "beanManager"}, {"original_string": "@Mock\n    SyncBeanDef<ColumnFunctionEditor> columnFunctionEditorBeanDef;", "modifier": "@Mock", "type": "SyncBeanDef<ColumnFunctionEditor>", "declarator": "columnFunctionEditorBeanDef", "var_name": "columnFunctionEditorBeanDef"}, {"original_string": "@Mock\n    ColumnFunctionEditor columnFunctionEditor;", "modifier": "@Mock", "type": "ColumnFunctionEditor", "declarator": "columnFunctionEditor", "var_name": "columnFunctionEditor"}, {"original_string": "@Mock\n    DataSetFilterEditor filterEditor;", "modifier": "@Mock", "type": "DataSetFilterEditor", "declarator": "filterEditor", "var_name": "filterEditor"}, {"original_string": "@Mock\n    DataSetGroupDateEditor groupDateEditor;", "modifier": "@Mock", "type": "DataSetGroupDateEditor", "declarator": "groupDateEditor", "var_name": "groupDateEditor"}, {"original_string": "@Mock\n    DataSetClientServices clientServices;", "modifier": "@Mock", "type": "DataSetClientServices", "declarator": "clientServices", "var_name": "clientServices"}, {"original_string": "DataSetLookupEditor presenter = null;", "modifier": "", "type": "DataSetLookupEditor", "declarator": "presenter = null", "var_name": "presenter"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/DataSetLookupEditorTest.java"}, "test_case": {"identifier": "testGroupAllowed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroupAllowed() {\n        presenter.init(DATA_MULTIPLE, DataSetLookupFactory.newDataSetLookupBuilder()\n                .dataset(POPULATION_UUID)\n                .column(\"year\")\n                .column(\"population\")\n                .buildLookup());\n\n        verify(view).setGroupEnabled(true);\n        verify(view).enableGroupColumnSelectorHint();\n        verify(view).setAddColumnOptionEnabled(true);\n        verify(event, never()).fire(any(DataSetLookupChangedEvent.class));\n    }", "signature": "void testGroupAllowed()", "full_signature": "@Test public void testGroupAllowed()", "class_method_signature": "DataSetLookupEditorTest.testGroupAllowed()", "testcase": true, "constructor": false, "invocations": ["init", "buildLookup", "column", "column", "dataset", "newDataSetLookupBuilder", "setGroupEnabled", "verify", "enableGroupColumnSelectorHint", "verify", "setAddColumnOptionEnabled", "verify", "fire", "verify", "never", "any"]}, "focal_class": {"identifier": "DataSetLookupEditor", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "View view;", "modifier": "", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "SyncBeanManager beanManager;", "modifier": "", "type": "SyncBeanManager", "declarator": "beanManager", "var_name": "beanManager"}, {"original_string": "DataSetClientServices clientServices;", "modifier": "", "type": "DataSetClientServices", "declarator": "clientServices", "var_name": "clientServices"}, {"original_string": "DataSetFilterEditor filterEditor;", "modifier": "", "type": "DataSetFilterEditor", "declarator": "filterEditor", "var_name": "filterEditor"}, {"original_string": "DataSetGroupDateEditor groupDateEditor;", "modifier": "", "type": "DataSetGroupDateEditor", "declarator": "groupDateEditor", "var_name": "groupDateEditor"}, {"original_string": "DataSetLookup dataSetLookup = null;", "modifier": "", "type": "DataSetLookup", "declarator": "dataSetLookup = null", "var_name": "dataSetLookup"}, {"original_string": "DataSetLookupConstraints lookupConstraints = null;", "modifier": "", "type": "DataSetLookupConstraints", "declarator": "lookupConstraints = null", "var_name": "lookupConstraints"}, {"original_string": "DataSetMetadata dataSetMetadata = null;", "modifier": "", "type": "DataSetMetadata", "declarator": "dataSetMetadata = null", "var_name": "dataSetMetadata"}, {"original_string": "Event<DataSetLookupChangedEvent> changeEvent = null;", "modifier": "", "type": "Event<DataSetLookupChangedEvent>", "declarator": "changeEvent = null", "var_name": "changeEvent"}, {"original_string": "List<DataSetDef> _dataSetDefList = new ArrayList<DataSetDef>();", "modifier": "", "type": "List<DataSetDef>", "declarator": "_dataSetDefList = new ArrayList<DataSetDef>()", "var_name": "_dataSetDefList"}, {"original_string": "Map<Integer, ColumnFunctionEditor> _editorsMap = new HashMap<Integer, ColumnFunctionEditor>();", "modifier": "", "type": "Map<Integer, ColumnFunctionEditor>", "declarator": "_editorsMap = new HashMap<Integer, ColumnFunctionEditor>()", "var_name": "_editorsMap"}, {"original_string": "DataSetDefFilter dataSetDefFilter = new DataSetDefFilter() {\n        public boolean accept(DataSetDef def) {\n            return true;\n        }\n    };", "modifier": "", "type": "DataSetDefFilter", "declarator": "dataSetDefFilter = new DataSetDefFilter() {\n        public boolean accept(DataSetDef def) {\n            return true;\n        }\n    }", "var_name": "dataSetDefFilter"}], "methods": [{"identifier": "DataSetLookupEditor", "parameters": "(final View view,\n                               SyncBeanManager beanManager,\n                               DataSetFilterEditor filterEditor,\n                               DataSetGroupDateEditor groupDateEditor,\n                               DataSetClientServices clientServices,\n                               Event<DataSetLookupChangedEvent> event)", "modifiers": "@Inject public", "return": "", "signature": " DataSetLookupEditor(final View view,\n                               SyncBeanManager beanManager,\n                               DataSetFilterEditor filterEditor,\n                               DataSetGroupDateEditor groupDateEditor,\n                               DataSetClientServices clientServices,\n                               Event<DataSetLookupChangedEvent> event)", "full_signature": "@Inject public  DataSetLookupEditor(final View view,\n                               SyncBeanManager beanManager,\n                               DataSetFilterEditor filterEditor,\n                               DataSetGroupDateEditor groupDateEditor,\n                               DataSetClientServices clientServices,\n                               Event<DataSetLookupChangedEvent> event)", "class_method_signature": "DataSetLookupEditor.DataSetLookupEditor(final View view,\n                               SyncBeanManager beanManager,\n                               DataSetFilterEditor filterEditor,\n                               DataSetGroupDateEditor groupDateEditor,\n                               DataSetClientServices clientServices,\n                               Event<DataSetLookupChangedEvent> event)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "modifiers": "public", "return": "void", "signature": "void init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "full_signature": "public void init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "class_method_signature": "DataSetLookupEditor.init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "testcase": false, "constructor": false}, {"identifier": "fetchMetadata", "parameters": "(final String uuid,\n                       final RemoteCallback<DataSetMetadata> callback)", "modifiers": "", "return": "void", "signature": "void fetchMetadata(final String uuid,\n                       final RemoteCallback<DataSetMetadata> callback)", "full_signature": " void fetchMetadata(final String uuid,\n                       final RemoteCallback<DataSetMetadata> callback)", "class_method_signature": "DataSetLookupEditor.fetchMetadata(final String uuid,\n                       final RemoteCallback<DataSetMetadata> callback)", "testcase": false, "constructor": false}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "DataSetLookupEditor.asWidget()", "testcase": false, "constructor": false}, {"identifier": "getView", "parameters": "()", "modifiers": "public", "return": "View", "signature": "View getView()", "full_signature": "public View getView()", "class_method_signature": "DataSetLookupEditor.getView()", "testcase": false, "constructor": false}, {"identifier": "getFilterEditor", "parameters": "()", "modifiers": "public", "return": "DataSetFilterEditor", "signature": "DataSetFilterEditor getFilterEditor()", "full_signature": "public DataSetFilterEditor getFilterEditor()", "class_method_signature": "DataSetLookupEditor.getFilterEditor()", "testcase": false, "constructor": false}, {"identifier": "getGroupDateEditor", "parameters": "()", "modifiers": "public", "return": "DataSetGroupDateEditor", "signature": "DataSetGroupDateEditor getGroupDateEditor()", "full_signature": "public DataSetGroupDateEditor getGroupDateEditor()", "class_method_signature": "DataSetLookupEditor.getGroupDateEditor()", "testcase": false, "constructor": false}, {"identifier": "getDataSetLookup", "parameters": "()", "modifiers": "public", "return": "DataSetLookup", "signature": "DataSetLookup getDataSetLookup()", "full_signature": "public DataSetLookup getDataSetLookup()", "class_method_signature": "DataSetLookupEditor.getDataSetLookup()", "testcase": false, "constructor": false}, {"identifier": "getLookupConstraints", "parameters": "()", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints getLookupConstraints()", "full_signature": "public DataSetLookupConstraints getLookupConstraints()", "class_method_signature": "DataSetLookupEditor.getLookupConstraints()", "testcase": false, "constructor": false}, {"identifier": "setDataSetDefFilter", "parameters": "(DataSetDefFilter dataSetDefFilter)", "modifiers": "public", "return": "void", "signature": "void setDataSetDefFilter(DataSetDefFilter dataSetDefFilter)", "full_signature": "public void setDataSetDefFilter(DataSetDefFilter dataSetDefFilter)", "class_method_signature": "DataSetLookupEditor.setDataSetDefFilter(DataSetDefFilter dataSetDefFilter)", "testcase": false, "constructor": false}, {"identifier": "getDataSetUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDataSetUUID()", "full_signature": "public String getDataSetUUID()", "class_method_signature": "DataSetLookupEditor.getDataSetUUID()", "testcase": false, "constructor": false}, {"identifier": "getColumnId", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String getColumnId(int index)", "full_signature": "public String getColumnId(int index)", "class_method_signature": "DataSetLookupEditor.getColumnId(int index)", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "(int index)", "modifiers": "public", "return": "ColumnType", "signature": "ColumnType getColumnType(int index)", "full_signature": "public ColumnType getColumnType(int index)", "class_method_signature": "DataSetLookupEditor.getColumnType(int index)", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "(String columnId)", "modifiers": "public", "return": "ColumnType", "signature": "ColumnType getColumnType(String columnId)", "full_signature": "public ColumnType getColumnType(String columnId)", "class_method_signature": "DataSetLookupEditor.getColumnType(String columnId)", "testcase": false, "constructor": false}, {"identifier": "getFirstGroupOp", "parameters": "()", "modifiers": "public", "return": "DataSetGroup", "signature": "DataSetGroup getFirstGroupOp()", "full_signature": "public DataSetGroup getFirstGroupOp()", "class_method_signature": "DataSetLookupEditor.getFirstGroupOp()", "testcase": false, "constructor": false}, {"identifier": "isFirstGroupOpDateBased", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstGroupOpDateBased()", "full_signature": "public boolean isFirstGroupOpDateBased()", "class_method_signature": "DataSetLookupEditor.isFirstGroupOpDateBased()", "testcase": false, "constructor": false}, {"identifier": "getFirstGroupFunctions", "parameters": "()", "modifiers": "public", "return": "List<GroupFunction>", "signature": "List<GroupFunction> getFirstGroupFunctions()", "full_signature": "public List<GroupFunction> getFirstGroupFunctions()", "class_method_signature": "DataSetLookupEditor.getFirstGroupFunctions()", "testcase": false, "constructor": false}, {"identifier": "getFirstGroupFunctionIdx", "parameters": "(GroupFunction gf)", "modifiers": "public", "return": "int", "signature": "int getFirstGroupFunctionIdx(GroupFunction gf)", "full_signature": "public int getFirstGroupFunctionIdx(GroupFunction gf)", "class_method_signature": "DataSetLookupEditor.getFirstGroupFunctionIdx(GroupFunction gf)", "testcase": false, "constructor": false}, {"identifier": "getFirstGroupColumnId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFirstGroupColumnId()", "full_signature": "public String getFirstGroupColumnId()", "class_method_signature": "DataSetLookupEditor.getFirstGroupColumnId()", "testcase": false, "constructor": false}, {"identifier": "getAvailableGroupColumnIdxs", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getAvailableGroupColumnIdxs()", "full_signature": "public List<Integer> getAvailableGroupColumnIdxs()", "class_method_signature": "DataSetLookupEditor.getAvailableGroupColumnIdxs()", "testcase": false, "constructor": false}, {"identifier": "showDataSetDefs", "parameters": "(List<DataSetDef> ds)", "modifiers": "public", "return": "void", "signature": "void showDataSetDefs(List<DataSetDef> ds)", "full_signature": "public void showDataSetDefs(List<DataSetDef> ds)", "class_method_signature": "DataSetLookupEditor.showDataSetDefs(List<DataSetDef> ds)", "testcase": false, "constructor": false}, {"identifier": "addDataSetDef", "parameters": "(DataSetDef def)", "modifiers": "public", "return": "void", "signature": "void addDataSetDef(DataSetDef def)", "full_signature": "public void addDataSetDef(DataSetDef def)", "class_method_signature": "DataSetLookupEditor.addDataSetDef(DataSetDef def)", "testcase": false, "constructor": false}, {"identifier": "removeDataSetDef", "parameters": "(DataSetDef def)", "modifiers": "public", "return": "void", "signature": "void removeDataSetDef(DataSetDef def)", "full_signature": "public void removeDataSetDef(DataSetDef def)", "class_method_signature": "DataSetLookupEditor.removeDataSetDef(DataSetDef def)", "testcase": false, "constructor": false}, {"identifier": "updateDataSetLookup", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateDataSetLookup()", "full_signature": " void updateDataSetLookup()", "class_method_signature": "DataSetLookupEditor.updateDataSetLookup()", "testcase": false, "constructor": false}, {"identifier": "updateFilterControls", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateFilterControls()", "full_signature": " void updateFilterControls()", "class_method_signature": "DataSetLookupEditor.updateFilterControls()", "testcase": false, "constructor": false}, {"identifier": "updateGroupControls", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateGroupControls()", "full_signature": " void updateGroupControls()", "class_method_signature": "DataSetLookupEditor.updateGroupControls()", "testcase": false, "constructor": false}, {"identifier": "updateColumnControls", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateColumnControls()", "full_signature": " void updateColumnControls()", "class_method_signature": "DataSetLookupEditor.updateColumnControls()", "testcase": false, "constructor": false}, {"identifier": "getGroupFunctionLastIdx", "parameters": "(List<GroupFunction> groupFunctions,\n                                String sourceId)", "modifiers": "", "return": "int", "signature": "int getGroupFunctionLastIdx(List<GroupFunction> groupFunctions,\n                                String sourceId)", "full_signature": " int getGroupFunctionLastIdx(List<GroupFunction> groupFunctions,\n                                String sourceId)", "class_method_signature": "DataSetLookupEditor.getGroupFunctionLastIdx(List<GroupFunction> groupFunctions,\n                                String sourceId)", "testcase": false, "constructor": false}, {"identifier": "getGroupFunctionColumnIdx", "parameters": "(String columnId)", "modifiers": "", "return": "int", "signature": "int getGroupFunctionColumnIdx(String columnId)", "full_signature": " int getGroupFunctionColumnIdx(String columnId)", "class_method_signature": "DataSetLookupEditor.getGroupFunctionColumnIdx(String columnId)", "testcase": false, "constructor": false}, {"identifier": "onDataSetSelected", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onDataSetSelected()", "full_signature": " void onDataSetSelected()", "class_method_signature": "DataSetLookupEditor.onDataSetSelected()", "testcase": false, "constructor": false}, {"identifier": "onGroupColumnSelected", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onGroupColumnSelected()", "full_signature": " void onGroupColumnSelected()", "class_method_signature": "DataSetLookupEditor.onGroupColumnSelected()", "testcase": false, "constructor": false}, {"identifier": "onAddColumn", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onAddColumn()", "full_signature": " void onAddColumn()", "class_method_signature": "DataSetLookupEditor.onAddColumn()", "testcase": false, "constructor": false}, {"identifier": "onFilterChanged", "parameters": "(@Observes DataSetFilterChangedEvent event)", "modifiers": "", "return": "void", "signature": "void onFilterChanged(@Observes DataSetFilterChangedEvent event)", "full_signature": " void onFilterChanged(@Observes DataSetFilterChangedEvent event)", "class_method_signature": "DataSetLookupEditor.onFilterChanged(@Observes DataSetFilterChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDateGroupChanged", "parameters": "(@Observes DataSetGroupDateChanged event)", "modifiers": "", "return": "void", "signature": "void onDateGroupChanged(@Observes DataSetGroupDateChanged event)", "full_signature": " void onDateGroupChanged(@Observes DataSetGroupDateChanged event)", "class_method_signature": "DataSetLookupEditor.onDateGroupChanged(@Observes DataSetGroupDateChanged event)", "testcase": false, "constructor": false}, {"identifier": "onColumnFunctionChanged", "parameters": "(@Observes GroupFunctionChangedEvent event)", "modifiers": "", "return": "void", "signature": "void onColumnFunctionChanged(@Observes GroupFunctionChangedEvent event)", "full_signature": " void onColumnFunctionChanged(@Observes GroupFunctionChangedEvent event)", "class_method_signature": "DataSetLookupEditor.onColumnFunctionChanged(@Observes GroupFunctionChangedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onColumnFunctionDeleted", "parameters": "(@Observes GroupFunctionDeletedEvent event)", "modifiers": "", "return": "void", "signature": "void onColumnFunctionDeleted(@Observes GroupFunctionDeletedEvent event)", "full_signature": " void onColumnFunctionDeleted(@Observes GroupFunctionDeletedEvent event)", "class_method_signature": "DataSetLookupEditor.onColumnFunctionDeleted(@Observes GroupFunctionDeletedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefRegisteredEvent", "parameters": "(@Observes DataSetDefRegisteredEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "full_signature": " void onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "class_method_signature": "DataSetLookupEditor.onDataSetDefRegisteredEvent(@Observes DataSetDefRegisteredEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefModifiedEvent", "parameters": "(@Observes DataSetDefModifiedEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "full_signature": " void onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "class_method_signature": "DataSetLookupEditor.onDataSetDefModifiedEvent(@Observes DataSetDefModifiedEvent event)", "testcase": false, "constructor": false}, {"identifier": "onDataSetDefRemovedEvent", "parameters": "(@Observes DataSetDefRemovedEvent event)", "modifiers": "", "return": "void", "signature": "void onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "full_signature": " void onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "class_method_signature": "DataSetLookupEditor.onDataSetDefRemovedEvent(@Observes DataSetDefRemovedEvent event)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DataSetLookupEditor.java"}, "focal_method": {"identifier": "init", "parameters": "(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "modifiers": "public", "return": "void", "body": "public void init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup) {\n        this.dataSetLookup = dataSetLookup;\n        this.lookupConstraints = lookupConstraints;\n        this.view.clearAll();\n        this.clientServices.getPublicDataSetDefs(new RemoteCallback<List<DataSetDef>>() {\n            public void callback(List<DataSetDef> dataSetDefs) {\n                showDataSetDefs(dataSetDefs);\n                if (dataSetLookup != null && dataSetLookup.getDataSetUUID() != null) {\n                    fetchMetadata(dataSetLookup.getDataSetUUID(),\n                                  new RemoteCallback<DataSetMetadata>() {\n                                      public void callback(DataSetMetadata metadata) {\n                                          updateDataSetLookup();\n                                      }\n                                  });\n                }\n            }\n        });\n    }", "signature": "void init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "full_signature": "public void init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "class_method_signature": "DataSetLookupEditor.init(DataSetLookupConstraints lookupConstraints,\n                     final DataSetLookup dataSetLookup)", "testcase": false, "constructor": false, "invocations": ["clearAll", "getPublicDataSetDefs", "showDataSetDefs", "getDataSetUUID", "fetchMetadata", "getDataSetUUID", "updateDataSetLookup"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}