{"test_class": {"identifier": "NumberTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NumberType type = new NumberType();", "modifier": "private", "type": "NumberType", "declarator": "type = new NumberType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/number/NumberTypeTest.java"}, "test_case": {"identifier": "testEncode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncode() {\n\n        // przypadki testowe\n        Object[][] testCases = {\n            {num(\"-100\"), \"-100\"},\n            {num(\"-100.00\"), \"-100.00\"},\n            {num(\"0.0\"), \"0.0\"},\n            {num(\".0\"), \"0.0\"},\n            {num(\".000\"), \"0.000\"},\n            {num(\"12.3456789\"), \"12.3456789\"},\n            {num(null), null}\n        };\n\n        // wykonanie testow\n        for (Object[] testCase : testCases) {\n            NumberHolder value = (NumberHolder) testCase[0];\n            String expectedResult = (String) testCase[1];\n\n            assertEquals(expectedResult, type.encode(value));\n        }\n    }", "signature": "void testEncode()", "full_signature": "@Test public void testEncode()", "class_method_signature": "NumberTypeTest.testEncode()", "testcase": true, "constructor": false, "invocations": ["num", "num", "num", "num", "num", "num", "num", "assertEquals", "encode"]}, "focal_class": {"identifier": "NumberType", "superclass": "", "interfaces": "implements Type<NumberHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"number\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"number\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "encode", "parameters": "(NumberHolder value)", "modifiers": "@Override public", "return": "String", "signature": "String encode(NumberHolder value)", "full_signature": "@Override public String encode(NumberHolder value)", "class_method_signature": "NumberType.encode(NumberHolder value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "NumberHolder", "signature": "NumberHolder decode(String text)", "full_signature": "@Override public NumberHolder decode(String text)", "class_method_signature": "NumberType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "NumberHolder", "signature": "NumberHolder convert(Object obj)", "full_signature": "@Override public NumberHolder convert(Object obj)", "class_method_signature": "NumberType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "NumberHolder[]", "signature": "NumberHolder[] newArray(int size)", "full_signature": "@Override public NumberHolder[] newArray(int size)", "class_method_signature": "NumberType.newArray(int size)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str)", "modifiers": "private", "return": "BigDecimal", "signature": "BigDecimal parse(String str)", "full_signature": "private BigDecimal parse(String str)", "class_method_signature": "NumberType.parse(String str)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/number/NumberType.java"}, "focal_method": {"identifier": "encode", "parameters": "(NumberHolder value)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encode(NumberHolder value) {\n        return value.getString();\n    }", "signature": "String encode(NumberHolder value)", "full_signature": "@Override public String encode(NumberHolder value)", "class_method_signature": "NumberType.encode(NumberHolder value)", "testcase": false, "constructor": false, "invocations": ["getString"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}