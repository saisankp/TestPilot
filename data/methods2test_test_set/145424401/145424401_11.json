{"test_class": {"identifier": "TenantControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MediaType contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"));", "modifier": "private", "type": "MediaType", "declarator": "contentType =\n      new MediaType(\n          MediaType.APPLICATION_JSON.getType(),\n          MediaType.APPLICATION_JSON.getSubtype(),\n          Charset.forName(\"utf8\"))", "var_name": "contentType"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private HttpMessageConverter<?> mappingJackson2HttpMessageConverter;", "modifier": "private", "type": "HttpMessageConverter<?>", "declarator": "mappingJackson2HttpMessageConverter", "var_name": "mappingJackson2HttpMessageConverter"}, {"original_string": "public static final String TEST_DEFAULT_SPACE = \"public\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_SPACE = \"public\"", "var_name": "TEST_DEFAULT_SPACE"}, {"original_string": "public static final String TEST_DEFAULT_TENANT = \"default\";", "modifier": "public static final", "type": "String", "declarator": "TEST_DEFAULT_TENANT = \"default\"", "var_name": "TEST_DEFAULT_TENANT"}, {"original_string": "@Autowired private TenantRepository tenantRepository;", "modifier": "@Autowired private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "@Autowired private WebApplicationContext webApplicationContext;", "modifier": "@Autowired private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/rest/TenantControllerTest.java"}, "test_case": {"identifier": "testGetTenant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetTenant() throws Exception {\n\n    createDefaultTenant();\n\n    // Read tenant from repo by token\n    final Tenant tenant =\n        TenantRepository.FILTER.findOne(\n            this.tenantRepository.findBySecondaryKey(TEST_DEFAULT_TENANT));\n\n    // Read default tenant\n    final Tenant default_tenant = this.tenantRepository.findDefault();\n\n    // Default tenant exists\n    MockHttpServletRequestBuilder opts_builder = options(\"/tenants/\" + TEST_DEFAULT_TENANT);\n    mockMvc.perform(opts_builder).andExpect(status().isOk());\n\n    // Default tenant members\n    MockHttpServletRequestBuilder get_builder =\n        get(\"/tenants/\" + TEST_DEFAULT_TENANT).accept(MediaType.APPLICATION_JSON);\n    mockMvc\n        .perform(get_builder)\n        .andExpect(status().isOk())\n        .andExpect(content().contentType(contentType))\n        //\t.andExpect(content().json(JacksonUtil.asJsonString(default_tenant))) //the deserialized\n        // tenant does not match the one read from the db as the spaces are not transfered\n        .andExpect(jsonPath(\"$.default\", is(true)))\n        .andExpect(jsonPath(\"$.spaces\").doesNotExist())\n        .andExpect(jsonPath(\"$.tenantToken\", is(TEST_DEFAULT_TENANT)))\n        .andExpect(jsonPath(\"$.tenantName\", is(TEST_DEFAULT_TENANT)));\n  }", "signature": "void testGetTenant()", "full_signature": "@Test public void testGetTenant()", "class_method_signature": "TenantControllerTest.testGetTenant()", "testcase": true, "constructor": false, "invocations": ["createDefaultTenant", "findOne", "findBySecondaryKey", "findDefault", "options", "andExpect", "perform", "isOk", "status", "accept", "get", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "perform", "isOk", "status", "contentType", "content", "jsonPath", "is", "doesNotExist", "jsonPath", "jsonPath", "is", "jsonPath", "is"]}, "focal_class": {"identifier": "TenantController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(TenantController.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TenantController.class)", "var_name": "log"}, {"original_string": "private TenantRepository tenantRepository;", "modifier": "private", "type": "TenantRepository", "declarator": "tenantRepository", "var_name": "tenantRepository"}, {"original_string": "private final Filter cacheFilter;", "modifier": "private final", "type": "Filter", "declarator": "cacheFilter", "var_name": "cacheFilter"}], "methods": [{"identifier": "TenantController", "parameters": "(TenantRepository tenantRepository, Filter cacheFilter)", "modifiers": "@Autowired", "return": "", "signature": " TenantController(TenantRepository tenantRepository, Filter cacheFilter)", "full_signature": "@Autowired  TenantController(TenantRepository tenantRepository, Filter cacheFilter)", "class_method_signature": "TenantController.TenantController(TenantRepository tenantRepository, Filter cacheFilter)", "testcase": false, "constructor": true}, {"identifier": "getAllTenants", "parameters": "()", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Iterable<Tenant>>", "signature": "ResponseEntity<Iterable<Tenant>> getAllTenants()", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Iterable<Tenant>> getAllTenants()", "class_method_signature": "TenantController.getAllTenants()", "testcase": false, "constructor": false}, {"identifier": "getDefaultTenant", "parameters": "()", "modifiers": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> getDefaultTenant()", "full_signature": "@RequestMapping( value = \"default\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Tenant> getDefaultTenant()", "class_method_signature": "TenantController.getDefaultTenant()", "testcase": false, "constructor": false}, {"identifier": "isTenantExisting", "parameters": "(@PathVariable String token)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> isTenantExisting(@PathVariable String token)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.OPTIONS) @JsonView(Views.Default.class) public ResponseEntity<Tenant> isTenantExisting(@PathVariable String token)", "class_method_signature": "TenantController.isTenantExisting(@PathVariable String token)", "testcase": false, "constructor": false}, {"identifier": "createTenant", "parameters": "(@RequestBody Tenant tenant)", "modifiers": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> createTenant(@RequestBody Tenant tenant)", "full_signature": "@RequestMapping( value = \"\", method = RequestMethod.POST, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Tenant> createTenant(@RequestBody Tenant tenant)", "class_method_signature": "TenantController.createTenant(@RequestBody Tenant tenant)", "testcase": false, "constructor": false}, {"identifier": "getTenant", "parameters": "(@PathVariable String token)", "modifiers": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> getTenant(@PathVariable String token)", "full_signature": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Tenant> getTenant(@PathVariable String token)", "class_method_signature": "TenantController.getTenant(@PathVariable String token)", "testcase": false, "constructor": false}, {"identifier": "modifyTenant", "parameters": "(\n      @PathVariable String token, @RequestBody Tenant new_tenant)", "modifiers": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> modifyTenant(\n      @PathVariable String token, @RequestBody Tenant new_tenant)", "full_signature": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.PUT, consumes = {\"application/json;charset=UTF-8\"}, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Tenant> modifyTenant(\n      @PathVariable String token, @RequestBody Tenant new_tenant)", "class_method_signature": "TenantController.modifyTenant(\n      @PathVariable String token, @RequestBody Tenant new_tenant)", "testcase": false, "constructor": false}, {"identifier": "deleteTenant", "parameters": "(@PathVariable String token)", "modifiers": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "signature": "ResponseEntity<Tenant> deleteTenant(@PathVariable String token)", "full_signature": "@RequestMapping(value = \"/{token:.+}\", method = RequestMethod.DELETE) @JsonView(Views.Default.class) public ResponseEntity<Tenant> deleteTenant(@PathVariable String token)", "class_method_signature": "TenantController.deleteTenant(@PathVariable String token)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/rest/TenantController.java"}, "focal_method": {"identifier": "getTenant", "parameters": "(@PathVariable String token)", "modifiers": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public", "return": "ResponseEntity<Tenant>", "body": "@RequestMapping(\n      value = \"/{token:.+}\",\n      method = RequestMethod.GET,\n      produces = {\"application/json;charset=UTF-8\"})\n  @JsonView(Views.Default.class)\n  public ResponseEntity<Tenant> getTenant(@PathVariable String token) {\n    try {\n      // Load existing tenant\n      try {\n        final Tenant tenant =\n            TenantRepository.FILTER.findOne(this.tenantRepository.findBySecondaryKey(token));\n        return new ResponseEntity<Tenant>(tenant, HttpStatus.OK);\n      } catch (EntityNotFoundException enfe) {\n        return new ResponseEntity<Tenant>(HttpStatus.NOT_FOUND);\n      }\n    } catch (Exception enfe) {\n      return new ResponseEntity<Tenant>(HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }", "signature": "ResponseEntity<Tenant> getTenant(@PathVariable String token)", "full_signature": "@RequestMapping( value = \"/{token:.+}\", method = RequestMethod.GET, produces = {\"application/json;charset=UTF-8\"}) @JsonView(Views.Default.class) public ResponseEntity<Tenant> getTenant(@PathVariable String token)", "class_method_signature": "TenantController.getTenant(@PathVariable String token)", "testcase": false, "constructor": false, "invocations": ["findOne", "findBySecondaryKey"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}