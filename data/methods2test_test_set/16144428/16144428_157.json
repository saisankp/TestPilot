{"test_class": {"identifier": "LexemeDocumentImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new DatamodelMapper(\"http://example.com/entity/\");", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new DatamodelMapper(\"http://example.com/entity/\")", "var_name": "mapper"}, {"original_string": "private final LexemeIdValue lid = new LexemeIdValueImpl(\"L42\", \"http://example.com/entity/\");", "modifier": "private final", "type": "LexemeIdValue", "declarator": "lid = new LexemeIdValueImpl(\"L42\", \"http://example.com/entity/\")", "var_name": "lid"}, {"original_string": "private final ItemIdValue lexCat = new ItemIdValueImpl(\"Q1\", \"http://example.com/entity/\");", "modifier": "private final", "type": "ItemIdValue", "declarator": "lexCat = new ItemIdValueImpl(\"Q1\", \"http://example.com/entity/\")", "var_name": "lexCat"}, {"original_string": "private final ItemIdValue language = new ItemIdValueImpl(\"Q2\", \"http://example.com/entity/\");", "modifier": "private final", "type": "ItemIdValue", "declarator": "language = new ItemIdValueImpl(\"Q2\", \"http://example.com/entity/\")", "var_name": "language"}, {"original_string": "private final Statement s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), lid);", "modifier": "private final", "type": "Statement", "declarator": "s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), lid)", "var_name": "s"}, {"original_string": "private final List<StatementGroup> statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t);", "modifier": "private final", "type": "List<StatementGroup>", "declarator": "statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t)", "var_name": "statementGroups"}, {"original_string": "private final MonolingualTextValue lemma = new TermImpl(\"en\", \"lemma\");", "modifier": "private final", "type": "MonolingualTextValue", "declarator": "lemma = new TermImpl(\"en\", \"lemma\")", "var_name": "lemma"}, {"original_string": "private final List<MonolingualTextValue> lemmaList = Collections.singletonList(lemma);", "modifier": "private final", "type": "List<MonolingualTextValue>", "declarator": "lemmaList = Collections.singletonList(lemma)", "var_name": "lemmaList"}, {"original_string": "private final FormDocument form = new FormDocumentImpl(\n\t\t\tnew FormIdValueImpl(\"L42-F1\", \"http://example.com/entity/\"),\n\t\t\tCollections.singletonList(new TermImpl(\"en\", \"foo\")),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList(),\n\t\t\t0\n\t);", "modifier": "private final", "type": "FormDocument", "declarator": "form = new FormDocumentImpl(\n\t\t\tnew FormIdValueImpl(\"L42-F1\", \"http://example.com/entity/\"),\n\t\t\tCollections.singletonList(new TermImpl(\"en\", \"foo\")),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList(),\n\t\t\t0\n\t)", "var_name": "form"}, {"original_string": "private final List<FormDocument> forms = Collections.singletonList(form);", "modifier": "private final", "type": "List<FormDocument>", "declarator": "forms = Collections.singletonList(form)", "var_name": "forms"}, {"original_string": "private final SenseDocument sense = new SenseDocumentImpl(\n\t\t\tnew SenseIdValueImpl(\"L42-S1\", \"http://example.com/entity/\"),\n\t\t\tCollections.singletonList(new TermImpl(\"en\", \"foo meaning\")),\n\t\t\tCollections.emptyList(),\n\t\t\t0\n\t);", "modifier": "private final", "type": "SenseDocument", "declarator": "sense = new SenseDocumentImpl(\n\t\t\tnew SenseIdValueImpl(\"L42-S1\", \"http://example.com/entity/\"),\n\t\t\tCollections.singletonList(new TermImpl(\"en\", \"foo meaning\")),\n\t\t\tCollections.emptyList(),\n\t\t\t0\n\t)", "var_name": "sense"}, {"original_string": "private final List<SenseDocument> senses = Collections.singletonList(sense);", "modifier": "private final", "type": "List<SenseDocument>", "declarator": "senses = Collections.singletonList(sense)", "var_name": "senses"}, {"original_string": "private final LexemeDocument ld1 = new LexemeDocumentImpl(lid, lexCat, language, lemmaList, statementGroups, forms, senses, 1234);", "modifier": "private final", "type": "LexemeDocument", "declarator": "ld1 = new LexemeDocumentImpl(lid, lexCat, language, lemmaList, statementGroups, forms, senses, 1234)", "var_name": "ld1"}, {"original_string": "private final LexemeDocument ld2 = new LexemeDocumentImpl(lid, lexCat, language, lemmaList, statementGroups, forms, senses, 1234);", "modifier": "private final", "type": "LexemeDocument", "declarator": "ld2 = new LexemeDocumentImpl(lid, lexCat, language, lemmaList, statementGroups, forms, senses, 1234)", "var_name": "ld2"}, {"original_string": "private final String JSON_LEXEME = \"{\\\"type\\\":\\\"lexeme\\\",\\\"id\\\":\\\"L42\\\",\\\"lexicalCategory\\\":\\\"Q1\\\",\\\"language\\\":\\\"Q2\\\",\\\"lemmas\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"lemma\\\"}},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"forms\\\":[{\\\"type\\\":\\\"form\\\",\\\"id\\\":\\\"L42-F1\\\",\\\"representations\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"foo\\\"}},\\\"grammaticalFeatures\\\":[],\\\"claims\\\":{}}],\\\"senses\\\":[{\\\"type\\\":\\\"sense\\\",\\\"id\\\":\\\"L42-S1\\\",\\\"glosses\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"foo meaning\\\"}},\\\"claims\\\":{}}],\\\"lastrevid\\\":1234}\";", "modifier": "private final", "type": "String", "declarator": "JSON_LEXEME = \"{\\\"type\\\":\\\"lexeme\\\",\\\"id\\\":\\\"L42\\\",\\\"lexicalCategory\\\":\\\"Q1\\\",\\\"language\\\":\\\"Q2\\\",\\\"lemmas\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"lemma\\\"}},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"forms\\\":[{\\\"type\\\":\\\"form\\\",\\\"id\\\":\\\"L42-F1\\\",\\\"representations\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"foo\\\"}},\\\"grammaticalFeatures\\\":[],\\\"claims\\\":{}}],\\\"senses\\\":[{\\\"type\\\":\\\"sense\\\",\\\"id\\\":\\\"L42-S1\\\",\\\"glosses\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"foo meaning\\\"}},\\\"claims\\\":{}}],\\\"lastrevid\\\":1234}\"", "var_name": "JSON_LEXEME"}], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImplTest.java"}, "test_case": {"identifier": "testWithLexicalCategory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithLexicalCategory() {\n\t\tItemIdValue newLexicalCategory = new ItemIdValueImpl(\"Q142\", \"http://example.com/entity/\");\n\t\tLexemeDocument withLexicalCategory = ld1.withLexicalCategory(newLexicalCategory);\n\t\tassertEquals(newLexicalCategory, withLexicalCategory.getLexicalCategory());\n\t}", "signature": "void testWithLexicalCategory()", "full_signature": "@Test public void testWithLexicalCategory()", "class_method_signature": "LexemeDocumentImplTest.testWithLexicalCategory()", "testcase": true, "constructor": false, "invocations": ["withLexicalCategory", "assertEquals", "getLexicalCategory"]}, "focal_class": {"identifier": "LexemeDocumentImpl", "superclass": "extends StatementDocumentImpl", "interfaces": "implements LexemeDocument", "fields": [{"original_string": "private final ItemIdValue lexicalCategory;", "modifier": "private final", "type": "ItemIdValue", "declarator": "lexicalCategory", "var_name": "lexicalCategory"}, {"original_string": "private final ItemIdValue language;", "modifier": "private final", "type": "ItemIdValue", "declarator": "language", "var_name": "language"}, {"original_string": "private final Map<String,MonolingualTextValue> lemmas;", "modifier": "private final", "type": "Map<String,MonolingualTextValue>", "declarator": "lemmas", "var_name": "lemmas"}, {"original_string": "private final List<FormDocument> forms;", "modifier": "private final", "type": "List<FormDocument>", "declarator": "forms", "var_name": "forms"}, {"original_string": "private final List<SenseDocument> senses;", "modifier": "private final", "type": "List<SenseDocument>", "declarator": "senses", "var_name": "senses"}, {"original_string": "private int nextFormId;", "modifier": "private", "type": "int", "declarator": "nextFormId", "var_name": "nextFormId"}, {"original_string": "private int nextSenseId;", "modifier": "private", "type": "int", "declarator": "nextSenseId", "var_name": "nextSenseId"}, {"original_string": "private static final Pattern CHILD_ID_PATTERN = Pattern.compile(\"^L\\\\d+-[FS]([1-9]\\\\d*)$\");", "modifier": "private static final", "type": "Pattern", "declarator": "CHILD_ID_PATTERN = Pattern.compile(\"^L\\\\d+-[FS]([1-9]\\\\d*)$\")", "var_name": "CHILD_ID_PATTERN"}], "methods": [{"identifier": "LexemeDocumentImpl", "parameters": "(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tList<MonolingualTextValue> lemmas,\n\t\t\tList<StatementGroup> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId)", "modifiers": "", "return": "", "signature": " LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tList<MonolingualTextValue> lemmas,\n\t\t\tList<StatementGroup> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId)", "full_signature": "  LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tList<MonolingualTextValue> lemmas,\n\t\t\tList<StatementGroup> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId)", "class_method_signature": "LexemeDocumentImpl.LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tList<MonolingualTextValue> lemmas,\n\t\t\tList<StatementGroup> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId)", "testcase": false, "constructor": true}, {"identifier": "LexemeDocumentImpl", "parameters": "(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"lexicalCategory\") String lexicalCategory,\n\t\t\t@JsonProperty(\"language\") String language,\n\t\t\t@JsonProperty(\"lemmas\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> lemmas,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"forms\") @JsonDeserialize(contentAs=FormDocumentImpl.class) List<FormDocument> forms,\n\t\t\t@JsonProperty(\"senses\") @JsonDeserialize(contentAs=SenseDocumentImpl.class) List<SenseDocument> senses,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "modifiers": "@JsonCreator", "return": "", "signature": " LexemeDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"lexicalCategory\") String lexicalCategory,\n\t\t\t@JsonProperty(\"language\") String language,\n\t\t\t@JsonProperty(\"lemmas\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> lemmas,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"forms\") @JsonDeserialize(contentAs=FormDocumentImpl.class) List<FormDocument> forms,\n\t\t\t@JsonProperty(\"senses\") @JsonDeserialize(contentAs=SenseDocumentImpl.class) List<SenseDocument> senses,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "full_signature": "@JsonCreator  LexemeDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"lexicalCategory\") String lexicalCategory,\n\t\t\t@JsonProperty(\"language\") String language,\n\t\t\t@JsonProperty(\"lemmas\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> lemmas,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"forms\") @JsonDeserialize(contentAs=FormDocumentImpl.class) List<FormDocument> forms,\n\t\t\t@JsonProperty(\"senses\") @JsonDeserialize(contentAs=SenseDocumentImpl.class) List<SenseDocument> senses,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "class_method_signature": "LexemeDocumentImpl.LexemeDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"lexicalCategory\") String lexicalCategory,\n\t\t\t@JsonProperty(\"language\") String language,\n\t\t\t@JsonProperty(\"lemmas\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> lemmas,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"forms\") @JsonDeserialize(contentAs=FormDocumentImpl.class) List<FormDocument> forms,\n\t\t\t@JsonProperty(\"senses\") @JsonDeserialize(contentAs=SenseDocumentImpl.class) List<SenseDocument> senses,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "testcase": false, "constructor": true}, {"identifier": "LexemeDocumentImpl", "parameters": "(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tMap<String, MonolingualTextValue> lemmas,\n\t\t\tMap<String, List<Statement>> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId,\n\t\t\tint nextFormId,\n\t\t\tint nextSenseId)", "modifiers": "private", "return": "", "signature": " LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tMap<String, MonolingualTextValue> lemmas,\n\t\t\tMap<String, List<Statement>> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId,\n\t\t\tint nextFormId,\n\t\t\tint nextSenseId)", "full_signature": "private  LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tMap<String, MonolingualTextValue> lemmas,\n\t\t\tMap<String, List<Statement>> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId,\n\t\t\tint nextFormId,\n\t\t\tint nextSenseId)", "class_method_signature": "LexemeDocumentImpl.LexemeDocumentImpl(\n\t\t\tLexemeIdValue id,\n\t\t\tItemIdValue lexicalCategory,\n\t\t\tItemIdValue language,\n\t\t\tMap<String, MonolingualTextValue> lemmas,\n\t\t\tMap<String, List<Statement>> statements,\n\t\t\tList<FormDocument> forms,\n\t\t\tList<SenseDocument> senses,\n\t\t\tlong revisionId,\n\t\t\tint nextFormId,\n\t\t\tint nextSenseId)", "testcase": false, "constructor": true}, {"identifier": "constructTermMap", "parameters": "(List<MonolingualTextValue> terms)", "modifiers": "private static", "return": "Map<String, MonolingualTextValue>", "signature": "Map<String, MonolingualTextValue> constructTermMap(List<MonolingualTextValue> terms)", "full_signature": "private static Map<String, MonolingualTextValue> constructTermMap(List<MonolingualTextValue> terms)", "class_method_signature": "LexemeDocumentImpl.constructTermMap(List<MonolingualTextValue> terms)", "testcase": false, "constructor": false}, {"identifier": "toTerm", "parameters": "(MonolingualTextValue term)", "modifiers": "private static", "return": "MonolingualTextValue", "signature": "MonolingualTextValue toTerm(MonolingualTextValue term)", "full_signature": "private static MonolingualTextValue toTerm(MonolingualTextValue term)", "class_method_signature": "LexemeDocumentImpl.toTerm(MonolingualTextValue term)", "testcase": false, "constructor": false}, {"identifier": "nextChildEntityId", "parameters": "(List<? extends EntityDocument> childrenDocuments)", "modifiers": "private static", "return": "int", "signature": "int nextChildEntityId(List<? extends EntityDocument> childrenDocuments)", "full_signature": "private static int nextChildEntityId(List<? extends EntityDocument> childrenDocuments)", "class_method_signature": "LexemeDocumentImpl.nextChildEntityId(List<? extends EntityDocument> childrenDocuments)", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "LexemeIdValue", "signature": "LexemeIdValue getEntityId()", "full_signature": "@JsonIgnore @Override public LexemeIdValue getEntityId()", "class_method_signature": "LexemeDocumentImpl.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getLexicalCategory", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "ItemIdValue", "signature": "ItemIdValue getLexicalCategory()", "full_signature": "@JsonIgnore @Override public ItemIdValue getLexicalCategory()", "class_method_signature": "LexemeDocumentImpl.getLexicalCategory()", "testcase": false, "constructor": false}, {"identifier": "getJsonLexicalCategory", "parameters": "()", "modifiers": "@JsonProperty(\"lexicalCategory\")", "return": "String", "signature": "String getJsonLexicalCategory()", "full_signature": "@JsonProperty(\"lexicalCategory\") String getJsonLexicalCategory()", "class_method_signature": "LexemeDocumentImpl.getJsonLexicalCategory()", "testcase": false, "constructor": false}, {"identifier": "getLanguage", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "ItemIdValue", "signature": "ItemIdValue getLanguage()", "full_signature": "@JsonIgnore @Override public ItemIdValue getLanguage()", "class_method_signature": "LexemeDocumentImpl.getLanguage()", "testcase": false, "constructor": false}, {"identifier": "getJsonLanguage", "parameters": "()", "modifiers": "@JsonProperty(\"language\")", "return": "String", "signature": "String getJsonLanguage()", "full_signature": "@JsonProperty(\"language\") String getJsonLanguage()", "class_method_signature": "LexemeDocumentImpl.getJsonLanguage()", "testcase": false, "constructor": false}, {"identifier": "getLemmas", "parameters": "()", "modifiers": "@JsonProperty(\"lemmas\") @Override public", "return": "Map<String, MonolingualTextValue>", "signature": "Map<String, MonolingualTextValue> getLemmas()", "full_signature": "@JsonProperty(\"lemmas\") @Override public Map<String, MonolingualTextValue> getLemmas()", "class_method_signature": "LexemeDocumentImpl.getLemmas()", "testcase": false, "constructor": false}, {"identifier": "getForms", "parameters": "()", "modifiers": "@JsonProperty(\"forms\") @Override public", "return": "List<FormDocument>", "signature": "List<FormDocument> getForms()", "full_signature": "@JsonProperty(\"forms\") @Override public List<FormDocument> getForms()", "class_method_signature": "LexemeDocumentImpl.getForms()", "testcase": false, "constructor": false}, {"identifier": "getSenses", "parameters": "()", "modifiers": "@JsonProperty(\"senses\") @Override public", "return": "List<SenseDocument>", "signature": "List<SenseDocument> getSenses()", "full_signature": "@JsonProperty(\"senses\") @Override public List<SenseDocument> getSenses()", "class_method_signature": "LexemeDocumentImpl.getSenses()", "testcase": false, "constructor": false}, {"identifier": "getForm", "parameters": "(FormIdValue formId)", "modifiers": "@JsonIgnore @Override public", "return": "FormDocument", "signature": "FormDocument getForm(FormIdValue formId)", "full_signature": "@JsonIgnore @Override public FormDocument getForm(FormIdValue formId)", "class_method_signature": "LexemeDocumentImpl.getForm(FormIdValue formId)", "testcase": false, "constructor": false}, {"identifier": "getSense", "parameters": "(SenseIdValue senseId)", "modifiers": "@JsonIgnore @Override public", "return": "SenseDocument", "signature": "SenseDocument getSense(SenseIdValue senseId)", "full_signature": "@JsonIgnore @Override public SenseDocument getSense(SenseIdValue senseId)", "class_method_signature": "LexemeDocumentImpl.getSense(SenseIdValue senseId)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LexemeDocumentImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "LexemeDocumentImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LexemeDocumentImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "withLexicalCategory", "parameters": "(ItemIdValue newLexicalCategory)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withLexicalCategory(ItemIdValue newLexicalCategory)", "full_signature": "@Override public LexemeDocument withLexicalCategory(ItemIdValue newLexicalCategory)", "class_method_signature": "LexemeDocumentImpl.withLexicalCategory(ItemIdValue newLexicalCategory)", "testcase": false, "constructor": false}, {"identifier": "withLanguage", "parameters": "(ItemIdValue newLanguage)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withLanguage(ItemIdValue newLanguage)", "full_signature": "@Override public LexemeDocument withLanguage(ItemIdValue newLanguage)", "class_method_signature": "LexemeDocumentImpl.withLanguage(ItemIdValue newLanguage)", "testcase": false, "constructor": false}, {"identifier": "withLemma", "parameters": "(MonolingualTextValue lemma)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withLemma(MonolingualTextValue lemma)", "full_signature": "@Override public LexemeDocument withLemma(MonolingualTextValue lemma)", "class_method_signature": "LexemeDocumentImpl.withLemma(MonolingualTextValue lemma)", "testcase": false, "constructor": false}, {"identifier": "withStatement", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withStatement(Statement statement)", "full_signature": "@Override public LexemeDocument withStatement(Statement statement)", "class_method_signature": "LexemeDocumentImpl.withStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "withoutStatementIds", "parameters": "(Set<String> statementIds)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withoutStatementIds(Set<String> statementIds)", "full_signature": "@Override public LexemeDocument withoutStatementIds(Set<String> statementIds)", "class_method_signature": "LexemeDocumentImpl.withoutStatementIds(Set<String> statementIds)", "testcase": false, "constructor": false}, {"identifier": "createForm", "parameters": "(List<MonolingualTextValue> representations)", "modifiers": "@Override public", "return": "FormDocument", "signature": "FormDocument createForm(List<MonolingualTextValue> representations)", "full_signature": "@Override public FormDocument createForm(List<MonolingualTextValue> representations)", "class_method_signature": "LexemeDocumentImpl.createForm(List<MonolingualTextValue> representations)", "testcase": false, "constructor": false}, {"identifier": "withForm", "parameters": "(FormDocument form)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withForm(FormDocument form)", "full_signature": "@Override public LexemeDocument withForm(FormDocument form)", "class_method_signature": "LexemeDocumentImpl.withForm(FormDocument form)", "testcase": false, "constructor": false}, {"identifier": "createSense", "parameters": "(List<MonolingualTextValue> glosses)", "modifiers": "@Override public", "return": "SenseDocument", "signature": "SenseDocument createSense(List<MonolingualTextValue> glosses)", "full_signature": "@Override public SenseDocument createSense(List<MonolingualTextValue> glosses)", "class_method_signature": "LexemeDocumentImpl.createSense(List<MonolingualTextValue> glosses)", "testcase": false, "constructor": false}, {"identifier": "withSense", "parameters": "(SenseDocument sense)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withSense(SenseDocument sense)", "full_signature": "@Override public LexemeDocument withSense(SenseDocument sense)", "class_method_signature": "LexemeDocumentImpl.withSense(SenseDocument sense)", "testcase": false, "constructor": false}, {"identifier": "withRevisionId", "parameters": "(long newRevisionId)", "modifiers": "@Override public", "return": "LexemeDocument", "signature": "LexemeDocument withRevisionId(long newRevisionId)", "full_signature": "@Override public LexemeDocument withRevisionId(long newRevisionId)", "class_method_signature": "LexemeDocumentImpl.withRevisionId(long newRevisionId)", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/implementation/LexemeDocumentImpl.java"}, "focal_method": {"identifier": "withLexicalCategory", "parameters": "(ItemIdValue newLexicalCategory)", "modifiers": "@Override public", "return": "LexemeDocument", "body": "@Override\n\tpublic LexemeDocument withLexicalCategory(ItemIdValue newLexicalCategory) {\n\t\treturn new LexemeDocumentImpl(getEntityId(), newLexicalCategory,\n\t\t\t\tlanguage, lemmas, claims, forms, senses,\n\t\t\t\trevisionId, nextFormId, nextSenseId);\n\t}", "signature": "LexemeDocument withLexicalCategory(ItemIdValue newLexicalCategory)", "full_signature": "@Override public LexemeDocument withLexicalCategory(ItemIdValue newLexicalCategory)", "class_method_signature": "LexemeDocumentImpl.withLexicalCategory(ItemIdValue newLexicalCategory)", "testcase": false, "constructor": false, "invocations": ["getEntityId"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}