{"test_class": {"identifier": "StructuredLayoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOPIC = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "private static final Level LOG_LEVEL = Level.INFO;", "modifier": "private static final", "type": "Level", "declarator": "LOG_LEVEL = Level.INFO", "var_name": "LOG_LEVEL"}, {"original_string": "private static final String LOGGER_NAME = \"foo.bar\";", "modifier": "private static final", "type": "String", "declarator": "LOGGER_NAME = \"foo.bar\"", "var_name": "LOGGER_NAME"}, {"original_string": "private static final long LOG_TIME_MS = 123456L;", "modifier": "private static final", "type": "long", "declarator": "LOG_TIME_MS = 123456L", "var_name": "LOG_TIME_MS"}, {"original_string": "private static final byte[] SERIALIZED_MSG = \"serialized\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "SERIALIZED_MSG = \"serialized\".getBytes()", "var_name": "SERIALIZED_MSG"}, {"original_string": "@Mock\n  private Function<Struct, byte[]> converter;", "modifier": "@Mock\n  private", "type": "Function<Struct, byte[]>", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Mock\n  private LogEvent logEvent;", "modifier": "@Mock\n  private", "type": "LogEvent", "declarator": "logEvent", "var_name": "logEvent"}, {"original_string": "@Mock\n  private Message log4jMessage;", "modifier": "@Mock\n  private", "type": "Message", "declarator": "log4jMessage", "var_name": "log4jMessage"}, {"original_string": "@Mock\n  private LogRecordBuilder<Struct> builder;", "modifier": "@Mock\n  private", "type": "LogRecordBuilder<Struct>", "declarator": "builder", "var_name": "builder"}, {"original_string": "@Mock\n  private StructuredLogMessage logMessage;", "modifier": "@Mock\n  private", "type": "StructuredLogMessage", "declarator": "logMessage", "var_name": "logMessage"}, {"original_string": "@Mock\n  private Schema schema;", "modifier": "@Mock\n  private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "@Mock\n  private Struct struct;", "modifier": "@Mock\n  private", "type": "Struct", "declarator": "struct", "var_name": "struct"}, {"original_string": "private SchemaAndValue schemaAndValue;", "modifier": "private", "type": "SchemaAndValue", "declarator": "schemaAndValue", "var_name": "schemaAndValue"}, {"original_string": "private StructuredLayout layout;", "modifier": "private", "type": "StructuredLayout", "declarator": "layout", "var_name": "layout"}, {"original_string": "@Rule\n  public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n  public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n  public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}], "file": "log4j2-extensions/src/test/java/io/confluent/common/logging/log4j2/StructuredLayoutTest.java"}, "test_case": {"identifier": "shouldSerializeMessageCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSerializeMessageCorrectly() {\n    // Given:\n    when(log4jMessage.getParameters()).thenReturn(new Object[]{logMessage});\n    final Schema logSchema = mock(Schema.class);\n    final Struct logRecord = mock(Struct.class);\n    when(logRecord.schema()).thenReturn(logSchema);\n    when(builder.build()).thenReturn(logRecord);\n\n    // When:\n    final byte[] serialized = layout.toByteArray(logEvent);\n\n    // Then:\n    verifyBeforeBuild(builder, io -> io.verify(builder).withLoggerName(LOGGER_NAME));\n    verifyBeforeBuild(builder, io -> io.verify(builder).withTimeMs(LOG_TIME_MS));\n    verifyBeforeBuild(builder, io -> io.verify(builder).withLevel(LOG_LEVEL.name()));\n    verifyBeforeBuild(\n        builder,\n        io -> io.verify(builder).withMessageSchemaAndValue(schemaAndValue));\n    verify(converter, times(1))\n        .apply(logRecord);\n    assertThat(serialized, equalTo(SERIALIZED_MSG));\n  }", "signature": "void shouldSerializeMessageCorrectly()", "full_signature": "@Test public void shouldSerializeMessageCorrectly()", "class_method_signature": "StructuredLayoutTest.shouldSerializeMessageCorrectly()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getParameters", "mock", "mock", "thenReturn", "when", "schema", "thenReturn", "when", "build", "toByteArray", "verifyBeforeBuild", "withLoggerName", "verify", "verifyBeforeBuild", "withTimeMs", "verify", "verifyBeforeBuild", "withLevel", "verify", "name", "verifyBeforeBuild", "withMessageSchemaAndValue", "verify", "apply", "verify", "times", "assertThat", "equalTo"]}, "focal_class": {"identifier": "StructuredLayout", "superclass": "extends AbstractLayout<byte[]>", "interfaces": "", "fields": [{"original_string": "private static final byte[] EMPTY_BYTES = new byte[0];", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_BYTES = new byte[0]", "var_name": "EMPTY_BYTES"}, {"original_string": "private final Function<Struct, byte[]> serializer;", "modifier": "private final", "type": "Function<Struct, byte[]>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private final Supplier<LogRecordBuilder<Struct>> logRecordStructBuilderFactory;", "modifier": "private final", "type": "Supplier<LogRecordBuilder<Struct>>", "declarator": "logRecordStructBuilderFactory", "var_name": "logRecordStructBuilderFactory"}], "methods": [{"identifier": "toByteArray", "parameters": "(final LogEvent event)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toByteArray(final LogEvent event)", "full_signature": "public byte[] toByteArray(final LogEvent event)", "class_method_signature": "StructuredLayout.toByteArray(final LogEvent event)", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContentType()", "full_signature": "public String getContentType()", "class_method_signature": "StructuredLayout.getContentType()", "testcase": false, "constructor": false}, {"identifier": "toSerializable", "parameters": "(final LogEvent event)", "modifiers": "public", "return": "byte[]", "signature": "byte[] toSerializable(final LogEvent event)", "full_signature": "public byte[] toSerializable(final LogEvent event)", "class_method_signature": "StructuredLayout.toSerializable(final LogEvent event)", "testcase": false, "constructor": false}, {"identifier": "StructuredLayout", "parameters": "(final Function<Struct, byte[]> serializer)", "modifiers": "", "return": "", "signature": " StructuredLayout(final Function<Struct, byte[]> serializer)", "full_signature": "  StructuredLayout(final Function<Struct, byte[]> serializer)", "class_method_signature": "StructuredLayout.StructuredLayout(final Function<Struct, byte[]> serializer)", "testcase": false, "constructor": true}, {"identifier": "StructuredLayout", "parameters": "(\n      final Function<Struct, byte[]> serializer,\n      final Supplier<LogRecordBuilder<Struct>> logRecordBuilderFactory)", "modifiers": "", "return": "", "signature": " StructuredLayout(\n      final Function<Struct, byte[]> serializer,\n      final Supplier<LogRecordBuilder<Struct>> logRecordBuilderFactory)", "full_signature": "  StructuredLayout(\n      final Function<Struct, byte[]> serializer,\n      final Supplier<LogRecordBuilder<Struct>> logRecordBuilderFactory)", "class_method_signature": "StructuredLayout.StructuredLayout(\n      final Function<Struct, byte[]> serializer,\n      final Supplier<LogRecordBuilder<Struct>> logRecordBuilderFactory)", "testcase": false, "constructor": true}], "file": "log4j2-extensions/src/main/java/io/confluent/common/logging/log4j2/StructuredLayout.java"}, "focal_method": {"identifier": "toByteArray", "parameters": "(final LogEvent event)", "modifiers": "public", "return": "byte[]", "body": "public byte[] toByteArray(final LogEvent event) {\n    if (event.getMessage().getParameters().length != 1\n        || !(event.getMessage().getParameters()[0] instanceof StructuredLogMessage)) {\n      throw new IllegalArgumentException(\n          \"LogEvent must contain a single parameter of type StructuredLogMessage\");\n    }\n    final StructuredLogMessage schemaAndValue\n        = (StructuredLogMessage) event.getMessage().getParameters()[0];\n    final Struct logRecord = logRecordStructBuilderFactory.get()\n        .withLoggerName(event.getLoggerName())\n        .withLevel(event.getLevel().name())\n        .withTimeMs(event.getTimeMillis())\n        .withMessageSchemaAndValue(schemaAndValue.getMessage())\n        .build();\n    return serializer.apply(logRecord);\n  }", "signature": "byte[] toByteArray(final LogEvent event)", "full_signature": "public byte[] toByteArray(final LogEvent event)", "class_method_signature": "StructuredLayout.toByteArray(final LogEvent event)", "testcase": false, "constructor": false, "invocations": ["getParameters", "getMessage", "getParameters", "getMessage", "getParameters", "getMessage", "build", "withMessageSchemaAndValue", "withTimeMs", "withLevel", "withLoggerName", "get", "getLoggerName", "name", "getLevel", "getTimeMillis", "getMessage", "apply"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}