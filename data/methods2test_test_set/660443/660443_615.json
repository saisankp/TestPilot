{"test_class": {"identifier": "BondEnergiesTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/tools/BondEnergiesTest.java"}, "test_case": {"identifier": "testGetEnergies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEnergies() {\n        IAtom sourceAtom = new Atom(\"C\");\n        IAtom targetAtom = new Atom(\"C\");\n        Order bondOrder = Order.SINGLE;\n        BondEnergies instance = new BondEnergies();\n        Integer expResult = 346;\n        Integer result = instance.getEnergies(sourceAtom, targetAtom, bondOrder);\n        Assert.assertEquals(expResult, result);\n    }", "signature": "void testGetEnergies()", "full_signature": "@Test public void testGetEnergies()", "class_method_signature": "BondEnergiesTest.testGetEnergies()", "testcase": true, "constructor": false, "invocations": ["getEnergies", "assertEquals"]}, "focal_class": {"identifier": "BondEnergies", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Map<Integer, BondEnergy> bondEngergies = null;", "modifier": "private static", "type": "Map<Integer, BondEnergy>", "declarator": "bondEngergies = null", "var_name": "bondEngergies"}, {"original_string": "private static BondEnergies             instance      = null;", "modifier": "private static", "type": "BondEnergies", "declarator": "instance      = null", "var_name": "instance"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public synchronized static", "return": "BondEnergies", "signature": "BondEnergies getInstance()", "full_signature": "public synchronized static BondEnergies getInstance()", "class_method_signature": "BondEnergies.getInstance()", "testcase": false, "constructor": false}, {"identifier": "BondEnergies", "parameters": "()", "modifiers": "protected", "return": "", "signature": " BondEnergies()", "full_signature": "protected  BondEnergies()", "class_method_signature": "BondEnergies.BondEnergies()", "testcase": false, "constructor": true}, {"identifier": "getEnergies", "parameters": "(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "modifiers": "public", "return": "int", "signature": "int getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "full_signature": "public int getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "class_method_signature": "BondEnergies.getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "testcase": false, "constructor": false}, {"identifier": "getEnergies", "parameters": "(String sourceAtom, String targetAtom, Order bondOrder)", "modifiers": "public", "return": "int", "signature": "int getEnergies(String sourceAtom, String targetAtom, Order bondOrder)", "full_signature": "public int getEnergies(String sourceAtom, String targetAtom, Order bondOrder)", "class_method_signature": "BondEnergies.getEnergies(String sourceAtom, String targetAtom, Order bondOrder)", "testcase": false, "constructor": false}, {"identifier": "getEnergies", "parameters": "(IBond bond)", "modifiers": "public", "return": "int", "signature": "int getEnergies(IBond bond)", "full_signature": "public int getEnergies(IBond bond)", "class_method_signature": "BondEnergies.getEnergies(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "setHydrogenBlock", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setHydrogenBlock(int key)", "full_signature": "private int setHydrogenBlock(int key)", "class_method_signature": "BondEnergies.setHydrogenBlock(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup13", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup13(int key)", "full_signature": "private int setGroup13(int key)", "class_method_signature": "BondEnergies.setGroup13(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup14Part1", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup14Part1(int key)", "full_signature": "private int setGroup14Part1(int key)", "class_method_signature": "BondEnergies.setGroup14Part1(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup14Part2", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup14Part2(int key)", "full_signature": "private int setGroup14Part2(int key)", "class_method_signature": "BondEnergies.setGroup14Part2(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup15", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup15(int key)", "full_signature": "private int setGroup15(int key)", "class_method_signature": "BondEnergies.setGroup15(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup16", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup16(int key)", "full_signature": "private int setGroup16(int key)", "class_method_signature": "BondEnergies.setGroup16(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup17", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup17(int key)", "full_signature": "private int setGroup17(int key)", "class_method_signature": "BondEnergies.setGroup17(int key)", "testcase": false, "constructor": false}, {"identifier": "setGroup18", "parameters": "(int key)", "modifiers": "private", "return": "int", "signature": "int setGroup18(int key)", "full_signature": "private int setGroup18(int key)", "class_method_signature": "BondEnergies.setGroup18(int key)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/tools/BondEnergies.java"}, "focal_method": {"identifier": "getEnergies", "parameters": "(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "modifiers": "public", "return": "int", "body": "public int getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder) {\n        int dKJPerMol = -1;\n\n        for (Map.Entry<Integer, BondEnergy> entry : bondEngergies.entrySet()) {\n            BondEnergy bondEnergy = entry.getValue();\n            String atom1 = bondEnergy.getSymbolFirstAtom();\n            String atom2 = bondEnergy.getSymbolSecondAtom();\n            if ((atom1.equalsIgnoreCase(sourceAtom.getSymbol()) && atom2.equalsIgnoreCase(targetAtom.getSymbol()))\n                    || (atom2.equalsIgnoreCase(sourceAtom.getSymbol()) && atom1\n                            .equalsIgnoreCase(targetAtom.getSymbol()))) {\n\n                Order order = bondEnergy.getBondOrder();\n                if (order.compareTo(bondOrder) == 0) {\n                    dKJPerMol = bondEnergy.getEnergy();\n                }\n            }\n        }\n        return dKJPerMol;\n    }", "signature": "int getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "full_signature": "public int getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "class_method_signature": "BondEnergies.getEnergies(IAtom sourceAtom, IAtom targetAtom, Order bondOrder)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "getSymbolFirstAtom", "getSymbolSecondAtom", "equalsIgnoreCase", "getSymbol", "equalsIgnoreCase", "getSymbol", "equalsIgnoreCase", "getSymbol", "equalsIgnoreCase", "getSymbol", "getBondOrder", "compareTo", "getEnergy"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}