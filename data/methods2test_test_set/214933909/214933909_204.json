{"test_class": {"identifier": "ProjectControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private ProjectDao projectDao;", "modifier": "@MockBean\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@MockBean\n    private DatabaseSetDao databaseSetDao;", "modifier": "@MockBean\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@MockBean\n    private ProjectService projectService;", "modifier": "@MockBean\n    private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "@MockBean\n    private GroupService groupService;", "modifier": "@MockBean\n    private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "@MockBean\n    private GroupDao groupDao;", "modifier": "@MockBean\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/ProjectControllerTest.java"}, "test_case": {"identifier": "add", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/project/add\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void add()", "full_signature": "@Test public void add()", "class_method_signature": "ProjectControllerTest.add()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "content", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "ProjectController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private ProjectService projectService;", "modifier": "@Autowired\n    private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "@Autowired\n    private GroupService groupService;", "modifier": "@Autowired\n    private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}], "methods": [{"identifier": "getProjects", "parameters": "(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/projects\") public", "return": "ServiceResult<List<Project>>", "signature": "ServiceResult<List<Project>> getProjects(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/projects\") public ServiceResult<List<Project>> getProjects(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "ProjectController.getProjects(@RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false}, {"identifier": "getProjectsNoGroup", "parameters": "(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Long appGroupId)", "modifiers": "@RequestMapping(value = \"/projectsNoGroup\") public", "return": "ServiceResult<List<Project>>", "signature": "ServiceResult<List<Project>> getProjectsNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Long appGroupId)", "full_signature": "@RequestMapping(value = \"/projectsNoGroup\") public ServiceResult<List<Project>> getProjectsNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Long appGroupId)", "class_method_signature": "ProjectController.getProjectsNoGroup(@RequestParam(value = \"appGroupId\", defaultValue = \"0\") Long appGroupId)", "testcase": false, "constructor": false}, {"identifier": "getProjectsByAppGroupId", "parameters": "(@RequestParam(value = \"appGroupId\") Long appGroupId)", "modifiers": "@RequestMapping(value = \"/projectsByAppGroupId\") public", "return": "ServiceResult<List<Project>>", "signature": "ServiceResult<List<Project>> getProjectsByAppGroupId(@RequestParam(value = \"appGroupId\") Long appGroupId)", "full_signature": "@RequestMapping(value = \"/projectsByAppGroupId\") public ServiceResult<List<Project>> getProjectsByAppGroupId(@RequestParam(value = \"appGroupId\") Long appGroupId)", "class_method_signature": "ProjectController.getProjectsByAppGroupId(@RequestParam(value = \"appGroupId\") Long appGroupId)", "testcase": false, "constructor": false}, {"identifier": "getGroupProjects", "parameters": "(@RequestParam(\"groupId\") Long groupId)", "modifiers": "@RequestMapping(value = \"/group\") public", "return": "ServiceResult<List<Project>>", "signature": "ServiceResult<List<Project>> getGroupProjects(@RequestParam(\"groupId\") Long groupId)", "full_signature": "@RequestMapping(value = \"/group\") public ServiceResult<List<Project>> getGroupProjects(@RequestParam(\"groupId\") Long groupId)", "class_method_signature": "ProjectController.getGroupProjects(@RequestParam(\"groupId\") Long groupId)", "testcase": false, "constructor": false}, {"identifier": "getGroupUsers", "parameters": "(@RequestBody Paging<ProjectModel> paging, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<ProjectView>>", "signature": "ServiceResult<ListResult<ProjectView>> getGroupUsers(@RequestBody Paging<ProjectModel> paging, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<ProjectView>> getGroupUsers(@RequestBody Paging<ProjectModel> paging, @CurrentUser LoginUser user)", "class_method_signature": "ProjectController.getGroupUsers(@RequestBody Paging<ProjectModel> paging, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.update(@Validated(UpdateProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.delete(@Validated(DeleteProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "ProjectController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult", "signature": "ConfigCkeckResult check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "class_method_signature": "ProjectController.check(@CurrentUser LoginUser user, @RequestParam(\"id\") Long id)", "testcase": false, "constructor": false}, {"identifier": "syncdb", "parameters": "(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/syncdb\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncdb(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/syncdb\") public ServiceResult<String> syncdb(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.syncdb(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "addProject", "parameters": "(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "private", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addProject(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "private ServiceResult<String> addProject(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.addProject(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "generateProject", "parameters": "(@CurrentUser LoginUser user, @RequestBody GenerateCodeModel generateCodeRequest)", "modifiers": "@RequestMapping(value = \"/generate\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult generateProject(@CurrentUser LoginUser user, @RequestBody GenerateCodeModel generateCodeRequest)", "full_signature": "@RequestMapping(value = \"/generate\", method = RequestMethod.POST) public ServiceResult generateProject(@CurrentUser LoginUser user, @RequestBody GenerateCodeModel generateCodeRequest)", "class_method_signature": "ProjectController.generateProject(@CurrentUser LoginUser user, @RequestBody GenerateCodeModel generateCodeRequest)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(@RequestParam(value = \"projectId\") Long projectId, @CurrentUser LoginUser user, HttpServletResponse response)", "modifiers": "@RequestMapping(\"/download\") public", "return": "String", "signature": "String download(@RequestParam(value = \"projectId\") Long projectId, @CurrentUser LoginUser user, HttpServletResponse response)", "full_signature": "@RequestMapping(\"/download\") public String download(@RequestParam(value = \"projectId\") Long projectId, @CurrentUser LoginUser user, HttpServletResponse response)", "class_method_signature": "ProjectController.download(@RequestParam(value = \"projectId\") Long projectId, @CurrentUser LoginUser user, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getProjectButton", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(\"/buttons\") public", "return": "ServiceResult", "signature": "ServiceResult getProjectButton(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(\"/buttons\") public ServiceResult getProjectButton(@CurrentUser LoginUser user)", "class_method_signature": "ProjectController.getProjectButton(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/ProjectController.java"}, "focal_method": {"identifier": "add", "parameters": "(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public ServiceResult<String> add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        return addProject(project, user, errors);\n    }", "signature": "ServiceResult<String> add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "ProjectController.add(@Validated(AddProject.class) @RequestBody Project project, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["addProject"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}