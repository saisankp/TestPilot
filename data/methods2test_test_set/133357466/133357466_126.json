{"test_class": {"identifier": "UlordSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final NetworkParameters MAINNET = MainNetParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "MAINNET = MainNetParams.get()", "var_name": "MAINNET"}, {"original_string": "private static final byte[] ADDRESS_MESSAGE_BYTES = HEX.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\");", "modifier": "private static final", "type": "byte[]", "declarator": "ADDRESS_MESSAGE_BYTES = HEX.decode(\"f9beb4d96164647200000000000000001f000000\" +\n            \"ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d\")", "var_name": "ADDRESS_MESSAGE_BYTES"}, {"original_string": "private static final byte[] TRANSACTION_MESSAGE_BYTES = HEX.withSeparator(\" \", 2).decode(\n            \"f9 be b4 d9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 e2 93 cd be  01 00 00 00 01 6d bd db\" +\n            \"08 5b 1d 8a f7 51 84 f0  bc 01 fa d5 8d 12 66 e9\" +\n            \"b6 3b 50 88 19 90 e4 b4  0d 6a ee 36 29 00 00 00\" +\n            \"00 8b 48 30 45 02 21 00  f3 58 1e 19 72 ae 8a c7\" +\n            \"c7 36 7a 7a 25 3b c1 13  52 23 ad b9 a4 68 bb 3a\" +\n            \"59 23 3f 45 bc 57 83 80  02 20 59 af 01 ca 17 d0\" +\n            \"0e 41 83 7a 1d 58 e9 7a  a3 1b ae 58 4e de c2 8d\" +\n            \"35 bd 96 92 36 90 91 3b  ae 9a 01 41 04 9c 02 bf\" +\n            \"c9 7e f2 36 ce 6d 8f e5  d9 40 13 c7 21 e9 15 98\" +\n            \"2a cd 2b 12 b6 5d 9b 7d  59 e2 0a 84 20 05 f8 fc\" +\n            \"4e 02 53 2e 87 3d 37 b9  6f 09 d6 d4 51 1a da 8f\" +\n            \"14 04 2f 46 61 4a 4c 70  c0 f1 4b ef f5 ff ff ff\" +\n            \"ff 02 40 4b 4c 00 00 00  00 00 19 76 a9 14 1a a0\" +\n            \"cd 1c be a6 e7 45 8a 7a  ba d5 12 a9 d9 ea 1a fb\" +\n            \"22 5e 88 ac 80 fa e9 c7  00 00 00 00 19 76 a9 14\" +\n            \"0e ab 5b ea 43 6a 04 84  cf ab 12 48 5e fd a0 b7\" +\n            \"8b 4e cc 52 88 ac 00 00  00 00\");", "modifier": "private static final", "type": "byte[]", "declarator": "TRANSACTION_MESSAGE_BYTES = HEX.withSeparator(\" \", 2).decode(\n            \"f9 be b4 d9 74 78 00 00  00 00 00 00 00 00 00 00\" +\n            \"02 01 00 00 e2 93 cd be  01 00 00 00 01 6d bd db\" +\n            \"08 5b 1d 8a f7 51 84 f0  bc 01 fa d5 8d 12 66 e9\" +\n            \"b6 3b 50 88 19 90 e4 b4  0d 6a ee 36 29 00 00 00\" +\n            \"00 8b 48 30 45 02 21 00  f3 58 1e 19 72 ae 8a c7\" +\n            \"c7 36 7a 7a 25 3b c1 13  52 23 ad b9 a4 68 bb 3a\" +\n            \"59 23 3f 45 bc 57 83 80  02 20 59 af 01 ca 17 d0\" +\n            \"0e 41 83 7a 1d 58 e9 7a  a3 1b ae 58 4e de c2 8d\" +\n            \"35 bd 96 92 36 90 91 3b  ae 9a 01 41 04 9c 02 bf\" +\n            \"c9 7e f2 36 ce 6d 8f e5  d9 40 13 c7 21 e9 15 98\" +\n            \"2a cd 2b 12 b6 5d 9b 7d  59 e2 0a 84 20 05 f8 fc\" +\n            \"4e 02 53 2e 87 3d 37 b9  6f 09 d6 d4 51 1a da 8f\" +\n            \"14 04 2f 46 61 4a 4c 70  c0 f1 4b ef f5 ff ff ff\" +\n            \"ff 02 40 4b 4c 00 00 00  00 00 19 76 a9 14 1a a0\" +\n            \"cd 1c be a6 e7 45 8a 7a  ba d5 12 a9 d9 ea 1a fb\" +\n            \"22 5e 88 ac 80 fa e9 c7  00 00 00 00 19 76 a9 14\" +\n            \"0e ab 5b ea 43 6a 04 84  cf ab 12 48 5e fd a0 b7\" +\n            \"8b 4e cc 52 88 ac 00 00  00 00\")", "var_name": "TRANSACTION_MESSAGE_BYTES"}], "file": "core/src/test/java/org/ulordj/core/UlordSerializerTest.java"}, "test_case": {"identifier": "testSerializeUnknownMessage", "parameters": "()", "modifiers": "@Test(expected = Error.class) public", "return": "void", "body": "@Test(expected = Error.class)\n    public void testSerializeUnknownMessage() throws Exception {\n        MessageSerializer serializer = MAINNET.getDefaultSerializer();\n\n        Message unknownMessage = new Message() {\n            @Override\n            protected void parse() throws ProtocolException {\n            }\n        };\n        ByteArrayOutputStream bos = new ByteArrayOutputStream(ADDRESS_MESSAGE_BYTES.length);\n        serializer.serialize(unknownMessage, bos);\n    }", "signature": "void testSerializeUnknownMessage()", "full_signature": "@Test(expected = Error.class) public void testSerializeUnknownMessage()", "class_method_signature": "UlordSerializerTest.testSerializeUnknownMessage()", "testcase": true, "constructor": false, "invocations": ["getDefaultSerializer", "serialize"]}, "focal_class": {"identifier": "UlordSerializer", "superclass": "extends MessageSerializer", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(UlordSerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(UlordSerializer.class)", "var_name": "log"}, {"original_string": "private static final int COMMAND_LEN = 12;", "modifier": "private static final", "type": "int", "declarator": "COMMAND_LEN = 12", "var_name": "COMMAND_LEN"}, {"original_string": "private final NetworkParameters params;", "modifier": "private final", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "private final boolean parseRetain;", "modifier": "private final", "type": "boolean", "declarator": "parseRetain", "var_name": "parseRetain"}, {"original_string": "private static final Map<Class<? extends Message>, String> names = new HashMap<>();", "modifier": "private static final", "type": "Map<Class<? extends Message>, String>", "declarator": "names = new HashMap<>()", "var_name": "names"}], "methods": [{"identifier": "UlordSerializer", "parameters": "(NetworkParameters params, boolean parseRetain)", "modifiers": "public", "return": "", "signature": " UlordSerializer(NetworkParameters params, boolean parseRetain)", "full_signature": "public  UlordSerializer(NetworkParameters params, boolean parseRetain)", "class_method_signature": "UlordSerializer.UlordSerializer(NetworkParameters params, boolean parseRetain)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(String name, byte[] message, OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(String name, byte[] message, OutputStream out)", "full_signature": "@Override public void serialize(String name, byte[] message, OutputStream out)", "class_method_signature": "UlordSerializer.serialize(String name, byte[] message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(Message message, OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(Message message, OutputStream out)", "full_signature": "@Override public void serialize(Message message, OutputStream out)", "class_method_signature": "UlordSerializer.serialize(Message message, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(ByteBuffer in)", "modifiers": "@Override public", "return": "Message", "signature": "Message deserialize(ByteBuffer in)", "full_signature": "@Override public Message deserialize(ByteBuffer in)", "class_method_signature": "UlordSerializer.deserialize(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializeHeader", "parameters": "(ByteBuffer in)", "modifiers": "@Override public", "return": "BitcoinPacketHeader", "signature": "BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "full_signature": "@Override public BitcoinPacketHeader deserializeHeader(ByteBuffer in)", "class_method_signature": "UlordSerializer.deserializeHeader(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "deserializePayload", "parameters": "(BitcoinPacketHeader header, ByteBuffer in)", "modifiers": "@Override public", "return": "Message", "signature": "Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "full_signature": "@Override public Message deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "class_method_signature": "UlordSerializer.deserializePayload(BitcoinPacketHeader header, ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "makeMessage", "parameters": "(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "modifiers": "private", "return": "Message", "signature": "Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "full_signature": "private Message makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "class_method_signature": "UlordSerializer.makeMessage(String command, int length, byte[] payloadBytes, byte[] hash, byte[] checksum)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "NetworkParameters", "signature": "NetworkParameters getParameters()", "full_signature": "public NetworkParameters getParameters()", "class_method_signature": "UlordSerializer.getParameters()", "testcase": false, "constructor": false}, {"identifier": "makeAddressMessage", "parameters": "(byte[] payloadBytes, int length)", "modifiers": "@Override public", "return": "AddressMessage", "signature": "AddressMessage makeAddressMessage(byte[] payloadBytes, int length)", "full_signature": "@Override public AddressMessage makeAddressMessage(byte[] payloadBytes, int length)", "class_method_signature": "UlordSerializer.makeAddressMessage(byte[] payloadBytes, int length)", "testcase": false, "constructor": false}, {"identifier": "makeAlertMessage", "parameters": "(byte[] payloadBytes)", "modifiers": "@Override public", "return": "Message", "signature": "Message makeAlertMessage(byte[] payloadBytes)", "full_signature": "@Override public Message makeAlertMessage(byte[] payloadBytes)", "class_method_signature": "UlordSerializer.makeAlertMessage(byte[] payloadBytes)", "testcase": false, "constructor": false}, {"identifier": "makeBlock", "parameters": "(final byte[] payloadBytes, final int offset, final int length)", "modifiers": "@Override public", "return": "Block", "signature": "Block makeBlock(final byte[] payloadBytes, final int offset, final int length)", "full_signature": "@Override public Block makeBlock(final byte[] payloadBytes, final int offset, final int length)", "class_method_signature": "UlordSerializer.makeBlock(final byte[] payloadBytes, final int offset, final int length)", "testcase": false, "constructor": false}, {"identifier": "makeBloomFilter", "parameters": "(byte[] payloadBytes)", "modifiers": "@Override public", "return": "Message", "signature": "Message makeBloomFilter(byte[] payloadBytes)", "full_signature": "@Override public Message makeBloomFilter(byte[] payloadBytes)", "class_method_signature": "UlordSerializer.makeBloomFilter(byte[] payloadBytes)", "testcase": false, "constructor": false}, {"identifier": "makeFilteredBlock", "parameters": "(byte[] payloadBytes)", "modifiers": "@Override public", "return": "FilteredBlock", "signature": "FilteredBlock makeFilteredBlock(byte[] payloadBytes)", "full_signature": "@Override public FilteredBlock makeFilteredBlock(byte[] payloadBytes)", "class_method_signature": "UlordSerializer.makeFilteredBlock(byte[] payloadBytes)", "testcase": false, "constructor": false}, {"identifier": "makeInventoryMessage", "parameters": "(byte[] payloadBytes, int length)", "modifiers": "@Override public", "return": "InventoryMessage", "signature": "InventoryMessage makeInventoryMessage(byte[] payloadBytes, int length)", "full_signature": "@Override public InventoryMessage makeInventoryMessage(byte[] payloadBytes, int length)", "class_method_signature": "UlordSerializer.makeInventoryMessage(byte[] payloadBytes, int length)", "testcase": false, "constructor": false}, {"identifier": "makeTransaction", "parameters": "(byte[] payloadBytes, int offset,\n        int length, byte[] hash)", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction makeTransaction(byte[] payloadBytes, int offset,\n        int length, byte[] hash)", "full_signature": "@Override public Transaction makeTransaction(byte[] payloadBytes, int offset,\n        int length, byte[] hash)", "class_method_signature": "UlordSerializer.makeTransaction(byte[] payloadBytes, int offset,\n        int length, byte[] hash)", "testcase": false, "constructor": false}, {"identifier": "seekPastMagicBytes", "parameters": "(ByteBuffer in)", "modifiers": "@Override public", "return": "void", "signature": "void seekPastMagicBytes(ByteBuffer in)", "full_signature": "@Override public void seekPastMagicBytes(ByteBuffer in)", "class_method_signature": "UlordSerializer.seekPastMagicBytes(ByteBuffer in)", "testcase": false, "constructor": false}, {"identifier": "isParseRetainMode", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isParseRetainMode()", "full_signature": "@Override public boolean isParseRetainMode()", "class_method_signature": "UlordSerializer.isParseRetainMode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/core/UlordSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(String name, byte[] message, OutputStream out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void serialize(String name, byte[] message, OutputStream out) throws IOException {\n        byte[] header = new byte[4 + COMMAND_LEN + 4 + 4 /* checksum */];\n        uint32ToByteArrayBE(params.getPacketMagic(), header, 0);\n\n        // The header array is initialized to zero by Java so we don't have to worry about\n        // NULL terminating the string here.\n        for (int i = 0; i < name.length() && i < COMMAND_LEN; i++) {\n            header[4 + i] = (byte) (name.codePointAt(i) & 0xFF);\n        }\n\n        Utils.uint32ToByteArrayLE(message.length, header, 4 + COMMAND_LEN);\n\n        byte[] hash = Sha256Hash.hashTwice(message);\n        System.arraycopy(hash, 0, header, 4 + COMMAND_LEN + 4, 4);\n        out.write(header);\n        out.write(message);\n\n        if (log.isDebugEnabled())\n            log.debug(\"Sending {} message: {}\", name, HEX.encode(header) + HEX.encode(message));\n    }", "signature": "void serialize(String name, byte[] message, OutputStream out)", "full_signature": "@Override public void serialize(String name, byte[] message, OutputStream out)", "class_method_signature": "UlordSerializer.serialize(String name, byte[] message, OutputStream out)", "testcase": false, "constructor": false, "invocations": ["uint32ToByteArrayBE", "getPacketMagic", "length", "codePointAt", "uint32ToByteArrayLE", "hashTwice", "arraycopy", "write", "write", "isDebugEnabled", "debug", "encode", "encode"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}