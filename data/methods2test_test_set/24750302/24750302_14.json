{"test_class": {"identifier": "FunctionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/utils/FunctionEvaluatorTest.java"}, "test_case": {"identifier": "concatOfAnGetSecretShouldFailed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void concatOfAnGetSecretShouldFailed() {\n        FunctionEvaluatorContext context = getEvaluationContext();\n        NodeTemplate template = context.getTopology().getNodeTemplates().get(\"my_node\");\n\n        AbstractPropertyValue resolved = FunctionEvaluator.tryResolveValue(context, template, template.getProperties(), template.getProperties().get(\"concat_prop_and_get_secret\"));\n        Assert.assertNotNull(resolved);\n        Assert.assertEquals(ConcatPropertyValue.class, resolved.getClass());\n        ConcatPropertyValue resolvedConcat = (ConcatPropertyValue) resolved;\n        Assert.assertEquals(ScalarPropertyValue.class, resolvedConcat.getParameters().get(0).getClass());\n        Assert.assertEquals(FunctionPropertyValue.class, resolvedConcat.getParameters().get(1).getClass());\n    }", "signature": "void concatOfAnGetSecretShouldFailed()", "full_signature": "@Test public void concatOfAnGetSecretShouldFailed()", "class_method_signature": "FunctionEvaluatorTest.concatOfAnGetSecretShouldFailed()", "testcase": true, "constructor": false, "invocations": ["getEvaluationContext", "get", "getNodeTemplates", "getTopology", "tryResolveValue", "getProperties", "get", "getProperties", "assertNotNull", "assertEquals", "getClass", "assertEquals", "getClass", "get", "getParameters", "assertEquals", "getClass", "get", "getParameters"]}, "focal_class": {"identifier": "FunctionEvaluator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "tryResolveValue", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "modifiers": "public static", "return": "AbstractPropertyValue", "signature": "AbstractPropertyValue tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "full_signature": "public static AbstractPropertyValue tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "class_method_signature": "FunctionEvaluator.tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, FunctionPropertyValue function)", "modifiers": "private static", "return": "AbstractPropertyValue", "signature": "AbstractPropertyValue getProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, FunctionPropertyValue function)", "full_signature": "private static AbstractPropertyValue getProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, FunctionPropertyValue function)", "class_method_signature": "FunctionEvaluator.getProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, FunctionPropertyValue function)", "testcase": false, "constructor": false}, {"identifier": "doGetProperty", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            FunctionPropertyValue function)", "modifiers": "private static", "return": "AbstractPropertyValue", "signature": "AbstractPropertyValue doGetProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            FunctionPropertyValue function)", "full_signature": "private static AbstractPropertyValue doGetProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            FunctionPropertyValue function)", "class_method_signature": "FunctionEvaluator.doGetProperty(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            FunctionPropertyValue function)", "testcase": false, "constructor": false}, {"identifier": "getFromPath", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            Map<String, AbstractPropertyValue> properties, String propertyPath)", "modifiers": "private static", "return": "AbstractPropertyValue", "signature": "AbstractPropertyValue getFromPath(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            Map<String, AbstractPropertyValue> properties, String propertyPath)", "full_signature": "private static AbstractPropertyValue getFromPath(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            Map<String, AbstractPropertyValue> properties, String propertyPath)", "class_method_signature": "FunctionEvaluator.getFromPath(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate targetTemplate,\n            Map<String, AbstractPropertyValue> properties, String propertyPath)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, ConcatPropertyValue concatPropertyValue)", "modifiers": "private static", "return": "AbstractPropertyValue", "signature": "AbstractPropertyValue concat(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, ConcatPropertyValue concatPropertyValue)", "full_signature": "private static AbstractPropertyValue concat(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, ConcatPropertyValue concatPropertyValue)", "class_method_signature": "FunctionEvaluator.concat(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, ConcatPropertyValue concatPropertyValue)", "testcase": false, "constructor": false}, {"identifier": "containGetSecretFunction", "parameters": "(AbstractPropertyValue propertyValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean containGetSecretFunction(AbstractPropertyValue propertyValue)", "full_signature": "public static boolean containGetSecretFunction(AbstractPropertyValue propertyValue)", "class_method_signature": "FunctionEvaluator.containGetSecretFunction(AbstractPropertyValue propertyValue)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/utils/FunctionEvaluator.java"}, "focal_method": {"identifier": "tryResolveValue", "parameters": "(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "modifiers": "public static", "return": "AbstractPropertyValue", "body": "public static AbstractPropertyValue tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty) {\n        if (evaluatedProperty == null) {\n            // There is nothing to be evaluated.\n            return null;\n        }\n        if (evaluatedProperty instanceof PropertyValue) {\n            // This is a value already so just return it.\n            return evaluatedProperty;\n        }\n        if (containGetSecretFunction(evaluatedProperty)) {\n            return evaluatedProperty;\n        }\n        if (evaluatedProperty instanceof FunctionPropertyValue) {\n            FunctionPropertyValue evaluatedFunction = (FunctionPropertyValue) evaluatedProperty;\n            switch (evaluatedFunction.getFunction()) {\n            case ToscaFunctionConstants.GET_INPUT:\n                String inputName = evaluatedFunction.getParameters().get(0);\n                return evaluatorContext.getInputs().get(inputName);\n            case ToscaFunctionConstants.GET_PROPERTY:\n                // Perform the get property evaluation.\n                return getProperty(evaluatorContext, template, properties, evaluatedFunction);\n            default:\n                throw new IllegalArgumentException(\"GET_ATTRIBUTE or GET_OPERATION_OUTPUT cannot be defined on a property.\");\n            }\n        }\n        if (evaluatedProperty instanceof ConcatPropertyValue) {\n            // Perform the concat evaluation\n            return concat(evaluatorContext, template, properties, (ConcatPropertyValue) evaluatedProperty);\n        }\n        throw new IllegalArgumentException(\"AbstractPropertyValue must be one of null, a secret, PropertyValue, FunctionPropertyValue or ConcatPropertyValue\");\n    }", "signature": "AbstractPropertyValue tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "full_signature": "public static AbstractPropertyValue tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "class_method_signature": "FunctionEvaluator.tryResolveValue(FunctionEvaluatorContext evaluatorContext, AbstractInstantiableTemplate template,\n            Map<String, AbstractPropertyValue> properties, AbstractPropertyValue evaluatedProperty)", "testcase": false, "constructor": false, "invocations": ["containGetSecretFunction", "getFunction", "get", "getParameters", "get", "getInputs", "getProperty", "concat"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}