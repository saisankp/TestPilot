{"test_class": {"identifier": "TestDateUtils", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/cookie/TestDateUtils.java"}, "test_case": {"identifier": "testParseQuotedDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseQuotedDate() throws Exception {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTimeZone(DateUtils.GMT);\n        calendar.set(2005, Calendar.OCTOBER, 14, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        Date date1 = calendar.getTime();\n\n        String[] formats = new String[] {\n                DateUtils.PATTERN_RFC1123\n                };\n        Date date2 = DateUtils.parseDate(\"'Fri, 14 Oct 2005 00:00:00 GMT'\", formats);\n        Assert.assertEquals(date1, date2);\n    }", "signature": "void testParseQuotedDate()", "full_signature": "@Test public void testParseQuotedDate()", "class_method_signature": "TestDateUtils.testParseQuotedDate()", "testcase": true, "constructor": false, "invocations": ["getInstance", "setTimeZone", "set", "set", "getTime", "parseDate", "assertEquals"]}, "focal_class": {"identifier": "DateUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PATTERN_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"", "var_name": "PATTERN_RFC1123"}, {"original_string": "public static final String PATTERN_RFC1036 = \"EEEE, dd-MMM-yy HH:mm:ss zzz\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_RFC1036 = \"EEEE, dd-MMM-yy HH:mm:ss zzz\"", "var_name": "PATTERN_RFC1036"}, {"original_string": "public static final String PATTERN_ASCTIME = \"EEE MMM d HH:mm:ss yyyy\";", "modifier": "public static final", "type": "String", "declarator": "PATTERN_ASCTIME = \"EEE MMM d HH:mm:ss yyyy\"", "var_name": "PATTERN_ASCTIME"}, {"original_string": "private static final String[] DEFAULT_PATTERNS = new String[] {\n        PATTERN_RFC1036,\n        PATTERN_RFC1123,\n        PATTERN_ASCTIME\n    };", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_PATTERNS = new String[] {\n        PATTERN_RFC1036,\n        PATTERN_RFC1123,\n        PATTERN_ASCTIME\n    }", "var_name": "DEFAULT_PATTERNS"}, {"original_string": "private static final Date DEFAULT_TWO_DIGIT_YEAR_START;", "modifier": "private static final", "type": "Date", "declarator": "DEFAULT_TWO_DIGIT_YEAR_START", "var_name": "DEFAULT_TWO_DIGIT_YEAR_START"}, {"original_string": "public static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");", "modifier": "public static final", "type": "TimeZone", "declarator": "GMT = TimeZone.getTimeZone(\"GMT\")", "var_name": "GMT"}], "methods": [{"identifier": "parseDate", "parameters": "(String dateValue)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(String dateValue)", "full_signature": "public static Date parseDate(String dateValue)", "class_method_signature": "DateUtils.parseDate(String dateValue)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final String dateValue, String[] dateFormats)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(final String dateValue, String[] dateFormats)", "full_signature": "public static Date parseDate(final String dateValue, String[] dateFormats)", "class_method_signature": "DateUtils.parseDate(final String dateValue, String[] dateFormats)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(\n        String dateValue,\n        String[] dateFormats,\n        Date startDate\n    )", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(\n        String dateValue,\n        String[] dateFormats,\n        Date startDate\n    )", "full_signature": "public static Date parseDate(\n        String dateValue,\n        String[] dateFormats,\n        Date startDate\n    )", "class_method_signature": "DateUtils.parseDate(\n        String dateValue,\n        String[] dateFormats,\n        Date startDate\n    )", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String formatDate(Date date)", "full_signature": "public static String formatDate(Date date)", "class_method_signature": "DateUtils.formatDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(Date date, String pattern)", "modifiers": "public static", "return": "String", "signature": "String formatDate(Date date, String pattern)", "full_signature": "public static String formatDate(Date date, String pattern)", "class_method_signature": "DateUtils.formatDate(Date date, String pattern)", "testcase": false, "constructor": false}, {"identifier": "DateUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtils()", "full_signature": "private  DateUtils()", "class_method_signature": "DateUtils.DateUtils()", "testcase": false, "constructor": true}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/cookie/DateUtils.java"}, "focal_method": {"identifier": "parseDate", "parameters": "(String dateValue)", "modifiers": "public static", "return": "Date", "body": "public static Date parseDate(String dateValue) throws DateParseException {\n        return parseDate(dateValue, null, null);\n    }", "signature": "Date parseDate(String dateValue)", "full_signature": "public static Date parseDate(String dateValue)", "class_method_signature": "DateUtils.parseDate(String dateValue)", "testcase": false, "constructor": false, "invocations": ["parseDate"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}