{"test_class": {"identifier": "TestJMXPollUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "Channel memChannel = new MemoryChannel();", "modifier": "", "type": "Channel", "declarator": "memChannel = new MemoryChannel()", "var_name": "memChannel"}, {"original_string": "Channel pmemChannel = new PseudoTxnMemoryChannel();", "modifier": "", "type": "Channel", "declarator": "pmemChannel = new PseudoTxnMemoryChannel()", "var_name": "pmemChannel"}], "file": "flume-ng-core/src/test/java/org/apache/flume/instrumentation/util/TestJMXPollUtil.java"}, "test_case": {"identifier": "testJMXPoll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testJMXPoll() {\n    memChannel.setName(\"memChannel\");\n    pmemChannel.setName(\"pmemChannel\");\n    Context c = new Context();\n    Configurables.configure(memChannel, c);\n    Configurables.configure(pmemChannel, c);\n    memChannel.start();\n    pmemChannel.start();\n    Transaction txn = memChannel.getTransaction();\n    txn.begin();\n    memChannel.put(EventBuilder.withBody(\"blah\".getBytes()));\n    memChannel.put(EventBuilder.withBody(\"blah\".getBytes()));\n    txn.commit();\n    txn.close();\n\n    txn = memChannel.getTransaction();\n    txn.begin();\n    memChannel.take();\n    txn.commit();\n    txn.close();\n\n\n    Transaction txn2 = pmemChannel.getTransaction();\n    txn2.begin();\n    pmemChannel.put(EventBuilder.withBody(\"blah\".getBytes()));\n    pmemChannel.put(EventBuilder.withBody(\"blah\".getBytes()));\n    txn2.commit();\n    txn2.close();\n\n    txn2 = pmemChannel.getTransaction();\n    txn2.begin();\n    pmemChannel.take();\n    txn2.commit();\n    txn2.close();\n\n    Map<String, Map<String, String>> mbeans = JMXPollUtil.getAllMBeans();\n    Assert.assertNotNull(mbeans);\n    Map<String, String> memBean = mbeans.get(\"CHANNEL.memChannel\");\n    Assert.assertNotNull(memBean);\n    JMXTestUtils.checkChannelCounterParams(memBean);\n    Map<String, String> pmemBean = mbeans.get(\"CHANNEL.pmemChannel\");\n    Assert.assertNotNull(pmemBean);\n    JMXTestUtils.checkChannelCounterParams(pmemBean);\n    memChannel.stop();\n    pmemChannel.stop();\n  }", "signature": "void testJMXPoll()", "full_signature": "@Test public void testJMXPoll()", "class_method_signature": "TestJMXPollUtil.testJMXPoll()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "configure", "configure", "start", "start", "getTransaction", "begin", "put", "withBody", "getBytes", "put", "withBody", "getBytes", "commit", "close", "getTransaction", "begin", "take", "commit", "close", "getTransaction", "begin", "put", "withBody", "getBytes", "put", "withBody", "getBytes", "commit", "close", "getTransaction", "begin", "take", "commit", "close", "getAllMBeans", "assertNotNull", "get", "assertNotNull", "checkChannelCounterParams", "get", "assertNotNull", "checkChannelCounterParams", "stop", "stop"]}, "focal_class": {"identifier": "JMXPollUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(JMXPollUtil.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JMXPollUtil.class)", "var_name": "LOG"}, {"original_string": "private static MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();", "modifier": "private static", "type": "MBeanServer", "declarator": "mbeanServer = ManagementFactory.getPlatformMBeanServer()", "var_name": "mbeanServer"}], "methods": [{"identifier": "getAllMBeans", "parameters": "()", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> getAllMBeans()", "full_signature": "public static Map<String, Map<String, String>> getAllMBeans()", "class_method_signature": "JMXPollUtil.getAllMBeans()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/instrumentation/util/JMXPollUtil.java"}, "focal_method": {"identifier": "getAllMBeans", "parameters": "()", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "body": "public static Map<String, Map<String, String>> getAllMBeans() {\n    Map<String, Map<String, String>> mbeanMap = Maps.newHashMap();\n    Set<ObjectInstance> queryMBeans = null;\n    try {\n      queryMBeans = mbeanServer.queryMBeans(null, null);\n    } catch (Exception ex) {\n      LOG.error(\"Could not get Mbeans for monitoring\", ex);\n      Throwables.propagate(ex);\n    }\n    for (ObjectInstance obj : queryMBeans) {\n      try {\n        if (!obj.getObjectName().toString().startsWith(\"org.apache.flume\")) {\n          continue;\n        }\n        MBeanAttributeInfo[] attrs = mbeanServer.getMBeanInfo(obj.getObjectName()).getAttributes();\n        String[] strAtts = new String[attrs.length];\n        for (int i = 0; i < strAtts.length; i++) {\n          strAtts[i] = attrs[i].getName();\n        }\n        AttributeList attrList = mbeanServer.getAttributes(obj.getObjectName(), strAtts);\n        String component = obj.getObjectName().toString().substring(\n            obj.getObjectName().toString().indexOf('=') + 1);\n        Map<String, String> attrMap = Maps.newHashMap();\n\n        for (Object attr : attrList) {\n          Attribute localAttr = (Attribute) attr;\n          if (localAttr.getName().equalsIgnoreCase(\"type\")) {\n            component = localAttr.getValue() + \".\" + component;\n          }\n          attrMap.put(localAttr.getName(), localAttr.getValue().toString());\n        }\n        mbeanMap.put(component, attrMap);\n      } catch (Exception e) {\n        LOG.error(\"Unable to poll JMX for metrics.\", e);\n      }\n    }\n    return mbeanMap;\n  }", "signature": "Map<String, Map<String, String>> getAllMBeans()", "full_signature": "public static Map<String, Map<String, String>> getAllMBeans()", "class_method_signature": "JMXPollUtil.getAllMBeans()", "testcase": false, "constructor": false, "invocations": ["newHashMap", "queryMBeans", "error", "propagate", "startsWith", "toString", "getObjectName", "getAttributes", "getMBeanInfo", "getObjectName", "getName", "getAttributes", "getObjectName", "substring", "toString", "getObjectName", "indexOf", "toString", "getObjectName", "newHashMap", "equalsIgnoreCase", "getName", "getValue", "put", "getName", "toString", "getValue", "put", "error"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}