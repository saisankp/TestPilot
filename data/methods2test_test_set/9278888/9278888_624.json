{"test_class": {"identifier": "TickClockTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/internal/recorder/TickClockTest.java"}, "test_case": {"identifier": "relativeTimestamp_incrementsAccordingToNanoTick", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void relativeTimestamp_incrementsAccordingToNanoTick() {\n    mockStatic(System.class);\n    TickClock clock = new TickClock(1000L /* 1ms */, 0L /* 0ns */);\n\n    when(System.nanoTime()).thenReturn(1000L); // 1 microsecond = 1000 nanoseconds\n\n    assertThat(clock.currentTimeMicroseconds()).isEqualTo(1001L); // 1ms + 1us\n  }", "signature": "void relativeTimestamp_incrementsAccordingToNanoTick()", "full_signature": "@Test public void relativeTimestamp_incrementsAccordingToNanoTick()", "class_method_signature": "TickClockTest.relativeTimestamp_incrementsAccordingToNanoTick()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "thenReturn", "when", "nanoTime", "isEqualTo", "assertThat", "currentTimeMicroseconds"]}, "focal_class": {"identifier": "TickClock", "superclass": "", "interfaces": "implements Clock", "fields": [{"original_string": "final long baseEpochMicros;", "modifier": "final", "type": "long", "declarator": "baseEpochMicros", "var_name": "baseEpochMicros"}, {"original_string": "final long baseTickNanos;", "modifier": "final", "type": "long", "declarator": "baseTickNanos", "var_name": "baseTickNanos"}], "methods": [{"identifier": "TickClock", "parameters": "(long baseEpochMicros, long baseTickNanos)", "modifiers": "", "return": "", "signature": " TickClock(long baseEpochMicros, long baseTickNanos)", "full_signature": "  TickClock(long baseEpochMicros, long baseTickNanos)", "class_method_signature": "TickClock.TickClock(long baseEpochMicros, long baseTickNanos)", "testcase": false, "constructor": true}, {"identifier": "currentTimeMicroseconds", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long currentTimeMicroseconds()", "full_signature": "@Override public long currentTimeMicroseconds()", "class_method_signature": "TickClock.currentTimeMicroseconds()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TickClock.toString()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/recorder/TickClock.java"}, "focal_method": {"identifier": "currentTimeMicroseconds", "parameters": "()", "modifiers": "@Override public", "return": "long", "body": "@Override public long currentTimeMicroseconds() {\n    return ((System.nanoTime() - baseTickNanos) / 1000) + baseEpochMicros;\n  }", "signature": "long currentTimeMicroseconds()", "full_signature": "@Override public long currentTimeMicroseconds()", "class_method_signature": "TickClock.currentTimeMicroseconds()", "testcase": false, "constructor": false, "invocations": ["nanoTime"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}