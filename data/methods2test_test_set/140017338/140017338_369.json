{"test_class": {"identifier": "ConfigurationHandlerOverrideTest", "superclass": "extends CommonConfigurationHandlerTest", "interfaces": "", "fields": [{"original_string": "private String OVERRIDE_ID = \"overrideId\";", "modifier": "private", "type": "String", "declarator": "OVERRIDE_ID = \"overrideId\"", "var_name": "OVERRIDE_ID"}, {"original_string": "private MatchState overrideArtifactMatchState;", "modifier": "private", "type": "MatchState", "declarator": "overrideArtifactMatchState", "var_name": "overrideArtifactMatchState"}, {"original_string": "private MatchState expectedMatchState;", "modifier": "private", "type": "MatchState", "declarator": "expectedMatchState", "var_name": "expectedMatchState"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/processors/filter/ConfigurationHandlerOverrideTest.java"}, "test_case": {"identifier": "testOverride", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverride() {\n        String copyrightStatement = \"someCopyright Statement\";\n        String modificationStatus = \"MODIFIED\";\n\n        specialArtifact.addFact(new ArtifactModificationStatus(modificationStatus));\n\n        artifacts.add(specialArtifact);\n        when(configMock.getOverride())\n                .thenReturn(getOverwriteMap(overrideArtifactMatchState, copyrightStatement, null));\n\n        ConfigurationHandlerOverride handler = new ConfigurationHandlerOverride(antennaContextMock);\n        handler.process(artifacts);\n\n        assertThat(artifacts.size()).isEqualTo(4);\n        Artifact processedArtifact = artifacts.stream()\n                .filter(a -> new ArtifactFilename(FILENAME).matches(a))\n                .findAny()\n                .orElseThrow(() -> new IllegalStateException(\"should not happen\"));\n        assertThat(processedArtifact.askFor(ArtifactCoordinates.class).get().getCoordinates().stream()\n                .filter(p -> PackageURL.StandardTypes.MAVEN.equals(p.getType()))\n                .findAny()\n                .get()\n                .getName())\n                .isEqualTo(OVERRIDE_ID);\n        assertThat(processedArtifact.askFor(ArtifactMatchingMetadata.class).map(ArtifactMatchingMetadata::getMatchState).orElse(null)).isEqualTo(expectedMatchState);\n        assertThat(processedArtifact.askForGet(CopyrightStatement.class).get()).isEqualTo(copyrightStatement);\n        assertThat(processedArtifact.askForGet(ArtifactModificationStatus.class).get()).isEqualTo(modificationStatus);\n    }", "signature": "void testOverride()", "full_signature": "@Test public void testOverride()", "class_method_signature": "ConfigurationHandlerOverrideTest.testOverride()", "testcase": true, "constructor": false, "invocations": ["addFact", "add", "thenReturn", "when", "getOverride", "getOverwriteMap", "process", "isEqualTo", "assertThat", "size", "orElseThrow", "findAny", "filter", "stream", "matches", "isEqualTo", "assertThat", "getName", "get", "findAny", "filter", "stream", "getCoordinates", "get", "askFor", "equals", "getType", "isEqualTo", "assertThat", "orElse", "map", "askFor", "isEqualTo", "assertThat", "get", "askForGet", "isEqualTo", "assertThat", "get", "askForGet"]}, "focal_class": {"identifier": "ConfigurationHandlerOverride", "superclass": "extends AbstractProcessor", "interfaces": "", "fields": [], "methods": [{"identifier": "ConfigurationHandlerOverride", "parameters": "(AntennaContext context)", "modifiers": "public", "return": "", "signature": " ConfigurationHandlerOverride(AntennaContext context)", "full_signature": "public  ConfigurationHandlerOverride(AntennaContext context)", "class_method_signature": "ConfigurationHandlerOverride.ConfigurationHandlerOverride(AntennaContext context)", "testcase": false, "constructor": true}, {"identifier": "resolveOverride", "parameters": "(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter)", "modifiers": "private", "return": "void", "signature": "void resolveOverride(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter)", "full_signature": "private void resolveOverride(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter)", "class_method_signature": "ConfigurationHandlerOverride.resolveOverride(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter)", "testcase": false, "constructor": false}, {"identifier": "overrideArtifact", "parameters": "(Artifact artifact, Artifact override)", "modifiers": "private", "return": "void", "signature": "void overrideArtifact(Artifact artifact, Artifact override)", "full_signature": "private void overrideArtifact(Artifact artifact, Artifact override)", "class_method_signature": "ConfigurationHandlerOverride.overrideArtifact(Artifact artifact, Artifact override)", "testcase": false, "constructor": false}, {"identifier": "configureIgnoreForDownload", "parameters": "(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter2)", "modifiers": "private", "return": "void", "signature": "void configureIgnoreForDownload(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter2)", "full_signature": "private void configureIgnoreForDownload(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter2)", "class_method_signature": "ConfigurationHandlerOverride.configureIgnoreForDownload(Configuration configuration, Collection<Artifact> artifacts,\n            IProcessingReporter reporter2)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Collection<Artifact> intermediates)", "modifiers": "@Override public", "return": "Collection<Artifact>", "signature": "Collection<Artifact> process(Collection<Artifact> intermediates)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> intermediates)", "class_method_signature": "ConfigurationHandlerOverride.process(Collection<Artifact> intermediates)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/processors/filter/ConfigurationHandlerOverride.java"}, "focal_method": {"identifier": "process", "parameters": "(Collection<Artifact> intermediates)", "modifiers": "@Override public", "return": "Collection<Artifact>", "body": "@Override\n    public Collection<Artifact> process(Collection<Artifact> intermediates) {\n        resolveOverride(context.getConfiguration(), intermediates, this.reporter);\n        return intermediates;\n    }", "signature": "Collection<Artifact> process(Collection<Artifact> intermediates)", "full_signature": "@Override public Collection<Artifact> process(Collection<Artifact> intermediates)", "class_method_signature": "ConfigurationHandlerOverride.process(Collection<Artifact> intermediates)", "testcase": false, "constructor": false, "invocations": ["resolveOverride", "getConfiguration"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}