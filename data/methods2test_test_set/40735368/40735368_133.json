{"test_class": {"identifier": "UtilitiesTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "final private static double DELTA = 1E-6;", "modifier": "final private static", "type": "double", "declarator": "DELTA = 1E-6", "var_name": "DELTA"}], "file": "modules/plugin/coverage-multidim/coverage-api/src/test/java/org/geotools/coverage/io/util/UtilitiesTest.java"}, "test_case": {"identifier": "testCreateCoverage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateCoverage() throws IOException{\n        // Definition of the parameters\n        GridCoverageFactory coverageFactory = new GridCoverageFactory(GeoTools.getDefaultHints());\n        String coverageName = \"test\";\n        int imageIndex = 0;\n        PlanarImage image = ConstantDescriptor.create(10f, 10f, new Byte[]{1}, GeoTools.getDefaultHints());\n        MathTransform raster2Model = new AffineTransform2D(AffineTransform.getScaleInstance(2, 2));\n        CoordinateReferenceSystem spatialReferenceSystem2D = DefaultGeographicCRS.WGS84;\n        \n        // Calculate a gridGeometry from the image and the MathTransform\n        Rectangle bounds = image.getBounds();\n        GridGeometry2D gg2D = new GridGeometry2D(new GridEnvelope2D(bounds), raster2Model, spatialReferenceSystem2D);\n        \n        GeneralEnvelope coverageEnvelope2D = new GeneralEnvelope(gg2D.getEnvelope());\n        GridSampleDimension[] sampleDimensions = new GridSampleDimension[]{new GridSampleDimension(\"testDim\")};\n        boolean getGeophysics = false;\n        // Creation of the Coverage\n        GridCoverage2D coverage1 = (GridCoverage2D) Utilities.createCoverageFromImage(coverageFactory , coverageName , imageIndex, image ,\n                raster2Model , spatialReferenceSystem2D, null, sampleDimensions,\n                getGeophysics);\n        \n        GridCoverage2D coverage2 = (GridCoverage2D) Utilities.createCoverageFromImage(coverageFactory , coverageName , imageIndex, image ,\n                null , null, coverageEnvelope2D, sampleDimensions,\n                getGeophysics);\n        \n        // Ensure the two coverages have the same envelope and raster dimensions\n        assertTrue(coverage1.getEnvelope2D().boundsEquals(coverage2.getEnvelope2D(), 0, 1, 0.01d));\n        assertSame(coverage1.getRenderedImage(), coverage2.getRenderedImage());\n    }", "signature": "void testCreateCoverage()", "full_signature": "@Test public void testCreateCoverage()", "class_method_signature": "UtilitiesTest.testCreateCoverage()", "testcase": true, "constructor": false, "invocations": ["getDefaultHints", "create", "getDefaultHints", "getScaleInstance", "getBounds", "getEnvelope", "createCoverageFromImage", "createCoverageFromImage", "assertTrue", "boundsEquals", "getEnvelope2D", "getEnvelope2D", "assertSame", "getRenderedImage", "getRenderedImage"]}, "focal_class": {"identifier": "Utilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(Utilities.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(Utilities.class.toString())", "var_name": "LOGGER"}, {"original_string": "private final static OSType OSTYPE = OSInfo.getOSType();", "modifier": "private final static", "type": "OSType", "declarator": "OSTYPE = OSInfo.getOSType()", "var_name": "OSTYPE"}, {"original_string": "private final static MathTransformFactory mtFactory = new DefaultMathTransformFactory();", "modifier": "private final static", "type": "MathTransformFactory", "declarator": "mtFactory = new DefaultMathTransformFactory()", "var_name": "mtFactory"}], "methods": [{"identifier": "getIdentifiers", "parameters": "(final String nameIdentifier)", "modifiers": "public static", "return": "ReferenceIdentifier[]", "signature": "ReferenceIdentifier[] getIdentifiers(final String nameIdentifier)", "full_signature": "public static ReferenceIdentifier[] getIdentifiers(final String nameIdentifier)", "class_method_signature": "Utilities.getIdentifiers(final String nameIdentifier)", "testcase": false, "constructor": false}, {"identifier": "Utilities", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utilities()", "full_signature": "private  Utilities()", "class_method_signature": "Utilities.Utilities()", "testcase": false, "constructor": true}, {"identifier": "getDefaultGeodeticDatum", "parameters": "(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "modifiers": "public static", "return": "DefaultGeodeticDatum", "signature": "DefaultGeodeticDatum getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "full_signature": "public static DefaultGeodeticDatum getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "class_method_signature": "Utilities.getDefaultGeodeticDatum(final String name,\n            final double equatorialRadius, final double inverseFlattening, Unit unit)", "testcase": false, "constructor": false}, {"identifier": "getFileFromCustomInput", "parameters": "(Object input)", "modifiers": "public static", "return": "File", "signature": "File getFileFromCustomInput(Object input)", "full_signature": "public static File getFileFromCustomInput(Object input)", "class_method_signature": "Utilities.getFileFromCustomInput(Object input)", "testcase": false, "constructor": false}, {"identifier": "getMercator2SPProjectedCRS", "parameters": "(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "full_signature": "@SuppressWarnings(\"deprecation\") public static CoordinateReferenceSystem getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "class_method_signature": "Utilities.getMercator2SPProjectedCRS(\n            final double standardParallel, final double centralMeridian, final double natOriginLat,\n            GeographicCRS sourceCRS, Hints hints)", "testcase": false, "constructor": false}, {"identifier": "getBaseCRS", "parameters": "(final double equatorialRadius,\n            final double inverseFlattening)", "modifiers": "public static", "return": "GeographicCRS", "signature": "GeographicCRS getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "full_signature": "public static GeographicCRS getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "class_method_signature": "Utilities.getBaseCRS(final double equatorialRadius,\n            final double inverseFlattening)", "testcase": false, "constructor": false}, {"identifier": "getAttributeValue", "parameters": "(NamedNodeMap attributes, String attributeName)", "modifiers": "public static", "return": "String", "signature": "String getAttributeValue(NamedNodeMap attributes, String attributeName)", "full_signature": "public static String getAttributeValue(NamedNodeMap attributes, String attributeName)", "class_method_signature": "Utilities.getAttributeValue(NamedNodeMap attributes, String attributeName)", "testcase": false, "constructor": false}, {"identifier": "parseUnit", "parameters": "(final String uom)", "modifiers": "public static", "return": "Unit<? extends Quantity>", "signature": "Unit<? extends Quantity> parseUnit(final String uom)", "full_signature": "public static Unit<? extends Quantity> parseUnit(final String uom)", "class_method_signature": "Utilities.parseUnit(final String uom)", "testcase": false, "constructor": false}, {"identifier": "getEnvelopeAsWGS84", "parameters": "(final Envelope envelope, boolean get2D)", "modifiers": "public static", "return": "Envelope", "signature": "Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "full_signature": "public static Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "class_method_signature": "Utilities.getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)", "testcase": false, "constructor": false}, {"identifier": "getRequestedEnvelope2D", "parameters": "(GeneralEnvelope requestedEnvelope)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "full_signature": "public static GeneralEnvelope getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "class_method_signature": "Utilities.getRequestedEnvelope2D(GeneralEnvelope requestedEnvelope)", "testcase": false, "constructor": false}, {"identifier": "getCropRegion", "parameters": "(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "modifiers": "public static", "return": "Rectangle", "signature": "Rectangle getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "full_signature": "public static Rectangle getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "class_method_signature": "Utilities.getCropRegion(GeneralEnvelope envelope,\n            final MathTransform gridToWorldTransform)", "testcase": false, "constructor": false}, {"identifier": "getIntersection", "parameters": "(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "full_signature": "public static GeneralEnvelope getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "class_method_signature": "Utilities.getIntersection(final Envelope2D baseEnvelope2D,\n            final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope requestedEnvelope2D, Rectangle requestedDim,\n            MathTransform2D readGridToWorld, final Envelope2D wgs84BaseEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "getOriginalGridToWorld", "parameters": "(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "modifiers": "public static", "return": "MathTransform", "signature": "MathTransform getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "full_signature": "public static MathTransform getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "class_method_signature": "Utilities.getOriginalGridToWorld(MathTransform raster2Model,\n            final PixelInCell pixInCell)", "testcase": false, "constructor": false}, {"identifier": "evaluateRequestedParams", "parameters": "(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "modifiers": "public static", "return": "GeneralEnvelope", "signature": "GeneralEnvelope evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "full_signature": "public static GeneralEnvelope evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "class_method_signature": "Utilities.evaluateRequestedParams(GridEnvelope originalGridRange,\n            Envelope2D baseEnvelope2D, CoordinateReferenceSystem spatialReferenceSystem2D,\n            MathTransform originalGridToWorld, GeneralEnvelope requestedEnvelope,\n            Rectangle sourceRegion, Rectangle requestedDim, MathTransform2D readGridToWorld,\n            Envelope2D wgs84BaseEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "createCoverageFromImage", "parameters": "(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "full_signature": "public static GridCoverage createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "class_method_signature": "Utilities.createCoverageFromImage(final GridCoverageFactory coverageFactory,\n            final String coverageName, int imageIndex, PlanarImage image,\n            MathTransform raster2Model, final CoordinateReferenceSystem spatialReferenceSystem2D,\n            GeneralEnvelope coverageEnvelope2D, final GridSampleDimension[] sampleDimensions,\n            final boolean getGeophysics)", "testcase": false, "constructor": false}, {"identifier": "setDecimationParameters", "parameters": "(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "modifiers": "public static", "return": "void", "signature": "void setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "full_signature": "public static void setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "class_method_signature": "Utilities.setDecimationParameters(ImageReadParam readP, GridEnvelope baseGridRange,\n            double[] requestedRes, double[] highestRes)", "testcase": false, "constructor": false}, {"identifier": "buildCoverageName", "parameters": "(URL input)", "modifiers": "public static", "return": "NameImpl", "signature": "NameImpl buildCoverageName(URL input)", "full_signature": "public static NameImpl buildCoverageName(URL input)", "class_method_signature": "Utilities.buildCoverageName(URL input)", "testcase": false, "constructor": false}, {"identifier": "setReadParameters", "parameters": "(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "modifiers": "public static", "return": "void", "signature": "void setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "full_signature": "public static void setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "class_method_signature": "Utilities.setReadParameters(OverviewPolicy overviewPolicy, ImageReadParam readParam,\n            GeneralEnvelope requestedEnvelope, Rectangle requestedDim, double[] highestRes,\n            GridEnvelope gridRange, PixelInCell pixelInCell)", "testcase": false, "constructor": false}, {"identifier": "createCoverage", "parameters": "(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "full_signature": "public static GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "class_method_signature": "Utilities.createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "testcase": false, "constructor": false}, {"identifier": "readImage", "parameters": "(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "modifiers": "public static", "return": "PlanarImage", "signature": "PlanarImage readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "full_signature": "public static PlanarImage readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "class_method_signature": "Utilities.readImage(final ImageReaderSpi spi, final Object input,\n            final int imageIndex, final boolean useJAI, final ImageReadParam imageReadParam,\n            final boolean useMultithreading)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "modifiers": "public static", "return": "GridCoverage", "signature": "GridCoverage compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "full_signature": "public static GridCoverage compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "class_method_signature": "Utilities.compute(Object input, final int imageIndex,\n            final boolean needTransformation, final boolean isEmptyRequest, final boolean useJAI,\n            ImageReadParam imageReadParam, final boolean useMultithreading,\n            final GridSampleDimension[] sampleDimensions, final ImageReaderSpi imageReaderSpi,\n            final String coverageName, final GridCoverageFactory coverageFactory,\n            final MathTransform raster2Model,\n            final CoordinateReferenceSystem coordinateReferenceSystem,\n            final GeneralEnvelope envelope2D)", "testcase": false, "constructor": false}, {"identifier": "ensureValidString", "parameters": "(final String... strings)", "modifiers": "public final static", "return": "boolean", "signature": "boolean ensureValidString(final String... strings)", "full_signature": "public final static boolean ensureValidString(final String... strings)", "class_method_signature": "Utilities.ensureValidString(final String... strings)", "testcase": false, "constructor": false}, {"identifier": "buildIso8601Time", "parameters": "(String date, String time)", "modifiers": "public static", "return": "String", "signature": "String buildIso8601Time(String date, String time)", "full_signature": "public static String buildIso8601Time(String date, String time)", "class_method_signature": "Utilities.buildIso8601Time(String date, String time)", "testcase": false, "constructor": false}, {"identifier": "checkFileReadable", "parameters": "(final File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkFileReadable(final File file)", "full_signature": "public static boolean checkFileReadable(final File file)", "class_method_signature": "Utilities.checkFileReadable(final File file)", "testcase": false, "constructor": false}, {"identifier": "getFileInfo", "parameters": "(final File file)", "modifiers": "public static", "return": "String", "signature": "String getFileInfo(final File file)", "full_signature": "public static String getFileInfo(final File file)", "class_method_signature": "Utilities.getFileInfo(final File file)", "testcase": false, "constructor": false}, {"identifier": "loadPropertiesFromURL", "parameters": "(URL propsURL)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadPropertiesFromURL(URL propsURL)", "full_signature": "public static Properties loadPropertiesFromURL(URL propsURL)", "class_method_signature": "Utilities.loadPropertiesFromURL(URL propsURL)", "testcase": false, "constructor": false}], "file": "modules/plugin/coverage-multidim/coverage-api/src/main/java/org/geotools/coverage/io/util/Utilities.java"}, "focal_method": {"identifier": "createCoverage", "parameters": "(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "modifiers": "public static", "return": "GridCoverage", "body": "public static GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)\n            throws IOException {\n        // ////////////////////////////////////////////////////////////////////\n        //\n        // Doing an image read for reading the coverage.\n        //\n        // ////////////////////////////////////////////////////////////////////\n        final PlanarImage image = readImage(spi, input, imageIndex, useJAI, imageReadParam,\n                useMultithreading);\n\n        // /////////////////////////////////////////////////////////////////////\n        //\n        // Creating the coverage\n        //\n        // /////////////////////////////////////////////////////////////////////\n        if (newTransform) {\n            // I need to calculate a new transformation (raster2Model)\n            // between the cropped image and the required envelope\n            final int ssWidth = image.getWidth();\n            final int ssHeight = image.getHeight();\n\n            // //\n            //\n            // setting new coefficients to define a new affineTransformation\n            // to be applied to the grid to world transformation\n            // ------------------------------------------------------\n            //\n            // With respect to the original envelope, the obtained\n            // planarImage needs to be rescaled and translated. The scaling\n            // factors are computed as the ratio between the cropped source\n            // region sizes and the read image sizes. The translate\n            // settings are represented by the offsets of the source region.\n            //\n            // //\n            final Rectangle sourceRegion = imageReadParam.getSourceRegion();\n            final double scaleX = sourceRegion.width / (1.0 * ssWidth);\n            final double scaleY = sourceRegion.height / (1.0 * ssHeight);\n            final double translateX = sourceRegion.x;\n            final double translateY = sourceRegion.y;\n            return Utilities.createCoverageFromImage(coverageFactory, coverageName, imageIndex,\n                    image, ConcatenatedTransform.create(ProjectiveTransform\n                            .create(new AffineTransform(scaleX, 0, 0, scaleY, translateX,\n                                    translateY)), raster2Model), coordinateReferenceSystem,\n                    (GeneralEnvelope) null, sampleDimensions, true);\n        } else {\n            // In case of no transformation is required (As an instance,\n            // when reading the whole image)\n            return Utilities.createCoverageFromImage(coverageFactory, coverageName, imageIndex,\n                    image, (MathTransform) null, (CoordinateReferenceSystem) null,\n                    coverageEnvelope2D, sampleDimensions, true);\n        }\n    }", "signature": "GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "full_signature": "public static GridCoverage createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "class_method_signature": "Utilities.createCoverage(ImageReaderSpi spi, Object input,\n            final int imageIndex, ImageReadParam imageReadParam, final boolean useJAI,\n            final boolean useMultithreading, final boolean newTransform,\n            final GridSampleDimension[] sampleDimensions, final String coverageName,\n            GridCoverageFactory coverageFactory, MathTransform raster2Model,\n            CoordinateReferenceSystem coordinateReferenceSystem, GeneralEnvelope coverageEnvelope2D)", "testcase": false, "constructor": false, "invocations": ["readImage", "getWidth", "getHeight", "getSourceRegion", "createCoverageFromImage", "create", "create", "createCoverageFromImage"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}