{"test_class": {"identifier": "XSLTStreamingOutputTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Templates   templates;", "modifier": "private", "type": "Templates", "declarator": "templates", "var_name": "templates"}, {"original_string": "private Transformer transformer;", "modifier": "private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private Source      source;", "modifier": "private", "type": "Source", "declarator": "source", "var_name": "source"}, {"original_string": "private XSLTStreamingOutput xsltStreamingOutput;", "modifier": "private", "type": "XSLTStreamingOutput", "declarator": "xsltStreamingOutput", "var_name": "xsltStreamingOutput"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/XSLTStreamingOutputTest.java"}, "test_case": {"identifier": "throwsIoExceptionWhenCreationOfTransformerFromTemplateFails", "parameters": "()", "modifiers": "@Test(expected = IOException.class) public", "return": "void", "body": "@Test(expected = IOException.class)\n    public void throwsIoExceptionWhenCreationOfTransformerFromTemplateFails() throws Exception {\n        when(templates.newTransformer()).thenThrow(new TransformerConfigurationException());\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        xsltStreamingOutput.write(out);\n    }", "signature": "void throwsIoExceptionWhenCreationOfTransformerFromTemplateFails()", "full_signature": "@Test(expected = IOException.class) public void throwsIoExceptionWhenCreationOfTransformerFromTemplateFails()", "class_method_signature": "XSLTStreamingOutputTest.throwsIoExceptionWhenCreationOfTransformerFromTemplateFails()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "newTransformer", "write"]}, "focal_class": {"identifier": "XSLTStreamingOutput", "superclass": "", "interfaces": "implements StreamingOutput", "fields": [{"original_string": "private Source    source;", "modifier": "private", "type": "Source", "declarator": "source", "var_name": "source"}, {"original_string": "private Templates templates;", "modifier": "private", "type": "Templates", "declarator": "templates", "var_name": "templates"}], "methods": [{"identifier": "XSLTStreamingOutput", "parameters": "(Source source, Templates templates)", "modifiers": "public", "return": "", "signature": " XSLTStreamingOutput(Source source, Templates templates)", "full_signature": "public  XSLTStreamingOutput(Source source, Templates templates)", "class_method_signature": "XSLTStreamingOutput.XSLTStreamingOutput(Source source, Templates templates)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream output)", "full_signature": "@Override public void write(OutputStream output)", "class_method_signature": "XSLTStreamingOutput.write(OutputStream output)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/XSLTStreamingOutput.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream output)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(OutputStream output) throws IOException {\n        try {\n            Transformer transformer = templates.newTransformer();\n            transformer.transform(source, new StreamResult(output));\n        } catch (TransformerException tre) {\n            throw new IOException(tre.getMessage(), tre);\n        }\n    }", "signature": "void write(OutputStream output)", "full_signature": "@Override public void write(OutputStream output)", "class_method_signature": "XSLTStreamingOutput.write(OutputStream output)", "testcase": false, "constructor": false, "invocations": ["newTransformer", "transform", "getMessage"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}