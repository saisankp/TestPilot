{"test_class": {"identifier": "ValueSetterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConverterRegistry converters;", "modifier": "private", "type": "ConverterRegistry", "declarator": "converters", "var_name": "converters"}, {"original_string": "private TestModel model;", "modifier": "private", "type": "TestModel", "declarator": "model", "var_name": "model"}, {"original_string": "private StringConverter<Integer> integerConverter;", "modifier": "private", "type": "StringConverter<Integer>", "declarator": "integerConverter", "var_name": "integerConverter"}, {"original_string": "private Mockery mockery;", "modifier": "private", "type": "Mockery", "declarator": "mockery", "var_name": "mockery"}], "file": "support/src/test/java/com/sjl/dsl4xml/support/ValueSetterTest.java"}, "test_case": {"identifier": "introspectsModelClassToFindAndInvokeInsertMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void introspectsModelClassToFindAndInvokeInsertMethods() {\n\t\tmockery.checking(new Expectations() {{\n\t\t\toneOf(converters).getConverter(Integer.class); // parameter to the setFieldOne method is of type Integer\n\t\t\twill(returnValue(integerConverter));\n\t\t\t\n\t\t\toneOf(integerConverter).convert(\"98\");\n\t\t\twill(returnValue(new Integer(98)));\n\t\t\t\n\t\t\toneOf(model).insertFieldThree(new Integer(98));\n\t\t}});\n\t\t\n\t\tValueSetter _s = new ValueSetter(converters, TestModel.class, \"fieldThree\");\n\t\t_s.invoke(\"fieldThree\", model, \"98\");\n\t}", "signature": "void introspectsModelClassToFindAndInvokeInsertMethods()", "full_signature": "@Test public void introspectsModelClassToFindAndInvokeInsertMethods()", "class_method_signature": "ValueSetterTest.introspectsModelClassToFindAndInvokeInsertMethods()", "testcase": true, "constructor": false, "invocations": ["checking", "getConverter", "oneOf", "will", "returnValue", "convert", "oneOf", "will", "returnValue", "insertFieldThree", "oneOf", "invoke"]}, "focal_class": {"identifier": "ValueSetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Method setter;", "modifier": "private", "type": "Method", "declarator": "setter", "var_name": "setter"}, {"original_string": "private StringConverter<?> converter;", "modifier": "private", "type": "StringConverter<?>", "declarator": "converter", "var_name": "converter"}, {"original_string": "private boolean twoArgSetter;", "modifier": "private", "type": "boolean", "declarator": "twoArgSetter", "var_name": "twoArgSetter"}, {"original_string": "private Method getter;", "modifier": "private", "type": "Method", "declarator": "getter", "var_name": "getter"}], "methods": [{"identifier": "ValueSetter", "parameters": "(ConverterRegistry aConverters, Class<?> aContextType, String... aMaybeNames)", "modifiers": "public", "return": "", "signature": " ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, String... aMaybeNames)", "full_signature": "public  ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, String... aMaybeNames)", "class_method_signature": "ValueSetter.ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, String... aMaybeNames)", "testcase": false, "constructor": true}, {"identifier": "ValueSetter", "parameters": "(ConverterRegistry aConverters, Class<?> aContextType, Class<?> aValueType, String... aMaybeNames)", "modifiers": "public", "return": "", "signature": " ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, Class<?> aValueType, String... aMaybeNames)", "full_signature": "public  ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, Class<?> aValueType, String... aMaybeNames)", "class_method_signature": "ValueSetter.ValueSetter(ConverterRegistry aConverters, Class<?> aContextType, Class<?> aValueType, String... aMaybeNames)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(String aKey, Object anOn, String aWith)", "modifiers": "public", "return": "void", "signature": "void invoke(String aKey, Object anOn, String aWith)", "full_signature": "public void invoke(String aKey, Object anOn, String aWith)", "class_method_signature": "ValueSetter.invoke(String aKey, Object anOn, String aWith)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ValueSetter.toString()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> aContextType, String... aMaybeNames)", "modifiers": "private", "return": "Method", "signature": "Method getMethod(Class<?> aContextType, String... aMaybeNames)", "full_signature": "private Method getMethod(Class<?> aContextType, String... aMaybeNames)", "class_method_signature": "ValueSetter.getMethod(Class<?> aContextType, String... aMaybeNames)", "testcase": false, "constructor": false}], "file": "support/src/main/java/com/sjl/dsl4xml/support/ValueSetter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(String aKey, Object anOn, String aWith)", "modifiers": "public", "return": "void", "body": "public void invoke(String aKey, Object anOn, String aWith) {\n\t\ttry {\n\t\t\tif (twoArgSetter) {\n\t\t\t\tsetter.invoke(anOn, aKey, converter.convert(aWith));\n\t\t\t} else {\n\t\t\t\tsetter.invoke(anOn, converter.convert(aWith));\n\t\t\t}\n\t\t} catch (ParsingException anExc) {\n\t\t\tthrow anExc;\n        } catch (IllegalArgumentException anExc) {\n            throw new ParsingException(\n                anExc.getMessage() +\n                \" while trying to invoke \" + setter +\n                \" on \" + anOn +\n                \" with \" + ((aKey != null) ? aKey + \" and \" : \"\") + aWith +\n                \" converted by \" + converter, anExc);\n\t\t} catch (Exception anExc) {\n\t\t\tthrow new RuntimeException(anExc);\n\t\t}\n\t}", "signature": "void invoke(String aKey, Object anOn, String aWith)", "full_signature": "public void invoke(String aKey, Object anOn, String aWith)", "class_method_signature": "ValueSetter.invoke(String aKey, Object anOn, String aWith)", "testcase": false, "constructor": false, "invocations": ["invoke", "convert", "invoke", "convert", "getMessage"]}, "repository": {"repo_id": 3926525, "url": "https://github.com/steveliles/dsl4xml", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 26, "size": 721, "license": "BSD 3-Clause \"New\" or \"Revised\" License"}}