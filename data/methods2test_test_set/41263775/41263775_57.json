{"test_class": {"identifier": "MetadataEngineTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/metadata/MetadataEngineTest.java"}, "test_case": {"identifier": "testAttemptToAccessMetadataWithIndexOnDifferentAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAttemptToAccessMetadataWithIndexOnDifferentAttribute() {\n        IndexedCollection<Car> cars = createIndexedCollectionOfCars(5);\n        // Add an index on a different attribute...\n        cars.addIndex(HashIndex.onAttribute(Car.MODEL));\n        // Create a mock (different) attribute we will query...\n        @SuppressWarnings(\"unchecked\") Attribute<Car, Integer> ATTRIBUTE = Mockito.mock(SimpleAttribute.class);\n        Mockito.when(ATTRIBUTE.toString()).thenReturn(\"ATTRIBUTE\");\n        IllegalStateException expected = null;\n        try {\n            cars.getMetadataEngine().getAttributeMetadata(ATTRIBUTE);\n        }\n        catch (IllegalStateException e) {\n            expected = e;\n        }\n        assertNotNull(expected);\n        assertEquals(\"A KeyStatisticsAttributeIndex has not been added to the collection, and must be added first, to enable metadata to be examined for attribute: ATTRIBUTE\", expected.getMessage());\n    }", "signature": "void testAttemptToAccessMetadataWithIndexOnDifferentAttribute()", "full_signature": "@Test public void testAttemptToAccessMetadataWithIndexOnDifferentAttribute()", "class_method_signature": "MetadataEngineTest.testAttemptToAccessMetadataWithIndexOnDifferentAttribute()", "testcase": true, "constructor": false, "invocations": ["createIndexedCollectionOfCars", "addIndex", "onAttribute", "mock", "thenReturn", "when", "toString", "getAttributeMetadata", "getMetadataEngine", "assertNotNull", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "MetadataEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IndexedCollection<O> indexedCollection;", "modifier": "private final", "type": "IndexedCollection<O>", "declarator": "indexedCollection", "var_name": "indexedCollection"}, {"original_string": "private final Supplier<QueryOptions> openResourcesHandler;", "modifier": "private final", "type": "Supplier<QueryOptions>", "declarator": "openResourcesHandler", "var_name": "openResourcesHandler"}, {"original_string": "private final Consumer<QueryOptions> closeResourcesHandler;", "modifier": "private final", "type": "Consumer<QueryOptions>", "declarator": "closeResourcesHandler", "var_name": "closeResourcesHandler"}], "methods": [{"identifier": "MetadataEngine", "parameters": "(IndexedCollection<O> indexedCollection, Supplier<QueryOptions> openResourcesHandler, Consumer<QueryOptions> closeResourcesHandler)", "modifiers": "public", "return": "", "signature": " MetadataEngine(IndexedCollection<O> indexedCollection, Supplier<QueryOptions> openResourcesHandler, Consumer<QueryOptions> closeResourcesHandler)", "full_signature": "public  MetadataEngine(IndexedCollection<O> indexedCollection, Supplier<QueryOptions> openResourcesHandler, Consumer<QueryOptions> closeResourcesHandler)", "class_method_signature": "MetadataEngine.MetadataEngine(IndexedCollection<O> indexedCollection, Supplier<QueryOptions> openResourcesHandler, Consumer<QueryOptions> closeResourcesHandler)", "testcase": false, "constructor": true}, {"identifier": "getAttributeMetadata", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public", "return": "AttributeMetadata<A, O>", "signature": "AttributeMetadata<A, O> getAttributeMetadata(Attribute<O, A> attribute)", "full_signature": "public AttributeMetadata<A, O> getAttributeMetadata(Attribute<O, A> attribute)", "class_method_signature": "MetadataEngine.getAttributeMetadata(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "getSortedAttributeMetadata", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public", "return": "SortedAttributeMetadata<A, O>", "signature": "SortedAttributeMetadata<A, O> getSortedAttributeMetadata(Attribute<O, A> attribute)", "full_signature": "public SortedAttributeMetadata<A, O> getSortedAttributeMetadata(Attribute<O, A> attribute)", "class_method_signature": "MetadataEngine.getSortedAttributeMetadata(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "getIndexOnAttribute", "parameters": "(Class<I> indexType, Attribute<O, A> attribute)", "modifiers": "private", "return": "I", "signature": "I getIndexOnAttribute(Class<I> indexType, Attribute<O, A> attribute)", "full_signature": "private I getIndexOnAttribute(Class<I> indexType, Attribute<O, A> attribute)", "class_method_signature": "MetadataEngine.getIndexOnAttribute(Class<I> indexType, Attribute<O, A> attribute)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/metadata/MetadataEngine.java"}, "focal_method": {"identifier": "getAttributeMetadata", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public", "return": "AttributeMetadata<A, O>", "body": "public <A> AttributeMetadata<A, O> getAttributeMetadata(Attribute<O, A> attribute) {\n        @SuppressWarnings(\"unchecked\")\n        KeyStatisticsIndex<A, O> index = getIndexOnAttribute(KeyStatisticsAttributeIndex.class, attribute);\n        return new AttributeMetadata<>(index, openResourcesHandler, closeResourcesHandler);\n    }", "signature": "AttributeMetadata<A, O> getAttributeMetadata(Attribute<O, A> attribute)", "full_signature": "public AttributeMetadata<A, O> getAttributeMetadata(Attribute<O, A> attribute)", "class_method_signature": "MetadataEngine.getAttributeMetadata(Attribute<O, A> attribute)", "testcase": false, "constructor": false, "invocations": ["getIndexOnAttribute"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}