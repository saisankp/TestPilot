{"test_class": {"identifier": "PrometheusMetricFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "contributions/metric/prometheus/src/test/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetricFactoryTest.java"}, "test_case": {"identifier": "testCreateJvmMetricEnable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateJvmMetricEnable()\n            throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n\n        setProperty(PrometheusMetricFactory.JVM_ENABLE_PROP, \"true\");\n        setProperty(PrometheusMetricFactory.HTTP_SERVER_ENABLE_PROP, \"false\");\n        PrometheusMetric metric = (PrometheusMetric) new PrometheusMetricFactory().create();\n        clearProperty(PrometheusMetricFactory.JVM_ENABLE_PROP);\n        clearProperty(PrometheusMetricFactory.HTTP_SERVER_ENABLE_PROP);\n\n        Field registryField = metric.getClass().getDeclaredField(\"registry\");\n        registryField.setAccessible(true);\n        CollectorRegistry registry = (CollectorRegistry) registryField.get(metric);\n\n        // assertions\n        Assert.assertNotNull(registry.getSampleValue(\"process_cpu_seconds_total\"));\n    }", "signature": "void testCreateJvmMetricEnable()", "full_signature": "@Test public void testCreateJvmMetricEnable()", "class_method_signature": "PrometheusMetricFactoryTest.testCreateJvmMetricEnable()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "create", "clearProperty", "clearProperty", "getDeclaredField", "getClass", "setAccessible", "get", "assertNotNull", "getSampleValue"]}, "focal_class": {"identifier": "PrometheusMetricFactory", "superclass": "", "interfaces": "implements MetricFactory", "fields": [{"original_string": "public static final String SYSTEM_PROP_PREFIX = \"athenz.metrics.prometheus.\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_PROP_PREFIX = \"athenz.metrics.prometheus.\"", "var_name": "SYSTEM_PROP_PREFIX"}, {"original_string": "public static final String ENABLE_PROP = \"enable\";", "modifier": "public static final", "type": "String", "declarator": "ENABLE_PROP = \"enable\"", "var_name": "ENABLE_PROP"}, {"original_string": "public static final String JVM_ENABLE_PROP = \"jvm.enable\";", "modifier": "public static final", "type": "String", "declarator": "JVM_ENABLE_PROP = \"jvm.enable\"", "var_name": "JVM_ENABLE_PROP"}, {"original_string": "public static final String HTTP_SERVER_ENABLE_PROP = \"http_server.enable\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_SERVER_ENABLE_PROP = \"http_server.enable\"", "var_name": "HTTP_SERVER_ENABLE_PROP"}, {"original_string": "public static final String HTTP_SERVER_PORT_PROP = \"http_server.port\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_SERVER_PORT_PROP = \"http_server.port\"", "var_name": "HTTP_SERVER_PORT_PROP"}, {"original_string": "public static final String NAMESPACE_PROP = \"namespace\";", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_PROP = \"namespace\"", "var_name": "NAMESPACE_PROP"}, {"original_string": "public static final String LABEL_REQUEST_DOMAIN_NAME_ENABLE_PROP = \"label.request_domain_name.enable\";", "modifier": "public static final", "type": "String", "declarator": "LABEL_REQUEST_DOMAIN_NAME_ENABLE_PROP = \"label.request_domain_name.enable\"", "var_name": "LABEL_REQUEST_DOMAIN_NAME_ENABLE_PROP"}, {"original_string": "public static final String LABEL_PRINCIPAL_DOMAIN_NAME_ENABLE_PROP = \"label.principal_domain_name.enable\";", "modifier": "public static final", "type": "String", "declarator": "LABEL_PRINCIPAL_DOMAIN_NAME_ENABLE_PROP = \"label.principal_domain_name.enable\"", "var_name": "LABEL_PRINCIPAL_DOMAIN_NAME_ENABLE_PROP"}, {"original_string": "public static final String LABEL_HTTP_METHOD_NAME_ENABLE_PROP = \"label.http_method_name.enable\";", "modifier": "public static final", "type": "String", "declarator": "LABEL_HTTP_METHOD_NAME_ENABLE_PROP = \"label.http_method_name.enable\"", "var_name": "LABEL_HTTP_METHOD_NAME_ENABLE_PROP"}, {"original_string": "public static final String LABEL_HTTP_STATUS_NAME_ENABLE_PROP = \"label.http_status_name.enable\";", "modifier": "public static final", "type": "String", "declarator": "LABEL_HTTP_STATUS_NAME_ENABLE_PROP = \"label.http_status_name.enable\"", "var_name": "LABEL_HTTP_STATUS_NAME_ENABLE_PROP"}, {"original_string": "public static final String LABEL_API_NAME_ENABLE_PROP = \"label.api_name.enable\";", "modifier": "public static final", "type": "String", "declarator": "LABEL_API_NAME_ENABLE_PROP = \"label.api_name.enable\"", "var_name": "LABEL_API_NAME_ENABLE_PROP"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "Metric", "signature": "Metric create()", "full_signature": "@Override public Metric create()", "class_method_signature": "PrometheusMetricFactory.create()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String key, String def)", "modifiers": "public static", "return": "String", "signature": "String getProperty(String key, String def)", "full_signature": "public static String getProperty(String key, String def)", "class_method_signature": "PrometheusMetricFactory.getProperty(String key, String def)", "testcase": false, "constructor": false}], "file": "contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetricFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "Metric", "body": "@Override\n    public Metric create() {\n        boolean isEnable = Boolean.valueOf(getProperty(ENABLE_PROP, \"true\"));\n        if (!isEnable) {\n            return new NoOpMetric();\n        }\n\n        // metric registry, should have 1-to-1 relationship with ConcurrentHashMap namesToCollectors for collector lookup\n        CollectorRegistry registry = new CollectorRegistry();\n        ConcurrentHashMap<String, Collector> namesToCollectors = new ConcurrentHashMap<>();\n\n        // register JVM metrics\n        if (Boolean.valueOf(getProperty(JVM_ENABLE_PROP, \"false\"))) {\n            // for version = 0.6.1\n            // DefaultExports.register(registry);\n\n            // for version <= 0.6.0\n            new StandardExports().register(registry);\n            new MemoryPoolsExports().register(registry);\n            new MemoryAllocationExports().register(registry);\n            new BufferPoolsExports().register(registry);\n            new GarbageCollectorExports().register(registry);\n            new ThreadExports().register(registry);\n            new ClassLoadingExports().register(registry);\n            new VersionInfoExports().register(registry);\n        }\n\n        // exporter\n        PrometheusExporter exporter = null;\n        if (Boolean.valueOf(getProperty(HTTP_SERVER_ENABLE_PROP, \"true\"))) {\n            // HTTP server for pulling\n            int pullingPort = Integer.valueOf(getProperty(HTTP_SERVER_PORT_PROP, \"8181\"));\n            try {\n                exporter = new PrometheusPullServer(pullingPort, registry);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        // prometheus metric class\n        String namespace = getProperty(NAMESPACE_PROP, \"athenz_server\");\n        boolean isLabelRequestDomainNameEnable = Boolean.valueOf(getProperty(LABEL_REQUEST_DOMAIN_NAME_ENABLE_PROP, \"false\"));\n        boolean isLabelPrincipalDomainNameEnable = Boolean.valueOf(getProperty(LABEL_PRINCIPAL_DOMAIN_NAME_ENABLE_PROP, \"false\"));\n        boolean isLabelHttpMethodNameEnable = Boolean.valueOf(getProperty(LABEL_HTTP_METHOD_NAME_ENABLE_PROP, \"false\"));\n        boolean isLabelHttpStatusNameEnable = Boolean.valueOf(getProperty(LABEL_HTTP_STATUS_NAME_ENABLE_PROP, \"false\"));\n        boolean isLabelApiNameEnable = Boolean.valueOf(getProperty(LABEL_API_NAME_ENABLE_PROP, \"false\"));\n        return new PrometheusMetric(\n                registry,\n                namesToCollectors,\n                exporter,\n                namespace,\n                isLabelRequestDomainNameEnable,\n                isLabelPrincipalDomainNameEnable,\n                isLabelHttpMethodNameEnable,\n                isLabelHttpStatusNameEnable,\n                isLabelApiNameEnable);\n\n    }", "signature": "Metric create()", "full_signature": "@Override public Metric create()", "class_method_signature": "PrometheusMetricFactory.create()", "testcase": false, "constructor": false, "invocations": ["valueOf", "getProperty", "valueOf", "getProperty", "register", "register", "register", "register", "register", "register", "register", "register", "valueOf", "getProperty", "valueOf", "getProperty", "getProperty", "valueOf", "getProperty", "valueOf", "getProperty", "valueOf", "getProperty", "valueOf", "getProperty", "valueOf", "getProperty"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}