{"test_class": {"identifier": "EquivalenceFinderTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/optimizer/rule/EquivalenceFinderTest.java"}, "test_case": {"identifier": "traverseBarelyWorks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void traverseBarelyWorks() {\n        EquivalenceFinder<Integer> finder = create(6);\n        finder.markEquivalent(1, 2);\n        finder.markEquivalent(2, 3);\n        finder.markEquivalent(3, 4);\n        finder.markEquivalent(4, 5);\n        finder.markEquivalent(5, 6);\n\n        check(finder, true, 1, 6);\n    }", "signature": "void traverseBarelyWorks()", "full_signature": "@Test public void traverseBarelyWorks()", "class_method_signature": "EquivalenceFinderTest.traverseBarelyWorks()", "testcase": true, "constructor": false, "invocations": ["create", "markEquivalent", "markEquivalent", "markEquivalent", "markEquivalent", "markEquivalent", "check"]}, "focal_class": {"identifier": "EquivalenceFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Multimap<T,T> equivalences = HashMultimap.create();", "modifier": "private", "type": "Multimap<T,T>", "declarator": "equivalences = HashMultimap.create()", "var_name": "equivalences"}, {"original_string": "private int maxTraversals;", "modifier": "private", "type": "int", "declarator": "maxTraversals", "var_name": "maxTraversals"}, {"original_string": "private Set<T> seenNodes;", "modifier": "private", "type": "Set<T>", "declarator": "seenNodes", "var_name": "seenNodes"}], "methods": [{"identifier": "copyEquivalences", "parameters": "(EquivalenceFinder<? extends T> source)", "modifiers": "public", "return": "void", "signature": "void copyEquivalences(EquivalenceFinder<? extends T> source)", "full_signature": "public void copyEquivalences(EquivalenceFinder<? extends T> source)", "class_method_signature": "EquivalenceFinder.copyEquivalences(EquivalenceFinder<? extends T> source)", "testcase": false, "constructor": false}, {"identifier": "markEquivalent", "parameters": "(T one, T two)", "modifiers": "public", "return": "void", "signature": "void markEquivalent(T one, T two)", "full_signature": "public void markEquivalent(T one, T two)", "class_method_signature": "EquivalenceFinder.markEquivalent(T one, T two)", "testcase": false, "constructor": false}, {"identifier": "areEquivalent", "parameters": "(T one, T two)", "modifiers": "public", "return": "boolean", "signature": "boolean areEquivalent(T one, T two)", "full_signature": "public boolean areEquivalent(T one, T two)", "class_method_signature": "EquivalenceFinder.areEquivalent(T one, T two)", "testcase": false, "constructor": false}, {"identifier": "findEquivalents", "parameters": "(T node)", "modifiers": "public", "return": "Set<T>", "signature": "Set<T> findEquivalents(T node)", "full_signature": "public Set<T> findEquivalents(T node)", "class_method_signature": "EquivalenceFinder.findEquivalents(T node)", "testcase": false, "constructor": false}, {"identifier": "equivalencePairs", "parameters": "()", "modifiers": "public", "return": "Set<Entry<T, T>>", "signature": "Set<Entry<T, T>> equivalencePairs()", "full_signature": "public Set<Entry<T, T>> equivalencePairs()", "class_method_signature": "EquivalenceFinder.equivalencePairs()", "testcase": false, "constructor": false}, {"identifier": "findParticipants", "parameters": "()", "modifiers": "public", "return": "Set<T>", "signature": "Set<T> findParticipants()", "full_signature": "public Set<T> findParticipants()", "class_method_signature": "EquivalenceFinder.findParticipants()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EquivalenceFinder.toString()", "testcase": false, "constructor": false}, {"identifier": "describeNull", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String describeNull()", "full_signature": "protected String describeNull()", "class_method_signature": "EquivalenceFinder.describeNull()", "testcase": false, "constructor": false}, {"identifier": "describeElement", "parameters": "(T element)", "modifiers": "protected", "return": "String", "signature": "String describeElement(T element)", "full_signature": "protected String describeElement(T element)", "class_method_signature": "EquivalenceFinder.describeElement(T element)", "testcase": false, "constructor": false}, {"identifier": "tooMuchTraversing", "parameters": "()", "modifiers": "", "return": "void", "signature": "void tooMuchTraversing()", "full_signature": " void tooMuchTraversing()", "class_method_signature": "EquivalenceFinder.tooMuchTraversing()", "testcase": false, "constructor": false}, {"identifier": "elementToString", "parameters": "(T element)", "modifiers": "private", "return": "String", "signature": "String elementToString(T element)", "full_signature": "private String elementToString(T element)", "class_method_signature": "EquivalenceFinder.elementToString(T element)", "testcase": false, "constructor": false}, {"identifier": "areEquivalent", "parameters": "(T one, T two, int remainingTraversals)", "modifiers": "private", "return": "boolean", "signature": "boolean areEquivalent(T one, T two, int remainingTraversals)", "full_signature": "private boolean areEquivalent(T one, T two, int remainingTraversals)", "class_method_signature": "EquivalenceFinder.areEquivalent(T one, T two, int remainingTraversals)", "testcase": false, "constructor": false}, {"identifier": "buildEquivalents", "parameters": "(T node, Set<T> accumulator)", "modifiers": "private", "return": "void", "signature": "void buildEquivalents(T node, Set<T> accumulator)", "full_signature": "private void buildEquivalents(T node, Set<T> accumulator)", "class_method_signature": "EquivalenceFinder.buildEquivalents(T node, Set<T> accumulator)", "testcase": false, "constructor": false}, {"identifier": "initSeenItems", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initSeenItems()", "full_signature": "private void initSeenItems()", "class_method_signature": "EquivalenceFinder.initSeenItems()", "testcase": false, "constructor": false}, {"identifier": "EquivalenceFinder", "parameters": "()", "modifiers": "public", "return": "", "signature": " EquivalenceFinder()", "full_signature": "public  EquivalenceFinder()", "class_method_signature": "EquivalenceFinder.EquivalenceFinder()", "testcase": false, "constructor": true}, {"identifier": "EquivalenceFinder", "parameters": "(int maxTraversals)", "modifiers": "", "return": "", "signature": " EquivalenceFinder(int maxTraversals)", "full_signature": "  EquivalenceFinder(int maxTraversals)", "class_method_signature": "EquivalenceFinder.EquivalenceFinder(int maxTraversals)", "testcase": false, "constructor": true}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/optimizer/rule/EquivalenceFinder.java"}, "focal_method": {"identifier": "markEquivalent", "parameters": "(T one, T two)", "modifiers": "public", "return": "void", "body": "public void markEquivalent(T one, T two) {\n        ArgumentValidation.notNull(\"first arg\", one);\n        ArgumentValidation.notNull(\"second arg\", two);\n        if (one.equals(two))\n            return; // equals implies equivalence even without this\n\n        equivalences.put(one, two);\n        equivalences.put(two, one);\n    }", "signature": "void markEquivalent(T one, T two)", "full_signature": "public void markEquivalent(T one, T two)", "class_method_signature": "EquivalenceFinder.markEquivalent(T one, T two)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "equals", "put", "put"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}