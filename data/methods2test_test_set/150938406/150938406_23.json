{"test_class": {"identifier": "VectorChiSqSelectorBatchOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/batch/feature/VectorChiSqSelectorBatchOpTest.java"}, "test_case": {"identifier": "testDense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDense() {\n\n        Row[] testArray =\n            new Row[]{\n                Row.of(\"1.0 2.0 4.0\", \"a\"),\n                Row.of(\"-1.0 -3.0 4.0\", \"a\"),\n                Row.of(\"4.0 2.0 3.0\", \"b\"),\n                Row.of(\"3.4 5.1 5.0\", \"b\")\n            };\n\n        String[] colNames = new String[]{\"vec\", \"label\"};\n\n        MemSourceBatchOp source = new MemSourceBatchOp(Arrays.asList(testArray), colNames);\n\n        VectorChiSqSelectorBatchOp selector = new VectorChiSqSelectorBatchOp()\n            .setSelectedCol(\"vec\")\n            .setLabelCol(\"label\")\n            .setNumTopFeatures(2);\n\n        selector.linkFrom(source);\n\n        selector.lazyPrintModelInfo();\n\n        selector.lazyCollectModelInfo(\n            new Consumer<ChisqSelectorModelInfo>() {\n                @Override\n                public void accept(ChisqSelectorModelInfo chisqSelectorSummary) {\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"0\"), 4.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"1\"), 2.0, 10e-10);\n                    Assert.assertEquals(chisqSelectorSummary.chisq(\"2\"), 4.0, 10e-10);\n                }\n            }\n        );\n\n    }", "signature": "void testDense()", "full_signature": "@Test public void testDense()", "class_method_signature": "VectorChiSqSelectorBatchOpTest.testDense()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "asList", "setNumTopFeatures", "setLabelCol", "setSelectedCol", "linkFrom", "lazyPrintModelInfo", "lazyCollectModelInfo", "assertEquals", "chisq", "assertEquals", "chisq", "assertEquals", "chisq"]}, "focal_class": {"identifier": "VectorChiSqSelectorBatchOp", "superclass": "extends BatchOperator<VectorChiSqSelectorBatchOp>", "interfaces": "implements VectorChiSqSelectorParams<VectorChiSqSelectorBatchOp>,\n    WithModelInfoBatchOp<ChisqSelectorModelInfo, VectorChiSqSelectorBatchOp, ChisqSelectorModelInfoBatchOp>", "fields": [{"original_string": "private static final long serialVersionUID = 2668694739982519452L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2668694739982519452L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "VectorChiSqSelectorBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " VectorChiSqSelectorBatchOp()", "full_signature": "public  VectorChiSqSelectorBatchOp()", "class_method_signature": "VectorChiSqSelectorBatchOp.VectorChiSqSelectorBatchOp()", "testcase": false, "constructor": true}, {"identifier": "VectorChiSqSelectorBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " VectorChiSqSelectorBatchOp(Params params)", "full_signature": "public  VectorChiSqSelectorBatchOp(Params params)", "class_method_signature": "VectorChiSqSelectorBatchOp.VectorChiSqSelectorBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "VectorChiSqSelectorBatchOp", "signature": "VectorChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public VectorChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "VectorChiSqSelectorBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}, {"identifier": "getModelInfoBatchOp", "parameters": "()", "modifiers": "@Override public", "return": "ChisqSelectorModelInfoBatchOp", "signature": "ChisqSelectorModelInfoBatchOp getModelInfoBatchOp()", "full_signature": "@Override public ChisqSelectorModelInfoBatchOp getModelInfoBatchOp()", "class_method_signature": "VectorChiSqSelectorBatchOp.getModelInfoBatchOp()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/feature/VectorChiSqSelectorBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "VectorChiSqSelectorBatchOp", "body": "@Override\n    public VectorChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs) {\n        BatchOperator<?> in = checkAndGetFirst(inputs);\n        String vectorColName = getSelectedCol();\n        String labelColName = getLabelCol();\n\n        SelectorType selectorType = getParams().get(SELECTOR_TYPE);\n        int numTopFeatures = getParams().get(NUM_TOP_FEATURES);\n        double percentile = getParams().get(PERCENTILE);\n        double fpr = getParams().get(FPR);\n        double fdr = getParams().get(FDR);\n        double fwe = getParams().get(FWE);\n\n        DataSet<Row> chiSquareTest =\n            ChiSquareTestUtil.vectorTest(in, vectorColName, labelColName);\n\n        DataSet<Row> model = chiSquareTest.mapPartition(\n            new ChisqSelectorUtil.ChiSquareSelector(null, selectorType, numTopFeatures, percentile, fpr, fdr, fwe))\n            .name(\"FilterFeature\")\n            .setParallelism(1);\n\n        setOutputTable(DataSetConversionUtil.toTable(in.getMLEnvironmentId(), model, new ChiSqSelectorModelDataConverter().getModelSchema()));\n\n        return this;\n    }", "signature": "VectorChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public VectorChiSqSelectorBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "VectorChiSqSelectorBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "getSelectedCol", "getLabelCol", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "get", "getParams", "vectorTest", "setParallelism", "name", "mapPartition", "setOutputTable", "toTable", "getMLEnvironmentId", "getModelSchema"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}