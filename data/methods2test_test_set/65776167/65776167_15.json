{"test_class": {"identifier": "CheramiConsumerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CheramiConsumerImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CheramiConsumerImplTest.class)", "var_name": "logger"}, {"original_string": "private static final String DESTINATION_PATH = \"/example/path\";", "modifier": "private static final", "type": "String", "declarator": "DESTINATION_PATH = \"/example/path\"", "var_name": "DESTINATION_PATH"}, {"original_string": "private static final String CONSUMER_GROUP_NAME = \"test/group\";", "modifier": "private static final", "type": "String", "declarator": "CONSUMER_GROUP_NAME = \"test/group\"", "var_name": "CONSUMER_GROUP_NAME"}, {"original_string": "private static final long CONSUME_TEST_TIMEOUT_MILLIS = 10000;", "modifier": "private static final", "type": "long", "declarator": "CONSUME_TEST_TIMEOUT_MILLIS = 10000", "var_name": "CONSUME_TEST_TIMEOUT_MILLIS"}, {"original_string": "private static CheramiClientImpl client;", "modifier": "private static", "type": "CheramiClientImpl", "declarator": "client", "var_name": "client"}, {"original_string": "private static CheramiConsumerImpl consumer;", "modifier": "private static", "type": "CheramiConsumerImpl", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "private static MockFrontendService frontendService;", "modifier": "private static", "type": "MockFrontendService", "declarator": "frontendService", "var_name": "frontendService"}, {"original_string": "private static Server server;", "modifier": "private static", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "lib/src/test/java/com/uber/cherami/client/CheramiConsumerImplTest.java"}, "test_case": {"identifier": "readAsyncTest", "parameters": "()", "modifiers": "@Test(timeout = CONSUME_TEST_TIMEOUT_MILLIS) public", "return": "void", "body": "@Test(timeout = CONSUME_TEST_TIMEOUT_MILLIS)\n    public void readAsyncTest() throws Exception {\n        if (!consumer.isOpen()) {\n            consumer.open();\n        }\n        ArrayList<String> ids = new ArrayList<>(200);\n        for (int i = 0; i < 200; i++) {\n            ids.add(Integer.toString(i));\n        }\n\n        ArrayList<CheramiFuture<CheramiDelivery>> futures = new ArrayList<>(200);\n        for (int i = 0; i < 200; i++) {\n            futures.add(consumer.readAsync());\n        }\n\n        for (int i = 0; i < 200; i++) {\n            CheramiFuture<CheramiDelivery> future = futures.remove(0);\n            CheramiDelivery delivery = future.get();\n            String id = delivery.getMessage().getAckId();\n            ids.remove(id);\n        }\n        assert (ids.isEmpty());\n\n        //Test that the future is set to error.\n        CheramiFuture<CheramiDelivery> future = consumer.readAsync();\n        consumer.close();\n        thrown.expect(ExecutionException.class);\n        future.get();\n        logger.info(\"CheramiConsumerImplTest: PASSED: ConsumeAsyncTest\");\n    }", "signature": "void readAsyncTest()", "full_signature": "@Test(timeout = CONSUME_TEST_TIMEOUT_MILLIS) public void readAsyncTest()", "class_method_signature": "CheramiConsumerImplTest.readAsyncTest()", "testcase": true, "constructor": false, "invocations": ["isOpen", "open", "add", "toString", "add", "readAsync", "remove", "get", "getAckId", "getMessage", "remove", "isEmpty", "readAsync", "close", "expect", "get", "info"]}, "focal_class": {"identifier": "CheramiConsumerImpl", "superclass": "", "interfaces": "implements CheramiConsumer, Reconfigurable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CheramiConsumerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CheramiConsumerImpl.class)", "var_name": "logger"}, {"original_string": "private static final String DELIVERY_TOKEN_SPLITTER = \"|\";", "modifier": "private static final", "type": "String", "declarator": "DELIVERY_TOKEN_SPLITTER = \"|\"", "var_name": "DELIVERY_TOKEN_SPLITTER"}, {"original_string": "private static final String OUTPUT_SERVICE_NAME = \"cherami-outputhost\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT_SERVICE_NAME = \"cherami-outputhost\"", "var_name": "OUTPUT_SERVICE_NAME"}, {"original_string": "private static final String OPEN_CONSUMER_API = \"open_consumer_stream\";", "modifier": "private static final", "type": "String", "declarator": "OPEN_CONSUMER_API = \"open_consumer_stream\"", "var_name": "OPEN_CONSUMER_API"}, {"original_string": "private final String path;", "modifier": "private final", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private final String consumerGroupName;", "modifier": "private final", "type": "String", "declarator": "consumerGroupName", "var_name": "consumerGroupName"}, {"original_string": "private final AtomicBoolean isOpen;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "isOpen", "var_name": "isOpen"}, {"original_string": "private final ArrayBlockingQueue<CheramiDelivery> deliveryQueue;", "modifier": "private final", "type": "ArrayBlockingQueue<CheramiDelivery>", "declarator": "deliveryQueue", "var_name": "deliveryQueue"}, {"original_string": "private final LinkedBlockingQueue<CheramiFuture<CheramiDelivery>> futuresQueue;", "modifier": "private final", "type": "LinkedBlockingQueue<CheramiFuture<CheramiDelivery>>", "declarator": "futuresQueue", "var_name": "futuresQueue"}, {"original_string": "private final ConnectionManager<OutputHostConnection> connectionManager;", "modifier": "private final", "type": "ConnectionManager<OutputHostConnection>", "declarator": "connectionManager", "var_name": "connectionManager"}, {"original_string": "private TChannel tChannel;", "modifier": "private", "type": "TChannel", "declarator": "tChannel", "var_name": "tChannel"}, {"original_string": "private SubChannel subChannel;", "modifier": "private", "type": "SubChannel", "declarator": "subChannel", "var_name": "subChannel"}, {"original_string": "private final ConsumerOptions options;", "modifier": "private final", "type": "ConsumerOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private final CheramiClient client;", "modifier": "private final", "type": "CheramiClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final DeliveryRunnable deliveryRunnable;", "modifier": "private final", "type": "DeliveryRunnable", "declarator": "deliveryRunnable", "var_name": "deliveryRunnable"}, {"original_string": "private final MetricsReporter metricsReporter;", "modifier": "private final", "type": "MetricsReporter", "declarator": "metricsReporter", "var_name": "metricsReporter"}], "methods": [{"identifier": "CheramiConsumerImpl", "parameters": "(CheramiClient client, String dstPath, String consumerGroupName, ConsumerOptions options,\n            MetricsReporter metricsReporter)", "modifiers": "public", "return": "", "signature": " CheramiConsumerImpl(CheramiClient client, String dstPath, String consumerGroupName, ConsumerOptions options,\n            MetricsReporter metricsReporter)", "full_signature": "public  CheramiConsumerImpl(CheramiClient client, String dstPath, String consumerGroupName, ConsumerOptions options,\n            MetricsReporter metricsReporter)", "class_method_signature": "CheramiConsumerImpl.CheramiConsumerImpl(CheramiClient client, String dstPath, String consumerGroupName, ConsumerOptions options,\n            MetricsReporter metricsReporter)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void open()", "full_signature": "@Override public synchronized void open()", "class_method_signature": "CheramiConsumerImpl.open()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "CheramiConsumerImpl.close()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "CheramiDelivery", "signature": "CheramiDelivery read()", "full_signature": "@Override public CheramiDelivery read()", "class_method_signature": "CheramiConsumerImpl.read()", "testcase": false, "constructor": false}, {"identifier": "readAsync", "parameters": "()", "modifiers": "@Override public", "return": "CheramiFuture<CheramiDelivery>", "signature": "CheramiFuture<CheramiDelivery> readAsync()", "full_signature": "@Override public CheramiFuture<CheramiDelivery> readAsync()", "class_method_signature": "CheramiConsumerImpl.readAsync()", "testcase": false, "constructor": false}, {"identifier": "ackDelivery", "parameters": "(String deliveryToken)", "modifiers": "@Override public", "return": "void", "signature": "void ackDelivery(String deliveryToken)", "full_signature": "@Override public void ackDelivery(String deliveryToken)", "class_method_signature": "CheramiConsumerImpl.ackDelivery(String deliveryToken)", "testcase": false, "constructor": false}, {"identifier": "nackDelivery", "parameters": "(String deliveryToken)", "modifiers": "@Override public", "return": "void", "signature": "void nackDelivery(String deliveryToken)", "full_signature": "@Override public void nackDelivery(String deliveryToken)", "class_method_signature": "CheramiConsumerImpl.nackDelivery(String deliveryToken)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "CheramiConsumerImpl.isOpen()", "testcase": false, "constructor": false}, {"identifier": "refreshNow", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void refreshNow()", "full_signature": "@Override public void refreshNow()", "class_method_signature": "CheramiConsumerImpl.refreshNow()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanup()", "full_signature": "private void cleanup()", "class_method_signature": "CheramiConsumerImpl.cleanup()", "testcase": false, "constructor": false}, {"identifier": "getAcknowledger", "parameters": "(String token)", "modifiers": "private", "return": "Pair<OutputHostConnection, DeliveryID>", "signature": "Pair<OutputHostConnection, DeliveryID> getAcknowledger(String token)", "full_signature": "private Pair<OutputHostConnection, DeliveryID> getAcknowledger(String token)", "class_method_signature": "CheramiConsumerImpl.getAcknowledger(String token)", "testcase": false, "constructor": false}, {"identifier": "toEndpointsInfo", "parameters": "(ReadConsumerGroupHostsResult result)", "modifiers": "private", "return": "EndpointsInfo", "signature": "EndpointsInfo toEndpointsInfo(ReadConsumerGroupHostsResult result)", "full_signature": "private EndpointsInfo toEndpointsInfo(ReadConsumerGroupHostsResult result)", "class_method_signature": "CheramiConsumerImpl.toEndpointsInfo(ReadConsumerGroupHostsResult result)", "testcase": false, "constructor": false}, {"identifier": "findConsumeEndpoints", "parameters": "()", "modifiers": "private", "return": "EndpointsInfo", "signature": "EndpointsInfo findConsumeEndpoints()", "full_signature": "private EndpointsInfo findConsumeEndpoints()", "class_method_signature": "CheramiConsumerImpl.findConsumeEndpoints()", "testcase": false, "constructor": false}, {"identifier": "newOutputHostConnection", "parameters": "(String host, int dataPort, int rpcPort,\n            ChecksumOption checksumOption)", "modifiers": "private", "return": "OutputHostConnection", "signature": "OutputHostConnection newOutputHostConnection(String host, int dataPort, int rpcPort,\n            ChecksumOption checksumOption)", "full_signature": "private OutputHostConnection newOutputHostConnection(String host, int dataPort, int rpcPort,\n            ChecksumOption checksumOption)", "class_method_signature": "CheramiConsumerImpl.newOutputHostConnection(String host, int dataPort, int rpcPort,\n            ChecksumOption checksumOption)", "testcase": false, "constructor": false}, {"identifier": "newConnectionManager", "parameters": "()", "modifiers": "private", "return": "ConnectionManager<OutputHostConnection>", "signature": "ConnectionManager<OutputHostConnection> newConnectionManager()", "full_signature": "private ConnectionManager<OutputHostConnection> newConnectionManager()", "class_method_signature": "CheramiConsumerImpl.newConnectionManager()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/uber/cherami/client/CheramiConsumerImpl.java"}, "focal_method": {"identifier": "readAsync", "parameters": "()", "modifiers": "@Override public", "return": "CheramiFuture<CheramiDelivery>", "body": "@Override\n    public CheramiFuture<CheramiDelivery> readAsync() throws IOException {\n        if (!isOpen()) {\n            throw new IOException(\"Consumer closed.\");\n        }\n        CheramiFuture<CheramiDelivery> future = new CheramiFuture<>();\n        futuresQueue.add(future);\n        return future;\n    }", "signature": "CheramiFuture<CheramiDelivery> readAsync()", "full_signature": "@Override public CheramiFuture<CheramiDelivery> readAsync()", "class_method_signature": "CheramiConsumerImpl.readAsync()", "testcase": false, "constructor": false, "invocations": ["isOpen", "add"]}, "repository": {"repo_id": 65776167, "url": "https://github.com/uber-archive/cherami-client-java", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 162, "license": "licensed"}}