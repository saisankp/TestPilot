{"test_class": {"identifier": "BackendManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "cn-core/src/test/java/org/cloudname/core/BackendManagerTest.java"}, "test_case": {"identifier": "invalidDriverUrl", "parameters": "()", "modifiers": "@Test (expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test (expected = IllegalArgumentException.class)\n    public void invalidDriverUrl() {\n        BackendManager.getBackend(\":/some-random-string\");\n    }", "signature": "void invalidDriverUrl()", "full_signature": "@Test (expected = IllegalArgumentException.class) public void invalidDriverUrl()", "class_method_signature": "BackendManagerTest.invalidDriverUrl()", "testcase": true, "constructor": false, "invocations": ["getBackend"]}, "focal_class": {"identifier": "BackendManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern PATTERN = Pattern.compile(\"([a-z]*)://(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"([a-z]*)://(.*)\")", "var_name": "PATTERN"}, {"original_string": "private static final Map<String, Function<String, CloudnameBackend>> drivers\n            = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, Function<String, CloudnameBackend>>", "declarator": "drivers\n            = new ConcurrentHashMap<>()", "var_name": "drivers"}], "methods": [{"identifier": "BackendManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " BackendManager()", "full_signature": "private  BackendManager()", "class_method_signature": "BackendManager.BackendManager()", "testcase": false, "constructor": true}, {"identifier": "getBackend", "parameters": "(final String url)", "modifiers": "public static", "return": "CloudnameBackend", "signature": "CloudnameBackend getBackend(final String url)", "full_signature": "public static CloudnameBackend getBackend(final String url)", "class_method_signature": "BackendManager.getBackend(final String url)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(\n            final String backendIdentifier, final Function<String, CloudnameBackend> createMethod)", "modifiers": "public static", "return": "void", "signature": "void register(\n            final String backendIdentifier, final Function<String, CloudnameBackend> createMethod)", "full_signature": "public static void register(\n            final String backendIdentifier, final Function<String, CloudnameBackend> createMethod)", "class_method_signature": "BackendManager.register(\n            final String backendIdentifier, final Function<String, CloudnameBackend> createMethod)", "testcase": false, "constructor": false}, {"identifier": "deregister", "parameters": "(final String backendIdentifer)", "modifiers": "public static", "return": "void", "signature": "void deregister(final String backendIdentifer)", "full_signature": "public static void deregister(final String backendIdentifer)", "class_method_signature": "BackendManager.deregister(final String backendIdentifer)", "testcase": false, "constructor": false}], "file": "cn-core/src/main/java/org/cloudname/core/BackendManager.java"}, "focal_method": {"identifier": "getBackend", "parameters": "(final String url)", "modifiers": "public static", "return": "CloudnameBackend", "body": "public static CloudnameBackend getBackend(final String url) {\n        if (url == null) {\n            return null;\n        }\n\n        final BackendUrl backendUrl = new BackendUrl(url);\n        if (!drivers.containsKey(backendUrl.name)) {\n            return null;\n        }\n        return drivers.get(backendUrl.name).apply(backendUrl.connectionString);\n    }", "signature": "CloudnameBackend getBackend(final String url)", "full_signature": "public static CloudnameBackend getBackend(final String url)", "class_method_signature": "BackendManager.getBackend(final String url)", "testcase": false, "constructor": false, "invocations": ["containsKey", "apply", "get"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}