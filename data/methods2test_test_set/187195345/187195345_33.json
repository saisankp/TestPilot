{"test_class": {"identifier": "OpenLREncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int LARGE_OFFSET = 17000;", "modifier": "private static final", "type": "int", "declarator": "LARGE_OFFSET = 17000", "var_name": "LARGE_OFFSET"}, {"original_string": "private static final int EXPECTED_NR_LRPS_LONG_LINE = 5;", "modifier": "private static final", "type": "int", "declarator": "EXPECTED_NR_LRPS_LONG_LINE = 5", "var_name": "EXPECTED_NR_LRPS_LONG_LINE"}, {"original_string": "private static final long[] LONG_LINE_IDS = {19, 24, 25};", "modifier": "private static final", "type": "long[]", "declarator": "LONG_LINE_IDS = {19, 24, 25}", "var_name": "LONG_LINE_IDS"}, {"original_string": "private Mockery mockery = new Mockery();", "modifier": "private", "type": "Mockery", "declarator": "mockery = new Mockery()", "var_name": "mockery"}, {"original_string": "private TestData td = TestData.getInstance();", "modifier": "private", "type": "TestData", "declarator": "td = TestData.getInstance()", "var_name": "td"}], "file": "encoder/src/test/java/openlr/encoder/OpenLREncoderTest.java"}, "test_case": {"identifier": "testReducedLineLocation", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testReducedLineLocation() {\n\n        LocationReferenceHolder encLocRef = null;\n        LineLocation inputLocation = td.getLineLocationReducibleOffsets();\n        int lengtIn = 0;\n        for (Line l : inputLocation.getLocationLines()) {\n            lengtIn += l.getLineLength();\n        }\n\n        int pOffIn = inputLocation.getPositiveOffset();\n        int nOffIn = inputLocation.getNegativeOffset();\n\n        encLocRef = encodeLocation(inputLocation);\n        assertTrue(encLocRef.isValid());\n\n        int lengthOut = 0;\n        for (LocationReferencePoint lrp : encLocRef.getLRPs()) {\n            lengthOut += lrp.getDistanceToNext();\n        }\n        Offsets offOut = encLocRef.getRawLocationReferenceData().getOffsets();\n\n        assertTrue(lengtIn > lengthOut);\n        assertTrue(pOffIn != offOut.getPositiveOffset(0));\n        assertTrue(nOffIn != offOut.getNegativeOffset(0));\n\n        // The central location length is the stretch between the offset points\n        int locationLengthIn = lengtIn - pOffIn - nOffIn;\n        int locationLengthOut = lengthOut - offOut.getPositiveOffset(0)\n                - offOut.getNegativeOffset(0);\n        // ... it should remain the same after pruning\n        assertTrue(locationLengthIn == locationLengthOut);\n    }", "signature": "void testReducedLineLocation()", "full_signature": "@Test public final void testReducedLineLocation()", "class_method_signature": "OpenLREncoderTest.testReducedLineLocation()", "testcase": true, "constructor": false, "invocations": ["getLineLocationReducibleOffsets", "getLocationLines", "getLineLength", "getPositiveOffset", "getNegativeOffset", "encodeLocation", "assertTrue", "isValid", "getLRPs", "getDistanceToNext", "getOffsets", "getRawLocationReferenceData", "assertTrue", "assertTrue", "getPositiveOffset", "assertTrue", "getNegativeOffset", "getPositiveOffset", "getNegativeOffset", "assertTrue"]}, "focal_class": {"identifier": "OpenLREncoder", "superclass": "", "interfaces": "implements openlr.OpenLREncoder", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(OpenLREncoder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(OpenLREncoder.class)", "var_name": "LOG"}, {"original_string": "private final Version VERSION = VersionHelper.getVersion(\"encoder\");", "modifier": "private final", "type": "Version", "declarator": "VERSION = VersionHelper.getVersion(\"encoder\")", "var_name": "VERSION"}], "methods": [{"identifier": "getPhysicalEncoderServices", "parameters": "()", "modifiers": "public static", "return": "List<PhysicalEncoder>", "signature": "List<PhysicalEncoder> getPhysicalEncoderServices()", "full_signature": "public static List<PhysicalEncoder> getPhysicalEncoderServices()", "class_method_signature": "OpenLREncoder.getPhysicalEncoderServices()", "testcase": false, "constructor": false}, {"identifier": "encodeLocations", "parameters": "(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "modifiers": "@Override public", "return": "List<LocationReferenceHolder>", "signature": "List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "full_signature": "@Override public List<LocationReferenceHolder> encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "class_method_signature": "OpenLREncoder.encodeLocations(\n            final OpenLREncoderParameter parameter, final List<Location> loc)", "testcase": false, "constructor": false}, {"identifier": "encodeLocation", "parameters": "(\n            final OpenLREncoderParameter parameter, final Location loc)", "modifiers": "@Override public", "return": "LocationReferenceHolder", "signature": "LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "full_signature": "@Override public LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "class_method_signature": "OpenLREncoder.encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "testcase": false, "constructor": false}, {"identifier": "encodeLocation", "parameters": "(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "modifiers": "private", "return": "LocationReferenceHolder", "signature": "LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "full_signature": "private LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "class_method_signature": "OpenLREncoder.encodeLocation(\n            final OpenLREncoderParameter parameter,\n            final OpenLREncoderProperties properties, final Location loc)", "testcase": false, "constructor": false}, {"identifier": "getMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMajorVersion()", "full_signature": "@Override public String getMajorVersion()", "class_method_signature": "OpenLREncoder.getMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMinorVersion()", "full_signature": "@Override public String getMinorVersion()", "class_method_signature": "OpenLREncoder.getMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "getPatchVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPatchVersion()", "full_signature": "@Override public String getPatchVersion()", "class_method_signature": "OpenLREncoder.getPatchVersion()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "OpenLREncoder.getVersion()", "testcase": false, "constructor": false}], "file": "encoder/src/main/java/openlr/encoder/OpenLREncoder.java"}, "focal_method": {"identifier": "encodeLocation", "parameters": "(\n            final OpenLREncoderParameter parameter, final Location loc)", "modifiers": "@Override public", "return": "LocationReferenceHolder", "body": "@Override\n    public LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)\n            throws OpenLRProcessingException {\n        return encodeLocation(parameter,\n                new OpenLREncoderProperties(parameter.getConfiguration(), parameter.getPhysicalEncoders()), loc);\n    }", "signature": "LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "full_signature": "@Override public LocationReferenceHolder encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "class_method_signature": "OpenLREncoder.encodeLocation(\n            final OpenLREncoderParameter parameter, final Location loc)", "testcase": false, "constructor": false, "invocations": ["encodeLocation", "getConfiguration", "getPhysicalEncoders"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}