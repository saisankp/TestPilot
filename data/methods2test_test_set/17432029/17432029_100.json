{"test_class": {"identifier": "AbstractPartTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String name = \"part\";", "modifier": "", "type": "String", "declarator": "name = \"part\"", "var_name": "name"}], "file": "volleyer/src/test/java/com/navercorp/volleyextensions/volleyer/multipart/AbstractPartTest.java"}, "test_case": {"identifier": "shouldWriteExpectedOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldWriteExpectedOutput() throws IOException {\n\t\t// Given\n\t\tString contentString = \"test test test\";\n\t\tbyte[] content = contentString.getBytes();\n\t\tfinal InputStream in = new ByteArrayInputStream(content);\n\t\tAbstractPart mock = createPartWithInputStream(name, in);\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\tPart part = new TestPart(name, mock);\n\t\tString expected = \"Content-Disposition: form-data; name=\\\"\" + name + \"\\\"\\r\\n\\r\\n\" + contentString + \"\\r\\n\";\n\t\t// When\n\t\tpart.write(out);\n\t\t// Then\n\t\tbyte[] result = out.toByteArray();\n\t\tassertThat(new String(result), is(expected));\n\t}", "signature": "void shouldWriteExpectedOutput()", "full_signature": "@Test public void shouldWriteExpectedOutput()", "class_method_signature": "AbstractPartTest.shouldWriteExpectedOutput()", "testcase": true, "constructor": false, "invocations": ["getBytes", "createPartWithInputStream", "write", "toByteArray", "assertThat", "is"]}, "focal_class": {"identifier": "AbstractPart", "superclass": "", "interfaces": "implements Part", "fields": [{"original_string": "private static final byte[] CONTENT_DISPOSITION = \"Content-Disposition: form-data;\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition: form-data;\".getBytes()", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final int DEFAULT_BUFFER_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUFFER_SIZE = 1024", "var_name": "DEFAULT_BUFFER_SIZE"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "AbstractPart", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " AbstractPart(String name)", "full_signature": "public  AbstractPart(String name)", "class_method_signature": "AbstractPart.AbstractPart(String name)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void write(OutputStream out)", "full_signature": "@Override public void write(OutputStream out)", "class_method_signature": "AbstractPart.write(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeName", "parameters": "(OutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeName(OutputStream out)", "full_signature": "private void writeName(OutputStream out)", "class_method_signature": "AbstractPart.writeName(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeContentDisposition", "parameters": "(OutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeContentDisposition(OutputStream out)", "full_signature": "private void writeContentDisposition(OutputStream out)", "class_method_signature": "AbstractPart.writeContentDisposition(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeContentTypeIfNotNull", "parameters": "(OutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeContentTypeIfNotNull(OutputStream out)", "full_signature": "private void writeContentTypeIfNotNull(OutputStream out)", "class_method_signature": "AbstractPart.writeContentTypeIfNotNull(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeExtraHeaderIfNotNull", "parameters": "(OutputStream out)", "modifiers": "protected final", "return": "void", "signature": "void writeExtraHeaderIfNotNull(OutputStream out)", "full_signature": "protected final void writeExtraHeaderIfNotNull(OutputStream out)", "class_method_signature": "AbstractPart.writeExtraHeaderIfNotNull(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "getExtraHeader", "parameters": "()", "modifiers": "protected abstract", "return": "byte[]", "signature": "byte[] getExtraHeader()", "full_signature": "protected abstract byte[] getExtraHeader()", "class_method_signature": "AbstractPart.getExtraHeader()", "testcase": false, "constructor": false}, {"identifier": "writeContent", "parameters": "(OutputStream out)", "modifiers": "protected final", "return": "void", "signature": "void writeContent(OutputStream out)", "full_signature": "protected final void writeContent(OutputStream out)", "class_method_signature": "AbstractPart.writeContent(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeLine", "parameters": "(OutputStream out, String str)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "void", "signature": "void writeLine(OutputStream out, String str)", "full_signature": "@SuppressWarnings(\"unused\") private void writeLine(OutputStream out, String str)", "class_method_signature": "AbstractPart.writeLine(OutputStream out, String str)", "testcase": false, "constructor": false}, {"identifier": "writeCRLF", "parameters": "(OutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeCRLF(OutputStream out)", "full_signature": "private void writeCRLF(OutputStream out)", "class_method_signature": "AbstractPart.writeCRLF(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AbstractPart.getName()", "testcase": false, "constructor": false}], "file": "volleyer/src/main/java/com/navercorp/volleyextensions/volleyer/multipart/AbstractPart.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream out)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void write(OutputStream out) throws IOException {\n\t\twriteContentDisposition(out);\n\t\twriteName(out);\n\t\twriteExtraHeaderIfNotNull(out);\n\t\twriteCRLF(out);\n\t\twriteContentTypeIfNotNull(out);\n\t\twriteCRLF(out);\n\t\twriteContent(out);\n\t\twriteCRLF(out);\n\t}", "signature": "void write(OutputStream out)", "full_signature": "@Override public void write(OutputStream out)", "class_method_signature": "AbstractPart.write(OutputStream out)", "testcase": false, "constructor": false, "invocations": ["writeContentDisposition", "writeName", "writeExtraHeaderIfNotNull", "writeCRLF", "writeContentTypeIfNotNull", "writeCRLF", "writeContent", "writeCRLF"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}