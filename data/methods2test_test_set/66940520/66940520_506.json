{"test_class": {"identifier": "OrganisationUnitHierarchyTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/organisationunit/OrganisationUnitHierarchyTest.java"}, "test_case": {"identifier": "testGetGroupChildren", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGroupChildren()\n    {\n        OrganisationUnitGroup group = new OrganisationUnitGroup( \"Group\" );\n        group.setId( 1 );\n\n        OrganisationUnit unit2 = new OrganisationUnit( \"Unit2\" );\n        OrganisationUnit unit4 = new OrganisationUnit( \"Unit4\" );\n        OrganisationUnit unit6 = new OrganisationUnit( \"Unit6\" );\n        OrganisationUnit unit8 = new OrganisationUnit( \"Unit8\" );\n        OrganisationUnit unit10 = new OrganisationUnit( \"Unit10\" );\n        OrganisationUnit unit12 = new OrganisationUnit( \"Unit12\" );\n\n        unit2.setId( 2 );\n        unit4.setId( 4 );\n        unit6.setId( 6 );\n        unit8.setId( 8 );\n        unit10.setId( 10 );\n        unit12.setId( 12 );\n\n        group.addOrganisationUnit( unit2 );\n        group.addOrganisationUnit( unit4 );\n        group.addOrganisationUnit( unit6 );\n        group.addOrganisationUnit( unit8 );\n        group.addOrganisationUnit( unit10 );\n        group.addOrganisationUnit( unit12 );\n\n        List<OrganisationUnitRelationship> relationships = new ArrayList<>();\n\n        relationships.add( new OrganisationUnitRelationship( 1, 2 ) );\n        relationships.add( new OrganisationUnitRelationship( 1, 3 ) );\n        relationships.add( new OrganisationUnitRelationship( 2, 4 ) );\n        relationships.add( new OrganisationUnitRelationship( 2, 5 ) );\n        relationships.add( new OrganisationUnitRelationship( 2, 6 ) );\n        relationships.add( new OrganisationUnitRelationship( 3, 7 ) );\n        relationships.add( new OrganisationUnitRelationship( 3, 8 ) );\n        relationships.add( new OrganisationUnitRelationship( 3, 9 ) );\n        relationships.add( new OrganisationUnitRelationship( 4, 10 ) );\n        relationships.add( new OrganisationUnitRelationship( 4, 11 ) );\n        relationships.add( new OrganisationUnitRelationship( 4, 12 ) );\n\n        OrganisationUnitHierarchy hierarchy = new OrganisationUnitHierarchy( relationships );\n\n        assertEquals( 6, hierarchy.getChildren( 1, group ).size() );\n\n        assertEquals( 5, hierarchy.getChildren( 2, group ).size() );\n        assertTrue( hierarchy.getChildren( 2, group ).contains( 2l ) );\n        assertTrue( hierarchy.getChildren( 2, group ).contains( 4l ) );\n        assertTrue( hierarchy.getChildren( 2, group ).contains( 6l ) );\n        assertTrue( hierarchy.getChildren( 2, group ).contains( 10l ) );\n        assertTrue( hierarchy.getChildren( 2, group ).contains( 12l ) );\n\n        assertEquals( 1, hierarchy.getChildren( 3, group ).size() );\n        assertTrue( hierarchy.getChildren( 3, group ).contains( 8l ) );\n\n        assertEquals( 3, hierarchy.getChildren( 4, group ).size() );\n        assertTrue( hierarchy.getChildren( 4, group ).contains( 4l ) );\n        assertTrue( hierarchy.getChildren( 4, group ).contains( 10l ) );\n        assertTrue( hierarchy.getChildren( 4, group ).contains( 12l ) );\n\n        assertEquals( 0, hierarchy.getChildren( 11, group ).size() );\n\n        assertFalse( hierarchy.getChildren( 5, group ).contains( 10l ) );\n        assertFalse( hierarchy.getChildren( 3, group ).contains( 11l ) );\n    }", "signature": "void testGetGroupChildren()", "full_signature": "@Test public void testGetGroupChildren()", "class_method_signature": "OrganisationUnitHierarchyTest.testGetGroupChildren()", "testcase": true, "constructor": false, "invocations": ["setId", "setId", "setId", "setId", "setId", "setId", "setId", "addOrganisationUnit", "addOrganisationUnit", "addOrganisationUnit", "addOrganisationUnit", "addOrganisationUnit", "addOrganisationUnit", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "size", "getChildren", "assertEquals", "size", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertEquals", "size", "getChildren", "assertTrue", "contains", "getChildren", "assertEquals", "size", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertTrue", "contains", "getChildren", "assertEquals", "size", "getChildren", "assertFalse", "contains", "getChildren", "assertFalse", "contains", "getChildren"]}, "focal_class": {"identifier": "OrganisationUnitHierarchy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Long, Set<Long>> relationships = new HashMap<>();", "modifier": "private", "type": "Map<Long, Set<Long>>", "declarator": "relationships = new HashMap<>()", "var_name": "relationships"}, {"original_string": "private Map<Long, Set<Long>> subTrees = new HashMap<>();", "modifier": "private", "type": "Map<Long, Set<Long>>", "declarator": "subTrees = new HashMap<>()", "var_name": "subTrees"}, {"original_string": "private Map<String, Set<Long>> groupSubTrees = new HashMap<>();", "modifier": "private", "type": "Map<String, Set<Long>>", "declarator": "groupSubTrees = new HashMap<>()", "var_name": "groupSubTrees"}], "methods": [{"identifier": "OrganisationUnitHierarchy", "parameters": "( Map<Long, Set<Long>> relationships )", "modifiers": "public", "return": "", "signature": " OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "full_signature": "public  OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "class_method_signature": "OrganisationUnitHierarchy.OrganisationUnitHierarchy( Map<Long, Set<Long>> relationships )", "testcase": false, "constructor": true}, {"identifier": "OrganisationUnitHierarchy", "parameters": "( Collection<OrganisationUnitRelationship> relations )", "modifiers": "public", "return": "", "signature": " OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "full_signature": "public  OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "class_method_signature": "OrganisationUnitHierarchy.OrganisationUnitHierarchy( Collection<OrganisationUnitRelationship> relations )", "testcase": false, "constructor": true}, {"identifier": "prepareChildren", "parameters": "( OrganisationUnit parent )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( OrganisationUnit parent )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( Collection<OrganisationUnit> parents )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( Collection<OrganisationUnit> parents )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( OrganisationUnit parent, OrganisationUnitGroup group )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( OrganisationUnit parent, OrganisationUnitGroup group )", "testcase": false, "constructor": false}, {"identifier": "prepareChildren", "parameters": "( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "modifiers": "public", "return": "OrganisationUnitHierarchy", "signature": "OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "full_signature": "public OrganisationUnitHierarchy prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "class_method_signature": "OrganisationUnitHierarchy.prepareChildren( Collection<OrganisationUnit> parents, Collection<OrganisationUnitGroup> groups )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( long parentId )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( long parentId )", "full_signature": "public Set<Long> getChildren( long parentId )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( Collection<Long> parentIds )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( Collection<Long> parentIds )", "full_signature": "public Set<Long> getChildren( Collection<Long> parentIds )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( Collection<Long> parentIds )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( long parentId, OrganisationUnitGroup group )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( long parentId, OrganisationUnitGroup group )", "full_signature": "public Set<Long> getChildren( long parentId, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId, OrganisationUnitGroup group )", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "modifiers": "public", "return": "Set<Long>", "signature": "Set<Long> getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "full_signature": "public Set<Long> getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( Collection<Long> parentIds, Collection<OrganisationUnitGroup> groups )", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "( long parentId, OrganisationUnitGroup group )", "modifiers": "private", "return": "String", "signature": "String getKey( long parentId, OrganisationUnitGroup group )", "full_signature": "private String getKey( long parentId, OrganisationUnitGroup group )", "class_method_signature": "OrganisationUnitHierarchy.getKey( long parentId, OrganisationUnitGroup group )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/organisationunit/OrganisationUnitHierarchy.java"}, "focal_method": {"identifier": "getChildren", "parameters": "( long parentId )", "modifiers": "public", "return": "Set<Long>", "body": "public Set<Long> getChildren( long parentId )\n    {\n        Set<Long> preparedChildren = subTrees.get( parentId );\n        \n        if ( preparedChildren != null )\n        {\n            return new HashSet<>( preparedChildren );\n        }\n        \n        List<Long> children = new ArrayList<>();\n        \n        children.add( 0, parentId ); // Adds parent id to beginning of list\n\n        int childCounter = 1;\n        \n        for ( int i = 0; i < childCounter; i++ )\n        {\n            Set<Long> currentChildren = relationships.get( children.get( i ) );\n            \n            if ( currentChildren != null )\n            {\n                children.addAll( currentChildren );\n            \n                childCounter += currentChildren.size();\n            }\n        }\n        \n        return new HashSet<>( children );\n    }", "signature": "Set<Long> getChildren( long parentId )", "full_signature": "public Set<Long> getChildren( long parentId )", "class_method_signature": "OrganisationUnitHierarchy.getChildren( long parentId )", "testcase": false, "constructor": false, "invocations": ["get", "add", "get", "get", "addAll", "size"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}