{"test_class": {"identifier": "AnnotationSagaAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Collection<Class<? extends Saga>> sagaTypes;", "modifier": "private", "type": "Collection<Class<? extends Saga>>", "declarator": "sagaTypes", "var_name": "sagaTypes"}, {"original_string": "private AnnotationSagaAnalyzer sut;", "modifier": "private", "type": "AnnotationSagaAnalyzer", "declarator": "sut", "var_name": "sut"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/startup/AnnotationSagaAnalyzerTest.java"}, "test_case": {"identifier": "scanHandledMessageTypes_testSagaFound_returnsNormalHandlerOfTypeFinishedMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scanHandledMessageTypes_testSagaFound_returnsNormalHandlerOfTypeFinishedMessage() throws NoSuchMethodException {\n        // given\n        sagaTypes.add(TestSaga.class);\n\n        // when\n        Map<Class<? extends Saga>, SagaHandlersMap> scanResult = sut.scanHandledMessageTypes();\n\n        // then\n        SagaHandlersMap handlers = scanResult.get(TestSaga.class);\n        assertThat(\n                \"Handler has entry with start saga flag set.\",\n                handlers.messageHandlers(),\n                hasItem(samePropertyValuesAs(new MessageHandler(FinishMessage.class, TestSaga.handlerMethod(), false))));\n    }", "signature": "void scanHandledMessageTypes_testSagaFound_returnsNormalHandlerOfTypeFinishedMessage()", "full_signature": "@Test public void scanHandledMessageTypes_testSagaFound_returnsNormalHandlerOfTypeFinishedMessage()", "class_method_signature": "AnnotationSagaAnalyzerTest.scanHandledMessageTypes_testSagaFound_returnsNormalHandlerOfTypeFinishedMessage()", "testcase": true, "constructor": false, "invocations": ["add", "scanHandledMessageTypes", "get", "assertThat", "messageHandlers", "hasItem", "samePropertyValuesAs", "handlerMethod"]}, "focal_class": {"identifier": "AnnotationSagaAnalyzer", "superclass": "", "interfaces": "implements SagaAnalyzer", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AnnotationSagaAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AnnotationSagaAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private final Object sync = new Object();", "modifier": "private final", "type": "Object", "declarator": "sync = new Object()", "var_name": "sync"}, {"original_string": "private final TypeScanner scanner;", "modifier": "private final", "type": "TypeScanner", "declarator": "scanner", "var_name": "scanner"}, {"original_string": "private Map<Class<? extends Saga>, SagaHandlersMap> scanResult;", "modifier": "private", "type": "Map<Class<? extends Saga>, SagaHandlersMap>", "declarator": "scanResult", "var_name": "scanResult"}, {"original_string": "private final Collection<Class<? extends Annotation>> startSagaAnnotations = new ArrayList<>();", "modifier": "private final", "type": "Collection<Class<? extends Annotation>>", "declarator": "startSagaAnnotations = new ArrayList<>()", "var_name": "startSagaAnnotations"}, {"original_string": "private final Collection<Class<? extends Annotation>> handlerAnnotations = new ArrayList<>();", "modifier": "private final", "type": "Collection<Class<? extends Annotation>>", "declarator": "handlerAnnotations = new ArrayList<>()", "var_name": "handlerAnnotations"}], "methods": [{"identifier": "AnnotationSagaAnalyzer", "parameters": "(final TypeScanner typeScanner)", "modifiers": "@Inject public", "return": "", "signature": " AnnotationSagaAnalyzer(final TypeScanner typeScanner)", "full_signature": "@Inject public  AnnotationSagaAnalyzer(final TypeScanner typeScanner)", "class_method_signature": "AnnotationSagaAnalyzer.AnnotationSagaAnalyzer(final TypeScanner typeScanner)", "testcase": false, "constructor": true}, {"identifier": "scanHandledMessageTypes", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends Saga>, SagaHandlersMap>", "signature": "Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "full_signature": "@Override public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "class_method_signature": "AnnotationSagaAnalyzer.scanHandledMessageTypes()", "testcase": false, "constructor": false}, {"identifier": "addStartSagaAnnotation", "parameters": "(final Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "void", "signature": "void addStartSagaAnnotation(final Class<? extends Annotation> annotationClass)", "full_signature": "public void addStartSagaAnnotation(final Class<? extends Annotation> annotationClass)", "class_method_signature": "AnnotationSagaAnalyzer.addStartSagaAnnotation(final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "addHandlerAnnotation", "parameters": "(final Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "void", "signature": "void addHandlerAnnotation(final Class<? extends Annotation> annotationClass)", "full_signature": "public void addHandlerAnnotation(final Class<? extends Annotation> annotationClass)", "class_method_signature": "AnnotationSagaAnalyzer.addHandlerAnnotation(final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "populateSagaHandlers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void populateSagaHandlers()", "full_signature": "private void populateSagaHandlers()", "class_method_signature": "AnnotationSagaAnalyzer.populateSagaHandlers()", "testcase": false, "constructor": false}, {"identifier": "determineMessageHandlers", "parameters": "(final Class<? extends Saga> sagaType)", "modifiers": "private", "return": "SagaHandlersMap", "signature": "SagaHandlersMap determineMessageHandlers(final Class<? extends Saga> sagaType)", "full_signature": "private SagaHandlersMap determineMessageHandlers(final Class<? extends Saga> sagaType)", "class_method_signature": "AnnotationSagaAnalyzer.determineMessageHandlers(final Class<? extends Saga> sagaType)", "testcase": false, "constructor": false}, {"identifier": "isHandlerMethod", "parameters": "(final Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isHandlerMethod(final Method method)", "full_signature": "private boolean isHandlerMethod(final Method method)", "class_method_signature": "AnnotationSagaAnalyzer.isHandlerMethod(final Method method)", "testcase": false, "constructor": false}, {"identifier": "hasHandlerAnnotation", "parameters": "(final Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean hasHandlerAnnotation(final Method method)", "full_signature": "private boolean hasHandlerAnnotation(final Method method)", "class_method_signature": "AnnotationSagaAnalyzer.hasHandlerAnnotation(final Method method)", "testcase": false, "constructor": false}, {"identifier": "hasStartSagaAnnotation", "parameters": "(final Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean hasStartSagaAnnotation(final Method method)", "full_signature": "private boolean hasStartSagaAnnotation(final Method method)", "class_method_signature": "AnnotationSagaAnalyzer.hasStartSagaAnnotation(final Method method)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(final Collection<Class<? extends Annotation>> annotations, final Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAnnotation(final Collection<Class<? extends Annotation>> annotations, final Method method)", "full_signature": "private boolean hasAnnotation(final Collection<Class<? extends Annotation>> annotations, final Method method)", "class_method_signature": "AnnotationSagaAnalyzer.hasAnnotation(final Collection<Class<? extends Annotation>> annotations, final Method method)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/startup/AnnotationSagaAnalyzer.java"}, "focal_method": {"identifier": "scanHandledMessageTypes", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends Saga>, SagaHandlersMap>", "body": "@Override\n    public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes() {\n        if (scanResult == null) {\n            populateSagaHandlers();\n        }\n\n        return scanResult;\n    }", "signature": "Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "full_signature": "@Override public Map<Class<? extends Saga>, SagaHandlersMap> scanHandledMessageTypes()", "class_method_signature": "AnnotationSagaAnalyzer.scanHandledMessageTypes()", "testcase": false, "constructor": false, "invocations": ["populateSagaHandlers"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}