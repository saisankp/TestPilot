{"test_class": {"identifier": "DynamicEventizerProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "jumi-actors/src/test/java/fi/jumi/actors/eventizers/dynamic/DynamicEventizerProviderTest.java"}, "test_case": {"identifier": "returns_an_eventizer_for_any_listener_interface", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void returns_an_eventizer_for_any_listener_interface() {\n        DynamicEventizerProvider provider = new DynamicEventizerProvider();\n\n        Eventizer<DummyListener> eventizer = provider.getEventizerForType(DummyListener.class);\n\n        assertThat(eventizer.getType()).isEqualTo(DummyListener.class);\n    }", "signature": "void returns_an_eventizer_for_any_listener_interface()", "full_signature": "@Test public void returns_an_eventizer_for_any_listener_interface()", "class_method_signature": "DynamicEventizerProviderTest.returns_an_eventizer_for_any_listener_interface()", "testcase": true, "constructor": false, "invocations": ["getEventizerForType", "isEqualTo", "assertThat", "getType"]}, "focal_class": {"identifier": "DynamicEventizerProvider", "superclass": "", "interfaces": "implements EventizerProvider", "fields": [{"original_string": "private final ConcurrentHashMap<Class<?>, Eventizer<?>> cache = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentHashMap<Class<?>, Eventizer<?>>", "declarator": "cache = new ConcurrentHashMap<>()", "var_name": "cache"}], "methods": [{"identifier": "getEventizerForType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Eventizer<T>", "signature": "Eventizer<T> getEventizerForType(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Eventizer<T> getEventizerForType(Class<T> type)", "class_method_signature": "DynamicEventizerProvider.getEventizerForType(Class<T> type)", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/eventizers/dynamic/DynamicEventizerProvider.java"}, "focal_method": {"identifier": "getEventizerForType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Eventizer<T>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> Eventizer<T> getEventizerForType(Class<T> type) {\n        Eventizer<T> eventizer = (Eventizer<T>) cache.get(type);\n        if (eventizer == null) {\n            eventizer = new DynamicEventizer<>(type);\n            cache.put(type, eventizer);\n        }\n        return eventizer;\n    }", "signature": "Eventizer<T> getEventizerForType(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Eventizer<T> getEventizerForType(Class<T> type)", "class_method_signature": "DynamicEventizerProvider.getEventizerForType(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["get", "put"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}