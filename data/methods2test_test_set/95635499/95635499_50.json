{"test_class": {"identifier": "ShotgunEnsembleClassifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ShotgunEnsembleLearnerAlgorithm algorithm;", "modifier": "", "type": "ShotgunEnsembleLearnerAlgorithm", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "ShotgunEnsembleClassifier shotgunEnsembleClassifier;", "modifier": "", "type": "ShotgunEnsembleClassifier", "declarator": "shotgunEnsembleClassifier", "var_name": "shotgunEnsembleClassifier"}, {"original_string": "private int minWindowLength = 3;", "modifier": "private", "type": "int", "declarator": "minWindowLength = 3", "var_name": "minWindowLength"}, {"original_string": "private int maxWindowLength = 6;", "modifier": "private", "type": "int", "declarator": "maxWindowLength = 6", "var_name": "maxWindowLength"}, {"original_string": "private boolean meanNormalization = true;", "modifier": "private", "type": "boolean", "declarator": "meanNormalization = true", "var_name": "meanNormalization"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/neighbors/ShotgunEnsembleClassifierTest.java"}, "test_case": {"identifier": "testCorrectnessForMostFrequentLabelsFromWindowLengthPredicitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectnessForMostFrequentLabelsFromWindowLengthPredicitions() {\n\t\t// Input.\n\t\tMap<Integer, List<Integer>> windowLengthPredicitions = new HashMap<>();\n\t\tList<Integer> list1 = Arrays.asList(1, 2, 3, 1, 1);\n\t\tList<Integer> list2 = Arrays.asList(3, 2, 3, 1, 1);\n\t\tList<Integer> list3 = Arrays.asList(2, 1, 3, 2, 1);\n\t\tList<Integer> list4 = Arrays.asList(1, 2, 3, 3, 1);\n\t\twindowLengthPredicitions.put(1, list1);\n\t\twindowLengthPredicitions.put(2, list2);\n\t\twindowLengthPredicitions.put(3, list3);\n\t\twindowLengthPredicitions.put(4, list4);\n\t\t// Expectation.\n\t\tint[] expectation = { 1, 2, 3, 1, 1 };\n\n\t\tList<Integer> mostFrequentLabels = this.shotgunEnsembleClassifier.mostFrequentLabelsFromWindowLengthPredicitions(windowLengthPredicitions);\n\n\t\tassertArrayEquals(expectation, mostFrequentLabels.stream().mapToInt(i -> i).toArray());\n\t}", "signature": "void testCorrectnessForMostFrequentLabelsFromWindowLengthPredicitions()", "full_signature": "@Test public void testCorrectnessForMostFrequentLabelsFromWindowLengthPredicitions()", "class_method_signature": "ShotgunEnsembleClassifierTest.testCorrectnessForMostFrequentLabelsFromWindowLengthPredicitions()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "asList", "asList", "put", "put", "put", "put", "mostFrequentLabelsFromWindowLengthPredicitions", "assertArrayEquals", "toArray", "mapToInt", "stream"]}, "focal_class": {"identifier": "ShotgunEnsembleClassifier", "superclass": "extends ASimplifiedTSClassifier<Integer>", "interfaces": "", "fields": [{"original_string": "protected double factor;", "modifier": "protected", "type": "double", "declarator": "factor", "var_name": "factor"}, {"original_string": "protected double[][] values;", "modifier": "protected", "type": "double[][]", "declarator": "values", "var_name": "values"}, {"original_string": "protected int[] targets;", "modifier": "protected", "type": "int[]", "declarator": "targets", "var_name": "targets"}, {"original_string": "protected NearestNeighborClassifier nearestNeighborClassifier;", "modifier": "protected", "type": "NearestNeighborClassifier", "declarator": "nearestNeighborClassifier", "var_name": "nearestNeighborClassifier"}, {"original_string": "protected ShotgunDistance shotgunDistance;", "modifier": "protected", "type": "ShotgunDistance", "declarator": "shotgunDistance", "var_name": "shotgunDistance"}, {"original_string": "protected ArrayList<Pair<Integer, Integer>> windows;", "modifier": "protected", "type": "ArrayList<Pair<Integer, Integer>>", "declarator": "windows", "var_name": "windows"}, {"original_string": "protected int bestScore;", "modifier": "protected", "type": "int", "declarator": "bestScore", "var_name": "bestScore"}, {"original_string": "private final IShotgunEnsembleLearnerConfig config;", "modifier": "private final", "type": "IShotgunEnsembleLearnerConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "ShotgunEnsembleClassifier", "parameters": "(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "modifiers": "public", "return": "", "signature": " ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "full_signature": "public  ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "class_method_signature": "ShotgunEnsembleClassifier.ShotgunEnsembleClassifier(final int minWindowLength, final int maxWindowLength, final boolean meanNormalization, final double factor)", "testcase": false, "constructor": true}, {"identifier": "calculateWindowLengthPredictions", "parameters": "(final double[] testInstance)", "modifiers": "protected", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> calculateWindowLengthPredictions(final double[] testInstance)", "full_signature": "protected Map<Integer, Integer> calculateWindowLengthPredictions(final double[] testInstance)", "class_method_signature": "ShotgunEnsembleClassifier.calculateWindowLengthPredictions(final double[] testInstance)", "testcase": false, "constructor": false}, {"identifier": "mostFrequentLabelFromWindowLengthPredicitions", "parameters": "(final Map<Integer, Integer> windowLengthPredicitions)", "modifiers": "protected", "return": "Integer", "signature": "Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "full_signature": "protected Integer mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelFromWindowLengthPredicitions(final Map<Integer, Integer> windowLengthPredicitions)", "testcase": false, "constructor": false}, {"identifier": "calculateWindowLengthPredictions", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "protected", "return": "Map<Integer, List<Integer>>", "signature": "Map<Integer, List<Integer>> calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "full_signature": "protected Map<Integer, List<Integer>> calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.calculateWindowLengthPredictions(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "mostFrequentLabelsFromWindowLengthPredicitions", "parameters": "(final Map<Integer, List<Integer>> windowLengthPredicitions)", "modifiers": "protected", "return": "List<Integer>", "signature": "List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "full_signature": "protected List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final double[] univInstance)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer predict(final double[] univInstance)", "full_signature": "@Override public Integer predict(final double[] univInstance)", "class_method_signature": "ShotgunEnsembleClassifier.predict(final double[] univInstance)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "List<Integer>", "signature": "List<Integer> predict(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public List<Integer> predict(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.predict(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "setValues", "parameters": "(final double[][] values)", "modifiers": "protected", "return": "void", "signature": "void setValues(final double[][] values)", "full_signature": "protected void setValues(final double[][] values)", "class_method_signature": "ShotgunEnsembleClassifier.setValues(final double[][] values)", "testcase": false, "constructor": false}, {"identifier": "setTargets", "parameters": "(final int[] targets)", "modifiers": "protected", "return": "void", "signature": "void setTargets(final int[] targets)", "full_signature": "protected void setTargets(final int[] targets)", "class_method_signature": "ShotgunEnsembleClassifier.setTargets(final int[] targets)", "testcase": false, "constructor": false}, {"identifier": "setWindows", "parameters": "(final ArrayList<Pair<Integer, Integer>> windows)", "modifiers": "protected", "return": "void", "signature": "void setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "full_signature": "protected void setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "class_method_signature": "ShotgunEnsembleClassifier.setWindows(final ArrayList<Pair<Integer, Integer>> windows)", "testcase": false, "constructor": false}, {"identifier": "setNearestNeighborClassifier", "parameters": "(final NearestNeighborClassifier nearestNeighborClassifier)", "modifiers": "protected", "return": "void", "signature": "void setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "full_signature": "protected void setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "class_method_signature": "ShotgunEnsembleClassifier.setNearestNeighborClassifier(final NearestNeighborClassifier nearestNeighborClassifier)", "testcase": false, "constructor": false}, {"identifier": "getLearningAlgorithm", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "ShotgunEnsembleLearnerAlgorithm", "signature": "ShotgunEnsembleLearnerAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public ShotgunEnsembleLearnerAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "class_method_signature": "ShotgunEnsembleClassifier.getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/neighbors/ShotgunEnsembleClassifier.java"}, "focal_method": {"identifier": "mostFrequentLabelsFromWindowLengthPredicitions", "parameters": "(final Map<Integer, List<Integer>> windowLengthPredicitions)", "modifiers": "protected", "return": "List<Integer>", "body": "protected List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions) {\n\t\t// Return most frequent label for each instance.\n\t\tint numberOfInstances = windowLengthPredicitions.values().iterator().next().size();\n\n\t\tList<Integer> predicitions = new ArrayList<>(numberOfInstances);\n\t\tfor (int i = 0; i < numberOfInstances; i++) {\n\t\t\t// Map holding (windowLength, predicition for instance) pairs.\n\t\t\tMap<Integer, Integer> windowLabelsForInstance = new HashMap<>();\n\t\t\tfor (Entry<Integer, List<Integer>> entry : windowLengthPredicitions.entrySet()) {\n\t\t\t\tint windowLength = entry.getKey();\n\t\t\t\tint predictionForWindowLength = entry.getValue().get(i);\n\t\t\t\twindowLabelsForInstance.put(windowLength, predictionForWindowLength);\n\t\t\t}\n\t\t\tint mostFrequentLabelForInstance = this.mostFrequentLabelFromWindowLengthPredicitions(windowLabelsForInstance);\n\t\t\tpredicitions.add(mostFrequentLabelForInstance);\n\t\t}\n\n\t\treturn predicitions;\n\t}", "signature": "List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "full_signature": "protected List<Integer> mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "class_method_signature": "ShotgunEnsembleClassifier.mostFrequentLabelsFromWindowLengthPredicitions(final Map<Integer, List<Integer>> windowLengthPredicitions)", "testcase": false, "constructor": false, "invocations": ["size", "next", "iterator", "values", "entrySet", "getKey", "get", "getValue", "put", "mostFrequentLabelFromWindowLengthPredicitions", "add"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}