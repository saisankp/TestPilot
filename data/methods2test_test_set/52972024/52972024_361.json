{"test_class": {"identifier": "RetryingToTakeResourceExceptionHandlerTest", "superclass": "extends ExceptionHandlingReceiverTest", "interfaces": "", "fields": [{"original_string": "private OutOfResourceException outOfResourceExceptionMock;", "modifier": "private", "type": "OutOfResourceException", "declarator": "outOfResourceExceptionMock", "var_name": "outOfResourceExceptionMock"}, {"original_string": "private IResourceSource resourceSourceMock;", "modifier": "private", "type": "IResourceSource", "declarator": "resourceSourceMock", "var_name": "resourceSourceMock"}, {"original_string": "private ArgumentCaptor<IPoorAction> callbackCaptor;", "modifier": "private", "type": "ArgumentCaptor<IPoorAction>", "declarator": "callbackCaptor", "var_name": "callbackCaptor"}, {"original_string": "private IMessageProcessingSequence sequenceMock;", "modifier": "private", "type": "IMessageProcessingSequence", "declarator": "sequenceMock", "var_name": "sequenceMock"}], "file": "CoreFeatures/MessageProcessing/ExceptionHandlingReceivers/src/test/java/info/smart_tools/smartactors/message_processing/exception_handling_receivers/RetryingToTakeResourceExceptionHandlerTest.java"}, "test_case": {"identifier": "Should_enqueueACallbackToResourceSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_enqueueACallbackToResourceSource()\n            throws Exception {\n        AsynchronousOperationException asynchronousOperationException = mock(AsynchronousOperationException.class);\n\n        when(messageProcessorMock.getSequence()).thenReturn(sequenceMock);\n\n        when(contextMock.getValue(same(exceptionFieldName))).thenReturn(outOfResourceExceptionMock);\n        when(contextMock.getValue(same(causeLevelFieldName))).thenReturn(135);\n        when(contextMock.getValue(same(causeStepFieldName))).thenReturn(123);\n\n        IMessageReceiver receiver = new RetryingToTakeResourceExceptionHandler();\n\n        receiver.receive(messageProcessorMock);\n\n        verify(sequenceMock).goTo(eq(135), eq(123));\n        verify(resourceSourceMock).onAvailable(callbackCaptor.capture());\n\n        callbackCaptor.getValue().execute();\n        verify(messageProcessorMock).continueProcess(null);\n\n        reset(messageProcessorMock);\n        doThrow(asynchronousOperationException).when(messageProcessorMock).continueProcess(null);\n\n        try {\n            callbackCaptor.getValue().execute();\n            fail();\n        } catch (ActionExecuteException e) {\n            assertSame(asynchronousOperationException, e.getCause());\n        }\n    }", "signature": "void Should_enqueueACallbackToResourceSource()", "full_signature": "@Test public void Should_enqueueACallbackToResourceSource()", "class_method_signature": "RetryingToTakeResourceExceptionHandlerTest.Should_enqueueACallbackToResourceSource()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSequence", "thenReturn", "when", "getValue", "same", "thenReturn", "when", "getValue", "same", "thenReturn", "when", "getValue", "same", "receive", "goTo", "verify", "eq", "eq", "onAvailable", "verify", "capture", "execute", "getValue", "continueProcess", "verify", "reset", "continueProcess", "when", "doThrow", "execute", "getValue", "fail", "assertSame", "getCause"]}, "focal_class": {"identifier": "RetryingToTakeResourceExceptionHandler", "superclass": "extends ExceptionHandlingReceiver", "interfaces": "", "fields": [], "methods": [{"identifier": "RetryingToTakeResourceExceptionHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " RetryingToTakeResourceExceptionHandler()", "full_signature": "public  RetryingToTakeResourceExceptionHandler()", "class_method_signature": "RetryingToTakeResourceExceptionHandler.RetryingToTakeResourceExceptionHandler()", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "RetryingToTakeResourceExceptionHandler.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ExceptionHandlingReceivers/src/main/java/info/smart_tools/smartactors/message_processing/exception_handling_receivers/RetryingToTakeResourceExceptionHandler.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException {\n        try {\n            IObject context = processor.getContext();\n            OutOfResourceException exception = (OutOfResourceException) getException(context);\n\n            processor.getSequence().goTo(getCauseLevel(context), getCauseStep(context));\n\n            processor.pauseProcess();\n\n            exception.getSource().onAvailable(() -> {\n                try {\n                    processor.continueProcess(null);\n                } catch (AsynchronousOperationException e) {\n                    throw new ActionExecuteException(e);\n                }\n            });\n        } catch (ReadValueException | InvalidArgumentException | AsynchronousOperationException e) {\n            throw new MessageReceiveException(e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "RetryingToTakeResourceExceptionHandler.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["getContext", "getException", "goTo", "getSequence", "getCauseLevel", "getCauseStep", "pauseProcess", "onAvailable", "getSource", "continueProcess"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}