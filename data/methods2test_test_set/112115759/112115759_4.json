{"test_class": {"identifier": "FileLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Path rootDir;", "modifier": "private final", "type": "Path", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "private final FileLocator fileLocator;", "modifier": "private final", "type": "FileLocator", "declarator": "fileLocator", "var_name": "fileLocator"}], "file": "rawhttp-cli/src/test/java/rawhttp/cli/FileLocatorTest.java"}, "test_case": {"identifier": "canFindFileWithNonExactMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canFindFileWithNonExactMatch() {\n        Optional<FileLocator.FileResult> result = fileLocator.find(\"p1/hello\", emptyList());\n        assertTrue(result.isPresent());\n\n        // either JSON or XML file could be returned\n        File jsonFile = rootDir.resolve(\"p1/hello.json\").toFile();\n        File xmlFile = rootDir.resolve(\"p1/hello.xml\").toFile();\n        File actualFile = result.get().file;\n\n        if (actualFile.equals(jsonFile)) {\n            assertEquals(singletonList(\"application/json\"), result.get().fileHttpHeaders.get(\"Content-Type\"));\n            assertTimestampIsWithinSecondsAgo(result.get().fileHttpHeaders.getFirst(\"Last-Modified\").orElse(\"none\"));\n        } else if (actualFile.equals(xmlFile)) {\n            assertEquals(singletonList(\"text/xml\"), result.get().fileHttpHeaders.get(\"Content-Type\"));\n            assertTimestampIsWithinSecondsAgo(result.get().fileHttpHeaders.getFirst(\"Last-Modified\").orElse(\"none\"));\n        } else {\n            fail(\"Found file is not as expected: \" + actualFile);\n        }\n    }", "signature": "void canFindFileWithNonExactMatch()", "full_signature": "@Test public void canFindFileWithNonExactMatch()", "class_method_signature": "FileLocatorTest.canFindFileWithNonExactMatch()", "testcase": true, "constructor": false, "invocations": ["find", "emptyList", "assertTrue", "isPresent", "toFile", "resolve", "toFile", "resolve", "get", "equals", "assertEquals", "singletonList", "get", "get", "assertTimestampIsWithinSecondsAgo", "orElse", "getFirst", "get", "equals", "assertEquals", "singletonList", "get", "get", "assertTimestampIsWithinSecondsAgo", "orElse", "getFirst", "get", "fail"]}, "focal_class": {"identifier": "FileLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> ANY_CONTENT_TYPE = singletonList(\"*/*\");", "modifier": "private static final", "type": "List<String>", "declarator": "ANY_CONTENT_TYPE = singletonList(\"*/*\")", "var_name": "ANY_CONTENT_TYPE"}, {"original_string": "private final File rootDir;", "modifier": "private final", "type": "File", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "private final Map<String, String> mimeByFileExtension;", "modifier": "private final", "type": "Map<String, String>", "declarator": "mimeByFileExtension", "var_name": "mimeByFileExtension"}], "methods": [{"identifier": "FileLocator", "parameters": "(File rootDir, Map<String, String> mimeByFileExtension)", "modifiers": "", "return": "", "signature": " FileLocator(File rootDir, Map<String, String> mimeByFileExtension)", "full_signature": "  FileLocator(File rootDir, Map<String, String> mimeByFileExtension)", "class_method_signature": "FileLocator.FileLocator(File rootDir, Map<String, String> mimeByFileExtension)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(String path, List<String> accept)", "modifiers": "", "return": "Optional<FileResult>", "signature": "Optional<FileResult> find(String path, List<String> accept)", "full_signature": " Optional<FileResult> find(String path, List<String> accept)", "class_method_signature": "FileLocator.find(String path, List<String> accept)", "testcase": false, "constructor": false}, {"identifier": "findWithExtension", "parameters": "(String path, List<String> accept)", "modifiers": "private", "return": "Optional<FileResult>", "signature": "Optional<FileResult> findWithExtension(String path, List<String> accept)", "full_signature": "private Optional<FileResult> findWithExtension(String path, List<String> accept)", "class_method_signature": "FileLocator.findWithExtension(String path, List<String> accept)", "testcase": false, "constructor": false}, {"identifier": "groupCandidatesByMediaType", "parameters": "(String resourceNameDot, File[] candidateFiles)", "modifiers": "private", "return": "Map<String, File>", "signature": "Map<String, File> groupCandidatesByMediaType(String resourceNameDot, File[] candidateFiles)", "full_signature": "private Map<String, File> groupCandidatesByMediaType(String resourceNameDot, File[] candidateFiles)", "class_method_signature": "FileLocator.groupCandidatesByMediaType(String resourceNameDot, File[] candidateFiles)", "testcase": false, "constructor": false}, {"identifier": "findExactMatch", "parameters": "(String path)", "modifiers": "private", "return": "Optional<FileResult>", "signature": "Optional<FileResult> findExactMatch(String path)", "full_signature": "private Optional<FileResult> findExactMatch(String path)", "class_method_signature": "FileLocator.findExactMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "fileHttpHeaders", "parameters": "(File resource)", "modifiers": "private", "return": "RawHttpHeaders", "signature": "RawHttpHeaders fileHttpHeaders(File resource)", "full_signature": "private RawHttpHeaders fileHttpHeaders(File resource)", "class_method_signature": "FileLocator.fileHttpHeaders(File resource)", "testcase": false, "constructor": false}, {"identifier": "fileHttpHeaders", "parameters": "(String contentType, long lastModified)", "modifiers": "private static", "return": "RawHttpHeaders", "signature": "RawHttpHeaders fileHttpHeaders(String contentType, long lastModified)", "full_signature": "private static RawHttpHeaders fileHttpHeaders(String contentType, long lastModified)", "class_method_signature": "FileLocator.fileHttpHeaders(String contentType, long lastModified)", "testcase": false, "constructor": false}, {"identifier": "toDateField", "parameters": "(long lastModified)", "modifiers": "private static", "return": "String", "signature": "String toDateField(long lastModified)", "full_signature": "private static String toDateField(long lastModified)", "class_method_signature": "FileLocator.toDateField(long lastModified)", "testcase": false, "constructor": false}, {"identifier": "mimeTypeOf", "parameters": "(String resourceName)", "modifiers": "", "return": "String", "signature": "String mimeTypeOf(String resourceName)", "full_signature": " String mimeTypeOf(String resourceName)", "class_method_signature": "FileLocator.mimeTypeOf(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getPathData", "parameters": "(String path)", "modifiers": "private", "return": "PathData", "signature": "PathData getPathData(String path)", "full_signature": "private PathData getPathData(String path)", "class_method_signature": "FileLocator.getPathData(String path)", "testcase": false, "constructor": false}], "file": "rawhttp-cli/src/main/java/rawhttp/cli/FileLocator.java"}, "focal_method": {"identifier": "find", "parameters": "(String path, List<String> accept)", "modifiers": "", "return": "Optional<FileResult>", "body": "Optional<FileResult> find(String path, List<String> accept) {\n        Optional<FileResult> result = findExactMatch(path);\n        if (!result.isPresent()) {\n            result = findWithExtension(path, accept);\n        }\n        return result;\n    }", "signature": "Optional<FileResult> find(String path, List<String> accept)", "full_signature": " Optional<FileResult> find(String path, List<String> accept)", "class_method_signature": "FileLocator.find(String path, List<String> accept)", "testcase": false, "constructor": false, "invocations": ["findExactMatch", "isPresent", "findWithExtension"]}, "repository": {"repo_id": 112115759, "url": "https://github.com/renatoathaydes/rawhttp", "stars": 63, "created": "11/26/2017 8:52:33 PM +00:00", "updates": "2020-01-18T11:12:00+00:00", "fork": "False", "license": "licensed"}}