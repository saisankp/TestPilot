{"test_class": {"identifier": "TestThemisRead", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/TestThemisRead.java"}, "test_case": {"identifier": "testSetFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSetFilter() throws IOException {\n    ThemisRead[] readers = new ThemisRead[] { new ThemisGet(ROW), new ThemisScan() };\n    for (ThemisRead reader : readers) {\n      reader.setFilter(null);\n      Assert.assertNull(reader.getFilter());\n      \n      // illegal Filter class directly\n      try {\n        reader.setFilter(new DependentColumnFilter());\n        Assert.fail();\n      } catch (IOException e) {}\n      // illegal Filter class in FilterList\n      FilterList filterList = new FilterList();\n      filterList.addFilter(new PrefixFilter());\n      filterList.addFilter(new ColumnRangeFilter());\n      try {\n        reader.setFilter(new DependentColumnFilter());\n        Assert.fail();\n      } catch (IOException e) {}\n      \n      reader.setFilter(new PrefixFilter());\n      Assert.assertEquals(PrefixFilter.class.getName(), reader.getFilter().getClass().getName());\n      filterList = new FilterList();\n      filterList.addFilter(new PrefixFilter());\n      reader.setFilter(filterList);\n      Assert.assertEquals(FilterList.class.getName(), reader.getFilter().getClass().getName());\n    }\n  }", "signature": "void testSetFilter()", "full_signature": "@Test public void testSetFilter()", "class_method_signature": "TestThemisRead.testSetFilter()", "testcase": true, "constructor": false, "invocations": ["setFilter", "assertNull", "getFilter", "setFilter", "fail", "addFilter", "addFilter", "setFilter", "fail", "setFilter", "assertEquals", "getName", "getName", "getClass", "getFilter", "addFilter", "setFilter", "assertEquals", "getName", "getName", "getClass", "getFilter"]}, "focal_class": {"identifier": "ThemisRead", "superclass": "extends ThemisRequest", "interfaces": "", "fields": [], "methods": [{"identifier": "hasColumn", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean hasColumn()", "full_signature": "protected boolean hasColumn()", "class_method_signature": "ThemisRead.hasColumn()", "testcase": false, "constructor": false}, {"identifier": "getFamilyMap", "parameters": "()", "modifiers": "public abstract", "return": "Map<byte [], NavigableSet<byte []>>", "signature": "Map<byte [], NavigableSet<byte []>> getFamilyMap()", "full_signature": "public abstract Map<byte [], NavigableSet<byte []>> getFamilyMap()", "class_method_signature": "ThemisRead.getFamilyMap()", "testcase": false, "constructor": false}, {"identifier": "addColumn", "parameters": "(byte [] family, byte [] qualifier)", "modifiers": "public abstract", "return": "ThemisRead", "signature": "ThemisRead addColumn(byte [] family, byte [] qualifier)", "full_signature": "public abstract ThemisRead addColumn(byte [] family, byte [] qualifier)", "class_method_signature": "ThemisRead.addColumn(byte [] family, byte [] qualifier)", "testcase": false, "constructor": false}, {"identifier": "addFamily", "parameters": "(byte[] family)", "modifiers": "public abstract", "return": "ThemisRead", "signature": "ThemisRead addFamily(byte[] family)", "full_signature": "public abstract ThemisRead addFamily(byte[] family)", "class_method_signature": "ThemisRead.addFamily(byte[] family)", "testcase": false, "constructor": false}, {"identifier": "setCacheBlocks", "parameters": "(boolean cacheBlocks)", "modifiers": "public abstract", "return": "void", "signature": "void setCacheBlocks(boolean cacheBlocks)", "full_signature": "public abstract void setCacheBlocks(boolean cacheBlocks)", "class_method_signature": "ThemisRead.setCacheBlocks(boolean cacheBlocks)", "testcase": false, "constructor": false}, {"identifier": "getCacheBlocks", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean getCacheBlocks()", "full_signature": "public abstract boolean getCacheBlocks()", "class_method_signature": "ThemisRead.getCacheBlocks()", "testcase": false, "constructor": false}, {"identifier": "setFilter", "parameters": "(Filter filter)", "modifiers": "public", "return": "ThemisRead", "signature": "ThemisRead setFilter(Filter filter)", "full_signature": "public ThemisRead setFilter(Filter filter)", "class_method_signature": "ThemisRead.setFilter(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "setFilterWithoutCheck", "parameters": "(Filter filter)", "modifiers": "protected abstract", "return": "ThemisRead", "signature": "ThemisRead setFilterWithoutCheck(Filter filter)", "full_signature": "protected abstract ThemisRead setFilterWithoutCheck(Filter filter)", "class_method_signature": "ThemisRead.setFilterWithoutCheck(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "public abstract", "return": "Filter", "signature": "Filter getFilter()", "full_signature": "public abstract Filter getFilter()", "class_method_signature": "ThemisRead.getFilter()", "testcase": false, "constructor": false}, {"identifier": "checkContainingPreservedColumns", "parameters": "(Map<byte[], NavigableSet<byte[]>> familyMap)", "modifiers": "public static", "return": "void", "signature": "void checkContainingPreservedColumns(Map<byte[], NavigableSet<byte[]>> familyMap)", "full_signature": "public static void checkContainingPreservedColumns(Map<byte[], NavigableSet<byte[]>> familyMap)", "class_method_signature": "ThemisRead.checkContainingPreservedColumns(Map<byte[], NavigableSet<byte[]>> familyMap)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/ThemisRead.java"}, "focal_method": {"identifier": "setFilter", "parameters": "(Filter filter)", "modifiers": "public", "return": "ThemisRead", "body": "public ThemisRead setFilter(Filter filter) throws IOException {\n    ThemisCpUtil.processFilters(filter, new FilterCallable() {\n      public void processConcreteFilter(Filter filter) throws IOException {\n        Class<? extends Filter> filterCls = filter.getClass();\n        if (ThemisCpUtil.DISALLOWD_FILTERS.contains(filterCls)) {\n          throw new IOException(\"themis read disallow this filter, filter=\"\n              + filter.getClass().getName() + \", all disallowed filters : \"\n              + ThemisCpUtil.getDisallowedFilterClassNameString());\n        }\n      }\n    });\n    return setFilterWithoutCheck(filter);\n  }", "signature": "ThemisRead setFilter(Filter filter)", "full_signature": "public ThemisRead setFilter(Filter filter)", "class_method_signature": "ThemisRead.setFilter(Filter filter)", "testcase": false, "constructor": false, "invocations": ["processFilters", "getClass", "contains", "getName", "getClass", "getDisallowedFilterClassNameString", "setFilterWithoutCheck"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}