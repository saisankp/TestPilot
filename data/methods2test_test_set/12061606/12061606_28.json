{"test_class": {"identifier": "UnionFindTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/UnionFindTest.java"}, "test_case": {"identifier": "find", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void find() {\n        UnionFind uf = new UnionFind(100);\n        uf.union(1, 5);\n        uf.union(7, 9);\n        uf.union(10, 11);\n        uf.union(15, 1);\n        uf.union(15, 50);\n        assertThat(uf.find(1), is(50));\n        assertThat(uf.find(5), is(50));\n        assertThat(uf.find(7), is(7));\n        assertThat(uf.find(8), is(8));\n        assertThat(uf.find(10), is(10));\n        assertThat(uf.find(11), is(10));\n        assertThat(uf.find(15), is(50));\n        assertThat(uf.find(50), is(50));\n    }", "signature": "void find()", "full_signature": "@Test public void find()", "class_method_signature": "UnionFindTest.find()", "testcase": true, "constructor": false, "invocations": ["union", "union", "union", "union", "union", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is", "assertThat", "find", "is"]}, "focal_class": {"identifier": "UnionFind", "superclass": "", "interfaces": "", "fields": [{"original_string": "final int[] forest;", "modifier": "final", "type": "int[]", "declarator": "forest", "var_name": "forest"}], "methods": [{"identifier": "UnionFind", "parameters": "(int n)", "modifiers": "", "return": "", "signature": " UnionFind(int n)", "full_signature": "  UnionFind(int n)", "class_method_signature": "UnionFind.UnionFind(int n)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(int u)", "modifiers": "", "return": "int", "signature": "int find(int u)", "full_signature": " int find(int u)", "class_method_signature": "UnionFind.find(int u)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(int u, int v)", "modifiers": "", "return": "void", "signature": "void union(int u, int v)", "full_signature": " void union(int u, int v)", "class_method_signature": "UnionFind.union(int u, int v)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(int sRoot, int lRoot)", "modifiers": "private", "return": "void", "signature": "void join(int sRoot, int lRoot)", "full_signature": "private void join(int sRoot, int lRoot)", "class_method_signature": "UnionFind.join(int sRoot, int lRoot)", "testcase": false, "constructor": false}, {"identifier": "connected", "parameters": "(int u, int v)", "modifiers": "", "return": "boolean", "signature": "boolean connected(int u, int v)", "full_signature": " boolean connected(int u, int v)", "class_method_signature": "UnionFind.connected(int u, int v)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "UnionFind.clear()", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/UnionFind.java"}, "focal_method": {"identifier": "find", "parameters": "(int u)", "modifiers": "", "return": "int", "body": "int find(int u) {\n        return forest[u] < 0 ? u : (forest[u] = find(forest[u]));\n    }", "signature": "int find(int u)", "full_signature": " int find(int u)", "class_method_signature": "UnionFind.find(int u)", "testcase": false, "constructor": false, "invocations": ["find"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}