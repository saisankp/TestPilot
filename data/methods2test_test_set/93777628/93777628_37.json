{"test_class": {"identifier": "ValueTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CoinType BTC = BitcoinMain.get();", "modifier": "final", "type": "CoinType", "declarator": "BTC = BitcoinMain.get()", "var_name": "BTC"}, {"original_string": "final CoinType LTC = LitecoinMain.get();", "modifier": "final", "type": "CoinType", "declarator": "LTC = LitecoinMain.get()", "var_name": "LTC"}, {"original_string": "final CoinType PPC = PeercoinMain.get();", "modifier": "final", "type": "CoinType", "declarator": "PPC = PeercoinMain.get()", "var_name": "PPC"}, {"original_string": "final CoinType NBT = NuBitsMain.get();", "modifier": "final", "type": "CoinType", "declarator": "NBT = NuBitsMain.get()", "var_name": "NBT"}, {"original_string": "final FiatType USD = FiatType.get(\"USD\");", "modifier": "final", "type": "FiatType", "declarator": "USD = FiatType.get(\"USD\")", "var_name": "USD"}, {"original_string": "ValueType[] types = {BTC, LTC, NBT, USD};", "modifier": "", "type": "ValueType[]", "declarator": "types = {BTC, LTC, NBT, USD}", "var_name": "types"}], "file": "core/src/test/java/com/coinomi/core/coins/ValueTest.java"}, "test_case": {"identifier": "testIsOfType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsOfType() {\n        assertTrue(BTC.oneCoin().isOfType(BTC));\n        assertTrue(BTC.oneCoin().isOfType(BTC.oneCoin()));\n        assertFalse(BTC.oneCoin().isOfType(LTC));\n        assertFalse(BTC.oneCoin().isOfType(LTC.oneCoin()));\n    }", "signature": "void testIsOfType()", "full_signature": "@Test public void testIsOfType()", "class_method_signature": "ValueTest.testIsOfType()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isOfType", "oneCoin", "assertTrue", "isOfType", "oneCoin", "oneCoin", "assertFalse", "isOfType", "oneCoin", "assertFalse", "isOfType", "oneCoin", "oneCoin"]}, "focal_class": {"identifier": "Value", "superclass": "", "interfaces": "implements Monetary, Comparable<Value>, Serializable", "fields": [{"original_string": "public final ValueType type;", "modifier": "public final", "type": "ValueType", "declarator": "type", "var_name": "type"}, {"original_string": "public final long value;", "modifier": "public final", "type": "long", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "Value", "parameters": "(final ValueType type, final long units)", "modifiers": "", "return": "", "signature": " Value(final ValueType type, final long units)", "full_signature": "  Value(final ValueType type, final long units)", "class_method_signature": "Value.Value(final ValueType type, final long units)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(final ValueType type, final long units)", "modifiers": "public static", "return": "Value", "signature": "Value valueOf(final ValueType type, final long units)", "full_signature": "public static Value valueOf(final ValueType type, final long units)", "class_method_signature": "Value.valueOf(final ValueType type, final long units)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(final ValueType type, @Nullable final Coin coin)", "modifiers": "@Nullable public static", "return": "Value", "signature": "Value valueOf(final ValueType type, @Nullable final Coin coin)", "full_signature": "@Nullable public static Value valueOf(final ValueType type, @Nullable final Coin coin)", "class_method_signature": "Value.valueOf(final ValueType type, @Nullable final Coin coin)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(final ValueType type, BigInteger units)", "modifiers": "public static", "return": "Value", "signature": "Value valueOf(final ValueType type, BigInteger units)", "full_signature": "public static Value valueOf(final ValueType type, BigInteger units)", "class_method_signature": "Value.valueOf(final ValueType type, BigInteger units)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(final ValueType type, String unitsStr)", "modifiers": "public static", "return": "Value", "signature": "Value valueOf(final ValueType type, String unitsStr)", "full_signature": "public static Value valueOf(final ValueType type, String unitsStr)", "class_method_signature": "Value.valueOf(final ValueType type, String unitsStr)", "testcase": false, "constructor": false}, {"identifier": "smallestUnitExponent", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int smallestUnitExponent()", "full_signature": "@Override public int smallestUnitExponent()", "class_method_signature": "Value.smallestUnitExponent()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getValue()", "full_signature": "@Override public long getValue()", "class_method_signature": "Value.getValue()", "testcase": false, "constructor": false}, {"identifier": "toCoin", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin toCoin()", "full_signature": "public Coin toCoin()", "class_method_signature": "Value.toCoin()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(final ValueType type, final int coins, final int cents)", "modifiers": "public static", "return": "Value", "signature": "Value valueOf(final ValueType type, final int coins, final int cents)", "full_signature": "public static Value valueOf(final ValueType type, final int coins, final int cents)", "class_method_signature": "Value.valueOf(final ValueType type, final int coins, final int cents)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final ValueType type, final String str)", "modifiers": "public static", "return": "Value", "signature": "Value parse(final ValueType type, final String str)", "full_signature": "public static Value parse(final ValueType type, final String str)", "class_method_signature": "Value.parse(final ValueType type, final String str)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final ValueType type, final BigDecimal decimal)", "modifiers": "public static", "return": "Value", "signature": "Value parse(final ValueType type, final BigDecimal decimal)", "full_signature": "public static Value parse(final ValueType type, final BigDecimal decimal)", "class_method_signature": "Value.parse(final ValueType type, final BigDecimal decimal)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Value value)", "modifiers": "public", "return": "Value", "signature": "Value add(final Value value)", "full_signature": "public Value add(final Value value)", "class_method_signature": "Value.add(final Value value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Coin value)", "modifiers": "public", "return": "Value", "signature": "Value add(final Coin value)", "full_signature": "public Value add(final Coin value)", "class_method_signature": "Value.add(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final long value)", "modifiers": "public", "return": "Value", "signature": "Value add(final long value)", "full_signature": "public Value add(final long value)", "class_method_signature": "Value.add(final long value)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Value value)", "modifiers": "public", "return": "Value", "signature": "Value subtract(final Value value)", "full_signature": "public Value subtract(final Value value)", "class_method_signature": "Value.subtract(final Value value)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Coin value)", "modifiers": "public", "return": "Value", "signature": "Value subtract(final Coin value)", "full_signature": "public Value subtract(final Coin value)", "class_method_signature": "Value.subtract(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(String str)", "modifiers": "public", "return": "Value", "signature": "Value subtract(String str)", "full_signature": "public Value subtract(String str)", "class_method_signature": "Value.subtract(String str)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(long value)", "modifiers": "public", "return": "Value", "signature": "Value subtract(long value)", "full_signature": "public Value subtract(long value)", "class_method_signature": "Value.subtract(long value)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final long factor)", "modifiers": "public", "return": "Value", "signature": "Value multiply(final long factor)", "full_signature": "public Value multiply(final long factor)", "class_method_signature": "Value.multiply(final long factor)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final long divisor)", "modifiers": "public", "return": "Value", "signature": "Value divide(final long divisor)", "full_signature": "public Value divide(final long divisor)", "class_method_signature": "Value.divide(final long divisor)", "testcase": false, "constructor": false}, {"identifier": "divideAndRemainder", "parameters": "(final long divisor)", "modifiers": "public", "return": "Value[]", "signature": "Value[] divideAndRemainder(final long divisor)", "full_signature": "public Value[] divideAndRemainder(final long divisor)", "class_method_signature": "Value.divideAndRemainder(final long divisor)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final Value divisor)", "modifiers": "public", "return": "long", "signature": "long divide(final Value divisor)", "full_signature": "public long divide(final Value divisor)", "class_method_signature": "Value.divide(final Value divisor)", "testcase": false, "constructor": false}, {"identifier": "isPositive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPositive()", "full_signature": "public boolean isPositive()", "class_method_signature": "Value.isPositive()", "testcase": false, "constructor": false}, {"identifier": "isNegative", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegative()", "full_signature": "public boolean isNegative()", "class_method_signature": "Value.isNegative()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Value.isZero()", "testcase": false, "constructor": false}, {"identifier": "isGreaterThan", "parameters": "(Value other)", "modifiers": "public", "return": "boolean", "signature": "boolean isGreaterThan(Value other)", "full_signature": "public boolean isGreaterThan(Value other)", "class_method_signature": "Value.isGreaterThan(Value other)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(Value other)", "modifiers": "public", "return": "boolean", "signature": "boolean isLessThan(Value other)", "full_signature": "public boolean isLessThan(Value other)", "class_method_signature": "Value.isLessThan(Value other)", "testcase": false, "constructor": false}, {"identifier": "shiftLeft", "parameters": "(final int n)", "modifiers": "public", "return": "Value", "signature": "Value shiftLeft(final int n)", "full_signature": "public Value shiftLeft(final int n)", "class_method_signature": "Value.shiftLeft(final int n)", "testcase": false, "constructor": false}, {"identifier": "shiftRight", "parameters": "(final int n)", "modifiers": "public", "return": "Value", "signature": "Value shiftRight(final int n)", "full_signature": "public Value shiftRight(final int n)", "class_method_signature": "Value.shiftRight(final int n)", "testcase": false, "constructor": false}, {"identifier": "signum", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int signum()", "full_signature": "@Override public int signum()", "class_method_signature": "Value.signum()", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "Value", "signature": "Value negate()", "full_signature": "public Value negate()", "class_method_signature": "Value.negate()", "testcase": false, "constructor": false}, {"identifier": "toFriendlyString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toFriendlyString()", "full_signature": "public String toFriendlyString()", "class_method_signature": "Value.toFriendlyString()", "testcase": false, "constructor": false}, {"identifier": "toPlainString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toPlainString()", "full_signature": "public String toPlainString()", "class_method_signature": "Value.toPlainString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Value.toString()", "testcase": false, "constructor": false}, {"identifier": "toUnitsString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toUnitsString()", "full_signature": "public String toUnitsString()", "class_method_signature": "Value.toUnitsString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Value.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Value.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(@Nonnull final Value other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(@Nonnull final Value other)", "full_signature": "@Override public int compareTo(@Nonnull final Value other)", "class_method_signature": "Value.compareTo(@Nonnull final Value other)", "testcase": false, "constructor": false}, {"identifier": "isDust", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDust()", "full_signature": "public boolean isDust()", "class_method_signature": "Value.isDust()", "testcase": false, "constructor": false}, {"identifier": "isOfType", "parameters": "(ValueType otherType)", "modifiers": "public", "return": "boolean", "signature": "boolean isOfType(ValueType otherType)", "full_signature": "public boolean isOfType(ValueType otherType)", "class_method_signature": "Value.isOfType(ValueType otherType)", "testcase": false, "constructor": false}, {"identifier": "isOfType", "parameters": "(Value otherValue)", "modifiers": "public", "return": "boolean", "signature": "boolean isOfType(Value otherValue)", "full_signature": "public boolean isOfType(Value otherValue)", "class_method_signature": "Value.isOfType(Value otherValue)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(Value min, Value max)", "modifiers": "public", "return": "boolean", "signature": "boolean within(Value min, Value max)", "full_signature": "public boolean within(Value min, Value max)", "class_method_signature": "Value.within(Value min, Value max)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(Value value1, Value value2)", "modifiers": "public static", "return": "Value", "signature": "Value max(Value value1, Value value2)", "full_signature": "public static Value max(Value value1, Value value2)", "class_method_signature": "Value.max(Value value1, Value value2)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(Value value1, Value value2)", "modifiers": "public static", "return": "Value", "signature": "Value min(Value value1, Value value2)", "full_signature": "public static Value min(Value value1, Value value2)", "class_method_signature": "Value.min(Value value1, Value value2)", "testcase": false, "constructor": false}, {"identifier": "canCompare", "parameters": "(Value other)", "modifiers": "public", "return": "boolean", "signature": "boolean canCompare(Value other)", "full_signature": "public boolean canCompare(Value other)", "class_method_signature": "Value.canCompare(Value other)", "testcase": false, "constructor": false}, {"identifier": "canCompare", "parameters": "(@Nullable Value amount1, @Nullable Value amount2)", "modifiers": "public static", "return": "boolean", "signature": "boolean canCompare(@Nullable Value amount1, @Nullable Value amount2)", "full_signature": "public static boolean canCompare(@Nullable Value amount1, @Nullable Value amount2)", "class_method_signature": "Value.canCompare(@Nullable Value amount1, @Nullable Value amount2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/coinomi/core/coins/Value.java"}, "focal_method": {"identifier": "isOfType", "parameters": "(ValueType otherType)", "modifiers": "public", "return": "boolean", "body": "public boolean isOfType(ValueType otherType) {\n        return type.equals(otherType);\n    }", "signature": "boolean isOfType(ValueType otherType)", "full_signature": "public boolean isOfType(ValueType otherType)", "class_method_signature": "Value.isOfType(ValueType otherType)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 93777628, "url": "https://github.com/cosmojg/open-coinomi-android", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 24, "size": 22591, "license": "licensed"}}