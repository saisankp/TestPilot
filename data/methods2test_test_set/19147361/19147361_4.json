{"test_class": {"identifier": "TestIndexScanner", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "themis-index/src/test/java/org/apache/hadoop/hbase/themis/index/cp/TestIndexScanner.java"}, "test_case": {"identifier": "testConstructDataRowGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructDataRowGet() throws IOException {\n    ThemisGet get = new ThemisGet(ROW);\n    get.addFamily(FAMILY);\n    get.addColumn(ANOTHER_FAMILY, QUALIFIER);\n    get.setFilter(new PrefixFilter(ROW));\n    get.setCacheBlocks(true);\n    \n    ThemisGet actual = IndexScanner.constructDataRowGet(ANOTHER_ROW, get);\n    Assert.assertArrayEquals(ANOTHER_ROW, actual.getRow());\n    Assert\n        .assertArrayEquals(QUALIFIER, actual.getFamilyMap().get(ANOTHER_FAMILY).iterator().next());\n    Assert.assertTrue(actual.getFamilyMap().containsKey(FAMILY));\n    Assert.assertNull(actual.getFamilyMap().get(FAMILY));\n    Assert.assertTrue(actual.getCacheBlocks());\n  }", "signature": "void testConstructDataRowGet()", "full_signature": "@Test public void testConstructDataRowGet()", "class_method_signature": "TestIndexScanner.testConstructDataRowGet()", "testcase": true, "constructor": false, "invocations": ["addFamily", "addColumn", "setFilter", "setCacheBlocks", "constructDataRowGet", "assertArrayEquals", "getRow", "assertArrayEquals", "next", "iterator", "get", "getFamilyMap", "assertTrue", "containsKey", "getFamilyMap", "assertNull", "get", "getFamilyMap", "assertTrue", "getCacheBlocks"]}, "focal_class": {"identifier": "IndexScanner", "superclass": "extends ThemisScanner", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(IndexScanner.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(IndexScanner.class)", "var_name": "LOG"}, {"original_string": "private IndexColumn indexColumn;", "modifier": "private", "type": "IndexColumn", "declarator": "indexColumn", "var_name": "indexColumn"}, {"original_string": "private IndexRead indexRead;", "modifier": "private", "type": "IndexRead", "declarator": "indexRead", "var_name": "indexRead"}, {"original_string": "private Result indexResult = null;", "modifier": "private", "type": "Result", "declarator": "indexResult = null", "var_name": "indexResult"}, {"original_string": "private int kvIndex = 0;", "modifier": "private", "type": "int", "declarator": "kvIndex = 0", "var_name": "kvIndex"}, {"original_string": "private boolean done = false;", "modifier": "private", "type": "boolean", "declarator": "done = false", "var_name": "done"}, {"original_string": "private long unmatchIndexCount = 0;", "modifier": "private", "type": "long", "declarator": "unmatchIndexCount = 0", "var_name": "unmatchIndexCount"}], "methods": [{"identifier": "IndexScanner", "parameters": "(String indexTableName, IndexRead indexRead, Transaction transaction)", "modifiers": "public", "return": "", "signature": " IndexScanner(String indexTableName, IndexRead indexRead, Transaction transaction)", "full_signature": "public  IndexScanner(String indexTableName, IndexRead indexRead, Transaction transaction)", "class_method_signature": "IndexScanner.IndexScanner(String indexTableName, IndexRead indexRead, Transaction transaction)", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Result", "signature": "Result next()", "full_signature": "public Result next()", "class_method_signature": "IndexScanner.next()", "testcase": false, "constructor": false}, {"identifier": "getUnMatchIndexCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getUnMatchIndexCount()", "full_signature": "public long getUnMatchIndexCount()", "class_method_signature": "IndexScanner.getUnMatchIndexCount()", "testcase": false, "constructor": false}, {"identifier": "constructDataRowGet", "parameters": "(byte[] row, ThemisGet dataGet)", "modifiers": "protected static", "return": "ThemisGet", "signature": "ThemisGet constructDataRowGet(byte[] row, ThemisGet dataGet)", "full_signature": "protected static ThemisGet constructDataRowGet(byte[] row, ThemisGet dataGet)", "class_method_signature": "IndexScanner.constructDataRowGet(byte[] row, ThemisGet dataGet)", "testcase": false, "constructor": false}], "file": "themis-index/src/main/java/org/apache/hadoop/hbase/themis/index/cp/IndexScanner.java"}, "focal_method": {"identifier": "constructDataRowGet", "parameters": "(byte[] row, ThemisGet dataGet)", "modifiers": "protected static", "return": "ThemisGet", "body": "protected static ThemisGet constructDataRowGet(byte[] row, ThemisGet dataGet) throws IOException {\n    ThemisGet get = new ThemisGet(row);\n    for (Entry<byte[], NavigableSet<byte[]>> columns : dataGet.getFamilyMap().entrySet()) {\n      byte[] family = columns.getKey();\n      if (columns.getValue() != null && columns.getValue().size() > 0) {\n        for (byte[] qualifier : columns.getValue()) {\n          get.addColumn(family, qualifier);\n        }\n      } else {\n        get.addFamily(family);\n      }\n    }\n    get.setFilter(dataGet.getFilter());\n    get.setCacheBlocks(dataGet.getCacheBlocks());\n    return get;\n  }", "signature": "ThemisGet constructDataRowGet(byte[] row, ThemisGet dataGet)", "full_signature": "protected static ThemisGet constructDataRowGet(byte[] row, ThemisGet dataGet)", "class_method_signature": "IndexScanner.constructDataRowGet(byte[] row, ThemisGet dataGet)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getFamilyMap", "getKey", "getValue", "size", "getValue", "getValue", "addColumn", "addFamily", "setFilter", "getFilter", "setCacheBlocks", "getCacheBlocks"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}