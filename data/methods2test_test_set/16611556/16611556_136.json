{"test_class": {"identifier": "MemcacheClientFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MemcacheClientFactoryImpl factory;", "modifier": "private", "type": "MemcacheClientFactoryImpl", "declarator": "factory", "var_name": "factory"}, {"original_string": "private List<InetSocketAddress> addrs;", "modifier": "private", "type": "List<InetSocketAddress>", "declarator": "addrs", "var_name": "addrs"}], "file": "spymemcached-provider/src/test/java/com/google/code/ssm/providers/spymemcached/MemcacheClientFactoryImplTest.java"}, "test_case": {"identifier": "createWithSpecificConf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWithSpecificConf() throws IOException {\n        SpymemcachedConfiguration conf = new SpymemcachedConfiguration();\n        conf.setConsistentHashing(true);\n        conf.setOperationTimeout(1000);\n        conf.setUseBinaryProtocol(false);\n        conf.setFailureMode(FailureMode.Cancel);\n        conf.setShouldOptimize(true);\n        conf.setMaxReconnectDelay(1000L);\n        conf.setTimeoutExceptionThreshold(100);\n        conf.setUseNagleAlgorithm(false);\n        conf.setMetricCollector(new NoopMetricCollector());\n        conf.setMetricType(MetricType.PERFORMANCE);\n        CacheClient client = factory.create(addrs, conf);\n        assertNotNull(client);\n        client.shutdown();\n    }", "signature": "void createWithSpecificConf()", "full_signature": "@Test public void createWithSpecificConf()", "class_method_signature": "MemcacheClientFactoryImplTest.createWithSpecificConf()", "testcase": true, "constructor": false, "invocations": ["setConsistentHashing", "setOperationTimeout", "setUseBinaryProtocol", "setFailureMode", "setShouldOptimize", "setMaxReconnectDelay", "setTimeoutExceptionThreshold", "setUseNagleAlgorithm", "setMetricCollector", "setMetricType", "create", "assertNotNull", "shutdown"]}, "focal_class": {"identifier": "MemcacheClientFactoryImpl", "superclass": "", "interfaces": "implements CacheClientFactory", "fields": [{"original_string": "private ConnectionFactory connectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}], "methods": [{"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "setProviderSpecificSettings", "parameters": "(final ConnectionFactoryBuilder builder, final SpymemcachedConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final SpymemcachedConfiguration conf)", "full_signature": "private void setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final SpymemcachedConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final SpymemcachedConfiguration conf)", "testcase": false, "constructor": false}], "file": "spymemcached-provider/src/main/java/com/google/code/ssm/providers/spymemcached/MemcacheClientFactoryImpl.java"}, "focal_method": {"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "body": "@Override\n    public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf) throws IOException {\n        // currently its works because this factory creates clients with the same connection settings, only memcached\n        // addresses can be changed\n        if (connectionFactory == null) {\n            ConnectionFactoryBuilder builder = new ConnectionFactoryBuilder();\n\n            if (conf.isConsistentHashing()) {\n                builder.setHashAlg(DefaultHashAlgorithm.KETAMA_HASH);\n                builder.setLocatorType(Locator.CONSISTENT);\n            }\n\n            builder.setProtocol(conf.isUseBinaryProtocol() ? Protocol.BINARY : Protocol.TEXT);\n            if (conf.getOperationTimeout() != null) {\n                builder.setOpTimeout(conf.getOperationTimeout());\n            }\n\n            if (conf instanceof SpymemcachedConfiguration) {\n                setProviderSpecificSettings(builder, (SpymemcachedConfiguration) conf);\n            }\n\n            connectionFactory = builder.build();\n        }\n\n        return new MemcacheClientWrapper(new MemcachedClient(connectionFactory, addrs));\n    }", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false, "invocations": ["isConsistentHashing", "setHashAlg", "setLocatorType", "setProtocol", "isUseBinaryProtocol", "getOperationTimeout", "setOpTimeout", "getOperationTimeout", "setProviderSpecificSettings", "build"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}