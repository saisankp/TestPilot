{"test_class": {"identifier": "CustomMappingsConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CustomMappingsConfigurer<?> configurer;", "modifier": "@Autowired\n    private", "type": "CustomMappingsConfigurer<?>", "declarator": "configurer", "var_name": "configurer"}], "file": "commons/map/src/test/java/org/openehealth/ipf/commons/map/config/CustomMappingsConfigurerTest.java"}, "test_case": {"identifier": "testMappings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMappings() {\n        assertEquals(\"b1\", configurer.getMappingService().get(\"m1\", \"a1\"));\n        assertEquals(\"b2\", configurer.getMappingService().get(\"m2\", \"a2\"));\n        assertEquals(\"b3\", configurer.getMappingService().get(\"m3\", \"a3\"));\n        \n        assertEquals(\"c1\", configurer.getMappingService().get(\"m4\", \"d1\"));\n        assertEquals(\"c2\", configurer.getMappingService().get(\"m5\", \"d2\"));\n        assertEquals(\"c3\", configurer.getMappingService().get(\"m6\", \"d3\"));\n    }", "signature": "void testMappings()", "full_signature": "@Test public void testMappings()", "class_method_signature": "CustomMappingsConfigurerTest.testMappings()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "getMappingService", "assertEquals", "get", "getMappingService", "assertEquals", "get", "getMappingService", "assertEquals", "get", "getMappingService", "assertEquals", "get", "getMappingService", "assertEquals", "get", "getMappingService"]}, "focal_class": {"identifier": "CustomMappingsConfigurer", "superclass": "extends OrderedConfigurer<CustomMappings, R>", "interfaces": "", "fields": [{"original_string": "private BidiMappingService mappingService;", "modifier": "private", "type": "BidiMappingService", "declarator": "mappingService", "var_name": "mappingService"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CustomMappingsConfigurer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CustomMappingsConfigurer.class)", "var_name": "LOG"}], "methods": [{"identifier": "lookup", "parameters": "(Registry registry)", "modifiers": "@Override public", "return": "Collection<CustomMappings>", "signature": "Collection<CustomMappings> lookup(Registry registry)", "full_signature": "@Override public Collection<CustomMappings> lookup(Registry registry)", "class_method_signature": "CustomMappingsConfigurer.lookup(Registry registry)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(CustomMappings configuration)", "modifiers": "@Override public", "return": "void", "signature": "void configure(CustomMappings configuration)", "full_signature": "@Override public void configure(CustomMappings configuration)", "class_method_signature": "CustomMappingsConfigurer.configure(CustomMappings configuration)", "testcase": false, "constructor": false}, {"identifier": "getMappingService", "parameters": "()", "modifiers": "public", "return": "BidiMappingService", "signature": "BidiMappingService getMappingService()", "full_signature": "public BidiMappingService getMappingService()", "class_method_signature": "CustomMappingsConfigurer.getMappingService()", "testcase": false, "constructor": false}, {"identifier": "setMappingService", "parameters": "(BidiMappingService mappingService)", "modifiers": "public", "return": "void", "signature": "void setMappingService(BidiMappingService mappingService)", "full_signature": "public void setMappingService(BidiMappingService mappingService)", "class_method_signature": "CustomMappingsConfigurer.setMappingService(BidiMappingService mappingService)", "testcase": false, "constructor": false}], "file": "commons/map/src/main/java/org/openehealth/ipf/commons/map/config/CustomMappingsConfigurer.java"}, "focal_method": {"identifier": "getMappingService", "parameters": "()", "modifiers": "public", "return": "BidiMappingService", "body": "public BidiMappingService getMappingService() {\n        return mappingService;\n    }", "signature": "BidiMappingService getMappingService()", "full_signature": "public BidiMappingService getMappingService()", "class_method_signature": "CustomMappingsConfigurer.getMappingService()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}