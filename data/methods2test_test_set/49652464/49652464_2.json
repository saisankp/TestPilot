{"test_class": {"identifier": "EncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "analyzer-core/src/test/java/com/galerieslafayette/analyzer/EncoderTest.java"}, "test_case": {"identifier": "testSubstringStartIndexGreaterThanLengthExpectedNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubstringStartIndexGreaterThanLengthExpectedNull() throws Exception {\n        Encoder encoder = new Encoder();\n        String result = encoder.substring(\"E\", 2, 4);\n        Assertions.assertThat(result).isEmpty();\n    }", "signature": "void testSubstringStartIndexGreaterThanLengthExpectedNull()", "full_signature": "@Test public void testSubstringStartIndexGreaterThanLengthExpectedNull()", "class_method_signature": "EncoderTest.testSubstringStartIndexGreaterThanLengthExpectedNull()", "testcase": true, "constructor": false, "invocations": ["substring", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "Encoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<Character> VOWELS = Arrays.asList('A', 'E', '2', 'I', 'O', 'U', 'Y');", "modifier": "private static final", "type": "List<Character>", "declarator": "VOWELS = Arrays.asList('A', 'E', '2', 'I', 'O', 'U', 'Y')", "var_name": "VOWELS"}, {"original_string": "private static final List<Character> MUTED_ENDED_CONSONANT = Arrays.asList('C', 'D', 'H', 'G', 'P', 'S', 'T', 'X', 'Z');", "modifier": "private static final", "type": "List<Character>", "declarator": "MUTED_ENDED_CONSONANT = Arrays.asList('C', 'D', 'H', 'G', 'P', 'S', 'T', 'X', 'Z')", "var_name": "MUTED_ENDED_CONSONANT"}, {"original_string": "private static final List<Character> NOT_ALWAYS_MUTED_ENDED_CONSONANT = Arrays.asList('C', 'D', 'G', 'P', 'S', 'X', 'Z');", "modifier": "private static final", "type": "List<Character>", "declarator": "NOT_ALWAYS_MUTED_ENDED_CONSONANT = Arrays.asList('C', 'D', 'G', 'P', 'S', 'X', 'Z')", "var_name": "NOT_ALWAYS_MUTED_ENDED_CONSONANT"}, {"original_string": "private static final List<Character> MUTED_S_PRECEDING_VOWEL = Arrays.asList('A', 'O');", "modifier": "private static final", "type": "List<Character>", "declarator": "MUTED_S_PRECEDING_VOWEL = Arrays.asList('A', 'O')", "var_name": "MUTED_S_PRECEDING_VOWEL"}, {"original_string": "private static final List<Character> MUTED_S_FOLLOWING_CONSONANT = Arrays.asList('B', 'J', 'M');", "modifier": "private static final", "type": "List<Character>", "declarator": "MUTED_S_FOLLOWING_CONSONANT = Arrays.asList('B', 'J', 'M')", "var_name": "MUTED_S_FOLLOWING_CONSONANT"}, {"original_string": "private static final List<Character> DOUBLE_CONSONANT = Arrays.asList('C', 'P', 'R', 'T', 'Z', 'N', 'M', 'G', 'L', 'F');", "modifier": "private static final", "type": "List<Character>", "declarator": "DOUBLE_CONSONANT = Arrays.asList('C', 'P', 'R', 'T', 'Z', 'N', 'M', 'G', 'L', 'F')", "var_name": "DOUBLE_CONSONANT"}, {"original_string": "public static final List<Character> SOUND_2_ACCENTUATED_CHARS = Arrays.asList('\u00c9', '\u00c8', '\u00ca', '\u00cb');", "modifier": "public static final", "type": "List<Character>", "declarator": "SOUND_2_ACCENTUATED_CHARS = Arrays.asList('\u00c9', '\u00c8', '\u00ca', '\u00cb');", "var_name": "SOUND_2_ACCENTUATED_CHARS"}], "methods": [{"identifier": "getSet", "parameters": "(String value)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> getSet(String value)", "full_signature": "private static Set<String> getSet(String value)", "class_method_signature": "Encoder.getSet(String value)", "testcase": false, "constructor": false}, {"identifier": "operatePhonetic", "parameters": "(String acc, Character c, String tail)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> operatePhonetic(String acc, Character c, String tail)", "full_signature": "public static Set<String> operatePhonetic(String acc, Character c, String tail)", "class_method_signature": "Encoder.operatePhonetic(String acc, Character c, String tail)", "testcase": false, "constructor": false}, {"identifier": "isDoubleConsonnant", "parameters": "(Character c, String tail)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDoubleConsonnant(Character c, String tail)", "full_signature": "private static boolean isDoubleConsonnant(Character c, String tail)", "class_method_signature": "Encoder.isDoubleConsonnant(Character c, String tail)", "testcase": false, "constructor": false}, {"identifier": "replaceTwoLettersSounds", "parameters": "(String acc, char c, String tail)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> replaceTwoLettersSounds(String acc, char c, String tail)", "full_signature": "private static Set<String> replaceTwoLettersSounds(String acc, char c, String tail)", "class_method_signature": "Encoder.replaceTwoLettersSounds(String acc, char c, String tail)", "testcase": false, "constructor": false}, {"identifier": "handleJEANSpecialCase", "parameters": "(String acc, char c, String tail)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> handleJEANSpecialCase(String acc, char c, String tail)", "full_signature": "private static Set<String> handleJEANSpecialCase(String acc, char c, String tail)", "class_method_signature": "Encoder.handleJEANSpecialCase(String acc, char c, String tail)", "testcase": false, "constructor": false}, {"identifier": "replaceAISounds", "parameters": "(String acc, char c, String tail, Character... firstLetters)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> replaceAISounds(String acc, char c, String tail, Character... firstLetters)", "full_signature": "private static Set<String> replaceAISounds(String acc, char c, String tail, Character... firstLetters)", "class_method_signature": "Encoder.replaceAISounds(String acc, char c, String tail, Character... firstLetters)", "testcase": false, "constructor": false}, {"identifier": "replaceThreeLettersINSound", "parameters": "(String acc, char c, String tail, Character... firstLetters)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> replaceThreeLettersINSound(String acc, char c, String tail, Character... firstLetters)", "full_signature": "private static Set<String> replaceThreeLettersINSound(String acc, char c, String tail, Character... firstLetters)", "class_method_signature": "Encoder.replaceThreeLettersINSound(String acc, char c, String tail, Character... firstLetters)", "testcase": false, "constructor": false}, {"identifier": "replaceONOrINOrANSound", "parameters": "(String acc, char c, String tail, String replaceValue, Character... firstLetters)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> replaceONOrINOrANSound(String acc, char c, String tail, String replaceValue, Character... firstLetters)", "full_signature": "private static Set<String> replaceONOrINOrANSound(String acc, char c, String tail, String replaceValue, Character... firstLetters)", "class_method_signature": "Encoder.replaceONOrINOrANSound(String acc, char c, String tail, String replaceValue, Character... firstLetters)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(String tail, int startIndex, int endIndex)", "modifiers": "public static", "return": "String", "signature": "String substring(String tail, int startIndex, int endIndex)", "full_signature": "public static String substring(String tail, int startIndex, int endIndex)", "class_method_signature": "Encoder.substring(String tail, int startIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(String tail, int position)", "modifiers": "public static", "return": "Character", "signature": "Character charAt(String tail, int position)", "full_signature": "public static Character charAt(String tail, int position)", "class_method_signature": "Encoder.charAt(String tail, int position)", "testcase": false, "constructor": false}], "file": "analyzer-core/src/main/java/com/galerieslafayette/analyzer/Encoder.java"}, "focal_method": {"identifier": "substring", "parameters": "(String tail, int startIndex, int endIndex)", "modifiers": "public static", "return": "String", "body": "public static String substring(String tail, int startIndex, int endIndex) {\n        if (tail == null) {\n            return \"\";\n        }\n        if (tail.length() <= startIndex) {\n            return \"\";\n        } else {\n            if (endIndex > tail.length() - 1) {\n                return tail.substring(startIndex, tail.length());\n            } else {\n                return tail.substring(startIndex, endIndex);\n            }\n        }\n    }", "signature": "String substring(String tail, int startIndex, int endIndex)", "full_signature": "public static String substring(String tail, int startIndex, int endIndex)", "class_method_signature": "Encoder.substring(String tail, int startIndex, int endIndex)", "testcase": false, "constructor": false, "invocations": ["length", "length", "substring", "length", "substring"]}, "repository": {"repo_id": 49652464, "url": "https://github.com/hcapitaine/french-phonetic-analyser", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 474, "license": "licensed"}}