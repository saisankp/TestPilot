{"test_class": {"identifier": "DefaultDocumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate PrintConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "PrintConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate PrintDtoConverterService printDtoService;", "modifier": "@Autowired\n\tprivate", "type": "PrintDtoConverterService", "declarator": "printDtoService", "var_name": "printDtoService"}, {"original_string": "@Autowired\n\tprivate PrintService printService;", "modifier": "@Autowired\n\tprivate", "type": "PrintService", "declarator": "printService", "var_name": "printService"}, {"original_string": "@Autowired\n\tprivate SecurityManager securityManager;", "modifier": "@Autowired\n\tprivate", "type": "SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}], "file": "plugin/print/print/src/test/java/org/geomajas/plugin/printing/document/DefaultDocumentTest.java"}, "test_case": {"identifier": "testRenderLegend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRenderLegend() throws Exception {\n\t\tLegendComponentInfo legend = new LegendComponentInfo();\n\t\tFontStyleInfo style = new FontStyleInfo();\n\t\tstyle.setFamily(\"Dialog\");\n\t\tstyle.setStyle(\"Italic\");\n\t\tstyle.setSize(12);\n\t\tlegend.setFont(style);\n\t\tlegend.setMapId(\"mainMap\");\n\t\tlegend.setTag(\"legend\");\n\t\tlegend.setTitle(\"legend\");\n\t\tfor (ClientLayerInfo layer : configurationService.getMapInfo(\"mainMap\", \"application\").getLayers()) {\n\t\t\tif (layer instanceof ClientVectorLayerInfo) {\n\t\t\t\tClientVectorLayerInfo layerInfo = (ClientVectorLayerInfo) layer;\n\t\t\t\tString label = layerInfo.getLabel();\n\t\t\t\tList<FeatureStyleInfo> defs = layerInfo.getNamedStyleInfo().getFeatureStyles();\n\t\t\t\tfor (FeatureStyleInfo styleDefinition : defs) {\n\t\t\t\t\tString text = \"\";\n\t\t\t\t\tif (defs.size() > 1) {\n\t\t\t\t\t\ttext = label + \"(\" + styleDefinition.getName() + \")\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = label;\n\t\t\t\t\t}\n\t\t\t\t\tLegendItemComponentInfo item = new LegendItemComponentInfo();\n\t\t\t\t\tLegendIconComponentInfo icon = new LegendIconComponentInfo();\n\t\t\t\t\ticon.setLabel(text);\n\t\t\t\t\ticon.setStyleInfo(styleDefinition);\n\t\t\t\t\ticon.setLayerType(layerInfo.getLayerType());\n\t\t\t\t\tLabelComponentInfo legendLabel = new LabelComponentInfo();\n\t\t\t\t\tlegendLabel.setBackgroundColor(\"0xFFFFFF\");\n\t\t\t\t\tlegendLabel.setBorderColor(\"0x000000\");\n\t\t\t\t\tlegendLabel.setFontColor(\"0x000000\");\n\t\t\t\t\tlegendLabel.setFont(legend.getFont());\n\t\t\t\t\tlegendLabel.setText(text);\n\t\t\t\t\tlegendLabel.setTextOnly(true);\n\t\t\t\t\titem.addChild(icon);\n\t\t\t\t\titem.addChild(legendLabel);\n\t\t\t\t\tlegend.addChild(item);\n\t\t\t\t}\n\t\t\t} else if (layer instanceof ClientRasterLayerInfo) {\n\t\t\t\tClientRasterLayerInfo layerInfo = (ClientRasterLayerInfo) layer;\n\t\t\t\tLegendItemComponentInfo item = new LegendItemComponentInfo();\n\t\t\t\tLegendIconComponentInfo icon = new LegendIconComponentInfo();\n\t\t\t\ticon.setLabel(layerInfo.getLabel());\n\t\t\t\ticon.setLayerType(layerInfo.getLayerType());\n\t\t\t\tLabelComponentInfo legendLabel = new LabelComponentInfo();\n\t\t\t\tlegendLabel.setFont(legend.getFont());\n\t\t\t\tlegendLabel.setBackgroundColor(\"0xFFFFFF\");\n\t\t\t\tlegendLabel.setBorderColor(\"black\");\n\t\t\t\tlegendLabel.setFontColor(\"0x000000\");\n\t\t\t\tlegendLabel.setText(layerInfo.getLabel());\n\t\t\t\tlegendLabel.setTextOnly(true);\n\t\t\t\titem.addChild(icon);\n\t\t\t\titem.addChild(legendLabel);\n\t\t\t\tlegend.addChild(item);\n\t\t\t}\n\t\t}\n\t\tLegendComponent comp = (LegendComponent) printDtoService.toInternal(legend);\n\t\tPageComponentImpl page = new PageComponentImpl();\n\t\tpage.setSize(\"0 0\", false);\n\t\tpage.addComponent(comp);\n\t\tPrintTemplate template = new PrintTemplate();\n\t\ttemplate.setPage(page);\n\t\tSinglePageDocument pdfDoc = new SinglePageDocument(page, null);\n\t\tFileOutputStream fo = new FileOutputStream(\"target/legend.png\");\n\t\tpdfDoc.render(fo, Format.PNG, 200);\n\t\tfo.flush();\n\t\tfo.close();\n\t}", "signature": "void testRenderLegend()", "full_signature": "@Test public void testRenderLegend()", "class_method_signature": "DefaultDocumentTest.testRenderLegend()", "testcase": true, "constructor": false, "invocations": ["setFamily", "setStyle", "setSize", "setFont", "setMapId", "setTag", "setTitle", "getLayers", "getMapInfo", "getLabel", "getFeatureStyles", "getNamedStyleInfo", "size", "getName", "setLabel", "setStyleInfo", "setLayerType", "getLayerType", "setBackgroundColor", "setBorderColor", "setFontColor", "setFont", "getFont", "setText", "setTextOnly", "addChild", "addChild", "addChild", "setLabel", "getLabel", "setLayerType", "getLayerType", "setFont", "getFont", "setBackgroundColor", "setBorderColor", "setFontColor", "setText", "getLabel", "setTextOnly", "addChild", "addChild", "addChild", "toInternal", "setSize", "addComponent", "setPage", "render", "flush", "close"]}, "focal_class": {"identifier": "DefaultDocument", "superclass": "extends SinglePageDocument", "interfaces": "", "fields": [{"original_string": "private DefaultConfigurationVisitor defaultVisitor;", "modifier": "private", "type": "DefaultConfigurationVisitor", "declarator": "defaultVisitor", "var_name": "defaultVisitor"}, {"original_string": "private MapConfigurationVisitor visitor;", "modifier": "private", "type": "MapConfigurationVisitor", "declarator": "visitor", "var_name": "visitor"}], "methods": [{"identifier": "DefaultDocument", "parameters": "(PrintTemplate template, Map<String, String> filters,\n\t\t\tDefaultConfigurationVisitor defaultVisitor, MapConfigurationVisitor visitor)", "modifiers": "public", "return": "", "signature": " DefaultDocument(PrintTemplate template, Map<String, String> filters,\n\t\t\tDefaultConfigurationVisitor defaultVisitor, MapConfigurationVisitor visitor)", "full_signature": "public  DefaultDocument(PrintTemplate template, Map<String, String> filters,\n\t\t\tDefaultConfigurationVisitor defaultVisitor, MapConfigurationVisitor visitor)", "class_method_signature": "DefaultDocument.DefaultDocument(PrintTemplate template, Map<String, String> filters,\n\t\t\tDefaultConfigurationVisitor defaultVisitor, MapConfigurationVisitor visitor)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(OutputStream outputStream, Format format, int dpi)", "modifiers": "@Override public", "return": "void", "signature": "void render(OutputStream outputStream, Format format, int dpi)", "full_signature": "@Override public void render(OutputStream outputStream, Format format, int dpi)", "class_method_signature": "DefaultDocument.render(OutputStream outputStream, Format format, int dpi)", "testcase": false, "constructor": false}], "file": "plugin/print/print/src/main/java/org/geomajas/plugin/printing/document/DefaultDocument.java"}, "focal_method": {"identifier": "render", "parameters": "(OutputStream outputStream, Format format, int dpi)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void render(OutputStream outputStream, Format format, int dpi) throws PrintingException {\n\t\tdefaultVisitor.visitTree(getPage());\n\t\tvisitor.visitTree(getPage());\n\t\tsuper.render(outputStream, format, dpi);\n\t}", "signature": "void render(OutputStream outputStream, Format format, int dpi)", "full_signature": "@Override public void render(OutputStream outputStream, Format format, int dpi)", "class_method_signature": "DefaultDocument.render(OutputStream outputStream, Format format, int dpi)", "testcase": false, "constructor": false, "invocations": ["visitTree", "getPage", "visitTree", "getPage", "render"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}