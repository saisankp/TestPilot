{"test_class": {"identifier": "ReplaceTextTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/text/ReplaceTextTest.java"}, "test_case": {"identifier": "fileDoesNotExistTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fileDoesNotExistTest() {\n        ReplaceText replaceText = new ReplaceText(\"foo\").relative(\"/src/main/resources/application_zeta.properties\");\n        TOExecutionResult executionResult = replaceText.execution(transformedAppFolder, transformationContext);\n        assertEquals(executionResult.getType(), TOExecutionResult.Type.ERROR);\n        assertEquals(executionResult.getException().getClass(), TransformationOperationException.class);\n        assertEquals(executionResult.getException().getMessage(), \"Could not replace text\");\n        assertEquals(executionResult.getException().getCause().getClass(), FileNotFoundException.class);\n        assertEquals(executionResult.getException().getCause().getMessage(), new File(transformedAppFolder, \"/src/main/resources/application_zeta.properties\").getAbsolutePath() + \" (No such file or directory)\");\n    }", "signature": "void fileDoesNotExistTest()", "full_signature": "@Test public void fileDoesNotExistTest()", "class_method_signature": "ReplaceTextTest.fileDoesNotExistTest()", "testcase": true, "constructor": false, "invocations": ["relative", "execution", "assertEquals", "getType", "assertEquals", "getClass", "getException", "assertEquals", "getMessage", "getException", "assertEquals", "getClass", "getCause", "getException", "assertEquals", "getMessage", "getCause", "getException", "getAbsolutePath"]}, "focal_class": {"identifier": "ReplaceText", "superclass": "extends TransformationOperation<ReplaceText>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Replace text in %s based on regular expression %s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Replace text in %s based on regular expression %s\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final boolean FIRST_ONLY_DEFAULT_VALUE = true;", "modifier": "private static final", "type": "boolean", "declarator": "FIRST_ONLY_DEFAULT_VALUE = true", "var_name": "FIRST_ONLY_DEFAULT_VALUE"}, {"original_string": "private String regex;", "modifier": "private", "type": "String", "declarator": "regex", "var_name": "regex"}, {"original_string": "private String replacement;", "modifier": "private", "type": "String", "declarator": "replacement", "var_name": "replacement"}, {"original_string": "private boolean firstOnly = FIRST_ONLY_DEFAULT_VALUE;", "modifier": "private", "type": "boolean", "declarator": "firstOnly = FIRST_ONLY_DEFAULT_VALUE", "var_name": "firstOnly"}], "methods": [{"identifier": "ReplaceText", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReplaceText()", "full_signature": "public  ReplaceText()", "class_method_signature": "ReplaceText.ReplaceText()", "testcase": false, "constructor": true}, {"identifier": "ReplaceText", "parameters": "(String regex)", "modifiers": "public", "return": "", "signature": " ReplaceText(String regex)", "full_signature": "public  ReplaceText(String regex)", "class_method_signature": "ReplaceText.ReplaceText(String regex)", "testcase": false, "constructor": true}, {"identifier": "ReplaceText", "parameters": "(String regex, String replacement)", "modifiers": "public", "return": "", "signature": " ReplaceText(String regex, String replacement)", "full_signature": "public  ReplaceText(String regex, String replacement)", "class_method_signature": "ReplaceText.ReplaceText(String regex, String replacement)", "testcase": false, "constructor": true}, {"identifier": "setRegex", "parameters": "(String regex)", "modifiers": "public", "return": "ReplaceText", "signature": "ReplaceText setRegex(String regex)", "full_signature": "public ReplaceText setRegex(String regex)", "class_method_signature": "ReplaceText.setRegex(String regex)", "testcase": false, "constructor": false}, {"identifier": "setReplacement", "parameters": "(String replacement)", "modifiers": "public", "return": "ReplaceText", "signature": "ReplaceText setReplacement(String replacement)", "full_signature": "public ReplaceText setReplacement(String replacement)", "class_method_signature": "ReplaceText.setReplacement(String replacement)", "testcase": false, "constructor": false}, {"identifier": "setFirstOnly", "parameters": "(boolean firstOnly)", "modifiers": "public", "return": "ReplaceText", "signature": "ReplaceText setFirstOnly(boolean firstOnly)", "full_signature": "public ReplaceText setFirstOnly(boolean firstOnly)", "class_method_signature": "ReplaceText.setFirstOnly(boolean firstOnly)", "testcase": false, "constructor": false}, {"identifier": "getRegex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRegex()", "full_signature": "public String getRegex()", "class_method_signature": "ReplaceText.getRegex()", "testcase": false, "constructor": false}, {"identifier": "getReplacement", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReplacement()", "full_signature": "public String getReplacement()", "class_method_signature": "ReplaceText.getReplacement()", "testcase": false, "constructor": false}, {"identifier": "isFirstOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFirstOnly()", "full_signature": "public boolean isFirstOnly()", "class_method_signature": "ReplaceText.isFirstOnly()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "ReplaceText.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "ReplaceText.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(BufferedReader reader, BufferedWriter writer)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult replace(BufferedReader reader, BufferedWriter writer)", "full_signature": "private TOExecutionResult replace(BufferedReader reader, BufferedWriter writer)", "class_method_signature": "ReplaceText.replace(BufferedReader reader, BufferedWriter writer)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/text/ReplaceText.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected", "return": "TOExecutionResult", "body": "@Override\n    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\")\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        File fileToBeChanged = getAbsoluteFile(transformedAppFolder, transformationContext);\n\n        if (!fileToBeChanged.exists()) {\n            // TODO Should this be done as pre-validation?\n            FileNotFoundException ex = new FileNotFoundException(fileToBeChanged.getAbsolutePath() + \" (No such file or directory)\");\n            TransformationOperationException toex = new TransformationOperationException(\"Could not replace text\", ex);\n            return TOExecutionResult.error(this, toex);\n        }\n\n        BufferedReader reader = null;\n        BufferedWriter writer = null;\n        TOExecutionResult result = null;\n\n        try {\n            File readFile = getOrCreateReadFile(transformedAppFolder, transformationContext);\n            reader = new BufferedReader(new InputStreamReader(new FileInputStream(readFile), StandardCharsets.UTF_8));\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToBeChanged), StandardCharsets.UTF_8));\n            result = replace(reader, writer);\n        } catch (IOException e) {\n            result = TOExecutionResult.error(this,  new TransformationOperationException(\"Could not replace text\", e));\n        } finally {\n            try {\n                if (writer != null) try {\n                    writer.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                }\n            } finally {\n                if(reader != null) try {\n                    reader.close();\n                } catch (IOException e) {\n                    result.addWarning(e);\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings (value=\"NP_ALWAYS_NULL_EXCEPTION\") protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "ReplaceText.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["getAbsoluteFile", "exists", "getAbsolutePath", "error", "getOrCreateReadFile", "replace", "error", "close", "addWarning", "close", "addWarning"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}