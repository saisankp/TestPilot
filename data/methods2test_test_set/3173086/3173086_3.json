{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/de/koelle/christian/common/utils/NumberUtilsTest.java"}, "test_case": {"identifier": "testDegugging", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDegugging() {\n        Assert.assertEquals(Double.valueOf(46.67d), Double.valueOf(0d + 46.67d));\n        Assert.assertEquals(Double.valueOf(46.67d), Double.valueOf(Math.abs(0d + 46.67d)));\n        Assert.assertEquals(Double.valueOf(46.67d), Double.valueOf(Math.abs(46.67d + 0d)));\n        Assert.assertEquals(Double.valueOf(25.32d), Double.valueOf(NumberUtils.round(46.67d + -21.35d)));\n    }", "signature": "void testDegugging()", "full_signature": "@Test public void testDegugging()", "class_method_signature": "NumberUtilsTest.testDegugging()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "valueOf", "assertEquals", "valueOf", "valueOf", "abs", "assertEquals", "valueOf", "valueOf", "abs", "assertEquals", "valueOf", "valueOf", "round"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SCALE = 2;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SCALE = 2", "var_name": "DEFAULT_SCALE"}, {"original_string": "private static final Double EXCHANGE_RATE_MAX = 9999999999.999;", "modifier": "private static final", "type": "Double", "declarator": "EXCHANGE_RATE_MAX = 9999999999.999", "var_name": "EXCHANGE_RATE_MAX"}, {"original_string": "private static final Double EXCHANGE_RATE_MIN = 0.0000000001;", "modifier": "private static final", "type": "Double", "declarator": "EXCHANGE_RATE_MIN = 0.0000000001", "var_name": "EXCHANGE_RATE_MIN"}, {"original_string": "private static final Double AMOUNT_MAX = 9999999999.99;", "modifier": "private static final", "type": "Double", "declarator": "AMOUNT_MAX = 9999999999.99", "var_name": "AMOUNT_MAX"}, {"original_string": "private static final Double AMOUNT_MIN = 0.01;", "modifier": "private static final", "type": "Double", "declarator": "AMOUNT_MIN = 0.01", "var_name": "AMOUNT_MIN"}], "methods": [{"identifier": "neg", "parameters": "(Double value)", "modifiers": "public static", "return": "Double", "signature": "Double neg(Double value)", "full_signature": "public static Double neg(Double value)", "class_method_signature": "NumberUtils.neg(Double value)", "testcase": false, "constructor": false}, {"identifier": "getStringToDoubleNonRounded", "parameters": "(Locale locale,\n                                                     String stringToBeParsed)", "modifiers": "public static", "return": "Double", "signature": "Double getStringToDoubleNonRounded(Locale locale,\n                                                     String stringToBeParsed)", "full_signature": "public static Double getStringToDoubleNonRounded(Locale locale,\n                                                     String stringToBeParsed)", "class_method_signature": "NumberUtils.getStringToDoubleNonRounded(Locale locale,\n                                                     String stringToBeParsed)", "testcase": false, "constructor": false}, {"identifier": "getStringToDoubleRounded", "parameters": "(Locale locale,\n            String stringToBeParsed)", "modifiers": "public static", "return": "Double", "signature": "Double getStringToDoubleRounded(Locale locale,\n            String stringToBeParsed)", "full_signature": "public static Double getStringToDoubleRounded(Locale locale,\n            String stringToBeParsed)", "class_method_signature": "NumberUtils.getStringToDoubleRounded(Locale locale,\n            String stringToBeParsed)", "testcase": false, "constructor": false}, {"identifier": "getStringToDouble", "parameters": "(Locale locale,\n            String stringToBeParsed, boolean doRound)", "modifiers": "private static", "return": "Double", "signature": "Double getStringToDouble(Locale locale,\n            String stringToBeParsed, boolean doRound)", "full_signature": "private static Double getStringToDouble(Locale locale,\n            String stringToBeParsed, boolean doRound)", "class_method_signature": "NumberUtils.getStringToDouble(Locale locale,\n            String stringToBeParsed, boolean doRound)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Double dividend, Integer divisor)", "modifiers": "public static", "return": "Double", "signature": "Double divide(Double dividend, Integer divisor)", "full_signature": "public static Double divide(Double dividend, Integer divisor)", "class_method_signature": "NumberUtils.divide(Double dividend, Integer divisor)", "testcase": false, "constructor": false}, {"identifier": "divideWithLoss", "parameters": "(Double dividend,\n            Integer divisor, boolean resultToBeNegative)", "modifiers": "public static", "return": "DivisionResult", "signature": "DivisionResult divideWithLoss(Double dividend,\n            Integer divisor, boolean resultToBeNegative)", "full_signature": "public static DivisionResult divideWithLoss(Double dividend,\n            Integer divisor, boolean resultToBeNegative)", "class_method_signature": "NumberUtils.divideWithLoss(Double dividend,\n            Integer divisor, boolean resultToBeNegative)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Double factorA, Integer factorB)", "modifiers": "public static", "return": "Double", "signature": "Double multiply(Double factorA, Integer factorB)", "full_signature": "public static Double multiply(Double factorA, Integer factorB)", "class_method_signature": "NumberUtils.multiply(Double factorA, Integer factorB)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Double factorA, Double factorB)", "modifiers": "public static", "return": "Double", "signature": "Double multiply(Double factorA, Double factorB)", "full_signature": "public static Double multiply(Double factorA, Double factorB)", "class_method_signature": "NumberUtils.multiply(Double factorA, Double factorB)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Double dividend, Double divisor)", "modifiers": "public static", "return": "Double", "signature": "Double divide(Double dividend, Double divisor)", "full_signature": "public static Double divide(Double dividend, Double divisor)", "class_method_signature": "NumberUtils.divide(Double dividend, Double divisor)", "testcase": false, "constructor": false}, {"identifier": "divideForExchangeRates", "parameters": "(Double dividend, Double divisor)", "modifiers": "public static", "return": "Double", "signature": "Double divideForExchangeRates(Double dividend, Double divisor)", "full_signature": "public static Double divideForExchangeRates(Double dividend, Double divisor)", "class_method_signature": "NumberUtils.divideForExchangeRates(Double dividend, Double divisor)", "testcase": false, "constructor": false}, {"identifier": "ensureExchangeRateMinMax", "parameters": "(Double double1)", "modifiers": "public static", "return": "Double", "signature": "Double ensureExchangeRateMinMax(Double double1)", "full_signature": "public static Double ensureExchangeRateMinMax(Double double1)", "class_method_signature": "NumberUtils.ensureExchangeRateMinMax(Double double1)", "testcase": false, "constructor": false}, {"identifier": "ensureAmountMinMax", "parameters": "(Double double1)", "modifiers": "public static", "return": "Double", "signature": "Double ensureAmountMinMax(Double double1)", "full_signature": "public static Double ensureAmountMinMax(Double double1)", "class_method_signature": "NumberUtils.ensureAmountMinMax(Double double1)", "testcase": false, "constructor": false}, {"identifier": "isExceedingAmountLimit", "parameters": "(Double double1)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExceedingAmountLimit(Double double1)", "full_signature": "public static boolean isExceedingAmountLimit(Double double1)", "class_method_signature": "NumberUtils.isExceedingAmountLimit(Double double1)", "testcase": false, "constructor": false}, {"identifier": "invertExchangeRateDouble", "parameters": "(Double exchangeRate)", "modifiers": "public static", "return": "Double", "signature": "Double invertExchangeRateDouble(Double exchangeRate)", "full_signature": "public static Double invertExchangeRateDouble(Double exchangeRate)", "class_method_signature": "NumberUtils.invertExchangeRateDouble(Double exchangeRate)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(Double dividend, Double divisor, int scale)", "modifiers": "public static", "return": "Double", "signature": "Double divide(Double dividend, Double divisor, int scale)", "full_signature": "public static Double divide(Double dividend, Double divisor, int scale)", "class_method_signature": "NumberUtils.divide(Double dividend, Double divisor, int scale)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double nonRounded)", "modifiers": "public static", "return": "double", "signature": "double round(double nonRounded)", "full_signature": "public static double round(double nonRounded)", "class_method_signature": "NumberUtils.round(double nonRounded)", "testcase": false, "constructor": false}], "file": "app/src/main/java/de/koelle/christian/common/utils/NumberUtils.java"}, "focal_method": {"identifier": "round", "parameters": "(double nonRounded)", "modifiers": "public static", "return": "double", "body": "public static double round(double nonRounded) {\n        return ((double) (Math.round(nonRounded * 100))) / 100;\n    }", "signature": "double round(double nonRounded)", "full_signature": "public static double round(double nonRounded)", "class_method_signature": "NumberUtils.round(double nonRounded)", "testcase": false, "constructor": false, "invocations": ["round"]}, "repository": {"repo_id": 3173086, "url": "https://github.com/koelleChristian/trickytripper", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 41, "size": 30533, "license": "licensed"}}