{"test_class": {"identifier": "TestConfigManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DynamicConfigBuilder _configBuilder;", "modifier": "private", "type": "DynamicConfigBuilder", "declarator": "_configBuilder", "var_name": "_configBuilder"}, {"original_string": "private MyConfigManager _configManager;", "modifier": "private", "type": "MyConfigManager", "declarator": "_configManager", "var_name": "_configManager"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/util/TestConfigManager.java"}, "test_case": {"identifier": "testInvalidNestedProperty1", "parameters": "()", "modifiers": "@Test(expectedExceptions=InvalidConfigException.class) public", "return": "void", "body": "@Test(expectedExceptions=InvalidConfigException.class)\n  public void testInvalidNestedProperty1() throws InvalidConfigException\n  {\n    Properties props = new Properties();\n    props.setProperty(\"com.linkedin.databus2.nestedConfig.inSetting\", \"1\");\n    _configManager.loadConfig(props);\n  }", "signature": "void testInvalidNestedProperty1()", "full_signature": "@Test(expectedExceptions=InvalidConfigException.class) public void testInvalidNestedProperty1()", "class_method_signature": "TestConfigManager.testInvalidNestedProperty1()", "testcase": true, "constructor": false, "invocations": ["setProperty", "loadConfig"]}, "focal_class": {"identifier": "ConfigManager", "superclass": "extends ConfigLoader<D>", "interfaces": "", "fields": [{"original_string": "public final static String MODULE = ConfigManager.class.getName();", "modifier": "public final static", "type": "String", "declarator": "MODULE = ConfigManager.class.getName()", "var_name": "MODULE"}, {"original_string": "public final static Logger LOG = Logger.getLogger(MODULE);", "modifier": "public final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "private D _readonlyConfig;", "modifier": "private", "type": "D", "declarator": "_readonlyConfig", "var_name": "_readonlyConfig"}], "methods": [{"identifier": "ConfigManager", "parameters": "(String propPrefix, ConfigBuilder<D> dynConfigBuilder)", "modifiers": "public", "return": "", "signature": " ConfigManager(String propPrefix, ConfigBuilder<D> dynConfigBuilder)", "full_signature": "public  ConfigManager(String propPrefix, ConfigBuilder<D> dynConfigBuilder)", "class_method_signature": "ConfigManager.ConfigManager(String propPrefix, ConfigBuilder<D> dynConfigBuilder)", "testcase": false, "constructor": true}, {"identifier": "loadConfig", "parameters": "(Map<?, ?> props)", "modifiers": "@Override public", "return": "D", "signature": "D loadConfig(Map<?, ?> props)", "full_signature": "@Override public D loadConfig(Map<?, ?> props)", "class_method_signature": "ConfigManager.loadConfig(Map<?, ?> props)", "testcase": false, "constructor": false}, {"identifier": "setSetting", "parameters": "(String settingName, Object value)", "modifiers": "@Override public", "return": "D", "signature": "D setSetting(String settingName, Object value)", "full_signature": "@Override public D setSetting(String settingName, Object value)", "class_method_signature": "ConfigManager.setSetting(String settingName, Object value)", "testcase": false, "constructor": false}, {"identifier": "loadConfigFromJson", "parameters": "(Reader jsonReader)", "modifiers": "@Override public", "return": "D", "signature": "D loadConfigFromJson(Reader jsonReader)", "full_signature": "@Override public D loadConfigFromJson(Reader jsonReader)", "class_method_signature": "ConfigManager.loadConfigFromJson(Reader jsonReader)", "testcase": false, "constructor": false}, {"identifier": "getReadOnlyConfig", "parameters": "()", "modifiers": "public", "return": "D", "signature": "D getReadOnlyConfig()", "full_signature": "public D getReadOnlyConfig()", "class_method_signature": "ConfigManager.getReadOnlyConfig()", "testcase": false, "constructor": false}, {"identifier": "setNewConfig", "parameters": "(D newConfig)", "modifiers": "public", "return": "D", "signature": "D setNewConfig(D newConfig)", "full_signature": "public D setNewConfig(D newConfig)", "class_method_signature": "ConfigManager.setNewConfig(D newConfig)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/util/ConfigManager.java"}, "focal_method": {"identifier": "loadConfig", "parameters": "(Map<?, ?> props)", "modifiers": "@Override public", "return": "D", "body": "@Override\n  public D loadConfig(Map<?, ?> props) throws InvalidConfigException\n  {\n    D newConfig = super.loadConfig(props);\n\treturn setNewConfig(newConfig);\n  }", "signature": "D loadConfig(Map<?, ?> props)", "full_signature": "@Override public D loadConfig(Map<?, ?> props)", "class_method_signature": "ConfigManager.loadConfig(Map<?, ?> props)", "testcase": false, "constructor": false, "invocations": ["loadConfig", "setNewConfig"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}