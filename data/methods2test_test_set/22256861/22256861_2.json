{"test_class": {"identifier": "BrrOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-meris-sdr/src/test/java/org/esa/s3tbx/meris/brr/operator/BrrOpTest.java"}, "test_case": {"identifier": "testRhoSpectralIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRhoSpectralIndex() {\n\n        assertTrue(BrrOp.isValidRhoSpectralIndex(0));\n        assertFalse(BrrOp.isValidRhoSpectralIndex(10));\n        assertTrue(BrrOp.isValidRhoSpectralIndex(11));\n        assertFalse(BrrOp.isValidRhoSpectralIndex(14));\n\n        assertFalse(BrrOp.isValidRhoSpectralIndex(-1));\n        assertFalse(BrrOp.isValidRhoSpectralIndex(15));\n    }", "signature": "void testRhoSpectralIndex()", "full_signature": "@Test public void testRhoSpectralIndex()", "class_method_signature": "BrrOpTest.testRhoSpectralIndex()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isValidRhoSpectralIndex", "assertFalse", "isValidRhoSpectralIndex", "assertTrue", "isValidRhoSpectralIndex", "assertFalse", "isValidRhoSpectralIndex", "assertFalse", "isValidRhoSpectralIndex", "assertFalse", "isValidRhoSpectralIndex"]}, "focal_class": {"identifier": "BrrOp", "superclass": "extends BrrBasisOp", "interfaces": "", "fields": [{"original_string": "private static final float NODATA_VALUE = -1.0f;", "modifier": "private static final", "type": "float", "declarator": "NODATA_VALUE = -1.0f", "var_name": "NODATA_VALUE"}, {"original_string": "private RasterDataNode[] tpGrids;", "modifier": "private", "type": "RasterDataNode[]", "declarator": "tpGrids", "var_name": "tpGrids"}, {"original_string": "private RasterDataNode[] l1bRadiance;", "modifier": "private", "type": "RasterDataNode[]", "declarator": "l1bRadiance", "var_name": "l1bRadiance"}, {"original_string": "private RasterDataNode detectorIndex;", "modifier": "private", "type": "RasterDataNode", "declarator": "detectorIndex", "var_name": "detectorIndex"}, {"original_string": "private RasterDataNode l1bFlags;", "modifier": "private", "type": "RasterDataNode", "declarator": "l1bFlags", "var_name": "l1bFlags"}, {"original_string": "private final ThreadLocal<DpmPixel[]> frame = new ThreadLocal<DpmPixel[]>() {\n        @Override\n        protected DpmPixel[] initialValue() {\n            return new DpmPixel[0];\n        }\n    };", "modifier": "private final", "type": "ThreadLocal<DpmPixel[]>", "declarator": "frame = new ThreadLocal<DpmPixel[]>() {\n        @Override\n        protected DpmPixel[] initialValue() {\n            return new DpmPixel[0];\n        }\n    }", "var_name": "frame"}, {"original_string": "private final ThreadLocal<DpmPixel[][]> block = new ThreadLocal<DpmPixel[][]>() {\n        @Override\n        protected DpmPixel[][] initialValue() {\n            return new DpmPixel[0][0];\n        }\n    };", "modifier": "private final", "type": "ThreadLocal<DpmPixel[][]>", "declarator": "block = new ThreadLocal<DpmPixel[][]>() {\n        @Override\n        protected DpmPixel[][] initialValue() {\n            return new DpmPixel[0][0];\n        }\n    }", "var_name": "block"}, {"original_string": "protected Band[] brrReflecBands = new Band[Constants.L1_BAND_NUM];", "modifier": "protected", "type": "Band[]", "declarator": "brrReflecBands = new Band[Constants.L1_BAND_NUM]", "var_name": "brrReflecBands"}, {"original_string": "protected Band[] toaReflecBands = new Band[Constants.L1_BAND_NUM];", "modifier": "protected", "type": "Band[]", "declarator": "toaReflecBands = new Band[Constants.L1_BAND_NUM]", "var_name": "toaReflecBands"}, {"original_string": "@SourceProduct(alias = \"merisL1bProduct\",\n                   label = \"MERIS L1b product\",\n                   description = \"The MERIS L1b source product\")\n    private Product sourceProduct;", "modifier": "@SourceProduct(alias = \"merisL1bProduct\",\n                   label = \"MERIS L1b product\",\n                   description = \"The MERIS L1b source product\")\n    private", "type": "Product", "declarator": "sourceProduct", "var_name": "sourceProduct"}, {"original_string": "@TargetProduct\n    private Product targetProduct;", "modifier": "@TargetProduct\n    private", "type": "Product", "declarator": "targetProduct", "var_name": "targetProduct"}, {"original_string": "@Parameter(description = \"Write L1 flags to the target product.\",\n               label = \"Write L1 flags to the target product.\",\n               defaultValue = \"true\")\n    public boolean copyL1Flags = true;", "modifier": "@Parameter(description = \"Write L1 flags to the target product.\",\n               label = \"Write L1 flags to the target product.\",\n               defaultValue = \"true\")\n    public", "type": "boolean", "declarator": "copyL1Flags = true", "var_name": "copyL1Flags"}, {"original_string": "@Parameter(description = \"Write TOA reflectances to the target product.\",\n               label = \"Write TOA reflectances to the target product.\",\n               defaultValue = \"false\")\n    public boolean outputToar = false;", "modifier": "@Parameter(description = \"Write TOA reflectances to the target product.\",\n               label = \"Write TOA reflectances to the target product.\",\n               defaultValue = \"false\")\n    public", "type": "boolean", "declarator": "outputToar = false", "var_name": "outputToar"}, {"original_string": "@Parameter(defaultValue = \"ALL_SURFACES\",\n               valueSet = {\"ALL_SURFACES\", \"LAND\", \"WATER\"},\n               label = \"Perform Rayleigh correction over\",\n               description = \"Specify the surface where the Rayleigh correction shall be performed\")\n    private CorrectionSurfaceEnum correctionSurface;", "modifier": "@Parameter(defaultValue = \"ALL_SURFACES\",\n               valueSet = {\"ALL_SURFACES\", \"LAND\", \"WATER\"},\n               label = \"Perform Rayleigh correction over\",\n               description = \"Specify the surface where the Rayleigh correction shall be performed\")\n    private", "type": "CorrectionSurfaceEnum", "declarator": "correctionSurface", "var_name": "correctionSurface"}, {"original_string": "private L2AuxData auxData;", "modifier": "private", "type": "L2AuxData", "declarator": "auxData", "var_name": "auxData"}], "methods": [{"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "BrrOp.initialize()", "testcase": false, "constructor": false}, {"identifier": "doExecute", "parameters": "(ProgressMonitor pm)", "modifiers": "@Override public", "return": "void", "signature": "void doExecute(ProgressMonitor pm)", "full_signature": "@Override public void doExecute(ProgressMonitor pm)", "class_method_signature": "BrrOp.doExecute(ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "prepareSourceProducts", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void prepareSourceProducts()", "full_signature": "protected void prepareSourceProducts()", "class_method_signature": "BrrOp.prepareSourceProducts()", "testcase": false, "constructor": false}, {"identifier": "computeTileStack", "parameters": "(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm)", "modifiers": "@SuppressWarnings(\"MismatchedReadAndWriteOfArray\") @Override public", "return": "void", "signature": "void computeTileStack(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm)", "full_signature": "@SuppressWarnings(\"MismatchedReadAndWriteOfArray\") @Override public void computeTileStack(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm)", "class_method_signature": "BrrOp.computeTileStack(Map<Band, Tile> targetTiles, Rectangle rectangle, ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "createOutputBands", "parameters": "(Band[] bands, final String name)", "modifiers": "protected", "return": "void", "signature": "void createOutputBands(Band[] bands, final String name)", "full_signature": "protected void createOutputBands(Band[] bands, final String name)", "class_method_signature": "BrrOp.createOutputBands(Band[] bands, final String name)", "testcase": false, "constructor": false}, {"identifier": "checkInputProduct", "parameters": "(Product inputProduct)", "modifiers": "protected", "return": "void", "signature": "void checkInputProduct(Product inputProduct)", "full_signature": "protected void checkInputProduct(Product inputProduct)", "class_method_signature": "BrrOp.checkInputProduct(Product inputProduct)", "testcase": false, "constructor": false}, {"identifier": "isValidRhoSpectralIndex", "parameters": "(int i)", "modifiers": "static", "return": "boolean", "signature": "boolean isValidRhoSpectralIndex(int i)", "full_signature": "static boolean isValidRhoSpectralIndex(int i)", "class_method_signature": "BrrOp.isValidRhoSpectralIndex(int i)", "testcase": false, "constructor": false}, {"identifier": "getFrameAndBlock", "parameters": "(Rectangle rectangle)", "modifiers": "private", "return": "FrameAndBlock", "signature": "FrameAndBlock getFrameAndBlock(Rectangle rectangle)", "full_signature": "private FrameAndBlock getFrameAndBlock(Rectangle rectangle)", "class_method_signature": "BrrOp.getFrameAndBlock(Rectangle rectangle)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-sdr/src/main/java/org/esa/s3tbx/meris/brr/operator/BrrOp.java"}, "focal_method": {"identifier": "isValidRhoSpectralIndex", "parameters": "(int i)", "modifiers": "static", "return": "boolean", "body": "static boolean isValidRhoSpectralIndex(int i) {\n        return i >= Constants.bb1 && i < Constants.bb15 && i != Constants.bb11;\n    }", "signature": "boolean isValidRhoSpectralIndex(int i)", "full_signature": "static boolean isValidRhoSpectralIndex(int i)", "class_method_signature": "BrrOp.isValidRhoSpectralIndex(int i)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}