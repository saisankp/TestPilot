{"test_class": {"identifier": "ReusingBlockResettableIteratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MEMORY_CAPACITY = 3 * 128 * 1024;", "modifier": "private static final", "type": "int", "declarator": "MEMORY_CAPACITY = 3 * 128 * 1024", "var_name": "MEMORY_CAPACITY"}, {"original_string": "private static final int NUM_VALUES = 20000;", "modifier": "private static final", "type": "int", "declarator": "NUM_VALUES = 20000", "var_name": "NUM_VALUES"}, {"original_string": "private MemoryManager memman;", "modifier": "private", "type": "MemoryManager", "declarator": "memman", "var_name": "memman"}, {"original_string": "private Iterator<Record> reader;", "modifier": "private", "type": "Iterator<Record>", "declarator": "reader", "var_name": "reader"}, {"original_string": "private List<Record> objects;", "modifier": "private", "type": "List<Record>", "declarator": "objects", "var_name": "objects"}, {"original_string": "private final TypeSerializer<Record> serializer = RecordSerializer.get();", "modifier": "private final", "type": "TypeSerializer<Record>", "declarator": "serializer = RecordSerializer.get()", "var_name": "serializer"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/resettable/ReusingBlockResettableIteratorTest.java"}, "test_case": {"identifier": "testTwelveFoldBufferedBlockResettableIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTwelveFoldBufferedBlockResettableIterator() throws Exception\n\t{\n\t\tfinal AbstractInvokable memOwner = new DummyInvokable();\n\t\t// create the resettable Iterator\n\t\tfinal ReusingBlockResettableIterator<Record> iterator = new ReusingBlockResettableIterator<Record>(\n\t\t\t\tthis.memman, this.reader, this.serializer, 12, memOwner);\n\t\t// open the iterator\n\t\titerator.open();\n\t\t\n\t\t// now test walking through the iterator\n\t\tint lower = 0;\n\t\tint upper = 0;\n\t\tdo {\n\t\t\tlower = upper;\n\t\t\tupper = lower;\n\t\t\t// find the upper bound\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tRecord target = iterator.next();\n\t\t\t\tint val = target.getField(0, IntValue.class).getValue();\n\t\t\t\tAssert.assertEquals(upper++, val);\n\t\t\t}\n\t\t\t// now reset the buffer a few times\n\t\t\tfor (int i = 0; i < 5; ++i) {\n\t\t\t\titerator.reset();\n\t\t\t\tint count = 0;\n\t\t\t\twhile (iterator.hasNext()) {\n\t\t\t\t\tRecord target = iterator.next();\n\t\t\t\t\tint val = target.getField(0, IntValue.class).getValue();\n\t\t\t\t\tAssert.assertEquals(lower + (count++), val);\n\t\t\t\t}\n\t\t\t\tAssert.assertEquals(upper - lower, count);\n\t\t\t}\n\t\t} while (iterator.nextBlock());\n\t\tAssert.assertEquals(NUM_VALUES, upper);\n\t\t\n\t\t// close the iterator\n\t\titerator.close();\n\t}", "signature": "void testTwelveFoldBufferedBlockResettableIterator()", "full_signature": "@Test public void testTwelveFoldBufferedBlockResettableIterator()", "class_method_signature": "ReusingBlockResettableIteratorTest.testTwelveFoldBufferedBlockResettableIterator()", "testcase": true, "constructor": false, "invocations": ["open", "hasNext", "next", "getValue", "getField", "assertEquals", "reset", "hasNext", "next", "getValue", "getField", "assertEquals", "assertEquals", "nextBlock", "assertEquals", "close"]}, "focal_class": {"identifier": "ReusingBlockResettableIterator", "superclass": "extends NonReusingBlockResettableIterator<T>", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(ReusingBlockResettableIterator.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReusingBlockResettableIterator.class)", "var_name": "LOG"}, {"original_string": "private final T reuseElement;", "modifier": "private final", "type": "T", "declarator": "reuseElement", "var_name": "reuseElement"}], "methods": [{"identifier": "ReusingBlockResettableIterator", "parameters": "(MemoryManager memoryManager, Iterator<T> input,\n\t\t\tTypeSerializer<T> serializer, int numPages,\n\t\t\tAbstractInvokable ownerTask)", "modifiers": "public", "return": "", "signature": " ReusingBlockResettableIterator(MemoryManager memoryManager, Iterator<T> input,\n\t\t\tTypeSerializer<T> serializer, int numPages,\n\t\t\tAbstractInvokable ownerTask)", "full_signature": "public  ReusingBlockResettableIterator(MemoryManager memoryManager, Iterator<T> input,\n\t\t\tTypeSerializer<T> serializer, int numPages,\n\t\t\tAbstractInvokable ownerTask)", "class_method_signature": "ReusingBlockResettableIterator.ReusingBlockResettableIterator(MemoryManager memoryManager, Iterator<T> input,\n\t\t\tTypeSerializer<T> serializer, int numPages,\n\t\t\tAbstractInvokable ownerTask)", "testcase": false, "constructor": true}, {"identifier": "ReusingBlockResettableIterator", "parameters": "(MemoryManager memoryManager, TypeSerializer<T>\n\t\t\tserializer, int numPages, AbstractInvokable ownerTask)", "modifiers": "public", "return": "", "signature": " ReusingBlockResettableIterator(MemoryManager memoryManager, TypeSerializer<T>\n\t\t\tserializer, int numPages, AbstractInvokable ownerTask)", "full_signature": "public  ReusingBlockResettableIterator(MemoryManager memoryManager, TypeSerializer<T>\n\t\t\tserializer, int numPages, AbstractInvokable ownerTask)", "class_method_signature": "ReusingBlockResettableIterator.ReusingBlockResettableIterator(MemoryManager memoryManager, TypeSerializer<T>\n\t\t\tserializer, int numPages, AbstractInvokable ownerTask)", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "ReusingBlockResettableIterator.hasNext()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/ReusingBlockResettableIterator.java"}, "focal_method": {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean hasNext() {\n\t\ttry {\n\t\t\tif (this.nextElement == null) {\n\t\t\t\tif (this.readPhase) {\n\t\t\t\t\t// read phase, get next element from buffer\n\t\t\t\t\tT tmp = getNextRecord(this.reuseElement);\n\t\t\t\t\tif (tmp != null) {\n\t\t\t\t\t\tthis.nextElement = tmp;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.input.hasNext()) {\n\t\t\t\t\t\tfinal T next = this.input.next();\n\t\t\t\t\t\tif (writeNextRecord(next)) {\n\t\t\t\t\t\t\tthis.nextElement = next;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.leftOverElement = next;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.noMoreBlocks = true;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (IOException ioex) {\n\t\t\tthrow new RuntimeException(\"Error (de)serializing record in block resettable iterator.\", ioex);\n\t\t}\n\t}", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "ReusingBlockResettableIterator.hasNext()", "testcase": false, "constructor": false, "invocations": ["getNextRecord", "hasNext", "next", "writeNextRecord"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}