{"test_class": {"identifier": "DataExtractorConformantTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected ShapeMapParsing parser;", "modifier": "protected", "type": "ShapeMapParsing", "declarator": "parser", "var_name": "parser"}, {"original_string": "protected ShExCParser shexParser;", "modifier": "protected", "type": "ShExCParser", "declarator": "shexParser", "var_name": "shexParser"}, {"original_string": "static IRI a = GlobalFactory.RDFFactory.createIRI(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\");", "modifier": "static", "type": "IRI", "declarator": "a = GlobalFactory.RDFFactory.createIRI(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\")", "var_name": "a"}, {"original_string": "static IRI n1 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n1\");", "modifier": "static", "type": "IRI", "declarator": "n1 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n1\")", "var_name": "n1"}, {"original_string": "static IRI n2 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n2\");", "modifier": "static", "type": "IRI", "declarator": "n2 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n2\")", "var_name": "n2"}, {"original_string": "static IRI n3 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n3\");", "modifier": "static", "type": "IRI", "declarator": "n3 = GlobalFactory.RDFFactory.createIRI(\"http://a.b/n3\")", "var_name": "n3"}, {"original_string": "static IRI john = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/john\");", "modifier": "static", "type": "IRI", "declarator": "john = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/john\")", "var_name": "john"}, {"original_string": "static IRI smith = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/smith\");", "modifier": "static", "type": "IRI", "declarator": "smith = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/smith\")", "var_name": "smith"}, {"original_string": "static IRI paul = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/paul\");", "modifier": "static", "type": "IRI", "declarator": "paul = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/paul\")", "var_name": "paul"}, {"original_string": "static IRI eastwood = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/eastwood\");", "modifier": "static", "type": "IRI", "declarator": "eastwood = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/eastwood\")", "var_name": "eastwood"}, {"original_string": "static IRI alien = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/alien\");", "modifier": "static", "type": "IRI", "declarator": "alien = GlobalFactory.RDFFactory.createIRI(\"http://a.b/node/alien\")", "var_name": "alien"}, {"original_string": "static IRI first = GlobalFactory.RDFFactory.createIRI(\"http://a.b/first\");", "modifier": "static", "type": "IRI", "declarator": "first = GlobalFactory.RDFFactory.createIRI(\"http://a.b/first\")", "var_name": "first"}, {"original_string": "static IRI last = GlobalFactory.RDFFactory.createIRI(\"http://a.b/last\");", "modifier": "static", "type": "IRI", "declarator": "last = GlobalFactory.RDFFactory.createIRI(\"http://a.b/last\")", "var_name": "last"}, {"original_string": "static IRI human = GlobalFactory.RDFFactory.createIRI(\"http://a.b/human\");", "modifier": "static", "type": "IRI", "declarator": "human = GlobalFactory.RDFFactory.createIRI(\"http://a.b/human\")", "var_name": "human"}, {"original_string": "static Triple n1_a_human = GlobalFactory.RDFFactory.createTriple(n1, a, human);", "modifier": "static", "type": "Triple", "declarator": "n1_a_human = GlobalFactory.RDFFactory.createTriple(n1, a, human)", "var_name": "n1_a_human"}, {"original_string": "static Triple n1_first_john = GlobalFactory.RDFFactory.createTriple(n1, first, john);", "modifier": "static", "type": "Triple", "declarator": "n1_first_john = GlobalFactory.RDFFactory.createTriple(n1, first, john)", "var_name": "n1_first_john"}, {"original_string": "static Triple n1_last_smith = GlobalFactory.RDFFactory.createTriple(n1, last, smith);", "modifier": "static", "type": "Triple", "declarator": "n1_last_smith = GlobalFactory.RDFFactory.createTriple(n1, last, smith)", "var_name": "n1_last_smith"}, {"original_string": "static Triple n2_a_human = GlobalFactory.RDFFactory.createTriple(n2, a, human);", "modifier": "static", "type": "Triple", "declarator": "n2_a_human = GlobalFactory.RDFFactory.createTriple(n2, a, human)", "var_name": "n2_a_human"}, {"original_string": "static Triple n2_first_paul = GlobalFactory.RDFFactory.createTriple(n2, first, paul);", "modifier": "static", "type": "Triple", "declarator": "n2_first_paul = GlobalFactory.RDFFactory.createTriple(n2, first, paul)", "var_name": "n2_first_paul"}, {"original_string": "static Triple n2_last_east = GlobalFactory.RDFFactory.createTriple(n2, last, eastwood);", "modifier": "static", "type": "Triple", "declarator": "n2_last_east = GlobalFactory.RDFFactory.createTriple(n2, last, eastwood)", "var_name": "n2_last_east"}, {"original_string": "static Triple n3_a_human = GlobalFactory.RDFFactory.createTriple(n3, a, human);", "modifier": "static", "type": "Triple", "declarator": "n3_a_human = GlobalFactory.RDFFactory.createTriple(n3, a, human)", "var_name": "n3_a_human"}, {"original_string": "static Triple n3_first_alien = GlobalFactory.RDFFactory.createTriple(n3, first, alien);", "modifier": "static", "type": "Triple", "declarator": "n3_first_alien = GlobalFactory.RDFFactory.createTriple(n3, first, alien)", "var_name": "n3_first_alien"}, {"original_string": "Graph graph;", "modifier": "", "type": "Graph", "declarator": "graph", "var_name": "graph"}], "file": "shex/src/test/java/fr/inria/lille/shexjava/validation/DataExtractorConformantTest.java"}, "test_case": {"identifier": "test2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test2() {\n\t\tString schemaSt = \"<http://inria.fr/Person> { a IRI; <http://a.b/last> IRI; }\";\n\t\tString shMap = \"{ FOCUS a <http://a.b/human> } @<http://inria.fr/Person>\";\n\n\t\ttry {\n\t\t\tShexSchema schema = new ShexSchema(shexParser.getRules(new ByteArrayInputStream(schemaSt.getBytes())));\n\t\t\tBaseShapeMap shapeMap = parser.parse(new ByteArrayInputStream(shMap.getBytes()));\n\n\t\t\tDataExtractorConformant extractor = new DataExtractorConformant(schema,graph);\n\t\t\t\n\t\t\tGraph result = GlobalFactory.RDFFactory.createGraph();\n\t\t\textractor.extractConformantPart(shapeMap, result);\n\n\t\t\tassertEquals(result.size(),4);\n\t\t\tassertTrue(result.contains(n1_a_human));\n\t\t\tassertTrue(result.contains(n1_last_smith));\n\t\t\tassertTrue(result.contains(n2_a_human));\n\t\t\tassertTrue(result.contains(n2_last_east));\n\t\t} catch ( Exception e) {\n\t\t\tfail(\"Exception during the parsing\");\n\t\t}\n\t}", "signature": "void test2()", "full_signature": "@Test public void test2()", "class_method_signature": "DataExtractorConformantTest.test2()", "testcase": true, "constructor": false, "invocations": ["getRules", "getBytes", "parse", "getBytes", "createGraph", "extractConformantPart", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "fail"]}, "focal_class": {"identifier": "DataExtractorConformant", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected ShexSchema schema;", "modifier": "protected", "type": "ShexSchema", "declarator": "schema", "var_name": "schema"}, {"original_string": "protected Graph inputGraph;", "modifier": "protected", "type": "Graph", "declarator": "inputGraph", "var_name": "inputGraph"}, {"original_string": "protected RecursiveValidationWithMemorization validation;", "modifier": "protected", "type": "RecursiveValidationWithMemorization", "declarator": "validation", "var_name": "validation"}, {"original_string": "protected MatchingCollector mColl;", "modifier": "protected", "type": "MatchingCollector", "declarator": "mColl", "var_name": "mColl"}], "methods": [{"identifier": "DataExtractorConformant", "parameters": "(ShexSchema schema, Graph inputGraph)", "modifiers": "public", "return": "", "signature": " DataExtractorConformant(ShexSchema schema, Graph inputGraph)", "full_signature": "public  DataExtractorConformant(ShexSchema schema, Graph inputGraph)", "class_method_signature": "DataExtractorConformant.DataExtractorConformant(ShexSchema schema, Graph inputGraph)", "testcase": false, "constructor": true}, {"identifier": "extractConformantPart", "parameters": "(BaseShapeMap shapeMap)", "modifiers": "public", "return": "DataView", "signature": "DataView extractConformantPart(BaseShapeMap shapeMap)", "full_signature": "public DataView extractConformantPart(BaseShapeMap shapeMap)", "class_method_signature": "DataExtractorConformant.extractConformantPart(BaseShapeMap shapeMap)", "testcase": false, "constructor": false}, {"identifier": "extractConformantPart", "parameters": "(BaseShapeMap shapeMap, Graph resultGraph)", "modifiers": "public", "return": "DataView", "signature": "DataView extractConformantPart(BaseShapeMap shapeMap, Graph resultGraph)", "full_signature": "public DataView extractConformantPart(BaseShapeMap shapeMap, Graph resultGraph)", "class_method_signature": "DataExtractorConformant.extractConformantPart(BaseShapeMap shapeMap, Graph resultGraph)", "testcase": false, "constructor": false}], "file": "shex/src/main/java/fr/inria/lille/shexjava/validation/DataExtractorConformant.java"}, "focal_method": {"identifier": "extractConformantPart", "parameters": "(BaseShapeMap shapeMap)", "modifiers": "public", "return": "DataView", "body": "public DataView extractConformantPart(BaseShapeMap shapeMap) {\n\t\tGraph graph = GlobalFactory.RDFFactory.createGraph();\n\t\treturn extractConformantPart(shapeMap,graph);\n\t}", "signature": "DataView extractConformantPart(BaseShapeMap shapeMap)", "full_signature": "public DataView extractConformantPart(BaseShapeMap shapeMap)", "class_method_signature": "DataExtractorConformant.extractConformantPart(BaseShapeMap shapeMap)", "testcase": false, "constructor": false, "invocations": ["createGraph", "extractConformantPart"]}, "repository": {"repo_id": 106459277, "url": "https://github.com/iovka/shex-java", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 1670, "license": "licensed"}}