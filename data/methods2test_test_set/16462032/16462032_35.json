{"test_class": {"identifier": "ResourceLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/util/ResourceLoaderTest.java"}, "test_case": {"identifier": "testRootPackageAsFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRootPackageAsFile() throws IOException {\n        AbstractFile rootPackageFile = ResourceLoader.getRootPackageAsFile(getClass());\n        assert rootPackageFile != null;\n        assert rootPackageFile.exists();\n        assert rootPackageFile.isBrowsable();\n\n        AbstractFile thisClassFile = rootPackageFile.getChild(\"com/mucommander/commons/file/util/ResourceLoaderTest.class\");\n        assertReadable(thisClassFile);\n    }", "signature": "void testRootPackageAsFile()", "full_signature": "@Test public void testRootPackageAsFile()", "class_method_signature": "ResourceLoaderTest.testRootPackageAsFile()", "testcase": true, "constructor": false, "invocations": ["getRootPackageAsFile", "getClass", "exists", "isBrowsable", "getChild", "assertReadable"]}, "focal_class": {"identifier": "ResourceLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResourceLoader.class)", "var_name": "LOGGER"}, {"original_string": "private static ClassLoader defaultClassLoader = ResourceLoader.class.getClassLoader();", "modifier": "private static", "type": "ClassLoader", "declarator": "defaultClassLoader = ResourceLoader.class.getClassLoader()", "var_name": "defaultClassLoader"}], "methods": [{"identifier": "getDefaultClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getDefaultClassLoader()", "full_signature": "public static ClassLoader getDefaultClassLoader()", "class_method_signature": "ResourceLoader.getDefaultClassLoader()", "testcase": false, "constructor": false}, {"identifier": "setDefaultClassLoader", "parameters": "(ClassLoader defaultClassLoader)", "modifiers": "public static", "return": "void", "signature": "void setDefaultClassLoader(ClassLoader defaultClassLoader)", "full_signature": "public static void setDefaultClassLoader(ClassLoader defaultClassLoader)", "class_method_signature": "ResourceLoader.setDefaultClassLoader(ClassLoader defaultClassLoader)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsURL", "parameters": "(Package ppackage, String name)", "modifiers": "public static", "return": "URL", "signature": "URL getPackageResourceAsURL(Package ppackage, String name)", "full_signature": "public static URL getPackageResourceAsURL(Package ppackage, String name)", "class_method_signature": "ResourceLoader.getPackageResourceAsURL(Package ppackage, String name)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsURL", "parameters": "(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "URL", "signature": "URL getPackageResourceAsURL(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static URL getPackageResourceAsURL(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getPackageResourceAsURL(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsURL", "parameters": "(String path)", "modifiers": "public static", "return": "URL", "signature": "URL getResourceAsURL(String path)", "full_signature": "public static URL getResourceAsURL(String path)", "class_method_signature": "ResourceLoader.getResourceAsURL(String path)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsURL", "parameters": "(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "URL", "signature": "URL getResourceAsURL(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static URL getResourceAsURL(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getResourceAsURL(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsStream", "parameters": "(Package ppackage, String name)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getPackageResourceAsStream(Package ppackage, String name)", "full_signature": "public static InputStream getPackageResourceAsStream(Package ppackage, String name)", "class_method_signature": "ResourceLoader.getPackageResourceAsStream(Package ppackage, String name)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsStream", "parameters": "(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getPackageResourceAsStream(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static InputStream getPackageResourceAsStream(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getPackageResourceAsStream(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String path)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String path)", "full_signature": "public static InputStream getResourceAsStream(String path)", "class_method_signature": "ResourceLoader.getResourceAsStream(String path)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static InputStream getResourceAsStream(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getResourceAsStream(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsFile", "parameters": "(Package ppackage, String name)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getPackageResourceAsFile(Package ppackage, String name)", "full_signature": "public static AbstractFile getPackageResourceAsFile(Package ppackage, String name)", "class_method_signature": "ResourceLoader.getPackageResourceAsFile(Package ppackage, String name)", "testcase": false, "constructor": false}, {"identifier": "getPackageResourceAsFile", "parameters": "(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getPackageResourceAsFile(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static AbstractFile getPackageResourceAsFile(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getPackageResourceAsFile(Package ppackage, String name, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsFile", "parameters": "(String path)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getResourceAsFile(String path)", "full_signature": "public static AbstractFile getResourceAsFile(String path)", "class_method_signature": "ResourceLoader.getResourceAsFile(String path)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsFile", "parameters": "(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getResourceAsFile(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "full_signature": "public static AbstractFile getResourceAsFile(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "class_method_signature": "ResourceLoader.getResourceAsFile(String path, ClassLoader classLoader, AbstractFile rootPackageFile)", "testcase": false, "constructor": false}, {"identifier": "getRootPackageAsFile", "parameters": "(Class<?> aClass)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getRootPackageAsFile(Class<?> aClass)", "full_signature": "public static AbstractFile getRootPackageAsFile(Class<?> aClass)", "class_method_signature": "ResourceLoader.getRootPackageAsFile(Class<?> aClass)", "testcase": false, "constructor": false}, {"identifier": "getRelativePackagePath", "parameters": "(Package ppackage)", "modifiers": "public static", "return": "String", "signature": "String getRelativePackagePath(Package ppackage)", "full_signature": "public static String getRelativePackagePath(Package ppackage)", "class_method_signature": "ResourceLoader.getRelativePackagePath(Package ppackage)", "testcase": false, "constructor": false}, {"identifier": "getRelativeClassPath", "parameters": "(Class<?> cclass)", "modifiers": "public static", "return": "String", "signature": "String getRelativeClassPath(Class<?> cclass)", "full_signature": "public static String getRelativeClassPath(Class<?> cclass)", "class_method_signature": "ResourceLoader.getRelativeClassPath(Class<?> cclass)", "testcase": false, "constructor": false}, {"identifier": "getJarFilePath", "parameters": "(URL url)", "modifiers": "private static", "return": "String", "signature": "String getJarFilePath(URL url)", "full_signature": "private static String getJarFilePath(URL url)", "class_method_signature": "ResourceLoader.getJarFilePath(URL url)", "testcase": false, "constructor": false}, {"identifier": "getLocalFilePath", "parameters": "(URL url)", "modifiers": "private static", "return": "String", "signature": "String getLocalFilePath(URL url)", "full_signature": "private static String getLocalFilePath(URL url)", "class_method_signature": "ResourceLoader.getLocalFilePath(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeLeadingSlash", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String removeLeadingSlash(String path)", "full_signature": "private static String removeLeadingSlash(String path)", "class_method_signature": "ResourceLoader.removeLeadingSlash(String path)", "testcase": false, "constructor": false}, {"identifier": "normalizeUrlPath", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String normalizeUrlPath(String path)", "full_signature": "private static String normalizeUrlPath(String path)", "class_method_signature": "ResourceLoader.normalizeUrlPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getDecodedURLPath", "parameters": "(URL url)", "modifiers": "private static", "return": "String", "signature": "String getDecodedURLPath(URL url)", "full_signature": "private static String getDecodedURLPath(URL url)", "class_method_signature": "ResourceLoader.getDecodedURLPath(URL url)", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/util/ResourceLoader.java"}, "focal_method": {"identifier": "getRootPackageAsFile", "parameters": "(Class<?> aClass)", "modifiers": "public static", "return": "AbstractFile", "body": "public static AbstractFile getRootPackageAsFile(Class<?> aClass) {\n        ClassLoader classLoader = aClass.getClassLoader();\n        if(classLoader==null)\n            classLoader = getDefaultClassLoader();\n\n        String aClassRelPath = getRelativeClassPath(aClass);\n        URL aClassURL = getResourceAsURL(aClassRelPath, classLoader, null);\n\n        if(aClassURL==null)\n            return null;    // no resource under that path\n\n        if(\"jar\".equals(aClassURL.getProtocol()))\n            return FileFactory.getFile(getJarFilePath(aClassURL));\n\n        String aClassPath = getLocalFilePath(aClassURL);\n        return FileFactory.getFile(aClassPath.substring(0, aClassPath.length()-aClassRelPath.length()));\n    }", "signature": "AbstractFile getRootPackageAsFile(Class<?> aClass)", "full_signature": "public static AbstractFile getRootPackageAsFile(Class<?> aClass)", "class_method_signature": "ResourceLoader.getRootPackageAsFile(Class<?> aClass)", "testcase": false, "constructor": false, "invocations": ["getClassLoader", "getDefaultClassLoader", "getRelativeClassPath", "getResourceAsURL", "equals", "getProtocol", "getFile", "getJarFilePath", "getLocalFilePath", "getFile", "substring", "length", "length"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}