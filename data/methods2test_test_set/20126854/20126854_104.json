{"test_class": {"identifier": "MatchingOutputStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] data;", "modifier": "private", "type": "byte[]", "declarator": "data", "var_name": "data"}, {"original_string": "private ByteArrayInputStream inputStream;", "modifier": "private", "type": "ByteArrayInputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "private MatchingOutputStream outputStream;", "modifier": "private", "type": "MatchingOutputStream", "declarator": "outputStream", "var_name": "outputStream"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/MatchingOutputStreamTest.java"}, "test_case": {"identifier": "testWrite_WholeBuffer_Fail", "parameters": "()", "modifiers": "@Test(expected = MismatchException.class) public", "return": "void", "body": "@Test(expected = MismatchException.class)\n  public void testWrite_WholeBuffer_Fail() throws IOException {\n    byte[] tweaked = new byte[] {0, 1, 2, 3, 4, 55, 6, 7, 8, 9};\n    outputStream.write(tweaked);\n  }", "signature": "void testWrite_WholeBuffer_Fail()", "full_signature": "@Test(expected = MismatchException.class) public void testWrite_WholeBuffer_Fail()", "class_method_signature": "MatchingOutputStreamTest.testWrite_WholeBuffer_Fail()", "testcase": true, "constructor": false, "invocations": ["write"]}, "focal_class": {"identifier": "MatchingOutputStream", "superclass": "extends OutputStream", "interfaces": "", "fields": [{"original_string": "private final InputStream expectedBytesStream;", "modifier": "private final", "type": "InputStream", "declarator": "expectedBytesStream", "var_name": "expectedBytesStream"}, {"original_string": "private final byte[] buffer;", "modifier": "private final", "type": "byte[]", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "MatchingOutputStream", "parameters": "(InputStream expectedBytesStream, int matchBufferSize)", "modifiers": "public", "return": "", "signature": " MatchingOutputStream(InputStream expectedBytesStream, int matchBufferSize)", "full_signature": "public  MatchingOutputStream(InputStream expectedBytesStream, int matchBufferSize)", "class_method_signature": "MatchingOutputStream.MatchingOutputStream(InputStream expectedBytesStream, int matchBufferSize)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "MatchingOutputStream.write(int b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] b)", "full_signature": "@Override public void write(byte[] b)", "class_method_signature": "MatchingOutputStream.write(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] dataToWrite, int offset, int length)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] dataToWrite, int offset, int length)", "full_signature": "@Override public void write(byte[] dataToWrite, int offset, int length)", "class_method_signature": "MatchingOutputStream.write(byte[] dataToWrite, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "expectEof", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void expectEof()", "full_signature": "public void expectEof()", "class_method_signature": "MatchingOutputStream.expectEof()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/MatchingOutputStream.java"}, "focal_method": {"identifier": "write", "parameters": "(int b)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void write(int b) throws IOException {\n    int expected = expectedBytesStream.read();\n    if (expected == -1) {\n      throw new MismatchException(\"EOF reached in expectedBytesStream\");\n    }\n    if (expected != b) {\n      throw new MismatchException(\"Data does not match\");\n    }\n  }", "signature": "void write(int b)", "full_signature": "@Override public void write(int b)", "class_method_signature": "MatchingOutputStream.write(int b)", "testcase": false, "constructor": false, "invocations": ["read"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}