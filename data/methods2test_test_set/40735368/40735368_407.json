{"test_class": {"identifier": "CSVLatLonStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/parse/CSVLatLonStrategyTest.java"}, "test_case": {"identifier": "testBuildFeatureType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildFeatureType() {\n        String input = CSVTestStrategySupport.buildInputString(\"lat,lon,quux,morx\\n\");\n        CSVFileState fileState = new CSVFileState(input, \"foo\");\n        CSVLatLonStrategy strategy = new CSVLatLonStrategy(fileState);\n        SimpleFeatureType featureType = strategy.getFeatureType();\n\n        assertEquals(\"Invalid attribute count\", 3, featureType.getAttributeCount());\n        assertEquals(\"Invalid featuretype name\", \"foo\", featureType.getName().getLocalPart());\n        assertEquals(\"Invalid name\", \"foo\", featureType.getTypeName());\n\n        List<AttributeDescriptor> attrs = featureType.getAttributeDescriptors();\n        assertEquals(\"Invalid number of attributes\", 3, attrs.size());\n        List<String> attrNames = new ArrayList<String>(2);\n        for (AttributeDescriptor attr : attrs) {\n            if (!(attr instanceof GeometryDescriptor)) {\n                attrNames.add(attr.getName().getLocalPart());\n            }\n        }\n        Collections.sort(attrNames);\n        assertEquals(\"Invalid property descriptor\", \"morx\", attrNames.get(0));\n        assertEquals(\"Invalid property descriptor\", \"quux\", attrNames.get(1));\n\n        GeometryDescriptor geometryDescriptor = featureType.getGeometryDescriptor();\n        GeometryType geometryType = geometryDescriptor.getType();\n        assertEquals(\"Invalid geometry name\", \"location\", geometryType.getName().getLocalPart());\n    }", "signature": "void testBuildFeatureType()", "full_signature": "@Test public void testBuildFeatureType()", "class_method_signature": "CSVLatLonStrategyTest.testBuildFeatureType()", "testcase": true, "constructor": false, "invocations": ["buildInputString", "getFeatureType", "assertEquals", "getAttributeCount", "assertEquals", "getLocalPart", "getName", "assertEquals", "getTypeName", "getAttributeDescriptors", "assertEquals", "size", "add", "getLocalPart", "getName", "sort", "assertEquals", "get", "assertEquals", "get", "getGeometryDescriptor", "getType", "assertEquals", "getLocalPart", "getName"]}, "focal_class": {"identifier": "CSVLatLonStrategy", "superclass": "extends CSVStrategy", "interfaces": "", "fields": [{"original_string": "private static final String GEOMETRY_COLUMN = \"location\";", "modifier": "private static final", "type": "String", "declarator": "GEOMETRY_COLUMN = \"location\"", "var_name": "GEOMETRY_COLUMN"}], "methods": [{"identifier": "CSVLatLonStrategy", "parameters": "(CSVFileState csvFileState)", "modifiers": "public", "return": "", "signature": " CSVLatLonStrategy(CSVFileState csvFileState)", "full_signature": "public  CSVLatLonStrategy(CSVFileState csvFileState)", "class_method_signature": "CSVLatLonStrategy.CSVLatLonStrategy(CSVFileState csvFileState)", "testcase": false, "constructor": true}, {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVLatLonStrategy.buildFeatureType()", "testcase": false, "constructor": false}, {"identifier": "isLatitude", "parameters": "(String s)", "modifiers": "private", "return": "boolean", "signature": "boolean isLatitude(String s)", "full_signature": "private boolean isLatitude(String s)", "class_method_signature": "CSVLatLonStrategy.isLatitude(String s)", "testcase": false, "constructor": false}, {"identifier": "isLongitude", "parameters": "(String s)", "modifiers": "private", "return": "boolean", "signature": "boolean isLongitude(String s)", "full_signature": "private boolean isLongitude(String s)", "class_method_signature": "CSVLatLonStrategy.isLongitude(String s)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "CSVLatLonStrategy.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(SimpleFeature feature)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] encode(SimpleFeature feature)", "full_signature": "@Override public String[] encode(SimpleFeature feature)", "class_method_signature": "CSVLatLonStrategy.encode(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String recordId, String[] csvRecord)", "modifiers": "@Override public", "return": "SimpleFeature", "signature": "SimpleFeature decode(String recordId, String[] csvRecord)", "full_signature": "@Override public SimpleFeature decode(String recordId, String[] csvRecord)", "class_method_signature": "CSVLatLonStrategy.decode(String recordId, String[] csvRecord)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/parse/CSVLatLonStrategy.java"}, "focal_method": {"identifier": "buildFeatureType", "parameters": "()", "modifiers": "@Override protected", "return": "SimpleFeatureType", "body": "@Override\n    protected SimpleFeatureType buildFeatureType() {\n    \tString[] headers;\n        Map<String, Class<?>> typesFromData;\n        CsvReader csvReader = null;\n        try {\n            csvReader = csvFileState.openCSVReader();\n            headers = csvReader.getHeaders();\n            typesFromData = CSVStrategy.findMostSpecificTypesFromData(csvReader, headers);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (csvReader != null) {\n                csvReader.close();\n            }\n        }\n        SimpleFeatureTypeBuilder builder = CSVStrategy.createBuilder(csvFileState, headers,\n                typesFromData);\n        boolean validLat = false;\n        boolean validLon = false;\n        String latSpelling = null;\n        String lonSpelling = null;\n        for (String col : headers) {\n            Class<?> type = typesFromData.get(col);\n            if (isLatitude(col)) {\n                latSpelling = col;\n                if (CSVStrategy.isNumeric(type)) {\n                    validLat = true;\n                }\n            } else if (isLongitude(col)) {\n                lonSpelling = col;\n                if (CSVStrategy.isNumeric(type)) {\n                    validLon = true;\n                }\n            }\n        }\n        if (validLat && validLon) {\n        \tList<String> csvHeaders = Arrays.asList(headers);\n        \tint index = csvHeaders.indexOf(latSpelling);\n        \tAttributeTypeBuilder builder2 = new AttributeTypeBuilder();\n        \tbuilder2.setCRS(DefaultGeographicCRS.WGS84);\n        \tbuilder2.binding(Point.class);       \t\n        \tAttributeDescriptor descriptor = builder2.buildDescriptor(GEOMETRY_COLUMN);\n        \tbuilder.add(index, descriptor);\n\t\t\t\n            builder.remove(latSpelling);\n            builder.remove(lonSpelling);\n        }\n        return builder.buildFeatureType();\n    }", "signature": "SimpleFeatureType buildFeatureType()", "full_signature": "@Override protected SimpleFeatureType buildFeatureType()", "class_method_signature": "CSVLatLonStrategy.buildFeatureType()", "testcase": false, "constructor": false, "invocations": ["openCSVReader", "getHeaders", "findMostSpecificTypesFromData", "close", "createBuilder", "get", "isLatitude", "isNumeric", "isLongitude", "isNumeric", "asList", "indexOf", "setCRS", "binding", "buildDescriptor", "add", "remove", "remove", "buildFeatureType"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}