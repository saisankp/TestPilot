{"test_class": {"identifier": "DeploymentDescriptorMergerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String jarLocRegexStr = \"([\\\\d\\\\.]{3})\\\\S*\";", "modifier": "private static final", "type": "String", "declarator": "jarLocRegexStr = \"([\\\\d\\\\.]{3})\\\\S*\"", "var_name": "jarLocRegexStr"}, {"original_string": "private static final Pattern jarLocRegex = Pattern.compile(jarLocRegexStr);", "modifier": "private static final", "type": "Pattern", "declarator": "jarLocRegex = Pattern.compile(jarLocRegexStr)", "var_name": "jarLocRegex"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/deploy/DeploymentDescriptorMergerTest.java"}, "test_case": {"identifier": "testDeploymentDesciptorMergeKeepAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDeploymentDesciptorMergeKeepAll() {\n\t\tDeploymentDescriptor master = new DeploymentDescriptorImpl(\"org.jbpm.domain\");\n\n\t\tmaster.getBuilder()\n\t\t.addMarshalingStrategy(new ObjectModel(\"org.jbpm.test.CustomStrategy\", new Object[]{\"param2\"}))\n\t\t.setLimitSerializationClasses(true);\n\n\t\tassertNotNull(master);\n\t\tassertEquals(\"org.jbpm.domain\", master.getPersistenceUnit());\n\t\tassertEquals(\"org.jbpm.domain\", master.getAuditPersistenceUnit());\n\t\tassertEquals(AuditMode.JPA, master.getAuditMode());\n\t\tassertEquals(PersistenceMode.JPA, master.getPersistenceMode());\n\t\tassertEquals(RuntimeStrategy.SINGLETON, master.getRuntimeStrategy());\n\t\tassertEquals(1, master.getMarshallingStrategies().size());\n\t\tassertEquals(0, master.getConfiguration().size());\n\t\tassertEquals(0, master.getEnvironmentEntries().size());\n\t\tassertEquals(0, master.getEventListeners().size());\n\t\tassertEquals(0, master.getGlobals().size());\n\t\tassertEquals(0, master.getTaskEventListeners().size());\n\t\tassertEquals(0, master.getWorkItemHandlers().size());\n\t\tassertTrue(master.getLimitSerializationClasses());\n\n\t\tDeploymentDescriptor slave = new DeploymentDescriptorImpl(\"org.jbpm.domain\");\n\n\t\tslave.getBuilder()\n\t\t.auditMode(AuditMode.JMS)\n\t\t.persistenceMode(PersistenceMode.JPA)\n\t\t.persistenceUnit(\"my.custom.unit\")\n\t\t.auditPersistenceUnit(\"my.custom.unit2\")\n\t\t.setLimitSerializationClasses(false);\n\n\t\tassertNotNull(slave);\n\t\tassertEquals(\"my.custom.unit\", slave.getPersistenceUnit());\n\t\tassertEquals(\"my.custom.unit2\", slave.getAuditPersistenceUnit());\n\t\tassertEquals(AuditMode.JMS, slave.getAuditMode());\n\t\tassertEquals(PersistenceMode.JPA, slave.getPersistenceMode());\n\t\tassertEquals(RuntimeStrategy.SINGLETON, slave.getRuntimeStrategy());\n\t\tassertEquals(0, slave.getMarshallingStrategies().size());\n\t\tassertEquals(0, slave.getConfiguration().size());\n\t\tassertEquals(0, slave.getEnvironmentEntries().size());\n\t\tassertEquals(0, slave.getEventListeners().size());\n\t\tassertEquals(0, slave.getGlobals().size());\n\t\tassertEquals(0, slave.getTaskEventListeners().size());\n\t\tassertEquals(0, slave.getWorkItemHandlers().size());\n\t\tassertFalse(slave.getLimitSerializationClasses());\n\n\t\t// and now let's merge them\n\t\tDeploymentDescriptorMerger merger = new DeploymentDescriptorMerger();\n\t\tDeploymentDescriptor outcome = merger.merge(master, slave, MergeMode.KEEP_ALL);\n\n\t\tassertNotNull(outcome);\n\t\tassertEquals(\"org.jbpm.domain\", outcome.getPersistenceUnit());\n\t\tassertEquals(\"org.jbpm.domain\", outcome.getAuditPersistenceUnit());\n\t\tassertEquals(AuditMode.JPA, outcome.getAuditMode());\n\t\tassertEquals(PersistenceMode.JPA, outcome.getPersistenceMode());\n\t\tassertEquals(RuntimeStrategy.SINGLETON, outcome.getRuntimeStrategy());\n\t\tassertEquals(1, outcome.getMarshallingStrategies().size());\n\t\tassertEquals(0, outcome.getConfiguration().size());\n\t\tassertEquals(0, outcome.getEnvironmentEntries().size());\n\t\tassertEquals(0, outcome.getEventListeners().size());\n\t\tassertEquals(0, outcome.getGlobals().size());\n\t\tassertEquals(0, outcome.getTaskEventListeners().size());\n\t\tassertEquals(0, outcome.getWorkItemHandlers().size());\n\t\tassertTrue(outcome.getLimitSerializationClasses());\n\t}", "signature": "void testDeploymentDesciptorMergeKeepAll()", "full_signature": "@Test public void testDeploymentDesciptorMergeKeepAll()", "class_method_signature": "DeploymentDescriptorMergerTest.testDeploymentDesciptorMergeKeepAll()", "testcase": true, "constructor": false, "invocations": ["setLimitSerializationClasses", "addMarshalingStrategy", "getBuilder", "assertNotNull", "assertEquals", "getPersistenceUnit", "assertEquals", "getAuditPersistenceUnit", "assertEquals", "getAuditMode", "assertEquals", "getPersistenceMode", "assertEquals", "getRuntimeStrategy", "assertEquals", "size", "getMarshallingStrategies", "assertEquals", "size", "getConfiguration", "assertEquals", "size", "getEnvironmentEntries", "assertEquals", "size", "getEventListeners", "assertEquals", "size", "getGlobals", "assertEquals", "size", "getTaskEventListeners", "assertEquals", "size", "getWorkItemHandlers", "assertTrue", "getLimitSerializationClasses", "setLimitSerializationClasses", "auditPersistenceUnit", "persistenceUnit", "persistenceMode", "auditMode", "getBuilder", "assertNotNull", "assertEquals", "getPersistenceUnit", "assertEquals", "getAuditPersistenceUnit", "assertEquals", "getAuditMode", "assertEquals", "getPersistenceMode", "assertEquals", "getRuntimeStrategy", "assertEquals", "size", "getMarshallingStrategies", "assertEquals", "size", "getConfiguration", "assertEquals", "size", "getEnvironmentEntries", "assertEquals", "size", "getEventListeners", "assertEquals", "size", "getGlobals", "assertEquals", "size", "getTaskEventListeners", "assertEquals", "size", "getWorkItemHandlers", "assertFalse", "getLimitSerializationClasses", "merge", "assertNotNull", "assertEquals", "getPersistenceUnit", "assertEquals", "getAuditPersistenceUnit", "assertEquals", "getAuditMode", "assertEquals", "getPersistenceMode", "assertEquals", "getRuntimeStrategy", "assertEquals", "size", "getMarshallingStrategies", "assertEquals", "size", "getConfiguration", "assertEquals", "size", "getEnvironmentEntries", "assertEquals", "size", "getEventListeners", "assertEquals", "size", "getGlobals", "assertEquals", "size", "getTaskEventListeners", "assertEquals", "size", "getWorkItemHandlers", "assertTrue", "getLimitSerializationClasses"]}, "focal_class": {"identifier": "DeploymentDescriptorMerger", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "merge", "parameters": "(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "modifiers": "public", "return": "DeploymentDescriptor", "signature": "DeploymentDescriptor merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "full_signature": "public DeploymentDescriptor merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "class_method_signature": "DeploymentDescriptorMerger.merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(DeploymentDescriptor master, DeploymentDescriptor slave, MergeMode mode)", "modifiers": "public", "return": "DeploymentDescriptor", "signature": "DeploymentDescriptor merge(DeploymentDescriptor master, DeploymentDescriptor slave, MergeMode mode)", "full_signature": "public DeploymentDescriptor merge(DeploymentDescriptor master, DeploymentDescriptor slave, MergeMode mode)", "class_method_signature": "DeploymentDescriptorMerger.merge(DeploymentDescriptor master, DeploymentDescriptor slave, MergeMode mode)", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/deploy/DeploymentDescriptorMerger.java"}, "focal_method": {"identifier": "merge", "parameters": "(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "modifiers": "public", "return": "DeploymentDescriptor", "body": "public DeploymentDescriptor merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode) {\n\t\tif (descriptorHierarchy == null || descriptorHierarchy.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"Descriptor hierarchy list cannot be empty\");\n\t\t}\n\n\t\tif (descriptorHierarchy.size() == 1) {\n\t\t\treturn descriptorHierarchy.get(0);\n\t\t}\n\t\tStack<DeploymentDescriptor> stack = new Stack<DeploymentDescriptor>();\n\t\tstack.addAll(descriptorHierarchy);\n\t\tif (mode == null) {\n\t\t\tmode = MergeMode.MERGE_COLLECTIONS;\n\t\t}\n\n\t\twhile (stack.size() > 1) {\n\t\t\tDeploymentDescriptor master = stack.pop();\n\t\t\tDeploymentDescriptor slave = stack.pop();\n\t\t\tDeploymentDescriptor desc = merge(master, slave, mode);\n\t\t\t// add merged one to be next iteration slave\n\t\t\tstack.push(desc);\n\t\t}\n\t\t// last element from the stack is the one that contains all merged descriptors\n\t\treturn stack.pop();\n\t}", "signature": "DeploymentDescriptor merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "full_signature": "public DeploymentDescriptor merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "class_method_signature": "DeploymentDescriptorMerger.merge(List<DeploymentDescriptor> descriptorHierarchy, MergeMode mode)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "get", "addAll", "size", "pop", "pop", "merge", "push", "pop"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}