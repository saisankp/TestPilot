{"test_class": {"identifier": "DefaultGraphRepositoryProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private GraphRepositoryProducer producer;", "modifier": "@Inject\n    private", "type": "GraphRepositoryProducer", "declarator": "producer", "var_name": "producer"}], "file": "artemis-graph/src/test/java/org/jnosql/artemis/graph/query/DefaultGraphRepositoryProducerTest.java"}, "test_case": {"identifier": "shouldCreateFromManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateFromManager() {\n        Graph manager= Mockito.mock(Graph.class);\n        GraphRepositoryProxyTest.PersonRepository personRepository = producer.get(GraphRepositoryProxyTest.PersonRepository.class, manager);\n        assertNotNull(personRepository);\n    }", "signature": "void shouldCreateFromManager()", "full_signature": "@Test public void shouldCreateFromManager()", "class_method_signature": "DefaultGraphRepositoryProducerTest.shouldCreateFromManager()", "testcase": true, "constructor": false, "invocations": ["mock", "get", "assertNotNull"]}, "focal_class": {"identifier": "DefaultGraphRepositoryProducer", "superclass": "", "interfaces": "implements GraphRepositoryProducer", "fields": [{"original_string": "@Inject\n    private ClassMappings classMappings;", "modifier": "@Inject\n    private", "type": "ClassMappings", "declarator": "classMappings", "var_name": "classMappings"}, {"original_string": "@Inject\n    private GraphConverter converter;", "modifier": "@Inject\n    private", "type": "GraphConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Inject\n    private GraphTemplateProducer producer;", "modifier": "@Inject\n    private", "type": "GraphTemplateProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "@Inject\n    private Converters converters;", "modifier": "@Inject\n    private", "type": "Converters", "declarator": "converters", "var_name": "converters"}], "methods": [{"identifier": "get", "parameters": "(Class<T> repositoryClass, Graph manager)", "modifiers": "@Override public", "return": "T", "signature": "T get(Class<T> repositoryClass, Graph manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, Graph manager)", "class_method_signature": "DefaultGraphRepositoryProducer.get(Class<T> repositoryClass, Graph manager)", "testcase": false, "constructor": false}], "file": "artemis-graph/src/main/java/org/jnosql/artemis/graph/query/DefaultGraphRepositoryProducer.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> repositoryClass, Graph manager)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <E, ID, T extends Repository<E, ID>> T get(Class<T> repositoryClass, Graph manager) {\n        Objects.requireNonNull(repositoryClass, \"repository class is required\");\n        Objects.requireNonNull(manager, \"manager class is required\");\n        GraphTemplate template = producer.get(manager);\n        GraphRepositoryProxy<T, ID> handler = new GraphRepositoryProxy(template,\n                classMappings, repositoryClass, manager, converter, converters);\n        return (T) Proxy.newProxyInstance(repositoryClass.getClassLoader(),\n                new Class[]{repositoryClass},\n                handler);\n    }", "signature": "T get(Class<T> repositoryClass, Graph manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, Graph manager)", "class_method_signature": "DefaultGraphRepositoryProducer.get(Class<T> repositoryClass, Graph manager)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "get", "newProxyInstance", "getClassLoader"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}