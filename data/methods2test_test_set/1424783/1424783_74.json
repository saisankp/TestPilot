{"test_class": {"identifier": "LineAndPointRendererTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "private XYPlot xyPlot;", "modifier": "private", "type": "XYPlot", "declarator": "xyPlot", "var_name": "xyPlot"}, {"original_string": "@Mock\n    Canvas canvas;", "modifier": "@Mock", "type": "Canvas", "declarator": "canvas", "var_name": "canvas"}, {"original_string": "RectF plotArea = new RectF(0, 0, 100, 100);", "modifier": "", "type": "RectF", "declarator": "plotArea = new RectF(0, 0, 100, 100)", "var_name": "plotArea"}], "file": "androidplot-core/src/test/java/com/androidplot/xy/LineAndPointRendererTest.java"}, "test_case": {"identifier": "testCullPointsCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCullPointsCache() throws Exception {\n        LineAndPointFormatter formatter =\n                new LineAndPointFormatter(0, 0, 0, null);\n\n        // create a series composed of 3 \"segments\"; series portions separated by null values:\n        SimpleXYSeries series = new SimpleXYSeries(\n                SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, \"some data\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        xyPlot.addSeries(series, formatter);\n        LineAndPointRenderer renderer = xyPlot.getRenderer(LineAndPointRenderer.class);\n\n        assertEquals(0, renderer.pointsCaches.size());\n\n        // should generate a new pointCache:\n        renderer.getPointsCache(series);\n        assertEquals(1, renderer.pointsCaches.size());\n\n        // culling should not delete it since it is\n        // registered in the series registry:\n        renderer.getPointsCache(series);\n        assertEquals(1, renderer.pointsCaches.size());\n        renderer.cullPointsCache();\n        assertEquals(1, renderer.pointsCaches.size());\n\n        // unregister the series.  this time, culling should remove the series\n        // from the points cache:\n        xyPlot.removeSeries(series);\n        renderer.cullPointsCache();\n        assertEquals(0, renderer.pointsCaches.size());\n    }", "signature": "void testCullPointsCache()", "full_signature": "@Test public void testCullPointsCache()", "class_method_signature": "LineAndPointRendererTest.testCullPointsCache()", "testcase": true, "constructor": false, "invocations": ["addSeries", "getRenderer", "assertEquals", "size", "getPointsCache", "assertEquals", "size", "getPointsCache", "assertEquals", "size", "cullPointsCache", "assertEquals", "size", "removeSeries", "cullPointsCache", "assertEquals", "size"]}, "focal_class": {"identifier": "LineAndPointRenderer", "superclass": "extends XYSeriesRenderer<XYSeries, FormatterType>", "interfaces": "", "fields": [{"original_string": "protected static final int ZERO = 0;", "modifier": "protected static final", "type": "int", "declarator": "ZERO = 0", "var_name": "ZERO"}, {"original_string": "protected static final int ONE = 1;", "modifier": "protected static final", "type": "int", "declarator": "ONE = 1", "var_name": "ONE"}, {"original_string": "private final Path path = new Path();", "modifier": "private final", "type": "Path", "declarator": "path = new Path()", "var_name": "path"}, {"original_string": "protected final ConcurrentHashMap<XYSeries, ArrayList<PointF>> pointsCaches\n            = new ConcurrentHashMap<>(2, 0.75f, 2);", "modifier": "protected final", "type": "ConcurrentHashMap<XYSeries, ArrayList<PointF>>", "declarator": "pointsCaches\n            = new ConcurrentHashMap<>(2, 0.75f, 2)", "var_name": "pointsCaches"}], "methods": [{"identifier": "LineAndPointRenderer", "parameters": "(XYPlot plot)", "modifiers": "public", "return": "", "signature": " LineAndPointRenderer(XYPlot plot)", "full_signature": "public  LineAndPointRenderer(XYPlot plot)", "class_method_signature": "LineAndPointRenderer.LineAndPointRenderer(XYPlot plot)", "testcase": false, "constructor": true}, {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "modifiers": "@Override public", "return": "void", "signature": "void onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "full_signature": "@Override public void onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "class_method_signature": "LineAndPointRenderer.onRender(Canvas canvas, RectF plotArea, XYSeries series, FormatterType formatter, RenderStack stack)", "testcase": false, "constructor": false}, {"identifier": "doDrawLegendIcon", "parameters": "(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "modifiers": "@Override public", "return": "void", "signature": "void doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "full_signature": "@Override public void doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.doDrawLegendIcon(Canvas canvas, RectF rect, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "appendToPath", "parameters": "(Path path, PointF thisPoint, PointF lastPoint)", "modifiers": "protected", "return": "void", "signature": "void appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "full_signature": "protected void appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "class_method_signature": "LineAndPointRenderer.appendToPath(Path path, PointF thisPoint, PointF lastPoint)", "testcase": false, "constructor": false}, {"identifier": "getPointsCache", "parameters": "(XYSeries series)", "modifiers": "protected", "return": "ArrayList<PointF>", "signature": "ArrayList<PointF> getPointsCache(XYSeries series)", "full_signature": "protected ArrayList<PointF> getPointsCache(XYSeries series)", "class_method_signature": "LineAndPointRenderer.getPointsCache(XYSeries series)", "testcase": false, "constructor": false}, {"identifier": "cullPointsCache", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void cullPointsCache()", "full_signature": "protected void cullPointsCache()", "class_method_signature": "LineAndPointRenderer.cullPointsCache()", "testcase": false, "constructor": false}, {"identifier": "drawSeries", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "full_signature": "protected void drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.drawSeries(Canvas canvas, RectF plotArea, XYSeries series, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "getInterpolator", "parameters": "(InterpolationParams params)", "modifiers": "protected", "return": "Interpolator", "signature": "Interpolator getInterpolator(InterpolationParams params)", "full_signature": "protected Interpolator getInterpolator(InterpolationParams params)", "class_method_signature": "LineAndPointRenderer.getInterpolator(InterpolationParams params)", "testcase": false, "constructor": false}, {"identifier": "convertPoint", "parameters": "(XYCoords coord, RectF plotArea)", "modifiers": "protected", "return": "PointF", "signature": "PointF convertPoint(XYCoords coord, RectF plotArea)", "full_signature": "protected PointF convertPoint(XYCoords coord, RectF plotArea)", "class_method_signature": "LineAndPointRenderer.convertPoint(XYCoords coord, RectF plotArea)", "testcase": false, "constructor": false}, {"identifier": "renderPoints", "parameters": "(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "full_signature": "protected void renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.renderPoints(Canvas canvas, RectF plotArea, XYSeries series, int iStart, int iEnd, List<PointF> points,\n                                LineAndPointFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "renderPath", "parameters": "(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "modifiers": "protected", "return": "void", "signature": "void renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "full_signature": "protected void renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "class_method_signature": "LineAndPointRenderer.renderPath(Canvas canvas, RectF plotArea, Path path, PointF firstPoint, PointF lastPoint, LineAndPointFormatter formatter)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/LineAndPointRenderer.java"}, "focal_method": {"identifier": "cullPointsCache", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void cullPointsCache() {\n        for(XYSeries series : pointsCaches.keySet()) {\n            if(!getPlot().getRegistry().contains(series, LineAndPointFormatter.class)) {\n                pointsCaches.remove(series);\n            }\n        }\n    }", "signature": "void cullPointsCache()", "full_signature": "protected void cullPointsCache()", "class_method_signature": "LineAndPointRenderer.cullPointsCache()", "testcase": false, "constructor": false, "invocations": ["keySet", "contains", "getRegistry", "getPlot", "remove"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}