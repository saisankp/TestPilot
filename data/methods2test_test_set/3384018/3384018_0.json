{"test_class": {"identifier": "TestRequestClientConnControl", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/protocol/TestRequestClientConnControl.java"}, "test_case": {"identifier": "testRequestParameterCheck", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void testRequestParameterCheck() throws Exception {\n        HttpContext context = new BasicHttpContext();\n        HttpRequestInterceptor interceptor = new RequestClientConnControl();\n        interceptor.process(null, context);\n    }", "signature": "void testRequestParameterCheck()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void testRequestParameterCheck()", "class_method_signature": "TestRequestClientConnControl.testRequestParameterCheck()", "testcase": true, "constructor": false, "invocations": ["process"]}, "focal_class": {"identifier": "RequestClientConnControl", "superclass": "", "interfaces": "implements HttpRequestInterceptor", "fields": [{"original_string": "private final Log log = LogFactory.getLog(getClass());", "modifier": "private final", "type": "Log", "declarator": "log = LogFactory.getLog(getClass())", "var_name": "log"}, {"original_string": "private static final String PROXY_CONN_DIRECTIVE = \"Proxy-Connection\";", "modifier": "private static final", "type": "String", "declarator": "PROXY_CONN_DIRECTIVE = \"Proxy-Connection\"", "var_name": "PROXY_CONN_DIRECTIVE"}], "methods": [{"identifier": "RequestClientConnControl", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequestClientConnControl()", "full_signature": "public  RequestClientConnControl()", "class_method_signature": "RequestClientConnControl.RequestClientConnControl()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestClientConnControl.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/protocol/RequestClientConnControl.java"}, "focal_method": {"identifier": "process", "parameters": "(final HttpRequest request, final HttpContext context)", "modifiers": "public", "return": "void", "body": "public void process(final HttpRequest request, final HttpContext context)\n            throws HttpException, IOException {\n        if (request == null) {\n            throw new IllegalArgumentException(\"HTTP request may not be null\");\n        }\n\n        String method = request.getRequestLine().getMethod();\n        if (method.equalsIgnoreCase(\"CONNECT\")) {\n            request.setHeader(PROXY_CONN_DIRECTIVE, HTTP.CONN_KEEP_ALIVE);\n            return;\n        }\n\n        // Obtain the client connection (required)\n        HttpRoutedConnection conn = (HttpRoutedConnection) context.getAttribute(\n                ExecutionContext.HTTP_CONNECTION);\n        if (conn == null) {\n            this.log.debug(\"HTTP connection not set in the context\");\n            return;\n        }\n\n        HttpRoute route = conn.getRoute();\n\n        if (route.getHopCount() == 1 || route.isTunnelled()) {\n            if (!request.containsHeader(HTTP.CONN_DIRECTIVE)) {\n                request.addHeader(HTTP.CONN_DIRECTIVE, HTTP.CONN_KEEP_ALIVE);\n            }\n        }\n        if (route.getHopCount() == 2 && !route.isTunnelled()) {\n            if (!request.containsHeader(PROXY_CONN_DIRECTIVE)) {\n                request.addHeader(PROXY_CONN_DIRECTIVE, HTTP.CONN_KEEP_ALIVE);\n            }\n        }\n    }", "signature": "void process(final HttpRequest request, final HttpContext context)", "full_signature": "public void process(final HttpRequest request, final HttpContext context)", "class_method_signature": "RequestClientConnControl.process(final HttpRequest request, final HttpContext context)", "testcase": false, "constructor": false, "invocations": ["getMethod", "getRequestLine", "equalsIgnoreCase", "setHeader", "getAttribute", "debug", "getRoute", "getHopCount", "isTunnelled", "containsHeader", "addHeader", "getHopCount", "isTunnelled", "containsHeader", "addHeader"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}