{"test_class": {"identifier": "TestBrowserCompatSpec", "superclass": "", "interfaces": "", "fields": [], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/impl/cookie/TestBrowserCompatSpec.java"}, "test_case": {"identifier": "testNullCookieValueFormatting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNullCookieValueFormatting() {\n        BasicClientCookie cookie = new BasicClientCookie(\"name\", null);\n        cookie.setDomain(\".whatever.com\");\n        cookie.setAttribute(ClientCookie.DOMAIN_ATTR, cookie.getDomain());\n        cookie.setPath(\"/\");\n        cookie.setAttribute(ClientCookie.PATH_ATTR, cookie.getPath());\n\n        CookieSpec cookiespec = new BrowserCompatSpec();\n        List<Cookie> cookies = new ArrayList<Cookie>(1);\n        cookies.add(cookie);\n        List<Header> headers = cookiespec.formatCookies(cookies);\n        Assert.assertNotNull(headers);\n        Assert.assertEquals(1, headers.size());\n        Assert.assertEquals(\"name=\", headers.get(0).getValue());\n    }", "signature": "void testNullCookieValueFormatting()", "full_signature": "@Test public void testNullCookieValueFormatting()", "class_method_signature": "TestBrowserCompatSpec.testNullCookieValueFormatting()", "testcase": true, "constructor": false, "invocations": ["setDomain", "setAttribute", "getDomain", "setPath", "setAttribute", "getPath", "add", "formatCookies", "assertNotNull", "assertEquals", "size", "assertEquals", "getValue", "get"]}, "focal_class": {"identifier": "BrowserCompatSpec", "superclass": "extends CookieSpecBase", "interfaces": "", "fields": [{"original_string": "@Deprecated\n    protected static final String[] DATE_PATTERNS = new String[] {\n            DateUtils.PATTERN_RFC1123,\n            DateUtils.PATTERN_RFC1036,\n            DateUtils.PATTERN_ASCTIME,\n            \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE, dd MMM yy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE dd MMM yyyy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE dd-MMM-yy HH:mm:ss z\",\n            \"EEE dd MMM yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MM-yyyy HH:mm:ss z\",\n        };", "modifier": "@Deprecated\n    protected static final", "type": "String[]", "declarator": "DATE_PATTERNS = new String[] {\n            DateUtils.PATTERN_RFC1123,\n            DateUtils.PATTERN_RFC1036,\n            DateUtils.PATTERN_ASCTIME,\n            \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE, dd MMM yy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE dd MMM yyyy HH:mm:ss z\",\n            \"EEE dd-MMM-yyyy HH-mm-ss z\",\n            \"EEE dd-MMM-yy HH:mm:ss z\",\n            \"EEE dd MMM yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yy HH:mm:ss z\",\n            \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n            \"EEE, dd-MM-yyyy HH:mm:ss z\",\n        }", "var_name": "DATE_PATTERNS"}, {"original_string": "private static final String[] DEFAULT_DATE_PATTERNS = new String[] {\n        DateUtils.PATTERN_RFC1123,\n        DateUtils.PATTERN_RFC1036,\n        DateUtils.PATTERN_ASCTIME,\n        \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE, dd MMM yy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE dd MMM yyyy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE dd-MMM-yy HH:mm:ss z\",\n        \"EEE dd MMM yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MM-yyyy HH:mm:ss z\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_DATE_PATTERNS = new String[] {\n        DateUtils.PATTERN_RFC1123,\n        DateUtils.PATTERN_RFC1036,\n        DateUtils.PATTERN_ASCTIME,\n        \"EEE, dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE, dd MMM yy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE dd MMM yyyy HH:mm:ss z\",\n        \"EEE dd-MMM-yyyy HH-mm-ss z\",\n        \"EEE dd-MMM-yy HH:mm:ss z\",\n        \"EEE dd MMM yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yy HH:mm:ss z\",\n        \"EEE,dd-MMM-yyyy HH:mm:ss z\",\n        \"EEE, dd-MM-yyyy HH:mm:ss z\",\n    }", "var_name": "DEFAULT_DATE_PATTERNS"}, {"original_string": "private final String[] datepatterns;", "modifier": "private final", "type": "String[]", "declarator": "datepatterns", "var_name": "datepatterns"}], "methods": [{"identifier": "BrowserCompatSpec", "parameters": "(final String[] datepatterns)", "modifiers": "public", "return": "", "signature": " BrowserCompatSpec(final String[] datepatterns)", "full_signature": "public  BrowserCompatSpec(final String[] datepatterns)", "class_method_signature": "BrowserCompatSpec.BrowserCompatSpec(final String[] datepatterns)", "testcase": false, "constructor": true}, {"identifier": "BrowserCompatSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " BrowserCompatSpec()", "full_signature": "public  BrowserCompatSpec()", "class_method_signature": "BrowserCompatSpec.BrowserCompatSpec()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final Header header, final CookieOrigin origin)", "modifiers": "public", "return": "List<Cookie>", "signature": "List<Cookie> parse(final Header header, final CookieOrigin origin)", "full_signature": "public List<Cookie> parse(final Header header, final CookieOrigin origin)", "class_method_signature": "BrowserCompatSpec.parse(final Header header, final CookieOrigin origin)", "testcase": false, "constructor": false}, {"identifier": "formatCookies", "parameters": "(final List<Cookie> cookies)", "modifiers": "public", "return": "List<Header>", "signature": "List<Header> formatCookies(final List<Cookie> cookies)", "full_signature": "public List<Header> formatCookies(final List<Cookie> cookies)", "class_method_signature": "BrowserCompatSpec.formatCookies(final List<Cookie> cookies)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVersion()", "full_signature": "public int getVersion()", "class_method_signature": "BrowserCompatSpec.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getVersionHeader", "parameters": "()", "modifiers": "public", "return": "Header", "signature": "Header getVersionHeader()", "full_signature": "public Header getVersionHeader()", "class_method_signature": "BrowserCompatSpec.getVersionHeader()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BrowserCompatSpec.toString()", "testcase": false, "constructor": false}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/impl/cookie/BrowserCompatSpec.java"}, "focal_method": {"identifier": "formatCookies", "parameters": "(final List<Cookie> cookies)", "modifiers": "public", "return": "List<Header>", "body": "public List<Header> formatCookies(final List<Cookie> cookies) {\n        if (cookies == null) {\n            throw new IllegalArgumentException(\"List of cookies may not be null\");\n        }\n        if (cookies.isEmpty()) {\n            throw new IllegalArgumentException(\"List of cookies may not be empty\");\n        }\n        CharArrayBuffer buffer = new CharArrayBuffer(20 * cookies.size());\n        buffer.append(SM.COOKIE);\n        buffer.append(\": \");\n        for (int i = 0; i < cookies.size(); i++) {\n            Cookie cookie = cookies.get(i);\n            if (i > 0) {\n                buffer.append(\"; \");\n            }\n            buffer.append(cookie.getName());\n            buffer.append(\"=\");\n            String s = cookie.getValue();\n            if (s != null) {\n                buffer.append(s);\n            }\n        }\n        List<Header> headers = new ArrayList<Header>(1);\n        headers.add(new BufferedHeader(buffer));\n        return headers;\n    }", "signature": "List<Header> formatCookies(final List<Cookie> cookies)", "full_signature": "public List<Header> formatCookies(final List<Cookie> cookies)", "class_method_signature": "BrowserCompatSpec.formatCookies(final List<Cookie> cookies)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "append", "append", "size", "get", "append", "append", "getName", "append", "getValue", "append", "add"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}