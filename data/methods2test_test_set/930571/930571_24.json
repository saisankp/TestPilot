{"test_class": {"identifier": "DeploymentIdsPreprocessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String COL_ID = \"DEPLOYMENTID\";", "modifier": "private static", "type": "String", "declarator": "COL_ID = \"DEPLOYMENTID\"", "var_name": "COL_ID"}, {"original_string": "private static String FAIL_COL_ID = \"TASKID\";", "modifier": "private static", "type": "String", "declarator": "FAIL_COL_ID = \"TASKID\"", "var_name": "FAIL_COL_ID"}, {"original_string": "@Mock\n    IdentityProvider identityProvider;", "modifier": "@Mock", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "@Mock\n    DeploymentRolesManager deploymentRolesManager;", "modifier": "@Mock", "type": "DeploymentRolesManager", "declarator": "deploymentRolesManager", "var_name": "deploymentRolesManager"}, {"original_string": "DataSetLookup dataSetLookup;", "modifier": "", "type": "DataSetLookup", "declarator": "dataSetLookup", "var_name": "dataSetLookup"}, {"original_string": "DeploymentIdsPreprocessor preprocessor;", "modifier": "", "type": "DeploymentIdsPreprocessor", "declarator": "preprocessor", "var_name": "preprocessor"}], "file": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/query/preprocessor/DeploymentIdsPreprocessorTest.java"}, "test_case": {"identifier": "testQueryWithUserAvailableDeployments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryWithUserAvailableDeployments() {\n        dataSetLookup = spy(new DataSetLookup());\n        String deploymentId1 = \"deployment1\";\n        String deploymentId2 = \"deployment2\";\n\n        when(deploymentRolesManager.getDeploymentsForUser(identityProvider)).thenReturn( Arrays.asList(deploymentId1,deploymentId2));\n\n        preprocessor.preprocess(dataSetLookup);\n\n        assertEquals(\"DEPLOYMENTID in deployment1, deployment2\",\n                     dataSetLookup.getFirstFilterOp().getColumnFilterList().get(0).toString());\n    }", "signature": "void testQueryWithUserAvailableDeployments()", "full_signature": "@Test public void testQueryWithUserAvailableDeployments()", "class_method_signature": "DeploymentIdsPreprocessorTest.testQueryWithUserAvailableDeployments()", "testcase": true, "constructor": false, "invocations": ["spy", "thenReturn", "when", "getDeploymentsForUser", "asList", "preprocess", "assertEquals", "toString", "get", "getColumnFilterList", "getFirstFilterOp"]}, "focal_class": {"identifier": "DeploymentIdsPreprocessor", "superclass": "", "interfaces": "implements DataSetPreprocessor", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeploymentIdsPreprocessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeploymentIdsPreprocessor.class)", "var_name": "LOGGER"}, {"original_string": "private DeploymentRolesManager deploymentRolesManager;", "modifier": "private", "type": "DeploymentRolesManager", "declarator": "deploymentRolesManager", "var_name": "deploymentRolesManager"}, {"original_string": "private IdentityProvider identityProvider;", "modifier": "private", "type": "IdentityProvider", "declarator": "identityProvider", "var_name": "identityProvider"}, {"original_string": "private String columnId;", "modifier": "private", "type": "String", "declarator": "columnId", "var_name": "columnId"}, {"original_string": "private String impossibleConditionColumnId;", "modifier": "private", "type": "String", "declarator": "impossibleConditionColumnId", "var_name": "impossibleConditionColumnId"}], "methods": [{"identifier": "DeploymentIdsPreprocessor", "parameters": "(DeploymentRolesManager deploymentRolesManager,\n                                     IdentityProvider identityProvider,\n                                     String columnId,\n                                     String impossibleConditionColumnId)", "modifiers": "public", "return": "", "signature": " DeploymentIdsPreprocessor(DeploymentRolesManager deploymentRolesManager,\n                                     IdentityProvider identityProvider,\n                                     String columnId,\n                                     String impossibleConditionColumnId)", "full_signature": "public  DeploymentIdsPreprocessor(DeploymentRolesManager deploymentRolesManager,\n                                     IdentityProvider identityProvider,\n                                     String columnId,\n                                     String impossibleConditionColumnId)", "class_method_signature": "DeploymentIdsPreprocessor.DeploymentIdsPreprocessor(DeploymentRolesManager deploymentRolesManager,\n                                     IdentityProvider identityProvider,\n                                     String columnId,\n                                     String impossibleConditionColumnId)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@Override public", "return": "void", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "DeploymentIdsPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/query/preprocessor/DeploymentIdsPreprocessor.java"}, "focal_method": {"identifier": "preprocess", "parameters": "(DataSetLookup lookup)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void preprocess(DataSetLookup lookup) {\n        if (identityProvider == null) {\n            return;\n        }\n\n        final List<String> deploymentIds = deploymentRolesManager.getDeploymentsForUser(identityProvider);\n        ColumnFilter columnFilter;\n        if(deploymentIds != null  && !deploymentIds.isEmpty()){\n            columnFilter = in(columnId, deploymentIds);\n        }  else {\n            columnFilter = equalsTo(impossibleConditionColumnId,-1);\n        }\n\n        LOGGER.debug(\"Adding column filter: {}\", columnFilter);\n\n        if (lookup.getFirstFilterOp() != null) {\n            lookup.getFirstFilterOp().addFilterColumn(columnFilter);\n        } else {\n            DataSetFilter filter = new DataSetFilter();\n            filter.addFilterColumn(columnFilter);\n            lookup.addOperation(filter);\n        }\n    }", "signature": "void preprocess(DataSetLookup lookup)", "full_signature": "@Override public void preprocess(DataSetLookup lookup)", "class_method_signature": "DeploymentIdsPreprocessor.preprocess(DataSetLookup lookup)", "testcase": false, "constructor": false, "invocations": ["getDeploymentsForUser", "isEmpty", "in", "equalsTo", "debug", "getFirstFilterOp", "addFilterColumn", "getFirstFilterOp", "addFilterColumn", "addOperation"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}