{"test_class": {"identifier": "VirtualMachineHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "VirtualMachineHandler vmHandler;", "modifier": "", "type": "VirtualMachineHandler", "declarator": "vmHandler", "var_name": "vmHandler"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/util/VirtualMachineHandlerTest.java"}, "test_case": {"identifier": "emptyPid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void emptyPid() {\n        assertNull(vmHandler.attachVirtualMachine());\n    }", "signature": "void emptyPid()", "full_signature": "@Test public void emptyPid()", "class_method_signature": "VirtualMachineHandlerTest.emptyPid()", "testcase": true, "constructor": false, "invocations": ["assertNull", "attachVirtualMachine"]}, "focal_class": {"identifier": "VirtualMachineHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OptionsAndArgs options;", "modifier": "private", "type": "OptionsAndArgs", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "VirtualMachineHandler", "parameters": "(OptionsAndArgs pOptions)", "modifiers": "public", "return": "", "signature": " VirtualMachineHandler(OptionsAndArgs pOptions)", "full_signature": "public  VirtualMachineHandler(OptionsAndArgs pOptions)", "class_method_signature": "VirtualMachineHandler.VirtualMachineHandler(OptionsAndArgs pOptions)", "testcase": false, "constructor": true}, {"identifier": "attachVirtualMachine", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object attachVirtualMachine()", "full_signature": "public Object attachVirtualMachine()", "class_method_signature": "VirtualMachineHandler.attachVirtualMachine()", "testcase": false, "constructor": false}, {"identifier": "getPidErrorMesssage", "parameters": "(String pid, String label, Class vmClass)", "modifiers": "private", "return": "String", "signature": "String getPidErrorMesssage(String pid, String label, Class vmClass)", "full_signature": "private String getPidErrorMesssage(String pid, String label, Class vmClass)", "class_method_signature": "VirtualMachineHandler.getPidErrorMesssage(String pid, String label, Class vmClass)", "testcase": false, "constructor": false}, {"identifier": "detachAgent", "parameters": "(Object pVm)", "modifiers": "public", "return": "void", "signature": "void detachAgent(Object pVm)", "full_signature": "public void detachAgent(Object pVm)", "class_method_signature": "VirtualMachineHandler.detachAgent(Object pVm)", "testcase": false, "constructor": false}, {"identifier": "listProcesses", "parameters": "()", "modifiers": "public", "return": "List<ProcessDescription>", "signature": "List<ProcessDescription> listProcesses()", "full_signature": "public List<ProcessDescription> listProcesses()", "class_method_signature": "VirtualMachineHandler.listProcesses()", "testcase": false, "constructor": false}, {"identifier": "findProcess", "parameters": "(Pattern pPattern)", "modifiers": "public", "return": "ProcessDescription", "signature": "ProcessDescription findProcess(Pattern pPattern)", "full_signature": "public ProcessDescription findProcess(Pattern pPattern)", "class_method_signature": "VirtualMachineHandler.findProcess(Pattern pPattern)", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "(OptionsAndArgs pOpts)", "modifiers": "private", "return": "String", "signature": "String getProcessId(OptionsAndArgs pOpts)", "full_signature": "private String getProcessId(OptionsAndArgs pOpts)", "class_method_signature": "VirtualMachineHandler.getProcessId(OptionsAndArgs pOpts)", "testcase": false, "constructor": false}, {"identifier": "getOwnProcessId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getOwnProcessId()", "full_signature": "private String getOwnProcessId()", "class_method_signature": "VirtualMachineHandler.getOwnProcessId()", "testcase": false, "constructor": false}, {"identifier": "lookupVirtualMachineClass", "parameters": "()", "modifiers": "private", "return": "Class", "signature": "Class lookupVirtualMachineClass()", "full_signature": "private Class lookupVirtualMachineClass()", "class_method_signature": "VirtualMachineHandler.lookupVirtualMachineClass()", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/util/VirtualMachineHandler.java"}, "focal_method": {"identifier": "attachVirtualMachine", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object attachVirtualMachine() {\n        if (options.getPid() == null && options.getProcessPattern() == null) {\n            return null;\n        }\n        Class vmClass = lookupVirtualMachineClass();\n        String pid = null;\n        try {\n            Method method = vmClass.getMethod(\"attach\",String.class);\n            pid = getProcessId(options);\n            return method.invoke(null, pid);\n        } catch (NoSuchMethodException e) {\n            throw new ProcessingException(\"Internal: No method 'attach' found on \" + vmClass,e,options);\n        } catch (InvocationTargetException e) {\n            throw new ProcessingException(getPidErrorMesssage(pid,\"InvocationTarget\",vmClass),e,options);\n        } catch (IllegalAccessException e) {\n            throw new ProcessingException(getPidErrorMesssage(pid, \"IllegalAccessException\", vmClass),e,options);\n        } catch (IllegalArgumentException e) {\n            throw new ProcessingException(\"Illegal Argument\",e,options);\n        }\n    }", "signature": "Object attachVirtualMachine()", "full_signature": "public Object attachVirtualMachine()", "class_method_signature": "VirtualMachineHandler.attachVirtualMachine()", "testcase": false, "constructor": false, "invocations": ["getPid", "getProcessPattern", "lookupVirtualMachineClass", "getMethod", "getProcessId", "invoke", "getPidErrorMesssage", "getPidErrorMesssage"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}