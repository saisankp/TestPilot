{"test_class": {"identifier": "TCPTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] pktSerialized = new byte[] { 0x45, 0x20,\n            0x00, 0x34, 0x1d, (byte) 0x85, 0x00, 0x00, 0x32, 0x06,\n            0x31, 0x1e, 0x4a, 0x7d, 0x2d, 0x6d, (byte) 0xc0, (byte) 0xa8,\n            0x01, 0x6f, 0x03, (byte) 0xe1, (byte) 0xc0, 0x32, (byte) 0xe3, (byte) 0xad,\n            (byte) 0xee, (byte) 0x88, (byte) 0xb7, (byte) 0xda, (byte) 0xd8, 0x24, (byte) 0x80, 0x10,\n            0x01, 0x0b, 0x59, 0x33, 0x00, 0x00, 0x01, 0x01,\n            0x08, 0x0a, 0x20, (byte) 0x9a, 0x41, 0x04, 0x07, 0x76,\n            0x53, 0x1f};", "modifier": "private", "type": "byte[]", "declarator": "pktSerialized = new byte[] { 0x45, 0x20,\n            0x00, 0x34, 0x1d, (byte) 0x85, 0x00, 0x00, 0x32, 0x06,\n            0x31, 0x1e, 0x4a, 0x7d, 0x2d, 0x6d, (byte) 0xc0, (byte) 0xa8,\n            0x01, 0x6f, 0x03, (byte) 0xe1, (byte) 0xc0, 0x32, (byte) 0xe3, (byte) 0xad,\n            (byte) 0xee, (byte) 0x88, (byte) 0xb7, (byte) 0xda, (byte) 0xd8, 0x24, (byte) 0x80, 0x10,\n            0x01, 0x0b, 0x59, 0x33, 0x00, 0x00, 0x01, 0x01,\n            0x08, 0x0a, 0x20, (byte) 0x9a, 0x41, 0x04, 0x07, 0x76,\n            0x53, 0x1f}", "var_name": "pktSerialized"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/packet/TCPTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserialize() throws PacketParsingException {\n        IPacket packet = new IPv4();\n        packet.deserialize(pktSerialized, 0, pktSerialized.length);\n        byte[] pktSerialized1 = packet.serialize();\n        assertTrue(Arrays.equals(pktSerialized, pktSerialized1));\n    }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "TCPTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["deserialize", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "TCP", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "protected TransportPort sourcePort;", "modifier": "protected", "type": "TransportPort", "declarator": "sourcePort", "var_name": "sourcePort"}, {"original_string": "protected TransportPort destinationPort;", "modifier": "protected", "type": "TransportPort", "declarator": "destinationPort", "var_name": "destinationPort"}, {"original_string": "protected int sequence;", "modifier": "protected", "type": "int", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "protected int acknowledge;", "modifier": "protected", "type": "int", "declarator": "acknowledge", "var_name": "acknowledge"}, {"original_string": "protected byte dataOffset;", "modifier": "protected", "type": "byte", "declarator": "dataOffset", "var_name": "dataOffset"}, {"original_string": "protected short flags;", "modifier": "protected", "type": "short", "declarator": "flags", "var_name": "flags"}, {"original_string": "protected short windowSize;", "modifier": "protected", "type": "short", "declarator": "windowSize", "var_name": "windowSize"}, {"original_string": "protected short checksum;", "modifier": "protected", "type": "short", "declarator": "checksum", "var_name": "checksum"}, {"original_string": "protected short urgentPointer;", "modifier": "protected", "type": "short", "declarator": "urgentPointer", "var_name": "urgentPointer"}, {"original_string": "protected byte[] options;", "modifier": "protected", "type": "byte[]", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "getSourcePort", "parameters": "()", "modifiers": "public", "return": "TransportPort", "signature": "TransportPort getSourcePort()", "full_signature": "public TransportPort getSourcePort()", "class_method_signature": "TCP.getSourcePort()", "testcase": false, "constructor": false}, {"identifier": "setSourcePort", "parameters": "(TransportPort sourcePort)", "modifiers": "public", "return": "TCP", "signature": "TCP setSourcePort(TransportPort sourcePort)", "full_signature": "public TCP setSourcePort(TransportPort sourcePort)", "class_method_signature": "TCP.setSourcePort(TransportPort sourcePort)", "testcase": false, "constructor": false}, {"identifier": "setSourcePort", "parameters": "(int sourcePort)", "modifiers": "public", "return": "TCP", "signature": "TCP setSourcePort(int sourcePort)", "full_signature": "public TCP setSourcePort(int sourcePort)", "class_method_signature": "TCP.setSourcePort(int sourcePort)", "testcase": false, "constructor": false}, {"identifier": "getDestinationPort", "parameters": "()", "modifiers": "public", "return": "TransportPort", "signature": "TransportPort getDestinationPort()", "full_signature": "public TransportPort getDestinationPort()", "class_method_signature": "TCP.getDestinationPort()", "testcase": false, "constructor": false}, {"identifier": "setDestinationPort", "parameters": "(TransportPort destinationPort)", "modifiers": "public", "return": "TCP", "signature": "TCP setDestinationPort(TransportPort destinationPort)", "full_signature": "public TCP setDestinationPort(TransportPort destinationPort)", "class_method_signature": "TCP.setDestinationPort(TransportPort destinationPort)", "testcase": false, "constructor": false}, {"identifier": "setDestinationPort", "parameters": "(int destinationPort)", "modifiers": "public", "return": "TCP", "signature": "TCP setDestinationPort(int destinationPort)", "full_signature": "public TCP setDestinationPort(int destinationPort)", "class_method_signature": "TCP.setDestinationPort(int destinationPort)", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getChecksum()", "full_signature": "public short getChecksum()", "class_method_signature": "TCP.getChecksum()", "testcase": false, "constructor": false}, {"identifier": "getSequence", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSequence()", "full_signature": "public int getSequence()", "class_method_signature": "TCP.getSequence()", "testcase": false, "constructor": false}, {"identifier": "setSequence", "parameters": "(int seq)", "modifiers": "public", "return": "TCP", "signature": "TCP setSequence(int seq)", "full_signature": "public TCP setSequence(int seq)", "class_method_signature": "TCP.setSequence(int seq)", "testcase": false, "constructor": false}, {"identifier": "getAcknowledge", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAcknowledge()", "full_signature": "public int getAcknowledge()", "class_method_signature": "TCP.getAcknowledge()", "testcase": false, "constructor": false}, {"identifier": "setAcknowledge", "parameters": "(int ack)", "modifiers": "public", "return": "TCP", "signature": "TCP setAcknowledge(int ack)", "full_signature": "public TCP setAcknowledge(int ack)", "class_method_signature": "TCP.setAcknowledge(int ack)", "testcase": false, "constructor": false}, {"identifier": "getDataOffset", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getDataOffset()", "full_signature": "public byte getDataOffset()", "class_method_signature": "TCP.getDataOffset()", "testcase": false, "constructor": false}, {"identifier": "setDataOffset", "parameters": "(byte offset)", "modifiers": "public", "return": "TCP", "signature": "TCP setDataOffset(byte offset)", "full_signature": "public TCP setDataOffset(byte offset)", "class_method_signature": "TCP.setDataOffset(byte offset)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getFlags()", "full_signature": "public short getFlags()", "class_method_signature": "TCP.getFlags()", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(short flags)", "modifiers": "public", "return": "TCP", "signature": "TCP setFlags(short flags)", "full_signature": "public TCP setFlags(short flags)", "class_method_signature": "TCP.setFlags(short flags)", "testcase": false, "constructor": false}, {"identifier": "getWindowSize", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getWindowSize()", "full_signature": "public short getWindowSize()", "class_method_signature": "TCP.getWindowSize()", "testcase": false, "constructor": false}, {"identifier": "setWindowSize", "parameters": "(short windowSize)", "modifiers": "public", "return": "TCP", "signature": "TCP setWindowSize(short windowSize)", "full_signature": "public TCP setWindowSize(short windowSize)", "class_method_signature": "TCP.setWindowSize(short windowSize)", "testcase": false, "constructor": false}, {"identifier": "getTcpChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getTcpChecksum()", "full_signature": "public short getTcpChecksum()", "class_method_signature": "TCP.getTcpChecksum()", "testcase": false, "constructor": false}, {"identifier": "setTcpChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "TCP", "signature": "TCP setTcpChecksum(short checksum)", "full_signature": "public TCP setTcpChecksum(short checksum)", "class_method_signature": "TCP.setTcpChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "resetChecksum", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetChecksum()", "full_signature": "@Override public void resetChecksum()", "class_method_signature": "TCP.resetChecksum()", "testcase": false, "constructor": false}, {"identifier": "getUrgentPointer", "parameters": "(short urgentPointer)", "modifiers": "public", "return": "short", "signature": "short getUrgentPointer(short urgentPointer)", "full_signature": "public short getUrgentPointer(short urgentPointer)", "class_method_signature": "TCP.getUrgentPointer(short urgentPointer)", "testcase": false, "constructor": false}, {"identifier": "setUrgentPointer", "parameters": "(short urgentPointer)", "modifiers": "public", "return": "TCP", "signature": "TCP setUrgentPointer(short urgentPointer)", "full_signature": "public TCP setUrgentPointer(short urgentPointer)", "class_method_signature": "TCP.setUrgentPointer(short urgentPointer)", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getOptions()", "full_signature": "public byte[] getOptions()", "class_method_signature": "TCP.getOptions()", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(byte[] options)", "modifiers": "public", "return": "TCP", "signature": "TCP setOptions(byte[] options)", "full_signature": "public TCP setOptions(byte[] options)", "class_method_signature": "TCP.setOptions(byte[] options)", "testcase": false, "constructor": false}, {"identifier": "setChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "TCP", "signature": "TCP setChecksum(short checksum)", "full_signature": "public TCP setChecksum(short checksum)", "class_method_signature": "TCP.setChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "TCP.serialize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TCP.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TCP.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "TCP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/packet/TCP.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "body": "@Override\n    public IPacket deserialize(byte[] data, int offset, int length)\n            throws PacketParsingException {\n        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n        this.sourcePort = TransportPort.of((int) (bb.getShort() & 0xffff)); // short will be signed, pos or neg\n        this.destinationPort = TransportPort.of((int) (bb.getShort() & 0xffff)); // convert range 0 to 65534, not -32768 to 32767\n        this.sequence = bb.getInt();\n        this.acknowledge = bb.getInt();\n        this.flags = bb.getShort();\n        this.dataOffset = (byte) ((this.flags >> 12) & 0xf);\n        if (this.dataOffset < 5) {\n            throw new PacketParsingException(\"Invalid tcp header length < 20\");\n        }\n        this.flags = (short) (this.flags & 0x1ff);\n        this.windowSize = bb.getShort();\n        this.checksum = bb.getShort();\n        this.urgentPointer = bb.getShort();\n        if (this.dataOffset > 5) {\n            int optLength = (dataOffset << 2) - 20;\n            if (bb.limit() < bb.position()+optLength) {\n                optLength = bb.limit() - bb.position();\n            }\n            try {\n                this.options = new byte[optLength];\n                bb.get(this.options, 0, optLength);\n            } catch (IndexOutOfBoundsException e) {\n                this.options = null;\n            }\n        }\n\n        this.payload = new Data();\n        int remLength = bb.limit()-bb.position();\n        this.payload = payload.deserialize(data, bb.position(), remLength);\n        this.payload.setParent(this);\n        return this;\n    }", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "TCP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["wrap", "of", "getShort", "of", "getShort", "getInt", "getInt", "getShort", "getShort", "getShort", "getShort", "limit", "position", "limit", "position", "get", "limit", "position", "deserialize", "position", "setParent"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}