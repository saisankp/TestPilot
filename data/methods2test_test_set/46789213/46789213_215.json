{"test_class": {"identifier": "MersennePrimeModulusTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/builder/numeric/field/MersennePrimeModulusTest.java"}, "test_case": {"identifier": "toStringTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void toStringTest() {\n    MersennePrimeModulus prime = new MersennePrimeModulus(160, 47);\n    assertThat(\n        prime.toString(),\n        CoreMatchers.containsString(\"1461501637330902918203684832716283019655932542929\"));\n  }", "signature": "void toStringTest()", "full_signature": "@Test public void toStringTest()", "class_method_signature": "MersennePrimeModulusTest.toStringTest()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toString", "containsString"]}, "focal_class": {"identifier": "MersennePrimeModulus", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 7869304549721103721L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 7869304549721103721L", "var_name": "serialVersionUID"}, {"original_string": "private final int bitLength;", "modifier": "private final", "type": "int", "declarator": "bitLength", "var_name": "bitLength"}, {"original_string": "private final BigInteger constant;", "modifier": "private final", "type": "BigInteger", "declarator": "constant", "var_name": "constant"}, {"original_string": "private final BigInteger precomputedBitMask;", "modifier": "private final", "type": "BigInteger", "declarator": "precomputedBitMask", "var_name": "precomputedBitMask"}, {"original_string": "private final BigInteger prime;", "modifier": "private final", "type": "BigInteger", "declarator": "prime", "var_name": "prime"}], "methods": [{"identifier": "MersennePrimeModulus", "parameters": "(int bitLength, int constant)", "modifiers": "", "return": "", "signature": " MersennePrimeModulus(int bitLength, int constant)", "full_signature": "  MersennePrimeModulus(int bitLength, int constant)", "class_method_signature": "MersennePrimeModulus.MersennePrimeModulus(int bitLength, int constant)", "testcase": false, "constructor": true}, {"identifier": "getPrime", "parameters": "()", "modifiers": "", "return": "BigInteger", "signature": "BigInteger getPrime()", "full_signature": " BigInteger getPrime()", "class_method_signature": "MersennePrimeModulus.getPrime()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MersennePrimeModulus.toString()", "testcase": false, "constructor": false}, {"identifier": "ensureInField", "parameters": "(BigInteger value)", "modifiers": "", "return": "BigInteger", "signature": "BigInteger ensureInField(BigInteger value)", "full_signature": " BigInteger ensureInField(BigInteger value)", "class_method_signature": "MersennePrimeModulus.ensureInField(BigInteger value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/builder/numeric/field/MersennePrimeModulus.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"MersennePrimeModulus{\"\n        + \"value=\" + prime\n        + '}';\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MersennePrimeModulus.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}