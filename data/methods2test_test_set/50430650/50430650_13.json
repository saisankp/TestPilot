{"test_class": {"identifier": "TagManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Set<String> empty = Collections.emptySet();", "modifier": "final", "type": "Set<String>", "declarator": "empty = Collections.emptySet()", "var_name": "empty"}], "file": "core/src/test/java/com/technophobia/substeps/runner/TagManagerTest.java"}, "test_case": {"identifier": "testEmptyTagManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyTagManager() {\n\n        final TagManager tMgr = new TagManager(\"\");\n\n        Assert.assertTrue(tMgr.acceptTaggedScenario(empty));\n        Assert.assertTrue(tMgr.acceptTaggedScenario(Sets.newHashSet(\"@fred\")));\n        Assert.assertTrue(tMgr.acceptTaggedScenario(Sets.newHashSet(\"@fred\", \"@bob\")));\n\n    }", "signature": "void testEmptyTagManager()", "full_signature": "@Test public void testEmptyTagManager()", "class_method_signature": "TagManagerTest.testEmptyTagManager()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "acceptTaggedScenario", "assertTrue", "acceptTaggedScenario", "newHashSet", "assertTrue", "acceptTaggedScenario", "newHashSet"]}, "focal_class": {"identifier": "TagManager", "superclass": "extends AbstractExecutionNodeVisitor<Boolean>", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(TagManager.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TagManager.class)", "var_name": "log"}, {"original_string": "private static final String IGNORE_TAG_PREFIX = \"--\";", "modifier": "private static final", "type": "String", "declarator": "IGNORE_TAG_PREFIX = \"--\"", "var_name": "IGNORE_TAG_PREFIX"}, {"original_string": "private boolean acceptAll = true;", "modifier": "private", "type": "boolean", "declarator": "acceptAll = true", "var_name": "acceptAll"}, {"original_string": "private Set<String> acceptedTags = null;", "modifier": "private", "type": "Set<String>", "declarator": "acceptedTags = null", "var_name": "acceptedTags"}, {"original_string": "private Set<String> excludedTags = null;", "modifier": "private", "type": "Set<String>", "declarator": "excludedTags = null", "var_name": "excludedTags"}], "methods": [{"identifier": "TagManager", "parameters": "(final String tagList)", "modifiers": "public", "return": "", "signature": " TagManager(final String tagList)", "full_signature": "public  TagManager(final String tagList)", "class_method_signature": "TagManager.TagManager(final String tagList)", "testcase": false, "constructor": true}, {"identifier": "fromTags", "parameters": "(final String tags)", "modifiers": "public static", "return": "TagManager", "signature": "TagManager fromTags(final String tags)", "full_signature": "public static TagManager fromTags(final String tags)", "class_method_signature": "TagManager.fromTags(final String tags)", "testcase": false, "constructor": false}, {"identifier": "insertTagOverlay", "parameters": "(final String textValue)", "modifiers": "public", "return": "void", "signature": "void insertTagOverlay(final String textValue)", "full_signature": "public void insertTagOverlay(final String textValue)", "class_method_signature": "TagManager.insertTagOverlay(final String textValue)", "testcase": false, "constructor": false}, {"identifier": "parseTextValue", "parameters": "(final String annotationValue)", "modifiers": "private", "return": "void", "signature": "void parseTextValue(final String annotationValue)", "full_signature": "private void parseTextValue(final String annotationValue)", "class_method_signature": "TagManager.parseTextValue(final String annotationValue)", "testcase": false, "constructor": false}, {"identifier": "insertTag", "parameters": "(final String tag)", "modifiers": "private", "return": "void", "signature": "void insertTag(final String tag)", "full_signature": "private void insertTag(final String tag)", "class_method_signature": "TagManager.insertTag(final String tag)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(IExecutionNode node)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean visit(IExecutionNode node)", "full_signature": "@Override public Boolean visit(IExecutionNode node)", "class_method_signature": "TagManager.visit(IExecutionNode node)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TaggedNode taggedNode)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean visit(TaggedNode taggedNode)", "full_signature": "@Override public Boolean visit(TaggedNode taggedNode)", "class_method_signature": "TagManager.visit(TaggedNode taggedNode)", "testcase": false, "constructor": false}, {"identifier": "isApplicable", "parameters": "(final IExecutionNode node)", "modifiers": "public", "return": "boolean", "signature": "boolean isApplicable(final IExecutionNode node)", "full_signature": "public boolean isApplicable(final IExecutionNode node)", "class_method_signature": "TagManager.isApplicable(final IExecutionNode node)", "testcase": false, "constructor": false}, {"identifier": "acceptTaggedScenario", "parameters": "(final Set<String> tags)", "modifiers": "public", "return": "boolean", "signature": "boolean acceptTaggedScenario(final Set<String> tags)", "full_signature": "public boolean acceptTaggedScenario(final Set<String> tags)", "class_method_signature": "TagManager.acceptTaggedScenario(final Set<String> tags)", "testcase": false, "constructor": false}, {"identifier": "containsAny", "parameters": "(final Collection<T> col1, final Collection<T> col2)", "modifiers": "private static", "return": "boolean", "signature": "boolean containsAny(final Collection<T> col1, final Collection<T> col2)", "full_signature": "private static boolean containsAny(final Collection<T> col1, final Collection<T> col2)", "class_method_signature": "TagManager.containsAny(final Collection<T> col1, final Collection<T> col2)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final String annotationValue)", "modifiers": "private static", "return": "String[]", "signature": "String[] toArray(final String annotationValue)", "full_signature": "private static String[] toArray(final String annotationValue)", "class_method_signature": "TagManager.toArray(final String annotationValue)", "testcase": false, "constructor": false}, {"identifier": "getAcceptedTags", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAcceptedTags()", "full_signature": "public Set<String> getAcceptedTags()", "class_method_signature": "TagManager.getAcceptedTags()", "testcase": false, "constructor": false}, {"identifier": "normaliseTag", "parameters": "(final String tag)", "modifiers": "private static", "return": "String", "signature": "String normaliseTag(final String tag)", "full_signature": "private static String normaliseTag(final String tag)", "class_method_signature": "TagManager.normaliseTag(final String tag)", "testcase": false, "constructor": false}, {"identifier": "insertCommandLineTags", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void insertCommandLineTags()", "full_signature": "private void insertCommandLineTags()", "class_method_signature": "TagManager.insertCommandLineTags()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/runner/TagManager.java"}, "focal_method": {"identifier": "acceptTaggedScenario", "parameters": "(final Set<String> tags)", "modifiers": "public", "return": "boolean", "body": "public boolean acceptTaggedScenario(final Set<String> tags) {\n\n        if (acceptAll || (acceptedTags.isEmpty() && excludedTags.isEmpty())) {\n            return true;\n        } else if (!acceptedTags.isEmpty()  && (tags == null || tags.isEmpty())) {\n            return false;\n        } else if (containsAny(tags, excludedTags)) {\n            return false;\n        } else {\n            return tags == null || tags.containsAll(acceptedTags);\n        }\n    }", "signature": "boolean acceptTaggedScenario(final Set<String> tags)", "full_signature": "public boolean acceptTaggedScenario(final Set<String> tags)", "class_method_signature": "TagManager.acceptTaggedScenario(final Set<String> tags)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "isEmpty", "isEmpty", "containsAny", "containsAll"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}