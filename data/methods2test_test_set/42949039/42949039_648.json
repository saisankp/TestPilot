{"test_class": {"identifier": "EmrHelperServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AwsServiceHelper awsServiceHelper;", "modifier": "@Mock\n    private", "type": "AwsServiceHelper", "declarator": "awsServiceHelper", "var_name": "awsServiceHelper"}, {"original_string": "@Mock\n    private ConfigurationHelper configurationHelper;", "modifier": "@Mock\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Mock\n    private EmrClusterDefinitionDaoHelper emrClusterDefinitionDaoHelper;", "modifier": "@Mock\n    private", "type": "EmrClusterDefinitionDaoHelper", "declarator": "emrClusterDefinitionDaoHelper", "var_name": "emrClusterDefinitionDaoHelper"}, {"original_string": "@Mock\n    private EmrClusterDefinitionHelper emrClusterDefinitionHelper;", "modifier": "@Mock\n    private", "type": "EmrClusterDefinitionHelper", "declarator": "emrClusterDefinitionHelper", "var_name": "emrClusterDefinitionHelper"}, {"original_string": "@Mock\n    private EmrDao emrDao;", "modifier": "@Mock\n    private", "type": "EmrDao", "declarator": "emrDao", "var_name": "emrDao"}, {"original_string": "@Mock\n    private EmrHelper emrHelper;", "modifier": "@Mock\n    private", "type": "EmrHelper", "declarator": "emrHelper", "var_name": "emrHelper"}, {"original_string": "@InjectMocks\n    private EmrHelperServiceImpl emrHelperServiceImpl;", "modifier": "@InjectMocks\n    private", "type": "EmrHelperServiceImpl", "declarator": "emrHelperServiceImpl", "var_name": "emrHelperServiceImpl"}, {"original_string": "@Mock\n    private EmrPricingHelper emrPricingHelper;", "modifier": "@Mock\n    private", "type": "EmrPricingHelper", "declarator": "emrPricingHelper", "var_name": "emrPricingHelper"}, {"original_string": "@Mock\n    private HerdDao herdDao;", "modifier": "@Mock\n    private", "type": "HerdDao", "declarator": "herdDao", "var_name": "herdDao"}, {"original_string": "@Mock\n    private NamespaceDaoHelper namespaceDaoHelper;", "modifier": "@Mock\n    private", "type": "NamespaceDaoHelper", "declarator": "namespaceDaoHelper", "var_name": "namespaceDaoHelper"}, {"original_string": "@Mock\n    private NamespaceIamRoleAuthorizationHelper namespaceIamRoleAuthorizationHelper;", "modifier": "@Mock\n    private", "type": "NamespaceIamRoleAuthorizationHelper", "declarator": "namespaceIamRoleAuthorizationHelper", "var_name": "namespaceIamRoleAuthorizationHelper"}, {"original_string": "@Mock\n    private XmlHelper xmlHelper;", "modifier": "@Mock\n    private", "type": "XmlHelper", "declarator": "xmlHelper", "var_name": "xmlHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/EmrHelperServiceImplTest.java"}, "test_case": {"identifier": "testOverrideEmrClusterDefinition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverrideEmrClusterDefinition()\n    {\n        EmrClusterDefinition emrClusterDefinition =\n            new EmrClusterDefinition(\"sshKeyPairName\", \"subnetId\", \"logBucket\", true, true, true, true, \"accountId\", \"serviceIamRole\", \"ec2NodeIamProfileName\",\n                \"amiVersion\", \"releaseLabel\", \"hadoopVersion\", \"hiveVersion\", \"pigVersion\", true, Lists.newArrayList(new ScriptDefinition()),\n                Lists.newArrayList(new ScriptDefinition()), \"additionalInfo\", new InstanceDefinitions(), 0,\n                Lists.newArrayList(new EmrClusterDefinitionInstanceFleet()), Lists.newArrayList(new NodeTag()), \"supportedProduct\",\n                Lists.newArrayList(new EmrClusterDefinitionApplication()), Lists.newArrayList(new EmrClusterDefinitionConfiguration()),\n                Lists.newArrayList(new Parameter()), Lists.newArrayList(new Byte(\"0\")), Lists.newArrayList(new HadoopJarStep()),\n                Lists.newArrayList(\"additionalMasterSecurityGroups\"), Lists.newArrayList(\"additionalSlaveSecurityGroups\"), \"securityConfiguration\",\n                \"masterSecurityGroup\", \"slaveSecurityGroup\", \"serviceAccessSecurityGroup\", \"scaleDownBehavior\", new EmrClusterDefinitionKerberosAttributes(),\n                1);\n\n        EmrClusterDefinition emrClusterDefinitionOverride =\n            new EmrClusterDefinition(\"sshKeyPairNameOverride\", \"subnetIdOverride\", \"logBucketOverride\", false, false, false, false, \"accountIdOverride\",\n                \"serviceIamRoleOverride\", \"ec2NodeIamProfileNameOverride\", \"amiVersionOverride\", \"releaseLabelOverride\", \"hadoopVersionOverride\",\n                \"hiveVersionOverride\", \"pigVersionOverride\", false, Lists.newArrayList(new ScriptDefinition(), new ScriptDefinition()),\n                Lists.newArrayList(new ScriptDefinition(), new ScriptDefinition()), \"additionalInfoOverride\", new InstanceDefinitions(), 10,\n                Lists.newArrayList(new EmrClusterDefinitionInstanceFleet(), new EmrClusterDefinitionInstanceFleet()),\n                Lists.newArrayList(new NodeTag(), new NodeTag()), \"supportedProductOverride\",\n                Lists.newArrayList(new EmrClusterDefinitionApplication(), new EmrClusterDefinitionApplication()),\n                Lists.newArrayList(new EmrClusterDefinitionConfiguration(), new EmrClusterDefinitionConfiguration()),\n                Lists.newArrayList(new Parameter(), new Parameter()), Lists.newArrayList(new Byte(\"0\"), new Byte(\"0\")),\n                Lists.newArrayList(new HadoopJarStep(), new HadoopJarStep()),\n                Lists.newArrayList(\"additionalMasterSecurityGroupsOverride\", \"additionalMasterSecurityGroupsOverride\"),\n                Lists.newArrayList(\"additionalSlaveSecurityGroupsOverride\", \"additionalSlaveSecurityGroupsOverride\"), \"securityConfigurationOverride\",\n                \"masterSecurityGroupOverride\", \"slaveSecurityGroupOverride\", \"serviceSecurityGroupOverride\", \"scaleDownBehaviorOverride\",\n                new EmrClusterDefinitionKerberosAttributes(), 1);\n\n        // Call the method under test.\n        emrHelperServiceImpl.overrideEmrClusterDefinition(emrClusterDefinition, emrClusterDefinitionOverride);\n\n        // Validate the override\n        assertThat(\"Did not override.\", emrClusterDefinition, is(emrClusterDefinitionOverride));\n    }", "signature": "void testOverrideEmrClusterDefinition()", "full_signature": "@Test public void testOverrideEmrClusterDefinition()", "class_method_signature": "EmrHelperServiceImplTest.testOverrideEmrClusterDefinition()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "newArrayList", "overrideEmrClusterDefinition", "assertThat", "is"]}, "focal_class": {"identifier": "EmrHelperServiceImpl", "superclass": "", "interfaces": "implements EmrHelperService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EmrHelperServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EmrHelperServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsServiceHelper awsServiceHelper;", "modifier": "@Autowired\n    private", "type": "AwsServiceHelper", "declarator": "awsServiceHelper", "var_name": "awsServiceHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private EmrClusterDefinitionDaoHelper emrClusterDefinitionDaoHelper;", "modifier": "@Autowired\n    private", "type": "EmrClusterDefinitionDaoHelper", "declarator": "emrClusterDefinitionDaoHelper", "var_name": "emrClusterDefinitionDaoHelper"}, {"original_string": "@Autowired\n    private EmrClusterDefinitionHelper emrClusterDefinitionHelper;", "modifier": "@Autowired\n    private", "type": "EmrClusterDefinitionHelper", "declarator": "emrClusterDefinitionHelper", "var_name": "emrClusterDefinitionHelper"}, {"original_string": "@Autowired\n    private EmrDao emrDao;", "modifier": "@Autowired\n    private", "type": "EmrDao", "declarator": "emrDao", "var_name": "emrDao"}, {"original_string": "@Autowired\n    private EmrHelper emrHelper;", "modifier": "@Autowired\n    private", "type": "EmrHelper", "declarator": "emrHelper", "var_name": "emrHelper"}, {"original_string": "@Autowired\n    private EmrPricingHelper emrPricingHelper;", "modifier": "@Autowired\n    private", "type": "EmrPricingHelper", "declarator": "emrPricingHelper", "var_name": "emrPricingHelper"}, {"original_string": "@Autowired\n    private HerdDao herdDao;", "modifier": "@Autowired\n    private", "type": "HerdDao", "declarator": "herdDao", "var_name": "herdDao"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private NamespaceDaoHelper namespaceDaoHelper;", "modifier": "@Autowired\n    private", "type": "NamespaceDaoHelper", "declarator": "namespaceDaoHelper", "var_name": "namespaceDaoHelper"}, {"original_string": "@Autowired\n    private NamespaceIamRoleAuthorizationHelper namespaceIamRoleAuthorizationHelper;", "modifier": "@Autowired\n    private", "type": "NamespaceIamRoleAuthorizationHelper", "declarator": "namespaceIamRoleAuthorizationHelper", "var_name": "namespaceIamRoleAuthorizationHelper"}, {"original_string": "@Autowired\n    private XmlHelper xmlHelper;", "modifier": "@Autowired\n    private", "type": "XmlHelper", "declarator": "xmlHelper", "var_name": "xmlHelper"}], "methods": [{"identifier": "emrCreateClusterAwsSpecificSteps", "parameters": "(EmrClusterCreateRequest emrClusterCreateRequest, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "modifiers": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public", "return": "EmrClusterCreateDto", "signature": "EmrClusterCreateDto emrCreateClusterAwsSpecificSteps(EmrClusterCreateRequest emrClusterCreateRequest, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "full_signature": "@Override @Transactional(propagation = Propagation.NOT_SUPPORTED) public EmrClusterCreateDto emrCreateClusterAwsSpecificSteps(EmrClusterCreateRequest emrClusterCreateRequest, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "class_method_signature": "EmrHelperServiceImpl.emrCreateClusterAwsSpecificSteps(EmrClusterCreateRequest emrClusterCreateRequest, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "testcase": false, "constructor": false}, {"identifier": "emrPreCreateClusterSteps", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest emrClusterCreateRequest)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "EmrClusterPreCreateDto", "signature": "EmrClusterPreCreateDto emrPreCreateClusterSteps(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest emrClusterCreateRequest)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public EmrClusterPreCreateDto emrPreCreateClusterSteps(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest emrClusterCreateRequest)", "class_method_signature": "EmrHelperServiceImpl.emrPreCreateClusterSteps(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest emrClusterCreateRequest)", "testcase": false, "constructor": false}, {"identifier": "logEmrClusterCreation", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "modifiers": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "void", "signature": "void logEmrClusterCreation(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "full_signature": "@Override @Transactional(propagation = Propagation.REQUIRES_NEW) public void logEmrClusterCreation(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "class_method_signature": "EmrHelperServiceImpl.logEmrClusterCreation(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "testcase": false, "constructor": false}, {"identifier": "emrCreateClusterAwsSpecificStepsImpl", "parameters": "(EmrClusterCreateRequest request, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "modifiers": "", "return": "EmrClusterCreateDto", "signature": "EmrClusterCreateDto emrCreateClusterAwsSpecificStepsImpl(EmrClusterCreateRequest request, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "full_signature": " EmrClusterCreateDto emrCreateClusterAwsSpecificStepsImpl(EmrClusterCreateRequest request, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "class_method_signature": "EmrHelperServiceImpl.emrCreateClusterAwsSpecificStepsImpl(EmrClusterCreateRequest request, EmrClusterDefinition emrClusterDefinition,\n        EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrParamsDto emrParamsDto)", "testcase": false, "constructor": false}, {"identifier": "emrPreCreateClusterStepsImpl", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest request)", "modifiers": "", "return": "EmrClusterPreCreateDto", "signature": "EmrClusterPreCreateDto emrPreCreateClusterStepsImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest request)", "full_signature": " EmrClusterPreCreateDto emrPreCreateClusterStepsImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest request)", "class_method_signature": "EmrHelperServiceImpl.emrPreCreateClusterStepsImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "logEmrClusterCreationImpl", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "modifiers": "", "return": "void", "signature": "void logEmrClusterCreationImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "full_signature": " void logEmrClusterCreationImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "class_method_signature": "EmrHelperServiceImpl.logEmrClusterCreationImpl(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition, String clusterId)", "testcase": false, "constructor": false}, {"identifier": "getS3ManagedReplaceString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getS3ManagedReplaceString()", "full_signature": "private String getS3ManagedReplaceString()", "class_method_signature": "EmrHelperServiceImpl.getS3ManagedReplaceString()", "testcase": false, "constructor": false}, {"identifier": "overrideEmrClusterDefinition", "parameters": "(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "modifiers": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // Method is not complex. It's just very repetitive. protected", "return": "void", "signature": "void overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "full_signature": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // Method is not complex. It's just very repetitive. protected void overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "class_method_signature": "EmrHelperServiceImpl.overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "testcase": false, "constructor": false}, {"identifier": "updateEmrClusterDefinitionWithValidInstanceFleetSubnets", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "modifiers": "", "return": "void", "signature": "void updateEmrClusterDefinitionWithValidInstanceFleetSubnets(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "full_signature": " void updateEmrClusterDefinitionWithValidInstanceFleetSubnets(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "class_method_signature": "EmrHelperServiceImpl.updateEmrClusterDefinitionWithValidInstanceFleetSubnets(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/EmrHelperServiceImpl.java"}, "focal_method": {"identifier": "overrideEmrClusterDefinition", "parameters": "(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "modifiers": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // Method is not complex. It's just very repetitive. protected", "return": "void", "body": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // Method is not complex. It's just very repetitive.\n    protected void overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)\n    {\n        if (emrClusterDefinitionOverride != null)\n        {\n            if (emrClusterDefinitionOverride.getReleaseLabel() != null)\n            {\n                emrClusterDefinition.setReleaseLabel(emrClusterDefinitionOverride.getReleaseLabel());\n            }\n            if (emrClusterDefinitionOverride.getApplications() != null)\n            {\n                emrClusterDefinition.setApplications(emrClusterDefinitionOverride.getApplications());\n            }\n            if (emrClusterDefinitionOverride.getConfigurations() != null)\n            {\n                emrClusterDefinition.setConfigurations(emrClusterDefinitionOverride.getConfigurations());\n            }\n            if (emrClusterDefinitionOverride.getSshKeyPairName() != null)\n            {\n                emrClusterDefinition.setSshKeyPairName(emrClusterDefinitionOverride.getSshKeyPairName());\n            }\n            if (emrClusterDefinitionOverride.getSubnetId() != null)\n            {\n                emrClusterDefinition.setSubnetId(emrClusterDefinitionOverride.getSubnetId());\n            }\n            if (emrClusterDefinitionOverride.getLogBucket() != null)\n            {\n                emrClusterDefinition.setLogBucket(emrClusterDefinitionOverride.getLogBucket());\n            }\n            if (emrClusterDefinitionOverride.isKeepAlive() != null)\n            {\n                emrClusterDefinition.setKeepAlive(emrClusterDefinitionOverride.isKeepAlive());\n            }\n            if (emrClusterDefinitionOverride.isVisibleToAll() != null)\n            {\n                emrClusterDefinition.setVisibleToAll(emrClusterDefinitionOverride.isVisibleToAll());\n            }\n            if (emrClusterDefinitionOverride.isTerminationProtection() != null)\n            {\n                emrClusterDefinition.setTerminationProtection(emrClusterDefinitionOverride.isTerminationProtection());\n            }\n            if (emrClusterDefinitionOverride.isEncryptionEnabled() != null)\n            {\n                emrClusterDefinition.setEncryptionEnabled(emrClusterDefinitionOverride.isEncryptionEnabled());\n            }\n            if (emrClusterDefinitionOverride.getAmiVersion() != null)\n            {\n                emrClusterDefinition.setAmiVersion(emrClusterDefinitionOverride.getAmiVersion());\n            }\n            if (emrClusterDefinitionOverride.getHadoopVersion() != null)\n            {\n                emrClusterDefinition.setHadoopVersion(emrClusterDefinitionOverride.getHadoopVersion());\n            }\n            if (emrClusterDefinitionOverride.getHiveVersion() != null)\n            {\n                emrClusterDefinition.setHiveVersion(emrClusterDefinitionOverride.getHiveVersion());\n            }\n            if (emrClusterDefinitionOverride.getPigVersion() != null)\n            {\n                emrClusterDefinition.setPigVersion(emrClusterDefinitionOverride.getPigVersion());\n            }\n            if (emrClusterDefinitionOverride.getEc2NodeIamProfileName() != null)\n            {\n                emrClusterDefinition.setEc2NodeIamProfileName(emrClusterDefinitionOverride.getEc2NodeIamProfileName());\n            }\n            if (emrClusterDefinitionOverride.isInstallOozie() != null)\n            {\n                emrClusterDefinition.setInstallOozie(emrClusterDefinitionOverride.isInstallOozie());\n            }\n            if (emrClusterDefinitionOverride.getCustomBootstrapActionMaster() != null)\n            {\n                emrClusterDefinition.setCustomBootstrapActionMaster(emrClusterDefinitionOverride.getCustomBootstrapActionMaster());\n            }\n            if (emrClusterDefinitionOverride.getCustomBootstrapActionAll() != null)\n            {\n                emrClusterDefinition.setCustomBootstrapActionAll(emrClusterDefinitionOverride.getCustomBootstrapActionAll());\n            }\n            if (emrClusterDefinitionOverride.getAdditionalInfo() != null)\n            {\n                emrClusterDefinition.setAdditionalInfo(emrClusterDefinitionOverride.getAdditionalInfo());\n            }\n            if (emrClusterDefinitionOverride.getInstanceDefinitions() != null)\n            {\n                emrClusterDefinition.setInstanceDefinitions(emrClusterDefinitionOverride.getInstanceDefinitions());\n            }\n            if (emrClusterDefinitionOverride.getInstanceFleetMinimumIpAvailableFilter() != null)\n            {\n                emrClusterDefinition.setInstanceFleetMinimumIpAvailableFilter(emrClusterDefinitionOverride.getInstanceFleetMinimumIpAvailableFilter());\n            }\n            if (emrClusterDefinitionOverride.getInstanceFleets() != null)\n            {\n                emrClusterDefinition.setInstanceFleets(emrClusterDefinitionOverride.getInstanceFleets());\n            }\n            if (emrClusterDefinitionOverride.getNodeTags() != null)\n            {\n                emrClusterDefinition.setNodeTags(emrClusterDefinitionOverride.getNodeTags());\n            }\n            if (emrClusterDefinitionOverride.getDaemonConfigurations() != null)\n            {\n                emrClusterDefinition.setDaemonConfigurations(emrClusterDefinitionOverride.getDaemonConfigurations());\n            }\n            if (emrClusterDefinitionOverride.getHadoopConfigurations() != null)\n            {\n                emrClusterDefinition.setHadoopConfigurations(emrClusterDefinitionOverride.getHadoopConfigurations());\n            }\n            if (emrClusterDefinitionOverride.getAccountId() != null)\n            {\n                emrClusterDefinition.setAccountId(emrClusterDefinitionOverride.getAccountId());\n            }\n            if (emrClusterDefinitionOverride.getServiceIamRole() != null)\n            {\n                emrClusterDefinition.setServiceIamRole(emrClusterDefinitionOverride.getServiceIamRole());\n            }\n            if (emrClusterDefinitionOverride.getSupportedProduct() != null)\n            {\n                emrClusterDefinition.setSupportedProduct(emrClusterDefinitionOverride.getSupportedProduct());\n            }\n            if (emrClusterDefinitionOverride.getHadoopJarSteps() != null)\n            {\n                emrClusterDefinition.setHadoopJarSteps(emrClusterDefinitionOverride.getHadoopJarSteps());\n            }\n            if (emrClusterDefinitionOverride.getAdditionalMasterSecurityGroups() != null)\n            {\n                emrClusterDefinition.setAdditionalMasterSecurityGroups(emrClusterDefinitionOverride.getAdditionalMasterSecurityGroups());\n            }\n            if (emrClusterDefinitionOverride.getAdditionalSlaveSecurityGroups() != null)\n            {\n                emrClusterDefinition.setAdditionalSlaveSecurityGroups(emrClusterDefinitionOverride.getAdditionalSlaveSecurityGroups());\n            }\n            if (emrClusterDefinitionOverride.getSecurityConfiguration() != null)\n            {\n                emrClusterDefinition.setSecurityConfiguration(emrClusterDefinitionOverride.getSecurityConfiguration());\n            }\n            if (emrClusterDefinitionOverride.getMasterSecurityGroup() != null)\n            {\n                emrClusterDefinition.setMasterSecurityGroup(emrClusterDefinitionOverride.getMasterSecurityGroup());\n            }\n            if (emrClusterDefinitionOverride.getSlaveSecurityGroup() != null)\n            {\n                emrClusterDefinition.setSlaveSecurityGroup(emrClusterDefinitionOverride.getSlaveSecurityGroup());\n            }\n            if (emrClusterDefinitionOverride.getServiceAccessSecurityGroup() != null)\n            {\n                emrClusterDefinition.setServiceAccessSecurityGroup(emrClusterDefinitionOverride.getServiceAccessSecurityGroup());\n            }\n            if (emrClusterDefinitionOverride.getScaleDownBehavior() != null)\n            {\n                emrClusterDefinition.setScaleDownBehavior(emrClusterDefinitionOverride.getScaleDownBehavior());\n            }\n            if (emrClusterDefinitionOverride.getKerberosAttributes() != null)\n            {\n                emrClusterDefinition.setKerberosAttributes(emrClusterDefinitionOverride.getKerberosAttributes());\n            }\n            if (emrClusterDefinitionOverride.getStepConcurrencyLevel() != null)\n            {\n                emrClusterDefinition.setStepConcurrencyLevel(emrClusterDefinitionOverride.getStepConcurrencyLevel());\n            }\n        }\n    }", "signature": "void overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "full_signature": "@SuppressWarnings(\"PMD.CyclomaticComplexity\") // Method is not complex. It's just very repetitive. protected void overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "class_method_signature": "EmrHelperServiceImpl.overrideEmrClusterDefinition(EmrClusterDefinition emrClusterDefinition, EmrClusterDefinition emrClusterDefinitionOverride)", "testcase": false, "constructor": false, "invocations": ["getReleaseLabel", "setReleaseLabel", "getReleaseLabel", "getApplications", "setApplications", "getApplications", "getConfigurations", "setConfigurations", "getConfigurations", "getSshKeyPairName", "setSshKeyPairName", "getSshKeyPairName", "getSubnetId", "setSubnetId", "getSubnetId", "getLogBucket", "setLogBucket", "getLogBucket", "isKeepAlive", "setKeepAlive", "isKeepAlive", "isVisibleToAll", "setVisibleToAll", "isVisibleToAll", "isTerminationProtection", "setTerminationProtection", "isTerminationProtection", "isEncryptionEnabled", "setEncryptionEnabled", "isEncryptionEnabled", "getAmiVersion", "setAmiVersion", "getAmiVersion", "getHadoopVersion", "setHadoopVersion", "getHadoopVersion", "getHiveVersion", "setHiveVersion", "getHiveVersion", "getPigVersion", "setPigVersion", "getPigVersion", "getEc2NodeIamProfileName", "setEc2NodeIamProfileName", "getEc2NodeIamProfileName", "isInstallOozie", "setInstallOozie", "isInstallOozie", "getCustomBootstrapActionMaster", "setCustomBootstrapActionMaster", "getCustomBootstrapActionMaster", "getCustomBootstrapActionAll", "setCustomBootstrapActionAll", "getCustomBootstrapActionAll", "getAdditionalInfo", "setAdditionalInfo", "getAdditionalInfo", "getInstanceDefinitions", "setInstanceDefinitions", "getInstanceDefinitions", "getInstanceFleetMinimumIpAvailableFilter", "setInstanceFleetMinimumIpAvailableFilter", "getInstanceFleetMinimumIpAvailableFilter", "getInstanceFleets", "setInstanceFleets", "getInstanceFleets", "getNodeTags", "setNodeTags", "getNodeTags", "getDaemonConfigurations", "setDaemonConfigurations", "getDaemonConfigurations", "getHadoopConfigurations", "setHadoopConfigurations", "getHadoopConfigurations", "getAccountId", "setAccountId", "getAccountId", "getServiceIamRole", "setServiceIamRole", "getServiceIamRole", "getSupportedProduct", "setSupportedProduct", "getSupportedProduct", "getHadoopJarSteps", "setHadoopJarSteps", "getHadoopJarSteps", "getAdditionalMasterSecurityGroups", "setAdditionalMasterSecurityGroups", "getAdditionalMasterSecurityGroups", "getAdditionalSlaveSecurityGroups", "setAdditionalSlaveSecurityGroups", "getAdditionalSlaveSecurityGroups", "getSecurityConfiguration", "setSecurityConfiguration", "getSecurityConfiguration", "getMasterSecurityGroup", "setMasterSecurityGroup", "getMasterSecurityGroup", "getSlaveSecurityGroup", "setSlaveSecurityGroup", "getSlaveSecurityGroup", "getServiceAccessSecurityGroup", "setServiceAccessSecurityGroup", "getServiceAccessSecurityGroup", "getScaleDownBehavior", "setScaleDownBehavior", "getScaleDownBehavior", "getKerberosAttributes", "setKerberosAttributes", "getKerberosAttributes", "getStepConcurrencyLevel", "setStepConcurrencyLevel", "getStepConcurrencyLevel"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}