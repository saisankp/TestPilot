{"test_class": {"identifier": "RemoteOpsProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static ActorSystem system;", "modifier": "static", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "static RemoteOpsProviderConfig moduleConfig;", "modifier": "static", "type": "RemoteOpsProviderConfig", "declarator": "moduleConfig", "var_name": "moduleConfig"}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/test/java/org/opendaylight/controller/remote/rpc/RemoteOpsProviderTest.java"}, "test_case": {"identifier": "testRemoteRpcProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoteRpcProvider() throws Exception {\n        try (RemoteOpsProvider rpcProvider = new RemoteOpsProvider(system, mock(DOMRpcProviderService.class),\n                mock(DOMRpcService.class), new RemoteOpsProviderConfig(system.settings().config()),\n                mock(DOMActionProviderService.class), mock(DOMActionService.class))) {\n\n            rpcProvider.start();\n            final ActorRef actorRef = Await.result(\n                    system.actorSelection(moduleConfig.getRpcManagerPath()).resolveOne(\n                            FiniteDuration.create(1, TimeUnit.SECONDS)), FiniteDuration.create(2, TimeUnit.SECONDS));\n\n            assertTrue(actorRef.path().toString().contains(moduleConfig.getRpcManagerPath()));\n        }\n    }", "signature": "void testRemoteRpcProvider()", "full_signature": "@Test public void testRemoteRpcProvider()", "class_method_signature": "RemoteOpsProviderTest.testRemoteRpcProvider()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "config", "settings", "mock", "mock", "start", "result", "resolveOne", "actorSelection", "getRpcManagerPath", "create", "create", "assertTrue", "contains", "toString", "path", "getRpcManagerPath"]}, "focal_class": {"identifier": "RemoteOpsProvider", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RemoteOpsProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RemoteOpsProvider.class)", "var_name": "LOG"}, {"original_string": "private final DOMRpcProviderService rpcProvisionRegistry;", "modifier": "private final", "type": "DOMRpcProviderService", "declarator": "rpcProvisionRegistry", "var_name": "rpcProvisionRegistry"}, {"original_string": "private final RemoteOpsProviderConfig config;", "modifier": "private final", "type": "RemoteOpsProviderConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final ActorSystem actorSystem;", "modifier": "private final", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private final DOMRpcService rpcService;", "modifier": "private final", "type": "DOMRpcService", "declarator": "rpcService", "var_name": "rpcService"}, {"original_string": "private final DOMActionProviderService actionProvisionRegistry;", "modifier": "private final", "type": "DOMActionProviderService", "declarator": "actionProvisionRegistry", "var_name": "actionProvisionRegistry"}, {"original_string": "private final DOMActionService actionService;", "modifier": "private final", "type": "DOMActionService", "declarator": "actionService", "var_name": "actionService"}, {"original_string": "private ActorRef opsManager;", "modifier": "private", "type": "ActorRef", "declarator": "opsManager", "var_name": "opsManager"}], "methods": [{"identifier": "RemoteOpsProvider", "parameters": "(final ActorSystem actorSystem, final DOMRpcProviderService rpcProvisionRegistry,\n                             final DOMRpcService rpcService, final RemoteOpsProviderConfig config,\n                             final DOMActionProviderService actionProviderService,\n                             final DOMActionService actionService)", "modifiers": "public", "return": "", "signature": " RemoteOpsProvider(final ActorSystem actorSystem, final DOMRpcProviderService rpcProvisionRegistry,\n                             final DOMRpcService rpcService, final RemoteOpsProviderConfig config,\n                             final DOMActionProviderService actionProviderService,\n                             final DOMActionService actionService)", "full_signature": "public  RemoteOpsProvider(final ActorSystem actorSystem, final DOMRpcProviderService rpcProvisionRegistry,\n                             final DOMRpcService rpcService, final RemoteOpsProviderConfig config,\n                             final DOMActionProviderService actionProviderService,\n                             final DOMActionService actionService)", "class_method_signature": "RemoteOpsProvider.RemoteOpsProvider(final ActorSystem actorSystem, final DOMRpcProviderService rpcProvisionRegistry,\n                             final DOMRpcService rpcService, final RemoteOpsProviderConfig config,\n                             final DOMActionProviderService actionProviderService,\n                             final DOMActionService actionService)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RemoteOpsProvider.close()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "RemoteOpsProvider.start()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/RemoteOpsProvider.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void start() {\n        LOG.info(\"Starting Remote Ops service...\");\n        opsManager = actorSystem.actorOf(OpsManager.props(rpcProvisionRegistry, rpcService, config,\n                actionProvisionRegistry, actionService), config.getRpcManagerName());\n        LOG.debug(\"Ops Manager started at {}\", opsManager);\n    }", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "RemoteOpsProvider.start()", "testcase": false, "constructor": false, "invocations": ["info", "actorOf", "props", "getRpcManagerName", "debug"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}