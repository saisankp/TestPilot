{"test_class": {"identifier": "BeanFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "cucumber/src/test/java/eu/drus/jpa/unit/cucumber/BeanFactoryTest.java"}, "test_case": {"identifier": "testBeanCreationWithDefaultConstructorWithoutUsingCDI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBeanCreationWithDefaultConstructorWithoutUsingCDI() {\n        // GIVEN\n\n        // WHEN\n        final ClassA bean = BeanFactory.createBean(ClassA.class);\n\n        // THEN\n        assertThat(bean, notNullValue());\n    }", "signature": "void testBeanCreationWithDefaultConstructorWithoutUsingCDI()", "full_signature": "@Test public void testBeanCreationWithDefaultConstructorWithoutUsingCDI()", "class_method_signature": "BeanFactoryTest.testBeanCreationWithDefaultConstructorWithoutUsingCDI()", "testcase": true, "constructor": false, "invocations": ["createBean", "assertThat", "notNullValue"]}, "focal_class": {"identifier": "BeanFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BeanFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " BeanFactory()", "full_signature": "private  BeanFactory()", "class_method_signature": "BeanFactory.BeanFactory()", "testcase": false, "constructor": true}, {"identifier": "createBean", "parameters": "(final Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T createBean(final Class<T> clazz)", "full_signature": "public static T createBean(final Class<T> clazz)", "class_method_signature": "BeanFactory.createBean(final Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "createInstance", "parameters": "(final Class<T> clazz)", "modifiers": "private static", "return": "T", "signature": "T createInstance(final Class<T> clazz)", "full_signature": "private static T createInstance(final Class<T> clazz)", "class_method_signature": "BeanFactory.createInstance(final Class<T> clazz)", "testcase": false, "constructor": false}], "file": "cucumber/src/main/java/eu/drus/jpa/unit/cucumber/BeanFactory.java"}, "focal_method": {"identifier": "createBean", "parameters": "(final Class<T> clazz)", "modifiers": "public static", "return": "T", "body": "public static <T> T createBean(final Class<T> clazz) {\n        final Class<?> bpClass = tryLoadClassForName(\"org.apache.deltaspike.core.api.provider.BeanProvider\");\n        if (bpClass != null) {\n            try {\n                final Method getContextualReference = bpClass.getMethod(\"getContextualReference\", Class.class, Annotation[].class);\n                return clazz.cast(getContextualReference.invoke(null, clazz, new Annotation[0]));\n            } catch (final Exception e) {\n                // CDI and Deltaspike are not present and configured - fall back\n            }\n        }\n\n        // XXX: implement lookup for different DI implementations. For now only CDI is supported\n\n        // fall back\n        return createInstance(clazz);\n    }", "signature": "T createBean(final Class<T> clazz)", "full_signature": "public static T createBean(final Class<T> clazz)", "class_method_signature": "BeanFactory.createBean(final Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["tryLoadClassForName", "getMethod", "cast", "invoke", "createInstance"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}