{"test_class": {"identifier": "Tetrahedral2DParityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CLOCKWISE     = -1;", "modifier": "private static final", "type": "int", "declarator": "CLOCKWISE     = -1", "var_name": "CLOCKWISE"}, {"original_string": "private static final int ANTICLOCKWISE = +1;", "modifier": "private static final", "type": "int", "declarator": "ANTICLOCKWISE = +1", "var_name": "ANTICLOCKWISE"}, {"original_string": "private static final int NONE          = 0;", "modifier": "private static final", "type": "int", "declarator": "NONE          = 0", "var_name": "NONE"}], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/Tetrahedral2DParityTest.java"}, "test_case": {"identifier": "testParity_Three_DDD", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParity_Three_DDD() {\n        Point2d[] coords = new Point2d[]{new Point2d(-7.75, 5.79), // -O (down)\n                new Point2d(-6.42, 3.48), // -N\n                new Point2d(-9.09, 3.48), // -C\n                new Point2d(-7.75, 4.25), //  C (centre)\n        };\n        int[] elev = new int[]{-1, -1, -1, 0};\n        GeometricParity parity = new Tetrahedral2DParity(coords, elev);\n        org.hamcrest.MatcherAssert.assertThat(parity.parity(), is(ANTICLOCKWISE));\n    }", "signature": "void testParity_Three_DDD()", "full_signature": "@Test public void testParity_Three_DDD()", "class_method_signature": "Tetrahedral2DParityTest.testParity_Three_DDD()", "testcase": true, "constructor": false, "invocations": ["assertThat", "parity", "is"]}, "focal_class": {"identifier": "Tetrahedral2DParity", "superclass": "extends GeometricParity", "interfaces": "", "fields": [{"original_string": "private final Point2d[] coordinates;", "modifier": "private final", "type": "Point2d[]", "declarator": "coordinates", "var_name": "coordinates"}, {"original_string": "private final int[]     elevations;", "modifier": "private final", "type": "int[]", "declarator": "elevations", "var_name": "elevations"}], "methods": [{"identifier": "Tetrahedral2DParity", "parameters": "(Point2d[] coordinates, int[] elevations)", "modifiers": "public", "return": "", "signature": " Tetrahedral2DParity(Point2d[] coordinates, int[] elevations)", "full_signature": "public  Tetrahedral2DParity(Point2d[] coordinates, int[] elevations)", "class_method_signature": "Tetrahedral2DParity.Tetrahedral2DParity(Point2d[] coordinates, int[] elevations)", "testcase": false, "constructor": true}, {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "Tetrahedral2DParity.parity()", "testcase": false, "constructor": false}, {"identifier": "det", "parameters": "(double xa, double ya, double xb, double yb, double xc, double yc)", "modifiers": "private static", "return": "double", "signature": "double det(double xa, double ya, double xb, double yb, double xc, double yc)", "full_signature": "private static double det(double xa, double ya, double xb, double yb, double xc, double yc)", "class_method_signature": "Tetrahedral2DParity.det(double xa, double ya, double xb, double yb, double xc, double yc)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/Tetrahedral2DParity.java"}, "focal_method": {"identifier": "parity", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parity() {\n\n        double x1 = coordinates[0].x;\n        double x2 = coordinates[1].x;\n        double x3 = coordinates[2].x;\n        double x4 = coordinates[3].x;\n\n        double y1 = coordinates[0].y;\n        double y2 = coordinates[1].y;\n        double y3 = coordinates[2].y;\n        double y4 = coordinates[3].y;\n\n        double det = (elevations[0] * det(x2, y2, x3, y3, x4, y4)) - (elevations[1] * det(x1, y1, x3, y3, x4, y4))\n                + (elevations[2] * det(x1, y1, x2, y2, x4, y4)) - (elevations[3] * det(x1, y1, x2, y2, x3, y3));\n\n        return (int) Math.signum(det);\n    }", "signature": "int parity()", "full_signature": "@Override public int parity()", "class_method_signature": "Tetrahedral2DParity.parity()", "testcase": false, "constructor": false, "invocations": ["det", "det", "det", "det", "signum"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}