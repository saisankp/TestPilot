{"test_class": {"identifier": "QNameTest", "superclass": "", "interfaces": "", "fields": [], "file": "webster/src/test/java/net/adamcin/oakpal/webster/QNameTest.java"}, "test_case": {"identifier": "testAdaptName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdaptName() throws Exception {\n        final NamePathResolver resolver = new DefaultNamePathResolver(JsonCnd.BUILTIN_MAPPINGS);\n        final QName ntPrefixName = QName.adaptName(JsonCnd.BUILTIN_MAPPINGS,\n                QName.Type.NODETYPE, resolver.getQName(\"nt:aType\"));\n        final QName ntUriName = QName.adaptName(JsonCnd.BUILTIN_MAPPINGS, QName.Type.NODETYPE,\n                resolver.getQName(\"{\" + NamespaceRegistry.NAMESPACE_NT + \"}\" + \"aType\"));\n        assertEquals(\"adapt equals\", ntPrefixName, ntUriName);\n\n    }", "signature": "void testAdaptName()", "full_signature": "@Test public void testAdaptName()", "class_method_signature": "QNameTest.testAdaptName()", "testcase": true, "constructor": false, "invocations": ["adaptName", "getQName", "adaptName", "getQName", "assertEquals"]}, "focal_class": {"identifier": "QName", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Type type;", "modifier": "private final", "type": "Type", "declarator": "type", "var_name": "type"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final String localName;", "modifier": "private final", "type": "String", "declarator": "localName", "var_name": "localName"}, {"original_string": "private final String uri;", "modifier": "private final", "type": "String", "declarator": "uri", "var_name": "uri"}], "methods": [{"identifier": "QName", "parameters": "(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "modifiers": "public", "return": "", "signature": " QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "full_signature": "public  QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "class_method_signature": "QName.QName(final @NotNull Type type,\n                 final @Nullable String prefix,\n                 final @NotNull String localName,\n                 final @Nullable String uri)", "testcase": false, "constructor": true}, {"identifier": "parseQName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "modifiers": "public static", "return": "QName", "signature": "QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "full_signature": "public static QName parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "class_method_signature": "QName.parseQName(final @NotNull NamespaceMapping mapping,\n                                   final @NotNull Type type,\n                                   final @NotNull String qName)", "testcase": false, "constructor": false}, {"identifier": "adaptName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "modifiers": "public static", "return": "QName", "signature": "QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "full_signature": "public static QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "class_method_signature": "QName.adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Type", "signature": "Type getType()", "full_signature": "public Type getType()", "class_method_signature": "QName.getType()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "QName.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getLocalName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLocalName()", "full_signature": "public String getLocalName()", "class_method_signature": "QName.getLocalName()", "testcase": false, "constructor": false}, {"identifier": "getUri", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUri()", "full_signature": "public String getUri()", "class_method_signature": "QName.getUri()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QName.toString()", "testcase": false, "constructor": false}, {"identifier": "toExpandedForm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toExpandedForm()", "full_signature": "public String toExpandedForm()", "class_method_signature": "QName.toExpandedForm()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "QName.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QName.hashCode()", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/QName.java"}, "focal_method": {"identifier": "adaptName", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "modifiers": "public static", "return": "QName", "body": "public static QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name) {\n        return new QName(type, result1(mapping::getPrefix)\n                .apply(name.getNamespaceURI()).toOptional().orElse(null),\n                name.getLocalName(), name.getNamespaceURI());\n    }", "signature": "QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "full_signature": "public static QName adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "class_method_signature": "QName.adaptName(final @NotNull NamespaceMapping mapping,\n                                  final @NotNull Type type,\n                                  final @NotNull Name name)", "testcase": false, "constructor": false, "invocations": ["orElse", "toOptional", "apply", "result1", "getNamespaceURI", "getLocalName", "getNamespaceURI"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}