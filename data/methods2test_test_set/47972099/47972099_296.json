{"test_class": {"identifier": "FieldsFromTupleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] testDouble;", "modifier": "private", "type": "double[]", "declarator": "testDouble", "var_name": "testDouble"}, {"original_string": "private static final Class<?>[] CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class }", "var_name": "CLASSES"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldsFromTupleTest.java"}, "test_case": {"identifier": "testUserSpecifiedOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUserSpecifiedOrder() throws InstantiationException, IllegalAccessException {\n\t\tTuple currentTuple = (Tuple) CLASSES[Tuple.MAX_ARITY - 1].newInstance();\n\t\tfor (int i = 0; i < Tuple.MAX_ARITY; i++) {\n\t\t\tcurrentTuple.setField(testDouble[i], i);\n\t\t}\n\n\t\tdouble[] expected = { testDouble[5], testDouble[3], testDouble[6], testDouble[7],\n\t\t\t\ttestDouble[0] };\n\t\tarrayEqualityCheck(expected, new FieldsFromTuple(5, 3, 6, 7, 0).extract(currentTuple));\n\n\t\tdouble[] expected2 = { testDouble[0], testDouble[Tuple.MAX_ARITY - 1] };\n\t\tarrayEqualityCheck(expected2,\n\t\t\t\tnew FieldsFromTuple(0, Tuple.MAX_ARITY - 1).extract(currentTuple));\n\n\t\tdouble[] expected3 = { testDouble[Tuple.MAX_ARITY - 1], testDouble[0] };\n\t\tarrayEqualityCheck(expected3,\n\t\t\t\tnew FieldsFromTuple(Tuple.MAX_ARITY - 1, 0).extract(currentTuple));\n\n\t\tdouble[] expected4 = { testDouble[13], testDouble[4], testDouble[5], testDouble[4],\n\t\t\t\ttestDouble[2], testDouble[8], testDouble[6], testDouble[2], testDouble[8],\n\t\t\t\ttestDouble[3], testDouble[5], testDouble[2], testDouble[16], testDouble[4],\n\t\t\t\ttestDouble[3], testDouble[2], testDouble[6], testDouble[4], testDouble[7],\n\t\t\t\ttestDouble[4], testDouble[2], testDouble[8], testDouble[7], testDouble[2] };\n\t\tarrayEqualityCheck(expected4, new FieldsFromTuple(13, 4, 5, 4, 2, 8, 6, 2, 8, 3, 5, 2, 16,\n\t\t\t\t4, 3, 2, 6, 4, 7, 4, 2, 8, 7, 2).extract(currentTuple));\n\t}", "signature": "void testUserSpecifiedOrder()", "full_signature": "@Test public void testUserSpecifiedOrder()", "class_method_signature": "FieldsFromTupleTest.testUserSpecifiedOrder()", "testcase": true, "constructor": false, "invocations": ["newInstance", "setField", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract"]}, "focal_class": {"identifier": "FieldsFromTuple", "superclass": "", "interfaces": "implements Extractor<Tuple, double[]>", "fields": [{"original_string": "private static final long serialVersionUID = -2554079091050273761L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2554079091050273761L", "var_name": "serialVersionUID"}, {"original_string": "int[] indexes;", "modifier": "", "type": "int[]", "declarator": "indexes", "var_name": "indexes"}], "methods": [{"identifier": "FieldsFromTuple", "parameters": "(int... indexes)", "modifiers": "public", "return": "", "signature": " FieldsFromTuple(int... indexes)", "full_signature": "public  FieldsFromTuple(int... indexes)", "class_method_signature": "FieldsFromTuple.FieldsFromTuple(int... indexes)", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] extract(Tuple in)", "full_signature": "@Override public double[] extract(Tuple in)", "class_method_signature": "FieldsFromTuple.extract(Tuple in)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldsFromTuple.java"}, "focal_method": {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n\tpublic double[] extract(Tuple in) {\n\t\tdouble[] out = new double[indexes.length];\n\t\tfor (int i = 0; i < indexes.length; i++) {\n\t\t\tout[i] = (Double) in.getField(indexes[i]);\n\t\t}\n\t\treturn out;\n\t}", "signature": "double[] extract(Tuple in)", "full_signature": "@Override public double[] extract(Tuple in)", "class_method_signature": "FieldsFromTuple.extract(Tuple in)", "testcase": false, "constructor": false, "invocations": ["getField"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}