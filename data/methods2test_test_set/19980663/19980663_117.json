{"test_class": {"identifier": "CountActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/CountActionTest.java"}, "test_case": {"identifier": "testCountDistinct", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCountDistinct() throws FoxtrotException {\n        CountRequest countRequest = new CountRequest();\n        countRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        countRequest.setField(\"os\");\n        countRequest.setDistinct(true);\n        CountResponse countResponse = CountResponse.class.cast(getQueryExecutor().execute(countRequest));\n\n        assertNotNull(countResponse);\n        assertEquals(2, countResponse.getCount());\n    }", "signature": "void testCountDistinct()", "full_signature": "@Test public void testCountDistinct()", "class_method_signature": "CountActionTest.testCountDistinct()", "testcase": true, "constructor": false, "invocations": ["setTable", "setField", "setDistinct", "cast", "execute", "getQueryExecutor", "assertNotNull", "assertEquals", "getCount"]}, "focal_class": {"identifier": "CountAction", "superclass": "extends Action<CountRequest>", "interfaces": "", "fields": [{"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "CountAction", "parameters": "(CountRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " CountAction(CountRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  CountAction(CountRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "CountAction.CountAction(CountRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "CountAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "CountAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "CountAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(CountRequest parameter)", "full_signature": "@Override public void validateImpl(CountRequest parameter)", "class_method_signature": "CountAction.validateImpl(CountRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(CountRequest parameter)", "full_signature": "@Override public ActionResponse execute(CountRequest parameter)", "class_method_signature": "CountAction.execute(CountRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(CountRequest parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(CountRequest parameter)", "class_method_signature": "CountAction.getRequestBuilder(CountRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, CountRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, CountRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, CountRequest parameter)", "class_method_signature": "CountAction.getResponse(org.elasticsearch.action.ActionResponse response, CountRequest parameter)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/CountAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(CountRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(CountRequest parameter) {\n        SearchRequestBuilder query = getRequestBuilder(parameter);\n\n        try {\n            SearchResponse response = query.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        }\n        catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n\n        }\n    }", "signature": "ActionResponse execute(CountRequest parameter)", "full_signature": "@Override public ActionResponse execute(CountRequest parameter)", "class_method_signature": "CountAction.execute(CountRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}