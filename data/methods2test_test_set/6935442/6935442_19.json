{"test_class": {"identifier": "TitleBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "subdomains/base/applib/src/test/java/org/apache/isis/subdomains/base/applib/utils/TitleBuilderTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() throws Exception {\n        assertThat(TitleBuilder.start().withName(\"Name\").withReference(\"REF\").toString())\n                .isEqualTo(\"Name [REF]\");\n        assertThat(TitleBuilder.start().withParent(new TestObject()).withName(\"Name\").withReference(\"REF\").toString())\n                .isEqualTo(\"Parent [PAR] > Name [REF]\");\n        assertThat(TitleBuilder.start().withParent(new TestObject()).withName(\"REF\").withReference(\"REF\").toString())\n                .isEqualTo(\"Parent [PAR] > REF\");\n        assertThat(TitleBuilder.start().withParent(new TestObject()).withName(\"Name1\").withName(\"Name2\").withReference(\"REF\").toString())\n                .isEqualTo(\"Parent [PAR] > Name1 Name2 [REF]\");\n        assertThat(TitleBuilder.start().withParent(new TestObject()).withName(LocalDateInterval.parseString(\"2014-01-01/2015-01-01\")).toString())\n                .isEqualTo(\"Parent [PAR] > 2014-01-01/2015-01-01\");\n\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TitleBuilderTest.testToString()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "toString", "withReference", "withName", "start", "isEqualTo", "assertThat", "toString", "withReference", "withName", "withParent", "start", "isEqualTo", "assertThat", "toString", "withReference", "withName", "withParent", "start", "isEqualTo", "assertThat", "toString", "withReference", "withName", "withName", "withParent", "start", "isEqualTo", "assertThat", "toString", "withName", "withParent", "start", "parseString"]}, "focal_class": {"identifier": "TitleBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "private static final String DELIMITER = \"[]\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \"[]\"", "var_name": "DELIMITER"}, {"original_string": "private static final String PARENT_SEPARATOR = \" > \";", "modifier": "private static final", "type": "String", "declarator": "PARENT_SEPARATOR = \" > \"", "var_name": "PARENT_SEPARATOR"}, {"original_string": "public static final Class[] NO_PARAMETER_TYPES = new Class[0];", "modifier": "public static final", "type": "Class[]", "declarator": "NO_PARAMETER_TYPES = new Class[0]", "var_name": "NO_PARAMETER_TYPES"}, {"original_string": "public static final Object[] NO_ARGUMENTS = new Object[0];", "modifier": "public static final", "type": "Object[]", "declarator": "NO_ARGUMENTS = new Object[0]", "var_name": "NO_ARGUMENTS"}, {"original_string": "private final StringBuilder parentString;", "modifier": "private final", "type": "StringBuilder", "declarator": "parentString", "var_name": "parentString"}, {"original_string": "private final StringBuilder nameString;", "modifier": "private final", "type": "StringBuilder", "declarator": "nameString", "var_name": "nameString"}, {"original_string": "private final StringBuilder referenceString;", "modifier": "private final", "type": "StringBuilder", "declarator": "referenceString", "var_name": "referenceString"}], "methods": [{"identifier": "titleFor", "parameters": "(Object object)", "modifiers": "private static", "return": "String", "signature": "String titleFor(Object object)", "full_signature": "private static String titleFor(Object object)", "class_method_signature": "TitleBuilder.titleFor(Object object)", "testcase": false, "constructor": false}, {"identifier": "TitleBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " TitleBuilder()", "full_signature": "private  TitleBuilder()", "class_method_signature": "TitleBuilder.TitleBuilder()", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public static", "return": "TitleBuilder", "signature": "TitleBuilder start()", "full_signature": "public static TitleBuilder start()", "class_method_signature": "TitleBuilder.start()", "testcase": false, "constructor": false}, {"identifier": "withParent", "parameters": "(final Object object)", "modifiers": "public", "return": "TitleBuilder", "signature": "TitleBuilder withParent(final Object object)", "full_signature": "public TitleBuilder withParent(final Object object)", "class_method_signature": "TitleBuilder.withParent(final Object object)", "testcase": false, "constructor": false}, {"identifier": "withName", "parameters": "(final String name)", "modifiers": "public", "return": "TitleBuilder", "signature": "TitleBuilder withName(final String name)", "full_signature": "public TitleBuilder withName(final String name)", "class_method_signature": "TitleBuilder.withName(final String name)", "testcase": false, "constructor": false}, {"identifier": "withReference", "parameters": "(final String reference)", "modifiers": "public", "return": "TitleBuilder", "signature": "TitleBuilder withReference(final String reference)", "full_signature": "public TitleBuilder withReference(final String reference)", "class_method_signature": "TitleBuilder.withReference(final String reference)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "TitleBuilder.toString()", "testcase": false, "constructor": false}, {"identifier": "delimited", "parameters": "(StringBuilder stringBuilder)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder delimited(StringBuilder stringBuilder)", "full_signature": "private StringBuilder delimited(StringBuilder stringBuilder)", "class_method_signature": "TitleBuilder.delimited(StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "withName", "parameters": "(final Object object)", "modifiers": "public", "return": "TitleBuilder", "signature": "TitleBuilder withName(final Object object)", "full_signature": "public TitleBuilder withName(final Object object)", "class_method_signature": "TitleBuilder.withName(final Object object)", "testcase": false, "constructor": false}, {"identifier": "withTupleElement", "parameters": "(Object object)", "modifiers": "@Deprecated public", "return": "TitleBuilder", "signature": "TitleBuilder withTupleElement(Object object)", "full_signature": "@Deprecated public TitleBuilder withTupleElement(Object object)", "class_method_signature": "TitleBuilder.withTupleElement(Object object)", "testcase": false, "constructor": false}], "file": "subdomains/base/applib/src/main/java/org/apache/isis/subdomains/base/applib/utils/TitleBuilder.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String toString() {\n        return new StringBuilder()\n                .append(parentString)\n                .append(nameString)\n                .append(referenceString.length() > 0 && nameString.length() > 0 ? SPACE : \"\")\n                .append(!referenceString.toString().equals(nameString.toString()) ? delimited(referenceString) : \"\")\n                .toString().trim();\n    }", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "TitleBuilder.toString()", "testcase": false, "constructor": false, "invocations": ["trim", "toString", "append", "append", "append", "append", "length", "length", "equals", "toString", "toString", "delimited"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}