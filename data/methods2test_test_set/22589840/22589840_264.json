{"test_class": {"identifier": "StudentMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StudentMapper studentMapperTestObject;", "modifier": "private", "type": "StudentMapper", "declarator": "studentMapperTestObject", "var_name": "studentMapperTestObject"}, {"original_string": "private SapOlatUserDao userMappingDaoMock;", "modifier": "private", "type": "SapOlatUserDao", "declarator": "userMappingDaoMock", "var_name": "userMappingDaoMock"}, {"original_string": "private StudentMappingByMartikelNumber studentMappingByMartikelNumberMock;", "modifier": "private", "type": "StudentMappingByMartikelNumber", "declarator": "studentMappingByMartikelNumberMock", "var_name": "studentMappingByMartikelNumberMock"}, {"original_string": "private MappingByFirstNameAndLastName mappingByFirstNameAndLastNameMock;", "modifier": "private", "type": "MappingByFirstNameAndLastName", "declarator": "mappingByFirstNameAndLastNameMock", "var_name": "mappingByFirstNameAndLastNameMock"}, {"original_string": "private MappingByEmail mappingByEmailMock;", "modifier": "private", "type": "MappingByEmail", "declarator": "mappingByEmailMock", "var_name": "mappingByEmailMock"}, {"original_string": "private Student studentMock;", "modifier": "private", "type": "Student", "declarator": "studentMock", "var_name": "studentMock"}, {"original_string": "private Identity identityMock;", "modifier": "private", "type": "Identity", "declarator": "identityMock", "var_name": "identityMock"}], "file": "olat7.8/src/test/java/org/olat/lms/core/course/campus/impl/mapper/StudentMapperTest.java"}, "test_case": {"identifier": "synchronizeStudentMapping_MappingByEmail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void synchronizeStudentMapping_MappingByEmail() {\n        when(userMappingDaoMock.existsMappingForSapUserId(studentMock.getId())).thenReturn(false);\n        when(studentMappingByMartikelNumberMock.tryToMap(studentMock)).thenReturn(null);\n        when(mappingByEmailMock.tryToMap(studentMock)).thenReturn(identityMock);\n\n        MappingResult result = studentMapperTestObject.synchronizeStudentMapping(studentMock);\n\n        assertEquals(\"\", MappingResult.NEW_MAPPING_BY_EMAIL, result);\n    }", "signature": "void synchronizeStudentMapping_MappingByEmail()", "full_signature": "@Test public void synchronizeStudentMapping_MappingByEmail()", "class_method_signature": "StudentMapperTest.synchronizeStudentMapping_MappingByEmail()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "existsMappingForSapUserId", "getId", "thenReturn", "when", "tryToMap", "thenReturn", "when", "tryToMap", "synchronizeStudentMapping", "assertEquals"]}, "focal_class": {"identifier": "StudentMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    StudentMappingByMartikelNumber studentMappingByMartikelNumber;", "modifier": "@Autowired", "type": "StudentMappingByMartikelNumber", "declarator": "studentMappingByMartikelNumber", "var_name": "studentMappingByMartikelNumber"}, {"original_string": "@Autowired\n    MappingByFirstNameAndLastName mappingByFirstNameAndLastName;", "modifier": "@Autowired", "type": "MappingByFirstNameAndLastName", "declarator": "mappingByFirstNameAndLastName", "var_name": "mappingByFirstNameAndLastName"}, {"original_string": "@Autowired\n    MappingByEmail mappingByEmail;", "modifier": "@Autowired", "type": "MappingByEmail", "declarator": "mappingByEmail", "var_name": "mappingByEmail"}, {"original_string": "@Autowired\n    SapOlatUserDao userMappingDao;", "modifier": "@Autowired", "type": "SapOlatUserDao", "declarator": "userMappingDao", "var_name": "userMappingDao"}], "methods": [{"identifier": "synchronizeStudentMapping", "parameters": "(Student student)", "modifiers": "@Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "MappingResult", "signature": "MappingResult synchronizeStudentMapping(Student student)", "full_signature": "@Transactional(propagation = Propagation.REQUIRES_NEW) public MappingResult synchronizeStudentMapping(Student student)", "class_method_signature": "StudentMapper.synchronizeStudentMapping(Student student)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/course/campus/impl/mapper/StudentMapper.java"}, "focal_method": {"identifier": "synchronizeStudentMapping", "parameters": "(Student student)", "modifiers": "@Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "MappingResult", "body": "@Transactional(propagation = Propagation.REQUIRES_NEW)\n    public MappingResult synchronizeStudentMapping(Student student) {\n        if (!userMappingDao.existsMappingForSapUserId(student.getId())) {\n            // first try to map by personal number\n            Identity mappedIdentity = studentMappingByMartikelNumber.tryToMap(student);\n            if (mappedIdentity != null) {\n                userMappingDao.saveMapping(student, mappedIdentity);\n                return MappingResult.NEW_MAPPING_BY_MATRIKEL_NR;\n            }\n            // second try to map by Email\n            mappedIdentity = mappingByEmail.tryToMap(student);\n            if (mappedIdentity != null) {\n                userMappingDao.saveMapping(student, mappedIdentity);\n                return MappingResult.NEW_MAPPING_BY_EMAIL;\n            }\n            // third try to map by firstName and lastName\n            mappedIdentity = mappingByFirstNameAndLastName.tryToMap(student.getFirstName(), student.getLastName());\n            if (mappedIdentity != null) {\n                // DO NOT SAVE THIS MAPPING, BECAUSE IT HAS TO BE DONE MANUALLY\n                return MappingResult.COULD_BE_MAPPED_MANUALLY;\n            } else {\n                // log.warn(\"Could not map student:\" + student);\n                return MappingResult.COULD_NOT_MAP;\n            }\n        }\n        return MappingResult.MAPPING_ALREADY_EXIST;\n    }", "signature": "MappingResult synchronizeStudentMapping(Student student)", "full_signature": "@Transactional(propagation = Propagation.REQUIRES_NEW) public MappingResult synchronizeStudentMapping(Student student)", "class_method_signature": "StudentMapper.synchronizeStudentMapping(Student student)", "testcase": false, "constructor": false, "invocations": ["existsMappingForSapUserId", "getId", "tryToMap", "saveMapping", "tryToMap", "saveMapping", "tryToMap", "getFirstName", "getLastName"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}