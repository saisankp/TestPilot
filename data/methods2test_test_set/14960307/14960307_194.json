{"test_class": {"identifier": "CircularIndexTest", "superclass": "", "interfaces": "", "fields": [], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/CircularIndexTest.java"}, "test_case": {"identifier": "calculateNextIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateNextIndex() throws Exception {\n        CircularIndex index = new CircularIndex(4);\n\n        Assert.assertEquals(1, index.calculateNewIndex(0, 1));\n        Assert.assertEquals(2, index.calculateNewIndex(1, 1));\n        Assert.assertEquals(3, index.calculateNewIndex(2, 1));\n        Assert.assertEquals(0, index.calculateNewIndex(3, 1));\n        // handle wraparound -- one previous from zero is the end\n        Assert.assertEquals(3, index.calculateNewIndex(0, -1));\n        Assert.assertEquals(2, index.calculateNewIndex(0, -2));\n    }", "signature": "void calculateNextIndex()", "full_signature": "@Test public void calculateNextIndex()", "class_method_signature": "CircularIndexTest.calculateNextIndex()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateNewIndex", "assertEquals", "calculateNewIndex", "assertEquals", "calculateNewIndex", "assertEquals", "calculateNewIndex", "assertEquals", "calculateNewIndex", "assertEquals", "calculateNewIndex"]}, "focal_class": {"identifier": "CircularIndex", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(CircularIndex.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CircularIndex.class)", "var_name": "logger"}, {"original_string": "private boolean resetOnZero;", "modifier": "private", "type": "boolean", "declarator": "resetOnZero", "var_name": "resetOnZero"}, {"original_string": "private long capacity;", "modifier": "private", "type": "long", "declarator": "capacity", "var_name": "capacity"}, {"original_string": "private long size;", "modifier": "private", "type": "long", "declarator": "size", "var_name": "size"}, {"original_string": "private long first;", "modifier": "private", "type": "long", "declarator": "first", "var_name": "first"}, {"original_string": "private long next;", "modifier": "private", "type": "long", "declarator": "next", "var_name": "next"}], "methods": [{"identifier": "CircularIndex", "parameters": "(long capacity)", "modifiers": "public", "return": "", "signature": " CircularIndex(long capacity)", "full_signature": "public  CircularIndex(long capacity)", "class_method_signature": "CircularIndex.CircularIndex(long capacity)", "testcase": false, "constructor": true}, {"identifier": "CircularIndex", "parameters": "(long capacity, boolean resetOnZero)", "modifiers": "public", "return": "", "signature": " CircularIndex(long capacity, boolean resetOnZero)", "full_signature": "public  CircularIndex(long capacity, boolean resetOnZero)", "class_method_signature": "CircularIndex.CircularIndex(long capacity, boolean resetOnZero)", "testcase": false, "constructor": true}, {"identifier": "CircularIndex", "parameters": "(long capacity, long first, long size)", "modifiers": "public", "return": "", "signature": " CircularIndex(long capacity, long first, long size)", "full_signature": "public  CircularIndex(long capacity, long first, long size)", "class_method_signature": "CircularIndex.CircularIndex(long capacity, long first, long size)", "testcase": false, "constructor": true}, {"identifier": "CircularIndex", "parameters": "(long capacity, long first, long size, boolean resetOnZero)", "modifiers": "public", "return": "", "signature": " CircularIndex(long capacity, long first, long size, boolean resetOnZero)", "full_signature": "public  CircularIndex(long capacity, long first, long size, boolean resetOnZero)", "class_method_signature": "CircularIndex.CircularIndex(long capacity, long first, long size, boolean resetOnZero)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "CircularIndex.reset()", "testcase": false, "constructor": false}, {"identifier": "checkReset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkReset()", "full_signature": "private void checkReset()", "class_method_signature": "CircularIndex.checkReset()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCapacity()", "full_signature": "public long getCapacity()", "class_method_signature": "CircularIndex.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "getMaxSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMaxSize()", "full_signature": "public long getMaxSize()", "class_method_signature": "CircularIndex.getMaxSize()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "CircularIndex.getSize()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "CircularIndex.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "isFull", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFull()", "full_signature": "public boolean isFull()", "class_method_signature": "CircularIndex.isFull()", "testcase": false, "constructor": false}, {"identifier": "calculateNewIndex", "parameters": "(long index, long offset)", "modifiers": "protected", "return": "long", "signature": "long calculateNewIndex(long index, long offset)", "full_signature": "protected long calculateNewIndex(long index, long offset)", "class_method_signature": "CircularIndex.calculateNewIndex(long index, long offset)", "testcase": false, "constructor": false}, {"identifier": "addLast", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean addLast()", "full_signature": "public boolean addLast()", "class_method_signature": "CircularIndex.addLast()", "testcase": false, "constructor": false}, {"identifier": "addFirst", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean addFirst()", "full_signature": "public boolean addFirst()", "class_method_signature": "CircularIndex.addFirst()", "testcase": false, "constructor": false}, {"identifier": "removeLast", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean removeLast()", "full_signature": "public boolean removeLast()", "class_method_signature": "CircularIndex.removeLast()", "testcase": false, "constructor": false}, {"identifier": "removeFirst", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean removeFirst()", "full_signature": "public boolean removeFirst()", "class_method_signature": "CircularIndex.removeFirst()", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFirst()", "full_signature": "public long getFirst()", "class_method_signature": "CircularIndex.getFirst()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLast()", "full_signature": "public long getLast()", "class_method_signature": "CircularIndex.getLast()", "testcase": false, "constructor": false}, {"identifier": "getNextLast", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNextLast()", "full_signature": "public long getNextLast()", "class_method_signature": "CircularIndex.getNextLast()", "testcase": false, "constructor": false}, {"identifier": "getNextFirst", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNextFirst()", "full_signature": "public long getNextFirst()", "class_method_signature": "CircularIndex.getNextFirst()", "testcase": false, "constructor": false}, {"identifier": "getInternalFirst", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getInternalFirst()", "full_signature": "protected long getInternalFirst()", "class_method_signature": "CircularIndex.getInternalFirst()", "testcase": false, "constructor": false}, {"identifier": "getInternalNext", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getInternalNext()", "full_signature": "protected long getInternalNext()", "class_method_signature": "CircularIndex.getInternalNext()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CircularIndex.toString()", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/CircularIndex.java"}, "focal_method": {"identifier": "calculateNewIndex", "parameters": "(long index, long offset)", "modifiers": "protected", "return": "long", "body": "protected long calculateNewIndex(long index, long offset) {\n        // capacity is added on LHS to handle negative offsets\n        // Java does not handle negative modulous operands as I thought, so\n        // this is a workaround to correctly calculate it\n        return (index + capacity + offset) % capacity;\n    }", "signature": "long calculateNewIndex(long index, long offset)", "full_signature": "protected long calculateNewIndex(long index, long offset)", "class_method_signature": "CircularIndex.calculateNewIndex(long index, long offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}