{"test_class": {"identifier": "PortfolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tPortfolioService service;", "modifier": "@InjectMocks", "type": "PortfolioService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tOrderRepository repo;", "modifier": "@Mock", "type": "OrderRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "@Mock\n\tRestTemplate restTemplate;", "modifier": "@Mock", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Mock\n\tQuoteRemoteCallService quoteService;", "modifier": "@Mock", "type": "QuoteRemoteCallService", "declarator": "quoteService", "var_name": "quoteService"}, {"original_string": "@Mock\n\tPortfolioRepositoryService portfolioRepositoryService;", "modifier": "@Mock", "type": "PortfolioRepositoryService", "declarator": "portfolioRepositoryService", "var_name": "portfolioRepositoryService"}, {"original_string": "@Mock\n\tTracer tracer;", "modifier": "@Mock", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "Tracing clientTracing = Tracing.newBuilder()\n\t\t\t.localServiceName(\"client\")\n\t\t\t.build();", "modifier": "", "type": "Tracing", "declarator": "clientTracing = Tracing.newBuilder()\n\t\t\t.localServiceName(\"client\")\n\t\t\t.build()", "var_name": "clientTracing"}], "file": "portfolio-service/src/test/java/io/pivotal/portfolio/service/PortfolioServiceTest.java"}, "test_case": {"identifier": "doGetPortfolio", "parameters": "()", "modifiers": "@Ignore(\"Need to figure out how to mock brave spans\") @Test public", "return": "void", "body": "@Ignore(\"Need to figure out how to mock brave spans\")\n\t@Test\n\tpublic void doGetPortfolio() {\n \n\t\twhen(repo.findByUserId(ServiceTestConfiguration.USER_ID)).thenReturn(ServiceTestConfiguration.orders());\n\t\t//when(quoteService.getUri()).thenReturn(uri);\n\t\twhen(quoteService.getQuote(ServiceTestConfiguration.quote().getSymbol())).thenReturn(ServiceTestConfiguration.quote());\n\t\twhen(tracer.nextSpan()).thenReturn(clientTracing.tracer().newTrace());\n\t\twhen(tracer.nextSpan().name(any(String.class))).thenReturn(clientTracing.tracer().newTrace());\n\t\twhen(portfolioRepositoryService.getOrders(ServiceTestConfiguration.USER_ID)).thenReturn(new ArrayList<>());\n\t\t//when(restTemplate.getForObject(\"http://\" + service.quotesService +\"/quote/{symbol}\", Quote.class, ServiceTestConfiguration.quote().getSymbol())).thenReturn(ServiceTestConfiguration.quote());\n\t\tPortfolio folio = service.getPortfolio(ServiceTestConfiguration.USER_ID);\n\t}", "signature": "void doGetPortfolio()", "full_signature": "@Ignore(\"Need to figure out how to mock brave spans\") @Test public void doGetPortfolio()", "class_method_signature": "PortfolioServiceTest.doGetPortfolio()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByUserId", "orders", "thenReturn", "when", "getQuote", "getSymbol", "quote", "quote", "thenReturn", "when", "nextSpan", "newTrace", "tracer", "thenReturn", "when", "name", "nextSpan", "any", "newTrace", "tracer", "thenReturn", "when", "getOrders", "getPortfolio"]}, "focal_class": {"identifier": "PortfolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(PortfolioService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(PortfolioService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tOrderRepository repository;", "modifier": "@Autowired", "type": "OrderRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected String downstreamProtocol;", "modifier": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected", "type": "String", "declarator": "downstreamProtocol", "var_name": "downstreamProtocol"}, {"original_string": "@Autowired\n\tQuoteRemoteCallService quoteService;", "modifier": "@Autowired", "type": "QuoteRemoteCallService", "declarator": "quoteService", "var_name": "quoteService"}, {"original_string": "@Autowired\n\t@LoadBalanced\n\tprivate RestTemplate restTemplate;", "modifier": "@Autowired\n\t@LoadBalanced\n\tprivate", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Autowired\n\tprivate PortfolioRepositoryService portfolioRepositoryService;", "modifier": "@Autowired\n\tprivate", "type": "PortfolioRepositoryService", "declarator": "portfolioRepositoryService", "var_name": "portfolioRepositoryService"}, {"original_string": "@Value(\"${pivotal.accountsService.name}\")\n\tprotected String accountsService;", "modifier": "@Value(\"${pivotal.accountsService.name}\")\n\tprotected", "type": "String", "declarator": "accountsService", "var_name": "accountsService"}], "methods": [{"identifier": "getPortfolio", "parameters": "(String userId)", "modifiers": "public", "return": "Portfolio", "signature": "Portfolio getPortfolio(String userId)", "full_signature": "public Portfolio getPortfolio(String userId)", "class_method_signature": "PortfolioService.getPortfolio(String userId)", "testcase": false, "constructor": false}, {"identifier": "createPortfolio", "parameters": "(Portfolio portfolio, List<Order> orders)", "modifiers": "private", "return": "Portfolio", "signature": "Portfolio createPortfolio(Portfolio portfolio, List<Order> orders)", "full_signature": "private Portfolio createPortfolio(Portfolio portfolio, List<Order> orders)", "class_method_signature": "PortfolioService.createPortfolio(Portfolio portfolio, List<Order> orders)", "testcase": false, "constructor": false}, {"identifier": "addOrder", "parameters": "(Order order)", "modifiers": "@Transactional public", "return": "Order", "signature": "Order addOrder(Order order)", "full_signature": "@Transactional public Order addOrder(Order order)", "class_method_signature": "PortfolioService.addOrder(Order order)", "testcase": false, "constructor": false}], "file": "portfolio-service/src/main/java/io/pivotal/portfolio/service/PortfolioService.java"}, "focal_method": {"identifier": "getPortfolio", "parameters": "(String userId)", "modifiers": "public", "return": "Portfolio", "body": "public Portfolio getPortfolio(String userId) {\n\t\t/*\n\t\t * Retrieve all orders for accounts id and build portfolio. - for each\n\t\t * order create holding. - for each holding find current price.\n\t\t */\n\t\tlogger.debug(\"Getting portfolio for accountId: \" + userId);\n\t\tList<Order> orders = portfolioRepositoryService.getOrders(userId);\n\t\tPortfolio folio = new Portfolio();\n\t\tfolio.setUserName(userId);\n\t\treturn createPortfolio(folio, orders);\n\t}", "signature": "Portfolio getPortfolio(String userId)", "full_signature": "public Portfolio getPortfolio(String userId)", "class_method_signature": "PortfolioService.getPortfolio(String userId)", "testcase": false, "constructor": false, "invocations": ["debug", "getOrders", "setUserName", "createPortfolio"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}