{"test_class": {"identifier": "SkipReceiverExceptionHandlerTest", "superclass": "extends ExceptionHandlingReceiverTest", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing/ExceptionHandlingReceivers/src/test/java/info/smart_tools/smartactors/message_processing/exception_handling_receivers/SkipReceiverExceptionHandlerTest.java"}, "test_case": {"identifier": "Should_SkipTheReceiverThrownAnException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_SkipTheReceiverThrownAnException()\n            throws Exception {\n        IMessageProcessingSequence sequenceMock = mock(IMessageProcessingSequence.class);\n\n        when(messageProcessorMock.getSequence()).thenReturn(sequenceMock);\n\n        when(contextMock.getValue(same(causeLevelFieldName))).thenReturn(137);\n        when(contextMock.getValue(same(causeStepFieldName))).thenReturn(123);\n\n        IMessageReceiver receiver = new SkipReceiverExceptionHandler();\n\n        receiver.receive(messageProcessorMock);\n\n        verify(sequenceMock).goTo(eq(137), eq(124));\n    }", "signature": "void Should_SkipTheReceiverThrownAnException()", "full_signature": "@Test public void Should_SkipTheReceiverThrownAnException()", "class_method_signature": "SkipReceiverExceptionHandlerTest.Should_SkipTheReceiverThrownAnException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSequence", "thenReturn", "when", "getValue", "same", "thenReturn", "when", "getValue", "same", "receive", "goTo", "verify", "eq", "eq"]}, "focal_class": {"identifier": "SkipReceiverExceptionHandler", "superclass": "extends ExceptionHandlingReceiver", "interfaces": "", "fields": [], "methods": [{"identifier": "SkipReceiverExceptionHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " SkipReceiverExceptionHandler()", "full_signature": "public  SkipReceiverExceptionHandler()", "class_method_signature": "SkipReceiverExceptionHandler.SkipReceiverExceptionHandler()", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "SkipReceiverExceptionHandler.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ExceptionHandlingReceivers/src/main/java/info/smart_tools/smartactors/message_processing/exception_handling_receivers/SkipReceiverExceptionHandler.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor)\n            throws MessageReceiveException {\n        IObject context = processor.getContext();\n\n        try {\n            processor.getSequence().goTo(getCauseLevel(context), getCauseStep(context) + 1);\n        } catch (ReadValueException | InvalidArgumentException e) {\n            throw new MessageReceiveException(\"Exception occurred while skipping a receiver thrown exception\", e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "SkipReceiverExceptionHandler.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["getContext", "goTo", "getSequence", "getCauseLevel", "getCauseStep"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}