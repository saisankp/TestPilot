{"test_class": {"identifier": "AbstractOptimizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected boolean started = false;", "modifier": "protected", "type": "boolean", "declarator": "started = false", "var_name": "started"}, {"original_string": "protected boolean archiveHasRun = false;", "modifier": "protected", "type": "boolean", "declarator": "archiveHasRun = false", "var_name": "archiveHasRun"}, {"original_string": "protected boolean completerHasRun = false;", "modifier": "protected", "type": "boolean", "declarator": "completerHasRun = false", "var_name": "completerHasRun"}], "file": "opt4j-core/src/test/java/org/opt4j/core/optimizer/AbstractOptimizerTest.java"}, "test_case": {"identifier": "injectListeners", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void injectListeners() {\n\t\tfinal MockOptimizer optimizer = new MockOptimizer(null, null, null, null, null);\n\t\tOptimizerIterationListener l1 = (int iteration) -> {\n\t\t\t// nothing to be done\n\t\t};\n\t\tOptimizerStateListener l2 = new OptimizerStateListener() {\n\t\t\t@Override\n\t\t\tpublic void optimizationStarted(Optimizer optimizer) {\n\t\t\t\t// nothing to be done\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void optimizationStopped(Optimizer optimizer) {\n\t\t\t\t// nothing to be done\n\t\t\t}\n\n\t\t};\n\t\toptimizer.injectListeners(Collections.singleton(l2), Collections.singleton(l1));\n\n\t\tAssert.assertSame(l1, optimizer.iterationListeners.iterator().next());\n\t\tAssert.assertSame(l2, optimizer.stateListeners.iterator().next());\n\t}", "signature": "void injectListeners()", "full_signature": "@Test public void injectListeners()", "class_method_signature": "AbstractOptimizerTest.injectListeners()", "testcase": true, "constructor": false, "invocations": ["injectListeners", "singleton", "singleton", "assertSame", "next", "iterator", "assertSame", "next", "iterator"]}, "focal_class": {"identifier": "AbstractOptimizer", "superclass": "", "interfaces": "implements Optimizer", "fields": [{"original_string": "protected final Iteration iteration;", "modifier": "protected final", "type": "Iteration", "declarator": "iteration", "var_name": "iteration"}, {"original_string": "protected final Population population;", "modifier": "protected final", "type": "Population", "declarator": "population", "var_name": "population"}, {"original_string": "protected final Archive archive;", "modifier": "protected final", "type": "Archive", "declarator": "archive", "var_name": "archive"}, {"original_string": "protected final IndividualCompleter completer;", "modifier": "protected final", "type": "IndividualCompleter", "declarator": "completer", "var_name": "completer"}, {"original_string": "protected final Control control;", "modifier": "protected final", "type": "Control", "declarator": "control", "var_name": "control"}, {"original_string": "protected final Set<OptimizerStateListener> stateListeners = new CopyOnWriteArraySet<>();", "modifier": "protected final", "type": "Set<OptimizerStateListener>", "declarator": "stateListeners = new CopyOnWriteArraySet<>()", "var_name": "stateListeners"}, {"original_string": "protected final Set<OptimizerIterationListener> iterationListeners = new CopyOnWriteArraySet<>();", "modifier": "protected final", "type": "Set<OptimizerIterationListener>", "declarator": "iterationListeners = new CopyOnWriteArraySet<>()", "var_name": "iterationListeners"}, {"original_string": "protected boolean optimizing = false;", "modifier": "protected", "type": "boolean", "declarator": "optimizing = false", "var_name": "optimizing"}], "methods": [{"identifier": "AbstractOptimizer", "parameters": "(Population population, Archive archive, IndividualCompleter completer, Control control,\n\t\t\tIteration iteration)", "modifiers": "public", "return": "", "signature": " AbstractOptimizer(Population population, Archive archive, IndividualCompleter completer, Control control,\n\t\t\tIteration iteration)", "full_signature": "public  AbstractOptimizer(Population population, Archive archive, IndividualCompleter completer, Control control,\n\t\t\tIteration iteration)", "class_method_signature": "AbstractOptimizer.AbstractOptimizer(Population population, Archive archive, IndividualCompleter completer, Control control,\n\t\t\tIteration iteration)", "testcase": false, "constructor": true}, {"identifier": "injectListeners", "parameters": "(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "modifiers": "@Inject protected", "return": "void", "signature": "void injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "full_signature": "@Inject protected void injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "class_method_signature": "AbstractOptimizer.injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "testcase": false, "constructor": false}, {"identifier": "getIteration", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIteration()", "full_signature": "@Override public int getIteration()", "class_method_signature": "AbstractOptimizer.getIteration()", "testcase": false, "constructor": false}, {"identifier": "isRunning", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRunning()", "full_signature": "@Override public boolean isRunning()", "class_method_signature": "AbstractOptimizer.isRunning()", "testcase": false, "constructor": false}, {"identifier": "nextIteration", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void nextIteration()", "full_signature": "protected void nextIteration()", "class_method_signature": "AbstractOptimizer.nextIteration()", "testcase": false, "constructor": false}, {"identifier": "startOptimization", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startOptimization()", "full_signature": "@Override public void startOptimization()", "class_method_signature": "AbstractOptimizer.startOptimization()", "testcase": false, "constructor": false}, {"identifier": "stopOptimization", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopOptimization()", "full_signature": "@Override public void stopOptimization()", "class_method_signature": "AbstractOptimizer.stopOptimization()", "testcase": false, "constructor": false}, {"identifier": "addOptimizerIterationListener", "parameters": "(OptimizerIterationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addOptimizerIterationListener(OptimizerIterationListener listener)", "full_signature": "@Override public void addOptimizerIterationListener(OptimizerIterationListener listener)", "class_method_signature": "AbstractOptimizer.addOptimizerIterationListener(OptimizerIterationListener listener)", "testcase": false, "constructor": false}, {"identifier": "addOptimizerStateListener", "parameters": "(OptimizerStateListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addOptimizerStateListener(OptimizerStateListener listener)", "full_signature": "@Override public void addOptimizerStateListener(OptimizerStateListener listener)", "class_method_signature": "AbstractOptimizer.addOptimizerStateListener(OptimizerStateListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOptimizerIterationListener", "parameters": "(OptimizerIterationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeOptimizerIterationListener(OptimizerIterationListener listener)", "full_signature": "@Override public void removeOptimizerIterationListener(OptimizerIterationListener listener)", "class_method_signature": "AbstractOptimizer.removeOptimizerIterationListener(OptimizerIterationListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeOptimizerStateListener", "parameters": "(OptimizerStateListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeOptimizerStateListener(OptimizerStateListener listener)", "full_signature": "@Override public void removeOptimizerStateListener(OptimizerStateListener listener)", "class_method_signature": "AbstractOptimizer.removeOptimizerStateListener(OptimizerStateListener listener)", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/optimizer/AbstractOptimizer.java"}, "focal_method": {"identifier": "injectListeners", "parameters": "(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "modifiers": "@Inject protected", "return": "void", "body": "@Inject\n\tprotected void injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners) {\n\t\tthis.stateListeners.addAll(stateListeners);\n\t\tthis.iterationListeners.addAll(iterationListeners);\n\t}", "signature": "void injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "full_signature": "@Inject protected void injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "class_method_signature": "AbstractOptimizer.injectListeners(Set<OptimizerStateListener> stateListeners,\n\t\t\tSet<OptimizerIterationListener> iterationListeners)", "testcase": false, "constructor": false, "invocations": ["addAll", "addAll"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}