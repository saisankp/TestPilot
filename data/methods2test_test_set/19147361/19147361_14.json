{"test_class": {"identifier": "TestLockCleaner", "superclass": "extends ClientTestBase", "interfaces": "", "fields": [{"original_string": "protected ThemisCoprocessorClient cpClient;", "modifier": "protected", "type": "ThemisCoprocessorClient", "declarator": "cpClient", "var_name": "cpClient"}, {"original_string": "protected LockCleaner lockCleaner;", "modifier": "protected", "type": "LockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/lockcleaner/TestLockCleaner.java"}, "test_case": {"identifier": "testTryToCleanLockFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTryToCleanLockFail() throws Exception {\n    // lock with null column\n    ThemisLock nullColumnLock = getLock(COLUMN);\n    nullColumnLock.setColumn(null);\n    try {\n      lockCleaner.tryToCleanLock(nullColumnLock);\n      Assert.fail();\n    } catch (ThemisFatalException e) {}\n    \n    boolean[] cleanLocksOptions = new boolean[]{false, true};\n    for (boolean cleanLocks : cleanLocksOptions) {\n      // lock should be cleaned but clean fail\n      ThemisLock lc = getLock(COLUMN);\n      writeLockAndData(COLUMN);\n      Mockito.when(mockRegister.isWorkerAlive(lc.getClientAddress())).thenReturn(false);\n      HBaseAdmin admin = new HBaseAdmin(connection.getConfiguration());\n      admin.disableTable(TABLENAME);\n      try {\n        invokeTryToCleanLock(lc, cleanLocks);\n      } catch (IOException e) {\n        Assert.assertTrue(e.getCause() instanceof RetriesExhaustedException);\n        admin.enableTable(TABLENAME);\n        checkPrewriteColumnSuccess(COLUMN);\n      } finally {\n        admin.close();\n      }\n      // lock should not be cleaned after retry\n      deleteOldDataAndUpdateTs();\n      writeLockAndData(COLUMN);\n      lc = getLock(COLUMN);\n      Mockito.when(mockRegister.isWorkerAlive(lc.getClientAddress())).thenReturn(true);\n      long startTs = System.currentTimeMillis();\n      try {\n        invokeTryToCleanLock(lc, cleanLocks);\n        Assert.fail();\n      } catch (LockConflictException e) {\n        checkPrewriteColumnSuccess(COLUMN);\n        Assert.assertTrue((System.currentTimeMillis() - startTs) >= 100);\n      }\n    }\n  }", "signature": "void testTryToCleanLockFail()", "full_signature": "@Test public void testTryToCleanLockFail()", "class_method_signature": "TestLockCleaner.testTryToCleanLockFail()", "testcase": true, "constructor": false, "invocations": ["getLock", "setColumn", "tryToCleanLock", "fail", "getLock", "writeLockAndData", "thenReturn", "when", "isWorkerAlive", "getClientAddress", "getConfiguration", "disableTable", "invokeTryToCleanLock", "assertTrue", "getCause", "enableTable", "checkPrewriteColumnSuccess", "close", "deleteOldDataAndUpdateTs", "writeLockAndData", "getLock", "thenReturn", "when", "isWorkerAlive", "getClientAddress", "currentTimeMillis", "invokeTryToCleanLock", "fail", "checkPrewriteColumnSuccess", "assertTrue", "currentTimeMillis"]}, "focal_class": {"identifier": "LockCleaner", "superclass": "extends ServerLockCleaner", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(LockCleaner.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(LockCleaner.class)", "var_name": "LOG"}, {"original_string": "private static Object cleanerLock = new Object();", "modifier": "private static", "type": "Object", "declarator": "cleanerLock = new Object()", "var_name": "cleanerLock"}, {"original_string": "private static LockCleaner lockCleaner;", "modifier": "private static", "type": "LockCleaner", "declarator": "lockCleaner", "var_name": "lockCleaner"}, {"original_string": "private WorkerRegister register;", "modifier": "private", "type": "WorkerRegister", "declarator": "register", "var_name": "register"}, {"original_string": "private final int retry;", "modifier": "private final", "type": "int", "declarator": "retry", "var_name": "retry"}, {"original_string": "private final int pause;", "modifier": "private final", "type": "int", "declarator": "pause", "var_name": "pause"}, {"original_string": "private final int clientLockTTl;", "modifier": "private final", "type": "int", "declarator": "clientLockTTl", "var_name": "clientLockTTl"}], "methods": [{"identifier": "getLockCleaner", "parameters": "(Configuration conf, HConnection conn,\n      WorkerRegister register, ThemisCoprocessorClient cpClient)", "modifiers": "public static", "return": "LockCleaner", "signature": "LockCleaner getLockCleaner(Configuration conf, HConnection conn,\n      WorkerRegister register, ThemisCoprocessorClient cpClient)", "full_signature": "public static LockCleaner getLockCleaner(Configuration conf, HConnection conn,\n      WorkerRegister register, ThemisCoprocessorClient cpClient)", "class_method_signature": "LockCleaner.getLockCleaner(Configuration conf, HConnection conn,\n      WorkerRegister register, ThemisCoprocessorClient cpClient)", "testcase": false, "constructor": false}, {"identifier": "LockCleaner", "parameters": "(Configuration conf, HConnection conn, WorkerRegister register,\n      ThemisCoprocessorClient cpClient)", "modifiers": "public", "return": "", "signature": " LockCleaner(Configuration conf, HConnection conn, WorkerRegister register,\n      ThemisCoprocessorClient cpClient)", "full_signature": "public  LockCleaner(Configuration conf, HConnection conn, WorkerRegister register,\n      ThemisCoprocessorClient cpClient)", "class_method_signature": "LockCleaner.LockCleaner(Configuration conf, HConnection conn, WorkerRegister register,\n      ThemisCoprocessorClient cpClient)", "testcase": false, "constructor": true}, {"identifier": "shouldCleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "boolean", "signature": "boolean shouldCleanLock(ThemisLock lock)", "full_signature": "public boolean shouldCleanLock(ThemisLock lock)", "class_method_signature": "LockCleaner.shouldCleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "constructLocks", "parameters": "(byte[] tableName, List<KeyValue> lockKvs,\n      ThemisCoprocessorClient cpClient, int clientLockTTL)", "modifiers": "public static", "return": "List<ThemisLock>", "signature": "List<ThemisLock> constructLocks(byte[] tableName, List<KeyValue> lockKvs,\n      ThemisCoprocessorClient cpClient, int clientLockTTL)", "full_signature": "public static List<ThemisLock> constructLocks(byte[] tableName, List<KeyValue> lockKvs,\n      ThemisCoprocessorClient cpClient, int clientLockTTL)", "class_method_signature": "LockCleaner.constructLocks(byte[] tableName, List<KeyValue> lockKvs,\n      ThemisCoprocessorClient cpClient, int clientLockTTL)", "testcase": false, "constructor": false}, {"identifier": "checkLockExpired", "parameters": "(ThemisLock lock, ThemisCoprocessorClient cpClient,\n      int clientLockTTL)", "modifiers": "public static", "return": "void", "signature": "void checkLockExpired(ThemisLock lock, ThemisCoprocessorClient cpClient,\n      int clientLockTTL)", "full_signature": "public static void checkLockExpired(ThemisLock lock, ThemisCoprocessorClient cpClient,\n      int clientLockTTL)", "class_method_signature": "LockCleaner.checkLockExpired(ThemisLock lock, ThemisCoprocessorClient cpClient,\n      int clientLockTTL)", "testcase": false, "constructor": false}, {"identifier": "tryToCleanLocks", "parameters": "(byte[] tableName, List<KeyValue> lockColumns)", "modifiers": "public", "return": "void", "signature": "void tryToCleanLocks(byte[] tableName, List<KeyValue> lockColumns)", "full_signature": "public void tryToCleanLocks(byte[] tableName, List<KeyValue> lockColumns)", "class_method_signature": "LockCleaner.tryToCleanLocks(byte[] tableName, List<KeyValue> lockColumns)", "testcase": false, "constructor": false}, {"identifier": "checkLockExpiredAndTryToCleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "boolean", "signature": "boolean checkLockExpiredAndTryToCleanLock(ThemisLock lock)", "full_signature": "public boolean checkLockExpiredAndTryToCleanLock(ThemisLock lock)", "class_method_signature": "LockCleaner.checkLockExpiredAndTryToCleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "tryToCleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "boolean", "signature": "boolean tryToCleanLock(ThemisLock lock)", "full_signature": "public boolean tryToCleanLock(ThemisLock lock)", "class_method_signature": "LockCleaner.tryToCleanLock(ThemisLock lock)", "testcase": false, "constructor": false}, {"identifier": "hasLock", "parameters": "(ThemisLock lock)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasLock(ThemisLock lock)", "full_signature": "protected boolean hasLock(ThemisLock lock)", "class_method_signature": "LockCleaner.hasLock(ThemisLock lock)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/lockcleaner/LockCleaner.java"}, "focal_method": {"identifier": "tryToCleanLock", "parameters": "(ThemisLock lock)", "modifiers": "public", "return": "boolean", "body": "public boolean tryToCleanLock(ThemisLock lock) throws IOException {\n    if (lock.getColumn() == null) {\n      throw new ThemisFatalException(\"column of lock should not be null for clean, lock=\" + lock);\n    }\n    for (int current = 0; current < retry; ++current) {\n      if (this.shouldCleanLock(lock)) {\n        this.cleanLock(lock);\n        return true;\n      }\n      if (current + 1 < retry) {\n        LOG.warn(\"sleep \" + pause + \" to clean lock, current=\" + current + \", retry=\" + retry\n            + \", clientLockTTL=\" + clientLockTTl + \", type=\" + TransactionTTL.timestampType);\n        Threads.sleep(pause);\n        // must check expired between retry\n        checkLockExpired(lock, cpClient, clientLockTTl);\n      }\n    }\n    // check the whether the lock has been cleaned by other transaction\n    if (hasLock(lock)) {\n      throw new LockConflictException(\"lock can't be cleaned after retry=\" + retry + \", column=\"\n          + lock.getColumn() + \", prewriteTs=\" + lock.getTimestamp());\n    } else {\n      LOG.warn(\"lock has been clean by other transaction, lock=\" + lock);\n    }\n    return false;\n  }", "signature": "boolean tryToCleanLock(ThemisLock lock)", "full_signature": "public boolean tryToCleanLock(ThemisLock lock)", "class_method_signature": "LockCleaner.tryToCleanLock(ThemisLock lock)", "testcase": false, "constructor": false, "invocations": ["getColumn", "shouldCleanLock", "cleanLock", "warn", "sleep", "checkLockExpired", "hasLock", "getColumn", "getTimestamp", "warn"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}