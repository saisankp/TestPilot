{"test_class": {"identifier": "SessionPoolTest", "superclass": "", "interfaces": "", "fields": [], "file": "session/src/test/java/org/apache/iotdb/session/pool/SessionPoolTest.java"}, "test_case": {"identifier": "executeQueryStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void executeQueryStatement() {\n    SessionPool pool = new SessionPool(\"127.0.0.1\", 6667, \"root\", \"root\", 3);\n    correctQuery(pool);\n    pool.close();\n  }", "signature": "void executeQueryStatement()", "full_signature": "@Test public void executeQueryStatement()", "class_method_signature": "SessionPoolTest.executeQueryStatement()", "testcase": true, "constructor": false, "invocations": ["correctQuery", "close"]}, "focal_class": {"identifier": "SessionPool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionPool.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionPool.class)", "var_name": "logger"}, {"original_string": "private static int RETRY = 3;", "modifier": "private static", "type": "int", "declarator": "RETRY = 3", "var_name": "RETRY"}, {"original_string": "private ConcurrentLinkedDeque<Session> queue = new ConcurrentLinkedDeque<>();", "modifier": "private", "type": "ConcurrentLinkedDeque<Session>", "declarator": "queue = new ConcurrentLinkedDeque<>()", "var_name": "queue"}, {"original_string": "private ConcurrentMap<Session, Session> occupied = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentMap<Session, Session>", "declarator": "occupied = new ConcurrentHashMap<>()", "var_name": "occupied"}, {"original_string": "private int size = 0;", "modifier": "private", "type": "int", "declarator": "size = 0", "var_name": "size"}, {"original_string": "private int maxSize = 0;", "modifier": "private", "type": "int", "declarator": "maxSize = 0", "var_name": "maxSize"}, {"original_string": "private String ip;", "modifier": "private", "type": "String", "declarator": "ip", "var_name": "ip"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private String user;", "modifier": "private", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private int fetchSize;", "modifier": "private", "type": "int", "declarator": "fetchSize", "var_name": "fetchSize"}, {"original_string": "private long timeout;", "modifier": "private", "type": "long", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private static int FINAL_RETRY = RETRY - 1;", "modifier": "private static", "type": "int", "declarator": "FINAL_RETRY = RETRY - 1", "var_name": "FINAL_RETRY"}, {"original_string": "private boolean enableCompression = false;", "modifier": "private", "type": "boolean", "declarator": "enableCompression = false", "var_name": "enableCompression"}], "methods": [{"identifier": "SessionPool", "parameters": "(String ip, int port, String user, String password, int maxSize)", "modifiers": "public", "return": "", "signature": " SessionPool(String ip, int port, String user, String password, int maxSize)", "full_signature": "public  SessionPool(String ip, int port, String user, String password, int maxSize)", "class_method_signature": "SessionPool.SessionPool(String ip, int port, String user, String password, int maxSize)", "testcase": false, "constructor": true}, {"identifier": "SessionPool", "parameters": "(String ip, int port, String user, String password, int maxSize,\n      boolean enableCompression)", "modifiers": "public", "return": "", "signature": " SessionPool(String ip, int port, String user, String password, int maxSize,\n      boolean enableCompression)", "full_signature": "public  SessionPool(String ip, int port, String user, String password, int maxSize,\n      boolean enableCompression)", "class_method_signature": "SessionPool.SessionPool(String ip, int port, String user, String password, int maxSize,\n      boolean enableCompression)", "testcase": false, "constructor": true}, {"identifier": "SessionPool", "parameters": "(String ip, int port, String user, String password, int maxSize, int fetchSize,\n      long timeout, boolean enableCompression)", "modifiers": "@SuppressWarnings(\"squid:S107\") public", "return": "", "signature": " SessionPool(String ip, int port, String user, String password, int maxSize, int fetchSize,\n      long timeout, boolean enableCompression)", "full_signature": "@SuppressWarnings(\"squid:S107\") public  SessionPool(String ip, int port, String user, String password, int maxSize, int fetchSize,\n      long timeout, boolean enableCompression)", "class_method_signature": "SessionPool.SessionPool(String ip, int port, String user, String password, int maxSize, int fetchSize,\n      long timeout, boolean enableCompression)", "testcase": false, "constructor": true}, {"identifier": "getSession", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "Session", "signature": "Session getSession()", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private Session getSession()", "class_method_signature": "SessionPool.getSession()", "testcase": false, "constructor": false}, {"identifier": "currentAvailableSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int currentAvailableSize()", "full_signature": "public int currentAvailableSize()", "class_method_signature": "SessionPool.currentAvailableSize()", "testcase": false, "constructor": false}, {"identifier": "currentOccupiedSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int currentOccupiedSize()", "full_signature": "public int currentOccupiedSize()", "class_method_signature": "SessionPool.currentOccupiedSize()", "testcase": false, "constructor": false}, {"identifier": "putBack", "parameters": "(Session session)", "modifiers": "private", "return": "void", "signature": "void putBack(Session session)", "full_signature": "private void putBack(Session session)", "class_method_signature": "SessionPool.putBack(Session session)", "testcase": false, "constructor": false}, {"identifier": "occupy", "parameters": "(Session session)", "modifiers": "private", "return": "void", "signature": "void occupy(Session session)", "full_signature": "private void occupy(Session session)", "class_method_signature": "SessionPool.occupy(Session session)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "SessionPool.close()", "testcase": false, "constructor": false}, {"identifier": "closeResultSet", "parameters": "(SessionDataSetWrapper wrapper)", "modifiers": "public", "return": "void", "signature": "void closeResultSet(SessionDataSetWrapper wrapper)", "full_signature": "public void closeResultSet(SessionDataSetWrapper wrapper)", "class_method_signature": "SessionPool.closeResultSet(SessionDataSetWrapper wrapper)", "testcase": false, "constructor": false}, {"identifier": "removeSession", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void removeSession()", "full_signature": "private synchronized void removeSession()", "class_method_signature": "SessionPool.removeSession()", "testcase": false, "constructor": false}, {"identifier": "closeSession", "parameters": "(Session session)", "modifiers": "private", "return": "void", "signature": "void closeSession(Session session)", "full_signature": "private void closeSession(Session session)", "class_method_signature": "SessionPool.closeSession(Session session)", "testcase": false, "constructor": false}, {"identifier": "cleanSessionAndMayThrowConnectionException", "parameters": "(Session session, int times, IoTDBConnectionException e)", "modifiers": "private", "return": "void", "signature": "void cleanSessionAndMayThrowConnectionException(Session session, int times, IoTDBConnectionException e)", "full_signature": "private void cleanSessionAndMayThrowConnectionException(Session session, int times, IoTDBConnectionException e)", "class_method_signature": "SessionPool.cleanSessionAndMayThrowConnectionException(Session session, int times, IoTDBConnectionException e)", "testcase": false, "constructor": false}, {"identifier": "insertTablet", "parameters": "(Tablet tablet)", "modifiers": "public", "return": "void", "signature": "void insertTablet(Tablet tablet)", "full_signature": "public void insertTablet(Tablet tablet)", "class_method_signature": "SessionPool.insertTablet(Tablet tablet)", "testcase": false, "constructor": false}, {"identifier": "insertTablet", "parameters": "(Tablet tablet, boolean sorted)", "modifiers": "public", "return": "void", "signature": "void insertTablet(Tablet tablet, boolean sorted)", "full_signature": "public void insertTablet(Tablet tablet, boolean sorted)", "class_method_signature": "SessionPool.insertTablet(Tablet tablet, boolean sorted)", "testcase": false, "constructor": false}, {"identifier": "insertTablets", "parameters": "(Map<String, Tablet> tablets)", "modifiers": "public", "return": "void", "signature": "void insertTablets(Map<String, Tablet> tablets)", "full_signature": "public void insertTablets(Map<String, Tablet> tablets)", "class_method_signature": "SessionPool.insertTablets(Map<String, Tablet> tablets)", "testcase": false, "constructor": false}, {"identifier": "insertTablets", "parameters": "(Map<String, Tablet> tablets, boolean sorted)", "modifiers": "public", "return": "void", "signature": "void insertTablets(Map<String, Tablet> tablets, boolean sorted)", "full_signature": "public void insertTablets(Map<String, Tablet> tablets, boolean sorted)", "class_method_signature": "SessionPool.insertTablets(Map<String, Tablet> tablets, boolean sorted)", "testcase": false, "constructor": false}, {"identifier": "insertRecords", "parameters": "(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "modifiers": "public", "return": "void", "signature": "void insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "full_signature": "public void insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "class_method_signature": "SessionPool.insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "testcase": false, "constructor": false}, {"identifier": "insertRecords", "parameters": "(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "modifiers": "public", "return": "void", "signature": "void insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "full_signature": "public void insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "class_method_signature": "SessionPool.insertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "testcase": false, "constructor": false}, {"identifier": "insertRecord", "parameters": "(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "modifiers": "public", "return": "void", "signature": "void insertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "full_signature": "public void insertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "class_method_signature": "SessionPool.insertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "insertRecord", "parameters": "(String deviceId, long time, List<String> measurements,\n      List<String> values)", "modifiers": "public", "return": "void", "signature": "void insertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "full_signature": "public void insertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "class_method_signature": "SessionPool.insertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "testcase": false, "constructor": false}, {"identifier": "testInsertTablet", "parameters": "(Tablet tablet)", "modifiers": "public", "return": "void", "signature": "void testInsertTablet(Tablet tablet)", "full_signature": "public void testInsertTablet(Tablet tablet)", "class_method_signature": "SessionPool.testInsertTablet(Tablet tablet)", "testcase": false, "constructor": false}, {"identifier": "testInsertTablets", "parameters": "(Map<String, Tablet> tablets)", "modifiers": "public", "return": "void", "signature": "void testInsertTablets(Map<String, Tablet> tablets)", "full_signature": "public void testInsertTablets(Map<String, Tablet> tablets)", "class_method_signature": "SessionPool.testInsertTablets(Map<String, Tablet> tablets)", "testcase": false, "constructor": false}, {"identifier": "testInsertRecords", "parameters": "(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "modifiers": "public", "return": "void", "signature": "void testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "full_signature": "public void testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "class_method_signature": "SessionPool.testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<String>> valuesList)", "testcase": false, "constructor": false}, {"identifier": "testInsertRecords", "parameters": "(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "modifiers": "public", "return": "void", "signature": "void testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "full_signature": "public void testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "class_method_signature": "SessionPool.testInsertRecords(List<String> deviceIds, List<Long> times,\n      List<List<String>> measurementsList, List<List<TSDataType>> typesList,\n      List<List<Object>> valuesList)", "testcase": false, "constructor": false}, {"identifier": "testInsertRecord", "parameters": "(String deviceId, long time, List<String> measurements,\n      List<String> values)", "modifiers": "public", "return": "void", "signature": "void testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "full_signature": "public void testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "class_method_signature": "SessionPool.testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<String> values)", "testcase": false, "constructor": false}, {"identifier": "testInsertRecord", "parameters": "(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "modifiers": "public", "return": "void", "signature": "void testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "full_signature": "public void testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "class_method_signature": "SessionPool.testInsertRecord(String deviceId, long time, List<String> measurements,\n      List<TSDataType> types, List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "deleteTimeseries", "parameters": "(String path)", "modifiers": "public", "return": "void", "signature": "void deleteTimeseries(String path)", "full_signature": "public void deleteTimeseries(String path)", "class_method_signature": "SessionPool.deleteTimeseries(String path)", "testcase": false, "constructor": false}, {"identifier": "deleteTimeseries", "parameters": "(List<String> paths)", "modifiers": "public", "return": "void", "signature": "void deleteTimeseries(List<String> paths)", "full_signature": "public void deleteTimeseries(List<String> paths)", "class_method_signature": "SessionPool.deleteTimeseries(List<String> paths)", "testcase": false, "constructor": false}, {"identifier": "deleteData", "parameters": "(String path, long time)", "modifiers": "public", "return": "void", "signature": "void deleteData(String path, long time)", "full_signature": "public void deleteData(String path, long time)", "class_method_signature": "SessionPool.deleteData(String path, long time)", "testcase": false, "constructor": false}, {"identifier": "deleteData", "parameters": "(List<String> paths, long time)", "modifiers": "public", "return": "void", "signature": "void deleteData(List<String> paths, long time)", "full_signature": "public void deleteData(List<String> paths, long time)", "class_method_signature": "SessionPool.deleteData(List<String> paths, long time)", "testcase": false, "constructor": false}, {"identifier": "setStorageGroup", "parameters": "(String storageGroupId)", "modifiers": "public", "return": "void", "signature": "void setStorageGroup(String storageGroupId)", "full_signature": "public void setStorageGroup(String storageGroupId)", "class_method_signature": "SessionPool.setStorageGroup(String storageGroupId)", "testcase": false, "constructor": false}, {"identifier": "deleteStorageGroup", "parameters": "(String storageGroup)", "modifiers": "public", "return": "void", "signature": "void deleteStorageGroup(String storageGroup)", "full_signature": "public void deleteStorageGroup(String storageGroup)", "class_method_signature": "SessionPool.deleteStorageGroup(String storageGroup)", "testcase": false, "constructor": false}, {"identifier": "deleteStorageGroups", "parameters": "(List<String> storageGroup)", "modifiers": "public", "return": "void", "signature": "void deleteStorageGroups(List<String> storageGroup)", "full_signature": "public void deleteStorageGroups(List<String> storageGroup)", "class_method_signature": "SessionPool.deleteStorageGroups(List<String> storageGroup)", "testcase": false, "constructor": false}, {"identifier": "createTimeseries", "parameters": "(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor)", "modifiers": "public", "return": "void", "signature": "void createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor)", "full_signature": "public void createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor)", "class_method_signature": "SessionPool.createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor)", "testcase": false, "constructor": false}, {"identifier": "createTimeseries", "parameters": "(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, Map<String, String> tags,\n      Map<String, String> attributes, String measurementAlias)", "modifiers": "public", "return": "void", "signature": "void createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, Map<String, String> tags,\n      Map<String, String> attributes, String measurementAlias)", "full_signature": "public void createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, Map<String, String> tags,\n      Map<String, String> attributes, String measurementAlias)", "class_method_signature": "SessionPool.createTimeseries(String path, TSDataType dataType, TSEncoding encoding,\n      CompressionType compressor, Map<String, String> props, Map<String, String> tags,\n      Map<String, String> attributes, String measurementAlias)", "testcase": false, "constructor": false}, {"identifier": "createMultiTimeseries", "parameters": "(List<String> paths, List<TSDataType> dataTypes,\n      List<TSEncoding> encodings, List<CompressionType> compressors,\n      List<Map<String, String>> propsList, List<Map<String, String>> tagsList,\n      List<Map<String, String>> attributesList, List<String> measurementAliasList)", "modifiers": "public", "return": "void", "signature": "void createMultiTimeseries(List<String> paths, List<TSDataType> dataTypes,\n      List<TSEncoding> encodings, List<CompressionType> compressors,\n      List<Map<String, String>> propsList, List<Map<String, String>> tagsList,\n      List<Map<String, String>> attributesList, List<String> measurementAliasList)", "full_signature": "public void createMultiTimeseries(List<String> paths, List<TSDataType> dataTypes,\n      List<TSEncoding> encodings, List<CompressionType> compressors,\n      List<Map<String, String>> propsList, List<Map<String, String>> tagsList,\n      List<Map<String, String>> attributesList, List<String> measurementAliasList)", "class_method_signature": "SessionPool.createMultiTimeseries(List<String> paths, List<TSDataType> dataTypes,\n      List<TSEncoding> encodings, List<CompressionType> compressors,\n      List<Map<String, String>> propsList, List<Map<String, String>> tagsList,\n      List<Map<String, String>> attributesList, List<String> measurementAliasList)", "testcase": false, "constructor": false}, {"identifier": "checkTimeseriesExists", "parameters": "(String path)", "modifiers": "public", "return": "boolean", "signature": "boolean checkTimeseriesExists(String path)", "full_signature": "public boolean checkTimeseriesExists(String path)", "class_method_signature": "SessionPool.checkTimeseriesExists(String path)", "testcase": false, "constructor": false}, {"identifier": "executeQueryStatement", "parameters": "(String sql)", "modifiers": "public", "return": "SessionDataSetWrapper", "signature": "SessionDataSetWrapper executeQueryStatement(String sql)", "full_signature": "public SessionDataSetWrapper executeQueryStatement(String sql)", "class_method_signature": "SessionPool.executeQueryStatement(String sql)", "testcase": false, "constructor": false}, {"identifier": "executeNonQueryStatement", "parameters": "(String sql)", "modifiers": "public", "return": "void", "signature": "void executeNonQueryStatement(String sql)", "full_signature": "public void executeNonQueryStatement(String sql)", "class_method_signature": "SessionPool.executeNonQueryStatement(String sql)", "testcase": false, "constructor": false}], "file": "session/src/main/java/org/apache/iotdb/session/pool/SessionPool.java"}, "focal_method": {"identifier": "executeQueryStatement", "parameters": "(String sql)", "modifiers": "public", "return": "SessionDataSetWrapper", "body": "public SessionDataSetWrapper executeQueryStatement(String sql)\n      throws IoTDBConnectionException, StatementExecutionException {\n    for (int i = 0; i < RETRY; i++) {\n      Session session = getSession();\n      try {\n        SessionDataSet resp = session.executeQueryStatement(sql);\n        SessionDataSetWrapper wrapper = new SessionDataSetWrapper(resp, session, this);\n        occupy(session);\n        return wrapper;\n      } catch (IoTDBConnectionException e) {\n        // TException means the connection is broken, remove it and get a new one.\n        cleanSessionAndMayThrowConnectionException(session, i, e);\n      } catch (StatementExecutionException e) {\n        putBack(session);\n        throw e;\n      }\n    }\n    // never go here\n    return null;\n  }", "signature": "SessionDataSetWrapper executeQueryStatement(String sql)", "full_signature": "public SessionDataSetWrapper executeQueryStatement(String sql)", "class_method_signature": "SessionPool.executeQueryStatement(String sql)", "testcase": false, "constructor": false, "invocations": ["getSession", "executeQueryStatement", "occupy", "cleanSessionAndMayThrowConnectionException", "putBack"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}