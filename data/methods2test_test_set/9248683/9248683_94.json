{"test_class": {"identifier": "SolrQueryExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Class<TestClass> entityClass = TestClass.class;", "modifier": "private final", "type": "Class<TestClass>", "declarator": "entityClass = TestClass.class", "var_name": "entityClass"}, {"original_string": "private final SolrServer solrServer = mock(SolrServer.class);", "modifier": "private final", "type": "SolrServer", "declarator": "solrServer = mock(SolrServer.class)", "var_name": "solrServer"}, {"original_string": "private final SolrQueryTranslator queryTranslator = mock(SolrQueryTranslator.class);", "modifier": "private final", "type": "SolrQueryTranslator", "declarator": "queryTranslator = mock(SolrQueryTranslator.class)", "var_name": "queryTranslator"}, {"original_string": "private final SolrQueryExecutor executor = new SolrQueryExecutor(solrServer, queryTranslator);", "modifier": "private final", "type": "SolrQueryExecutor", "declarator": "executor = new SolrQueryExecutor(solrServer, queryTranslator)", "var_name": "executor"}, {"original_string": "private final Query<TestClass, TestClass> query = QueryBuilder\n            .builderFor(entityClass).add(Restrictions.eq(\"name\", \"test\"))\n            .build();", "modifier": "private final", "type": "Query<TestClass, TestClass>", "declarator": "query = QueryBuilder\n            .builderFor(entityClass).add(Restrictions.eq(\"name\", \"test\"))\n            .build()", "var_name": "query"}, {"original_string": "private final String queryString = query.getCriteria().toString();", "modifier": "private final", "type": "String", "declarator": "queryString = query.getCriteria().toString()", "var_name": "queryString"}, {"original_string": "private final Query<TestClass, Long> idQuery = QueryBuilder\n            .builderFor(entityClass, Long.class, \"id\").build();", "modifier": "private final", "type": "Query<TestClass, Long>", "declarator": "idQuery = QueryBuilder\n            .builderFor(entityClass, Long.class, \"id\").build()", "var_name": "idQuery"}, {"original_string": "private final Query<TestClass, TestClassTuple> tupleQuery = QueryBuilder\n            .builderFor(entityClass, TestClassTuple.class, \"id\").build();", "modifier": "private final", "type": "Query<TestClass, TestClassTuple>", "declarator": "tupleQuery = QueryBuilder\n            .builderFor(entityClass, TestClassTuple.class, \"id\").build()", "var_name": "tupleQuery"}, {"original_string": "private final Query<TestClass, TestClassTuple2> tuple2Query = QueryBuilder\n            .builderFor(entityClass, TestClassTuple2.class, \"id\").build();", "modifier": "private final", "type": "Query<TestClass, TestClassTuple2>", "declarator": "tuple2Query = QueryBuilder\n            .builderFor(entityClass, TestClassTuple2.class, \"id\").build()", "var_name": "tuple2Query"}, {"original_string": "private final TestClass t1 = new TestClass(1L, \"test1\", 1, 2);", "modifier": "private final", "type": "TestClass", "declarator": "t1 = new TestClass(1L, \"test1\", 1, 2)", "var_name": "t1"}, {"original_string": "private final TestClass[] tests = {\n            new TestClass(1L, \"test1\", 1, 2),\n            new TestClass(2L, \"test2\", 3, 4),\n            new TestClass(3L, \"test3\", 5, 6),\n            new TestClass(4L, \"test4\", 7, 8),\n            new TestClass(5L, \"test5\", 9, 0),\n            new TestClass(6L, \"test6\", 1, 2),\n    };", "modifier": "private final", "type": "TestClass[]", "declarator": "tests = {\n            new TestClass(1L, \"test1\", 1, 2),\n            new TestClass(2L, \"test2\", 3, 4),\n            new TestClass(3L, \"test3\", 5, 6),\n            new TestClass(4L, \"test4\", 7, 8),\n            new TestClass(5L, \"test5\", 9, 0),\n            new TestClass(6L, \"test6\", 1, 2),\n    }", "var_name": "tests"}, {"original_string": "private final Long[] ids = new Long[tests.length];", "modifier": "private final", "type": "Long[]", "declarator": "ids = new Long[tests.length]", "var_name": "ids"}], "file": "seeking-solr/src/test/java/com/eharmony/matching/seeking/executor/solr/SolrQueryExecutorTest.java"}, "test_case": {"identifier": "save", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void save() {\n        TestClass saved = executor.save(t1);\n        assertEquals(t1, saved);\n    }", "signature": "void save()", "full_signature": "@Test public void save()", "class_method_signature": "SolrQueryExecutorTest.save()", "testcase": true, "constructor": false, "invocations": ["save", "assertEquals"]}, "focal_class": {"identifier": "SolrQueryExecutor", "superclass": "", "interfaces": "implements QueryExecutor", "fields": [{"original_string": "private final SolrQueryTranslator queryTranslator;", "modifier": "private final", "type": "SolrQueryTranslator", "declarator": "queryTranslator", "var_name": "queryTranslator"}, {"original_string": "private final SolrServer solrServer;", "modifier": "private final", "type": "SolrServer", "declarator": "solrServer", "var_name": "solrServer"}, {"original_string": "private final SolrResultsTransformer transformer = new SolrResultsTransformer();", "modifier": "private final", "type": "SolrResultsTransformer", "declarator": "transformer = new SolrResultsTransformer()", "var_name": "transformer"}], "methods": [{"identifier": "SolrQueryExecutor", "parameters": "(SolrServer solrServer,\n            SolrQueryTranslator queryTranslator)", "modifiers": "public", "return": "", "signature": " SolrQueryExecutor(SolrServer solrServer,\n            SolrQueryTranslator queryTranslator)", "full_signature": "public  SolrQueryExecutor(SolrServer solrServer,\n            SolrQueryTranslator queryTranslator)", "class_method_signature": "SolrQueryExecutor.SolrQueryExecutor(SolrServer solrServer,\n            SolrQueryTranslator queryTranslator)", "testcase": false, "constructor": true}, {"identifier": "translate", "parameters": "(Query<T, R> query)", "modifiers": "protected", "return": "SolrQuery", "signature": "SolrQuery translate(Query<T, R> query)", "full_signature": "protected SolrQuery translate(Query<T, R> query)", "class_method_signature": "SolrQueryExecutor.translate(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(SolrQuery solrQuery, Class<R> returnType)", "modifiers": "protected", "return": "List<R>", "signature": "List<R> fetch(SolrQuery solrQuery, Class<R> returnType)", "full_signature": "protected List<R> fetch(SolrQuery solrQuery, Class<R> returnType)", "class_method_signature": "SolrQueryExecutor.fetch(SolrQuery solrQuery, Class<R> returnType)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "Iterable<R>", "signature": "Iterable<R> find(Query<T, R> query)", "full_signature": "@Override public Iterable<R> find(Query<T, R> query)", "class_method_signature": "SolrQueryExecutor.find(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "R", "signature": "R findOne(Query<T, R> query)", "full_signature": "@Override public R findOne(Query<T, R> query)", "class_method_signature": "SolrQueryExecutor.findOne(Query<T, R> query)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T entity)", "modifiers": "public", "return": "T", "signature": "T save(T entity)", "full_signature": "public T save(T entity)", "class_method_signature": "SolrQueryExecutor.save(T entity)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Iterable<T> entities)", "modifiers": "public", "return": "Iterable<T>", "signature": "Iterable<T> save(Iterable<T> entities)", "full_signature": "public Iterable<T> save(Iterable<T> entities)", "class_method_signature": "SolrQueryExecutor.save(Iterable<T> entities)", "testcase": false, "constructor": false}], "file": "seeking-solr/src/main/java/com/eharmony/matching/seeking/executor/solr/SolrQueryExecutor.java"}, "focal_method": {"identifier": "save", "parameters": "(T entity)", "modifiers": "public", "return": "T", "body": "public <T> T save(T entity) {\n        try {\n            solrServer.addBean(entity);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return entity;\n    }", "signature": "T save(T entity)", "full_signature": "public T save(T entity)", "class_method_signature": "SolrQueryExecutor.save(T entity)", "testcase": false, "constructor": false, "invocations": ["addBean"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}