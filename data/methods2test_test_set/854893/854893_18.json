{"test_class": {"identifier": "FixedLengthStringCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Mock\n    private Expression<Integer, Resolver> sizeExpr;", "modifier": "@Mock\n    private", "type": "Expression<Integer, Resolver>", "declarator": "sizeExpr", "var_name": "sizeExpr"}, {"original_string": "@Mock\n    private Builder builder;", "modifier": "@Mock\n    private", "type": "Builder", "declarator": "builder", "var_name": "builder"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/FixedLengthStringCodecTest.java"}, "test_case": {"identifier": "shouldEncodeCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEncodeCorrectly() throws IOException, NullPointerException {\n\t\tCharset charset = Charset.availableCharsets().get(BoundString.Encoding.ASCII);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        BitChannel channel = new OutputStreamBitChannel(out);\n        when(sizeExpr.eval(Matchers.any(Resolver.class))).thenReturn(4);\n        FixedLengthStringCodec codec =\n                new FixedLengthStringCodec(charset, sizeExpr, null, new BoundString.NullConverter());\n        codec.encode(\"Whatever\", channel, resolver);\n        out.flush();\n        byte[] result = out.toByteArray();\n        assertThat(result.length, is(4));\n        assertThat(new String(result, \"US-ASCII\"), is(\"What\"));\n    }", "signature": "void shouldEncodeCorrectly()", "full_signature": "@Test public void shouldEncodeCorrectly()", "class_method_signature": "FixedLengthStringCodecTest.shouldEncodeCorrectly()", "testcase": true, "constructor": false, "invocations": ["get", "availableCharsets", "thenReturn", "when", "eval", "any", "encode", "flush", "toByteArray", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "FixedLengthStringCodec", "superclass": "", "interfaces": "implements Codec<String>", "fields": [{"original_string": "private final Charset encoding;", "modifier": "private final", "type": "Charset", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private final CharsetEncoder encoder;", "modifier": "private final", "type": "CharsetEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "private final Expression<Integer, Resolver> sizeExpr;", "modifier": "private final", "type": "Expression<Integer, Resolver>", "declarator": "sizeExpr", "var_name": "sizeExpr"}, {"original_string": "private final String match;", "modifier": "private final", "type": "String", "declarator": "match", "var_name": "match"}, {"original_string": "private final BoundString.ByteConverter byteConverter;", "modifier": "private final", "type": "BoundString.ByteConverter", "declarator": "byteConverter", "var_name": "byteConverter"}], "methods": [{"identifier": "FixedLengthStringCodec", "parameters": "(Charset encoding,\n                                  Expression<Integer, Resolver> sizeExpr, String match,\n                                  BoundString.ByteConverter byteConverter)", "modifiers": "public", "return": "", "signature": " FixedLengthStringCodec(Charset encoding,\n                                  Expression<Integer, Resolver> sizeExpr, String match,\n                                  BoundString.ByteConverter byteConverter)", "full_signature": "public  FixedLengthStringCodec(Charset encoding,\n                                  Expression<Integer, Resolver> sizeExpr, String match,\n                                  BoundString.ByteConverter byteConverter)", "class_method_signature": "FixedLengthStringCodec.FixedLengthStringCodec(Charset encoding,\n                                  Expression<Integer, Resolver> sizeExpr, String match,\n                                  BoundString.ByteConverter byteConverter)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "modifiers": "public", "return": "String", "signature": "String decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "full_signature": "public String decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "class_method_signature": "FixedLengthStringCodec.decode(BitBuffer buffer, Resolver resolver,\n                         Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(String value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(String value, BitChannel channel, Resolver resolver)", "class_method_signature": "FixedLengthStringCodec.encode(String value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "FixedLengthStringCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "FixedLengthStringCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "FixedLengthStringCodec.getType()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "FixedLengthStringCodec.getCodecDescriptor()", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/FixedLengthStringCodec.java"}, "focal_method": {"identifier": "encode", "parameters": "(String value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "body": "public void encode(String value, BitChannel channel, Resolver resolver) throws IOException {\n        int size = sizeExpr.eval(resolver);\n        ByteBuffer bytebuffer = ByteBuffer.allocate(size);\n        encoder.encode(CharBuffer.wrap(value), bytebuffer, true);\n\n        if (bytebuffer.position() < size) { // pad with 0's\n            bytebuffer.put(new byte[size - bytebuffer.position()]);\n        }\n        bytebuffer.flip(); // switch to reading\n        \n        byte[] bytes = new byte[size];\n        bytebuffer.get(bytes);\n        for (int i = 0; i < bytes.length; i++) {\n            bytes[i] = byteConverter.revert(bytes[i]);\n        }\n        //assert (size <= bytes.length); //No longer needed\n        channel.write(bytes, 0, size);\n    }", "signature": "void encode(String value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(String value, BitChannel channel, Resolver resolver)", "class_method_signature": "FixedLengthStringCodec.encode(String value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false, "invocations": ["eval", "allocate", "encode", "wrap", "position", "put", "position", "flip", "get", "revert", "write"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}