{"test_class": {"identifier": "XmlRootElementPayloadMethodProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XmlRootElementPayloadMethodProcessor processor;", "modifier": "private", "type": "XmlRootElementPayloadMethodProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private MethodParameter rootElementParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "rootElementParameter", "var_name": "rootElementParameter"}, {"original_string": "private MethodParameter typeParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "typeParameter", "var_name": "typeParameter"}, {"original_string": "private MethodParameter rootElementReturnType;", "modifier": "private", "type": "MethodParameter", "declarator": "rootElementReturnType", "var_name": "rootElementReturnType"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/adapter/method/jaxb/XmlRootElementPayloadMethodProcessorTest.java"}, "test_case": {"identifier": "resolveArgumentRootElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void resolveArgumentRootElement() throws JAXBException {\n\t\tWebServiceMessage request = new MockWebServiceMessage(\n\t\t\t\t\"<root xmlns='http://springframework.org'><string>Foo</string></root>\");\n\t\tMessageContext messageContext = new DefaultMessageContext(request, new MockWebServiceMessageFactory());\n\n\t\tObject result = processor.resolveArgument(messageContext, rootElementParameter);\n\t\tassertTrue(\"result not a MyRootElement\", result instanceof MyRootElement);\n\t\tMyRootElement rootElement = (MyRootElement) result;\n\t\tassertEquals(\"invalid result\", \"Foo\", rootElement.getString());\n\t}", "signature": "void resolveArgumentRootElement()", "full_signature": "@Test public void resolveArgumentRootElement()", "class_method_signature": "XmlRootElementPayloadMethodProcessorTest.resolveArgumentRootElement()", "testcase": true, "constructor": false, "invocations": ["resolveArgument", "assertTrue", "assertEquals", "getString"]}, "focal_class": {"identifier": "XmlRootElementPayloadMethodProcessor", "superclass": "extends AbstractJaxb2PayloadMethodProcessor", "interfaces": "", "fields": [], "methods": [{"identifier": "supportsRequestPayloadParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean supportsRequestPayloadParameter(MethodParameter parameter)", "full_signature": "@Override protected boolean supportsRequestPayloadParameter(MethodParameter parameter)", "class_method_signature": "XmlRootElementPayloadMethodProcessor.supportsRequestPayloadParameter(MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveArgument", "parameters": "(MessageContext messageContext, MethodParameter parameter)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "full_signature": "@Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "class_method_signature": "XmlRootElementPayloadMethodProcessor.resolveArgument(MessageContext messageContext, MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "supportsResponsePayloadReturnType", "parameters": "(MethodParameter returnType)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean supportsResponsePayloadReturnType(MethodParameter returnType)", "full_signature": "@Override protected boolean supportsResponsePayloadReturnType(MethodParameter returnType)", "class_method_signature": "XmlRootElementPayloadMethodProcessor.supportsResponsePayloadReturnType(MethodParameter returnType)", "testcase": false, "constructor": false}, {"identifier": "handleReturnValueInternal", "parameters": "(MessageContext messageContext, MethodParameter returnType,\n\t\t\tObject returnValue)", "modifiers": "@Override protected", "return": "void", "signature": "void handleReturnValueInternal(MessageContext messageContext, MethodParameter returnType,\n\t\t\tObject returnValue)", "full_signature": "@Override protected void handleReturnValueInternal(MessageContext messageContext, MethodParameter returnType,\n\t\t\tObject returnValue)", "class_method_signature": "XmlRootElementPayloadMethodProcessor.handleReturnValueInternal(MessageContext messageContext, MethodParameter returnType,\n\t\t\tObject returnValue)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/method/jaxb/XmlRootElementPayloadMethodProcessor.java"}, "focal_method": {"identifier": "resolveArgument", "parameters": "(MessageContext messageContext, MethodParameter parameter)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object resolveArgument(MessageContext messageContext, MethodParameter parameter) throws JAXBException {\n\t\tClass<?> parameterType = parameter.getParameterType();\n\n\t\tif (parameterType.isAnnotationPresent(XmlRootElement.class)) {\n\t\t\treturn unmarshalFromRequestPayload(messageContext, parameterType);\n\t\t} else {\n\t\t\tJAXBElement<?> element = unmarshalElementFromRequestPayload(messageContext, parameterType);\n\t\t\treturn element != null ? element.getValue() : null;\n\t\t}\n\t}", "signature": "Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "full_signature": "@Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "class_method_signature": "XmlRootElementPayloadMethodProcessor.resolveArgument(MessageContext messageContext, MethodParameter parameter)", "testcase": false, "constructor": false, "invocations": ["getParameterType", "isAnnotationPresent", "unmarshalFromRequestPayload", "unmarshalElementFromRequestPayload", "getValue"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}