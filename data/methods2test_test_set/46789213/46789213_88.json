{"test_class": {"identifier": "NetworkLoggingDecoratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/logging/NetworkLoggingDecoratorTest.java"}, "test_case": {"identifier": "getNoOfParties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getNoOfParties() throws Exception {\n    NetworkLoggingDecorator networkLoggingDecorator = new NetworkLoggingDecorator(new Network() {\n      @Override\n      public void send(int partyId, byte[] data) {\n\n      }\n\n      @Override\n      public byte[] receive(int partyId) {\n        return new byte[0];\n      }\n\n      @Override\n      public int getNoOfParties() {\n        return 22;\n      }\n    });\n    assertThat(networkLoggingDecorator.getNoOfParties(), is(22));\n    // This should be a nil operation since my network does not implement closeable\n    networkLoggingDecorator.close();\n  }", "signature": "void getNoOfParties()", "full_signature": "@Test public void getNoOfParties()", "class_method_signature": "NetworkLoggingDecoratorTest.getNoOfParties()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getNoOfParties", "is", "close"]}, "focal_class": {"identifier": "NetworkLoggingDecorator", "superclass": "", "interfaces": "implements Network, PerformanceLogger, Closeable", "fields": [{"original_string": "public static final String NETWORK_PARTY_BYTES = \"Amount of bytes received pr. party\";", "modifier": "public static final", "type": "String", "declarator": "NETWORK_PARTY_BYTES = \"Amount of bytes received pr. party\"", "var_name": "NETWORK_PARTY_BYTES"}, {"original_string": "public static final String NETWORK_TOTAL_BYTES = \"Total amount of bytes received\";", "modifier": "public static final", "type": "String", "declarator": "NETWORK_TOTAL_BYTES = \"Total amount of bytes received\"", "var_name": "NETWORK_TOTAL_BYTES"}, {"original_string": "public static final String NETWORK_TOTAL_BATCHES = \"Total amount of batches received\";", "modifier": "public static final", "type": "String", "declarator": "NETWORK_TOTAL_BATCHES = \"Total amount of batches received\"", "var_name": "NETWORK_TOTAL_BATCHES"}, {"original_string": "private Network delegate;", "modifier": "private", "type": "Network", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private Map<Integer, PartyStats> partyStatsMap;", "modifier": "private", "type": "Map<Integer, PartyStats>", "declarator": "partyStatsMap", "var_name": "partyStatsMap"}], "methods": [{"identifier": "NetworkLoggingDecorator", "parameters": "(Network network)", "modifiers": "public", "return": "", "signature": " NetworkLoggingDecorator(Network network)", "full_signature": "public  NetworkLoggingDecorator(Network network)", "class_method_signature": "NetworkLoggingDecorator.NetworkLoggingDecorator(Network network)", "testcase": false, "constructor": true}, {"identifier": "NetworkLoggingDecorator", "parameters": "(Network network, Map<Integer, PartyStats> partyStatsMap)", "modifiers": "protected", "return": "", "signature": " NetworkLoggingDecorator(Network network, Map<Integer, PartyStats> partyStatsMap)", "full_signature": "protected  NetworkLoggingDecorator(Network network, Map<Integer, PartyStats> partyStatsMap)", "class_method_signature": "NetworkLoggingDecorator.NetworkLoggingDecorator(Network network, Map<Integer, PartyStats> partyStatsMap)", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(int partyId)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] receive(int partyId)", "full_signature": "@Override public byte[] receive(int partyId)", "class_method_signature": "NetworkLoggingDecorator.receive(int partyId)", "testcase": false, "constructor": false}, {"identifier": "getNoOfParties", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNoOfParties()", "full_signature": "@Override public int getNoOfParties()", "class_method_signature": "NetworkLoggingDecorator.getNoOfParties()", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(int partyId, byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void send(int partyId, byte[] data)", "full_signature": "@Override public void send(int partyId, byte[] data)", "class_method_signature": "NetworkLoggingDecorator.send(int partyId, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "NetworkLoggingDecorator.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "NetworkLoggingDecorator.close()", "testcase": false, "constructor": false}, {"identifier": "getLoggedValues", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Long>", "signature": "Map<String, Long> getLoggedValues()", "full_signature": "@Override public Map<String, Long> getLoggedValues()", "class_method_signature": "NetworkLoggingDecorator.getLoggedValues()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/logging/NetworkLoggingDecorator.java"}, "focal_method": {"identifier": "getNoOfParties", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int getNoOfParties() {\n    return delegate.getNoOfParties();\n  }", "signature": "int getNoOfParties()", "full_signature": "@Override public int getNoOfParties()", "class_method_signature": "NetworkLoggingDecorator.getNoOfParties()", "testcase": false, "constructor": false, "invocations": ["getNoOfParties"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}