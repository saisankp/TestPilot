{"test_class": {"identifier": "ChecklistTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL manifestUrl;", "modifier": "private", "type": "URL", "declarator": "manifestUrl", "var_name": "manifestUrl"}, {"original_string": "private URL cndAUrl;", "modifier": "private", "type": "URL", "declarator": "cndAUrl", "var_name": "cndAUrl"}, {"original_string": "private URL cndBUrl;", "modifier": "private", "type": "URL", "declarator": "cndBUrl", "var_name": "cndBUrl"}], "file": "core/src/test/java/net/adamcin/oakpal/core/ChecklistTest.java"}, "test_case": {"identifier": "testFromJSON", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromJSON() throws Exception {\n        try (InputStream is = getClass().getResourceAsStream(\"/simpleChecklist.json\");\n             JsonReader reader = Json.createReader(is)) {\n            final JsonObject json = reader.readObject();\n            Checklist checklist = Checklist.fromJson(\"core-tests\", manifestUrl, json);\n\n            assertNotNull(\"checklist should not be null\", checklist);\n            assertEquals(\"checklist moduleName\", \"core-tests\", checklist.getModuleName());\n            assertEquals(\"checklist name\", \"simpleChecklist\", checklist.getName());\n            assertEquals(\"checklist jcr prefix\", \"lapkao\", checklist.getJcrNamespaces().get(0).getPrefix());\n            assertEquals(\"checklist json is identical to original\", json, checklist.toJson());\n        }\n    }", "signature": "void testFromJSON()", "full_signature": "@Test public void testFromJSON()", "class_method_signature": "ChecklistTest.testFromJSON()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "createReader", "readObject", "fromJson", "assertNotNull", "assertEquals", "getModuleName", "assertEquals", "getName", "assertEquals", "getPrefix", "get", "getJcrNamespaces", "assertEquals", "toJson"]}, "focal_class": {"identifier": "Checklist", "superclass": "", "interfaces": "implements JsonObjectConvertible", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        private final List<String> allKeys = Arrays.asList(\n                name(),\n                checks(),\n                repoInits(),\n                forcedRoots(),\n                cndNames(),\n                cndUrls(),\n                jcrNodetypes(),\n                jcrPrivileges(),\n                jcrNamespaces());\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String cndUrls() {\n            return \"cndUrls\";\n        }\n\n        @Override\n        public String cndNames() {\n            return \"cndNames\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public List<String> orderedKeys() {\n            return allKeys;\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        private final List<String> allKeys = Arrays.asList(\n                name(),\n                checks(),\n                repoInits(),\n                forcedRoots(),\n                cndNames(),\n                cndUrls(),\n                jcrNodetypes(),\n                jcrPrivileges(),\n                jcrNamespaces());\n\n        @Override\n        public String name() {\n            return \"name\";\n        }\n\n        @Override\n        public String cndUrls() {\n            return \"cndUrls\";\n        }\n\n        @Override\n        public String cndNames() {\n            return \"cndNames\";\n        }\n\n        @Override\n        public String jcrNodetypes() {\n            return \"jcrNodetypes\";\n        }\n\n        @Override\n        public String jcrNamespaces() {\n            return \"jcrNamespaces\";\n        }\n\n        @Override\n        public String jcrPrivileges() {\n            return \"jcrPrivileges\";\n        }\n\n        @Override\n        public String forcedRoots() {\n            return \"forcedRoots\";\n        }\n\n        @Override\n        public String repoInits() {\n            return \"repoInits\";\n        }\n\n        @Override\n        public String checks() {\n            return \"checks\";\n        }\n\n        @Override\n        public List<String> orderedKeys() {\n            return allKeys;\n        }\n    }", "var_name": "KEYS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Checklist.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Checklist.class)", "var_name": "LOGGER"}, {"original_string": "static final Comparator<String> checklistKeyComparator = (s1, s2) -> {\n        final List<String> keyOrder = keys().orderedKeys();\n        if (keyOrder.contains(s1) && keyOrder.contains(s2)) {\n            return Integer.compare(keyOrder.indexOf(s1), keyOrder.indexOf(s2));\n        } else if (keyOrder.contains(s1)) {\n            return -1;\n        } else if (keyOrder.contains(s2)) {\n            return 1;\n        } else {\n            return s1.compareTo(s2);\n        }\n    };", "modifier": "static final", "type": "Comparator<String>", "declarator": "checklistKeyComparator = (s1, s2) -> {\n        final List<String> keyOrder = keys().orderedKeys();\n        if (keyOrder.contains(s1) && keyOrder.contains(s2)) {\n            return Integer.compare(keyOrder.indexOf(s1), keyOrder.indexOf(s2));\n        } else if (keyOrder.contains(s1)) {\n            return -1;\n        } else if (keyOrder.contains(s2)) {\n            return 1;\n        } else {\n            return s1.compareTo(s2);\n        }\n    }", "var_name": "checklistKeyComparator"}, {"original_string": "private final JsonObject originalJson;", "modifier": "private final", "type": "JsonObject", "declarator": "originalJson", "var_name": "originalJson"}, {"original_string": "private final String moduleName;", "modifier": "private final", "type": "String", "declarator": "moduleName", "var_name": "moduleName"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final List<URL> cndUrls;", "modifier": "private final", "type": "List<URL>", "declarator": "cndUrls", "var_name": "cndUrls"}, {"original_string": "private final List<JcrNs> jcrNamespaces;", "modifier": "private final", "type": "List<JcrNs>", "declarator": "jcrNamespaces", "var_name": "jcrNamespaces"}, {"original_string": "private final List<QNodeTypeDefinition> jcrNodetypes;", "modifier": "private final", "type": "List<QNodeTypeDefinition>", "declarator": "jcrNodetypes", "var_name": "jcrNodetypes"}, {"original_string": "private final List<PrivilegeDefinition> jcrPrivileges;", "modifier": "private final", "type": "List<PrivilegeDefinition>", "declarator": "jcrPrivileges", "var_name": "jcrPrivileges"}, {"original_string": "private final List<ForcedRoot> forcedRoots;", "modifier": "private final", "type": "List<ForcedRoot>", "declarator": "forcedRoots", "var_name": "forcedRoots"}, {"original_string": "private final List<CheckSpec.ImmutableSpec> checks;", "modifier": "private final", "type": "List<CheckSpec.ImmutableSpec>", "declarator": "checks", "var_name": "checks"}, {"original_string": "private final List<String> repoInits;", "modifier": "private final", "type": "List<String>", "declarator": "repoInits", "var_name": "repoInits"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "Checklist.JsonKeys", "signature": "Checklist.JsonKeys keys()", "full_signature": "@NotNull public static Checklist.JsonKeys keys()", "class_method_signature": "Checklist.keys()", "testcase": false, "constructor": false}, {"identifier": "comparingJsonKeys", "parameters": "(final @NotNull Function<T, String> jsonKeyExtractor)", "modifiers": "public static", "return": "Comparator<T>", "signature": "Comparator<T> comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "full_signature": "public static Comparator<T> comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "class_method_signature": "Checklist.comparingJsonKeys(final @NotNull Function<T, String> jsonKeyExtractor)", "testcase": false, "constructor": false}, {"identifier": "Checklist", "parameters": "(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "modifiers": "", "return": "", "signature": " Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "full_signature": "  Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "class_method_signature": "Checklist.Checklist(final @Nullable JsonObject originalJson,\n              final @Nullable String moduleName,\n              final @Nullable String name,\n              final @NotNull List<URL> cndUrls,\n              final @NotNull List<JcrNs> jcrNamespaces,\n              final @NotNull List<QNodeTypeDefinition> jcrNodetypes,\n              final @NotNull List<PrivilegeDefinition> jcrPrivileges,\n              final @NotNull List<ForcedRoot> forcedRoots,\n              final @NotNull List<CheckSpec.ImmutableSpec> checks,\n              final @NotNull List<String> repoInits)", "testcase": false, "constructor": true}, {"identifier": "getModuleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getModuleName()", "full_signature": "public String getModuleName()", "class_method_signature": "Checklist.getModuleName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Checklist.getName()", "testcase": false, "constructor": false}, {"identifier": "getCndUrls", "parameters": "()", "modifiers": "public", "return": "List<URL>", "signature": "List<URL> getCndUrls()", "full_signature": "public List<URL> getCndUrls()", "class_method_signature": "Checklist.getCndUrls()", "testcase": false, "constructor": false}, {"identifier": "getJcrNodetypes", "parameters": "()", "modifiers": "public", "return": "List<QNodeTypeDefinition>", "signature": "List<QNodeTypeDefinition> getJcrNodetypes()", "full_signature": "public List<QNodeTypeDefinition> getJcrNodetypes()", "class_method_signature": "Checklist.getJcrNodetypes()", "testcase": false, "constructor": false}, {"identifier": "getJcrNamespaces", "parameters": "()", "modifiers": "public", "return": "List<JcrNs>", "signature": "List<JcrNs> getJcrNamespaces()", "full_signature": "public List<JcrNs> getJcrNamespaces()", "class_method_signature": "Checklist.getJcrNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivilegeNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getJcrPrivilegeNames()", "full_signature": "public List<String> getJcrPrivilegeNames()", "class_method_signature": "Checklist.getJcrPrivilegeNames()", "testcase": false, "constructor": false}, {"identifier": "getJcrPrivileges", "parameters": "()", "modifiers": "public", "return": "List<PrivilegeDefinition>", "signature": "List<PrivilegeDefinition> getJcrPrivileges()", "full_signature": "public List<PrivilegeDefinition> getJcrPrivileges()", "class_method_signature": "Checklist.getJcrPrivileges()", "testcase": false, "constructor": false}, {"identifier": "getForcedRoots", "parameters": "()", "modifiers": "public", "return": "List<ForcedRoot>", "signature": "List<ForcedRoot> getForcedRoots()", "full_signature": "public List<ForcedRoot> getForcedRoots()", "class_method_signature": "Checklist.getForcedRoots()", "testcase": false, "constructor": false}, {"identifier": "getChecks", "parameters": "()", "modifiers": "public", "return": "List<CheckSpec>", "signature": "List<CheckSpec> getChecks()", "full_signature": "public List<CheckSpec> getChecks()", "class_method_signature": "Checklist.getChecks()", "testcase": false, "constructor": false}, {"identifier": "getRepoInits", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRepoInits()", "full_signature": "public List<String> getRepoInits()", "class_method_signature": "Checklist.getRepoInits()", "testcase": false, "constructor": false}, {"identifier": "asInitStage", "parameters": "()", "modifiers": "public", "return": "InitStage", "signature": "InitStage asInitStage()", "full_signature": "public InitStage asInitStage()", "class_method_signature": "Checklist.asInitStage()", "testcase": false, "constructor": false}, {"identifier": "insertPrefix", "parameters": "(final @NotNull CheckSpec checkSpec, final String prefix)", "modifiers": "private", "return": "CheckSpec", "signature": "CheckSpec insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "full_signature": "private CheckSpec insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "class_method_signature": "Checklist.insertPrefix(final @NotNull CheckSpec checkSpec, final String prefix)", "testcase": false, "constructor": false}, {"identifier": "getCheckPrefix", "parameters": "(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "modifiers": "static", "return": "String", "signature": "String getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "full_signature": "static String getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "class_method_signature": "Checklist.getCheckPrefix(final @Nullable String moduleName,\n                                 final @Nullable String checklistName)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Checklist.toString()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "()", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson()", "full_signature": "@Override public JsonObject toJson()", "class_method_signature": "Checklist.toJson()", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "modifiers": "public static", "return": "Checklist", "signature": "Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "full_signature": "public static Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "class_method_signature": "Checklist.fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/Checklist.java"}, "focal_method": {"identifier": "fromJson", "parameters": "(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "modifiers": "public static", "return": "Checklist", "body": "public static Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json) {\n        LOGGER.trace(\"[fromJson] module: {}, manifestUrl: {}, json: {}\", moduleName, manifestUrl, json);\n        Builder builder = new Builder(moduleName);\n        final JsonKeys jsonKeys = keys();\n        if (hasNonNull(json, jsonKeys.name())) {\n            builder.withName(json.getString(jsonKeys.name()));\n        }\n\n        if (manifestUrl != null && manifestUrl.toExternalForm().endsWith(JarFile.MANIFEST_NAME)) {\n            ofNullable(json.getJsonArray(jsonKeys.cndNames()))\n                    .filter(Util.traceFilter(LOGGER, \"[fromJson#cndNames] cndNames: {}\"))\n                    .map(cndNames -> JavaxJson.unwrapArray(cndNames).stream()\n                            .map(String::valueOf)\n                            .collect(Collectors.toList()))\n                    .map(names -> Util.resolveManifestResources(manifestUrl, names))\n                    .ifPresent(builder::withCndUrls);\n        }\n\n        builder.withCndUrls(parseFromArray(\n                optArray(json, jsonKeys.cndUrls()).orElse(JsonValue.EMPTY_JSON_ARRAY), URL::new,\n                (element, error) -> LOGGER.debug(\"[fromJson#cndUrls] (URL ERROR) {}\", error.getMessage())));\n\n        final List<JcrNs> jcrNsList = new ArrayList<>();\n        optArray(json, jsonKeys.jcrNamespaces()).ifPresent(jsonArray -> {\n            jcrNsList.addAll(JavaxJson.mapArrayOfObjects(jsonArray, JcrNs::fromJson));\n            builder.withJcrNamespaces(jcrNsList);\n        });\n        optObject(json, jsonKeys.jcrNodetypes()).ifPresent(jsonObject -> {\n            builder.withJcrNodetypes(\n                    JsonCnd.getQTypesFromJson(jsonObject,\n                            JsonCnd.toNamespaceMapping(jcrNsList)));\n        });\n        if (json.containsKey(jsonKeys.jcrPrivileges())) {\n            builder.withJcrPrivileges(\n                    JsonCnd.getPrivilegesFromJson(json.get(jsonKeys.jcrPrivileges()),\n                            JsonCnd.toNamespaceMapping(jcrNsList)));\n        }\n        optArray(json, jsonKeys.forcedRoots()).ifPresent(jsonArray -> {\n            builder.withForcedRoots(JavaxJson.mapArrayOfObjects(jsonArray, ForcedRoot::fromJson));\n        });\n        optArray(json, jsonKeys.checks()).ifPresent(jsonArray -> {\n            builder.withChecks(JavaxJson.mapArrayOfObjects(jsonArray, CheckSpec::fromJson));\n        });\n        final Checklist checklist = builder.build(json);\n        LOGGER.trace(\"[fromJson] builder.build(): {}\", checklist);\n        return checklist;\n    }", "signature": "Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "full_signature": "public static Checklist fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "class_method_signature": "Checklist.fromJson(final @NotNull String moduleName,\n                                     final @Nullable URL manifestUrl,\n                                     final @NotNull JsonObject json)", "testcase": false, "constructor": false, "invocations": ["trace", "keys", "hasNonNull", "name", "withName", "getString", "name", "endsWith", "toExternalForm", "ifPresent", "map", "map", "filter", "ofNullable", "getJsonArray", "cndNames", "traceFilter", "collect", "map", "stream", "unwrapArray", "toList", "resolveManifestResources", "withCndUrls", "parseFromArray", "orElse", "optArray", "cndUrls", "debug", "getMessage", "ifPresent", "optArray", "jcrNamespaces", "addAll", "mapArrayOfObjects", "withJcrNamespaces", "ifPresent", "optObject", "jcrNodetypes", "withJcrNodetypes", "getQTypesFromJson", "toNamespaceMapping", "containsKey", "jcrPrivileges", "withJcrPrivileges", "getPrivilegesFromJson", "get", "jcrPrivileges", "toNamespaceMapping", "ifPresent", "optArray", "forcedRoots", "withForcedRoots", "mapArrayOfObjects", "ifPresent", "optArray", "checks", "withChecks", "mapArrayOfObjects", "build", "trace"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}