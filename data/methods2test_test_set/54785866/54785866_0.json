{"test_class": {"identifier": "StringInternerTest", "superclass": "", "interfaces": "", "fields": [], "file": "tools/galaxyLibrary/project/GalaxyLib/src/test/java/com/ahli/util/StringInternerTest.java"}, "test_case": {"identifier": "testWeakRefStringInterner", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWeakRefStringInterner() {\n\t\tfinal double value = Math.random();\n\t\tfinal String text = \"HELLO WORLD! \";\n\t\tString firstToBeInterned = text + value;\n\t\t\n\t\t// first intern\n\t\tString firstInterned = StringInterner.intern(firstToBeInterned);\n\t\tassertSame(firstInterned, firstToBeInterned, \"first interned received different reference\");\n\t\t\n\t\t// second intern\n\t\tfinal String secondToBeInterned = text + value;\n\t\tassertNotSame(firstToBeInterned, secondToBeInterned,\n\t\t\t\t\"first and second interned are same reference - VM is breaking this test with optimizations\");\n\t\tString secondInterned = StringInterner.intern(secondToBeInterned);\n\t\t\n\t\tassertEquals(secondInterned, firstInterned, \"second interned changed value during interning - first vs second\");\n\t\tassertEquals(secondInterned, secondToBeInterned,\n\t\t\t\t\"second interned changed value during interning - second input vs output\");\n\t\tassertNotSame(secondInterned, secondToBeInterned, \"second interned delivered same reference back\");\n\t\tassertSame(firstInterned, secondInterned, \"first interned received different reference\");\n\t\t\n\t\t// test garbage collection\n\t\tfinal var referenceQueue = new ReferenceQueue<String>();\n\t\tfinal var weakRef = new WeakReference<>(firstInterned, referenceQueue);\n\t\tfirstToBeInterned = null;\n\t\tfirstInterned = null;\n\t\tsecondInterned = null;\n\t\t\n\t\tint i = 0;\n\t\tfinal int maxAttempts = 3;\n\t\twhile (referenceQueue.poll() == null && i < maxAttempts) {\n\t\t\t++i;\n\t\t\tSystem.gc();\n\t\t\tSystem.runFinalization();\n\t\t}\n\t\t// fails on J9 JDK\n\t\tassertTrue(i < maxAttempts, \"GC did not remove the WeakReference within \" + maxAttempts + \" attempts\");\n\t}", "signature": "void testWeakRefStringInterner()", "full_signature": "@Test public void testWeakRefStringInterner()", "class_method_signature": "StringInternerTest.testWeakRefStringInterner()", "testcase": true, "constructor": false, "invocations": ["random", "intern", "assertSame", "assertNotSame", "intern", "assertEquals", "assertEquals", "assertNotSame", "assertSame", "poll", "gc", "runFinalization", "assertTrue"]}, "focal_class": {"identifier": "StringInterner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentWeakWeakHashMap<String> map = new ConcurrentWeakWeakHashMap<>(8, 0.9F, 1);", "modifier": "private static final", "type": "ConcurrentWeakWeakHashMap<String>", "declarator": "map = new ConcurrentWeakWeakHashMap<>(8, 0.9F, 1)", "var_name": "map"}], "methods": [{"identifier": "StringInterner", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringInterner()", "full_signature": "private  StringInterner()", "class_method_signature": "StringInterner.StringInterner()", "testcase": false, "constructor": true}, {"identifier": "intern", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "signature": "String intern(final String s)", "full_signature": "public static String intern(final String s)", "class_method_signature": "StringInterner.intern(final String s)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "StringInterner.clear()", "testcase": false, "constructor": false}, {"identifier": "cleanUpGarbage", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void cleanUpGarbage()", "full_signature": "public static void cleanUpGarbage()", "class_method_signature": "StringInterner.cleanUpGarbage()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int size()", "full_signature": "public static int size()", "class_method_signature": "StringInterner.size()", "testcase": false, "constructor": false}], "file": "tools/galaxyLibrary/project/GalaxyLib/src/main/java/com/ahli/util/StringInterner.java"}, "focal_method": {"identifier": "intern", "parameters": "(final String s)", "modifiers": "public static", "return": "String", "body": "public static String intern(final String s) {\n\t\tfinal String exists = map.putIfAbsent(s, s);\n\t\treturn (exists == null) ? s : exists;\n\t}", "signature": "String intern(final String s)", "full_signature": "public static String intern(final String s)", "class_method_signature": "StringInterner.intern(final String s)", "testcase": false, "constructor": false, "invocations": ["putIfAbsent"]}, "repository": {"repo_id": 54785866, "url": "https://github.com/Ahli/Galaxy-Observer-UI", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 636191, "license": "licensed"}}