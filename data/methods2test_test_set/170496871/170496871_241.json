{"test_class": {"identifier": "MaxAbsScalerPreprocessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/maxabsscaling/MaxAbsScalerPreprocessorTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() {\n        double[][] data = new double[][] {\n            {2., 4., 1.},\n            {1., 8., 22.},\n            {-4., 10., 100.},\n            {0., 22., 300.}\n        };\n        double[] maxAbs = new double[] {4, 22, 300};\n\n        Vectorizer<Integer, double[], Integer, Double> vectorizer = new DoubleArrayVectorizer<>(0, 1, 2);\n\n        MaxAbsScalerPreprocessor<Integer, double[]> preprocessor = new MaxAbsScalerPreprocessor<>(\n            maxAbs,\n            vectorizer\n        );\n\n        double[][] expData = new double[][] {\n            {.5, 4. / 22, 1. / 300},\n            {.25, 8. / 22, 22. / 300},\n            {-1., 10. / 22, 100. / 300},\n            {0., 22. / 22, 300. / 300}\n        };\n\n        for (int i = 0; i < data.length; i++)\n            assertArrayEquals(expData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "MaxAbsScalerPreprocessorTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "asArray", "features", "apply"]}, "focal_class": {"identifier": "MaxAbsScalerPreprocessor", "superclass": "", "interfaces": "implements Preprocessor<K, V>, DeployableObject", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final double[] maxAbs;", "modifier": "private final", "type": "double[]", "declarator": "maxAbs", "var_name": "maxAbs"}, {"original_string": "private final Preprocessor<K, V> basePreprocessor;", "modifier": "private final", "type": "Preprocessor<K, V>", "declarator": "basePreprocessor", "var_name": "basePreprocessor"}], "methods": [{"identifier": "MaxAbsScalerPreprocessor", "parameters": "(double[] maxAbs, Preprocessor<K, V> basePreprocessor)", "modifiers": "public", "return": "", "signature": " MaxAbsScalerPreprocessor(double[] maxAbs, Preprocessor<K, V> basePreprocessor)", "full_signature": "public  MaxAbsScalerPreprocessor(double[] maxAbs, Preprocessor<K, V> basePreprocessor)", "class_method_signature": "MaxAbsScalerPreprocessor.MaxAbsScalerPreprocessor(double[] maxAbs, Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "MaxAbsScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false}, {"identifier": "getMaxAbs", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getMaxAbs()", "full_signature": "public double[] getMaxAbs()", "class_method_signature": "MaxAbsScalerPreprocessor.getMaxAbs()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<Object>", "signature": "List<Object> getDependencies()", "full_signature": "@Override public List<Object> getDependencies()", "class_method_signature": "MaxAbsScalerPreprocessor.getDependencies()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/maxabsscaling/MaxAbsScalerPreprocessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "body": "@Override public LabeledVector apply(K k, V v) {\n        LabeledVector res = basePreprocessor.apply(k, v);\n\n        assert res.size() == maxAbs.length;\n\n        for (int i = 0; i < res.size(); i++)\n            res.set(i, res.get(i) / maxAbs[i]);\n\n        return res;\n    }", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "MaxAbsScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false, "invocations": ["apply", "size", "size", "set", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}