{"test_class": {"identifier": "QueryResultsReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "vars-standalone/src/test/java/vars/query/util/QueryResultsReaderTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() {\n        URL url = getClass().getResource(\"/vars/query/util/SES6061.txt\");\n        Dataset dataset = null;\n        try {\n            InputStream in = url.openStream();\n            dataset = QueryResultsReader.read(in);\n            in.close();\n        }\n        catch (IOException e) {\n            Assert.fail(e.getMessage());\n        }\n\n        // Check dataset\n        Assert.assertNotNull(\"Dataset that was read is null\", dataset);\n        Assert.assertEquals(\"Number of columns was wrong\", 11, dataset.getColumnCount());\n        Assert.assertEquals(\"Number of rows was wrong\", 11164, dataset.getRowCount());\n\n\n        // Check some values\n        Object[] urls = dataset.getData(\"Image\");\n        Object[] timecodes = dataset.getData(\"TapeTimeCode\");\n        Assert.assertEquals(\"First value in 'Image' column is wrong\",\n                \"http://tripod.shore.mbari.org/ImageArchive/SES/Pulse%2060/AdjustedImages/StaM_Pulse60_SES_120611_12_11_29_autolevels.jpg\",\n                urls[0]);\n        Assert.assertEquals(\"First value in 'TapeTimeCode' column is wrong\",\n                \"00:00:00:00\", timecodes[0]);\n\n        Assert.assertEquals(\"Last value in 'Image' column is wrong\",\n                \"http://tripod.shore.mbari.org/ImageArchive/SES/SES%20pulse%2061/fluoro_rng_pulse61_130416-232019.jpg\",\n                urls[urls.length - 1]);\n        Assert.assertEquals(\"Last value in 'TapeTimeCode' column is wrong\",\n                \"00:00:26:21\", timecodes[timecodes.length - 1]);\n\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "QueryResultsReaderTest.testRead()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "openStream", "read", "close", "fail", "getMessage", "assertNotNull", "assertEquals", "getColumnCount", "assertEquals", "getRowCount", "getData", "getData", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "QueryResultsReader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "read", "parameters": "(File file)", "modifiers": "public static", "return": "Dataset", "signature": "Dataset read(File file)", "full_signature": "public static Dataset read(File file)", "class_method_signature": "QueryResultsReader.read(File file)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream in)", "modifiers": "public static", "return": "Dataset", "signature": "Dataset read(InputStream in)", "full_signature": "public static Dataset read(InputStream in)", "class_method_signature": "QueryResultsReader.read(InputStream in)", "testcase": false, "constructor": false}], "file": "vars-standalone/src/main/java/vars/query/util/QueryResultsReader.java"}, "focal_method": {"identifier": "read", "parameters": "(File file)", "modifiers": "public static", "return": "Dataset", "body": "public static Dataset read(File file) throws IOException {\n        final InputStream in = new FileInputStream(file);\n        final Dataset dataset = read(in);\n        in.close();\n        return dataset;\n    }", "signature": "Dataset read(File file)", "full_signature": "public static Dataset read(File file)", "class_method_signature": "QueryResultsReader.read(File file)", "testcase": false, "constructor": false, "invocations": ["read", "close"]}, "repository": {"repo_id": 13933675, "url": "https://github.com/hohonuuli/vars", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 18273, "license": "licensed"}}