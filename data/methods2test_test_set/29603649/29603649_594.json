{"test_class": {"identifier": "StubDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INTERCEPTOR_NAME = \"sessionStoringInterceptor\";", "modifier": "private static final", "type": "String", "declarator": "INTERCEPTOR_NAME = \"sessionStoringInterceptor\"", "var_name": "INTERCEPTOR_NAME"}, {"original_string": "private MyNodeList dialogDescriptorList;", "modifier": "private", "type": "MyNodeList", "declarator": "dialogDescriptorList", "var_name": "dialogDescriptorList"}, {"original_string": "private MyNodeList interceptorDescriptorList;", "modifier": "private", "type": "MyNodeList", "declarator": "interceptorDescriptorList", "var_name": "interceptorDescriptorList"}, {"original_string": "private ConditionDescriptor conditionDescriptor;", "modifier": "private", "type": "ConditionDescriptor", "declarator": "conditionDescriptor", "var_name": "conditionDescriptor"}, {"original_string": "private ResponseDescriptor responseDescriptor;", "modifier": "private", "type": "ResponseDescriptor", "declarator": "responseDescriptor", "var_name": "responseDescriptor"}, {"original_string": "private List<DialogDescriptor> parsedDialogDescriptors;", "modifier": "private", "type": "List<DialogDescriptor>", "declarator": "parsedDialogDescriptors", "var_name": "parsedDialogDescriptors"}, {"original_string": "@Mock\n    private NodeParser<ConditionDescriptor> conditionDescriptorParser;", "modifier": "@Mock\n    private", "type": "NodeParser<ConditionDescriptor>", "declarator": "conditionDescriptorParser", "var_name": "conditionDescriptorParser"}, {"original_string": "@Mock\n    private NodeParser<ResponseDescriptor> responseDescriptorParser;", "modifier": "@Mock\n    private", "type": "NodeParser<ResponseDescriptor>", "declarator": "responseDescriptorParser", "var_name": "responseDescriptorParser"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private Element root;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "root", "var_name": "root"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private Element element;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "Element", "declarator": "element", "var_name": "element"}, {"original_string": "@Mock\n    private ConditionChecker conditionChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "conditionChecker", "var_name": "conditionChecker"}, {"original_string": "@Mock\n    private DialogDescriptorAttributeParser dialogDescriptorAttributeParser;", "modifier": "@Mock\n    private", "type": "DialogDescriptorAttributeParser", "declarator": "dialogDescriptorAttributeParser", "var_name": "dialogDescriptorAttributeParser"}, {"original_string": "@Mock\n    private InterceptorDescriptorParser interceptorDescriptorParser;", "modifier": "@Mock\n    private", "type": "InterceptorDescriptorParser", "declarator": "interceptorDescriptorParser", "var_name": "interceptorDescriptorParser"}, {"original_string": "@Mock\n    private SequenceDescriptorParser sequenceDescriptorParser;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorParser", "declarator": "sequenceDescriptorParser", "var_name": "sequenceDescriptorParser"}, {"original_string": "@InjectMocks\n    private StubDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "StubDescriptorParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private DialogDescriptorAttributes dialogDescriptorAttributes;", "modifier": "private", "type": "DialogDescriptorAttributes", "declarator": "dialogDescriptorAttributes", "var_name": "dialogDescriptorAttributes"}, {"original_string": "private StubDescriptorAttributes stubDescriptorAttributes;", "modifier": "private", "type": "StubDescriptorAttributes", "declarator": "stubDescriptorAttributes", "var_name": "stubDescriptorAttributes"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/StubDescriptorParserTest.java"}, "test_case": {"identifier": "testParseShouldReturnStubDescriptorAttributesWithGroupname", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseShouldReturnStubDescriptorAttributesWithGroupname() {\n        //GIVEN\n        given(root.getAttribute(\"groupname\")).willReturn(\"test\");\n        //WHEN\n        StubDescriptor actual = underTest.parse(document);\n        //THEN\n        assertEquals(actual.getAttributes().getGroupName(), stubDescriptorAttributes.getGroupName());\n    }", "signature": "void testParseShouldReturnStubDescriptorAttributesWithGroupname()", "full_signature": "@Test public void testParseShouldReturnStubDescriptorAttributesWithGroupname()", "class_method_signature": "StubDescriptorParserTest.testParseShouldReturnStubDescriptorAttributesWithGroupname()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getAttribute", "parse", "assertEquals", "getGroupName", "getAttributes", "getGroupName"]}, "focal_class": {"identifier": "StubDescriptorParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    @Qualifier(\"conditionDescriptorParser\")\n    private NodeParser<ConditionDescriptor> conditionDescriptorParser;", "modifier": "@Autowired\n    @Qualifier(\"conditionDescriptorParser\")\n    private", "type": "NodeParser<ConditionDescriptor>", "declarator": "conditionDescriptorParser", "var_name": "conditionDescriptorParser"}, {"original_string": "@Autowired\n    @Qualifier(\"responseDescriptorParser\")\n    private NodeParser<ResponseDescriptor> responseDescriptorParser;", "modifier": "@Autowired\n    @Qualifier(\"responseDescriptorParser\")\n    private", "type": "NodeParser<ResponseDescriptor>", "declarator": "responseDescriptorParser", "var_name": "responseDescriptorParser"}, {"original_string": "@Autowired\n    private DialogDescriptorAttributeParser dialogDescriptorAttributeParser;", "modifier": "@Autowired\n    private", "type": "DialogDescriptorAttributeParser", "declarator": "dialogDescriptorAttributeParser", "var_name": "dialogDescriptorAttributeParser"}, {"original_string": "@Autowired\n    private SequenceDescriptorParser sequenceDescriptorParser;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorParser", "declarator": "sequenceDescriptorParser", "var_name": "sequenceDescriptorParser"}, {"original_string": "@Autowired\n    private InterceptorDescriptorParser interceptorDescriptorParser;", "modifier": "@Autowired\n    private", "type": "InterceptorDescriptorParser", "declarator": "interceptorDescriptorParser", "var_name": "interceptorDescriptorParser"}], "methods": [{"identifier": "parse", "parameters": "(final Document document)", "modifiers": "public", "return": "StubDescriptor", "signature": "StubDescriptor parse(final Document document)", "full_signature": "public StubDescriptor parse(final Document document)", "class_method_signature": "StubDescriptorParser.parse(final Document document)", "testcase": false, "constructor": false}, {"identifier": "getStubDescriptorAttributes", "parameters": "(final Element root)", "modifiers": "private", "return": "StubDescriptorAttributes", "signature": "StubDescriptorAttributes getStubDescriptorAttributes(final Element root)", "full_signature": "private StubDescriptorAttributes getStubDescriptorAttributes(final Element root)", "class_method_signature": "StubDescriptorParser.getStubDescriptorAttributes(final Element root)", "testcase": false, "constructor": false}, {"identifier": "getDialogDescriptors", "parameters": "(final Document document, final Element root)", "modifiers": "private", "return": "List<DialogDescriptor>", "signature": "List<DialogDescriptor> getDialogDescriptors(final Document document, final Element root)", "full_signature": "private List<DialogDescriptor> getDialogDescriptors(final Document document, final Element root)", "class_method_signature": "StubDescriptorParser.getDialogDescriptors(final Document document, final Element root)", "testcase": false, "constructor": false}, {"identifier": "getInterceptorDescriptors", "parameters": "(final Document document, final Element root)", "modifiers": "private", "return": "List<InterceptorDescriptor>", "signature": "List<InterceptorDescriptor> getInterceptorDescriptors(final Document document, final Element root)", "full_signature": "private List<InterceptorDescriptor> getInterceptorDescriptors(final Document document, final Element root)", "class_method_signature": "StubDescriptorParser.getInterceptorDescriptors(final Document document, final Element root)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/StubDescriptorParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final Document document)", "modifiers": "public", "return": "StubDescriptor", "body": "public StubDescriptor parse(final Document document) {\n        Element root = document.getDocumentElement();\n        StubDescriptorAttributes attributes = getStubDescriptorAttributes(root);\n        List<DialogDescriptor> dialogDescriptors = getDialogDescriptors(document, root);\n        List<InterceptorDescriptor> interceptorDescriptors = getInterceptorDescriptors(document, root);\n        List<SequenceDescriptor> sequenceDescriptors = sequenceDescriptorParser.parse(document, root, dialogDescriptors);\n        return new StubDescriptor(attributes, dialogDescriptors, interceptorDescriptors, sequenceDescriptors);\n    }", "signature": "StubDescriptor parse(final Document document)", "full_signature": "public StubDescriptor parse(final Document document)", "class_method_signature": "StubDescriptorParser.parse(final Document document)", "testcase": false, "constructor": false, "invocations": ["getDocumentElement", "getStubDescriptorAttributes", "getDialogDescriptors", "getInterceptorDescriptors", "parse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}