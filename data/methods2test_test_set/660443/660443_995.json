{"test_class": {"identifier": "MolecularFormulaRangeManipulatorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/tools/manipulator/MolecularFormulaRangeManipulatorTest.java"}, "test_case": {"identifier": "testGetRange_IMolecularFormulaSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRange_IMolecularFormulaSet() {\n        IMolecularFormula mf1 = new MolecularFormula(); /* C4H12NO4 */\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 4);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 12);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 1);\n        mf1.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 4);\n\n        IMolecularFormula mf2 = new MolecularFormula(); /* C7H20N4O2 */\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 7);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 20);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"N\"), 4);\n        mf2.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 2);\n\n        IMolecularFormula mf3 = new MolecularFormula(); /* C9H5O7 */\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"C\"), 9);\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"H\"), 5);\n        mf3.addIsotope(builder.newInstance(IIsotope.class, \"O\"), 7);\n\n        IMolecularFormulaSet mfSet = new MolecularFormulaSet();\n        mfSet.addMolecularFormula(mf1);\n        mfSet.addMolecularFormula(mf2);\n        mfSet.addMolecularFormula(mf3);\n\n        MolecularFormulaRange mfRange = MolecularFormulaRangeManipulator.getRange(mfSet);\n\n        /* Result: C4-9H5-20N0-4O2-7 */\n\n        Assert.assertEquals(4, mfRange.getIsotopeCount());\n        Assert.assertEquals(4, mfRange.getIsotopeCountMin(builder.newInstance(IIsotope.class, \"C\")));\n        Assert.assertEquals(9, mfRange.getIsotopeCountMax(builder.newInstance(IIsotope.class, \"C\")));\n        Assert.assertEquals(5, mfRange.getIsotopeCountMin(builder.newInstance(IIsotope.class, \"H\")));\n        Assert.assertEquals(20, mfRange.getIsotopeCountMax(builder.newInstance(IIsotope.class, \"H\")));\n        Assert.assertEquals(0, mfRange.getIsotopeCountMin(builder.newInstance(IIsotope.class, \"N\")));\n        Assert.assertEquals(4, mfRange.getIsotopeCountMax(builder.newInstance(IIsotope.class, \"N\")));\n        Assert.assertEquals(2, mfRange.getIsotopeCountMin(builder.newInstance(IIsotope.class, \"O\")));\n        Assert.assertEquals(7, mfRange.getIsotopeCountMax(builder.newInstance(IIsotope.class, \"O\")));\n\n    }", "signature": "void testGetRange_IMolecularFormulaSet()", "full_signature": "@Test public void testGetRange_IMolecularFormulaSet()", "class_method_signature": "MolecularFormulaRangeManipulatorTest.testGetRange_IMolecularFormulaSet()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addIsotope", "newInstance", "addMolecularFormula", "addMolecularFormula", "addMolecularFormula", "getRange", "assertEquals", "getIsotopeCount", "assertEquals", "getIsotopeCountMin", "newInstance", "assertEquals", "getIsotopeCountMax", "newInstance", "assertEquals", "getIsotopeCountMin", "newInstance", "assertEquals", "getIsotopeCountMax", "newInstance", "assertEquals", "getIsotopeCountMin", "newInstance", "assertEquals", "getIsotopeCountMax", "newInstance", "assertEquals", "getIsotopeCountMin", "newInstance", "assertEquals", "getIsotopeCountMax", "newInstance"]}, "focal_class": {"identifier": "MolecularFormulaRangeManipulator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRange", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "MolecularFormulaRange", "signature": "MolecularFormulaRange getRange(IMolecularFormulaSet mfSet)", "full_signature": "public static MolecularFormulaRange getRange(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaRangeManipulator.getRange(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false}, {"identifier": "getMaximalFormula", "parameters": "(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMaximalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "full_signature": "public static IMolecularFormula getMaximalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaRangeManipulator.getMaximalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getMinimalFormula", "parameters": "(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "modifiers": "public static", "return": "IMolecularFormula", "signature": "IMolecularFormula getMinimalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "full_signature": "public static IMolecularFormula getMinimalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "class_method_signature": "MolecularFormulaRangeManipulator.getMinimalFormula(MolecularFormulaRange mfRange, IChemObjectBuilder builder)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/tools/manipulator/MolecularFormulaRangeManipulator.java"}, "focal_method": {"identifier": "getRange", "parameters": "(IMolecularFormulaSet mfSet)", "modifiers": "public static", "return": "MolecularFormulaRange", "body": "public static MolecularFormulaRange getRange(IMolecularFormulaSet mfSet) {\n        MolecularFormulaRange mfRange = new MolecularFormulaRange();\n\n        for (IMolecularFormula mf : mfSet.molecularFormulas()) {\n            for (IIsotope isotope : mf.isotopes()) {\n                int occur_new = mf.getIsotopeCount(isotope);\n                if (!mfRange.contains(isotope)) {\n                    mfRange.addIsotope(isotope, occur_new, occur_new);\n                } else {\n                    int occur_old_Max = mfRange.getIsotopeCountMax(isotope);\n                    int occur_old_Min = mfRange.getIsotopeCountMin(isotope);\n                    if (occur_new > occur_old_Max) {\n                        mfRange.removeIsotope(isotope);\n                        mfRange.addIsotope(isotope, occur_old_Min, occur_new);\n                    } else if (occur_new < occur_old_Min) {\n                        mfRange.removeIsotope(isotope);\n                        mfRange.addIsotope(isotope, occur_new, occur_old_Max);\n                    }\n                }\n            }\n        }\n        // looking for those Isotopes which are not contained which then should be 0.\n        for (IMolecularFormula mf : mfSet.molecularFormulas()) {\n            if (mf.getIsotopeCount() != mfRange.getIsotopeCount()) {\n                for (IIsotope isotope : mfRange.isotopes()) {\n                    if (!mf.contains(isotope)) {\n                        int occurMax = mfRange.getIsotopeCountMax(isotope);\n                        mfRange.addIsotope(isotope, 0, occurMax);\n                    }\n                }\n            }\n        }\n        return mfRange;\n    }", "signature": "MolecularFormulaRange getRange(IMolecularFormulaSet mfSet)", "full_signature": "public static MolecularFormulaRange getRange(IMolecularFormulaSet mfSet)", "class_method_signature": "MolecularFormulaRangeManipulator.getRange(IMolecularFormulaSet mfSet)", "testcase": false, "constructor": false, "invocations": ["molecularFormulas", "isotopes", "getIsotopeCount", "contains", "addIsotope", "getIsotopeCountMax", "getIsotopeCountMin", "removeIsotope", "addIsotope", "removeIsotope", "addIsotope", "molecularFormulas", "getIsotopeCount", "getIsotopeCount", "isotopes", "contains", "getIsotopeCountMax", "addIsotope"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}