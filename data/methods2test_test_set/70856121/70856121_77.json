{"test_class": {"identifier": "StreamServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/server/src/test/java/io/cassandrareaper/service/StreamServiceTest.java"}, "test_case": {"identifier": "testListStreams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testListStreams() throws ReaperException, ClassNotFoundException, InterruptedException {\n    JmxProxy proxy = JmxProxyTest.mockJmxProxyImpl();\n    StreamManagerMBean streamingManagerMBean = Mockito.mock(StreamManagerMBean.class);\n    JmxProxyTest.mockGetStreamManagerMBean(proxy, streamingManagerMBean);\n\n    AppContext cxt = new AppContext();\n    cxt.config = TestRepairConfiguration.defaultConfig();\n    cxt.jmxConnectionFactory = mock(JmxConnectionFactory.class);\n    when(cxt.jmxConnectionFactory.connectAny(Mockito.anyList())).thenReturn(proxy);\n    ClusterFacade clusterFacadeSpy = Mockito.spy(ClusterFacade.create(cxt));\n    Mockito.doReturn(\"dc1\").when(clusterFacadeSpy).getDatacenter(any());\n\n    StreamService\n        .create(() -> clusterFacadeSpy)\n        .listStreams(Node.builder().withHostname(\"127.0.0.1\").build());\n\n    verify(streamingManagerMBean, times(1)).getCurrentStreams();\n  }", "signature": "void testListStreams()", "full_signature": "@Test public void testListStreams()", "class_method_signature": "StreamServiceTest.testListStreams()", "testcase": true, "constructor": false, "invocations": ["mockJmxProxyImpl", "mock", "mockGetStreamManagerMBean", "defaultConfig", "mock", "thenReturn", "when", "connectAny", "anyList", "spy", "create", "getDatacenter", "when", "doReturn", "any", "listStreams", "create", "build", "withHostname", "builder", "getCurrentStreams", "verify", "times"]}, "focal_class": {"identifier": "StreamService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(StreamService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(StreamService.class)", "var_name": "LOG"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}], "methods": [{"identifier": "StreamService", "parameters": "(Supplier<ClusterFacade> clusterFacadeSupplier)", "modifiers": "private", "return": "", "signature": " StreamService(Supplier<ClusterFacade> clusterFacadeSupplier)", "full_signature": "private  StreamService(Supplier<ClusterFacade> clusterFacadeSupplier)", "class_method_signature": "StreamService.StreamService(Supplier<ClusterFacade> clusterFacadeSupplier)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(AppContext context)", "modifiers": "public static", "return": "StreamService", "signature": "StreamService create(AppContext context)", "full_signature": "public static StreamService create(AppContext context)", "class_method_signature": "StreamService.create(AppContext context)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Supplier<ClusterFacade> clusterFacadeSupplier)", "modifiers": "static", "return": "StreamService", "signature": "StreamService create(Supplier<ClusterFacade> clusterFacadeSupplier)", "full_signature": "static StreamService create(Supplier<ClusterFacade> clusterFacadeSupplier)", "class_method_signature": "StreamService.create(Supplier<ClusterFacade> clusterFacadeSupplier)", "testcase": false, "constructor": false}, {"identifier": "listStreams", "parameters": "(Node node)", "modifiers": "public", "return": "List<StreamSession>", "signature": "List<StreamSession> listStreams(Node node)", "full_signature": "public List<StreamSession> listStreams(Node node)", "class_method_signature": "StreamService.listStreams(Node node)", "testcase": false, "constructor": false}, {"identifier": "pullStreamInfo", "parameters": "(Node node)", "modifiers": "private", "return": "List<StreamSession>", "signature": "List<StreamSession> pullStreamInfo(Node node)", "full_signature": "private List<StreamSession> pullStreamInfo(Node node)", "class_method_signature": "StreamService.pullStreamInfo(Node node)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/StreamService.java"}, "focal_method": {"identifier": "listStreams", "parameters": "(Node node)", "modifiers": "public", "return": "List<StreamSession>", "body": "public List<StreamSession> listStreams(Node node) throws ReaperException {\n    try {\n      LOG.debug(\"Pulling streams for node {}\", node);\n      return pullStreamInfo(node);\n    } catch (ReaperException | InterruptedException | IOException e) {\n      LOG.info(\"Pulling streams failed: {}\", e.getMessage());\n      throw new ReaperException(e);\n    }\n  }", "signature": "List<StreamSession> listStreams(Node node)", "full_signature": "public List<StreamSession> listStreams(Node node)", "class_method_signature": "StreamService.listStreams(Node node)", "testcase": false, "constructor": false, "invocations": ["debug", "pullStreamInfo", "info", "getMessage"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}