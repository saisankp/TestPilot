{"test_class": {"identifier": "MpAnnotationParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String genePhenoPath;", "modifier": "private static", "type": "String", "declarator": "genePhenoPath", "var_name": "genePhenoPath"}, {"original_string": "private static String phenoSexPath;", "modifier": "private static", "type": "String", "declarator": "phenoSexPath", "var_name": "phenoSexPath"}], "file": "phenol-annotations/src/test/java/org/monarchinitiative/phenol/annotations/obo/mpo/MpAnnotationParserTest.java"}, "test_case": {"identifier": "testRetrieveCorrectNumberOfModels", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testRetrieveCorrectNumberOfModels() {\n    Map<TermId, MpSimpleModel> modelmap = MpAnnotationParser.loadIndividualModels(genePhenoPath);\n    int expected_number_of_models=5;\n    assertEquals(expected_number_of_models,modelmap.size());\n  }", "signature": "void testRetrieveCorrectNumberOfModels()", "full_signature": "@Test void testRetrieveCorrectNumberOfModels()", "class_method_signature": "MpAnnotationParserTest.testRetrieveCorrectNumberOfModels()", "testcase": true, "constructor": false, "invocations": ["loadIndividualModels", "assertEquals", "size"]}, "focal_class": {"identifier": "MpAnnotationParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String genePhenoPath;", "modifier": "private final", "type": "String", "declarator": "genePhenoPath", "var_name": "genePhenoPath"}, {"original_string": "private final String phenoSexPath;", "modifier": "private final", "type": "String", "declarator": "phenoSexPath", "var_name": "phenoSexPath"}, {"original_string": "private Map<TermId, Map<TermId, MpAnnotation>> geno2ssannotMap = ImmutableMap.of();", "modifier": "private", "type": "Map<TermId, Map<TermId, MpAnnotation>>", "declarator": "geno2ssannotMap = ImmutableMap.of()", "var_name": "geno2ssannotMap"}, {"original_string": "private Map<TermId, MpSimpleModel> genotypeAccessionToMpSimpleModelMap;", "modifier": "private", "type": "Map<TermId, MpSimpleModel>", "declarator": "genotypeAccessionToMpSimpleModelMap", "var_name": "genotypeAccessionToMpSimpleModelMap"}, {"original_string": "private boolean verbose = true;", "modifier": "private", "type": "boolean", "declarator": "verbose = true", "var_name": "verbose"}, {"original_string": "private final List<String> parseErrors;", "modifier": "private final", "type": "List<String>", "declarator": "parseErrors", "var_name": "parseErrors"}], "methods": [{"identifier": "MpAnnotationParser", "parameters": "(String path)", "modifiers": "private", "return": "", "signature": " MpAnnotationParser(String path)", "full_signature": "private  MpAnnotationParser(String path)", "class_method_signature": "MpAnnotationParser.MpAnnotationParser(String path)", "testcase": false, "constructor": true}, {"identifier": "MpAnnotationParser", "parameters": "(String genePhenoPath, String phenoSexPath)", "modifiers": "private", "return": "", "signature": " MpAnnotationParser(String genePhenoPath, String phenoSexPath)", "full_signature": "private  MpAnnotationParser(String genePhenoPath, String phenoSexPath)", "class_method_signature": "MpAnnotationParser.MpAnnotationParser(String genePhenoPath, String phenoSexPath)", "testcase": false, "constructor": true}, {"identifier": "loadIndividualModels", "parameters": "(String genePhenoPath)", "modifiers": "public static", "return": "Map<TermId, MpSimpleModel>", "signature": "Map<TermId, MpSimpleModel> loadIndividualModels(String genePhenoPath)", "full_signature": "public static Map<TermId, MpSimpleModel> loadIndividualModels(String genePhenoPath)", "class_method_signature": "MpAnnotationParser.loadIndividualModels(String genePhenoPath)", "testcase": false, "constructor": false}, {"identifier": "loadIndividualModelsWithSexSpecificPhenotypes", "parameters": "(String genePhenoPath, String phenoSexPath)", "modifiers": "public static", "return": "Map<TermId, MpSimpleModel>", "signature": "Map<TermId, MpSimpleModel> loadIndividualModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "full_signature": "public static Map<TermId, MpSimpleModel> loadIndividualModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "class_method_signature": "MpAnnotationParser.loadIndividualModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "testcase": false, "constructor": false}, {"identifier": "loadMpGeneModels", "parameters": "(String genePhenoPath)", "modifiers": "public static", "return": "Map<TermId, MpGeneModel>", "signature": "Map<TermId, MpGeneModel> loadMpGeneModels(String genePhenoPath)", "full_signature": "public static Map<TermId, MpGeneModel> loadMpGeneModels(String genePhenoPath)", "class_method_signature": "MpAnnotationParser.loadMpGeneModels(String genePhenoPath)", "testcase": false, "constructor": false}, {"identifier": "loadMpGeneModelsWithSexSpecificPhenotypes", "parameters": "(String genePhenoPath, String phenoSexPath)", "modifiers": "public static", "return": "Map<TermId, MpGeneModel>", "signature": "Map<TermId, MpGeneModel> loadMpGeneModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "full_signature": "public static Map<TermId, MpGeneModel> loadMpGeneModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "class_method_signature": "MpAnnotationParser.loadMpGeneModelsWithSexSpecificPhenotypes(String genePhenoPath, String phenoSexPath)", "testcase": false, "constructor": false}, {"identifier": "parsePhenoSexData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parsePhenoSexData()", "full_signature": "private void parsePhenoSexData()", "class_method_signature": "MpAnnotationParser.parsePhenoSexData()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parse()", "full_signature": "private void parse()", "class_method_signature": "MpAnnotationParser.parse()", "testcase": false, "constructor": false}], "file": "phenol-annotations/src/main/java/org/monarchinitiative/phenol/annotations/obo/mpo/MpAnnotationParser.java"}, "focal_method": {"identifier": "loadIndividualModels", "parameters": "(String genePhenoPath)", "modifiers": "public static", "return": "Map<TermId, MpSimpleModel>", "body": "public static Map<TermId, MpSimpleModel> loadIndividualModels(String genePhenoPath) {\n    //Map<TermId, List<MpSimpleModel>> gene2simpleMap = new HashMap<>();\n    ImmutableMap.Builder<TermId, MpGeneModel> builder = new ImmutableMap.Builder<>();\n    MpAnnotationParser annotParser = new MpAnnotationParser(genePhenoPath);\n    if (annotParser.genotypeAccessionToMpSimpleModelMap.isEmpty()) {\n      for (String e : annotParser.parseErrors) {\n        System.err.println(e);\n      }\n      throw new PhenolRuntimeException(\"Could not parse \" + genePhenoPath);\n    }\n    return annotParser.genotypeAccessionToMpSimpleModelMap;\n  }", "signature": "Map<TermId, MpSimpleModel> loadIndividualModels(String genePhenoPath)", "full_signature": "public static Map<TermId, MpSimpleModel> loadIndividualModels(String genePhenoPath)", "class_method_signature": "MpAnnotationParser.loadIndividualModels(String genePhenoPath)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "println"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}