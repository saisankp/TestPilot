{"test_class": {"identifier": "SubtractiveMixingStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-model-simulation/src/test/java/edu/kit/pse/osip/core/model/simulation/SubtractiveMixingStrategyTest.java"}, "test_case": {"identifier": "testMixingMultipleLiquids", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMixingMultipleLiquids() {\n        LinkedList<Liquid> liquids = new LinkedList<>();\n        liquids.add(new Liquid(100, 350, new Color(0x000000)));\n        liquids.add(new Liquid(100, 300, new Color(0x000005)));\n        liquids.add(new Liquid(100, 300, new Color(0x000000)));\n        liquids.add(new Liquid(100, 300, new Color(0x00a000)));\n        liquids.add(new Liquid(100, 300, new Color(0x500000)));\n\n        Liquid result = new SubtractiveMixingStrategy().mixLiquids(liquids);\n        assertEquals(new Liquid(500, 310, new Color(0x102001)), result);\n    }", "signature": "void testMixingMultipleLiquids()", "full_signature": "@Test public void testMixingMultipleLiquids()", "class_method_signature": "SubtractiveMixingStrategyTest.testMixingMultipleLiquids()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "mixLiquids", "assertEquals"]}, "focal_class": {"identifier": "SubtractiveMixingStrategy", "superclass": "", "interfaces": "implements MixingStrategy", "fields": [], "methods": [{"identifier": "mixLiquids", "parameters": "(LinkedList<Liquid> inflow)", "modifiers": "public", "return": "Liquid", "signature": "Liquid mixLiquids(LinkedList<Liquid> inflow)", "full_signature": "public Liquid mixLiquids(LinkedList<Liquid> inflow)", "class_method_signature": "SubtractiveMixingStrategy.mixLiquids(LinkedList<Liquid> inflow)", "testcase": false, "constructor": false}], "file": "src/osip-model-simulation/src/main/java/edu/kit/pse/osip/core/model/simulation/SubtractiveMixingStrategy.java"}, "focal_method": {"identifier": "mixLiquids", "parameters": "(LinkedList<Liquid> inflow)", "modifiers": "public", "return": "Liquid", "body": "public Liquid mixLiquids(LinkedList<Liquid> inflow) {\n        if (inflow == null || inflow.isEmpty()) {\n            throw new IllegalArgumentException(\"Must at least mix one liquid\");\n        }\n\n        // Count full amount first...\n        float fullAmount = 0;\n        for (Liquid liquid : inflow) {\n            fullAmount += liquid.getAmount();\n        }\n\n        if (Math.abs(fullAmount) < 0.000001) {\n            return new Liquid(0, inflow.peekFirst().getTemperature(), inflow.peekFirst().getColor());\n        }\n\n        // Real calculations...\n        double c = 0;\n        double m = 0;\n        double y = 0;\n        float temperature = 0;\n\n        for (Liquid liquid : inflow) {\n            c += (liquid.getAmount() / fullAmount) * liquid.getColor().getCyan();\n            m += (liquid.getAmount() / fullAmount) * liquid.getColor().getMagenta();\n            y += (liquid.getAmount() / fullAmount) * liquid.getColor().getYellow();\n\n            temperature += (liquid.getAmount() / fullAmount) * liquid.getTemperature();\n        }\n\n        // Fix floating point inaccuracies\n        c = Math.min(1, c);\n        m = Math.min(1, m);\n        y = Math.min(1, y);\n        temperature = Math.min(SimulationConstants.MAX_TEMPERATURE,\n                Math.max(SimulationConstants.MIN_TEMPERATURE, temperature));\n\n        return new Liquid(fullAmount, temperature, new Color(c, m, y));\n    }", "signature": "Liquid mixLiquids(LinkedList<Liquid> inflow)", "full_signature": "public Liquid mixLiquids(LinkedList<Liquid> inflow)", "class_method_signature": "SubtractiveMixingStrategy.mixLiquids(LinkedList<Liquid> inflow)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getAmount", "abs", "getTemperature", "peekFirst", "getColor", "peekFirst", "getAmount", "getCyan", "getColor", "getAmount", "getMagenta", "getColor", "getAmount", "getYellow", "getColor", "getAmount", "getTemperature", "min", "min", "min", "min", "max"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}