{"test_class": {"identifier": "PluckNodeTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PluckNodeTransformer transformer = new PluckNodeTransformer();", "modifier": "private final", "type": "PluckNodeTransformer", "declarator": "transformer = new PluckNodeTransformer()", "var_name": "transformer"}, {"original_string": "@Mock\n    private SessionFactory sessionFactory;", "modifier": "@Mock\n    private", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "private SchemaService schemaService;", "modifier": "private", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}, {"original_string": "private CollectionNode collectionNode;", "modifier": "private", "type": "CollectionNode", "declarator": "collectionNode", "var_name": "collectionNode"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-node/src/test/java/org/hisp/dhis/node/transformers/PluckNodeTransformerTest.java"}, "test_case": {"identifier": "withArg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void withArg()\n    {\n        Node result = transformer.transform( collectionNode, Collections.singletonList( \"name\" ) );\n        Assert.assertTrue( result instanceof CollectionNode );\n\n        CollectionNode collection = (CollectionNode) result;\n        Assert.assertEquals( \"organisationUnits\", collection.getName() );\n        Assert.assertEquals( \"testUrn\", collection.getNamespace() );\n        Assert.assertEquals( 2, collection.getUnorderedChildren().size() );\n\n        Assert.assertEquals( \"name\", collection.getUnorderedChildren().get( 0 ).getName() );\n        Assert.assertTrue( collection.getUnorderedChildren().get( 0 ) instanceof SimpleNode );\n        Assert.assertEquals( \"OU 1\", ( (SimpleNode) collection.getUnorderedChildren().get( 0 ) ).getValue() );\n\n        Assert.assertEquals( \"name\", collection.getUnorderedChildren().get( 1 ).getName() );\n        Assert.assertTrue( collection.getUnorderedChildren().get( 1 ) instanceof SimpleNode );\n        Assert.assertEquals( \"OU 2\", ( (SimpleNode) collection.getUnorderedChildren().get( 1 ) ).getValue() );\n    }", "signature": "void withArg()", "full_signature": "@Test public void withArg()", "class_method_signature": "PluckNodeTransformerTest.withArg()", "testcase": true, "constructor": false, "invocations": ["transform", "singletonList", "assertTrue", "assertEquals", "getName", "assertEquals", "getNamespace", "assertEquals", "size", "getUnorderedChildren", "assertEquals", "getName", "get", "getUnorderedChildren", "assertTrue", "get", "getUnorderedChildren", "assertEquals", "getValue", "get", "getUnorderedChildren", "assertEquals", "getName", "get", "getUnorderedChildren", "assertTrue", "get", "getUnorderedChildren", "assertEquals", "getValue", "get", "getUnorderedChildren"]}, "focal_class": {"identifier": "PluckNodeTransformer", "superclass": "", "interfaces": "implements NodeTransformer", "fields": [], "methods": [{"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "PluckNodeTransformer.name()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "( Node node, List<String> args )", "modifiers": "@Override public", "return": "Node", "signature": "Node transform( Node node, List<String> args )", "full_signature": "@Override public Node transform( Node node, List<String> args )", "class_method_signature": "PluckNodeTransformer.transform( Node node, List<String> args )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-node/src/main/java/org/hisp/dhis/node/transformers/PluckNodeTransformer.java"}, "focal_method": {"identifier": "transform", "parameters": "( Node node, List<String> args )", "modifiers": "@Override public", "return": "Node", "body": "@Override\n    public Node transform( Node node, List<String> args )\n    {\n        checkNotNull( node );\n        checkNotNull( node.getProperty() );\n\n        Property property = node.getProperty();\n\n        if ( property.isCollection() )\n        {\n            final String fieldName = ( args == null || args.isEmpty() ) ? null : StringUtils.defaultIfEmpty( args.get( 0 ), null );\n\n            final CollectionNode collectionNode = new CollectionNode( node.getName(), node.getUnorderedChildren().size() );\n            collectionNode.setNamespace( node.getNamespace() );\n\n            for ( final Node objectNode : node.getUnorderedChildren() )\n            {\n                for ( final Node fieldNode : objectNode.getUnorderedChildren() )\n                {\n                    if ( fieldNode instanceof SimpleNode && ( fieldName == null || fieldName.equals( fieldNode.getName() ) ) )\n                    {\n                        final SimpleNode childNode = new SimpleNode( fieldNode.getName(), ( (SimpleNode) fieldNode ).getValue() );\n                        childNode.setProperty( collectionNode.getProperty() );\n                        collectionNode.addChild( childNode );\n\n                        break;\n                    }\n                }\n            }\n\n            return collectionNode;\n        }\n\n        return node;\n    }", "signature": "Node transform( Node node, List<String> args )", "full_signature": "@Override public Node transform( Node node, List<String> args )", "class_method_signature": "PluckNodeTransformer.transform( Node node, List<String> args )", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "getProperty", "getProperty", "isCollection", "isEmpty", "defaultIfEmpty", "get", "getName", "size", "getUnorderedChildren", "setNamespace", "getNamespace", "getUnorderedChildren", "getUnorderedChildren", "equals", "getName", "getName", "getValue", "setProperty", "getProperty", "addChild"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}