{"test_class": {"identifier": "TLVTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/util/bertlv/TLVTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void parse() {\n    Tag tag1 = new Tag(0x04, Tag.CONTEXT, PRIMITIVE, 1);\n    Tag tag2 = new Tag(0x04, Tag.CONTEXT, CONSTRUCTED, 1);\n    TLV tlv = new TLV(ByteArrayUtil.fromHex(\"84050011223344\"));\n    // 1st parsing\n    Assert.assertTrue(tlv.parse(tag1, 0));\n    // 2nd same parsing\n    Assert.assertTrue(tlv.parse(tag1, 0));\n    // search another tag\n    Assert.assertFalse(tlv.parse(tag2, 0));\n  }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "TLVTest.parse()", "testcase": true, "constructor": false, "invocations": ["fromHex", "assertTrue", "parse", "assertTrue", "parse", "assertFalse", "parse"]}, "focal_class": {"identifier": "TLV", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Tag tag;", "modifier": "private", "type": "Tag", "declarator": "tag", "var_name": "tag"}, {"original_string": "private int length;", "modifier": "private", "type": "int", "declarator": "length", "var_name": "length"}, {"original_string": "private final byte[] binary;", "modifier": "private final", "type": "byte[]", "declarator": "binary", "var_name": "binary"}, {"original_string": "private int position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}], "methods": [{"identifier": "TLV", "parameters": "(byte[] binary)", "modifiers": "public", "return": "", "signature": " TLV(byte[] binary)", "full_signature": "public  TLV(byte[] binary)", "class_method_signature": "TLV.TLV(byte[] binary)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Tag tag, int offset)", "modifiers": "public", "return": "boolean", "signature": "boolean parse(Tag tag, int offset)", "full_signature": "public boolean parse(Tag tag, int offset)", "class_method_signature": "TLV.parse(Tag tag, int offset)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getValue()", "full_signature": "public byte[] getValue()", "class_method_signature": "TLV.getValue()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPosition()", "full_signature": "public int getPosition()", "class_method_signature": "TLV.getPosition()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TLV.toString()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/util/bertlv/TLV.java"}, "focal_method": {"identifier": "parse", "parameters": "(Tag tag, int offset)", "modifiers": "public", "return": "boolean", "body": "public boolean parse(Tag tag, int offset) {\n    if (tag == null) {\n      throw new IllegalArgumentException(\"TLV parsing: tag can't be null.\");\n    }\n    try {\n      this.tag = new Tag(binary, offset);\n    } catch (IndexOutOfBoundsException e) {\n      throw new IllegalArgumentException(\"TLV parsing: index is too large.\");\n    }\n    length = 0;\n    if (tag.equals(this.tag)) {\n      offset += this.tag.getTagSize();\n      position += this.tag.getTagSize();\n      if ((binary[offset] & (byte) 0x80) == (byte) 0x00) {\n        /* short form: single octet length */\n        length += binary[offset];\n        position++;\n      } else {\n        /* long form: first octet (b6-b0)) gives the number of following length octets */\n        int following = (binary[offset] & (byte) 0x7F);\n        position++;\n        while (following > 0) {\n          offset++;\n          position++;\n          length += (binary[offset] & 0xFF);\n          if (following > 1) {\n            length <<= 8;\n          }\n          following--;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }", "signature": "boolean parse(Tag tag, int offset)", "full_signature": "public boolean parse(Tag tag, int offset)", "class_method_signature": "TLV.parse(Tag tag, int offset)", "testcase": false, "constructor": false, "invocations": ["equals", "getTagSize", "getTagSize"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}