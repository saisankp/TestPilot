{"test_class": {"identifier": "AtomHybridizationVSEPRDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/AtomHybridizationVSEPRDescriptorTest.java"}, "test_case": {"identifier": "testAtomHybridizationVSEPRDescriptorTest_2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAtomHybridizationVSEPRDescriptorTest_2() throws ClassNotFoundException, CDKException,\n            java.lang.Exception {\n        AtomHybridizationVSEPRDescriptor descriptor = new AtomHybridizationVSEPRDescriptor();\n\n        //[O+]#CC\n        IAtomContainer molecule = new AtomContainer();\n        Atom O1 = new Atom(\"O\");\n        O1.setFormalCharge(1);\n        Atom c2 = new Atom(\"C\");\n        Atom c3 = new Atom(\"C\");\n        c3.setImplicitHydrogenCount(3);\n        molecule.addAtom(O1);\n        molecule.addAtom(c2);\n        molecule.addAtom(c3);\n        Bond b1 = new Bond(c2, O1, IBond.Order.TRIPLE);\n        Bond b2 = new Bond(c2, c3, IBond.Order.SINGLE);\n        molecule.addBond(b1);\n        molecule.addBond(b2);\n\n        assertAtomTypesPerceived(molecule);\n        Assert.assertEquals(IAtomType.Hybridization.SP1.ordinal(),\n                ((IntegerResult) descriptor.calculate(molecule.getAtom(0), molecule).getValue()).intValue());\n        Assert.assertEquals(IAtomType.Hybridization.SP1.ordinal(),\n                ((IntegerResult) descriptor.calculate(molecule.getAtom(1), molecule).getValue()).intValue());\n        Assert.assertEquals(IAtomType.Hybridization.SP3.ordinal(),\n                ((IntegerResult) descriptor.calculate(molecule.getAtom(2), molecule).getValue()).intValue());\n    }", "signature": "void testAtomHybridizationVSEPRDescriptorTest_2()", "full_signature": "@Test public void testAtomHybridizationVSEPRDescriptorTest_2()", "class_method_signature": "AtomHybridizationVSEPRDescriptorTest.testAtomHybridizationVSEPRDescriptorTest_2()", "testcase": true, "constructor": false, "invocations": ["setFormalCharge", "setImplicitHydrogenCount", "addAtom", "addAtom", "addAtom", "addBond", "addBond", "assertAtomTypesPerceived", "assertEquals", "ordinal", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "ordinal", "intValue", "getValue", "calculate", "getAtom", "assertEquals", "ordinal", "intValue", "getValue", "calculate", "getAtom"]}, "focal_class": {"identifier": "AtomHybridizationVSEPRDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [], "methods": [{"identifier": "AtomHybridizationVSEPRDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomHybridizationVSEPRDescriptor()", "full_signature": "public  AtomHybridizationVSEPRDescriptor()", "class_method_signature": "AtomHybridizationVSEPRDescriptor.AtomHybridizationVSEPRDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AtomHybridizationVSEPRDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AtomHybridizationVSEPRDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AtomHybridizationVSEPRDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AtomHybridizationVSEPRDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "AtomHybridizationVSEPRDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AtomHybridizationVSEPRDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AtomHybridizationVSEPRDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/AtomHybridizationVSEPRDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        IAtomType atomType;\n        try {\n            atomType = CDKAtomTypeMatcher.getInstance(atom.getBuilder()).findMatchingAtomType(container, atom);\n        } catch (CDKException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                    (int) Double.NaN), // does that work??\n                    getDescriptorNames(), new CDKException(\"Atom type was null\"));\n        }\n        if (atomType == null) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                    (int) Double.NaN), // does that work??\n                    getDescriptorNames(), new CDKException(\"Atom type was null\"));\n\n        }\n\n        if (atomType.getHybridization() == null) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                    (int) Double.NaN), // does that work??\n                    getDescriptorNames(), new CDKException(\"Hybridization was null\"));\n        }\n        int hybridizationCDK = atomType.getHybridization().ordinal();\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                hybridizationCDK), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "AtomHybridizationVSEPRDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["findMatchingAtomType", "getInstance", "getBuilder", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getHybridization", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "ordinal", "getHybridization", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}