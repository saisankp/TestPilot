{"test_class": {"identifier": "ObjCObjectTypeConverterTest", "superclass": "extends RococoaTestCase", "interfaces": "", "fields": [{"original_string": "private static Class<? extends Number> primitiveTypeOfID = \n        (Class<? extends Number>) new ID().nativeType();", "modifier": "private static", "type": "Class<? extends Number>", "declarator": "primitiveTypeOfID = \n        (Class<? extends Number>) new ID().nativeType()", "var_name": "primitiveTypeOfID"}], "file": "rococoa/rococoa-core/src/test/java/org/rococoa/internal/ObjCObjectTypeConverterTest.java"}, "test_case": {"identifier": "convertsReturnedNilToNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void convertsReturnedNilToNull() {\n\t// Again I'm not sure that this is desirable, but it is what happens.\n        FromNativeConverter converter = new ObjCObjectTypeConverter(NSNumber.class);\n        Number nativeValue = new Long(0);\n        assertNull(converter.fromNative(nativeValue, null));\n    }", "signature": "void convertsReturnedNilToNull()", "full_signature": "@Test public void convertsReturnedNilToNull()", "class_method_signature": "ObjCObjectTypeConverterTest.convertsReturnedNilToNull()", "testcase": true, "constructor": false, "invocations": ["assertNull", "fromNative"]}, "focal_class": {"identifier": "ObjCObjectTypeConverter", "superclass": "", "interfaces": "implements TypeConverter", "fields": [{"original_string": "private static final NativeMapped nativeLongConverter = new ID();", "modifier": "private static final", "type": "NativeMapped", "declarator": "nativeLongConverter = new ID()", "var_name": "nativeLongConverter"}, {"original_string": "private final Class<T> javaType;", "modifier": "private final", "type": "Class<T>", "declarator": "javaType", "var_name": "javaType"}], "methods": [{"identifier": "ObjCObjectTypeConverter", "parameters": "(Class<T> javaType)", "modifiers": "public", "return": "", "signature": " ObjCObjectTypeConverter(Class<T> javaType)", "full_signature": "public  ObjCObjectTypeConverter(Class<T> javaType)", "class_method_signature": "ObjCObjectTypeConverter.ObjCObjectTypeConverter(Class<T> javaType)", "testcase": false, "constructor": true}, {"identifier": "nativeType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> nativeType()", "full_signature": "public Class<?> nativeType()", "class_method_signature": "ObjCObjectTypeConverter.nativeType()", "testcase": false, "constructor": false}, {"identifier": "fromNative", "parameters": "(Object nativeValue, FromNativeContext context)", "modifiers": "public", "return": "T", "signature": "T fromNative(Object nativeValue, FromNativeContext context)", "full_signature": "public T fromNative(Object nativeValue, FromNativeContext context)", "class_method_signature": "ObjCObjectTypeConverter.fromNative(Object nativeValue, FromNativeContext context)", "testcase": false, "constructor": false}, {"identifier": "toNative", "parameters": "(Object value, ToNativeContext context)", "modifiers": "public", "return": "Object", "signature": "Object toNative(Object value, ToNativeContext context)", "full_signature": "public Object toNative(Object value, ToNativeContext context)", "class_method_signature": "ObjCObjectTypeConverter.toNative(Object value, ToNativeContext context)", "testcase": false, "constructor": false}, {"identifier": "convertsJavaType", "parameters": "(Class<?> javaType)", "modifiers": "", "return": "boolean", "signature": "boolean convertsJavaType(Class<?> javaType)", "full_signature": " boolean convertsJavaType(Class<?> javaType)", "class_method_signature": "ObjCObjectTypeConverter.convertsJavaType(Class<?> javaType)", "testcase": false, "constructor": false}, {"identifier": "shouldRetainFor", "parameters": "(FromNativeContext context)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldRetainFor(FromNativeContext context)", "full_signature": "private boolean shouldRetainFor(FromNativeContext context)", "class_method_signature": "ObjCObjectTypeConverter.shouldRetainFor(FromNativeContext context)", "testcase": false, "constructor": false}], "file": "rococoa/rococoa-core/src/main/java/org/rococoa/internal/ObjCObjectTypeConverter.java"}, "focal_method": {"identifier": "fromNative", "parameters": "(Object nativeValue, FromNativeContext context)", "modifiers": "public", "return": "T", "body": "public T fromNative(Object nativeValue, FromNativeContext context) {\n        Number nativeValueAsNumber = (Number) nativeValue;\n        if (nativeValueAsNumber == null) {\n            return null;\n        }\n        ID id = ID.fromLong(nativeValueAsNumber.longValue());\n        if (id.isNull()) {\n            return null;\n        }\n        boolean shouldRetain = shouldRetainFor(context);        \n        return Rococoa.wrap(id, javaType, shouldRetain);\n    }", "signature": "T fromNative(Object nativeValue, FromNativeContext context)", "full_signature": "public T fromNative(Object nativeValue, FromNativeContext context)", "class_method_signature": "ObjCObjectTypeConverter.fromNative(Object nativeValue, FromNativeContext context)", "testcase": false, "constructor": false, "invocations": ["fromLong", "longValue", "isNull", "shouldRetainFor", "wrap"]}, "repository": {"repo_id": 32143635, "url": "https://github.com/iterate-ch/rococoa", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 17, "size": 2377, "license": "licensed"}}