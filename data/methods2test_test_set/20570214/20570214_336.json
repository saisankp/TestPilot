{"test_class": {"identifier": "EncryptThenAuthenticateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final RFCTestVector[] rfcTestVectors = {\n    new RFCTestVector(\n        \"000102030405060708090a0b0c0d0e0f\",\n        \"101112131415161718191a1b1c1d1e1f\",\n        \"1af38c2dc2b96ffdd86694092341bc04\"\n            + \"c80edfa32ddf39d5ef00c0b468834279\"\n            + \"a2e46a1b8049f792f76bfe54b903a9c9\"\n            + \"a94ac9b47ad2655c5f10f9aef71427e2\"\n            + \"fc6f9b3f399a221489f16362c7032336\"\n            + \"09d45ac69864e3321cf82935ac4096c8\"\n            + \"6e133314c54019e8ca7980dfa4b9cf1b\"\n            + \"384c486f3a54c51078158ee5d79de59f\"\n            + \"bd34d848b3d69550a67646344427ade5\"\n            + \"4b8851ffb598f7f80074b9473c82e2db\"\n            + \"652c3fa36b0a7c5b3219fab3a30bc1c4\",\n        \"546865207365636f6e64207072696e6369706c65206f662041756775737465204b6572636b686f666673\",\n        \"HMACSHA256\",\n        16,\n        16),\n    new RFCTestVector(\n        \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n        \"202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f\",\n        \"1af38c2dc2b96ffdd86694092341bc04\"\n            + \"4affaaadb78c31c5da4b1b590d10ffbd\"\n            + \"3dd8d5d302423526912da037ecbcc7bd\"\n            + \"822c301dd67c373bccb584ad3e9279c2\"\n            + \"e6d12a1374b77f077553df829410446b\"\n            + \"36ebd97066296ae6427ea75c2e0846a1\"\n            + \"1a09ccf5370dc80bfecbad28c73f09b3\"\n            + \"a3b75e662a2594410ae496b2e2e6609e\"\n            + \"31e6e02cc837f053d21f37ff4f51950b\"\n            + \"be2638d09dd7a4930930806d0703b1f6\"\n            + \"4dd3b4c088a7f45c216839645b2012bf\"\n            + \"2e6269a8c56a816dbc1b267761955bc5\",\n        \"546865207365636f6e64207072696e6369706c65206f662041756775737465204b6572636b686f666673\",\n        \"HMACSHA512\",\n        16,\n        32)\n  };", "modifier": "final", "type": "RFCTestVector[]", "declarator": "rfcTestVectors = {\n    new RFCTestVector(\n        \"000102030405060708090a0b0c0d0e0f\",\n        \"101112131415161718191a1b1c1d1e1f\",\n        \"1af38c2dc2b96ffdd86694092341bc04\"\n            + \"c80edfa32ddf39d5ef00c0b468834279\"\n            + \"a2e46a1b8049f792f76bfe54b903a9c9\"\n            + \"a94ac9b47ad2655c5f10f9aef71427e2\"\n            + \"fc6f9b3f399a221489f16362c7032336\"\n            + \"09d45ac69864e3321cf82935ac4096c8\"\n            + \"6e133314c54019e8ca7980dfa4b9cf1b\"\n            + \"384c486f3a54c51078158ee5d79de59f\"\n            + \"bd34d848b3d69550a67646344427ade5\"\n            + \"4b8851ffb598f7f80074b9473c82e2db\"\n            + \"652c3fa36b0a7c5b3219fab3a30bc1c4\",\n        \"546865207365636f6e64207072696e6369706c65206f662041756775737465204b6572636b686f666673\",\n        \"HMACSHA256\",\n        16,\n        16),\n    new RFCTestVector(\n        \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n        \"202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f\",\n        \"1af38c2dc2b96ffdd86694092341bc04\"\n            + \"4affaaadb78c31c5da4b1b590d10ffbd\"\n            + \"3dd8d5d302423526912da037ecbcc7bd\"\n            + \"822c301dd67c373bccb584ad3e9279c2\"\n            + \"e6d12a1374b77f077553df829410446b\"\n            + \"36ebd97066296ae6427ea75c2e0846a1\"\n            + \"1a09ccf5370dc80bfecbad28c73f09b3\"\n            + \"a3b75e662a2594410ae496b2e2e6609e\"\n            + \"31e6e02cc837f053d21f37ff4f51950b\"\n            + \"be2638d09dd7a4930930806d0703b1f6\"\n            + \"4dd3b4c088a7f45c216839645b2012bf\"\n            + \"2e6269a8c56a816dbc1b267761955bc5\",\n        \"546865207365636f6e64207072696e6369706c65206f662041756775737465204b6572636b686f666673\",\n        \"HMACSHA512\",\n        16,\n        32)\n  }", "var_name": "rfcTestVectors"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/EncryptThenAuthenticateTest.java"}, "test_case": {"identifier": "testRFCVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRFCVectors() throws Exception {\n    for (int i = 0; i < rfcTestVectors.length; i++) {\n      RFCTestVector t = rfcTestVectors[i];\n      if (Cipher.getMaxAllowedKeyLength(\"AES\") < 256 && t.encKey.length > 16) {\n        System.out.println(\n            \"Unlimited Strength Jurisdiction Policy Files are required\"\n                + \" but not installed. Skip tests with keys larger than 128 bits.\");\n        continue;\n      }\n      Aead aead = getAead(t.macKey, t.encKey, t.ivSize, t.tagLength, t.macAlg);\n      try {\n        aead.decrypt(t.ciphertext, t.aad);\n      } catch (GeneralSecurityException e) {\n        fail(\"Ciphertext and aad are valid, shouldn't reach here: \" + i + \" \" + e);\n      }\n    }\n  }", "signature": "void testRFCVectors()", "full_signature": "@Test public void testRFCVectors()", "class_method_signature": "EncryptThenAuthenticateTest.testRFCVectors()", "testcase": true, "constructor": false, "invocations": ["getMaxAllowedKeyLength", "println", "getAead", "decrypt", "fail"]}, "focal_class": {"identifier": "EncryptThenAuthenticate", "superclass": "", "interfaces": "implements Aead", "fields": [{"original_string": "private final IndCpaCipher cipher;", "modifier": "private final", "type": "IndCpaCipher", "declarator": "cipher", "var_name": "cipher"}, {"original_string": "private final Mac mac;", "modifier": "private final", "type": "Mac", "declarator": "mac", "var_name": "mac"}, {"original_string": "private final int macLength;", "modifier": "private final", "type": "int", "declarator": "macLength", "var_name": "macLength"}], "methods": [{"identifier": "EncryptThenAuthenticate", "parameters": "(final IndCpaCipher cipher, final Mac mac, int macLength)", "modifiers": "public", "return": "", "signature": " EncryptThenAuthenticate(final IndCpaCipher cipher, final Mac mac, int macLength)", "full_signature": "public  EncryptThenAuthenticate(final IndCpaCipher cipher, final Mac mac, int macLength)", "class_method_signature": "EncryptThenAuthenticate.EncryptThenAuthenticate(final IndCpaCipher cipher, final Mac mac, int macLength)", "testcase": false, "constructor": true}, {"identifier": "newAesCtrHmac", "parameters": "(\n      final byte[] aesCtrKey, int ivSize, String hmacAlgorithm, final byte[] hmacKey, int tagSize)", "modifiers": "public static", "return": "Aead", "signature": "Aead newAesCtrHmac(\n      final byte[] aesCtrKey, int ivSize, String hmacAlgorithm, final byte[] hmacKey, int tagSize)", "full_signature": "public static Aead newAesCtrHmac(\n      final byte[] aesCtrKey, int ivSize, String hmacAlgorithm, final byte[] hmacKey, int tagSize)", "class_method_signature": "EncryptThenAuthenticate.newAesCtrHmac(\n      final byte[] aesCtrKey, int ivSize, String hmacAlgorithm, final byte[] hmacKey, int tagSize)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] associatedData)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "full_signature": "@Override public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "class_method_signature": "EncryptThenAuthenticate.encrypt(final byte[] plaintext, final byte[] associatedData)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] associatedData)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "full_signature": "@Override public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "class_method_signature": "EncryptThenAuthenticate.decrypt(final byte[] ciphertext, final byte[] associatedData)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/EncryptThenAuthenticate.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] associatedData)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)\n      throws GeneralSecurityException {\n    if (ciphertext.length < macLength) {\n      throw new GeneralSecurityException(\"ciphertext too short\");\n    }\n    byte[] rawCiphertext = Arrays.copyOfRange(ciphertext, 0, ciphertext.length - macLength);\n    byte[] macValue =\n        Arrays.copyOfRange(ciphertext, ciphertext.length - macLength, ciphertext.length);\n    byte[] aad = associatedData;\n    if (aad == null) {\n      aad = new byte[0];\n    }\n    byte[] aadLengthInBits =\n        Arrays.copyOf(ByteBuffer.allocate(8).putLong(8L * aad.length).array(), 8);\n    mac.verifyMac(macValue, Bytes.concat(aad, rawCiphertext, aadLengthInBits));\n    return cipher.decrypt(rawCiphertext);\n  }", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "full_signature": "@Override public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "class_method_signature": "EncryptThenAuthenticate.decrypt(final byte[] ciphertext, final byte[] associatedData)", "testcase": false, "constructor": false, "invocations": ["copyOfRange", "copyOfRange", "copyOf", "array", "putLong", "allocate", "verifyMac", "concat", "decrypt"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}