{"test_class": {"identifier": "ActorsInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MSG_ONE_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_ONE_ID = 1", "var_name": "MSG_ONE_ID"}, {"original_string": "private static final int MSG_TWO_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "MSG_TWO_ID = 2", "var_name": "MSG_TWO_ID"}], "file": "Actor-Lite/src/test/java/com/actors/ActorsInjectorTest.java"}, "test_case": {"identifier": "clearForMultipleActorsThenUnregisterSpawnedActorWhenTheLastActorUnregisters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void clearForMultipleActorsThenUnregisterSpawnedActorWhenTheLastActorUnregisters() {\n\n        ActorSystemInstance system = ActorSystemInstance.getInstance(\"5\", configuration());\n\n        OwnerTwo owner = new OwnerTwo();\n        OwnerTwo ownerTwo = new OwnerTwo();\n\n\n        system.register(ownerTwo);\n        system.register(owner);\n        system.unregister(owner);\n        system.unregister(ownerTwo);\n\n\n        assertTrue(system.getActorsInjector().getInjectedActorsOwners().isEmpty());\n\n    }", "signature": "void clearForMultipleActorsThenUnregisterSpawnedActorWhenTheLastActorUnregisters()", "full_signature": "@Test public void clearForMultipleActorsThenUnregisterSpawnedActorWhenTheLastActorUnregisters()", "class_method_signature": "ActorsInjectorTest.clearForMultipleActorsThenUnregisterSpawnedActorWhenTheLastActorUnregisters()", "testcase": true, "constructor": false, "invocations": ["getInstance", "configuration", "register", "register", "unregister", "unregister", "assertTrue", "isEmpty", "getInjectedActorsOwners", "getActorsInjector"]}, "focal_class": {"identifier": "ActorsInjector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<Actor, Set<Object>> injectedActorsOwners = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Actor, Set<Object>>", "declarator": "injectedActorsOwners = new ConcurrentHashMap<>()", "var_name": "injectedActorsOwners"}, {"original_string": "private final ActorSystemInstance actorSystem;", "modifier": "private final", "type": "ActorSystemInstance", "declarator": "actorSystem", "var_name": "actorSystem"}], "methods": [{"identifier": "ActorsInjector", "parameters": "(ActorSystemInstance actorSystem)", "modifiers": "", "return": "", "signature": " ActorsInjector(ActorSystemInstance actorSystem)", "full_signature": "  ActorsInjector(ActorSystemInstance actorSystem)", "class_method_signature": "ActorsInjector.ActorsInjector(ActorSystemInstance actorSystem)", "testcase": false, "constructor": true}, {"identifier": "injectFor", "parameters": "(final Object actor)", "modifiers": "", "return": "void", "signature": "void injectFor(final Object actor)", "full_signature": " void injectFor(final Object actor)", "class_method_signature": "ActorsInjector.injectFor(final Object actor)", "testcase": false, "constructor": false}, {"identifier": "invokeInjectFor", "parameters": "(Object actor)", "modifiers": "private", "return": "void", "signature": "void invokeInjectFor(Object actor)", "full_signature": "private void invokeInjectFor(Object actor)", "class_method_signature": "ActorsInjector.invokeInjectFor(Object actor)", "testcase": false, "constructor": false}, {"identifier": "toClass", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Object, Class<?>>", "signature": "Function<Object, Class<?>> toClass()", "full_signature": "@NonNull private Function<Object, Class<?>> toClass()", "class_method_signature": "ActorsInjector.toClass()", "testcase": false, "constructor": false}, {"identifier": "isAnnotatedWithSpawn", "parameters": "()", "modifiers": "@NonNull private", "return": "Predicate<Class<?>>", "signature": "Predicate<Class<?>> isAnnotatedWithSpawn()", "full_signature": "@NonNull private Predicate<Class<?>> isAnnotatedWithSpawn()", "class_method_signature": "ActorsInjector.isAnnotatedWithSpawn()", "testcase": false, "constructor": false}, {"identifier": "toSpawnAnnotation", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Class<?>, Spawn>", "signature": "Function<Class<?>, Spawn> toSpawnAnnotation()", "full_signature": "@NonNull private Function<Class<?>, Spawn> toSpawnAnnotation()", "class_method_signature": "ActorsInjector.toSpawnAnnotation()", "testcase": false, "constructor": false}, {"identifier": "toValuesAndActorNamesClassList", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Spawn, List<Class<? extends Actor>>>", "signature": "Function<Spawn, List<Class<? extends Actor>>> toValuesAndActorNamesClassList()", "full_signature": "@NonNull private Function<Spawn, List<Class<? extends Actor>>> toValuesAndActorNamesClassList()", "class_method_signature": "ActorsInjector.toValuesAndActorNamesClassList()", "testcase": false, "constructor": false}, {"identifier": "toActorClassObservable", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<List<Class<? extends Actor>>, Observable<Class<? extends Actor>>>", "signature": "Function<List<Class<? extends Actor>>, Observable<Class<? extends Actor>>> toActorClassObservable()", "full_signature": "@NonNull private Function<List<Class<? extends Actor>>, Observable<Class<? extends Actor>>> toActorClassObservable()", "class_method_signature": "ActorsInjector.toActorClassObservable()", "testcase": false, "constructor": false}, {"identifier": "byNonRegisteredActorClasses", "parameters": "()", "modifiers": "@NonNull private", "return": "Predicate<Class<? extends Actor>>", "signature": "Predicate<Class<? extends Actor>> byNonRegisteredActorClasses()", "full_signature": "@NonNull private Predicate<Class<? extends Actor>> byNonRegisteredActorClasses()", "class_method_signature": "ActorsInjector.byNonRegisteredActorClasses()", "testcase": false, "constructor": false}, {"identifier": "toActorInstance", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Class<? extends Actor>, Actor>", "signature": "Function<Class<? extends Actor>, Actor> toActorInstance()", "full_signature": "@NonNull private Function<Class<? extends Actor>, Actor> toActorInstance()", "class_method_signature": "ActorsInjector.toActorInstance()", "testcase": false, "constructor": false}, {"identifier": "registerToActorSystem", "parameters": "()", "modifiers": "@NonNull private", "return": "Consumer<Actor>", "signature": "Consumer<Actor> registerToActorSystem()", "full_signature": "@NonNull private Consumer<Actor> registerToActorSystem()", "class_method_signature": "ActorsInjector.registerToActorSystem()", "testcase": false, "constructor": false}, {"identifier": "printStackTrace", "parameters": "()", "modifiers": "@NonNull private", "return": "Consumer<Throwable>", "signature": "Consumer<Throwable> printStackTrace()", "full_signature": "@NonNull private Consumer<Throwable> printStackTrace()", "class_method_signature": "ActorsInjector.printStackTrace()", "testcase": false, "constructor": false}, {"identifier": "addToInjectedActorsOwners", "parameters": "(final Object actor)", "modifiers": "@NonNull private", "return": "Consumer<Actor>", "signature": "Consumer<Actor> addToInjectedActorsOwners(final Object actor)", "full_signature": "@NonNull private Consumer<Actor> addToInjectedActorsOwners(final Object actor)", "class_method_signature": "ActorsInjector.addToInjectedActorsOwners(final Object actor)", "testcase": false, "constructor": false}, {"identifier": "appendActorClassFromClassName", "parameters": "(String[] classesNames,\n                                               List<Class<? extends Actor>> spawningClasses)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void appendActorClassFromClassName(String[] classesNames,\n                                               List<Class<? extends Actor>> spawningClasses)", "full_signature": "@SuppressWarnings(\"unchecked\") private void appendActorClassFromClassName(String[] classesNames,\n                                               List<Class<? extends Actor>> spawningClasses)", "class_method_signature": "ActorsInjector.appendActorClassFromClassName(String[] classesNames,\n                                               List<Class<? extends Actor>> spawningClasses)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateOwners", "parameters": "(Actor injectedActor)", "modifiers": "@NonNull private", "return": "Set<Object>", "signature": "Set<Object> getOrCreateOwners(Actor injectedActor)", "full_signature": "@NonNull private Set<Object> getOrCreateOwners(Actor injectedActor)", "class_method_signature": "ActorsInjector.getOrCreateOwners(Actor injectedActor)", "testcase": false, "constructor": false}, {"identifier": "clearFor", "parameters": "(final Object actor)", "modifiers": "", "return": "void", "signature": "void clearFor(final Object actor)", "full_signature": " void clearFor(final Object actor)", "class_method_signature": "ActorsInjector.clearFor(final Object actor)", "testcase": false, "constructor": false}, {"identifier": "invokeClearFor", "parameters": "(Object actor)", "modifiers": "private", "return": "void", "signature": "void invokeClearFor(Object actor)", "full_signature": "private void invokeClearFor(Object actor)", "class_method_signature": "ActorsInjector.invokeClearFor(Object actor)", "testcase": false, "constructor": false}, {"identifier": "byNonRegisteredOwners", "parameters": "(final Object actor)", "modifiers": "@NonNull private", "return": "Predicate<Map.Entry<Actor, Set<Object>>>", "signature": "Predicate<Map.Entry<Actor, Set<Object>>> byNonRegisteredOwners(final Object actor)", "full_signature": "@NonNull private Predicate<Map.Entry<Actor, Set<Object>>> byNonRegisteredOwners(final Object actor)", "class_method_signature": "ActorsInjector.byNonRegisteredOwners(final Object actor)", "testcase": false, "constructor": false}, {"identifier": "toInjectedActor", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<Map.Entry<Actor, Set<Object>>, Actor>", "signature": "Function<Map.Entry<Actor, Set<Object>>, Actor> toInjectedActor()", "full_signature": "@NonNull private Function<Map.Entry<Actor, Set<Object>>, Actor> toInjectedActor()", "class_method_signature": "ActorsInjector.toInjectedActor()", "testcase": false, "constructor": false}, {"identifier": "unregisterInjectedActor", "parameters": "()", "modifiers": "@NonNull private", "return": "Consumer<Actor>", "signature": "Consumer<Actor> unregisterInjectedActor()", "full_signature": "@NonNull private Consumer<Actor> unregisterInjectedActor()", "class_method_signature": "ActorsInjector.unregisterInjectedActor()", "testcase": false, "constructor": false}, {"identifier": "removeFromInjectedActorsOwners", "parameters": "()", "modifiers": "@NonNull private", "return": "Consumer<Actor>", "signature": "Consumer<Actor> removeFromInjectedActorsOwners()", "full_signature": "@NonNull private Consumer<Actor> removeFromInjectedActorsOwners()", "class_method_signature": "ActorsInjector.removeFromInjectedActorsOwners()", "testcase": false, "constructor": false}, {"identifier": "getInjectedActorsOwners", "parameters": "()", "modifiers": "@RestrictTo(RestrictTo.Scope.TESTS)", "return": "Map<Actor, Set<Object>>", "signature": "Map<Actor, Set<Object>> getInjectedActorsOwners()", "full_signature": "@RestrictTo(RestrictTo.Scope.TESTS) Map<Actor, Set<Object>> getInjectedActorsOwners()", "class_method_signature": "ActorsInjector.getInjectedActorsOwners()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@RestrictTo(RestrictTo.Scope.LIBRARY) public", "return": "void", "signature": "void clear()", "full_signature": "@RestrictTo(RestrictTo.Scope.LIBRARY) public void clear()", "class_method_signature": "ActorsInjector.clear()", "testcase": false, "constructor": false}], "file": "Actor-Lite/src/main/java/com/actors/ActorsInjector.java"}, "focal_method": {"identifier": "getInjectedActorsOwners", "parameters": "()", "modifiers": "@RestrictTo(RestrictTo.Scope.TESTS)", "return": "Map<Actor, Set<Object>>", "body": "@RestrictTo(RestrictTo.Scope.TESTS)\n    Map<Actor, Set<Object>> getInjectedActorsOwners() {\n        return injectedActorsOwners;\n    }", "signature": "Map<Actor, Set<Object>> getInjectedActorsOwners()", "full_signature": "@RestrictTo(RestrictTo.Scope.TESTS) Map<Actor, Set<Object>> getInjectedActorsOwners()", "class_method_signature": "ActorsInjector.getInjectedActorsOwners()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 115371169, "url": "https://github.com/Ahmed-Adel-Ismail/ActorLite", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 42, "size": 265, "license": "licensed"}}