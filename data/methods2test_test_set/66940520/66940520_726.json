{"test_class": {"identifier": "GridUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dhis-2/dhis-support/dhis-support-system/src/test/java/org/hisp/dhis/system/grid/GridUtilsTest.java"}, "test_case": {"identifier": "testGetGridIndexByDimensionItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetGridIndexByDimensionItem()\n    {\n        Period period1 = PeriodType.getPeriodFromIsoString( \"202010\" );\n        period1.setUid( CodeGenerator.generateUid() );\n\n        Period period2 = PeriodType.getPeriodFromIsoString( \"202011\" );\n        period2.setUid( CodeGenerator.generateUid() );\n\n        Period period3 = PeriodType.getPeriodFromIsoString( \"202012\" );\n        period3.setUid( CodeGenerator.generateUid() );\n\n        List<DimensionalItemObject> periods = Lists.newArrayList( period1, period2, period3);\n\n        List<Object> row = new ArrayList<>( 3 );\n        row.add( CodeGenerator.generateUid() ); // dimension\n        row.add( period2.getIsoDate()); // period\n        row.add( 10.22D ); // value\n        assertEquals( 1, GridUtils.getGridIndexByDimensionItem( row, periods, 2 ) );\n\n        List<Object> row2 = new ArrayList<>( 3 );\n        row2.add( CodeGenerator.generateUid() ); // dimension\n        row2.add( \"201901\" ); // period\n        row2.add( 10.22D ); // value\n        assertEquals( 2, GridUtils.getGridIndexByDimensionItem( row2, periods, 2 ) );\n\n\n    }", "signature": "void testGetGridIndexByDimensionItem()", "full_signature": "@Test public void testGetGridIndexByDimensionItem()", "class_method_signature": "GridUtilsTest.testGetGridIndexByDimensionItem()", "testcase": true, "constructor": false, "invocations": ["getPeriodFromIsoString", "setUid", "generateUid", "getPeriodFromIsoString", "setUid", "generateUid", "getPeriodFromIsoString", "setUid", "generateUid", "newArrayList", "add", "generateUid", "add", "getIsoDate", "add", "assertEquals", "getGridIndexByDimensionItem", "add", "generateUid", "add", "add", "assertEquals", "getGridIndexByDimensionItem"]}, "focal_class": {"identifier": "GridUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY = \"\"", "var_name": "EMPTY"}, {"original_string": "private static final char CSV_DELIMITER = ',';", "modifier": "private static final", "type": "char", "declarator": "CSV_DELIMITER = ','", "var_name": "CSV_DELIMITER"}, {"original_string": "private static final String XLS_SHEET_PREFIX = \"Sheet \";", "modifier": "private static final", "type": "String", "declarator": "XLS_SHEET_PREFIX = \"Sheet \"", "var_name": "XLS_SHEET_PREFIX"}, {"original_string": "private static final int JXL_MAX_COLS = 256;", "modifier": "private static final", "type": "int", "declarator": "JXL_MAX_COLS = 256", "var_name": "JXL_MAX_COLS"}, {"original_string": "private static final String FONT_ARIAL = \"Arial\";", "modifier": "private static final", "type": "String", "declarator": "FONT_ARIAL = \"Arial\"", "var_name": "FONT_ARIAL"}, {"original_string": "private static final NodeFilter HTML_ROW_FILTER = new OrFilter( new TagNameFilter( \"td\" ), new TagNameFilter( \"th\" ) );", "modifier": "private static final", "type": "NodeFilter", "declarator": "HTML_ROW_FILTER = new OrFilter( new TagNameFilter( \"td\" ), new TagNameFilter( \"th\" ) )", "var_name": "HTML_ROW_FILTER"}, {"original_string": "private static final Encoder ENCODER = new Encoder();", "modifier": "private static final", "type": "Encoder", "declarator": "ENCODER = new Encoder()", "var_name": "ENCODER"}, {"original_string": "private static final String KEY_GRID = \"grid\";", "modifier": "private static final", "type": "String", "declarator": "KEY_GRID = \"grid\"", "var_name": "KEY_GRID"}, {"original_string": "private static final String KEY_ENCODER = \"encoder\";", "modifier": "private static final", "type": "String", "declarator": "KEY_ENCODER = \"encoder\"", "var_name": "KEY_ENCODER"}, {"original_string": "private static final String KEY_PARAMS = \"params\";", "modifier": "private static final", "type": "String", "declarator": "KEY_PARAMS = \"params\"", "var_name": "KEY_PARAMS"}, {"original_string": "private static final String JASPER_TEMPLATE = \"grid.vm\";", "modifier": "private static final", "type": "String", "declarator": "JASPER_TEMPLATE = \"grid.vm\"", "var_name": "JASPER_TEMPLATE"}, {"original_string": "private static final String HTML_TEMPLATE = \"grid-html.vm\";", "modifier": "private static final", "type": "String", "declarator": "HTML_TEMPLATE = \"grid-html.vm\"", "var_name": "HTML_TEMPLATE"}, {"original_string": "private static final String HTML_CSS_TEMPLATE = \"grid-html-css.vm\";", "modifier": "private static final", "type": "String", "declarator": "HTML_CSS_TEMPLATE = \"grid-html-css.vm\"", "var_name": "HTML_CSS_TEMPLATE"}, {"original_string": "private static final String HTML_INLINE_CSS_TEMPLATE = \"grid-html-inline-css.vm\";", "modifier": "private static final", "type": "String", "declarator": "HTML_INLINE_CSS_TEMPLATE = \"grid-html-inline-css.vm\"", "var_name": "HTML_INLINE_CSS_TEMPLATE"}, {"original_string": "private static final String ATTR_GRID = \"grid\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_GRID = \"grid\"", "var_name": "ATTR_GRID"}, {"original_string": "private static final String ATTR_TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_TITLE = \"title\"", "var_name": "ATTR_TITLE"}, {"original_string": "private static final String ATTR_SUBTITLE = \"subtitle\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_SUBTITLE = \"subtitle\"", "var_name": "ATTR_SUBTITLE"}, {"original_string": "private static final String ATTR_WIDTH = \"width\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_WIDTH = \"width\"", "var_name": "ATTR_WIDTH"}, {"original_string": "private static final String ATTR_HEIGHT = \"height\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_HEIGHT = \"height\"", "var_name": "ATTR_HEIGHT"}, {"original_string": "private static final String ATTR_HEADERS = \"headers\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_HEADERS = \"headers\"", "var_name": "ATTR_HEADERS"}, {"original_string": "private static final String ATTR_HEADER = \"header\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_HEADER = \"header\"", "var_name": "ATTR_HEADER"}, {"original_string": "private static final String ATTR_NAME = \"name\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_NAME = \"name\"", "var_name": "ATTR_NAME"}, {"original_string": "private static final String ATTR_COLUMN = \"column\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_COLUMN = \"column\"", "var_name": "ATTR_COLUMN"}, {"original_string": "private static final String ATTR_TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_TYPE = \"type\"", "var_name": "ATTR_TYPE"}, {"original_string": "private static final String ATTR_HIDDEN = \"hidden\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_HIDDEN = \"hidden\"", "var_name": "ATTR_HIDDEN"}, {"original_string": "private static final String ATTR_META = \"meta\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_META = \"meta\"", "var_name": "ATTR_META"}, {"original_string": "private static final String ATTR_ROWS = \"rows\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_ROWS = \"rows\"", "var_name": "ATTR_ROWS"}, {"original_string": "private static final String ATTR_ROW = \"row\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_ROW = \"row\"", "var_name": "ATTR_ROW"}, {"original_string": "private static final String ATTR_FIELD = \"field\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_FIELD = \"field\"", "var_name": "ATTR_FIELD"}], "methods": [{"identifier": "toPdf", "parameters": "( Grid grid, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toPdf( Grid grid, OutputStream out )", "full_signature": "public static void toPdf( Grid grid, OutputStream out )", "class_method_signature": "GridUtils.toPdf( Grid grid, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "toPdf", "parameters": "( List<Grid> grids, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toPdf( List<Grid> grids, OutputStream out )", "full_signature": "public static void toPdf( List<Grid> grids, OutputStream out )", "class_method_signature": "GridUtils.toPdf( List<Grid> grids, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "toPdfInternal", "parameters": "( Grid grid, Document document, float spacing )", "modifiers": "private static", "return": "void", "signature": "void toPdfInternal( Grid grid, Document document, float spacing )", "full_signature": "private static void toPdfInternal( Grid grid, Document document, float spacing )", "class_method_signature": "GridUtils.toPdfInternal( Grid grid, Document document, float spacing )", "testcase": false, "constructor": false}, {"identifier": "addPdfTimestamp", "parameters": "( Document document, boolean paddingTop )", "modifiers": "private static", "return": "void", "signature": "void addPdfTimestamp( Document document, boolean paddingTop )", "full_signature": "private static void addPdfTimestamp( Document document, boolean paddingTop )", "class_method_signature": "GridUtils.addPdfTimestamp( Document document, boolean paddingTop )", "testcase": false, "constructor": false}, {"identifier": "toXls", "parameters": "( List<Grid> grids, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toXls( List<Grid> grids, OutputStream out )", "full_signature": "public static void toXls( List<Grid> grids, OutputStream out )", "class_method_signature": "GridUtils.toXls( List<Grid> grids, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "toXls", "parameters": "( Grid grid, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toXls( Grid grid, OutputStream out )", "full_signature": "public static void toXls( Grid grid, OutputStream out )", "class_method_signature": "GridUtils.toXls( Grid grid, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "toXlsInternal", "parameters": "( Grid grid, Sheet sheet, CellStyle headerCellStyle, CellStyle cellStyle )", "modifiers": "private static", "return": "void", "signature": "void toXlsInternal( Grid grid, Sheet sheet, CellStyle headerCellStyle, CellStyle cellStyle )", "full_signature": "private static void toXlsInternal( Grid grid, Sheet sheet, CellStyle headerCellStyle, CellStyle cellStyle )", "class_method_signature": "GridUtils.toXlsInternal( Grid grid, Sheet sheet, CellStyle headerCellStyle, CellStyle cellStyle )", "testcase": false, "constructor": false}, {"identifier": "toCsv", "parameters": "( Grid grid, Writer writer )", "modifiers": "public static", "return": "void", "signature": "void toCsv( Grid grid, Writer writer )", "full_signature": "public static void toCsv( Grid grid, Writer writer )", "class_method_signature": "GridUtils.toCsv( Grid grid, Writer writer )", "testcase": false, "constructor": false}, {"identifier": "toJasperReport", "parameters": "( Grid grid, Map<String, Object> params, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toJasperReport( Grid grid, Map<String, Object> params, OutputStream out )", "full_signature": "public static void toJasperReport( Grid grid, Map<String, Object> params, OutputStream out )", "class_method_signature": "GridUtils.toJasperReport( Grid grid, Map<String, Object> params, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "toJrxml", "parameters": "( Grid grid, Map<?, ?> params, Writer writer )", "modifiers": "public static", "return": "void", "signature": "void toJrxml( Grid grid, Map<?, ?> params, Writer writer )", "full_signature": "public static void toJrxml( Grid grid, Map<?, ?> params, Writer writer )", "class_method_signature": "GridUtils.toJrxml( Grid grid, Map<?, ?> params, Writer writer )", "testcase": false, "constructor": false}, {"identifier": "toHtml", "parameters": "( Grid grid, Writer writer )", "modifiers": "public static", "return": "void", "signature": "void toHtml( Grid grid, Writer writer )", "full_signature": "public static void toHtml( Grid grid, Writer writer )", "class_method_signature": "GridUtils.toHtml( Grid grid, Writer writer )", "testcase": false, "constructor": false}, {"identifier": "toHtmlCss", "parameters": "( Grid grid, Writer writer )", "modifiers": "public static", "return": "void", "signature": "void toHtmlCss( Grid grid, Writer writer )", "full_signature": "public static void toHtmlCss( Grid grid, Writer writer )", "class_method_signature": "GridUtils.toHtmlCss( Grid grid, Writer writer )", "testcase": false, "constructor": false}, {"identifier": "toHtmlInlineCss", "parameters": "( Grid grid, Writer writer )", "modifiers": "public static", "return": "void", "signature": "void toHtmlInlineCss( Grid grid, Writer writer )", "full_signature": "public static void toHtmlInlineCss( Grid grid, Writer writer )", "class_method_signature": "GridUtils.toHtmlInlineCss( Grid grid, Writer writer )", "testcase": false, "constructor": false}, {"identifier": "toXml", "parameters": "( Grid grid, OutputStream out )", "modifiers": "public static", "return": "void", "signature": "void toXml( Grid grid, OutputStream out )", "full_signature": "public static void toXml( Grid grid, OutputStream out )", "class_method_signature": "GridUtils.toXml( Grid grid, OutputStream out )", "testcase": false, "constructor": false}, {"identifier": "addRows", "parameters": "( Grid grid, SqlRowSet rs )", "modifiers": "public static", "return": "void", "signature": "void addRows( Grid grid, SqlRowSet rs )", "full_signature": "public static void addRows( Grid grid, SqlRowSet rs )", "class_method_signature": "GridUtils.addRows( Grid grid, SqlRowSet rs )", "testcase": false, "constructor": false}, {"identifier": "getGridIndexByDimensionItem", "parameters": "( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "modifiers": "public static", "return": "int", "signature": "int getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "full_signature": "public static int getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "class_method_signature": "GridUtils.getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "testcase": false, "constructor": false}, {"identifier": "fromHtml", "parameters": "( String html, String title )", "modifiers": "public static", "return": "List<Grid>", "signature": "List<Grid> fromHtml( String html, String title )", "full_signature": "public static List<Grid> fromHtml( String html, String title )", "class_method_signature": "GridUtils.fromHtml( String html, String title )", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "( TableRow row )", "modifiers": "private static", "return": "int", "signature": "int getColumnCount( TableRow row )", "full_signature": "private static int getColumnCount( TableRow row )", "class_method_signature": "GridUtils.getColumnCount( TableRow row )", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "( TagNode cell )", "modifiers": "public static", "return": "String", "signature": "String getValue( TagNode cell )", "full_signature": "public static String getValue( TagNode cell )", "class_method_signature": "GridUtils.getValue( TagNode cell )", "testcase": false, "constructor": false}, {"identifier": "getMetaValueMapping", "parameters": "( Grid grid, int valueIndex )", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getMetaValueMapping( Grid grid, int valueIndex )", "full_signature": "public static Map<String, Object> getMetaValueMapping( Grid grid, int valueIndex )", "class_method_signature": "GridUtils.getMetaValueMapping( Grid grid, int valueIndex )", "testcase": false, "constructor": false}, {"identifier": "getGeneratedString", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getGeneratedString()", "full_signature": "private static String getGeneratedString()", "class_method_signature": "GridUtils.getGeneratedString()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "( Grid grid, Map<?, ?> params, Writer writer, String template )", "modifiers": "private static", "return": "void", "signature": "void render( Grid grid, Map<?, ?> params, Writer writer, String template )", "full_signature": "private static void render( Grid grid, Map<?, ?> params, Writer writer, String template )", "class_method_signature": "GridUtils.render( Grid grid, Map<?, ?> params, Writer writer, String template )", "testcase": false, "constructor": false}, {"identifier": "hasNonEmptyGrid", "parameters": "( List<Grid> grids )", "modifiers": "private static", "return": "boolean", "signature": "boolean hasNonEmptyGrid( List<Grid> grids )", "full_signature": "private static boolean hasNonEmptyGrid( List<Grid> grids )", "class_method_signature": "GridUtils.hasNonEmptyGrid( List<Grid> grids )", "testcase": false, "constructor": false}, {"identifier": "isNonEmptyGrid", "parameters": "( Grid grid )", "modifiers": "private static", "return": "boolean", "signature": "boolean isNonEmptyGrid( Grid grid )", "full_signature": "private static boolean isNonEmptyGrid( Grid grid )", "class_method_signature": "GridUtils.isNonEmptyGrid( Grid grid )", "testcase": false, "constructor": false}, {"identifier": "createHeaderCellStyle", "parameters": "( Workbook workbook )", "modifiers": "private static", "return": "CellStyle", "signature": "CellStyle createHeaderCellStyle( Workbook workbook )", "full_signature": "private static CellStyle createHeaderCellStyle( Workbook workbook )", "class_method_signature": "GridUtils.createHeaderCellStyle( Workbook workbook )", "testcase": false, "constructor": false}, {"identifier": "createCellStyle", "parameters": "( Workbook workbook )", "modifiers": "private static", "return": "CellStyle", "signature": "CellStyle createCellStyle( Workbook workbook )", "full_signature": "private static CellStyle createCellStyle( Workbook workbook )", "class_method_signature": "GridUtils.createCellStyle( Workbook workbook )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/grid/GridUtils.java"}, "focal_method": {"identifier": "getGridIndexByDimensionItem", "parameters": "( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "modifiers": "public static", "return": "int", "body": "public static int getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )\n    {\n        // accumulate the DimensionalItemObject identifiers into a List\n        List<String> valid = items.stream().map( DimensionalItemObject::getDimensionItem )\n            .collect( Collectors.toList() );\n\n        // skip the last index, since it is always the row value\n        for ( int i = 0; i < row.size() -1 ; i++ )\n        {\n            final String value = (String) row.get( i );\n            if ( valid.contains( value ) )\n            {\n                return i;\n            }\n        }\n        return defaultIndex;\n    }", "signature": "int getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "full_signature": "public static int getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "class_method_signature": "GridUtils.getGridIndexByDimensionItem( List<Object> row, List<DimensionalItemObject> items, int defaultIndex )", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "toList", "size", "get", "contains"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}