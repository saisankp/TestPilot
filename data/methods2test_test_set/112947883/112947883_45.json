{"test_class": {"identifier": "RegexMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegexMatcher regexMatcher;", "modifier": "private", "type": "RegexMatcher", "declarator": "regexMatcher", "var_name": "regexMatcher"}, {"original_string": "private String str;", "modifier": "private", "type": "String", "declarator": "str", "var_name": "str"}], "file": "validatetor/src/test/java/com/raywenderlich/android/validatetor/RegexMatcherTest.java"}, "test_case": {"identifier": "validate_shouldThrowExeception_whenRegexStringIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validate_shouldThrowExeception_whenRegexStringIsNull() throws Exception {\n\n    str = \"abc\";\n    boolean threwException = false;\n\n    try {\n      regexMatcher.validate(str, (String) null);\n    } catch (IllegalArgumentException expectedException) {\n      threwException = true;\n    }\n    assertEquals(true, threwException);\n  }", "signature": "void validate_shouldThrowExeception_whenRegexStringIsNull()", "full_signature": "@Test public void validate_shouldThrowExeception_whenRegexStringIsNull()", "class_method_signature": "RegexMatcherTest.validate_shouldThrowExeception_whenRegexStringIsNull()", "testcase": true, "constructor": false, "invocations": ["validate", "assertEquals"]}, "focal_class": {"identifier": "RegexMatcher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(String dataStr, String regex)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(String dataStr, String regex)", "full_signature": "public boolean validate(String dataStr, String regex)", "class_method_signature": "RegexMatcher.validate(String dataStr, String regex)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String dataStr, String regex)", "modifiers": "public", "return": "boolean", "signature": "boolean find(String dataStr, String regex)", "full_signature": "public boolean find(String dataStr, String regex)", "class_method_signature": "RegexMatcher.find(String dataStr, String regex)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(String dataStr, Pattern pattern)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(String dataStr, Pattern pattern)", "full_signature": "public boolean validate(String dataStr, Pattern pattern)", "class_method_signature": "RegexMatcher.validate(String dataStr, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String dataStr, Pattern pattern)", "modifiers": "public", "return": "boolean", "signature": "boolean find(String dataStr, Pattern pattern)", "full_signature": "public boolean find(String dataStr, Pattern pattern)", "class_method_signature": "RegexMatcher.find(String dataStr, Pattern pattern)", "testcase": false, "constructor": false}], "file": "validatetor/src/main/java/com/raywenderlich/android/validatetor/RegexMatcher.java"}, "focal_method": {"identifier": "validate", "parameters": "(String dataStr, String regex)", "modifiers": "public", "return": "boolean", "body": "public boolean validate(String dataStr, String regex) {\n    if (regex == null || regex.equals(\"\")) {\n      throw new IllegalArgumentException(\"regex field cannot is be null or empty!\");\n    } else {\n      Pattern p = Pattern.compile(regex);\n      return validate(dataStr, p);\n    }\n  }", "signature": "boolean validate(String dataStr, String regex)", "full_signature": "public boolean validate(String dataStr, String regex)", "class_method_signature": "RegexMatcher.validate(String dataStr, String regex)", "testcase": false, "constructor": false, "invocations": ["equals", "compile", "validate"]}, "repository": {"repo_id": 112947883, "url": "https://github.com/nisrulz/validatetor", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 131, "size": 156, "license": "licensed"}}