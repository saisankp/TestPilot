{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "stencil/src/test/java/net/stencilproject/template/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "testCopyOfRangeGeneric", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyOfRangeGeneric() {\n\t\tassertArrayEquals(new String[] {}, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 0, 0));\n\t\tassertArrayEquals(new String[] { \"1\" }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 0, 1));\n\t\tassertArrayEquals(new String[] { \"1\", \"2\" }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 0, 2));\n\t\tassertArrayEquals(new String[] { \"1\", \"2\", \"3\" }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 0, 3));\n\t\tassertArrayEquals(new String[] { \"1\", \"2\", \"3\", null }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 0, 4));\n\n\t\tassertArrayEquals(new String[] {}, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 1, 1));\n\t\tassertArrayEquals(new String[] { \"2\" }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 1, 2));\n\t\tassertArrayEquals(new String[] { \"2\", \"3\" }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 1, 3));\n\t\tassertArrayEquals(new String[] { \"2\", \"3\", null }, ArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 1, 4));\n\n\t\ttry {\n\t\t\tArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, 1, 0);\n\t\t\tfail(\"Should have thrown\");\n\t\t} catch (IllegalArgumentException e) {\n\n\t\t}\n\n\t\ttry {\n\t\t\tArrayUtils.copyOfRange(new String[] { \"1\", \"2\", \"3\" }, -1, 4);\n\t\t\tfail(\"Should have thrown\");\n\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\n\t\t}\n\t}", "signature": "void testCopyOfRangeGeneric()", "full_signature": "@Test public void testCopyOfRangeGeneric()", "class_method_signature": "ArrayUtilsTest.testCopyOfRangeGeneric()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "assertArrayEquals", "copyOfRange", "copyOfRange", "fail", "copyOfRange", "fail"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "copyOf", "parameters": "(int[] in, int length)", "modifiers": "public static", "return": "int[]", "signature": "int[] copyOf(int[] in, int length)", "full_signature": "public static int[] copyOf(int[] in, int length)", "class_method_signature": "ArrayUtils.copyOf(int[] in, int length)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(T[] in, int length)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] copyOf(T[] in, int length)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] copyOf(T[] in, int length)", "class_method_signature": "ArrayUtils.copyOf(T[] in, int length)", "testcase": false, "constructor": false}, {"identifier": "copyOfRange", "parameters": "(T[] in, int start, int end)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "signature": "T[] copyOfRange(T[] in, int start, int end)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] copyOfRange(T[] in, int start, int end)", "class_method_signature": "ArrayUtils.copyOfRange(T[] in, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object[] a)", "modifiers": "public static", "return": "String", "signature": "String toString(Object[] a)", "full_signature": "public static String toString(Object[] a)", "class_method_signature": "ArrayUtils.toString(Object[] a)", "testcase": false, "constructor": false}], "file": "stencil/src/main/java/net/stencilproject/template/util/ArrayUtils.java"}, "focal_method": {"identifier": "copyOfRange", "parameters": "(T[] in, int start, int end)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T[]", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T[] copyOfRange(T[] in, int start, int end) {\n\t\tint length = end - start;\n\t\tif (length < 0) {\n\t\t\tthrow new IllegalArgumentException(\"end < start\");\n\t\t}\n\t\tT[] out = (T[]) Array.newInstance(in.getClass().getComponentType(), length);\n\t\tif (length > 0) {\n\t\t\tSystem.arraycopy(in, start, out, 0, Math.min(length, in.length - start));\n\t\t}\n\n\t\treturn out;\n\t}", "signature": "T[] copyOfRange(T[] in, int start, int end)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T[] copyOfRange(T[] in, int start, int end)", "class_method_signature": "ArrayUtils.copyOfRange(T[] in, int start, int end)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getComponentType", "getClass", "arraycopy", "min"]}, "repository": {"repo_id": 1144623, "url": "https://github.com/mmastrac/Stencil", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 4680, "license": "licensed"}}