{"test_class": {"identifier": "AdvancedPropertiesValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdvancedPropertiesValidator validator;", "modifier": "private", "type": "AdvancedPropertiesValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "@Mock\n    private PropertiesValidator propertiesValidator1;", "modifier": "@Mock\n    private", "type": "PropertiesValidator", "declarator": "propertiesValidator1", "var_name": "propertiesValidator1"}, {"original_string": "@Mock\n    private PropertiesValidator propertiesValidator2;", "modifier": "@Mock\n    private", "type": "PropertiesValidator", "declarator": "propertiesValidator2", "var_name": "propertiesValidator2"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/spi/impl/AdvancedPropertiesValidatorTest.java"}, "test_case": {"identifier": "testPropertiesWithInvalidElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPropertiesWithInvalidElement()\n            throws URISyntaxException, IOException, SAXException, ParserConfigurationException, ConfigurationException {\n        try (InputStream input = this.getClass().getResourceAsStream(\"/invalid-package/META-INF/vault/properties.xml\")) {\n            Collection<ValidationMessage> messages = validator.validateMetaInfData(input, Paths.get(\"vault/properties.xml\"));\n            ValidationExecutorTest.assertViolation(messages,\n                    new ValidationMessage(ValidationMessageSeverity.WARN,\n                                   AdvancedPropertiesValidator.MESSAGE_INVALID_PROPERTIES_XML,\n                            new InvalidPropertiesFormatException(\"org.xml.sax.SAXParseException; lineNumber: 35; columnNumber: 19; Element type \\\"someinvalidentry\\\" must be declared.\")));\n        }\n    }", "signature": "void testPropertiesWithInvalidElement()", "full_signature": "@Test public void testPropertiesWithInvalidElement()", "class_method_signature": "AdvancedPropertiesValidatorTest.testPropertiesWithInvalidElement()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "validateMetaInfData", "get", "assertViolation"]}, "focal_class": {"identifier": "AdvancedPropertiesValidator", "superclass": "", "interfaces": "implements GenericMetaInfDataValidator", "fields": [{"original_string": "protected static final String MESSAGE_INVALID_PROPERTIES_XML = \"Invalid properties.xml\";", "modifier": "protected static final", "type": "String", "declarator": "MESSAGE_INVALID_PROPERTIES_XML = \"Invalid properties.xml\"", "var_name": "MESSAGE_INVALID_PROPERTIES_XML"}, {"original_string": "static final Path PROPERTIES_XML_PATH = Paths.get(Constants.VAULT_DIR).resolve(Constants.PROPERTIES_XML);", "modifier": "static final", "type": "Path", "declarator": "PROPERTIES_XML_PATH = Paths.get(Constants.VAULT_DIR).resolve(Constants.PROPERTIES_XML)", "var_name": "PROPERTIES_XML_PATH"}, {"original_string": "private final Map<String, PropertiesValidator> propertiesValidators;", "modifier": "private final", "type": "Map<String, PropertiesValidator>", "declarator": "propertiesValidators", "var_name": "propertiesValidators"}, {"original_string": "private final ValidationMessageSeverity severity;", "modifier": "private final", "type": "ValidationMessageSeverity", "declarator": "severity", "var_name": "severity"}], "methods": [{"identifier": "AdvancedPropertiesValidator", "parameters": "(ValidationMessageSeverity severity)", "modifiers": "public", "return": "", "signature": " AdvancedPropertiesValidator(ValidationMessageSeverity severity)", "full_signature": "public  AdvancedPropertiesValidator(ValidationMessageSeverity severity)", "class_method_signature": "AdvancedPropertiesValidator.AdvancedPropertiesValidator(ValidationMessageSeverity severity)", "testcase": false, "constructor": true}, {"identifier": "setPropertiesValidators", "parameters": "(Map<String, PropertiesValidator> propertiesValidators)", "modifiers": "public", "return": "void", "signature": "void setPropertiesValidators(Map<String, PropertiesValidator> propertiesValidators)", "full_signature": "public void setPropertiesValidators(Map<String, PropertiesValidator> propertiesValidators)", "class_method_signature": "AdvancedPropertiesValidator.setPropertiesValidators(Map<String, PropertiesValidator> propertiesValidators)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> done()", "full_signature": "@Override public Collection<ValidationMessage> done()", "class_method_signature": "AdvancedPropertiesValidator.done()", "testcase": false, "constructor": false}, {"identifier": "validateMetaInfData", "parameters": "(@NotNull InputStream input, @NotNull Path filePath)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "full_signature": "@Override public Collection<ValidationMessage> validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "class_method_signature": "AdvancedPropertiesValidator.validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "testcase": false, "constructor": false}, {"identifier": "shouldValidateMetaInfData", "parameters": "(@NotNull Path filePath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldValidateMetaInfData(@NotNull Path filePath)", "full_signature": "@Override public boolean shouldValidateMetaInfData(@NotNull Path filePath)", "class_method_signature": "AdvancedPropertiesValidator.shouldValidateMetaInfData(@NotNull Path filePath)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/AdvancedPropertiesValidator.java"}, "focal_method": {"identifier": "validateMetaInfData", "parameters": "(@NotNull InputStream input, @NotNull Path filePath)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "body": "@Override\n    public Collection<ValidationMessage> validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath) {\n        Collection<ValidationMessage> messages = new LinkedList<>();\n        try {\n            PackageProperties properties = DefaultPackageProperties.fromInputStream(input);\n            // call all registered properties validators\n            for (Map.Entry<String, PropertiesValidator> entry : propertiesValidators.entrySet()) {\n                messages.add(new ValidationMessage(ValidationMessageSeverity.DEBUG, \"Validating with validator \" + entry.getKey() + \"...\"));\n                Collection<ValidationMessage> propertiesValidatorMessages = entry.getValue().validate(properties);\n                if (propertiesValidatorMessages != null) {\n                    messages.addAll(ValidationViolation.wrapMessages(entry.getKey(), propertiesValidatorMessages, null, null, null, 0, 0));\n                }\n            }\n        } catch (InvalidPropertiesFormatException e) {\n            messages.add(new ValidationMessage(severity, MESSAGE_INVALID_PROPERTIES_XML, e));\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Could not read from input stream \" + filePath, e);\n        }\n        return messages;\n    }", "signature": "Collection<ValidationMessage> validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "full_signature": "@Override public Collection<ValidationMessage> validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "class_method_signature": "AdvancedPropertiesValidator.validateMetaInfData(@NotNull InputStream input, @NotNull Path filePath)", "testcase": false, "constructor": false, "invocations": ["fromInputStream", "entrySet", "add", "getKey", "validate", "getValue", "addAll", "wrapMessages", "getKey", "add"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}