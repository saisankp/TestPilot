{"test_class": {"identifier": "NMEATest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/NMEATest.java"}, "test_case": {"identifier": "parseDegreesMinutes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseDegreesMinutes() {\n        // Parse DDDMM.MMMM,N into decimal degrees\n        assertEquals(123.761315, NMEA.parseDegreesMinutes(\"12345.6789\", \"N\"), 0.01);\n        assertEquals(-123.761315, NMEA.parseDegreesMinutes(\"12345.6789\", \"S\"), 0.01);\n        assertEquals(Double.NaN, NMEA.parseDegreesMinutes(\"\", \"\"), 0.01);\n        assertEquals(Double.NaN, NMEA.parseDegreesMinutes(\"X\", \"\"), 0.01);\n        assertEquals(Double.NaN, NMEA.parseDegreesMinutes(\"XX.YY\", \"\"), 0.01);\n        assertEquals(Double.NaN, NMEA.parseDegreesMinutes(\"12345\", \"\"), 0.01);\n    }", "signature": "void parseDegreesMinutes()", "full_signature": "@Test public void parseDegreesMinutes()", "class_method_signature": "NMEATest.parseDegreesMinutes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseDegreesMinutes", "assertEquals", "parseDegreesMinutes", "assertEquals", "parseDegreesMinutes", "assertEquals", "parseDegreesMinutes", "assertEquals", "parseDegreesMinutes", "assertEquals", "parseDegreesMinutes"]}, "focal_class": {"identifier": "NMEA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"NMEA\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"NMEA\"", "var_name": "TAG"}, {"original_string": "private static final Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));", "modifier": "private static final", "type": "Calendar", "declarator": "cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"))", "var_name": "cal"}], "methods": [{"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "parsePowerLevel", "parameters": "(@NonNull String[] split)", "modifiers": "static", "return": "float", "signature": "float parsePowerLevel(@NonNull String[] split)", "full_signature": "static float parsePowerLevel(@NonNull String[] split)", "class_method_signature": "NMEA.parsePowerLevel(@NonNull String[] split)", "testcase": false, "constructor": false}, {"identifier": "cleanNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String", "signature": "String cleanNmea(@NonNull String nmea)", "full_signature": "@NonNull static String cleanNmea(@NonNull String nmea)", "class_method_signature": "NMEA.cleanNmea(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/NMEA.java"}, "focal_method": {"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "body": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew) {\n        if (dm.isEmpty()) {\n            return Double.NaN;\n        } else {\n            final int index = dm.indexOf('.') - 2;\n            if (index < 0) {\n                Exceptions.report(new NMEAException(\"NMEA lat/lon parse error missing decimal: \" + dm + \" \" + nsew));\n                return Double.NaN;\n            } else {\n                try {\n                    final double m = Double.parseDouble(dm.substring(index));\n                    final int d = (index == 0) ? 0 : Integer.parseInt(dm.substring(0, index));\n                    final double degrees = d + m / 60.0;\n\n                    if (nsew.equalsIgnoreCase(\"S\") || nsew.equalsIgnoreCase(\"W\"))\n                        return -degrees;\n                    else\n                        return degrees;\n                } catch (Exception e) {\n                    Exceptions.report(new NMEAException(\"NMEA lat/lon parse error: \" + dm + \" \" + nsew));\n                    return Double.NaN;\n                }\n            }\n        }\n    }", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "indexOf", "report", "parseDouble", "substring", "parseInt", "substring", "equalsIgnoreCase", "equalsIgnoreCase", "report"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}