{"test_class": {"identifier": "MinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String rlpWithoutNonce = \"f894f890a00a312c2b0a8f125c60a3976b6e508e740e095eb59943988d9bbfb8\"\n\t\t\t+ \"aa43922e31a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794e559de5527492bcb42ec68d07df0742a98ec3f1ea050188ab86bdf164ac90eb2835a04a8930aae5393c3a2ef1166fb95028f9456b880833ee248208609184e72a000830eca0080845387fd2080c0c0\";", "modifier": "private", "type": "String", "declarator": "rlpWithoutNonce = \"f894f890a00a312c2b0a8f125c60a3976b6e508e740e095eb59943988d9bbfb8\"\n\t\t\t+ \"aa43922e31a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794e559de5527492bcb42ec68d07df0742a98ec3f1ea050188ab86bdf164ac90eb2835a04a8930aae5393c3a2ef1166fb95028f9456b880833ee248208609184e72a000830eca0080845387fd2080c0c0\"", "var_name": "rlpWithoutNonce"}], "file": "ethereumj-core/src/test/java/org/ethereum/core/MinerTest.java"}, "test_case": {"identifier": "testMine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMine() {\n\t\tboolean miningTestEnabled = false;\n\t\t\n\t\tif(miningTestEnabled) {\n\t\t\tBlock block = createBlock();\n\t\t\tassertEquals(rlpWithoutNonce, Hex.toHexString(block.getEncodedWithoutNonce()));\n\t\t\tSystem.out.println(\"Searching for nonce of following block: \\n\" + block.toString());\n\t\t\t\n\t\t\tMiner miner = new Miner();\n\t\t\tboolean mined = miner.mine(block, block.getDifficulty());\n\t\t\tassertTrue(mined);\n\t\t\tboolean valid = block.validateNonce();\n\t\t\tassertTrue(valid);\n\t\t\t\n\t\t\t// expectedHash is the actual hash from block#32 in PoC5 chain based on nonce below\n\t\t\tString expectedHash = \"ce7201f6cc5eb1a6f35c7dda8acda111647a0f8a5bf0518e46579b03e29fe14b\";\n\t\t\tassertEquals(expectedHash, Hex.toHexString(block.getHash()));\n\n\t\t\t// expectedNonce is the actual nonce from block#32 in Poc5 chain\n\t\t\tString expectedNonce = \"0000000000000000000000000000000000000000000000001f52ebb192c4ea97\"; // from Poc5 chain\n\t\t\t// Actual is \"000000000000000000000000000000000000000000000000000000000098cc15\" \n\t\t\t// but that might also be a valid nonce in compliance with PoW(H!n, n) < (2^256 / difficulty)\n\t\t\tassertEquals(expectedNonce, Hex.toHexString(block.getNonce()));\n\t\t}\n\t}", "signature": "void testMine()", "full_signature": "@Test public void testMine()", "class_method_signature": "MinerTest.testMine()", "testcase": true, "constructor": false, "invocations": ["createBlock", "assertEquals", "toHexString", "getEncodedWithoutNonce", "println", "toString", "mine", "getDifficulty", "assertTrue", "validateNonce", "assertTrue", "assertEquals", "toHexString", "getHash", "assertEquals", "toHexString", "getNonce"]}, "focal_class": {"identifier": "Miner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "mine", "parameters": "(Block newBlock, byte[] difficulty)", "modifiers": "public", "return": "boolean", "signature": "boolean mine(Block newBlock, byte[] difficulty)", "full_signature": "public boolean mine(Block newBlock, byte[] difficulty)", "class_method_signature": "Miner.mine(Block newBlock, byte[] difficulty)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/core/Miner.java"}, "focal_method": {"identifier": "mine", "parameters": "(Block newBlock, byte[] difficulty)", "modifiers": "public", "return": "boolean", "body": "public boolean mine(Block newBlock, byte[] difficulty) {\n\n\t\tBigInteger max = BigInteger.valueOf(2).pow(256);\n\t\tbyte[] target = BigIntegers.asUnsignedByteArray(32,\n\t\t\t\tmax.divide(new BigInteger(1, difficulty)));\n\n\t\tbyte[] hash = HashUtil.sha3(newBlock.getEncodedWithoutNonce());\n\t\tbyte[] testNonce = new byte[32];\n\t\tbyte[] concat;\n\t\t\n\t\twhile(ByteUtil.increment(testNonce)) {\n\t\t\tconcat = Arrays.concatenate(hash, testNonce);\n\t\t\tbyte[] result = HashUtil.sha3(concat);\n\t\t\tif(FastByteComparisons.compareTo(result, 0, 32, target, 0, 32) < 0) {\n\t\t\t\tnewBlock.setNonce(testNonce);\n//\t\t\t\tSystem.out.println(Hex.toHexString(newBlock.getEncoded()));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false; // couldn't find a valid nonce\n\t}", "signature": "boolean mine(Block newBlock, byte[] difficulty)", "full_signature": "public boolean mine(Block newBlock, byte[] difficulty)", "class_method_signature": "Miner.mine(Block newBlock, byte[] difficulty)", "testcase": false, "constructor": false, "invocations": ["pow", "valueOf", "asUnsignedByteArray", "divide", "sha3", "getEncodedWithoutNonce", "increment", "concatenate", "sha3", "compareTo", "setNonce"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}