{"test_class": {"identifier": "ClassificationSummaryMergerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/ClassificationSummaryMergerTest.java"}, "test_case": {"identifier": "testMergeNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergeNodes() throws Exception {\n        List<Node> fromParents = new ArrayList<>();\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:classificationSummary grid=\\\"1 km\\\">\\n\" +\n                        \"              <sentinel3:salineWaterPixels percentage=\\\"29.595219\\\"/>\\n\" +\n                        \"              <sentinel3:landPixels percentage=\\\"47.091896\\\"/>\\n\" +\n                        \"              <sentinel3:coastalPixels percentage=\\\"0.465542\\\"/>\\n\" +\n                        \"              <sentinel3:freshInlandWaterPixels percentage=\\\"3.184458\\\"/>\\n\" +\n                        \"              <sentinel3:tidalRegionPixels percentage=\\\"1.462398\\\"/>\\n\" +\n                        \"              <sentinel3:cloudyPixels percentage=\\\"42.695602\\\"/>\\n\" +\n                        \"            </slstr:classificationSummary>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:classificationSummary grid=\\\"1 km\\\">\\n\" +\n                        \"                <sentinel3:salineWaterPixels percentage=\\\"57.154091\\\"/>\\n\" +\n                        \"                <sentinel3:landPixels percentage=\\\"19.533026\\\"/>\\n\" +\n                        \"                <sentinel3:coastalPixels percentage=\\\"0.548977\\\"/>\\n\" +\n                        \"                <sentinel3:freshInlandWaterPixels percentage=\\\"0.418456\\\"/>\\n\" +\n                        \"                <sentinel3:tidalRegionPixels percentage=\\\"7.769990\\\"/>\\n\" +\n                        \"                <sentinel3:cloudyPixels percentage=\\\"47.409790\\\"/>\\n\" +\n                        \"            </slstr:classificationSummary>\").getFirstChild());\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"            <slstr:classificationSummary grid=\\\"1 km\\\">\\n\" +\n                        \"              <sentinel3:salineWaterPixels percentage=\\\"76.334869\\\"/>\\n\" +\n                        \"              <sentinel3:landPixels percentage=\\\"0.352250\\\"/>\\n\" +\n                        \"              <sentinel3:coastalPixels percentage=\\\"0.041999\\\"/>\\n\" +\n                        \"              <sentinel3:freshInlandWaterPixels percentage=\\\"0.000383\\\"/>\\n\" +\n                        \"              <sentinel3:tidalRegionPixels percentage=\\\"41.587013\\\"/>\\n\" +\n                        \"              <sentinel3:cloudyPixels percentage=\\\"46.897827\\\"/>\\n\" +\n                        \"            </slstr:classificationSummary>\").getFirstChild());\n\n        Document manifest = ManifestTestUtils.createDocument();\n        final Element manifestElement = manifest.createElement(\"slstr:classificationSummary\");\n        manifest.appendChild(manifestElement);\n\n        ImageSize[][] imageSizes = new ImageSize[fromParents.size()][];\n        for (int i = 0; i < fromParents.size(); i++) {\n            final ImageSize[] pduImageSizes = new ImageSize[4];\n            pduImageSizes[0] = new ImageSize(\"in\", 0, 0, 2, 2);\n            pduImageSizes[1] = new ImageSize(\"io\", 1, 1, 3, 3);\n            pduImageSizes[1] = new ImageSize(\"an\", 1, 1, 5, 4);\n            pduImageSizes[1] = new ImageSize(\"ao\", 1, 1, 2, 6);\n            imageSizes[i] = pduImageSizes;\n        }\n\n        new ClassificationSummaryMerger(imageSizes).mergeNodes(fromParents, manifestElement, manifest);\n\n        final NodeList childNodes = manifestElement.getChildNodes();\n        assertEquals(6, childNodes.getLength());\n        assertEquals(\"sentinel3:salineWaterPixels\", childNodes.item(0).getNodeName());\n        final NamedNodeMap salineWaterAttributes = childNodes.item(0).getAttributes();\n        assertEquals(1, salineWaterAttributes.getLength());\n        final Node salinePercentage = salineWaterAttributes.getNamedItem(\"percentage\");\n        assertNotNull(salinePercentage);\n        assertEquals(54.361393, Double.parseDouble(salinePercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(0).getTextContent());\n        assertEquals(\"sentinel3:landPixels\", childNodes.item(1).getNodeName());\n        final NamedNodeMap landPixelsAttributes = childNodes.item(1).getAttributes();\n        assertEquals(1, landPixelsAttributes.getLength());\n        final Node landPercentage = landPixelsAttributes.getNamedItem(\"percentage\");\n        assertNotNull(landPercentage);\n        assertEquals(22.325724, Double.parseDouble(landPercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(1).getTextContent());\n        assertEquals(\"sentinel3:coastalPixels\", childNodes.item(2).getNodeName());\n        final NamedNodeMap coastalPixelsAttributes = childNodes.item(2).getAttributes();\n        assertEquals(1, coastalPixelsAttributes.getLength());\n        final Node coastalPercentage = coastalPixelsAttributes.getNamedItem(\"percentage\");\n        assertNotNull(coastalPercentage);\n        assertEquals(0.352172666, Double.parseDouble(coastalPercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(2).getTextContent());\n        assertEquals(\"sentinel3:freshInlandWaterPixels\", childNodes.item(3).getNodeName());\n        final NamedNodeMap freshInlandWaterPixelsAttributes = childNodes.item(3).getAttributes();\n        assertEquals(1, freshInlandWaterPixelsAttributes.getLength());\n        final Node freshInlandWaterPixelsPercentage = freshInlandWaterPixelsAttributes.getNamedItem(\"percentage\");\n        assertNotNull(freshInlandWaterPixelsPercentage);\n        assertEquals(1.201099, Double.parseDouble(freshInlandWaterPixelsPercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(3).getTextContent());\n        assertEquals(\"sentinel3:tidalRegionPixels\", childNodes.item(4).getNodeName());\n        final NamedNodeMap tidalRegionPixelsAttributes = childNodes.item(4).getAttributes();\n        assertEquals(1, tidalRegionPixelsAttributes.getLength());\n        final Node tidalRegionPixelsPercentage = tidalRegionPixelsAttributes.getNamedItem(\"percentage\");\n        assertNotNull(tidalRegionPixelsPercentage);\n        assertEquals(16.93980033, Double.parseDouble(tidalRegionPixelsPercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(4).getTextContent());\n        assertEquals(\"sentinel3:cloudyPixels\", childNodes.item(5).getNodeName());\n        final NamedNodeMap cloudyPixelsAttributes = childNodes.item(5).getAttributes();\n        assertEquals(1, cloudyPixelsAttributes.getLength());\n        final Node cloudyPixelsPercentage = cloudyPixelsAttributes.getNamedItem(\"percentage\");\n        assertNotNull(cloudyPixelsPercentage);\n        assertEquals(45.66773966, Double.parseDouble(cloudyPixelsPercentage.getNodeValue()), 1e-8);\n        assertEquals(\"\", childNodes.item(5).getTextContent());\n    }", "signature": "void testMergeNodes()", "full_signature": "@Test public void testMergeNodes()", "class_method_signature": "ClassificationSummaryMergerTest.testMergeNodes()", "testcase": true, "constructor": false, "invocations": ["add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "add", "getFirstChild", "createNode", "createDocument", "createElement", "appendChild", "size", "size", "mergeNodes", "getChildNodes", "assertEquals", "getLength", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item", "assertEquals", "getNodeName", "item", "getAttributes", "item", "assertEquals", "getLength", "getNamedItem", "assertNotNull", "assertEquals", "parseDouble", "getNodeValue", "assertEquals", "getTextContent", "item"]}, "focal_class": {"identifier": "ClassificationSummaryMerger", "superclass": "extends AbstractElementMerger", "interfaces": "", "fields": [{"original_string": "private final ImageSize[][] imageSizes;", "modifier": "private final", "type": "ImageSize[][]", "declarator": "imageSizes", "var_name": "imageSizes"}], "methods": [{"identifier": "ClassificationSummaryMerger", "parameters": "(ImageSize[][] imageSizes)", "modifiers": "", "return": "", "signature": " ClassificationSummaryMerger(ImageSize[][] imageSizes)", "full_signature": "  ClassificationSummaryMerger(ImageSize[][] imageSizes)", "class_method_signature": "ClassificationSummaryMerger.ClassificationSummaryMerger(ImageSize[][] imageSizes)", "testcase": false, "constructor": true}, {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "ClassificationSummaryMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false}, {"identifier": "getPercentagesFromParents", "parameters": "(List<Node> fromParents)", "modifiers": "private", "return": "Map<String, Double>[]", "signature": "Map<String, Double>[] getPercentagesFromParents(List<Node> fromParents)", "full_signature": "private Map<String, Double>[] getPercentagesFromParents(List<Node> fromParents)", "class_method_signature": "ClassificationSummaryMerger.getPercentagesFromParents(List<Node> fromParents)", "testcase": false, "constructor": false}, {"identifier": "getWeights", "parameters": "(List<Node> fromParents)", "modifiers": "private", "return": "double[]", "signature": "double[] getWeights(List<Node> fromParents)", "full_signature": "private double[] getWeights(List<Node> fromParents)", "class_method_signature": "ClassificationSummaryMerger.getWeights(List<Node> fromParents)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(String gridName)", "modifiers": "private static", "return": "String", "signature": "String getId(String gridName)", "full_signature": "private static String getId(String gridName)", "class_method_signature": "ClassificationSummaryMerger.getId(String gridName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/ClassificationSummaryMerger.java"}, "focal_method": {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException {\n        final double[] weights = getWeights(fromParents);\n        final Map<String, Double>[] percentagesPerPDU = getPercentagesFromParents(fromParents);\n        List<String> elementNames = new ArrayList<>();\n        List<Double> percentageValues = new ArrayList<>();\n        for (int i = 0; i < fromParents.size(); i++) {\n            for (Map.Entry<String, Double> percentage : percentagesPerPDU[i].entrySet()) {\n                final String elementName = percentage.getKey();\n                final int index = elementNames.indexOf(elementName);\n                if (index >= 0) {\n                    percentageValues.set(index, percentageValues.get(index) + weights[i] * percentage.getValue());\n                } else {\n                    elementNames.add(elementName);\n                    percentageValues.add(weights[i] * percentage.getValue());\n                }\n            }\n        }\n        for (int i = 0; i < elementNames.size(); i++) {\n            final Element newElement = toDocument.createElement(elementNames.get(i));\n            newElement.setAttribute(\"percentage\", percentageValues.get(i).toString());\n            toParent.appendChild(newElement);\n        }\n    }", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "ClassificationSummaryMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false, "invocations": ["getWeights", "getPercentagesFromParents", "size", "entrySet", "getKey", "indexOf", "set", "get", "getValue", "add", "add", "getValue", "size", "createElement", "get", "setAttribute", "toString", "get", "appendChild"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}