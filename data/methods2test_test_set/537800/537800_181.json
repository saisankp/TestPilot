{"test_class": {"identifier": "InstrumentedScheduledExecutorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstrumentedScheduledExecutorServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstrumentedScheduledExecutorServiceTest.class)", "var_name": "LOGGER"}, {"original_string": "private final ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduledExecutor = Executors.newSingleThreadScheduledExecutor()", "var_name": "scheduledExecutor"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final InstrumentedScheduledExecutorService instrumentedScheduledExecutor = new InstrumentedScheduledExecutorService(scheduledExecutor, registry, \"xs\");", "modifier": "private final", "type": "InstrumentedScheduledExecutorService", "declarator": "instrumentedScheduledExecutor = new InstrumentedScheduledExecutorService(scheduledExecutor, registry, \"xs\")", "var_name": "instrumentedScheduledExecutor"}, {"original_string": "private final Meter submitted = registry.meter(\"xs.submitted\");", "modifier": "private final", "type": "Meter", "declarator": "submitted = registry.meter(\"xs.submitted\")", "var_name": "submitted"}, {"original_string": "private final Counter running = registry.counter(\"xs.running\");", "modifier": "private final", "type": "Counter", "declarator": "running = registry.counter(\"xs.running\")", "var_name": "running"}, {"original_string": "private final Meter completed = registry.meter(\"xs.completed\");", "modifier": "private final", "type": "Meter", "declarator": "completed = registry.meter(\"xs.completed\")", "var_name": "completed"}, {"original_string": "private final Timer duration = registry.timer(\"xs.duration\");", "modifier": "private final", "type": "Timer", "declarator": "duration = registry.timer(\"xs.duration\")", "var_name": "duration"}, {"original_string": "private final Meter scheduledOnce = registry.meter(\"xs.scheduled.once\");", "modifier": "private final", "type": "Meter", "declarator": "scheduledOnce = registry.meter(\"xs.scheduled.once\")", "var_name": "scheduledOnce"}, {"original_string": "private final Meter scheduledRepetitively = registry.meter(\"xs.scheduled.repetitively\");", "modifier": "private final", "type": "Meter", "declarator": "scheduledRepetitively = registry.meter(\"xs.scheduled.repetitively\")", "var_name": "scheduledRepetitively"}, {"original_string": "private final Counter scheduledOverrun = registry.counter(\"xs.scheduled.overrun\");", "modifier": "private final", "type": "Counter", "declarator": "scheduledOverrun = registry.counter(\"xs.scheduled.overrun\")", "var_name": "scheduledOverrun"}, {"original_string": "private final Histogram percentOfPeriod = registry.histogram(\"xs.scheduled.percent-of-period\");", "modifier": "private final", "type": "Histogram", "declarator": "percentOfPeriod = registry.histogram(\"xs.scheduled.percent-of-period\")", "var_name": "percentOfPeriod"}], "file": "metrics-core/src/test/java/com/codahale/metrics/InstrumentedScheduledExecutorServiceTest.java"}, "test_case": {"identifier": "testScheduleFixedDelayCallable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScheduleFixedDelayCallable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        ScheduledFuture<?> theFuture = instrumentedScheduledExecutor.scheduleWithFixedDelay(() -> {\n            assertThat(submitted.getCount()).isZero();\n\n            assertThat(running.getCount()).isEqualTo(1);\n\n            assertThat(scheduledOnce.getCount()).isEqualTo(0);\n            assertThat(scheduledRepetitively.getCount()).isEqualTo(1);\n\n            try {\n                TimeUnit.MILLISECONDS.sleep(50);\n            } catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n            }\n            countDownLatch.countDown();\n        }, 10L, 10L, TimeUnit.MILLISECONDS);\n\n        TimeUnit.MILLISECONDS.sleep(100);\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        theFuture.cancel(true);\n        TimeUnit.MILLISECONDS.sleep(200);\n\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isNotEqualTo(0);\n        assertThat(duration.getCount()).isNotEqualTo(0);\n        assertThat(duration.getSnapshot().size()).isNotEqualTo(0);\n    }", "signature": "void testScheduleFixedDelayCallable()", "full_signature": "@Test public void testScheduleFixedDelayCallable()", "class_method_signature": "InstrumentedScheduledExecutorServiceTest.testScheduleFixedDelayCallable()", "testcase": true, "constructor": false, "invocations": ["isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "scheduleWithFixedDelay", "isZero", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "isEqualTo", "assertThat", "getCount", "sleep", "interrupt", "currentThread", "countDown", "sleep", "await", "cancel", "sleep", "isZero", "assertThat", "getCount", "isZero", "assertThat", "getCount", "isNotEqualTo", "assertThat", "getCount", "isNotEqualTo", "assertThat", "getCount", "isNotEqualTo", "assertThat", "size", "getSnapshot"]}, "focal_class": {"identifier": "InstrumentedScheduledExecutorService", "superclass": "", "interfaces": "implements ScheduledExecutorService", "fields": [{"original_string": "private static final AtomicLong NAME_COUNTER = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "NAME_COUNTER = new AtomicLong()", "var_name": "NAME_COUNTER"}, {"original_string": "private final ScheduledExecutorService delegate;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final Meter submitted;", "modifier": "private final", "type": "Meter", "declarator": "submitted", "var_name": "submitted"}, {"original_string": "private final Counter running;", "modifier": "private final", "type": "Counter", "declarator": "running", "var_name": "running"}, {"original_string": "private final Meter completed;", "modifier": "private final", "type": "Meter", "declarator": "completed", "var_name": "completed"}, {"original_string": "private final Timer duration;", "modifier": "private final", "type": "Timer", "declarator": "duration", "var_name": "duration"}, {"original_string": "private final Meter scheduledOnce;", "modifier": "private final", "type": "Meter", "declarator": "scheduledOnce", "var_name": "scheduledOnce"}, {"original_string": "private final Meter scheduledRepetitively;", "modifier": "private final", "type": "Meter", "declarator": "scheduledRepetitively", "var_name": "scheduledRepetitively"}, {"original_string": "private final Counter scheduledOverrun;", "modifier": "private final", "type": "Counter", "declarator": "scheduledOverrun", "var_name": "scheduledOverrun"}, {"original_string": "private final Histogram percentOfPeriod;", "modifier": "private final", "type": "Histogram", "declarator": "percentOfPeriod", "var_name": "percentOfPeriod"}], "methods": [{"identifier": "InstrumentedScheduledExecutorService", "parameters": "(ScheduledExecutorService delegate, MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry)", "full_signature": "public  InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry)", "class_method_signature": "InstrumentedScheduledExecutorService.InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedScheduledExecutorService", "parameters": "(ScheduledExecutorService delegate, MetricRegistry registry, String name)", "modifiers": "public", "return": "", "signature": " InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry, String name)", "full_signature": "public  InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry, String name)", "class_method_signature": "InstrumentedScheduledExecutorService.InstrumentedScheduledExecutorService(ScheduledExecutorService delegate, MetricRegistry registry, String name)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(Runnable command, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.schedule(Runnable command, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(Callable<V> callable, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<V>", "signature": "ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.schedule(Callable<V> callable, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "scheduleAtFixedRate", "parameters": "(Runnable command, long initialDelay, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "scheduleWithFixedDelay", "parameters": "(Runnable command, long initialDelay, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "InstrumentedScheduledExecutorService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "()", "modifiers": "@Override public", "return": "List<Runnable>", "signature": "List<Runnable> shutdownNow()", "full_signature": "@Override public List<Runnable> shutdownNow()", "class_method_signature": "InstrumentedScheduledExecutorService.shutdownNow()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "@Override public boolean isShutdown()", "class_method_signature": "InstrumentedScheduledExecutorService.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "@Override public boolean isTerminated()", "class_method_signature": "InstrumentedScheduledExecutorService.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "awaitTermination", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean awaitTermination(long timeout, TimeUnit unit)", "full_signature": "@Override public boolean awaitTermination(long timeout, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.awaitTermination(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Callable<T> task)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(Callable<T> task)", "full_signature": "@Override public Future<T> submit(Callable<T> task)", "class_method_signature": "InstrumentedScheduledExecutorService.submit(Callable<T> task)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable task, T result)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(Runnable task, T result)", "full_signature": "@Override public Future<T> submit(Runnable task, T result)", "class_method_signature": "InstrumentedScheduledExecutorService.submit(Runnable task, T result)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable task)", "modifiers": "@Override public", "return": "Future<?>", "signature": "Future<?> submit(Runnable task)", "full_signature": "@Override public Future<?> submit(Runnable task)", "class_method_signature": "InstrumentedScheduledExecutorService.submit(Runnable task)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "full_signature": "@Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedScheduledExecutorService.invokeAll(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "full_signature": "@Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(Collection<? extends Callable<T>> tasks)", "full_signature": "@Override public T invokeAny(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedScheduledExecutorService.invokeAny(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "full_signature": "@Override public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "instrument", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "private", "return": "Collection<? extends Callable<T>>", "signature": "Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks)", "full_signature": "private Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks)", "class_method_signature": "InstrumentedScheduledExecutorService.instrument(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "InstrumentedScheduledExecutorService.execute(Runnable command)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/InstrumentedScheduledExecutorService.java"}, "focal_method": {"identifier": "scheduleWithFixedDelay", "parameters": "(Runnable command, long initialDelay, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "body": "@Override\n    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {\n        scheduledRepetitively.mark();\n        return delegate.scheduleWithFixedDelay(new InstrumentedRunnable(command), initialDelay, delay, unit);\n    }", "signature": "ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "class_method_signature": "InstrumentedScheduledExecutorService.scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["mark", "scheduleWithFixedDelay"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}