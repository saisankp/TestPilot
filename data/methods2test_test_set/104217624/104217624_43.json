{"test_class": {"identifier": "RpkiRepositoriesStoreTest", "superclass": "extends GenericStorageTest", "interfaces": "", "fields": [{"original_string": "private TrustAnchor trustAnchor;", "modifier": "private", "type": "TrustAnchor", "declarator": "trustAnchor", "var_name": "trustAnchor"}, {"original_string": "private RpkiRepository rsyncRepo;", "modifier": "private", "type": "RpkiRepository", "declarator": "rsyncRepo", "var_name": "rsyncRepo"}], "file": "rpki-validator/src/test/java/net/ripe/rpki/validator3/storage/stores/impl/RpkiRepositoriesStoreTest.java"}, "test_case": {"identifier": "after_setup_there_is_one_rpki_repository", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void after_setup_there_is_one_rpki_repository() {\n        long countAll = rtx(tx -> this.getRpkiRepositories().countAll(tx, RpkiRepository.Status.PENDING,\n                trustAnchor.key(), true, new SearchTerm(\"some\")));\n        assertEquals(1, countAll);\n    }", "signature": "void after_setup_there_is_one_rpki_repository()", "full_signature": "@Test public void after_setup_there_is_one_rpki_repository()", "class_method_signature": "RpkiRepositoriesStoreTest.after_setup_there_is_one_rpki_repository()", "testcase": true, "constructor": false, "invocations": ["rtx", "countAll", "getRpkiRepositories", "key", "assertEquals"]}, "focal_class": {"identifier": "RpkiRepositoriesStore", "superclass": "extends GenericStoreImpl<RpkiRepository>", "interfaces": "implements RpkiRepositories", "fields": [{"original_string": "private static final String RPKI_REPOSITORIES = \"rpki-repositories\";", "modifier": "private static final", "type": "String", "declarator": "RPKI_REPOSITORIES = \"rpki-repositories\"", "var_name": "RPKI_REPOSITORIES"}, {"original_string": "private static final String BY_URI_PREFIX = \"by-uri\";", "modifier": "private static final", "type": "String", "declarator": "BY_URI_PREFIX = \"by-uri\"", "var_name": "BY_URI_PREFIX"}, {"original_string": "private static final String BY_TA = \"by-ta\";", "modifier": "private static final", "type": "String", "declarator": "BY_TA = \"by-ta\"", "var_name": "BY_TA"}, {"original_string": "private final IxMap<RpkiRepository> ixMap;", "modifier": "private final", "type": "IxMap<RpkiRepository>", "declarator": "ixMap", "var_name": "ixMap"}, {"original_string": "private final SequencesStore sequences;", "modifier": "private final", "type": "SequencesStore", "declarator": "sequences", "var_name": "sequences"}, {"original_string": "private final ValidationScheduler validationScheduler;", "modifier": "private final", "type": "ValidationScheduler", "declarator": "validationScheduler", "var_name": "validationScheduler"}], "methods": [{"identifier": "RpkiRepositoriesStore", "parameters": "(Storage storage, SequencesStore sequences, ValidationScheduler validationScheduler)", "modifiers": "@Autowired public", "return": "", "signature": " RpkiRepositoriesStore(Storage storage, SequencesStore sequences, ValidationScheduler validationScheduler)", "full_signature": "@Autowired public  RpkiRepositoriesStore(Storage storage, SequencesStore sequences, ValidationScheduler validationScheduler)", "class_method_signature": "RpkiRepositoriesStore.RpkiRepositoriesStore(Storage storage, SequencesStore sequences, ValidationScheduler validationScheduler)", "testcase": false, "constructor": true}, {"identifier": "uriToKey", "parameters": "(String uri)", "modifiers": "private", "return": "Key", "signature": "Key uriToKey(String uri)", "full_signature": "private Key uriToKey(String uri)", "class_method_signature": "RpkiRepositoriesStore.uriToKey(String uri)", "testcase": false, "constructor": false}, {"identifier": "locationIndex", "parameters": "(RpkiRepository repository)", "modifiers": "private", "return": "Set<Key>", "signature": "Set<Key> locationIndex(RpkiRepository repository)", "full_signature": "private Set<Key> locationIndex(RpkiRepository repository)", "class_method_signature": "RpkiRepositoriesStore.locationIndex(RpkiRepository repository)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Tx.Write tx, Ref<TrustAnchor> trustAnchorRef, String uri, RpkiRepository.Type type)", "modifiers": "@Override public", "return": "RpkiRepository", "signature": "RpkiRepository register(Tx.Write tx, Ref<TrustAnchor> trustAnchorRef, String uri, RpkiRepository.Type type)", "full_signature": "@Override public RpkiRepository register(Tx.Write tx, Ref<TrustAnchor> trustAnchorRef, String uri, RpkiRepository.Type type)", "class_method_signature": "RpkiRepositoriesStore.register(Tx.Write tx, Ref<TrustAnchor> trustAnchorRef, String uri, RpkiRepository.Type type)", "testcase": false, "constructor": false}, {"identifier": "findRsyncParentRepository", "parameters": "(Tx.Read tx, @NotNull @ValidLocationURI String uri)", "modifiers": "private", "return": "Optional<RpkiRepository>", "signature": "Optional<RpkiRepository> findRsyncParentRepository(Tx.Read tx, @NotNull @ValidLocationURI String uri)", "full_signature": "private Optional<RpkiRepository> findRsyncParentRepository(Tx.Read tx, @NotNull @ValidLocationURI String uri)", "class_method_signature": "RpkiRepositoriesStore.findRsyncParentRepository(Tx.Read tx, @NotNull @ValidLocationURI String uri)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Tx.Write tx, RpkiRepository rpkiRepository)", "modifiers": "@Override public", "return": "void", "signature": "void update(Tx.Write tx, RpkiRepository rpkiRepository)", "full_signature": "@Override public void update(Tx.Write tx, RpkiRepository rpkiRepository)", "class_method_signature": "RpkiRepositoriesStore.update(Tx.Write tx, RpkiRepository rpkiRepository)", "testcase": false, "constructor": false}, {"identifier": "findByURI", "parameters": "(Tx.Read tx, String uri)", "modifiers": "@Override public", "return": "Optional<RpkiRepository>", "signature": "Optional<RpkiRepository> findByURI(Tx.Read tx, String uri)", "full_signature": "@Override public Optional<RpkiRepository> findByURI(Tx.Read tx, String uri)", "class_method_signature": "RpkiRepositoriesStore.findByURI(Tx.Read tx, String uri)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Tx.Read tx, Key id)", "modifiers": "@Override public", "return": "Optional<RpkiRepository>", "signature": "Optional<RpkiRepository> get(Tx.Read tx, Key id)", "full_signature": "@Override public Optional<RpkiRepository> get(Tx.Read tx, Key id)", "class_method_signature": "RpkiRepositoriesStore.get(Tx.Read tx, Key id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                                          boolean hideChildrenOfDownloadedParent,\n                                          SearchTerm searchTerm, Sorting sorting, Paging paging)", "modifiers": "@Override public", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                                          boolean hideChildrenOfDownloadedParent,\n                                          SearchTerm searchTerm, Sorting sorting, Paging paging)", "full_signature": "@Override public Stream<RpkiRepository> findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                                          boolean hideChildrenOfDownloadedParent,\n                                          SearchTerm searchTerm, Sorting sorting, Paging paging)", "class_method_signature": "RpkiRepositoriesStore.findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                                          boolean hideChildrenOfDownloadedParent,\n                                          SearchTerm searchTerm, Sorting sorting, Paging paging)", "testcase": false, "constructor": false}, {"identifier": "applyFiltered", "parameters": "(Tx.Read tx,\n                                                 RpkiRepository.Status optionalStatus,\n                                                 Key taId, boolean hideChildrenOfDownloadedParent,\n                                                 SearchTerm searchTerm)", "modifiers": "private", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> applyFiltered(Tx.Read tx,\n                                                 RpkiRepository.Status optionalStatus,\n                                                 Key taId, boolean hideChildrenOfDownloadedParent,\n                                                 SearchTerm searchTerm)", "full_signature": "private Stream<RpkiRepository> applyFiltered(Tx.Read tx,\n                                                 RpkiRepository.Status optionalStatus,\n                                                 Key taId, boolean hideChildrenOfDownloadedParent,\n                                                 SearchTerm searchTerm)", "class_method_signature": "RpkiRepositoriesStore.applyFiltered(Tx.Read tx,\n                                                 RpkiRepository.Status optionalStatus,\n                                                 Key taId, boolean hideChildrenOfDownloadedParent,\n                                                 SearchTerm searchTerm)", "testcase": false, "constructor": false}, {"identifier": "applySorting", "parameters": "(Stream<RpkiRepository> stream, Sorting sorting)", "modifiers": "private", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> applySorting(Stream<RpkiRepository> stream, Sorting sorting)", "full_signature": "private Stream<RpkiRepository> applySorting(Stream<RpkiRepository> stream, Sorting sorting)", "class_method_signature": "RpkiRepositoriesStore.applySorting(Stream<RpkiRepository> stream, Sorting sorting)", "testcase": false, "constructor": false}, {"identifier": "applyPaged", "parameters": "(Stream<RpkiRepository> stream, Paging paging)", "modifiers": "private", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> applyPaged(Stream<RpkiRepository> stream, Paging paging)", "full_signature": "private Stream<RpkiRepository> applyPaged(Stream<RpkiRepository> stream, Paging paging)", "class_method_signature": "RpkiRepositoriesStore.applyPaged(Stream<RpkiRepository> stream, Paging paging)", "testcase": false, "constructor": false}, {"identifier": "countAll", "parameters": "(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "modifiers": "@Override public", "return": "long", "signature": "long countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "full_signature": "@Override public long countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "class_method_signature": "RpkiRepositoriesStore.countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId)", "modifiers": "@Override public", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId)", "full_signature": "@Override public Stream<RpkiRepository> findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId)", "class_method_signature": "RpkiRepositoriesStore.findAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Tx.Read tx, Key taId)", "modifiers": "@Override public", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findAll(Tx.Read tx, Key taId)", "full_signature": "@Override public Stream<RpkiRepository> findAll(Tx.Read tx, Key taId)", "class_method_signature": "RpkiRepositoriesStore.findAll(Tx.Read tx, Key taId)", "testcase": false, "constructor": false}, {"identifier": "countByStatus", "parameters": "(Tx.Read tx, Key taId, boolean hideChildrenOfDownloadedParent)", "modifiers": "@Override public", "return": "Map<RpkiRepository.Status, Long>", "signature": "Map<RpkiRepository.Status, Long> countByStatus(Tx.Read tx, Key taId, boolean hideChildrenOfDownloadedParent)", "full_signature": "@Override public Map<RpkiRepository.Status, Long> countByStatus(Tx.Read tx, Key taId, boolean hideChildrenOfDownloadedParent)", "class_method_signature": "RpkiRepositoriesStore.countByStatus(Tx.Read tx, Key taId, boolean hideChildrenOfDownloadedParent)", "testcase": false, "constructor": false}, {"identifier": "findRsyncRepositories", "parameters": "(Tx.Read tx)", "modifiers": "@Override public", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findRsyncRepositories(Tx.Read tx)", "full_signature": "@Override public Stream<RpkiRepository> findRsyncRepositories(Tx.Read tx)", "class_method_signature": "RpkiRepositoriesStore.findRsyncRepositories(Tx.Read tx)", "testcase": false, "constructor": false}, {"identifier": "findRrdpRepositories", "parameters": "(Tx.Read tx)", "modifiers": "@Override public", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findRrdpRepositories(Tx.Read tx)", "full_signature": "@Override public Stream<RpkiRepository> findRrdpRepositories(Tx.Read tx)", "class_method_signature": "RpkiRepositoriesStore.findRrdpRepositories(Tx.Read tx)", "testcase": false, "constructor": false}, {"identifier": "findRepositoriesByPredicate", "parameters": "(Tx.Read tx, Predicate<RpkiRepository> p)", "modifiers": "private", "return": "Stream<RpkiRepository>", "signature": "Stream<RpkiRepository> findRepositoriesByPredicate(Tx.Read tx, Predicate<RpkiRepository> p)", "full_signature": "private Stream<RpkiRepository> findRepositoriesByPredicate(Tx.Read tx, Predicate<RpkiRepository> p)", "class_method_signature": "RpkiRepositoriesStore.findRepositoriesByPredicate(Tx.Read tx, Predicate<RpkiRepository> p)", "testcase": false, "constructor": false}, {"identifier": "removeAllForTrustAnchor", "parameters": "(Tx.Write tx, TrustAnchor trustAnchor)", "modifiers": "@Override public", "return": "void", "signature": "void removeAllForTrustAnchor(Tx.Write tx, TrustAnchor trustAnchor)", "full_signature": "@Override public void removeAllForTrustAnchor(Tx.Write tx, TrustAnchor trustAnchor)", "class_method_signature": "RpkiRepositoriesStore.removeAllForTrustAnchor(Tx.Write tx, TrustAnchor trustAnchor)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Tx.Write tx, Key key)", "modifiers": "@Override public", "return": "void", "signature": "void remove(Tx.Write tx, Key key)", "full_signature": "@Override public void remove(Tx.Write tx, Key key)", "class_method_signature": "RpkiRepositoriesStore.remove(Tx.Write tx, Key key)", "testcase": false, "constructor": false}, {"identifier": "findByTrustAnchor", "parameters": "(Tx.Read tx, Key key)", "modifiers": "@Override public", "return": "Collection<RpkiRepository>", "signature": "Collection<RpkiRepository> findByTrustAnchor(Tx.Read tx, Key key)", "full_signature": "@Override public Collection<RpkiRepository> findByTrustAnchor(Tx.Read tx, Key key)", "class_method_signature": "RpkiRepositoriesStore.findByTrustAnchor(Tx.Read tx, Key key)", "testcase": false, "constructor": false}, {"identifier": "deleteUnreferencedRepositories", "parameters": "(Tx.Write tx, InstantWithoutNanos unreferencedSince)", "modifiers": "@Override public", "return": "long", "signature": "long deleteUnreferencedRepositories(Tx.Write tx, InstantWithoutNanos unreferencedSince)", "full_signature": "@Override public long deleteUnreferencedRepositories(Tx.Write tx, InstantWithoutNanos unreferencedSince)", "class_method_signature": "RpkiRepositoriesStore.deleteUnreferencedRepositories(Tx.Write tx, InstantWithoutNanos unreferencedSince)", "testcase": false, "constructor": false}, {"identifier": "ixMap", "parameters": "()", "modifiers": "@Override protected", "return": "IxMap<RpkiRepository>", "signature": "IxMap<RpkiRepository> ixMap()", "full_signature": "@Override protected IxMap<RpkiRepository> ixMap()", "class_method_signature": "RpkiRepositoriesStore.ixMap()", "testcase": false, "constructor": false}], "file": "rpki-validator/src/main/java/net/ripe/rpki/validator3/storage/stores/impl/RpkiRepositoriesStore.java"}, "focal_method": {"identifier": "countAll", "parameters": "(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm) {\n        return applyFiltered(tx, optionalStatus, taId, hideChildrenOfDownloadedParent, searchTerm).count();\n    }", "signature": "long countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "full_signature": "@Override public long countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "class_method_signature": "RpkiRepositoriesStore.countAll(Tx.Read tx, RpkiRepository.Status optionalStatus, Key taId,\n                         boolean hideChildrenOfDownloadedParent, SearchTerm searchTerm)", "testcase": false, "constructor": false, "invocations": ["count", "applyFiltered"]}, "repository": {"repo_id": 104217624, "url": "https://github.com/RIPE-NCC/rpki-validator-3", "stars": 32, "created": "9/20/2017 1:15:05 PM +00:00", "updates": "2020-01-27T10:48:38+00:00", "fork": "False", "license": "licensed"}}