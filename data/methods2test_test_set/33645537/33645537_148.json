{"test_class": {"identifier": "FindMinNumberAtPositionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FindMinNumberAtPosition findMinNumberAtPosition;", "modifier": "private", "type": "FindMinNumberAtPosition", "declarator": "findMinNumberAtPosition", "var_name": "findMinNumberAtPosition"}], "file": "algs/src/test/java/com/github/pedrovgs/problem44/FindMinNumberAtPositionTest.java"}, "test_case": {"identifier": "shouldFindMinNumberAtPosition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldFindMinNumberAtPosition() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(8);\n    BinaryNode<Integer> n3 = new BinaryNode<Integer>(3);\n    BinaryNode<Integer> n10 = new BinaryNode<Integer>(10);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    BinaryNode<Integer> n6 = new BinaryNode<Integer>(6);\n    BinaryNode<Integer> n14 = new BinaryNode<Integer>(14);\n    BinaryNode<Integer> n4 = new BinaryNode<Integer>(4);\n    BinaryNode<Integer> n7 = new BinaryNode<Integer>(7);\n    BinaryNode<Integer> n13 = new BinaryNode<Integer>(13);\n\n    root.setLeft(n3);\n    root.setRight(n10);\n    n3.setLeft(n1);\n    n3.setRight(n6);\n    n6.setLeft(n4);\n    n6.setRight(n7);\n    n10.setRight(n14);\n    n14.setLeft(n13);\n\n    int result = findMinNumberAtPosition.find(root, 3);\n\n    assertEquals(4, result);\n  }", "signature": "void shouldFindMinNumberAtPosition()", "full_signature": "@Test public void shouldFindMinNumberAtPosition()", "class_method_signature": "FindMinNumberAtPositionTest.shouldFindMinNumberAtPosition()", "testcase": true, "constructor": false, "invocations": ["setLeft", "setRight", "setLeft", "setRight", "setLeft", "setRight", "setRight", "setLeft", "find", "assertEquals"]}, "focal_class": {"identifier": "FindMinNumberAtPosition", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BinaryTreeInOrder inOrder;", "modifier": "private final", "type": "BinaryTreeInOrder", "declarator": "inOrder", "var_name": "inOrder"}], "methods": [{"identifier": "FindMinNumberAtPosition", "parameters": "()", "modifiers": "public", "return": "", "signature": " FindMinNumberAtPosition()", "full_signature": "public  FindMinNumberAtPosition()", "class_method_signature": "FindMinNumberAtPosition.FindMinNumberAtPosition()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "public", "return": "Integer", "signature": "Integer find(BinaryNode<Integer> root, int position)", "full_signature": "public Integer find(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.find(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false}, {"identifier": "getOrderedElements", "parameters": "(BinaryNode root)", "modifiers": "private", "return": "List<BinaryNode<Integer>>", "signature": "List<BinaryNode<Integer>> getOrderedElements(BinaryNode root)", "full_signature": "private List<BinaryNode<Integer>> getOrderedElements(BinaryNode root)", "class_method_signature": "FindMinNumberAtPosition.getOrderedElements(BinaryNode root)", "testcase": false, "constructor": false}, {"identifier": "validatePosition", "parameters": "(int position, List<BinaryNode<Integer>> orderedElements)", "modifiers": "private", "return": "void", "signature": "void validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "full_signature": "private void validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "class_method_signature": "FindMinNumberAtPosition.validatePosition(int position, List<BinaryNode<Integer>> orderedElements)", "testcase": false, "constructor": false}, {"identifier": "validateInputData", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "private", "return": "void", "signature": "void validateInputData(BinaryNode<Integer> root, int position)", "full_signature": "private void validateInputData(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.validateInputData(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem44/FindMinNumberAtPosition.java"}, "focal_method": {"identifier": "find", "parameters": "(BinaryNode<Integer> root, int position)", "modifiers": "public", "return": "Integer", "body": "public Integer find(BinaryNode<Integer> root, int position) {\n    validateInputData(root, position);\n    List<BinaryNode<Integer>> orderedElements = getOrderedElements(root);\n    validatePosition(position, orderedElements);\n    return orderedElements.get(position - 1).getData();\n  }", "signature": "Integer find(BinaryNode<Integer> root, int position)", "full_signature": "public Integer find(BinaryNode<Integer> root, int position)", "class_method_signature": "FindMinNumberAtPosition.find(BinaryNode<Integer> root, int position)", "testcase": false, "constructor": false, "invocations": ["validateInputData", "getOrderedElements", "validatePosition", "getData", "get"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}