{"test_class": {"identifier": "ApplicationLogListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/run/ApplicationLogListenerTest.java"}, "test_case": {"identifier": "onLogLineReceived", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void onLogLineReceived() {\n    LogcatListener listener = new TestApplicationLogListener(\"com.google.myapplication\", 24314);\n\n    Instant timestamp = Instant.parse(\"2018-04-03T20:27:49.161Z\");\n    LogCatHeader header = new LogCatHeader(LogLevel.INFO, 24314, 24314, \"com.google.myapplication\", \"MainActivity\", timestamp);\n\n    listener.onLogLineReceived(new LogCatMessage(header, \"Line 1\"));\n    listener.onLogLineReceived(new LogCatMessage(header, \"Line 2\"));\n    listener.onLogLineReceived(new LogCatMessage(header, \"Line 3\"));\n\n    Object expected = \"I/MainActivity: Line 1\\n\" +\n                      \"    Line 2\\n\" +\n                      \"    Line 3\\n\";\n\n    assertEquals(expected, listener.toString());\n  }", "signature": "void onLogLineReceived()", "full_signature": "@Test public void onLogLineReceived()", "class_method_signature": "ApplicationLogListenerTest.onLogLineReceived()", "testcase": true, "constructor": false, "invocations": ["parse", "onLogLineReceived", "onLogLineReceived", "onLogLineReceived", "assertEquals", "toString"]}, "focal_class": {"identifier": "ApplicationLogListener", "superclass": "", "interfaces": "implements AndroidLogcatService.LogcatListener", "fields": [{"original_string": "@Nullable private LogCatHeader myActiveHeader;", "modifier": "@Nullable private", "type": "LogCatHeader", "declarator": "myActiveHeader", "var_name": "myActiveHeader"}, {"original_string": "@NotNull private final String myPackageName;", "modifier": "@NotNull private final", "type": "String", "declarator": "myPackageName", "var_name": "myPackageName"}, {"original_string": "private final int myPid;", "modifier": "private final", "type": "int", "declarator": "myPid", "var_name": "myPid"}], "methods": [{"identifier": "ApplicationLogListener", "parameters": "(@NotNull String packageName, int pid)", "modifiers": "public", "return": "", "signature": " ApplicationLogListener(@NotNull String packageName, int pid)", "full_signature": "public  ApplicationLogListener(@NotNull String packageName, int pid)", "class_method_signature": "ApplicationLogListener.ApplicationLogListener(@NotNull String packageName, int pid)", "testcase": false, "constructor": true}, {"identifier": "onLogLineReceived", "parameters": "(@NotNull LogCatMessage line)", "modifiers": "@Override public", "return": "void", "signature": "void onLogLineReceived(@NotNull LogCatMessage line)", "full_signature": "@Override public void onLogLineReceived(@NotNull LogCatMessage line)", "class_method_signature": "ApplicationLogListener.onLogLineReceived(@NotNull LogCatMessage line)", "testcase": false, "constructor": false}, {"identifier": "formatLogLine", "parameters": "(@NotNull LogCatMessage line)", "modifiers": "protected abstract", "return": "String", "signature": "String formatLogLine(@NotNull LogCatMessage line)", "full_signature": "protected abstract String formatLogLine(@NotNull LogCatMessage line)", "class_method_signature": "ApplicationLogListener.formatLogLine(@NotNull LogCatMessage line)", "testcase": false, "constructor": false}, {"identifier": "notifyTextAvailable", "parameters": "(@NotNull String message, @NotNull Key key)", "modifiers": "protected abstract", "return": "void", "signature": "void notifyTextAvailable(@NotNull String message, @NotNull Key key)", "full_signature": "protected abstract void notifyTextAvailable(@NotNull String message, @NotNull Key key)", "class_method_signature": "ApplicationLogListener.notifyTextAvailable(@NotNull String message, @NotNull Key key)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/ApplicationLogListener.java"}, "focal_method": {"identifier": "onLogLineReceived", "parameters": "(@NotNull LogCatMessage line)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void onLogLineReceived(@NotNull LogCatMessage line) {\n    if (!myPackageName.equals(line.getHeader().getAppName()) || myPid != line.getHeader().getPid()) {\n      myActiveHeader = null;\n      return;\n    }\n\n    String message;\n    if (!line.getHeader().equals(myActiveHeader)) {\n      myActiveHeader = line.getHeader();\n      message = formatLogLine(line);\n    }\n    else {\n      message = AndroidLogcatFormatter.CONTINUATION_INDENT + line.getMessage();\n    }\n\n    Key key = AndroidLogcatUtils.getProcessOutputType(myActiveHeader.getLogLevel());\n    notifyTextAvailable(message + \"\\n\", key);\n  }", "signature": "void onLogLineReceived(@NotNull LogCatMessage line)", "full_signature": "@Override public void onLogLineReceived(@NotNull LogCatMessage line)", "class_method_signature": "ApplicationLogListener.onLogLineReceived(@NotNull LogCatMessage line)", "testcase": false, "constructor": false, "invocations": ["equals", "getAppName", "getHeader", "getPid", "getHeader", "equals", "getHeader", "getHeader", "formatLogLine", "getMessage", "getProcessOutputType", "getLogLevel", "notifyTextAvailable"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}