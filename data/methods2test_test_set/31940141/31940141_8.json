{"test_class": {"identifier": "DebugGeneratorsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STUB_CLASSNAME = \"SimpleStub\";", "modifier": "private static final", "type": "String", "declarator": "STUB_CLASSNAME = \"SimpleStub\"", "var_name": "STUB_CLASSNAME"}, {"original_string": "private static final String STUB_FILENAME = STUB_CLASSNAME + \".class\";", "modifier": "private static final", "type": "String", "declarator": "STUB_FILENAME = STUB_CLASSNAME + \".class\"", "var_name": "STUB_FILENAME"}, {"original_string": "private static final String ZIP_RESOURCE_PATH = STUB_CLASSNAME + \".zip\";", "modifier": "private static final", "type": "String", "declarator": "ZIP_RESOURCE_PATH = STUB_CLASSNAME + \".zip\"", "var_name": "ZIP_RESOURCE_PATH"}, {"original_string": "private static final String STUB_METHOD_NAME = \"fillMeIn\";", "modifier": "private static final", "type": "String", "declarator": "STUB_METHOD_NAME = \"fillMeIn\"", "var_name": "STUB_METHOD_NAME"}, {"original_string": "private ClassNode classNode;", "modifier": "private", "type": "ClassNode", "declarator": "classNode", "var_name": "classNode"}, {"original_string": "private MethodNode methodNode;", "modifier": "private", "type": "MethodNode", "declarator": "methodNode", "var_name": "methodNode"}], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/generators/DebugGeneratorsTest.java"}, "test_case": {"identifier": "mustNotCrashOnMarker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustNotCrashOnMarker() throws Exception {\n        // Augment signature\n        methodNode.desc = Type.getMethodDescriptor(Type.VOID_TYPE, new Type[] { });\n        \n        // Initialize variable table\n        VariableTable varTable = new VariableTable(classNode, methodNode);\n\n        methodNode.instructions\n                = merge(\n                        // test marker of each type\n                        debugMarker(MarkerType.NONE, \"marker1\"),\n                        debugMarker(MarkerType.CONSTANT, \"marker2\"),\n                        debugMarker(MarkerType.STDOUT, \"marker3\"),\n                        returnVoid()\n                );\n        \n        // Write to JAR file + load up in classloader -- then execute tests\n        try (URLClassLoader cl = createJarAndLoad(classNode)) {\n            Object obj = cl.loadClass(STUB_CLASSNAME).newInstance();\n            MethodUtils.invokeMethod(obj, STUB_METHOD_NAME);\n        }\n    }", "signature": "void mustNotCrashOnMarker()", "full_signature": "@Test public void mustNotCrashOnMarker()", "class_method_signature": "DebugGeneratorsTest.mustNotCrashOnMarker()", "testcase": true, "constructor": false, "invocations": ["getMethodDescriptor", "merge", "debugMarker", "debugMarker", "debugMarker", "returnVoid", "createJarAndLoad", "newInstance", "loadClass", "invokeMethod"]}, "focal_class": {"identifier": "DebugGenerators", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DebugGenerators", "parameters": "()", "modifiers": "private", "return": "", "signature": " DebugGenerators()", "full_signature": "private  DebugGenerators()", "class_method_signature": "DebugGenerators.DebugGenerators()", "testcase": false, "constructor": true}, {"identifier": "debugMarker", "parameters": "(MarkerType markerType, String text)", "modifiers": "public static", "return": "InsnList", "signature": "InsnList debugMarker(MarkerType markerType, String text)", "full_signature": "public static InsnList debugMarker(MarkerType markerType, String text)", "class_method_signature": "DebugGenerators.debugMarker(MarkerType markerType, String text)", "testcase": false, "constructor": false}, {"identifier": "debugPrint", "parameters": "(InsnList text)", "modifiers": "public static", "return": "InsnList", "signature": "InsnList debugPrint(InsnList text)", "full_signature": "public static InsnList debugPrint(InsnList text)", "class_method_signature": "DebugGenerators.debugPrint(InsnList text)", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/generators/DebugGenerators.java"}, "focal_method": {"identifier": "debugMarker", "parameters": "(MarkerType markerType, String text)", "modifiers": "public static", "return": "InsnList", "body": "public static InsnList debugMarker(MarkerType markerType, String text) {\n        Validate.notNull(markerType);\n        Validate.notNull(text);\n        \n        InsnList ret = new InsnList();\n        \n        switch (markerType) {\n            case NONE:\n                break;\n            case CONSTANT:\n                ret.add(new LdcInsnNode(text));\n                ret.add(new InsnNode(Opcodes.POP));\n                break;\n            case STDOUT:\n                ret.add(new FieldInsnNode(Opcodes.GETSTATIC, \"java/lang/System\", \"out\", \"Ljava/io/PrintStream;\"));\n                ret.add(new LdcInsnNode(text));\n                ret.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL, \"java/io/PrintStream\", \"println\", \"(Ljava/lang/String;)V\", false));\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        return ret;\n    }", "signature": "InsnList debugMarker(MarkerType markerType, String text)", "full_signature": "public static InsnList debugMarker(MarkerType markerType, String text)", "class_method_signature": "DebugGenerators.debugMarker(MarkerType markerType, String text)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "add", "add", "add", "add", "add"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}