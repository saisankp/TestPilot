{"test_class": {"identifier": "PasswordGeneratorPipeTest", "superclass": "extends PipeTestBase<PasswordGeneratorPipe>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordGeneratorPipeTest.java"}, "test_case": {"identifier": "testDoPipe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoPipe() throws Exception {\n        pipe.setLCharacters(\"abcd\");\n        pipe.setNumbers(\"12342\");\n        pipe.setUCharacters(\"ASDF\");\n        pipe.setSigns(\"!@#@\");\n        pipe.setNumOfDigits(3);\n        pipe.setNumOfLCharacters(4);\n        pipe.setNumOfUCharacters(2);\n        pipe.setNumOfSigns(2);\n        pipe.setUseSecureRandom(false);\n        pipe.configure();\n        PipeRunResult res = doPipe(pipe, \"pipey\", session);\n        assertEquals(11, res.getResult().asString().length());\n    }", "signature": "void testDoPipe()", "full_signature": "@Test public void testDoPipe()", "class_method_signature": "PasswordGeneratorPipeTest.testDoPipe()", "testcase": true, "constructor": false, "invocations": ["setLCharacters", "setNumbers", "setUCharacters", "setSigns", "setNumOfDigits", "setNumOfLCharacters", "setNumOfUCharacters", "setNumOfSigns", "setUseSecureRandom", "configure", "doPipe", "assertEquals", "length", "asString", "getResult"]}, "focal_class": {"identifier": "PasswordGeneratorPipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "private String lCharacters=\"abcdefghijklmnopqrstuvwxyz\";", "modifier": "private", "type": "String", "declarator": "lCharacters=\"abcdefghijklmnopqrstuvwxyz\"", "var_name": "lCharacters"}, {"original_string": "private String uCharacters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";", "modifier": "private", "type": "String", "declarator": "uCharacters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "var_name": "uCharacters"}, {"original_string": "private String numbers=\"0123456789\";", "modifier": "private", "type": "String", "declarator": "numbers=\"0123456789\"", "var_name": "numbers"}, {"original_string": "private String signs=\";:_%$#@!><\";", "modifier": "private", "type": "String", "declarator": "signs=\";:_%$#@!><\"", "var_name": "signs"}, {"original_string": "private SecureRandom random;", "modifier": "private", "type": "SecureRandom", "declarator": "random", "var_name": "random"}, {"original_string": "private boolean useSecureRandom = true;", "modifier": "private", "type": "boolean", "declarator": "useSecureRandom = true", "var_name": "useSecureRandom"}, {"original_string": "int numOfLCharacters=2;", "modifier": "", "type": "int", "declarator": "numOfLCharacters=2", "var_name": "numOfLCharacters"}, {"original_string": "int numOfUCharacters=2;", "modifier": "", "type": "int", "declarator": "numOfUCharacters=2", "var_name": "numOfUCharacters"}, {"original_string": "int numOfDigits=2;", "modifier": "", "type": "int", "declarator": "numOfDigits=2", "var_name": "numOfDigits"}, {"original_string": "int numOfSigns=2;", "modifier": "", "type": "int", "declarator": "numOfSigns=2", "var_name": "numOfSigns"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "PasswordGeneratorPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "PasswordGeneratorPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)", "modifiers": "protected", "return": "String", "signature": "String generate(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)", "full_signature": "protected String generate(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)", "class_method_signature": "PasswordGeneratorPipe.generate(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)", "testcase": false, "constructor": false}, {"identifier": "getRandomElementsOfString", "parameters": "(String input, int count)", "modifiers": "protected", "return": "String", "signature": "String getRandomElementsOfString(String input, int count)", "full_signature": "protected String getRandomElementsOfString(String input, int count)", "class_method_signature": "PasswordGeneratorPipe.getRandomElementsOfString(String input, int count)", "testcase": false, "constructor": false}, {"identifier": "garbleString", "parameters": "(String input)", "modifiers": "protected", "return": "String", "signature": "String garbleString(String input)", "full_signature": "protected String garbleString(String input)", "class_method_signature": "PasswordGeneratorPipe.garbleString(String input)", "testcase": false, "constructor": false}, {"identifier": "isUseSecureRandom", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUseSecureRandom()", "full_signature": "public boolean isUseSecureRandom()", "class_method_signature": "PasswordGeneratorPipe.isUseSecureRandom()", "testcase": false, "constructor": false}, {"identifier": "setUseSecureRandom", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"whether the securerandom algorithm is to be used (slower)\", \"true\"}) public", "return": "void", "signature": "void setUseSecureRandom(boolean b)", "full_signature": "@IbisDoc({\"whether the securerandom algorithm is to be used (slower)\", \"true\"}) public void setUseSecureRandom(boolean b)", "class_method_signature": "PasswordGeneratorPipe.setUseSecureRandom(boolean b)", "testcase": false, "constructor": false}, {"identifier": "getLCharacters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLCharacters()", "full_signature": "public String getLCharacters()", "class_method_signature": "PasswordGeneratorPipe.getLCharacters()", "testcase": false, "constructor": false}, {"identifier": "setLCharacters", "parameters": "(String lCharacters)", "modifiers": "@IbisDoc({\"the lowercase characters to use\", \"('a'..'z')\"}) public", "return": "void", "signature": "void setLCharacters(String lCharacters)", "full_signature": "@IbisDoc({\"the lowercase characters to use\", \"('a'..'z')\"}) public void setLCharacters(String lCharacters)", "class_method_signature": "PasswordGeneratorPipe.setLCharacters(String lCharacters)", "testcase": false, "constructor": false}, {"identifier": "getUCharacters", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUCharacters()", "full_signature": "public String getUCharacters()", "class_method_signature": "PasswordGeneratorPipe.getUCharacters()", "testcase": false, "constructor": false}, {"identifier": "setUCharacters", "parameters": "(String uCharacters)", "modifiers": "@IbisDoc({\"the uppercase characters to use\", \"('a'..'z')\"}) public", "return": "void", "signature": "void setUCharacters(String uCharacters)", "full_signature": "@IbisDoc({\"the uppercase characters to use\", \"('a'..'z')\"}) public void setUCharacters(String uCharacters)", "class_method_signature": "PasswordGeneratorPipe.setUCharacters(String uCharacters)", "testcase": false, "constructor": false}, {"identifier": "getNumbers", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNumbers()", "full_signature": "public String getNumbers()", "class_method_signature": "PasswordGeneratorPipe.getNumbers()", "testcase": false, "constructor": false}, {"identifier": "setNumbers", "parameters": "(String numbers)", "modifiers": "@IbisDoc({\"the numbers to use\", \"('0'..'9')\"}) public", "return": "void", "signature": "void setNumbers(String numbers)", "full_signature": "@IbisDoc({\"the numbers to use\", \"('0'..'9')\"}) public void setNumbers(String numbers)", "class_method_signature": "PasswordGeneratorPipe.setNumbers(String numbers)", "testcase": false, "constructor": false}, {"identifier": "getSigns", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSigns()", "full_signature": "public String getSigns()", "class_method_signature": "PasswordGeneratorPipe.getSigns()", "testcase": false, "constructor": false}, {"identifier": "setSigns", "parameters": "(String signs)", "modifiers": "@IbisDoc({\"the signs to use\", \"(;:_%$#@!&gt;&lt;)\"}) public", "return": "void", "signature": "void setSigns(String signs)", "full_signature": "@IbisDoc({\"the signs to use\", \"(;:_%$#@!&gt;&lt;)\"}) public void setSigns(String signs)", "class_method_signature": "PasswordGeneratorPipe.setSigns(String signs)", "testcase": false, "constructor": false}, {"identifier": "getNumOfLCharacters", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumOfLCharacters()", "full_signature": "public int getNumOfLCharacters()", "class_method_signature": "PasswordGeneratorPipe.getNumOfLCharacters()", "testcase": false, "constructor": false}, {"identifier": "getNumOfDigits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumOfDigits()", "full_signature": "public int getNumOfDigits()", "class_method_signature": "PasswordGeneratorPipe.getNumOfDigits()", "testcase": false, "constructor": false}, {"identifier": "getNumOfSigns", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumOfSigns()", "full_signature": "public int getNumOfSigns()", "class_method_signature": "PasswordGeneratorPipe.getNumOfSigns()", "testcase": false, "constructor": false}, {"identifier": "getNumOfUCharacters", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumOfUCharacters()", "full_signature": "public int getNumOfUCharacters()", "class_method_signature": "PasswordGeneratorPipe.getNumOfUCharacters()", "testcase": false, "constructor": false}, {"identifier": "setNumOfLCharacters", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the number of lowercase characters in the generated password\", \"2\"}) public", "return": "void", "signature": "void setNumOfLCharacters(int i)", "full_signature": "@IbisDoc({\"the number of lowercase characters in the generated password\", \"2\"}) public void setNumOfLCharacters(int i)", "class_method_signature": "PasswordGeneratorPipe.setNumOfLCharacters(int i)", "testcase": false, "constructor": false}, {"identifier": "setNumOfDigits", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the number of digits in the generated password\", \"2\"}) public", "return": "void", "signature": "void setNumOfDigits(int i)", "full_signature": "@IbisDoc({\"the number of digits in the generated password\", \"2\"}) public void setNumOfDigits(int i)", "class_method_signature": "PasswordGeneratorPipe.setNumOfDigits(int i)", "testcase": false, "constructor": false}, {"identifier": "setNumOfSigns", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the number of sign characters in the generated password\", \"2\"}) public", "return": "void", "signature": "void setNumOfSigns(int i)", "full_signature": "@IbisDoc({\"the number of sign characters in the generated password\", \"2\"}) public void setNumOfSigns(int i)", "class_method_signature": "PasswordGeneratorPipe.setNumOfSigns(int i)", "testcase": false, "constructor": false}, {"identifier": "setNumOfUCharacters", "parameters": "(int i)", "modifiers": "@IbisDoc({\"the number of uppercase characters in the generated password\", \"2\"}) public", "return": "void", "signature": "void setNumOfUCharacters(int i)", "full_signature": "@IbisDoc({\"the number of uppercase characters in the generated password\", \"2\"}) public void setNumOfUCharacters(int i)", "class_method_signature": "PasswordGeneratorPipe.setNumOfUCharacters(int i)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/PasswordGeneratorPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe (Message message, IPipeLineSession session) throws PipeRunException {\n\t\t\n\t\tString result;\n\t\t try {\n\t\t\t\t//generate password containing: 2 LC-letters, 2 UC-letters, 2 symbols and 2 numbers\n\t\t\t\tresult =  generate(getNumOfLCharacters(),getNumOfUCharacters(),getNumOfSigns(),getNumOfDigits());\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new PipeRunException(this, \"failed to generate password\",e);\n\t\t\t}\n\n\t\treturn new PipeRunResult(getForward(),result);\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "PasswordGeneratorPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["generate", "getNumOfLCharacters", "getNumOfUCharacters", "getNumOfSigns", "getNumOfDigits", "getForward"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}