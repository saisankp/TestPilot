{"test_class": {"identifier": "ListTelnetHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TelnetHandler list = new ListTelnetHandler();", "modifier": "private static", "type": "TelnetHandler", "declarator": "list = new ListTelnetHandler()", "var_name": "list"}, {"original_string": "private static String detailMethods;", "modifier": "private static", "type": "String", "declarator": "detailMethods", "var_name": "detailMethods"}, {"original_string": "private static String methodsName;", "modifier": "private static", "type": "String", "declarator": "methodsName", "var_name": "methodsName"}, {"original_string": "private Channel mockChannel;", "modifier": "private", "type": "Channel", "declarator": "mockChannel", "var_name": "mockChannel"}, {"original_string": "private Invoker<DemoService> mockInvoker;", "modifier": "private", "type": "Invoker<DemoService>", "declarator": "mockInvoker", "var_name": "mockInvoker"}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/ListTelnetHandlerTest.java"}, "test_case": {"identifier": "testListDetail", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testListDetail() throws RemotingException {\n        int port = NetUtils.getAvailablePort();\n        mockInvoker = mock(Invoker.class);\n        given(mockInvoker.getInterface()).willReturn(DemoService.class);\n        given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/demo\"));\n        given(mockInvoker.invoke(any(Invocation.class))).willReturn(new RpcResult(\"ok\"));\n        mockChannel = mock(Channel.class);\n        given(mockChannel.getAttribute(\"telnet.service\")).willReturn(null);\n\n        DubboProtocol.getDubboProtocol().export(mockInvoker);\n        String result = list.telnet(mockChannel, \"-l\");\n        assertEquals(\"com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService -> dubbo://127.0.0.1:\" + port + \"/demo\", result);\n    }", "signature": "void testListDetail()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testListDetail()", "class_method_signature": "ListTelnetHandlerTest.testListDetail()", "testcase": true, "constructor": false, "invocations": ["getAvailablePort", "mock", "willReturn", "given", "getInterface", "willReturn", "given", "getUrl", "valueOf", "willReturn", "given", "invoke", "any", "mock", "willReturn", "given", "getAttribute", "export", "getDubboProtocol", "telnet", "assertEquals"]}, "focal_class": {"identifier": "ListTelnetHandler", "superclass": "", "interfaces": "implements TelnetHandler", "fields": [], "methods": [{"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "ListTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/ListTelnetHandler.java"}, "focal_method": {"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String telnet(Channel channel, String message) {\n        StringBuilder buf = new StringBuilder();\n        String service = null;\n        boolean detail = false;\n        if (message.length() > 0) {\n            String[] parts = message.split(\"\\\\s+\");\n            for (String part : parts) {\n                if (\"-l\".equals(part)) {\n                    detail = true;\n                } else {\n                    if (service != null && service.length() > 0) {\n                        return \"Invaild parameter \" + part;\n                    }\n                    service = part;\n                }\n            }\n        } else {\n            service = (String) channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n            if (service != null && service.length() > 0) {\n                buf.append(\"Use default service \" + service + \".\\r\\n\");\n            }\n        }\n        if (service == null || service.length() == 0) {\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (buf.length() > 0) {\n                    buf.append(\"\\r\\n\");\n                }\n                buf.append(exporter.getInvoker().getInterface().getName());\n                if (detail) {\n                    buf.append(\" -> \");\n                    buf.append(exporter.getInvoker().getUrl());\n                }\n            }\n        } else {\n            Invoker<?> invoker = null;\n            for (Exporter<?> exporter : DubboProtocol.getDubboProtocol().getExporters()) {\n                if (service.equals(exporter.getInvoker().getInterface().getSimpleName())\n                        || service.equals(exporter.getInvoker().getInterface().getName())\n                        || service.equals(exporter.getInvoker().getUrl().getPath())) {\n                    invoker = exporter.getInvoker();\n                    break;\n                }\n            }\n            if (invoker != null) {\n                Method[] methods = invoker.getInterface().getMethods();\n                for (Method method : methods) {\n                    if (buf.length() > 0) {\n                        buf.append(\"\\r\\n\");\n                    }\n                    if (detail) {\n                        buf.append(ReflectUtils.getName(method));\n                    } else {\n                        buf.append(method.getName());\n                    }\n                }\n            } else {\n                buf.append(\"No such service \" + service);\n            }\n        }\n        return buf.toString();\n    }", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "ListTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false, "invocations": ["length", "split", "equals", "length", "getAttribute", "length", "append", "length", "getExporters", "getDubboProtocol", "length", "append", "append", "getName", "getInterface", "getInvoker", "append", "append", "getUrl", "getInvoker", "getExporters", "getDubboProtocol", "equals", "getSimpleName", "getInterface", "getInvoker", "equals", "getName", "getInterface", "getInvoker", "equals", "getPath", "getUrl", "getInvoker", "getInvoker", "getMethods", "getInterface", "length", "append", "append", "getName", "append", "getName", "append", "toString"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}