{"test_class": {"identifier": "ShapefileReaderTest", "superclass": "extends GeoSparkTestBase", "interfaces": "", "fields": [{"original_string": "public static FileSystem fs;", "modifier": "public static", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}, {"original_string": "public static MiniDFSCluster hdfsCluster;", "modifier": "public static", "type": "MiniDFSCluster", "declarator": "hdfsCluster", "var_name": "hdfsCluster"}, {"original_string": "public static String hdfsURI;", "modifier": "public static", "type": "String", "declarator": "hdfsURI", "var_name": "hdfsURI"}], "file": "core/src/test/java/org/datasyslab/geospark/formatMapper/shapefileParser/shapes/ShapefileReaderTest.java"}, "test_case": {"identifier": "testReadToPolygonRDD", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadToPolygonRDD()\n            throws Exception\n    {\n        String inputLocation = getShapeFilePath(\"polygon\");\n        // load shape with geotool.shapefile\n        FeatureCollection<SimpleFeatureType, SimpleFeature> collection = loadFeatures(inputLocation);\n        FeatureIterator<SimpleFeature> features = collection.features();\n        ArrayList<String> featureTexts = new ArrayList<String>();\n        while (features.hasNext()) {\n            SimpleFeature feature = features.next();\n            Object geometry = feature.getDefaultGeometry();\n            if (geometry instanceof MultiPolygon) {\n                MultiPolygon multiPolygon = (MultiPolygon) geometry;\n                if (multiPolygon.getNumGeometries() == 1) {\n                    geometry = multiPolygon.getGeometryN(0);\n                }\n            }\n            featureTexts.add(String.valueOf(geometry));\n        }\n        features.close();\n        final Iterator<String> featureIterator = featureTexts.iterator();\n\n        PolygonRDD spatialRDD = ShapefileReader.readToPolygonRDD(sc, inputLocation);\n        SpatialRDD<Geometry> geomeryRDD = ShapefileReader.readToGeometryRDD(sc, inputLocation);\n\n        long count = RangeQuery.SpatialRangeQuery(spatialRDD, new Envelope(-180, 180, -90, 90), false, false).count();\n        assertEquals(spatialRDD.rawSpatialRDD.count(), count);\n\n        for (Geometry geometry : geomeryRDD.rawSpatialRDD.collect()) {\n            assertEquals(featureIterator.next(), geometry.toText());\n        }\n    }", "signature": "void testReadToPolygonRDD()", "full_signature": "@Test public void testReadToPolygonRDD()", "class_method_signature": "ShapefileReaderTest.testReadToPolygonRDD()", "testcase": true, "constructor": false, "invocations": ["getShapeFilePath", "loadFeatures", "features", "hasNext", "next", "getDefaultGeometry", "getNumGeometries", "getGeometryN", "add", "valueOf", "close", "iterator", "readToPolygonRDD", "readToGeometryRDD", "count", "SpatialRangeQuery", "assertEquals", "count", "collect", "assertEquals", "next", "toText"]}, "focal_class": {"identifier": "ShapeFileReader", "superclass": "extends RecordReader<ShapeKey, ShpRecord>", "interfaces": "", "fields": [{"original_string": "private ShapeKey recordKey = null;", "modifier": "private", "type": "ShapeKey", "declarator": "recordKey = null", "var_name": "recordKey"}, {"original_string": "private ShpRecord recordContent = null;", "modifier": "private", "type": "ShpRecord", "declarator": "recordContent = null", "var_name": "recordContent"}, {"original_string": "private FSDataInputStream shpInputStream = null;", "modifier": "private", "type": "FSDataInputStream", "declarator": "shpInputStream = null", "var_name": "shpInputStream"}, {"original_string": "ShpFileParser parser = null;", "modifier": "", "type": "ShpFileParser", "declarator": "parser = null", "var_name": "parser"}, {"original_string": "private int[] indexes;", "modifier": "private", "type": "int[]", "declarator": "indexes", "var_name": "indexes"}, {"original_string": "private boolean useIndex = false;", "modifier": "private", "type": "boolean", "declarator": "useIndex = false", "var_name": "useIndex"}, {"original_string": "private int indexId = 0;", "modifier": "private", "type": "int", "declarator": "indexId = 0", "var_name": "indexId"}], "methods": [{"identifier": "ShapeFileReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ShapeFileReader()", "full_signature": "public  ShapeFileReader()", "class_method_signature": "ShapeFileReader.ShapeFileReader()", "testcase": false, "constructor": true}, {"identifier": "ShapeFileReader", "parameters": "(int[] indexes)", "modifiers": "public", "return": "", "signature": " ShapeFileReader(int[] indexes)", "full_signature": "public  ShapeFileReader(int[] indexes)", "class_method_signature": "ShapeFileReader.ShapeFileReader(int[] indexes)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(InputSplit split, TaskAttemptContext context)", "modifiers": "public", "return": "void", "signature": "void initialize(InputSplit split, TaskAttemptContext context)", "full_signature": "public void initialize(InputSplit split, TaskAttemptContext context)", "class_method_signature": "ShapeFileReader.initialize(InputSplit split, TaskAttemptContext context)", "testcase": false, "constructor": false}, {"identifier": "nextKeyValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean nextKeyValue()", "full_signature": "public boolean nextKeyValue()", "class_method_signature": "ShapeFileReader.nextKeyValue()", "testcase": false, "constructor": false}, {"identifier": "getCurrentKey", "parameters": "()", "modifiers": "public", "return": "ShapeKey", "signature": "ShapeKey getCurrentKey()", "full_signature": "public ShapeKey getCurrentKey()", "class_method_signature": "ShapeFileReader.getCurrentKey()", "testcase": false, "constructor": false}, {"identifier": "getCurrentValue", "parameters": "()", "modifiers": "public", "return": "ShpRecord", "signature": "ShpRecord getCurrentValue()", "full_signature": "public ShpRecord getCurrentValue()", "class_method_signature": "ShapeFileReader.getCurrentValue()", "testcase": false, "constructor": false}, {"identifier": "getProgress", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getProgress()", "full_signature": "public float getProgress()", "class_method_signature": "ShapeFileReader.getProgress()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ShapeFileReader.close()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/datasyslab/geospark/formatMapper/shapefileParser/shapes/ShapeFileReader.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close()\n            throws IOException\n    {\n        shpInputStream.close();\n    }", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ShapeFileReader.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 34533675, "url": "https://github.com/DataSystemsLab/GeoSpark", "language": "Java", "is_fork": false, "fork_count": 357, "stargazer_count": 703, "size": 459019, "license": "licensed"}}