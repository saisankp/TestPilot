{"test_class": {"identifier": "RuleMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RuleMatcher ruleMatcher;", "modifier": "private", "type": "RuleMatcher", "declarator": "ruleMatcher", "var_name": "ruleMatcher"}], "file": "checker/src/test/java/com/fooock/robotstxt/api/engine/RuleMatcherTest.java"}, "test_case": {"identifier": "testNoGroupsFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoGroupsFound() throws IOException {\n        InputStream stream = this.getClass().getClassLoader().getResourceAsStream(\"empty-group.json\");\n        String content = TestUtils.readFile(stream);\n\n        assertTrue(ruleMatcher.canCrawl(\"*\", \"/\", content));\n        assertTrue(ruleMatcher.canCrawl(\"abc\", \"/\", content));\n        assertTrue(ruleMatcher.canCrawl(\"abc\", \"/test\", content));\n    }", "signature": "void testNoGroupsFound()", "full_signature": "@Test public void testNoGroupsFound()", "class_method_signature": "RuleMatcherTest.testNoGroupsFound()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "readFile", "assertTrue", "canCrawl", "assertTrue", "canCrawl", "assertTrue", "canCrawl"]}, "focal_class": {"identifier": "RuleMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ALLOW = \"allow\";", "modifier": "private static final", "type": "String", "declarator": "ALLOW = \"allow\"", "var_name": "ALLOW"}, {"original_string": "private static final String DISALLOW = \"disallow\";", "modifier": "private static final", "type": "String", "declarator": "DISALLOW = \"disallow\"", "var_name": "DISALLOW"}, {"original_string": "private static final String ALL = \"*\";", "modifier": "private static final", "type": "String", "declarator": "ALL = \"*\"", "var_name": "ALL"}, {"original_string": "private static final String DOLLAR = \"$\";", "modifier": "private static final", "type": "String", "declarator": "DOLLAR = \"$\"", "var_name": "DOLLAR"}, {"original_string": "private final Gson gson;", "modifier": "private final", "type": "Gson", "declarator": "gson", "var_name": "gson"}, {"original_string": "private final Type type = new TypeToken<Content>() {\n    }.getType();", "modifier": "private final", "type": "Type", "declarator": "type = new TypeToken<Content>() {\n    }.getType()", "var_name": "type"}], "methods": [{"identifier": "canCrawl", "parameters": "(String agent, String path, String rules)", "modifiers": "public", "return": "boolean", "signature": "boolean canCrawl(String agent, String path, String rules)", "full_signature": "public boolean canCrawl(String agent, String path, String rules)", "class_method_signature": "RuleMatcher.canCrawl(String agent, String path, String rules)", "testcase": false, "constructor": false}, {"identifier": "noneMatch", "parameters": "(String agent, List<String> userAgents)", "modifiers": "private", "return": "boolean", "signature": "boolean noneMatch(String agent, List<String> userAgents)", "full_signature": "private boolean noneMatch(String agent, List<String> userAgents)", "class_method_signature": "RuleMatcher.noneMatch(String agent, List<String> userAgents)", "testcase": false, "constructor": false}, {"identifier": "checkGroupRules", "parameters": "(Group group, String path)", "modifiers": "private", "return": "boolean", "signature": "boolean checkGroupRules(Group group, String path)", "full_signature": "private boolean checkGroupRules(Group group, String path)", "class_method_signature": "RuleMatcher.checkGroupRules(Group group, String path)", "testcase": false, "constructor": false}, {"identifier": "matchesRule", "parameters": "(String path, String directive, Rule rule)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesRule(String path, String directive, Rule rule)", "full_signature": "private boolean matchesRule(String path, String directive, Rule rule)", "class_method_signature": "RuleMatcher.matchesRule(String path, String directive, Rule rule)", "testcase": false, "constructor": false}, {"identifier": "checkRulePath", "parameters": "(String path, String directive, Rule rule)", "modifiers": "private", "return": "boolean", "signature": "boolean checkRulePath(String path, String directive, Rule rule)", "full_signature": "private boolean checkRulePath(String path, String directive, Rule rule)", "class_method_signature": "RuleMatcher.checkRulePath(String path, String directive, Rule rule)", "testcase": false, "constructor": false}], "file": "checker/src/main/java/com/fooock/robotstxt/api/engine/RuleMatcher.java"}, "focal_method": {"identifier": "canCrawl", "parameters": "(String agent, String path, String rules)", "modifiers": "public", "return": "boolean", "body": "public boolean canCrawl(String agent, String path, String rules) {\n        // Fixes #29\n        if (path == null || path.isEmpty()) path = \"/\";\n\n        // if path is /robots.txt then allow always\n        if (\"/robots.txt\".equals(path)) return true;\n\n        Content content = gson.fromJson(rules, type);\n        List<Group> groups = content.getGroups();\n\n        // if no groups found, then allow all\n        if (groups.isEmpty()) return true;\n\n        List<String> userAgents = groups.stream()\n                .flatMap(group -> group.getUserAgents().stream().map(String::toLowerCase))\n                .collect(Collectors.toList());\n\n        if (userAgents.isEmpty()) return true;\n        if (userAgents.parallelStream().noneMatch(ALL::equals) && ALL.equals(agent)) return true;\n\n        agent = agent.toLowerCase();\n        if (noneMatch(agent, userAgents) && noneMatch(ALL, userAgents) && !ALL.equals(agent)) return true;\n\n        // Flag used to check if the given user agent match any saved agent.\n        // Note that if no user agent match, it will use * as base user agent\n        boolean foundUserAgent = false;\n\n        for (Group group : groups) {\n            // Directive priority is decided using length, that is, longest first\n            Collections.sort(group.getRules());\n\n            for (String ua : group.getUserAgents()) {\n                // Check if user agent match. User agent case is ignored as\n                // google documentation says\n                if (agent.contains(ua.toLowerCase())) {\n                    foundUserAgent = true;\n                    // If rules check, then allow\n                    if (checkGroupRules(group, path)) return true;\n                }\n            }\n\n            // Check with default user agent (*)\n            if (!foundUserAgent) {\n                for (String ua : group.getUserAgents()) {\n                    // Continue loop until * found\n                    if (!ALL.equals(ua)) continue;\n                    if (checkGroupRules(group, path)) return true;\n                }\n            }\n        }\n        return false;\n    }", "signature": "boolean canCrawl(String agent, String path, String rules)", "full_signature": "public boolean canCrawl(String agent, String path, String rules)", "class_method_signature": "RuleMatcher.canCrawl(String agent, String path, String rules)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "equals", "fromJson", "getGroups", "isEmpty", "collect", "flatMap", "stream", "map", "stream", "getUserAgents", "toList", "isEmpty", "noneMatch", "parallelStream", "equals", "toLowerCase", "noneMatch", "noneMatch", "equals", "sort", "getRules", "getUserAgents", "contains", "toLowerCase", "checkGroupRules", "getUserAgents", "equals", "checkGroupRules"]}, "repository": {"repo_id": 192201753, "url": "https://github.com/fooock/robots.txt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 2005, "license": "licensed"}}