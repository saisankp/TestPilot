{"test_class": {"identifier": "PostgresStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DB_URL = \"jdbc:h2:mem:test_mem;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false\";", "modifier": "private static final", "type": "String", "declarator": "DB_URL = \"jdbc:h2:mem:test_mem;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false\"", "var_name": "DB_URL"}], "file": "src/server/src/test/java/io/cassandrareaper/storage/PostgresStorageTest.java"}, "test_case": {"identifier": "testTakeLead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTakeLead() {\n    DBI dbi = new DBI(DB_URL);\n    UUID reaperInstanceId = UUID.randomUUID();\n    PostgresStorage storage = new PostgresStorage(reaperInstanceId, dbi);\n    Assertions.assertThat(storage.isStorageConnected()).isTrue();\n\n    Handle handle = dbi.open();\n    handle.execute(\"DELETE from leader\");\n\n    int numEntries = 5;\n    Set<UUID> leaderIds = new HashSet<>();\n    for (int i = 0; i < numEntries; i++) {\n      UUID msbLeaderId = UuidUtil.fromSequenceId(UuidUtil.toSequenceId(UUID.randomUUID()));\n      leaderIds.add(msbLeaderId);\n    }\n\n    // insert all five leader entries\n    for (UUID leaderId : leaderIds) {\n      boolean result = storage.takeLead(leaderId);\n      Assertions.assertThat(result).isEqualTo(true);\n    }\n\n    // make sure fetched leaders has all the inserted leaders\n    List<UUID> fetchedLeaderIds = storage.getLeaders();\n    for (UUID fetchedLeaderId : fetchedLeaderIds) {\n      Assertions.assertThat(leaderIds.contains(fetchedLeaderId)).isTrue();\n    }\n  }", "signature": "void testTakeLead()", "full_signature": "@Test public void testTakeLead()", "class_method_signature": "PostgresStorageTest.testTakeLead()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "isTrue", "assertThat", "isStorageConnected", "open", "execute", "fromSequenceId", "toSequenceId", "randomUUID", "add", "takeLead", "isEqualTo", "assertThat", "getLeaders", "isTrue", "assertThat", "contains"]}, "focal_class": {"identifier": "PostgresStorage", "superclass": "", "interfaces": "implements IStorage, IDistributedStorage", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PostgresStorage.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PostgresStorage.class)", "var_name": "LOG"}, {"original_string": "private static final int DEFAULT_LEADER_TIMEOUT_MIN = 10;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_LEADER_TIMEOUT_MIN = 10", "var_name": "DEFAULT_LEADER_TIMEOUT_MIN"}, {"original_string": "private static final int DEFAULT_REAPER_TIMEOUT_MIN = 3;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_REAPER_TIMEOUT_MIN = 3", "var_name": "DEFAULT_REAPER_TIMEOUT_MIN"}, {"original_string": "private static final int DEFAULT_METRICS_TIMEOUT_MIN = 14400;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_METRICS_TIMEOUT_MIN = 14400", "var_name": "DEFAULT_METRICS_TIMEOUT_MIN"}, {"original_string": "private static final int DEFAULT_NODE_OPERATIONS_TIMEOUT_MIN = 5;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_NODE_OPERATIONS_TIMEOUT_MIN = 5", "var_name": "DEFAULT_NODE_OPERATIONS_TIMEOUT_MIN"}, {"original_string": "protected final DBI jdbi;", "modifier": "protected final", "type": "DBI", "declarator": "jdbi", "var_name": "jdbi"}, {"original_string": "private final Duration leaderTimeout;", "modifier": "private final", "type": "Duration", "declarator": "leaderTimeout", "var_name": "leaderTimeout"}, {"original_string": "private final Duration reaperTimeout;", "modifier": "private final", "type": "Duration", "declarator": "reaperTimeout", "var_name": "reaperTimeout"}, {"original_string": "private final Duration metricsTimeout;", "modifier": "private final", "type": "Duration", "declarator": "metricsTimeout", "var_name": "metricsTimeout"}, {"original_string": "private final Duration nodeOperationsTimeout;", "modifier": "private final", "type": "Duration", "declarator": "nodeOperationsTimeout", "var_name": "nodeOperationsTimeout"}, {"original_string": "private final UUID reaperInstanceId;", "modifier": "private final", "type": "UUID", "declarator": "reaperInstanceId", "var_name": "reaperInstanceId"}], "methods": [{"identifier": "PostgresStorage", "parameters": "(UUID reaperInstanceId, DBI jdbi)", "modifiers": "public", "return": "", "signature": " PostgresStorage(UUID reaperInstanceId, DBI jdbi)", "full_signature": "public  PostgresStorage(UUID reaperInstanceId, DBI jdbi)", "class_method_signature": "PostgresStorage.PostgresStorage(UUID reaperInstanceId, DBI jdbi)", "testcase": false, "constructor": true}, {"identifier": "PostgresStorage", "parameters": "(UUID reaperInstanceId,\n                         DBI jdbi,\n                         int leaderTimeoutInMinutes,\n                         int reaperTimeoutInMinutes,\n                         int metricsTimeoutInMinutes,\n                         int nodeOperationsTimeoutInMinutes)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " PostgresStorage(UUID reaperInstanceId,\n                         DBI jdbi,\n                         int leaderTimeoutInMinutes,\n                         int reaperTimeoutInMinutes,\n                         int metricsTimeoutInMinutes,\n                         int nodeOperationsTimeoutInMinutes)", "full_signature": "@VisibleForTesting public  PostgresStorage(UUID reaperInstanceId,\n                         DBI jdbi,\n                         int leaderTimeoutInMinutes,\n                         int reaperTimeoutInMinutes,\n                         int metricsTimeoutInMinutes,\n                         int nodeOperationsTimeoutInMinutes)", "class_method_signature": "PostgresStorage.PostgresStorage(UUID reaperInstanceId,\n                         DBI jdbi,\n                         int leaderTimeoutInMinutes,\n                         int reaperTimeoutInMinutes,\n                         int metricsTimeoutInMinutes,\n                         int nodeOperationsTimeoutInMinutes)", "testcase": false, "constructor": true}, {"identifier": "getPostgresStorage", "parameters": "(Handle handle)", "modifiers": "protected static", "return": "IStoragePostgreSql", "signature": "IStoragePostgreSql getPostgresStorage(Handle handle)", "full_signature": "protected static IStoragePostgreSql getPostgresStorage(Handle handle)", "class_method_signature": "PostgresStorage.getPostgresStorage(Handle handle)", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Cluster", "signature": "Cluster getCluster(String clusterName)", "full_signature": "@Override public Cluster getCluster(String clusterName)", "class_method_signature": "PostgresStorage.getCluster(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "deleteCluster", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Cluster", "signature": "Cluster deleteCluster(String clusterName)", "full_signature": "@Override public Cluster deleteCluster(String clusterName)", "class_method_signature": "PostgresStorage.deleteCluster(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "isStorageConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStorageConnected()", "full_signature": "@Override public boolean isStorageConnected()", "class_method_signature": "PostgresStorage.isStorageConnected()", "testcase": false, "constructor": false}, {"identifier": "getClusters", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Cluster>", "signature": "Collection<Cluster> getClusters()", "full_signature": "@Override public Collection<Cluster> getClusters()", "class_method_signature": "PostgresStorage.getClusters()", "testcase": false, "constructor": false}, {"identifier": "addCluster", "parameters": "(Cluster cluster)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addCluster(Cluster cluster)", "full_signature": "@Override public boolean addCluster(Cluster cluster)", "class_method_signature": "PostgresStorage.addCluster(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "updateCluster", "parameters": "(Cluster cluster)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateCluster(Cluster cluster)", "full_signature": "@Override public boolean updateCluster(Cluster cluster)", "class_method_signature": "PostgresStorage.updateCluster(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "addAndUpdateClusterAssertions", "parameters": "(Cluster cluster)", "modifiers": "private", "return": "boolean", "signature": "boolean addAndUpdateClusterAssertions(Cluster cluster)", "full_signature": "private boolean addAndUpdateClusterAssertions(Cluster cluster)", "class_method_signature": "PostgresStorage.addAndUpdateClusterAssertions(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "getRepairRun", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "Optional<RepairRun>", "signature": "Optional<RepairRun> getRepairRun(UUID id)", "full_signature": "@Override public Optional<RepairRun> getRepairRun(UUID id)", "class_method_signature": "PostgresStorage.getRepairRun(UUID id)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunsForCluster", "parameters": "(String clusterName, Optional<Integer> limit)", "modifiers": "@Override public", "return": "Collection<RepairRun>", "signature": "Collection<RepairRun> getRepairRunsForCluster(String clusterName, Optional<Integer> limit)", "full_signature": "@Override public Collection<RepairRun> getRepairRunsForCluster(String clusterName, Optional<Integer> limit)", "class_method_signature": "PostgresStorage.getRepairRunsForCluster(String clusterName, Optional<Integer> limit)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunsForUnit", "parameters": "(UUID repairUnitId)", "modifiers": "@Override public", "return": "Collection<RepairRun>", "signature": "Collection<RepairRun> getRepairRunsForUnit(UUID repairUnitId)", "full_signature": "@Override public Collection<RepairRun> getRepairRunsForUnit(UUID repairUnitId)", "class_method_signature": "PostgresStorage.getRepairRunsForUnit(UUID repairUnitId)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunsWithState", "parameters": "(RepairRun.RunState runState)", "modifiers": "@Override public", "return": "Collection<RepairRun>", "signature": "Collection<RepairRun> getRepairRunsWithState(RepairRun.RunState runState)", "full_signature": "@Override public Collection<RepairRun> getRepairRunsWithState(RepairRun.RunState runState)", "class_method_signature": "PostgresStorage.getRepairRunsWithState(RepairRun.RunState runState)", "testcase": false, "constructor": false}, {"identifier": "deleteRepairRun", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "Optional<RepairRun>", "signature": "Optional<RepairRun> deleteRepairRun(UUID id)", "full_signature": "@Override public Optional<RepairRun> deleteRepairRun(UUID id)", "class_method_signature": "PostgresStorage.deleteRepairRun(UUID id)", "testcase": false, "constructor": false}, {"identifier": "addRepairRun", "parameters": "(RepairRun.Builder newRepairRun, Collection<RepairSegment.Builder> newSegments)", "modifiers": "@Override public", "return": "RepairRun", "signature": "RepairRun addRepairRun(RepairRun.Builder newRepairRun, Collection<RepairSegment.Builder> newSegments)", "full_signature": "@Override public RepairRun addRepairRun(RepairRun.Builder newRepairRun, Collection<RepairSegment.Builder> newSegments)", "class_method_signature": "PostgresStorage.addRepairRun(RepairRun.Builder newRepairRun, Collection<RepairSegment.Builder> newSegments)", "testcase": false, "constructor": false}, {"identifier": "updateRepairRun", "parameters": "(RepairRun repairRun)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRepairRun(RepairRun repairRun)", "full_signature": "@Override public boolean updateRepairRun(RepairRun repairRun)", "class_method_signature": "PostgresStorage.updateRepairRun(RepairRun repairRun)", "testcase": false, "constructor": false}, {"identifier": "updateRepairRun", "parameters": "(RepairRun repairRun, Optional<Boolean> updateRepairState)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRepairRun(RepairRun repairRun, Optional<Boolean> updateRepairState)", "full_signature": "@Override public boolean updateRepairRun(RepairRun repairRun, Optional<Boolean> updateRepairState)", "class_method_signature": "PostgresStorage.updateRepairRun(RepairRun repairRun, Optional<Boolean> updateRepairState)", "testcase": false, "constructor": false}, {"identifier": "addRepairUnit", "parameters": "(RepairUnit.Builder newRepairUnit)", "modifiers": "@Override public", "return": "RepairUnit", "signature": "RepairUnit addRepairUnit(RepairUnit.Builder newRepairUnit)", "full_signature": "@Override public RepairUnit addRepairUnit(RepairUnit.Builder newRepairUnit)", "class_method_signature": "PostgresStorage.addRepairUnit(RepairUnit.Builder newRepairUnit)", "testcase": false, "constructor": false}, {"identifier": "getRepairUnit", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "RepairUnit", "signature": "RepairUnit getRepairUnit(UUID id)", "full_signature": "@Override public RepairUnit getRepairUnit(UUID id)", "class_method_signature": "PostgresStorage.getRepairUnit(UUID id)", "testcase": false, "constructor": false}, {"identifier": "getRepairUnit", "parameters": "(RepairUnit.Builder params)", "modifiers": "@Override public", "return": "Optional<RepairUnit>", "signature": "Optional<RepairUnit> getRepairUnit(RepairUnit.Builder params)", "full_signature": "@Override public Optional<RepairUnit> getRepairUnit(RepairUnit.Builder params)", "class_method_signature": "PostgresStorage.getRepairUnit(RepairUnit.Builder params)", "testcase": false, "constructor": false}, {"identifier": "addRepairSegments", "parameters": "(Collection<RepairSegment.Builder> newSegments, UUID runId)", "modifiers": "private", "return": "void", "signature": "void addRepairSegments(Collection<RepairSegment.Builder> newSegments, UUID runId)", "full_signature": "private void addRepairSegments(Collection<RepairSegment.Builder> newSegments, UUID runId)", "class_method_signature": "PostgresStorage.addRepairSegments(Collection<RepairSegment.Builder> newSegments, UUID runId)", "testcase": false, "constructor": false}, {"identifier": "updateRepairSegment", "parameters": "(RepairSegment repairSegment)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRepairSegment(RepairSegment repairSegment)", "full_signature": "@Override public boolean updateRepairSegment(RepairSegment repairSegment)", "class_method_signature": "PostgresStorage.updateRepairSegment(RepairSegment repairSegment)", "testcase": false, "constructor": false}, {"identifier": "getRepairSegment", "parameters": "(UUID runId, UUID segmentId)", "modifiers": "@Override public", "return": "Optional<RepairSegment>", "signature": "Optional<RepairSegment> getRepairSegment(UUID runId, UUID segmentId)", "full_signature": "@Override public Optional<RepairSegment> getRepairSegment(UUID runId, UUID segmentId)", "class_method_signature": "PostgresStorage.getRepairSegment(UUID runId, UUID segmentId)", "testcase": false, "constructor": false}, {"identifier": "getRepairSegmentsForRun", "parameters": "(UUID runId)", "modifiers": "@Override public", "return": "Collection<RepairSegment>", "signature": "Collection<RepairSegment> getRepairSegmentsForRun(UUID runId)", "full_signature": "@Override public Collection<RepairSegment> getRepairSegmentsForRun(UUID runId)", "class_method_signature": "PostgresStorage.getRepairSegmentsForRun(UUID runId)", "testcase": false, "constructor": false}, {"identifier": "getNextFreeSegment", "parameters": "(UUID runId)", "modifiers": "private", "return": "Optional<RepairSegment>", "signature": "Optional<RepairSegment> getNextFreeSegment(UUID runId)", "full_signature": "private Optional<RepairSegment> getNextFreeSegment(UUID runId)", "class_method_signature": "PostgresStorage.getNextFreeSegment(UUID runId)", "testcase": false, "constructor": false}, {"identifier": "getNextFreeSegmentInRange", "parameters": "(UUID runId, Optional<RingRange> range)", "modifiers": "@Override public", "return": "Optional<RepairSegment>", "signature": "Optional<RepairSegment> getNextFreeSegmentInRange(UUID runId, Optional<RingRange> range)", "full_signature": "@Override public Optional<RepairSegment> getNextFreeSegmentInRange(UUID runId, Optional<RingRange> range)", "class_method_signature": "PostgresStorage.getNextFreeSegmentInRange(UUID runId, Optional<RingRange> range)", "testcase": false, "constructor": false}, {"identifier": "getSegmentsWithState", "parameters": "(UUID runId, RepairSegment.State segmentState)", "modifiers": "@Override public", "return": "Collection<RepairSegment>", "signature": "Collection<RepairSegment> getSegmentsWithState(UUID runId, RepairSegment.State segmentState)", "full_signature": "@Override public Collection<RepairSegment> getSegmentsWithState(UUID runId, RepairSegment.State segmentState)", "class_method_signature": "PostgresStorage.getSegmentsWithState(UUID runId, RepairSegment.State segmentState)", "testcase": false, "constructor": false}, {"identifier": "getOngoingRepairsInCluster", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Collection<RepairParameters>", "signature": "Collection<RepairParameters> getOngoingRepairsInCluster(String clusterName)", "full_signature": "@Override public Collection<RepairParameters> getOngoingRepairsInCluster(String clusterName)", "class_method_signature": "PostgresStorage.getOngoingRepairsInCluster(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunIdsForCluster", "parameters": "(String clusterName, Optional<Integer> limit)", "modifiers": "@Override public", "return": "SortedSet<UUID>", "signature": "SortedSet<UUID> getRepairRunIdsForCluster(String clusterName, Optional<Integer> limit)", "full_signature": "@Override public SortedSet<UUID> getRepairRunIdsForCluster(String clusterName, Optional<Integer> limit)", "class_method_signature": "PostgresStorage.getRepairRunIdsForCluster(String clusterName, Optional<Integer> limit)", "testcase": false, "constructor": false}, {"identifier": "getSegmentAmountForRepairRun", "parameters": "(UUID runId)", "modifiers": "@Override public", "return": "int", "signature": "int getSegmentAmountForRepairRun(UUID runId)", "full_signature": "@Override public int getSegmentAmountForRepairRun(UUID runId)", "class_method_signature": "PostgresStorage.getSegmentAmountForRepairRun(UUID runId)", "testcase": false, "constructor": false}, {"identifier": "getSegmentAmountForRepairRunWithState", "parameters": "(UUID runId, RepairSegment.State state)", "modifiers": "@Override public", "return": "int", "signature": "int getSegmentAmountForRepairRunWithState(UUID runId, RepairSegment.State state)", "full_signature": "@Override public int getSegmentAmountForRepairRunWithState(UUID runId, RepairSegment.State state)", "class_method_signature": "PostgresStorage.getSegmentAmountForRepairRunWithState(UUID runId, RepairSegment.State state)", "testcase": false, "constructor": false}, {"identifier": "addRepairSchedule", "parameters": "(RepairSchedule.Builder repairSchedule)", "modifiers": "@Override public", "return": "RepairSchedule", "signature": "RepairSchedule addRepairSchedule(RepairSchedule.Builder repairSchedule)", "full_signature": "@Override public RepairSchedule addRepairSchedule(RepairSchedule.Builder repairSchedule)", "class_method_signature": "PostgresStorage.addRepairSchedule(RepairSchedule.Builder repairSchedule)", "testcase": false, "constructor": false}, {"identifier": "getRepairSchedule", "parameters": "(UUID repairScheduleId)", "modifiers": "@Override public", "return": "Optional<RepairSchedule>", "signature": "Optional<RepairSchedule> getRepairSchedule(UUID repairScheduleId)", "full_signature": "@Override public Optional<RepairSchedule> getRepairSchedule(UUID repairScheduleId)", "class_method_signature": "PostgresStorage.getRepairSchedule(UUID repairScheduleId)", "testcase": false, "constructor": false}, {"identifier": "getRepairSchedulesForCluster", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Collection<RepairSchedule>", "signature": "Collection<RepairSchedule> getRepairSchedulesForCluster(String clusterName)", "full_signature": "@Override public Collection<RepairSchedule> getRepairSchedulesForCluster(String clusterName)", "class_method_signature": "PostgresStorage.getRepairSchedulesForCluster(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getRepairSchedulesForKeyspace", "parameters": "(String keyspaceName)", "modifiers": "@Override public", "return": "Collection<RepairSchedule>", "signature": "Collection<RepairSchedule> getRepairSchedulesForKeyspace(String keyspaceName)", "full_signature": "@Override public Collection<RepairSchedule> getRepairSchedulesForKeyspace(String keyspaceName)", "class_method_signature": "PostgresStorage.getRepairSchedulesForKeyspace(String keyspaceName)", "testcase": false, "constructor": false}, {"identifier": "getRepairSchedulesForClusterAndKeyspace", "parameters": "(String clusterName, String keyspaceName)", "modifiers": "@Override public", "return": "Collection<RepairSchedule>", "signature": "Collection<RepairSchedule> getRepairSchedulesForClusterAndKeyspace(String clusterName, String keyspaceName)", "full_signature": "@Override public Collection<RepairSchedule> getRepairSchedulesForClusterAndKeyspace(String clusterName, String keyspaceName)", "class_method_signature": "PostgresStorage.getRepairSchedulesForClusterAndKeyspace(String clusterName, String keyspaceName)", "testcase": false, "constructor": false}, {"identifier": "getAllRepairSchedules", "parameters": "()", "modifiers": "@Override public", "return": "Collection<RepairSchedule>", "signature": "Collection<RepairSchedule> getAllRepairSchedules()", "full_signature": "@Override public Collection<RepairSchedule> getAllRepairSchedules()", "class_method_signature": "PostgresStorage.getAllRepairSchedules()", "testcase": false, "constructor": false}, {"identifier": "updateRepairSchedule", "parameters": "(RepairSchedule newRepairSchedule)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateRepairSchedule(RepairSchedule newRepairSchedule)", "full_signature": "@Override public boolean updateRepairSchedule(RepairSchedule newRepairSchedule)", "class_method_signature": "PostgresStorage.updateRepairSchedule(RepairSchedule newRepairSchedule)", "testcase": false, "constructor": false}, {"identifier": "deleteRepairSchedule", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "Optional<RepairSchedule>", "signature": "Optional<RepairSchedule> deleteRepairSchedule(UUID id)", "full_signature": "@Override public Optional<RepairSchedule> deleteRepairSchedule(UUID id)", "class_method_signature": "PostgresStorage.deleteRepairSchedule(UUID id)", "testcase": false, "constructor": false}, {"identifier": "getClusterRunStatuses", "parameters": "(String clusterName, int limit)", "modifiers": "@Override public", "return": "Collection<RepairRunStatus>", "signature": "Collection<RepairRunStatus> getClusterRunStatuses(String clusterName, int limit)", "full_signature": "@Override public Collection<RepairRunStatus> getClusterRunStatuses(String clusterName, int limit)", "class_method_signature": "PostgresStorage.getClusterRunStatuses(String clusterName, int limit)", "testcase": false, "constructor": false}, {"identifier": "getClusterScheduleStatuses", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Collection<RepairScheduleStatus>", "signature": "Collection<RepairScheduleStatus> getClusterScheduleStatuses(String clusterName)", "full_signature": "@Override public Collection<RepairScheduleStatus> getClusterScheduleStatuses(String clusterName)", "class_method_signature": "PostgresStorage.getClusterScheduleStatuses(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "saveSnapshot", "parameters": "(Snapshot snapshot)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean saveSnapshot(Snapshot snapshot)", "full_signature": "@Override public boolean saveSnapshot(Snapshot snapshot)", "class_method_signature": "PostgresStorage.saveSnapshot(Snapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "deleteSnapshot", "parameters": "(Snapshot snapshot)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSnapshot(Snapshot snapshot)", "full_signature": "@Override public boolean deleteSnapshot(Snapshot snapshot)", "class_method_signature": "PostgresStorage.deleteSnapshot(Snapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "(String clusterName, String snapshotName)", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot getSnapshot(String clusterName, String snapshotName)", "full_signature": "@Override public Snapshot getSnapshot(String clusterName, String snapshotName)", "class_method_signature": "PostgresStorage.getSnapshot(String clusterName, String snapshotName)", "testcase": false, "constructor": false}, {"identifier": "getEventSubscriptions", "parameters": "()", "modifiers": "@Override public", "return": "Collection<DiagEventSubscription>", "signature": "Collection<DiagEventSubscription> getEventSubscriptions()", "full_signature": "@Override public Collection<DiagEventSubscription> getEventSubscriptions()", "class_method_signature": "PostgresStorage.getEventSubscriptions()", "testcase": false, "constructor": false}, {"identifier": "getEventSubscriptions", "parameters": "(String clusterName)", "modifiers": "@Override public", "return": "Collection<DiagEventSubscription>", "signature": "Collection<DiagEventSubscription> getEventSubscriptions(String clusterName)", "full_signature": "@Override public Collection<DiagEventSubscription> getEventSubscriptions(String clusterName)", "class_method_signature": "PostgresStorage.getEventSubscriptions(String clusterName)", "testcase": false, "constructor": false}, {"identifier": "getEventSubscription", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "DiagEventSubscription", "signature": "DiagEventSubscription getEventSubscription(UUID id)", "full_signature": "@Override public DiagEventSubscription getEventSubscription(UUID id)", "class_method_signature": "PostgresStorage.getEventSubscription(UUID id)", "testcase": false, "constructor": false}, {"identifier": "addEventSubscription", "parameters": "(DiagEventSubscription subscription)", "modifiers": "@Override public", "return": "DiagEventSubscription", "signature": "DiagEventSubscription addEventSubscription(DiagEventSubscription subscription)", "full_signature": "@Override public DiagEventSubscription addEventSubscription(DiagEventSubscription subscription)", "class_method_signature": "PostgresStorage.addEventSubscription(DiagEventSubscription subscription)", "testcase": false, "constructor": false}, {"identifier": "deleteEventSubscription", "parameters": "(UUID id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteEventSubscription(UUID id)", "full_signature": "@Override public boolean deleteEventSubscription(UUID id)", "class_method_signature": "PostgresStorage.deleteEventSubscription(UUID id)", "testcase": false, "constructor": false}, {"identifier": "takeLead", "parameters": "(UUID leaderId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean takeLead(UUID leaderId)", "full_signature": "@Override public boolean takeLead(UUID leaderId)", "class_method_signature": "PostgresStorage.takeLead(UUID leaderId)", "testcase": false, "constructor": false}, {"identifier": "takeLead", "parameters": "(UUID leaderId, int ttl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean takeLead(UUID leaderId, int ttl)", "full_signature": "@Override public boolean takeLead(UUID leaderId, int ttl)", "class_method_signature": "PostgresStorage.takeLead(UUID leaderId, int ttl)", "testcase": false, "constructor": false}, {"identifier": "takeLead", "parameters": "(UUID leaderId, Duration ttl)", "modifiers": "private", "return": "boolean", "signature": "boolean takeLead(UUID leaderId, Duration ttl)", "full_signature": "private boolean takeLead(UUID leaderId, Duration ttl)", "class_method_signature": "PostgresStorage.takeLead(UUID leaderId, Duration ttl)", "testcase": false, "constructor": false}, {"identifier": "renewLead", "parameters": "(UUID leaderId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renewLead(UUID leaderId)", "full_signature": "@Override public boolean renewLead(UUID leaderId)", "class_method_signature": "PostgresStorage.renewLead(UUID leaderId)", "testcase": false, "constructor": false}, {"identifier": "renewLead", "parameters": "(UUID leaderId, int ttl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean renewLead(UUID leaderId, int ttl)", "full_signature": "@Override public boolean renewLead(UUID leaderId, int ttl)", "class_method_signature": "PostgresStorage.renewLead(UUID leaderId, int ttl)", "testcase": false, "constructor": false}, {"identifier": "getLeaders", "parameters": "()", "modifiers": "@Override public", "return": "List<UUID>", "signature": "List<UUID> getLeaders()", "full_signature": "@Override public List<UUID> getLeaders()", "class_method_signature": "PostgresStorage.getLeaders()", "testcase": false, "constructor": false}, {"identifier": "releaseLead", "parameters": "(UUID leaderId)", "modifiers": "@Override public", "return": "void", "signature": "void releaseLead(UUID leaderId)", "full_signature": "@Override public void releaseLead(UUID leaderId)", "class_method_signature": "PostgresStorage.releaseLead(UUID leaderId)", "testcase": false, "constructor": false}, {"identifier": "saveHeartbeat", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void saveHeartbeat()", "full_signature": "@Override public void saveHeartbeat()", "class_method_signature": "PostgresStorage.saveHeartbeat()", "testcase": false, "constructor": false}, {"identifier": "countRunningReapers", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countRunningReapers()", "full_signature": "@Override public int countRunningReapers()", "class_method_signature": "PostgresStorage.countRunningReapers()", "testcase": false, "constructor": false}, {"identifier": "storeNodeMetrics", "parameters": "(UUID runId, NodeMetrics nodeMetrics)", "modifiers": "@Override public", "return": "void", "signature": "void storeNodeMetrics(UUID runId, NodeMetrics nodeMetrics)", "full_signature": "@Override public void storeNodeMetrics(UUID runId, NodeMetrics nodeMetrics)", "class_method_signature": "PostgresStorage.storeNodeMetrics(UUID runId, NodeMetrics nodeMetrics)", "testcase": false, "constructor": false}, {"identifier": "getNodeMetrics", "parameters": "(UUID runId)", "modifiers": "@Override public", "return": "Collection<NodeMetrics>", "signature": "Collection<NodeMetrics> getNodeMetrics(UUID runId)", "full_signature": "@Override public Collection<NodeMetrics> getNodeMetrics(UUID runId)", "class_method_signature": "PostgresStorage.getNodeMetrics(UUID runId)", "testcase": false, "constructor": false}, {"identifier": "getNodeMetrics", "parameters": "(UUID runId, String node)", "modifiers": "@Override public", "return": "Optional<NodeMetrics>", "signature": "Optional<NodeMetrics> getNodeMetrics(UUID runId, String node)", "full_signature": "@Override public Optional<NodeMetrics> getNodeMetrics(UUID runId, String node)", "class_method_signature": "PostgresStorage.getNodeMetrics(UUID runId, String node)", "testcase": false, "constructor": false}, {"identifier": "deleteNodeMetrics", "parameters": "(UUID runId, String node)", "modifiers": "@Override public", "return": "void", "signature": "void deleteNodeMetrics(UUID runId, String node)", "full_signature": "@Override public void deleteNodeMetrics(UUID runId, String node)", "class_method_signature": "PostgresStorage.deleteNodeMetrics(UUID runId, String node)", "testcase": false, "constructor": false}, {"identifier": "purgeNodeMetrics", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void purgeNodeMetrics()", "full_signature": "@Override public void purgeNodeMetrics()", "class_method_signature": "PostgresStorage.purgeNodeMetrics()", "testcase": false, "constructor": false}, {"identifier": "getNextFreeSegmentForRanges", "parameters": "(\n      UUID runId,\n      Optional<RingRange> parallelRange,\n      List<RingRange> ranges)", "modifiers": "@Override public", "return": "Optional<RepairSegment>", "signature": "Optional<RepairSegment> getNextFreeSegmentForRanges(\n      UUID runId,\n      Optional<RingRange> parallelRange,\n      List<RingRange> ranges)", "full_signature": "@Override public Optional<RepairSegment> getNextFreeSegmentForRanges(\n      UUID runId,\n      Optional<RingRange> parallelRange,\n      List<RingRange> ranges)", "class_method_signature": "PostgresStorage.getNextFreeSegmentForRanges(\n      UUID runId,\n      Optional<RingRange> parallelRange,\n      List<RingRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "storeMetric", "parameters": "(GenericMetric metric)", "modifiers": "@Override public", "return": "void", "signature": "void storeMetric(GenericMetric metric)", "full_signature": "@Override public void storeMetric(GenericMetric metric)", "class_method_signature": "PostgresStorage.storeMetric(GenericMetric metric)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(\n      String clusterName,\n      Optional<String> host,\n      String metricDomain,\n      String metricType,\n      long since)", "modifiers": "@Override public", "return": "List<GenericMetric>", "signature": "List<GenericMetric> getMetrics(\n      String clusterName,\n      Optional<String> host,\n      String metricDomain,\n      String metricType,\n      long since)", "full_signature": "@Override public List<GenericMetric> getMetrics(\n      String clusterName,\n      Optional<String> host,\n      String metricDomain,\n      String metricType,\n      long since)", "class_method_signature": "PostgresStorage.getMetrics(\n      String clusterName,\n      Optional<String> host,\n      String metricDomain,\n      String metricType,\n      long since)", "testcase": false, "constructor": false}, {"identifier": "purgeMetrics", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void purgeMetrics()", "full_signature": "@Override public void purgeMetrics()", "class_method_signature": "PostgresStorage.purgeMetrics()", "testcase": false, "constructor": false}, {"identifier": "storeOperations", "parameters": "(String clusterName, OpType operationType, String host, String operationsJson)", "modifiers": "@Override public", "return": "void", "signature": "void storeOperations(String clusterName, OpType operationType, String host, String operationsJson)", "full_signature": "@Override public void storeOperations(String clusterName, OpType operationType, String host, String operationsJson)", "class_method_signature": "PostgresStorage.storeOperations(String clusterName, OpType operationType, String host, String operationsJson)", "testcase": false, "constructor": false}, {"identifier": "listOperations", "parameters": "(String clusterName, OpType operationType, String host)", "modifiers": "@Override public", "return": "String", "signature": "String listOperations(String clusterName, OpType operationType, String host)", "full_signature": "@Override public String listOperations(String clusterName, OpType operationType, String host)", "class_method_signature": "PostgresStorage.listOperations(String clusterName, OpType operationType, String host)", "testcase": false, "constructor": false}, {"identifier": "purgeNodeOperations", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void purgeNodeOperations()", "full_signature": "@Override public void purgeNodeOperations()", "class_method_signature": "PostgresStorage.purgeNodeOperations()", "testcase": false, "constructor": false}, {"identifier": "beat", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void beat()", "full_signature": "private void beat()", "class_method_signature": "PostgresStorage.beat()", "testcase": false, "constructor": false}, {"identifier": "deleteOldReapers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void deleteOldReapers()", "full_signature": "private void deleteOldReapers()", "class_method_signature": "PostgresStorage.deleteOldReapers()", "testcase": false, "constructor": false}, {"identifier": "insertGenericMetricSourceNode", "parameters": "(GenericMetric metric)", "modifiers": "private", "return": "void", "signature": "void insertGenericMetricSourceNode(GenericMetric metric)", "full_signature": "private void insertGenericMetricSourceNode(GenericMetric metric)", "class_method_signature": "PostgresStorage.insertGenericMetricSourceNode(GenericMetric metric)", "testcase": false, "constructor": false}, {"identifier": "getExpirationTime", "parameters": "(Duration timeout)", "modifiers": "private static", "return": "Instant", "signature": "Instant getExpirationTime(Duration timeout)", "full_signature": "private static Instant getExpirationTime(Duration timeout)", "class_method_signature": "PostgresStorage.getExpirationTime(Duration timeout)", "testcase": false, "constructor": false}, {"identifier": "segmentIsWithinRange", "parameters": "(RepairSegment segment, RingRange range)", "modifiers": "private static", "return": "boolean", "signature": "boolean segmentIsWithinRange(RepairSegment segment, RingRange range)", "full_signature": "private static boolean segmentIsWithinRange(RepairSegment segment, RingRange range)", "class_method_signature": "PostgresStorage.segmentIsWithinRange(RepairSegment segment, RingRange range)", "testcase": false, "constructor": false}, {"identifier": "withinRange", "parameters": "(RepairSegment segment, Optional<RingRange> range)", "modifiers": "private static", "return": "boolean", "signature": "boolean withinRange(RepairSegment segment, Optional<RingRange> range)", "full_signature": "private static boolean withinRange(RepairSegment segment, Optional<RingRange> range)", "class_method_signature": "PostgresStorage.withinRange(RepairSegment segment, Optional<RingRange> range)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/storage/PostgresStorage.java"}, "focal_method": {"identifier": "takeLead", "parameters": "(UUID leaderId)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean takeLead(UUID leaderId) {\n    return takeLead(leaderId, leaderTimeout);\n  }", "signature": "boolean takeLead(UUID leaderId)", "full_signature": "@Override public boolean takeLead(UUID leaderId)", "class_method_signature": "PostgresStorage.takeLead(UUID leaderId)", "testcase": false, "constructor": false, "invocations": ["takeLead"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}