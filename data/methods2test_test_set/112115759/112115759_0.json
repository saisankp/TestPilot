{"test_class": {"identifier": "MediaTypeUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "rawhttp-cli/src/test/java/rawhttp/cli/util/MediaTypeUtilTest.java"}, "test_case": {"identifier": "canSplitupAcceptHeadersIntoPreferredMediaTypes", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void canSplitupAcceptHeadersIntoPreferredMediaTypes() {\n        List[] examples = new List[]{\n                emptyList(), emptyList(),\n                singletonList(\"\"), emptyList(),\n                singletonList(\"*/*\"), singletonList(\"*/*\"),\n                asList(\"xml\", \"json\"), asList(\"xml\", \"json\"),\n                singletonList(\"json; q=0.4, xml\"), asList(\"xml\", \"json\"),\n                singletonList(\"json; q=0.4, xml; q=0.5\"), asList(\"xml\", \"json\"),\n                singletonList(\"json; q=0.8, xml; q=0.1\"), asList(\"json\", \"xml\"),\n                singletonList(\"json; q=0.4;x=1, xml;a=20;q=0.5\"), asList(\"xml\", \"json\"),\n                singletonList(\"json; q=0.8, xml; q=0.1\"), asList(\"json\", \"xml\"),\n                asList(\"text/plain; q=0.5, text/html\",\n                        \"text/x-dvi; q=0.8, text/x-c\"), asList(\"text/html\", \"text/x-c\", \"text/x-dvi\", \"text/plain\"),\n        };\n\n        for (int i = 0; i < examples.length; i += 2) {\n            List<String> accept = examples[i];\n            List<String> expectedSortedAccepts = examples[i + 1];\n            List<String> result = MediaTypeUtil.getSortedAcceptableMediaTypes(accept);\n            assertEquals(\"Example index: \" + (i / 2), expectedSortedAccepts, result);\n        }\n    }", "signature": "void canSplitupAcceptHeadersIntoPreferredMediaTypes()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void canSplitupAcceptHeadersIntoPreferredMediaTypes()", "class_method_signature": "MediaTypeUtilTest.canSplitupAcceptHeadersIntoPreferredMediaTypes()", "testcase": true, "constructor": false, "invocations": ["emptyList", "emptyList", "singletonList", "emptyList", "singletonList", "singletonList", "asList", "asList", "singletonList", "asList", "singletonList", "asList", "singletonList", "asList", "singletonList", "asList", "singletonList", "asList", "asList", "asList", "getSortedAcceptableMediaTypes", "assertEquals"]}, "focal_class": {"identifier": "MediaTypeUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getSortedAcceptableMediaTypes", "parameters": "(List<String> accept)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getSortedAcceptableMediaTypes(List<String> accept)", "full_signature": "public static List<String> getSortedAcceptableMediaTypes(List<String> accept)", "class_method_signature": "MediaTypeUtil.getSortedAcceptableMediaTypes(List<String> accept)", "testcase": false, "constructor": false}], "file": "rawhttp-cli/src/main/java/rawhttp/cli/util/MediaTypeUtil.java"}, "focal_method": {"identifier": "getSortedAcceptableMediaTypes", "parameters": "(List<String> accept)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> getSortedAcceptableMediaTypes(List<String> accept) {\n        List<Item> result = new ArrayList<>(accept.size() + 1);\n        for (String acceptItem : accept) {\n            String[] subItems = acceptItem.split(\",\");\n\n            for (String subItem : subItems) {\n                String[] itemPlusParams = subItem.split(\";\");\n                String item = itemPlusParams[0].trim();\n                if (item.isEmpty()) continue;\n\n                float weight = 1.0f;\n\n                // use the 'q' parameter if possible to set the weight\n                for (int i = 1; i < itemPlusParams.length; i++) {\n                    String[] param = itemPlusParams[i].split(\"=\", 2);\n                    String paramName = param[0].trim();\n                    if (param.length == 2 && paramName.equalsIgnoreCase(\"q\")) {\n                        try {\n                            weight = Float.parseFloat(param[1].trim());\n                        } catch (NumberFormatException e) {\n                            // ignore\n                        }\n                        break; // 'q' param found, break out\n                    }\n                }\n                result.add(new Item(item, weight));\n            }\n        }\n        return result.stream().sorted().map(i -> i.value).collect(Collectors.toList());\n    }", "signature": "List<String> getSortedAcceptableMediaTypes(List<String> accept)", "full_signature": "public static List<String> getSortedAcceptableMediaTypes(List<String> accept)", "class_method_signature": "MediaTypeUtil.getSortedAcceptableMediaTypes(List<String> accept)", "testcase": false, "constructor": false, "invocations": ["size", "split", "split", "trim", "isEmpty", "split", "trim", "equalsIgnoreCase", "parseFloat", "trim", "add", "collect", "map", "sorted", "stream", "toList"]}, "repository": {"repo_id": 112115759, "url": "https://github.com/renatoathaydes/rawhttp", "stars": 63, "created": "11/26/2017 8:52:33 PM +00:00", "updates": "2020-01-18T11:12:00+00:00", "fork": "False", "license": "licensed"}}