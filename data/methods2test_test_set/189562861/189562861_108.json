{"test_class": {"identifier": "AccessLogFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter accessLogFilter = new AccessLogFilter();", "modifier": "", "type": "Filter", "declarator": "accessLogFilter = new AccessLogFilter()", "var_name": "accessLogFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/com/alibaba/dubbo/rpc/filter/AccessLogFilterTest.java"}, "test_case": {"identifier": "testCustom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCustom() {\n        URL url = URL.valueOf(\"test://test:11/test?accesslog=alibaba\");\n        Invoker<AccessLogFilterTest> invoker = new MyInvoker<AccessLogFilterTest>(url);\n        Invocation invocation = new MockInvocation();\n        accessLogFilter.invoke(invoker, invocation);\n    }", "signature": "void testCustom()", "full_signature": "@Test public void testCustom()", "class_method_signature": "AccessLogFilterTest.testCustom()", "testcase": true, "constructor": false, "invocations": ["valueOf", "invoke"]}, "focal_class": {"identifier": "AccessLogFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AccessLogFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AccessLogFilter.class)", "var_name": "logger"}, {"original_string": "private static final String ACCESS_LOG_KEY = \"dubbo.accesslog\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_LOG_KEY = \"dubbo.accesslog\"", "var_name": "ACCESS_LOG_KEY"}, {"original_string": "private static final String FILE_DATE_FORMAT = \"yyyyMMdd\";", "modifier": "private static final", "type": "String", "declarator": "FILE_DATE_FORMAT = \"yyyyMMdd\"", "var_name": "FILE_DATE_FORMAT"}, {"original_string": "private static final String MESSAGE_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "MESSAGE_DATE_FORMAT"}, {"original_string": "private static final int LOG_MAX_BUFFER = 5000;", "modifier": "private static final", "type": "int", "declarator": "LOG_MAX_BUFFER = 5000", "var_name": "LOG_MAX_BUFFER"}, {"original_string": "private static final long LOG_OUTPUT_INTERVAL = 5000;", "modifier": "private static final", "type": "long", "declarator": "LOG_OUTPUT_INTERVAL = 5000", "var_name": "LOG_OUTPUT_INTERVAL"}, {"original_string": "private final ConcurrentMap<String, Set<String>> logQueue = new ConcurrentHashMap<String, Set<String>>();", "modifier": "private final", "type": "ConcurrentMap<String, Set<String>>", "declarator": "logQueue = new ConcurrentHashMap<String, Set<String>>()", "var_name": "logQueue"}, {"original_string": "private final ScheduledExecutorService logScheduled = Executors.newScheduledThreadPool(2, new NamedThreadFactory(\"Dubbo-Access-Log\", true));", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "logScheduled = Executors.newScheduledThreadPool(2, new NamedThreadFactory(\"Dubbo-Access-Log\", true))", "var_name": "logScheduled"}, {"original_string": "private volatile ScheduledFuture<?> logFuture = null;", "modifier": "private volatile", "type": "ScheduledFuture<?>", "declarator": "logFuture = null", "var_name": "logFuture"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "AccessLogFilter.init()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(String accesslog, String logmessage)", "modifiers": "private", "return": "void", "signature": "void log(String accesslog, String logmessage)", "full_signature": "private void log(String accesslog, String logmessage)", "class_method_signature": "AccessLogFilter.log(String accesslog, String logmessage)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "AccessLogFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\n        try {\n            String accesslog = invoker.getUrl().getParameter(Constants.ACCESS_LOG_KEY);\n            if (ConfigUtils.isNotEmpty(accesslog)) {\n                RpcContext context = RpcContext.getContext();\n                String serviceName = invoker.getInterface().getName();\n                String version = invoker.getUrl().getParameter(Constants.VERSION_KEY);\n                String group = invoker.getUrl().getParameter(Constants.GROUP_KEY);\n                StringBuilder sn = new StringBuilder();\n                sn.append(\"[\").append(new SimpleDateFormat(MESSAGE_DATE_FORMAT).format(new Date())).append(\"] \").append(context.getRemoteHost()).append(\":\").append(context.getRemotePort())\n                        .append(\" -> \").append(context.getLocalHost()).append(\":\").append(context.getLocalPort())\n                        .append(\" - \");\n                if (null != group && group.length() > 0) {\n                    sn.append(group).append(\"/\");\n                }\n                sn.append(serviceName);\n                if (null != version && version.length() > 0) {\n                    sn.append(\":\").append(version);\n                }\n                sn.append(\" \");\n                sn.append(inv.getMethodName());\n                sn.append(\"(\");\n                Class<?>[] types = inv.getParameterTypes();\n                if (types != null && types.length > 0) {\n                    boolean first = true;\n                    for (Class<?> type : types) {\n                        if (first) {\n                            first = false;\n                        } else {\n                            sn.append(\",\");\n                        }\n                        sn.append(type.getName());\n                    }\n                }\n                sn.append(\") \");\n                Object[] args = inv.getArguments();\n                if (args != null && args.length > 0) {\n                    sn.append(JSON.toJSONString(args));\n                }\n                String msg = sn.toString();\n                if (ConfigUtils.isDefault(accesslog)) {\n                    LoggerFactory.getLogger(ACCESS_LOG_KEY + \".\" + invoker.getInterface().getName()).info(msg);\n                } else {\n                    log(accesslog, msg);\n                }\n            }\n        } catch (Throwable t) {\n            logger.warn(\"Exception in AcessLogFilter of service(\" + invoker + \" -> \" + inv + \")\", t);\n        }\n        return invoker.invoke(inv);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "AccessLogFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false, "invocations": ["getParameter", "getUrl", "isNotEmpty", "getContext", "getName", "getInterface", "getParameter", "getUrl", "getParameter", "getUrl", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "format", "getRemoteHost", "getRemotePort", "getLocalHost", "getLocalPort", "length", "append", "append", "append", "length", "append", "append", "append", "append", "getMethodName", "append", "getParameterTypes", "append", "append", "getName", "append", "getArguments", "append", "toJSONString", "toString", "isDefault", "info", "getLogger", "getName", "getInterface", "log", "warn", "invoke"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}