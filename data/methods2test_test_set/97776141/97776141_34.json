{"test_class": {"identifier": "DefaultAuthenticationServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VALID_USERNAME = \"user\";", "modifier": "private static final", "type": "String", "declarator": "VALID_USERNAME = \"user\"", "var_name": "VALID_USERNAME"}, {"original_string": "private static final String VALID_PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "VALID_PASSWORD = \"password\"", "var_name": "VALID_PASSWORD"}, {"original_string": "private static final String INVALID_PASSWORD = \"invalid_password\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_PASSWORD = \"invalid_password\"", "var_name": "INVALID_PASSWORD"}, {"original_string": "@Mock\n    private UserService mockUserService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "mockUserService", "var_name": "mockUserService"}, {"original_string": "@Mock\n    private DateTimeService mockDateTimeService;", "modifier": "@Mock\n    private", "type": "DateTimeService", "declarator": "mockDateTimeService", "var_name": "mockDateTimeService"}, {"original_string": "private DefaultAuthenticationService defaultAuthenticationService;", "modifier": "private", "type": "DefaultAuthenticationService", "declarator": "defaultAuthenticationService", "var_name": "defaultAuthenticationService"}], "file": "application/confagrid-webapp/src/test/java/com/aleggeup/confagrid/auth/DefaultAuthenticationServiceTest.java"}, "test_case": {"identifier": "testAnonymousAuthenticationToken", "parameters": "()", "modifiers": "@Ignore(\"Remove until difference in time on build machine is figured out.\") @Test public", "return": "void", "body": "@Ignore(\"Remove until difference in time on build machine is figured out.\")\n    @Test\n    public void testAnonymousAuthenticationToken() {\n        final DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\n        final DateTime now = formatter.parseDateTime(\"1985-10-26 01:24:00\").withZone(DateTimeZone.UTC);\n        final Date expiry = new Date(1_000_000_000L);\n\n        Mockito.when(mockDateTimeService.now()).thenReturn(now);\n        Mockito.when(mockDateTimeService.plusDaysAsDate(now, 1)).thenReturn(expiry);\n\n        final String response = defaultAuthenticationService.anonymousToken();\n\n        Assert.assertEquals(\n            \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhbm9ueW1vdXMiLCJpYXQiOjQ5OTE2NjY0MCwiZXhwIjoxMDAwMDAwfQ.c-kEHbZBxg4sTiweFgQrHtMJSSwiaavqHRsWhw0Uvwc\",\n            response);\n\n        Mockito.verify(mockDateTimeService).now();\n        Mockito.verify(mockDateTimeService).plusDaysAsDate(now, 1);\n    }", "signature": "void testAnonymousAuthenticationToken()", "full_signature": "@Ignore(\"Remove until difference in time on build machine is figured out.\") @Test public void testAnonymousAuthenticationToken()", "class_method_signature": "DefaultAuthenticationServiceTest.testAnonymousAuthenticationToken()", "testcase": true, "constructor": false, "invocations": ["forPattern", "withZone", "parseDateTime", "thenReturn", "when", "now", "thenReturn", "when", "plusDaysAsDate", "anonymousToken", "assertEquals", "now", "verify", "plusDaysAsDate", "verify"]}, "focal_class": {"identifier": "DefaultAuthenticationService", "superclass": "", "interfaces": "implements AuthenticationService", "fields": [{"original_string": "private static final int TOKEN_INTERVAL_DAYS = 1;", "modifier": "private static final", "type": "int", "declarator": "TOKEN_INTERVAL_DAYS = 1", "var_name": "TOKEN_INTERVAL_DAYS"}, {"original_string": "private final UserService userService;", "modifier": "private final", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final DateTimeService dateTimeService;", "modifier": "private final", "type": "DateTimeService", "declarator": "dateTimeService", "var_name": "dateTimeService"}], "methods": [{"identifier": "DefaultAuthenticationService", "parameters": "(final UserService userService, final DateTimeService dateTimeService)", "modifiers": "@Autowired public", "return": "", "signature": " DefaultAuthenticationService(final UserService userService, final DateTimeService dateTimeService)", "full_signature": "@Autowired public  DefaultAuthenticationService(final UserService userService, final DateTimeService dateTimeService)", "class_method_signature": "DefaultAuthenticationService.DefaultAuthenticationService(final UserService userService, final DateTimeService dateTimeService)", "testcase": false, "constructor": true}, {"identifier": "userPasswordCheck", "parameters": "(final String username, final String password)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userPasswordCheck(final String username, final String password)", "full_signature": "@Override public boolean userPasswordCheck(final String username, final String password)", "class_method_signature": "DefaultAuthenticationService.userPasswordCheck(final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "authenticationToken", "parameters": "(final String username, final String password)", "modifiers": "@Override public", "return": "String", "signature": "String authenticationToken(final String username, final String password)", "full_signature": "@Override public String authenticationToken(final String username, final String password)", "class_method_signature": "DefaultAuthenticationService.authenticationToken(final String username, final String password)", "testcase": false, "constructor": false}, {"identifier": "anonymousToken", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String anonymousToken()", "full_signature": "@Override public String anonymousToken()", "class_method_signature": "DefaultAuthenticationService.anonymousToken()", "testcase": false, "constructor": false}], "file": "application/confagrid-webapp/src/main/java/com/aleggeup/confagrid/auth/DefaultAuthenticationService.java"}, "focal_method": {"identifier": "anonymousToken", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String anonymousToken() {\n        final DateTime now = dateTimeService.now();\n\n        return Jwts.builder()\n            .setSubject(\"anonymous\")\n            .setId(\"b5a2918e-bd3f-48f5-8437-daf40fd3f323\")\n            .setIssuedAt(now.toLocalDateTime().toDate())\n            .setExpiration(dateTimeService.plusDaysAsDate(now, TOKEN_INTERVAL_DAYS))\n            .signWith(SignatureAlgorithm.HS256, JwtFilter.SECRET_KEY)\n            .compact();\n    }", "signature": "String anonymousToken()", "full_signature": "@Override public String anonymousToken()", "class_method_signature": "DefaultAuthenticationService.anonymousToken()", "testcase": false, "constructor": false, "invocations": ["now", "compact", "signWith", "setExpiration", "setIssuedAt", "setId", "setSubject", "builder", "toDate", "toLocalDateTime", "plusDaysAsDate"]}, "repository": {"repo_id": 97776141, "url": "https://github.com/ALeggeUp/confagrid", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 22043, "license": "licensed"}}