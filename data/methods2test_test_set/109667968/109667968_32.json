{"test_class": {"identifier": "MapboxOfflineDownloaderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String mapName = UUID.randomUUID().toString();", "modifier": "private", "type": "String", "declarator": "mapName = UUID.randomUUID().toString()", "var_name": "mapName"}, {"original_string": "private static final String TAG = MapboxOfflineDownloaderServiceTest.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = MapboxOfflineDownloaderServiceTest.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private MapboxOfflineDownloaderService mapboxOfflineDownloaderService;", "modifier": "private", "type": "MapboxOfflineDownloaderService", "declarator": "mapboxOfflineDownloaderService", "var_name": "mapboxOfflineDownloaderService"}, {"original_string": "private String sampleValidMapboxStyleURL = \"mapbox://styles/ona/90kiosdcIJ3d\";", "modifier": "private", "type": "String", "declarator": "sampleValidMapboxStyleURL = \"mapbox://styles/ona/90kiosdcIJ3d\"", "var_name": "sampleValidMapboxStyleURL"}, {"original_string": "private String mapboxAccessToken = BuildConfig.MAPBOX_SDK_ACCESS_TOKEN;", "modifier": "private", "type": "String", "declarator": "mapboxAccessToken = BuildConfig.MAPBOX_SDK_ACCESS_TOKEN", "var_name": "mapboxAccessToken"}, {"original_string": "private float minZoom = 22;", "modifier": "private", "type": "float", "declarator": "minZoom = 22", "var_name": "minZoom"}, {"original_string": "private float maxZoom = 10;", "modifier": "private", "type": "float", "declarator": "maxZoom = 10", "var_name": "maxZoom"}, {"original_string": "private LatLng topLeftBound = new LatLng(9.1, 9.1);", "modifier": "private", "type": "LatLng", "declarator": "topLeftBound = new LatLng(9.1, 9.1)", "var_name": "topLeftBound"}, {"original_string": "private LatLng topRightBound = new LatLng(9.1, 20.5);", "modifier": "private", "type": "LatLng", "declarator": "topRightBound = new LatLng(9.1, 20.5)", "var_name": "topRightBound"}, {"original_string": "private LatLng bottomRightBound = new LatLng(1.1, 20.5);", "modifier": "private", "type": "LatLng", "declarator": "bottomRightBound = new LatLng(1.1, 20.5)", "var_name": "bottomRightBound"}, {"original_string": "private LatLng bottomLeftBound = new LatLng(9.1, 1.1);", "modifier": "private", "type": "LatLng", "declarator": "bottomLeftBound = new LatLng(9.1, 1.1)", "var_name": "bottomLeftBound"}, {"original_string": "private CountDownLatch latch;", "modifier": "private", "type": "CountDownLatch", "declarator": "latch", "var_name": "latch"}, {"original_string": "private ArrayList<Object> resultsToCheck = new ArrayList<>();", "modifier": "private", "type": "ArrayList<Object>", "declarator": "resultsToCheck = new ArrayList<>()", "var_name": "resultsToCheck"}], "file": "library/src/test/java/io/ona/kujaku/services/MapboxOfflineDownloaderServiceTest.java"}, "test_case": {"identifier": "persistOfflineMapTaskShouldReturnTrueWhenGivenValidDeleteTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void persistOfflineMapTaskShouldReturnTrueWhenGivenValidDeleteTask() {\n        Intent sampleServiceIntent = createMapboxOfflineDownloaderServiceIntent();\n        sampleServiceIntent = createSampleDeleteIntent(sampleServiceIntent);\n\n        assertEquals(true, mapboxOfflineDownloaderService.persistOfflineMapTask(sampleServiceIntent));\n    }", "signature": "void persistOfflineMapTaskShouldReturnTrueWhenGivenValidDeleteTask()", "full_signature": "@Test public void persistOfflineMapTaskShouldReturnTrueWhenGivenValidDeleteTask()", "class_method_signature": "MapboxOfflineDownloaderServiceTest.persistOfflineMapTaskShouldReturnTrueWhenGivenValidDeleteTask()", "testcase": true, "constructor": false, "invocations": ["createMapboxOfflineDownloaderServiceIntent", "createSampleDeleteIntent", "assertEquals", "persistOfflineMapTask"]}, "focal_class": {"identifier": "MapboxOfflineDownloaderService", "superclass": "extends Service", "interfaces": "implements OfflineRegionObserver, OnDownloadMapListener", "fields": [{"original_string": "public static final String KEY_RESULT_STATUS = \"RESULT STATUS\";", "modifier": "public static final", "type": "String", "declarator": "KEY_RESULT_STATUS = \"RESULT STATUS\"", "var_name": "KEY_RESULT_STATUS"}, {"original_string": "public static final String KEY_RESULT_MESSAGE = \"RESULT MESSAGE\";", "modifier": "public static final", "type": "String", "declarator": "KEY_RESULT_MESSAGE = \"RESULT MESSAGE\"", "var_name": "KEY_RESULT_MESSAGE"}, {"original_string": "public static final String KEY_RESULTS_PARENT_ACTION = \"RESULTS PARENT ACTION\";", "modifier": "public static final", "type": "String", "declarator": "KEY_RESULTS_PARENT_ACTION = \"RESULTS PARENT ACTION\"", "var_name": "KEY_RESULTS_PARENT_ACTION"}, {"original_string": "private static final String TAG = MapboxOfflineDownloaderService.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = MapboxOfflineDownloaderService.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "public static final String MY_PREFERENCES = \"KUJAKU PREFERENCES\";", "modifier": "public static final", "type": "String", "declarator": "MY_PREFERENCES = \"KUJAKU PREFERENCES\"", "var_name": "MY_PREFERENCES"}, {"original_string": "public static final String PREFERENCE_MAPBOX_ACCESS_TOKEN = \"MAPBOX ACCESS TOKEN\";", "modifier": "public static final", "type": "String", "declarator": "PREFERENCE_MAPBOX_ACCESS_TOKEN = \"MAPBOX ACCESS TOKEN\"", "var_name": "PREFERENCE_MAPBOX_ACCESS_TOKEN"}, {"original_string": "private String mapBoxAccessToken = \"\";", "modifier": "private", "type": "String", "declarator": "mapBoxAccessToken = \"\"", "var_name": "mapBoxAccessToken"}, {"original_string": "private String currentMapDownloadName;", "modifier": "private", "type": "String", "declarator": "currentMapDownloadName", "var_name": "currentMapDownloadName"}, {"original_string": "private SERVICE_ACTION currentServiceAction;", "modifier": "private", "type": "SERVICE_ACTION", "declarator": "currentServiceAction", "var_name": "currentServiceAction"}, {"original_string": "private MapBoxOfflineQueueTask currentMapBoxTask;", "modifier": "private", "type": "MapBoxOfflineQueueTask", "declarator": "currentMapBoxTask", "var_name": "currentMapBoxTask"}, {"original_string": "private long currentMapDownloadId;", "modifier": "private", "type": "long", "declarator": "currentMapDownloadId", "var_name": "currentMapDownloadId"}, {"original_string": "private DownloadProgressNotification downloadProgressNotification;", "modifier": "private", "type": "DownloadProgressNotification", "declarator": "downloadProgressNotification", "var_name": "downloadProgressNotification"}, {"original_string": "public static final int PROGRESS_NOTIFICATION_ID = 80;", "modifier": "public static final", "type": "int", "declarator": "PROGRESS_NOTIFICATION_ID = 80", "var_name": "PROGRESS_NOTIFICATION_ID"}, {"original_string": "public static final int REQUEST_ID_STOP_MAP_DOWNLOAD = 1;", "modifier": "public static final", "type": "int", "declarator": "REQUEST_ID_STOP_MAP_DOWNLOAD = 1", "var_name": "REQUEST_ID_STOP_MAP_DOWNLOAD"}, {"original_string": "public static int LAST_DOWNLOAD_COMPLETE_NOTIFICATION_ID = 81;", "modifier": "public static", "type": "int", "declarator": "LAST_DOWNLOAD_COMPLETE_NOTIFICATION_ID = 81", "var_name": "LAST_DOWNLOAD_COMPLETE_NOTIFICATION_ID"}, {"original_string": "public static int LAST_DOWNLOAD_ERROR_NOTIFICATION_ID = 1081;", "modifier": "public static", "type": "int", "declarator": "LAST_DOWNLOAD_ERROR_NOTIFICATION_ID = 1081", "var_name": "LAST_DOWNLOAD_ERROR_NOTIFICATION_ID"}, {"original_string": "private boolean isPerformingTask = false;", "modifier": "private", "type": "boolean", "declarator": "isPerformingTask = false", "var_name": "isPerformingTask"}, {"original_string": "private RealmDatabase realmDatabase;", "modifier": "private", "type": "RealmDatabase", "declarator": "realmDatabase", "var_name": "realmDatabase"}, {"original_string": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public boolean onStartCommandCalled = false;", "modifier": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public", "type": "boolean", "declarator": "onStartCommandCalled = false", "var_name": "onStartCommandCalled"}, {"original_string": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public boolean persistOfflineMapTaskCalled = false;", "modifier": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public", "type": "boolean", "declarator": "persistOfflineMapTaskCalled = false", "var_name": "persistOfflineMapTaskCalled"}, {"original_string": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public boolean performNextTaskCalled = false;", "modifier": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public", "type": "boolean", "declarator": "performNextTaskCalled = false", "var_name": "performNextTaskCalled"}, {"original_string": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public boolean observeOfflineRegionCalled = false;", "modifier": "@RestrictTo(RestrictTo.Scope.TESTS)\n    public", "type": "boolean", "declarator": "observeOfflineRegionCalled = false", "var_name": "observeOfflineRegionCalled"}, {"original_string": "private double mostRecentPercentageUpdate = 0;", "modifier": "private", "type": "double", "declarator": "mostRecentPercentageUpdate = 0", "var_name": "mostRecentPercentageUpdate"}, {"original_string": "private String mostRecentMapNameUpdate = \"\";", "modifier": "private", "type": "String", "declarator": "mostRecentMapNameUpdate = \"\"", "var_name": "mostRecentMapNameUpdate"}, {"original_string": "private long timeBetweenUpdates = 800;", "modifier": "private", "type": "long", "declarator": "timeBetweenUpdates = 800", "var_name": "timeBetweenUpdates"}, {"original_string": "private boolean hasUpdateToPost = false;", "modifier": "private", "type": "boolean", "declarator": "hasUpdateToPost = false", "var_name": "hasUpdateToPost"}, {"original_string": "private Thread progressUpdateThread;", "modifier": "private", "type": "Thread", "declarator": "progressUpdateThread", "var_name": "progressUpdateThread"}, {"original_string": "private boolean shouldThreadDie = true;", "modifier": "private", "type": "boolean", "declarator": "shouldThreadDie = true", "var_name": "shouldThreadDie"}, {"original_string": "private Handler serviceHandler;", "modifier": "private", "type": "Handler", "declarator": "serviceHandler", "var_name": "serviceHandler"}, {"original_string": "private boolean shownForegroundNotification = false;", "modifier": "private", "type": "boolean", "declarator": "shownForegroundNotification = false", "var_name": "shownForegroundNotification"}, {"original_string": "private long tileDownloadLimit;", "modifier": "private", "type": "long", "declarator": "tileDownloadLimit", "var_name": "tileDownloadLimit"}], "methods": [{"identifier": "MapboxOfflineDownloaderService", "parameters": "()", "modifiers": "public", "return": "", "signature": " MapboxOfflineDownloaderService()", "full_signature": "public  MapboxOfflineDownloaderService()", "class_method_signature": "MapboxOfflineDownloaderService.MapboxOfflineDownloaderService()", "testcase": false, "constructor": true}, {"identifier": "onStartCommand", "parameters": "(@Nullable Intent intent, int flags, int startId)", "modifiers": "@Override public", "return": "int", "signature": "int onStartCommand(@Nullable Intent intent, int flags, int startId)", "full_signature": "@Override public int onStartCommand(@Nullable Intent intent, int flags, int startId)", "class_method_signature": "MapboxOfflineDownloaderService.onStartCommand(@Nullable Intent intent, int flags, int startId)", "testcase": false, "constructor": false}, {"identifier": "onBind", "parameters": "(Intent intent)", "modifiers": "@Nullable @Override public", "return": "IBinder", "signature": "IBinder onBind(Intent intent)", "full_signature": "@Nullable @Override public IBinder onBind(Intent intent)", "class_method_signature": "MapboxOfflineDownloaderService.onBind(Intent intent)", "testcase": false, "constructor": false}, {"identifier": "persistOfflineMapTask", "parameters": "(@Nullable Intent intent)", "modifiers": "protected", "return": "boolean", "signature": "boolean persistOfflineMapTask(@Nullable Intent intent)", "full_signature": "protected boolean persistOfflineMapTask(@Nullable Intent intent)", "class_method_signature": "MapboxOfflineDownloaderService.persistOfflineMapTask(@Nullable Intent intent)", "testcase": false, "constructor": false}, {"identifier": "deleteTaskFromRealmDatabase", "parameters": "(@NonNull String taskType, @NonNull String mapUniqueName)", "modifiers": "private", "return": "boolean", "signature": "boolean deleteTaskFromRealmDatabase(@NonNull String taskType, @NonNull String mapUniqueName)", "full_signature": "private boolean deleteTaskFromRealmDatabase(@NonNull String taskType, @NonNull String mapUniqueName)", "class_method_signature": "MapboxOfflineDownloaderService.deleteTaskFromRealmDatabase(@NonNull String taskType, @NonNull String mapUniqueName)", "testcase": false, "constructor": false}, {"identifier": "performNextTask", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void performNextTask()", "full_signature": "private void performNextTask()", "class_method_signature": "MapboxOfflineDownloaderService.performNextTask()", "testcase": false, "constructor": false}, {"identifier": "cleanupAndExit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanupAndExit()", "full_signature": "private void cleanupAndExit()", "class_method_signature": "MapboxOfflineDownloaderService.cleanupAndExit()", "testcase": false, "constructor": false}, {"identifier": "sendBroadcast", "parameters": "(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, SERVICE_ACTION serviceAction, @NonNull String message)", "modifiers": "private", "return": "void", "signature": "void sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, SERVICE_ACTION serviceAction, @NonNull String message)", "full_signature": "private void sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, SERVICE_ACTION serviceAction, @NonNull String message)", "class_method_signature": "MapboxOfflineDownloaderService.sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, SERVICE_ACTION serviceAction, @NonNull String message)", "testcase": false, "constructor": false}, {"identifier": "sendBroadcast", "parameters": "(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, @NonNull SERVICE_ACTION serviceAction)", "modifiers": "private", "return": "void", "signature": "void sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, @NonNull SERVICE_ACTION serviceAction)", "full_signature": "private void sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, @NonNull SERVICE_ACTION serviceAction)", "class_method_signature": "MapboxOfflineDownloaderService.sendBroadcast(@NonNull SERVICE_ACTION_RESULT serviceActionResult, @NonNull String mapName, @NonNull SERVICE_ACTION serviceAction)", "testcase": false, "constructor": false}, {"identifier": "getTaskStatus", "parameters": "(@NonNull MapBoxOfflineQueueTask mapBoxOfflineQueueTask, @NonNull String mapBoxAccessToken, OfflineRegionStatusCallback offlineRegionStatusCallback)", "modifiers": "private", "return": "void", "signature": "void getTaskStatus(@NonNull MapBoxOfflineQueueTask mapBoxOfflineQueueTask, @NonNull String mapBoxAccessToken, OfflineRegionStatusCallback offlineRegionStatusCallback)", "full_signature": "private void getTaskStatus(@NonNull MapBoxOfflineQueueTask mapBoxOfflineQueueTask, @NonNull String mapBoxAccessToken, OfflineRegionStatusCallback offlineRegionStatusCallback)", "class_method_signature": "MapboxOfflineDownloaderService.getTaskStatus(@NonNull MapBoxOfflineQueueTask mapBoxOfflineQueueTask, @NonNull String mapBoxAccessToken, OfflineRegionStatusCallback offlineRegionStatusCallback)", "testcase": false, "constructor": false}, {"identifier": "showProgressNotification", "parameters": "(@NonNull String mapName, double percentageProgress, boolean showAction)", "modifiers": "private", "return": "void", "signature": "void showProgressNotification(@NonNull String mapName, double percentageProgress, boolean showAction)", "full_signature": "private void showProgressNotification(@NonNull String mapName, double percentageProgress, boolean showAction)", "class_method_signature": "MapboxOfflineDownloaderService.showProgressNotification(@NonNull String mapName, double percentageProgress, boolean showAction)", "testcase": false, "constructor": false}, {"identifier": "showProgressNotification", "parameters": "(@NonNull String mapName, double percentageProgress)", "modifiers": "private", "return": "void", "signature": "void showProgressNotification(@NonNull String mapName, double percentageProgress)", "full_signature": "private void showProgressNotification(@NonNull String mapName, double percentageProgress)", "class_method_signature": "MapboxOfflineDownloaderService.showProgressNotification(@NonNull String mapName, double percentageProgress)", "testcase": false, "constructor": false}, {"identifier": "showDownloadCompleteNotification", "parameters": "(@NonNull String title, @NonNull String description)", "modifiers": "private", "return": "void", "signature": "void showDownloadCompleteNotification(@NonNull String title, @NonNull String description)", "full_signature": "private void showDownloadCompleteNotification(@NonNull String title, @NonNull String description)", "class_method_signature": "MapboxOfflineDownloaderService.showDownloadCompleteNotification(@NonNull String title, @NonNull String description)", "testcase": false, "constructor": false}, {"identifier": "observeOfflineRegion", "parameters": "(@NonNull final OfflineRegion offlineRegion)", "modifiers": "private", "return": "void", "signature": "void observeOfflineRegion(@NonNull final OfflineRegion offlineRegion)", "full_signature": "private void observeOfflineRegion(@NonNull final OfflineRegion offlineRegion)", "class_method_signature": "MapboxOfflineDownloaderService.observeOfflineRegion(@NonNull final OfflineRegion offlineRegion)", "testcase": false, "constructor": false}, {"identifier": "onStatusChanged", "parameters": "(@NonNull OfflineRegionStatus status, @NonNull OfflineRegion offlineRegion)", "modifiers": "@Override public", "return": "void", "signature": "void onStatusChanged(@NonNull OfflineRegionStatus status, @NonNull OfflineRegion offlineRegion)", "full_signature": "@Override public void onStatusChanged(@NonNull OfflineRegionStatus status, @NonNull OfflineRegion offlineRegion)", "class_method_signature": "MapboxOfflineDownloaderService.onStatusChanged(@NonNull OfflineRegionStatus status, @NonNull OfflineRegion offlineRegion)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(String error)", "modifiers": "@Override public", "return": "void", "signature": "void onError(String error)", "full_signature": "@Override public void onError(String error)", "class_method_signature": "MapboxOfflineDownloaderService.onError(String error)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(@NonNull String reason, @Nullable String message)", "modifiers": "@Override public", "return": "void", "signature": "void onError(@NonNull String reason, @Nullable String message)", "full_signature": "@Override public void onError(@NonNull String reason, @Nullable String message)", "class_method_signature": "MapboxOfflineDownloaderService.onError(@NonNull String reason, @Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "mapboxTileCountLimitExceeded", "parameters": "(long limit)", "modifiers": "@Override public", "return": "void", "signature": "void mapboxTileCountLimitExceeded(long limit)", "full_signature": "@Override public void mapboxTileCountLimitExceeded(long limit)", "class_method_signature": "MapboxOfflineDownloaderService.mapboxTileCountLimitExceeded(long limit)", "testcase": false, "constructor": false}, {"identifier": "getFriendlyFileSize", "parameters": "(long bytes)", "modifiers": "private", "return": "String", "signature": "String getFriendlyFileSize(long bytes)", "full_signature": "private String getFriendlyFileSize(long bytes)", "class_method_signature": "MapboxOfflineDownloaderService.getFriendlyFileSize(long bytes)", "testcase": false, "constructor": false}, {"identifier": "queueDownloadProgressUpdate", "parameters": "(@NonNull String mapNameUpdate, @NonNull double progressUpdate)", "modifiers": "private", "return": "void", "signature": "void queueDownloadProgressUpdate(@NonNull String mapNameUpdate, @NonNull double progressUpdate)", "full_signature": "private void queueDownloadProgressUpdate(@NonNull String mapNameUpdate, @NonNull double progressUpdate)", "class_method_signature": "MapboxOfflineDownloaderService.queueDownloadProgressUpdate(@NonNull String mapNameUpdate, @NonNull double progressUpdate)", "testcase": false, "constructor": false}, {"identifier": "startDownloadProgressUpdater", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startDownloadProgressUpdater()", "full_signature": "private void startDownloadProgressUpdater()", "class_method_signature": "MapboxOfflineDownloaderService.startDownloadProgressUpdater()", "testcase": false, "constructor": false}, {"identifier": "placeQueueOnHold", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void placeQueueOnHold()", "full_signature": "private void placeQueueOnHold()", "class_method_signature": "MapboxOfflineDownloaderService.placeQueueOnHold()", "testcase": false, "constructor": false}, {"identifier": "releaseQueueToPerformOtherJobs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseQueueToPerformOtherJobs()", "full_signature": "private void releaseQueueToPerformOtherJobs()", "class_method_signature": "MapboxOfflineDownloaderService.releaseQueueToPerformOtherJobs()", "testcase": false, "constructor": false}, {"identifier": "stopDownloadProgressUpdater", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopDownloadProgressUpdater()", "full_signature": "private void stopDownloadProgressUpdater()", "class_method_signature": "MapboxOfflineDownloaderService.stopDownloadProgressUpdater()", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override public void onDestroy()", "class_method_signature": "MapboxOfflineDownloaderService.onDestroy()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/services/MapboxOfflineDownloaderService.java"}, "focal_method": {"identifier": "persistOfflineMapTask", "parameters": "(@Nullable Intent intent)", "modifiers": "protected", "return": "boolean", "body": "protected boolean persistOfflineMapTask(@Nullable Intent intent) {\n        persistOfflineMapTaskCalled = true;\n        if (intent == null) {\n            return false;\n        }\n\n        Bundle extras = intent.getExtras();\n        if (extras != null\n                && extras.containsKey(Constants.PARCELABLE_KEY_SERVICE_ACTION)) {\n            final SERVICE_ACTION serviceAction = (SERVICE_ACTION) extras.get(Constants.PARCELABLE_KEY_SERVICE_ACTION);\n\n            if (extras.containsKey(Constants.PARCELABLE_KEY_MAP_UNIQUE_NAME)\n                    && extras.containsKey(Constants.PARCELABLE_KEY_MAPBOX_ACCESS_TOKEN)) {\n                final String mapUniqueName = extras.getString(Constants.PARCELABLE_KEY_MAP_UNIQUE_NAME);\n                mapBoxAccessToken = extras.getString(Constants.PARCELABLE_KEY_MAPBOX_ACCESS_TOKEN);\n\n                Mapbox.getInstance(this, mapBoxAccessToken);\n\n                MapBoxDownloadTask downloadTask = new MapBoxDownloadTask();\n                downloadTask.setMapName(mapUniqueName);\n                downloadTask.setMapBoxAccessToken(mapBoxAccessToken);\n\n                if (serviceAction == SERVICE_ACTION.DOWNLOAD_MAP) {\n                    if (extras.containsKey(Constants.PARCELABLE_KEY_STYLE_URL)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_MAX_ZOOM)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_MIN_ZOOM)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_TOP_LEFT_BOUND)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_TOP_RIGHT_BOUND)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_BOTTOM_RIGHT_BOUND)\n                            && extras.containsKey(Constants.PARCELABLE_KEY_BOTTOM_LEFT_BOUND)) {\n\n                        downloadTask.setPackageName(\"kl\");\n                        downloadTask.setMapBoxStyleUrl(extras.getString(Constants.PARCELABLE_KEY_STYLE_URL));\n                        downloadTask.setMaxZoom(ObjectCoercer.coerceNumberObjectToDoublePrimitive(extras.get(Constants.PARCELABLE_KEY_MAX_ZOOM)));\n                        downloadTask.setMinZoom(ObjectCoercer.coerceNumberObjectToDoublePrimitive(extras.get(Constants.PARCELABLE_KEY_MIN_ZOOM)));\n                        downloadTask.setTopLeftBound((LatLng) extras.getParcelable(Constants.PARCELABLE_KEY_TOP_LEFT_BOUND));\n                        downloadTask.setTopRightBound((LatLng) extras.getParcelable(Constants.PARCELABLE_KEY_TOP_RIGHT_BOUND));\n                        downloadTask.setBottomRightBound((LatLng) extras.getParcelable(Constants.PARCELABLE_KEY_BOTTOM_RIGHT_BOUND));\n                        downloadTask.setBottomLeftBound((LatLng) extras.getParcelable(Constants.PARCELABLE_KEY_BOTTOM_LEFT_BOUND));\n\n                        realmDatabase.deletePendingOfflineMapDownloadsWithSimilarNames(mapUniqueName);\n\n                        MapBoxDownloadTask.constructMapBoxOfflineQueueTask(downloadTask);\n                        return true;\n                    }\n                } else if (serviceAction == SERVICE_ACTION.DELETE_MAP) {\n                    MapBoxDeleteTask deleteTask = new MapBoxDeleteTask();\n                    deleteTask.setMapBoxAccessToken(mapBoxAccessToken);\n                    deleteTask.setMapName(mapUniqueName);\n\n                    MapBoxDeleteTask.constructMapBoxOfflineQueueTask(deleteTask);\n\n                    return true;\n                } else {\n                    final String taskType = extras.getString(Constants.PARCELABLE_KEY_DELETE_TASK_TYPE, \"\");\n\n                    if (!TextUtils.isEmpty(taskType)) {\n                        if (taskType.equals(MapBoxOfflineQueueTask.TASK_TYPE_DOWNLOAD) && mostRecentMapNameUpdate.equals(mapUniqueName)) {\n                            MapBoxOfflineResourcesDownloader mapBoxOfflineResourcesDownloader = MapBoxOfflineResourcesDownloader.getInstance(this, mapBoxAccessToken);\n\n                            // Remove the STOP DOWNLOAD ACTION from the notification so that it cannot be pressed and cause the app to crash!\n                            showProgressNotification(mostRecentMapNameUpdate, mostRecentPercentageUpdate, false);\n\n                            // Stop the download first\n                            mapBoxOfflineResourcesDownloader.pauseMapDownload(mapUniqueName, new OnPauseMapDownloadCallback() {\n                                @Override\n                                public void onPauseSuccess() {\n                                    MapBoxOfflineResourcesDownloader\n                                            .getInstance(MapboxOfflineDownloaderService.this, mapBoxAccessToken)\n                                            .deleteMap(mapUniqueName, new OfflineRegion.OfflineRegionDeleteCallback() {\n\n                                                @Override\n                                                public void onDelete() {\n                                                    if (deleteTaskFromRealmDatabase(taskType, mapUniqueName)) {\n                                                        sendBroadcast(SERVICE_ACTION_RESULT.SUCCESSFUL, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD);\n                                                        showDownloadCompleteNotification(String.format(getString(R.string.notification_stopped_download_title), mapUniqueName), getString(R.string.notification_stopped_download_content));\n                                                    } else {\n                                                        sendBroadcast(SERVICE_ACTION_RESULT.FAILED, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, getString(R.string.map_delete_task_error));\n                                                    }\n                                                    releaseQueueToPerformOtherJobs();\n\n                                                    performNextTask();\n                                                }\n\n                                                @Override\n                                                public void onError(String error) {\n                                                    sendBroadcast(SERVICE_ACTION_RESULT.FAILED, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, error);\n                                                }\n                                            });\n                                }\n\n                                @Override\n                                public void onPauseError(String error) {\n                                    sendBroadcast(SERVICE_ACTION_RESULT.FAILED, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, String.format(getString(R.string.error_broadcast_for_download_pause), error));\n                                }\n                            });\n                        } else {\n                            if (deleteTaskFromRealmDatabase(taskType, mapUniqueName)) {\n                                // Communicate if the delete task was successful\n                                sendBroadcast(SERVICE_ACTION_RESULT.SUCCESSFUL, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD);\n                            } else {\n                                // Send a broadcast that the delete task was unsuccessful because the task could not be found\n                                sendBroadcast(SERVICE_ACTION_RESULT.FAILED, mapUniqueName, SERVICE_ACTION.STOP_CURRENT_DOWNLOAD, String.format(getString(R.string.error_broadcast_for_download_pause), \"Map could not be found\"));\n                            }\n                        }\n                    }\n\n                }\n\n            }\n\n        }\n\n        return false;\n    }", "signature": "boolean persistOfflineMapTask(@Nullable Intent intent)", "full_signature": "protected boolean persistOfflineMapTask(@Nullable Intent intent)", "class_method_signature": "MapboxOfflineDownloaderService.persistOfflineMapTask(@Nullable Intent intent)", "testcase": false, "constructor": false, "invocations": ["getExtras", "containsKey", "get", "containsKey", "containsKey", "getString", "getString", "getInstance", "setMapName", "setMapBoxAccessToken", "containsKey", "containsKey", "containsKey", "containsKey", "containsKey", "containsKey", "containsKey", "setPackageName", "setMapBoxStyleUrl", "getString", "setMaxZoom", "coerceNumberObjectToDoublePrimitive", "get", "setMinZoom", "coerceNumberObjectToDoublePrimitive", "get", "setTopLeftBound", "getParcelable", "setTopRightBound", "getParcelable", "setBottomRightBound", "getParcelable", "setBottomLeftBound", "getParcelable", "deletePendingOfflineMapDownloadsWithSimilarNames", "constructMapBoxOfflineQueueTask", "setMapBoxAccessToken", "setMapName", "constructMapBoxOfflineQueueTask", "getString", "isEmpty", "equals", "equals", "getInstance", "showProgressNotification", "pauseMapDownload", "deleteMap", "getInstance", "deleteTaskFromRealmDatabase", "sendBroadcast", "showDownloadCompleteNotification", "format", "getString", "getString", "sendBroadcast", "getString", "releaseQueueToPerformOtherJobs", "performNextTask", "sendBroadcast", "sendBroadcast", "format", "getString", "deleteTaskFromRealmDatabase", "sendBroadcast", "sendBroadcast", "format", "getString"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}