{"test_class": {"identifier": "SubJavaVersionProfileActivatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "jetty-maven-java-profile-activator/src/test/java/org/eclipse/jetty/toolchain/maven/SubJavaVersionProfileActivatorTest.java"}, "test_case": {"identifier": "activatedSubJavaVersion4digitsRangeAndVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void activatedSubJavaVersion4digitsRangeAndVersion()\n    {\n        SubJavaVersionProfileActivator activator = new SubJavaVersionProfileActivator();\n        Profile profile = new Profile();\n        profile.setId( \"test\" );\n        profile.setActivation( new Activation(){\n            @Override\n            public String getJdk()\n            {\n                return \"[1.8,1.8.0_200)\";\n            }\n        } );\n\n        ProfileActivationContext context = new DefaultProfileActivationContext(){\n            @Override\n            public Map<String, String> getSystemProperties()\n            {\n                Map<String,String> props = new HashMap<>();\n                props.put( \"java.version\", \"1.8.0_199-b24\" );\n                return props;\n            }\n        };\n\n        boolean activated = activator.isActive( profile, context, null);\n        assertThat(\"Not Activated\", activated, is(true));\n    }", "signature": "void activatedSubJavaVersion4digitsRangeAndVersion()", "full_signature": "@Test public void activatedSubJavaVersion4digitsRangeAndVersion()", "class_method_signature": "SubJavaVersionProfileActivatorTest.activatedSubJavaVersion4digitsRangeAndVersion()", "testcase": true, "constructor": false, "invocations": ["setId", "setActivation", "put", "isActive", "assertThat", "is"]}, "focal_class": {"identifier": "SubJavaVersionProfileActivator", "superclass": "", "interfaces": "implements ProfileActivator", "fields": [], "methods": [{"identifier": "isActive", "parameters": "( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "full_signature": "@Override public boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "class_method_signature": "SubJavaVersionProfileActivator.isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "testcase": false, "constructor": false}, {"identifier": "presentInConfig", "parameters": "( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "full_signature": "@Override public boolean presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "class_method_signature": "SubJavaVersionProfileActivator.presentInConfig( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "testcase": false, "constructor": false}, {"identifier": "isInRange", "parameters": "( String value, List<RangeValue> range )", "modifiers": "private static", "return": "boolean", "signature": "boolean isInRange( String value, List<RangeValue> range )", "full_signature": "private static boolean isInRange( String value, List<RangeValue> range )", "class_method_signature": "SubJavaVersionProfileActivator.isInRange( String value, List<RangeValue> range )", "testcase": false, "constructor": false}, {"identifier": "getRelationOrder", "parameters": "( String value, RangeValue rangeValue, boolean isLeft )", "modifiers": "private static", "return": "int", "signature": "int getRelationOrder( String value, RangeValue rangeValue, boolean isLeft )", "full_signature": "private static int getRelationOrder( String value, RangeValue rangeValue, boolean isLeft )", "class_method_signature": "SubJavaVersionProfileActivator.getRelationOrder( String value, RangeValue rangeValue, boolean isLeft )", "testcase": false, "constructor": false}, {"identifier": "addZeroTokens", "parameters": "( List<String> tokens, int max )", "modifiers": "private static", "return": "void", "signature": "void addZeroTokens( List<String> tokens, int max )", "full_signature": "private static void addZeroTokens( List<String> tokens, int max )", "class_method_signature": "SubJavaVersionProfileActivator.addZeroTokens( List<String> tokens, int max )", "testcase": false, "constructor": false}, {"identifier": "isRange", "parameters": "( String value )", "modifiers": "private static", "return": "boolean", "signature": "boolean isRange( String value )", "full_signature": "private static boolean isRange( String value )", "class_method_signature": "SubJavaVersionProfileActivator.isRange( String value )", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "( String range )", "modifiers": "private static", "return": "List<RangeValue>", "signature": "List<RangeValue> getRange( String range )", "full_signature": "private static List<RangeValue> getRange( String range )", "class_method_signature": "SubJavaVersionProfileActivator.getRange( String range )", "testcase": false, "constructor": false}], "file": "jetty-maven-java-profile-activator/src/main/java/org/eclipse/jetty/toolchain/maven/SubJavaVersionProfileActivator.java"}, "focal_method": {"identifier": "isActive", "parameters": "( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )\n    {\n        Activation activation = profile.getActivation();\n\n        if ( activation == null )\n        {\n            return false;\n        }\n\n        String jdk = activation.getJdk();\n\n        if ( jdk == null )\n        {\n            return false;\n        }\n\n        String version = context.getSystemProperties().get( \"java.version\" );\n\n        if ( version == null || version.length() <= 0 )\n        {\n            problems.add( new ModelProblemCollectorRequest( ModelProblem.Severity.ERROR, ModelProblem.Version.BASE )\n                              .setMessage( \"Failed to determine Java version for profile \" + profile.getId() )\n                              .setLocation( activation.getLocation( \"jdk\" ) ) );\n            return false;\n        }\n\n        if ( jdk.startsWith( \"!\" ) )\n        {\n            return !version.startsWith( jdk.substring( 1 ) );\n        }\n        else if ( isRange( jdk ) )\n        {\n            return isInRange( version, getRange( jdk ) );\n        }\n        else\n        {\n            return version.startsWith( jdk );\n        }\n    }", "signature": "boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "full_signature": "@Override public boolean isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "class_method_signature": "SubJavaVersionProfileActivator.isActive( Profile profile, ProfileActivationContext context, ModelProblemCollector problems )", "testcase": false, "constructor": false, "invocations": ["getActivation", "getJdk", "get", "getSystemProperties", "length", "add", "setLocation", "setMessage", "getId", "getLocation", "startsWith", "startsWith", "substring", "isRange", "isInRange", "getRange", "startsWith"]}, "repository": {"repo_id": 2045140, "url": "https://github.com/eclipse/jetty.toolchain", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 10, "size": 2094, "license": "licensed"}}