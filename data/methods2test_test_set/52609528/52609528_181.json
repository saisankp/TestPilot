{"test_class": {"identifier": "ConfigurationResourceManagerTest", "superclass": "extends ConfigurationResourceTestBase", "interfaces": "", "fields": [{"original_string": "private ConfigurationResourceManager configurationResourceManager;", "modifier": "private", "type": "ConfigurationResourceManager", "declarator": "configurationResourceManager", "var_name": "configurationResourceManager"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/configuration/ConfigurationResourceManagerTest.java"}, "test_case": {"identifier": "testRequestWithoutUri", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestWithoutUri(TestContext context) {\n        Async async = context.async();\n        MockResourceStorage storage = new MockResourceStorage();\n        configurationResourceManager = new ConfigurationResourceManager(vertx, storage);\n\n        String resourceURI = \"/gateleen/resources/person\";\n\n        PersonResourceRequest request = new PersonResourceRequest(HttpMethod.PUT, null,\n                null, null, new DummyHttpServerResponse());\n\n        // resource should not be in storage\n        context.assertFalse(storage.getMockData().containsKey(resourceURI));\n\n        boolean handled = configurationResourceManager.handleConfigurationResource(request);\n        context.assertFalse(handled, \"PUT Request without uri should not have been handled\");\n\n        // resource should still not be in storage\n        await().atMost(3, SECONDS).until( () -> storage.getMockData().get(resourceURI), nullValue());\n\n        async.complete();\n    }", "signature": "void testRequestWithoutUri(TestContext context)", "full_signature": "@Test public void testRequestWithoutUri(TestContext context)", "class_method_signature": "ConfigurationResourceManagerTest.testRequestWithoutUri(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "assertFalse", "containsKey", "getMockData", "handleConfigurationResource", "assertFalse", "until", "atMost", "await", "get", "getMockData", "nullValue", "complete"]}, "focal_class": {"identifier": "ConfigurationResourceManager", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(ConfigurationResourceManager.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConfigurationResourceManager.class)", "var_name": "log"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private Map<String, String> registeredResources;", "modifier": "private", "type": "Map<String, String>", "declarator": "registeredResources", "var_name": "registeredResources"}, {"original_string": "private Map<String, List<ConfigurationResourceObserver>> observers;", "modifier": "private", "type": "Map<String, List<ConfigurationResourceObserver>>", "declarator": "observers", "var_name": "observers"}, {"original_string": "private ConfigurationResourceValidator configurationResourceValidator;", "modifier": "private", "type": "ConfigurationResourceValidator", "declarator": "configurationResourceValidator", "var_name": "configurationResourceValidator"}, {"original_string": "private boolean logConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logConfigurationResourceChanges = false", "var_name": "logConfigurationResourceChanges"}, {"original_string": "public static final String CONFIG_RESOURCE_CHANGED_ADDRESS = \"gateleen.configuration-resource-changed\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_RESOURCE_CHANGED_ADDRESS = \"gateleen.configuration-resource-changed\"", "var_name": "CONFIG_RESOURCE_CHANGED_ADDRESS"}, {"original_string": "private static final String MESSAGE_REQUEST_URI = \"requestUri\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_REQUEST_URI = \"requestUri\"", "var_name": "MESSAGE_REQUEST_URI"}, {"original_string": "private static final String MESSAGE_RESOURCE_TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE_RESOURCE_TYPE = \"type\"", "var_name": "MESSAGE_RESOURCE_TYPE"}], "methods": [{"identifier": "ConfigurationResourceManager", "parameters": "(Vertx vertx, final ResourceStorage storage)", "modifiers": "public", "return": "", "signature": " ConfigurationResourceManager(Vertx vertx, final ResourceStorage storage)", "full_signature": "public  ConfigurationResourceManager(Vertx vertx, final ResourceStorage storage)", "class_method_signature": "ConfigurationResourceManager.ConfigurationResourceManager(Vertx vertx, final ResourceStorage storage)", "testcase": false, "constructor": true}, {"identifier": "getRegisteredResource", "parameters": "(String resourceUri)", "modifiers": "public", "return": "Future<Optional<Buffer>>", "signature": "Future<Optional<Buffer>> getRegisteredResource(String resourceUri)", "full_signature": "public Future<Optional<Buffer>> getRegisteredResource(String resourceUri)", "class_method_signature": "ConfigurationResourceManager.getRegisteredResource(String resourceUri)", "testcase": false, "constructor": false}, {"identifier": "registerResource", "parameters": "(String resourceUri, String resourceSchema)", "modifiers": "public", "return": "void", "signature": "void registerResource(String resourceUri, String resourceSchema)", "full_signature": "public void registerResource(String resourceUri, String resourceSchema)", "class_method_signature": "ConfigurationResourceManager.registerResource(String resourceUri, String resourceSchema)", "testcase": false, "constructor": false}, {"identifier": "registerObserver", "parameters": "(ConfigurationResourceObserver observer, String resourceUri)", "modifiers": "public", "return": "void", "signature": "void registerObserver(ConfigurationResourceObserver observer, String resourceUri)", "full_signature": "public void registerObserver(ConfigurationResourceObserver observer, String resourceUri)", "class_method_signature": "ConfigurationResourceManager.registerObserver(ConfigurationResourceObserver observer, String resourceUri)", "testcase": false, "constructor": false}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "ConfigurationResourceManager.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "handleConfigurationResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handleConfigurationResource(final HttpServerRequest request)", "full_signature": "public boolean handleConfigurationResource(final HttpServerRequest request)", "class_method_signature": "ConfigurationResourceManager.handleConfigurationResource(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredResources", "parameters": "()", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getRegisteredResources()", "full_signature": "private Map<String, String> getRegisteredResources()", "class_method_signature": "ConfigurationResourceManager.getRegisteredResources()", "testcase": false, "constructor": false}, {"identifier": "getObservers", "parameters": "()", "modifiers": "public", "return": "Map<String, List<ConfigurationResourceObserver>>", "signature": "Map<String, List<ConfigurationResourceObserver>> getObservers()", "full_signature": "public Map<String, List<ConfigurationResourceObserver>> getObservers()", "class_method_signature": "ConfigurationResourceManager.getObservers()", "testcase": false, "constructor": false}, {"identifier": "getValidatedRegisteredResource", "parameters": "(String resourceUri)", "modifiers": "private", "return": "Future<Optional<Buffer>>", "signature": "Future<Optional<Buffer>> getValidatedRegisteredResource(String resourceUri)", "full_signature": "private Future<Optional<Buffer>> getValidatedRegisteredResource(String resourceUri)", "class_method_signature": "ConfigurationResourceManager.getValidatedRegisteredResource(String resourceUri)", "testcase": false, "constructor": false}, {"identifier": "notifyObserversAboutRemovedResource", "parameters": "(String requestUri)", "modifiers": "private", "return": "void", "signature": "void notifyObserversAboutRemovedResource(String requestUri)", "full_signature": "private void notifyObserversAboutRemovedResource(String requestUri)", "class_method_signature": "ConfigurationResourceManager.notifyObserversAboutRemovedResource(String requestUri)", "testcase": false, "constructor": false}, {"identifier": "notifyObserverAboutResourceChange", "parameters": "(String requestUri, ConfigurationResourceObserver observer)", "modifiers": "private", "return": "void", "signature": "void notifyObserverAboutResourceChange(String requestUri, ConfigurationResourceObserver observer)", "full_signature": "private void notifyObserverAboutResourceChange(String requestUri, ConfigurationResourceObserver observer)", "class_method_signature": "ConfigurationResourceManager.notifyObserverAboutResourceChange(String requestUri, ConfigurationResourceObserver observer)", "testcase": false, "constructor": false}, {"identifier": "getObserversByResourceUri", "parameters": "(String resourceUri)", "modifiers": "private", "return": "List<ConfigurationResourceObserver>", "signature": "List<ConfigurationResourceObserver> getObserversByResourceUri(String resourceUri)", "full_signature": "private List<ConfigurationResourceObserver> getObserversByResourceUri(String resourceUri)", "class_method_signature": "ConfigurationResourceManager.getObserversByResourceUri(String resourceUri)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/configuration/ConfigurationResourceManager.java"}, "focal_method": {"identifier": "handleConfigurationResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean handleConfigurationResource(final HttpServerRequest request) {\n        final Logger requestLog = RequestLoggerFactory.getLogger(ConfigurationResourceManager.class, request);\n\n        if(null == getRegisteredResources().get(request.uri())){\n            return false;\n        }\n\n        String resourceUri = request.uri();\n        String resourceSchema = getRegisteredResources().get(request.uri());\n\n        if(HttpMethod.PUT == request.method()) {\n            requestLog.info(\"Refresh resource \" + resourceUri);\n            request.bodyHandler(buffer -> configurationResourceValidator.validateConfigurationResource(buffer, resourceSchema, event -> {\n                if (event.failed() || (event.succeeded() && !event.result().isSuccess())) {\n                    requestLog.error(\"Could not parse configuration resource for uri '\" + resourceUri + \"' message: \" + event.result().getMessage());\n                    request.response().setStatusCode(StatusCode.BAD_REQUEST.getStatusCode());\n                    request.response().setStatusMessage(StatusCode.BAD_REQUEST.getStatusMessage() + \" \" + event.result().getMessage());\n                    ResponseStatusCodeLogUtil.info(request, StatusCode.BAD_REQUEST, ConfigurationResourceManager.class);\n                    if (event.result().getValidationDetails() != null) {\n                        request.response().headers().add(\"content-type\", \"application/json\");\n                        request.response().end(event.result().getValidationDetails().encode());\n                    } else {\n                        request.response().end(event.result().getMessage());\n                    }\n                } else {\n                    storage.put(resourceUri, buffer, status -> {\n                        if (status == StatusCode.OK.getStatusCode()) {\n                            if(logConfigurationResourceChanges){\n                                RequestLogger.logRequest(vertx.eventBus(), request, status, buffer);\n                            }\n                            JsonObject object = new JsonObject();\n                            object.put(\"requestUri\", resourceUri);\n                            object.put(\"type\", ConfigurationResourceChangeType.CHANGE);\n                            vertx.eventBus().publish(CONFIG_RESOURCE_CHANGED_ADDRESS, object);\n                        } else {\n                            request.response().setStatusCode(status);\n                        }\n                        ResponseStatusCodeLogUtil.info(request, StatusCode.fromCode(status), ConfigurationResourceManager.class);\n                        request.response().end();\n                    });\n                }\n            }));\n            return true;\n        }\n\n        if(HttpMethod.DELETE == request.method()) {\n            requestLog.info(\"Remove resource \" + resourceUri);\n            storage.delete(resourceUri, status -> {\n                if (status == StatusCode.OK.getStatusCode()) {\n                    JsonObject object = new JsonObject();\n                    object.put(\"requestUri\", resourceUri);\n                    object.put(\"type\", ConfigurationResourceChangeType.REMOVE);\n                    vertx.eventBus().publish(CONFIG_RESOURCE_CHANGED_ADDRESS, object);\n                } else {\n                    request.response().setStatusCode(status);\n                }\n                request.response().end();\n            });\n            return true;\n        }\n\n        return false;\n    }", "signature": "boolean handleConfigurationResource(final HttpServerRequest request)", "full_signature": "public boolean handleConfigurationResource(final HttpServerRequest request)", "class_method_signature": "ConfigurationResourceManager.handleConfigurationResource(final HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["getLogger", "get", "getRegisteredResources", "uri", "uri", "get", "getRegisteredResources", "uri", "method", "info", "bodyHandler", "validateConfigurationResource", "failed", "succeeded", "isSuccess", "result", "error", "getMessage", "result", "setStatusCode", "response", "getStatusCode", "setStatusMessage", "response", "getStatusMessage", "getMessage", "result", "info", "getValidationDetails", "result", "add", "headers", "response", "end", "response", "encode", "getValidationDetails", "result", "end", "response", "getMessage", "result", "put", "getStatusCode", "logRequest", "eventBus", "put", "put", "publish", "eventBus", "setStatusCode", "response", "info", "fromCode", "end", "response", "method", "info", "delete", "getStatusCode", "put", "put", "publish", "eventBus", "setStatusCode", "response", "end", "response"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}