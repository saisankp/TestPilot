{"test_class": {"identifier": "ChecksumHistoryDAOImplTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [], "file": "dspace-api/src/test/java/org/dspace/checker/dao/impl/ChecksumHistoryDAOImplTest.java"}, "test_case": {"identifier": "testDeleteByDateAndCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeleteByDateAndCode()\n            throws Exception\n    {\n        System.out.println(\"deleteByDateAndCode\");\n\n        GregorianCalendar cal = new GregorianCalendar();\n        Date retentionDate = cal.getTime();\n        ChecksumResultCode resultCode = ChecksumResultCode.CHECKSUM_MATCH;\n\n        // Create two older rows\n        HibernateDBConnection dbc = (HibernateDBConnection) CoreHelpers.getDBConnection(context);\n        Query qry = dbc.getSession().createSQLQuery(\n                \"INSERT INTO checksum_history\"\n                        + \"(check_id, process_end_date, result, bitstream_id)\"\n                        + \" VALUES (:id, :date, :result, :bitstream)\");\n        int checkId = 0;\n\n        // Row with matching result code\n        BitstreamService bss = ContentServiceFactory.getInstance().getBitstreamService();\n        InputStream is = new ByteArrayInputStream(new byte[0]);\n        Bitstream bs = bss.create(context, is);\n        context.turnOffAuthorisationSystem();\n        bss.update(context, bs);\n        context.restoreAuthSystemState();\n\n        cal.add(Calendar.DATE, -1);\n        Date matchDate = cal.getTime();\n        checkId++;\n        qry.setInteger(\"id\", checkId);\n        qry.setDate(\"date\", matchDate);\n        qry.setString(\"result\", ChecksumResultCode.CHECKSUM_MATCH.name());\n        qry.setParameter(\"bitstream\", bs.getID()); // FIXME identifier not being set???\n        qry.executeUpdate();\n\n        // Row with nonmatching result code\n        cal.add(Calendar.DATE, -1);\n        Date noMatchDate = cal.getTime();\n        checkId++;\n        qry.setInteger(\"id\", checkId);\n        qry.setDate(\"date\", noMatchDate);\n        qry.setString(\"result\", ChecksumResultCode.CHECKSUM_NO_MATCH.name());\n        qry.setParameter(\"bitstream\", bs.getID()); // FIXME identifier not being set???\n        qry.executeUpdate();\n\n        // Create one newer row\n        cal.add(Calendar.DATE, +3);\n        Date futureDate = cal.getTime();\n        checkId++;\n        qry.setInteger(\"id\", checkId);\n        qry.setDate(\"date\", new java.sql.Date(futureDate.getTime()));\n        qry.setString(\"result\", ChecksumResultCode.CHECKSUM_MATCH.name());\n        qry.setParameter(\"bitstream\", bs.getID()); // FIXME identifier not being set???\n        qry.executeUpdate();\n\n        // Test!\n        ChecksumHistoryDAOImpl instance = new ChecksumHistoryDAOImpl();\n        int expResult = 1;\n        int result = instance.deleteByDateAndCode(context, retentionDate,\n                resultCode);\n        assertEquals(expResult, result);\n\n        // See if matching old row is gone.\n        qry = dbc.getSession().createQuery(\n                \"SELECT COUNT(*) FROM ChecksumHistory WHERE process_end_date = :date\");\n        long count;\n\n        qry.setDate(\"date\", matchDate);\n        count = (Long) qry.uniqueResult();\n        assertEquals(\"Should find no row at matchDate\", count, 0);\n\n        // See if nonmatching old row is still present.\n        qry.setDate(\"date\", noMatchDate);\n        count = (Long) qry.uniqueResult();\n        assertEquals(\"Should find one row at noMatchDate\", count, 1);\n\n        // See if new row is still present.\n        qry.setDate(\"date\", futureDate);\n        count = (Long) qry.uniqueResult();\n        assertEquals(\"Should find one row at futureDate\", count, 1);\n    }", "signature": "void testDeleteByDateAndCode()", "full_signature": "@Test public void testDeleteByDateAndCode()", "class_method_signature": "ChecksumHistoryDAOImplTest.testDeleteByDateAndCode()", "testcase": true, "constructor": false, "invocations": ["println", "getTime", "getDBConnection", "createSQLQuery", "getSession", "getBitstreamService", "getInstance", "create", "turnOffAuthorisationSystem", "update", "restoreAuthSystemState", "add", "getTime", "setInteger", "setDate", "setString", "name", "setParameter", "getID", "executeUpdate", "add", "getTime", "setInteger", "setDate", "setString", "name", "setParameter", "getID", "executeUpdate", "add", "getTime", "setInteger", "setDate", "getTime", "setString", "name", "setParameter", "getID", "executeUpdate", "deleteByDateAndCode", "assertEquals", "createQuery", "getSession", "setDate", "uniqueResult", "assertEquals", "setDate", "uniqueResult", "assertEquals", "setDate", "uniqueResult", "assertEquals"]}, "focal_class": {"identifier": "ChecksumHistoryDAOImpl", "superclass": "extends AbstractHibernateDAO<ChecksumHistory>", "interfaces": "implements ChecksumHistoryDAO", "fields": [], "methods": [{"identifier": "ChecksumHistoryDAOImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " ChecksumHistoryDAOImpl()", "full_signature": "protected  ChecksumHistoryDAOImpl()", "class_method_signature": "ChecksumHistoryDAOImpl.ChecksumHistoryDAOImpl()", "testcase": false, "constructor": true}, {"identifier": "deleteByDateAndCode", "parameters": "(Context context, Date retentionDate, ChecksumResultCode resultCode)", "modifiers": "@Override public", "return": "int", "signature": "int deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "full_signature": "@Override public int deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "class_method_signature": "ChecksumHistoryDAOImpl.deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "testcase": false, "constructor": false}, {"identifier": "deleteByBitstream", "parameters": "(Context context, Bitstream bitstream)", "modifiers": "@Override public", "return": "void", "signature": "void deleteByBitstream(Context context, Bitstream bitstream)", "full_signature": "@Override public void deleteByBitstream(Context context, Bitstream bitstream)", "class_method_signature": "ChecksumHistoryDAOImpl.deleteByBitstream(Context context, Bitstream bitstream)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/checker/dao/impl/ChecksumHistoryDAOImpl.java"}, "focal_method": {"identifier": "deleteByDateAndCode", "parameters": "(Context context, Date retentionDate, ChecksumResultCode resultCode)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode) throws SQLException {\n        String hql = \"delete from ChecksumHistory where processEndDate < :processEndDate AND checksumResult.resultCode=:resultCode\";\n        Query query = createQuery(context, hql);\n        query.setTimestamp(\"processEndDate\", retentionDate);\n        query.setParameter(\"resultCode\", resultCode);\n        return query.executeUpdate();\n    }", "signature": "int deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "full_signature": "@Override public int deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "class_method_signature": "ChecksumHistoryDAOImpl.deleteByDateAndCode(Context context, Date retentionDate, ChecksumResultCode resultCode)", "testcase": false, "constructor": false, "invocations": ["createQuery", "setTimestamp", "setParameter", "executeUpdate"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}