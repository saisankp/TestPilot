{"test_class": {"identifier": "HistogramActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/HistogramActionTest.java"}, "test_case": {"identifier": "testHistogramActionIntervalMinuteWithFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHistogramActionIntervalMinuteWithFilter() throws FoxtrotException, JsonProcessingException {\n        HistogramRequest histogramRequest = new HistogramRequest();\n        histogramRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        histogramRequest.setPeriod(Period.minutes);\n        GreaterThanFilter greaterThanFilter = new GreaterThanFilter();\n        greaterThanFilter.setField(\"battery\");\n        greaterThanFilter.setValue(48);\n        LessThanFilter lessThanFilter = new LessThanFilter();\n        lessThanFilter.setTemporal(true);\n        lessThanFilter.setField(\"_timestamp\");\n        lessThanFilter.setValue(System.currentTimeMillis());\n        histogramRequest.setFilters(Lists.<Filter>newArrayList(greaterThanFilter, lessThanFilter));\n        HistogramResponse response = HistogramResponse.class.cast(getQueryExecutor().execute(histogramRequest));\n        filterNonZeroCounts(response);\n\n        List<HistogramResponse.Count> counts = new ArrayList<HistogramResponse.Count>();\n        counts.add(new HistogramResponse.Count(1397651100000L, 1));\n        counts.add(new HistogramResponse.Count(1397658060000L, 2));\n        counts.add(new HistogramResponse.Count(1397658180000L, 1));\n        counts.add(new HistogramResponse.Count(1397958060000L, 1));\n        counts.add(new HistogramResponse.Count(1398658200000L, 1));\n        assertEquals(response.getCounts(), counts);\n    }", "signature": "void testHistogramActionIntervalMinuteWithFilter()", "full_signature": "@Test public void testHistogramActionIntervalMinuteWithFilter()", "class_method_signature": "HistogramActionTest.testHistogramActionIntervalMinuteWithFilter()", "testcase": true, "constructor": false, "invocations": ["setTable", "setPeriod", "setField", "setValue", "setTemporal", "setField", "setValue", "currentTimeMillis", "setFilters", "newArrayList", "cast", "execute", "getQueryExecutor", "filterNonZeroCounts", "add", "add", "add", "add", "add", "assertEquals", "getCounts"]}, "focal_class": {"identifier": "HistogramAction", "superclass": "extends Action<HistogramRequest>", "interfaces": "", "fields": [{"original_string": "private final ElasticsearchTuningConfig elasticsearchTuningConfig;", "modifier": "private final", "type": "ElasticsearchTuningConfig", "declarator": "elasticsearchTuningConfig", "var_name": "elasticsearchTuningConfig"}], "methods": [{"identifier": "HistogramAction", "parameters": "(HistogramRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " HistogramAction(HistogramRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  HistogramAction(HistogramRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "HistogramAction.HistogramAction(HistogramRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "HistogramAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "HistogramAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "HistogramAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(HistogramRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(HistogramRequest parameter)", "full_signature": "@Override public void validateImpl(HistogramRequest parameter)", "class_method_signature": "HistogramAction.validateImpl(HistogramRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(HistogramRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(HistogramRequest parameter)", "full_signature": "@Override public ActionResponse execute(HistogramRequest parameter)", "class_method_signature": "HistogramAction.execute(HistogramRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(HistogramRequest parameter)", "modifiers": "@Override public", "return": "SearchRequestBuilder", "signature": "SearchRequestBuilder getRequestBuilder(HistogramRequest parameter)", "full_signature": "@Override public SearchRequestBuilder getRequestBuilder(HistogramRequest parameter)", "class_method_signature": "HistogramAction.getRequestBuilder(HistogramRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse response, HistogramRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, HistogramRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse response, HistogramRequest parameter)", "class_method_signature": "HistogramAction.getResponse(org.elasticsearch.action.ActionResponse response, HistogramRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(Aggregations aggregations)", "modifiers": "private", "return": "HistogramResponse", "signature": "HistogramResponse buildResponse(Aggregations aggregations)", "full_signature": "private HistogramResponse buildResponse(Aggregations aggregations)", "class_method_signature": "HistogramAction.buildResponse(Aggregations aggregations)", "testcase": false, "constructor": false}, {"identifier": "buildAggregation", "parameters": "(HistogramRequest parameter)", "modifiers": "private", "return": "AbstractAggregationBuilder", "signature": "AbstractAggregationBuilder buildAggregation(HistogramRequest parameter)", "full_signature": "private AbstractAggregationBuilder buildAggregation(HistogramRequest parameter)", "class_method_signature": "HistogramAction.buildAggregation(HistogramRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeSpan", "parameters": "()", "modifiers": "@Override protected", "return": "Filter", "signature": "Filter getDefaultTimeSpan()", "full_signature": "@Override protected Filter getDefaultTimeSpan()", "class_method_signature": "HistogramAction.getDefaultTimeSpan()", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/HistogramAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(HistogramRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(HistogramRequest parameter) {\n        SearchRequestBuilder searchRequestBuilder = getRequestBuilder(parameter);\n        try {\n            SearchResponse response = searchRequestBuilder.execute()\n                    .actionGet(getGetQueryTimeout());\n            return getResponse(response, parameter);\n        }\n        catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(HistogramRequest parameter)", "full_signature": "@Override public ActionResponse execute(HistogramRequest parameter)", "class_method_signature": "HistogramAction.execute(HistogramRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "actionGet", "execute", "getGetQueryTimeout", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}