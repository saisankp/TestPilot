{"test_class": {"identifier": "ExtSourceSqlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n\tprivate static ExtSourceSql extSourceSql;", "modifier": "@Spy\n\tprivate static", "type": "ExtSourceSql", "declarator": "extSourceSql", "var_name": "extSourceSql"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/ExtSourceSqlTest.java"}, "test_case": {"identifier": "getUsersSubjectsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getUsersSubjectsTest() throws Exception {\n\t\tSystem.out.println(\"getUsersSubjectsTest\");\n\n\t\t// define needed attributes\n\t\tString usersQuery = \"usersQuery\";\n\t\tMap<String, String> mapOfAttributes = new HashMap<>();\n\t\tmapOfAttributes.put(\"usersQuery\", usersQuery);\n\t\tmapOfAttributes.put(\"url\", \"some.url.com\");\n\t\tdoReturn(mapOfAttributes).when(extSourceSql).getAttributes();\n\n\t\t// mock data got from database\n\t\tdoNothing().when(extSourceSql).createConnection();\n\t\tPreparedStatement preparedStatement = mock(PreparedStatement.class);\n\t\tdoReturn(preparedStatement).when(extSourceSql).getPreparedStatement(usersQuery, null, 0);\n\t\tResultSet resultSet = mock(ResultSet.class, RETURNS_DEEP_STUBS);\n\t\tdoReturn(resultSet).when(preparedStatement).executeQuery();\n\t\tdoReturn(true, false).when(resultSet).next();\n\t\tdoReturn(\"josef\").when(resultSet).getString(\"firstName\");\n\t\tdoReturn(\"xjosef\").when(resultSet).getString(\"login\");\n\n\t\t// create expected subject to get\n\t\tList<Map<String, String>> expectedSubjects = new ArrayList<>();\n\t\tMap<String, String> subject = new HashMap<>();\n\t\tsubject.put(\"firstName\", \"josef\");\n\t\tsubject.put(\"login\", \"xjosef\");\n\t\tsubject.put(\"lastName\", null);\n\t\tsubject.put(\"titleBefore\", null);\n\t\tsubject.put(\"titleAfter\", null);\n\t\tsubject.put(\"middleName\", null);\n\t\texpectedSubjects.add(subject);\n\n\t\t// test the method\n\t\tList<Map<String, String>> actualSubjects = extSourceSql.getUsersSubjects();\n\t\tassertEquals(\"subjects should be same\", expectedSubjects, actualSubjects);\n\t}", "signature": "void getUsersSubjectsTest()", "full_signature": "@Test public void getUsersSubjectsTest()", "class_method_signature": "ExtSourceSqlTest.getUsersSubjectsTest()", "testcase": true, "constructor": false, "invocations": ["println", "put", "put", "getAttributes", "when", "doReturn", "createConnection", "when", "doNothing", "mock", "getPreparedStatement", "when", "doReturn", "mock", "executeQuery", "when", "doReturn", "next", "when", "doReturn", "getString", "when", "doReturn", "getString", "when", "doReturn", "put", "put", "put", "put", "put", "put", "add", "getUsersSubjects", "assertEquals"]}, "focal_class": {"identifier": "ExtSourceSql", "superclass": "extends ExtSource", "interfaces": "implements ExtSourceSimpleApi", "fields": [{"original_string": "private final static Logger log = LoggerFactory.getLogger(ExtSourceSql.class);", "modifier": "private final static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ExtSourceSql.class)", "var_name": "log"}, {"original_string": "private static final Map<String, String> attributeNameMapping = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "attributeNameMapping = new HashMap<>()", "var_name": "attributeNameMapping"}, {"original_string": "private Connection con;", "modifier": "private", "type": "Connection", "declarator": "con", "var_name": "con"}, {"original_string": "private boolean isOracle = false;", "modifier": "private", "type": "boolean", "declarator": "isOracle = false", "var_name": "isOracle"}, {"original_string": "private boolean isSQLite = false;", "modifier": "private", "type": "boolean", "declarator": "isSQLite = false", "var_name": "isSQLite"}, {"original_string": "private static PerunBlImpl perunBl;", "modifier": "private static", "type": "PerunBlImpl", "declarator": "perunBl", "var_name": "perunBl"}], "methods": [{"identifier": "setPerunBlImpl", "parameters": "(PerunBlImpl perun)", "modifiers": "public static", "return": "PerunBlImpl", "signature": "PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "full_signature": "public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun)", "class_method_signature": "ExtSourceSql.setPerunBlImpl(PerunBlImpl perun)", "testcase": false, "constructor": false}, {"identifier": "ExtSourceSql", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExtSourceSql()", "full_signature": "public  ExtSourceSql()", "class_method_signature": "ExtSourceSql.ExtSourceSql()", "testcase": false, "constructor": true}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString)", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> findSubjectsLogins(String searchString)", "full_signature": "@Override public List<Map<String,String>> findSubjectsLogins(String searchString)", "class_method_signature": "ExtSourceSql.findSubjectsLogins(String searchString)", "testcase": false, "constructor": false}, {"identifier": "findSubjectsLogins", "parameters": "(String searchString, int maxResults)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults)", "full_signature": "@Override public List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults)", "class_method_signature": "ExtSourceSql.findSubjectsLogins(String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "getSubjectByLogin", "parameters": "(String login)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSubjectByLogin(String login)", "full_signature": "@Override public Map<String, String> getSubjectByLogin(String login)", "class_method_signature": "ExtSourceSql.getSubjectByLogin(String login)", "testcase": false, "constructor": false}, {"identifier": "getGroupSubjects", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes)", "class_method_signature": "ExtSourceSql.getGroupSubjects(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String,String>> getUsersSubjects()", "class_method_signature": "ExtSourceSql.getUsersSubjects()", "testcase": false, "constructor": false}, {"identifier": "querySource", "parameters": "(String query, String searchString, int maxResults)", "modifiers": "protected", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> querySource(String query, String searchString, int maxResults)", "full_signature": "protected List<Map<String,String>> querySource(String query, String searchString, int maxResults)", "class_method_signature": "ExtSourceSql.querySource(String query, String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "createConnection", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void createConnection()", "full_signature": "protected void createConnection()", "class_method_signature": "ExtSourceSql.createConnection()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ExtSourceSql.close()", "testcase": false, "constructor": false}, {"identifier": "getSubjectGroups", "parameters": "(Map<String, String> attributes)", "modifiers": "@Override public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "full_signature": "@Override public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes)", "class_method_signature": "ExtSourceSql.getSubjectGroups(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "groupQuery", "parameters": "(String query, String searchString, int maxResults)", "modifiers": "protected", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> groupQuery(String query, String searchString, int maxResults)", "full_signature": "protected List<Map<String,String>> groupQuery(String query, String searchString, int maxResults)", "class_method_signature": "ExtSourceSql.groupQuery(String query, String searchString, int maxResults)", "testcase": false, "constructor": false}, {"identifier": "mapAttributeNames", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String mapAttributeNames(String value)", "full_signature": "private String mapAttributeNames(String value)", "class_method_signature": "ExtSourceSql.mapAttributeNames(String value)", "testcase": false, "constructor": false}, {"identifier": "parseAdditionalAttributeData", "parameters": "(ResultSet rs)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> parseAdditionalAttributeData(ResultSet rs)", "full_signature": "private Map<String, String> parseAdditionalAttributeData(ResultSet rs)", "class_method_signature": "ExtSourceSql.parseAdditionalAttributeData(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "parseBlobValue", "parameters": "(InputStream inputStream, String columnName)", "modifiers": "private", "return": "String", "signature": "String parseBlobValue(InputStream inputStream, String columnName)", "full_signature": "private String parseBlobValue(InputStream inputStream, String columnName)", "class_method_signature": "ExtSourceSql.parseBlobValue(InputStream inputStream, String columnName)", "testcase": false, "constructor": false}, {"identifier": "readGroupSyncRequiredData", "parameters": "(ResultSet rs, String column)", "modifiers": "private", "return": "String", "signature": "String readGroupSyncRequiredData(ResultSet rs, String column)", "full_signature": "private String readGroupSyncRequiredData(ResultSet rs, String column)", "class_method_signature": "ExtSourceSql.readGroupSyncRequiredData(ResultSet rs, String column)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "protected", "return": "Map<String,String>", "signature": "Map<String,String> getAttributes()", "full_signature": "protected Map<String,String> getAttributes()", "class_method_signature": "ExtSourceSql.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "checkAndSetPrerequisites", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAndSetPrerequisites()", "full_signature": "private void checkAndSetPrerequisites()", "class_method_signature": "ExtSourceSql.checkAndSetPrerequisites()", "testcase": false, "constructor": false}, {"identifier": "getPreparedStatement", "parameters": "(String query, String searchString, int maxResults)", "modifiers": "protected", "return": "PreparedStatement", "signature": "PreparedStatement getPreparedStatement(String query, String searchString, int maxResults)", "full_signature": "protected PreparedStatement getPreparedStatement(String query, String searchString, int maxResults)", "class_method_signature": "ExtSourceSql.getPreparedStatement(String query, String searchString, int maxResults)", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/ExtSourceSql.java"}, "focal_method": {"identifier": "getUsersSubjects", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String,String>>", "body": "@Override\n\tpublic List<Map<String,String>> getUsersSubjects() {\n\t\tString query = getAttributes().get(UsersManager.USERS_QUERY);\n\n\t\tif (query == null) {\n\t\t\tthrow new InternalErrorException(\"usersQuery attribute is required\");\n\t\t}\n\n\t\treturn this.querySource(query, null, 0);\n\t}", "signature": "List<Map<String,String>> getUsersSubjects()", "full_signature": "@Override public List<Map<String,String>> getUsersSubjects()", "class_method_signature": "ExtSourceSql.getUsersSubjects()", "testcase": false, "constructor": false, "invocations": ["get", "getAttributes", "querySource"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}