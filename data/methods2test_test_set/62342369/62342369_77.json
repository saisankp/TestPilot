{"test_class": {"identifier": "DirectoryDataPoolTest", "superclass": "extends AbstractArtefactTest", "interfaces": "", "fields": [{"original_string": "private DataSet<?> pool;", "modifier": "private", "type": "DataSet<?>", "declarator": "pool", "var_name": "pool"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/datapool/file/DirectoryDataPoolTest.java"}, "test_case": {"identifier": "testEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEmpty() {\n\n\t\tFile fileEmpty = FileHelper.getClassLoaderResourceAsFile(this.getClass().getClassLoader(), \"emptyFolder\");\n\t\t\n\t\tDirectoryDataPool conf = new DirectoryDataPool();\n\t\tconf.setFolder(new DynamicValue<String>(fileEmpty.getAbsolutePath()));\n\n\t\tDataSet<?> poolEmpty = DataPoolFactory.getDataPool(\"folder\", conf, newExecutionContext());\n\t\tpoolEmpty.init();\n\n\t\tDataPoolRow next = poolEmpty.next();\n\n\t\tAssert.assertTrue(next==null || ((FileDataPoolImpl.ExtendedFile)next.getValue()).getName().equals(\".gitignore\"));\n\t\t\n\t\tpoolEmpty.close();\n\t}", "signature": "void testEmpty()", "full_signature": "@Test public void testEmpty()", "class_method_signature": "DirectoryDataPoolTest.testEmpty()", "testcase": true, "constructor": false, "invocations": ["getClassLoaderResourceAsFile", "getClassLoader", "getClass", "setFolder", "getAbsolutePath", "getDataPool", "newExecutionContext", "init", "next", "assertTrue", "equals", "getName", "getValue", "close"]}, "focal_class": {"identifier": "DirectoryDataPool", "superclass": "extends DataPoolConfiguration", "interfaces": "", "fields": [{"original_string": "DynamicValue<String> folder = new DynamicValue<String>(\"\");", "modifier": "", "type": "DynamicValue<String>", "declarator": "folder = new DynamicValue<String>(\"\")", "var_name": "folder"}], "methods": [{"identifier": "DirectoryDataPool", "parameters": "()", "modifiers": "public", "return": "", "signature": " DirectoryDataPool()", "full_signature": "public  DirectoryDataPool()", "class_method_signature": "DirectoryDataPool.DirectoryDataPool()", "testcase": false, "constructor": true}, {"identifier": "getFolder", "parameters": "()", "modifiers": "public", "return": "DynamicValue<String>", "signature": "DynamicValue<String> getFolder()", "full_signature": "public DynamicValue<String> getFolder()", "class_method_signature": "DirectoryDataPool.getFolder()", "testcase": false, "constructor": false}, {"identifier": "setFolder", "parameters": "(DynamicValue<String> folder)", "modifiers": "public", "return": "void", "signature": "void setFolder(DynamicValue<String> folder)", "full_signature": "public void setFolder(DynamicValue<String> folder)", "class_method_signature": "DirectoryDataPool.setFolder(DynamicValue<String> folder)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/datapool/file/DirectoryDataPool.java"}, "focal_method": {"identifier": "setFolder", "parameters": "(DynamicValue<String> folder)", "modifiers": "public", "return": "void", "body": "public void setFolder(DynamicValue<String> folder) {\n\t\tthis.folder = folder;\n\t}", "signature": "void setFolder(DynamicValue<String> folder)", "full_signature": "public void setFolder(DynamicValue<String> folder)", "class_method_signature": "DirectoryDataPool.setFolder(DynamicValue<String> folder)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}