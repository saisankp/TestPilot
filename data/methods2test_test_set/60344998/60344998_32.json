{"test_class": {"identifier": "ContentTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "fahrschein-http-api/src/test/java/org/zalando/fahrschein/http/api/ContentTypeTest.java"}, "test_case": {"identifier": "shouldBeHasheable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeHasheable() {\n        final HashSet<ContentType> contentTypes = new HashSet<>();\n        contentTypes.add(ContentType.APPLICATION_JSON);\n        contentTypes.add(ContentType.TEXT_PLAIN);\n        contentTypes.add(ContentType.valueOf(\"application/octet-stream\"));\n\n        assertEquals(3, contentTypes.size());\n\n        assertTrue(contentTypes.contains(ContentType.valueOf(\"application/json\")));\n        assertTrue(contentTypes.contains(ContentType.valueOf(\"text/plain\")));\n        assertTrue(contentTypes.contains(ContentType.valueOf(\"application/octet-stream\")));\n    }", "signature": "void shouldBeHasheable()", "full_signature": "@Test public void shouldBeHasheable()", "class_method_signature": "ContentTypeTest.shouldBeHasheable()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "valueOf", "assertEquals", "size", "assertTrue", "contains", "valueOf", "assertTrue", "contains", "valueOf", "assertTrue", "contains", "valueOf"]}, "focal_class": {"identifier": "ContentType", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern PATTERN = Pattern.compile(\"([a-zA-Z0-9_+\\\\-]+)/([a-zA-Z0-9_+\\\\-]+)(?:[ \\t]*;[ \\t]*(.*))?\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(\"([a-zA-Z0-9_+\\\\-]+)/([a-zA-Z0-9_+\\\\-]+)(?:[ \\t]*;[ \\t]*(.*))?\")", "var_name": "PATTERN"}, {"original_string": "public static final String TEXT_PLAIN_VALUE = \"text/plain\";", "modifier": "public static final", "type": "String", "declarator": "TEXT_PLAIN_VALUE = \"text/plain\"", "var_name": "TEXT_PLAIN_VALUE"}, {"original_string": "public static final String APPLICATION_JSON_VALUE = \"application/json\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_JSON_VALUE = \"application/json\"", "var_name": "APPLICATION_JSON_VALUE"}, {"original_string": "public static final String APPLICATION_JSON_UTF8_VALUE = APPLICATION_JSON_VALUE + \";charset=UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_JSON_UTF8_VALUE = APPLICATION_JSON_VALUE + \";charset=UTF-8\"", "var_name": "APPLICATION_JSON_UTF8_VALUE"}, {"original_string": "public static final String APPLICATION_PROBLEM_JSON_VALUE = \"application/problem+json\";", "modifier": "public static final", "type": "String", "declarator": "APPLICATION_PROBLEM_JSON_VALUE = \"application/problem+json\"", "var_name": "APPLICATION_PROBLEM_JSON_VALUE"}, {"original_string": "public static final ContentType TEXT_PLAIN = ContentType.valueOf(TEXT_PLAIN_VALUE);", "modifier": "public static final", "type": "ContentType", "declarator": "TEXT_PLAIN = ContentType.valueOf(TEXT_PLAIN_VALUE)", "var_name": "TEXT_PLAIN"}, {"original_string": "public static final ContentType APPLICATION_JSON = ContentType.valueOf(APPLICATION_JSON_VALUE);", "modifier": "public static final", "type": "ContentType", "declarator": "APPLICATION_JSON = ContentType.valueOf(APPLICATION_JSON_VALUE)", "var_name": "APPLICATION_JSON"}, {"original_string": "public static final ContentType APPLICATION_JSON_UTF8 = ContentType.valueOf(APPLICATION_JSON_UTF8_VALUE);", "modifier": "public static final", "type": "ContentType", "declarator": "APPLICATION_JSON_UTF8 = ContentType.valueOf(APPLICATION_JSON_UTF8_VALUE)", "var_name": "APPLICATION_JSON_UTF8"}, {"original_string": "public static final ContentType APPLICATION_PROBLEM_JSON= ContentType.valueOf(APPLICATION_PROBLEM_JSON_VALUE);", "modifier": "public static final", "type": "ContentType", "declarator": "APPLICATION_PROBLEM_JSON= ContentType.valueOf(APPLICATION_PROBLEM_JSON_VALUE)", "var_name": "APPLICATION_PROBLEM_JSON"}, {"original_string": "private final String value;", "modifier": "private final", "type": "String", "declarator": "value", "var_name": "value"}, {"original_string": "private final String type;", "modifier": "private final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "private final String subtype;", "modifier": "private final", "type": "String", "declarator": "subtype", "var_name": "subtype"}, {"original_string": "@Nullable\n    private final String parameters;", "modifier": "@Nullable\n    private final", "type": "String", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "ContentType", "parameters": "(String value, String type, String subtype, String parameters)", "modifiers": "private", "return": "", "signature": " ContentType(String value, String type, String subtype, String parameters)", "full_signature": "private  ContentType(String value, String type, String subtype, String parameters)", "class_method_signature": "ContentType.ContentType(String value, String type, String subtype, String parameters)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(String contentType)", "modifiers": "public static", "return": "ContentType", "signature": "ContentType valueOf(String contentType)", "full_signature": "public static ContentType valueOf(String contentType)", "class_method_signature": "ContentType.valueOf(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "ContentType.getValue()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getType()", "full_signature": "public String getType()", "class_method_signature": "ContentType.getType()", "testcase": false, "constructor": false}, {"identifier": "getSubtype", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSubtype()", "full_signature": "public String getSubtype()", "class_method_signature": "ContentType.getSubtype()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ContentType.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ContentType.hashCode()", "testcase": false, "constructor": false}], "file": "fahrschein-http-api/src/main/java/org/zalando/fahrschein/http/api/ContentType.java"}, "focal_method": {"identifier": "valueOf", "parameters": "(String contentType)", "modifiers": "public static", "return": "ContentType", "body": "public static ContentType valueOf(String contentType) {\n        final Matcher matcher = PATTERN.matcher(contentType);\n        if (matcher.matches()) {\n            return new ContentType(contentType, matcher.group(1), matcher.group(2), matcher.group(3));\n        } else {\n            throw new IllegalArgumentException(\"Invalid content type [\" + contentType + \"]\");\n        }\n    }", "signature": "ContentType valueOf(String contentType)", "full_signature": "public static ContentType valueOf(String contentType)", "class_method_signature": "ContentType.valueOf(String contentType)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group", "group", "group"]}, "repository": {"repo_id": 60344998, "url": "https://github.com/zalando-nakadi/fahrschein", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 17, "size": 776, "license": "licensed"}}