{"test_class": {"identifier": "VersionTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/org/glowroot/common/util/VersionTest.java"}, "test_case": {"identifier": "testWithInvalidBuildCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithInvalidBuildCommit() {\n        // given\n        Manifest manifest = mock(Manifest.class);\n        Attributes attributes = mock(Attributes.class);\n        when(manifest.getMainAttributes()).thenReturn(attributes);\n        when(attributes.getValue(\"Implementation-Version\")).thenReturn(\"0.1.2-SNAPSHOT\");\n        when(attributes.getValue(\"Build-Commit\")).thenReturn(\"tooshort\");\n        when(attributes.getValue(\"Build-Time\")).thenReturn(\"xyz\");\n        // when\n        String version = Version.getVersion(manifest);\n        // then\n        assertThat(version).isEqualTo(\"0.1.2-SNAPSHOT, built xyz\");\n    }", "signature": "void testWithInvalidBuildCommit()", "full_signature": "@Test public void testWithInvalidBuildCommit()", "class_method_signature": "VersionTest.testWithInvalidBuildCommit()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getMainAttributes", "thenReturn", "when", "getValue", "thenReturn", "when", "getValue", "thenReturn", "when", "getValue", "getVersion", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "Version", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String UNKNOWN_VERSION = \"unknown\";", "modifier": "public static final", "type": "String", "declarator": "UNKNOWN_VERSION = \"unknown\"", "var_name": "UNKNOWN_VERSION"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(Version.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Version.class)", "var_name": "logger"}], "methods": [{"identifier": "Version", "parameters": "()", "modifiers": "private", "return": "", "signature": " Version()", "full_signature": "private  Version()", "class_method_signature": "Version.Version()", "testcase": false, "constructor": true}, {"identifier": "getVersion", "parameters": "(Class<?> baseClass)", "modifiers": "public static", "return": "String", "signature": "String getVersion(Class<?> baseClass)", "full_signature": "public static String getVersion(Class<?> baseClass)", "class_method_signature": "Version.getVersion(Class<?> baseClass)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(@Nullable URL manifestURL)", "modifiers": "public static", "return": "String", "signature": "String getVersion(@Nullable URL manifestURL)", "full_signature": "public static String getVersion(@Nullable URL manifestURL)", "class_method_signature": "Version.getVersion(@Nullable URL manifestURL)", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "(Class<?> clazz)", "modifiers": "@VisibleForTesting static @Nullable", "return": "Manifest", "signature": "Manifest getManifest(Class<?> clazz)", "full_signature": "@VisibleForTesting static @Nullable Manifest getManifest(Class<?> clazz)", "class_method_signature": "Version.getManifest(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getManifest", "parameters": "(@Nullable URL url)", "modifiers": "private static @Nullable", "return": "Manifest", "signature": "Manifest getManifest(@Nullable URL url)", "full_signature": "private static @Nullable Manifest getManifest(@Nullable URL url)", "class_method_signature": "Version.getManifest(@Nullable URL url)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(@Nullable Manifest manifest)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String getVersion(@Nullable Manifest manifest)", "full_signature": "@VisibleForTesting static String getVersion(@Nullable Manifest manifest)", "class_method_signature": "Version.getVersion(@Nullable Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "getSnapshotVersion", "parameters": "(String version, Attributes mainAttributes)", "modifiers": "private static", "return": "String", "signature": "String getSnapshotVersion(String version, Attributes mainAttributes)", "full_signature": "private static String getSnapshotVersion(String version, Attributes mainAttributes)", "class_method_signature": "Version.getSnapshotVersion(String version, Attributes mainAttributes)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/glowroot/common/util/Version.java"}, "focal_method": {"identifier": "getVersion", "parameters": "(Class<?> baseClass)", "modifiers": "public static", "return": "String", "body": "public static String getVersion(Class<?> baseClass) {\n        Manifest manifest;\n        try {\n            manifest = getManifest(baseClass);\n        } catch (IOException e) {\n            logger.error(e.getMessage(), e);\n            return UNKNOWN_VERSION;\n        }\n        return getVersion(manifest);\n    }", "signature": "String getVersion(Class<?> baseClass)", "full_signature": "public static String getVersion(Class<?> baseClass)", "class_method_signature": "Version.getVersion(Class<?> baseClass)", "testcase": false, "constructor": false, "invocations": ["getManifest", "error", "getMessage", "getVersion"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}