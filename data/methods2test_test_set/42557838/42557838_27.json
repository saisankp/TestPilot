{"test_class": {"identifier": "HeadersParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Parser<Headers> headersParser = new HeadersParser();", "modifier": "private static", "type": "Parser<Headers>", "declarator": "headersParser = new HeadersParser()", "var_name": "headersParser"}], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/HeadersParserTest.java"}, "test_case": {"identifier": "shouldParseMultiValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseMultiValues() throws MalformedInputException {\n        Headers headers = headersParser.parse(\"Accept: application/xml\\r\\nAccept: application/json\\r\\n\");\n\n        assertThat(headers.containsHeader(\"Accept\"), is(true));\n        assertThat(headers.getHeader(\"Accept\"), is(\"application/xml,application/json\"));\n    }", "signature": "void shouldParseMultiValues()", "full_signature": "@Test public void shouldParseMultiValues()", "class_method_signature": "HeadersParserTest.shouldParseMultiValues()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "containsHeader", "is", "assertThat", "getHeader", "is"]}, "focal_class": {"identifier": "HeadersParser", "superclass": "", "interfaces": "implements Parser<Headers>", "fields": [{"original_string": "private static final String NEW_LINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private static final char SPACE = ' ';", "modifier": "private static final", "type": "char", "declarator": "SPACE = ' '", "var_name": "SPACE"}, {"original_string": "private static final char TAB = '\\t';", "modifier": "private static final", "type": "char", "declarator": "TAB = '\\t'", "var_name": "TAB"}, {"original_string": "private static final String VALUE_SEPARATOR = \":\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SEPARATOR = \":\"", "var_name": "VALUE_SEPARATOR"}, {"original_string": "private static final char COMA = ',';", "modifier": "private static final", "type": "char", "declarator": "COMA = ','", "var_name": "COMA"}, {"original_string": "private static final Pattern LTRIM_PATTERN = Pattern.compile(\"^\\\\s+\");", "modifier": "private static final", "type": "Pattern", "declarator": "LTRIM_PATTERN = Pattern.compile(\"^\\\\s+\")", "var_name": "LTRIM_PATTERN"}], "methods": [{"identifier": "parse", "parameters": "(final String headersString)", "modifiers": "@Override public", "return": "Headers", "signature": "Headers parse(final String headersString)", "full_signature": "@Override public Headers parse(final String headersString)", "class_method_signature": "HeadersParser.parse(final String headersString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String headersString, final boolean joinRepeatingHeaders)", "modifiers": "public", "return": "Headers", "signature": "Headers parse(final String headersString, final boolean joinRepeatingHeaders)", "full_signature": "public Headers parse(final String headersString, final boolean joinRepeatingHeaders)", "class_method_signature": "HeadersParser.parse(final String headersString, final boolean joinRepeatingHeaders)", "testcase": false, "constructor": false}, {"identifier": "ltrim", "parameters": "(final String text)", "modifiers": "private", "return": "String", "signature": "String ltrim(final String text)", "full_signature": "private String ltrim(final String text)", "class_method_signature": "HeadersParser.ltrim(final String text)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/HeadersParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String headersString)", "modifiers": "@Override public", "return": "Headers", "body": "@Override\n    public Headers parse(final String headersString) throws MalformedInputException {\n        return parse(headersString, true);\n    }", "signature": "Headers parse(final String headersString)", "full_signature": "@Override public Headers parse(final String headersString)", "class_method_signature": "HeadersParser.parse(final String headersString)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}