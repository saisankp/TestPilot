{"test_class": {"identifier": "DisposablesTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/disposables/DisposablesTest.java"}, "test_case": {"identifier": "fromActionThrows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fromActionThrows() {\n        try {\n            Disposables.fromAction(new Action() {\n                @Override\n                public void run() throws Exception {\n                    throw new IllegalArgumentException();\n                }\n            }).dispose();\n            fail(\"Should have thrown!\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            Disposables.fromAction(new Action() {\n                @Override\n                public void run() throws Exception {\n                    throw new InternalError();\n                }\n            }).dispose();\n            fail(\"Should have thrown!\");\n        } catch (InternalError ex) {\n            // expected\n        }\n\n        try {\n            Disposables.fromAction(new Action() {\n                @Override\n                public void run() throws Exception {\n                    throw new IOException();\n                }\n            }).dispose();\n            fail(\"Should have thrown!\");\n        } catch (RuntimeException ex) {\n            if (!(ex.getCause() instanceof IOException)) {\n                fail(ex.toString() + \": Should have cause of IOException\");\n            }\n            // expected\n        }\n\n    }", "signature": "void fromActionThrows()", "full_signature": "@Test public void fromActionThrows()", "class_method_signature": "DisposablesTest.fromActionThrows()", "testcase": true, "constructor": false, "invocations": ["dispose", "fromAction", "fail", "dispose", "fromAction", "fail", "dispose", "fromAction", "fail", "getCause", "fail", "toString"]}, "focal_class": {"identifier": "Disposables", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Disposables", "parameters": "()", "modifiers": "private", "return": "", "signature": " Disposables()", "full_signature": "private  Disposables()", "class_method_signature": "Disposables.Disposables()", "testcase": false, "constructor": true}, {"identifier": "fromRunnable", "parameters": "(@NonNull Runnable run)", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable fromRunnable(@NonNull Runnable run)", "full_signature": "@NonNull public static Disposable fromRunnable(@NonNull Runnable run)", "class_method_signature": "Disposables.fromRunnable(@NonNull Runnable run)", "testcase": false, "constructor": false}, {"identifier": "fromAction", "parameters": "(@NonNull Action run)", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable fromAction(@NonNull Action run)", "full_signature": "@NonNull public static Disposable fromAction(@NonNull Action run)", "class_method_signature": "Disposables.fromAction(@NonNull Action run)", "testcase": false, "constructor": false}, {"identifier": "fromFuture", "parameters": "(@NonNull Future<?> future)", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable fromFuture(@NonNull Future<?> future)", "full_signature": "@NonNull public static Disposable fromFuture(@NonNull Future<?> future)", "class_method_signature": "Disposables.fromFuture(@NonNull Future<?> future)", "testcase": false, "constructor": false}, {"identifier": "fromFuture", "parameters": "(@NonNull Future<?> future, boolean allowInterrupt)", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable fromFuture(@NonNull Future<?> future, boolean allowInterrupt)", "full_signature": "@NonNull public static Disposable fromFuture(@NonNull Future<?> future, boolean allowInterrupt)", "class_method_signature": "Disposables.fromFuture(@NonNull Future<?> future, boolean allowInterrupt)", "testcase": false, "constructor": false}, {"identifier": "fromSubscription", "parameters": "(@NonNull Subscription subscription)", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable fromSubscription(@NonNull Subscription subscription)", "full_signature": "@NonNull public static Disposable fromSubscription(@NonNull Subscription subscription)", "class_method_signature": "Disposables.fromSubscription(@NonNull Subscription subscription)", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable empty()", "full_signature": "@NonNull public static Disposable empty()", "class_method_signature": "Disposables.empty()", "testcase": false, "constructor": false}, {"identifier": "disposed", "parameters": "()", "modifiers": "@NonNull public static", "return": "Disposable", "signature": "Disposable disposed()", "full_signature": "@NonNull public static Disposable disposed()", "class_method_signature": "Disposables.disposed()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/disposables/Disposables.java"}, "focal_method": {"identifier": "fromAction", "parameters": "(@NonNull Action run)", "modifiers": "@NonNull public static", "return": "Disposable", "body": "@NonNull\n    public static Disposable fromAction(@NonNull Action run) {\n        ObjectHelper.requireNonNull(run, \"run is null\");\n        return new ActionDisposable(run);\n    }", "signature": "Disposable fromAction(@NonNull Action run)", "full_signature": "@NonNull public static Disposable fromAction(@NonNull Action run)", "class_method_signature": "Disposables.fromAction(@NonNull Action run)", "testcase": false, "constructor": false, "invocations": ["requireNonNull"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}