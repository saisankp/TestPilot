{"test_class": {"identifier": "FieldAccessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/util/FieldAccessorTest.java"}, "test_case": {"identifier": "tupleFieldAccessorOutOfBoundsTest", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void tupleFieldAccessorOutOfBoundsTest() {\n\t\ttry {\n\t\t\tFieldAccessor<Tuple2<Integer, Integer>, Integer> fieldAccessor =\n\t\t\t\t\t(FieldAccessor<Tuple2<Integer, Integer>, Integer>) (Object)\n\t\t\t\t\t\t\tFieldAccessor.create(2, TupleTypeInfo.getBasicTupleTypeInfo(Integer.class, Integer.class),\n\t\t\t\t\t\t\t\t\tnull);\n\t\t\tfail();\n\t\t} catch (IndexOutOfBoundsException e) {\n\t\t\t// Nothing to do here\n\t\t}\n\t}", "signature": "void tupleFieldAccessorOutOfBoundsTest()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void tupleFieldAccessorOutOfBoundsTest()", "class_method_signature": "FieldAccessorTest.tupleFieldAccessorOutOfBoundsTest()", "testcase": true, "constructor": false, "invocations": ["create", "getBasicTupleTypeInfo", "fail"]}, "focal_class": {"identifier": "FieldAccessor", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "TypeInformation fieldType;", "modifier": "", "type": "TypeInformation", "declarator": "fieldType", "var_name": "fieldType"}], "methods": [{"identifier": "getFieldType", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "TypeInformation<F>", "signature": "TypeInformation<F> getFieldType()", "full_signature": "@SuppressWarnings(\"unchecked\") public TypeInformation<F> getFieldType()", "class_method_signature": "FieldAccessor.getFieldType()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(R record)", "modifiers": "public abstract", "return": "F", "signature": "F get(R record)", "full_signature": "public abstract F get(R record)", "class_method_signature": "FieldAccessor.get(R record)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(R record, F fieldValue)", "modifiers": "public abstract", "return": "R", "signature": "R set(R record, F fieldValue)", "full_signature": "public abstract R set(R record, F fieldValue)", "class_method_signature": "FieldAccessor.set(R record, F fieldValue)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "FieldAccessor<R, F>", "signature": "FieldAccessor<R, F> create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "full_signature": "@SuppressWarnings(\"unchecked\") public static FieldAccessor<R, F> create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "class_method_signature": "FieldAccessor.create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String field, TypeInformation<R> typeInfo, ExecutionConfig config)", "modifiers": "public static", "return": "FieldAccessor<R, F>", "signature": "FieldAccessor<R, F> create(String field, TypeInformation<R> typeInfo, ExecutionConfig config)", "full_signature": "public static FieldAccessor<R, F> create(String field, TypeInformation<R> typeInfo, ExecutionConfig config)", "class_method_signature": "FieldAccessor.create(String field, TypeInformation<R> typeInfo, ExecutionConfig config)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/util/FieldAccessor.java"}, "focal_method": {"identifier": "create", "parameters": "(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "FieldAccessor<R, F>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static <R, F> FieldAccessor<R, F> create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config) {\n\t\tif (typeInfo.isTupleType() && ((TupleTypeInfoBase)typeInfo).isCaseClass()) {\n\t\t\treturn new ProductFieldAccessor<R, F>(pos, typeInfo, config);\n\t\t} else if (typeInfo.isTupleType()) {\n\t\t\treturn new TupleFieldAccessor<R, F>(pos, typeInfo);\n\t\t} else if (typeInfo instanceof BasicArrayTypeInfo || typeInfo instanceof PrimitiveArrayTypeInfo) {\n\t\t\treturn new ArrayFieldAccessor<R, F>(pos, typeInfo);\n\t\t} else {\n\t\t\tif(pos != 0) {\n\t\t\t\tthrow new IndexOutOfBoundsException(\"Not 0th field selected for a simple type (non-tuple, non-array).\");\n\t\t\t}\n\t\t\treturn (FieldAccessor<R, F>) new SimpleFieldAccessor<R>(typeInfo);\n\t\t}\n\t}", "signature": "FieldAccessor<R, F> create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "full_signature": "@SuppressWarnings(\"unchecked\") public static FieldAccessor<R, F> create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "class_method_signature": "FieldAccessor.create(int pos, TypeInformation<R> typeInfo, ExecutionConfig config)", "testcase": false, "constructor": false, "invocations": ["isTupleType", "isCaseClass", "isTupleType"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}