{"test_class": {"identifier": "ImmutableTableFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String FIRST_ROW = \"test0\";", "modifier": "private final", "type": "String", "declarator": "FIRST_ROW = \"test0\"", "var_name": "FIRST_ROW"}, {"original_string": "private final String SECOND_ROW = \"test1\";", "modifier": "private final", "type": "String", "declarator": "SECOND_ROW = \"test1\"", "var_name": "SECOND_ROW"}, {"original_string": "private final Double EPSILON = 0.05;", "modifier": "private final", "type": "Double", "declarator": "EPSILON = 0.05", "var_name": "EPSILON"}, {"original_string": "private Table<String, Integer, Double> nonFullTable;", "modifier": "private", "type": "Table<String, Integer, Double>", "declarator": "nonFullTable", "var_name": "nonFullTable"}, {"original_string": "private Map<Integer, Double> baseMap = new HashMap<>();", "modifier": "private", "type": "Map<Integer, Double>", "declarator": "baseMap = new HashMap<>()", "var_name": "baseMap"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/utils/ImmutableTableFactoryTest.java"}, "test_case": {"identifier": "testCreateFromTableCells", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testCreateFromTableCells() {\n        ImmutableTable<String, Integer, String> outputTable = ImmutableTableFactory.create(\n                nonFullTable, (row, column) -> row + column);\n\n        Assertions.assertEquals(3, outputTable.size());\n        Assertions.assertEquals(FIRST_ROW + \"0\", outputTable.get(FIRST_ROW, 0));\n        Assertions.assertEquals(FIRST_ROW + \"1\", outputTable.get(FIRST_ROW, 1));\n        Assertions.assertEquals(SECOND_ROW + \"0\", outputTable.get(SECOND_ROW, 0));\n    }", "signature": "void testCreateFromTableCells()", "full_signature": "@Test void testCreateFromTableCells()", "class_method_signature": "ImmutableTableFactoryTest.testCreateFromTableCells()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ImmutableTableFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "create", "parameters": "(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "modifiers": "public static", "return": "ImmutableTable<M, N, W>", "signature": "ImmutableTable<M, N, W> create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "full_signature": "public static ImmutableTable<M, N, W> create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "class_method_signature": "ImmutableTableFactory.create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            Table<? extends R, ? extends C, V> baseTable,\n            Function<? super V, ? extends W> valueMapper)", "modifiers": "public static", "return": "ImmutableTable<R, C, W>", "signature": "ImmutableTable<R, C, W> create(\n            Table<? extends R, ? extends C, V> baseTable,\n            Function<? super V, ? extends W> valueMapper)", "full_signature": "public static ImmutableTable<R, C, W> create(\n            Table<? extends R, ? extends C, V> baseTable,\n            Function<? super V, ? extends W> valueMapper)", "class_method_signature": "ImmutableTableFactory.create(\n            Table<? extends R, ? extends C, V> baseTable,\n            Function<? super V, ? extends W> valueMapper)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            Table<? extends R, ? extends C, ?> baseTable,\n            BiFunction<? super R, ? super C, ? extends V> newValueCalculator)", "modifiers": "public static", "return": "ImmutableTable<R, C, V>", "signature": "ImmutableTable<R, C, V> create(\n            Table<? extends R, ? extends C, ?> baseTable,\n            BiFunction<? super R, ? super C, ? extends V> newValueCalculator)", "full_signature": "public static ImmutableTable<R, C, V> create(\n            Table<? extends R, ? extends C, ?> baseTable,\n            BiFunction<? super R, ? super C, ? extends V> newValueCalculator)", "class_method_signature": "ImmutableTableFactory.create(\n            Table<? extends R, ? extends C, ?> baseTable,\n            BiFunction<? super R, ? super C, ? extends V> newValueCalculator)", "testcase": false, "constructor": false}, {"identifier": "createWithRows", "parameters": "(\n            Map<? extends C, ? extends V> baseMap,\n            Collection<? extends R> rows)", "modifiers": "public static", "return": "ImmutableTable<R, C, V>", "signature": "ImmutableTable<R, C, V> createWithRows(\n            Map<? extends C, ? extends V> baseMap,\n            Collection<? extends R> rows)", "full_signature": "public static ImmutableTable<R, C, V> createWithRows(\n            Map<? extends C, ? extends V> baseMap,\n            Collection<? extends R> rows)", "class_method_signature": "ImmutableTableFactory.createWithRows(\n            Map<? extends C, ? extends V> baseMap,\n            Collection<? extends R> rows)", "testcase": false, "constructor": false}, {"identifier": "createWithColumns", "parameters": "(\n            Map<? extends R, ? extends V> baseMap,\n            Collection<? extends C> columns)", "modifiers": "public static", "return": "ImmutableTable<R, C, V>", "signature": "ImmutableTable<R, C, V> createWithColumns(\n            Map<? extends R, ? extends V> baseMap,\n            Collection<? extends C> columns)", "full_signature": "public static ImmutableTable<R, C, V> createWithColumns(\n            Map<? extends R, ? extends V> baseMap,\n            Collection<? extends C> columns)", "class_method_signature": "ImmutableTableFactory.createWithColumns(\n            Map<? extends R, ? extends V> baseMap,\n            Collection<? extends C> columns)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            BiFunction<? super R, ? super C, ? extends V> valueCreator)", "modifiers": "public static", "return": "ImmutableTable<R, C, V>", "signature": "ImmutableTable<R, C, V> create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            BiFunction<? super R, ? super C, ? extends V> valueCreator)", "full_signature": "public static ImmutableTable<R, C, V> create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            BiFunction<? super R, ? super C, ? extends V> valueCreator)", "class_method_signature": "ImmutableTableFactory.create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            BiFunction<? super R, ? super C, ? extends V> valueCreator)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            Supplier<? extends V> valueSupplier)", "modifiers": "public static", "return": "ImmutableTable<R, C, V>", "signature": "ImmutableTable<R, C, V> create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            Supplier<? extends V> valueSupplier)", "full_signature": "public static ImmutableTable<R, C, V> create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            Supplier<? extends V> valueSupplier)", "class_method_signature": "ImmutableTableFactory.create(\n            Collection<? extends R> rowKeys,\n            Collection<? extends C> columnKeys,\n            Supplier<? extends V> valueSupplier)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/utils/ImmutableTableFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "modifiers": "public static", "return": "ImmutableTable<M, N, W>", "body": "public static <R, C, V, M, N, W> ImmutableTable<M, N, W> create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper) {\n        ImmutableTable.Builder<M, N, W> mappedTableBuilder = ImmutableTable.builder();\n\n        TableUtils.forEach(baseTable, (r, c, v) -> mappedTableBuilder.put(\n                rowMapper.apply(r),\n                columnMapper.apply(c),\n                valueMapper.apply(v)));\n\n        try {\n            return mappedTableBuilder.build();\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Multiple input cells mapped to the same ouput cell\", e);\n        }\n    }", "signature": "ImmutableTable<M, N, W> create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "full_signature": "public static ImmutableTable<M, N, W> create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "class_method_signature": "ImmutableTableFactory.create(\n            Table<R, C, V> baseTable,\n            Function<? super R, ? extends M> rowMapper,\n            Function<? super C, ? extends N> columnMapper,\n            Function<? super V, ? extends W> valueMapper)", "testcase": false, "constructor": false, "invocations": ["builder", "forEach", "put", "apply", "apply", "apply", "build"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}