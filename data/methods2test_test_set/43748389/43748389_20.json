{"test_class": {"identifier": "InfluxDbWriteObjectSerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics-influxdb/src/test/java/com/izettle/metrics/influxdb/utils/InfluxDbWriteObjectSerializerTest.java"}, "test_case": {"identifier": "undottedMeasurementShouldFallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void undottedMeasurementShouldFallback() {\n        Map<String, String> tags = new HashMap<String, String>();\n        tags.put(\"tag1Key\", \"tag1Value\");\n        Map<String, Object> fields = new HashMap<String, Object>();\n        fields.put(\"field1Key\", \"field1Value\");\n        InfluxDbPoint point1 = new InfluxDbPoint(\"aaa\", tags, 456l, fields);\n        Set<InfluxDbPoint> set = new HashSet<InfluxDbPoint>();\n        set.add(point1);\n        InfluxDbWriteObject influxDbWriteObject = mock(InfluxDbWriteObject.class);\n        when(influxDbWriteObject.getPoints()).thenReturn(set);\n        when(influxDbWriteObject.getPrecision()).thenReturn(TimeUnit.MICROSECONDS);\n        InfluxDbWriteObjectSerializer influxDbWriteObjectSerializer = new InfluxDbWriteObjectSerializer(\"\");\n        String lineString = influxDbWriteObjectSerializer.getGroupedLineProtocolString(influxDbWriteObject, \"xxx\");\n        assertThat(lineString).isEqualTo(\n                \"xxx,tag1Key=tag1Value aaa.field1Key=\\\"field1Value\\\" 456000\\n\");\n        InfluxDbPoint point2 = new InfluxDbPoint(\"bbb\", tags, 456l, fields);\n        set.add(point2);\n        lineString = influxDbWriteObjectSerializer.getGroupedLineProtocolString(influxDbWriteObject, \"xxx\");\n        assertThat(lineString).isEqualTo(\n                \"xxx,tag1Key=tag1Value aaa.field1Key=\\\"field1Value\\\",bbb.field1Key=\\\"field1Value\\\" 456000\\n\");\n    }", "signature": "void undottedMeasurementShouldFallback()", "full_signature": "@Test public void undottedMeasurementShouldFallback()", "class_method_signature": "InfluxDbWriteObjectSerializerTest.undottedMeasurementShouldFallback()", "testcase": true, "constructor": false, "invocations": ["put", "put", "add", "mock", "thenReturn", "when", "getPoints", "thenReturn", "when", "getPrecision", "getGroupedLineProtocolString", "isEqualTo", "assertThat", "add", "getGroupedLineProtocolString", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "InfluxDbWriteObjectSerializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern COMMA = Pattern.compile(\",\");", "modifier": "private static final", "type": "Pattern", "declarator": "COMMA = Pattern.compile(\",\")", "var_name": "COMMA"}, {"original_string": "private static final Pattern SPACE = Pattern.compile(\" \");", "modifier": "private static final", "type": "Pattern", "declarator": "SPACE = Pattern.compile(\" \")", "var_name": "SPACE"}, {"original_string": "private static final Pattern EQUAL = Pattern.compile(\"=\");", "modifier": "private static final", "type": "Pattern", "declarator": "EQUAL = Pattern.compile(\"=\")", "var_name": "EQUAL"}, {"original_string": "private static final Pattern DOUBLE_QUOTE = Pattern.compile(\"\\\"\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOUBLE_QUOTE = Pattern.compile(\"\\\"\")", "var_name": "DOUBLE_QUOTE"}, {"original_string": "private static final Pattern FIELD = Pattern.compile(\"\\\\.\");", "modifier": "private static final", "type": "Pattern", "declarator": "FIELD = Pattern.compile(\"\\\\.\")", "var_name": "FIELD"}, {"original_string": "private final String measurementPrefix;", "modifier": "private final", "type": "String", "declarator": "measurementPrefix", "var_name": "measurementPrefix"}], "methods": [{"identifier": "InfluxDbWriteObjectSerializer", "parameters": "(String measurementPrefix)", "modifiers": "public", "return": "", "signature": " InfluxDbWriteObjectSerializer(String measurementPrefix)", "full_signature": "public  InfluxDbWriteObjectSerializer(String measurementPrefix)", "class_method_signature": "InfluxDbWriteObjectSerializer.InfluxDbWriteObjectSerializer(String measurementPrefix)", "testcase": false, "constructor": true}, {"identifier": "getLineProtocolString", "parameters": "(InfluxDbWriteObject influxDbWriteObject)", "modifiers": "public", "return": "String", "signature": "String getLineProtocolString(InfluxDbWriteObject influxDbWriteObject)", "full_signature": "public String getLineProtocolString(InfluxDbWriteObject influxDbWriteObject)", "class_method_signature": "InfluxDbWriteObjectSerializer.getLineProtocolString(InfluxDbWriteObject influxDbWriteObject)", "testcase": false, "constructor": false}, {"identifier": "getGroupedLineProtocolString", "parameters": "(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "modifiers": "public", "return": "String", "signature": "String getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "full_signature": "public String getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "class_method_signature": "InfluxDbWriteObjectSerializer.getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "testcase": false, "constructor": false}, {"identifier": "mergeFields", "parameters": "(Map<String, Object> dest, Map<String, Object> src, String measurement)", "modifiers": "private", "return": "void", "signature": "void mergeFields(Map<String, Object> dest, Map<String, Object> src, String measurement)", "full_signature": "private void mergeFields(Map<String, Object> dest, Map<String, Object> src, String measurement)", "class_method_signature": "InfluxDbWriteObjectSerializer.mergeFields(Map<String, Object> dest, Map<String, Object> src, String measurement)", "testcase": false, "constructor": false}, {"identifier": "pointLineProtocol", "parameters": "(InfluxDbPoint point, TimeUnit precision, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void pointLineProtocol(InfluxDbPoint point, TimeUnit precision, StringBuilder stringBuilder)", "full_signature": "private void pointLineProtocol(InfluxDbPoint point, TimeUnit precision, StringBuilder stringBuilder)", "class_method_signature": "InfluxDbWriteObjectSerializer.pointLineProtocol(InfluxDbPoint point, TimeUnit precision, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "lineProtocol", "parameters": "(Map<String, String> tags, Map<String, Object> fields,\n            String measurement, Long time, TimeUnit precision, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void lineProtocol(Map<String, String> tags, Map<String, Object> fields,\n            String measurement, Long time, TimeUnit precision, StringBuilder stringBuilder)", "full_signature": "private void lineProtocol(Map<String, String> tags, Map<String, Object> fields,\n            String measurement, Long time, TimeUnit precision, StringBuilder stringBuilder)", "class_method_signature": "InfluxDbWriteObjectSerializer.lineProtocol(Map<String, String> tags, Map<String, Object> fields,\n            String measurement, Long time, TimeUnit precision, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "concatenatedTags", "parameters": "(Map<String, String> tags, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void concatenatedTags(Map<String, String> tags, StringBuilder stringBuilder)", "full_signature": "private void concatenatedTags(Map<String, String> tags, StringBuilder stringBuilder)", "class_method_signature": "InfluxDbWriteObjectSerializer.concatenatedTags(Map<String, String> tags, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "concatenateFields", "parameters": "(Map<String, Object> fields, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void concatenateFields(Map<String, Object> fields, StringBuilder stringBuilder)", "full_signature": "private void concatenateFields(Map<String, Object> fields, StringBuilder stringBuilder)", "class_method_signature": "InfluxDbWriteObjectSerializer.concatenateFields(Map<String, Object> fields, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "formattedTime", "parameters": "(Long time, TimeUnit precision, StringBuilder stringBuilder)", "modifiers": "private", "return": "void", "signature": "void formattedTime(Long time, TimeUnit precision, StringBuilder stringBuilder)", "full_signature": "private void formattedTime(Long time, TimeUnit precision, StringBuilder stringBuilder)", "class_method_signature": "InfluxDbWriteObjectSerializer.formattedTime(Long time, TimeUnit precision, StringBuilder stringBuilder)", "testcase": false, "constructor": false}, {"identifier": "escapeKey", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String escapeKey(String key)", "full_signature": "private String escapeKey(String key)", "class_method_signature": "InfluxDbWriteObjectSerializer.escapeKey(String key)", "testcase": false, "constructor": false}, {"identifier": "escapeMeasurement", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String escapeMeasurement(String key)", "full_signature": "private String escapeMeasurement(String key)", "class_method_signature": "InfluxDbWriteObjectSerializer.escapeMeasurement(String key)", "testcase": false, "constructor": false}, {"identifier": "escapeField", "parameters": "(String field)", "modifiers": "private", "return": "String", "signature": "String escapeField(String field)", "full_signature": "private String escapeField(String field)", "class_method_signature": "InfluxDbWriteObjectSerializer.escapeField(String field)", "testcase": false, "constructor": false}], "file": "metrics-influxdb/src/main/java/com/izettle/metrics/influxdb/utils/InfluxDbWriteObjectSerializer.java"}, "focal_method": {"identifier": "getGroupedLineProtocolString", "parameters": "(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "modifiers": "public", "return": "String", "body": "public String getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement) {\n        // First develop a set of timestamps.\n        HashSet<Long> times = new HashSet<>();\n        for (InfluxDbPoint point : influxDbWriteObject.getPoints()) {\n            times.add(point.getTime());\n        }\n\n        // Write lines, one per timestamp, instead of one per point.  Collect tags from one point\n        // as all are presumed the same.\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Long time : times) {\n            Map<String, Object> fields = new HashMap<>();\n            Map<String, String> tags = null;\n            \n            for (InfluxDbPoint point : influxDbWriteObject.getPoints()) {\n                if (point.getTime().equals(time)) {\n                    mergeFields(fields, point.getFields(), point.getMeasurement());\n                    tags = point.getTags();\n                }\n            }\n            lineProtocol(tags, fields, realMeasurement, time, influxDbWriteObject.getPrecision(),\n                    stringBuilder);\n            stringBuilder.append(\"\\n\");\n        }\n\n        return stringBuilder.toString();\n    }", "signature": "String getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "full_signature": "public String getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "class_method_signature": "InfluxDbWriteObjectSerializer.getGroupedLineProtocolString(InfluxDbWriteObject influxDbWriteObject, String realMeasurement)", "testcase": false, "constructor": false, "invocations": ["getPoints", "add", "getTime", "getPoints", "equals", "getTime", "mergeFields", "getFields", "getMeasurement", "getTags", "lineProtocol", "getPrecision", "append", "toString"]}, "repository": {"repo_id": 43748389, "url": "https://github.com/iZettle/dropwizard-metrics-influxdb", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 82, "size": 272, "license": "licensed"}}