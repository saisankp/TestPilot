{"test_class": {"identifier": "WalletTest", "superclass": "extends TestWithWallet", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(WalletTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WalletTest.class)", "var_name": "log"}, {"original_string": "private Address myEncryptedAddress;", "modifier": "private", "type": "Address", "declarator": "myEncryptedAddress", "var_name": "myEncryptedAddress"}, {"original_string": "private Address myEncryptedAddress2;", "modifier": "private", "type": "Address", "declarator": "myEncryptedAddress2", "var_name": "myEncryptedAddress2"}, {"original_string": "private Wallet encryptedWallet;", "modifier": "private", "type": "Wallet", "declarator": "encryptedWallet", "var_name": "encryptedWallet"}, {"original_string": "private static CharSequence PASSWORD1 = \"my helicopter contains eels\";", "modifier": "private static", "type": "CharSequence", "declarator": "PASSWORD1 = \"my helicopter contains eels\"", "var_name": "PASSWORD1"}, {"original_string": "private static CharSequence WRONG_PASSWORD = \"nothing noone nobody nowhere\";", "modifier": "private static", "type": "CharSequence", "declarator": "WRONG_PASSWORD = \"nothing noone nobody nowhere\"", "var_name": "WRONG_PASSWORD"}, {"original_string": "private KeyParameter aesKey;", "modifier": "private", "type": "KeyParameter", "declarator": "aesKey", "var_name": "aesKey"}, {"original_string": "private KeyParameter wrongAesKey;", "modifier": "private", "type": "KeyParameter", "declarator": "wrongAesKey", "var_name": "wrongAesKey"}, {"original_string": "private KeyCrypter keyCrypter;", "modifier": "private", "type": "KeyCrypter", "declarator": "keyCrypter", "var_name": "keyCrypter"}, {"original_string": "private SecureRandom secureRandom = new SecureRandom();", "modifier": "private", "type": "SecureRandom", "declarator": "secureRandom = new SecureRandom()", "var_name": "secureRandom"}], "file": "core/src/test/java/com/google/bitcoin/core/WalletTest.java"}, "test_case": {"identifier": "respectMaxStandardSize", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void respectMaxStandardSize() throws Exception {\n        // Check that we won't create txns > 100kb. Average tx size is ~220 bytes so this would have to be enormous.\n        sendMoneyToWallet(Utils.toNanoCoins(100, 0), AbstractBlockChain.NewBlockType.BEST_CHAIN);\n        Transaction tx = new Transaction(params);\n        byte[] bits = new byte[20];\n        new Random().nextBytes(bits);\n        BigInteger v = Utils.toNanoCoins(0, 1);\n        // 3100 outputs to a random address.\n        for (int i = 0; i < 3100; i++) {\n            tx.addOutput(v, new Address(params, bits));\n        }\n        Wallet.SendRequest req = Wallet.SendRequest.forTx(tx);\n        wallet.completeTx(req);\n    }", "signature": "void respectMaxStandardSize()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void respectMaxStandardSize()", "class_method_signature": "WalletTest.respectMaxStandardSize()", "testcase": true, "constructor": false, "invocations": ["sendMoneyToWallet", "toNanoCoins", "nextBytes", "toNanoCoins", "addOutput", "forTx", "completeTx"]}, "focal_class": {"identifier": "Wallet", "superclass": "", "interfaces": "implements Serializable, BlockChainListener, PeerFilterProvider", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Wallet.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Wallet.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 2L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2L", "var_name": "serialVersionUID"}, {"original_string": "private static final int MINIMUM_BLOOM_DATA_LENGTH = 8;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_BLOOM_DATA_LENGTH = 8", "var_name": "MINIMUM_BLOOM_DATA_LENGTH"}, {"original_string": "protected final ReentrantLock lock = Threading.lock(\"wallet\");", "modifier": "protected final", "type": "ReentrantLock", "declarator": "lock = Threading.lock(\"wallet\")", "var_name": "lock"}, {"original_string": "final Map<Sha256Hash, Transaction> pending;", "modifier": "final", "type": "Map<Sha256Hash, Transaction>", "declarator": "pending", "var_name": "pending"}, {"original_string": "final Map<Sha256Hash, Transaction> unspent;", "modifier": "final", "type": "Map<Sha256Hash, Transaction>", "declarator": "unspent", "var_name": "unspent"}, {"original_string": "final Map<Sha256Hash, Transaction> spent;", "modifier": "final", "type": "Map<Sha256Hash, Transaction>", "declarator": "spent", "var_name": "spent"}, {"original_string": "final Map<Sha256Hash, Transaction> dead;", "modifier": "final", "type": "Map<Sha256Hash, Transaction>", "declarator": "dead", "var_name": "dead"}, {"original_string": "final Map<Sha256Hash, Transaction> transactions;", "modifier": "final", "type": "Map<Sha256Hash, Transaction>", "declarator": "transactions", "var_name": "transactions"}, {"original_string": "private ArrayList<ECKey> keychain;", "modifier": "private", "type": "ArrayList<ECKey>", "declarator": "keychain", "var_name": "keychain"}, {"original_string": "private Set<Script> watchedScripts;", "modifier": "private", "type": "Set<Script>", "declarator": "watchedScripts", "var_name": "watchedScripts"}, {"original_string": "private final NetworkParameters params;", "modifier": "private final", "type": "NetworkParameters", "declarator": "params", "var_name": "params"}, {"original_string": "@Nullable private Sha256Hash lastBlockSeenHash;", "modifier": "@Nullable private", "type": "Sha256Hash", "declarator": "lastBlockSeenHash", "var_name": "lastBlockSeenHash"}, {"original_string": "private int lastBlockSeenHeight;", "modifier": "private", "type": "int", "declarator": "lastBlockSeenHeight", "var_name": "lastBlockSeenHeight"}, {"original_string": "private long lastBlockSeenTimeSecs;", "modifier": "private", "type": "long", "declarator": "lastBlockSeenTimeSecs", "var_name": "lastBlockSeenTimeSecs"}, {"original_string": "private transient CopyOnWriteArrayList<ListenerRegistration<WalletEventListener>> eventListeners;", "modifier": "private transient", "type": "CopyOnWriteArrayList<ListenerRegistration<WalletEventListener>>", "declarator": "eventListeners", "var_name": "eventListeners"}, {"original_string": "private transient TransactionConfidence.Listener txConfidenceListener;", "modifier": "private transient", "type": "TransactionConfidence.Listener", "declarator": "txConfidenceListener", "var_name": "txConfidenceListener"}, {"original_string": "private transient HashSet<Sha256Hash> ignoreNextNewBlock;", "modifier": "private transient", "type": "HashSet<Sha256Hash>", "declarator": "ignoreNextNewBlock", "var_name": "ignoreNextNewBlock"}, {"original_string": "private boolean acceptRiskyTransactions;", "modifier": "private", "type": "boolean", "declarator": "acceptRiskyTransactions", "var_name": "acceptRiskyTransactions"}, {"original_string": "private int onWalletChangedSuppressions;", "modifier": "private", "type": "int", "declarator": "onWalletChangedSuppressions", "var_name": "onWalletChangedSuppressions"}, {"original_string": "private boolean insideReorg;", "modifier": "private", "type": "boolean", "declarator": "insideReorg", "var_name": "insideReorg"}, {"original_string": "private Map<Transaction, TransactionConfidence.Listener.ChangeReason> confidenceChanged;", "modifier": "private", "type": "Map<Transaction, TransactionConfidence.Listener.ChangeReason>", "declarator": "confidenceChanged", "var_name": "confidenceChanged"}, {"original_string": "private volatile WalletFiles vFileManager;", "modifier": "private volatile", "type": "WalletFiles", "declarator": "vFileManager", "var_name": "vFileManager"}, {"original_string": "private volatile TransactionBroadcaster vTransactionBroadcaster;", "modifier": "private volatile", "type": "TransactionBroadcaster", "declarator": "vTransactionBroadcaster", "var_name": "vTransactionBroadcaster"}, {"original_string": "private volatile long vKeyRotationTimestamp;", "modifier": "private volatile", "type": "long", "declarator": "vKeyRotationTimestamp", "var_name": "vKeyRotationTimestamp"}, {"original_string": "private volatile boolean vKeyRotationEnabled;", "modifier": "private volatile", "type": "boolean", "declarator": "vKeyRotationEnabled", "var_name": "vKeyRotationEnabled"}, {"original_string": "private transient CoinSelector coinSelector = new DefaultCoinSelector();", "modifier": "private transient", "type": "CoinSelector", "declarator": "coinSelector = new DefaultCoinSelector()", "var_name": "coinSelector"}, {"original_string": "private KeyCrypter keyCrypter;", "modifier": "private", "type": "KeyCrypter", "declarator": "keyCrypter", "var_name": "keyCrypter"}, {"original_string": "private int version;", "modifier": "private", "type": "int", "declarator": "version", "var_name": "version"}, {"original_string": "private String description;", "modifier": "private", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final HashMap<String, WalletExtension> extensions;", "modifier": "private final", "type": "HashMap<String, WalletExtension>", "declarator": "extensions", "var_name": "extensions"}, {"original_string": "private RiskAnalysis.Analyzer riskAnalyzer = DefaultRiskAnalysis.FACTORY;", "modifier": "private", "type": "RiskAnalysis.Analyzer", "declarator": "riskAnalyzer = DefaultRiskAnalysis.FACTORY", "var_name": "riskAnalyzer"}, {"original_string": "@GuardedBy(\"lock\") private List<BalanceFutureRequest> balanceFutureRequests = Lists.newLinkedList();", "modifier": "@GuardedBy(\"lock\") private", "type": "List<BalanceFutureRequest>", "declarator": "balanceFutureRequests = Lists.newLinkedList()", "var_name": "balanceFutureRequests"}], "methods": [{"identifier": "Wallet", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "", "signature": " Wallet(NetworkParameters params)", "full_signature": "public  Wallet(NetworkParameters params)", "class_method_signature": "Wallet.Wallet(NetworkParameters params)", "testcase": false, "constructor": true}, {"identifier": "Wallet", "parameters": "(NetworkParameters params, KeyCrypter keyCrypter)", "modifiers": "public", "return": "", "signature": " Wallet(NetworkParameters params, KeyCrypter keyCrypter)", "full_signature": "public  Wallet(NetworkParameters params, KeyCrypter keyCrypter)", "class_method_signature": "Wallet.Wallet(NetworkParameters params, KeyCrypter keyCrypter)", "testcase": false, "constructor": true}, {"identifier": "createTransientState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createTransientState()", "full_signature": "private void createTransientState()", "class_method_signature": "Wallet.createTransientState()", "testcase": false, "constructor": false}, {"identifier": "getNetworkParameters", "parameters": "()", "modifiers": "public", "return": "NetworkParameters", "signature": "NetworkParameters getNetworkParameters()", "full_signature": "public NetworkParameters getNetworkParameters()", "class_method_signature": "Wallet.getNetworkParameters()", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "public", "return": "List<ECKey>", "signature": "List<ECKey> getKeys()", "full_signature": "public List<ECKey> getKeys()", "class_method_signature": "Wallet.getKeys()", "testcase": false, "constructor": false}, {"identifier": "getWatchedScripts", "parameters": "()", "modifiers": "public", "return": "List<Script>", "signature": "List<Script> getWatchedScripts()", "full_signature": "public List<Script> getWatchedScripts()", "class_method_signature": "Wallet.getWatchedScripts()", "testcase": false, "constructor": false}, {"identifier": "removeKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean removeKey(ECKey key)", "full_signature": "public boolean removeKey(ECKey key)", "class_method_signature": "Wallet.removeKey(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "getKeychainSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeychainSize()", "full_signature": "public int getKeychainSize()", "class_method_signature": "Wallet.getKeychainSize()", "testcase": false, "constructor": false}, {"identifier": "saveToFile", "parameters": "(File temp, File destFile)", "modifiers": "public", "return": "void", "signature": "void saveToFile(File temp, File destFile)", "full_signature": "public void saveToFile(File temp, File destFile)", "class_method_signature": "Wallet.saveToFile(File temp, File destFile)", "testcase": false, "constructor": false}, {"identifier": "saveToFile", "parameters": "(File f)", "modifiers": "public", "return": "void", "signature": "void saveToFile(File f)", "full_signature": "public void saveToFile(File f)", "class_method_signature": "Wallet.saveToFile(File f)", "testcase": false, "constructor": false}, {"identifier": "setAcceptRiskyTransactions", "parameters": "(boolean acceptRiskyTransactions)", "modifiers": "public", "return": "void", "signature": "void setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "full_signature": "public void setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "class_method_signature": "Wallet.setAcceptRiskyTransactions(boolean acceptRiskyTransactions)", "testcase": false, "constructor": false}, {"identifier": "doesAcceptRiskyTransactions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean doesAcceptRiskyTransactions()", "full_signature": "public boolean doesAcceptRiskyTransactions()", "class_method_signature": "Wallet.doesAcceptRiskyTransactions()", "testcase": false, "constructor": false}, {"identifier": "setRiskAnalyzer", "parameters": "(RiskAnalysis.Analyzer analyzer)", "modifiers": "public", "return": "void", "signature": "void setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "full_signature": "public void setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "class_method_signature": "Wallet.setRiskAnalyzer(RiskAnalysis.Analyzer analyzer)", "testcase": false, "constructor": false}, {"identifier": "getRiskAnalyzer", "parameters": "()", "modifiers": "public", "return": "RiskAnalysis.Analyzer", "signature": "RiskAnalysis.Analyzer getRiskAnalyzer()", "full_signature": "public RiskAnalysis.Analyzer getRiskAnalyzer()", "class_method_signature": "Wallet.getRiskAnalyzer()", "testcase": false, "constructor": false}, {"identifier": "autosaveToFile", "parameters": "(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "modifiers": "public", "return": "WalletFiles", "signature": "WalletFiles autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "full_signature": "public WalletFiles autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "class_method_signature": "Wallet.autosaveToFile(File f, long delayTime, TimeUnit timeUnit,\n                                      @Nullable WalletFiles.Listener eventListener)", "testcase": false, "constructor": false}, {"identifier": "saveLater", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void saveLater()", "full_signature": "private void saveLater()", "class_method_signature": "Wallet.saveLater()", "testcase": false, "constructor": false}, {"identifier": "saveNow", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void saveNow()", "full_signature": "private void saveNow()", "class_method_signature": "Wallet.saveNow()", "testcase": false, "constructor": false}, {"identifier": "saveToFileStream", "parameters": "(OutputStream f)", "modifiers": "public", "return": "void", "signature": "void saveToFileStream(OutputStream f)", "full_signature": "public void saveToFileStream(OutputStream f)", "class_method_signature": "Wallet.saveToFileStream(OutputStream f)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "()", "modifiers": "public", "return": "NetworkParameters", "signature": "NetworkParameters getParams()", "full_signature": "public NetworkParameters getParams()", "class_method_signature": "Wallet.getParams()", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(File f)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet loadFromFile(File f)", "full_signature": "public static Wallet loadFromFile(File f)", "class_method_signature": "Wallet.loadFromFile(File f)", "testcase": false, "constructor": false}, {"identifier": "isConsistent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConsistent()", "full_signature": "public boolean isConsistent()", "class_method_signature": "Wallet.isConsistent()", "testcase": false, "constructor": false}, {"identifier": "loadFromFileStream", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "Wallet", "signature": "Wallet loadFromFileStream(InputStream stream)", "full_signature": "public static Wallet loadFromFileStream(InputStream stream)", "class_method_signature": "Wallet.loadFromFileStream(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(ObjectInputStream in)", "modifiers": "private", "return": "void", "signature": "void readObject(ObjectInputStream in)", "full_signature": "private void readObject(ObjectInputStream in)", "class_method_signature": "Wallet.readObject(ObjectInputStream in)", "testcase": false, "constructor": false}, {"identifier": "notifyTransactionIsInBlock", "parameters": "(Sha256Hash txHash, StoredBlock block,\n                                           BlockChain.NewBlockType blockType,\n                                           int relativityOffset)", "modifiers": "public", "return": "void", "signature": "void notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                           BlockChain.NewBlockType blockType,\n                                           int relativityOffset)", "full_signature": "public void notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                           BlockChain.NewBlockType blockType,\n                                           int relativityOffset)", "class_method_signature": "Wallet.notifyTransactionIsInBlock(Sha256Hash txHash, StoredBlock block,\n                                           BlockChain.NewBlockType blockType,\n                                           int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "receivePending", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "modifiers": "public", "return": "void", "signature": "void receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "full_signature": "public void receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "class_method_signature": "Wallet.receivePending(Transaction tx, @Nullable List<Transaction> dependencies, boolean overrideIsRelevant)", "testcase": false, "constructor": false}, {"identifier": "isTransactionRisky", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies)", "modifiers": "public", "return": "boolean", "signature": "boolean isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "full_signature": "public boolean isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "class_method_signature": "Wallet.isTransactionRisky(Transaction tx, @Nullable List<Transaction> dependencies)", "testcase": false, "constructor": false}, {"identifier": "receivePending", "parameters": "(Transaction tx, @Nullable List<Transaction> dependencies)", "modifiers": "public", "return": "void", "signature": "void receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "full_signature": "public void receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "class_method_signature": "Wallet.receivePending(Transaction tx, @Nullable List<Transaction> dependencies)", "testcase": false, "constructor": false}, {"identifier": "isPendingTransactionRelevant", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean isPendingTransactionRelevant(Transaction tx)", "full_signature": "public boolean isPendingTransactionRelevant(Transaction tx)", "class_method_signature": "Wallet.isPendingTransactionRelevant(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "isTransactionRelevant", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean isTransactionRelevant(Transaction tx)", "full_signature": "public boolean isTransactionRelevant(Transaction tx)", "class_method_signature": "Wallet.isTransactionRelevant(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "checkForDoubleSpendAgainstPending", "parameters": "(Transaction tx, boolean takeAction)", "modifiers": "private", "return": "boolean", "signature": "boolean checkForDoubleSpendAgainstPending(Transaction tx, boolean takeAction)", "full_signature": "private boolean checkForDoubleSpendAgainstPending(Transaction tx, boolean takeAction)", "class_method_signature": "Wallet.checkForDoubleSpendAgainstPending(Transaction tx, boolean takeAction)", "testcase": false, "constructor": false}, {"identifier": "receiveFromBlock", "parameters": "(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "modifiers": "@Override public", "return": "void", "signature": "void receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "full_signature": "@Override public void receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "class_method_signature": "Wallet.receiveFromBlock(Transaction tx, StoredBlock block,\n                                 BlockChain.NewBlockType blockType,\n                                 int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "modifiers": "private", "return": "void", "signature": "void receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "full_signature": "private void receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "class_method_signature": "Wallet.receive(Transaction tx, StoredBlock block, BlockChain.NewBlockType blockType,\n                         int relativityOffset)", "testcase": false, "constructor": false}, {"identifier": "informConfidenceListenersIfNotReorganizing", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void informConfidenceListenersIfNotReorganizing()", "full_signature": "private void informConfidenceListenersIfNotReorganizing()", "class_method_signature": "Wallet.informConfidenceListenersIfNotReorganizing()", "testcase": false, "constructor": false}, {"identifier": "notifyNewBestBlock", "parameters": "(StoredBlock block)", "modifiers": "public", "return": "void", "signature": "void notifyNewBestBlock(StoredBlock block)", "full_signature": "public void notifyNewBestBlock(StoredBlock block)", "class_method_signature": "Wallet.notifyNewBestBlock(StoredBlock block)", "testcase": false, "constructor": false}, {"identifier": "processTxFromBestChain", "parameters": "(Transaction tx, boolean forceAddToPool)", "modifiers": "private", "return": "void", "signature": "void processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "full_signature": "private void processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "class_method_signature": "Wallet.processTxFromBestChain(Transaction tx, boolean forceAddToPool)", "testcase": false, "constructor": false}, {"identifier": "updateForSpends", "parameters": "(Transaction tx, boolean fromChain)", "modifiers": "private", "return": "void", "signature": "void updateForSpends(Transaction tx, boolean fromChain)", "full_signature": "private void updateForSpends(Transaction tx, boolean fromChain)", "class_method_signature": "Wallet.updateForSpends(Transaction tx, boolean fromChain)", "testcase": false, "constructor": false}, {"identifier": "killTx", "parameters": "(@Nullable Transaction overridingTx, List<Transaction> killedTx)", "modifiers": "private", "return": "void", "signature": "void killTx(@Nullable Transaction overridingTx, List<Transaction> killedTx)", "full_signature": "private void killTx(@Nullable Transaction overridingTx, List<Transaction> killedTx)", "class_method_signature": "Wallet.killTx(@Nullable Transaction overridingTx, List<Transaction> killedTx)", "testcase": false, "constructor": false}, {"identifier": "maybeMovePool", "parameters": "(Transaction tx, String context)", "modifiers": "private", "return": "void", "signature": "void maybeMovePool(Transaction tx, String context)", "full_signature": "private void maybeMovePool(Transaction tx, String context)", "class_method_signature": "Wallet.maybeMovePool(Transaction tx, String context)", "testcase": false, "constructor": false}, {"identifier": "addEventListener", "parameters": "(WalletEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addEventListener(WalletEventListener listener)", "full_signature": "public void addEventListener(WalletEventListener listener)", "class_method_signature": "Wallet.addEventListener(WalletEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "addEventListener", "parameters": "(WalletEventListener listener, Executor executor)", "modifiers": "public", "return": "void", "signature": "void addEventListener(WalletEventListener listener, Executor executor)", "full_signature": "public void addEventListener(WalletEventListener listener, Executor executor)", "class_method_signature": "Wallet.addEventListener(WalletEventListener listener, Executor executor)", "testcase": false, "constructor": false}, {"identifier": "removeEventListener", "parameters": "(WalletEventListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeEventListener(WalletEventListener listener)", "full_signature": "public boolean removeEventListener(WalletEventListener listener)", "class_method_signature": "Wallet.removeEventListener(WalletEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "maybeCommitTx", "parameters": "(Transaction tx)", "modifiers": "public", "return": "boolean", "signature": "boolean maybeCommitTx(Transaction tx)", "full_signature": "public boolean maybeCommitTx(Transaction tx)", "class_method_signature": "Wallet.maybeCommitTx(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "commitTx", "parameters": "(Transaction tx)", "modifiers": "public", "return": "void", "signature": "void commitTx(Transaction tx)", "full_signature": "public void commitTx(Transaction tx)", "class_method_signature": "Wallet.commitTx(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getTransactions", "parameters": "(boolean includeDead)", "modifiers": "public", "return": "Set<Transaction>", "signature": "Set<Transaction> getTransactions(boolean includeDead)", "full_signature": "public Set<Transaction> getTransactions(boolean includeDead)", "class_method_signature": "Wallet.getTransactions(boolean includeDead)", "testcase": false, "constructor": false}, {"identifier": "getWalletTransactions", "parameters": "()", "modifiers": "public", "return": "Iterable<WalletTransaction>", "signature": "Iterable<WalletTransaction> getWalletTransactions()", "full_signature": "public Iterable<WalletTransaction> getWalletTransactions()", "class_method_signature": "Wallet.getWalletTransactions()", "testcase": false, "constructor": false}, {"identifier": "addWalletTransactionsToSet", "parameters": "(Set<WalletTransaction> txs,\n                                                   Pool poolType, Collection<Transaction> pool)", "modifiers": "private static", "return": "void", "signature": "void addWalletTransactionsToSet(Set<WalletTransaction> txs,\n                                                   Pool poolType, Collection<Transaction> pool)", "full_signature": "private static void addWalletTransactionsToSet(Set<WalletTransaction> txs,\n                                                   Pool poolType, Collection<Transaction> pool)", "class_method_signature": "Wallet.addWalletTransactionsToSet(Set<WalletTransaction> txs,\n                                                   Pool poolType, Collection<Transaction> pool)", "testcase": false, "constructor": false}, {"identifier": "addWalletTransaction", "parameters": "(WalletTransaction wtx)", "modifiers": "public", "return": "void", "signature": "void addWalletTransaction(WalletTransaction wtx)", "full_signature": "public void addWalletTransaction(WalletTransaction wtx)", "class_method_signature": "Wallet.addWalletTransaction(WalletTransaction wtx)", "testcase": false, "constructor": false}, {"identifier": "addWalletTransaction", "parameters": "(Pool pool, Transaction tx)", "modifiers": "private", "return": "void", "signature": "void addWalletTransaction(Pool pool, Transaction tx)", "full_signature": "private void addWalletTransaction(Pool pool, Transaction tx)", "class_method_signature": "Wallet.addWalletTransaction(Pool pool, Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getTransactionsByTime", "parameters": "()", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getTransactionsByTime()", "full_signature": "public List<Transaction> getTransactionsByTime()", "class_method_signature": "Wallet.getTransactionsByTime()", "testcase": false, "constructor": false}, {"identifier": "getRecentTransactions", "parameters": "(int numTransactions, boolean includeDead)", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead)", "full_signature": "public List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead)", "class_method_signature": "Wallet.getRecentTransactions(int numTransactions, boolean includeDead)", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "(Sha256Hash hash)", "modifiers": "@Nullable public", "return": "Transaction", "signature": "Transaction getTransaction(Sha256Hash hash)", "full_signature": "@Nullable public Transaction getTransaction(Sha256Hash hash)", "class_method_signature": "Wallet.getTransaction(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "clearTransactions", "parameters": "(int fromHeight)", "modifiers": "public", "return": "void", "signature": "void clearTransactions(int fromHeight)", "full_signature": "public void clearTransactions(int fromHeight)", "class_method_signature": "Wallet.clearTransactions(int fromHeight)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanup()", "full_signature": "public void cleanup()", "class_method_signature": "Wallet.cleanup()", "testcase": false, "constructor": false}, {"identifier": "getContainingPools", "parameters": "(Transaction tx)", "modifiers": "", "return": "EnumSet<Pool>", "signature": "EnumSet<Pool> getContainingPools(Transaction tx)", "full_signature": " EnumSet<Pool> getContainingPools(Transaction tx)", "class_method_signature": "Wallet.getContainingPools(Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "getPoolSize", "parameters": "(WalletTransaction.Pool pool)", "modifiers": "", "return": "int", "signature": "int getPoolSize(WalletTransaction.Pool pool)", "full_signature": " int getPoolSize(WalletTransaction.Pool pool)", "class_method_signature": "Wallet.getPoolSize(WalletTransaction.Pool pool)", "testcase": false, "constructor": false}, {"identifier": "createSend", "parameters": "(Address address, BigInteger nanocoins)", "modifiers": "public", "return": "Transaction", "signature": "Transaction createSend(Address address, BigInteger nanocoins)", "full_signature": "public Transaction createSend(Address address, BigInteger nanocoins)", "class_method_signature": "Wallet.createSend(Address address, BigInteger nanocoins)", "testcase": false, "constructor": false}, {"identifier": "sendCoinsOffline", "parameters": "(SendRequest request)", "modifiers": "public", "return": "Transaction", "signature": "Transaction sendCoinsOffline(SendRequest request)", "full_signature": "public Transaction sendCoinsOffline(SendRequest request)", "class_method_signature": "Wallet.sendCoinsOffline(SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(TransactionBroadcaster broadcaster, Address to, BigInteger value)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(TransactionBroadcaster broadcaster, Address to, BigInteger value)", "full_signature": "public SendResult sendCoins(TransactionBroadcaster broadcaster, Address to, BigInteger value)", "class_method_signature": "Wallet.sendCoins(TransactionBroadcaster broadcaster, Address to, BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(TransactionBroadcaster broadcaster, SendRequest request)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "full_signature": "public SendResult sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "class_method_signature": "Wallet.sendCoins(TransactionBroadcaster broadcaster, SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(SendRequest request)", "modifiers": "public", "return": "SendResult", "signature": "SendResult sendCoins(SendRequest request)", "full_signature": "public SendResult sendCoins(SendRequest request)", "class_method_signature": "Wallet.sendCoins(SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendCoins", "parameters": "(Peer peer, SendRequest request)", "modifiers": "public", "return": "Transaction", "signature": "Transaction sendCoins(Peer peer, SendRequest request)", "full_signature": "public Transaction sendCoins(Peer peer, SendRequest request)", "class_method_signature": "Wallet.sendCoins(Peer peer, SendRequest request)", "testcase": false, "constructor": false}, {"identifier": "completeTx", "parameters": "(SendRequest req)", "modifiers": "public", "return": "void", "signature": "void completeTx(SendRequest req)", "full_signature": "public void completeTx(SendRequest req)", "class_method_signature": "Wallet.completeTx(SendRequest req)", "testcase": false, "constructor": false}, {"identifier": "adjustOutputDownwardsForFee", "parameters": "(Transaction tx, CoinSelection coinSelection, BigInteger baseFee, BigInteger feePerKb)", "modifiers": "private", "return": "boolean", "signature": "boolean adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, BigInteger baseFee, BigInteger feePerKb)", "full_signature": "private boolean adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, BigInteger baseFee, BigInteger feePerKb)", "class_method_signature": "Wallet.adjustOutputDownwardsForFee(Transaction tx, CoinSelection coinSelection, BigInteger baseFee, BigInteger feePerKb)", "testcase": false, "constructor": false}, {"identifier": "calculateAllSpendCandidates", "parameters": "(boolean excludeImmatureCoinbases)", "modifiers": "public", "return": "LinkedList<TransactionOutput>", "signature": "LinkedList<TransactionOutput> calculateAllSpendCandidates(boolean excludeImmatureCoinbases)", "full_signature": "public LinkedList<TransactionOutput> calculateAllSpendCandidates(boolean excludeImmatureCoinbases)", "class_method_signature": "Wallet.calculateAllSpendCandidates(boolean excludeImmatureCoinbases)", "testcase": false, "constructor": false}, {"identifier": "getWatchedOutputs", "parameters": "(boolean excludeImmatureCoinbases)", "modifiers": "public", "return": "LinkedList<TransactionOutput>", "signature": "LinkedList<TransactionOutput> getWatchedOutputs(boolean excludeImmatureCoinbases)", "full_signature": "public LinkedList<TransactionOutput> getWatchedOutputs(boolean excludeImmatureCoinbases)", "class_method_signature": "Wallet.getWatchedOutputs(boolean excludeImmatureCoinbases)", "testcase": false, "constructor": false}, {"identifier": "getChangeAddress", "parameters": "()", "modifiers": "public", "return": "Address", "signature": "Address getChangeAddress()", "full_signature": "public Address getChangeAddress()", "class_method_signature": "Wallet.getChangeAddress()", "testcase": false, "constructor": false}, {"identifier": "addKey", "parameters": "(final ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean addKey(final ECKey key)", "full_signature": "public boolean addKey(final ECKey key)", "class_method_signature": "Wallet.addKey(final ECKey key)", "testcase": false, "constructor": false}, {"identifier": "addKeys", "parameters": "(final List<ECKey> keys)", "modifiers": "public", "return": "int", "signature": "int addKeys(final List<ECKey> keys)", "full_signature": "public int addKeys(final List<ECKey> keys)", "class_method_signature": "Wallet.addKeys(final List<ECKey> keys)", "testcase": false, "constructor": false}, {"identifier": "isAddressWatched", "parameters": "(Address address)", "modifiers": "public", "return": "boolean", "signature": "boolean isAddressWatched(Address address)", "full_signature": "public boolean isAddressWatched(Address address)", "class_method_signature": "Wallet.isAddressWatched(Address address)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddress", "parameters": "(final Address address)", "modifiers": "public", "return": "boolean", "signature": "boolean addWatchedAddress(final Address address)", "full_signature": "public boolean addWatchedAddress(final Address address)", "class_method_signature": "Wallet.addWatchedAddress(final Address address)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddress", "parameters": "(final Address address, long creationTime)", "modifiers": "public", "return": "boolean", "signature": "boolean addWatchedAddress(final Address address, long creationTime)", "full_signature": "public boolean addWatchedAddress(final Address address, long creationTime)", "class_method_signature": "Wallet.addWatchedAddress(final Address address, long creationTime)", "testcase": false, "constructor": false}, {"identifier": "addWatchedAddresses", "parameters": "(final List<Address> addresses, long creationTime)", "modifiers": "public", "return": "int", "signature": "int addWatchedAddresses(final List<Address> addresses, long creationTime)", "full_signature": "public int addWatchedAddresses(final List<Address> addresses, long creationTime)", "class_method_signature": "Wallet.addWatchedAddresses(final List<Address> addresses, long creationTime)", "testcase": false, "constructor": false}, {"identifier": "addWatchedScripts", "parameters": "(final List<Script> scripts)", "modifiers": "public", "return": "int", "signature": "int addWatchedScripts(final List<Script> scripts)", "full_signature": "public int addWatchedScripts(final List<Script> scripts)", "class_method_signature": "Wallet.addWatchedScripts(final List<Script> scripts)", "testcase": false, "constructor": false}, {"identifier": "findKeyFromPubHash", "parameters": "(byte[] pubkeyHash)", "modifiers": "@Nullable public", "return": "ECKey", "signature": "ECKey findKeyFromPubHash(byte[] pubkeyHash)", "full_signature": "@Nullable public ECKey findKeyFromPubHash(byte[] pubkeyHash)", "class_method_signature": "Wallet.findKeyFromPubHash(byte[] pubkeyHash)", "testcase": false, "constructor": false}, {"identifier": "hasKey", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasKey(ECKey key)", "full_signature": "public boolean hasKey(ECKey key)", "class_method_signature": "Wallet.hasKey(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyHashMine", "parameters": "(byte[] pubkeyHash)", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyHashMine(byte[] pubkeyHash)", "full_signature": "public boolean isPubKeyHashMine(byte[] pubkeyHash)", "class_method_signature": "Wallet.isPubKeyHashMine(byte[] pubkeyHash)", "testcase": false, "constructor": false}, {"identifier": "isWatchedScript", "parameters": "(Script script)", "modifiers": "public", "return": "boolean", "signature": "boolean isWatchedScript(Script script)", "full_signature": "public boolean isWatchedScript(Script script)", "class_method_signature": "Wallet.isWatchedScript(Script script)", "testcase": false, "constructor": false}, {"identifier": "findKeyFromPubKey", "parameters": "(byte[] pubkey)", "modifiers": "@Nullable public", "return": "ECKey", "signature": "ECKey findKeyFromPubKey(byte[] pubkey)", "full_signature": "@Nullable public ECKey findKeyFromPubKey(byte[] pubkey)", "class_method_signature": "Wallet.findKeyFromPubKey(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "isPubKeyMine", "parameters": "(byte[] pubkey)", "modifiers": "public", "return": "boolean", "signature": "boolean isPubKeyMine(byte[] pubkey)", "full_signature": "public boolean isPubKeyMine(byte[] pubkey)", "class_method_signature": "Wallet.isPubKeyMine(byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance()", "full_signature": "public BigInteger getBalance()", "class_method_signature": "Wallet.getBalance()", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(BalanceType balanceType)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance(BalanceType balanceType)", "full_signature": "public BigInteger getBalance(BalanceType balanceType)", "class_method_signature": "Wallet.getBalance(BalanceType balanceType)", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(CoinSelector selector)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getBalance(CoinSelector selector)", "full_signature": "public BigInteger getBalance(CoinSelector selector)", "class_method_signature": "Wallet.getBalance(CoinSelector selector)", "testcase": false, "constructor": false}, {"identifier": "getWatchedBalance", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getWatchedBalance()", "full_signature": "public BigInteger getWatchedBalance()", "class_method_signature": "Wallet.getWatchedBalance()", "testcase": false, "constructor": false}, {"identifier": "getWatchedBalance", "parameters": "(CoinSelector selector)", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getWatchedBalance(CoinSelector selector)", "full_signature": "public BigInteger getWatchedBalance(CoinSelector selector)", "class_method_signature": "Wallet.getWatchedBalance(CoinSelector selector)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Wallet.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n                           @Nullable AbstractBlockChain chain)", "modifiers": "public", "return": "String", "signature": "String toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n                           @Nullable AbstractBlockChain chain)", "full_signature": "public String toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n                           @Nullable AbstractBlockChain chain)", "class_method_signature": "Wallet.toString(boolean includePrivateKeys, boolean includeTransactions, boolean includeExtensions,\n                           @Nullable AbstractBlockChain chain)", "testcase": false, "constructor": false}, {"identifier": "toStringHelper", "parameters": "(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "modifiers": "private", "return": "void", "signature": "void toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "full_signature": "private void toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "class_method_signature": "Wallet.toStringHelper(StringBuilder builder, Map<Sha256Hash, Transaction> transactionMap,\n                                @Nullable AbstractBlockChain chain, @Nullable Comparator<Transaction> sortOrder)", "testcase": false, "constructor": false}, {"identifier": "reorganize", "parameters": "(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "modifiers": "public", "return": "void", "signature": "void reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "full_signature": "public void reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "class_method_signature": "Wallet.reorganize(StoredBlock splitPoint, List<StoredBlock> oldBlocks, List<StoredBlock> newBlocks)", "testcase": false, "constructor": false}, {"identifier": "subtractDepthAndWorkDone", "parameters": "(int depthToSubtract, BigInteger workDoneToSubtract,\n                                          Collection<Transaction> transactions)", "modifiers": "private", "return": "void", "signature": "void subtractDepthAndWorkDone(int depthToSubtract, BigInteger workDoneToSubtract,\n                                          Collection<Transaction> transactions)", "full_signature": "private void subtractDepthAndWorkDone(int depthToSubtract, BigInteger workDoneToSubtract,\n                                          Collection<Transaction> transactions)", "class_method_signature": "Wallet.subtractDepthAndWorkDone(int depthToSubtract, BigInteger workDoneToSubtract,\n                                          Collection<Transaction> transactions)", "testcase": false, "constructor": false}, {"identifier": "getPendingTransactions", "parameters": "()", "modifiers": "public", "return": "Collection<Transaction>", "signature": "Collection<Transaction> getPendingTransactions()", "full_signature": "public Collection<Transaction> getPendingTransactions()", "class_method_signature": "Wallet.getPendingTransactions()", "testcase": false, "constructor": false}, {"identifier": "getEarliestKeyCreationTime", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEarliestKeyCreationTime()", "full_signature": "@Override public long getEarliestKeyCreationTime()", "class_method_signature": "Wallet.getEarliestKeyCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenHash", "parameters": "()", "modifiers": "@Nullable public", "return": "Sha256Hash", "signature": "Sha256Hash getLastBlockSeenHash()", "full_signature": "@Nullable public Sha256Hash getLastBlockSeenHash()", "class_method_signature": "Wallet.getLastBlockSeenHash()", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenHash", "parameters": "(@Nullable Sha256Hash lastBlockSeenHash)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "full_signature": "public void setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "class_method_signature": "Wallet.setLastBlockSeenHash(@Nullable Sha256Hash lastBlockSeenHash)", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenHeight", "parameters": "(int lastBlockSeenHeight)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenHeight(int lastBlockSeenHeight)", "full_signature": "public void setLastBlockSeenHeight(int lastBlockSeenHeight)", "class_method_signature": "Wallet.setLastBlockSeenHeight(int lastBlockSeenHeight)", "testcase": false, "constructor": false}, {"identifier": "setLastBlockSeenTimeSecs", "parameters": "(long timeSecs)", "modifiers": "public", "return": "void", "signature": "void setLastBlockSeenTimeSecs(long timeSecs)", "full_signature": "public void setLastBlockSeenTimeSecs(long timeSecs)", "class_method_signature": "Wallet.setLastBlockSeenTimeSecs(long timeSecs)", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenTimeSecs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastBlockSeenTimeSecs()", "full_signature": "public long getLastBlockSeenTimeSecs()", "class_method_signature": "Wallet.getLastBlockSeenTimeSecs()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenTime", "parameters": "()", "modifiers": "@Nullable public", "return": "Date", "signature": "Date getLastBlockSeenTime()", "full_signature": "@Nullable public Date getLastBlockSeenTime()", "class_method_signature": "Wallet.getLastBlockSeenTime()", "testcase": false, "constructor": false}, {"identifier": "getLastBlockSeenHeight", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLastBlockSeenHeight()", "full_signature": "public int getLastBlockSeenHeight()", "class_method_signature": "Wallet.getLastBlockSeenHeight()", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(CharSequence password)", "modifiers": "public", "return": "KeyParameter", "signature": "KeyParameter encrypt(CharSequence password)", "full_signature": "public KeyParameter encrypt(CharSequence password)", "class_method_signature": "Wallet.encrypt(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public", "return": "void", "signature": "void encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public void encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "Wallet.encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(KeyParameter aesKey)", "modifiers": "public", "return": "void", "signature": "void decrypt(KeyParameter aesKey)", "full_signature": "public void decrypt(KeyParameter aesKey)", "class_method_signature": "Wallet.decrypt(KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "addNewEncryptedKey", "parameters": "(KeyCrypter keyCrypter, KeyParameter aesKey)", "modifiers": "public", "return": "ECKey", "signature": "ECKey addNewEncryptedKey(KeyCrypter keyCrypter, KeyParameter aesKey)", "full_signature": "public ECKey addNewEncryptedKey(KeyCrypter keyCrypter, KeyParameter aesKey)", "class_method_signature": "Wallet.addNewEncryptedKey(KeyCrypter keyCrypter, KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "addNewEncryptedKey", "parameters": "(CharSequence password)", "modifiers": "public", "return": "ECKey", "signature": "ECKey addNewEncryptedKey(CharSequence password)", "full_signature": "public ECKey addNewEncryptedKey(CharSequence password)", "class_method_signature": "Wallet.addNewEncryptedKey(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "checkPassword", "parameters": "(CharSequence password)", "modifiers": "public", "return": "boolean", "signature": "boolean checkPassword(CharSequence password)", "full_signature": "public boolean checkPassword(CharSequence password)", "class_method_signature": "Wallet.checkPassword(CharSequence password)", "testcase": false, "constructor": false}, {"identifier": "checkAESKey", "parameters": "(KeyParameter aesKey)", "modifiers": "public", "return": "boolean", "signature": "boolean checkAESKey(KeyParameter aesKey)", "full_signature": "public boolean checkAESKey(KeyParameter aesKey)", "class_method_signature": "Wallet.checkAESKey(KeyParameter aesKey)", "testcase": false, "constructor": false}, {"identifier": "getKeyCrypter", "parameters": "()", "modifiers": "public", "return": "KeyCrypter", "signature": "KeyCrypter getKeyCrypter()", "full_signature": "public KeyCrypter getKeyCrypter()", "class_method_signature": "Wallet.getKeyCrypter()", "testcase": false, "constructor": false}, {"identifier": "setKeyCrypter", "parameters": "(KeyCrypter keyCrypter)", "modifiers": "public", "return": "void", "signature": "void setKeyCrypter(KeyCrypter keyCrypter)", "full_signature": "public void setKeyCrypter(KeyCrypter keyCrypter)", "class_method_signature": "Wallet.setKeyCrypter(KeyCrypter keyCrypter)", "testcase": false, "constructor": false}, {"identifier": "getEncryptionType", "parameters": "()", "modifiers": "public", "return": "EncryptionType", "signature": "EncryptionType getEncryptionType()", "full_signature": "public EncryptionType getEncryptionType()", "class_method_signature": "Wallet.getEncryptionType()", "testcase": false, "constructor": false}, {"identifier": "isEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEncrypted()", "full_signature": "public boolean isEncrypted()", "class_method_signature": "Wallet.isEncrypted()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVersion()", "full_signature": "public int getVersion()", "class_method_signature": "Wallet.getVersion()", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(int version)", "modifiers": "public", "return": "void", "signature": "void setVersion(int version)", "full_signature": "public void setVersion(int version)", "class_method_signature": "Wallet.setVersion(int version)", "testcase": false, "constructor": false}, {"identifier": "setDescription", "parameters": "(String description)", "modifiers": "public", "return": "void", "signature": "void setDescription(String description)", "full_signature": "public void setDescription(String description)", "class_method_signature": "Wallet.setDescription(String description)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDescription()", "full_signature": "public String getDescription()", "class_method_signature": "Wallet.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getBloomFilterElementCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBloomFilterElementCount()", "full_signature": "@Override public int getBloomFilterElementCount()", "class_method_signature": "Wallet.getBloomFilterElementCount()", "testcase": false, "constructor": false}, {"identifier": "isRequiringUpdateAllBloomFilter", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRequiringUpdateAllBloomFilter()", "full_signature": "@Override public boolean isRequiringUpdateAllBloomFilter()", "class_method_signature": "Wallet.isRequiringUpdateAllBloomFilter()", "testcase": false, "constructor": false}, {"identifier": "getBloomFilter", "parameters": "(double falsePositiveRate)", "modifiers": "public", "return": "BloomFilter", "signature": "BloomFilter getBloomFilter(double falsePositiveRate)", "full_signature": "public BloomFilter getBloomFilter(double falsePositiveRate)", "class_method_signature": "Wallet.getBloomFilter(double falsePositiveRate)", "testcase": false, "constructor": false}, {"identifier": "getBloomFilter", "parameters": "(int size, double falsePositiveRate, long nTweak)", "modifiers": "@Override public", "return": "BloomFilter", "signature": "BloomFilter getBloomFilter(int size, double falsePositiveRate, long nTweak)", "full_signature": "@Override public BloomFilter getBloomFilter(int size, double falsePositiveRate, long nTweak)", "class_method_signature": "Wallet.getBloomFilter(int size, double falsePositiveRate, long nTweak)", "testcase": false, "constructor": false}, {"identifier": "isTxOutputBloomFilterable", "parameters": "(TransactionOutput out)", "modifiers": "private", "return": "boolean", "signature": "boolean isTxOutputBloomFilterable(TransactionOutput out)", "full_signature": "private boolean isTxOutputBloomFilterable(TransactionOutput out)", "class_method_signature": "Wallet.isTxOutputBloomFilterable(TransactionOutput out)", "testcase": false, "constructor": false}, {"identifier": "getCoinSelector", "parameters": "()", "modifiers": "public", "return": "CoinSelector", "signature": "CoinSelector getCoinSelector()", "full_signature": "public CoinSelector getCoinSelector()", "class_method_signature": "Wallet.getCoinSelector()", "testcase": false, "constructor": false}, {"identifier": "setCoinSelector", "parameters": "(@Nonnull CoinSelector coinSelector)", "modifiers": "public", "return": "void", "signature": "void setCoinSelector(@Nonnull CoinSelector coinSelector)", "full_signature": "public void setCoinSelector(@Nonnull CoinSelector coinSelector)", "class_method_signature": "Wallet.setCoinSelector(@Nonnull CoinSelector coinSelector)", "testcase": false, "constructor": false}, {"identifier": "allowSpendingUnconfirmedTransactions", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void allowSpendingUnconfirmedTransactions()", "full_signature": "public void allowSpendingUnconfirmedTransactions()", "class_method_signature": "Wallet.allowSpendingUnconfirmedTransactions()", "testcase": false, "constructor": false}, {"identifier": "getBalanceFuture", "parameters": "(final BigInteger value, final BalanceType type)", "modifiers": "public", "return": "ListenableFuture<BigInteger>", "signature": "ListenableFuture<BigInteger> getBalanceFuture(final BigInteger value, final BalanceType type)", "full_signature": "public ListenableFuture<BigInteger> getBalanceFuture(final BigInteger value, final BalanceType type)", "class_method_signature": "Wallet.getBalanceFuture(final BigInteger value, final BalanceType type)", "testcase": false, "constructor": false}, {"identifier": "checkBalanceFuturesLocked", "parameters": "(@Nullable BigInteger avail)", "modifiers": "private", "return": "void", "signature": "void checkBalanceFuturesLocked(@Nullable BigInteger avail)", "full_signature": "private void checkBalanceFuturesLocked(@Nullable BigInteger avail)", "class_method_signature": "Wallet.checkBalanceFuturesLocked(@Nullable BigInteger avail)", "testcase": false, "constructor": false}, {"identifier": "addExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "void", "signature": "void addExtension(WalletExtension extension)", "full_signature": "public void addExtension(WalletExtension extension)", "class_method_signature": "Wallet.addExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "addOrGetExistingExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "WalletExtension", "signature": "WalletExtension addOrGetExistingExtension(WalletExtension extension)", "full_signature": "public WalletExtension addOrGetExistingExtension(WalletExtension extension)", "class_method_signature": "Wallet.addOrGetExistingExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "addOrUpdateExtension", "parameters": "(WalletExtension extension)", "modifiers": "public", "return": "void", "signature": "void addOrUpdateExtension(WalletExtension extension)", "full_signature": "public void addOrUpdateExtension(WalletExtension extension)", "class_method_signature": "Wallet.addOrUpdateExtension(WalletExtension extension)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "public", "return": "Map<String, WalletExtension>", "signature": "Map<String, WalletExtension> getExtensions()", "full_signature": "public Map<String, WalletExtension> getExtensions()", "class_method_signature": "Wallet.getExtensions()", "testcase": false, "constructor": false}, {"identifier": "queueOnTransactionConfidenceChanged", "parameters": "(final Transaction tx)", "modifiers": "private", "return": "void", "signature": "void queueOnTransactionConfidenceChanged(final Transaction tx)", "full_signature": "private void queueOnTransactionConfidenceChanged(final Transaction tx)", "class_method_signature": "Wallet.queueOnTransactionConfidenceChanged(final Transaction tx)", "testcase": false, "constructor": false}, {"identifier": "maybeQueueOnWalletChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeQueueOnWalletChanged()", "full_signature": "private void maybeQueueOnWalletChanged()", "class_method_signature": "Wallet.maybeQueueOnWalletChanged()", "testcase": false, "constructor": false}, {"identifier": "queueOnCoinsReceived", "parameters": "(final Transaction tx, final BigInteger balance, final BigInteger newBalance)", "modifiers": "private", "return": "void", "signature": "void queueOnCoinsReceived(final Transaction tx, final BigInteger balance, final BigInteger newBalance)", "full_signature": "private void queueOnCoinsReceived(final Transaction tx, final BigInteger balance, final BigInteger newBalance)", "class_method_signature": "Wallet.queueOnCoinsReceived(final Transaction tx, final BigInteger balance, final BigInteger newBalance)", "testcase": false, "constructor": false}, {"identifier": "queueOnCoinsSent", "parameters": "(final Transaction tx, final BigInteger prevBalance, final BigInteger newBalance)", "modifiers": "private", "return": "void", "signature": "void queueOnCoinsSent(final Transaction tx, final BigInteger prevBalance, final BigInteger newBalance)", "full_signature": "private void queueOnCoinsSent(final Transaction tx, final BigInteger prevBalance, final BigInteger newBalance)", "class_method_signature": "Wallet.queueOnCoinsSent(final Transaction tx, final BigInteger prevBalance, final BigInteger newBalance)", "testcase": false, "constructor": false}, {"identifier": "queueOnReorganize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void queueOnReorganize()", "full_signature": "private void queueOnReorganize()", "class_method_signature": "Wallet.queueOnReorganize()", "testcase": false, "constructor": false}, {"identifier": "queueOnKeysAdded", "parameters": "(final List<ECKey> keys)", "modifiers": "private", "return": "void", "signature": "void queueOnKeysAdded(final List<ECKey> keys)", "full_signature": "private void queueOnKeysAdded(final List<ECKey> keys)", "class_method_signature": "Wallet.queueOnKeysAdded(final List<ECKey> keys)", "testcase": false, "constructor": false}, {"identifier": "queueOnScriptsAdded", "parameters": "(final List<Script> scripts)", "modifiers": "private", "return": "void", "signature": "void queueOnScriptsAdded(final List<Script> scripts)", "full_signature": "private void queueOnScriptsAdded(final List<Script> scripts)", "class_method_signature": "Wallet.queueOnScriptsAdded(final List<Script> scripts)", "testcase": false, "constructor": false}, {"identifier": "estimateBytesForSigning", "parameters": "(CoinSelection selection)", "modifiers": "private", "return": "int", "signature": "int estimateBytesForSigning(CoinSelection selection)", "full_signature": "private int estimateBytesForSigning(CoinSelection selection)", "class_method_signature": "Wallet.estimateBytesForSigning(CoinSelection selection)", "testcase": false, "constructor": false}, {"identifier": "setTransactionBroadcaster", "parameters": "(@Nullable com.google.bitcoin.core.TransactionBroadcaster broadcaster)", "modifiers": "public", "return": "void", "signature": "void setTransactionBroadcaster(@Nullable com.google.bitcoin.core.TransactionBroadcaster broadcaster)", "full_signature": "public void setTransactionBroadcaster(@Nullable com.google.bitcoin.core.TransactionBroadcaster broadcaster)", "class_method_signature": "Wallet.setTransactionBroadcaster(@Nullable com.google.bitcoin.core.TransactionBroadcaster broadcaster)", "testcase": false, "constructor": false}, {"identifier": "setKeyRotationTime", "parameters": "(Date time)", "modifiers": "public", "return": "void", "signature": "void setKeyRotationTime(Date time)", "full_signature": "public void setKeyRotationTime(Date time)", "class_method_signature": "Wallet.setKeyRotationTime(Date time)", "testcase": false, "constructor": false}, {"identifier": "getKeyRotationTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getKeyRotationTime()", "full_signature": "public Date getKeyRotationTime()", "class_method_signature": "Wallet.getKeyRotationTime()", "testcase": false, "constructor": false}, {"identifier": "setKeyRotationTime", "parameters": "(long unixTimeSeconds)", "modifiers": "public", "return": "void", "signature": "void setKeyRotationTime(long unixTimeSeconds)", "full_signature": "public void setKeyRotationTime(long unixTimeSeconds)", "class_method_signature": "Wallet.setKeyRotationTime(long unixTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "setKeyRotationEnabled", "parameters": "(boolean enabled)", "modifiers": "public", "return": "void", "signature": "void setKeyRotationEnabled(boolean enabled)", "full_signature": "public void setKeyRotationEnabled(boolean enabled)", "class_method_signature": "Wallet.setKeyRotationEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "isKeyRotating", "parameters": "(ECKey key)", "modifiers": "public", "return": "boolean", "signature": "boolean isKeyRotating(ECKey key)", "full_signature": "public boolean isKeyRotating(ECKey key)", "class_method_signature": "Wallet.isKeyRotating(ECKey key)", "testcase": false, "constructor": false}, {"identifier": "maybeRotateKeys", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeRotateKeys()", "full_signature": "private void maybeRotateKeys()", "class_method_signature": "Wallet.maybeRotateKeys()", "testcase": false, "constructor": false}, {"identifier": "rekeyOneBatch", "parameters": "(long keyRotationTimestamp, final TransactionBroadcaster broadcaster)", "modifiers": "@Nullable private", "return": "Transaction", "signature": "Transaction rekeyOneBatch(long keyRotationTimestamp, final TransactionBroadcaster broadcaster)", "full_signature": "@Nullable private Transaction rekeyOneBatch(long keyRotationTimestamp, final TransactionBroadcaster broadcaster)", "class_method_signature": "Wallet.rekeyOneBatch(long keyRotationTimestamp, final TransactionBroadcaster broadcaster)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/core/Wallet.java"}, "focal_method": {"identifier": "completeTx", "parameters": "(SendRequest req)", "modifiers": "public", "return": "void", "body": "public void completeTx(SendRequest req) throws InsufficientMoneyException {\n        lock.lock();\n        try {\n            checkArgument(!req.completed, \"Given SendRequest has already been completed.\");\n            // Calculate the amount of value we need to import.\n            BigInteger value = BigInteger.ZERO;\n            for (TransactionOutput output : req.tx.getOutputs()) {\n                value = value.add(output.getValue());\n            }\n            BigInteger totalOutput = value;\n\n            log.info(\"Completing send tx with {} outputs totalling {} satoshis (not including fees)\",\n                    req.tx.getOutputs().size(), value);\n\n            // If any inputs have already been added, we don't need to get their value from wallet\n            BigInteger totalInput = BigInteger.ZERO;\n            for (TransactionInput input : req.tx.getInputs())\n                if (input.getConnectedOutput() != null)\n                    totalInput = totalInput.add(input.getConnectedOutput().getValue());\n                else\n                    log.warn(\"SendRequest transaction already has inputs but we don't know how much they are worth - they will be added to fee.\");\n            value = value.subtract(totalInput);\n\n            List<TransactionInput> originalInputs = new ArrayList<TransactionInput>(req.tx.getInputs());\n\n            // We need to know if we need to add an additional fee because one of our values are smaller than 0.01 BTC\n            boolean needAtLeastReferenceFee = false;\n            if (req.ensureMinRequiredFee && !req.emptyWallet) { // min fee checking is handled later for emptyWallet\n                for (TransactionOutput output : req.tx.getOutputs())\n                    if (output.getValue().compareTo(Utils.CENT) < 0) {\n                        if (output.getValue().compareTo(output.getMinNonDustValue()) < 0)\n                            throw new IllegalArgumentException(\"Tried to send dust with ensureMinRequiredFee set - no way to complete this\");\n                        needAtLeastReferenceFee = true;\n                        break;\n                    }\n            }\n\n            // Calculate a list of ALL potential candidates for spending and then ask a coin selector to provide us\n            // with the actual outputs that'll be used to gather the required amount of value. In this way, users\n            // can customize coin selection policies.\n            //\n            // Note that this code is poorly optimized: the spend candidates only alter when transactions in the wallet\n            // change - it could be pre-calculated and held in RAM, and this is probably an optimization worth doing.\n            // Note that output.isMine(this) needs to test the keychain which is currently an array, so it's\n            // O(candidate outputs ^ keychain.size())! There's lots of low hanging fruit here.\n            LinkedList<TransactionOutput> candidates = calculateAllSpendCandidates(true);\n            CoinSelection bestCoinSelection;\n            TransactionOutput bestChangeOutput = null;\n            if (!req.emptyWallet) {\n                // This can throw InsufficientMoneyException.\n                FeeCalculation feeCalculation;\n                feeCalculation = new FeeCalculation(req, value, originalInputs, needAtLeastReferenceFee, candidates);\n                bestCoinSelection = feeCalculation.bestCoinSelection;\n                bestChangeOutput = feeCalculation.bestChangeOutput;\n            } else {\n                // We're being asked to empty the wallet. What this means is ensuring \"tx\" has only a single output\n                // of the total value we can currently spend as determined by the selector, and then subtracting the fee.\n                checkState(req.tx.getOutputs().size() == 1, \"Empty wallet TX must have a single output only.\");\n                CoinSelector selector = req.coinSelector == null ? coinSelector : req.coinSelector;\n                bestCoinSelection = selector.select(NetworkParameters.MAX_MONEY, candidates);\n                req.tx.getOutput(0).setValue(bestCoinSelection.valueGathered);\n                totalOutput = bestCoinSelection.valueGathered;\n            }\n\n            for (TransactionOutput output : bestCoinSelection.gathered)\n                req.tx.addInput(output);\n\n            if (req.ensureMinRequiredFee && req.emptyWallet) {\n                final BigInteger baseFee = req.fee == null ? BigInteger.ZERO : req.fee;\n                final BigInteger feePerKb = req.feePerKb == null ? BigInteger.ZERO : req.feePerKb;\n                Transaction tx = req.tx;\n                if (!adjustOutputDownwardsForFee(tx, bestCoinSelection, baseFee, feePerKb))\n                    throw new InsufficientMoneyException.CouldNotAdjustDownwards();\n            }\n\n            totalInput = totalInput.add(bestCoinSelection.valueGathered);\n\n            if (bestChangeOutput != null) {\n                req.tx.addOutput(bestChangeOutput);\n                totalOutput = totalOutput.add(bestChangeOutput.getValue());\n                log.info(\"  with {} coins change\", bitcoinValueToFriendlyString(bestChangeOutput.getValue()));\n            }\n            final BigInteger calculatedFee = totalInput.subtract(totalOutput);\n            if (calculatedFee.signum() > 0) {\n                log.info(\"  with a fee of {}\", bitcoinValueToFriendlyString(calculatedFee));\n            }\n\n            // Now sign the inputs, thus proving that we are entitled to redeem the connected outputs.\n            req.tx.signInputs(Transaction.SigHash.ALL, this, req.aesKey);\n\n            // Check size.\n            int size = req.tx.bitcoinSerialize().length;\n            if (size > Transaction.MAX_STANDARD_TX_SIZE) {\n                throw new IllegalArgumentException(\n                        String.format(\"Transaction could not be created without exceeding max size: %d vs %d\", size,\n                            Transaction.MAX_STANDARD_TX_SIZE));\n            }\n\n            // Label the transaction as being self created. We can use this later to spend its change output even before\n            // the transaction is confirmed. We deliberately won't bother notifying listeners here as there's not much\n            // point - the user isn't interested in a confidence transition they made themselves.\n            req.tx.getConfidence().setSource(TransactionConfidence.Source.SELF);\n            // Label the transaction as being a user requested payment. This can be used to render GUI wallet\n            // transaction lists more appropriately, especially when the wallet starts to generate transactions itself\n            // for internal purposes.\n            req.tx.setPurpose(Transaction.Purpose.USER_PAYMENT);\n            req.completed = true;\n            req.fee = calculatedFee;\n            log.info(\"  completed: {}\", req.tx);\n        } finally {\n            lock.unlock();\n        }\n    }", "signature": "void completeTx(SendRequest req)", "full_signature": "public void completeTx(SendRequest req)", "class_method_signature": "Wallet.completeTx(SendRequest req)", "testcase": false, "constructor": false, "invocations": ["lock", "checkArgument", "getOutputs", "add", "getValue", "info", "size", "getOutputs", "getInputs", "getConnectedOutput", "add", "getValue", "getConnectedOutput", "warn", "subtract", "getInputs", "getOutputs", "compareTo", "getValue", "compareTo", "getValue", "getMinNonDustValue", "calculateAllSpendCandidates", "checkState", "size", "getOutputs", "select", "setValue", "getOutput", "addInput", "adjustOutputDownwardsForFee", "add", "addOutput", "add", "getValue", "info", "bitcoinValueToFriendlyString", "getValue", "subtract", "signum", "info", "bitcoinValueToFriendlyString", "signInputs", "bitcoinSerialize", "format", "setSource", "getConfidence", "setPurpose", "info", "unlock"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}