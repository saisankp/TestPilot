{"test_class": {"identifier": "InterruptRefPatternTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/cli/InterruptRefPatternTest.java"}, "test_case": {"identifier": "testSuccess1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSuccess1() {\n\t\tString line = \"user interrupt reference id: 3422\";\n\t\tInterruptRefPattern pattern = new InterruptRefPattern();\n\t\tboolean matches = pattern.matchesLine(line);\n\t\tassertTrue(\"Pattern does not match\", matches);\n\t\tassertEquals(Long.valueOf(3422), pattern.getValue());\n\t}", "signature": "void testSuccess1()", "full_signature": "@Test public void testSuccess1()", "class_method_signature": "InterruptRefPatternTest.testSuccess1()", "testcase": true, "constructor": false, "invocations": ["matchesLine", "assertTrue", "assertEquals", "valueOf", "getValue"]}, "focal_class": {"identifier": "InterruptRefPattern", "superclass": "extends AbstractCliPattern<Long>", "interfaces": "", "fields": [{"original_string": "private Long reference;", "modifier": "private", "type": "Long", "declarator": "reference", "var_name": "reference"}, {"original_string": "private final Logger logger = LoggerFactory\n\t\t\t.getLogger(InterruptRefPattern.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(InterruptRefPattern.class)", "var_name": "logger"}], "methods": [{"identifier": "InterruptRefPattern", "parameters": "()", "modifiers": "", "return": "", "signature": " InterruptRefPattern()", "full_signature": "  InterruptRefPattern()", "class_method_signature": "InterruptRefPattern.InterruptRefPattern()", "testcase": false, "constructor": true}, {"identifier": "setValue", "parameters": "(final Matcher matcher)", "modifiers": "@Override protected", "return": "void", "signature": "void setValue(final Matcher matcher)", "full_signature": "@Override protected void setValue(final Matcher matcher)", "class_method_signature": "InterruptRefPattern.setValue(final Matcher matcher)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getValue()", "full_signature": "@Override public Long getValue()", "class_method_signature": "InterruptRefPattern.getValue()", "testcase": false, "constructor": false}, {"identifier": "notifyNotFound", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void notifyNotFound()", "full_signature": "@Override public void notifyNotFound()", "class_method_signature": "InterruptRefPattern.notifyNotFound()", "testcase": false, "constructor": false}, {"identifier": "notFoundIsFatal", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean notFoundIsFatal()", "full_signature": "@Override public boolean notFoundIsFatal()", "class_method_signature": "InterruptRefPattern.notFoundIsFatal()", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/cli/InterruptRefPattern.java"}, "focal_method": {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "Long", "body": "@Override\n\tpublic Long getValue() {\n\t\treturn reference;\n\t}", "signature": "Long getValue()", "full_signature": "@Override public Long getValue()", "class_method_signature": "InterruptRefPattern.getValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}