{"test_class": {"identifier": "ObjectBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private GroovyClassLoader groovyClassLoader = new GroovyClassLoader();", "modifier": "private", "type": "GroovyClassLoader", "declarator": "groovyClassLoader = new GroovyClassLoader()", "var_name": "groovyClassLoader"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/json/ObjectBuilderTest.java"}, "test_case": {"identifier": "createsArrayOfObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createsArrayOfObjects() throws Exception {\n        ArrayValue jsonArray = createJsonArray(createJsonBook(createJunitBook()),\n                                               createJsonBook(createCSharpBook())\n                                              );\n        Object array = ObjectBuilder.createArray(Book[].class, jsonArray);\n        assertArrayEquals(new Object[]{createJunitBook(), createCSharpBook()}, (Object[])array);\n    }", "signature": "void createsArrayOfObjects()", "full_signature": "@Test public void createsArrayOfObjects()", "class_method_signature": "ObjectBuilderTest.createsArrayOfObjects()", "testcase": true, "constructor": false, "invocations": ["createJsonArray", "createJsonBook", "createJunitBook", "createJsonBook", "createCSharpBook", "createArray", "assertArrayEquals", "createJunitBook", "createCSharpBook"]}, "focal_class": {"identifier": "ObjectBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Collection<String> SKIP_METHODS = newHashSet(\"setMetaClass\");", "modifier": "private static final", "type": "Collection<String>", "declarator": "SKIP_METHODS = newHashSet(\"setMetaClass\")", "var_name": "SKIP_METHODS"}, {"original_string": "private static LoadingCache<Class<?>, JsonMethod[]> methodsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build(new CacheLoader<Class<?>, JsonMethod[]>() {\n                                                                                       @Override\n                                                                                       public JsonMethod[] load(Class<?> aClass)\n                                                                                               throws Exception {\n                                                                                           return getJsonMethods(aClass);\n                                                                                       }\n                                                                                   });", "modifier": "private static", "type": "LoadingCache<Class<?>, JsonMethod[]>", "declarator": "methodsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build(new CacheLoader<Class<?>, JsonMethod[]>() {\n                                                                                       @Override\n                                                                                       public JsonMethod[] load(Class<?> aClass)\n                                                                                               throws Exception {\n                                                                                           return getJsonMethods(aClass);\n                                                                                       }\n                                                                                   })", "var_name": "methodsCache"}, {"original_string": "private static Cache<Class<?>, Constructor<?>> constructorsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build();", "modifier": "private static", "type": "Cache<Class<?>, Constructor<?>>", "declarator": "constructorsCache = CacheBuilder.newBuilder()\n                                                                                   .concurrencyLevel(8)\n                                                                                   .maximumSize(256)\n                                                                                   .expireAfterAccess(10, MINUTES)\n                                                                                   .build()", "var_name": "constructorsCache"}], "methods": [{"identifier": "getJsonMethods", "parameters": "(Class<?> clazz)", "modifiers": "private static", "return": "JsonMethod[]", "signature": "JsonMethod[] getJsonMethods(Class<?> clazz)", "full_signature": "private static JsonMethod[] getJsonMethods(Class<?> clazz)", "class_method_signature": "ObjectBuilder.getJsonMethods(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "shouldBeProcessed", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean shouldBeProcessed(Method method)", "full_signature": "private static boolean shouldBeProcessed(Method method)", "class_method_signature": "ObjectBuilder.shouldBeProcessed(Method method)", "testcase": false, "constructor": false}, {"identifier": "isSetter", "parameters": "(Method method)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSetter(Method method)", "full_signature": "private static boolean isSetter(Method method)", "class_method_signature": "ObjectBuilder.isSetter(Method method)", "testcase": false, "constructor": false}, {"identifier": "createArray", "parameters": "(Class<?> aClass, JsonValue jsonArray)", "modifiers": "public static", "return": "Object", "signature": "Object createArray(Class<?> aClass, JsonValue jsonArray)", "full_signature": "public static Object createArray(Class<?> aClass, JsonValue jsonArray)", "class_method_signature": "ObjectBuilder.createArray(Class<?> aClass, JsonValue jsonArray)", "testcase": false, "constructor": false}, {"identifier": "createCollection", "parameters": "(Class<T> collectionClass, Type genericType, JsonValue jsonArray)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T createCollection(Class<T> collectionClass, Type genericType, JsonValue jsonArray)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T createCollection(Class<T> collectionClass, Type genericType, JsonValue jsonArray)", "class_method_signature": "ObjectBuilder.createCollection(Class<T> collectionClass, Type genericType, JsonValue jsonArray)", "testcase": false, "constructor": false}, {"identifier": "findAcceptableCollectionImplementation", "parameters": "(Class<T> collectionClass)", "modifiers": "private static", "return": "Class", "signature": "Class findAcceptableCollectionImplementation(Class<T> collectionClass)", "full_signature": "private static Class findAcceptableCollectionImplementation(Class<T> collectionClass)", "class_method_signature": "ObjectBuilder.findAcceptableCollectionImplementation(Class<T> collectionClass)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(Class<T> mapClass, Type genericType, JsonValue jsonObject)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T createObject(Class<T> mapClass, Type genericType, JsonValue jsonObject)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T createObject(Class<T> mapClass, Type genericType, JsonValue jsonObject)", "class_method_signature": "ObjectBuilder.createObject(Class<T> mapClass, Type genericType, JsonValue jsonObject)", "testcase": false, "constructor": false}, {"identifier": "findAcceptableMapImplementation", "parameters": "(Class<T> mapClass)", "modifiers": "private static", "return": "Class", "signature": "Class findAcceptableMapImplementation(Class<T> mapClass)", "full_signature": "private static Class findAcceptableMapImplementation(Class<T> mapClass)", "class_method_signature": "ObjectBuilder.findAcceptableMapImplementation(Class<T> mapClass)", "testcase": false, "constructor": false}, {"identifier": "createObject", "parameters": "(Class<T> aClass, JsonValue jsonValue)", "modifiers": "@SuppressWarnings({\"unchecked\"}) public static", "return": "T", "signature": "T createObject(Class<T> aClass, JsonValue jsonValue)", "full_signature": "@SuppressWarnings({\"unchecked\"}) public static T createObject(Class<T> aClass, JsonValue jsonValue)", "class_method_signature": "ObjectBuilder.createObject(Class<T> aClass, JsonValue jsonValue)", "testcase": false, "constructor": false}, {"identifier": "mergeMessagesFromCausalJsonExceptions", "parameters": "(Throwable error, StringBuilder msg)", "modifiers": "private static", "return": "void", "signature": "void mergeMessagesFromCausalJsonExceptions(Throwable error, StringBuilder msg)", "full_signature": "private static void mergeMessagesFromCausalJsonExceptions(Throwable error, StringBuilder msg)", "class_method_signature": "ObjectBuilder.mergeMessagesFromCausalJsonExceptions(Throwable error, StringBuilder msg)", "testcase": false, "constructor": false}, {"identifier": "getConstructor", "parameters": "(Class<T> aClass, Class<?>... parameters)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Constructor<T>", "signature": "Constructor<T> getConstructor(Class<T> aClass, Class<?>... parameters)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Constructor<T> getConstructor(Class<T> aClass, Class<?>... parameters)", "class_method_signature": "ObjectBuilder.getConstructor(Class<T> aClass, Class<?>... parameters)", "testcase": false, "constructor": false}, {"identifier": "createEnum", "parameters": "(Class enumClass, JsonValue jsonValue)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Enum<?>", "signature": "Enum<?> createEnum(Class enumClass, JsonValue jsonValue)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Enum<?> createEnum(Class enumClass, JsonValue jsonValue)", "class_method_signature": "ObjectBuilder.createEnum(Class enumClass, JsonValue jsonValue)", "testcase": false, "constructor": false}, {"identifier": "createObjectKnownTypes", "parameters": "(Class<?> aClass, JsonValue jsonValue)", "modifiers": "private static", "return": "Object", "signature": "Object createObjectKnownTypes(Class<?> aClass, JsonValue jsonValue)", "full_signature": "private static Object createObjectKnownTypes(Class<?> aClass, JsonValue jsonValue)", "class_method_signature": "ObjectBuilder.createObjectKnownTypes(Class<?> aClass, JsonValue jsonValue)", "testcase": false, "constructor": false}, {"identifier": "ObjectBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObjectBuilder()", "full_signature": "private  ObjectBuilder()", "class_method_signature": "ObjectBuilder.ObjectBuilder()", "testcase": false, "constructor": true}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/json/ObjectBuilder.java"}, "focal_method": {"identifier": "createArray", "parameters": "(Class<?> aClass, JsonValue jsonArray)", "modifiers": "public static", "return": "Object", "body": "public static Object createArray(Class<?> aClass, JsonValue jsonArray) throws JsonException {\n        if (jsonArray == null || jsonArray.isNull()) {\n            return null;\n        }\n        Class<?> componentType = aClass.getComponentType();\n        Object array = Array.newInstance(componentType, jsonArray.size());\n        Iterator<JsonValue> values = jsonArray.getElements();\n        int i = 0;\n\n        if (componentType.isArray()) {\n            if (isKnownType(componentType)) {\n                while (values.hasNext()) {\n                    Array.set(array, i++, createObjectKnownTypes(componentType, values.next()));\n                }\n            } else {\n                while (values.hasNext()) {\n                    Array.set(array, i++, createArray(componentType, values.next()));\n                }\n            }\n        } else {\n            if (isKnownType(componentType)) {\n                while (values.hasNext()) {\n                    Array.set(array, i++, createObjectKnownTypes(componentType, values.next()));\n                }\n            } else {\n                while (values.hasNext()) {\n                    Array.set(array, i++, createObject(componentType, values.next()));\n                }\n            }\n        }\n        return array;\n    }", "signature": "Object createArray(Class<?> aClass, JsonValue jsonArray)", "full_signature": "public static Object createArray(Class<?> aClass, JsonValue jsonArray)", "class_method_signature": "ObjectBuilder.createArray(Class<?> aClass, JsonValue jsonArray)", "testcase": false, "constructor": false, "invocations": ["isNull", "getComponentType", "newInstance", "size", "getElements", "isArray", "isKnownType", "hasNext", "set", "createObjectKnownTypes", "next", "hasNext", "set", "createArray", "next", "isKnownType", "hasNext", "set", "createObjectKnownTypes", "next", "hasNext", "set", "createObject", "next"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}