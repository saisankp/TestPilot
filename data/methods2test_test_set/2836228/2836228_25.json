{"test_class": {"identifier": "FeedEntityParserTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "private final FeedEntityParser parser = (FeedEntityParser) EntityParserFactory\n\t\t\t.getParser(EntityType.FEED);", "modifier": "private final", "type": "FeedEntityParser", "declarator": "parser = (FeedEntityParser) EntityParserFactory\n\t\t\t.getParser(EntityType.FEED)", "var_name": "parser"}, {"original_string": "private Feed modifiableFeed;", "modifier": "private", "type": "Feed", "declarator": "modifiableFeed", "var_name": "modifiableFeed"}], "file": "common/src/test/java/org/apache/ivory/entity/parser/FeedEntityParserTest.java"}, "test_case": {"identifier": "applyValidationInvalidFeed", "parameters": "()", "modifiers": "@Test(expectedExceptions = ValidationException.class) public", "return": "void", "body": "@Test(expectedExceptions = ValidationException.class)\n\tpublic void applyValidationInvalidFeed() throws Exception {\n\t\tFeed feed = (Feed) parser\n\t\t\t\t.parseAndValidate(ProcessEntityParserTest.class\n\t\t\t\t\t\t.getResourceAsStream(FEED_XML));\n\t\tfeed.getClusters().getClusters().get(0).setName(\"invalid cluster\");\n\t\tparser.validate(feed);\n\t}", "signature": "void applyValidationInvalidFeed()", "full_signature": "@Test(expectedExceptions = ValidationException.class) public void applyValidationInvalidFeed()", "class_method_signature": "FeedEntityParserTest.applyValidationInvalidFeed()", "testcase": true, "constructor": false, "invocations": ["parseAndValidate", "getResourceAsStream", "setName", "get", "getClusters", "getClusters", "validate"]}, "focal_class": {"identifier": "FeedEntityParser", "superclass": "extends EntityParser<Feed>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(FeedEntityParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(FeedEntityParser.class)", "var_name": "LOG"}], "methods": [{"identifier": "FeedEntityParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " FeedEntityParser()", "full_signature": "public  FeedEntityParser()", "class_method_signature": "FeedEntityParser.FeedEntityParser()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Feed feed)", "modifiers": "@Override public", "return": "void", "signature": "void validate(Feed feed)", "full_signature": "@Override public void validate(Feed feed)", "class_method_signature": "FeedEntityParser.validate(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "findProcesses", "parameters": "(Set<Entity> referenced)", "modifiers": "private", "return": "Set<Process>", "signature": "Set<Process> findProcesses(Set<Entity> referenced)", "full_signature": "private Set<Process> findProcesses(Set<Entity> referenced)", "class_method_signature": "FeedEntityParser.findProcesses(Set<Entity> referenced)", "testcase": false, "constructor": false}, {"identifier": "validateFeedGroups", "parameters": "(Feed feed)", "modifiers": "private", "return": "void", "signature": "void validateFeedGroups(Feed feed)", "full_signature": "private void validateFeedGroups(Feed feed)", "class_method_signature": "FeedEntityParser.validateFeedGroups(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "ensureValidityFor", "parameters": "(Feed newFeed, Set<Process> processes)", "modifiers": "private", "return": "void", "signature": "void ensureValidityFor(Feed newFeed, Set<Process> processes)", "full_signature": "private void ensureValidityFor(Feed newFeed, Set<Process> processes)", "class_method_signature": "FeedEntityParser.ensureValidityFor(Feed newFeed, Set<Process> processes)", "testcase": false, "constructor": false}, {"identifier": "ensureValidityFor", "parameters": "(Feed newFeed, Process process)", "modifiers": "private", "return": "void", "signature": "void ensureValidityFor(Feed newFeed, Process process)", "full_signature": "private void ensureValidityFor(Feed newFeed, Process process)", "class_method_signature": "FeedEntityParser.ensureValidityFor(Feed newFeed, Process process)", "testcase": false, "constructor": false}, {"identifier": "validateClusterValidity", "parameters": "(Date start, Date end, String clusterName)", "modifiers": "private", "return": "void", "signature": "void validateClusterValidity(Date start, Date end, String clusterName)", "full_signature": "private void validateClusterValidity(Date start, Date end, String clusterName)", "class_method_signature": "FeedEntityParser.validateClusterValidity(Date start, Date end, String clusterName)", "testcase": false, "constructor": false}, {"identifier": "validateFeedCutOffPeriod", "parameters": "(Feed feed, Cluster cluster)", "modifiers": "private", "return": "void", "signature": "void validateFeedCutOffPeriod(Feed feed, Cluster cluster)", "full_signature": "private void validateFeedCutOffPeriod(Feed feed, Cluster cluster)", "class_method_signature": "FeedEntityParser.validateFeedCutOffPeriod(Feed feed, Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "validateFeedPartitionExpression", "parameters": "(Feed feed)", "modifiers": "private", "return": "void", "signature": "void validateFeedPartitionExpression(Feed feed)", "full_signature": "private void validateFeedPartitionExpression(Feed feed)", "class_method_signature": "FeedEntityParser.validateFeedPartitionExpression(Feed feed)", "testcase": false, "constructor": false}, {"identifier": "validateClusterExpDefined", "parameters": "(Cluster cl)", "modifiers": "private", "return": "void", "signature": "void validateClusterExpDefined(Cluster cl)", "full_signature": "private void validateClusterExpDefined(Cluster cl)", "class_method_signature": "FeedEntityParser.validateClusterExpDefined(Cluster cl)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/apache/ivory/entity/parser/FeedEntityParser.java"}, "focal_method": {"identifier": "validate", "parameters": "(Feed feed)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(Feed feed) throws IvoryException {\n        if(feed.getTimezone() == null)\n            feed.setTimezone(TimeZone.getTimeZone(\"UTC\"));\n        \n        if (feed.getClusters() == null)\n            throw new ValidationException(\"Feed should have atleast one cluster\");\n\n        for (Cluster cluster : feed.getClusters().getClusters()) {\n            validateEntityExists(EntityType.CLUSTER, cluster.getName());\n            validateClusterValidity(cluster.getValidity().getStart(), cluster.getValidity().getEnd(), cluster.getName());\n            validateFeedCutOffPeriod(feed, cluster);\n        }\n\n        validateFeedPartitionExpression(feed);\n        validateFeedGroups(feed);\n\n        // Seems like a good enough entity object for a new one\n        // But is this an update ?\n\n        Feed oldFeed = ConfigurationStore.get().get(EntityType.FEED, feed.getName());\n        if (oldFeed == null)\n            return; // Not an update case\n\n        // Is actually an update. Need to iterate over all the processes\n        // depending on this feed and see if they are valid with the new\n        // feed reference\n        EntityGraph graph = EntityGraph.get();\n        Set<Entity> referenced = graph.getDependents(oldFeed);\n        Set<Process> processes = findProcesses(referenced);\n        if (processes.isEmpty())\n            return;\n\n        ensureValidityFor(feed, processes);\n    }", "signature": "void validate(Feed feed)", "full_signature": "@Override public void validate(Feed feed)", "class_method_signature": "FeedEntityParser.validate(Feed feed)", "testcase": false, "constructor": false, "invocations": ["getTimezone", "setTimezone", "getTimeZone", "getClusters", "getClusters", "getClusters", "validateEntityExists", "getName", "validateClusterValidity", "getStart", "getValidity", "getEnd", "getValidity", "getName", "validateFeedCutOffPeriod", "validateFeedPartitionExpression", "validateFeedGroups", "get", "get", "getName", "get", "getDependents", "findProcesses", "isEmpty", "ensureValidityFor"]}, "repository": {"repo_id": 2836228, "url": "https://github.com/sriksun/Ivory", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 28, "size": 11708, "license": "licensed"}}