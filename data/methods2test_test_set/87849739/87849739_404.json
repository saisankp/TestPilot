{"test_class": {"identifier": "JavaScriptMessageMapperRhinoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTENT_TYPE_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_PLAIN = \"text/plain\"", "var_name": "CONTENT_TYPE_PLAIN"}, {"original_string": "private static final String CONTENT_TYPE_BINARY = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_BINARY = \"application/octet-stream\"", "var_name": "CONTENT_TYPE_BINARY"}, {"original_string": "private static final String HEADER_CORRELATION_ID = \"correlation-id\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_CORRELATION_ID = \"correlation-id\"", "var_name": "HEADER_CORRELATION_ID"}, {"original_string": "private static final String MAPPING_INCOMING_NAMESPACE = \"org.eclipse.ditto\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_NAMESPACE = \"org.eclipse.ditto\"", "var_name": "MAPPING_INCOMING_NAMESPACE"}, {"original_string": "private static final String MAPPING_INCOMING_ID = \"fancy-car-11\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_ID = \"fancy-car-11\"", "var_name": "MAPPING_INCOMING_ID"}, {"original_string": "private static final String MAPPING_INCOMING_PATH = \"/attributes/foo\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_PATH = \"/attributes/foo\"", "var_name": "MAPPING_INCOMING_PATH"}, {"original_string": "private static final String MAPPING_INCOMING_PAYLOAD_STRING = \"hello!\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_PAYLOAD_STRING = \"hello!\"", "var_name": "MAPPING_INCOMING_PAYLOAD_STRING"}, {"original_string": "private static final ByteBuffer MAPPING_INCOMING_PAYLOAD_BYTES = ByteBuffer.wrap(\n            MAPPING_INCOMING_PAYLOAD_STRING.getBytes(StandardCharsets.UTF_8));", "modifier": "private static final", "type": "ByteBuffer", "declarator": "MAPPING_INCOMING_PAYLOAD_BYTES = ByteBuffer.wrap(\n            MAPPING_INCOMING_PAYLOAD_STRING.getBytes(StandardCharsets.UTF_8))", "var_name": "MAPPING_INCOMING_PAYLOAD_BYTES"}, {"original_string": "private static final MappingConfig MAPPING_CONFIG =\n            DefaultMappingConfig.of(ConfigFactory.parseString(\n                    \"mapping {\\n\" +\n                            \"  javascript {\\n\" +\n                            \"    maxScriptSizeBytes = 50000 # 50kB\\n\" +\n                            \"    maxScriptExecutionTime = 500ms\\n\" +\n                            \"    maxScriptStackDepth = 10\\n\" +\n                            \"  }\\n\" +\n                            \"}\"));", "modifier": "private static final", "type": "MappingConfig", "declarator": "MAPPING_CONFIG =\n            DefaultMappingConfig.of(ConfigFactory.parseString(\n                    \"mapping {\\n\" +\n                            \"  javascript {\\n\" +\n                            \"    maxScriptSizeBytes = 50000 # 50kB\\n\" +\n                            \"    maxScriptExecutionTime = 500ms\\n\" +\n                            \"    maxScriptStackDepth = 10\\n\" +\n                            \"  }\\n\" +\n                            \"}\"))", "var_name": "MAPPING_CONFIG"}, {"original_string": "private static final String MAPPING_INCOMING_PLAIN =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value\\n\" +\n                    \"    );\\n\" +\n                    \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_PLAIN =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value\\n\" +\n                    \"    );\\n\" +\n                    \"}\"", "var_name": "MAPPING_INCOMING_PLAIN"}, {"original_string": "private static final String MAPPING_OUTGOING_PLAIN = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    // ###\\n\" +\n            \"    // Insert your mapping logic here\\n\" +\n            \"    let headers = {};\\n\" +\n            \"    headers['correlation-id'] = dittoHeaders['correlation-id'];\\n\" +\n            \"    let textPayload = \\\"Thing ID was: \\\" + namespace + \\\":\\\" + id;\\n\" +\n            \"    let bytePayload = null;\\n\" +\n            \"    let contentType = \\\"\" + CONTENT_TYPE_PLAIN + \"\\\";\\n\" +\n            \"    // ###\\n\" +\n            \"\\n\" +\n            \"     return Ditto.buildExternalMsg(\\n\" +\n            \"        headers,\\n\" +\n            \"        textPayload,\\n\" +\n            \"        bytePayload,\\n\" +\n            \"        contentType\\n\" +\n            \"    );\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_OUTGOING_PLAIN = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    // ###\\n\" +\n            \"    // Insert your mapping logic here\\n\" +\n            \"    let headers = {};\\n\" +\n            \"    headers['correlation-id'] = dittoHeaders['correlation-id'];\\n\" +\n            \"    let textPayload = \\\"Thing ID was: \\\" + namespace + \\\":\\\" + id;\\n\" +\n            \"    let bytePayload = null;\\n\" +\n            \"    let contentType = \\\"\" + CONTENT_TYPE_PLAIN + \"\\\";\\n\" +\n            \"    // ###\\n\" +\n            \"\\n\" +\n            \"     return Ditto.buildExternalMsg(\\n\" +\n            \"        headers,\\n\" +\n            \"        textPayload,\\n\" +\n            \"        bytePayload,\\n\" +\n            \"        contentType\\n\" +\n            \"    );\" +\n            \"}\"", "var_name": "MAPPING_OUTGOING_PLAIN"}, {"original_string": "private static final String MAPPING_INCOMING_EMPTY =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    return null;\\n\" +\n                    \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_EMPTY =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    return null;\\n\" +\n                    \"}\"", "var_name": "MAPPING_INCOMING_EMPTY"}, {"original_string": "private static final String MAPPING_OUTGOING_EMPTY = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    return null;\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_OUTGOING_EMPTY = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    return null;\" +\n            \"}\"", "var_name": "MAPPING_OUTGOING_EMPTY"}, {"original_string": "private static final String MAPPING_INCOMING_BINARY =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = Ditto.arrayBufferToString(bytePayload);\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value\\n\" +\n                    \"    );\\n\" +\n                    \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_BINARY =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = Ditto.arrayBufferToString(bytePayload);\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value\\n\" +\n                    \"    );\\n\" +\n                    \"}\"", "var_name": "MAPPING_INCOMING_BINARY"}, {"original_string": "private static final String MAPPING_OUTGOING_BINARY = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    // ###\\n\" +\n            \"    // Insert your mapping logic here\\n\" +\n            \"    let headers = {};\\n\" +\n            \"    headers['correlation-id'] = dittoHeaders['correlation-id'];\\n\" +\n            \"    let textPayload = null;\\n\" +\n            \"    let thingId = namespace + \\\":\\\" + id;\\n\" +\n            \"    let bytePayload = Ditto.stringToArrayBuffer(thingId);\\n\" +\n            \"    let contentType = \\\"\" + CONTENT_TYPE_BINARY + \"\\\";\\n\" +\n            \"    // ###\\n\" +\n            \"\\n\" +\n            \"     return Ditto.buildExternalMsg(\\n\" +\n            \"        headers,\\n\" +\n            \"        textPayload,\\n\" +\n            \"        bytePayload,\\n\" +\n            \"        contentType\\n\" +\n            \"    );\" +\n            \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_OUTGOING_BINARY = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"    namespace,\\n\" +\n            \"    id,\\n\" +\n            \"    group,\\n\" +\n            \"    channel,\\n\" +\n            \"    criterion,\\n\" +\n            \"    action,\\n\" +\n            \"    path,\\n\" +\n            \"    dittoHeaders,\\n\" +\n            \"    value,\\n\" +\n            \"    status,\\n\" +\n            \"    extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"    // ###\\n\" +\n            \"    // Insert your mapping logic here\\n\" +\n            \"    let headers = {};\\n\" +\n            \"    headers['correlation-id'] = dittoHeaders['correlation-id'];\\n\" +\n            \"    let textPayload = null;\\n\" +\n            \"    let thingId = namespace + \\\":\\\" + id;\\n\" +\n            \"    let bytePayload = Ditto.stringToArrayBuffer(thingId);\\n\" +\n            \"    let contentType = \\\"\" + CONTENT_TYPE_BINARY + \"\\\";\\n\" +\n            \"    // ###\\n\" +\n            \"\\n\" +\n            \"     return Ditto.buildExternalMsg(\\n\" +\n            \"        headers,\\n\" +\n            \"        textPayload,\\n\" +\n            \"        bytePayload,\\n\" +\n            \"        contentType\\n\" +\n            \"    );\" +\n            \"}\"", "var_name": "MAPPING_OUTGOING_BINARY"}, {"original_string": "private static final String MAPPING_INCOMING_WITH_STATUS =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    let status = 204;\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value,\\n\" +\n                    \"        status\\n\" +\n                    \"    );\\n\" +\n                    \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_WITH_STATUS =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    let status = 204;\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value,\\n\" +\n                    \"        status\\n\" +\n                    \"    );\\n\" +\n                    \"}\"", "var_name": "MAPPING_INCOMING_WITH_STATUS"}, {"original_string": "private static final String MAPPING_INCOMING_WITH_STATUS_AND_EXTRA =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    let status = 204;\\n\" +\n                    \"    let extra = {};\\n\" +\n                    \"    extra.attributes = {};\\n\" +\n                    \"    extra.attributes.enriched = 'field';\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value,\\n\" +\n                    \"        status,\\n\" +\n                    \"        extra\\n\" +\n                    \"    );\\n\" +\n                    \"}\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_WITH_STATUS_AND_EXTRA =\n            \"function mapToDittoProtocolMsg(\\n\" +\n                    \"    headers,\\n\" +\n                    \"    textPayload,\\n\" +\n                    \"    bytePayload,\\n\" +\n                    \"    contentType\\n\" +\n                    \") {\\n\" +\n                    \"\\n\" +\n                    \"    // ###\\n\" +\n                    \"    // Insert your mapping logic here\\n\" +\n                    \"    let namespace = \\\"\" + MAPPING_INCOMING_NAMESPACE + \"\\\";\\n\" +\n                    \"    let id = \\\"\" + MAPPING_INCOMING_ID + \"\\\";\\n\" +\n                    \"    let group = \\\"things\\\";\\n\" +\n                    \"    let channel = \\\"twin\\\";\\n\" +\n                    \"    let criterion = \\\"commands\\\";\\n\" +\n                    \"    let action = \\\"modify\\\";\\n\" +\n                    \"    let path = \\\"\" + MAPPING_INCOMING_PATH + \"\\\";\\n\" +\n                    \"    let dittoHeaders = {};\\n\" +\n                    \"    dittoHeaders[\\\"correlation-id\\\"] = headers[\\\"correlation-id\\\"];\\n\" +\n                    \"    let value = textPayload;\\n\" +\n                    \"    let status = 204;\\n\" +\n                    \"    let extra = {};\\n\" +\n                    \"    extra.attributes = {};\\n\" +\n                    \"    extra.attributes.enriched = 'field';\\n\" +\n                    \"    // ###\\n\" +\n                    \"\\n\" +\n                    \"    return Ditto.buildDittoProtocolMsg(\\n\" +\n                    \"        namespace,\\n\" +\n                    \"        id,\\n\" +\n                    \"        group,\\n\" +\n                    \"        channel,\\n\" +\n                    \"        criterion,\\n\" +\n                    \"        action,\\n\" +\n                    \"        path,\\n\" +\n                    \"        dittoHeaders,\\n\" +\n                    \"        value,\\n\" +\n                    \"        status,\\n\" +\n                    \"        extra\\n\" +\n                    \"    );\\n\" +\n                    \"}\"", "var_name": "MAPPING_INCOMING_WITH_STATUS_AND_EXTRA"}, {"original_string": "private static final String MAPPING_INCOMING_DEFAULT = \"function mapToDittoProtocolMsg(\\n\" +\n            \"  headers,\\n\" +\n            \"  textPayload,\\n\" +\n            \"  bytePayload,\\n\" +\n            \"  contentType\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"  // ###\\n\" +\n            \"  // Insert your mapping logic here:\\n\" +\n            \"  if (contentType === 'application/vnd.eclipse.ditto+json') {\\n\" +\n            \"    let dittoProtocolMsg = JSON.parse(textPayload);\\n\" +\n            \"    Object.assign(dittoProtocolMsg.headers, headers);\\n\" +\n            \"    return dittoProtocolMsg;\\n\" +\n            \"  }\\n\" +\n            \"  if (headers) {\\n\" +\n            \"    return null; // returning 'null' means that the message will be dropped\\n\" +\n            \"    // TODO replace with something useful\\n\" +\n            \"  }\\n\" +\n            \"  // ###\\n\" +\n            \"\\n\" +\n            \"  return Ditto.buildDittoProtocolMsg(\\n\" +\n            \"    namespace, // The namespace of the entity in java package notation, e.g.: \\\"org.eclipse.ditto\\\"\\n\" +\n            \"    id, // The ID of the entity\\n\" +\n            \"    group, // The affected group/entity, one of: \\\"things\\\"\\n\" +\n            \"    channel, // The channel for the signal, one of: \\\"twin\\\"|\\\"live\\\"\\n\" +\n            \"    criterion, // The criterion to apply, one of: \\\"commands\\\"|\\\"events\\\"|\\\"search\\\"|\\\"messages\\\"|\\\"errors\\\"\\n\" +\n            \"    action, // The action to perform, one of: \\\"create\\\"|\\\"retrieve\\\"|\\\"modify\\\"|\\\"delete\\\"\\n\" +\n            \"    path, // The path which is affected by the message, e.g.: \\\"/attributes\\\"\\n\" +\n            \"    dittoHeaders, // The headers Object containing all Ditto Protocol header values\\n\" +\n            \"    value, // The value to apply / which was applied (e.g. in a \\\"modify\\\" action)\\n\" +\n            \"    status, // The status code that indicates the result of the command\\n\" +\n            \"    extra // The enriched extra fields\\n\" +\n            \"  );\\n\" +\n            \"}\\n\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_INCOMING_DEFAULT = \"function mapToDittoProtocolMsg(\\n\" +\n            \"  headers,\\n\" +\n            \"  textPayload,\\n\" +\n            \"  bytePayload,\\n\" +\n            \"  contentType\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"  // ###\\n\" +\n            \"  // Insert your mapping logic here:\\n\" +\n            \"  if (contentType === 'application/vnd.eclipse.ditto+json') {\\n\" +\n            \"    let dittoProtocolMsg = JSON.parse(textPayload);\\n\" +\n            \"    Object.assign(dittoProtocolMsg.headers, headers);\\n\" +\n            \"    return dittoProtocolMsg;\\n\" +\n            \"  }\\n\" +\n            \"  if (headers) {\\n\" +\n            \"    return null; // returning 'null' means that the message will be dropped\\n\" +\n            \"    // TODO replace with something useful\\n\" +\n            \"  }\\n\" +\n            \"  // ###\\n\" +\n            \"\\n\" +\n            \"  return Ditto.buildDittoProtocolMsg(\\n\" +\n            \"    namespace, // The namespace of the entity in java package notation, e.g.: \\\"org.eclipse.ditto\\\"\\n\" +\n            \"    id, // The ID of the entity\\n\" +\n            \"    group, // The affected group/entity, one of: \\\"things\\\"\\n\" +\n            \"    channel, // The channel for the signal, one of: \\\"twin\\\"|\\\"live\\\"\\n\" +\n            \"    criterion, // The criterion to apply, one of: \\\"commands\\\"|\\\"events\\\"|\\\"search\\\"|\\\"messages\\\"|\\\"errors\\\"\\n\" +\n            \"    action, // The action to perform, one of: \\\"create\\\"|\\\"retrieve\\\"|\\\"modify\\\"|\\\"delete\\\"\\n\" +\n            \"    path, // The path which is affected by the message, e.g.: \\\"/attributes\\\"\\n\" +\n            \"    dittoHeaders, // The headers Object containing all Ditto Protocol header values\\n\" +\n            \"    value, // The value to apply / which was applied (e.g. in a \\\"modify\\\" action)\\n\" +\n            \"    status, // The status code that indicates the result of the command\\n\" +\n            \"    extra // The enriched extra fields\\n\" +\n            \"  );\\n\" +\n            \"}\\n\"", "var_name": "MAPPING_INCOMING_DEFAULT"}, {"original_string": "private static final String MAPPING_OUTGOING_DEFAULT = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"  namespace,\\n\" +\n            \"  id,\\n\" +\n            \"  group,\\n\" +\n            \"  channel,\\n\" +\n            \"  criterion,\\n\" +\n            \"  action,\\n\" +\n            \"  path,\\n\" +\n            \"  dittoHeaders,\\n\" +\n            \"  value,\\n\" +\n            \"  status,\\n\" +\n            \"  extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"  // ###\\n\" +\n            \"  // Insert your mapping logic here:\\n\" +\n            \"  let headers = dittoHeaders;\\n\" +\n            \"  let textPayload = JSON.stringify(Ditto.buildDittoProtocolMsg(namespace, id, group, channel, criterion, action, path, dittoHeaders, value, status));\\n\" +\n            \"  // TODO replace with something useful, this will publish the message in Ditto Protocol JSON\\n\" +\n            \"  let bytePayload = null;\\n\" +\n            \"  let contentType = 'application/vnd.eclipse.ditto+json';\\n\" +\n            \"  // ###\\n\" +\n            \"\\n\" +\n            \"  return Ditto.buildExternalMsg(\\n\" +\n            \"    headers, // The external headers Object containing header values\\n\" +\n            \"    textPayload, // The external mapped String\\n\" +\n            \"    bytePayload, // The external mapped byte[]\\n\" +\n            \"    contentType // The returned Content-Type\\n\" +\n            \"  );\\n\" +\n            \"}\\n\";", "modifier": "private static final", "type": "String", "declarator": "MAPPING_OUTGOING_DEFAULT = \"function mapFromDittoProtocolMsg(\\n\" +\n            \"  namespace,\\n\" +\n            \"  id,\\n\" +\n            \"  group,\\n\" +\n            \"  channel,\\n\" +\n            \"  criterion,\\n\" +\n            \"  action,\\n\" +\n            \"  path,\\n\" +\n            \"  dittoHeaders,\\n\" +\n            \"  value,\\n\" +\n            \"  status,\\n\" +\n            \"  extra\\n\" +\n            \") {\\n\" +\n            \"\\n\" +\n            \"  // ###\\n\" +\n            \"  // Insert your mapping logic here:\\n\" +\n            \"  let headers = dittoHeaders;\\n\" +\n            \"  let textPayload = JSON.stringify(Ditto.buildDittoProtocolMsg(namespace, id, group, channel, criterion, action, path, dittoHeaders, value, status));\\n\" +\n            \"  // TODO replace with something useful, this will publish the message in Ditto Protocol JSON\\n\" +\n            \"  let bytePayload = null;\\n\" +\n            \"  let contentType = 'application/vnd.eclipse.ditto+json';\\n\" +\n            \"  // ###\\n\" +\n            \"\\n\" +\n            \"  return Ditto.buildExternalMsg(\\n\" +\n            \"    headers, // The external headers Object containing header values\\n\" +\n            \"    textPayload, // The external mapped String\\n\" +\n            \"    bytePayload, // The external mapped byte[]\\n\" +\n            \"    contentType // The returned Content-Type\\n\" +\n            \"  );\\n\" +\n            \"}\\n\"", "var_name": "MAPPING_OUTGOING_DEFAULT"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperNoop;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperNoop", "var_name": "javaScriptRhinoMapperNoop"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperPlain;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperPlain", "var_name": "javaScriptRhinoMapperPlain"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperPlainWithStatus;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperPlainWithStatus", "var_name": "javaScriptRhinoMapperPlainWithStatus"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperPlainWithStatusAndExtra;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperPlainWithStatusAndExtra", "var_name": "javaScriptRhinoMapperPlainWithStatusAndExtra"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperEmpty;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperEmpty", "var_name": "javaScriptRhinoMapperEmpty"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperBinary;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperBinary", "var_name": "javaScriptRhinoMapperBinary"}, {"original_string": "private static MessageMapper javaScriptRhinoMapperDefault;", "modifier": "private static", "type": "MessageMapper", "declarator": "javaScriptRhinoMapperDefault", "var_name": "javaScriptRhinoMapperDefault"}], "file": "services/connectivity/mapping/src/test/java/org/eclipse/ditto/services/connectivity/mapping/javascript/JavaScriptMessageMapperRhinoTest.java"}, "test_case": {"identifier": "testEmptyJavascriptIncomingMapping", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyJavascriptIncomingMapping() {\n        final String correlationId = UUID.randomUUID().toString();\n        final Map<String, String> headers = new HashMap<>();\n        headers.put(HEADER_CORRELATION_ID, correlationId);\n        headers.put(ExternalMessage.CONTENT_TYPE_HEADER, CONTENT_TYPE_PLAIN);\n        final ExternalMessage message = ExternalMessageFactory.newExternalMessageBuilder(headers).build();\n\n        final long startTs = System.nanoTime();\n        final List<Adaptable> adaptables = javaScriptRhinoMapperEmpty.map(message);\n        System.out.println(\n                \"testEmptyJavascriptIncomingMapping Duration: \" + (System.nanoTime() - startTs) / 1_000_000.0 + \"ms\");\n\n        assertThat(adaptables).isEmpty();\n    }", "signature": "void testEmptyJavascriptIncomingMapping()", "full_signature": "@Test public void testEmptyJavascriptIncomingMapping()", "class_method_signature": "JavaScriptMessageMapperRhinoTest.testEmptyJavascriptIncomingMapping()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "put", "put", "build", "newExternalMessageBuilder", "nanoTime", "map", "println", "nanoTime", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "JavaScriptMessageMapperRhino", "superclass": "extends AbstractMessageMapper", "interfaces": "", "fields": [{"original_string": "private static final String WEBJARS_PATH = \"/META-INF/resources/webjars\";", "modifier": "private static final", "type": "String", "declarator": "WEBJARS_PATH = \"/META-INF/resources/webjars\"", "var_name": "WEBJARS_PATH"}, {"original_string": "private static final String WEBJARS_BYTEBUFFER = WEBJARS_PATH + \"/bytebuffer/5.0.1/dist/bytebuffer.js\";", "modifier": "private static final", "type": "String", "declarator": "WEBJARS_BYTEBUFFER = WEBJARS_PATH + \"/bytebuffer/5.0.1/dist/bytebuffer.js\"", "var_name": "WEBJARS_BYTEBUFFER"}, {"original_string": "private static final String WEBJARS_LONG = WEBJARS_PATH + \"/long/3.2.0/dist/long.min.js\";", "modifier": "private static final", "type": "String", "declarator": "WEBJARS_LONG = WEBJARS_PATH + \"/long/3.2.0/dist/long.min.js\"", "var_name": "WEBJARS_LONG"}, {"original_string": "static final String DITTO_SCOPE_SCRIPT = \"/javascript/ditto-scope.js\";", "modifier": "static final", "type": "String", "declarator": "DITTO_SCOPE_SCRIPT = \"/javascript/ditto-scope.js\"", "var_name": "DITTO_SCOPE_SCRIPT"}, {"original_string": "static final String INCOMING_SCRIPT = \"/javascript/incoming-mapping.js\";", "modifier": "static final", "type": "String", "declarator": "INCOMING_SCRIPT = \"/javascript/incoming-mapping.js\"", "var_name": "INCOMING_SCRIPT"}, {"original_string": "static final String OUTGOING_SCRIPT = \"/javascript/outgoing-mapping.js\";", "modifier": "static final", "type": "String", "declarator": "OUTGOING_SCRIPT = \"/javascript/outgoing-mapping.js\"", "var_name": "OUTGOING_SCRIPT"}, {"original_string": "@Nullable private ContextFactory contextFactory;", "modifier": "@Nullable private", "type": "ContextFactory", "declarator": "contextFactory", "var_name": "contextFactory"}, {"original_string": "@Nullable private JavaScriptMessageMapperConfiguration configuration;", "modifier": "@Nullable private", "type": "JavaScriptMessageMapperConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private MappingFunction<ExternalMessage, List<Adaptable>> incomingMapping = DefaultIncomingMapping.get();", "modifier": "private", "type": "MappingFunction<ExternalMessage, List<Adaptable>>", "declarator": "incomingMapping = DefaultIncomingMapping.get()", "var_name": "incomingMapping"}, {"original_string": "private MappingFunction<Adaptable, List<ExternalMessage>> outgoingMapping = DefaultOutgoingMapping.get();", "modifier": "private", "type": "MappingFunction<Adaptable, List<ExternalMessage>>", "declarator": "outgoingMapping = DefaultOutgoingMapping.get()", "var_name": "outgoingMapping"}], "methods": [{"identifier": "JavaScriptMessageMapperRhino", "parameters": "()", "modifiers": "", "return": "", "signature": " JavaScriptMessageMapperRhino()", "full_signature": "  JavaScriptMessageMapperRhino()", "class_method_signature": "JavaScriptMessageMapperRhino.JavaScriptMessageMapperRhino()", "testcase": false, "constructor": true}, {"identifier": "doConfigure", "parameters": "(final MappingConfig mappingConfig, final MessageMapperConfiguration options)", "modifiers": "@Override public", "return": "void", "signature": "void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration options)", "full_signature": "@Override public void doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration options)", "class_method_signature": "JavaScriptMessageMapperRhino.doConfigure(final MappingConfig mappingConfig, final MessageMapperConfiguration options)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final ExternalMessage message)", "modifiers": "@Override public", "return": "List<Adaptable>", "signature": "List<Adaptable> map(final ExternalMessage message)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage message)", "class_method_signature": "JavaScriptMessageMapperRhino.map(final ExternalMessage message)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(final Adaptable adaptable)", "modifiers": "@Override public", "return": "List<ExternalMessage>", "signature": "List<ExternalMessage> map(final Adaptable adaptable)", "full_signature": "@Override public List<ExternalMessage> map(final Adaptable adaptable)", "class_method_signature": "JavaScriptMessageMapperRhino.map(final Adaptable adaptable)", "testcase": false, "constructor": false}, {"identifier": "initLibraries", "parameters": "(final Context cx, final Scriptable scope)", "modifiers": "private", "return": "void", "signature": "void initLibraries(final Context cx, final Scriptable scope)", "full_signature": "private void initLibraries(final Context cx, final Scriptable scope)", "class_method_signature": "JavaScriptMessageMapperRhino.initLibraries(final Context cx, final Scriptable scope)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "private", "return": "Optional<JavaScriptMessageMapperConfiguration>", "signature": "Optional<JavaScriptMessageMapperConfiguration> getConfiguration()", "full_signature": "private Optional<JavaScriptMessageMapperConfiguration> getConfiguration()", "class_method_signature": "JavaScriptMessageMapperRhino.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "loadJavascriptLibrary", "parameters": "(final Context cx,\n            final Scriptable scope,\n            final Reader reader,\n            final String libraryName)", "modifiers": "static", "return": "void", "signature": "void loadJavascriptLibrary(final Context cx,\n            final Scriptable scope,\n            final Reader reader,\n            final String libraryName)", "full_signature": "static void loadJavascriptLibrary(final Context cx,\n            final Scriptable scope,\n            final Reader reader,\n            final String libraryName)", "class_method_signature": "JavaScriptMessageMapperRhino.loadJavascriptLibrary(final Context cx,\n            final Scriptable scope,\n            final Reader reader,\n            final String libraryName)", "testcase": false, "constructor": false}], "file": "services/connectivity/mapping/src/main/java/org/eclipse/ditto/services/connectivity/mapping/javascript/JavaScriptMessageMapperRhino.java"}, "focal_method": {"identifier": "map", "parameters": "(final ExternalMessage message)", "modifiers": "@Override public", "return": "List<Adaptable>", "body": "@Override\n    public List<Adaptable> map(final ExternalMessage message) {\n        return incomingMapping.apply(message);\n    }", "signature": "List<Adaptable> map(final ExternalMessage message)", "full_signature": "@Override public List<Adaptable> map(final ExternalMessage message)", "class_method_signature": "JavaScriptMessageMapperRhino.map(final ExternalMessage message)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}