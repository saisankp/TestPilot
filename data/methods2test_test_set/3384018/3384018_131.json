{"test_class": {"identifier": "TestURIUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URI baseURI = URI.create(\"http://a/b/c/d;p?q\");", "modifier": "private", "type": "URI", "declarator": "baseURI = URI.create(\"http://a/b/c/d;p?q\")", "var_name": "baseURI"}], "file": "external_sources/httpclient-4.1.1/httpclient/src/test/java/org/apache/ogt/http/client/utils/TestURIUtils.java"}, "test_case": {"identifier": "testHTTPCLIENT_911", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHTTPCLIENT_911() throws Exception{\n        Assert.assertEquals(new HttpHost(\"localhost\"),URIUtils.extractHost(new URI(\"http://localhost/abcd\")));\n        Assert.assertEquals(new HttpHost(\"localhost\"),URIUtils.extractHost(new URI(\"http://localhost/abcd%3A\")));\n        \n        Assert.assertEquals(new HttpHost(\"local_host\"),URIUtils.extractHost(new URI(\"http://local_host/abcd\")));\n        Assert.assertEquals(new HttpHost(\"local_host\"),URIUtils.extractHost(new URI(\"http://local_host/abcd%3A\")));\n        \n        Assert.assertEquals(new HttpHost(\"localhost\",8),URIUtils.extractHost(new URI(\"http://localhost:8/abcd\")));\n        Assert.assertEquals(new HttpHost(\"local_host\",8),URIUtils.extractHost(new URI(\"http://local_host:8/abcd\")));\n\n        // URI seems to OK with missing port number\n        Assert.assertEquals(new HttpHost(\"localhost\"),URIUtils.extractHost(new URI(\"http://localhost:/abcd\")));\n        Assert.assertEquals(new HttpHost(\"local_host\"),URIUtils.extractHost(new URI(\"http://local_host:/abcd\")));\n\n        Assert.assertEquals(new HttpHost(\"localhost\",8080),URIUtils.extractHost(new URI(\"http://user:pass@localhost:8080/abcd\")));\n        Assert.assertEquals(new HttpHost(\"local_host\",8080),URIUtils.extractHost(new URI(\"http://user:pass@local_host:8080/abcd\")));\n\n        Assert.assertEquals(new HttpHost(\"localhost\",8080),URIUtils.extractHost(new URI(\"http://@localhost:8080/abcd\")));\n        Assert.assertEquals(new HttpHost(\"local_host\",8080),URIUtils.extractHost(new URI(\"http://@local_host:8080/abcd\")));\n\n    }", "signature": "void testHTTPCLIENT_911()", "full_signature": "@Test public void testHTTPCLIENT_911()", "class_method_signature": "TestURIUtils.testHTTPCLIENT_911()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost", "assertEquals", "extractHost"]}, "focal_class": {"identifier": "URIUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createURI", "parameters": "(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "modifiers": "public static", "return": "URI", "signature": "URI createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "full_signature": "public static URI createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "class_method_signature": "URIUtils.createURI(\n            final String scheme,\n            final String host,\n            int port,\n            final String path,\n            final String query,\n            final String fragment)", "testcase": false, "constructor": false}, {"identifier": "rewriteURI", "parameters": "(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "modifiers": "public static", "return": "URI", "signature": "URI rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "full_signature": "public static URI rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "class_method_signature": "URIUtils.rewriteURI(\n            final URI uri,\n            final HttpHost target,\n            boolean dropFragment)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String normalizePath(String path)", "full_signature": "private static String normalizePath(String path)", "class_method_signature": "URIUtils.normalizePath(String path)", "testcase": false, "constructor": false}, {"identifier": "rewriteURI", "parameters": "(\n            final URI uri,\n            final HttpHost target)", "modifiers": "public static", "return": "URI", "signature": "URI rewriteURI(\n            final URI uri,\n            final HttpHost target)", "full_signature": "public static URI rewriteURI(\n            final URI uri,\n            final HttpHost target)", "class_method_signature": "URIUtils.rewriteURI(\n            final URI uri,\n            final HttpHost target)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseURI, final String reference)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseURI, final String reference)", "full_signature": "public static URI resolve(final URI baseURI, final String reference)", "class_method_signature": "URIUtils.resolve(final URI baseURI, final String reference)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI baseURI, URI reference)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(final URI baseURI, URI reference)", "full_signature": "public static URI resolve(final URI baseURI, URI reference)", "class_method_signature": "URIUtils.resolve(final URI baseURI, URI reference)", "testcase": false, "constructor": false}, {"identifier": "resolveReferenceStartingWithQueryString", "parameters": "(\n            final URI baseURI, final URI reference)", "modifiers": "private static", "return": "URI", "signature": "URI resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "full_signature": "private static URI resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "class_method_signature": "URIUtils.resolveReferenceStartingWithQueryString(\n            final URI baseURI, final URI reference)", "testcase": false, "constructor": false}, {"identifier": "removeDotSegments", "parameters": "(URI uri)", "modifiers": "private static", "return": "URI", "signature": "URI removeDotSegments(URI uri)", "full_signature": "private static URI removeDotSegments(URI uri)", "class_method_signature": "URIUtils.removeDotSegments(URI uri)", "testcase": false, "constructor": false}, {"identifier": "extractHost", "parameters": "(final URI uri)", "modifiers": "public static", "return": "HttpHost", "signature": "HttpHost extractHost(final URI uri)", "full_signature": "public static HttpHost extractHost(final URI uri)", "class_method_signature": "URIUtils.extractHost(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "URIUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " URIUtils()", "full_signature": "private  URIUtils()", "class_method_signature": "URIUtils.URIUtils()", "testcase": false, "constructor": true}], "file": "external_sources/httpclient-4.1.1/httpclient/src/main/java/org/apache/ogt/http/client/utils/URIUtils.java"}, "focal_method": {"identifier": "extractHost", "parameters": "(final URI uri)", "modifiers": "public static", "return": "HttpHost", "body": "public static HttpHost extractHost(final URI uri) {\n        if (uri == null) {\n            return null;\n        }\n        HttpHost target = null;\n        if (uri.isAbsolute()) {\n            int port = uri.getPort(); // may be overridden later\n            String host = uri.getHost();\n            if (host == null) { // normal parse failed; let's do it ourselves\n                // authority does not seem to care about the valid character-set for host names\n                host = uri.getAuthority();\n                if (host != null) {\n                    // Strip off any leading user credentials\n                    int at = host.indexOf('@');\n                    if (at >= 0) {\n                        if (host.length() > at+1 ) {\n                            host = host.substring(at+1);\n                        } else {\n                            host = null; // @ on its own\n                        }\n                    }\n                    // Extract the port suffix, if present\n                    if (host != null) { \n                        int colon = host.indexOf(':');\n                        if (colon >= 0) {\n                            if (colon+1 < host.length()) {\n                                port = Integer.parseInt(host.substring(colon+1));\n                            }\n                            host = host.substring(0,colon);\n                        }                \n                    }                    \n                }\n            }\n            String scheme = uri.getScheme();\n            if (host != null) {\n                target = new HttpHost(host, port, scheme);\n            }\n        }\n        return target;\n    }", "signature": "HttpHost extractHost(final URI uri)", "full_signature": "public static HttpHost extractHost(final URI uri)", "class_method_signature": "URIUtils.extractHost(final URI uri)", "testcase": false, "constructor": false, "invocations": ["isAbsolute", "getPort", "getHost", "getAuthority", "indexOf", "length", "substring", "indexOf", "length", "parseInt", "substring", "substring", "getScheme"]}, "repository": {"repo_id": 3384018, "url": "https://github.com/f8full/open-bixi-gpstracker", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 5, "size": 2028, "license": "licensed"}}