{"test_class": {"identifier": "ReflectionEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReflectionEngine rEngine;", "modifier": "private", "type": "ReflectionEngine", "declarator": "rEngine", "var_name": "rEngine"}], "file": "py4j-java/src/test/java/py4j/reflection/ReflectionEngineTest.java"}, "test_case": {"identifier": "testGetSimpleMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSimpleMethod() {\n\t\tassertNull(rEngine.getMethod(Cat.class, \"methodABC\"));\n\t\tassertNotNull(rEngine.getMethod(Cat.class, \"meow\"));\n\t\tassertNotNull(rEngine.getMethod(Cat.class, \"meow15\"));\n\t}", "signature": "void testGetSimpleMethod()", "full_signature": "@Test public void testGetSimpleMethod()", "class_method_signature": "ReflectionEngineTest.testGetSimpleMethod()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getMethod", "assertNotNull", "getMethod", "assertNotNull", "getMethod"]}, "focal_class": {"identifier": "ReflectionEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int cacheSize = 100;", "modifier": "public final static", "type": "int", "declarator": "cacheSize = 100", "var_name": "cacheSize"}, {"original_string": "private final Logger logger = Logger.getLogger(ReflectionEngine.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(ReflectionEngine.class.getName())", "var_name": "logger"}, {"original_string": "public final static Object RETURN_VOID = new Object();", "modifier": "public final static", "type": "Object", "declarator": "RETURN_VOID = new Object()", "var_name": "RETURN_VOID"}, {"original_string": "private static ThreadLocal<LRUCache<MethodDescriptor, MethodInvoker>> cacheHolder = new ThreadLocal<LRUCache<MethodDescriptor, MethodInvoker>>() {\n\n\t\t@Override\n\t\tprotected LRUCache<MethodDescriptor, MethodInvoker> initialValue() {\n\t\t\treturn new LRUCache<MethodDescriptor, MethodInvoker>(cacheSize);\n\t\t}\n\n\t};", "modifier": "private static", "type": "ThreadLocal<LRUCache<MethodDescriptor, MethodInvoker>>", "declarator": "cacheHolder = new ThreadLocal<LRUCache<MethodDescriptor, MethodInvoker>>() {\n\n\t\t@Override\n\t\tprotected LRUCache<MethodDescriptor, MethodInvoker> initialValue() {\n\t\t\treturn new LRUCache<MethodDescriptor, MethodInvoker>(cacheSize);\n\t\t}\n\n\t}", "var_name": "cacheHolder"}], "methods": [{"identifier": "createArray", "parameters": "(String fqn, int[] dimensions)", "modifiers": "public", "return": "Object", "signature": "Object createArray(String fqn, int[] dimensions)", "full_signature": "public Object createArray(String fqn, int[] dimensions)", "class_method_signature": "ReflectionEngine.createArray(String fqn, int[] dimensions)", "testcase": false, "constructor": false}, {"identifier": "getBestConstructor", "parameters": "(List<Constructor<?>> acceptableConstructors, Class<?>[] parameters)", "modifiers": "private", "return": "MethodInvoker", "signature": "MethodInvoker getBestConstructor(List<Constructor<?>> acceptableConstructors, Class<?>[] parameters)", "full_signature": "private MethodInvoker getBestConstructor(List<Constructor<?>> acceptableConstructors, Class<?>[] parameters)", "class_method_signature": "ReflectionEngine.getBestConstructor(List<Constructor<?>> acceptableConstructors, Class<?>[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getBestMethod", "parameters": "(List<Method> acceptableMethods, Class<?>[] parameters)", "modifiers": "private", "return": "MethodInvoker", "signature": "MethodInvoker getBestMethod(List<Method> acceptableMethods, Class<?>[] parameters)", "full_signature": "private MethodInvoker getBestMethod(List<Method> acceptableMethods, Class<?>[] parameters)", "class_method_signature": "ReflectionEngine.getBestMethod(List<Method> acceptableMethods, Class<?>[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(Class<?> clazz, String name)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getClass(Class<?> clazz, String name)", "full_signature": "public Class<?> getClass(Class<?> clazz, String name)", "class_method_signature": "ReflectionEngine.getClass(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "getClassParameters", "parameters": "(Object[] parameters)", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getClassParameters(Object[] parameters)", "full_signature": "public Class<?>[] getClassParameters(Object[] parameters)", "class_method_signature": "ReflectionEngine.getClassParameters(Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getConstructor", "parameters": "(Class<?> clazz, Class<?>[] parameters)", "modifiers": "public", "return": "MethodInvoker", "signature": "MethodInvoker getConstructor(Class<?> clazz, Class<?>[] parameters)", "full_signature": "public MethodInvoker getConstructor(Class<?> clazz, Class<?>[] parameters)", "class_method_signature": "ReflectionEngine.getConstructor(Class<?> clazz, Class<?>[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getConstructor", "parameters": "(String classFQN, Object[] parameters)", "modifiers": "public", "return": "MethodInvoker", "signature": "MethodInvoker getConstructor(String classFQN, Object[] parameters)", "full_signature": "public MethodInvoker getConstructor(String classFQN, Object[] parameters)", "class_method_signature": "ReflectionEngine.getConstructor(String classFQN, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getConstructorsByLength", "parameters": "(Class<?> clazz, int length)", "modifiers": "private", "return": "List<Constructor<?>>", "signature": "List<Constructor<?>> getConstructorsByLength(Class<?> clazz, int length)", "full_signature": "private List<Constructor<?>> getConstructorsByLength(Class<?> clazz, int length)", "class_method_signature": "ReflectionEngine.getConstructorsByLength(Class<?> clazz, int length)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Class<?> clazz, String name)", "modifiers": "public", "return": "Field", "signature": "Field getField(Class<?> clazz, String name)", "full_signature": "public Field getField(Class<?> clazz, String name)", "class_method_signature": "ReflectionEngine.getField(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(Object obj, String name)", "modifiers": "public", "return": "Field", "signature": "Field getField(Object obj, String name)", "full_signature": "public Field getField(Object obj, String name)", "class_method_signature": "ReflectionEngine.getField(Object obj, String name)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(String classFQN, String name)", "modifiers": "public", "return": "Field", "signature": "Field getField(String classFQN, String name)", "full_signature": "public Field getField(String classFQN, String name)", "class_method_signature": "ReflectionEngine.getField(String classFQN, String name)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Object obj, Field field)", "modifiers": "public", "return": "Object", "signature": "Object getFieldValue(Object obj, Field field)", "full_signature": "public Object getFieldValue(Object obj, Field field)", "class_method_signature": "ReflectionEngine.getFieldValue(Object obj, Field field)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String name)", "modifiers": "public", "return": "Method", "signature": "Method getMethod(Class<?> clazz, String name)", "full_signature": "public Method getMethod(Class<?> clazz, String name)", "class_method_signature": "ReflectionEngine.getMethod(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> clazz, String name, Class<?>[] parameters)", "modifiers": "public", "return": "MethodInvoker", "signature": "MethodInvoker getMethod(Class<?> clazz, String name, Class<?>[] parameters)", "full_signature": "public MethodInvoker getMethod(Class<?> clazz, String name, Class<?>[] parameters)", "class_method_signature": "ReflectionEngine.getMethod(Class<?> clazz, String name, Class<?>[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Object object, String name, Object[] parameters)", "modifiers": "public", "return": "MethodInvoker", "signature": "MethodInvoker getMethod(Object object, String name, Object[] parameters)", "full_signature": "public MethodInvoker getMethod(Object object, String name, Object[] parameters)", "class_method_signature": "ReflectionEngine.getMethod(Object object, String name, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(String classFQN, String name, Object[] parameters)", "modifiers": "public", "return": "MethodInvoker", "signature": "MethodInvoker getMethod(String classFQN, String name, Object[] parameters)", "full_signature": "public MethodInvoker getMethod(String classFQN, String name, Object[] parameters)", "class_method_signature": "ReflectionEngine.getMethod(String classFQN, String name, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getMethodsByNameAndLength", "parameters": "(Class<?> clazz, String name, int length)", "modifiers": "private", "return": "List<Method>", "signature": "List<Method> getMethodsByNameAndLength(Class<?> clazz, String name, int length)", "full_signature": "private List<Method> getMethodsByNameAndLength(Class<?> clazz, String name, int length)", "class_method_signature": "ReflectionEngine.getMethodsByNameAndLength(Class<?> clazz, String name, int length)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object object, MethodInvoker invoker, Object[] parameters)", "modifiers": "public", "return": "Object", "signature": "Object invoke(Object object, MethodInvoker invoker, Object[] parameters)", "full_signature": "public Object invoke(Object object, MethodInvoker invoker, Object[] parameters)", "class_method_signature": "ReflectionEngine.invoke(Object object, MethodInvoker invoker, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "(Object obj, Field field, Object value)", "modifiers": "public", "return": "void", "signature": "void setFieldValue(Object obj, Field field, Object value)", "full_signature": "public void setFieldValue(Object obj, Field field, Object value)", "class_method_signature": "ReflectionEngine.setFieldValue(Object obj, Field field, Object value)", "testcase": false, "constructor": false}, {"identifier": "getPublicMethodNames", "parameters": "(Object obj)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicMethodNames(Object obj)", "full_signature": "public String[] getPublicMethodNames(Object obj)", "class_method_signature": "ReflectionEngine.getPublicMethodNames(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getPublicFieldNames", "parameters": "(Object obj)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicFieldNames(Object obj)", "full_signature": "public String[] getPublicFieldNames(Object obj)", "class_method_signature": "ReflectionEngine.getPublicFieldNames(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getPublicStaticFieldNames", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicStaticFieldNames(Class<?> clazz)", "full_signature": "public String[] getPublicStaticFieldNames(Class<?> clazz)", "class_method_signature": "ReflectionEngine.getPublicStaticFieldNames(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPublicStaticMethodNames", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicStaticMethodNames(Class<?> clazz)", "full_signature": "public String[] getPublicStaticMethodNames(Class<?> clazz)", "class_method_signature": "ReflectionEngine.getPublicStaticMethodNames(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPublicStaticClassNames", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicStaticClassNames(Class<?> clazz)", "full_signature": "public String[] getPublicStaticClassNames(Class<?> clazz)", "class_method_signature": "ReflectionEngine.getPublicStaticClassNames(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPublicStaticNames", "parameters": "(Class<?> clazz)", "modifiers": "public", "return": "String[]", "signature": "String[] getPublicStaticNames(Class<?> clazz)", "full_signature": "public String[] getPublicStaticNames(Class<?> clazz)", "class_method_signature": "ReflectionEngine.getPublicStaticNames(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/reflection/ReflectionEngine.java"}, "focal_method": {"identifier": "getMethod", "parameters": "(Class<?> clazz, String name)", "modifiers": "public", "return": "Method", "body": "public Method getMethod(Class<?> clazz, String name) {\n\t\tMethod m = null;\n\t\ttry {\n\t\t\tfor (Method tempMethod : clazz.getMethods()) {\n\t\t\t\tif (tempMethod.getName().equals(name)) {\n\t\t\t\t\tm = tempMethod;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tm = null;\n\t\t}\n\t\treturn m;\n\t}", "signature": "Method getMethod(Class<?> clazz, String name)", "full_signature": "public Method getMethod(Class<?> clazz, String name)", "class_method_signature": "ReflectionEngine.getMethod(Class<?> clazz, String name)", "testcase": false, "constructor": false, "invocations": ["getMethods", "equals", "getName"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}