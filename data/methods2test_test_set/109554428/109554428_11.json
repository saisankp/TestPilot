{"test_class": {"identifier": "ProtocolProcessorTest", "superclass": "extends AbstractProtocolProcessorCommonUtils", "interfaces": "", "fields": [{"original_string": "static final String FAKE_CLIENT_ID = \"FAKE_123\";", "modifier": "static final", "type": "String", "declarator": "FAKE_CLIENT_ID = \"FAKE_123\"", "var_name": "FAKE_CLIENT_ID"}, {"original_string": "static final String FAKE_CLIENT_ID2 = \"FAKE_456\";", "modifier": "static final", "type": "String", "declarator": "FAKE_CLIENT_ID2 = \"FAKE_456\"", "var_name": "FAKE_CLIENT_ID2"}, {"original_string": "static final String FAKE_PUBLISHER_ID = \"Publisher\";", "modifier": "static final", "type": "String", "declarator": "FAKE_PUBLISHER_ID = \"Publisher\"", "var_name": "FAKE_PUBLISHER_ID"}, {"original_string": "static final String FAKE_TOPIC = \"/news\";", "modifier": "static final", "type": "String", "declarator": "FAKE_TOPIC = \"/news\"", "var_name": "FAKE_TOPIC"}, {"original_string": "static final String BAD_FORMATTED_TOPIC = \"#MQTTClient\";", "modifier": "static final", "type": "String", "declarator": "BAD_FORMATTED_TOPIC = \"#MQTTClient\"", "var_name": "BAD_FORMATTED_TOPIC"}, {"original_string": "static final String TEST_USER = \"fakeuser\";", "modifier": "static final", "type": "String", "declarator": "TEST_USER = \"fakeuser\"", "var_name": "TEST_USER"}, {"original_string": "static final String TEST_PWD = \"fakepwd\";", "modifier": "static final", "type": "String", "declarator": "TEST_PWD = \"fakepwd\"", "var_name": "TEST_PWD"}, {"original_string": "static final String EVIL_TEST_USER = \"eviluser\";", "modifier": "static final", "type": "String", "declarator": "EVIL_TEST_USER = \"eviluser\"", "var_name": "EVIL_TEST_USER"}, {"original_string": "static final String EVIL_TEST_PWD = \"unsecret\";", "modifier": "static final", "type": "String", "declarator": "EVIL_TEST_PWD = \"unsecret\"", "var_name": "EVIL_TEST_PWD"}, {"original_string": "static final List<InterceptHandler> EMPTY_OBSERVERS = Collections.emptyList();", "modifier": "static final", "type": "List<InterceptHandler>", "declarator": "EMPTY_OBSERVERS = Collections.emptyList()", "var_name": "EMPTY_OBSERVERS"}, {"original_string": "static final BrokerInterceptor NO_OBSERVERS_INTERCEPTOR = new BrokerInterceptor(EMPTY_OBSERVERS);", "modifier": "static final", "type": "BrokerInterceptor", "declarator": "NO_OBSERVERS_INTERCEPTOR = new BrokerInterceptor(EMPTY_OBSERVERS)", "var_name": "NO_OBSERVERS_INTERCEPTOR"}], "file": "broker/src/test/java/io/moquette/spi/impl/ProtocolProcessorTest.java"}, "test_case": {"identifier": "testLowerTheQosToTheRequestedBySubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLowerTheQosToTheRequestedBySubscription() {\n        Subscription subQos1 = new Subscription(\"Sub A\", new Topic(\"a/b\"), MqttQoS.AT_LEAST_ONCE);\n        assertEquals(MqttQoS.AT_LEAST_ONCE, lowerQosToTheSubscriptionDesired(subQos1, MqttQoS.EXACTLY_ONCE));\n\n        Subscription subQos2 = new Subscription(\"Sub B\", new Topic(\"a/+\"), MqttQoS.EXACTLY_ONCE);\n        assertEquals(MqttQoS.EXACTLY_ONCE, lowerQosToTheSubscriptionDesired(subQos2, MqttQoS.EXACTLY_ONCE));\n    }", "signature": "void testLowerTheQosToTheRequestedBySubscription()", "full_signature": "@Test public void testLowerTheQosToTheRequestedBySubscription()", "class_method_signature": "ProtocolProcessorTest.testLowerTheQosToTheRequestedBySubscription()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "lowerQosToTheSubscriptionDesired", "assertEquals", "lowerQosToTheSubscriptionDesired"]}, "focal_class": {"identifier": "ProtocolProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ProtocolProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ProtocolProcessor.class)", "var_name": "LOG"}, {"original_string": "private ConnectionDescriptorStore connectionDescriptors;", "modifier": "private", "type": "ConnectionDescriptorStore", "declarator": "connectionDescriptors", "var_name": "connectionDescriptors"}, {"original_string": "private ConcurrentMap<RunningSubscription, SubscriptionState> subscriptionInCourse;", "modifier": "private", "type": "ConcurrentMap<RunningSubscription, SubscriptionState>", "declarator": "subscriptionInCourse", "var_name": "subscriptionInCourse"}, {"original_string": "private ISubscriptionsDirectory subscriptions;", "modifier": "private", "type": "ISubscriptionsDirectory", "declarator": "subscriptions", "var_name": "subscriptions"}, {"original_string": "private ISubscriptionsStore subscriptionStore;", "modifier": "private", "type": "ISubscriptionsStore", "declarator": "subscriptionStore", "var_name": "subscriptionStore"}, {"original_string": "private boolean allowAnonymous;", "modifier": "private", "type": "boolean", "declarator": "allowAnonymous", "var_name": "allowAnonymous"}, {"original_string": "private boolean allowZeroByteClientId;", "modifier": "private", "type": "boolean", "declarator": "allowZeroByteClientId", "var_name": "allowZeroByteClientId"}, {"original_string": "private IAuthorizator m_authorizator;", "modifier": "private", "type": "IAuthorizator", "declarator": "m_authorizator", "var_name": "m_authorizator"}, {"original_string": "private IMessagesStore m_messagesStore;", "modifier": "private", "type": "IMessagesStore", "declarator": "m_messagesStore", "var_name": "m_messagesStore"}, {"original_string": "private ISessionsStore m_sessionsStore;", "modifier": "private", "type": "ISessionsStore", "declarator": "m_sessionsStore", "var_name": "m_sessionsStore"}, {"original_string": "private IAuthenticator m_authenticator;", "modifier": "private", "type": "IAuthenticator", "declarator": "m_authenticator", "var_name": "m_authenticator"}, {"original_string": "private BrokerInterceptor m_interceptor;", "modifier": "private", "type": "BrokerInterceptor", "declarator": "m_interceptor", "var_name": "m_interceptor"}, {"original_string": "private Qos0PublishHandler qos0PublishHandler;", "modifier": "private", "type": "Qos0PublishHandler", "declarator": "qos0PublishHandler", "var_name": "qos0PublishHandler"}, {"original_string": "private Qos1PublishHandler qos1PublishHandler;", "modifier": "private", "type": "Qos1PublishHandler", "declarator": "qos1PublishHandler", "var_name": "qos1PublishHandler"}, {"original_string": "private Qos2PublishHandler qos2PublishHandler;", "modifier": "private", "type": "Qos2PublishHandler", "declarator": "qos2PublishHandler", "var_name": "qos2PublishHandler"}, {"original_string": "private MessagesPublisher messagesPublisher;", "modifier": "private", "type": "MessagesPublisher", "declarator": "messagesPublisher", "var_name": "messagesPublisher"}, {"original_string": "private InternalRepublisher internalRepublisher;", "modifier": "private", "type": "InternalRepublisher", "declarator": "internalRepublisher", "var_name": "internalRepublisher"}, {"original_string": "SessionsRepository sessionsRepository;", "modifier": "", "type": "SessionsRepository", "declarator": "sessionsRepository", "var_name": "sessionsRepository"}, {"original_string": "private ConcurrentMap<String, WillMessage> m_willStore = new ConcurrentHashMap<>();", "modifier": "private", "type": "ConcurrentMap<String, WillMessage>", "declarator": "m_willStore = new ConcurrentHashMap<>()", "var_name": "m_willStore"}], "methods": [{"identifier": "ProtocolProcessor", "parameters": "()", "modifiers": "", "return": "", "signature": " ProtocolProcessor()", "full_signature": "  ProtocolProcessor()", "class_method_signature": "ProtocolProcessor.ProtocolProcessor()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, IAuthorizator authorizator,\n                     BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "modifiers": "public", "return": "void", "signature": "void init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, IAuthorizator authorizator,\n                     BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "full_signature": "public void init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, IAuthorizator authorizator,\n                     BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "class_method_signature": "ProtocolProcessor.init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, IAuthorizator authorizator,\n                     BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, boolean allowZeroByteClientId,\n                     IAuthorizator authorizator, BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "modifiers": "public", "return": "void", "signature": "void init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, boolean allowZeroByteClientId,\n                     IAuthorizator authorizator, BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "full_signature": "public void init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, boolean allowZeroByteClientId,\n                     IAuthorizator authorizator, BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "class_method_signature": "ProtocolProcessor.init(ISubscriptionsDirectory subscriptions, IMessagesStore storageService, ISessionsStore sessionsStore,\n                     IAuthenticator authenticator, boolean allowAnonymous, boolean allowZeroByteClientId,\n                     IAuthorizator authorizator, BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(ConnectionDescriptorStore connectionDescriptors, ISubscriptionsDirectory subscriptions,\n              IMessagesStore storageService, ISessionsStore sessionsStore, IAuthenticator authenticator,\n              boolean allowAnonymous, boolean allowZeroByteClientId, IAuthorizator authorizator,\n              BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "modifiers": "", "return": "void", "signature": "void init(ConnectionDescriptorStore connectionDescriptors, ISubscriptionsDirectory subscriptions,\n              IMessagesStore storageService, ISessionsStore sessionsStore, IAuthenticator authenticator,\n              boolean allowAnonymous, boolean allowZeroByteClientId, IAuthorizator authorizator,\n              BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "full_signature": " void init(ConnectionDescriptorStore connectionDescriptors, ISubscriptionsDirectory subscriptions,\n              IMessagesStore storageService, ISessionsStore sessionsStore, IAuthenticator authenticator,\n              boolean allowAnonymous, boolean allowZeroByteClientId, IAuthorizator authorizator,\n              BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "class_method_signature": "ProtocolProcessor.init(ConnectionDescriptorStore connectionDescriptors, ISubscriptionsDirectory subscriptions,\n              IMessagesStore storageService, ISessionsStore sessionsStore, IAuthenticator authenticator,\n              boolean allowAnonymous, boolean allowZeroByteClientId, IAuthorizator authorizator,\n              BrokerInterceptor interceptor, SessionsRepository sessionsRepository)", "testcase": false, "constructor": false}, {"identifier": "processConnect", "parameters": "(Channel channel, MqttConnectMessage msg)", "modifiers": "public", "return": "void", "signature": "void processConnect(Channel channel, MqttConnectMessage msg)", "full_signature": "public void processConnect(Channel channel, MqttConnectMessage msg)", "class_method_signature": "ProtocolProcessor.processConnect(Channel channel, MqttConnectMessage msg)", "testcase": false, "constructor": false}, {"identifier": "connAck", "parameters": "(MqttConnectReturnCode returnCode)", "modifiers": "private", "return": "MqttConnAckMessage", "signature": "MqttConnAckMessage connAck(MqttConnectReturnCode returnCode)", "full_signature": "private MqttConnAckMessage connAck(MqttConnectReturnCode returnCode)", "class_method_signature": "ProtocolProcessor.connAck(MqttConnectReturnCode returnCode)", "testcase": false, "constructor": false}, {"identifier": "connAckWithSessionPresent", "parameters": "(MqttConnectReturnCode returnCode)", "modifiers": "private", "return": "MqttConnAckMessage", "signature": "MqttConnAckMessage connAckWithSessionPresent(MqttConnectReturnCode returnCode)", "full_signature": "private MqttConnAckMessage connAckWithSessionPresent(MqttConnectReturnCode returnCode)", "class_method_signature": "ProtocolProcessor.connAckWithSessionPresent(MqttConnectReturnCode returnCode)", "testcase": false, "constructor": false}, {"identifier": "connAck", "parameters": "(MqttConnectReturnCode returnCode, boolean sessionPresent)", "modifiers": "private", "return": "MqttConnAckMessage", "signature": "MqttConnAckMessage connAck(MqttConnectReturnCode returnCode, boolean sessionPresent)", "full_signature": "private MqttConnAckMessage connAck(MqttConnectReturnCode returnCode, boolean sessionPresent)", "class_method_signature": "ProtocolProcessor.connAck(MqttConnectReturnCode returnCode, boolean sessionPresent)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(Channel channel, MqttConnectMessage msg, final String clientId)", "modifiers": "private", "return": "boolean", "signature": "boolean login(Channel channel, MqttConnectMessage msg, final String clientId)", "full_signature": "private boolean login(Channel channel, MqttConnectMessage msg, final String clientId)", "class_method_signature": "ProtocolProcessor.login(Channel channel, MqttConnectMessage msg, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "sendAck", "parameters": "(ConnectionDescriptor descriptor, MqttConnectMessage msg, final String clientId)", "modifiers": "private", "return": "boolean", "signature": "boolean sendAck(ConnectionDescriptor descriptor, MqttConnectMessage msg, final String clientId)", "full_signature": "private boolean sendAck(ConnectionDescriptor descriptor, MqttConnectMessage msg, final String clientId)", "class_method_signature": "ProtocolProcessor.sendAck(ConnectionDescriptor descriptor, MqttConnectMessage msg, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "initializeKeepAliveTimeout", "parameters": "(Channel channel, MqttConnectMessage msg, final String clientId)", "modifiers": "private", "return": "void", "signature": "void initializeKeepAliveTimeout(Channel channel, MqttConnectMessage msg, final String clientId)", "full_signature": "private void initializeKeepAliveTimeout(Channel channel, MqttConnectMessage msg, final String clientId)", "class_method_signature": "ProtocolProcessor.initializeKeepAliveTimeout(Channel channel, MqttConnectMessage msg, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "storeWillMessage", "parameters": "(MqttConnectMessage msg, final String clientId)", "modifiers": "private", "return": "void", "signature": "void storeWillMessage(MqttConnectMessage msg, final String clientId)", "full_signature": "private void storeWillMessage(MqttConnectMessage msg, final String clientId)", "class_method_signature": "ProtocolProcessor.storeWillMessage(MqttConnectMessage msg, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "republish", "parameters": "(ConnectionDescriptor descriptor, MqttConnectMessage msg, ClientSession clientSession)", "modifiers": "private", "return": "boolean", "signature": "boolean republish(ConnectionDescriptor descriptor, MqttConnectMessage msg, ClientSession clientSession)", "full_signature": "private boolean republish(ConnectionDescriptor descriptor, MqttConnectMessage msg, ClientSession clientSession)", "class_method_signature": "ProtocolProcessor.republish(ConnectionDescriptor descriptor, MqttConnectMessage msg, ClientSession clientSession)", "testcase": false, "constructor": false}, {"identifier": "failedCredentials", "parameters": "(Channel session)", "modifiers": "private", "return": "void", "signature": "void failedCredentials(Channel session)", "full_signature": "private void failedCredentials(Channel session)", "class_method_signature": "ProtocolProcessor.failedCredentials(Channel session)", "testcase": false, "constructor": false}, {"identifier": "setIdleTime", "parameters": "(ChannelPipeline pipeline, int idleTime)", "modifiers": "private", "return": "void", "signature": "void setIdleTime(ChannelPipeline pipeline, int idleTime)", "full_signature": "private void setIdleTime(ChannelPipeline pipeline, int idleTime)", "class_method_signature": "ProtocolProcessor.setIdleTime(ChannelPipeline pipeline, int idleTime)", "testcase": false, "constructor": false}, {"identifier": "processPubAck", "parameters": "(Channel channel, MqttPubAckMessage msg)", "modifiers": "public", "return": "void", "signature": "void processPubAck(Channel channel, MqttPubAckMessage msg)", "full_signature": "public void processPubAck(Channel channel, MqttPubAckMessage msg)", "class_method_signature": "ProtocolProcessor.processPubAck(Channel channel, MqttPubAckMessage msg)", "testcase": false, "constructor": false}, {"identifier": "asStoredMessage", "parameters": "(MqttPublishMessage msg)", "modifiers": "public static", "return": "IMessagesStore.StoredMessage", "signature": "IMessagesStore.StoredMessage asStoredMessage(MqttPublishMessage msg)", "full_signature": "public static IMessagesStore.StoredMessage asStoredMessage(MqttPublishMessage msg)", "class_method_signature": "ProtocolProcessor.asStoredMessage(MqttPublishMessage msg)", "testcase": false, "constructor": false}, {"identifier": "asStoredMessage", "parameters": "(WillMessage will)", "modifiers": "private static", "return": "IMessagesStore.StoredMessage", "signature": "IMessagesStore.StoredMessage asStoredMessage(WillMessage will)", "full_signature": "private static IMessagesStore.StoredMessage asStoredMessage(WillMessage will)", "class_method_signature": "ProtocolProcessor.asStoredMessage(WillMessage will)", "testcase": false, "constructor": false}, {"identifier": "processPublish", "parameters": "(Channel channel, MqttPublishMessage msg)", "modifiers": "public", "return": "void", "signature": "void processPublish(Channel channel, MqttPublishMessage msg)", "full_signature": "public void processPublish(Channel channel, MqttPublishMessage msg)", "class_method_signature": "ProtocolProcessor.processPublish(Channel channel, MqttPublishMessage msg)", "testcase": false, "constructor": false}, {"identifier": "internalPublish", "parameters": "(MqttPublishMessage msg, final String clientId)", "modifiers": "public", "return": "void", "signature": "void internalPublish(MqttPublishMessage msg, final String clientId)", "full_signature": "public void internalPublish(MqttPublishMessage msg, final String clientId)", "class_method_signature": "ProtocolProcessor.internalPublish(MqttPublishMessage msg, final String clientId)", "testcase": false, "constructor": false}, {"identifier": "forwardPublishWill", "parameters": "(WillMessage will, String clientID)", "modifiers": "private", "return": "void", "signature": "void forwardPublishWill(WillMessage will, String clientID)", "full_signature": "private void forwardPublishWill(WillMessage will, String clientID)", "class_method_signature": "ProtocolProcessor.forwardPublishWill(WillMessage will, String clientID)", "testcase": false, "constructor": false}, {"identifier": "lowerQosToTheSubscriptionDesired", "parameters": "(Subscription sub, MqttQoS qos)", "modifiers": "static", "return": "MqttQoS", "signature": "MqttQoS lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "full_signature": "static MqttQoS lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "class_method_signature": "ProtocolProcessor.lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "testcase": false, "constructor": false}, {"identifier": "processPubRel", "parameters": "(Channel channel, MqttMessage msg)", "modifiers": "public", "return": "void", "signature": "void processPubRel(Channel channel, MqttMessage msg)", "full_signature": "public void processPubRel(Channel channel, MqttMessage msg)", "class_method_signature": "ProtocolProcessor.processPubRel(Channel channel, MqttMessage msg)", "testcase": false, "constructor": false}, {"identifier": "processPubRec", "parameters": "(Channel channel, MqttMessage msg)", "modifiers": "public", "return": "void", "signature": "void processPubRec(Channel channel, MqttMessage msg)", "full_signature": "public void processPubRec(Channel channel, MqttMessage msg)", "class_method_signature": "ProtocolProcessor.processPubRec(Channel channel, MqttMessage msg)", "testcase": false, "constructor": false}, {"identifier": "processPubComp", "parameters": "(Channel channel, MqttMessage msg)", "modifiers": "public", "return": "void", "signature": "void processPubComp(Channel channel, MqttMessage msg)", "full_signature": "public void processPubComp(Channel channel, MqttMessage msg)", "class_method_signature": "ProtocolProcessor.processPubComp(Channel channel, MqttMessage msg)", "testcase": false, "constructor": false}, {"identifier": "processDisconnect", "parameters": "(Channel channel)", "modifiers": "public", "return": "void", "signature": "void processDisconnect(Channel channel)", "full_signature": "public void processDisconnect(Channel channel)", "class_method_signature": "ProtocolProcessor.processDisconnect(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "removeSubscriptions", "parameters": "(ConnectionDescriptor descriptor, String clientID)", "modifiers": "private", "return": "boolean", "signature": "boolean removeSubscriptions(ConnectionDescriptor descriptor, String clientID)", "full_signature": "private boolean removeSubscriptions(ConnectionDescriptor descriptor, String clientID)", "class_method_signature": "ProtocolProcessor.removeSubscriptions(ConnectionDescriptor descriptor, String clientID)", "testcase": false, "constructor": false}, {"identifier": "dropStoredMessages", "parameters": "(ConnectionDescriptor descriptor, String clientID)", "modifiers": "private", "return": "boolean", "signature": "boolean dropStoredMessages(ConnectionDescriptor descriptor, String clientID)", "full_signature": "private boolean dropStoredMessages(ConnectionDescriptor descriptor, String clientID)", "class_method_signature": "ProtocolProcessor.dropStoredMessages(ConnectionDescriptor descriptor, String clientID)", "testcase": false, "constructor": false}, {"identifier": "cleanWillMessageAndNotifyInterceptor", "parameters": "(ConnectionDescriptor descriptor, String clientID)", "modifiers": "private", "return": "boolean", "signature": "boolean cleanWillMessageAndNotifyInterceptor(ConnectionDescriptor descriptor, String clientID)", "full_signature": "private boolean cleanWillMessageAndNotifyInterceptor(ConnectionDescriptor descriptor, String clientID)", "class_method_signature": "ProtocolProcessor.cleanWillMessageAndNotifyInterceptor(ConnectionDescriptor descriptor, String clientID)", "testcase": false, "constructor": false}, {"identifier": "processConnectionLost", "parameters": "(String clientID, Channel channel)", "modifiers": "public", "return": "void", "signature": "void processConnectionLost(String clientID, Channel channel)", "full_signature": "public void processConnectionLost(String clientID, Channel channel)", "class_method_signature": "ProtocolProcessor.processConnectionLost(String clientID, Channel channel)", "testcase": false, "constructor": false}, {"identifier": "processUnsubscribe", "parameters": "(Channel channel, MqttUnsubscribeMessage msg)", "modifiers": "public", "return": "void", "signature": "void processUnsubscribe(Channel channel, MqttUnsubscribeMessage msg)", "full_signature": "public void processUnsubscribe(Channel channel, MqttUnsubscribeMessage msg)", "class_method_signature": "ProtocolProcessor.processUnsubscribe(Channel channel, MqttUnsubscribeMessage msg)", "testcase": false, "constructor": false}, {"identifier": "processSubscribe", "parameters": "(Channel channel, MqttSubscribeMessage msg)", "modifiers": "public", "return": "void", "signature": "void processSubscribe(Channel channel, MqttSubscribeMessage msg)", "full_signature": "public void processSubscribe(Channel channel, MqttSubscribeMessage msg)", "class_method_signature": "ProtocolProcessor.processSubscribe(Channel channel, MqttSubscribeMessage msg)", "testcase": false, "constructor": false}, {"identifier": "doStoreSubscription", "parameters": "(List<MqttTopicSubscription> ackTopics, String clientID)", "modifiers": "private", "return": "List<Subscription>", "signature": "List<Subscription> doStoreSubscription(List<MqttTopicSubscription> ackTopics, String clientID)", "full_signature": "private List<Subscription> doStoreSubscription(List<MqttTopicSubscription> ackTopics, String clientID)", "class_method_signature": "ProtocolProcessor.doStoreSubscription(List<MqttTopicSubscription> ackTopics, String clientID)", "testcase": false, "constructor": false}, {"identifier": "doVerify", "parameters": "(String clientID, String username, MqttSubscribeMessage msg)", "modifiers": "private", "return": "List<MqttTopicSubscription>", "signature": "List<MqttTopicSubscription> doVerify(String clientID, String username, MqttSubscribeMessage msg)", "full_signature": "private List<MqttTopicSubscription> doVerify(String clientID, String username, MqttSubscribeMessage msg)", "class_method_signature": "ProtocolProcessor.doVerify(String clientID, String username, MqttSubscribeMessage msg)", "testcase": false, "constructor": false}, {"identifier": "doAckMessageFromValidateFilters", "parameters": "(List<MqttTopicSubscription> topicFilters, int messageId)", "modifiers": "private", "return": "MqttSubAckMessage", "signature": "MqttSubAckMessage doAckMessageFromValidateFilters(List<MqttTopicSubscription> topicFilters, int messageId)", "full_signature": "private MqttSubAckMessage doAckMessageFromValidateFilters(List<MqttTopicSubscription> topicFilters, int messageId)", "class_method_signature": "ProtocolProcessor.doAckMessageFromValidateFilters(List<MqttTopicSubscription> topicFilters, int messageId)", "testcase": false, "constructor": false}, {"identifier": "publishRetainedMessagesInSession", "parameters": "(final Subscription newSubscription, String username)", "modifiers": "private", "return": "void", "signature": "void publishRetainedMessagesInSession(final Subscription newSubscription, String username)", "full_signature": "private void publishRetainedMessagesInSession(final Subscription newSubscription, String username)", "class_method_signature": "ProtocolProcessor.publishRetainedMessagesInSession(final Subscription newSubscription, String username)", "testcase": false, "constructor": false}, {"identifier": "notifyChannelWritable", "parameters": "(Channel channel)", "modifiers": "public", "return": "void", "signature": "void notifyChannelWritable(Channel channel)", "full_signature": "public void notifyChannelWritable(Channel channel)", "class_method_signature": "ProtocolProcessor.notifyChannelWritable(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "addInterceptHandler", "parameters": "(InterceptHandler interceptHandler)", "modifiers": "public", "return": "void", "signature": "void addInterceptHandler(InterceptHandler interceptHandler)", "full_signature": "public void addInterceptHandler(InterceptHandler interceptHandler)", "class_method_signature": "ProtocolProcessor.addInterceptHandler(InterceptHandler interceptHandler)", "testcase": false, "constructor": false}, {"identifier": "removeInterceptHandler", "parameters": "(InterceptHandler interceptHandler)", "modifiers": "public", "return": "void", "signature": "void removeInterceptHandler(InterceptHandler interceptHandler)", "full_signature": "public void removeInterceptHandler(InterceptHandler interceptHandler)", "class_method_signature": "ProtocolProcessor.removeInterceptHandler(InterceptHandler interceptHandler)", "testcase": false, "constructor": false}, {"identifier": "getMessagesStore", "parameters": "()", "modifiers": "public", "return": "IMessagesStore", "signature": "IMessagesStore getMessagesStore()", "full_signature": "public IMessagesStore getMessagesStore()", "class_method_signature": "ProtocolProcessor.getMessagesStore()", "testcase": false, "constructor": false}, {"identifier": "getSessionsStore", "parameters": "()", "modifiers": "public", "return": "ISessionsStore", "signature": "ISessionsStore getSessionsStore()", "full_signature": "public ISessionsStore getSessionsStore()", "class_method_signature": "ProtocolProcessor.getSessionsStore()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "ProtocolProcessor.shutdown()", "testcase": false, "constructor": false}], "file": "broker/src/main/java/io/moquette/spi/impl/ProtocolProcessor.java"}, "focal_method": {"identifier": "lowerQosToTheSubscriptionDesired", "parameters": "(Subscription sub, MqttQoS qos)", "modifiers": "static", "return": "MqttQoS", "body": "static MqttQoS lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos) {\n        if (qos.value() > sub.getRequestedQos().value()) {\n            qos = sub.getRequestedQos();\n        }\n        return qos;\n    }", "signature": "MqttQoS lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "full_signature": "static MqttQoS lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "class_method_signature": "ProtocolProcessor.lowerQosToTheSubscriptionDesired(Subscription sub, MqttQoS qos)", "testcase": false, "constructor": false, "invocations": ["value", "value", "getRequestedQos", "getRequestedQos"]}, "repository": {"repo_id": 109554428, "url": "https://github.com/historicvally/springboot-mqtt", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 91, "size": 318, "license": "licensed"}}