{"test_class": {"identifier": "InfluxDbReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final TimeUnit DURATION_UNIT = TimeUnit.MICROSECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "DURATION_UNIT = TimeUnit.MICROSECONDS", "var_name": "DURATION_UNIT"}, {"original_string": "private InfluxDbReporter influxDbReporter;", "modifier": "private", "type": "InfluxDbReporter", "declarator": "influxDbReporter", "var_name": "influxDbReporter"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private long timestamp;", "modifier": "private", "type": "long", "declarator": "timestamp", "var_name": "timestamp"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/InfluxDbReporterTest.java"}, "test_case": {"identifier": "testReportStringGauge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReportStringGauge() throws Exception {\n\t\tinfluxDbReporter.reportMetrics(\n\t\t\t\tmetricNameMap(name(\"gauge\").build(), gauge(\"foo\")),\n\t\t\t\tmetricNameMap(Counter.class),\n\t\t\t\tmetricNameMap(Histogram.class),\n\t\t\t\tmetricNameMap(Meter.class),\n\t\t\t\tmetricNameMap(Timer.class));\n\n\t\tverify(httpClient).send(eq(\"POST\"), eq(\"http://localhost:8086/write?precision=ms&db=stm\"),\n\t\t\t\teq(singletonList(format(\"gauge,app=test value_string=\\\"foo\\\" %d\", timestamp))));\n\t}", "signature": "void testReportStringGauge()", "full_signature": "@Test public void testReportStringGauge()", "class_method_signature": "InfluxDbReporterTest.testReportStringGauge()", "testcase": true, "constructor": false, "invocations": ["reportMetrics", "metricNameMap", "build", "name", "gauge", "metricNameMap", "metricNameMap", "metricNameMap", "metricNameMap", "send", "verify", "eq", "eq", "eq", "singletonList", "format"]}, "focal_class": {"identifier": "InfluxDbReporter", "superclass": "extends ScheduledMetrics2Reporter", "interfaces": "", "fields": [{"original_string": "private static final int MAX_BATCH_SIZE = 5000;", "modifier": "private static final", "type": "int", "declarator": "MAX_BATCH_SIZE = 5000", "var_name": "MAX_BATCH_SIZE"}, {"original_string": "private static final Map<MetricName, String> metricNameToInfluxDBFormatCache = new ConcurrentHashMap<MetricName, String>();", "modifier": "private static final", "type": "Map<MetricName, String>", "declarator": "metricNameToInfluxDBFormatCache = new ConcurrentHashMap<MetricName, String>()", "var_name": "metricNameToInfluxDBFormatCache"}, {"original_string": "private static final MetricName reportingTimeMetricName = name(\"reporting_time\").tag(\"reporter\", \"influxdb\").build();", "modifier": "private static final", "type": "MetricName", "declarator": "reportingTimeMetricName = name(\"reporting_time\").tag(\"reporter\", \"influxdb\").build()", "var_name": "reportingTimeMetricName"}, {"original_string": "private List<String> batchLines = new ArrayList<String>(MAX_BATCH_SIZE);", "modifier": "private", "type": "List<String>", "declarator": "batchLines = new ArrayList<String>(MAX_BATCH_SIZE)", "var_name": "batchLines"}, {"original_string": "private final String globalTags;", "modifier": "private final", "type": "String", "declarator": "globalTags", "var_name": "globalTags"}, {"original_string": "private HttpClient httpClient;", "modifier": "private", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}, {"original_string": "private final CorePlugin corePlugin;", "modifier": "private final", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}], "methods": [{"identifier": "forRegistry", "parameters": "(Metric2Registry registry, CorePlugin corePlugin)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "full_signature": "public static Builder forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "class_method_signature": "InfluxDbReporter.forRegistry(Metric2Registry registry, CorePlugin corePlugin)", "testcase": false, "constructor": false}, {"identifier": "InfluxDbReporter", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " InfluxDbReporter(Builder builder)", "full_signature": "private  InfluxDbReporter(Builder builder)", "class_method_signature": "InfluxDbReporter.InfluxDbReporter(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "reportMetrics", "parameters": "(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "modifiers": "@Override public", "return": "void", "signature": "void reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "full_signature": "@Override public void reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "class_method_signature": "InfluxDbReporter.reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "reportGauges", "parameters": "(Map<MetricName, Gauge> gauges, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportGauges(Map<MetricName, Gauge> gauges, long timestamp)", "full_signature": "private void reportGauges(Map<MetricName, Gauge> gauges, long timestamp)", "class_method_signature": "InfluxDbReporter.reportGauges(Map<MetricName, Gauge> gauges, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportCounter", "parameters": "(Map<MetricName, Counter> counters, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportCounter(Map<MetricName, Counter> counters, long timestamp)", "full_signature": "private void reportCounter(Map<MetricName, Counter> counters, long timestamp)", "class_method_signature": "InfluxDbReporter.reportCounter(Map<MetricName, Counter> counters, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportHistograms", "parameters": "(Map<MetricName, Histogram> histograms, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportHistograms(Map<MetricName, Histogram> histograms, long timestamp)", "full_signature": "private void reportHistograms(Map<MetricName, Histogram> histograms, long timestamp)", "class_method_signature": "InfluxDbReporter.reportHistograms(Map<MetricName, Histogram> histograms, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportMeters", "parameters": "(Map<MetricName, Meter> meters, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportMeters(Map<MetricName, Meter> meters, long timestamp)", "full_signature": "private void reportMeters(Map<MetricName, Meter> meters, long timestamp)", "class_method_signature": "InfluxDbReporter.reportMeters(Map<MetricName, Meter> meters, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportTimers", "parameters": "(Map<MetricName, Timer> timers, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportTimers(Map<MetricName, Timer> timers, long timestamp)", "full_signature": "private void reportTimers(Map<MetricName, Timer> timers, long timestamp)", "class_method_signature": "InfluxDbReporter.reportTimers(Map<MetricName, Timer> timers, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportTimerSnapshot", "parameters": "(Snapshot snapshot)", "modifiers": "private", "return": "String", "signature": "String reportTimerSnapshot(Snapshot snapshot)", "full_signature": "private String reportTimerSnapshot(Snapshot snapshot)", "class_method_signature": "InfluxDbReporter.reportTimerSnapshot(Snapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "reportHistogramSnapshot", "parameters": "(Snapshot snapshot)", "modifiers": "private", "return": "String", "signature": "String reportHistogramSnapshot(Snapshot snapshot)", "full_signature": "private String reportHistogramSnapshot(Snapshot snapshot)", "class_method_signature": "InfluxDbReporter.reportHistogramSnapshot(Snapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "reportMetered", "parameters": "(Metered metered)", "modifiers": "private", "return": "String", "signature": "String reportMetered(Metered metered)", "full_signature": "private String reportMetered(Metered metered)", "class_method_signature": "InfluxDbReporter.reportMetered(Metered metered)", "testcase": false, "constructor": false}, {"identifier": "reportLine", "parameters": "(String nameAndTags, String fields, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportLine(String nameAndTags, String fields, long timestamp)", "full_signature": "private void reportLine(String nameAndTags, String fields, long timestamp)", "class_method_signature": "InfluxDbReporter.reportLine(String nameAndTags, String fields, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flush()", "full_signature": "private void flush()", "class_method_signature": "InfluxDbReporter.flush()", "testcase": false, "constructor": false}, {"identifier": "getGaugeValueForInfluxDb", "parameters": "(Object value)", "modifiers": "private", "return": "String", "signature": "String getGaugeValueForInfluxDb(Object value)", "full_signature": "private String getGaugeValueForInfluxDb(Object value)", "class_method_signature": "InfluxDbReporter.getGaugeValueForInfluxDb(Object value)", "testcase": false, "constructor": false}, {"identifier": "getIntegerValue", "parameters": "(Object integer)", "modifiers": "private", "return": "String", "signature": "String getIntegerValue(Object integer)", "full_signature": "private String getIntegerValue(Object integer)", "class_method_signature": "InfluxDbReporter.getIntegerValue(Object integer)", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "(double duration)", "modifiers": "private", "return": "String", "signature": "String getDuration(double duration)", "full_signature": "private String getDuration(double duration)", "class_method_signature": "InfluxDbReporter.getDuration(double duration)", "testcase": false, "constructor": false}, {"identifier": "getRate", "parameters": "(double rate)", "modifiers": "private", "return": "String", "signature": "String getRate(double rate)", "full_signature": "private String getRate(double rate)", "class_method_signature": "InfluxDbReporter.getRate(double rate)", "testcase": false, "constructor": false}, {"identifier": "getFloatValue", "parameters": "(Object number)", "modifiers": "private", "return": "String", "signature": "String getFloatValue(Object number)", "full_signature": "private String getFloatValue(Object number)", "class_method_signature": "InfluxDbReporter.getFloatValue(Object number)", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String getStringValue(String value)", "full_signature": "private String getStringValue(String value)", "class_method_signature": "InfluxDbReporter.getStringValue(String value)", "testcase": false, "constructor": false}, {"identifier": "getInfluxDbLineProtocolString", "parameters": "(MetricName metricName)", "modifiers": "public static", "return": "String", "signature": "String getInfluxDbLineProtocolString(MetricName metricName)", "full_signature": "public static String getInfluxDbLineProtocolString(MetricName metricName)", "class_method_signature": "InfluxDbReporter.getInfluxDbLineProtocolString(MetricName metricName)", "testcase": false, "constructor": false}, {"identifier": "getInfluxDbTags", "parameters": "(Map<String, String> tags)", "modifiers": "private static", "return": "String", "signature": "String getInfluxDbTags(Map<String, String> tags)", "full_signature": "private static String getInfluxDbTags(Map<String, String> tags)", "class_method_signature": "InfluxDbReporter.getInfluxDbTags(Map<String, String> tags)", "testcase": false, "constructor": false}, {"identifier": "appendTags", "parameters": "(StringBuilder sb, Map<String, String> tags)", "modifiers": "private static", "return": "void", "signature": "void appendTags(StringBuilder sb, Map<String, String> tags)", "full_signature": "private static void appendTags(StringBuilder sb, Map<String, String> tags)", "class_method_signature": "InfluxDbReporter.appendTags(StringBuilder sb, Map<String, String> tags)", "testcase": false, "constructor": false}, {"identifier": "escapeForInfluxDB", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String escapeForInfluxDB(String s)", "full_signature": "private static String escapeForInfluxDB(String s)", "class_method_signature": "InfluxDbReporter.escapeForInfluxDB(String s)", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/InfluxDbReporter.java"}, "focal_method": {"identifier": "reportMetrics", "parameters": "(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers) {\n\n\t\tfinal Timer.Context time = registry.timer(reportingTimeMetricName).time();\n\t\tlong timestamp = clock.getTime();\n\t\treportGauges(gauges, timestamp);\n\t\treportCounter(counters, timestamp);\n\t\treportHistograms(histograms, timestamp);\n\t\treportMeters(meters, timestamp);\n\t\treportTimers(timers, timestamp);\n\t\tflush();\n\t\ttime.stop();\n\t}", "signature": "void reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "full_signature": "@Override public void reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "class_method_signature": "InfluxDbReporter.reportMetrics(Map<MetricName, Gauge> gauges,\n\t\t\t\t\t\t\t  Map<MetricName, Counter> counters,\n\t\t\t\t\t\t\t  Map<MetricName, Histogram> histograms,\n\t\t\t\t\t\t\t  Map<MetricName, Meter> meters,\n\t\t\t\t\t\t\t  Map<MetricName, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["time", "timer", "getTime", "reportGauges", "reportCounter", "reportHistograms", "reportMeters", "reportTimers", "flush", "stop"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}