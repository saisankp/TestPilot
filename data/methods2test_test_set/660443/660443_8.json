{"test_class": {"identifier": "AtomDiffTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/AtomDiffTest.java"}, "test_case": {"identifier": "testDifference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifference() {\n        IAtom atom1 = mock(IAtom.class);\n        IAtom atom2 = mock(IAtom.class);\n        when(atom1.getSymbol()).thenReturn(\"H\");\n        when(atom2.getSymbol()).thenReturn(\"C\");\n\n        IDifference difference = AtomDiff.difference(atom1, atom2);\n        Assert.assertNotNull(difference);\n    }", "signature": "void testDifference()", "full_signature": "@Test public void testDifference()", "class_method_signature": "AtomDiffTest.testDifference()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getSymbol", "thenReturn", "when", "getSymbol", "difference", "assertNotNull"]}, "focal_class": {"identifier": "AtomDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AtomDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " AtomDiff()", "full_signature": "private  AtomDiff()", "class_method_signature": "AtomDiff.AtomDiff()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "AtomDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/AtomDiff.java"}, "focal_method": {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "body": "public static IDifference difference(IChemObject first, IChemObject second) {\n        if (!(first instanceof IAtom && second instanceof IAtom)) {\n            return null;\n        }\n        IAtom firstElem = (IAtom) first;\n        IAtom secondElem = (IAtom) second;\n        ChemObjectDifference totalDiff = new ChemObjectDifference(\"AtomDiff\");\n        totalDiff.addChild(IntegerDifference.construct(\"H\", firstElem.getImplicitHydrogenCount(),\n                secondElem.getImplicitHydrogenCount()));\n        totalDiff\n                .addChild(IntegerDifference.construct(\"SP\", firstElem.getStereoParity(), secondElem.getStereoParity()));\n        totalDiff.addChild(Point2dDifference.construct(\"2D\", firstElem.getPoint2d(), secondElem.getPoint2d()));\n        totalDiff.addChild(Point3dDifference.construct(\"3D\", firstElem.getPoint3d(), secondElem.getPoint3d()));\n        totalDiff.addChild(Point3dDifference.construct(\"F3D\", firstElem.getFractionalPoint3d(),\n                secondElem.getFractionalPoint3d()));\n        totalDiff.addChild(DoubleDifference.construct(\"C\", firstElem.getCharge(), secondElem.getCharge()));\n        totalDiff.addChild(AtomTypeDiff.difference(first, second));\n        if (totalDiff.childCount() > 0) {\n            return totalDiff;\n        } else {\n            return null;\n        }\n    }", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false, "invocations": ["addChild", "construct", "getImplicitHydrogenCount", "getImplicitHydrogenCount", "addChild", "construct", "getStereoParity", "getStereoParity", "addChild", "construct", "getPoint2d", "getPoint2d", "addChild", "construct", "getPoint3d", "getPoint3d", "addChild", "construct", "getFractionalPoint3d", "getFractionalPoint3d", "addChild", "construct", "getCharge", "getCharge", "addChild", "difference", "childCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}