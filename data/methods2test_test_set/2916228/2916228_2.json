{"test_class": {"identifier": "PropoidTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "propoid-core/src/test/java/propoid/core/PropoidTest.java"}, "test_case": {"identifier": "testAspects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAspects() throws Exception {\n\t\tFoo foo = new Foo();\n\n\t\tTestAspect aspect = new TestAspect(foo);\n\n\t\taspect.reset();\n\t\tfoo.bar.setInternal(\"BAR\");\n\t\tassertFalse(aspect.setCalled);\n\t\tfoo.bar.getInternal();\n\t\tassertFalse(aspect.getCalled);\n\n\t\taspect.reset();\n\t\tfoo.bar.set(\"BAR\");\n\t\tassertTrue(aspect.setCalled);\n\t\tfoo.bar.get();\n\t\tassertTrue(aspect.getCalled);\n\n\t\tIterator<Aspect> aspects = foo.aspects().iterator();\n\t\tassertTrue(aspects.hasNext());\n\t\tassertEquals(aspect, aspects.next());\n\t\taspects.remove();\n\t\tassertTrue(aspects.hasNext());\n\t\taspects.next();\n\t\tassertFalse(aspects.hasNext());\n\n\t\taspect.reset();\n\t\tfoo.bar.set(\"BAR\");\n\t\tassertFalse(aspect.setCalled);\n\t\tfoo.bar.get();\n\t\tassertFalse(aspect.getCalled);\n\t}", "signature": "void testAspects()", "full_signature": "@Test public void testAspects()", "class_method_signature": "PropoidTest.testAspects()", "testcase": true, "constructor": false, "invocations": ["reset", "setInternal", "assertFalse", "getInternal", "assertFalse", "reset", "set", "assertTrue", "get", "assertTrue", "iterator", "aspects", "assertTrue", "hasNext", "assertEquals", "next", "remove", "assertTrue", "hasNext", "next", "assertFalse", "hasNext", "reset", "set", "assertFalse", "get", "assertFalse"]}, "focal_class": {"identifier": "Propoid", "superclass": "", "interfaces": "implements Aspect", "fields": [{"original_string": "private static Map<Class<? extends Propoid>, Meta> metas = new HashMap<Class<? extends Propoid>, Meta>();", "modifier": "private static", "type": "Map<Class<? extends Propoid>, Meta>", "declarator": "metas = new HashMap<Class<? extends Propoid>, Meta>()", "var_name": "metas"}, {"original_string": "Aspect aspect = this;", "modifier": "", "type": "Aspect", "declarator": "aspect = this", "var_name": "aspect"}, {"original_string": "Property<?> property;", "modifier": "", "type": "Property<?>", "declarator": "property", "var_name": "property"}], "methods": [{"identifier": "property", "parameters": "()", "modifiers": "protected", "return": "Property<A>", "signature": "Property<A> property()", "full_signature": "protected Property<A> property()", "class_method_signature": "Propoid.property()", "testcase": false, "constructor": false}, {"identifier": "onGet", "parameters": "(Property<T> property, T value)", "modifiers": "public", "return": "T", "signature": "T onGet(Property<T> property, T value)", "full_signature": "public T onGet(Property<T> property, T value)", "class_method_signature": "Propoid.onGet(Property<T> property, T value)", "testcase": false, "constructor": false}, {"identifier": "onSet", "parameters": "(Property<T> property, T value)", "modifiers": "public", "return": "T", "signature": "T onSet(Property<T> property, T value)", "full_signature": "public T onSet(Property<T> property, T value)", "class_method_signature": "Propoid.onSet(Property<T> property, T value)", "testcase": false, "constructor": false}, {"identifier": "meta", "parameters": "()", "modifiers": "public", "return": "Meta", "signature": "Meta meta()", "full_signature": "public Meta meta()", "class_method_signature": "Propoid.meta()", "testcase": false, "constructor": false}, {"identifier": "aspects", "parameters": "()", "modifiers": "public", "return": "Iterable<Aspect>", "signature": "Iterable<Aspect> aspects()", "full_signature": "public Iterable<Aspect> aspects()", "class_method_signature": "Propoid.aspects()", "testcase": false, "constructor": false}, {"identifier": "properties", "parameters": "()", "modifiers": "public", "return": "Iterable<Property<?>>", "signature": "Iterable<Property<?>> properties()", "full_signature": "public Iterable<Property<?>> properties()", "class_method_signature": "Propoid.properties()", "testcase": false, "constructor": false}, {"identifier": "getMeta", "parameters": "(Propoid propoid)", "modifiers": "static", "return": "Meta", "signature": "Meta getMeta(Propoid propoid)", "full_signature": "static Meta getMeta(Propoid propoid)", "class_method_signature": "Propoid.getMeta(Propoid propoid)", "testcase": false, "constructor": false}], "file": "propoid-core/src/main/java/propoid/core/Propoid.java"}, "focal_method": {"identifier": "aspects", "parameters": "()", "modifiers": "public", "return": "Iterable<Aspect>", "body": "public Iterable<Aspect> aspects() {\n\t\treturn new Iterable<Aspect>() {\n\t\t\t@Override\n\t\t\tpublic Iterator<Aspect> iterator() {\n\t\t\t\treturn new AspectIterator();\n\t\t\t}\n\t\t};\n\t}", "signature": "Iterable<Aspect> aspects()", "full_signature": "public Iterable<Aspect> aspects()", "class_method_signature": "Propoid.aspects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2916228, "url": "https://github.com/svenmeier/propoid", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 475, "license": "licensed"}}