{"test_class": {"identifier": "ImmutableJsonPointerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonKey KNOWN_KEY_NAME = JsonFactory.newKey(\"foo\");", "modifier": "private static final", "type": "JsonKey", "declarator": "KNOWN_KEY_NAME = JsonFactory.newKey(\"foo\")", "var_name": "KNOWN_KEY_NAME"}], "file": "json/src/test/java/org/eclipse/ditto/json/ImmutableJsonPointerTest.java"}, "test_case": {"identifier": "tryToParseNullString", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void tryToParseNullString() {\n        ImmutableJsonPointer.ofParsed(null);\n    }", "signature": "void tryToParseNullString()", "full_signature": "@Test(expected = NullPointerException.class) public void tryToParseNullString()", "class_method_signature": "ImmutableJsonPointerTest.tryToParseNullString()", "testcase": true, "constructor": false, "invocations": ["ofParsed"]}, "focal_class": {"identifier": "ImmutableJsonPointer", "superclass": "", "interfaces": "implements JsonPointer", "fields": [{"original_string": "private static final Pattern DOUBLE_SLASH_PATTERN = Pattern.compile(\"//\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOUBLE_SLASH_PATTERN = Pattern.compile(\"//\")", "var_name": "DOUBLE_SLASH_PATTERN"}, {"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}, {"original_string": "private static final String SLASH_REGEX = \"/(?!/)\";", "modifier": "private static final", "type": "String", "declarator": "SLASH_REGEX = \"/(?!/)\"", "var_name": "SLASH_REGEX"}, {"original_string": "private static final Pattern SINGLE_SLASH_REGEX_PATTERN = Pattern.compile(SLASH_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "SINGLE_SLASH_REGEX_PATTERN = Pattern.compile(SLASH_REGEX)", "var_name": "SINGLE_SLASH_REGEX_PATTERN"}, {"original_string": "private static final Pattern ESCAPED_TILDE_PATTERN = Pattern.compile(\"~0\");", "modifier": "private static final", "type": "Pattern", "declarator": "ESCAPED_TILDE_PATTERN = Pattern.compile(\"~0\")", "var_name": "ESCAPED_TILDE_PATTERN"}, {"original_string": "private static final Pattern DECODED_TILDE_PATTERN = Pattern.compile(\"~\");", "modifier": "private static final", "type": "Pattern", "declarator": "DECODED_TILDE_PATTERN = Pattern.compile(\"~\")", "var_name": "DECODED_TILDE_PATTERN"}, {"original_string": "private static final ImmutableJsonPointer EMPTY = new ImmutableJsonPointer(Collections.emptyList());", "modifier": "private static final", "type": "ImmutableJsonPointer", "declarator": "EMPTY = new ImmutableJsonPointer(Collections.emptyList())", "var_name": "EMPTY"}, {"original_string": "private final List<JsonKey> jsonKeyHierarchy;", "modifier": "private final", "type": "List<JsonKey>", "declarator": "jsonKeyHierarchy", "var_name": "jsonKeyHierarchy"}], "methods": [{"identifier": "ImmutableJsonPointer", "parameters": "(final List<JsonKey> theJsonKeys)", "modifiers": "private", "return": "", "signature": " ImmutableJsonPointer(final List<JsonKey> theJsonKeys)", "full_signature": "private  ImmutableJsonPointer(final List<JsonKey> theJsonKeys)", "class_method_signature": "ImmutableJsonPointer.ImmutableJsonPointer(final List<JsonKey> theJsonKeys)", "testcase": false, "constructor": true}, {"identifier": "empty", "parameters": "()", "modifiers": "public static", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer empty()", "full_signature": "public static ImmutableJsonPointer empty()", "class_method_signature": "ImmutableJsonPointer.empty()", "testcase": false, "constructor": false}, {"identifier": "ofParsed", "parameters": "(final CharSequence slashDelimitedCharSequence)", "modifiers": "public static", "return": "JsonPointer", "signature": "JsonPointer ofParsed(final CharSequence slashDelimitedCharSequence)", "full_signature": "public static JsonPointer ofParsed(final CharSequence slashDelimitedCharSequence)", "class_method_signature": "ImmutableJsonPointer.ofParsed(final CharSequence slashDelimitedCharSequence)", "testcase": false, "constructor": false}, {"identifier": "decodeTilde", "parameters": "(final CharSequence keyString)", "modifiers": "private static", "return": "String", "signature": "String decodeTilde(final CharSequence keyString)", "full_signature": "private static String decodeTilde(final CharSequence keyString)", "class_method_signature": "ImmutableJsonPointer.decodeTilde(final CharSequence keyString)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final List<JsonKey> jsonKeyHierarchy)", "modifiers": "private static", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer newInstance(final List<JsonKey> jsonKeyHierarchy)", "full_signature": "private static ImmutableJsonPointer newInstance(final List<JsonKey> jsonKeyHierarchy)", "class_method_signature": "ImmutableJsonPointer.newInstance(final List<JsonKey> jsonKeyHierarchy)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final JsonKey rootLevel, final JsonKey... subLevels)", "modifiers": "public static", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer of(final JsonKey rootLevel, final JsonKey... subLevels)", "full_signature": "public static ImmutableJsonPointer of(final JsonKey rootLevel, final JsonKey... subLevels)", "class_method_signature": "ImmutableJsonPointer.of(final JsonKey rootLevel, final JsonKey... subLevels)", "testcase": false, "constructor": false}, {"identifier": "checkRootLevel", "parameters": "(final JsonKey rootLevel)", "modifiers": "private static", "return": "void", "signature": "void checkRootLevel(final JsonKey rootLevel)", "full_signature": "private static void checkRootLevel(final JsonKey rootLevel)", "class_method_signature": "ImmutableJsonPointer.checkRootLevel(final JsonKey rootLevel)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final JsonKey rootLevel, final JsonPointer subPointer)", "modifiers": "static", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer of(final JsonKey rootLevel, final JsonPointer subPointer)", "full_signature": "static ImmutableJsonPointer of(final JsonKey rootLevel, final JsonPointer subPointer)", "class_method_signature": "ImmutableJsonPointer.of(final JsonKey rootLevel, final JsonPointer subPointer)", "testcase": false, "constructor": false}, {"identifier": "checkSubPointer", "parameters": "(final Object subPointer)", "modifiers": "private static", "return": "void", "signature": "void checkSubPointer(final Object subPointer)", "full_signature": "private static void checkSubPointer(final Object subPointer)", "class_method_signature": "ImmutableJsonPointer.checkSubPointer(final Object subPointer)", "testcase": false, "constructor": false}, {"identifier": "addLeaf", "parameters": "(final JsonKey key)", "modifiers": "@Override public", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer addLeaf(final JsonKey key)", "full_signature": "@Override public ImmutableJsonPointer addLeaf(final JsonKey key)", "class_method_signature": "ImmutableJsonPointer.addLeaf(final JsonKey key)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final JsonPointer subPointer)", "modifiers": "@Override public", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer append(final JsonPointer subPointer)", "full_signature": "@Override public ImmutableJsonPointer append(final JsonPointer subPointer)", "class_method_signature": "ImmutableJsonPointer.append(final JsonPointer subPointer)", "testcase": false, "constructor": false}, {"identifier": "getLevelCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLevelCount()", "full_signature": "@Override public int getLevelCount()", "class_method_signature": "ImmutableJsonPointer.getLevelCount()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutableJsonPointer.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int level)", "modifiers": "@Override public", "return": "Optional<JsonKey>", "signature": "Optional<JsonKey> get(final int level)", "full_signature": "@Override public Optional<JsonKey> get(final int level)", "class_method_signature": "ImmutableJsonPointer.get(final int level)", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "Optional<JsonKey>", "signature": "Optional<JsonKey> getRoot()", "full_signature": "@Override public Optional<JsonKey> getRoot()", "class_method_signature": "ImmutableJsonPointer.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getLeaf", "parameters": "()", "modifiers": "@Override public", "return": "Optional<JsonKey>", "signature": "Optional<JsonKey> getLeaf()", "full_signature": "@Override public Optional<JsonKey> getLeaf()", "class_method_signature": "ImmutableJsonPointer.getLeaf()", "testcase": false, "constructor": false}, {"identifier": "getSubPointer", "parameters": "(final int level)", "modifiers": "@SuppressWarnings(\"squid:S1166\") @Override public", "return": "Optional<JsonPointer>", "signature": "Optional<JsonPointer> getSubPointer(final int level)", "full_signature": "@SuppressWarnings(\"squid:S1166\") @Override public Optional<JsonPointer> getSubPointer(final int level)", "class_method_signature": "ImmutableJsonPointer.getSubPointer(final int level)", "testcase": false, "constructor": false}, {"identifier": "getPrefixPointer", "parameters": "(final int level)", "modifiers": "@Override public", "return": "Optional<JsonPointer>", "signature": "Optional<JsonPointer> getPrefixPointer(final int level)", "full_signature": "@Override public Optional<JsonPointer> getPrefixPointer(final int level)", "class_method_signature": "ImmutableJsonPointer.getPrefixPointer(final int level)", "testcase": false, "constructor": false}, {"identifier": "cutLeaf", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableJsonPointer", "signature": "ImmutableJsonPointer cutLeaf()", "full_signature": "@Override public ImmutableJsonPointer cutLeaf()", "class_method_signature": "ImmutableJsonPointer.cutLeaf()", "testcase": false, "constructor": false}, {"identifier": "nextLevel", "parameters": "()", "modifiers": "@Override public", "return": "JsonPointer", "signature": "JsonPointer nextLevel()", "full_signature": "@Override public JsonPointer nextLevel()", "class_method_signature": "ImmutableJsonPointer.nextLevel()", "testcase": false, "constructor": false}, {"identifier": "toFieldSelector", "parameters": "()", "modifiers": "@Override public", "return": "JsonFieldSelector", "signature": "JsonFieldSelector toFieldSelector()", "full_signature": "@Override public JsonFieldSelector toFieldSelector()", "class_method_signature": "ImmutableJsonPointer.toFieldSelector()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<JsonKey>", "signature": "Iterator<JsonKey> iterator()", "full_signature": "@Override public Iterator<JsonKey> iterator()", "class_method_signature": "ImmutableJsonPointer.iterator()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableJsonPointer.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableJsonPointer.hashCode()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "ImmutableJsonPointer.length()", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(final int index)", "modifiers": "@Override public", "return": "char", "signature": "char charAt(final int index)", "full_signature": "@Override public char charAt(final int index)", "class_method_signature": "ImmutableJsonPointer.charAt(final int index)", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(final int start, final int end)", "modifiers": "@Override public", "return": "CharSequence", "signature": "CharSequence subSequence(final int start, final int end)", "full_signature": "@Override public CharSequence subSequence(final int start, final int end)", "class_method_signature": "ImmutableJsonPointer.subSequence(final int start, final int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableJsonPointer.toString()", "testcase": false, "constructor": false}, {"identifier": "escapeTilde", "parameters": "(final JsonKey jsonKey)", "modifiers": "private static", "return": "String", "signature": "String escapeTilde(final JsonKey jsonKey)", "full_signature": "private static String escapeTilde(final JsonKey jsonKey)", "class_method_signature": "ImmutableJsonPointer.escapeTilde(final JsonKey jsonKey)", "testcase": false, "constructor": false}], "file": "json/src/main/java/org/eclipse/ditto/json/ImmutableJsonPointer.java"}, "focal_method": {"identifier": "ofParsed", "parameters": "(final CharSequence slashDelimitedCharSequence)", "modifiers": "public static", "return": "JsonPointer", "body": "public static JsonPointer ofParsed(final CharSequence slashDelimitedCharSequence) {\n        requireNonNull(slashDelimitedCharSequence, \"The JSON pointer character sequence must not be null!\");\n\n        final JsonPointer result;\n\n        if (JsonPointer.class.isAssignableFrom(slashDelimitedCharSequence.getClass())) {\n            result = (JsonPointer) slashDelimitedCharSequence;\n        } else if (JsonKey.class.isAssignableFrom(slashDelimitedCharSequence.getClass())) {\n            result = newInstance(Collections.singletonList(((JsonKey) slashDelimitedCharSequence)));\n        } else if (0 == slashDelimitedCharSequence.length()) {\n            result = empty();\n        } else if (DOUBLE_SLASH_PATTERN.matcher(slashDelimitedCharSequence).find()) {\n            throw JsonPointerInvalidException.newBuilderForConsecutiveSlashes(slashDelimitedCharSequence)\n                    .build();\n        } else {\n            final List<JsonKey> jsonKeys = Stream.of(SINGLE_SLASH_REGEX_PATTERN.split(slashDelimitedCharSequence))\n                    .filter(keyName -> !keyName.isEmpty()) // ignore empty segments\n                    .map(ImmutableJsonPointer::decodeTilde)\n                    .map(JsonFactory::newKey)\n                    .collect(toList());\n\n            result = newInstance(jsonKeys);\n        }\n\n        return result;\n    }", "signature": "JsonPointer ofParsed(final CharSequence slashDelimitedCharSequence)", "full_signature": "public static JsonPointer ofParsed(final CharSequence slashDelimitedCharSequence)", "class_method_signature": "ImmutableJsonPointer.ofParsed(final CharSequence slashDelimitedCharSequence)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "isAssignableFrom", "getClass", "isAssignableFrom", "getClass", "newInstance", "singletonList", "length", "empty", "find", "matcher", "build", "newBuilderForConsecutiveSlashes", "collect", "map", "map", "filter", "of", "split", "isEmpty", "toList", "newInstance"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}