{"test_class": {"identifier": "HistogramTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(HistogramTest.class);", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(HistogramTest.class)", "var_name": "logger"}, {"original_string": "private Inflector inflector = Inflector.getInstance();", "modifier": "private", "type": "Inflector", "declarator": "inflector = Inflector.getInstance()", "var_name": "inflector"}], "file": "modeshape-common/src/test/java/org/modeshape/common/statistic/HistogramTest.java"}, "test_case": {"identifier": "shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges() {\n        Float[] values = {3.0f, 1.0f, 2.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 9.999f};\n        Histogram<Float> gram = new Histogram<Float>(new FloatOperations(), values);\n        gram.setBucketCount(5);\n        // HistogramTest.writeHistogramToLog(this.logger, gram, 0,\n        // \"shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges\");\n        assertBucketValueCount(gram, 2, 2, 2, 2, 2);\n    }", "signature": "void shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges()", "full_signature": "@Test public void shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges()", "class_method_signature": "HistogramTest.shouldCorrectlyPlaceAnOddNumberOfFloatValuesIntoSmallerNumberOfBucketsWithMinimumRanges()", "testcase": true, "constructor": false, "invocations": ["setBucketCount", "assertBucketValueCount"]}, "focal_class": {"identifier": "Histogram", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_BUCKET_COUNT = 10;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BUCKET_COUNT = 10", "var_name": "DEFAULT_BUCKET_COUNT"}, {"original_string": "public static final int DEFAULT_SIGNIFICANT_FIGURES = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SIGNIFICANT_FIGURES = 4", "var_name": "DEFAULT_SIGNIFICANT_FIGURES"}, {"original_string": "protected final MathOperations<T> math;", "modifier": "protected final", "type": "MathOperations<T>", "declarator": "math", "var_name": "math"}, {"original_string": "protected final List<T> values;", "modifier": "protected final", "type": "List<T>", "declarator": "values", "var_name": "values"}, {"original_string": "private int bucketCount = DEFAULT_BUCKET_COUNT;", "modifier": "private", "type": "int", "declarator": "bucketCount = DEFAULT_BUCKET_COUNT", "var_name": "bucketCount"}, {"original_string": "private int significantFigures = DEFAULT_SIGNIFICANT_FIGURES;", "modifier": "private", "type": "int", "declarator": "significantFigures = DEFAULT_SIGNIFICANT_FIGURES", "var_name": "significantFigures"}, {"original_string": "private BigDecimal bucketWidth;", "modifier": "private", "type": "BigDecimal", "declarator": "bucketWidth", "var_name": "bucketWidth"}, {"original_string": "private LinkedList<Bucket> buckets;", "modifier": "private", "type": "LinkedList<Bucket>", "declarator": "buckets", "var_name": "buckets"}, {"original_string": "private BucketingStrategy actualValueStrategy = new DefaultBucketingStrategy();", "modifier": "private", "type": "BucketingStrategy", "declarator": "actualValueStrategy = new DefaultBucketingStrategy()", "var_name": "actualValueStrategy"}, {"original_string": "private BucketingStrategy bucketingStrategy = actualValueStrategy;", "modifier": "private", "type": "BucketingStrategy", "declarator": "bucketingStrategy = actualValueStrategy", "var_name": "bucketingStrategy"}], "methods": [{"identifier": "Histogram", "parameters": "( MathOperations<T> operations,\n                      List<T> values )", "modifiers": "public", "return": "", "signature": " Histogram( MathOperations<T> operations,\n                      List<T> values )", "full_signature": "public  Histogram( MathOperations<T> operations,\n                      List<T> values )", "class_method_signature": "Histogram.Histogram( MathOperations<T> operations,\n                      List<T> values )", "testcase": false, "constructor": true}, {"identifier": "Histogram", "parameters": "( MathOperations<T> operations, T... values )", "modifiers": "@SafeVarargs public", "return": "", "signature": " Histogram( MathOperations<T> operations, T... values )", "full_signature": "@SafeVarargs public  Histogram( MathOperations<T> operations, T... values )", "class_method_signature": "Histogram.Histogram( MathOperations<T> operations, T... values )", "testcase": false, "constructor": true}, {"identifier": "getStrategy", "parameters": "()", "modifiers": "public", "return": "BucketingStrategy", "signature": "BucketingStrategy getStrategy()", "full_signature": "public BucketingStrategy getStrategy()", "class_method_signature": "Histogram.getStrategy()", "testcase": false, "constructor": false}, {"identifier": "getMathOperations", "parameters": "()", "modifiers": "public", "return": "MathOperations<T>", "signature": "MathOperations<T> getMathOperations()", "full_signature": "public MathOperations<T> getMathOperations()", "class_method_signature": "Histogram.getMathOperations()", "testcase": false, "constructor": false}, {"identifier": "setStrategy", "parameters": "( double median,\n                             double standardDeviation,\n                             int sigma )", "modifiers": "public", "return": "void", "signature": "void setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "full_signature": "public void setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "class_method_signature": "Histogram.setStrategy( double median,\n                             double standardDeviation,\n                             int sigma )", "testcase": false, "constructor": false}, {"identifier": "setStrategy", "parameters": "( T minimum,\n                             T maximum )", "modifiers": "public", "return": "void", "signature": "void setStrategy( T minimum,\n                             T maximum )", "full_signature": "public void setStrategy( T minimum,\n                             T maximum )", "class_method_signature": "Histogram.setStrategy( T minimum,\n                             T maximum )", "testcase": false, "constructor": false}, {"identifier": "setStrategyToDefault", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setStrategyToDefault()", "full_signature": "public void setStrategyToDefault()", "class_method_signature": "Histogram.setStrategyToDefault()", "testcase": false, "constructor": false}, {"identifier": "getSignificantFigures", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSignificantFigures()", "full_signature": "public int getSignificantFigures()", "class_method_signature": "Histogram.getSignificantFigures()", "testcase": false, "constructor": false}, {"identifier": "setSignificantFigures", "parameters": "( int significantFigures )", "modifiers": "public", "return": "Histogram<T>", "signature": "Histogram<T> setSignificantFigures( int significantFigures )", "full_signature": "public Histogram<T> setSignificantFigures( int significantFigures )", "class_method_signature": "Histogram.setSignificantFigures( int significantFigures )", "testcase": false, "constructor": false}, {"identifier": "getBucketCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBucketCount()", "full_signature": "public int getBucketCount()", "class_method_signature": "Histogram.getBucketCount()", "testcase": false, "constructor": false}, {"identifier": "setBucketCount", "parameters": "( int count )", "modifiers": "public", "return": "Histogram<T>", "signature": "Histogram<T> setBucketCount( int count )", "full_signature": "public Histogram<T> setBucketCount( int count )", "class_method_signature": "Histogram.setBucketCount( int count )", "testcase": false, "constructor": false}, {"identifier": "getBuckets", "parameters": "()", "modifiers": "public", "return": "List<Bucket>", "signature": "List<Bucket> getBuckets()", "full_signature": "public List<Bucket> getBuckets()", "class_method_signature": "Histogram.getBuckets()", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void compute()", "full_signature": "protected void compute()", "class_method_signature": "Histogram.compute()", "testcase": false, "constructor": false}, {"identifier": "getTotalNumberOfValues", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTotalNumberOfValues()", "full_signature": "public long getTotalNumberOfValues()", "class_method_signature": "Histogram.getTotalNumberOfValues()", "testcase": false, "constructor": false}, {"identifier": "getMaximumPercentage", "parameters": "()", "modifiers": "protected", "return": "float", "signature": "float getMaximumPercentage()", "full_signature": "protected float getMaximumPercentage()", "class_method_signature": "Histogram.getMaximumPercentage()", "testcase": false, "constructor": false}, {"identifier": "getMaximumCount", "parameters": "()", "modifiers": "protected", "return": "long", "signature": "long getMaximumCount()", "full_signature": "protected long getMaximumCount()", "class_method_signature": "Histogram.getMaximumCount()", "testcase": false, "constructor": false}, {"identifier": "getTextGraph", "parameters": "( int maxBarLength )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getTextGraph( int maxBarLength )", "full_signature": "public List<String> getTextGraph( int maxBarLength )", "class_method_signature": "Histogram.getTextGraph( int maxBarLength )", "testcase": false, "constructor": false}, {"identifier": "getBucketBoundaries", "parameters": "( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "modifiers": "protected static", "return": "List<T>", "signature": "List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "full_signature": "protected static List<T> getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "class_method_signature": "Histogram.getBucketBoundaries( MathOperations<T> math,\n                                                      T lowerBound,\n                                                      T upperBound,\n                                                      T actualMinimum,\n                                                      T actualMaximum,\n                                                      int bucketCount,\n                                                      int bucketWidthSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/statistic/Histogram.java"}, "focal_method": {"identifier": "setBucketCount", "parameters": "( int count )", "modifiers": "public", "return": "Histogram<T>", "body": "public Histogram<T> setBucketCount( int count ) {\n        if (count != this.bucketCount) {\n            this.bucketCount = count;\n            this.bucketWidth = null;\n            this.buckets.clear();\n        }\n        return this;\n    }", "signature": "Histogram<T> setBucketCount( int count )", "full_signature": "public Histogram<T> setBucketCount( int count )", "class_method_signature": "Histogram.setBucketCount( int count )", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}