{"test_class": {"identifier": "PosixFileNameComparatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Comparator<String> posixComparator = new PosixFileNameComparator();", "modifier": "private", "type": "Comparator<String>", "declarator": "posixComparator = new PosixFileNameComparator()", "var_name": "posixComparator"}], "file": "aesh/src/test/java/org/aesh/comparators/PosixFileNameComparatorTest.java"}, "test_case": {"identifier": "testSame", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSame() {\n        String s1 = \"abcde\";\n        String s2 = \"abcde\";\n\n        assertTrue(s1 + \" should equals \" + s2, posixComparator.compare(s1, s2) == 0);\n    }", "signature": "void testSame()", "full_signature": "@Test public void testSame()", "class_method_signature": "PosixFileNameComparatorTest.testSame()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "compare"]}, "focal_class": {"identifier": "PosixFileNameComparator", "superclass": "", "interfaces": "implements Comparator<String>", "fields": [], "methods": [{"identifier": "compare", "parameters": "(String o1, String o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(String o1, String o2)", "full_signature": "@Override public int compare(String o1, String o2)", "class_method_signature": "PosixFileNameComparator.compare(String o1, String o2)", "testcase": false, "constructor": false}], "file": "aesh/src/main/java/org/aesh/comparators/PosixFileNameComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(String o1, String o2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(String o1, String o2) {\n        String o1WithoutDot = o1;\n        String o2WithoutDot = o2;\n\n        if (o1.indexOf(AeshConstants.DOT) == 0) {\n            o1WithoutDot = o1.substring(1);\n        }\n        if (o2.indexOf(AeshConstants.DOT) == 0) {\n            o2WithoutDot = o2.substring(1);\n        }\n\n        // if names are same when removed dot, make without dot first\n        // if names are same when ignored case, make lower case first (by default compareTo returns upper case first)\n        if (o1WithoutDot.compareTo(o2WithoutDot) == 0) {\n            return o2.compareTo(o1);\n        } else if (o1WithoutDot.compareToIgnoreCase(o2WithoutDot) == 0) {\n            return o2WithoutDot.compareTo(o1WithoutDot);\n        } else {\n            return o1WithoutDot.compareToIgnoreCase(o2WithoutDot);\n        }\n    }", "signature": "int compare(String o1, String o2)", "full_signature": "@Override public int compare(String o1, String o2)", "class_method_signature": "PosixFileNameComparator.compare(String o1, String o2)", "testcase": false, "constructor": false, "invocations": ["indexOf", "substring", "indexOf", "substring", "compareTo", "compareTo", "compareToIgnoreCase", "compareTo", "compareToIgnoreCase"]}, "repository": {"repo_id": 2280644, "url": "https://github.com/aeshell/aesh", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 83, "size": 6068, "license": "licensed"}}