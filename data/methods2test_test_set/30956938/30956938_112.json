{"test_class": {"identifier": "ExcelSpreadsheetReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpreadsheetReader spreadsheetReader;", "modifier": "private", "type": "SpreadsheetReader", "declarator": "spreadsheetReader", "var_name": "spreadsheetReader"}, {"original_string": "private String[] testFiles = new String[] {\"/test-spreadsheet.xlsx\" , \"/test-spreadsheet.xls\"};", "modifier": "private", "type": "String[]", "declarator": "testFiles = new String[] {\"/test-spreadsheet.xlsx\" , \"/test-spreadsheet.xls\"}", "var_name": "testFiles"}], "file": "taverna-spreadsheet-import-activity/src/test/java/org/apache/taverna/activities/spreadsheet/ExcelSpreadsheetReaderTest.java"}, "test_case": {"identifier": "testReadInvalidFormatException", "parameters": "()", "modifiers": "@Test(expected=SpreadsheetReadException.class) public", "return": "void", "body": "@Test(expected=SpreadsheetReadException.class)\n\tpublic void testReadInvalidFormatException() throws Exception {\n\t\tspreadsheetReader.read(getClass().getResourceAsStream(\"/test-spreadsheet.ods\"), new Range(0,1), new Range(0,1), false, new SpreadsheetRowProcessor() {\n\t\t\tpublic void processRow(int rowIndex, SortedMap<Integer, String> rowData) {\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}", "signature": "void testReadInvalidFormatException()", "full_signature": "@Test(expected=SpreadsheetReadException.class) public void testReadInvalidFormatException()", "class_method_signature": "ExcelSpreadsheetReaderTest.testReadInvalidFormatException()", "testcase": true, "constructor": false, "invocations": ["read", "getResourceAsStream", "getClass"]}, "focal_class": {"identifier": "ExcelSpreadsheetReader", "superclass": "", "interfaces": "implements SpreadsheetReader", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(ExcelSpreadsheetReader.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(ExcelSpreadsheetReader.class)", "var_name": "logger"}], "methods": [{"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ExcelSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false}, {"identifier": "getCellValue", "parameters": "(Cell cell, DataFormatter dataFormatter)", "modifiers": "private", "return": "String", "signature": "String getCellValue(Cell cell, DataFormatter dataFormatter)", "full_signature": "private String getCellValue(Cell cell, DataFormatter dataFormatter)", "class_method_signature": "ExcelSpreadsheetReader.getCellValue(Cell cell, DataFormatter dataFormatter)", "testcase": false, "constructor": false}], "file": "taverna-spreadsheet-import-activity/src/main/java/org/apache/taverna/activities/spreadsheet/ExcelSpreadsheetReader.java"}, "focal_method": {"identifier": "read", "parameters": "(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "modifiers": "public", "return": "void", "body": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)\n\t\t\tthrows SpreadsheetReadException {\n\t\tWorkbook workbook;\n\t\ttry {\n\t\t\tworkbook = WorkbookFactory.create(inputStream);\n\t\t} catch (InvalidFormatException e) {\n\t\t\tthrow new SpreadsheetReadException(\n\t\t\t\t\t\"The file does not have a compatible spreadsheet format\", e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new SpreadsheetReadException(\"The spreadsheet stream could not be read\", e);\n\t\t}\n\n\t\tDataFormatter dataFormatter = new DataFormatter();\n\t\t\n\t\tworkbook.setMissingCellPolicy(Row.CREATE_NULL_AS_BLANK);\n\t\tSheet sheet = workbook.getSheetAt(0);\n\n\t\tif (rowRange.getEnd() < 0) {\n\t\t\trowRange.setEnd(sheet.getLastRowNum());\n\t\t\tlogger.debug(\"No end of row range specified, setting to \" + rowRange.getEnd());\n\t\t}\n\n\t\tSortedMap<Integer, String> currentDataRow = new TreeMap<Integer, String>();\n\n\t\tfor (int rowIndex = rowRange.getStart(); rowIndex <= rowRange.getEnd(); rowIndex++) {\n\t\t\tboolean blankRow = true;\n\t\t\tif (rowRange.contains(rowIndex)) {\n\t\t\t\tRow row = sheet.getRow(rowIndex);\n\t\t\t\tfor (int columnIndex = columnRange.getStart(); columnIndex <= columnRange.getEnd(); columnIndex++) {\n\t\t\t\t\tif (columnRange.contains(columnIndex)) {\n\t\t\t\t\t\tString value = null;\n\t\t\t\t\t\tif (row != null) {\n\t\t\t\t\t\t\tCell cell = row.getCell(columnIndex);\n\t\t\t\t\t\t\tif (cell != null) {\n\t\t\t\t\t\t\t\tvalue = getCellValue(cell, dataFormatter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\tblankRow = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentDataRow.put(columnIndex, value);\n\t\t\t\t\t\tif (columnIndex == columnRange.getEnd()) {\n\t\t\t\t\t\t\tif (!ignoreBlankRows || !blankRow) {\n\t\t\t\t\t\t\t\trowProcessor.processRow(rowIndex, currentDataRow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrentDataRow = new TreeMap<Integer, String>();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}", "signature": "void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "full_signature": "public void read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "class_method_signature": "ExcelSpreadsheetReader.read(InputStream inputStream, Range rowRange, Range columnRange, boolean ignoreBlankRows, SpreadsheetRowProcessor rowProcessor)", "testcase": false, "constructor": false, "invocations": ["create", "setMissingCellPolicy", "getSheetAt", "getEnd", "setEnd", "getLastRowNum", "debug", "getEnd", "getStart", "getEnd", "contains", "getRow", "getStart", "getEnd", "contains", "getCell", "getCellValue", "put", "getEnd", "processRow"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}