{"test_class": {"identifier": "ListBasedMapCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Codec<List<Map.Entry<String,Integer>>> listCodec;", "modifier": "@Mock\n    private", "type": "Codec<List<Map.Entry<String,Integer>>>", "declarator": "listCodec", "var_name": "listCodec"}, {"original_string": "@Mock\n    private Map.Entry<String,Integer> item1;", "modifier": "@Mock\n    private", "type": "Map.Entry<String,Integer>", "declarator": "item1", "var_name": "item1"}, {"original_string": "@Mock\n    private Map.Entry<String,Integer> item2;", "modifier": "@Mock\n    private", "type": "Map.Entry<String,Integer>", "declarator": "item2", "var_name": "item2"}, {"original_string": "@Mock\n    private BitBuffer buffer;", "modifier": "@Mock\n    private", "type": "BitBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "@Mock\n    private Builder builder;", "modifier": "@Mock\n    private", "type": "Builder", "declarator": "builder", "var_name": "builder"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/ListBasedMapCodecTest.java"}, "test_case": {"identifier": "shouldWorkWithZeroSizeList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWorkWithZeroSizeList() throws DecodingException {\n        when(listCodec.decode(any(BitBuffer.class), any(Resolver.class), any(Builder.class)))\n                .thenReturn(Collections.<Map.Entry<String, Integer>>emptyList());\n        ListBasedMapCodec<String,Integer> codec = new ListBasedMapCodec<String, Integer>(listCodec);\n        Map<String, Integer> map = codec.decode(buffer, resolver, builder);\n        assertThat(map.size(), is(0));\n        verify(listCodec).decode(buffer, resolver, builder);\n        Mockito.verifyNoMoreInteractions(listCodec);\n    }", "signature": "void shouldWorkWithZeroSizeList()", "full_signature": "@Test public void shouldWorkWithZeroSizeList()", "class_method_signature": "ListBasedMapCodecTest.shouldWorkWithZeroSizeList()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "decode", "any", "any", "any", "emptyList", "decode", "assertThat", "size", "is", "decode", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ListBasedMapCodec", "superclass": "", "interfaces": "implements Codec<Map<K,V>>", "fields": [{"original_string": "private final Codec<List<Map.Entry<K, V>>> listCodec;", "modifier": "private final", "type": "Codec<List<Map.Entry<K, V>>>", "declarator": "listCodec", "var_name": "listCodec"}], "methods": [{"identifier": "ListBasedMapCodec", "parameters": "(Codec<List<Map.Entry<K,V>>> listCodec)", "modifiers": "public", "return": "", "signature": " ListBasedMapCodec(Codec<List<Map.Entry<K,V>>> listCodec)", "full_signature": "public  ListBasedMapCodec(Codec<List<Map.Entry<K,V>>> listCodec)", "class_method_signature": "ListBasedMapCodec.ListBasedMapCodec(Codec<List<Map.Entry<K,V>>> listCodec)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "Map<K,V>", "signature": "Map<K,V> decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public Map<K,V> decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "ListBasedMapCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(Map value, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(Map value, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(Map value, BitChannel channel, Resolver resolver)", "class_method_signature": "ListBasedMapCodec.encode(Map value, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "ListBasedMapCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "ListBasedMapCodec.getCodecDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "ListBasedMapCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "ListBasedMapCodec.getType()", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/ListBasedMapCodec.java"}, "focal_method": {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "Map<K,V>", "body": "public Map<K,V> decode(BitBuffer buffer, Resolver resolver, Builder builder) throws DecodingException {\n        List<? extends Map.Entry<K, V>> entries = listCodec.decode(buffer, resolver, builder);\n        Map<K,V> result = new HashMap(entries.size());\n        for (Map.Entry<K, V> entry : entries) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n        return result;\n    }", "signature": "Map<K,V> decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public Map<K,V> decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "ListBasedMapCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false, "invocations": ["decode", "size", "put", "getKey", "getValue"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}