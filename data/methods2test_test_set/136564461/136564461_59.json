{"test_class": {"identifier": "PointEd25519Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Curve curve = Curve25519.getInstance();", "modifier": "private", "type": "Curve", "declarator": "curve = Curve25519.getInstance()", "var_name": "curve"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed25519/PointEd25519Test.java"}, "test_case": {"identifier": "doubling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doubling() {\n        Point point1 = PointEd25519.fromAffine(\n                new CoordinateEd25519(new BigInteger(\"31621228259983782766387151846173419701451207683454700670358544852161525834558\")),\n                new CoordinateEd25519(new BigInteger(\"1087550498622212171315934886475455672530696511327350732598338573849547859723\")));\n\n        Point result = point1.add(point1);\n        assertThat(result.getAffineX().getInteger(), is(new BigInteger(\"54335164024625743934669286787931302569680669857893696519224744689691858515668\")));\n        assertThat(result.getAffineY().getInteger(), is(new BigInteger(\"44807246093863216660634594959379875777640228908622772878292058541219108796161\")));\n    }", "signature": "void doubling()", "full_signature": "@Test public void doubling()", "class_method_signature": "PointEd25519Test.doubling()", "testcase": true, "constructor": false, "invocations": ["fromAffine", "add", "assertThat", "getInteger", "getAffineX", "is", "assertThat", "getInteger", "getAffineY", "is"]}, "focal_class": {"identifier": "PointEd25519", "superclass": "extends Point", "interfaces": "", "fields": [{"original_string": "private static final Coordinate DEFAULT_Z = new CoordinateEd25519(BigInteger.ONE);", "modifier": "private static final", "type": "Coordinate", "declarator": "DEFAULT_Z = new CoordinateEd25519(BigInteger.ONE)", "var_name": "DEFAULT_Z"}, {"original_string": "private static final Coordinate ONE = new CoordinateEd25519(BigInteger.ONE);", "modifier": "private static final", "type": "Coordinate", "declarator": "ONE = new CoordinateEd25519(BigInteger.ONE)", "var_name": "ONE"}, {"original_string": "private static final Coordinate ZERO = new CoordinateEd25519(BigInteger.ZERO);", "modifier": "private static final", "type": "Coordinate", "declarator": "ZERO = new CoordinateEd25519(BigInteger.ZERO)", "var_name": "ZERO"}, {"original_string": "static final PointEd25519 O = new PointEd25519(ZERO, ONE, DEFAULT_Z, ZERO);", "modifier": "static final", "type": "PointEd25519", "declarator": "O = new PointEd25519(ZERO, ONE, DEFAULT_Z, ZERO)", "var_name": "O"}, {"original_string": "private static final Curve curve = Curve25519.getInstance();", "modifier": "private static final", "type": "Curve", "declarator": "curve = Curve25519.getInstance()", "var_name": "curve"}], "methods": [{"identifier": "PointEd25519", "parameters": "(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "modifiers": "", "return": "", "signature": " PointEd25519(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "full_signature": "  PointEd25519(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "class_method_signature": "PointEd25519.PointEd25519(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "testcase": false, "constructor": true}, {"identifier": "fromAffine", "parameters": "(Coordinate x, Coordinate y)", "modifiers": "public static", "return": "PointEd25519", "signature": "PointEd25519 fromAffine(Coordinate x, Coordinate y)", "full_signature": "public static PointEd25519 fromAffine(Coordinate x, Coordinate y)", "class_method_signature": "PointEd25519.fromAffine(Coordinate x, Coordinate y)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Point point)", "modifiers": "@Override public final", "return": "Point", "signature": "Point add(Point point)", "full_signature": "@Override public final Point add(Point point)", "class_method_signature": "PointEd25519.add(Point point)", "testcase": false, "constructor": false}, {"identifier": "doubling", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point doubling()", "full_signature": "@Override public Point doubling()", "class_method_signature": "PointEd25519.doubling()", "testcase": false, "constructor": false}, {"identifier": "scalarMultiply", "parameters": "(BigInteger integer)", "modifiers": "@Override public final", "return": "Point", "signature": "Point scalarMultiply(BigInteger integer)", "full_signature": "@Override public final Point scalarMultiply(BigInteger integer)", "class_method_signature": "PointEd25519.scalarMultiply(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "negateY", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point negateY()", "full_signature": "@Override public Point negateY()", "class_method_signature": "PointEd25519.negateY()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public final", "return": "EncodedPoint", "signature": "EncodedPoint encode()", "full_signature": "@Override public final EncodedPoint encode()", "class_method_signature": "PointEd25519.encode()", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point negate()", "full_signature": "@Override public Point negate()", "class_method_signature": "PointEd25519.negate()", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed25519/PointEd25519.java"}, "focal_method": {"identifier": "doubling", "parameters": "()", "modifiers": "@Override public", "return": "Point", "body": "@Override\n    public Point doubling() {\n        Coordinate x1 = this.x;\n        Coordinate y1 = this.y;\n        Coordinate z1 = this.z;\n\n        Coordinate A = x1.multiply(x1).mod();\n        Coordinate B = y1.multiply(y1).mod();\n        Coordinate C = new CoordinateEd25519(BigInteger.ONE.shiftLeft(1)).multiply(z1).multiply(z1).mod();\n        Coordinate H = A.add(B).mod();\n        Coordinate E = H.subtract(x1.add(y1).multiply(x1.add(y1)).mod()).mod();\n        Coordinate G = A.subtract(B).mod();\n        Coordinate F = C.add(G).mod();\n\n        Coordinate X3 = E.multiply(F).mod();\n        Coordinate Y3 = G.multiply(H).mod();\n        Coordinate T3 = E.multiply(H).mod();\n        Coordinate Z3 = F.multiply(G).mod();\n\n        return new PointEd25519(X3, Y3, Z3, T3);\n    }", "signature": "Point doubling()", "full_signature": "@Override public Point doubling()", "class_method_signature": "PointEd25519.doubling()", "testcase": false, "constructor": false, "invocations": ["mod", "multiply", "mod", "multiply", "mod", "multiply", "multiply", "shiftLeft", "mod", "add", "mod", "subtract", "mod", "multiply", "add", "add", "mod", "subtract", "mod", "add", "mod", "multiply", "mod", "multiply", "mod", "multiply", "mod", "multiply"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}