{"test_class": {"identifier": "HttpServerHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<zipkin2.Span> spans = new ArrayList<>();", "modifier": "", "type": "List<zipkin2.Span>", "declarator": "spans = new ArrayList<>()", "var_name": "spans"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(1L).sampled(true).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(1L).sampled(true).build()", "var_name": "context"}, {"original_string": "HttpTracing httpTracing;", "modifier": "", "type": "HttpTracing", "declarator": "httpTracing", "var_name": "httpTracing"}, {"original_string": "HttpServerHandler<HttpServerRequest, HttpServerResponse> handler;", "modifier": "", "type": "HttpServerHandler<HttpServerRequest, HttpServerResponse>", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock(answer = CALLS_REAL_METHODS) HttpServerRequest request;", "modifier": "@Mock(answer = CALLS_REAL_METHODS)", "type": "HttpServerRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock(answer = CALLS_REAL_METHODS) HttpServerResponse response;", "modifier": "@Mock(answer = CALLS_REAL_METHODS)", "type": "HttpServerResponse", "declarator": "response", "var_name": "response"}], "file": "instrumentation/http/src/test/java/brave/http/HttpServerHandlerTest.java"}, "test_case": {"identifier": "handleSend_finishesSpanEvenIfUnwrappedNull_withError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void handleSend_finishesSpanEvenIfUnwrappedNull_withError() {\n    brave.Span span = mock(brave.Span.class);\n    when(span.context()).thenReturn(context);\n    when(span.customizer()).thenReturn(span);\n\n    Exception error = new RuntimeException(\"peanuts\");\n    when(response.error()).thenReturn(error);\n\n    handler.handleSend(response, span);\n\n    verify(span).isNoop();\n    verify(span).context();\n    verify(span).customizer();\n    verify(span).error(error);\n    verify(span).finish();\n    verifyNoMoreInteractions(span);\n  }", "signature": "void handleSend_finishesSpanEvenIfUnwrappedNull_withError()", "full_signature": "@Test public void handleSend_finishesSpanEvenIfUnwrappedNull_withError()", "class_method_signature": "HttpServerHandlerTest.handleSend_finishesSpanEvenIfUnwrappedNull_withError()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "context", "thenReturn", "when", "customizer", "thenReturn", "when", "error", "handleSend", "isNoop", "verify", "context", "verify", "customizer", "verify", "error", "verify", "finish", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "HttpServerHandler", "superclass": "extends HttpHandler", "interfaces": "", "fields": [{"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "final SamplerFunction<HttpRequest> sampler;", "modifier": "final", "type": "SamplerFunction<HttpRequest>", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "@Deprecated @Nullable final HttpServerAdapter<Req, Resp> adapter;", "modifier": "@Deprecated @Nullable final", "type": "HttpServerAdapter<Req, Resp>", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "final Extractor<HttpServerRequest> defaultExtractor;", "modifier": "final", "type": "Extractor<HttpServerRequest>", "declarator": "defaultExtractor", "var_name": "defaultExtractor"}], "methods": [{"identifier": "create", "parameters": "(\n    HttpTracing httpTracing)", "modifiers": "public static", "return": "HttpServerHandler<HttpServerRequest, HttpServerResponse>", "signature": "HttpServerHandler<HttpServerRequest, HttpServerResponse> create(\n    HttpTracing httpTracing)", "full_signature": "public static HttpServerHandler<HttpServerRequest, HttpServerResponse> create(\n    HttpTracing httpTracing)", "class_method_signature": "HttpServerHandler.create(\n    HttpTracing httpTracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(HttpTracing httpTracing,\n    HttpServerAdapter<Req, Resp> adapter)", "modifiers": "@Deprecated public static", "return": "HttpServerHandler<Req, Resp>", "signature": "HttpServerHandler<Req, Resp> create(HttpTracing httpTracing,\n    HttpServerAdapter<Req, Resp> adapter)", "full_signature": "@Deprecated public static HttpServerHandler<Req, Resp> create(HttpTracing httpTracing,\n    HttpServerAdapter<Req, Resp> adapter)", "class_method_signature": "HttpServerHandler.create(HttpTracing httpTracing,\n    HttpServerAdapter<Req, Resp> adapter)", "testcase": false, "constructor": false}, {"identifier": "HttpServerHandler", "parameters": "(HttpTracing httpTracing, @Deprecated HttpServerAdapter<Req, Resp> adapter)", "modifiers": "", "return": "", "signature": " HttpServerHandler(HttpTracing httpTracing, @Deprecated HttpServerAdapter<Req, Resp> adapter)", "full_signature": "  HttpServerHandler(HttpTracing httpTracing, @Deprecated HttpServerAdapter<Req, Resp> adapter)", "class_method_signature": "HttpServerHandler.HttpServerHandler(HttpTracing httpTracing, @Deprecated HttpServerAdapter<Req, Resp> adapter)", "testcase": false, "constructor": true}, {"identifier": "handleReceive", "parameters": "(HttpServerRequest request)", "modifiers": "public", "return": "Span", "signature": "Span handleReceive(HttpServerRequest request)", "full_signature": "public Span handleReceive(HttpServerRequest request)", "class_method_signature": "HttpServerHandler.handleReceive(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleReceive", "parameters": "(Extractor<Req> extractor, Req request)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleReceive(Extractor<Req> extractor, Req request)", "full_signature": "@Deprecated public Span handleReceive(Extractor<Req> extractor, Req request)", "class_method_signature": "HttpServerHandler.handleReceive(Extractor<Req> extractor, Req request)", "testcase": false, "constructor": false}, {"identifier": "handleReceive", "parameters": "(Extractor<C> extractor, C carrier, Req request)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleReceive(Extractor<C> extractor, C carrier, Req request)", "full_signature": "@Deprecated public Span handleReceive(Extractor<C> extractor, C carrier, Req request)", "class_method_signature": "HttpServerHandler.handleReceive(Extractor<C> extractor, C carrier, Req request)", "testcase": false, "constructor": false}, {"identifier": "parseRequest", "parameters": "(HttpRequest request, Span span)", "modifiers": "@Override", "return": "void", "signature": "void parseRequest(HttpRequest request, Span span)", "full_signature": "@Override void parseRequest(HttpRequest request, Span span)", "class_method_signature": "HttpServerHandler.parseRequest(HttpRequest request, Span span)", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(TraceContextOrSamplingFlags extracted, HttpServerRequest request)", "modifiers": "", "return": "Span", "signature": "Span nextSpan(TraceContextOrSamplingFlags extracted, HttpServerRequest request)", "full_signature": " Span nextSpan(TraceContextOrSamplingFlags extracted, HttpServerRequest request)", "class_method_signature": "HttpServerHandler.nextSpan(TraceContextOrSamplingFlags extracted, HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(@Nullable Resp response, @Nullable Throwable error, Span span)", "modifiers": "public", "return": "void", "signature": "void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "full_signature": "public void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "class_method_signature": "HttpServerHandler.handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(HttpServerResponse response, Span span)", "modifiers": "public", "return": "void", "signature": "void handleSend(HttpServerResponse response, Span span)", "full_signature": "public void handleSend(HttpServerResponse response, Span span)", "class_method_signature": "HttpServerHandler.handleSend(HttpServerResponse response, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/http/src/main/java/brave/http/HttpServerHandler.java"}, "focal_method": {"identifier": "handleSend", "parameters": "(@Nullable Resp response, @Nullable Throwable error, Span span)", "modifiers": "public", "return": "void", "body": "public void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span) {\n    if (span == null) throw new NullPointerException(\"span == null\");\n    if (response == null && error == null) {\n      throw new IllegalArgumentException(\n        \"Either the response or error parameters may be null, but not both\");\n    }\n\n    if (response == null) {\n      span.error(error).finish();\n      return;\n    }\n\n    HttpServerResponse serverResponse;\n    if (response instanceof HttpServerResponse) {\n      serverResponse = (HttpServerResponse) response;\n      if (serverResponse.error() == null && error != null) {\n        span.error(error);\n      }\n    } else {\n      serverResponse = new FromResponseAdapter<>(adapter, response, error);\n    }\n    handleFinish(serverResponse, span);\n  }", "signature": "void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "full_signature": "public void handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "class_method_signature": "HttpServerHandler.handleSend(@Nullable Resp response, @Nullable Throwable error, Span span)", "testcase": false, "constructor": false, "invocations": ["finish", "error", "error", "error", "handleFinish"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}