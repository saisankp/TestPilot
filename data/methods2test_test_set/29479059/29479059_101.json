{"test_class": {"identifier": "DefaultListenerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BeanRegistrar beanRegistrar;", "modifier": "@Mock\n    private", "type": "BeanRegistrar", "declarator": "beanRegistrar", "var_name": "beanRegistrar"}, {"original_string": "@Mock\n    private JobRepository jobRepository;", "modifier": "@Mock\n    private", "type": "JobRepository", "declarator": "jobRepository", "var_name": "jobRepository"}, {"original_string": "@Mock\n    private JobRegistry jobRegistry;", "modifier": "@Mock\n    private", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@InjectMocks\n    private DefaultListenerService listenerService;", "modifier": "@InjectMocks\n    private", "type": "DefaultListenerService", "declarator": "listenerService", "var_name": "listenerService"}, {"original_string": "private Job job;", "modifier": "private", "type": "Job", "declarator": "job", "var_name": "job"}, {"original_string": "private JobLauncher jobLauncher;", "modifier": "private", "type": "JobLauncher", "declarator": "jobLauncher", "var_name": "jobLauncher"}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/test/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultListenerServiceTest.java"}, "test_case": {"identifier": "testRegisterListenerForJob", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterListenerForJob() throws NoSuchJobException {\n        final JobListenerConfiguration jobListenerConfiguration = DomainTestHelper.createJobListenerConfiguration\n                (\"src/test/\", \"*.txt\", JobListenerType.LOCAL_FOLDER_LISTENER);\n        jobListenerConfiguration.setBeanName(\"testBean\");\n        final JobConfiguration jobConfiguration = DomainTestHelper.createJobConfiguration(jobListenerConfiguration);\n        this.listenerService.registerListenerForJob(jobConfiguration);\n        verify(this.jobRegistry, times(1)).getJob(anyString());\n        verify(this.beanRegistrar, times(1)).registerBean(\n                eq(FolderListener.class),\n                eq(\"testBean\"),\n                anySet(),\n                eq(null),\n                eq(null),\n                eq(null),\n                eq(null));\n    }", "signature": "void testRegisterListenerForJob()", "full_signature": "@Test public void testRegisterListenerForJob()", "class_method_signature": "DefaultListenerServiceTest.testRegisterListenerForJob()", "testcase": true, "constructor": false, "invocations": ["createJobListenerConfiguration", "setBeanName", "createJobConfiguration", "registerListenerForJob", "getJob", "verify", "times", "anyString", "registerBean", "verify", "times", "eq", "eq", "anySet", "eq", "eq", "eq", "eq"]}, "focal_class": {"identifier": "DefaultListenerService", "superclass": "", "interfaces": "implements ListenerService, InitializingBean", "fields": [{"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private final BeanRegistrar beanRegistrar;", "modifier": "private final", "type": "BeanRegistrar", "declarator": "beanRegistrar", "var_name": "beanRegistrar"}, {"original_string": "private final JobRegistry jobRegistry;", "modifier": "private final", "type": "JobRegistry", "declarator": "jobRegistry", "var_name": "jobRegistry"}, {"original_string": "private final JobRepository jobRepository;", "modifier": "private final", "type": "JobRepository", "declarator": "jobRepository", "var_name": "jobRepository"}], "methods": [{"identifier": "setApplicationContext", "parameters": "(final ApplicationContext applicationContext)", "modifiers": "@Autowired public", "return": "void", "signature": "void setApplicationContext(final ApplicationContext applicationContext)", "full_signature": "@Autowired public void setApplicationContext(final ApplicationContext applicationContext)", "class_method_signature": "DefaultListenerService.setApplicationContext(final ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "DefaultListenerService", "parameters": "(final BeanRegistrar beanRegistrar, final JobRegistry jobRegistry, final JobRepository jobRepository)", "modifiers": "public", "return": "", "signature": " DefaultListenerService(final BeanRegistrar beanRegistrar, final JobRegistry jobRegistry, final JobRepository jobRepository)", "full_signature": "public  DefaultListenerService(final BeanRegistrar beanRegistrar, final JobRegistry jobRegistry, final JobRepository jobRepository)", "class_method_signature": "DefaultListenerService.DefaultListenerService(final BeanRegistrar beanRegistrar, final JobRegistry jobRegistry, final JobRepository jobRepository)", "testcase": false, "constructor": true}, {"identifier": "registerListenerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "String", "signature": "String registerListenerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public String registerListenerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultListenerService.registerListenerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "unregisterListenerForJob", "parameters": "(final String beanName)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterListenerForJob(final String beanName)", "full_signature": "@Override public void unregisterListenerForJob(final String beanName)", "class_method_signature": "DefaultListenerService.unregisterListenerForJob(final String beanName)", "testcase": false, "constructor": false}, {"identifier": "refreshListenerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "void", "signature": "void refreshListenerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public void refreshListenerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultListenerService.refreshListenerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "activateListener", "parameters": "(final String beanName, final Boolean forceActivation)", "modifiers": "@Override public", "return": "void", "signature": "void activateListener(final String beanName, final Boolean forceActivation)", "full_signature": "@Override public void activateListener(final String beanName, final Boolean forceActivation)", "class_method_signature": "DefaultListenerService.activateListener(final String beanName, final Boolean forceActivation)", "testcase": false, "constructor": false}, {"identifier": "terminateListener", "parameters": "(final String beanName)", "modifiers": "@Override public", "return": "void", "signature": "void terminateListener(final String beanName)", "full_signature": "@Override public void terminateListener(final String beanName)", "class_method_signature": "DefaultListenerService.terminateListener(final String beanName)", "testcase": false, "constructor": false}, {"identifier": "createLobLauncher", "parameters": "(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "modifiers": "@Override public", "return": "JobLauncher", "signature": "JobLauncher createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "full_signature": "@Override public JobLauncher createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "class_method_signature": "DefaultListenerService.createLobLauncher(final TaskExecutorType taskExecutorType, final JobRepository jobRepository)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "DefaultListenerService.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "registerFolderListener", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "private", "return": "String", "signature": "String registerFolderListener(final JobConfiguration jobConfiguration)", "full_signature": "private String registerFolderListener(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultListenerService.registerFolderListener(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false}, {"identifier": "generateSchedulerBeanName", "parameters": "(final String jobName,\n                                             final JobListenerType listenerType)", "modifiers": "private", "return": "String", "signature": "String generateSchedulerBeanName(final String jobName,\n                                             final JobListenerType listenerType)", "full_signature": "private String generateSchedulerBeanName(final String jobName,\n                                             final JobListenerType listenerType)", "class_method_signature": "DefaultListenerService.generateSchedulerBeanName(final String jobName,\n                                             final JobListenerType listenerType)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-core/spring-batch-lightmin-core-service/src/main/java/org/tuxdevelop/spring/batch/lightmin/service/DefaultListenerService.java"}, "focal_method": {"identifier": "registerListenerForJob", "parameters": "(final JobConfiguration jobConfiguration)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String registerListenerForJob(final JobConfiguration jobConfiguration) {\n        final JobListenerType jobListenerType = jobConfiguration.getJobListenerConfiguration().getJobListenerType();\n        final String beanName;\n        switch (jobListenerType) {\n            case LOCAL_FOLDER_LISTENER:\n                beanName = this.registerFolderListener(jobConfiguration);\n                break;\n            default:\n                throw new SpringBatchLightminApplicationException(\"Unknown ListenerType: \" + jobListenerType);\n        }\n        return beanName;\n    }", "signature": "String registerListenerForJob(final JobConfiguration jobConfiguration)", "full_signature": "@Override public String registerListenerForJob(final JobConfiguration jobConfiguration)", "class_method_signature": "DefaultListenerService.registerListenerForJob(final JobConfiguration jobConfiguration)", "testcase": false, "constructor": false, "invocations": ["getJobListenerType", "getJobListenerConfiguration", "registerFolderListener"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}