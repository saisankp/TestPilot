{"test_class": {"identifier": "PeriodicGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long INITIAL_DELAY_MS = 1;", "modifier": "private static final", "type": "long", "declarator": "INITIAL_DELAY_MS = 1", "var_name": "INITIAL_DELAY_MS"}, {"original_string": "private static final long INTERVAL_MS = 5;", "modifier": "private static final", "type": "long", "declarator": "INTERVAL_MS = 5", "var_name": "INTERVAL_MS"}, {"original_string": "private static final Throwable SIMULATED_ERROR = new RuntimeException(\"simulated error\");", "modifier": "private static final", "type": "Throwable", "declarator": "SIMULATED_ERROR = new RuntimeException(\"simulated error\")", "var_name": "SIMULATED_ERROR"}, {"original_string": "private static final List<String> SOURCE_VALUES = asList(\"A\", \"B\");", "modifier": "private static final", "type": "List<String>", "declarator": "SOURCE_VALUES = asList(\"A\", \"B\")", "var_name": "SOURCE_VALUES"}, {"original_string": "private static final Observable<String> OK_SOURCE = Observable.from(SOURCE_VALUES);", "modifier": "private static final", "type": "Observable<String>", "declarator": "OK_SOURCE = Observable.from(SOURCE_VALUES)", "var_name": "OK_SOURCE"}, {"original_string": "private static final Observable<String> BAD_SOURCE = Observable.just(\"A\").concatWith(Observable.error(SIMULATED_ERROR));", "modifier": "private static final", "type": "Observable<String>", "declarator": "BAD_SOURCE = Observable.just(\"A\").concatWith(Observable.error(SIMULATED_ERROR))", "var_name": "BAD_SOURCE"}, {"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final ExtTestSubscriber<List<String>> testSubscriber = new ExtTestSubscriber<>();", "modifier": "private final", "type": "ExtTestSubscriber<List<String>>", "declarator": "testSubscriber = new ExtTestSubscriber<>()", "var_name": "testSubscriber"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/PeriodicGeneratorTest.java"}, "test_case": {"identifier": "testOkEmitter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOkEmitter() throws Exception {\n        Subscription subscription = ObservableExt.periodicGenerator(\n                OK_SOURCE, INITIAL_DELAY_MS, INTERVAL_MS, TimeUnit.MILLISECONDS, testScheduler\n        ).subscribe(testSubscriber);\n\n        assertThat(testSubscriber.takeNext()).isNull();\n\n        // Check emits\n        expectOkEmit(INITIAL_DELAY_MS);\n        expectOkEmit(INTERVAL_MS);\n        expectOkEmit(INTERVAL_MS);\n\n        // Unsubscribe\n        subscription.unsubscribe();\n        testSubscriber.onCompleted();\n    }", "signature": "void testOkEmitter()", "full_signature": "@Test public void testOkEmitter()", "class_method_signature": "PeriodicGeneratorTest.testOkEmitter()", "testcase": true, "constructor": false, "invocations": ["subscribe", "periodicGenerator", "isNull", "assertThat", "takeNext", "expectOkEmit", "expectOkEmit", "expectOkEmit", "unsubscribe", "onCompleted"]}, "focal_class": {"identifier": "PeriodicGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Observable<T> sourceObservable;", "modifier": "private final", "type": "Observable<T>", "declarator": "sourceObservable", "var_name": "sourceObservable"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final long initialDelayMs;", "modifier": "private final", "type": "long", "declarator": "initialDelayMs", "var_name": "initialDelayMs"}, {"original_string": "private final long intervalMs;", "modifier": "private final", "type": "long", "declarator": "intervalMs", "var_name": "intervalMs"}], "methods": [{"identifier": "PeriodicGenerator", "parameters": "(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "modifiers": "", "return": "", "signature": " PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "full_signature": "  PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "class_method_signature": "PeriodicGenerator.PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "doMany", "parameters": "()", "modifiers": "", "return": "Observable<List<T>>", "signature": "Observable<List<T>> doMany()", "full_signature": " Observable<List<T>> doMany()", "class_method_signature": "PeriodicGenerator.doMany()", "testcase": false, "constructor": false}, {"identifier": "doOne", "parameters": "(boolean firstEmit)", "modifiers": "private", "return": "Observable<List<T>>", "signature": "Observable<List<T>> doOne(boolean firstEmit)", "full_signature": "private Observable<List<T>> doOne(boolean firstEmit)", "class_method_signature": "PeriodicGenerator.doOne(boolean firstEmit)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(Observable<T> sourceObservable,\n                                        long initialDelay,\n                                        long interval,\n                                        TimeUnit timeUnit,\n                                        Scheduler scheduler)", "modifiers": "static", "return": "Observable<List<T>>", "signature": "Observable<List<T>> from(Observable<T> sourceObservable,\n                                        long initialDelay,\n                                        long interval,\n                                        TimeUnit timeUnit,\n                                        Scheduler scheduler)", "full_signature": "static Observable<List<T>> from(Observable<T> sourceObservable,\n                                        long initialDelay,\n                                        long interval,\n                                        TimeUnit timeUnit,\n                                        Scheduler scheduler)", "class_method_signature": "PeriodicGenerator.from(Observable<T> sourceObservable,\n                                        long initialDelay,\n                                        long interval,\n                                        TimeUnit timeUnit,\n                                        Scheduler scheduler)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/PeriodicGenerator.java"}, "focal_method": {"identifier": "PeriodicGenerator", "parameters": "(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "modifiers": "", "return": "", "body": "PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler) {\n        this.sourceObservable = sourceObservable;\n        this.scheduler = scheduler;\n        this.initialDelayMs = timeUnit.toMillis(initialDelay);\n        this.intervalMs = timeUnit.toMillis(interval);\n    }", "signature": " PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "full_signature": "  PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "class_method_signature": "PeriodicGenerator.PeriodicGenerator(Observable<T> sourceObservable,\n                      long initialDelay,\n                      long interval,\n                      TimeUnit timeUnit,\n                      Scheduler scheduler)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}