{"test_class": {"identifier": "PaillierCipherTest", "superclass": "", "interfaces": "", "fields": [], "file": "pross-common/src/test/java/com/ibm/pross/common/util/crypto/paillier/PaillierCipherTest.java"}, "test_case": {"identifier": "testDecrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDecrypt() {\n\t\tfail(\"Not yet implemented\");\n\t}", "signature": "void testDecrypt()", "full_signature": "@Test public void testDecrypt()", "class_method_signature": "PaillierCipherTest.testDecrypt()", "testcase": true, "constructor": false, "invocations": ["fail"]}, "focal_class": {"identifier": "PaillierCipher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "l", "parameters": "(final BigInteger u, final BigInteger n)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger l(final BigInteger u, final BigInteger n)", "full_signature": "private static BigInteger l(final BigInteger u, final BigInteger n)", "class_method_signature": "PaillierCipher.l(final BigInteger u, final BigInteger n)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(final PaillierPublicKey encryptionKey, final BigInteger message)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger encrypt(final PaillierPublicKey encryptionKey, final BigInteger message)", "full_signature": "public static BigInteger encrypt(final PaillierPublicKey encryptionKey, final BigInteger message)", "class_method_signature": "PaillierCipher.encrypt(final PaillierPublicKey encryptionKey, final BigInteger message)", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(final PaillierPublicKey encryptionKey, final BigInteger message,\n\t\t\tfinal BigInteger r)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger encrypt(final PaillierPublicKey encryptionKey, final BigInteger message,\n\t\t\tfinal BigInteger r)", "full_signature": "public static BigInteger encrypt(final PaillierPublicKey encryptionKey, final BigInteger message,\n\t\t\tfinal BigInteger r)", "class_method_signature": "PaillierCipher.encrypt(final PaillierPublicKey encryptionKey, final BigInteger message,\n\t\t\tfinal BigInteger r)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "full_signature": "public static BigInteger decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "class_method_signature": "PaillierCipher.decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/crypto/paillier/PaillierCipher.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext) {\n\n\t\t// Get private key parameters\n\t\tfinal BigInteger lambda = decryptionKey.getLambda();\n\t\tfinal BigInteger mu = decryptionKey.getMu();\n\t\tfinal BigInteger n = decryptionKey.getN();\n\t\tfinal BigInteger nSquared = decryptionKey.getNSquared();\n\n\t\tfinal BigInteger innerPart = Exponentiation.modPow(ciphertext, lambda, nSquared);\n\t\treturn l(innerPart, n).multiply(mu).mod(n);\n\t}", "signature": "BigInteger decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "full_signature": "public static BigInteger decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "class_method_signature": "PaillierCipher.decrypt(final PaillierPrivateKey decryptionKey, final BigInteger ciphertext)", "testcase": false, "constructor": false, "invocations": ["getLambda", "getMu", "getN", "getNSquared", "modPow", "mod", "multiply", "l"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}