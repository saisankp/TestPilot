{"test_class": {"identifier": "LookupUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/lookup/LookupUtilsTest.java"}, "test_case": {"identifier": "testScrubQueryCharacters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScrubQueryCharacters() {\n        // build up some sample values to scrub\n        Map<String, String> queryCharacterSamples = new HashMap<String, String>();\n        queryCharacterSamples.put(null, null);\n        queryCharacterSamples.put(\"\", \"\");\n        queryCharacterSamples.put(\"this is a string with no query characters\", \"this is a string with no query characters\");\n        queryCharacterSamples.put(\"this is a string with one.. query character\", \"this is a string with one query character\");\n        queryCharacterSamples.put(\"..test...test\", \"testtest\");\n        StringBuilder allQueryCharacters = new StringBuilder();\n        for (SearchOperator operator : SearchOperator.QUERY_CHARACTERS) {\n            allQueryCharacters.append(operator.op());\n        }\n        queryCharacterSamples.put(allQueryCharacters.toString(), \"\");\n\n        // scrub them and make sure they produce the proper output\n        for (String input : queryCharacterSamples.keySet()) {\n            String output = queryCharacterSamples.get(input);\n            Assert.assertEquals(\"Check failed for input: \" + input, output, LookupUtils.scrubQueryCharacters(input));\n        }\n    }", "signature": "void testScrubQueryCharacters()", "full_signature": "@Test public void testScrubQueryCharacters()", "class_method_signature": "LookupUtilsTest.testScrubQueryCharacters()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "append", "op", "put", "toString", "keySet", "get", "assertEquals", "scrubQueryCharacters"]}, "focal_class": {"identifier": "LookupUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LookupUtils.class);", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "LOG = org.apache.log4j.Logger.getLogger(LookupUtils.class)", "var_name": "LOG"}, {"original_string": "private static final String[] searchList = new String[SearchOperator.QUERY_CHARACTERS.size()];", "modifier": "private static final", "type": "String[]", "declarator": "searchList = new String[SearchOperator.QUERY_CHARACTERS.size()]", "var_name": "searchList"}, {"original_string": "private static final String[] replacementList = Collections.nCopies(searchList.length, \"\").toArray(new String[0]);", "modifier": "private static final", "type": "String[]", "declarator": "replacementList = Collections.nCopies(searchList.length, \"\").toArray(new String[0])", "var_name": "replacementList"}], "methods": [{"identifier": "LookupUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " LookupUtils()", "full_signature": "private  LookupUtils()", "class_method_signature": "LookupUtils.LookupUtils()", "testcase": false, "constructor": true}, {"identifier": "retrieveLookupParameterValue", "parameters": "(UifFormBase form, HttpServletRequest request,\n            Class<?> lookupObjectClass, String propertyName, String parameterName)", "modifiers": "public static", "return": "String", "signature": "String retrieveLookupParameterValue(UifFormBase form, HttpServletRequest request,\n            Class<?> lookupObjectClass, String propertyName, String parameterName)", "full_signature": "public static String retrieveLookupParameterValue(UifFormBase form, HttpServletRequest request,\n            Class<?> lookupObjectClass, String propertyName, String parameterName)", "class_method_signature": "LookupUtils.retrieveLookupParameterValue(UifFormBase form, HttpServletRequest request,\n            Class<?> lookupObjectClass, String propertyName, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getBaseLookupUrl", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getBaseLookupUrl()", "full_signature": "public static String getBaseLookupUrl()", "class_method_signature": "LookupUtils.getBaseLookupUrl()", "testcase": false, "constructor": false}, {"identifier": "forceUppercase", "parameters": "(Class<?> dataObjectClass, String fieldName, String fieldValue)", "modifiers": "public static", "return": "String", "signature": "String forceUppercase(Class<?> dataObjectClass, String fieldName, String fieldValue)", "full_signature": "public static String forceUppercase(Class<?> dataObjectClass, String fieldName, String fieldValue)", "class_method_signature": "LookupUtils.forceUppercase(Class<?> dataObjectClass, String fieldName, String fieldValue)", "testcase": false, "constructor": false}, {"identifier": "forceUppercase", "parameters": "(Class<?> dataObjectClass, Map<String, String> fieldValues)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> forceUppercase(Class<?> dataObjectClass, Map<String, String> fieldValues)", "full_signature": "public static Map<String, String> forceUppercase(Class<?> dataObjectClass, Map<String, String> fieldValues)", "class_method_signature": "LookupUtils.forceUppercase(Class<?> dataObjectClass, Map<String, String> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getSearchResultsLimit", "parameters": "(Class dataObjectClass, LookupForm lookupForm)", "modifiers": "public static", "return": "Integer", "signature": "Integer getSearchResultsLimit(Class dataObjectClass, LookupForm lookupForm)", "full_signature": "public static Integer getSearchResultsLimit(Class dataObjectClass, LookupForm lookupForm)", "class_method_signature": "LookupUtils.getSearchResultsLimit(Class dataObjectClass, LookupForm lookupForm)", "testcase": false, "constructor": false}, {"identifier": "getApplicationSearchResultsLimit", "parameters": "()", "modifiers": "public static", "return": "Integer", "signature": "Integer getApplicationSearchResultsLimit()", "full_signature": "public static Integer getApplicationSearchResultsLimit()", "class_method_signature": "LookupUtils.getApplicationSearchResultsLimit()", "testcase": false, "constructor": false}, {"identifier": "getApplicationMultipleValueSearchResultsLimit", "parameters": "()", "modifiers": "public static", "return": "Integer", "signature": "Integer getApplicationMultipleValueSearchResultsLimit()", "full_signature": "public static Integer getApplicationMultipleValueSearchResultsLimit()", "class_method_signature": "LookupUtils.getApplicationMultipleValueSearchResultsLimit()", "testcase": false, "constructor": false}, {"identifier": "getActiveDateTimestampForCriteria", "parameters": "(Map searchValues)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp getActiveDateTimestampForCriteria(Map searchValues)", "full_signature": "public static Timestamp getActiveDateTimestampForCriteria(Map searchValues)", "class_method_signature": "LookupUtils.getActiveDateTimestampForCriteria(Map searchValues)", "testcase": false, "constructor": false}, {"identifier": "preprocessDateFields", "parameters": "(Map<String, String> searchCriteria)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> preprocessDateFields(Map<String, String> searchCriteria)", "full_signature": "public static Map<String, String> preprocessDateFields(Map<String, String> searchCriteria)", "class_method_signature": "LookupUtils.preprocessDateFields(Map<String, String> searchCriteria)", "testcase": false, "constructor": false}, {"identifier": "hasExternalBusinessObjectProperty", "parameters": "(Class<?> boClass,\n            Map<String, String> fieldValues)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasExternalBusinessObjectProperty(Class<?> boClass,\n            Map<String, String> fieldValues)", "full_signature": "public static boolean hasExternalBusinessObjectProperty(Class<?> boClass,\n            Map<String, String> fieldValues)", "class_method_signature": "LookupUtils.hasExternalBusinessObjectProperty(Class<?> boClass,\n            Map<String, String> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "isExternalBusinessObjectProperty", "parameters": "(Object sampleBo, String propertyName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExternalBusinessObjectProperty(Object sampleBo, String propertyName)", "full_signature": "public static boolean isExternalBusinessObjectProperty(Object sampleBo, String propertyName)", "class_method_signature": "LookupUtils.isExternalBusinessObjectProperty(Object sampleBo, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "removeExternalizableBusinessObjectFieldValues", "parameters": "(Class<?> boClass,\n            Map<String, String> fieldValues)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> removeExternalizableBusinessObjectFieldValues(Class<?> boClass,\n            Map<String, String> fieldValues)", "full_signature": "public static Map<String, String> removeExternalizableBusinessObjectFieldValues(Class<?> boClass,\n            Map<String, String> fieldValues)", "class_method_signature": "LookupUtils.removeExternalizableBusinessObjectFieldValues(Class<?> boClass,\n            Map<String, String> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getExternalizableBusinessObjectFieldValues", "parameters": "(String eboPropertyName,\n            Map<String, String> fieldValues)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> getExternalizableBusinessObjectFieldValues(String eboPropertyName,\n            Map<String, String> fieldValues)", "full_signature": "public static Map<String, String> getExternalizableBusinessObjectFieldValues(String eboPropertyName,\n            Map<String, String> fieldValues)", "class_method_signature": "LookupUtils.getExternalizableBusinessObjectFieldValues(String eboPropertyName,\n            Map<String, String> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getExternalizableBusinessObjectProperties", "parameters": "(Class<?> boClass,\n            Map<String, String> fieldValues)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getExternalizableBusinessObjectProperties(Class<?> boClass,\n            Map<String, String> fieldValues)", "full_signature": "public static List<String> getExternalizableBusinessObjectProperties(Class<?> boClass,\n            Map<String, String> fieldValues)", "class_method_signature": "LookupUtils.getExternalizableBusinessObjectProperties(Class<?> boClass,\n            Map<String, String> fieldValues)", "testcase": false, "constructor": false}, {"identifier": "getExternalizableBusinessObjectClass", "parameters": "(Class<?> boClass,\n            String propertyName)", "modifiers": "public static", "return": "Class<? extends ExternalizableBusinessObject>", "signature": "Class<? extends ExternalizableBusinessObject> getExternalizableBusinessObjectClass(Class<?> boClass,\n            String propertyName)", "full_signature": "public static Class<? extends ExternalizableBusinessObject> getExternalizableBusinessObjectClass(Class<?> boClass,\n            String propertyName)", "class_method_signature": "LookupUtils.getExternalizableBusinessObjectClass(Class<?> boClass,\n            String propertyName)", "testcase": false, "constructor": false}, {"identifier": "adjustCriteriaForNestedEBOs", "parameters": "(Class<?> dataObjectClass,\n            Map<String, String> searchCriteria,\n            boolean unbounded)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> adjustCriteriaForNestedEBOs(Class<?> dataObjectClass,\n            Map<String, String> searchCriteria,\n            boolean unbounded)", "full_signature": "public static Map<String, String> adjustCriteriaForNestedEBOs(Class<?> dataObjectClass,\n            Map<String, String> searchCriteria,\n            boolean unbounded)", "class_method_signature": "LookupUtils.adjustCriteriaForNestedEBOs(Class<?> dataObjectClass,\n            Map<String, String> searchCriteria,\n            boolean unbounded)", "testcase": false, "constructor": false}, {"identifier": "scrubQueryCharacters", "parameters": "(String criteriaValue)", "modifiers": "public static", "return": "String", "signature": "String scrubQueryCharacters(String criteriaValue)", "full_signature": "public static String scrubQueryCharacters(String criteriaValue)", "class_method_signature": "LookupUtils.scrubQueryCharacters(String criteriaValue)", "testcase": false, "constructor": false}, {"identifier": "generateMultiValueKey", "parameters": "(Object lineDataObject, List<String> fieldConversionKeys)", "modifiers": "public static", "return": "String", "signature": "String generateMultiValueKey(Object lineDataObject, List<String> fieldConversionKeys)", "full_signature": "public static String generateMultiValueKey(Object lineDataObject, List<String> fieldConversionKeys)", "class_method_signature": "LookupUtils.generateMultiValueKey(Object lineDataObject, List<String> fieldConversionKeys)", "testcase": false, "constructor": false}, {"identifier": "refreshLookupResultSelections", "parameters": "(LookupForm form)", "modifiers": "public static", "return": "void", "signature": "void refreshLookupResultSelections(LookupForm form)", "full_signature": "public static void refreshLookupResultSelections(LookupForm form)", "class_method_signature": "LookupUtils.refreshLookupResultSelections(LookupForm form)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/lookup/LookupUtils.java"}, "focal_method": {"identifier": "scrubQueryCharacters", "parameters": "(String criteriaValue)", "modifiers": "public static", "return": "String", "body": "public static String scrubQueryCharacters(String criteriaValue) {\n        return StringUtils.replaceEach(criteriaValue, searchList, replacementList);\n    }", "signature": "String scrubQueryCharacters(String criteriaValue)", "full_signature": "public static String scrubQueryCharacters(String criteriaValue)", "class_method_signature": "LookupUtils.scrubQueryCharacters(String criteriaValue)", "testcase": false, "constructor": false, "invocations": ["replaceEach"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}