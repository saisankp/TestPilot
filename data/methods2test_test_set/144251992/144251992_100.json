{"test_class": {"identifier": "UserUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HierarchyTreeNodeRepository hierarchyTreeNodeRepoMock;", "modifier": "@Mock\n    private", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepoMock", "var_name": "hierarchyTreeNodeRepoMock"}, {"original_string": "@Mock\n    private LdapAdapter ldapAdapterMock;", "modifier": "@Mock\n    private", "type": "LdapAdapter", "declarator": "ldapAdapterMock", "var_name": "ldapAdapterMock"}, {"original_string": "@Mock\n    private RepositoryUserService repoUserServiceMock;", "modifier": "@Mock\n    private", "type": "RepositoryUserService", "declarator": "repoUserServiceMock", "var_name": "repoUserServiceMock"}, {"original_string": "@Mock\n    private UserDataRepository userDataRepoMock;", "modifier": "@Mock\n    private", "type": "UserDataRepository", "declarator": "userDataRepoMock", "var_name": "userDataRepoMock"}, {"original_string": "@Mock\n    private Normalizer<UserData> normalizerMock;", "modifier": "@Mock\n    private", "type": "Normalizer<UserData>", "declarator": "normalizerMock", "var_name": "normalizerMock"}, {"original_string": "@Captor\n    private ArgumentCaptor<Collection<UserData>> userDataCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Collection<UserData>>", "declarator": "userDataCaptor", "var_name": "userDataCaptor"}, {"original_string": "private UserUpdater userUpdater;", "modifier": "private", "type": "UserUpdater", "declarator": "userUpdater", "var_name": "userUpdater"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/updater/UserUpdaterTest.java"}, "test_case": {"identifier": "updateUserDataDeletesAllAndSavesNew", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateUserDataDeletesAllAndSavesNew() {\n        // given\n        var firstUserId = \"first-user\";\n        var expectedFirstDepartment = \"first-department\";\n        var expectedFirstDivision = \"first-division\";\n        var expectedFirstGivenName = \"first-given-name\";\n        var expectedFirstSurname = \"first-surname\";\n        var expectedFirstName = \"first-full-name\";\n        var expectedFirstMail = \"first@mail.com\";\n\n        var secondUserId = \"second-user\";\n        var expectedSecondDepartment = \"second-department\";\n        var expectedSecondDivision = \"second-division\";\n        var expectedSecondGivenName = \"second-given-name\";\n        var expectedSecondSurname = \"second-surname\";\n        var expectedSecondName = \"second-full-name\";\n        var expectedSecondMail = \"second@mail.com\";\n\n        var firstUser = new User(firstUserId);\n        var secondUser = new User(secondUserId);\n\n        var firstNode = new LdapUserNode()\n                .setId(firstUserId)\n                .setDepartment(expectedFirstDepartment)\n                .setDivision(expectedFirstDivision)\n                .setGivenName(expectedFirstGivenName)\n                .setSurname(expectedFirstSurname)\n                .setName(expectedFirstName)\n                .setMail(expectedFirstMail);\n        var secondNode = new LdapUserNode()\n                .setId(secondUserId)\n                .setDepartment(expectedSecondDepartment)\n                .setDivision(expectedSecondDivision)\n                .setGivenName(expectedSecondGivenName)\n                .setSurname(expectedSecondSurname)\n                .setName(expectedSecondName)\n                .setMail(expectedSecondMail);\n\n        var firstExpected = new UserData(firstUser, expectedFirstGivenName, expectedFirstSurname, expectedFirstMail, expectedFirstDivision);\n        var secondExpected = new UserData(secondUser, expectedSecondGivenName, expectedSecondSurname, expectedSecondMail, expectedSecondDivision);\n\n        given(repoUserServiceMock.getOrCreateUserById(firstUserId)).willReturn(firstUser);\n        given(repoUserServiceMock.getOrCreateUserById(secondUserId)).willReturn(secondUser);\n\n        given(normalizerMock.normalize(List.of(firstExpected, secondExpected))).willReturn(List.of(firstExpected, secondExpected));\n\n        // when\n        userUpdater.updateUserData(List.of(firstNode, secondNode));\n\n        // then\n        verify(userDataRepoMock).deleteAll();\n        verify(userDataRepoMock).flush();\n        verify(userDataRepoMock).saveAll(userDataCaptor.capture());\n        verify(normalizerMock).normalize(List.of(firstExpected, secondExpected));\n\n        assertThat(userDataCaptor.getValue()).containsExactlyInAnyOrder(firstExpected, secondExpected);\n    }", "signature": "void updateUserDataDeletesAllAndSavesNew()", "full_signature": "@Test public void updateUserDataDeletesAllAndSavesNew()", "class_method_signature": "UserUpdaterTest.updateUserDataDeletesAllAndSavesNew()", "testcase": true, "constructor": false, "invocations": ["setMail", "setName", "setSurname", "setGivenName", "setDivision", "setDepartment", "setId", "setMail", "setName", "setSurname", "setGivenName", "setDivision", "setDepartment", "setId", "willReturn", "given", "getOrCreateUserById", "willReturn", "given", "getOrCreateUserById", "willReturn", "given", "normalize", "of", "of", "updateUserData", "of", "deleteAll", "verify", "flush", "verify", "saveAll", "verify", "capture", "normalize", "verify", "of", "containsExactlyInAnyOrder", "assertThat", "getValue"]}, "focal_class": {"identifier": "UserUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HierarchyTreeNodeRepository hierarchyTreeNodeRepo;", "modifier": "private final", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepo", "var_name": "hierarchyTreeNodeRepo"}, {"original_string": "private final RepositoryUserService repoUserService;", "modifier": "private final", "type": "RepositoryUserService", "declarator": "repoUserService", "var_name": "repoUserService"}, {"original_string": "private final UserDataRepository userDataRepo;", "modifier": "private final", "type": "UserDataRepository", "declarator": "userDataRepo", "var_name": "userDataRepo"}, {"original_string": "private final LdapAdapter ldapAdapter;", "modifier": "private final", "type": "LdapAdapter", "declarator": "ldapAdapter", "var_name": "ldapAdapter"}, {"original_string": "private final List<Normalizer<UserData>> normalizers;", "modifier": "private final", "type": "List<Normalizer<UserData>>", "declarator": "normalizers", "var_name": "normalizers"}], "methods": [{"identifier": "UserUpdater", "parameters": "(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "modifiers": "public", "return": "", "signature": " UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "full_signature": "public  UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "class_method_signature": "UserUpdater.UserUpdater(HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                       RepositoryUserService repoUserService,\n                       UserDataRepository userDataRepo,\n                       LdapAdapter ldapAdapter,\n                       List<Normalizer<UserData>> normalizers)", "testcase": false, "constructor": true}, {"identifier": "updateHierarchyAndUserData", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateHierarchyAndUserData()", "full_signature": "public void updateHierarchyAndUserData()", "class_method_signature": "UserUpdater.updateHierarchyAndUserData()", "testcase": false, "constructor": false}, {"identifier": "updateHierarchy", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "void", "signature": "void updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " void updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.updateHierarchy(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "updateUserData", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "void", "signature": "void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.updateUserData(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "normalizeAndSaveUserData", "parameters": "(List<UserData> userData)", "modifiers": "", "return": "void", "signature": "void normalizeAndSaveUserData(List<UserData> userData)", "full_signature": " void normalizeAndSaveUserData(List<UserData> userData)", "class_method_signature": "UserUpdater.normalizeAndSaveUserData(List<UserData> userData)", "testcase": false, "constructor": false}, {"identifier": "getRootNodes", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.getRootNodes(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "buildHierarchyTrees", "parameters": "(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "modifiers": "", "return": "Collection<HierarchyTreeNode>", "signature": "Collection<HierarchyTreeNode> buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "full_signature": " Collection<HierarchyTreeNode> buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "class_method_signature": "UserUpdater.buildHierarchyTrees(@NonNull Collection<LdapUserNode> rootNodes, @NonNull Collection<LdapUserNode> allNodes)", "testcase": false, "constructor": false}, {"identifier": "buildHierarchyNode", "parameters": "(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "modifiers": "", "return": "HierarchyTreeNode", "signature": "HierarchyTreeNode buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "full_signature": " HierarchyTreeNode buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "class_method_signature": "UserUpdater.buildHierarchyNode(@NonNull LdapUserNode rootNode, @NonNull List<LdapUserNode> childNodes)", "testcase": false, "constructor": false}, {"identifier": "getChildNodesInLevelOrder", "parameters": "(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "modifiers": "", "return": "List<LdapUserNode>", "signature": "List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "full_signature": " List<LdapUserNode> getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "class_method_signature": "UserUpdater.getChildNodesInLevelOrder(@NonNull LdapUserNode node, @NonNull Map<String, LdapUserNode> dnNodeMap)", "testcase": false, "constructor": false}, {"identifier": "filterNodesWithMissingManager", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.filterNodesWithMissingManager(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}, {"identifier": "cleanDirectReports", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "Set<LdapUserNode>", "signature": "Set<LdapUserNode> cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " Set<LdapUserNode> cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.cleanDirectReports(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/updater/UserUpdater.java"}, "focal_method": {"identifier": "updateUserData", "parameters": "(@NonNull Collection<LdapUserNode> nodes)", "modifiers": "", "return": "void", "body": "void updateUserData(@NonNull Collection<LdapUserNode> nodes) {\n        var userData = nodes.stream()\n                .map(node -> {\n                    var user = repoUserService.getOrCreateUserById(node.getId());\n\n                    return new UserData(user, node.getGivenName(), node.getSurname(), node.getMail(), node.getDivision());\n                })\n                .distinct()\n                .collect(Collectors.toList());\n\n        normalizeAndSaveUserData(userData);\n    }", "signature": "void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "full_signature": " void updateUserData(@NonNull Collection<LdapUserNode> nodes)", "class_method_signature": "UserUpdater.updateUserData(@NonNull Collection<LdapUserNode> nodes)", "testcase": false, "constructor": false, "invocations": ["collect", "distinct", "map", "stream", "getOrCreateUserById", "getId", "getGivenName", "getSurname", "getMail", "getDivision", "toList", "normalizeAndSaveUserData"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}