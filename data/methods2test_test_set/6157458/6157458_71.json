{"test_class": {"identifier": "ManifestPluginDescriptorFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VersionManager versionManager;", "modifier": "private", "type": "VersionManager", "declarator": "versionManager", "var_name": "versionManager"}, {"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/ManifestPluginDescriptorFinderTest.java"}, "test_case": {"identifier": "testFindNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindNotFound() {\n        PluginDescriptorFinder descriptorFinder = new ManifestPluginDescriptorFinder();\n        assertThrows(PluginRuntimeException.class, () -> descriptorFinder.find(pluginsPath.resolve(\"test-plugin-3\")));\n    }", "signature": "void testFindNotFound()", "full_signature": "@Test public void testFindNotFound()", "class_method_signature": "ManifestPluginDescriptorFinderTest.testFindNotFound()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "find", "resolve"]}, "focal_class": {"identifier": "ManifestPluginDescriptorFinder", "superclass": "", "interfaces": "implements PluginDescriptorFinder", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ManifestPluginDescriptorFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ManifestPluginDescriptorFinder.class)", "var_name": "log"}, {"original_string": "public static final String PLUGIN_ID = \"Plugin-Id\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_ID = \"Plugin-Id\"", "var_name": "PLUGIN_ID"}, {"original_string": "public static final String PLUGIN_DESCRIPTION = \"Plugin-Description\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_DESCRIPTION = \"Plugin-Description\"", "var_name": "PLUGIN_DESCRIPTION"}, {"original_string": "public static final String PLUGIN_CLASS = \"Plugin-Class\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_CLASS = \"Plugin-Class\"", "var_name": "PLUGIN_CLASS"}, {"original_string": "public static final String PLUGIN_VERSION = \"Plugin-Version\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_VERSION = \"Plugin-Version\"", "var_name": "PLUGIN_VERSION"}, {"original_string": "public static final String PLUGIN_PROVIDER = \"Plugin-Provider\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_PROVIDER = \"Plugin-Provider\"", "var_name": "PLUGIN_PROVIDER"}, {"original_string": "public static final String PLUGIN_DEPENDENCIES = \"Plugin-Dependencies\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_DEPENDENCIES = \"Plugin-Dependencies\"", "var_name": "PLUGIN_DEPENDENCIES"}, {"original_string": "public static final String PLUGIN_REQUIRES = \"Plugin-Requires\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_REQUIRES = \"Plugin-Requires\"", "var_name": "PLUGIN_REQUIRES"}, {"original_string": "public static final String PLUGIN_LICENSE = \"Plugin-License\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_LICENSE = \"Plugin-License\"", "var_name": "PLUGIN_LICENSE"}], "methods": [{"identifier": "isApplicable", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicable(Path pluginPath)", "full_signature": "@Override public boolean isApplicable(Path pluginPath)", "class_method_signature": "ManifestPluginDescriptorFinder.isApplicable(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "PluginDescriptor", "signature": "PluginDescriptor find(Path pluginPath)", "full_signature": "@Override public PluginDescriptor find(Path pluginPath)", "class_method_signature": "ManifestPluginDescriptorFinder.find(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "readManifest", "parameters": "(Path pluginPath)", "modifiers": "protected", "return": "Manifest", "signature": "Manifest readManifest(Path pluginPath)", "full_signature": "protected Manifest readManifest(Path pluginPath)", "class_method_signature": "ManifestPluginDescriptorFinder.readManifest(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "getManifestPath", "parameters": "(Path pluginPath)", "modifiers": "protected", "return": "Path", "signature": "Path getManifestPath(Path pluginPath)", "full_signature": "protected Path getManifestPath(Path pluginPath)", "class_method_signature": "ManifestPluginDescriptorFinder.getManifestPath(Path pluginPath)", "testcase": false, "constructor": false}, {"identifier": "createPluginDescriptor", "parameters": "(Manifest manifest)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor createPluginDescriptor(Manifest manifest)", "full_signature": "protected PluginDescriptor createPluginDescriptor(Manifest manifest)", "class_method_signature": "ManifestPluginDescriptorFinder.createPluginDescriptor(Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "createPluginDescriptorInstance", "parameters": "()", "modifiers": "protected", "return": "DefaultPluginDescriptor", "signature": "DefaultPluginDescriptor createPluginDescriptorInstance()", "full_signature": "protected DefaultPluginDescriptor createPluginDescriptorInstance()", "class_method_signature": "ManifestPluginDescriptorFinder.createPluginDescriptorInstance()", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/ManifestPluginDescriptorFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(Path pluginPath)", "modifiers": "@Override public", "return": "PluginDescriptor", "body": "@Override\n    public PluginDescriptor find(Path pluginPath) {\n        Manifest manifest = readManifest(pluginPath);\n\n        return createPluginDescriptor(manifest);\n    }", "signature": "PluginDescriptor find(Path pluginPath)", "full_signature": "@Override public PluginDescriptor find(Path pluginPath)", "class_method_signature": "ManifestPluginDescriptorFinder.find(Path pluginPath)", "testcase": false, "constructor": false, "invocations": ["readManifest", "createPluginDescriptor"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}