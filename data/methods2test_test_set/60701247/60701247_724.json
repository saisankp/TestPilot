{"test_class": {"identifier": "CpuCaptureTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers/testSrc/com/android/tools/profilers/cpu/CpuCaptureTest.java"}, "test_case": {"identifier": "traceIdPassedInConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void traceIdPassedInConstructor() {\n    int traceId1 = 20;\n    CpuThreadInfo info = new CpuThreadInfo(10, \"main\");\n    Range range = new Range(0, 30);\n    Map<CpuThreadInfo, CaptureNode> captureTrees =\n      new ImmutableMap.Builder<CpuThreadInfo, CaptureNode>().put(info, new CaptureNode(new StubCaptureNodeModel())).build();\n    TraceParser parser = new FakeTraceParser(range, captureTrees, false);\n\n    CpuCapture capture = new CpuCapture(parser, traceId1, Cpu.CpuTraceType.UNSPECIFIED_TYPE);\n    assertThat(capture.getTraceId()).isEqualTo(traceId1);\n\n    int traceId2 = 50;\n    capture = new CpuCapture(parser, traceId2, Cpu.CpuTraceType.UNSPECIFIED_TYPE);\n    assertThat(capture.getTraceId()).isEqualTo(traceId2);\n  }", "signature": "void traceIdPassedInConstructor()", "full_signature": "@Test public void traceIdPassedInConstructor()", "class_method_signature": "CpuCaptureTest.traceIdPassedInConstructor()", "testcase": true, "constructor": false, "invocations": ["build", "put", "isEqualTo", "assertThat", "getTraceId", "isEqualTo", "assertThat", "getTraceId"]}, "focal_class": {"identifier": "CpuCapture", "superclass": "", "interfaces": "implements ConfigurableDurationData", "fields": [{"original_string": "private final int myMainThreadId;", "modifier": "private final", "type": "int", "declarator": "myMainThreadId", "var_name": "myMainThreadId"}, {"original_string": "@NotNull\n  private ClockType myClockType;", "modifier": "@NotNull\n  private", "type": "ClockType", "declarator": "myClockType", "var_name": "myClockType"}, {"original_string": "@NotNull\n  private final Map<CpuThreadInfo, CaptureNode> myCaptureTrees;", "modifier": "@NotNull\n  private final", "type": "Map<CpuThreadInfo, CaptureNode>", "declarator": "myCaptureTrees", "var_name": "myCaptureTrees"}, {"original_string": "@NotNull\n  private final Timeline myTimeline = new DefaultTimeline();", "modifier": "@NotNull\n  private final", "type": "Timeline", "declarator": "myTimeline = new DefaultTimeline()", "var_name": "myTimeline"}, {"original_string": "private final boolean myCaptureSupportsDualClock;", "modifier": "private final", "type": "boolean", "declarator": "myCaptureSupportsDualClock", "var_name": "myCaptureSupportsDualClock"}, {"original_string": "private final long myTraceId;", "modifier": "private final", "type": "long", "declarator": "myTraceId", "var_name": "myTraceId"}, {"original_string": "private final Cpu.CpuTraceType myType;", "modifier": "private final", "type": "Cpu.CpuTraceType", "declarator": "myType", "var_name": "myType"}], "methods": [{"identifier": "CpuCapture", "parameters": "(@NotNull TraceParser parser, long traceId, Cpu.CpuTraceType type)", "modifiers": "public", "return": "", "signature": " CpuCapture(@NotNull TraceParser parser, long traceId, Cpu.CpuTraceType type)", "full_signature": "public  CpuCapture(@NotNull TraceParser parser, long traceId, Cpu.CpuTraceType type)", "class_method_signature": "CpuCapture.CpuCapture(@NotNull TraceParser parser, long traceId, Cpu.CpuTraceType type)", "testcase": false, "constructor": true}, {"identifier": "getMainThreadId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMainThreadId()", "full_signature": "public int getMainThreadId()", "class_method_signature": "CpuCapture.getMainThreadId()", "testcase": false, "constructor": false}, {"identifier": "getTimeline", "parameters": "()", "modifiers": "@NotNull public", "return": "Timeline", "signature": "Timeline getTimeline()", "full_signature": "@NotNull public Timeline getTimeline()", "class_method_signature": "CpuCapture.getTimeline()", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "@NotNull public", "return": "Range", "signature": "Range getRange()", "full_signature": "@NotNull public Range getRange()", "class_method_signature": "CpuCapture.getRange()", "testcase": false, "constructor": false}, {"identifier": "getCaptureNode", "parameters": "(int threadId)", "modifiers": "@Nullable public", "return": "CaptureNode", "signature": "CaptureNode getCaptureNode(int threadId)", "full_signature": "@Nullable public CaptureNode getCaptureNode(int threadId)", "class_method_signature": "CpuCapture.getCaptureNode(int threadId)", "testcase": false, "constructor": false}, {"identifier": "getThreads", "parameters": "()", "modifiers": "@NotNull", "return": "Set<CpuThreadInfo>", "signature": "Set<CpuThreadInfo> getThreads()", "full_signature": "@NotNull Set<CpuThreadInfo> getThreads()", "class_method_signature": "CpuCapture.getThreads()", "testcase": false, "constructor": false}, {"identifier": "getCaptureNodes", "parameters": "()", "modifiers": "@NotNull public", "return": "Collection<CaptureNode>", "signature": "Collection<CaptureNode> getCaptureNodes()", "full_signature": "@NotNull public Collection<CaptureNode> getCaptureNodes()", "class_method_signature": "CpuCapture.getCaptureNodes()", "testcase": false, "constructor": false}, {"identifier": "containsThread", "parameters": "(int threadId)", "modifiers": "public", "return": "boolean", "signature": "boolean containsThread(int threadId)", "full_signature": "public boolean containsThread(int threadId)", "class_method_signature": "CpuCapture.containsThread(int threadId)", "testcase": false, "constructor": false}, {"identifier": "getDurationUs", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDurationUs()", "full_signature": "@Override public long getDurationUs()", "class_method_signature": "CpuCapture.getDurationUs()", "testcase": false, "constructor": false}, {"identifier": "getSelectableWhenMaxDuration", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getSelectableWhenMaxDuration()", "full_signature": "@Override public boolean getSelectableWhenMaxDuration()", "class_method_signature": "CpuCapture.getSelectableWhenMaxDuration()", "testcase": false, "constructor": false}, {"identifier": "getTraceId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTraceId()", "full_signature": "public long getTraceId()", "class_method_signature": "CpuCapture.getTraceId()", "testcase": false, "constructor": false}, {"identifier": "canSelectPartialRange", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canSelectPartialRange()", "full_signature": "@Override public boolean canSelectPartialRange()", "class_method_signature": "CpuCapture.canSelectPartialRange()", "testcase": false, "constructor": false}, {"identifier": "updateClockType", "parameters": "(@NotNull ClockType clockType)", "modifiers": "public", "return": "void", "signature": "void updateClockType(@NotNull ClockType clockType)", "full_signature": "public void updateClockType(@NotNull ClockType clockType)", "class_method_signature": "CpuCapture.updateClockType(@NotNull ClockType clockType)", "testcase": false, "constructor": false}, {"identifier": "updateClockType", "parameters": "(@Nullable CaptureNode node, @NotNull ClockType clockType)", "modifiers": "private static", "return": "void", "signature": "void updateClockType(@Nullable CaptureNode node, @NotNull ClockType clockType)", "full_signature": "private static void updateClockType(@Nullable CaptureNode node, @NotNull ClockType clockType)", "class_method_signature": "CpuCapture.updateClockType(@Nullable CaptureNode node, @NotNull ClockType clockType)", "testcase": false, "constructor": false}, {"identifier": "isDualClock", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDualClock()", "full_signature": "public boolean isDualClock()", "class_method_signature": "CpuCapture.isDualClock()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Cpu.CpuTraceType", "signature": "Cpu.CpuTraceType getType()", "full_signature": "public Cpu.CpuTraceType getType()", "class_method_signature": "CpuCapture.getType()", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/CpuCapture.java"}, "focal_method": {"identifier": "getTraceId", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getTraceId() {\n    return myTraceId;\n  }", "signature": "long getTraceId()", "full_signature": "public long getTraceId()", "class_method_signature": "CpuCapture.getTraceId()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}