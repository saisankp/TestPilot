{"test_class": {"identifier": "ConcurrentCachePopulatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  Cache<Object, Object> cache;", "modifier": "@Mock", "type": "Cache<Object, Object>", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Mock\n  CacheEntry<Object, Object> entry;", "modifier": "@Mock", "type": "CacheEntry<Object, Object>", "declarator": "entry", "var_name": "entry"}, {"original_string": "ConcurrentCachePopulator<Object, Object> populator;", "modifier": "", "type": "ConcurrentCachePopulator<Object, Object>", "declarator": "populator", "var_name": "populator"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/populator/ConcurrentCachePopulatorTest.java"}, "test_case": {"identifier": "populate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void populate() {\n    Object object = new Object();\n    List<CacheEntry<Object, Object>> entries = new ArrayList<CacheEntry<Object, Object>>();\n    entries.add(entry);\n    doReturn(object).when(entry).getKey();\n    doReturn(object).when(entry).getValue();\n    doReturn(entries).when(populator).loadEntries();\n    doNothing().when(cache).put(object, object);\n    populator.pupulate();\n    try {\n      Thread.sleep(100);\n    } catch (InterruptedException e) {\n    }\n    verify(cache, atLeast(1)).put(object, object);\n    verify(populator).loadEntries();\n  }", "signature": "void populate()", "full_signature": "@Test public void populate()", "class_method_signature": "ConcurrentCachePopulatorTest.populate()", "testcase": true, "constructor": false, "invocations": ["add", "getKey", "when", "doReturn", "getValue", "when", "doReturn", "loadEntries", "when", "doReturn", "put", "when", "doNothing", "pupulate", "sleep", "put", "verify", "atLeast", "loadEntries", "verify"]}, "focal_class": {"identifier": "ConcurrentCachePopulator", "superclass": "extends AbstractCachePopulator<K, V>", "interfaces": "", "fields": [{"original_string": "private final static int DEFAULT_CONCURRENCY_LEVEL = 11;", "modifier": "private final static", "type": "int", "declarator": "DEFAULT_CONCURRENCY_LEVEL = 11", "var_name": "DEFAULT_CONCURRENCY_LEVEL"}, {"original_string": "private final ExecutorService populatorExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "populatorExecutor", "var_name": "populatorExecutor"}, {"original_string": "private int concurrencyLevel;", "modifier": "private", "type": "int", "declarator": "concurrencyLevel", "var_name": "concurrencyLevel"}], "methods": [{"identifier": "ConcurrentCachePopulator", "parameters": "(final Cache<K, V> cache, final int concurrencyLevel)", "modifiers": "public", "return": "", "signature": " ConcurrentCachePopulator(final Cache<K, V> cache, final int concurrencyLevel)", "full_signature": "public  ConcurrentCachePopulator(final Cache<K, V> cache, final int concurrencyLevel)", "class_method_signature": "ConcurrentCachePopulator.ConcurrentCachePopulator(final Cache<K, V> cache, final int concurrencyLevel)", "testcase": false, "constructor": true}, {"identifier": "ConcurrentCachePopulator", "parameters": "(Cache<K, V> cache)", "modifiers": "public", "return": "", "signature": " ConcurrentCachePopulator(Cache<K, V> cache)", "full_signature": "public  ConcurrentCachePopulator(Cache<K, V> cache)", "class_method_signature": "ConcurrentCachePopulator.ConcurrentCachePopulator(Cache<K, V> cache)", "testcase": false, "constructor": true}, {"identifier": "pupulate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pupulate()", "full_signature": "public void pupulate()", "class_method_signature": "ConcurrentCachePopulator.pupulate()", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/populator/ConcurrentCachePopulator.java"}, "focal_method": {"identifier": "pupulate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void pupulate() {\n    final List<CacheEntry<K, V>> entries = loadEntries();\n    if (entries.size() < concurrencyLevel) {\n      concurrencyLevel = entries.size();\n    }\n    final int partition = entries.size() / concurrencyLevel;\n    for (int i = 0; i < concurrencyLevel; i++) {\n      final int start = i * partition;\n      final int stop = i != concurrencyLevel - 1 ? (i + 1) * partition : entries.size();\n      populatorExecutor.execute(() -> {\n        for (int j = start; j < stop; j++) {\n          cache.put(entries.get(j).getKey(), entries.get(j).getValue());\n        }\n      });\n    }\n    populatorExecutor.shutdown();\n  }", "signature": "void pupulate()", "full_signature": "public void pupulate()", "class_method_signature": "ConcurrentCachePopulator.pupulate()", "testcase": false, "constructor": false, "invocations": ["loadEntries", "size", "size", "size", "size", "execute", "put", "getKey", "get", "getValue", "get", "shutdown"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}