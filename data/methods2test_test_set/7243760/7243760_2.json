{"test_class": {"identifier": "BarBuilderNodeDescriptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "series/src/test/java/com/barchart/feed/series/network/BarBuilderNodeDescriptorTest.java"}, "test_case": {"identifier": "testInstantiateBuilderAnalytic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInstantiateBuilderAnalytic() {\n        String symbol = \"ESZ13\";\n        Instrument instr = TestHarness.makeInstrument(symbol);\n        DateTime dt1 = new DateTime(2013, 12, 10, 12, 0, 0);\n        TimeFrameImpl tf1 = new TimeFrameImpl(new Period(PeriodType.TICK, 1), dt1, null);\n        SeriesSubscription sub1 = new SeriesSubscription(\"ESZ13\", instr, \"IO\", new TimeFrameImpl[] { tf1 }, TradingWeekImpl.DEFAULT);\n        \n        BarBuilderNodeDescriptor desc = new BarBuilderNodeDescriptor();\n        desc.setAnalyticClass(BarBuilder.class);\n        desc.setConstructorArg(sub1);\n        try {\n            BarBuilder bb = (BarBuilder)desc.instantiateBuilderAnalytic();\n            assertNotNull(bb);\n        }catch(Exception e) {\n            e.printStackTrace();\n            fail();\n        }\n    }", "signature": "void testInstantiateBuilderAnalytic()", "full_signature": "@Test public void testInstantiateBuilderAnalytic()", "class_method_signature": "BarBuilderNodeDescriptorTest.testInstantiateBuilderAnalytic()", "testcase": true, "constructor": false, "invocations": ["makeInstrument", "setAnalyticClass", "setConstructorArg", "instantiateBuilderAnalytic", "assertNotNull", "printStackTrace", "fail"]}, "focal_class": {"identifier": "BarBuilderNodeDescriptor", "superclass": "", "interfaces": "implements BarBuilderDescriptor", "fields": [{"original_string": "private static final String BASE_STEP_FILE = \"/baseSteps.txt\";", "modifier": "private static final", "type": "String", "declarator": "BASE_STEP_FILE = \"/baseSteps.txt\"", "var_name": "BASE_STEP_FILE"}, {"original_string": "private static List<PeriodType> baseTypeSteps;", "modifier": "private static", "type": "List<PeriodType>", "declarator": "baseTypeSteps", "var_name": "baseTypeSteps"}, {"original_string": "private Class<? extends Analytic> analyticsClass;", "modifier": "private", "type": "Class<? extends Analytic>", "declarator": "analyticsClass", "var_name": "analyticsClass"}, {"original_string": "private Subscription constructorArg;", "modifier": "private", "type": "Subscription", "declarator": "constructorArg", "var_name": "constructorArg"}, {"original_string": "private int[] constructorArgs;", "modifier": "private", "type": "int[]", "declarator": "constructorArgs", "var_name": "constructorArgs"}, {"original_string": "private String outputKey;", "modifier": "private", "type": "String", "declarator": "outputKey", "var_name": "outputKey"}], "methods": [{"identifier": "BarBuilderNodeDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BarBuilderNodeDescriptor()", "full_signature": "public  BarBuilderNodeDescriptor()", "class_method_signature": "BarBuilderNodeDescriptor.BarBuilderNodeDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getNetworkName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNetworkName()", "full_signature": "public String getNetworkName()", "class_method_signature": "BarBuilderNodeDescriptor.getNetworkName()", "testcase": false, "constructor": false}, {"identifier": "setNetworkName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setNetworkName(String name)", "full_signature": "public void setNetworkName(String name)", "class_method_signature": "BarBuilderNodeDescriptor.setNetworkName(String name)", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(String path)", "modifiers": "private static", "return": "void", "signature": "void loadFromFile(String path)", "full_signature": "private static void loadFromFile(String path)", "class_method_signature": "BarBuilderNodeDescriptor.loadFromFile(String path)", "testcase": false, "constructor": false}, {"identifier": "loadFromStream", "parameters": "(InputStream stream)", "modifiers": "private static", "return": "void", "signature": "void loadFromStream(InputStream stream)", "full_signature": "private static void loadFromStream(InputStream stream)", "class_method_signature": "BarBuilderNodeDescriptor.loadFromStream(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "reloadFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reloadFile()", "full_signature": "public void reloadFile()", "class_method_signature": "BarBuilderNodeDescriptor.reloadFile()", "testcase": false, "constructor": false}, {"identifier": "reloadStream", "parameters": "(InputStream stream)", "modifiers": "public", "return": "void", "signature": "void reloadStream(InputStream stream)", "full_signature": "public void reloadStream(InputStream stream)", "class_method_signature": "BarBuilderNodeDescriptor.reloadStream(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getLowerBaseType", "parameters": "(PeriodType type)", "modifiers": "static", "return": "PeriodType", "signature": "PeriodType getLowerBaseType(PeriodType type)", "full_signature": "static PeriodType getLowerBaseType(PeriodType type)", "class_method_signature": "BarBuilderNodeDescriptor.getLowerBaseType(PeriodType type)", "testcase": false, "constructor": false}, {"identifier": "getLowerSubscription", "parameters": "(SeriesSubscription input)", "modifiers": "public static", "return": "SeriesSubscription", "signature": "SeriesSubscription getLowerSubscription(SeriesSubscription input)", "full_signature": "public static SeriesSubscription getLowerSubscription(SeriesSubscription input)", "class_method_signature": "BarBuilderNodeDescriptor.getLowerSubscription(SeriesSubscription input)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "BarBuilderNodeDescriptor.toString()", "testcase": false, "constructor": false}, {"identifier": "getAnalyticClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<? extends Analytic>", "signature": "Class<? extends Analytic> getAnalyticClass()", "full_signature": "@Override public Class<? extends Analytic> getAnalyticClass()", "class_method_signature": "BarBuilderNodeDescriptor.getAnalyticClass()", "testcase": false, "constructor": false}, {"identifier": "setAnalyticClass", "parameters": "(Class<? extends Analytic> clazz)", "modifiers": "@Override public", "return": "void", "signature": "void setAnalyticClass(Class<? extends Analytic> clazz)", "full_signature": "@Override public void setAnalyticClass(Class<? extends Analytic> clazz)", "class_method_signature": "BarBuilderNodeDescriptor.setAnalyticClass(Class<? extends Analytic> clazz)", "testcase": false, "constructor": false}, {"identifier": "getConstructorArgs", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getConstructorArgs()", "full_signature": "@Override public int[] getConstructorArgs()", "class_method_signature": "BarBuilderNodeDescriptor.getConstructorArgs()", "testcase": false, "constructor": false}, {"identifier": "setConstructorArgs", "parameters": "(int[] args)", "modifiers": "@Override public", "return": "void", "signature": "void setConstructorArgs(int[] args)", "full_signature": "@Override public void setConstructorArgs(int[] args)", "class_method_signature": "BarBuilderNodeDescriptor.setConstructorArgs(int[] args)", "testcase": false, "constructor": false}, {"identifier": "getOutputKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getOutputKey()", "full_signature": "@Override public String getOutputKey()", "class_method_signature": "BarBuilderNodeDescriptor.getOutputKey()", "testcase": false, "constructor": false}, {"identifier": "setOutputKey", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputKey(String key)", "full_signature": "@Override public void setOutputKey(String key)", "class_method_signature": "BarBuilderNodeDescriptor.setOutputKey(String key)", "testcase": false, "constructor": false}, {"identifier": "instantiateAnalytic", "parameters": "()", "modifiers": "@Override public", "return": "Analytic", "signature": "Analytic instantiateAnalytic()", "full_signature": "@Override public Analytic instantiateAnalytic()", "class_method_signature": "BarBuilderNodeDescriptor.instantiateAnalytic()", "testcase": false, "constructor": false}, {"identifier": "instantiateBuilderAnalytic", "parameters": "()", "modifiers": "@Override public", "return": "Analytic", "signature": "Analytic instantiateBuilderAnalytic()", "full_signature": "@Override public Analytic instantiateBuilderAnalytic()", "class_method_signature": "BarBuilderNodeDescriptor.instantiateBuilderAnalytic()", "testcase": false, "constructor": false}, {"identifier": "getSpecifier", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSpecifier()", "full_signature": "@Override public String getSpecifier()", "class_method_signature": "BarBuilderNodeDescriptor.getSpecifier()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType getType()", "full_signature": "@Override public NodeType getType()", "class_method_signature": "BarBuilderNodeDescriptor.getType()", "testcase": false, "constructor": false}, {"identifier": "getConstructorArg", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T getConstructorArg()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T getConstructorArg()", "class_method_signature": "BarBuilderNodeDescriptor.getConstructorArg()", "testcase": false, "constructor": false}, {"identifier": "setConstructorArg", "parameters": "(T arg)", "modifiers": "@Override public", "return": "void", "signature": "void setConstructorArg(T arg)", "full_signature": "@Override public void setConstructorArg(T arg)", "class_method_signature": "BarBuilderNodeDescriptor.setConstructorArg(T arg)", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/network/BarBuilderNodeDescriptor.java"}, "focal_method": {"identifier": "instantiateBuilderAnalytic", "parameters": "()", "modifiers": "@Override public", "return": "Analytic", "body": "@Override\n    public Analytic instantiateBuilderAnalytic() {\n        Constructor<?>[] constructorArray = analyticsClass.getDeclaredConstructors();\n        for (Constructor<?> constructor : constructorArray) {\n            constructor.setAccessible(true);\n            Class<?>[] parameterTypes = constructor.getParameterTypes();\n            if(parameterTypes.length == 1 && (getConstructorArg().getClass().equals(parameterTypes[0]))) {\n                try {\n                    return (Analytic)constructor.newInstance(new Object[] { getConstructorArg() });\n                }catch(Exception e) { e.printStackTrace(); }\n            }\n        }\n        throw new IllegalStateException(\"Unable to instantiate Analytic class using constructor containing \" + \n             \"1 arguments of type <S extends Subscription> using argument: [s=\" + getConstructorArg().getClass().getName() + \"]\");\n    }", "signature": "Analytic instantiateBuilderAnalytic()", "full_signature": "@Override public Analytic instantiateBuilderAnalytic()", "class_method_signature": "BarBuilderNodeDescriptor.instantiateBuilderAnalytic()", "testcase": false, "constructor": false, "invocations": ["getDeclaredConstructors", "setAccessible", "getParameterTypes", "equals", "getClass", "getConstructorArg", "newInstance", "getConstructorArg", "printStackTrace", "getName", "getClass", "getConstructorArg"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}