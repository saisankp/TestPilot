{"test_class": {"identifier": "SequenceDescriptorAttributesParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GROUP_NAME = \"groupname\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_NAME = \"groupname\"", "var_name": "GROUP_NAME"}, {"original_string": "private static final String SEQUENCE_HANDLER_CLASS_NAME = \"sequence-handler-class-name\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_HANDLER_CLASS_NAME = \"sequence-handler-class-name\"", "var_name": "SEQUENCE_HANDLER_CLASS_NAME"}, {"original_string": "private static final String SEQUENCE_DESCRIPTOR_NAME = \"sequence-descriptor-name\";", "modifier": "private static final", "type": "String", "declarator": "SEQUENCE_DESCRIPTOR_NAME = \"sequence-descriptor-name\"", "var_name": "SEQUENCE_DESCRIPTOR_NAME"}, {"original_string": "@Mock\n    private SequenceHandlerInitializer sequenceHandlerInitializer;", "modifier": "@Mock\n    private", "type": "SequenceHandlerInitializer", "declarator": "sequenceHandlerInitializer", "var_name": "sequenceHandlerInitializer"}, {"original_string": "@Mock\n    private StubConfigurationAccess stubConfigurationAccess;", "modifier": "@Mock\n    private", "type": "StubConfigurationAccess", "declarator": "stubConfigurationAccess", "var_name": "stubConfigurationAccess"}, {"original_string": "@InjectMocks\n    private SequenceDescriptorAttributesParser underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceDescriptorAttributesParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Element element;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "element", "var_name": "element"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private PropertyDto value;", "modifier": "@Mock\n    private", "type": "PropertyDto", "declarator": "value", "var_name": "value"}, {"original_string": "@Mock\n    private Element documentElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "documentElement", "var_name": "documentElement"}, {"original_string": "@Mock\n    private NodeList nodes;", "modifier": "@Mock\n    private", "type": "NodeList", "declarator": "nodes", "var_name": "nodes"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/SequenceDescriptorAttributesParserTest.java"}, "test_case": {"identifier": "testParseNodeWhenThereIsNoParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodeWhenThereIsNoParameter() {\n        //GIVEN\n        given(nodes.getLength()).willReturn(0);\n        given(element.getAttribute(\"name\")).willReturn(SEQUENCE_DESCRIPTOR_NAME);\n        given(element.getAttribute(\"class\")).willReturn(SEQUENCE_HANDLER_CLASS_NAME);\n        given(element.getAttribute(\"timeout\")).willReturn(\"\");\n        given(stubConfigurationAccess.getProperties()).willReturn(value);\n        given(value.getDefaultSequenceTimeout()).willReturn(9000L);\n        DummySequenceHandler dummySequenceHandler = new DummySequenceHandler();\n        given(sequenceHandlerInitializer.getExternalClassObject(SEQUENCE_HANDLER_CLASS_NAME)).willReturn(dummySequenceHandler);\n        //WHEN\n        SequenceDescriptorAttributes result = underTest.parseNode(element, document);\n        //THEN\n        assertEquals(SEQUENCE_DESCRIPTOR_NAME, result.getName());\n        assertEquals(9000L, result.getDefaultTimeout());\n        assertEquals(GROUP_NAME, result.getGroupName());\n        assertEquals(dummySequenceHandler, result.getHandler());\n    }", "signature": "void testParseNodeWhenThereIsNoParameter()", "full_signature": "@Test public void testParseNodeWhenThereIsNoParameter()", "class_method_signature": "SequenceDescriptorAttributesParserTest.testParseNodeWhenThereIsNoParameter()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getLength", "willReturn", "given", "getAttribute", "willReturn", "given", "getAttribute", "willReturn", "given", "getAttribute", "willReturn", "given", "getProperties", "willReturn", "given", "getDefaultSequenceTimeout", "willReturn", "given", "getExternalClassObject", "parseNode", "assertEquals", "getName", "assertEquals", "getDefaultTimeout", "assertEquals", "getGroupName", "assertEquals", "getHandler"]}, "focal_class": {"identifier": "SequenceDescriptorAttributesParser", "superclass": "", "interfaces": "implements NodeParser<SequenceDescriptorAttributes>", "fields": [{"original_string": "@Autowired\n    private SequenceHandlerInitializer sequenceHandlerInitializer;", "modifier": "@Autowired\n    private", "type": "SequenceHandlerInitializer", "declarator": "sequenceHandlerInitializer", "var_name": "sequenceHandlerInitializer"}, {"original_string": "@Autowired\n    private StubConfigurationAccess stubConfigurationAccess;", "modifier": "@Autowired\n    private", "type": "StubConfigurationAccess", "declarator": "stubConfigurationAccess", "var_name": "stubConfigurationAccess"}], "methods": [{"identifier": "parseNode", "parameters": "(final Node node, final Document document)", "modifiers": "@Override public", "return": "SequenceDescriptorAttributes", "signature": "SequenceDescriptorAttributes parseNode(final Node node, final Document document)", "full_signature": "@Override public SequenceDescriptorAttributes parseNode(final Node node, final Document document)", "class_method_signature": "SequenceDescriptorAttributesParser.parseNode(final Node node, final Document document)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "(final Element sequenceElement)", "modifiers": "private", "return": "ParameterList", "signature": "ParameterList getParameters(final Element sequenceElement)", "full_signature": "private ParameterList getParameters(final Element sequenceElement)", "class_method_signature": "SequenceDescriptorAttributesParser.getParameters(final Element sequenceElement)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "(final Element sequenceElement)", "modifiers": "private", "return": "long", "signature": "long getTimeout(final Element sequenceElement)", "full_signature": "private long getTimeout(final Element sequenceElement)", "class_method_signature": "SequenceDescriptorAttributesParser.getTimeout(final Element sequenceElement)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/SequenceDescriptorAttributesParser.java"}, "focal_method": {"identifier": "parseNode", "parameters": "(final Node node, final Document document)", "modifiers": "@Override public", "return": "SequenceDescriptorAttributes", "body": "@Override\n    public SequenceDescriptorAttributes parseNode(final Node node, final Document document) {\n        SequenceDescriptorAttributes result;\n        Element sequenceElement = (Element) node;\n        String groupName = document.getDocumentElement().getAttribute(\"groupname\");\n        String name = sequenceElement.getAttribute(\"name\");\n        String sequenceHandlerClassName = sequenceElement.getAttribute(\"class\");\n        long timeout = getTimeout(sequenceElement);\n        ParameterList parameters = getParameters(sequenceElement);\n        SequenceHandler sequenceHandler = sequenceHandlerInitializer.getExternalClassObject(sequenceHandlerClassName);\n        result = new SequenceDescriptorAttributes.Builder().handler(sequenceHandler).name(name).groupname(groupName).defaultTimeout(timeout)\n                .parameterList(parameters).build();\n        return result;\n    }", "signature": "SequenceDescriptorAttributes parseNode(final Node node, final Document document)", "full_signature": "@Override public SequenceDescriptorAttributes parseNode(final Node node, final Document document)", "class_method_signature": "SequenceDescriptorAttributesParser.parseNode(final Node node, final Document document)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getDocumentElement", "getAttribute", "getAttribute", "getTimeout", "getParameters", "getExternalClassObject", "build", "parameterList", "defaultTimeout", "groupname", "name", "handler"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}