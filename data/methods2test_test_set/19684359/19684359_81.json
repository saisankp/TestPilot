{"test_class": {"identifier": "LazyExecutorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LazyExecutorService lazyExecutorService;", "modifier": "private", "type": "LazyExecutorService", "declarator": "lazyExecutorService", "var_name": "lazyExecutorService"}], "file": "util/src/test/java/com/google/cloud/hadoop/util/LazyExecutorServiceTest.java"}, "test_case": {"identifier": "testInvokeAllSubmitAllTasksWithTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInvokeAllSubmitAllTasksWithTimeout() throws Exception {\n    List<Callable<Void>> tasks = ImmutableList.of(() -> null, () -> null);\n    List<Future<Void>> futures = lazyExecutorService.invokeAll(tasks, 1, TimeUnit.MILLISECONDS);\n    assertThat(futures).hasSize(2);\n  }", "signature": "void testInvokeAllSubmitAllTasksWithTimeout()", "full_signature": "@Test public void testInvokeAllSubmitAllTasksWithTimeout()", "class_method_signature": "LazyExecutorServiceTest.testInvokeAllSubmitAllTasksWithTimeout()", "testcase": true, "constructor": false, "invocations": ["of", "invokeAll", "hasSize", "assertThat"]}, "focal_class": {"identifier": "LazyExecutorService", "superclass": "", "interfaces": "implements ExecutorService", "fields": [{"original_string": "private volatile boolean shutdown = false;", "modifier": "private volatile", "type": "boolean", "declarator": "shutdown = false", "var_name": "shutdown"}, {"original_string": "private final ExecutorService backingService;", "modifier": "private final", "type": "ExecutorService", "declarator": "backingService", "var_name": "backingService"}, {"original_string": "private final CountDownLatch terminated = new CountDownLatch(1);", "modifier": "private final", "type": "CountDownLatch", "declarator": "terminated = new CountDownLatch(1)", "var_name": "terminated"}, {"original_string": "private final Set<ExecutingFuture<?>> pendingTasks =\n      Collections.newSetFromMap(new MapMaker().weakKeys().<ExecutingFuture<?>, Boolean>makeMap());", "modifier": "private final", "type": "Set<ExecutingFuture<?>>", "declarator": "pendingTasks =\n      Collections.newSetFromMap(new MapMaker().weakKeys().<ExecutingFuture<?>, Boolean>makeMap())", "var_name": "pendingTasks"}, {"original_string": "private final ReentrantLock tasksAndTerminationLock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "tasksAndTerminationLock = new ReentrantLock()", "var_name": "tasksAndTerminationLock"}], "methods": [{"identifier": "LazyExecutorService", "parameters": "()", "modifiers": "public", "return": "", "signature": " LazyExecutorService()", "full_signature": "public  LazyExecutorService()", "class_method_signature": "LazyExecutorService.LazyExecutorService()", "testcase": false, "constructor": true}, {"identifier": "LazyExecutorService", "parameters": "(ExecutorService backingService)", "modifiers": "public", "return": "", "signature": " LazyExecutorService(ExecutorService backingService)", "full_signature": "public  LazyExecutorService(ExecutorService backingService)", "class_method_signature": "LazyExecutorService.LazyExecutorService(ExecutorService backingService)", "testcase": false, "constructor": true}, {"identifier": "removePendingTask", "parameters": "(ExecutingFutureImpl<?> f)", "modifiers": "private", "return": "void", "signature": "void removePendingTask(ExecutingFutureImpl<?> f)", "full_signature": "private void removePendingTask(ExecutingFutureImpl<?> f)", "class_method_signature": "LazyExecutorService.removePendingTask(ExecutingFutureImpl<?> f)", "testcase": false, "constructor": false}, {"identifier": "updateTerminationState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateTerminationState()", "full_signature": "private void updateTerminationState()", "class_method_signature": "LazyExecutorService.updateTerminationState()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "LazyExecutorService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "()", "modifiers": "@CanIgnoreReturnValue @Override public", "return": "List<Runnable>", "signature": "List<Runnable> shutdownNow()", "full_signature": "@CanIgnoreReturnValue @Override public List<Runnable> shutdownNow()", "class_method_signature": "LazyExecutorService.shutdownNow()", "testcase": false, "constructor": false}, {"identifier": "isShutdown", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isShutdown()", "full_signature": "@Override public boolean isShutdown()", "class_method_signature": "LazyExecutorService.isShutdown()", "testcase": false, "constructor": false}, {"identifier": "checkBackingService", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkBackingService()", "full_signature": "private void checkBackingService()", "class_method_signature": "LazyExecutorService.checkBackingService()", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "@Override public boolean isTerminated()", "class_method_signature": "LazyExecutorService.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "awaitTermination", "parameters": "(long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean awaitTermination(long timeout, TimeUnit unit)", "full_signature": "@Override public boolean awaitTermination(long timeout, TimeUnit unit)", "class_method_signature": "LazyExecutorService.awaitTermination(long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(final Callable<T> task)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(final Callable<T> task)", "full_signature": "@Override public Future<T> submit(final Callable<T> task)", "class_method_signature": "LazyExecutorService.submit(final Callable<T> task)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable task, T result)", "modifiers": "@Override public", "return": "Future<T>", "signature": "Future<T> submit(Runnable task, T result)", "full_signature": "@Override public Future<T> submit(Runnable task, T result)", "class_method_signature": "LazyExecutorService.submit(Runnable task, T result)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "Future<?>", "signature": "Future<?> submit(Runnable command)", "full_signature": "@Override public Future<?> submit(Runnable command)", "class_method_signature": "LazyExecutorService.submit(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@CanIgnoreReturnValue @Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "full_signature": "@CanIgnoreReturnValue @Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "class_method_signature": "LazyExecutorService.invokeAll(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAll", "parameters": "(\n      Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)", "modifiers": "@CanIgnoreReturnValue @Override public", "return": "List<Future<T>>", "signature": "List<Future<T>> invokeAll(\n      Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)", "full_signature": "@CanIgnoreReturnValue @Override public List<Future<T>> invokeAll(\n      Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)", "class_method_signature": "LazyExecutorService.invokeAll(\n      Collection<? extends Callable<T>> tasks, final long timeout, final TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "createMonitorTasksFor", "parameters": "(\n      List<Future<T>> futures, long timeout, @Nullable TimeUnit unit)", "modifiers": "private static", "return": "List<Callable<Void>>", "signature": "List<Callable<Void>> createMonitorTasksFor(\n      List<Future<T>> futures, long timeout, @Nullable TimeUnit unit)", "full_signature": "private static List<Callable<Void>> createMonitorTasksFor(\n      List<Future<T>> futures, long timeout, @Nullable TimeUnit unit)", "class_method_signature": "LazyExecutorService.createMonitorTasksFor(\n      List<Future<T>> futures, long timeout, @Nullable TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(Collection<? extends Callable<T>> tasks)", "full_signature": "@Override public T invokeAny(Collection<? extends Callable<T>> tasks)", "class_method_signature": "LazyExecutorService.invokeAny(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false}, {"identifier": "invokeAny", "parameters": "(\n      final Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "modifiers": "@Override public", "return": "T", "signature": "T invokeAny(\n      final Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "full_signature": "@Override public T invokeAny(\n      final Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "class_method_signature": "LazyExecutorService.invokeAny(\n      final Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Runnable command)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable command)", "full_signature": "@Override public void execute(Runnable command)", "class_method_signature": "LazyExecutorService.execute(Runnable command)", "testcase": false, "constructor": false}], "file": "util/src/main/java/com/google/cloud/hadoop/util/LazyExecutorService.java"}, "focal_method": {"identifier": "invokeAll", "parameters": "(Collection<? extends Callable<T>> tasks)", "modifiers": "@CanIgnoreReturnValue @Override public", "return": "List<Future<T>>", "body": "@CanIgnoreReturnValue\n  @Override\n  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)\n      throws InterruptedException {\n    List<Future<T>> result = Lists.newLinkedList();\n    try {\n      for (Callable<T> task : tasks) {\n        result.add(submit(task));\n      }\n      List<Callable<Void>> monitorTasks = createMonitorTasksFor(result, 0, null);\n      backingService.invokeAll(monitorTasks);\n    } finally {\n      // Clean up. These are no-ops for completed tasks.\n      for (Future<T> future : result) {\n        future.cancel(true);\n      }\n    }\n    return result;\n  }", "signature": "List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "full_signature": "@CanIgnoreReturnValue @Override public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)", "class_method_signature": "LazyExecutorService.invokeAll(Collection<? extends Callable<T>> tasks)", "testcase": false, "constructor": false, "invocations": ["newLinkedList", "add", "submit", "createMonitorTasksFor", "invokeAll", "cancel"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}