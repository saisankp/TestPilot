{"test_class": {"identifier": "NormalizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Normalizer normalizer;", "modifier": "private", "type": "Normalizer", "declarator": "normalizer", "var_name": "normalizer"}, {"original_string": "private double[] values;", "modifier": "private", "type": "double[]", "declarator": "values", "var_name": "values"}], "file": "recognito/src/test/java/com/bitsinharmony/recognito/enhancements/NormalizerTest.java"}, "test_case": {"identifier": "normalizingValuesContainingMinusOneIsANoOp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void normalizingValuesContainingMinusOneIsANoOp() {\n        Arrays.fill(values, 0.1d);\n        values[10] = -1.0d;\n        double[] values2 = Arrays.copyOf(values, values.length);\n        \n        double gainMultiplier = normalizer.normalize(values, 22050.0f);\n\n        assertThat(gainMultiplier, is(equalTo(1.0d)));\n        assertThat(values, is(equalTo(values2)));\n    }", "signature": "void normalizingValuesContainingMinusOneIsANoOp()", "full_signature": "@Test public void normalizingValuesContainingMinusOneIsANoOp()", "class_method_signature": "NormalizerTest.normalizingValuesContainingMinusOneIsANoOp()", "testcase": true, "constructor": false, "invocations": ["fill", "copyOf", "normalize", "assertThat", "is", "equalTo", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "Normalizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "normalize", "parameters": "(double[] audioSample, float sampleRate)", "modifiers": "public", "return": "double", "signature": "double normalize(double[] audioSample, float sampleRate)", "full_signature": "public double normalize(double[] audioSample, float sampleRate)", "class_method_signature": "Normalizer.normalize(double[] audioSample, float sampleRate)", "testcase": false, "constructor": false}], "file": "recognito/src/main/java/com/bitsinharmony/recognito/enhancements/Normalizer.java"}, "focal_method": {"identifier": "normalize", "parameters": "(double[] audioSample, float sampleRate)", "modifiers": "public", "return": "double", "body": "public double normalize(double[] audioSample, float sampleRate) {\n\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < audioSample.length; i++) {\n            double abs = Math.abs(audioSample[i]);\n            if (abs > max) {\n                max = abs;\n            }\n        }\n        if(max > 1.0d) {\n            throw new IllegalArgumentException(\"Expected value for audio are in the range -1.0 <= v <= 1.0 \");\n        }\n        if (max < 5 * Math.ulp(0.0d)) { // ulp of 0.0 is extremely small ! i.e. as small as it can get\n            return 1.0d;\n        }\n        for (int i = 0; i < audioSample.length; i++) {\n            audioSample[i] /= max;\n        }\n        return 1.0d / max;\n    }", "signature": "double normalize(double[] audioSample, float sampleRate)", "full_signature": "public double normalize(double[] audioSample, float sampleRate)", "class_method_signature": "Normalizer.normalize(double[] audioSample, float sampleRate)", "testcase": false, "constructor": false, "invocations": ["abs", "ulp"]}, "repository": {"repo_id": 16597144, "url": "https://github.com/amaurycrickx/recognito", "language": "Java", "is_fork": false, "fork_count": 100, "stargazer_count": 173, "size": 76, "license": "licensed"}}