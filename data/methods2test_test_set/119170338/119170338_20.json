{"test_class": {"identifier": "ScoreDistributionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScoreDistribution dist1;", "modifier": "private", "type": "ScoreDistribution", "declarator": "dist1", "var_name": "dist1"}, {"original_string": "private ScoreDistribution dist2;", "modifier": "private", "type": "ScoreDistribution", "declarator": "dist2", "var_name": "dist2"}, {"original_string": "private final TermId tid1 = TermId.of(\"HP:1\");", "modifier": "private final", "type": "TermId", "declarator": "tid1 = TermId.of(\"HP:1\")", "var_name": "tid1"}, {"original_string": "private final TermId tid2 = TermId.of(\"HP:2\");", "modifier": "private final", "type": "TermId", "declarator": "tid2 = TermId.of(\"HP:2\")", "var_name": "tid2"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/scoredist/ScoreDistributionsTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test() {\n    ScoreDistribution result = ScoreDistributions.merge(dist1, dist2);\n    assertEquals(2, result.getNumTerms());\n    assertEquals(\"[HP:1, HP:2]\", ImmutableSortedSet.copyOf(result.getObjectIds()).toString());\n    assertEquals(tid1, result.getObjectScoreDistribution(tid1).getObjectId());\n    assertEquals(tid2, result.getObjectScoreDistribution(tid2).getObjectId());\n  }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ScoreDistributionsTest.test()", "testcase": true, "constructor": false, "invocations": ["merge", "assertEquals", "getNumTerms", "assertEquals", "toString", "copyOf", "getObjectIds", "assertEquals", "getObjectId", "getObjectScoreDistribution", "assertEquals", "getObjectId", "getObjectScoreDistribution"]}, "focal_class": {"identifier": "ScoreDistributions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "merge", "parameters": "(Collection<? extends ScoreDistribution> distributions)", "modifiers": "public static", "return": "ScoreDistribution", "signature": "ScoreDistribution merge(Collection<? extends ScoreDistribution> distributions)", "full_signature": "public static ScoreDistribution merge(Collection<? extends ScoreDistribution> distributions)", "class_method_signature": "ScoreDistributions.merge(Collection<? extends ScoreDistribution> distributions)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(ScoreDistribution... distributions)", "modifiers": "public static", "return": "ScoreDistribution", "signature": "ScoreDistribution merge(ScoreDistribution... distributions)", "full_signature": "public static ScoreDistribution merge(ScoreDistribution... distributions)", "class_method_signature": "ScoreDistributions.merge(ScoreDistribution... distributions)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/scoredist/ScoreDistributions.java"}, "focal_method": {"identifier": "merge", "parameters": "(Collection<? extends ScoreDistribution> distributions)", "modifiers": "public static", "return": "ScoreDistribution", "body": "public static ScoreDistribution merge(Collection<? extends ScoreDistribution> distributions) {\n    if (distributions.isEmpty()) {\n      throw new CannotMergeScoreDistributions(\"Cannot merge zero ScoreDistributions objects.\");\n    }\n    if (distributions.stream().map(ScoreDistribution::getNumTerms).collect(Collectors.toSet()).size() != 1) {\n      throw new CannotMergeScoreDistributions(\"Different numbers of terms used for precomputation\");\n    }\n\n    Map<TermId, ObjectScoreDistribution> mapping = new HashMap<>();\n    for (ScoreDistribution d : distributions) {\n      for (TermId objectId : d.getObjectIds()) {\n        final ObjectScoreDistribution dist = d.getObjectScoreDistribution(objectId);\n        if (mapping.containsKey(objectId)) {\n          throw new CannotMergeScoreDistributions(\"Duplicate object ID \" + objectId + \" detected\");\n        } else {\n          mapping.put(objectId, dist);\n        }\n      }\n    }\n\n    return new ScoreDistribution(distributions.stream().findAny().get().getNumTerms(), mapping);\n  }", "signature": "ScoreDistribution merge(Collection<? extends ScoreDistribution> distributions)", "full_signature": "public static ScoreDistribution merge(Collection<? extends ScoreDistribution> distributions)", "class_method_signature": "ScoreDistributions.merge(Collection<? extends ScoreDistribution> distributions)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "size", "collect", "map", "stream", "toSet", "getObjectIds", "getObjectScoreDistribution", "containsKey", "put", "getNumTerms", "get", "findAny", "stream"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}