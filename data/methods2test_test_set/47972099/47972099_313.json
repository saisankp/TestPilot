{"test_class": {"identifier": "PipelinedSubpartitionTest", "superclass": "extends SubpartitionTestBase", "interfaces": "", "fields": [{"original_string": "private final static ExecutorService executorService = Executors.newCachedThreadPool();", "modifier": "private final static", "type": "ExecutorService", "declarator": "executorService = Executors.newCachedThreadPool()", "var_name": "executorService"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionTest.java"}, "test_case": {"identifier": "testIllegalReadViewRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIllegalReadViewRequest() throws Exception {\n\t\tfinal PipelinedSubpartition subpartition = createSubpartition();\n\n\t\t// Successful request\n\t\tassertNotNull(subpartition.createReadView(null));\n\n\t\ttry {\n\t\t\tsubpartition.createReadView(null);\n\n\t\t\tfail(\"Did not throw expected exception after duplicate read view request.\");\n\t\t}\n\t\tcatch (IllegalStateException expected) {\n\t\t}\n\t}", "signature": "void testIllegalReadViewRequest()", "full_signature": "@Test public void testIllegalReadViewRequest()", "class_method_signature": "PipelinedSubpartitionTest.testIllegalReadViewRequest()", "testcase": true, "constructor": false, "invocations": ["createSubpartition", "assertNotNull", "createReadView", "createReadView", "fail"]}, "focal_class": {"identifier": "PipelinedSubpartition", "superclass": "extends ResultSubpartition", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PipelinedSubpartition.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PipelinedSubpartition.class)", "var_name": "LOG"}, {"original_string": "private boolean isFinished;", "modifier": "private", "type": "boolean", "declarator": "isFinished", "var_name": "isFinished"}, {"original_string": "private volatile boolean isReleased;", "modifier": "private volatile", "type": "boolean", "declarator": "isReleased", "var_name": "isReleased"}, {"original_string": "private NotificationListener registeredListener;", "modifier": "private", "type": "NotificationListener", "declarator": "registeredListener", "var_name": "registeredListener"}, {"original_string": "private PipelinedSubpartitionView readView;", "modifier": "private", "type": "PipelinedSubpartitionView", "declarator": "readView", "var_name": "readView"}, {"original_string": "final ArrayDeque<Buffer> buffers = new ArrayDeque<Buffer>();", "modifier": "final", "type": "ArrayDeque<Buffer>", "declarator": "buffers = new ArrayDeque<Buffer>()", "var_name": "buffers"}], "methods": [{"identifier": "PipelinedSubpartition", "parameters": "(int index, ResultPartition parent)", "modifiers": "", "return": "", "signature": " PipelinedSubpartition(int index, ResultPartition parent)", "full_signature": "  PipelinedSubpartition(int index, ResultPartition parent)", "class_method_signature": "PipelinedSubpartition.PipelinedSubpartition(int index, ResultPartition parent)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Buffer buffer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Buffer buffer)", "full_signature": "@Override public boolean add(Buffer buffer)", "class_method_signature": "PipelinedSubpartition.add(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finish()", "full_signature": "@Override public void finish()", "class_method_signature": "PipelinedSubpartition.finish()", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void release()", "full_signature": "@Override public void release()", "class_method_signature": "PipelinedSubpartition.release()", "testcase": false, "constructor": false}, {"identifier": "releaseMemory", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int releaseMemory()", "full_signature": "@Override public int releaseMemory()", "class_method_signature": "PipelinedSubpartition.releaseMemory()", "testcase": false, "constructor": false}, {"identifier": "isReleased", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReleased()", "full_signature": "@Override public boolean isReleased()", "class_method_signature": "PipelinedSubpartition.isReleased()", "testcase": false, "constructor": false}, {"identifier": "createReadView", "parameters": "(BufferProvider bufferProvider)", "modifiers": "@Override public", "return": "PipelinedSubpartitionView", "signature": "PipelinedSubpartitionView createReadView(BufferProvider bufferProvider)", "full_signature": "@Override public PipelinedSubpartitionView createReadView(BufferProvider bufferProvider)", "class_method_signature": "PipelinedSubpartition.createReadView(BufferProvider bufferProvider)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PipelinedSubpartition.toString()", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(NotificationListener listener)", "modifiers": "", "return": "boolean", "signature": "boolean registerListener(NotificationListener listener)", "full_signature": " boolean registerListener(NotificationListener listener)", "class_method_signature": "PipelinedSubpartition.registerListener(NotificationListener listener)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java"}, "focal_method": {"identifier": "createReadView", "parameters": "(BufferProvider bufferProvider)", "modifiers": "@Override public", "return": "PipelinedSubpartitionView", "body": "@Override\n\tpublic PipelinedSubpartitionView createReadView(BufferProvider bufferProvider) {\n\t\tsynchronized (buffers) {\n\t\t\tif (readView != null) {\n\t\t\t\tthrow new IllegalStateException(\"Subpartition \" + index + \" of \"\n\t\t\t\t\t\t+ parent.getPartitionId() + \" is being or already has been \" +\n\t\t\t\t\t\t\"consumed, but pipelined subpartitions can only be consumed once.\");\n\t\t\t}\n\n\t\t\treadView = new PipelinedSubpartitionView(this);\n\n\t\t\tLOG.debug(\"Created read view for subpartition {} of partition {}.\", index, parent.getPartitionId());\n\n\t\t\treturn readView;\n\t\t}\n\t}", "signature": "PipelinedSubpartitionView createReadView(BufferProvider bufferProvider)", "full_signature": "@Override public PipelinedSubpartitionView createReadView(BufferProvider bufferProvider)", "class_method_signature": "PipelinedSubpartition.createReadView(BufferProvider bufferProvider)", "testcase": false, "constructor": false, "invocations": ["getPartitionId", "debug", "getPartitionId"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}