{"test_class": {"identifier": "AbstractLoadBalanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractLoadBalance balance = new AbstractLoadBalance() {\n        @Override\n        protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n            return null;\n        }\n    };", "modifier": "private", "type": "AbstractLoadBalance", "declarator": "balance = new AbstractLoadBalance() {\n        @Override\n        protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n            return null;\n        }\n    }", "var_name": "balance"}], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalanceTest.java"}, "test_case": {"identifier": "testGetWeight", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetWeight() {\n        RpcInvocation invocation = new RpcInvocation();\n        invocation.setMethodName(\"say\");\n\n        Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());\n        URL url1 = new URL(\"\", \"\", 0, \"DemoService\", new HashMap<>());\n        url1 = url1.addParameter(TIMESTAMP_KEY, System.currentTimeMillis() - Integer.MAX_VALUE - 1);\n        given(invoker1.getUrl()).willReturn(url1);\n\n        Invoker invoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());\n        URL url2 = new URL(\"\", \"\", 0, \"DemoService\", new HashMap<>());\n        url2 = url2.addParameter(TIMESTAMP_KEY, System.currentTimeMillis() - 10 * 60 * 1000L - 1);\n        given(invoker2.getUrl()).willReturn(url2);\n\n        Assertions.assertEquals(balance.getWeight(invoker1, invocation), balance.getWeight(invoker2, invocation));\n    }", "signature": "void testGetWeight()", "full_signature": "@Test public void testGetWeight()", "class_method_signature": "AbstractLoadBalanceTest.testGetWeight()", "testcase": true, "constructor": false, "invocations": ["setMethodName", "mock", "stubOnly", "withSettings", "addParameter", "currentTimeMillis", "willReturn", "given", "getUrl", "mock", "stubOnly", "withSettings", "addParameter", "currentTimeMillis", "willReturn", "given", "getUrl", "assertEquals", "getWeight", "getWeight"]}, "focal_class": {"identifier": "AbstractLoadBalance", "superclass": "", "interfaces": "implements LoadBalance", "fields": [], "methods": [{"identifier": "calculateWarmupWeight", "parameters": "(int uptime, int warmup, int weight)", "modifiers": "static", "return": "int", "signature": "int calculateWarmupWeight(int uptime, int warmup, int weight)", "full_signature": "static int calculateWarmupWeight(int uptime, int warmup, int weight)", "class_method_signature": "AbstractLoadBalance.calculateWarmupWeight(int uptime, int warmup, int weight)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override public", "return": "Invoker<T>", "signature": "Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override public Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "AbstractLoadBalance.select(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "doSelect", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "protected abstract", "return": "Invoker<T>", "signature": "Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "protected abstract Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "AbstractLoadBalance.doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getWeight", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "", "return": "int", "signature": "int getWeight(Invoker<?> invoker, Invocation invocation)", "full_signature": " int getWeight(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "AbstractLoadBalance.getWeight(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java"}, "focal_method": {"identifier": "getWeight", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "", "return": "int", "body": "int getWeight(Invoker<?> invoker, Invocation invocation) {\n        int weight;\n        URL url = invoker.getUrl();\n        // Multiple registry scenario, load balance among multiple registries.\n        if (REGISTRY_SERVICE_REFERENCE_PATH.equals(url.getServiceInterface())) {\n            weight = url.getParameter(REGISTRY_KEY + \".\" + WEIGHT_KEY, DEFAULT_WEIGHT);\n        } else {\n            weight = url.getMethodParameter(invocation.getMethodName(), WEIGHT_KEY, DEFAULT_WEIGHT);\n            if (weight > 0) {\n                long timestamp = invoker.getUrl().getParameter(TIMESTAMP_KEY, 0L);\n                if (timestamp > 0L) {\n                    long uptime = System.currentTimeMillis() - timestamp;\n                    if (uptime < 0) {\n                        return 1;\n                    }\n                    int warmup = invoker.getUrl().getParameter(WARMUP_KEY, DEFAULT_WARMUP);\n                    if (uptime > 0 && uptime < warmup) {\n                        weight = calculateWarmupWeight((int)uptime, warmup, weight);\n                    }\n                }\n            }\n        }\n        return Math.max(weight, 0);\n    }", "signature": "int getWeight(Invoker<?> invoker, Invocation invocation)", "full_signature": " int getWeight(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "AbstractLoadBalance.getWeight(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getUrl", "equals", "getServiceInterface", "getParameter", "getMethodParameter", "getMethodName", "getParameter", "getUrl", "currentTimeMillis", "getParameter", "getUrl", "calculateWarmupWeight", "max"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}