{"test_class": {"identifier": "TestPigResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HADOOP_TMP_PATH = \"target/hadoop\";", "modifier": "private static final", "type": "String", "declarator": "HADOOP_TMP_PATH = \"target/hadoop\"", "var_name": "HADOOP_TMP_PATH"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}], "file": "service/src/test/java/org/pig/oink/rest/TestPigResource.java"}, "test_case": {"identifier": "testRegisterScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRegisterScript() throws Exception {\n    \tPigResource resource= new PigResource();\n    \tString str= \"STORE E into '$output' using PigStorage(',');\";\n    \tInputStream input= new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    \tResponse resp= resource.registerScript(\"script.pig\", input);\n    \tAssert.assertEquals(resp.getStatus(), 200);\n    \t\n    \tinput= new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    \ttry {\n    \t\tresp= resource.registerScript(\"script.pig\", input);\n    \t} catch (Exception e) {\n    \t\tAssert.assertNotNull(e);\n    \t}\n    \t\n    \t\n    \tstr= \"DUMP E\";\n    \tinput= new ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n    \t\n    \tresp= resource.registerScript(\"script1.pig\", input);\n    \tAssert.assertEquals(resp.getStatus(), 400);\n    \t\n    }", "signature": "void testRegisterScript()", "full_signature": "@Test public void testRegisterScript()", "class_method_signature": "TestPigResource.testRegisterScript()", "testcase": true, "constructor": false, "invocations": ["getBytes", "registerScript", "assertEquals", "getStatus", "getBytes", "registerScript", "assertNotNull", "getBytes", "registerScript", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "PigResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger= Logger.getLogger(PigResource.class);", "modifier": "private", "type": "Logger", "declarator": "logger= Logger.getLogger(PigResource.class)", "var_name": "logger"}, {"original_string": "@Context \n\tprivate HttpServletRequest requestInfo;", "modifier": "@Context \n\tprivate", "type": "HttpServletRequest", "declarator": "requestInfo", "var_name": "requestInfo"}], "methods": [{"identifier": "registerJar", "parameters": "(@PathParam(\"jarName\") String jarName, InputStream uploadedJar)", "modifiers": "@POST @Path(\"/jar/{jarName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public", "return": "Response", "signature": "Response registerJar(@PathParam(\"jarName\") String jarName, InputStream uploadedJar)", "full_signature": "@POST @Path(\"/jar/{jarName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public Response registerJar(@PathParam(\"jarName\") String jarName, InputStream uploadedJar)", "class_method_signature": "PigResource.registerJar(@PathParam(\"jarName\") String jarName, InputStream uploadedJar)", "testcase": false, "constructor": false}, {"identifier": "unregisterJar", "parameters": "(@PathParam(\"jarName\") String jarName)", "modifiers": "@DELETE @Path(\"/jar/{jarName}\") @Produces ( {MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response unregisterJar(@PathParam(\"jarName\") String jarName)", "full_signature": "@DELETE @Path(\"/jar/{jarName}\") @Produces ( {MediaType.TEXT_PLAIN} ) public Response unregisterJar(@PathParam(\"jarName\") String jarName)", "class_method_signature": "PigResource.unregisterJar(@PathParam(\"jarName\") String jarName)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredJar", "parameters": "(@PathParam(\"jarName\") String jarName)", "modifiers": "@GET @Path(\"/jar/{jarName}\") @Produces ( {MediaType.APPLICATION_OCTET_STREAM} ) public", "return": "Response", "signature": "Response getRegisteredJar(@PathParam(\"jarName\") String jarName)", "full_signature": "@GET @Path(\"/jar/{jarName}\") @Produces ( {MediaType.APPLICATION_OCTET_STREAM} ) public Response getRegisteredJar(@PathParam(\"jarName\") String jarName)", "class_method_signature": "PigResource.getRegisteredJar(@PathParam(\"jarName\") String jarName)", "testcase": false, "constructor": false}, {"identifier": "registerScript", "parameters": "(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "modifiers": "@POST @Path(\"/script/{scriptName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public", "return": "Response", "signature": "Response registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "full_signature": "@POST @Path(\"/script/{scriptName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public Response registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "class_method_signature": "PigResource.registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "testcase": false, "constructor": false}, {"identifier": "unregisterScript", "parameters": "(@PathParam(\"scriptName\") String scriptName)", "modifiers": "@DELETE @Path(\"/script/{scriptName}\") @Produces ( {MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response unregisterScript(@PathParam(\"scriptName\") String scriptName)", "full_signature": "@DELETE @Path(\"/script/{scriptName}\") @Produces ( {MediaType.TEXT_PLAIN} ) public Response unregisterScript(@PathParam(\"scriptName\") String scriptName)", "class_method_signature": "PigResource.unregisterScript(@PathParam(\"scriptName\") String scriptName)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredScript", "parameters": "(@PathParam(\"scriptName\") String scriptName)", "modifiers": "@GET @Path(\"/script/{scriptName}\") @Produces ( {MediaType.APPLICATION_OCTET_STREAM} ) public", "return": "Response", "signature": "Response getRegisteredScript(@PathParam(\"scriptName\") String scriptName)", "full_signature": "@GET @Path(\"/script/{scriptName}\") @Produces ( {MediaType.APPLICATION_OCTET_STREAM} ) public Response getRegisteredScript(@PathParam(\"scriptName\") String scriptName)", "class_method_signature": "PigResource.getRegisteredScript(@PathParam(\"scriptName\") String scriptName)", "testcase": false, "constructor": false}, {"identifier": "submitPigJob", "parameters": "(@PathParam(\"scriptName\") String scriptName, String data)", "modifiers": "@POST @Path(\"/request/{scriptName}\") @Consumes( {MediaType.APPLICATION_JSON} ) @Produces( {MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response submitPigJob(@PathParam(\"scriptName\") String scriptName, String data)", "full_signature": "@POST @Path(\"/request/{scriptName}\") @Consumes( {MediaType.APPLICATION_JSON} ) @Produces( {MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN} ) public Response submitPigJob(@PathParam(\"scriptName\") String scriptName, String data)", "class_method_signature": "PigResource.submitPigJob(@PathParam(\"scriptName\") String scriptName, String data)", "testcase": false, "constructor": false}, {"identifier": "getInput", "parameters": "(@PathParam(\"requestId\") String requestId)", "modifiers": "@GET @Path(\"/request/{requestId}\") @Produces( {MediaType.APPLICATION_JSON} ) public", "return": "Response", "signature": "Response getInput(@PathParam(\"requestId\") String requestId)", "full_signature": "@GET @Path(\"/request/{requestId}\") @Produces( {MediaType.APPLICATION_JSON} ) public Response getInput(@PathParam(\"requestId\") String requestId)", "class_method_signature": "PigResource.getInput(@PathParam(\"requestId\") String requestId)", "testcase": false, "constructor": false}, {"identifier": "getRequestStats", "parameters": "(@PathParam(\"requestId\") String requestId)", "modifiers": "@GET @Path(\"/request/{requestId}/stats\") @Produces( {MediaType.APPLICATION_JSON} ) public", "return": "Response", "signature": "Response getRequestStats(@PathParam(\"requestId\") String requestId)", "full_signature": "@GET @Path(\"/request/{requestId}/stats\") @Produces( {MediaType.APPLICATION_JSON} ) public Response getRequestStats(@PathParam(\"requestId\") String requestId)", "class_method_signature": "PigResource.getRequestStats(@PathParam(\"requestId\") String requestId)", "testcase": false, "constructor": false}, {"identifier": "getOutput", "parameters": "(@PathParam(\"requestId\") String requestId)", "modifiers": "@GET @Path(\"/request/{requestId}/output\") @Produces( {MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response getOutput(@PathParam(\"requestId\") String requestId)", "full_signature": "@GET @Path(\"/request/{requestId}/output\") @Produces( {MediaType.TEXT_PLAIN} ) public Response getOutput(@PathParam(\"requestId\") String requestId)", "class_method_signature": "PigResource.getOutput(@PathParam(\"requestId\") String requestId)", "testcase": false, "constructor": false}, {"identifier": "getRequestStatus", "parameters": "(@PathParam(\"requestId\") String requestId)", "modifiers": "@GET @Path(\"request/{requestId}/status\") @Produces( {MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response getRequestStatus(@PathParam(\"requestId\") String requestId)", "full_signature": "@GET @Path(\"request/{requestId}/status\") @Produces( {MediaType.TEXT_PLAIN} ) public Response getRequestStatus(@PathParam(\"requestId\") String requestId)", "class_method_signature": "PigResource.getRequestStatus(@PathParam(\"requestId\") String requestId)", "testcase": false, "constructor": false}, {"identifier": "cancelRequest", "parameters": "(@PathParam(\"requestId\") String requestId)", "modifiers": "@GET @Path(\"request/{requestId}/cancel\") @Produces( {MediaType.TEXT_PLAIN} ) public", "return": "Response", "signature": "Response cancelRequest(@PathParam(\"requestId\") String requestId)", "full_signature": "@GET @Path(\"request/{requestId}/cancel\") @Produces( {MediaType.TEXT_PLAIN} ) public Response cancelRequest(@PathParam(\"requestId\") String requestId)", "class_method_signature": "PigResource.cancelRequest(@PathParam(\"requestId\") String requestId)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/pig/oink/rest/PigResource.java"}, "focal_method": {"identifier": "registerScript", "parameters": "(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "modifiers": "@POST @Path(\"/script/{scriptName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public", "return": "Response", "body": "@POST\n\t@Path(\"/script/{scriptName}\")\n\t@Consumes ( {MediaType.APPLICATION_OCTET_STREAM} )\n\t@Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})\n\tpublic Response registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript) throws IOException {\n\t\tlogger.info(\"Request for registering script \" + scriptName);\n\t\tif (uploadedScript == null || uploadedScript.available() == 0){\n\t\t\tlogger.error(\"Empty input stream passed\");\n\t\t\treturn Response\n\t\t\t    .status(HttpURLConnection.HTTP_BAD_REQUEST)\n\t\t\t    .entity(\"Bad request. No script uploaded!\")\n\t\t\t    .build();\n\t\t}\n\t\t\t   \n\t\tStringWriter writer = new StringWriter();\n\t\tIOUtils.copy(uploadedScript, writer, \"UTF-8\");\n\t\t\t\t\n\t\tString script= writer.toString();\n\t\tif (PigScriptValidator.validatePigScript(script)) {\n\t\t\tInputStream stream= new ByteArrayInputStream(script.getBytes());\n\t\t\tString pathName= PropertyLoader.getInstance().getProperty(Constants.SCRIPTS_PATH) + scriptName;\n\t\t\tPigJobServerImpl.getPigJobServer().registerFile(pathName, stream);\n\t\t\treturn Response.ok().entity(pathName).build();\n\t\t}\n\t\tlogger.info(\"Script \" + scriptName + \" is not valid\");\n\t\treturn Response\n\t\t    .status(HttpURLConnection.HTTP_BAD_REQUEST)\n\t\t    .entity(\"Bad Request. Either DUMP command is used or STORE is used without '$output'\")\n\t\t    .build();\n\t}", "signature": "Response registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "full_signature": "@POST @Path(\"/script/{scriptName}\") @Consumes ( {MediaType.APPLICATION_OCTET_STREAM} ) @Produces ({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN}) public Response registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "class_method_signature": "PigResource.registerScript(@PathParam(\"scriptName\") String scriptName, InputStream uploadedScript)", "testcase": false, "constructor": false, "invocations": ["info", "available", "error", "build", "entity", "status", "copy", "toString", "validatePigScript", "getBytes", "getProperty", "getInstance", "registerFile", "getPigJobServer", "build", "entity", "ok", "info", "build", "entity", "status"]}, "repository": {"repo_id": 20498194, "url": "https://github.com/eBay/oink", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 25, "size": 8039, "license": "licensed"}}