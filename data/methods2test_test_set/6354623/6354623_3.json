{"test_class": {"identifier": "CollectionMethodTest", "superclass": "", "interfaces": "", "fields": [], "file": "httl/src/test/java/httl/spi/methods/CollectionMethodTest.java"}, "test_case": {"identifier": "testRecursiveList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRecursiveList() throws Exception {\n\t\tList<Object> children = new ArrayList<Object>();\n\t\tchildren.add(\"x\");\n\t\tchildren.add(\"y\");\n\t\tchildren.add(\"z\");\n\t\t\n\t\tList<Object> parent = new ArrayList<Object>();\n\t\tparent.add(\"a\");\n\t\tparent.add(children);\n\t\tparent.add(\"b\");\n\t\tparent.add(\"c\");\n\t\t\n\t\tList<Object> result = CollectionMethod.recursive(parent);\n\t\t\n\t\tAssert.assertEquals(6, result.size());\n\t\tAssert.assertEquals(\"a\", result.get(0));\n\t\tAssert.assertEquals(\"x\", result.get(1));\n\t\tAssert.assertEquals(\"y\", result.get(2));\n\t\tAssert.assertEquals(\"z\", result.get(3));\n\t\tAssert.assertEquals(\"b\", result.get(4));\n\t\tAssert.assertEquals(\"c\", result.get(5));\n\t}", "signature": "void testRecursiveList()", "full_signature": "@Test public void testRecursiveList()", "class_method_signature": "CollectionMethodTest.testRecursiveList()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "recursive", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CollectionMethod", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CollectionMethod", "parameters": "()", "modifiers": "private", "return": "", "signature": " CollectionMethod()", "full_signature": "private  CollectionMethod()", "class_method_signature": "CollectionMethod.CollectionMethod()", "testcase": false, "constructor": true}, {"identifier": "toCycle", "parameters": "(Collection<T> values)", "modifiers": "public static", "return": "ListCycle<T>", "signature": "ListCycle<T> toCycle(Collection<T> values)", "full_signature": "public static ListCycle<T> toCycle(Collection<T> values)", "class_method_signature": "CollectionMethod.toCycle(Collection<T> values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(T[] values)", "modifiers": "public static", "return": "ArrayCycle<T>", "signature": "ArrayCycle<T> toCycle(T[] values)", "full_signature": "public static ArrayCycle<T> toCycle(T[] values)", "class_method_signature": "CollectionMethod.toCycle(T[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(boolean[] values)", "modifiers": "public static", "return": "BooleanArrayCycle", "signature": "BooleanArrayCycle toCycle(boolean[] values)", "full_signature": "public static BooleanArrayCycle toCycle(boolean[] values)", "class_method_signature": "CollectionMethod.toCycle(boolean[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(char[] values)", "modifiers": "public static", "return": "CharArrayCycle", "signature": "CharArrayCycle toCycle(char[] values)", "full_signature": "public static CharArrayCycle toCycle(char[] values)", "class_method_signature": "CollectionMethod.toCycle(char[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(byte[] values)", "modifiers": "public static", "return": "ByteArrayCycle", "signature": "ByteArrayCycle toCycle(byte[] values)", "full_signature": "public static ByteArrayCycle toCycle(byte[] values)", "class_method_signature": "CollectionMethod.toCycle(byte[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(short[] values)", "modifiers": "public static", "return": "ShortArrayCycle", "signature": "ShortArrayCycle toCycle(short[] values)", "full_signature": "public static ShortArrayCycle toCycle(short[] values)", "class_method_signature": "CollectionMethod.toCycle(short[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(int[] values)", "modifiers": "public static", "return": "IntArrayCycle", "signature": "IntArrayCycle toCycle(int[] values)", "full_signature": "public static IntArrayCycle toCycle(int[] values)", "class_method_signature": "CollectionMethod.toCycle(int[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(long[] values)", "modifiers": "public static", "return": "LongArrayCycle", "signature": "LongArrayCycle toCycle(long[] values)", "full_signature": "public static LongArrayCycle toCycle(long[] values)", "class_method_signature": "CollectionMethod.toCycle(long[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(float[] values)", "modifiers": "public static", "return": "FloatArrayCycle", "signature": "FloatArrayCycle toCycle(float[] values)", "full_signature": "public static FloatArrayCycle toCycle(float[] values)", "class_method_signature": "CollectionMethod.toCycle(float[] values)", "testcase": false, "constructor": false}, {"identifier": "toCycle", "parameters": "(double[] values)", "modifiers": "public static", "return": "DoubleArrayCycle", "signature": "DoubleArrayCycle toCycle(double[] values)", "full_signature": "public static DoubleArrayCycle toCycle(double[] values)", "class_method_signature": "CollectionMethod.toCycle(double[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Map<?, ?> values)", "modifiers": "public static", "return": "int", "signature": "int length(Map<?, ?> values)", "full_signature": "public static int length(Map<?, ?> values)", "class_method_signature": "CollectionMethod.length(Map<?, ?> values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Collection<?> values)", "modifiers": "public static", "return": "int", "signature": "int length(Collection<?> values)", "full_signature": "public static int length(Collection<?> values)", "class_method_signature": "CollectionMethod.length(Collection<?> values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(Object[] values)", "modifiers": "public static", "return": "int", "signature": "int length(Object[] values)", "full_signature": "public static int length(Object[] values)", "class_method_signature": "CollectionMethod.length(Object[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(boolean[] values)", "modifiers": "public static", "return": "int", "signature": "int length(boolean[] values)", "full_signature": "public static int length(boolean[] values)", "class_method_signature": "CollectionMethod.length(boolean[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(char[] values)", "modifiers": "public static", "return": "int", "signature": "int length(char[] values)", "full_signature": "public static int length(char[] values)", "class_method_signature": "CollectionMethod.length(char[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(byte[] values)", "modifiers": "public static", "return": "int", "signature": "int length(byte[] values)", "full_signature": "public static int length(byte[] values)", "class_method_signature": "CollectionMethod.length(byte[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(short[] values)", "modifiers": "public static", "return": "int", "signature": "int length(short[] values)", "full_signature": "public static int length(short[] values)", "class_method_signature": "CollectionMethod.length(short[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(int[] values)", "modifiers": "public static", "return": "int", "signature": "int length(int[] values)", "full_signature": "public static int length(int[] values)", "class_method_signature": "CollectionMethod.length(int[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(long[] values)", "modifiers": "public static", "return": "int", "signature": "int length(long[] values)", "full_signature": "public static int length(long[] values)", "class_method_signature": "CollectionMethod.length(long[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(float[] values)", "modifiers": "public static", "return": "int", "signature": "int length(float[] values)", "full_signature": "public static int length(float[] values)", "class_method_signature": "CollectionMethod.length(float[] values)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(double[] values)", "modifiers": "public static", "return": "int", "signature": "int length(double[] values)", "full_signature": "public static int length(double[] values)", "class_method_signature": "CollectionMethod.length(double[] values)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> sort(Map<K, V> map)", "full_signature": "public static Map<K, V> sort(Map<K, V> map)", "class_method_signature": "CollectionMethod.sort(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(List<T> list)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static", "return": "List<T>", "signature": "List<T> sort(List<T> list)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) public static List<T> sort(List<T> list)", "class_method_signature": "CollectionMethod.sort(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Set<T> set)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> sort(Set<T> set)", "full_signature": "public static Set<T> sort(Set<T> set)", "class_method_signature": "CollectionMethod.sort(Set<T> set)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Collection<T> set)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> sort(Collection<T> set)", "full_signature": "public static Collection<T> sort(Collection<T> set)", "class_method_signature": "CollectionMethod.sort(Collection<T> set)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(T[] array)", "modifiers": "public static", "return": "T[]", "signature": "T[] sort(T[] array)", "full_signature": "public static T[] sort(T[] array)", "class_method_signature": "CollectionMethod.sort(T[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(char[] array)", "modifiers": "public static", "return": "char[]", "signature": "char[] sort(char[] array)", "full_signature": "public static char[] sort(char[] array)", "class_method_signature": "CollectionMethod.sort(char[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(byte[] array)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] sort(byte[] array)", "full_signature": "public static byte[] sort(byte[] array)", "class_method_signature": "CollectionMethod.sort(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(short[] array)", "modifiers": "public static", "return": "short[]", "signature": "short[] sort(short[] array)", "full_signature": "public static short[] sort(short[] array)", "class_method_signature": "CollectionMethod.sort(short[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] array)", "modifiers": "public static", "return": "int[]", "signature": "int[] sort(int[] array)", "full_signature": "public static int[] sort(int[] array)", "class_method_signature": "CollectionMethod.sort(int[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(long[] array)", "modifiers": "public static", "return": "long[]", "signature": "long[] sort(long[] array)", "full_signature": "public static long[] sort(long[] array)", "class_method_signature": "CollectionMethod.sort(long[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(float[] array)", "modifiers": "public static", "return": "float[]", "signature": "float[] sort(float[] array)", "full_signature": "public static float[] sort(float[] array)", "class_method_signature": "CollectionMethod.sort(float[] array)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(double[] array)", "modifiers": "public static", "return": "double[]", "signature": "double[] sort(double[] array)", "full_signature": "public static double[] sort(double[] array)", "class_method_signature": "CollectionMethod.sort(double[] array)", "testcase": false, "constructor": false}, {"identifier": "recursive", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> recursive(Map<K, V> map)", "full_signature": "public static Map<K, V> recursive(Map<K, V> map)", "class_method_signature": "CollectionMethod.recursive(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "_recursive", "parameters": "(Map<K, V> result, Map<K, V> map)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void _recursive(Map<K, V> result, Map<K, V> map)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void _recursive(Map<K, V> result, Map<K, V> map)", "class_method_signature": "CollectionMethod._recursive(Map<K, V> result, Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "recursive", "parameters": "(Collection<T> set)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> recursive(Collection<T> set)", "full_signature": "public static List<T> recursive(Collection<T> set)", "class_method_signature": "CollectionMethod.recursive(Collection<T> set)", "testcase": false, "constructor": false}, {"identifier": "_recursive", "parameters": "(Collection<T> result, Collection<T> set)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void _recursive(Collection<T> result, Collection<T> set)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void _recursive(Collection<T> result, Collection<T> set)", "class_method_signature": "CollectionMethod._recursive(Collection<T> result, Collection<T> set)", "testcase": false, "constructor": false}, {"identifier": "recursive", "parameters": "(Collection<T> set, String children)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> recursive(Collection<T> set, String children)", "full_signature": "public static List<T> recursive(Collection<T> set, String children)", "class_method_signature": "CollectionMethod.recursive(Collection<T> set, String children)", "testcase": false, "constructor": false}, {"identifier": "recursive", "parameters": "(T node, String children)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> recursive(T node, String children)", "full_signature": "public static List<T> recursive(T node, String children)", "class_method_signature": "CollectionMethod.recursive(T node, String children)", "testcase": false, "constructor": false}, {"identifier": "_recursive", "parameters": "(Collection<T> result, T node, String children)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void _recursive(Collection<T> result, T node, String children)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void _recursive(Collection<T> result, T node, String children)", "class_method_signature": "CollectionMethod._recursive(Collection<T> result, T node, String children)", "testcase": false, "constructor": false}], "file": "httl/src/main/java/httl/spi/methods/CollectionMethod.java"}, "focal_method": {"identifier": "recursive", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "body": "public static <K, V> Map<K, V> recursive(Map<K, V> map) {\n        Map<K, V> result = new HashMap<K, V>();\n        _recursive(result, map);\n        return result;\n    }", "signature": "Map<K, V> recursive(Map<K, V> map)", "full_signature": "public static Map<K, V> recursive(Map<K, V> map)", "class_method_signature": "CollectionMethod.recursive(Map<K, V> map)", "testcase": false, "constructor": false, "invocations": ["_recursive"]}, "repository": {"repo_id": 6354623, "url": "https://github.com/httl/httl", "language": "Java", "is_fork": false, "fork_count": 149, "stargazer_count": 337, "size": 2812, "license": "licensed"}}