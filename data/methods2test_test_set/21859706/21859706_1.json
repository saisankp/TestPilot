{"test_class": {"identifier": "MemcachedResponseStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "memcached/src/test/java/com/bazaarvoice/dropwizard/caching/memcached/MemcachedResponseStoreTest.java"}, "test_case": {"identifier": "put", "parameters": "(String prefix, boolean readOnly, String key, String memcacheKey, int memcacheExpiration, CachedResponse value)", "modifiers": "@Test(dataProvider = \"putData\") public", "return": "void", "body": "@Test(dataProvider = \"putData\")\n    public void put(String prefix, boolean readOnly, String key, String memcacheKey, int memcacheExpiration, CachedResponse value) {\n        MemcachedClient client = mock(MemcachedClient.class);\n        MemcachedResponseStore store = new MemcachedResponseStore(client, prefix, readOnly);\n        store.put(key, value);\n\n        if (!readOnly) {\n            verify(client).set(eq(memcacheKey), eq(memcacheExpiration), same(value), any(Transcoder.class));\n        }\n\n        verifyNoMoreInteractions(client);\n    }", "signature": "void put(String prefix, boolean readOnly, String key, String memcacheKey, int memcacheExpiration, CachedResponse value)", "full_signature": "@Test(dataProvider = \"putData\") public void put(String prefix, boolean readOnly, String key, String memcacheKey, int memcacheExpiration, CachedResponse value)", "class_method_signature": "MemcachedResponseStoreTest.put(String prefix, boolean readOnly, String key, String memcacheKey, int memcacheExpiration, CachedResponse value)", "testcase": true, "constructor": false, "invocations": ["mock", "put", "set", "verify", "eq", "eq", "same", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MemcachedResponseStore", "superclass": "extends ResponseStore", "interfaces": "", "fields": [{"original_string": "private final MemcachedClient _client;", "modifier": "private final", "type": "MemcachedClient", "declarator": "_client", "var_name": "_client"}, {"original_string": "private final String _keyPrefix;", "modifier": "private final", "type": "String", "declarator": "_keyPrefix", "var_name": "_keyPrefix"}, {"original_string": "private final boolean _readOnly;", "modifier": "private final", "type": "boolean", "declarator": "_readOnly", "var_name": "_readOnly"}], "methods": [{"identifier": "MemcachedResponseStore", "parameters": "(MemcachedClient client, String keyPrefix, boolean readOnly)", "modifiers": "public", "return": "", "signature": " MemcachedResponseStore(MemcachedClient client, String keyPrefix, boolean readOnly)", "full_signature": "public  MemcachedResponseStore(MemcachedClient client, String keyPrefix, boolean readOnly)", "class_method_signature": "MemcachedResponseStore.MemcachedResponseStore(MemcachedClient client, String keyPrefix, boolean readOnly)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "Optional<CachedResponse>", "signature": "Optional<CachedResponse> get(String key)", "full_signature": "@Override public Optional<CachedResponse> get(String key)", "class_method_signature": "MemcachedResponseStore.get(String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, CachedResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void put(String key, CachedResponse response)", "full_signature": "@Override public void put(String key, CachedResponse response)", "class_method_signature": "MemcachedResponseStore.put(String key, CachedResponse response)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void invalidate(String key)", "full_signature": "@Override public void invalidate(String key)", "class_method_signature": "MemcachedResponseStore.invalidate(String key)", "testcase": false, "constructor": false}, {"identifier": "buildKey", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String buildKey(String key)", "full_signature": "private String buildKey(String key)", "class_method_signature": "MemcachedResponseStore.buildKey(String key)", "testcase": false, "constructor": false}], "file": "memcached/src/main/java/com/bazaarvoice/dropwizard/caching/memcached/MemcachedResponseStore.java"}, "focal_method": {"identifier": "put", "parameters": "(String key, CachedResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void put(String key, CachedResponse response) {\n        checkNotNull(key);\n        checkArgument(key.length() > 0, \"key can not be empty\");\n        checkNotNull(response);\n\n        if (!_readOnly) {\n            DateTime expires = response.getExpires().orNull();\n\n            if (expires != null) {\n                _client.set(buildKey(key), (int) (expires.getMillis() / 1000), response, CachedResponseTranscoder.INSTANCE);\n            }\n        }\n    }", "signature": "void put(String key, CachedResponse response)", "full_signature": "@Override public void put(String key, CachedResponse response)", "class_method_signature": "MemcachedResponseStore.put(String key, CachedResponse response)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkArgument", "length", "checkNotNull", "orNull", "getExpires", "set", "buildKey", "getMillis"]}, "repository": {"repo_id": 21859706, "url": "https://github.com/bazaarvoice/dropwizard-caching-bundle", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 167, "license": "licensed"}}