{"test_class": {"identifier": "TrendCycleFilterFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/x11/TrendCycleFilterFactoryTest.java"}, "test_case": {"identifier": "testMakeHendersonFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMakeHendersonFilter() {\n        for (int i = 1; i < 100; i += 2) {\n            SymmetricFilter filter = TrendCycleFilterFactory.makeHendersonFilter(i);\n            DataBlock w = new DataBlock(filter.getWeights());\n            assertTrue(Math.abs(w.sum() - 1) < 1e-9);\n        }\n    }", "signature": "void testMakeHendersonFilter()", "full_signature": "@Test public void testMakeHendersonFilter()", "class_method_signature": "TrendCycleFilterFactoryTest.testMakeHendersonFilter()", "testcase": true, "constructor": false, "invocations": ["makeHendersonFilter", "getWeights", "assertTrue", "abs", "sum"]}, "focal_class": {"identifier": "TrendCycleFilterFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "defaultHendersonFilterForFrequency", "parameters": "(\n\t    final int frequency)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter defaultHendersonFilterForFrequency(\n\t    final int frequency)", "full_signature": "public static SymmetricFilter defaultHendersonFilterForFrequency(\n\t    final int frequency)", "class_method_signature": "TrendCycleFilterFactory.defaultHendersonFilterForFrequency(\n\t    final int frequency)", "testcase": false, "constructor": false}, {"identifier": "makeHendersonFilter", "parameters": "(int length)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter makeHendersonFilter(int length)", "full_signature": "public static SymmetricFilter makeHendersonFilter(int length)", "class_method_signature": "TrendCycleFilterFactory.makeHendersonFilter(int length)", "testcase": false, "constructor": false}, {"identifier": "makeTrendFilter", "parameters": "(final int frequency)", "modifiers": "public static", "return": "SymmetricFilter", "signature": "SymmetricFilter makeTrendFilter(final int frequency)", "full_signature": "public static SymmetricFilter makeTrendFilter(final int frequency)", "class_method_signature": "TrendCycleFilterFactory.makeTrendFilter(final int frequency)", "testcase": false, "constructor": false}, {"identifier": "TrendCycleFilterFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " TrendCycleFilterFactory()", "full_signature": "private  TrendCycleFilterFactory()", "class_method_signature": "TrendCycleFilterFactory.TrendCycleFilterFactory()", "testcase": false, "constructor": true}], "file": "jtstoolkit/src/main/java/ec/satoolkit/x11/TrendCycleFilterFactory.java"}, "focal_method": {"identifier": "makeHendersonFilter", "parameters": "(int length)", "modifiers": "public static", "return": "SymmetricFilter", "body": "public static SymmetricFilter makeHendersonFilter(int length) {\n\tif (length % 2 == 0)\n\t    throw new LinearFilterException(\"Invalid length for Henderson filter. Should be odd\");\n\tint m = length / 2;\n\tdouble[] c = new double[m + 1];\n\tint n = m + 2;\n\n\tdouble n2 = n * n;\n\tfor (int i = 0; i < m + 1; i++) {\n\t    double ii = (i - m) * (i - m);\n\t    double up = 315 * (n2 - n * 2 + 1 - (ii));\n\t    up *= n2 - ii;\n\t    up *= n2 + n * 2 + 1 - ii;\n\t    up *= n2 * 3 - 16 - ii * 11;\n\t    double down = n * 8;\n\t    down *= n2 - 1;\n\t    down *= n2 * 4 - 1;\n\t    down *= n2 * 4 - 9;\n\t    down *= n2 * 4 - 25;\n\t    c[m - i] = up / down;\n\t}\n\treturn SymmetricFilter.of(c);\n    }", "signature": "SymmetricFilter makeHendersonFilter(int length)", "full_signature": "public static SymmetricFilter makeHendersonFilter(int length)", "class_method_signature": "TrendCycleFilterFactory.makeHendersonFilter(int length)", "testcase": false, "constructor": false, "invocations": ["of"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}