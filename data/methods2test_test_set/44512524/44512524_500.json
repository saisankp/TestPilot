{"test_class": {"identifier": "TDigestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static PrintWriter sizeDump;", "modifier": "private static", "type": "PrintWriter", "declarator": "sizeDump", "var_name": "sizeDump"}, {"original_string": "private static PrintWriter errorDump;", "modifier": "private static", "type": "PrintWriter", "declarator": "errorDump", "var_name": "errorDump"}, {"original_string": "private static PrintWriter deviationDump;", "modifier": "private static", "type": "PrintWriter", "declarator": "deviationDump", "var_name": "deviationDump"}], "file": "ml/streaminer/src/test/java/org/streaminer/stream/quantile/TDigestTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        Random gen = RandomUtils.getRandom();\n\n        for (int parts : new int[]{2, 5, 10, 20, 50, 100}) {\n            List<Double> data = Lists.newArrayList();\n\n            TDigest dist = new TDigest(100, gen);\n            dist.recordAllData();\n\n            List<TDigest> many = Lists.newArrayList();\n            for (int i = 0; i < 100; i++) {\n                many.add(new TDigest(100, gen).recordAllData());\n            }\n\n            // we accumulate the data into multiple sub-digests\n            List<TDigest> subs = Lists.newArrayList();\n            for (int i = 0; i < parts; i++) {\n                subs.add(new TDigest(50, gen).recordAllData());\n            }\n\n            for (int i = 0; i < 100000; i++) {\n                double x = gen.nextDouble();\n                data.add(x);\n                dist.add(x);\n                subs.get(i % parts).add(x);\n            }\n            dist.compress();\n            Collections.sort(data);\n\n            // collect the raw data from the sub-digests\n            List<Double> data2 = Lists.newArrayList();\n            for (TDigest digest : subs) {\n                for (TDigest.Group group : digest.centroids()) {\n                    Iterables.addAll(data2, group.data());\n                }\n            }\n            Collections.sort(data2);\n\n            // verify that the raw data all got recorded\n            assertEquals(data.size(), data2.size());\n            Iterator<Double> ix = data.iterator();\n            for (Double x : data2) {\n                assertEquals(ix.next(), x);\n            }\n\n            // now merge the sub-digests\n            TDigest dist2 = TDigest.merge(50, subs);\n\n            for (double q : new double[]{0.001, 0.01, 0.1, 0.2, 0.3, 0.5}) {\n                double z = quantile(q, data);\n                double e1 = dist.quantile(q) - z;\n                double e2 = dist2.quantile(q) - z;\n                System.out.printf(\"quantile\\t%d\\t%.6f\\t%.6f\\t%.6f\\t%.6f\\t%.6f\\n\", parts, q, z - q, e1, e2, Math.abs(e2) / q);\n                assertTrue(String.format(\"parts=%d, q=%.4f, e1=%.5f, e2=%.5f, rel=%.4f\", parts, q, e1, e2, Math.abs(e2) / q), Math.abs(e2) / q < 0.1);\n                assertTrue(String.format(\"parts=%d, q=%.4f, e1=%.5f, e2=%.5f, rel=%.4f\", parts, q, e1, e2, Math.abs(e2) / q), Math.abs(e2) < 0.015);\n            }\n\n            for (double x : new double[]{0.001, 0.01, 0.1, 0.2, 0.3, 0.5}) {\n                double z = cdf(x, data);\n                double e1 = dist.cdf(x) - z;\n                double e2 = dist2.cdf(x) - z;\n\n                System.out.printf(\"cdf\\t%d\\t%.6f\\t%.6f\\t%.6f\\t%.6f\\t%.6f\\n\", parts, x, z - x, e1, e2, Math.abs(e2) / x);\n                assertTrue(String.format(\"parts=%d, x=%.4f, e1=%.5f, e2=%.5f\", parts, x, e1, e2), Math.abs(e2) < 0.015);\n                assertTrue(String.format(\"parts=%d, x=%.4f, e1=%.5f, e2=%.5f\", parts, x, e1, e2), Math.abs(e2) / x < 0.1);\n            }\n        }\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TDigestTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["getRandom", "newArrayList", "recordAllData", "newArrayList", "add", "recordAllData", "newArrayList", "add", "recordAllData", "nextDouble", "add", "add", "add", "get", "compress", "sort", "newArrayList", "centroids", "addAll", "data", "sort", "assertEquals", "size", "size", "iterator", "assertEquals", "next", "merge", "quantile", "quantile", "quantile", "printf", "abs", "assertTrue", "format", "abs", "abs", "assertTrue", "format", "abs", "abs", "cdf", "cdf", "cdf", "printf", "abs", "assertTrue", "format", "abs", "assertTrue", "format", "abs"]}, "focal_class": {"identifier": "TDigest", "superclass": "", "interfaces": "implements IQuantiles<Double>", "fields": [{"original_string": "private Random gen;", "modifier": "private", "type": "Random", "declarator": "gen", "var_name": "gen"}, {"original_string": "private double compression = 100;", "modifier": "private", "type": "double", "declarator": "compression = 100", "var_name": "compression"}, {"original_string": "private GroupTree summary = new GroupTree();", "modifier": "private", "type": "GroupTree", "declarator": "summary = new GroupTree()", "var_name": "summary"}, {"original_string": "private int count = 0;", "modifier": "private", "type": "int", "declarator": "count = 0", "var_name": "count"}, {"original_string": "private boolean recordAllData = false;", "modifier": "private", "type": "boolean", "declarator": "recordAllData = false", "var_name": "recordAllData"}, {"original_string": "public final static int VERBOSE_ENCODING = 1;", "modifier": "public final static", "type": "int", "declarator": "VERBOSE_ENCODING = 1", "var_name": "VERBOSE_ENCODING"}, {"original_string": "public final static int SMALL_ENCODING = 2;", "modifier": "public final static", "type": "int", "declarator": "SMALL_ENCODING = 2", "var_name": "SMALL_ENCODING"}], "methods": [{"identifier": "TDigest", "parameters": "(double compression)", "modifiers": "public", "return": "", "signature": " TDigest(double compression)", "full_signature": "public  TDigest(double compression)", "class_method_signature": "TDigest.TDigest(double compression)", "testcase": false, "constructor": true}, {"identifier": "TDigest", "parameters": "(double compression, Random random)", "modifiers": "public", "return": "", "signature": " TDigest(double compression, Random random)", "full_signature": "public  TDigest(double compression, Random random)", "class_method_signature": "TDigest.TDigest(double compression, Random random)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(double x)", "modifiers": "public", "return": "void", "signature": "void add(double x)", "full_signature": "public void add(double x)", "class_method_signature": "TDigest.add(double x)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, int w)", "modifiers": "public", "return": "void", "signature": "void add(double x, int w)", "full_signature": "public void add(double x, int w)", "class_method_signature": "TDigest.add(double x, int w)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, int w, Group base)", "modifiers": "private", "return": "void", "signature": "void add(double x, int w, Group base)", "full_signature": "private void add(double x, int w, Group base)", "class_method_signature": "TDigest.add(double x, int w, Group base)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TDigest other)", "modifiers": "public", "return": "void", "signature": "void add(TDigest other)", "full_signature": "public void add(TDigest other)", "class_method_signature": "TDigest.add(TDigest other)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(double compression, Iterable<TDigest> subData)", "modifiers": "public static", "return": "TDigest", "signature": "TDigest merge(double compression, Iterable<TDigest> subData)", "full_signature": "public static TDigest merge(double compression, Iterable<TDigest> subData)", "class_method_signature": "TDigest.merge(double compression, Iterable<TDigest> subData)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compress()", "full_signature": "public void compress()", "class_method_signature": "TDigest.compress()", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "(GroupTree other)", "modifiers": "private", "return": "void", "signature": "void compress(GroupTree other)", "full_signature": "private void compress(GroupTree other)", "class_method_signature": "TDigest.compress(GroupTree other)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "TDigest.size()", "testcase": false, "constructor": false}, {"identifier": "cdf", "parameters": "(double x)", "modifiers": "public", "return": "double", "signature": "double cdf(double x)", "full_signature": "public double cdf(double x)", "class_method_signature": "TDigest.cdf(double x)", "testcase": false, "constructor": false}, {"identifier": "quantile", "parameters": "(double q)", "modifiers": "public", "return": "double", "signature": "double quantile(double q)", "full_signature": "public double quantile(double q)", "class_method_signature": "TDigest.quantile(double q)", "testcase": false, "constructor": false}, {"identifier": "centroidCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int centroidCount()", "full_signature": "public int centroidCount()", "class_method_signature": "TDigest.centroidCount()", "testcase": false, "constructor": false}, {"identifier": "centroids", "parameters": "()", "modifiers": "public", "return": "Iterable<? extends Group>", "signature": "Iterable<? extends Group> centroids()", "full_signature": "public Iterable<? extends Group> centroids()", "class_method_signature": "TDigest.centroids()", "testcase": false, "constructor": false}, {"identifier": "compression", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double compression()", "full_signature": "public double compression()", "class_method_signature": "TDigest.compression()", "testcase": false, "constructor": false}, {"identifier": "recordAllData", "parameters": "()", "modifiers": "public", "return": "TDigest", "signature": "TDigest recordAllData()", "full_signature": "public TDigest recordAllData()", "class_method_signature": "TDigest.recordAllData()", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int byteSize()", "full_signature": "public int byteSize()", "class_method_signature": "TDigest.byteSize()", "testcase": false, "constructor": false}, {"identifier": "smallByteSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int smallByteSize()", "full_signature": "public int smallByteSize()", "class_method_signature": "TDigest.smallByteSize()", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(ByteBuffer buf)", "modifiers": "public", "return": "void", "signature": "void asBytes(ByteBuffer buf)", "full_signature": "public void asBytes(ByteBuffer buf)", "class_method_signature": "TDigest.asBytes(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "asSmallBytes", "parameters": "(ByteBuffer buf)", "modifiers": "public", "return": "void", "signature": "void asSmallBytes(ByteBuffer buf)", "full_signature": "public void asSmallBytes(ByteBuffer buf)", "class_method_signature": "TDigest.asSmallBytes(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(ByteBuffer buf, int n)", "modifiers": "public static", "return": "void", "signature": "void encode(ByteBuffer buf, int n)", "full_signature": "public static void encode(ByteBuffer buf, int n)", "class_method_signature": "TDigest.encode(ByteBuffer buf, int n)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(ByteBuffer buf)", "modifiers": "public static", "return": "int", "signature": "int decode(ByteBuffer buf)", "full_signature": "public static int decode(ByteBuffer buf)", "class_method_signature": "TDigest.decode(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "fromBytes", "parameters": "(ByteBuffer buf)", "modifiers": "public static", "return": "TDigest", "signature": "TDigest fromBytes(ByteBuffer buf)", "full_signature": "public static TDigest fromBytes(ByteBuffer buf)", "class_method_signature": "TDigest.fromBytes(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(double mean, int id)", "modifiers": "private", "return": "Group", "signature": "Group createGroup(double mean, int id)", "full_signature": "private Group createGroup(double mean, int id)", "class_method_signature": "TDigest.createGroup(double mean, int id)", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "(double x, double x0, double x1)", "modifiers": "private", "return": "double", "signature": "double interpolate(double x, double x0, double x1)", "full_signature": "private double interpolate(double x, double x0, double x1)", "class_method_signature": "TDigest.interpolate(double x, double x0, double x1)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void offer(Double value)", "full_signature": "public void offer(Double value)", "class_method_signature": "TDigest.offer(Double value)", "testcase": false, "constructor": false}, {"identifier": "getQuantile", "parameters": "(double q)", "modifiers": "public", "return": "Double", "signature": "Double getQuantile(double q)", "full_signature": "public Double getQuantile(double q)", "class_method_signature": "TDigest.getQuantile(double q)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/quantile/TDigest.java"}, "focal_method": {"identifier": "merge", "parameters": "(double compression, Iterable<TDigest> subData)", "modifiers": "public static", "return": "TDigest", "body": "public static TDigest merge(double compression, Iterable<TDigest> subData) {\n        Preconditions.checkArgument(subData.iterator().hasNext(), \"Can't merge 0 digests\");\n        List<TDigest> elements = Lists.newArrayList(subData);\n        int n = Math.max(1, elements.size() / 4);\n        TDigest r = new TDigest(compression, elements.get(0).gen);\n        if (elements.get(0).recordAllData) {\n            r.recordAllData();\n        }\n        for (int i = 0; i < elements.size(); i += n) {\n            if (n > 1) {\n                r.add(merge(compression, elements.subList(i, Math.min(i + n, elements.size()))));\n            } else {\n                r.add(elements.get(i));\n            }\n        }\n        return r;\n    }", "signature": "TDigest merge(double compression, Iterable<TDigest> subData)", "full_signature": "public static TDigest merge(double compression, Iterable<TDigest> subData)", "class_method_signature": "TDigest.merge(double compression, Iterable<TDigest> subData)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "hasNext", "iterator", "newArrayList", "max", "size", "get", "get", "recordAllData", "size", "add", "merge", "subList", "min", "size", "add", "get"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}