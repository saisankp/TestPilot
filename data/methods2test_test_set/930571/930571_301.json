{"test_class": {"identifier": "MVELObjectModelResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/deploy/MVELObjectModelResolverTest.java"}, "test_case": {"identifier": "testComplexStaticObjectModel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testComplexStaticObjectModel() {\n\t\tObjectModel model = new ObjectModel(\"String.valueOf(10).substring(1)\");\n\t\t\n\t\tObjectModelResolver resolver = new MVELObjectModelResolver();\n\t\t\n\t\tObject result = resolver.getInstance(model, this.getClass().getClassLoader(), new HashMap<String, Object>());\n\t\tassertNotNull(result);\n\t\tassertTrue(result instanceof String);\n\t\tassertEquals(\"0\", ((String) result));\n\t}", "signature": "void testComplexStaticObjectModel()", "full_signature": "@Test public void testComplexStaticObjectModel()", "class_method_signature": "MVELObjectModelResolverTest.testComplexStaticObjectModel()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getClassLoader", "getClass", "assertNotNull", "assertTrue", "assertEquals"]}, "focal_class": {"identifier": "MVELObjectModelResolver", "superclass": "", "interfaces": "implements ObjectModelResolver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MVELObjectModelResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MVELObjectModelResolver.class)", "var_name": "logger"}, {"original_string": "public static final String ID = \"mvel\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"mvel\"", "var_name": "ID"}], "methods": [{"identifier": "getInstance", "parameters": "(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "full_signature": "@Override public Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "class_method_signature": "MVELObjectModelResolver.getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(String resolverId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(String resolverId)", "full_signature": "@Override public boolean accept(String resolverId)", "class_method_signature": "MVELObjectModelResolver.accept(String resolverId)", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/deploy/MVELObjectModelResolver.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams) {\n\t\tObject instance = null;\n\t\tInternalRuntimeManager manager = null;\n\t\tif (contextParams.containsKey(\"runtimeManager\")) {\n\t\t\tmanager = (InternalRuntimeManager) contextParams.get(\"runtimeManager\");\n\t\t\tinstance = manager.getCacheManager().get(model.getIdentifier());\n\t\t\tif (instance != null) {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\tParserConfiguration config = new ParserConfiguration();\n        config.setClassLoader(cl);\n        ParserContext ctx = new ParserContext(config);\n        if (contextParams != null) {\n            for (Map.Entry<String, Object> entry : contextParams.entrySet()) {\n                ctx.addVariable(entry.getKey(), entry.getValue().getClass());\n            }\n        }\n\n        Object compiledExpression = MVEL.compileExpression(model.getIdentifier(), ctx);\n        instance = MVELSafeHelper.getEvaluator().executeExpression( compiledExpression, contextParams );\n        \n        if (manager != null && instance instanceof Cacheable) {\n\t\t\tmanager.getCacheManager().add(model.getIdentifier(), instance);\n\t\t}\n        return instance;\n\t}", "signature": "Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "full_signature": "@Override public Object getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "class_method_signature": "MVELObjectModelResolver.getInstance(ObjectModel model, ClassLoader cl, Map<String, Object> contextParams)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "get", "getCacheManager", "getIdentifier", "setClassLoader", "entrySet", "addVariable", "getKey", "getClass", "getValue", "compileExpression", "getIdentifier", "executeExpression", "getEvaluator", "add", "getCacheManager", "getIdentifier"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}