{"test_class": {"identifier": "DefaultDateRangeLimiterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private DatePickerController controller = new DatePickerController() {\n        @Override\n        public void onYearSelected(int year) {}\n\n        @Override\n        public void onDayOfMonthSelected(int year, int month, int day) {}\n\n        @Override\n        public void registerOnDateChangedListener(DatePickerDialog.OnDateChangedListener listener) {}\n\n        @Override\n        public void unregisterOnDateChangedListener(DatePickerDialog.OnDateChangedListener listener) {}\n\n        @Override\n        public MonthAdapter.CalendarDay getSelectedDay() {\n            return new MonthAdapter.CalendarDay(Calendar.getInstance(), TimeZone.getDefault());\n        }\n\n        @Override\n        public boolean isThemeDark() {\n            return false;\n        }\n\n        @Override\n        public int getAccentColor() {\n            return 0;\n        }\n\n        @Override\n        public boolean isHighlighted(int year, int month, int day) {\n            return false;\n        }\n\n        @Override\n        public int getFirstDayOfWeek() {\n            return 0;\n        }\n\n        @Override\n        public int getMinYear() {\n            return 0;\n        }\n\n        @Override\n        public int getMaxYear() {\n            return 0;\n        }\n\n        @Override\n        public Calendar getStartDate() {\n            return Calendar.getInstance();\n        }\n\n        @Override\n        public Calendar getEndDate() {\n            return Calendar.getInstance();\n        }\n\n        @Override\n        public boolean isOutOfRange(int year, int month, int day) {\n            return false;\n        }\n\n        @Override\n        public void tryVibrate() {}\n\n        @Override\n        public TimeZone getTimeZone() {\n            return TimeZone.getDefault();\n        }\n\n        @Override\n        public Locale getLocale() {\n            return Locale.getDefault();\n        }\n\n        @Override\n        public DatePickerDialog.Version getVersion() {\n            return DatePickerDialog.Version.VERSION_2;\n        }\n\n        @Override\n        public DatePickerDialog.ScrollOrientation getScrollOrientation() {\n            return DatePickerDialog.ScrollOrientation.HORIZONTAL;\n        }\n    };", "modifier": "final private", "type": "DatePickerController", "declarator": "controller = new DatePickerController() {\n        @Override\n        public void onYearSelected(int year) {}\n\n        @Override\n        public void onDayOfMonthSelected(int year, int month, int day) {}\n\n        @Override\n        public void registerOnDateChangedListener(DatePickerDialog.OnDateChangedListener listener) {}\n\n        @Override\n        public void unregisterOnDateChangedListener(DatePickerDialog.OnDateChangedListener listener) {}\n\n        @Override\n        public MonthAdapter.CalendarDay getSelectedDay() {\n            return new MonthAdapter.CalendarDay(Calendar.getInstance(), TimeZone.getDefault());\n        }\n\n        @Override\n        public boolean isThemeDark() {\n            return false;\n        }\n\n        @Override\n        public int getAccentColor() {\n            return 0;\n        }\n\n        @Override\n        public boolean isHighlighted(int year, int month, int day) {\n            return false;\n        }\n\n        @Override\n        public int getFirstDayOfWeek() {\n            return 0;\n        }\n\n        @Override\n        public int getMinYear() {\n            return 0;\n        }\n\n        @Override\n        public int getMaxYear() {\n            return 0;\n        }\n\n        @Override\n        public Calendar getStartDate() {\n            return Calendar.getInstance();\n        }\n\n        @Override\n        public Calendar getEndDate() {\n            return Calendar.getInstance();\n        }\n\n        @Override\n        public boolean isOutOfRange(int year, int month, int day) {\n            return false;\n        }\n\n        @Override\n        public void tryVibrate() {}\n\n        @Override\n        public TimeZone getTimeZone() {\n            return TimeZone.getDefault();\n        }\n\n        @Override\n        public Locale getLocale() {\n            return Locale.getDefault();\n        }\n\n        @Override\n        public DatePickerDialog.Version getVersion() {\n            return DatePickerDialog.Version.VERSION_2;\n        }\n\n        @Override\n        public DatePickerDialog.ScrollOrientation getScrollOrientation() {\n            return DatePickerDialog.ScrollOrientation.HORIZONTAL;\n        }\n    }", "var_name": "controller"}], "file": "library/src/test/java/com/wdullaer/materialdatetimepicker/date/DefaultDateRangeLimiterTest.java"}, "test_case": {"identifier": "setToNearestShouldReturnTheInputWhenValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setToNearestShouldReturnTheInputWhenValid() {\n        DefaultDateRangeLimiter limiter = new DefaultDateRangeLimiter();\n        Calendar day = Calendar.getInstance();\n        Calendar expected = (Calendar) day.clone();\n\n        Assert.assertEquals(limiter.setToNearestDate(day).getTimeInMillis(), expected.getTimeInMillis());\n    }", "signature": "void setToNearestShouldReturnTheInputWhenValid()", "full_signature": "@Test public void setToNearestShouldReturnTheInputWhenValid()", "class_method_signature": "DefaultDateRangeLimiterTest.setToNearestShouldReturnTheInputWhenValid()", "testcase": true, "constructor": false, "invocations": ["getInstance", "clone", "assertEquals", "getTimeInMillis", "setToNearestDate", "getTimeInMillis"]}, "focal_class": {"identifier": "DefaultDateRangeLimiter", "superclass": "", "interfaces": "implements DateRangeLimiter", "fields": [{"original_string": "private static final int DEFAULT_START_YEAR = 1900;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_START_YEAR = 1900", "var_name": "DEFAULT_START_YEAR"}, {"original_string": "private static final int DEFAULT_END_YEAR = 2100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_END_YEAR = 2100", "var_name": "DEFAULT_END_YEAR"}, {"original_string": "private transient DatePickerController mController;", "modifier": "private transient", "type": "DatePickerController", "declarator": "mController", "var_name": "mController"}, {"original_string": "private int mMinYear = DEFAULT_START_YEAR;", "modifier": "private", "type": "int", "declarator": "mMinYear = DEFAULT_START_YEAR", "var_name": "mMinYear"}, {"original_string": "private int mMaxYear = DEFAULT_END_YEAR;", "modifier": "private", "type": "int", "declarator": "mMaxYear = DEFAULT_END_YEAR", "var_name": "mMaxYear"}, {"original_string": "private Calendar mMinDate;", "modifier": "private", "type": "Calendar", "declarator": "mMinDate", "var_name": "mMinDate"}, {"original_string": "private Calendar mMaxDate;", "modifier": "private", "type": "Calendar", "declarator": "mMaxDate", "var_name": "mMaxDate"}, {"original_string": "private TreeSet<Calendar> selectableDays = new TreeSet<>();", "modifier": "private", "type": "TreeSet<Calendar>", "declarator": "selectableDays = new TreeSet<>()", "var_name": "selectableDays"}, {"original_string": "private HashSet<Calendar> disabledDays = new HashSet<>();", "modifier": "private", "type": "HashSet<Calendar>", "declarator": "disabledDays = new HashSet<>()", "var_name": "disabledDays"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    public static final Parcelable.Creator<DefaultDateRangeLimiter> CREATOR\n            = new Parcelable.Creator<DefaultDateRangeLimiter>() {\n        public DefaultDateRangeLimiter createFromParcel(Parcel in) {\n            return new DefaultDateRangeLimiter(in);\n        }\n\n        public DefaultDateRangeLimiter[] newArray(int size) {\n            return new DefaultDateRangeLimiter[size];\n        }\n    };", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    public static final", "type": "Parcelable.Creator<DefaultDateRangeLimiter>", "declarator": "CREATOR\n            = new Parcelable.Creator<DefaultDateRangeLimiter>() {\n        public DefaultDateRangeLimiter createFromParcel(Parcel in) {\n            return new DefaultDateRangeLimiter(in);\n        }\n\n        public DefaultDateRangeLimiter[] newArray(int size) {\n            return new DefaultDateRangeLimiter[size];\n        }\n    }", "var_name": "CREATOR"}], "methods": [{"identifier": "DefaultDateRangeLimiter", "parameters": "()", "modifiers": "", "return": "", "signature": " DefaultDateRangeLimiter()", "full_signature": "  DefaultDateRangeLimiter()", "class_method_signature": "DefaultDateRangeLimiter.DefaultDateRangeLimiter()", "testcase": false, "constructor": true}, {"identifier": "DefaultDateRangeLimiter", "parameters": "(Parcel in)", "modifiers": "@SuppressWarnings({\"unchecked\", \"WeakerAccess\"}) public", "return": "", "signature": " DefaultDateRangeLimiter(Parcel in)", "full_signature": "@SuppressWarnings({\"unchecked\", \"WeakerAccess\"}) public  DefaultDateRangeLimiter(Parcel in)", "class_method_signature": "DefaultDateRangeLimiter.DefaultDateRangeLimiter(Parcel in)", "testcase": false, "constructor": true}, {"identifier": "writeToParcel", "parameters": "(Parcel out, int flags)", "modifiers": "@Override public", "return": "void", "signature": "void writeToParcel(Parcel out, int flags)", "full_signature": "@Override public void writeToParcel(Parcel out, int flags)", "class_method_signature": "DefaultDateRangeLimiter.writeToParcel(Parcel out, int flags)", "testcase": false, "constructor": false}, {"identifier": "describeContents", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int describeContents()", "full_signature": "@Override public int describeContents()", "class_method_signature": "DefaultDateRangeLimiter.describeContents()", "testcase": false, "constructor": false}, {"identifier": "setSelectableDays", "parameters": "(@NonNull Calendar[] days)", "modifiers": "", "return": "void", "signature": "void setSelectableDays(@NonNull Calendar[] days)", "full_signature": " void setSelectableDays(@NonNull Calendar[] days)", "class_method_signature": "DefaultDateRangeLimiter.setSelectableDays(@NonNull Calendar[] days)", "testcase": false, "constructor": false}, {"identifier": "setDisabledDays", "parameters": "(@NonNull Calendar[] days)", "modifiers": "", "return": "void", "signature": "void setDisabledDays(@NonNull Calendar[] days)", "full_signature": " void setDisabledDays(@NonNull Calendar[] days)", "class_method_signature": "DefaultDateRangeLimiter.setDisabledDays(@NonNull Calendar[] days)", "testcase": false, "constructor": false}, {"identifier": "setMinDate", "parameters": "(@NonNull Calendar calendar)", "modifiers": "", "return": "void", "signature": "void setMinDate(@NonNull Calendar calendar)", "full_signature": " void setMinDate(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.setMinDate(@NonNull Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "setMaxDate", "parameters": "(@NonNull Calendar calendar)", "modifiers": "", "return": "void", "signature": "void setMaxDate(@NonNull Calendar calendar)", "full_signature": " void setMaxDate(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.setMaxDate(@NonNull Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "setController", "parameters": "(@NonNull DatePickerController controller)", "modifiers": "", "return": "void", "signature": "void setController(@NonNull DatePickerController controller)", "full_signature": " void setController(@NonNull DatePickerController controller)", "class_method_signature": "DefaultDateRangeLimiter.setController(@NonNull DatePickerController controller)", "testcase": false, "constructor": false}, {"identifier": "setYearRange", "parameters": "(int startYear, int endYear)", "modifiers": "", "return": "void", "signature": "void setYearRange(int startYear, int endYear)", "full_signature": " void setYearRange(int startYear, int endYear)", "class_method_signature": "DefaultDateRangeLimiter.setYearRange(int startYear, int endYear)", "testcase": false, "constructor": false}, {"identifier": "getMinDate", "parameters": "()", "modifiers": "@Nullable", "return": "Calendar", "signature": "Calendar getMinDate()", "full_signature": "@Nullable Calendar getMinDate()", "class_method_signature": "DefaultDateRangeLimiter.getMinDate()", "testcase": false, "constructor": false}, {"identifier": "getMaxDate", "parameters": "()", "modifiers": "@Nullable", "return": "Calendar", "signature": "Calendar getMaxDate()", "full_signature": "@Nullable Calendar getMaxDate()", "class_method_signature": "DefaultDateRangeLimiter.getMaxDate()", "testcase": false, "constructor": false}, {"identifier": "getSelectableDays", "parameters": "()", "modifiers": "@Nullable", "return": "Calendar[]", "signature": "Calendar[] getSelectableDays()", "full_signature": "@Nullable Calendar[] getSelectableDays()", "class_method_signature": "DefaultDateRangeLimiter.getSelectableDays()", "testcase": false, "constructor": false}, {"identifier": "getDisabledDays", "parameters": "()", "modifiers": "@Nullable", "return": "Calendar[]", "signature": "Calendar[] getDisabledDays()", "full_signature": "@Nullable Calendar[] getDisabledDays()", "class_method_signature": "DefaultDateRangeLimiter.getDisabledDays()", "testcase": false, "constructor": false}, {"identifier": "getMinYear", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMinYear()", "full_signature": "@Override public int getMinYear()", "class_method_signature": "DefaultDateRangeLimiter.getMinYear()", "testcase": false, "constructor": false}, {"identifier": "getMaxYear", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMaxYear()", "full_signature": "@Override public int getMaxYear()", "class_method_signature": "DefaultDateRangeLimiter.getMaxYear()", "testcase": false, "constructor": false}, {"identifier": "getStartDate", "parameters": "()", "modifiers": "@Override public @NonNull", "return": "Calendar", "signature": "Calendar getStartDate()", "full_signature": "@Override public @NonNull Calendar getStartDate()", "class_method_signature": "DefaultDateRangeLimiter.getStartDate()", "testcase": false, "constructor": false}, {"identifier": "getEndDate", "parameters": "()", "modifiers": "@Override public @NonNull", "return": "Calendar", "signature": "Calendar getEndDate()", "full_signature": "@Override public @NonNull Calendar getEndDate()", "class_method_signature": "DefaultDateRangeLimiter.getEndDate()", "testcase": false, "constructor": false}, {"identifier": "isOutOfRange", "parameters": "(int year, int month, int day)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOutOfRange(int year, int month, int day)", "full_signature": "@Override public boolean isOutOfRange(int year, int month, int day)", "class_method_signature": "DefaultDateRangeLimiter.isOutOfRange(int year, int month, int day)", "testcase": false, "constructor": false}, {"identifier": "isOutOfRange", "parameters": "(@NonNull Calendar calendar)", "modifiers": "private", "return": "boolean", "signature": "boolean isOutOfRange(@NonNull Calendar calendar)", "full_signature": "private boolean isOutOfRange(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.isOutOfRange(@NonNull Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "(@NonNull Calendar c)", "modifiers": "private", "return": "boolean", "signature": "boolean isDisabled(@NonNull Calendar c)", "full_signature": "private boolean isDisabled(@NonNull Calendar c)", "class_method_signature": "DefaultDateRangeLimiter.isDisabled(@NonNull Calendar c)", "testcase": false, "constructor": false}, {"identifier": "isSelectable", "parameters": "(@NonNull Calendar c)", "modifiers": "private", "return": "boolean", "signature": "boolean isSelectable(@NonNull Calendar c)", "full_signature": "private boolean isSelectable(@NonNull Calendar c)", "class_method_signature": "DefaultDateRangeLimiter.isSelectable(@NonNull Calendar c)", "testcase": false, "constructor": false}, {"identifier": "isBeforeMin", "parameters": "(@NonNull Calendar calendar)", "modifiers": "private", "return": "boolean", "signature": "boolean isBeforeMin(@NonNull Calendar calendar)", "full_signature": "private boolean isBeforeMin(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.isBeforeMin(@NonNull Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "isAfterMax", "parameters": "(@NonNull Calendar calendar)", "modifiers": "private", "return": "boolean", "signature": "boolean isAfterMax(@NonNull Calendar calendar)", "full_signature": "private boolean isAfterMax(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.isAfterMax(@NonNull Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "setToNearestDate", "parameters": "(@NonNull Calendar calendar)", "modifiers": "@Override public @NonNull", "return": "Calendar", "signature": "Calendar setToNearestDate(@NonNull Calendar calendar)", "full_signature": "@Override public @NonNull Calendar setToNearestDate(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.setToNearestDate(@NonNull Calendar calendar)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/wdullaer/materialdatetimepicker/date/DefaultDateRangeLimiter.java"}, "focal_method": {"identifier": "setToNearestDate", "parameters": "(@NonNull Calendar calendar)", "modifiers": "@Override public @NonNull", "return": "Calendar", "body": "@Override\n    public @NonNull Calendar setToNearestDate(@NonNull Calendar calendar) {\n        if (!selectableDays.isEmpty()) {\n            Calendar newCalendar = null;\n            Calendar higher = selectableDays.ceiling(calendar);\n            Calendar lower = selectableDays.lower(calendar);\n\n            if (higher == null && lower != null) newCalendar = lower;\n            else if (lower == null && higher != null) newCalendar = higher;\n\n            if (newCalendar != null || higher == null) {\n                newCalendar = newCalendar == null ? calendar : newCalendar;\n                TimeZone timeZone = mController == null ? TimeZone.getDefault() : mController.getTimeZone();\n                newCalendar.setTimeZone(timeZone);\n                return (Calendar) newCalendar.clone();\n            }\n\n            long highDistance = Math.abs(higher.getTimeInMillis() - calendar.getTimeInMillis());\n            long lowDistance = Math.abs(calendar.getTimeInMillis() - lower.getTimeInMillis());\n\n            if (lowDistance < highDistance) return (Calendar) lower.clone();\n            else return (Calendar) higher.clone();\n        }\n\n        if (!disabledDays.isEmpty()) {\n            Calendar forwardDate = isBeforeMin(calendar) ? getStartDate() : (Calendar) calendar.clone();\n            Calendar backwardDate = isAfterMax(calendar) ? getEndDate() : (Calendar) calendar.clone();\n            while (isDisabled(forwardDate) && isDisabled(backwardDate)) {\n                forwardDate.add(Calendar.DAY_OF_MONTH, 1);\n                backwardDate.add(Calendar.DAY_OF_MONTH, -1);\n            }\n            if (!isDisabled(backwardDate)) {\n                return backwardDate;\n            }\n            if (!isDisabled(forwardDate)) {\n                return forwardDate;\n            }\n        }\n\n        TimeZone timezone = mController == null ? TimeZone.getDefault() : mController.getTimeZone();\n        if (isBeforeMin(calendar)) {\n            if (mMinDate != null) return (Calendar) mMinDate.clone();\n            Calendar output = Calendar.getInstance(timezone);\n            output.set(Calendar.YEAR, mMinYear);\n            output.set(Calendar.MONTH, Calendar.JANUARY);\n            output.set(Calendar.DAY_OF_MONTH, 1);\n            return Utils.trimToMidnight(output);\n        }\n\n        if (isAfterMax(calendar)) {\n            if (mMaxDate != null) return (Calendar) mMaxDate.clone();\n            Calendar output = Calendar.getInstance(timezone);\n            output.set(Calendar.YEAR, mMaxYear);\n            output.set(Calendar.MONTH, Calendar.DECEMBER);\n            output.set(Calendar.DAY_OF_MONTH, 31);\n            return Utils.trimToMidnight(output);\n        }\n\n        return calendar;\n    }", "signature": "Calendar setToNearestDate(@NonNull Calendar calendar)", "full_signature": "@Override public @NonNull Calendar setToNearestDate(@NonNull Calendar calendar)", "class_method_signature": "DefaultDateRangeLimiter.setToNearestDate(@NonNull Calendar calendar)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "ceiling", "lower", "getDefault", "getTimeZone", "setTimeZone", "clone", "abs", "getTimeInMillis", "getTimeInMillis", "abs", "getTimeInMillis", "getTimeInMillis", "clone", "clone", "isEmpty", "isBeforeMin", "getStartDate", "clone", "isAfterMax", "getEndDate", "clone", "isDisabled", "isDisabled", "add", "add", "isDisabled", "isDisabled", "getDefault", "getTimeZone", "isBeforeMin", "clone", "getInstance", "set", "set", "set", "trimToMidnight", "isAfterMax", "clone", "getInstance", "set", "set", "set", "trimToMidnight"]}, "repository": {"repo_id": 28752850, "url": "https://github.com/wdullaer/MaterialDateTimePicker", "stars": 4295, "created": "1/3/2015 7:41:03 PM +00:00", "updates": "2020-01-27T21:04:41+00:00", "fork": "False", "license": "licensed"}}