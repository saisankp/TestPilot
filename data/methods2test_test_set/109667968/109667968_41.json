{"test_class": {"identifier": "MBTilesHelperTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "private Context context = RuntimeEnvironment.application;", "modifier": "private", "type": "Context", "declarator": "context = RuntimeEnvironment.application", "var_name": "context"}, {"original_string": "@Mock\n    private Style style;", "modifier": "@Mock\n    private", "type": "Style", "declarator": "style", "var_name": "style"}, {"original_string": "@Mock\n    private BaseLayerSwitcherPlugin switcherPlugin;", "modifier": "@Mock\n    private", "type": "BaseLayerSwitcherPlugin", "declarator": "switcherPlugin", "var_name": "switcherPlugin"}, {"original_string": "private MBTilesHelper mbTilesHelper;", "modifier": "private", "type": "MBTilesHelper", "declarator": "mbTilesHelper", "var_name": "mbTilesHelper"}], "file": "library/src/test/java/io/ona/kujaku/mbtiles/MBTilesHelperTest.java"}, "test_case": {"identifier": "testInitializeMbTilesLayersWithSingleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitializeMbTilesLayersWithSingleFile() {\n        Pair<Set<Source>, Set<Layer>> layersAndSources = mbTilesHelper.initializeMbTileslayers(new File(\"src/test/resources/raster.mbtiles\"));\n        assertNotNull(layersAndSources);\n        assertEquals(1, layersAndSources.first.size());\n        assertEquals(1, layersAndSources.second.size());\n        assertNotNull(mbTilesHelper.tileServer);\n        Source source = layersAndSources.first.iterator().next();\n        Layer layer = layersAndSources.second.iterator().next();\n        assertTrue(source instanceof RasterSource);\n        assertTrue(layer instanceof RasterLayer);\n\n\n    }", "signature": "void testInitializeMbTilesLayersWithSingleFile()", "full_signature": "@Test public void testInitializeMbTilesLayersWithSingleFile()", "class_method_signature": "MBTilesHelperTest.testInitializeMbTilesLayersWithSingleFile()", "testcase": true, "constructor": false, "invocations": ["initializeMbTileslayers", "assertNotNull", "assertEquals", "size", "assertEquals", "size", "assertNotNull", "next", "iterator", "next", "iterator", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "MBTilesHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MB_TILES_EXTENSION = \".mbtiles\";", "modifier": "public static final", "type": "String", "declarator": "MB_TILES_EXTENSION = \".mbtiles\"", "var_name": "MB_TILES_EXTENSION"}, {"original_string": "public static final String MB_TILES_DIRECTORY = \"/mbtiles\";", "modifier": "public static final", "type": "String", "declarator": "MB_TILES_DIRECTORY = \"/mbtiles\"", "var_name": "MB_TILES_DIRECTORY"}, {"original_string": "protected TileHttpServer tileServer;", "modifier": "protected", "type": "TileHttpServer", "declarator": "tileServer", "var_name": "tileServer"}, {"original_string": "private File mbtilesDir = new File(Environment.getExternalStorageDirectory().getPath() + MB_TILES_DIRECTORY);", "modifier": "private", "type": "File", "declarator": "mbtilesDir = new File(Environment.getExternalStorageDirectory().getPath() + MB_TILES_DIRECTORY)", "var_name": "mbtilesDir"}], "methods": [{"identifier": "init", "parameters": "(List<File> offlineFiles)", "modifiers": "private", "return": "void", "signature": "void init(List<File> offlineFiles)", "full_signature": "private void init(List<File> offlineFiles)", "class_method_signature": "MBTilesHelper.init(List<File> offlineFiles)", "testcase": false, "constructor": false}, {"identifier": "initializeMbTileslayers", "parameters": "(@NonNull Style style, List<File> offlineFiles)", "modifiers": "public", "return": "void", "signature": "void initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "full_signature": "public void initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "class_method_signature": "MBTilesHelper.initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "testcase": false, "constructor": false}, {"identifier": "initializeMbTileslayers", "parameters": "(File offlineFile)", "modifiers": "public", "return": "Pair<Set<Source>, Set<Layer>>", "signature": "Pair<Set<Source>, Set<Layer>> initializeMbTileslayers(File offlineFile)", "full_signature": "public Pair<Set<Source>, Set<Layer>> initializeMbTileslayers(File offlineFile)", "class_method_signature": "MBTilesHelper.initializeMbTileslayers(File offlineFile)", "testcase": false, "constructor": false}, {"identifier": "setMBTileLayers", "parameters": "(Context context, BaseLayerSwitcherPlugin baseLayerSwitcherPlugin)", "modifiers": "public", "return": "void", "signature": "void setMBTileLayers(Context context, BaseLayerSwitcherPlugin baseLayerSwitcherPlugin)", "full_signature": "public void setMBTileLayers(Context context, BaseLayerSwitcherPlugin baseLayerSwitcherPlugin)", "class_method_signature": "MBTilesHelper.setMBTileLayers(Context context, BaseLayerSwitcherPlugin baseLayerSwitcherPlugin)", "testcase": false, "constructor": false}, {"identifier": "initializeMbTilesServer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeMbTilesServer()", "full_signature": "private void initializeMbTilesServer()", "class_method_signature": "MBTilesHelper.initializeMbTilesServer()", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onDestroy()", "full_signature": "public void onDestroy()", "class_method_signature": "MBTilesHelper.onDestroy()", "testcase": false, "constructor": false}, {"identifier": "addMbtiles", "parameters": "(Style style, String id, File file)", "modifiers": "private", "return": "void", "signature": "void addMbtiles(Style style, String id, File file)", "full_signature": "private void addMbtiles(Style style, String id, File file)", "class_method_signature": "MBTilesHelper.addMbtiles(Style style, String id, File file)", "testcase": false, "constructor": false}, {"identifier": "addMbtiles", "parameters": "(String id, File file)", "modifiers": "private", "return": "Pair<Source, List<Layer>>", "signature": "Pair<Source, List<Layer>> addMbtiles(String id, File file)", "full_signature": "private Pair<Source, List<Layer>> addMbtiles(String id, File file)", "class_method_signature": "MBTilesHelper.addMbtiles(String id, File file)", "testcase": false, "constructor": false}, {"identifier": "createTileSet", "parameters": "(MbtilesFile mbtiles, String urlTemplate)", "modifiers": "private", "return": "TileSet", "signature": "TileSet createTileSet(MbtilesFile mbtiles, String urlTemplate)", "full_signature": "private TileSet createTileSet(MbtilesFile mbtiles, String urlTemplate)", "class_method_signature": "MBTilesHelper.createTileSet(MbtilesFile mbtiles, String urlTemplate)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/mbtiles/MBTilesHelper.java"}, "focal_method": {"identifier": "initializeMbTileslayers", "parameters": "(@NonNull Style style, List<File> offlineFiles)", "modifiers": "public", "return": "void", "body": "public void initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles) {\n        init(offlineFiles);\n        for (File file : offlineFiles) {\n            String name = file.getName();\n            if (name.endsWith(MB_TILES_EXTENSION)) {\n                String id = name.substring(0, name.length() - MB_TILES_EXTENSION.length());\n                addMbtiles(style, id, file);\n            }\n        }\n    }", "signature": "void initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "full_signature": "public void initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "class_method_signature": "MBTilesHelper.initializeMbTileslayers(@NonNull Style style, List<File> offlineFiles)", "testcase": false, "constructor": false, "invocations": ["init", "getName", "endsWith", "substring", "length", "length", "addMbtiles"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}