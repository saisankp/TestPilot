{"test_class": {"identifier": "CollapsedRequestSubjectTest", "superclass": "", "interfaces": "", "fields": [], "file": "hystrix-core/src/test/java/com/netflix/hystrix/collapser/CollapsedRequestSubjectTest.java"}, "test_case": {"identifier": "testSetException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetException() throws InterruptedException, ExecutionException {\n        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(\"hello\");\n        Observable<String> o = cr.toObservable();\n        Future<String> v = o.toBlocking().toFuture();\n\n        cr.setException(new RuntimeException(\"anException\"));\n\n        // fetch value\n        try {\n            v.get();\n            fail(\"expected exception\");\n        } catch (ExecutionException e) {\n            assertEquals(\"anException\", e.getCause().getMessage());\n        }\n    }", "signature": "void testSetException()", "full_signature": "@Test public void testSetException()", "class_method_signature": "CollapsedRequestSubjectTest.testSetException()", "testcase": true, "constructor": false, "invocations": ["toObservable", "toFuture", "toBlocking", "setException", "get", "fail", "assertEquals", "getMessage", "getCause"]}, "focal_class": {"identifier": "CollapsedRequestSubject", "superclass": "", "interfaces": "implements CollapsedRequest<T, R>", "fields": [{"original_string": "private final R argument;", "modifier": "private final", "type": "R", "declarator": "argument", "var_name": "argument"}, {"original_string": "private AtomicBoolean valueSet = new AtomicBoolean(false);", "modifier": "private", "type": "AtomicBoolean", "declarator": "valueSet = new AtomicBoolean(false)", "var_name": "valueSet"}, {"original_string": "private final ReplaySubject<T> subject = ReplaySubject.create();", "modifier": "private final", "type": "ReplaySubject<T>", "declarator": "subject = ReplaySubject.create()", "var_name": "subject"}, {"original_string": "private final Observable<T> subjectWithAccounting;", "modifier": "private final", "type": "Observable<T>", "declarator": "subjectWithAccounting", "var_name": "subjectWithAccounting"}, {"original_string": "private volatile int outstandingSubscriptions = 0;", "modifier": "private volatile", "type": "int", "declarator": "outstandingSubscriptions = 0", "var_name": "outstandingSubscriptions"}], "methods": [{"identifier": "CollapsedRequestSubject", "parameters": "(final R arg, final RequestBatch<?, T, R> containingBatch)", "modifiers": "public", "return": "", "signature": " CollapsedRequestSubject(final R arg, final RequestBatch<?, T, R> containingBatch)", "full_signature": "public  CollapsedRequestSubject(final R arg, final RequestBatch<?, T, R> containingBatch)", "class_method_signature": "CollapsedRequestSubject.CollapsedRequestSubject(final R arg, final RequestBatch<?, T, R> containingBatch)", "testcase": false, "constructor": true}, {"identifier": "CollapsedRequestSubject", "parameters": "(final R arg)", "modifiers": "public", "return": "", "signature": " CollapsedRequestSubject(final R arg)", "full_signature": "public  CollapsedRequestSubject(final R arg)", "class_method_signature": "CollapsedRequestSubject.CollapsedRequestSubject(final R arg)", "testcase": false, "constructor": true}, {"identifier": "getArgument", "parameters": "()", "modifiers": "@Override public", "return": "R", "signature": "R getArgument()", "full_signature": "@Override public R getArgument()", "class_method_signature": "CollapsedRequestSubject.getArgument()", "testcase": false, "constructor": false}, {"identifier": "setResponse", "parameters": "(T response)", "modifiers": "@Override public", "return": "void", "signature": "void setResponse(T response)", "full_signature": "@Override public void setResponse(T response)", "class_method_signature": "CollapsedRequestSubject.setResponse(T response)", "testcase": false, "constructor": false}, {"identifier": "emitResponse", "parameters": "(T response)", "modifiers": "@Override public", "return": "void", "signature": "void emitResponse(T response)", "full_signature": "@Override public void emitResponse(T response)", "class_method_signature": "CollapsedRequestSubject.emitResponse(T response)", "testcase": false, "constructor": false}, {"identifier": "setComplete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setComplete()", "full_signature": "@Override public void setComplete()", "class_method_signature": "CollapsedRequestSubject.setComplete()", "testcase": false, "constructor": false}, {"identifier": "setExceptionIfResponseNotReceived", "parameters": "(Exception e)", "modifiers": "public", "return": "void", "signature": "void setExceptionIfResponseNotReceived(Exception e)", "full_signature": "public void setExceptionIfResponseNotReceived(Exception e)", "class_method_signature": "CollapsedRequestSubject.setExceptionIfResponseNotReceived(Exception e)", "testcase": false, "constructor": false}, {"identifier": "setExceptionIfResponseNotReceived", "parameters": "(Exception e, String exceptionMessage)", "modifiers": "public", "return": "Exception", "signature": "Exception setExceptionIfResponseNotReceived(Exception e, String exceptionMessage)", "full_signature": "public Exception setExceptionIfResponseNotReceived(Exception e, String exceptionMessage)", "class_method_signature": "CollapsedRequestSubject.setExceptionIfResponseNotReceived(Exception e, String exceptionMessage)", "testcase": false, "constructor": false}, {"identifier": "setException", "parameters": "(Exception e)", "modifiers": "@Override public", "return": "void", "signature": "void setException(Exception e)", "full_signature": "@Override public void setException(Exception e)", "class_method_signature": "CollapsedRequestSubject.setException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "isTerminated", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isTerminated()", "full_signature": "private boolean isTerminated()", "class_method_signature": "CollapsedRequestSubject.isTerminated()", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "public", "return": "Observable<T>", "signature": "Observable<T> toObservable()", "full_signature": "public Observable<T> toObservable()", "class_method_signature": "CollapsedRequestSubject.toObservable()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/collapser/CollapsedRequestSubject.java"}, "focal_method": {"identifier": "setException", "parameters": "(Exception e)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setException(Exception e) {\n        if (!isTerminated()) {\n            subject.onError(e);\n        } else {\n            throw new IllegalStateException(\"Response has already terminated so exception can not be set\", e);\n        }\n    }", "signature": "void setException(Exception e)", "full_signature": "@Override public void setException(Exception e)", "class_method_signature": "CollapsedRequestSubject.setException(Exception e)", "testcase": false, "constructor": false, "invocations": ["isTerminated", "onError"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}