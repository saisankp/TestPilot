{"test_class": {"identifier": "PrepRequestProcessorTest", "superclass": "extends ClientBase", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PrepRequestProcessorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PrepRequestProcessorTest.class)", "var_name": "LOG"}, {"original_string": "private static final int CONNECTION_TIMEOUT = 3000;", "modifier": "private static final", "type": "int", "declarator": "CONNECTION_TIMEOUT = 3000", "var_name": "CONNECTION_TIMEOUT"}, {"original_string": "private static String HOSTPORT = \"127.0.0.1:\" + PortAssignment.unique();", "modifier": "private static", "type": "String", "declarator": "HOSTPORT = \"127.0.0.1:\" + PortAssignment.unique()", "var_name": "HOSTPORT"}, {"original_string": "private CountDownLatch pLatch;", "modifier": "private", "type": "CountDownLatch", "declarator": "pLatch", "var_name": "pLatch"}, {"original_string": "private ZooKeeperServer zks;", "modifier": "private", "type": "ZooKeeperServer", "declarator": "zks", "var_name": "zks"}, {"original_string": "private ServerCnxnFactory servcnxnf;", "modifier": "private", "type": "ServerCnxnFactory", "declarator": "servcnxnf", "var_name": "servcnxnf"}, {"original_string": "private PrepRequestProcessor processor;", "modifier": "private", "type": "PrepRequestProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private Request outcome;", "modifier": "private", "type": "Request", "declarator": "outcome", "var_name": "outcome"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java"}, "test_case": {"identifier": "testInvalidPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidPath() throws Exception {\n        pLatch = new CountDownLatch(1);\n        processor = new PrepRequestProcessor(zks, new MyRequestProcessor());\n\n        SetDataRequest record = new SetDataRequest(\"\", new byte[0], -1);\n        Request req = createRequest(record, OpCode.setData);\n        processor.pRequest(req);\n        pLatch.await();\n        Assert.assertEquals(outcome.getHdr().getType(), OpCode.error);\n        Assert.assertEquals(outcome.getException().code(), KeeperException.Code.BADARGUMENTS);\n    }", "signature": "void testInvalidPath()", "full_signature": "@Test public void testInvalidPath()", "class_method_signature": "PrepRequestProcessorTest.testInvalidPath()", "testcase": true, "constructor": false, "invocations": ["createRequest", "pRequest", "await", "assertEquals", "getType", "getHdr", "assertEquals", "code", "getException"]}, "focal_class": {"identifier": "PrepRequestProcessor", "superclass": "extends ZooKeeperCriticalThread", "interfaces": "implements\n        RequestProcessor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PrepRequestProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PrepRequestProcessor.class)", "var_name": "LOG"}, {"original_string": "static boolean skipACL;", "modifier": "static", "type": "boolean", "declarator": "skipACL", "var_name": "skipACL"}, {"original_string": "private static  boolean failCreate = false;", "modifier": "private static", "type": "boolean", "declarator": "failCreate = false", "var_name": "failCreate"}, {"original_string": "LinkedBlockingQueue<Request> submittedRequests = new LinkedBlockingQueue<Request>();", "modifier": "", "type": "LinkedBlockingQueue<Request>", "declarator": "submittedRequests = new LinkedBlockingQueue<Request>()", "var_name": "submittedRequests"}, {"original_string": "private final RequestProcessor nextProcessor;", "modifier": "private final", "type": "RequestProcessor", "declarator": "nextProcessor", "var_name": "nextProcessor"}, {"original_string": "ZooKeeperServer zks;", "modifier": "", "type": "ZooKeeperServer", "declarator": "zks", "var_name": "zks"}], "methods": [{"identifier": "PrepRequestProcessor", "parameters": "(ZooKeeperServer zks,\n            RequestProcessor nextProcessor)", "modifiers": "public", "return": "", "signature": " PrepRequestProcessor(ZooKeeperServer zks,\n            RequestProcessor nextProcessor)", "full_signature": "public  PrepRequestProcessor(ZooKeeperServer zks,\n            RequestProcessor nextProcessor)", "class_method_signature": "PrepRequestProcessor.PrepRequestProcessor(ZooKeeperServer zks,\n            RequestProcessor nextProcessor)", "testcase": false, "constructor": true}, {"identifier": "setFailCreate", "parameters": "(boolean b)", "modifiers": "public static", "return": "void", "signature": "void setFailCreate(boolean b)", "full_signature": "public static void setFailCreate(boolean b)", "class_method_signature": "PrepRequestProcessor.setFailCreate(boolean b)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "PrepRequestProcessor.run()", "testcase": false, "constructor": false}, {"identifier": "getRecordForPath", "parameters": "(String path)", "modifiers": "private", "return": "ChangeRecord", "signature": "ChangeRecord getRecordForPath(String path)", "full_signature": "private ChangeRecord getRecordForPath(String path)", "class_method_signature": "PrepRequestProcessor.getRecordForPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getOutstandingChange", "parameters": "(String path)", "modifiers": "private", "return": "ChangeRecord", "signature": "ChangeRecord getOutstandingChange(String path)", "full_signature": "private ChangeRecord getOutstandingChange(String path)", "class_method_signature": "PrepRequestProcessor.getOutstandingChange(String path)", "testcase": false, "constructor": false}, {"identifier": "addChangeRecord", "parameters": "(ChangeRecord c)", "modifiers": "private", "return": "void", "signature": "void addChangeRecord(ChangeRecord c)", "full_signature": "private void addChangeRecord(ChangeRecord c)", "class_method_signature": "PrepRequestProcessor.addChangeRecord(ChangeRecord c)", "testcase": false, "constructor": false}, {"identifier": "getPendingChanges", "parameters": "(MultiTransactionRecord multiRequest)", "modifiers": "private", "return": "Map<String, ChangeRecord>", "signature": "Map<String, ChangeRecord> getPendingChanges(MultiTransactionRecord multiRequest)", "full_signature": "private Map<String, ChangeRecord> getPendingChanges(MultiTransactionRecord multiRequest)", "class_method_signature": "PrepRequestProcessor.getPendingChanges(MultiTransactionRecord multiRequest)", "testcase": false, "constructor": false}, {"identifier": "rollbackPendingChanges", "parameters": "(long zxid, Map<String, ChangeRecord>pendingChangeRecords)", "modifiers": "", "return": "void", "signature": "void rollbackPendingChanges(long zxid, Map<String, ChangeRecord>pendingChangeRecords)", "full_signature": " void rollbackPendingChanges(long zxid, Map<String, ChangeRecord>pendingChangeRecords)", "class_method_signature": "PrepRequestProcessor.rollbackPendingChanges(long zxid, Map<String, ChangeRecord>pendingChangeRecords)", "testcase": false, "constructor": false}, {"identifier": "checkACL", "parameters": "(ZooKeeperServer zks, List<ACL> acl, int perm,\n            List<Id> ids)", "modifiers": "static", "return": "void", "signature": "void checkACL(ZooKeeperServer zks, List<ACL> acl, int perm,\n            List<Id> ids)", "full_signature": "static void checkACL(ZooKeeperServer zks, List<ACL> acl, int perm,\n            List<Id> ids)", "class_method_signature": "PrepRequestProcessor.checkACL(ZooKeeperServer zks, List<ACL> acl, int perm,\n            List<Id> ids)", "testcase": false, "constructor": false}, {"identifier": "validatePathForCreate", "parameters": "(String path, long sessionId)", "modifiers": "private", "return": "String", "signature": "String validatePathForCreate(String path, long sessionId)", "full_signature": "private String validatePathForCreate(String path, long sessionId)", "class_method_signature": "PrepRequestProcessor.validatePathForCreate(String path, long sessionId)", "testcase": false, "constructor": false}, {"identifier": "pRequest2Txn", "parameters": "(int type, long zxid, Request request,\n                                Record record, boolean deserialize)", "modifiers": "protected", "return": "void", "signature": "void pRequest2Txn(int type, long zxid, Request request,\n                                Record record, boolean deserialize)", "full_signature": "protected void pRequest2Txn(int type, long zxid, Request request,\n                                Record record, boolean deserialize)", "class_method_signature": "PrepRequestProcessor.pRequest2Txn(int type, long zxid, Request request,\n                                Record record, boolean deserialize)", "testcase": false, "constructor": false}, {"identifier": "pRequest2TxnCreate", "parameters": "(int type, Request request, Record record, boolean deserialize)", "modifiers": "private", "return": "void", "signature": "void pRequest2TxnCreate(int type, Request request, Record record, boolean deserialize)", "full_signature": "private void pRequest2TxnCreate(int type, Request request, Record record, boolean deserialize)", "class_method_signature": "PrepRequestProcessor.pRequest2TxnCreate(int type, Request request, Record record, boolean deserialize)", "testcase": false, "constructor": false}, {"identifier": "validatePath", "parameters": "(String path, long sessionId)", "modifiers": "private", "return": "void", "signature": "void validatePath(String path, long sessionId)", "full_signature": "private void validatePath(String path, long sessionId)", "class_method_signature": "PrepRequestProcessor.validatePath(String path, long sessionId)", "testcase": false, "constructor": false}, {"identifier": "getParentPathAndValidate", "parameters": "(String path)", "modifiers": "private", "return": "String", "signature": "String getParentPathAndValidate(String path)", "full_signature": "private String getParentPathAndValidate(String path)", "class_method_signature": "PrepRequestProcessor.getParentPathAndValidate(String path)", "testcase": false, "constructor": false}, {"identifier": "checkAndIncVersion", "parameters": "(int currentVersion, int expectedVersion, String path)", "modifiers": "private static", "return": "int", "signature": "int checkAndIncVersion(int currentVersion, int expectedVersion, String path)", "full_signature": "private static int checkAndIncVersion(int currentVersion, int expectedVersion, String path)", "class_method_signature": "PrepRequestProcessor.checkAndIncVersion(int currentVersion, int expectedVersion, String path)", "testcase": false, "constructor": false}, {"identifier": "pRequest", "parameters": "(Request request)", "modifiers": "protected", "return": "void", "signature": "void pRequest(Request request)", "full_signature": "protected void pRequest(Request request)", "class_method_signature": "PrepRequestProcessor.pRequest(Request request)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicates", "parameters": "(List<ACL> acl)", "modifiers": "private", "return": "List<ACL>", "signature": "List<ACL> removeDuplicates(List<ACL> acl)", "full_signature": "private List<ACL> removeDuplicates(List<ACL> acl)", "class_method_signature": "PrepRequestProcessor.removeDuplicates(List<ACL> acl)", "testcase": false, "constructor": false}, {"identifier": "validateCreateRequest", "parameters": "(String path, CreateMode createMode, Request request, long ttl)", "modifiers": "private", "return": "void", "signature": "void validateCreateRequest(String path, CreateMode createMode, Request request, long ttl)", "full_signature": "private void validateCreateRequest(String path, CreateMode createMode, Request request, long ttl)", "class_method_signature": "PrepRequestProcessor.validateCreateRequest(String path, CreateMode createMode, Request request, long ttl)", "testcase": false, "constructor": false}, {"identifier": "fixupACL", "parameters": "(String path, List<Id> authInfo, List<ACL> acls)", "modifiers": "private", "return": "List<ACL>", "signature": "List<ACL> fixupACL(String path, List<Id> authInfo, List<ACL> acls)", "full_signature": "private List<ACL> fixupACL(String path, List<Id> authInfo, List<ACL> acls)", "class_method_signature": "PrepRequestProcessor.fixupACL(String path, List<Id> authInfo, List<ACL> acls)", "testcase": false, "constructor": false}, {"identifier": "processRequest", "parameters": "(Request request)", "modifiers": "public", "return": "void", "signature": "void processRequest(Request request)", "full_signature": "public void processRequest(Request request)", "class_method_signature": "PrepRequestProcessor.processRequest(Request request)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "PrepRequestProcessor.shutdown()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java"}, "focal_method": {"identifier": "pRequest", "parameters": "(Request request)", "modifiers": "protected", "return": "void", "body": "protected void pRequest(Request request) throws RequestProcessorException {\n        // LOG.info(\"Prep>>> cxid = \" + request.cxid + \" type = \" +\n        // request.type + \" id = 0x\" + Long.toHexString(request.sessionId));\n        request.setHdr(null);\n        request.setTxn(null);\n\n        try {\n            switch (request.type) {\n            case OpCode.createContainer:\n            case OpCode.create:\n            case OpCode.create2:\n                CreateRequest create2Request = new CreateRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, true);\n                break;\n            case OpCode.createTTL:\n                CreateTTLRequest createTtlRequest = new CreateTTLRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, true);\n                break;\n            case OpCode.deleteContainer:\n            case OpCode.delete:\n                DeleteRequest deleteRequest = new DeleteRequest();\n                pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, true);\n                break;\n            case OpCode.setData:\n                SetDataRequest setDataRequest = new SetDataRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, true);\n                break;\n            case OpCode.reconfig:\n                ReconfigRequest reconfigRequest = new ReconfigRequest();\n                ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);\n                pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, true);\n                break;\n            case OpCode.setACL:\n                SetACLRequest setAclRequest = new SetACLRequest();                \n                pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, true);\n                break;\n            case OpCode.check:\n                CheckVersionRequest checkRequest = new CheckVersionRequest();              \n                pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, true);\n                break;\n            case OpCode.multi:\n                MultiTransactionRecord multiRequest = new MultiTransactionRecord();\n                try {\n                    ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);\n                } catch(IOException e) {\n                    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),\n                            Time.currentWallTime(), OpCode.multi));\n                    throw e;\n                }\n                List<Txn> txns = new ArrayList<Txn>();\n                //Each op in a multi-op must have the same zxid!\n                long zxid = zks.getNextZxid();\n                KeeperException ke = null;\n\n                //Store off current pending change records in case we need to rollback\n                Map<String, ChangeRecord> pendingChanges = getPendingChanges(multiRequest);\n\n                for(Op op: multiRequest) {\n                    Record subrequest = op.toRequestRecord();\n                    int type;\n                    Record txn;\n\n                    /* If we've already failed one of the ops, don't bother\n                     * trying the rest as we know it's going to fail and it\n                     * would be confusing in the logfiles.\n                     */\n                    if (ke != null) {\n                        type = OpCode.error;\n                        txn = new ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());\n                    }\n\n                    /* Prep the request and convert to a Txn */\n                    else {\n                        try {\n                            pRequest2Txn(op.getType(), zxid, request, subrequest, false);\n                            type = request.getHdr().getType();\n                            txn = request.getTxn();\n                        } catch (KeeperException e) {\n                            ke = e;\n                            type = OpCode.error;\n                            txn = new ErrorTxn(e.code().intValue());\n\n                            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                                LOG.info(\"Got user-level KeeperException when processing {} aborting\" +\n                                        \" remaining multi ops. Error Path:{} Error:{}\",\n                                        request.toString(), e.getPath(), e.getMessage());\n                            }\n\n                            request.setException(e);\n\n                            /* Rollback change records from failed multi-op */\n                            rollbackPendingChanges(zxid, pendingChanges);\n                        }\n                    }\n\n                    //FIXME: I don't want to have to serialize it here and then\n                    //       immediately deserialize in next processor. But I'm\n                    //       not sure how else to get the txn stored into our list.\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n                    txn.serialize(boa, \"request\") ;\n                    ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());\n\n                    txns.add(new Txn(type, bb.array()));\n                }\n\n                request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,\n                        Time.currentWallTime(), request.type));\n                request.setTxn(new MultiTxn(txns));\n\n                break;\n\n            //create/close session don't require request record\n            case OpCode.createSession:\n            case OpCode.closeSession:\n                if (!request.isLocalSession()) {\n                    pRequest2Txn(request.type, zks.getNextZxid(), request,\n                                 null, true);\n                }\n                break;\n\n            //All the rest don't need to create a Txn - just verify session\n            case OpCode.sync:\n            case OpCode.exists:\n            case OpCode.getData:\n            case OpCode.getACL:\n            case OpCode.getChildren:\n            case OpCode.getChildren2:\n            case OpCode.ping:\n            case OpCode.setWatches:\n            case OpCode.checkWatches:\n            case OpCode.removeWatches:\n                zks.sessionTracker.checkSession(request.sessionId,\n                        request.getOwner());\n                break;\n            default:\n                LOG.warn(\"unknown type \" + request.type);\n                break;\n            }\n        } catch (KeeperException e) {\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(e.code().intValue()));\n            }\n\n            if (e.code().intValue() > Code.APIERROR.intValue()) {\n                LOG.info(\"Got user-level KeeperException when processing {} Error Path:{} Error:{}\",\n                        request.toString(), e.getPath(), e.getMessage());\n            }\n            request.setException(e);\n        } catch (Exception e) {\n            // log at error level as we are returning a marshalling\n            // error to the user\n            LOG.error(\"Failed to process \" + request, e);\n\n            StringBuilder sb = new StringBuilder();\n            ByteBuffer bb = request.request;\n            if(bb != null){\n                bb.rewind();\n                while (bb.hasRemaining()) {\n                    sb.append(Integer.toHexString(bb.get() & 0xff));\n                }\n            } else {\n                sb.append(\"request buffer is null\");\n            }\n\n            LOG.error(\"Dumping request buffer: 0x\" + sb.toString());\n            if (request.getHdr() != null) {\n                request.getHdr().setType(OpCode.error);\n                request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));\n            }\n        }\n        request.zxid = zks.getZxid();\n        nextProcessor.processRequest(request);\n    }", "signature": "void pRequest(Request request)", "full_signature": "protected void pRequest(Request request)", "class_method_signature": "PrepRequestProcessor.pRequest(Request request)", "testcase": false, "constructor": false, "invocations": ["setHdr", "setTxn", "pRequest2Txn", "getNextZxid", "pRequest2Txn", "getNextZxid", "pRequest2Txn", "getNextZxid", "pRequest2Txn", "getNextZxid", "byteBuffer2Record", "pRequest2Txn", "getNextZxid", "pRequest2Txn", "getNextZxid", "pRequest2Txn", "getNextZxid", "byteBuffer2Record", "setHdr", "getNextZxid", "currentWallTime", "getNextZxid", "getPendingChanges", "toRequestRecord", "intValue", "pRequest2Txn", "getType", "getType", "getHdr", "getTxn", "intValue", "code", "intValue", "code", "intValue", "info", "toString", "getPath", "getMessage", "setException", "rollbackPendingChanges", "getArchive", "serialize", "wrap", "toByteArray", "add", "array", "setHdr", "currentWallTime", "setTxn", "isLocalSession", "pRequest2Txn", "getNextZxid", "checkSession", "getOwner", "warn", "getHdr", "setType", "getHdr", "setTxn", "intValue", "code", "intValue", "code", "intValue", "info", "toString", "getPath", "getMessage", "setException", "error", "rewind", "hasRemaining", "append", "toHexString", "get", "append", "error", "toString", "getHdr", "setType", "getHdr", "setTxn", "intValue", "getZxid", "processRequest"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}