{"test_class": {"identifier": "ExportManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "aesh/src/test/java/org/aesh/command/export/ExportManagerTest.java"}, "test_case": {"identifier": "testAddVariable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddVariable() throws IOException {\n\n        ExportManager exportManager =\n                new ExportManager(new File(Config.getTmpDir()+Config.getPathSeparator()+\"aesh_variable_test\"));\n\n        exportManager.addVariable(\"export TEST=/foo/bar\");\n        assertEquals(\"/foo/bar\", exportManager.getValue(\"TEST\"));\n        exportManager.addVariable(\"export FOO=/opt\");\n        exportManager.addVariable(\"export FOO2=$FOO\");\n        assertEquals(\"/opt\", exportManager.getValue(\"$FOO\"));\n        assertEquals(\"/opt\", exportManager.getValue(\"${FOO}\"));\n        assertEquals(\"/opt\", exportManager.getValue(\"FOO2\"));\n        assertEquals(\"/opt\", exportManager.getValue(\"${FOO2}\"));\n        assertEquals(\"/opt:/foo/bar\", exportManager.getValue(\"$FOO:$TEST\"));\n        assertEquals(\"/opt:/foo/bar\", exportManager.getValue(\"$FOO2:${TEST}\"));\n        assertEquals(\"/opt:/foo/bar:/foo\", exportManager.getValue(\"$FOO2:$TEST:/foo\"));\n        assertEquals(\"\", exportManager.getValue(\"$FOO3\"));\n\n        exportManager.addVariable(\"export PATH=$FOO2:$TEST:/foo\");\n        exportManager.addVariable(\"export PATH=$PATH:/bar\");\n        assertEquals(\"/opt:/foo/bar:/foo:/bar\", exportManager.getValue(\"$PATH\"));\n        exportManager.addVariable(\"export FOO2=/bin\");\n        assertEquals(\"/bin\", exportManager.getValue(\"${FOO2}\"));\n        assertEquals(\"/bin:/foo/bar:/foo:/bar\", exportManager.getValue(\"$PATH\"));\n\n        exportManager.addVariable(\"export TEST=/bla /ha\");\n        assertEquals(\"/bla\", exportManager.getValue(\"TEST\"));\n\n        assertEquals(\"ls -la /bla\", exportManager.getValue(\"ls -la $TEST\"));\n        assertEquals(\"/bla ls -la /bla\", exportManager.getValue(\"$TEST ls -la $TEST\"));\n    }", "signature": "void testAddVariable()", "full_signature": "@Test public void testAddVariable()", "class_method_signature": "ExportManagerTest.testAddVariable()", "testcase": true, "constructor": false, "invocations": ["getTmpDir", "getPathSeparator", "addVariable", "assertEquals", "getValue", "addVariable", "addVariable", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "addVariable", "addVariable", "assertEquals", "getValue", "addVariable", "assertEquals", "getValue", "assertEquals", "getValue", "addVariable", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "ExportManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char DOLLAR = '$';", "modifier": "private static final", "type": "char", "declarator": "DOLLAR = '$'", "var_name": "DOLLAR"}, {"original_string": "private final Map<String, String> variables;", "modifier": "private final", "type": "Map<String, String>", "declarator": "variables", "var_name": "variables"}, {"original_string": "private final Pattern exportPattern = Pattern.compile(\"^(export)\\\\s+(\\\\w+)\\\\s*=\\\\s*(\\\\S+).*$\");", "modifier": "private final", "type": "Pattern", "declarator": "exportPattern = Pattern.compile(\"^(export)\\\\s+(\\\\w+)\\\\s*=\\\\s*(\\\\S+).*$\")", "var_name": "exportPattern"}, {"original_string": "private final Pattern variableDollarFirstPattern = Pattern.compile(\"\\\\$(\\\\w+|\\\\{(\\\\w+)\\\\})(.*)\");", "modifier": "private final", "type": "Pattern", "declarator": "variableDollarFirstPattern = Pattern.compile(\"\\\\$(\\\\w+|\\\\{(\\\\w+)\\\\})(.*)\")", "var_name": "variableDollarFirstPattern"}, {"original_string": "private final Pattern variablePattern = Pattern.compile(\"(.*)\\\\$(\\\\w+|\\\\{(\\\\w+)\\\\})(.*)\");", "modifier": "private final", "type": "Pattern", "declarator": "variablePattern = Pattern.compile(\"(.*)\\\\$(\\\\w+|\\\\{(\\\\w+)\\\\})(.*)\")", "var_name": "variablePattern"}, {"original_string": "private static final Logger LOGGER = LoggerUtil.getLogger(ExportManager.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerUtil.getLogger(ExportManager.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String EXPORT = \"export\";", "modifier": "private static final", "type": "String", "declarator": "EXPORT = \"export\"", "var_name": "EXPORT"}, {"original_string": "private final File exportFile;", "modifier": "private final", "type": "File", "declarator": "exportFile", "var_name": "exportFile"}, {"original_string": "private final boolean exportUsesSystemEnvironment;", "modifier": "private final", "type": "boolean", "declarator": "exportUsesSystemEnvironment", "var_name": "exportUsesSystemEnvironment"}, {"original_string": "private final ExportChangeListener listener;", "modifier": "private final", "type": "ExportChangeListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "ExportManager", "parameters": "(File exportFile)", "modifiers": "public", "return": "", "signature": " ExportManager(File exportFile)", "full_signature": "public  ExportManager(File exportFile)", "class_method_signature": "ExportManager.ExportManager(File exportFile)", "testcase": false, "constructor": true}, {"identifier": "ExportManager", "parameters": "(File exportFile, ExportChangeListener listener)", "modifiers": "public", "return": "", "signature": " ExportManager(File exportFile, ExportChangeListener listener)", "full_signature": "public  ExportManager(File exportFile, ExportChangeListener listener)", "class_method_signature": "ExportManager.ExportManager(File exportFile, ExportChangeListener listener)", "testcase": false, "constructor": true}, {"identifier": "ExportManager", "parameters": "(File exportFile, boolean exportUsesSystemEnvironment)", "modifiers": "public", "return": "", "signature": " ExportManager(File exportFile, boolean exportUsesSystemEnvironment)", "full_signature": "public  ExportManager(File exportFile, boolean exportUsesSystemEnvironment)", "class_method_signature": "ExportManager.ExportManager(File exportFile, boolean exportUsesSystemEnvironment)", "testcase": false, "constructor": true}, {"identifier": "ExportManager", "parameters": "(File exportFile, boolean exportUsesSystemEnvironment, ExportChangeListener listener)", "modifiers": "public", "return": "", "signature": " ExportManager(File exportFile, boolean exportUsesSystemEnvironment, ExportChangeListener listener)", "full_signature": "public  ExportManager(File exportFile, boolean exportUsesSystemEnvironment, ExportChangeListener listener)", "class_method_signature": "ExportManager.ExportManager(File exportFile, boolean exportUsesSystemEnvironment, ExportChangeListener listener)", "testcase": false, "constructor": true}, {"identifier": "readVariablesFromFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void readVariablesFromFile()", "full_signature": "private void readVariablesFromFile()", "class_method_signature": "ExportManager.readVariablesFromFile()", "testcase": false, "constructor": false}, {"identifier": "keys", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> keys()", "full_signature": "public Set<String> keys()", "class_method_signature": "ExportManager.keys()", "testcase": false, "constructor": false}, {"identifier": "addVariable", "parameters": "(String line)", "modifiers": "public", "return": "String", "signature": "String addVariable(String line)", "full_signature": "public String addVariable(String line)", "class_method_signature": "ExportManager.addVariable(String line)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getValue(String key)", "full_signature": "public String getValue(String key)", "class_method_signature": "ExportManager.getValue(String key)", "testcase": false, "constructor": false}, {"identifier": "getVariable", "parameters": "(String key)", "modifiers": "private", "return": "String", "signature": "String getVariable(String key)", "full_signature": "private String getVariable(String key)", "class_method_signature": "ExportManager.getVariable(String key)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(String key)", "modifiers": "private", "return": "boolean", "signature": "boolean containsKey(String key)", "full_signature": "private boolean containsKey(String key)", "class_method_signature": "ExportManager.containsKey(String key)", "testcase": false, "constructor": false}, {"identifier": "getValueIgnoreCase", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getValueIgnoreCase(String name)", "full_signature": "public String getValueIgnoreCase(String name)", "class_method_signature": "ExportManager.getValueIgnoreCase(String name)", "testcase": false, "constructor": false}, {"identifier": "parseValue", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String parseValue(String value)", "full_signature": "private String parseValue(String value)", "class_method_signature": "ExportManager.parseValue(String value)", "testcase": false, "constructor": false}, {"identifier": "listAllVariables", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String listAllVariables()", "full_signature": "public String listAllVariables()", "class_method_signature": "ExportManager.listAllVariables()", "testcase": false, "constructor": false}, {"identifier": "persistVariables", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void persistVariables()", "full_signature": "public void persistVariables()", "class_method_signature": "ExportManager.persistVariables()", "testcase": false, "constructor": false}, {"identifier": "getAllNamesWithEquals", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllNamesWithEquals()", "full_signature": "public List<String> getAllNamesWithEquals()", "class_method_signature": "ExportManager.getAllNamesWithEquals()", "testcase": false, "constructor": false}, {"identifier": "getAllNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllNames()", "full_signature": "public List<String> getAllNames()", "class_method_signature": "ExportManager.getAllNames()", "testcase": false, "constructor": false}, {"identifier": "findAllMatchingKeys", "parameters": "(String word)", "modifiers": "public", "return": "List<String>", "signature": "List<String> findAllMatchingKeys(String word)", "full_signature": "public List<String> findAllMatchingKeys(String word)", "class_method_signature": "ExportManager.findAllMatchingKeys(String word)", "testcase": false, "constructor": false}], "file": "aesh/src/main/java/org/aesh/command/export/ExportManager.java"}, "focal_method": {"identifier": "addVariable", "parameters": "(String line)", "modifiers": "public", "return": "String", "body": "public String addVariable(String line) {\n        Matcher variableMatcher = exportPattern.matcher(line);\n        if (variableMatcher.matches()) {\n            String name = variableMatcher.group(2);\n            String value = variableMatcher.group(3);\n            if (value.contains(String.valueOf(DOLLAR + name))) {\n                value = value.replace(String.valueOf(DOLLAR + name), variables.get(name));\n            }\n            variables.put(name, value);\n            if(listener != null)\n                listener.exportChange(name, value);\n            return null;\n        }\n        return \"export: usage: export [name[=value] ...]\";\n    }", "signature": "String addVariable(String line)", "full_signature": "public String addVariable(String line)", "class_method_signature": "ExportManager.addVariable(String line)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "group", "group", "contains", "valueOf", "replace", "valueOf", "get", "put", "exportChange"]}, "repository": {"repo_id": 2280644, "url": "https://github.com/aeshell/aesh", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 83, "size": 6068, "license": "licensed"}}