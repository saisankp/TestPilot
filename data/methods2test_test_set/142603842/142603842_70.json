{"test_class": {"identifier": "DataSetDownloadControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DemoService demoService;", "modifier": "@Mock\n    private", "type": "DemoService", "declarator": "demoService", "var_name": "demoService"}, {"original_string": "@InjectMocks\n    private DataSetDownloadController controller;", "modifier": "@InjectMocks\n    private", "type": "DataSetDownloadController", "declarator": "controller", "var_name": "controller"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/DataSetDownloadControllerTest.java"}, "test_case": {"identifier": "export", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void export() throws IOException {\n        // arrange\n        String msg = \"dummy string\";\n        when(demoService.exportDataSet()).thenReturn(msg);\n\n        // act\n        ResponseEntity<Resource> responseEntity = controller.exportDataSet();\n\n        // assert\n        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n        HttpHeaders headers = responseEntity.getHeaders();\n        // String.length() works here because the message is ASCII\n        assertThat(headers.getContentLength()).isEqualTo(msg.length());\n        assertThat(headers.getContentType()).isNotNull();\n        assertThat(headers.getContentType().toString()).isEqualToIgnoringWhitespace(\"text/x-yaml;charset=UTF-8\");\n        assertThat(headers.getContentDisposition()).isNotNull();\n        String contentDisposition = headers.getContentDisposition().toString();\n        assertThat(contentDisposition)\n                .startsWith(\"attachment;\")\n                .containsPattern(\"; *filename=\\\".*\\\\.yaml\\\"\");\n    }", "signature": "void export()", "full_signature": "@Test void export()", "class_method_signature": "DataSetDownloadControllerTest.export()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "exportDataSet", "exportDataSet", "isEqualTo", "assertThat", "getStatusCode", "getHeaders", "isEqualTo", "assertThat", "getContentLength", "length", "isNotNull", "assertThat", "getContentType", "isEqualToIgnoringWhitespace", "assertThat", "toString", "getContentType", "isNotNull", "assertThat", "getContentDisposition", "toString", "getContentDisposition", "containsPattern", "startsWith", "assertThat"]}, "focal_class": {"identifier": "DataSetDownloadController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DemoService demoService;", "modifier": "private final", "type": "DemoService", "declarator": "demoService", "var_name": "demoService"}], "methods": [{"identifier": "DataSetDownloadController", "parameters": "(DemoService demoService)", "modifiers": "", "return": "", "signature": " DataSetDownloadController(DemoService demoService)", "full_signature": "  DataSetDownloadController(DemoService demoService)", "class_method_signature": "DataSetDownloadController.DataSetDownloadController(DemoService demoService)", "testcase": false, "constructor": true}, {"identifier": "exportDataSet", "parameters": "()", "modifiers": "@GetMapping(value = \"/dataset/export\") @ResponseBody public", "return": "ResponseEntity<Resource>", "signature": "ResponseEntity<Resource> exportDataSet()", "full_signature": "@GetMapping(value = \"/dataset/export\") @ResponseBody public ResponseEntity<Resource> exportDataSet()", "class_method_signature": "DataSetDownloadController.exportDataSet()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/DataSetDownloadController.java"}, "focal_method": {"identifier": "exportDataSet", "parameters": "()", "modifiers": "@GetMapping(value = \"/dataset/export\") @ResponseBody public", "return": "ResponseEntity<Resource>", "body": "@GetMapping(value = \"/dataset/export\")\n    @ResponseBody\n    public ResponseEntity<Resource> exportDataSet() throws IOException {\n        String dataSet = demoService.exportDataSet();\n        byte[] dataSetBytes = dataSet.getBytes(StandardCharsets.UTF_8);\n        try (InputStream is = new ByteArrayInputStream(dataSetBytes)) {\n            HttpHeaders headers = new HttpHeaders();\n            ContentDisposition attachment = ContentDisposition.builder(\"attachment\")\n                    .filename(\"vrp_data_set.yaml\")\n                    .build();\n            headers.setContentDisposition(attachment);\n            return ResponseEntity.ok()\n                    .headers(headers)\n                    .contentLength(dataSetBytes.length)\n                    .contentType(new MediaType(\"text\", \"x-yaml\", StandardCharsets.UTF_8))\n                    .body(new InputStreamResource(is));\n        }\n    }", "signature": "ResponseEntity<Resource> exportDataSet()", "full_signature": "@GetMapping(value = \"/dataset/export\") @ResponseBody public ResponseEntity<Resource> exportDataSet()", "class_method_signature": "DataSetDownloadController.exportDataSet()", "testcase": false, "constructor": false, "invocations": ["exportDataSet", "getBytes", "build", "filename", "builder", "setContentDisposition", "body", "contentType", "contentLength", "headers", "ok"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}