{"test_class": {"identifier": "ExcelFileImportDefaultTest", "superclass": "", "interfaces": "", "fields": [], "file": "persistence/src/test/java/org/devgateway/toolkit/persistence/excel/ExcelFileImportDefaultTest.java"}, "test_case": {"identifier": "readWorkbook", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readWorkbook() throws Exception {\n        final ClassLoader classLoader = getClass().getClassLoader();\n        final ExcelFileImport excelFileImport = new ExcelFileImportDefault(new MyApplicationContext(),\n                new FileInputStream(classLoader.getResource(\"file-import.xlsx\").getFile()),\n                TestBuyer.class, new ImportBean(new Category()));\n        final ImportResponse importResponse = excelFileImport.readWorkbook();\n\n        TestBuyer testBuyer = (TestBuyer) importResponse.getObjects().get(0);\n        Assert.assertEquals(\"check number of objects\", 2, importResponse.getObjects().size());\n        Assert.assertEquals(\"check buyer name\", \"buyer 1\", testBuyer.getName());\n        Assert.assertEquals(\"check organization name\", \"organization 1\", testBuyer.getOrg().getName());\n        Assert.assertEquals(\"check address\", \"Street 1\", testBuyer.getOrg().getAddress().getStreet());\n        Assert.assertEquals(\"check address\", \"Romania\", testBuyer.getOrg().getAddress().getCountry());\n    }", "signature": "void readWorkbook()", "full_signature": "@Test public void readWorkbook()", "class_method_signature": "ExcelFileImportDefaultTest.readWorkbook()", "testcase": true, "constructor": false, "invocations": ["getClassLoader", "getClass", "getFile", "getResource", "readWorkbook", "get", "getObjects", "assertEquals", "size", "getObjects", "assertEquals", "getName", "assertEquals", "getName", "getOrg", "assertEquals", "getStreet", "getAddress", "getOrg", "assertEquals", "getCountry", "getAddress", "getOrg"]}, "focal_class": {"identifier": "ExcelFileImportDefault", "superclass": "", "interfaces": "implements ExcelFileImport", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExcelFileImportDefault.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExcelFileImportDefault.class)", "var_name": "logger"}, {"original_string": "private final Class clazz;", "modifier": "private final", "type": "Class", "declarator": "clazz", "var_name": "clazz"}, {"original_string": "private final ImportBean importBean;", "modifier": "private final", "type": "ImportBean", "declarator": "importBean", "var_name": "importBean"}, {"original_string": "private final XExcelFileReader xExcelFileReader;", "modifier": "private final", "type": "XExcelFileReader", "declarator": "xExcelFileReader", "var_name": "xExcelFileReader"}, {"original_string": "private final ApplicationContext applicationContext;", "modifier": "private final", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "ExcelFileImportDefault", "parameters": "(final ApplicationContext applicationContext, final InputStream is,\n                                  final Class clazz, final ImportBean importBean)", "modifiers": "public", "return": "", "signature": " ExcelFileImportDefault(final ApplicationContext applicationContext, final InputStream is,\n                                  final Class clazz, final ImportBean importBean)", "full_signature": "public  ExcelFileImportDefault(final ApplicationContext applicationContext, final InputStream is,\n                                  final Class clazz, final ImportBean importBean)", "class_method_signature": "ExcelFileImportDefault.ExcelFileImportDefault(final ApplicationContext applicationContext, final InputStream is,\n                                  final Class clazz, final ImportBean importBean)", "testcase": false, "constructor": true}, {"identifier": "readWorkbook", "parameters": "()", "modifiers": "@Override public", "return": "ImportResponse", "signature": "ImportResponse readWorkbook()", "full_signature": "@Override public ImportResponse readWorkbook()", "class_method_signature": "ExcelFileImportDefault.readWorkbook()", "testcase": false, "constructor": false}, {"identifier": "normalizeRows", "parameters": "(final List<String[]> rows)", "modifiers": "private", "return": "void", "signature": "void normalizeRows(final List<String[]> rows)", "full_signature": "private void normalizeRows(final List<String[]> rows)", "class_method_signature": "ExcelFileImportDefault.normalizeRows(final List<String[]> rows)", "testcase": false, "constructor": false}], "file": "persistence/src/main/java/org/devgateway/toolkit/persistence/excel/ExcelFileImportDefault.java"}, "focal_method": {"identifier": "readWorkbook", "parameters": "()", "modifiers": "@Override public", "return": "ImportResponse", "body": "@Override\n    public ImportResponse readWorkbook()\n            throws Exception {\n        final long startTime = System.nanoTime();\n        logger.warn(\">>>>>>>>>>>>>>> import started >>>>>>>>>>>>>>>\");\n\n        final List<String[]> rows = xExcelFileReader.readRows(1000);\n        xExcelFileReader.close();\n        normalizeRows(rows);\n\n        ExcelSheetImport excelSheetImport = new ExcelSheetImportDefault(this.applicationContext, rows, this.importBean);\n        final ImportResponse importResponse = excelSheetImport.readSheet(clazz);\n\n        final long endTime = System.nanoTime();\n        final double duration = (endTime - startTime) / 1000000000.0;\n        logger.warn(\">>>>>>>>>>>>>>> import ended |  duration: \" + duration + \" >>>>>>>>>\");\n\n        return importResponse;\n    }", "signature": "ImportResponse readWorkbook()", "full_signature": "@Override public ImportResponse readWorkbook()", "class_method_signature": "ExcelFileImportDefault.readWorkbook()", "testcase": false, "constructor": false, "invocations": ["nanoTime", "warn", "readRows", "close", "normalizeRows", "readSheet", "nanoTime", "warn"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}