{"test_class": {"identifier": "LandsatMetadataFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-landsat-reader/src/test/java/org/esa/s3tbx/dataio/landsat/geotiff/LandsatMetadataFactoryTest.java"}, "test_case": {"identifier": "testCreate_L3_MSS_reproc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate_L3_MSS_reproc() throws Exception {\n        File testFile = getTestFile(\"test_L3_MSS_MTL.txt\");\n        LandsatMetadata landsatMetadata = LandsatMetadataFactory.create(testFile);\n        assertTrue(landsatMetadata instanceof LandsatReprocessedMetadata);\n    }", "signature": "void testCreate_L3_MSS_reproc()", "full_signature": "@Test public void testCreate_L3_MSS_reproc()", "class_method_signature": "LandsatMetadataFactoryTest.testCreate_L3_MSS_reproc()", "testcase": true, "constructor": false, "invocations": ["getTestFile", "create", "assertTrue"]}, "focal_class": {"identifier": "LandsatMetadataFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "create", "parameters": "(File mtlFile)", "modifiers": "static", "return": "LandsatMetadata", "signature": "LandsatMetadata create(File mtlFile)", "full_signature": "static LandsatMetadata create(File mtlFile)", "class_method_signature": "LandsatMetadataFactory.create(File mtlFile)", "testcase": false, "constructor": false}], "file": "s3tbx-landsat-reader/src/main/java/org/esa/s3tbx/dataio/landsat/geotiff/LandsatMetadataFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(File mtlFile)", "modifiers": "static", "return": "LandsatMetadata", "body": "static LandsatMetadata create(File mtlFile) throws IOException {\n        LandsatLegacyMetadata landsatMetadata = new LandsatLegacyMetadata(new FileReader(mtlFile));\n        if (landsatMetadata.isLegacyFormat()) {\n            // legacy format case\n            if (landsatMetadata.isLandsatTM() || landsatMetadata.isLandsatETM_Plus()) {\n                return landsatMetadata;\n            } else {\n                throw new ProductIOException(\"Product is of a legacy landsat format, not a legacy Landsat5 or Landsat7 ETM+ product.\");\n            }\n        } else {\n            // new format case\n            BufferedReader reader = null;\n            try {\n                FileReader fileReader = new FileReader(mtlFile);\n                reader = new BufferedReader(fileReader);\n                String line = reader.readLine();\n                while (line != null) {\n                    if (line.contains(\"SPACECRAFT_ID\")) {\n                        if (line.contains(\"LANDSAT_8\")) {\n                            return new Landsat8Metadata(new FileReader(mtlFile));\n                        } else {\n                            return new LandsatReprocessedMetadata(new FileReader(mtlFile));\n                        }\n                    }\n                    line = reader.readLine();\n                }\n            } finally {\n                if (reader != null) {\n                    reader.close();\n                }\n            }\n            throw new IllegalStateException(\n                    \"File '\" + mtlFile + \"' does not contain spacecraft information. (Field 'SPACECRAFT_ID' missing)\");\n        }\n    }", "signature": "LandsatMetadata create(File mtlFile)", "full_signature": "static LandsatMetadata create(File mtlFile)", "class_method_signature": "LandsatMetadataFactory.create(File mtlFile)", "testcase": false, "constructor": false, "invocations": ["isLegacyFormat", "isLandsatTM", "isLandsatETM_Plus", "readLine", "contains", "contains", "readLine", "close"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}