{"test_class": {"identifier": "AbstractHibernateQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HibernatePropertyResolver resolver = new MockHibernatePropertyResolver();", "modifier": "private final", "type": "HibernatePropertyResolver", "declarator": "resolver = new MockHibernatePropertyResolver()", "var_name": "resolver"}, {"original_string": "private final BoxMaker boxMaker = new SimpleBoxMaker();", "modifier": "private final", "type": "BoxMaker", "declarator": "boxMaker = new SimpleBoxMaker()", "var_name": "boxMaker"}, {"original_string": "private final ContainsExpressionHandler<String> containsExpressionHandler = new ContainsExpressionNonHandler<String>();", "modifier": "private final", "type": "ContainsExpressionHandler<String>", "declarator": "containsExpressionHandler = new ContainsExpressionNonHandler<String>()", "var_name": "containsExpressionHandler"}, {"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final double x = 1.0;", "modifier": "private final", "type": "double", "declarator": "x = 1.0", "var_name": "x"}, {"original_string": "private final double y = 2.0;", "modifier": "private final", "type": "double", "declarator": "y = 2.0", "var_name": "y"}, {"original_string": "private final double distance = 3.5;", "modifier": "private final", "type": "double", "declarator": "distance = 3.5", "var_name": "distance"}, {"original_string": "private final Class<Test> entityClass = Test.class;", "modifier": "private final", "type": "Class<Test>", "declarator": "entityClass = Test.class", "var_name": "entityClass"}, {"original_string": "private final AbstractHibernateQueryTranslator<String, String, String> translator = new AbstractHibernateQueryTranslator<String, String, String>(\n            String.class, String.class, resolver, boxMaker, containsExpressionHandler) {\n\n        @Override\n        public String eq(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String ne(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String lt(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String lte(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String gt(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String gte(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String between(String fieldName, Object from, Object to) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String in(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notIn(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String contains(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String isNull(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notNull(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String isEmpty(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notEmpty(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String and(String... subqueries) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String or(String... subqueries) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String order(String fieldName, Order o) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String order(String... orders) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public <N extends Number & Comparable<N>> String within(\n                String xFieldName, String yFieldName, Box<N> box) {\n            return join(Operator.WITHIN, xFieldName, yFieldName, box.toString());\n        }\n\n        @Override\n        public <T, R> String translateProjection(Query<T, R> query) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        protected <T> String translate(NativeExpression e, Class<T> entityClass) {\n            return e.getExpression().toString();\n        }\n        \n    };", "modifier": "private final", "type": "AbstractHibernateQueryTranslator<String, String, String>", "declarator": "translator = new AbstractHibernateQueryTranslator<String, String, String>(\n            String.class, String.class, resolver, boxMaker, containsExpressionHandler) {\n\n        @Override\n        public String eq(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String ne(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String lt(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String lte(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String gt(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String gte(String fieldName, Object value) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String between(String fieldName, Object from, Object to) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String in(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notIn(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String contains(String fieldName, Object[] values) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String isNull(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notNull(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String isEmpty(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String notEmpty(String fieldName) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String and(String... subqueries) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String or(String... subqueries) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String order(String fieldName, Order o) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public String order(String... orders) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        public <N extends Number & Comparable<N>> String within(\n                String xFieldName, String yFieldName, Box<N> box) {\n            return join(Operator.WITHIN, xFieldName, yFieldName, box.toString());\n        }\n\n        @Override\n        public <T, R> String translateProjection(Query<T, R> query) {\n            throw new RuntimeException(\"shouldn't be here\");\n        }\n\n        @Override\n        protected <T> String translate(NativeExpression e, Class<T> entityClass) {\n            return e.getExpression().toString();\n        }\n        \n    }", "var_name": "translator"}], "file": "seeking-hibernate/src/test/java/com/eharmony/matching/seeking/translator/hibernate/AbstractHibernateQueryTranslatorTest.java"}, "test_case": {"identifier": "unexpected_Distance2dExpression", "parameters": "()", "modifiers": "@Test(expected = UnsupportedOperationException.class) public", "return": "void", "body": "@Test(expected = UnsupportedOperationException.class)\n    public void unexpected_Distance2dExpression() {\n        translator.translate(new Distance2dExpression<Double>(Operator.EQUAL, property, x, y, distance), entityClass);\n    }", "signature": "void unexpected_Distance2dExpression()", "full_signature": "@Test(expected = UnsupportedOperationException.class) public void unexpected_Distance2dExpression()", "class_method_signature": "AbstractHibernateQueryTranslatorTest.unexpected_Distance2dExpression()", "testcase": true, "constructor": false, "invocations": ["translate"]}, "focal_class": {"identifier": "AbstractHibernateQueryTranslator", "superclass": "extends\n        AbstractQueryTranslator<Q, O, P>", "interfaces": "implements QueryTranslator<Q, O, P>", "fields": [{"original_string": "private final BoxMaker boxMaker;", "modifier": "private final", "type": "BoxMaker", "declarator": "boxMaker", "var_name": "boxMaker"}, {"original_string": "private final ContainsExpressionHandler<Q> containsExpressionHandler;", "modifier": "private final", "type": "ContainsExpressionHandler<Q>", "declarator": "containsExpressionHandler", "var_name": "containsExpressionHandler"}], "methods": [{"identifier": "AbstractHibernateQueryTranslator", "parameters": "(Class<Q> queryClass,\n            Class<O> orderClass, HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Q> containsExpressionHandler)", "modifiers": "public", "return": "", "signature": " AbstractHibernateQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass, HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Q> containsExpressionHandler)", "full_signature": "public  AbstractHibernateQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass, HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Q> containsExpressionHandler)", "class_method_signature": "AbstractHibernateQueryTranslator.AbstractHibernateQueryTranslator(Class<Q> queryClass,\n            Class<O> orderClass, HibernatePropertyResolver propertyResolver,\n            BoxMaker boxMaker,\n            ContainsExpressionHandler<Q> containsExpressionHandler)", "testcase": false, "constructor": true}, {"identifier": "getPropertyResolver", "parameters": "()", "modifiers": "protected", "return": "HibernatePropertyResolver", "signature": "HibernatePropertyResolver getPropertyResolver()", "full_signature": "protected HibernatePropertyResolver getPropertyResolver()", "class_method_signature": "AbstractHibernateQueryTranslator.getPropertyResolver()", "testcase": false, "constructor": false}, {"identifier": "getBoxMaker", "parameters": "()", "modifiers": "public", "return": "BoxMaker", "signature": "BoxMaker getBoxMaker()", "full_signature": "public BoxMaker getBoxMaker()", "class_method_signature": "AbstractHibernateQueryTranslator.getBoxMaker()", "testcase": false, "constructor": false}, {"identifier": "getContainsExpressionHandler", "parameters": "()", "modifiers": "public", "return": "ContainsExpressionHandler<Q>", "signature": "ContainsExpressionHandler<Q> getContainsExpressionHandler()", "full_signature": "public ContainsExpressionHandler<Q> getContainsExpressionHandler()", "class_method_signature": "AbstractHibernateQueryTranslator.getContainsExpressionHandler()", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(Distance2dExpression<N> e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "Q", "signature": "Q translate(Distance2dExpression<N> e, Class<T> entityClass)", "full_signature": "@Override protected Q translate(Distance2dExpression<N> e, Class<T> entityClass)", "class_method_signature": "AbstractHibernateQueryTranslator.translate(Distance2dExpression<N> e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(String fieldName,\n            Point<N> center, Number distance)", "modifiers": "@Override public", "return": "Q", "signature": "Q within(String fieldName,\n            Point<N> center, Number distance)", "full_signature": "@Override public Q within(String fieldName,\n            Point<N> center, Number distance)", "class_method_signature": "AbstractHibernateQueryTranslator.within(String fieldName,\n            Point<N> center, Number distance)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(\n            String xFieldName, String yFieldName, Box<N> box)", "modifiers": "public abstract", "return": "Q", "signature": "Q within(\n            String xFieldName, String yFieldName, Box<N> box)", "full_signature": "public abstract Q within(\n            String xFieldName, String yFieldName, Box<N> box)", "class_method_signature": "AbstractHibernateQueryTranslator.within(\n            String xFieldName, String yFieldName, Box<N> box)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "Q", "signature": "Q contains(String fieldName, Object[] values)", "full_signature": "@Override public Q contains(String fieldName, Object[] values)", "class_method_signature": "AbstractHibernateQueryTranslator.contains(String fieldName, Object[] values)", "testcase": false, "constructor": false}], "file": "seeking-hibernate/src/main/java/com/eharmony/matching/seeking/translator/hibernate/AbstractHibernateQueryTranslator.java"}, "focal_method": {"identifier": "translate", "parameters": "(Distance2dExpression<N> e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "Q", "body": "@Override\n    protected <T, N extends Number & Comparable<N>> Q translate(Distance2dExpression<N> e, Class<T> entityClass) {\n        Operator operator = e.getOperator();\n        String xFieldName = getPropertyResolver().resolveXField(e.getPropertyName(), entityClass);\n        String yFieldName = getPropertyResolver().resolveYField(e.getPropertyName(), entityClass);\n        if (Operator.WITHIN.equals(operator)) {\n            Box<N> box = boxMaker.make(new Point<N>(e.getX(), e.getY()), e.getDistance());\n            return within(xFieldName, yFieldName, box);\n        } else {\n            throw unsupported(operator, UnaryExpression.class);\n        }\n    }", "signature": "Q translate(Distance2dExpression<N> e, Class<T> entityClass)", "full_signature": "@Override protected Q translate(Distance2dExpression<N> e, Class<T> entityClass)", "class_method_signature": "AbstractHibernateQueryTranslator.translate(Distance2dExpression<N> e, Class<T> entityClass)", "testcase": false, "constructor": false, "invocations": ["getOperator", "resolveXField", "getPropertyResolver", "getPropertyName", "resolveYField", "getPropertyResolver", "getPropertyName", "equals", "make", "getX", "getY", "getDistance", "within", "unsupported"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}