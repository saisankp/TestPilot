{"test_class": {"identifier": "ScenarioResultMetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScenarioResultMetadata scenarioResultMetadata;", "modifier": "private", "type": "ScenarioResultMetadata", "declarator": "scenarioResultMetadata", "var_name": "scenarioResultMetadata"}, {"original_string": "private ScenarioWithIndex scenarioWithIndex;", "modifier": "private", "type": "ScenarioWithIndex", "declarator": "scenarioWithIndex", "var_name": "scenarioWithIndex"}, {"original_string": "private Scenario scenarioMock;", "modifier": "private", "type": "Scenario", "declarator": "scenarioMock", "var_name": "scenarioMock"}, {"original_string": "private int SCENARIO_INDEX = 0;", "modifier": "private", "type": "int", "declarator": "SCENARIO_INDEX = 0", "var_name": "SCENARIO_INDEX"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/model/ScenarioResultMetadataTest.java"}, "test_case": {"identifier": "addAuditMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addAuditMessage() {\n        assertTrue(scenarioResultMetadata.getAuditLogLines().isEmpty());\n        int index = 1;\n        String decisionName = \"decisionName\";\n        String result = DMNDecisionResult.DecisionEvaluationStatus.SUCCEEDED.toString();\n        scenarioResultMetadata.addAuditMessage(index, decisionName, result);\n        final List<AuditLogLine> retrieved = scenarioResultMetadata.getAuditLogLines();\n        assertEquals(1, retrieved.size());\n        commonCheckAuditLogLine(retrieved.get(0), decisionName, result, null);\n    }", "signature": "void addAuditMessage()", "full_signature": "@Test public void addAuditMessage()", "class_method_signature": "ScenarioResultMetadataTest.addAuditMessage()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "getAuditLogLines", "toString", "addAuditMessage", "getAuditLogLines", "assertEquals", "size", "commonCheckAuditLogLine", "get"]}, "focal_class": {"identifier": "ScenarioResultMetadata", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Set<String> available = new HashSet<>();", "modifier": "protected final", "type": "Set<String>", "declarator": "available = new HashSet<>()", "var_name": "available"}, {"original_string": "protected final Map<String, Integer> executed = new HashMap<>();", "modifier": "protected final", "type": "Map<String, Integer>", "declarator": "executed = new HashMap<>()", "var_name": "executed"}, {"original_string": "protected final List<AuditLogLine> auditLogLines = new ArrayList<>();", "modifier": "protected final", "type": "List<AuditLogLine>", "declarator": "auditLogLines = new ArrayList<>()", "var_name": "auditLogLines"}, {"original_string": "protected final ScenarioWithIndex scenarioWithIndex;", "modifier": "protected final", "type": "ScenarioWithIndex", "declarator": "scenarioWithIndex", "var_name": "scenarioWithIndex"}], "methods": [{"identifier": "ScenarioResultMetadata", "parameters": "(ScenarioWithIndex scenarioWithIndex)", "modifiers": "public", "return": "", "signature": " ScenarioResultMetadata(ScenarioWithIndex scenarioWithIndex)", "full_signature": "public  ScenarioResultMetadata(ScenarioWithIndex scenarioWithIndex)", "class_method_signature": "ScenarioResultMetadata.ScenarioResultMetadata(ScenarioWithIndex scenarioWithIndex)", "testcase": false, "constructor": true}, {"identifier": "addAvailable", "parameters": "(String element)", "modifiers": "public", "return": "void", "signature": "void addAvailable(String element)", "full_signature": "public void addAvailable(String element)", "class_method_signature": "ScenarioResultMetadata.addAvailable(String element)", "testcase": false, "constructor": false}, {"identifier": "addAllAvailable", "parameters": "(Set<String> elements)", "modifiers": "public", "return": "void", "signature": "void addAllAvailable(Set<String> elements)", "full_signature": "public void addAllAvailable(Set<String> elements)", "class_method_signature": "ScenarioResultMetadata.addAllAvailable(Set<String> elements)", "testcase": false, "constructor": false}, {"identifier": "addExecuted", "parameters": "(String element)", "modifiers": "public", "return": "void", "signature": "void addExecuted(String element)", "full_signature": "public void addExecuted(String element)", "class_method_signature": "ScenarioResultMetadata.addExecuted(String element)", "testcase": false, "constructor": false}, {"identifier": "addAllExecuted", "parameters": "(Map<String, Integer> elements)", "modifiers": "public", "return": "void", "signature": "void addAllExecuted(Map<String, Integer> elements)", "full_signature": "public void addAllExecuted(Map<String, Integer> elements)", "class_method_signature": "ScenarioResultMetadata.addAllExecuted(Map<String, Integer> elements)", "testcase": false, "constructor": false}, {"identifier": "addAuditMessage", "parameters": "(int messageIndex, String decisionOrRuleName, String result)", "modifiers": "public", "return": "void", "signature": "void addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "full_signature": "public void addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "class_method_signature": "ScenarioResultMetadata.addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "testcase": false, "constructor": false}, {"identifier": "addAuditMessage", "parameters": "(int messageIndex, String decisionOrRuleName, String result, String message)", "modifiers": "public", "return": "void", "signature": "void addAuditMessage(int messageIndex, String decisionOrRuleName, String result, String message)", "full_signature": "public void addAuditMessage(int messageIndex, String decisionOrRuleName, String result, String message)", "class_method_signature": "ScenarioResultMetadata.addAuditMessage(int messageIndex, String decisionOrRuleName, String result, String message)", "testcase": false, "constructor": false}, {"identifier": "addAuditLogLines", "parameters": "(List<AuditLogLine> toAdd)", "modifiers": "public", "return": "void", "signature": "void addAuditLogLines(List<AuditLogLine> toAdd)", "full_signature": "public void addAuditLogLines(List<AuditLogLine> toAdd)", "class_method_signature": "ScenarioResultMetadata.addAuditLogLines(List<AuditLogLine> toAdd)", "testcase": false, "constructor": false}, {"identifier": "getAvailable", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAvailable()", "full_signature": "public Set<String> getAvailable()", "class_method_signature": "ScenarioResultMetadata.getAvailable()", "testcase": false, "constructor": false}, {"identifier": "getExecuted", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getExecuted()", "full_signature": "public Set<String> getExecuted()", "class_method_signature": "ScenarioResultMetadata.getExecuted()", "testcase": false, "constructor": false}, {"identifier": "getExecutedWithCounter", "parameters": "()", "modifiers": "public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getExecutedWithCounter()", "full_signature": "public Map<String, Integer> getExecutedWithCounter()", "class_method_signature": "ScenarioResultMetadata.getExecutedWithCounter()", "testcase": false, "constructor": false}, {"identifier": "getAuditLogLines", "parameters": "()", "modifiers": "public", "return": "List<AuditLogLine>", "signature": "List<AuditLogLine> getAuditLogLines()", "full_signature": "public List<AuditLogLine> getAuditLogLines()", "class_method_signature": "ScenarioResultMetadata.getAuditLogLines()", "testcase": false, "constructor": false}, {"identifier": "getScenarioWithIndex", "parameters": "()", "modifiers": "public", "return": "ScenarioWithIndex", "signature": "ScenarioWithIndex getScenarioWithIndex()", "full_signature": "public ScenarioWithIndex getScenarioWithIndex()", "class_method_signature": "ScenarioResultMetadata.getScenarioWithIndex()", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/runner/model/ScenarioResultMetadata.java"}, "focal_method": {"identifier": "addAuditMessage", "parameters": "(int messageIndex, String decisionOrRuleName, String result)", "modifiers": "public", "return": "void", "body": "public void addAuditMessage(int messageIndex, String decisionOrRuleName, String result) {\n        auditLogLines.add(new AuditLogLine(scenarioWithIndex.getIndex(), scenarioWithIndex.getScesimData().getDescription(), messageIndex, decisionOrRuleName, result));\n    }", "signature": "void addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "full_signature": "public void addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "class_method_signature": "ScenarioResultMetadata.addAuditMessage(int messageIndex, String decisionOrRuleName, String result)", "testcase": false, "constructor": false, "invocations": ["add", "getIndex", "getDescription", "getScesimData"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}