{"test_class": {"identifier": "NodeSetFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String document;", "modifier": "private", "type": "String", "declarator": "document", "var_name": "document"}], "file": "core/src/test/java/nl/nn/adapterframework/xml/NodeSetFilterTest.java"}, "test_case": {"identifier": "testNodeSetFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNodeSetFilter() throws Exception {\n\t\tNodeSetFilter targetElementFilter = new NodeSetFilter(null, null, false, false, null);\n\t\tString expected=\"<prefix- uri=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t<sub1 xmlns=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\t\"\\t\\t<a>x</a>\\n\" +\n\t\t\t\t\"\\t</sub1>\\n\" +\n\t\t\t\t\"</prefix->\\n\" +\n\t\t\t\t\"<prefix- uri=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t<x xmlns=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t\\t<sub2>\\n\" +\n\t\t\t\t\"\\t\\t\\t<a>y</a>\\n\" +\n\t\t\t\t\"\\t\\t\\t<b>y</b>\\n\" +\n\t\t\t\t\"\\t\\t</sub2>\\n\" +\n\t\t\t\t\"\\t</x>\\n\" +\n\t\t\t\t\"</prefix->\\n\" +\n\t\t\t\t\"<prefix- uri=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t<sub2 xmlns=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t\\t<a>y</a>\\n\" +\n\t\t\t\t\"\\t\\t<b>y</b>\\n\" +\n\t\t\t\t\"\\t</sub2>\\n\" +\n\t\t\t\t\"</prefix->\\n\" +\n\t\t\t\t\"<prefix- uri=\\\"urn:tja\\\">\\n\" +\n\t\t\t\t\"\\t<xx xmlns=\\\"urn:tja\\\"/>\\n\" +\n\t\t\t\t\"</prefix->\";\n\t\ttestNodeSetFilter(targetElementFilter, \"a\", false, document, expected);\n\t}", "signature": "void testNodeSetFilter()", "full_signature": "@Test public void testNodeSetFilter()", "class_method_signature": "NodeSetFilterTest.testNodeSetFilter()", "testcase": true, "constructor": false, "invocations": ["testNodeSetFilter"]}, "focal_class": {"identifier": "NodeSetFilter", "superclass": "extends FullXmlFilter", "interfaces": "", "fields": [{"original_string": "private String targetNamespace;", "modifier": "private", "type": "String", "declarator": "targetNamespace", "var_name": "targetNamespace"}, {"original_string": "private String targetElement;", "modifier": "private", "type": "String", "declarator": "targetElement", "var_name": "targetElement"}, {"original_string": "private boolean includeTarget=false;", "modifier": "private", "type": "boolean", "declarator": "includeTarget=false", "var_name": "includeTarget"}, {"original_string": "private boolean includeRoot=false;", "modifier": "private", "type": "boolean", "declarator": "includeRoot=false", "var_name": "includeRoot"}, {"original_string": "private int level;", "modifier": "private", "type": "int", "declarator": "level", "var_name": "level"}, {"original_string": "private int globalLevel;", "modifier": "private", "type": "int", "declarator": "globalLevel", "var_name": "globalLevel"}, {"original_string": "private boolean inTargetElement;", "modifier": "private", "type": "boolean", "declarator": "inTargetElement", "var_name": "inTargetElement"}, {"original_string": "private boolean copying;", "modifier": "private", "type": "boolean", "declarator": "copying", "var_name": "copying"}, {"original_string": "private List<PrefixMapping> pendingNamespaceDefinitions=new ArrayList<>();", "modifier": "private", "type": "List<PrefixMapping>", "declarator": "pendingNamespaceDefinitions=new ArrayList<>()", "var_name": "pendingNamespaceDefinitions"}], "methods": [{"identifier": "NodeSetFilter", "parameters": "(String targetElement, ContentHandler handler)", "modifiers": "public", "return": "", "signature": " NodeSetFilter(String targetElement, ContentHandler handler)", "full_signature": "public  NodeSetFilter(String targetElement, ContentHandler handler)", "class_method_signature": "NodeSetFilter.NodeSetFilter(String targetElement, ContentHandler handler)", "testcase": false, "constructor": true}, {"identifier": "NodeSetFilter", "parameters": "(Map<String,String> namespaceMap, String targetElement, boolean includeTarget, boolean includeRoot, ContentHandler handler)", "modifiers": "public", "return": "", "signature": " NodeSetFilter(Map<String,String> namespaceMap, String targetElement, boolean includeTarget, boolean includeRoot, ContentHandler handler)", "full_signature": "public  NodeSetFilter(Map<String,String> namespaceMap, String targetElement, boolean includeTarget, boolean includeRoot, ContentHandler handler)", "class_method_signature": "NodeSetFilter.NodeSetFilter(Map<String,String> namespaceMap, String targetElement, boolean includeTarget, boolean includeRoot, ContentHandler handler)", "testcase": false, "constructor": true}, {"identifier": "startNode", "parameters": "(String uri, String localName, String qName)", "modifiers": "public", "return": "void", "signature": "void startNode(String uri, String localName, String qName)", "full_signature": "public void startNode(String uri, String localName, String qName)", "class_method_signature": "NodeSetFilter.startNode(String uri, String localName, String qName)", "testcase": false, "constructor": false}, {"identifier": "endNode", "parameters": "(String uri, String localName, String qName)", "modifiers": "public", "return": "void", "signature": "void endNode(String uri, String localName, String qName)", "full_signature": "public void endNode(String uri, String localName, String qName)", "class_method_signature": "NodeSetFilter.endNode(String uri, String localName, String qName)", "testcase": false, "constructor": false}, {"identifier": "startPrefixMapping", "parameters": "(String prefix, String uri)", "modifiers": "@Override public", "return": "void", "signature": "void startPrefixMapping(String prefix, String uri)", "full_signature": "@Override public void startPrefixMapping(String prefix, String uri)", "class_method_signature": "NodeSetFilter.startPrefixMapping(String prefix, String uri)", "testcase": false, "constructor": false}, {"identifier": "endPrefixMapping", "parameters": "(String prefix)", "modifiers": "@Override public", "return": "void", "signature": "void endPrefixMapping(String prefix)", "full_signature": "@Override public void endPrefixMapping(String prefix)", "class_method_signature": "NodeSetFilter.endPrefixMapping(String prefix)", "testcase": false, "constructor": false}, {"identifier": "onTargetElement", "parameters": "(String uri, String localName)", "modifiers": "private", "return": "boolean", "signature": "boolean onTargetElement(String uri, String localName)", "full_signature": "private boolean onTargetElement(String uri, String localName)", "class_method_signature": "NodeSetFilter.onTargetElement(String uri, String localName)", "testcase": false, "constructor": false}, {"identifier": "mappingIsOverridden", "parameters": "(PrefixMapping mapping, int index)", "modifiers": "private", "return": "boolean", "signature": "boolean mappingIsOverridden(PrefixMapping mapping, int index)", "full_signature": "private boolean mappingIsOverridden(PrefixMapping mapping, int index)", "class_method_signature": "NodeSetFilter.mappingIsOverridden(PrefixMapping mapping, int index)", "testcase": false, "constructor": false}, {"identifier": "startElement", "parameters": "(String uri, String localName, String qName, Attributes atts)", "modifiers": "@Override public", "return": "void", "signature": "void startElement(String uri, String localName, String qName, Attributes atts)", "full_signature": "@Override public void startElement(String uri, String localName, String qName, Attributes atts)", "class_method_signature": "NodeSetFilter.startElement(String uri, String localName, String qName, Attributes atts)", "testcase": false, "constructor": false}, {"identifier": "endElement", "parameters": "(String uri, String localName, String qName)", "modifiers": "@Override public", "return": "void", "signature": "void endElement(String uri, String localName, String qName)", "full_signature": "@Override public void endElement(String uri, String localName, String qName)", "class_method_signature": "NodeSetFilter.endElement(String uri, String localName, String qName)", "testcase": false, "constructor": false}, {"identifier": "characters", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void characters(char[] ch, int start, int length)", "full_signature": "@Override public void characters(char[] ch, int start, int length)", "class_method_signature": "NodeSetFilter.characters(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "comment", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void comment(char[] ch, int start, int length)", "full_signature": "@Override public void comment(char[] ch, int start, int length)", "class_method_signature": "NodeSetFilter.comment(char[] ch, int start, int length)", "testcase": false, "constructor": false}, {"identifier": "startCDATA", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startCDATA()", "full_signature": "@Override public void startCDATA()", "class_method_signature": "NodeSetFilter.startCDATA()", "testcase": false, "constructor": false}, {"identifier": "endCDATA", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endCDATA()", "full_signature": "@Override public void endCDATA()", "class_method_signature": "NodeSetFilter.endCDATA()", "testcase": false, "constructor": false}, {"identifier": "startEntity", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void startEntity(String name)", "full_signature": "@Override public void startEntity(String name)", "class_method_signature": "NodeSetFilter.startEntity(String name)", "testcase": false, "constructor": false}, {"identifier": "endEntity", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void endEntity(String name)", "full_signature": "@Override public void endEntity(String name)", "class_method_signature": "NodeSetFilter.endEntity(String name)", "testcase": false, "constructor": false}, {"identifier": "ignorableWhitespace", "parameters": "(char[] ch, int start, int length)", "modifiers": "@Override public", "return": "void", "signature": "void ignorableWhitespace(char[] ch, int start, int length)", "full_signature": "@Override public void ignorableWhitespace(char[] ch, int start, int length)", "class_method_signature": "NodeSetFilter.ignorableWhitespace(char[] ch, int start, int length)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/xml/NodeSetFilter.java"}, "focal_method": {"identifier": "NodeSetFilter", "parameters": "(String targetElement, ContentHandler handler)", "modifiers": "public", "return": "", "body": "public NodeSetFilter(String targetElement, ContentHandler handler) {\n\t\tthis(null, targetElement, true, false, handler);\n\t}", "signature": " NodeSetFilter(String targetElement, ContentHandler handler)", "full_signature": "public  NodeSetFilter(String targetElement, ContentHandler handler)", "class_method_signature": "NodeSetFilter.NodeSetFilter(String targetElement, ContentHandler handler)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}