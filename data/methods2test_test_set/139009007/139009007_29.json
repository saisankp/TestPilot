{"test_class": {"identifier": "CollectStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final CollectStageFactory factory = new CollectStageFactory();", "modifier": "private final", "type": "CollectStageFactory", "declarator": "factory = new CollectStageFactory()", "var_name": "factory"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/CollectStageFactoryTest.java"}, "test_case": {"identifier": "create", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void create() throws ExecutionException, InterruptedException {\n        TerminalStage<Integer, Integer> terminal = factory.create(null,\n                () -> Collectors.summingInt((ToIntFunction<Integer>) value -> value));\n\n        List<Integer> list = new ArrayList<>();\n        Flowable<Integer> flowable = Flowable.fromArray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n                .doOnNext(list::add)\n                .subscribeOn(Schedulers.computation());\n        CompletionStage<Integer> stage = terminal.apply(flowable);\n        Integer result = stage.toCompletableFuture().get();\n\n        assertThat(result).isEqualTo(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10);\n        assertThat(list).hasSize(10);\n    }", "signature": "void create()", "full_signature": "@Test public void create()", "class_method_signature": "CollectStageFactoryTest.create()", "testcase": true, "constructor": false, "invocations": ["create", "summingInt", "subscribeOn", "doOnNext", "fromArray", "computation", "apply", "get", "toCompletableFuture", "isEqualTo", "assertThat", "hasSize", "assertThat"]}, "focal_class": {"identifier": "CollectStageFactory", "superclass": "", "interfaces": "implements TerminalStageFactory<Stage.Collect>", "fields": [], "methods": [{"identifier": "create", "parameters": "(Engine engine, Stage.Collect stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "TerminalStage<I, O>", "signature": "TerminalStage<I, O> create(Engine engine, Stage.Collect stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public TerminalStage<I, O> create(Engine engine, Stage.Collect stage)", "class_method_signature": "CollectStageFactory.create(Engine engine, Stage.Collect stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/CollectStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine, Stage.Collect stage)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "TerminalStage<I, O>", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <I, O> TerminalStage<I, O> create(Engine engine, Stage.Collect stage) {\n        Collector<I, Object, O> collector = (Collector<I, Object, O>) Objects.requireNonNull(stage).getCollector();\n        Objects.requireNonNull(collector);\n        return new CollectStage<>(collector);\n    }", "signature": "TerminalStage<I, O> create(Engine engine, Stage.Collect stage)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public TerminalStage<I, O> create(Engine engine, Stage.Collect stage)", "class_method_signature": "CollectStageFactory.create(Engine engine, Stage.Collect stage)", "testcase": false, "constructor": false, "invocations": ["getCollector", "requireNonNull", "requireNonNull"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}