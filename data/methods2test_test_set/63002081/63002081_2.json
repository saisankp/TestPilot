{"test_class": {"identifier": "ModuleAnnotationVisitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String MODULE_SRC = \"@Module\\n\" +\n          \"class TestModule{\\n\" +\n          \"  class EmptyNestedClass{\\n\" +\n          \"  }\" +\n          \"  @Provides\\n\" +\n          \"  File provideFile(String name){\\n\" +\n          \"    return new File(name);\\n\" +\n          \"  }\\n\" +\n          \"\\n\" +\n          \"  String notAnnotatedMethod(Object value){\\n\" +\n          \"    return value.toString();\\n\" +\n          \"  }\\n\" +\n          \"}\";", "modifier": "static final", "type": "String", "declarator": "MODULE_SRC = \"@Module\\n\" +\n          \"class TestModule{\\n\" +\n          \"  class EmptyNestedClass{\\n\" +\n          \"  }\" +\n          \"  @Provides\\n\" +\n          \"  File provideFile(String name){\\n\" +\n          \"    return new File(name);\\n\" +\n          \"  }\\n\" +\n          \"\\n\" +\n          \"  String notAnnotatedMethod(Object value){\\n\" +\n          \"    return value.toString();\\n\" +\n          \"  }\\n\" +\n          \"}\"", "var_name": "MODULE_SRC"}, {"original_string": "static final String NESTED_MODULE_SRC = \"class WrappingClass {\\n\" +\n          \"    int x;\\n\" +\n          \"\\n\" +\n          \"    void method(){}\\n\" +\n          \"    \\n\" +\n          \"    int getter(){return x;}\\n\" +\n          \"class EmptyNestedModule{\\n\" +\n          \"}\" +\n          MODULE_SRC +\n          \"  }\";", "modifier": "static final", "type": "String", "declarator": "NESTED_MODULE_SRC = \"class WrappingClass {\\n\" +\n          \"    int x;\\n\" +\n          \"\\n\" +\n          \"    void method(){}\\n\" +\n          \"    \\n\" +\n          \"    int getter(){return x;}\\n\" +\n          \"class EmptyNestedModule{\\n\" +\n          \"}\" +\n          MODULE_SRC +\n          \"  }\"", "var_name": "NESTED_MODULE_SRC"}, {"original_string": "static final String MODULE_INTO_SET_SRC = \"@Module\\n\" +\n          \"class IntoSetModule{\\n\" +\n          \"  @Provides @IntoSet\\n\" +\n          \"  File provideFile(String name){\\n\" +\n          \"    return new File(name);\\n\" +\n          \"  }\\n\" +\n          \"  @Provides\\n\" +\n          \"  @IntoSet\\n\" +\n          \"  File provideSecondFileFile(Object name){\\n\" +\n          \"    return new File(name.toString);\\n\" +\n          \"  }\\n\" +\n          \"\\n\" +\n          \"  @Provides\\n\" +\n          \"  OkHttpClient provideClient(Set<File> values){\\n\" +\n          \"    return create(values);\\n\" +\n          \"  }\\n\" +\n          \"}\";", "modifier": "static final", "type": "String", "declarator": "MODULE_INTO_SET_SRC = \"@Module\\n\" +\n          \"class IntoSetModule{\\n\" +\n          \"  @Provides @IntoSet\\n\" +\n          \"  File provideFile(String name){\\n\" +\n          \"    return new File(name);\\n\" +\n          \"  }\\n\" +\n          \"  @Provides\\n\" +\n          \"  @IntoSet\\n\" +\n          \"  File provideSecondFileFile(Object name){\\n\" +\n          \"    return new File(name.toString);\\n\" +\n          \"  }\\n\" +\n          \"\\n\" +\n          \"  @Provides\\n\" +\n          \"  OkHttpClient provideClient(Set<File> values){\\n\" +\n          \"    return create(values);\\n\" +\n          \"  }\\n\" +\n          \"}\"", "var_name": "MODULE_INTO_SET_SRC"}], "file": "dagger-visualizer/src/test/java/com/jraska/dagger/visual/ModuleAnnotationVisitorTest.java"}, "test_case": {"identifier": "whenIntoSetProivde_thenDependencyAsSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void whenIntoSetProivde_thenDependencyAsSet() {\n    DependencyGraph.Builder graphBuilder = DependencyGraph.builder();\n    ModuleAnnotationVisitor annotationVisitor = ModuleAnnotationVisitor.create(graphBuilder);\n\n    visitSrc(MODULE_INTO_SET_SRC, annotationVisitor);\n\n    DependencyGraph graph = graphBuilder.build();\n    assertThat(graph.nodes()).hasSize(4);\n    assertThat(graph.nodeOrThrow(\"Set<File>\").dependencies())\n            .containsExactlyInAnyOrder(graph.nodeOrThrow(\"Object\"), graph.nodeOrThrow(\"String\"));\n    assertThat(graph.nodeOrThrow(\"OkHttpClient\").dependencies())\n            .containsExactly(graph.nodeOrThrow(\"Set<File>\"));\n  }", "signature": "void whenIntoSetProivde_thenDependencyAsSet()", "full_signature": "@Test public void whenIntoSetProivde_thenDependencyAsSet()", "class_method_signature": "ModuleAnnotationVisitorTest.whenIntoSetProivde_thenDependencyAsSet()", "testcase": true, "constructor": false, "invocations": ["builder", "create", "visitSrc", "build", "hasSize", "assertThat", "nodes", "containsExactlyInAnyOrder", "assertThat", "dependencies", "nodeOrThrow", "nodeOrThrow", "nodeOrThrow", "containsExactly", "assertThat", "dependencies", "nodeOrThrow", "nodeOrThrow"]}, "focal_class": {"identifier": "ModuleAnnotationVisitor", "superclass": "extends VoidVisitorAdapter<Object>", "interfaces": "", "fields": [{"original_string": "private final Stack<Boolean> isInModuleStack = new Stack<>();", "modifier": "private final", "type": "Stack<Boolean>", "declarator": "isInModuleStack = new Stack<>()", "var_name": "isInModuleStack"}, {"original_string": "private final DependencyGraph.Builder builder;", "modifier": "private final", "type": "DependencyGraph.Builder", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "create", "parameters": "(DependencyGraph.Builder builder)", "modifiers": "public static", "return": "ModuleAnnotationVisitor", "signature": "ModuleAnnotationVisitor create(DependencyGraph.Builder builder)", "full_signature": "public static ModuleAnnotationVisitor create(DependencyGraph.Builder builder)", "class_method_signature": "ModuleAnnotationVisitor.create(DependencyGraph.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "ModuleAnnotationVisitor", "parameters": "(DependencyGraph.Builder builder)", "modifiers": "private", "return": "", "signature": " ModuleAnnotationVisitor(DependencyGraph.Builder builder)", "full_signature": "private  ModuleAnnotationVisitor(DependencyGraph.Builder builder)", "class_method_signature": "ModuleAnnotationVisitor.ModuleAnnotationVisitor(DependencyGraph.Builder builder)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(ClassOrInterfaceDeclaration declaration, Object arg)", "modifiers": "@Override public", "return": "void", "signature": "void visit(ClassOrInterfaceDeclaration declaration, Object arg)", "full_signature": "@Override public void visit(ClassOrInterfaceDeclaration declaration, Object arg)", "class_method_signature": "ModuleAnnotationVisitor.visit(ClassOrInterfaceDeclaration declaration, Object arg)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(MethodDeclaration method, Object arg)", "modifiers": "@Override public", "return": "void", "signature": "void visit(MethodDeclaration method, Object arg)", "full_signature": "@Override public void visit(MethodDeclaration method, Object arg)", "class_method_signature": "ModuleAnnotationVisitor.visit(MethodDeclaration method, Object arg)", "testcase": false, "constructor": false}, {"identifier": "hasProvideAnnotation", "parameters": "(BodyDeclaration declaration)", "modifiers": "private", "return": "boolean", "signature": "boolean hasProvideAnnotation(BodyDeclaration declaration)", "full_signature": "private boolean hasProvideAnnotation(BodyDeclaration declaration)", "class_method_signature": "ModuleAnnotationVisitor.hasProvideAnnotation(BodyDeclaration declaration)", "testcase": false, "constructor": false}, {"identifier": "isDaggerModule", "parameters": "(ClassOrInterfaceDeclaration declaration)", "modifiers": "static", "return": "boolean", "signature": "boolean isDaggerModule(ClassOrInterfaceDeclaration declaration)", "full_signature": "static boolean isDaggerModule(ClassOrInterfaceDeclaration declaration)", "class_method_signature": "ModuleAnnotationVisitor.isDaggerModule(ClassOrInterfaceDeclaration declaration)", "testcase": false, "constructor": false}, {"identifier": "hasIntoSetAnnotation", "parameters": "(BodyDeclaration declaration)", "modifiers": "static", "return": "boolean", "signature": "boolean hasIntoSetAnnotation(BodyDeclaration declaration)", "full_signature": "static boolean hasIntoSetAnnotation(BodyDeclaration declaration)", "class_method_signature": "ModuleAnnotationVisitor.hasIntoSetAnnotation(BodyDeclaration declaration)", "testcase": false, "constructor": false}], "file": "dagger-visualizer/src/main/java/com/jraska/dagger/visual/ModuleAnnotationVisitor.java"}, "focal_method": {"identifier": "create", "parameters": "(DependencyGraph.Builder builder)", "modifiers": "public static", "return": "ModuleAnnotationVisitor", "body": "public static ModuleAnnotationVisitor create(DependencyGraph.Builder builder) {\n    Preconditions.notNull(builder);\n    return new ModuleAnnotationVisitor(builder);\n  }", "signature": "ModuleAnnotationVisitor create(DependencyGraph.Builder builder)", "full_signature": "public static ModuleAnnotationVisitor create(DependencyGraph.Builder builder)", "class_method_signature": "ModuleAnnotationVisitor.create(DependencyGraph.Builder builder)", "testcase": false, "constructor": false, "invocations": ["notNull"]}, "repository": {"repo_id": 63002081, "url": "https://github.com/jraska/dagger-visual-graph", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 74, "license": "licensed"}}