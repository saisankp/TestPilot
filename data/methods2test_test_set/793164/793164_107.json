{"test_class": {"identifier": "CXValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final CXValidator validator = new CXValidator();", "modifier": "private static final", "type": "CXValidator", "declarator": "validator = new CXValidator()", "var_name": "validator"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/CXValidatorTest.java"}, "test_case": {"identifier": "testValidateGoodCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateGoodCases() throws XDSMetaDataException {\n        validator.validate(\"45^^^&1.2.840.113519.6.197&ISO\");\n    }", "signature": "void testValidateGoodCases()", "full_signature": "@Test public void testValidateGoodCases()", "class_method_signature": "CXValidatorTest.testValidateGoodCases()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "CXValidator", "superclass": "", "interfaces": "implements ValueValidator", "fields": [{"original_string": "private final HDValidator HD_VALIDATOR = new HDValidator();", "modifier": "private final", "type": "HDValidator", "declarator": "HD_VALIDATOR = new HDValidator()", "var_name": "HD_VALIDATOR"}], "methods": [{"identifier": "validate", "parameters": "(String hl7CX)", "modifiers": "@Override public", "return": "void", "signature": "void validate(String hl7CX)", "full_signature": "@Override public void validate(String hl7CX)", "class_method_signature": "CXValidator.validate(String hl7CX)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/CXValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(String hl7CX)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(String hl7CX) throws XDSMetaDataException {\n        Identifiable identifiable = Hl7v2Based.parse(hl7CX, Identifiable.class);\n        metaDataAssert(identifiable != null, CX_NEEDS_ID);\n\n        CX cx = identifiable.getHapiObject();\n\n        metaDataAssert(countMatches(hl7CX, \"^\") <= 3, CX_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(cx.getCx2_CheckDigit().getValue()), CX_TOO_MANY_COMPONENTS);\n        metaDataAssert(isEmpty(cx.getCx3_CheckDigitScheme().getValue()), CX_TOO_MANY_COMPONENTS);\n\n        metaDataAssert(isNotEmpty(cx.getCx1_IDNumber().getValue()), CX_NEEDS_ID);\n\n        HD_VALIDATOR.validate(cx.getCx4_AssigningAuthority(), hl7CX);\n    }", "signature": "void validate(String hl7CX)", "full_signature": "@Override public void validate(String hl7CX)", "class_method_signature": "CXValidator.validate(String hl7CX)", "testcase": false, "constructor": false, "invocations": ["parse", "metaDataAssert", "getHapiObject", "metaDataAssert", "countMatches", "metaDataAssert", "isEmpty", "getValue", "getCx2_CheckDigit", "metaDataAssert", "isEmpty", "getValue", "getCx3_CheckDigitScheme", "metaDataAssert", "isNotEmpty", "getValue", "getCx1_IDNumber", "validate", "getCx4_AssigningAuthority"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}