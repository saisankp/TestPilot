{"test_class": {"identifier": "PrettyPrintProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String CONTENT_TYPE_SOAPXML = \"application/soap+xml\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_SOAPXML = \"application/soap+xml\"", "var_name": "CONTENT_TYPE_SOAPXML"}, {"original_string": "private static final String CONTENT_TYPE_SVGXML = \"image/svg+xml\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_SVGXML = \"image/svg+xml\"", "var_name": "CONTENT_TYPE_SVGXML"}, {"original_string": "private static final String CONTENT_TYPE_JSON = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_JSON = \"application/json\"", "var_name": "CONTENT_TYPE_JSON"}, {"original_string": "private static final String BODY = \"body\";", "modifier": "private static final", "type": "String", "declarator": "BODY = \"body\"", "var_name": "BODY"}, {"original_string": "@Mock\n    private StreamResultFactory streamResultFactory;", "modifier": "@Mock\n    private", "type": "StreamResultFactory", "declarator": "streamResultFactory", "var_name": "streamResultFactory"}, {"original_string": "@Mock\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Mock\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private Transformer transformer;", "modifier": "@Mock\n    private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private XmlTransformerFactory transformerFactory;", "modifier": "@Mock\n    private", "type": "XmlTransformerFactory", "declarator": "transformerFactory", "var_name": "transformerFactory"}, {"original_string": "@Mock\n    private StreamResult streamResult;", "modifier": "@Mock\n    private", "type": "StreamResult", "declarator": "streamResult", "var_name": "streamResult"}, {"original_string": "@Mock\n    private StreamSource streamSource;", "modifier": "@Mock\n    private", "type": "StreamSource", "declarator": "streamSource", "var_name": "streamSource"}, {"original_string": "@Mock\n    private Writer writer;", "modifier": "@Mock\n    private", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@InjectMocks\n    private PrettyPrintProcessor underTest;", "modifier": "@InjectMocks\n    private", "type": "PrettyPrintProcessor", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-core/src/test/java/com/epam/wilma/core/processor/entity/PrettyPrintProcessorTest.java"}, "test_case": {"identifier": "testProcessShouldNotCallTransformWhenImageXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessShouldNotCallTransformWhenImageXml() throws ApplicationException, TransformerException {\n        //GIVEN\n        given(request.getHeader(CONTENT_TYPE_HEADER)).willReturn(CONTENT_TYPE_SVGXML);\n        //WHEN\n        underTest.process(request);\n        //THEN\n        verify(request, never()).setBody(Mockito.anyString());\n    }", "signature": "void testProcessShouldNotCallTransformWhenImageXml()", "full_signature": "@Test public void testProcessShouldNotCallTransformWhenImageXml()", "class_method_signature": "PrettyPrintProcessorTest.testProcessShouldNotCallTransformWhenImageXml()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getHeader", "process", "setBody", "verify", "never", "anyString"]}, "focal_class": {"identifier": "PrettyPrintProcessor", "superclass": "extends ProcessorBase", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(PrettyPrintProcessor.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PrettyPrintProcessor.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private StreamResultFactory streamResultFactory;", "modifier": "@Autowired\n    private", "type": "StreamResultFactory", "declarator": "streamResultFactory", "var_name": "streamResultFactory"}, {"original_string": "@Autowired\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Autowired\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Autowired\n    private XmlTransformerFactory transformerFactory;", "modifier": "@Autowired\n    private", "type": "XmlTransformerFactory", "declarator": "transformerFactory", "var_name": "transformerFactory"}], "methods": [{"identifier": "process", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "@Override public", "return": "void", "signature": "void process(final WilmaHttpEntity entity)", "full_signature": "@Override public void process(final WilmaHttpEntity entity)", "class_method_signature": "PrettyPrintProcessor.process(final WilmaHttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "handleJsonContent", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "private", "return": "void", "signature": "void handleJsonContent(final WilmaHttpEntity entity)", "full_signature": "private void handleJsonContent(final WilmaHttpEntity entity)", "class_method_signature": "PrettyPrintProcessor.handleJsonContent(final WilmaHttpEntity entity)", "testcase": false, "constructor": false}, {"identifier": "tryToParseJson", "parameters": "(final WilmaHttpEntity entity, final String body)", "modifiers": "private", "return": "String", "signature": "String tryToParseJson(final WilmaHttpEntity entity, final String body)", "full_signature": "private String tryToParseJson(final WilmaHttpEntity entity, final String body)", "class_method_signature": "PrettyPrintProcessor.tryToParseJson(final WilmaHttpEntity entity, final String body)", "testcase": false, "constructor": false}, {"identifier": "logError", "parameters": "(final WilmaHttpEntity entity, final Exception e)", "modifiers": "private", "return": "void", "signature": "void logError(final WilmaHttpEntity entity, final Exception e)", "full_signature": "private void logError(final WilmaHttpEntity entity, final Exception e)", "class_method_signature": "PrettyPrintProcessor.logError(final WilmaHttpEntity entity, final Exception e)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-core/src/main/java/com/epam/wilma/core/processor/entity/PrettyPrintProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(final WilmaHttpEntity entity)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final WilmaHttpEntity entity) throws ApplicationException {\n        String body = entity.getBody();\n        if ((body == null) || (body.length() == 0)) {\n            return; //actually we have nothing to print pretty :)\n        }\n        String contentTypeHeader = entity.getHeader(\"Content-Type\");\n        if (contentTypeHeader != null && contentTypeHeader.contains(\"xml\") && !contentTypeHeader.contains(\"image/svg+xml\")) {\n            try {\n                Transformer transformer = transformerFactory.createTransformer();\n                transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n                StreamResult result = streamResultFactory.createStreamResult();\n                StreamSource source = streamSourceFactory.createStreamSourceFromString(body);\n                transformer.transform(source, result);\n                String xmlString = result.getWriter().toString();\n                entity.setBody(xmlString);\n            } catch (TransformerException e) {\n                logError(entity, e);\n            }\n        } else if (contentTypeHeader != null && contentTypeHeader.contains(\"json\")) {\n            handleJsonContent(entity);\n        }\n\n    }", "signature": "void process(final WilmaHttpEntity entity)", "full_signature": "@Override public void process(final WilmaHttpEntity entity)", "class_method_signature": "PrettyPrintProcessor.process(final WilmaHttpEntity entity)", "testcase": false, "constructor": false, "invocations": ["getBody", "length", "getHeader", "contains", "contains", "createTransformer", "setOutputProperty", "createStreamResult", "createStreamSourceFromString", "transform", "toString", "getWriter", "setBody", "logError", "contains", "handleJsonContent"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}