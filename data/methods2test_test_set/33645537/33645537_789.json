{"test_class": {"identifier": "BlockingOperatorMostRecentTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorMostRecentTest.java"}, "test_case": {"identifier": "testMostRecent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMostRecent() {\n        Subject<String, String> s = PublishSubject.create();\n\n        Iterator<String> it = mostRecent(s, \"default\").iterator();\n\n        assertTrue(it.hasNext());\n        assertEquals(\"default\", it.next());\n        assertEquals(\"default\", it.next());\n\n        s.onNext(\"one\");\n        assertTrue(it.hasNext());\n        assertEquals(\"one\", it.next());\n        assertEquals(\"one\", it.next());\n\n        s.onNext(\"two\");\n        assertTrue(it.hasNext());\n        assertEquals(\"two\", it.next());\n        assertEquals(\"two\", it.next());\n\n        s.onCompleted();\n        assertFalse(it.hasNext());\n\n    }", "signature": "void testMostRecent()", "full_signature": "@Test public void testMostRecent()", "class_method_signature": "BlockingOperatorMostRecentTest.testMostRecent()", "testcase": true, "constructor": false, "invocations": ["create", "iterator", "mostRecent", "assertTrue", "hasNext", "assertEquals", "next", "assertEquals", "next", "onNext", "assertTrue", "hasNext", "assertEquals", "next", "assertEquals", "next", "onNext", "assertTrue", "hasNext", "assertEquals", "next", "assertEquals", "next", "onCompleted", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "BlockingOperatorMostRecent", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorMostRecent", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorMostRecent()", "full_signature": "private  BlockingOperatorMostRecent()", "class_method_signature": "BlockingOperatorMostRecent.BlockingOperatorMostRecent()", "testcase": false, "constructor": true}, {"identifier": "mostRecent", "parameters": "(final Observable<? extends T> source, final T initialValue)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "full_signature": "public static Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "class_method_signature": "BlockingOperatorMostRecent.mostRecent(final Observable<? extends T> source, final T initialValue)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorMostRecent.java"}, "focal_method": {"identifier": "mostRecent", "parameters": "(final Observable<? extends T> source, final T initialValue)", "modifiers": "public static", "return": "Iterable<T>", "body": "public static <T> Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue) {\n        return new Iterable<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                MostRecentObserver<T> mostRecentObserver = new MostRecentObserver<T>(initialValue);\n\n                /**\n                 * Subscribe instead of unsafeSubscribe since this is the final subscribe in the chain\n                 * since it is for BlockingObservable.\n                 */\n                source.subscribe(mostRecentObserver);\n\n                return mostRecentObserver.getIterable();\n            }\n        };\n    }", "signature": "Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "full_signature": "public static Iterable<T> mostRecent(final Observable<? extends T> source, final T initialValue)", "class_method_signature": "BlockingOperatorMostRecent.mostRecent(final Observable<? extends T> source, final T initialValue)", "testcase": false, "constructor": false, "invocations": ["subscribe", "getIterable"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}