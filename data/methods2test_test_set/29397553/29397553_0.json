{"test_class": {"identifier": "MFRecommenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MFRecommender<String, String> recommender;", "modifier": "private final", "type": "MFRecommender<String, String>", "declarator": "recommender", "var_name": "recommender"}], "file": "RankSys-mf/src/test/java/es/uam/eps/ir/ranksys/mf/rec/MFRecommenderTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilter() {\n        int maxLength = 2;\n        IntPredicate filter = i -> i % 2 == 0;\n\n        List<Tuple2id> result = recommender.getRecommendation(0, maxLength, filter).getIidxs();\n\n        List<Tuple2id> expected = Arrays.asList(\n                tuple(0, 6.1),\n                tuple(2, 4.1)\n        );\n        \n        assertEquals(expected, result);\n    }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "MFRecommenderTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["getIidxs", "getRecommendation", "asList", "tuple", "tuple", "assertEquals"]}, "focal_class": {"identifier": "MFRecommender", "superclass": "extends AbstractFastRecommender<U, I>", "interfaces": "", "fields": [{"original_string": "private final Factorization<U, I> factorization;", "modifier": "private final", "type": "Factorization<U, I>", "declarator": "factorization", "var_name": "factorization"}], "methods": [{"identifier": "MFRecommender", "parameters": "(FastUserIndex<U> uIndex, FastItemIndex<I> iIndex, Factorization<U, I> factorization)", "modifiers": "public", "return": "", "signature": " MFRecommender(FastUserIndex<U> uIndex, FastItemIndex<I> iIndex, Factorization<U, I> factorization)", "full_signature": "public  MFRecommender(FastUserIndex<U> uIndex, FastItemIndex<I> iIndex, Factorization<U, I> factorization)", "class_method_signature": "MFRecommender.MFRecommender(FastUserIndex<U> uIndex, FastItemIndex<I> iIndex, Factorization<U, I> factorization)", "testcase": false, "constructor": true}, {"identifier": "getRecommendation", "parameters": "(int uidx, int maxLength, IntPredicate filter)", "modifiers": "@Override public", "return": "FastRecommendation", "signature": "FastRecommendation getRecommendation(int uidx, int maxLength, IntPredicate filter)", "full_signature": "@Override public FastRecommendation getRecommendation(int uidx, int maxLength, IntPredicate filter)", "class_method_signature": "MFRecommender.getRecommendation(int uidx, int maxLength, IntPredicate filter)", "testcase": false, "constructor": false}, {"identifier": "getRecommendation", "parameters": "(int uidx, IntStream candidates)", "modifiers": "@Override public", "return": "FastRecommendation", "signature": "FastRecommendation getRecommendation(int uidx, IntStream candidates)", "full_signature": "@Override public FastRecommendation getRecommendation(int uidx, IntStream candidates)", "class_method_signature": "MFRecommender.getRecommendation(int uidx, IntStream candidates)", "testcase": false, "constructor": false}], "file": "RankSys-mf/src/main/java/es/uam/eps/ir/ranksys/mf/rec/MFRecommender.java"}, "focal_method": {"identifier": "getRecommendation", "parameters": "(int uidx, int maxLength, IntPredicate filter)", "modifiers": "@Override public", "return": "FastRecommendation", "body": "@Override\n    public FastRecommendation getRecommendation(int uidx, int maxLength, IntPredicate filter) {\n        DoubleMatrix1D pu;\n\n        pu = factorization.getUserVector(uidx2user(uidx));\n        if (pu == null) {\n            return new FastRecommendation(uidx, new ArrayList<>());\n        }\n\n        IntDoubleTopN topN = new IntDoubleTopN(min(maxLength, factorization.numItems()));\n\n        DoubleMatrix1D r = factorization.getItemMatrix().zMult(pu, null);\n        for (int iidx = 0; iidx < r.size(); iidx++) {\n            if (filter.test(iidx)) {\n                topN.add(iidx, r.getQuick(iidx));\n            }\n        }\n\n        topN.sort();\n\n        List<Tuple2id> items = topN.reverseStream()\n                .collect(toList());\n\n        return new FastRecommendation(uidx, items);\n    }", "signature": "FastRecommendation getRecommendation(int uidx, int maxLength, IntPredicate filter)", "full_signature": "@Override public FastRecommendation getRecommendation(int uidx, int maxLength, IntPredicate filter)", "class_method_signature": "MFRecommender.getRecommendation(int uidx, int maxLength, IntPredicate filter)", "testcase": false, "constructor": false, "invocations": ["getUserVector", "uidx2user", "min", "numItems", "zMult", "getItemMatrix", "size", "test", "add", "getQuick", "sort", "collect", "reverseStream", "toList"]}, "repository": {"repo_id": 29397553, "url": "https://github.com/RankSys/RankSys", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 248, "size": 2033, "license": "licensed"}}