{"test_class": {"identifier": "NameGrabberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TopicIF topicSort;", "modifier": "private", "type": "TopicIF", "declarator": "topicSort", "var_name": "topicSort"}, {"original_string": "private TopicIF topicPlay;", "modifier": "private", "type": "TopicIF", "declarator": "topicPlay", "var_name": "topicPlay"}, {"original_string": "private TopicIF topic5;", "modifier": "private", "type": "TopicIF", "declarator": "topic5", "var_name": "topic5"}, {"original_string": "private TopicNameIF basename5A;", "modifier": "private", "type": "TopicNameIF", "declarator": "basename5A", "var_name": "basename5A"}, {"original_string": "private TopicNameIF basename5B;", "modifier": "private", "type": "TopicNameIF", "declarator": "basename5B", "var_name": "basename5B"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/NameGrabberTest.java"}, "test_case": {"identifier": "testNameGrabber5C", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNameGrabber5C() {\n    List variantScope = new ArrayList();\n    variantScope.add(topicSort);\n    GrabberIF grabber = new NameGrabber(Collections.EMPTY_LIST, variantScope);\n\n    Assert.assertTrue(\"wrong base name grabbed\",\n           ((TopicNameIF) grabber.grab(topic5)).equals(basename5A));\n  }", "signature": "void testNameGrabber5C()", "full_signature": "@Test public void testNameGrabber5C()", "class_method_signature": "NameGrabberTest.testNameGrabber5C()", "testcase": true, "constructor": false, "invocations": ["add", "assertTrue", "equals", "grab"]}, "focal_class": {"identifier": "NameGrabber", "superclass": "", "interfaces": "implements GrabberIF<TopicIF, NameIF>", "fields": [{"original_string": "protected LocatorIF themeIndicator;", "modifier": "protected", "type": "LocatorIF", "declarator": "themeIndicator", "var_name": "themeIndicator"}, {"original_string": "protected boolean indicatorVariant;", "modifier": "protected", "type": "boolean", "declarator": "indicatorVariant", "var_name": "indicatorVariant"}, {"original_string": "protected Collection<TopicIF> scope;", "modifier": "protected", "type": "Collection<TopicIF>", "declarator": "scope", "var_name": "scope"}, {"original_string": "protected Collection<TopicIF> variantScope;", "modifier": "protected", "type": "Collection<TopicIF>", "declarator": "variantScope", "var_name": "variantScope"}, {"original_string": "protected boolean grabOnlyTopicName = true;", "modifier": "protected", "type": "boolean", "declarator": "grabOnlyTopicName = true", "var_name": "grabOnlyTopicName"}], "methods": [{"identifier": "NameGrabber", "parameters": "(LocatorIF themeIndicator)", "modifiers": "public", "return": "", "signature": " NameGrabber(LocatorIF themeIndicator)", "full_signature": "public  NameGrabber(LocatorIF themeIndicator)", "class_method_signature": "NameGrabber.NameGrabber(LocatorIF themeIndicator)", "testcase": false, "constructor": true}, {"identifier": "NameGrabber", "parameters": "(LocatorIF themeIndicator, boolean variant)", "modifiers": "public", "return": "", "signature": " NameGrabber(LocatorIF themeIndicator, boolean variant)", "full_signature": "public  NameGrabber(LocatorIF themeIndicator, boolean variant)", "class_method_signature": "NameGrabber.NameGrabber(LocatorIF themeIndicator, boolean variant)", "testcase": false, "constructor": true}, {"identifier": "NameGrabber", "parameters": "(Collection<TopicIF> scope)", "modifiers": "public", "return": "", "signature": " NameGrabber(Collection<TopicIF> scope)", "full_signature": "public  NameGrabber(Collection<TopicIF> scope)", "class_method_signature": "NameGrabber.NameGrabber(Collection<TopicIF> scope)", "testcase": false, "constructor": true}, {"identifier": "NameGrabber", "parameters": "(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope)", "modifiers": "public", "return": "", "signature": " NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope)", "full_signature": "public  NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope)", "class_method_signature": "NameGrabber.NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope)", "testcase": false, "constructor": true}, {"identifier": "NameGrabber", "parameters": "(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope,\n                     boolean grabOnlyTopicName)", "modifiers": "public", "return": "", "signature": " NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope,\n                     boolean grabOnlyTopicName)", "full_signature": "public  NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope,\n                     boolean grabOnlyTopicName)", "class_method_signature": "NameGrabber.NameGrabber(Collection<TopicIF> basenameScope, Collection<TopicIF> variantScope,\n                     boolean grabOnlyTopicName)", "testcase": false, "constructor": true}, {"identifier": "setGrabOnlyTopicName", "parameters": "(boolean grabOnlyTopicName)", "modifiers": "public", "return": "void", "signature": "void setGrabOnlyTopicName(boolean grabOnlyTopicName)", "full_signature": "public void setGrabOnlyTopicName(boolean grabOnlyTopicName)", "class_method_signature": "NameGrabber.setGrabOnlyTopicName(boolean grabOnlyTopicName)", "testcase": false, "constructor": false}, {"identifier": "getGrabOnlyTopicName", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getGrabOnlyTopicName()", "full_signature": "public boolean getGrabOnlyTopicName()", "class_method_signature": "NameGrabber.getGrabOnlyTopicName()", "testcase": false, "constructor": false}, {"identifier": "grab", "parameters": "(TopicIF topic)", "modifiers": "@Override public", "return": "NameIF", "signature": "NameIF grab(TopicIF topic)", "full_signature": "@Override public NameIF grab(TopicIF topic)", "class_method_signature": "NameGrabber.grab(TopicIF topic)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/NameGrabber.java"}, "focal_method": {"identifier": "grab", "parameters": "(TopicIF topic)", "modifiers": "@Override public", "return": "NameIF", "body": "@Override\n  public NameIF grab(TopicIF topic) {\n    if (topic == null)\n      return null;\n    \n    List<TopicNameIF> basenames = new ArrayList<TopicNameIF>(topic.getTopicNames());\n    if (basenames.isEmpty())\n      return null;\n\n    // If subject indicator of theme is set use this to setup scope\n    if (themeIndicator != null) {\n      // Get theme\n      TopicMapIF tm = topic.getTopicMap();\n      \n      // Test if tm is null before getting theme. tm may be null if topic was\n      // created (for internal purposes) in situations where no topic map was\n      // available.\n      if (tm != null) {\n        TopicIF theme = tm.getTopicBySubjectIdentifier(themeIndicator);\n        if (theme != null) {\n          if (indicatorVariant)\n            variantScope = Collections.singleton(theme);\n          else\n            scope = Collections.singleton(theme);\n        }\n      }\n    }\n    \n    // sort the base names\n    Collections.sort(basenames, new TopicNameComparator(scope));\n\n    // TODO: Do we really have to create this grabber over and over again?\n    VariantNameGrabber vngrabber = new VariantNameGrabber(variantScope);\n    NameIF name = null;\n    VariantNameIF vn = null;\n\n    for (TopicNameIF current : basenames) {\n      if (name == null)\n        name = current;\n\n      if (!variantScope.isEmpty()) {\n        vn = vngrabber.grab(current);\n        if (vn != null) {\n          // TODO: Should not use intersection to find appropriate\n          // variant, but rather exact matching, or perhaps ranking.\n          \n          // if there exists some overlap between variant name themes\n          // and specified scope then we are delivering this variant\n          Collection<TopicIF> interSection = new HashSet<TopicIF>(vn.getScope());\n          interSection.retainAll(variantScope);\n          if (!interSection.isEmpty())\n            break;\n          else\n            vn = null;\n        }\n      }\n    } // while\n\n    // if valid variant name get base name which belongs to this\n    if (vn != null) {\n      if (grabOnlyTopicName)\n        name = vn.getTopicName();\n      else\n        name = vn;\n    }\n\n    return name;\n  }", "signature": "NameIF grab(TopicIF topic)", "full_signature": "@Override public NameIF grab(TopicIF topic)", "class_method_signature": "NameGrabber.grab(TopicIF topic)", "testcase": false, "constructor": false, "invocations": ["getTopicNames", "isEmpty", "getTopicMap", "getTopicBySubjectIdentifier", "singleton", "singleton", "sort", "isEmpty", "grab", "getScope", "retainAll", "isEmpty", "getTopicName"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}