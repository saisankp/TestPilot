{"test_class": {"identifier": "DateTimeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DateTimeUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DateTimeUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/DateTimeUtilTest.java"}, "test_case": {"identifier": "parseEmbeddedThrowsException2", "parameters": "()", "modifiers": "@Test(expected=IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected=IllegalArgumentException.class)\n    public void parseEmbeddedThrowsException2() throws Exception {\n        DateTimeUtil.parseEmbedded(\"app.208-05-01.log\");\n    }", "signature": "void parseEmbeddedThrowsException2()", "full_signature": "@Test(expected=IllegalArgumentException.class) public void parseEmbeddedThrowsException2()", "class_method_signature": "DateTimeUtilTest.parseEmbeddedThrowsException2()", "testcase": true, "constructor": false, "invocations": ["parseEmbedded"]}, "focal_class": {"identifier": "DateTimeUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toDateTime", "parameters": "(Timestamp value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime toDateTime(Timestamp value)", "full_signature": "public static DateTime toDateTime(Timestamp value)", "class_method_signature": "DateTimeUtil.toDateTime(Timestamp value)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime copy(DateTime value)", "full_signature": "public static DateTime copy(DateTime value)", "class_method_signature": "DateTimeUtil.copy(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "toTimestamp", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "Timestamp", "signature": "Timestamp toTimestamp(DateTime dt)", "full_signature": "public static Timestamp toTimestamp(DateTime dt)", "class_method_signature": "DateTimeUtil.toTimestamp(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "public static", "return": "DateTime", "signature": "DateTime now()", "full_signature": "public static DateTime now()", "class_method_signature": "DateTimeUtil.now()", "testcase": false, "constructor": false}, {"identifier": "parseEmbedded", "parameters": "(String string0)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseEmbedded(String string0)", "full_signature": "public static DateTime parseEmbedded(String string0)", "class_method_signature": "DateTimeUtil.parseEmbedded(String string0)", "testcase": false, "constructor": false}, {"identifier": "parseEmbedded", "parameters": "(String string0, String pattern, DateTimeZone zone)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parseEmbedded(String string0, String pattern, DateTimeZone zone)", "full_signature": "public static DateTime parseEmbedded(String string0, String pattern, DateTimeZone zone)", "class_method_signature": "DateTimeUtil.parseEmbedded(String string0, String pattern, DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "floorToYear", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToYear(DateTime value)", "full_signature": "public static DateTime floorToYear(DateTime value)", "class_method_signature": "DateTimeUtil.floorToYear(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToMonth", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMonth(DateTime value)", "full_signature": "public static DateTime floorToMonth(DateTime value)", "class_method_signature": "DateTimeUtil.floorToMonth(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToDay", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToDay(DateTime value)", "full_signature": "public static DateTime floorToDay(DateTime value)", "class_method_signature": "DateTimeUtil.floorToDay(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToHour(DateTime value)", "full_signature": "public static DateTime floorToHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToHalfHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToHalfHour(DateTime value)", "full_signature": "public static DateTime floorToHalfHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToHalfHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToQuarterHour", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToQuarterHour(DateTime value)", "full_signature": "public static DateTime floorToQuarterHour(DateTime value)", "class_method_signature": "DateTimeUtil.floorToQuarterHour(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToTenMinutes", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToTenMinutes(DateTime value)", "full_signature": "public static DateTime floorToTenMinutes(DateTime value)", "class_method_signature": "DateTimeUtil.floorToTenMinutes(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToFiveMinutes", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToFiveMinutes(DateTime value)", "full_signature": "public static DateTime floorToFiveMinutes(DateTime value)", "class_method_signature": "DateTimeUtil.floorToFiveMinutes(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToMinutePeriod", "parameters": "(DateTime value, int periodInMinutes)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMinutePeriod(DateTime value, int periodInMinutes)", "full_signature": "public static DateTime floorToMinutePeriod(DateTime value, int periodInMinutes)", "class_method_signature": "DateTimeUtil.floorToMinutePeriod(DateTime value, int periodInMinutes)", "testcase": false, "constructor": false}, {"identifier": "floorToMinute", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToMinute(DateTime value)", "full_signature": "public static DateTime floorToMinute(DateTime value)", "class_method_signature": "DateTimeUtil.floorToMinute(DateTime value)", "testcase": false, "constructor": false}, {"identifier": "floorToSecond", "parameters": "(DateTime value)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime floorToSecond(DateTime value)", "full_signature": "public static DateTime floorToSecond(DateTime value)", "class_method_signature": "DateTimeUtil.floorToSecond(DateTime value)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/DateTimeUtil.java"}, "focal_method": {"identifier": "parseEmbedded", "parameters": "(String string0)", "modifiers": "public static", "return": "DateTime", "body": "public static DateTime parseEmbedded(String string0) throws IllegalArgumentException {\n        return parseEmbedded(string0, \"yyyy-MM-dd\", DateTimeZone.UTC);\n    }", "signature": "DateTime parseEmbedded(String string0)", "full_signature": "public static DateTime parseEmbedded(String string0)", "class_method_signature": "DateTimeUtil.parseEmbedded(String string0)", "testcase": false, "constructor": false, "invocations": ["parseEmbedded"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}