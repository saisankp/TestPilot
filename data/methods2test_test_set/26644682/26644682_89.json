{"test_class": {"identifier": "FileSystemDataSetMetadataRepositoryTest", "superclass": "extends DataSetBaseTest", "interfaces": "", "fields": [{"original_string": "@Value(\"${dataset.metadata.store.file.location}\")\n    private String storeLocation;", "modifier": "@Value(\"${dataset.metadata.store.file.location}\")\n    private", "type": "String", "declarator": "storeLocation", "var_name": "storeLocation"}, {"original_string": "@Autowired\n    private FileSystemDataSetMetadataRepository repository;", "modifier": "@Autowired\n    private", "type": "FileSystemDataSetMetadataRepository", "declarator": "repository", "var_name": "repository"}], "file": "dataprep-dataset/src/test/java/org/talend/dataprep/dataset/store/metadata/file/FileSystemDataSetMetadataRepositoryTest.java"}, "test_case": {"identifier": "shouldIgnoreHiddenFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldIgnoreHiddenFiles() throws Exception {\n\n        // given\n        assertFalse(repository.list().findFirst().isPresent());\n\n        // when\n        File hidden = new File(\"target/test/store/metadata/.hidden_file\");\n        FileOutputStream fos = new FileOutputStream(hidden);\n        fos.write(\"hello\".getBytes());\n        fos.close();\n\n        // then\n        final DataSetMetadata dataSetMetadata = repository.get(\".hidden\");\n        hidden.delete();\n        assertNull(dataSetMetadata);\n\n    }", "signature": "void shouldIgnoreHiddenFiles()", "full_signature": "@Test public void shouldIgnoreHiddenFiles()", "class_method_signature": "FileSystemDataSetMetadataRepositoryTest.shouldIgnoreHiddenFiles()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isPresent", "findFirst", "list", "write", "getBytes", "close", "get", "delete", "assertNull"]}, "focal_class": {"identifier": "FileSystemDataSetMetadataRepository", "superclass": "extends ObjectDataSetMetadataRepository", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileSystemDataSetMetadataRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileSystemDataSetMetadataRepository.class)", "var_name": "LOG"}, {"original_string": "private final ReentrantReadWriteLockGroup locks = new ReentrantReadWriteLockGroup(true, 100);", "modifier": "private final", "type": "ReentrantReadWriteLockGroup", "declarator": "locks = new ReentrantReadWriteLockGroup(true, 100)", "var_name": "locks"}, {"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Value(\"${dataset.metadata.store.file.location}\")\n    private String storeLocation;", "modifier": "@Value(\"${dataset.metadata.store.file.location}\")\n    private", "type": "String", "declarator": "storeLocation", "var_name": "storeLocation"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "FileSystemDataSetMetadataRepository.init()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataSetMetadata metadata)", "modifiers": "@Override public", "return": "void", "signature": "void save(DataSetMetadata metadata)", "full_signature": "@Override public void save(DataSetMetadata metadata)", "class_method_signature": "FileSystemDataSetMetadataRepository.save(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String id)", "modifiers": "@Override public", "return": "DataSetMetadata", "signature": "DataSetMetadata get(String id)", "full_signature": "@Override public DataSetMetadata get(String id)", "class_method_signature": "FileSystemDataSetMetadataRepository.get(String id)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String id)", "full_signature": "@Override public void remove(String id)", "class_method_signature": "FileSystemDataSetMetadataRepository.remove(String id)", "testcase": false, "constructor": false}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "Stream<DataSetMetadata>", "signature": "Stream<DataSetMetadata> source()", "full_signature": "@Override public Stream<DataSetMetadata> source()", "class_method_signature": "FileSystemDataSetMetadataRepository.source()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String metadataId)", "modifiers": "private", "return": "File", "signature": "File getFile(String metadataId)", "full_signature": "private File getFile(String metadataId)", "class_method_signature": "FileSystemDataSetMetadataRepository.getFile(String metadataId)", "testcase": false, "constructor": false}, {"identifier": "getRootFolder", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getRootFolder()", "full_signature": "private File getRootFolder()", "class_method_signature": "FileSystemDataSetMetadataRepository.getRootFolder()", "testcase": false, "constructor": false}], "file": "dataprep-dataset/src/main/java/org/talend/dataprep/dataset/store/metadata/file/FileSystemDataSetMetadataRepository.java"}, "focal_method": {"identifier": "get", "parameters": "(String id)", "modifiers": "@Override public", "return": "DataSetMetadata", "body": "@Override\n    public DataSetMetadata get(String id) {\n\n        final File file = getFile(id);\n        if (file.getName().startsWith(\".\")) {\n            LOG.info(\"Ignore hidden file {}\", file.getName());\n            return null;\n        }\n        if (!file.exists()) {\n            LOG.info(\"dataset #{} not found in file system\", id);\n            return null;\n        }\n        ReentrantReadWriteLock lock = locks.getLock(id);\n\n        lock.readLock().lock();\n        try (FileInputStream fileInputStream = new FileInputStream(file);\n                GZIPInputStream input = new GZIPInputStream(fileInputStream)) {\n            return mapper.readerFor(DataSetMetadata.class).readValue(input);\n        } catch (IOException e) {\n            LOG.error(\"unable to load dataset {}\", id, e);\n            return null;\n        } finally {\n            lock.readLock().unlock();\n        }\n    }", "signature": "DataSetMetadata get(String id)", "full_signature": "@Override public DataSetMetadata get(String id)", "class_method_signature": "FileSystemDataSetMetadataRepository.get(String id)", "testcase": false, "constructor": false, "invocations": ["getFile", "startsWith", "getName", "info", "getName", "exists", "info", "getLock", "lock", "readLock", "readValue", "readerFor", "error", "unlock", "readLock"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}