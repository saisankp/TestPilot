{"test_class": {"identifier": "CronExpressionTest", "superclass": "extends SerializationTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String[] VERSIONS = new String[] {\"1.5.2\"};", "modifier": "private static final", "type": "String[]", "declarator": "VERSIONS = new String[] {\"1.5.2\"}", "var_name": "VERSIONS"}, {"original_string": "private static final TimeZone EST_TIME_ZONE = TimeZone.getTimeZone(\"US/Eastern\");", "modifier": "private static final", "type": "TimeZone", "declarator": "EST_TIME_ZONE = TimeZone.getTimeZone(\"US/Eastern\")", "var_name": "EST_TIME_ZONE"}], "file": "drools-core/src/test/java/org/drools/core/time/impl/CronExpressionTest.java"}, "test_case": {"identifier": "testIsSatisfiedBy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsSatisfiedBy() throws Exception {\n        CronExpression cronExpression = new CronExpression(\"0 15 10 * * ? 2005\");\n        \n        Calendar cal = Calendar.getInstance();\n        \n        cal.set(2005, Calendar.JUNE, 1, 10, 15, 0);\n        assertTrue(cronExpression.isSatisfiedBy(cal.getTime()));\n        \n        cal.set(Calendar.YEAR, 2006);\n        assertFalse(cronExpression.isSatisfiedBy(cal.getTime()));\n\n        cal = Calendar.getInstance();\n        cal.set(2005, Calendar.JUNE, 1, 10, 16, 0);\n        assertFalse(cronExpression.isSatisfiedBy(cal.getTime()));\n\n        cal = Calendar.getInstance();\n        cal.set(2005, Calendar.JUNE, 1, 10, 14, 0);\n        assertFalse(cronExpression.isSatisfiedBy(cal.getTime()));\n    }", "signature": "void testIsSatisfiedBy()", "full_signature": "@Test public void testIsSatisfiedBy()", "class_method_signature": "CronExpressionTest.testIsSatisfiedBy()", "testcase": true, "constructor": false, "invocations": ["getInstance", "set", "assertTrue", "isSatisfiedBy", "getTime", "set", "assertFalse", "isSatisfiedBy", "getTime", "getInstance", "set", "assertFalse", "isSatisfiedBy", "getTime", "getInstance", "set", "assertFalse", "isSatisfiedBy", "getTime"]}, "focal_class": {"identifier": "CronExpression", "superclass": "extends KieCronExpression", "interfaces": "implements Cloneable", "fields": [{"original_string": "private TimeZone timeZone = null;", "modifier": "private", "type": "TimeZone", "declarator": "timeZone = null", "var_name": "timeZone"}], "methods": [{"identifier": "CronExpression", "parameters": "(String cronExpression)", "modifiers": "public", "return": "", "signature": " CronExpression(String cronExpression)", "full_signature": "public  CronExpression(String cronExpression)", "class_method_signature": "CronExpression.CronExpression(String cronExpression)", "testcase": false, "constructor": true}, {"identifier": "isSatisfiedBy", "parameters": "(Date date)", "modifiers": "public", "return": "boolean", "signature": "boolean isSatisfiedBy(Date date)", "full_signature": "public boolean isSatisfiedBy(Date date)", "class_method_signature": "CronExpression.isSatisfiedBy(Date date)", "testcase": false, "constructor": false}, {"identifier": "getNextValidTimeAfter", "parameters": "(Date date)", "modifiers": "public", "return": "Date", "signature": "Date getNextValidTimeAfter(Date date)", "full_signature": "public Date getNextValidTimeAfter(Date date)", "class_method_signature": "CronExpression.getNextValidTimeAfter(Date date)", "testcase": false, "constructor": false}, {"identifier": "getNextInvalidTimeAfter", "parameters": "(Date date)", "modifiers": "public", "return": "Date", "signature": "Date getNextInvalidTimeAfter(Date date)", "full_signature": "public Date getNextInvalidTimeAfter(Date date)", "class_method_signature": "CronExpression.getNextInvalidTimeAfter(Date date)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "()", "modifiers": "public", "return": "TimeZone", "signature": "TimeZone getTimeZone()", "full_signature": "public TimeZone getTimeZone()", "class_method_signature": "CronExpression.getTimeZone()", "testcase": false, "constructor": false}, {"identifier": "setTimeZone", "parameters": "(TimeZone timeZone)", "modifiers": "public", "return": "void", "signature": "void setTimeZone(TimeZone timeZone)", "full_signature": "public void setTimeZone(TimeZone timeZone)", "class_method_signature": "CronExpression.setTimeZone(TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "getTimeAfter", "parameters": "(Date afterTime)", "modifiers": "protected", "return": "Date", "signature": "Date getTimeAfter(Date afterTime)", "full_signature": "protected Date getTimeAfter(Date afterTime)", "class_method_signature": "CronExpression.getTimeAfter(Date afterTime)", "testcase": false, "constructor": false}, {"identifier": "setCalendarHour", "parameters": "(Calendar cal, int hour)", "modifiers": "protected", "return": "void", "signature": "void setCalendarHour(Calendar cal, int hour)", "full_signature": "protected void setCalendarHour(Calendar cal, int hour)", "class_method_signature": "CronExpression.setCalendarHour(Calendar cal, int hour)", "testcase": false, "constructor": false}, {"identifier": "getTimeBefore", "parameters": "(Date endTime)", "modifiers": "protected", "return": "Date", "signature": "Date getTimeBefore(Date endTime)", "full_signature": "protected Date getTimeBefore(Date endTime)", "class_method_signature": "CronExpression.getTimeBefore(Date endTime)", "testcase": false, "constructor": false}, {"identifier": "getFinalFireTime", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getFinalFireTime()", "full_signature": "public Date getFinalFireTime()", "class_method_signature": "CronExpression.getFinalFireTime()", "testcase": false, "constructor": false}, {"identifier": "isLeapYear", "parameters": "(int year)", "modifiers": "protected", "return": "boolean", "signature": "boolean isLeapYear(int year)", "full_signature": "protected boolean isLeapYear(int year)", "class_method_signature": "CronExpression.isLeapYear(int year)", "testcase": false, "constructor": false}, {"identifier": "getLastDayOfMonth", "parameters": "(int monthNum, int year)", "modifiers": "protected", "return": "int", "signature": "int getLastDayOfMonth(int monthNum, int year)", "full_signature": "protected int getLastDayOfMonth(int monthNum, int year)", "class_method_signature": "CronExpression.getLastDayOfMonth(int monthNum, int year)", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "(java.io.ObjectInputStream stream)", "modifiers": "private", "return": "void", "signature": "void readObject(java.io.ObjectInputStream stream)", "full_signature": "private void readObject(java.io.ObjectInputStream stream)", "class_method_signature": "CronExpression.readObject(java.io.ObjectInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object clone()", "full_signature": "public Object clone()", "class_method_signature": "CronExpression.clone()", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/time/impl/CronExpression.java"}, "focal_method": {"identifier": "isSatisfiedBy", "parameters": "(Date date)", "modifiers": "public", "return": "boolean", "body": "public boolean isSatisfiedBy(Date date) {\n        Calendar testDateCal = Calendar.getInstance(getTimeZone());\n        testDateCal.setTime(date);\n        testDateCal.set(Calendar.MILLISECOND, 0);\n        Date originalDate = testDateCal.getTime();\n\n        testDateCal.add(Calendar.SECOND, -1);\n\n        Date timeAfter = getTimeAfter(testDateCal.getTime());\n\n        return ((timeAfter != null) && (timeAfter.equals(originalDate)));\n    }", "signature": "boolean isSatisfiedBy(Date date)", "full_signature": "public boolean isSatisfiedBy(Date date)", "class_method_signature": "CronExpression.isSatisfiedBy(Date date)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getTimeZone", "setTime", "set", "getTime", "add", "getTimeAfter", "getTime", "equals"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}