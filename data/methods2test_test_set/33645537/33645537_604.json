{"test_class": {"identifier": "UUIDTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int loop = 5000;", "modifier": "private final", "type": "int", "declarator": "loop = 5000", "var_name": "loop"}, {"original_string": "private final int concurrency = 20;", "modifier": "private final", "type": "int", "declarator": "concurrency = 20", "var_name": "concurrency"}, {"original_string": "private UUID uuid;", "modifier": "private", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "private String instanceId;", "modifier": "private", "type": "String", "declarator": "instanceId", "var_name": "instanceId"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/lang/UUIDTest.java"}, "test_case": {"identifier": "performance", "parameters": "()", "modifiers": "@Test public synchronized", "return": "void", "body": "@Test\n    public synchronized void performance() throws InterruptedException {\n        final String[][] results = new String[concurrency][];\n        Thread[] threads = new Thread[concurrency];\n\n        for (int i = 0; i < concurrency; i++) {\n            final String[] result = new String[loop];\n            results[i] = result;\n            threads[i] = new Thread(new Runnable() {\n                public void run() {\n                    for (int i = 0; i < loop; i++) {\n                        result[i] = uuid.nextID();\n                    }\n                }\n            }, \"t-\" + (i + 1));\n        }\n\n        long start = System.currentTimeMillis();\n\n        for (Thread thread : threads) {\n            thread.start();\n        }\n\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        long duration = System.currentTimeMillis() - start;\n\n        System.out.printf(\"%s: requests=%d, concurrency=%d%n\", uuid.getClass().getSimpleName(), concurrency * loop,\n                concurrency);\n\n        System.out.printf(\"  Total time: %,d ms.%n\", duration);\n        System.out.printf(\"Average time: %,2.2f \\u03BCs.%n\", (double) duration / concurrency / loop * 1000);\n\n        // \u68c0\u67e5\u91cd\u590d\n        Set<String> allIDs = CollectionUtil.createHashSet();\n\n        for (String[] result : results) {\n            for (String id : result) {\n                assertNotNull(id);\n                assertTrue(id, !id.contains(\"+\") && !id.contains(\"/\") && !id.contains(\"=\"));\n                allIDs.add(id);\n            }\n        }\n\n        assertEquals(concurrency * loop, allIDs.size());\n    }", "signature": "void performance()", "full_signature": "@Test public synchronized void performance()", "class_method_signature": "UUIDTest.performance()", "testcase": true, "constructor": false, "invocations": ["nextID", "currentTimeMillis", "start", "join", "currentTimeMillis", "printf", "getSimpleName", "getClass", "printf", "printf", "createHashSet", "assertNotNull", "assertTrue", "contains", "contains", "contains", "add", "assertEquals", "size"]}, "focal_class": {"identifier": "UUID", "superclass": "", "interfaces": "", "fields": [{"original_string": "private boolean noCase;", "modifier": "private", "type": "boolean", "declarator": "noCase", "var_name": "noCase"}, {"original_string": "private String instanceId;", "modifier": "private", "type": "String", "declarator": "instanceId", "var_name": "instanceId"}, {"original_string": "private AtomicInteger counter;", "modifier": "private", "type": "AtomicInteger", "declarator": "counter", "var_name": "counter"}], "methods": [{"identifier": "UUID", "parameters": "()", "modifiers": "public", "return": "", "signature": " UUID()", "full_signature": "public  UUID()", "class_method_signature": "UUID.UUID()", "testcase": false, "constructor": true}, {"identifier": "UUID", "parameters": "(boolean noCase)", "modifiers": "public", "return": "", "signature": " UUID(boolean noCase)", "full_signature": "public  UUID(boolean noCase)", "class_method_signature": "UUID.UUID(boolean noCase)", "testcase": false, "constructor": true}, {"identifier": "getLocalHostAddress", "parameters": "()", "modifiers": "private static", "return": "byte[]", "signature": "byte[] getLocalHostAddress()", "full_signature": "private static byte[] getLocalHostAddress()", "class_method_signature": "UUID.getLocalHostAddress()", "testcase": false, "constructor": false}, {"identifier": "getRandomizedTime", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getRandomizedTime()", "full_signature": "private byte[] getRandomizedTime()", "class_method_signature": "UUID.getRandomizedTime()", "testcase": false, "constructor": false}, {"identifier": "nextID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String nextID()", "full_signature": "public String nextID()", "class_method_signature": "UUID.nextID()", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/lang/UUID.java"}, "focal_method": {"identifier": "nextID", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String nextID() {\n        // MACHINE_ID + JVM_ID + \u5f53\u524d\u65f6\u95f4 + counter\n        return instanceId + \"-\" + StringUtil.longToString(System.currentTimeMillis(), noCase) + \"-\"\n                + StringUtil.longToString(counter.getAndIncrement(), noCase);\n    }", "signature": "String nextID()", "full_signature": "public String nextID()", "class_method_signature": "UUID.nextID()", "testcase": false, "constructor": false, "invocations": ["longToString", "currentTimeMillis", "longToString", "getAndIncrement"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}