{"test_class": {"identifier": "TemporaryJDBCTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DB = \".db\";", "modifier": "private static final", "type": "String", "declarator": "DB = \".db\"", "var_name": "DB"}, {"original_string": "private static final String T2PLATFORM = \"t2platform-\";", "modifier": "private static final", "type": "String", "declarator": "T2PLATFORM = \"t2platform-\"", "var_name": "T2PLATFORM"}, {"original_string": "private static final String CREATE_TRUE = \";create=true\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_TRUE = \";create=true\"", "var_name": "CREATE_TRUE"}, {"original_string": "private static final String JDBC_DERBY = \"jdbc:derby:\";", "modifier": "private static final", "type": "String", "declarator": "JDBC_DERBY = \"jdbc:derby:\"", "var_name": "JDBC_DERBY"}], "file": "taverna-reference-impl/src/test/java/org/apache/taverna/platform/spring/jdbc/TemporaryJDBCTest.java"}, "test_case": {"identifier": "getDerby", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getDerby() throws Exception {\n\t\tTemporaryJDBC temporaryJDBC = new TemporaryJDBC();\n\t\tString jdbcURL = temporaryJDBC.getTemporaryDerbyJDBC();\n\t\tassertTrue(\"Not a Derby URL\", jdbcURL.startsWith(JDBC_DERBY));\n\t\tString url = jdbcURL.split(JDBC_DERBY)[1];\n\t\tassertTrue(\"Did not end with \" + CREATE_TRUE, url.endsWith(CREATE_TRUE));\n\t\tString location = url.split(CREATE_TRUE)[0];\n\t\tassertFalse(\"Location was an empty string\", location.equals(\"\"));\n\t\tFile locationFile = new File(location);\n\t\tassertFalse(\"File already exists: \" + locationFile, locationFile.exists());\n\t\tFile parentFile = locationFile.getParentFile();\n\t\tassertTrue(\"Parent directory did not exist\", parentFile.isDirectory());\n\t\tassertTrue(\"Did not end with \" + T2PLATFORM, parentFile.getName().startsWith(T2PLATFORM));\n\t\tassertTrue(\"Did not start with \" + DB , parentFile.getName().endsWith(DB));\n\t}", "signature": "void getDerby()", "full_signature": "@Test public void getDerby()", "class_method_signature": "TemporaryJDBCTest.getDerby()", "testcase": true, "constructor": false, "invocations": ["getTemporaryDerbyJDBC", "assertTrue", "startsWith", "split", "assertTrue", "endsWith", "split", "assertFalse", "equals", "assertFalse", "exists", "getParentFile", "assertTrue", "isDirectory", "assertTrue", "startsWith", "getName", "assertTrue", "endsWith", "getName"]}, "focal_class": {"identifier": "TemporaryJDBC", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getTemporaryDerbyJDBC", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTemporaryDerbyJDBC()", "full_signature": "public String getTemporaryDerbyJDBC()", "class_method_signature": "TemporaryJDBC.getTemporaryDerbyJDBC()", "testcase": false, "constructor": false}], "file": "taverna-reference-impl/src/main/java/org/apache/taverna/platform/spring/jdbc/TemporaryJDBC.java"}, "focal_method": {"identifier": "getTemporaryDerbyJDBC", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getTemporaryDerbyJDBC() throws IOException {\n\t\tFile tmpDir = createTempFile(\"t2platform-\", \".db\");\n\t\ttmpDir.delete();\n\t\tif (!tmpDir.mkdir())\n\t\t\tthrow new IOException(\"Could not create temporary directory \"\n\t\t\t\t\t+ tmpDir);\n\t\treturn \"jdbc:derby:\" + tmpDir.getPath() + \"/database;create=true\";\n\t}", "signature": "String getTemporaryDerbyJDBC()", "full_signature": "public String getTemporaryDerbyJDBC()", "class_method_signature": "TemporaryJDBC.getTemporaryDerbyJDBC()", "testcase": false, "constructor": false, "invocations": ["createTempFile", "delete", "mkdir", "getPath"]}, "repository": {"repo_id": 30956939, "url": "https://github.com/apache/incubator-taverna-engine", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 12, "size": 6590, "license": "licensed"}}