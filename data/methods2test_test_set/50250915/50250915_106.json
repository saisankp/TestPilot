{"test_class": {"identifier": "BlueUrlTokenizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "blueocean-pipeline-api-impl/src/test/java/io/jenkins/blueocean/preload/BlueUrlTokenizerTest.java"}, "test_case": {"identifier": "test_MalformedURLException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_MalformedURLException() {\n        Assert.assertNull(BlueUrlTokenizer.parse(\"/a\"));\n    }", "signature": "void test_MalformedURLException()", "full_signature": "@Test public void test_MalformedURLException()", "class_method_signature": "BlueUrlTokenizerTest.test_MalformedURLException()", "testcase": true, "constructor": false, "invocations": ["assertNull", "parse"]}, "focal_class": {"identifier": "BlueUrlTokenizer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> PIPELINE_TABS =\n        new LinkedHashSet<>(Arrays.asList(\"activity\", \"branches\", \"pr\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "PIPELINE_TABS =\n        new LinkedHashSet<>(Arrays.asList(\"activity\", \"branches\", \"pr\"))", "var_name": "PIPELINE_TABS"}, {"original_string": "private static final Set<String> PIPELINE_RUN_DETAIL_TABS =\n        new LinkedHashSet<>(Arrays.asList(\"pipeline\", \"changes\", \"tests\", \"artifacts\"));", "modifier": "private static final", "type": "Set<String>", "declarator": "PIPELINE_RUN_DETAIL_TABS =\n        new LinkedHashSet<>(Arrays.asList(\"pipeline\", \"changes\", \"tests\", \"artifacts\"))", "var_name": "PIPELINE_RUN_DETAIL_TABS"}, {"original_string": "private Map<UrlPart, String> urlParts = new LinkedHashMap<>();", "modifier": "private", "type": "Map<UrlPart, String>", "declarator": "urlParts = new LinkedHashMap<>()", "var_name": "urlParts"}, {"original_string": "private UrlPart lastPart;", "modifier": "private", "type": "UrlPart", "declarator": "lastPart", "var_name": "lastPart"}], "methods": [{"identifier": "BlueUrlTokenizer", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlueUrlTokenizer()", "full_signature": "private  BlueUrlTokenizer()", "class_method_signature": "BlueUrlTokenizer.BlueUrlTokenizer()", "testcase": false, "constructor": true}, {"identifier": "parseCurrentRequest", "parameters": "()", "modifiers": "public static @CheckForNull", "return": "BlueUrlTokenizer", "signature": "BlueUrlTokenizer parseCurrentRequest()", "full_signature": "public static @CheckForNull BlueUrlTokenizer parseCurrentRequest()", "class_method_signature": "BlueUrlTokenizer.parseCurrentRequest()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@Nonnull String url)", "modifiers": "public static @CheckForNull", "return": "BlueUrlTokenizer", "signature": "BlueUrlTokenizer parse(@Nonnull String url)", "full_signature": "public static @CheckForNull BlueUrlTokenizer parse(@Nonnull String url)", "class_method_signature": "BlueUrlTokenizer.parse(@Nonnull String url)", "testcase": false, "constructor": false}, {"identifier": "addPart", "parameters": "(@Nonnull UrlPart urlPart, @Nonnull String value)", "modifiers": "private", "return": "void", "signature": "void addPart(@Nonnull UrlPart urlPart, @Nonnull String value)", "full_signature": "private void addPart(@Nonnull UrlPart urlPart, @Nonnull String value)", "class_method_signature": "BlueUrlTokenizer.addPart(@Nonnull UrlPart urlPart, @Nonnull String value)", "testcase": false, "constructor": false}, {"identifier": "hasPart", "parameters": "(@Nonnull UrlPart urlPart)", "modifiers": "public", "return": "boolean", "signature": "boolean hasPart(@Nonnull UrlPart urlPart)", "full_signature": "public boolean hasPart(@Nonnull UrlPart urlPart)", "class_method_signature": "BlueUrlTokenizer.hasPart(@Nonnull UrlPart urlPart)", "testcase": false, "constructor": false}, {"identifier": "getPart", "parameters": "(@Nonnull UrlPart urlPart)", "modifiers": "public @CheckForNull", "return": "String", "signature": "String getPart(@Nonnull UrlPart urlPart)", "full_signature": "public @CheckForNull String getPart(@Nonnull UrlPart urlPart)", "class_method_signature": "BlueUrlTokenizer.getPart(@Nonnull UrlPart urlPart)", "testcase": false, "constructor": false}, {"identifier": "getLastPart", "parameters": "()", "modifiers": "public @CheckForNull", "return": "UrlPart", "signature": "UrlPart getLastPart()", "full_signature": "public @CheckForNull UrlPart getLastPart()", "class_method_signature": "BlueUrlTokenizer.getLastPart()", "testcase": false, "constructor": false}, {"identifier": "lastPartIs", "parameters": "(@Nonnull UrlPart urlPart)", "modifiers": "public", "return": "boolean", "signature": "boolean lastPartIs(@Nonnull UrlPart urlPart)", "full_signature": "public boolean lastPartIs(@Nonnull UrlPart urlPart)", "class_method_signature": "BlueUrlTokenizer.lastPartIs(@Nonnull UrlPart urlPart)", "testcase": false, "constructor": false}, {"identifier": "lastPartIs", "parameters": "(@Nonnull UrlPart urlPart, @Nonnull String value)", "modifiers": "public", "return": "boolean", "signature": "boolean lastPartIs(@Nonnull UrlPart urlPart, @Nonnull String value)", "full_signature": "public boolean lastPartIs(@Nonnull UrlPart urlPart, @Nonnull String value)", "class_method_signature": "BlueUrlTokenizer.lastPartIs(@Nonnull UrlPart urlPart, @Nonnull String value)", "testcase": false, "constructor": false}, {"identifier": "urlDecode", "parameters": "(String string)", "modifiers": "private static", "return": "String", "signature": "String urlDecode(String string)", "full_signature": "private static String urlDecode(String string)", "class_method_signature": "BlueUrlTokenizer.urlDecode(String string)", "testcase": false, "constructor": false}, {"identifier": "extractTokens", "parameters": "(String url)", "modifiers": "private static", "return": "Iterator<String>", "signature": "Iterator<String> extractTokens(String url)", "full_signature": "private static Iterator<String> extractTokens(String url)", "class_method_signature": "BlueUrlTokenizer.extractTokens(String url)", "testcase": false, "constructor": false}], "file": "blueocean-pipeline-api-impl/src/main/java/io/jenkins/blueocean/preload/BlueUrlTokenizer.java"}, "focal_method": {"identifier": "parse", "parameters": "(@Nonnull String url)", "modifiers": "public static @CheckForNull", "return": "BlueUrlTokenizer", "body": "public static @CheckForNull\n    BlueUrlTokenizer parse(@Nonnull String url) {\n        Iterator<String> urlTokens = extractTokens(url);\n\n        //\n        // Yes, the following code is quite ugly, but it's easy enough to understand atm.\n        // Unless this gets a lot more detailed, please don't get super clever ideas about using\n        // some fancy-pants abstractions/patterns/3rd-party-libs for parsing the URL that, while\n        // might make the code look neater structurally, also makes the code logic a lot harder\n        // to follow (without using a debugger).\n        //\n        if (urlTokens.hasNext()) {\n            if (urlTokens.next().equalsIgnoreCase(\"blue\")) {\n                BlueUrlTokenizer blueUrlTokenizer = new BlueUrlTokenizer();\n\n                if (urlTokens.hasNext()) {\n                    String next = urlTokens.next();\n\n                    if (next.equalsIgnoreCase(\"pipelines\")) {\n                        // i.e. /blue/pipelines/\n                        blueUrlTokenizer.addPart(UrlPart.DASHBOARD_PIPELINES, next);\n                    } else if (next.equalsIgnoreCase(\"organizations\")) {\n                        // i.e. /blue/organizations/...\n                        if (urlTokens.hasNext()) {\n                            // e.g. /blue/organizations/jenkins/...\n                            blueUrlTokenizer.addPart(UrlPart.ORGANIZATION, urlTokens.next());\n                            if (urlTokens.hasNext()) {\n                                // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/...\n                                blueUrlTokenizer.addPart(UrlPart.PIPELINE, urlDecode(urlTokens.next()));\n                                if (urlTokens.hasNext()) {\n                                    next = urlTokens.next();\n                                    if (next.equalsIgnoreCase(\"detail\")) {\n                                        // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/detail/...\n                                        blueUrlTokenizer.addPart(UrlPart.PIPELINE_RUN_DETAIL, next);\n                                        if (urlTokens.hasNext()) {\n                                            // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/detail/magic-branch-X/...\n                                            blueUrlTokenizer.addPart(UrlPart.BRANCH, urlDecode(urlTokens.next()));\n                                            if (urlTokens.hasNext()) {\n                                                // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/detail/magic-branch-X/55/...\n                                                blueUrlTokenizer.addPart(UrlPart.PIPELINE_RUN_DETAIL_ID, urlDecode(urlTokens.next()));\n                                                if (urlTokens.hasNext()) {\n                                                    next = urlTokens.next();\n                                                    if (PIPELINE_RUN_DETAIL_TABS.contains(next.toLowerCase())) {\n                                                        // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/detail/magic-branch-X/55/pipeline\n                                                        blueUrlTokenizer.addPart(UrlPart.PIPELINE_RUN_DETAIL_TAB, next.toLowerCase());\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    } else if (PIPELINE_TABS.contains(next.toLowerCase())) {\n                                        // e.g. /blue/organizations/jenkins/f1%2Ff3%20with%20spaces%2Ff3%20pipeline/activity/\n                                        blueUrlTokenizer.addPart(UrlPart.PIPELINE_TAB, next.toLowerCase());\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return blueUrlTokenizer;\n            }\n        }\n\n        return null;\n    }", "signature": "BlueUrlTokenizer parse(@Nonnull String url)", "full_signature": "public static @CheckForNull BlueUrlTokenizer parse(@Nonnull String url)", "class_method_signature": "BlueUrlTokenizer.parse(@Nonnull String url)", "testcase": false, "constructor": false, "invocations": ["extractTokens", "hasNext", "equalsIgnoreCase", "next", "hasNext", "next", "equalsIgnoreCase", "addPart", "equalsIgnoreCase", "hasNext", "addPart", "next", "hasNext", "addPart", "urlDecode", "next", "hasNext", "next", "equalsIgnoreCase", "addPart", "hasNext", "addPart", "urlDecode", "next", "hasNext", "addPart", "urlDecode", "next", "hasNext", "next", "contains", "toLowerCase", "addPart", "toLowerCase", "contains", "toLowerCase", "addPart", "toLowerCase"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}