{"test_class": {"identifier": "TestThemisExpiredDataCleanFilter", "superclass": "extends TransactionTestBase", "interfaces": "", "fields": [], "file": "themis-coprocessor/src/test/java/org/apache/hadoop/hbase/regionserver/TestThemisExpiredDataCleanFilter.java"}, "test_case": {"identifier": "testThemisExpiredDataCleanFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testThemisExpiredDataCleanFilter() throws IOException {\n    // one row / one column\n    writeData(COLUMN, prewriteTs);\n    writeData(COLUMN, prewriteTs + 1);\n    // won't clean\n    ResultScanner scanner = getResultScanner(TABLENAME, prewriteTs);\n    Result result = scanner.next();\n    Assert.assertEquals(2, result.size());\n    Assert.assertEquals(prewriteTs + 1, result.list().get(0).getTimestamp());\n    Assert.assertEquals(prewriteTs, result.list().get(1).getTimestamp());\n    scanner.close();\n    // won't clean\n    scanner = getResultScanner(TABLENAME, prewriteTs + 1);\n    result = scanner.next();\n    Assert.assertEquals(2, result.size());\n    Assert.assertEquals(prewriteTs + 1, result.list().get(0).getTimestamp());\n    Assert.assertEquals(prewriteTs, result.list().get(1).getTimestamp());\n    scanner.close();\n    // will clean one version\n    scanner = getResultScanner(TABLENAME, prewriteTs + 2);\n    result = scanner.next();\n    Assert.assertEquals(1, result.size());\n    Assert.assertEquals(prewriteTs + 1, result.list().get(0).getTimestamp());\n    scanner.close();\n    \n    // one row / multi-columns\n    writeData(COLUMN_WITH_ANOTHER_QUALIFIER, prewriteTs);\n    writeData(COLUMN_WITH_ANOTHER_QUALIFIER, prewriteTs + 1);\n    writeData(COLUMN_WITH_ANOTHER_FAMILY, prewriteTs);\n    writeData(COLUMN_WITH_ANOTHER_FAMILY, prewriteTs + 1);\n    scanner = getResultScanner(TABLENAME, prewriteTs + 2);\n    result = scanner.next();\n    scanner.close();\n    Assert.assertEquals(3, result.size());\n    ColumnCoordinate[] columns = new ColumnCoordinate[] { COLUMN_WITH_ANOTHER_FAMILY,\n        COLUMN_WITH_ANOTHER_QUALIFIER, COLUMN };\n    for (int i = 0; i < columns.length; ++i) {\n      ColumnCoordinate column = columns[i];\n      KeyValue kv = result.list().get(i);\n      Assert.assertEquals(prewriteTs + 1, kv.getTimestamp());\n      Assert.assertArrayEquals(column.getFamily(), kv.getFamily());\n      Assert.assertArrayEquals(column.getQualifier(), kv.getQualifier());\n    }\n    \n    // two row / multi-columns\n    writeData(COLUMN_WITH_ANOTHER_ROW, prewriteTs);\n    writeData(COLUMN_WITH_ANOTHER_ROW, prewriteTs + 1);\n    scanner = getResultScanner(TABLENAME, prewriteTs + 2);\n    result = scanner.next();\n    Assert.assertEquals(1, result.size());\n    Assert.assertEquals(prewriteTs + 1, result.list().get(0).getTimestamp());\n    result = scanner.next();\n    Assert.assertEquals(3, result.size());\n    for (int i = 0; i < columns.length; ++i) {\n      ColumnCoordinate column = columns[i];\n      KeyValue kv = result.list().get(i);\n      Assert.assertEquals(prewriteTs + 1, kv.getTimestamp());\n      Assert.assertArrayEquals(column.getFamily(), kv.getFamily());\n      Assert.assertArrayEquals(column.getQualifier(), kv.getQualifier());\n    }\n    scanner.close();\n  }", "signature": "void testThemisExpiredDataCleanFilter()", "full_signature": "@Test public void testThemisExpiredDataCleanFilter()", "class_method_signature": "TestThemisExpiredDataCleanFilter.testThemisExpiredDataCleanFilter()", "testcase": true, "constructor": false, "invocations": ["writeData", "writeData", "getResultScanner", "next", "assertEquals", "size", "assertEquals", "getTimestamp", "get", "list", "assertEquals", "getTimestamp", "get", "list", "close", "getResultScanner", "next", "assertEquals", "size", "assertEquals", "getTimestamp", "get", "list", "assertEquals", "getTimestamp", "get", "list", "close", "getResultScanner", "next", "assertEquals", "size", "assertEquals", "getTimestamp", "get", "list", "close", "writeData", "writeData", "writeData", "writeData", "getResultScanner", "next", "close", "assertEquals", "size", "get", "list", "assertEquals", "getTimestamp", "assertArrayEquals", "getFamily", "getFamily", "assertArrayEquals", "getQualifier", "getQualifier", "writeData", "writeData", "getResultScanner", "next", "assertEquals", "size", "assertEquals", "getTimestamp", "get", "list", "next", "assertEquals", "size", "get", "list", "assertEquals", "getTimestamp", "assertArrayEquals", "getFamily", "getFamily", "assertArrayEquals", "getQualifier", "getQualifier", "close"]}, "focal_class": {"identifier": "ThemisExpiredDataCleanFilter", "superclass": "extends FilterBase", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ThemisExpiredDataCleanFilter.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ThemisExpiredDataCleanFilter.class)", "var_name": "LOG"}, {"original_string": "private byte[] lastRow;", "modifier": "private", "type": "byte[]", "declarator": "lastRow", "var_name": "lastRow"}, {"original_string": "private byte[] lastFamily;", "modifier": "private", "type": "byte[]", "declarator": "lastFamily", "var_name": "lastFamily"}, {"original_string": "private byte[] lastQualifer;", "modifier": "private", "type": "byte[]", "declarator": "lastQualifer", "var_name": "lastQualifer"}, {"original_string": "private long cleanTs;", "modifier": "private", "type": "long", "declarator": "cleanTs", "var_name": "cleanTs"}, {"original_string": "private final HRegion region;", "modifier": "private final", "type": "HRegion", "declarator": "region", "var_name": "region"}], "methods": [{"identifier": "ThemisExpiredDataCleanFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThemisExpiredDataCleanFilter()", "full_signature": "public  ThemisExpiredDataCleanFilter()", "class_method_signature": "ThemisExpiredDataCleanFilter.ThemisExpiredDataCleanFilter()", "testcase": false, "constructor": true}, {"identifier": "ThemisExpiredDataCleanFilter", "parameters": "(long cleanTs)", "modifiers": "public", "return": "", "signature": " ThemisExpiredDataCleanFilter(long cleanTs)", "full_signature": "public  ThemisExpiredDataCleanFilter(long cleanTs)", "class_method_signature": "ThemisExpiredDataCleanFilter.ThemisExpiredDataCleanFilter(long cleanTs)", "testcase": false, "constructor": true}, {"identifier": "ThemisExpiredDataCleanFilter", "parameters": "(long cleanTs, HRegion region)", "modifiers": "public", "return": "", "signature": " ThemisExpiredDataCleanFilter(long cleanTs, HRegion region)", "full_signature": "public  ThemisExpiredDataCleanFilter(long cleanTs, HRegion region)", "class_method_signature": "ThemisExpiredDataCleanFilter.ThemisExpiredDataCleanFilter(long cleanTs, HRegion region)", "testcase": false, "constructor": true}, {"identifier": "filterKeyValue", "parameters": "(KeyValue kv)", "modifiers": "@Override public", "return": "ReturnCode", "signature": "ReturnCode filterKeyValue(KeyValue kv)", "full_signature": "@Override public ReturnCode filterKeyValue(KeyValue kv)", "class_method_signature": "ThemisExpiredDataCleanFilter.filterKeyValue(KeyValue kv)", "testcase": false, "constructor": false}, {"identifier": "readFields", "parameters": "(DataInput in)", "modifiers": "public", "return": "void", "signature": "void readFields(DataInput in)", "full_signature": "public void readFields(DataInput in)", "class_method_signature": "ThemisExpiredDataCleanFilter.readFields(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "public void write(DataOutput out)", "class_method_signature": "ThemisExpiredDataCleanFilter.write(DataOutput out)", "testcase": false, "constructor": false}], "file": "themis-coprocessor/src/main/java/org/apache/hadoop/hbase/regionserver/ThemisExpiredDataCleanFilter.java"}, "focal_method": {"identifier": "ThemisExpiredDataCleanFilter", "parameters": "()", "modifiers": "public", "return": "", "body": "public ThemisExpiredDataCleanFilter() {\n    this.region = null;\n  }", "signature": " ThemisExpiredDataCleanFilter()", "full_signature": "public  ThemisExpiredDataCleanFilter()", "class_method_signature": "ThemisExpiredDataCleanFilter.ThemisExpiredDataCleanFilter()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}