{"test_class": {"identifier": "FileHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String tempDir = System.getProperty(\"java.io.tmpdir\");", "modifier": "private static final", "type": "String", "declarator": "tempDir = System.getProperty(\"java.io.tmpdir\")", "var_name": "tempDir"}, {"original_string": "private static File workDir;", "modifier": "private static", "type": "File", "declarator": "workDir", "var_name": "workDir"}], "file": "coastal-hazards-commons/src/test/java/gov/usgs/cida/utilities/file/FileHelperTest.java"}, "test_case": {"identifier": "testCreateTokenFromFileName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateTokenFromFileName() throws URISyntaxException {\n\t\tSystem.out.println(\"createTokenFromFileName\");\n\t\tURL testFileURL = getClass().getResource(\"/handpts.zip\");\n\t\tFile testFie = new File(testFileURL.toURI());\n\t\tString result = FileHelper.base64EncodeFileName(testFie, false);\n\t\tassertTrue(StringUtils.isNotBlank(result));\n\t}", "signature": "void testCreateTokenFromFileName()", "full_signature": "@Test public void testCreateTokenFromFileName()", "class_method_signature": "FileHelperTest.testCreateTokenFromFileName()", "testcase": true, "constructor": false, "invocations": ["println", "getResource", "getClass", "toURI", "base64EncodeFileName", "assertTrue", "isNotBlank"]}, "focal_class": {"identifier": "FileHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = LoggerFactory.getLogger(FileHelper.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(FileHelper.class)", "var_name": "log"}], "methods": [{"identifier": "base64Encode", "parameters": "(final File input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] base64Encode(final File input)", "full_signature": "public static byte[] base64Encode(final File input)", "class_method_signature": "FileHelper.base64Encode(final File input)", "testcase": false, "constructor": false}, {"identifier": "base64Encode", "parameters": "(final byte[] input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] base64Encode(final byte[] input)", "full_signature": "public static byte[] base64Encode(final byte[] input)", "class_method_signature": "FileHelper.base64Encode(final byte[] input)", "testcase": false, "constructor": false}, {"identifier": "getByteArrayFromFile", "parameters": "(File file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getByteArrayFromFile(File file)", "full_signature": "public static byte[] getByteArrayFromFile(File file)", "class_method_signature": "FileHelper.getByteArrayFromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "renameFile", "parameters": "(final File fromFile, final String toFileName)", "modifiers": "public static", "return": "boolean", "signature": "boolean renameFile(final File fromFile, final String toFileName)", "full_signature": "public static boolean renameFile(final File fromFile, final String toFileName)", "class_method_signature": "FileHelper.renameFile(final File fromFile, final String toFileName)", "testcase": false, "constructor": false}, {"identifier": "copyFileToPath", "parameters": "(final File inFile, final String outFilePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyFileToPath(final File inFile, final String outFilePath)", "full_signature": "public static boolean copyFileToPath(final File inFile, final String outFilePath)", "class_method_signature": "FileHelper.copyFileToPath(final File inFile, final String outFilePath)", "testcase": false, "constructor": false}, {"identifier": "copyFileToPath", "parameters": "(final File inFile, final String outPath, boolean deleteOriginalFile)", "modifiers": "public static", "return": "boolean", "signature": "boolean copyFileToPath(final File inFile, final String outPath, boolean deleteOriginalFile)", "full_signature": "public static boolean copyFileToPath(final File inFile, final String outPath, boolean deleteOriginalFile)", "class_method_signature": "FileHelper.copyFileToPath(final File inFile, final String outPath, boolean deleteOriginalFile)", "testcase": false, "constructor": false}, {"identifier": "wipeOldFiles", "parameters": "(File directory, Long cutoffTime, boolean deleteDirectory)", "modifiers": "public static", "return": "Collection<File>", "signature": "Collection<File> wipeOldFiles(File directory, Long cutoffTime, boolean deleteDirectory)", "full_signature": "public static Collection<File> wipeOldFiles(File directory, Long cutoffTime, boolean deleteDirectory)", "class_method_signature": "FileHelper.wipeOldFiles(File directory, Long cutoffTime, boolean deleteDirectory)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(File directory)", "modifiers": "public static", "return": "boolean", "signature": "boolean createDir(File directory)", "full_signature": "public static boolean createDir(File directory)", "class_method_signature": "FileHelper.createDir(File directory)", "testcase": false, "constructor": false}, {"identifier": "createDir", "parameters": "(String directory)", "modifiers": "public static", "return": "boolean", "signature": "boolean createDir(String directory)", "full_signature": "public static boolean createDir(String directory)", "class_method_signature": "FileHelper.createDir(String directory)", "testcase": false, "constructor": false}, {"identifier": "deleteDirRecursively", "parameters": "(File directory)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDirRecursively(File directory)", "full_signature": "public static boolean deleteDirRecursively(File directory)", "class_method_signature": "FileHelper.deleteDirRecursively(File directory)", "testcase": false, "constructor": false}, {"identifier": "deleteDirRecursively", "parameters": "(String directory)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteDirRecursively(String directory)", "full_signature": "public static boolean deleteDirRecursively(String directory)", "class_method_signature": "FileHelper.deleteDirRecursively(String directory)", "testcase": false, "constructor": false}, {"identifier": "deleteFileQuietly", "parameters": "(String filePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFileQuietly(String filePath)", "full_signature": "public static boolean deleteFileQuietly(String filePath)", "class_method_signature": "FileHelper.deleteFileQuietly(String filePath)", "testcase": false, "constructor": false}, {"identifier": "deleteFileQuietly", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFileQuietly(File file)", "full_signature": "public static boolean deleteFileQuietly(File file)", "class_method_signature": "FileHelper.deleteFileQuietly(File file)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(String filePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFile(String filePath)", "full_signature": "public static boolean deleteFile(String filePath)", "class_method_signature": "FileHelper.deleteFile(String filePath)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean deleteFile(File file)", "full_signature": "public static boolean deleteFile(File file)", "class_method_signature": "FileHelper.deleteFile(File file)", "testcase": false, "constructor": false}, {"identifier": "doesDirectoryOrFileExist", "parameters": "(String filePath)", "modifiers": "public static", "return": "boolean", "signature": "boolean doesDirectoryOrFileExist(String filePath)", "full_signature": "public static boolean doesDirectoryOrFileExist(String filePath)", "class_method_signature": "FileHelper.doesDirectoryOrFileExist(String filePath)", "testcase": false, "constructor": false}, {"identifier": "findFile", "parameters": "(String file, String rootPath)", "modifiers": "public static", "return": "File", "signature": "File findFile(String file, String rootPath)", "full_signature": "public static File findFile(String file, String rootPath)", "class_method_signature": "FileHelper.findFile(String file, String rootPath)", "testcase": false, "constructor": false}, {"identifier": "getFileList", "parameters": "(String filePath, boolean recursive)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getFileList(String filePath, boolean recursive)", "full_signature": "public static List<String> getFileList(String filePath, boolean recursive)", "class_method_signature": "FileHelper.getFileList(String filePath, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getFileList", "parameters": "(String filePath, String[] extensions, boolean recursive)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getFileList(String filePath, String[] extensions, boolean recursive)", "full_signature": "public static List<String> getFileList(String filePath, String[] extensions, boolean recursive)", "class_method_signature": "FileHelper.getFileList(String filePath, String[] extensions, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getFileCollection", "parameters": "(String filePath, boolean recursive)", "modifiers": "public static", "return": "Collection<File>", "signature": "Collection<File> getFileCollection(String filePath, boolean recursive)", "full_signature": "public static Collection<File> getFileCollection(String filePath, boolean recursive)", "class_method_signature": "FileHelper.getFileCollection(String filePath, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getFileCollection", "parameters": "(String filePath, String[] extensions, boolean recursive)", "modifiers": "public static", "return": "Collection<?>", "signature": "Collection<?> getFileCollection(String filePath, String[] extensions, boolean recursive)", "full_signature": "public static Collection<?> getFileCollection(String filePath, String[] extensions, boolean recursive)", "class_method_signature": "FileHelper.getFileCollection(String filePath, String[] extensions, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getSystemTemp", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getSystemTemp()", "full_signature": "public static String getSystemTemp()", "class_method_signature": "FileHelper.getSystemTemp()", "testcase": false, "constructor": false}, {"identifier": "unzipFile", "parameters": "(String outputDirectory, File zipFile)", "modifiers": "public static", "return": "boolean", "signature": "boolean unzipFile(String outputDirectory, File zipFile)", "full_signature": "public static boolean unzipFile(String outputDirectory, File zipFile)", "class_method_signature": "FileHelper.unzipFile(String outputDirectory, File zipFile)", "testcase": false, "constructor": false}, {"identifier": "createUserDirectory", "parameters": "(String applicationUserSpaceDir)", "modifiers": "public static", "return": "String", "signature": "String createUserDirectory(String applicationUserSpaceDir)", "full_signature": "public static String createUserDirectory(String applicationUserSpaceDir)", "class_method_signature": "FileHelper.createUserDirectory(String applicationUserSpaceDir)", "testcase": false, "constructor": false}, {"identifier": "updateTimestamp", "parameters": "(final String path, final boolean recursive)", "modifiers": "public static", "return": "boolean", "signature": "boolean updateTimestamp(final String path, final boolean recursive)", "full_signature": "public static boolean updateTimestamp(final String path, final boolean recursive)", "class_method_signature": "FileHelper.updateTimestamp(final String path, final boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getFilesOlderThan", "parameters": "(File filePath, Long age, Boolean recursive)", "modifiers": "static", "return": "Collection<File>", "signature": "Collection<File> getFilesOlderThan(File filePath, Long age, Boolean recursive)", "full_signature": "static Collection<File> getFilesOlderThan(File filePath, Long age, Boolean recursive)", "class_method_signature": "FileHelper.getFilesOlderThan(File filePath, Long age, Boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "saveFileFromInputStream", "parameters": "(InputStream is, File destinationFile)", "modifiers": "public static", "return": "void", "signature": "void saveFileFromInputStream(InputStream is, File destinationFile)", "full_signature": "public static void saveFileFromInputStream(InputStream is, File destinationFile)", "class_method_signature": "FileHelper.saveFileFromInputStream(InputStream is, File destinationFile)", "testcase": false, "constructor": false}, {"identifier": "removeHiddenEntries", "parameters": "(File zipFile)", "modifiers": "public static", "return": "void", "signature": "void removeHiddenEntries(File zipFile)", "full_signature": "public static void removeHiddenEntries(File zipFile)", "class_method_signature": "FileHelper.removeHiddenEntries(File zipFile)", "testcase": false, "constructor": false}, {"identifier": "entryIsHidden", "parameters": "(ZipEntry entry)", "modifiers": "public static", "return": "boolean", "signature": "boolean entryIsHidden(ZipEntry entry)", "full_signature": "public static boolean entryIsHidden(ZipEntry entry)", "class_method_signature": "FileHelper.entryIsHidden(ZipEntry entry)", "testcase": false, "constructor": false}, {"identifier": "deleteZipEntries", "parameters": "(File zipFile,\n            Collection<String> files)", "modifiers": "public static", "return": "void", "signature": "void deleteZipEntries(File zipFile,\n            Collection<String> files)", "full_signature": "public static void deleteZipEntries(File zipFile,\n            Collection<String> files)", "class_method_signature": "FileHelper.deleteZipEntries(File zipFile,\n            Collection<String> files)", "testcase": false, "constructor": false}, {"identifier": "isZipFile", "parameters": "(File file)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZipFile(File file)", "full_signature": "public static boolean isZipFile(File file)", "class_method_signature": "FileHelper.isZipFile(File file)", "testcase": false, "constructor": false}, {"identifier": "zipFile", "parameters": "(File file, String newName, FileFilter filter)", "modifiers": "public static", "return": "File", "signature": "File zipFile(File file, String newName, FileFilter filter)", "full_signature": "public static File zipFile(File file, String newName, FileFilter filter)", "class_method_signature": "FileHelper.zipFile(File file, String newName, FileFilter filter)", "testcase": false, "constructor": false}, {"identifier": "base64EncodeFileName", "parameters": "(File file, boolean fullPath)", "modifiers": "public static", "return": "String", "signature": "String base64EncodeFileName(File file, boolean fullPath)", "full_signature": "public static String base64EncodeFileName(File file, boolean fullPath)", "class_method_signature": "FileHelper.base64EncodeFileName(File file, boolean fullPath)", "testcase": false, "constructor": false}], "file": "coastal-hazards-commons/src/main/java/gov/usgs/cida/utilities/file/FileHelper.java"}, "focal_method": {"identifier": "base64EncodeFileName", "parameters": "(File file, boolean fullPath)", "modifiers": "public static", "return": "String", "body": "public static String base64EncodeFileName(File file, boolean fullPath) {\n\t\tif (!file.exists()) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tbyte[] input;\n\t\t\tCharset encodeCharset = Charset.defaultCharset();\n\t\t\t\n\t\t\tif (fullPath) {\n\t\t\t\tinput = file.getAbsolutePath().getBytes(encodeCharset);\n\t\t\t} else {\n\t\t\t\tinput = file.getName().getBytes(encodeCharset);\n\t\t\t}\n\t\t\t\n\t\t\tbyte[] encodedPath = base64Encode(input);\n\t\t\treturn new String(encodedPath, encodeCharset);\n\t\t}\n\t}", "signature": "String base64EncodeFileName(File file, boolean fullPath)", "full_signature": "public static String base64EncodeFileName(File file, boolean fullPath)", "class_method_signature": "FileHelper.base64EncodeFileName(File file, boolean fullPath)", "testcase": false, "constructor": false, "invocations": ["exists", "defaultCharset", "getBytes", "getAbsolutePath", "getBytes", "getName", "base64Encode"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}