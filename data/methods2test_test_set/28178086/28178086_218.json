{"test_class": {"identifier": "Files2Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "static File PATH;", "modifier": "static", "type": "File", "declarator": "PATH", "var_name": "PATH"}, {"original_string": "static File ABSOLUTE_INSIDE;", "modifier": "static", "type": "File", "declarator": "ABSOLUTE_INSIDE", "var_name": "ABSOLUTE_INSIDE"}, {"original_string": "static File ABSOLUTE_DIR_INSIDE;", "modifier": "static", "type": "File", "declarator": "ABSOLUTE_DIR_INSIDE", "var_name": "ABSOLUTE_DIR_INSIDE"}, {"original_string": "static File RELATIVE_INSIDE;", "modifier": "static", "type": "File", "declarator": "RELATIVE_INSIDE", "var_name": "RELATIVE_INSIDE"}, {"original_string": "static File RELATIVE_DIR_INSIDE;", "modifier": "static", "type": "File", "declarator": "RELATIVE_DIR_INSIDE", "var_name": "RELATIVE_DIR_INSIDE"}, {"original_string": "static File ABSOLUTE_OUTSIDE;", "modifier": "static", "type": "File", "declarator": "ABSOLUTE_OUTSIDE", "var_name": "ABSOLUTE_OUTSIDE"}, {"original_string": "static File RELATIVE_OUTSIDE;", "modifier": "static", "type": "File", "declarator": "RELATIVE_OUTSIDE", "var_name": "RELATIVE_OUTSIDE"}, {"original_string": "static File[] PATHS;", "modifier": "static", "type": "File[]", "declarator": "PATHS", "var_name": "PATHS"}], "file": "utilities/src/test/java/ec/tstoolkit/utilities/Files2Test.java"}, "test_case": {"identifier": "testAcceptByExtension", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAcceptByExtension() {\n        assertTrue(Files2.acceptByLowerCaseExtension(new File(\"hello.xml\"), \"xml\"));\n        assertTrue(Files2.acceptByLowerCaseExtension(new File(\"hello.xml\"), \"jpg\", \"xml\"));\n        assertTrue(Files2.acceptByLowerCaseExtension(new File(\"hello.xMl\"), \"xml\"));\n        assertFalse(Files2.acceptByLowerCaseExtension(new File(\"hello.xml\"), \"jpg\"));\n        assertFalse(Files2.acceptByLowerCaseExtension(new File(\"hello.xml\")));\n    }", "signature": "void testAcceptByExtension()", "full_signature": "@Test public void testAcceptByExtension()", "class_method_signature": "Files2Test.testAcceptByExtension()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "acceptByLowerCaseExtension", "assertTrue", "acceptByLowerCaseExtension", "assertTrue", "acceptByLowerCaseExtension", "assertFalse", "acceptByLowerCaseExtension", "assertFalse", "acceptByLowerCaseExtension"]}, "focal_class": {"identifier": "Files2", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Files2", "parameters": "()", "modifiers": "private", "return": "", "signature": " Files2()", "full_signature": "private  Files2()", "class_method_signature": "Files2.Files2()", "testcase": false, "constructor": true}, {"identifier": "fromPath", "parameters": "(String parent, String... path)", "modifiers": "public static", "return": "File", "signature": "File fromPath(String parent, String... path)", "full_signature": "public static File fromPath(String parent, String... path)", "class_method_signature": "Files2.fromPath(String parent, String... path)", "testcase": false, "constructor": false}, {"identifier": "isValidPath", "parameters": "(File file)", "modifiers": "@Deprecated public static", "return": "boolean", "signature": "boolean isValidPath(File file)", "full_signature": "@Deprecated public static boolean isValidPath(File file)", "class_method_signature": "Files2.isValidPath(File file)", "testcase": false, "constructor": false}, {"identifier": "getAbsoluteFile", "parameters": "(@NonNull File[] paths, @NonNull File file)", "modifiers": "@Nullable public static", "return": "File", "signature": "File getAbsoluteFile(@NonNull File[] paths, @NonNull File file)", "full_signature": "@Nullable public static File getAbsoluteFile(@NonNull File[] paths, @NonNull File file)", "class_method_signature": "Files2.getAbsoluteFile(@NonNull File[] paths, @NonNull File file)", "testcase": false, "constructor": false}, {"identifier": "getRelativeFile", "parameters": "(@NonNull File[] paths, @NonNull File file)", "modifiers": "@Nullable public static", "return": "File", "signature": "File getRelativeFile(@NonNull File[] paths, @NonNull File file)", "full_signature": "@Nullable public static File getRelativeFile(@NonNull File[] paths, @NonNull File file)", "class_method_signature": "Files2.getRelativeFile(@NonNull File[] paths, @NonNull File file)", "testcase": false, "constructor": false}, {"identifier": "acceptByLowerCaseExtension", "parameters": "(File pathname, String... lowerCaseExtensions)", "modifiers": "public static", "return": "boolean", "signature": "boolean acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "full_signature": "public static boolean acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "class_method_signature": "Files2.acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "testcase": false, "constructor": false}, {"identifier": "extractFile", "parameters": "(@NonNull String path)", "modifiers": "@Nullable public static", "return": "File", "signature": "File extractFile(@NonNull String path)", "full_signature": "@Nullable public static File extractFile(@NonNull String path)", "class_method_signature": "Files2.extractFile(@NonNull String path)", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/ec/tstoolkit/utilities/Files2.java"}, "focal_method": {"identifier": "acceptByLowerCaseExtension", "parameters": "(File pathname, String... lowerCaseExtensions)", "modifiers": "public static", "return": "boolean", "body": "public static boolean acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions) {\n        String ext = Files.getFileExtension(pathname.getName()).toLowerCase(Locale.ENGLISH);\n        for (String o : lowerCaseExtensions) {\n            if (ext.equals(o)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "full_signature": "public static boolean acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "class_method_signature": "Files2.acceptByLowerCaseExtension(File pathname, String... lowerCaseExtensions)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "getFileExtension", "getName", "equals"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}