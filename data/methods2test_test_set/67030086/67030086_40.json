{"test_class": {"identifier": "PactConsumerVersionExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "pact/consumer/core/src/test/java/org/arquillian/algeron/pact/consumer/core/util/PactConsumerVersionExtractorTest.java"}, "test_case": {"identifier": "should_extract_version_of_pact_from_manifest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_extract_version_of_pact_from_manifest() {\n        assertThat(PactConsumerVersionExtractor.fromClassPath()).startsWith(\"3.5\");\n    }", "signature": "void should_extract_version_of_pact_from_manifest()", "full_signature": "@Test public void should_extract_version_of_pact_from_manifest()", "class_method_signature": "PactConsumerVersionExtractorTest.should_extract_version_of_pact_from_manifest()", "testcase": true, "constructor": false, "invocations": ["startsWith", "assertThat", "fromClassPath"]}, "focal_class": {"identifier": "PactConsumerVersionExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(PactConsumerVersionExtractor.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(PactConsumerVersionExtractor.class.getName())", "var_name": "logger"}, {"original_string": "private static final String SELENIUM_VERSION = \"latest\";", "modifier": "private static final", "type": "String", "declarator": "SELENIUM_VERSION = \"latest\"", "var_name": "SELENIUM_VERSION"}], "methods": [{"identifier": "fromClassPath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String fromClassPath()", "full_signature": "public static String fromClassPath()", "class_method_signature": "PactConsumerVersionExtractor.fromClassPath()", "testcase": false, "constructor": false}], "file": "pact/consumer/core/src/main/java/org/arquillian/algeron/pact/consumer/core/util/PactConsumerVersionExtractor.java"}, "focal_method": {"identifier": "fromClassPath", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String fromClassPath() {\n        Set<String> versions = new HashSet<>();\n        try {\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            Enumeration<URL> manifests = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n\n            while (manifests.hasMoreElements()) {\n                URL manifestURL = manifests.nextElement();\n                try (InputStream is = manifestURL.openStream()) {\n                    Manifest manifest = new Manifest();\n                    manifest.read(is);\n\n                    final Attributes mainAttributes = manifest.getMainAttributes();\n                    final String implementationTitle = mainAttributes.getValue(\"Implementation-Title\");\n                    if (implementationTitle != null && implementationTitle.startsWith(\"pact-jvm-consumer\")) {\n                        if (implementationTitle != null && implementationTitle.startsWith(\"pact-jvm-consumer\")) {\n                            versions.add(mainAttributes.getValue(\"Implementation-Version\"));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING,\n                \"Exception {0} occurred while resolving selenium version and latest image is going to be used.\",\n                e.getMessage());\n            return SELENIUM_VERSION;\n        }\n\n        if (versions.isEmpty()) {\n            logger.log(Level.INFO, \"No version of Selenium found in classpath. Using latest image.\");\n            return SELENIUM_VERSION;\n        }\n\n        String foundVersion = versions.iterator().next();\n        if (versions.size() > 1) {\n            logger.log(Level.WARNING, \"Multiple versions of Selenium found in classpath. Using the first one found {0}.\",\n                foundVersion);\n        }\n\n        return foundVersion;\n    }", "signature": "String fromClassPath()", "full_signature": "public static String fromClassPath()", "class_method_signature": "PactConsumerVersionExtractor.fromClassPath()", "testcase": false, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "getResources", "hasMoreElements", "nextElement", "openStream", "read", "getMainAttributes", "getValue", "startsWith", "startsWith", "add", "getValue", "log", "getMessage", "isEmpty", "log", "next", "iterator", "size", "log"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}