{"test_class": {"identifier": "TestSampleContinuousQueryObserverService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VerificationHost host;", "modifier": "private", "type": "VerificationHost", "declarator": "host", "var_name": "host"}, {"original_string": "private TestRequestSender sender;", "modifier": "private", "type": "TestRequestSender", "declarator": "sender", "var_name": "sender"}, {"original_string": "public int serviceCount = 10;", "modifier": "public", "type": "int", "declarator": "serviceCount = 10", "var_name": "serviceCount"}, {"original_string": "private Duration timeout = Duration.ofSeconds(5);", "modifier": "private", "type": "Duration", "declarator": "timeout = Duration.ofSeconds(5)", "var_name": "timeout"}], "file": "xenon-samples/src/test/java/com/vmware/xenon/services/samples/TestSampleContinuousQueryObserverService.java"}, "test_case": {"identifier": "testSampleContinuousQueryObserverService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSampleContinuousQueryObserverService() throws Throwable {\n        // create a new SampleContinuousQueryObserverService with\n        // notification counter set to 0\n        QueryObserverState queryObserverInitialState = new QueryObserverState();\n        queryObserverInitialState.notificationsCounter = 0;\n        Operation post = Operation.createPost(UriUtils.buildUri(this.host.getUri(),\n                SampleContinuousQueryObserverService.FACTORY_LINK))\n                .setBody(queryObserverInitialState)\n                .setReferer(this.host.getUri());\n        queryObserverInitialState = this.sender.sendAndWait(post, QueryObserverState.class);\n        // remember the link to the SampleContinuousQueryObserverService we just created\n        final String queryObserverSelfLink = queryObserverInitialState.documentSelfLink;\n\n        // wait for filter to be active in the index service, which happens asynchronously\n        // in relation to query task creation, before issuing updates.\n        waitFor(this.timeout, () -> {\n            ServiceStats indexStats = this.host.getServiceState(null, ServiceStats.class,\n                    UriUtils.buildStatsUri(this.host.getDocumentIndexServiceUri()));\n            ServiceStat activeQueryStat = indexStats.entries.get(\n                    LuceneDocumentIndexService.STAT_NAME_ACTIVE_QUERY_FILTERS\n                            + ServiceStats.STAT_NAME_SUFFIX_PER_DAY);\n            if (activeQueryStat == null || activeQueryStat.latestValue < 1.0) {\n                return false;\n            }\n            return true;\n        });\n\n        // create serviceCount instances of SamplePreviousEchoService\n        // and save the links to these services\n        List<String> samplePreviousEchoServicesLinks = new ArrayList<>();\n        for (int i = 0; i < this.serviceCount; i++) {\n            EchoServiceState state = new EchoServiceState();\n            state.message = \"hello\";\n            post = Operation.createPost(UriUtils.buildUri(this.host.getUri(),\n                    SamplePreviousEchoService.FACTORY_LINK))\n                    .setBody(state)\n                    .setReferer(this.host.getUri());\n            state = this.sender.sendAndWait(post, EchoServiceState.class);\n            samplePreviousEchoServicesLinks.add(state.documentSelfLink);\n        }\n\n        // get the QueryObserverState and make sure that it was notified\n        // for the new SamplePreviousEchoService that we created\n        // the notification count should equal to the serviceCount\n        waitFor(this.timeout, () -> {\n            Operation getQueryObserverState = Operation.createGet(\n                    UriUtils.buildUri(this.host.getUri(), queryObserverSelfLink))\n                    .setReferer(this.host.getUri());\n            QueryObserverState updatedQueryObserverState =\n                    this.sender.sendAndWait(getQueryObserverState, QueryObserverState.class);\n            this.host.log(\"notification count: %d\",\n                    updatedQueryObserverState.notificationsCounter);\n            return (this.serviceCount <= updatedQueryObserverState.notificationsCounter);\n        });\n\n        // update the state of all the SamplePreviousEchoService we created\n        final EchoServiceState updatedState = new EchoServiceState();\n        updatedState.message = \"hello world\";\n        TestContext ctx1 = new TestContext(samplePreviousEchoServicesLinks.size(), this.timeout);\n        samplePreviousEchoServicesLinks.forEach(selfLink -> {\n            Operation putOp = Operation.createPut(UriUtils.buildUri(this.host.getUri(), selfLink))\n                    .setBody(updatedState)\n                    .setReferer(this.host.getUri())\n                    .setCompletion(ctx1.getCompletion());\n            this.sender.sendRequest(putOp);\n        });\n        ctx1.await();\n\n        // get the QueryObserverState and make sure that it was notified\n        // for the updates to the SamplePreviousEchoService services\n        // the notification count should equal to serviceCount*2\n        // (serviceCount create operations + serviceCount put operations)\n        waitFor(this.timeout, () -> {\n            Operation getQueryObserverState = Operation.createGet(\n                    UriUtils.buildUri(this.host.getUri(), queryObserverSelfLink))\n                    .setReferer(this.host.getUri());\n            QueryObserverState updatedQueryObserverState =\n                    this.sender.sendAndWait(getQueryObserverState, QueryObserverState.class);\n            this.host.log(\"notification count: %d\",\n                    updatedQueryObserverState.notificationsCounter);\n            return (this.serviceCount * 2 <= updatedQueryObserverState.notificationsCounter);\n        });\n\n        // delete all the services\n        TestContext ctx = new TestContext(samplePreviousEchoServicesLinks.size(), this.timeout);\n        samplePreviousEchoServicesLinks.forEach(selfLink -> {\n            Operation delete = Operation\n                    .createDelete(UriUtils.buildUri(this.host.getUri(), selfLink))\n                    .setReferer(this.host.getUri()).setCompletion(ctx.getCompletion());\n            this.sender.sendRequest(delete);\n        });\n        ctx.await();\n\n        /// get the QueryObserverState and make sure that it was notified\n        // for the deletes to the SamplePreviousEchoService services\n        // the notification count should equal to serviceCount*3\n        // (serviceCount create operations + serviceCount put operations +\n        //  serviceCount delete operations)\n        waitFor(this.timeout, () -> {\n            Operation getQueryObserverState = Operation.createGet(\n                    UriUtils.buildUri(this.host.getUri(), queryObserverSelfLink))\n                    .setReferer(this.host.getUri());\n            QueryObserverState updatedQueryObserverState =\n                    this.sender.sendAndWait(getQueryObserverState, QueryObserverState.class);\n            this.host.log(\"notification count: %d\",\n                    updatedQueryObserverState.notificationsCounter);\n            return (this.serviceCount * 3 <= updatedQueryObserverState.notificationsCounter);\n        });\n    }", "signature": "void testSampleContinuousQueryObserverService()", "full_signature": "@Test public void testSampleContinuousQueryObserverService()", "class_method_signature": "TestSampleContinuousQueryObserverService.testSampleContinuousQueryObserverService()", "testcase": true, "constructor": false, "invocations": ["setReferer", "setBody", "createPost", "buildUri", "getUri", "getUri", "sendAndWait", "waitFor", "getServiceState", "buildStatsUri", "getDocumentIndexServiceUri", "get", "setReferer", "setBody", "createPost", "buildUri", "getUri", "getUri", "sendAndWait", "add", "waitFor", "setReferer", "createGet", "buildUri", "getUri", "getUri", "sendAndWait", "log", "size", "forEach", "setCompletion", "setReferer", "setBody", "createPut", "buildUri", "getUri", "getUri", "getCompletion", "sendRequest", "await", "waitFor", "setReferer", "createGet", "buildUri", "getUri", "getUri", "sendAndWait", "log", "size", "forEach", "setCompletion", "setReferer", "createDelete", "buildUri", "getUri", "getUri", "getCompletion", "sendRequest", "await", "waitFor", "setReferer", "createGet", "buildUri", "getUri", "getUri", "sendAndWait", "log"]}, "focal_class": {"identifier": "SampleContinuousQueryObserverService", "superclass": "extends StatefulService", "interfaces": "", "fields": [{"original_string": "public static final String FACTORY_LINK = ServiceUriPaths.CORE + \"/continuousQueryObserverExample\";", "modifier": "public static final", "type": "String", "declarator": "FACTORY_LINK = ServiceUriPaths.CORE + \"/continuousQueryObserverExample\"", "var_name": "FACTORY_LINK"}], "methods": [{"identifier": "SampleContinuousQueryObserverService", "parameters": "()", "modifiers": "public", "return": "", "signature": " SampleContinuousQueryObserverService()", "full_signature": "public  SampleContinuousQueryObserverService()", "class_method_signature": "SampleContinuousQueryObserverService.SampleContinuousQueryObserverService()", "testcase": false, "constructor": true}, {"identifier": "handleStart", "parameters": "(Operation startPost)", "modifiers": "@Override public", "return": "void", "signature": "void handleStart(Operation startPost)", "full_signature": "@Override public void handleStart(Operation startPost)", "class_method_signature": "SampleContinuousQueryObserverService.handleStart(Operation startPost)", "testcase": false, "constructor": false}, {"identifier": "handlePatch", "parameters": "(Operation patch)", "modifiers": "@Override public", "return": "void", "signature": "void handlePatch(Operation patch)", "full_signature": "@Override public void handlePatch(Operation patch)", "class_method_signature": "SampleContinuousQueryObserverService.handlePatch(Operation patch)", "testcase": false, "constructor": false}], "file": "xenon-samples/src/main/java/com/vmware/xenon/services/samples/SampleContinuousQueryObserverService.java"}, "focal_method": {"identifier": "SampleContinuousQueryObserverService", "parameters": "()", "modifiers": "public", "return": "", "body": "public SampleContinuousQueryObserverService() {\n        super(QueryObserverState.class);\n        toggleOption(ServiceOption.INSTRUMENTATION, true);\n        toggleOption(ServiceOption.PERSISTENCE, true);\n    }", "signature": " SampleContinuousQueryObserverService()", "full_signature": "public  SampleContinuousQueryObserverService()", "class_method_signature": "SampleContinuousQueryObserverService.SampleContinuousQueryObserverService()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}