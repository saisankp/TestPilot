{"test_class": {"identifier": "TestDataStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [{"original_string": "private static final String XML;", "modifier": "private static final", "type": "String", "declarator": "XML", "var_name": "XML"}, {"original_string": "private URI uri;", "modifier": "private", "type": "URI", "declarator": "uri", "var_name": "uri"}, {"original_string": "private JVoiceXmlDocumentServer server;", "modifier": "private", "type": "JVoiceXmlDocumentServer", "declarator": "server", "var_name": "server"}], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestDataStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws JVoiceXMLEvent, Exception {\n        final VoiceXmlDocument doc = createDocument();\n        final Vxml vxml = doc.getVxml();\n        final Var var = vxml.appendChild(Var.class);\n        final String name = \"quote\";\n        var.setName(name);\n        final Block block = createBlock(doc);\n        final Data data = block.appendChild(Data.class);\n        data.setSrc(uri);\n        data.setName(name);\n\n        final DataStrategy strategy = new DataStrategy();\n        executeTagStrategy(data, strategy);\n\n        final DataModel model = getDataModel();\n        Mockito.verify(model).updateVariable(Mockito.eq(name),\n                Mockito.isA(Document.class));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestDataStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createDocument", "getVxml", "appendChild", "setName", "createBlock", "appendChild", "setSrc", "setName", "executeTagStrategy", "getDataModel", "updateVariable", "verify", "eq", "isA"]}, "focal_class": {"identifier": "DataStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(DataStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(DataStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final Collection<String> EVAL_ATTRIBUTES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "EVAL_ATTRIBUTES", "var_name": "EVAL_ATTRIBUTES"}, {"original_string": "private URI src;", "modifier": "private", "type": "URI", "declarator": "src", "var_name": "src"}, {"original_string": "private TokenList namelist;", "modifier": "private", "type": "TokenList", "declarator": "namelist", "var_name": "namelist"}, {"original_string": "private RequestMethod method;", "modifier": "private", "type": "RequestMethod", "declarator": "method", "var_name": "method"}], "methods": [{"identifier": "DataStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " DataStrategy()", "full_signature": "  DataStrategy()", "class_method_signature": "DataStrategy.DataStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "DataStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "void", "signature": "void validateAttributes(final DataModel model)", "full_signature": "@Override public void validateAttributes(final DataModel model)", "class_method_signature": "DataStrategy.validateAttributes(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "@Override public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "DataStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "appendVariables", "parameters": "(final VoiceXmlInterpreterContext context,\n            final DocumentDescriptor descriptor)", "modifiers": "private", "return": "void", "signature": "void appendVariables(final VoiceXmlInterpreterContext context,\n            final DocumentDescriptor descriptor)", "full_signature": "private void appendVariables(final VoiceXmlInterpreterContext context,\n            final DocumentDescriptor descriptor)", "class_method_signature": "DataStrategy.appendVariables(final VoiceXmlInterpreterContext context,\n            final DocumentDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "getFetchAttributes", "parameters": "()", "modifiers": "private", "return": "FetchAttributes", "signature": "FetchAttributes getFetchAttributes()", "full_signature": "private FetchAttributes getFetchAttributes()", "class_method_signature": "DataStrategy.getFetchAttributes()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/DataStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        final DocumentServer server = context.getDocumentServer();\n        final Session session = context.getSession();\n\n        final Application application = context.getApplication();\n        final URI uri;\n        if (application == null) {\n            uri = src;\n        } else {\n            uri = application.resolve(src);\n        }\n        LOGGER.info(\"obtaining data from '\" + uri + \"'\");\n        final DocumentDescriptor descriptor = new DocumentDescriptor(uri,\n                method);\n        try {\n            appendVariables(context, descriptor);\n            final FetchAttributes attributes = getFetchAttributes();\n            descriptor.setAttributes(attributes);\n            final String sessionId = session.getSessionId();\n            final Document document = (Document) server.getObject(sessionId,\n                    descriptor, DocumentServer.TEXT_XML);\n            final String name = (String) getAttribute(Data.ATTRIBUTE_NAME);\n            if (name == null) {\n                return;\n            }\n            final DataModel model = context.getDataModel();\n            model.updateVariable(name, document);\n        } catch (BadFetchError e) {\n            throw new BadFetchError(\"error reading data from '\" + uri + \"': \"\n                    + e.getMessage(), e);\n        }\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "@Override public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "DataStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["getDocumentServer", "getSession", "getApplication", "resolve", "info", "appendVariables", "getFetchAttributes", "setAttributes", "getSessionId", "getObject", "getAttribute", "getDataModel", "updateVariable", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}