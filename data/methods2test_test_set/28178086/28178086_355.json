{"test_class": {"identifier": "DiscreteModelTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/eco/discrete/DiscreteModelTest.java"}, "test_case": {"identifier": "demoSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void demoSomeMethod() {\n        int n=10000;\n        int[] y=new int[n];\n        for (int i=0; i<y.length; ++i){\n            y[i]=i<n/2 ? 0 :1;\n        }\n        \n        Matrix M =new Matrix(n, 100);\n        M.randomize();\n        M.add(-.5);\n        M.column(0).set(1);\n        \n        DiscreteModel model=new DiscreteModel(new Probit());\n        //LbfgsMinimizer min=new LbfgsMinimizer();\n        //min.setMemoryLength(3);\n        //model.setMinimizer(min);\n        DiscreteModelEvaluation rslt = model.process(y, M);\n        IReadDataBlock parameters = rslt.getParameters();\n        System.out.println(parameters);\n        System.out.println(new DataBlock(rslt.gradient()));\n        model=new DiscreteModel(new Logit());\n        rslt = model.process(y, M);\n        parameters = rslt.getParameters();\n        System.out.println(parameters);\n        System.out.println(new DataBlock(rslt.gradient()));\n    }", "signature": "void demoSomeMethod()", "full_signature": "@Test public void demoSomeMethod()", "class_method_signature": "DiscreteModelTest.demoSomeMethod()", "testcase": true, "constructor": false, "invocations": ["randomize", "add", "set", "column", "process", "getParameters", "println", "println", "gradient", "process", "getParameters", "println", "println", "gradient"]}, "focal_class": {"identifier": "DiscreteModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int[] m_y;", "modifier": "private", "type": "int[]", "declarator": "m_y", "var_name": "m_y"}, {"original_string": "private Matrix m_x;", "modifier": "private", "type": "Matrix", "declarator": "m_x", "var_name": "m_x"}, {"original_string": "private final ICumulativeDistributionFunction m_fn;", "modifier": "private final", "type": "ICumulativeDistributionFunction", "declarator": "m_fn", "var_name": "m_fn"}, {"original_string": "private IFunctionMinimizer minimizer = new LbfgsMinimizer();", "modifier": "private", "type": "IFunctionMinimizer", "declarator": "minimizer = new LbfgsMinimizer()", "var_name": "minimizer"}], "methods": [{"identifier": "DiscreteModel", "parameters": "(ICumulativeDistributionFunction fn)", "modifiers": "public", "return": "", "signature": " DiscreteModel(ICumulativeDistributionFunction fn)", "full_signature": "public  DiscreteModel(ICumulativeDistributionFunction fn)", "class_method_signature": "DiscreteModel.DiscreteModel(ICumulativeDistributionFunction fn)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(int[] y, Matrix X)", "modifiers": "public", "return": "DiscreteModelEvaluation", "signature": "DiscreteModelEvaluation process(int[] y, Matrix X)", "full_signature": "public DiscreteModelEvaluation process(int[] y, Matrix X)", "class_method_signature": "DiscreteModel.process(int[] y, Matrix X)", "testcase": false, "constructor": false}, {"identifier": "probabilities", "parameters": "(DataBlock b)", "modifiers": "public", "return": "double[]", "signature": "double[] probabilities(DataBlock b)", "full_signature": "public double[] probabilities(DataBlock b)", "class_method_signature": "DiscreteModel.probabilities(DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "loglikelihood", "parameters": "(DataBlock b)", "modifiers": "public", "return": "double", "signature": "double loglikelihood(DataBlock b)", "full_signature": "public double loglikelihood(DataBlock b)", "class_method_signature": "DiscreteModel.loglikelihood(DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeDistributionFunction", "parameters": "()", "modifiers": "public", "return": "ICumulativeDistributionFunction", "signature": "ICumulativeDistributionFunction getCumulativeDistributionFunction()", "full_signature": "public ICumulativeDistributionFunction getCumulativeDistributionFunction()", "class_method_signature": "DiscreteModel.getCumulativeDistributionFunction()", "testcase": false, "constructor": false}, {"identifier": "dloglikelihood", "parameters": "(DataBlock b, int i)", "modifiers": "public", "return": "double", "signature": "double dloglikelihood(DataBlock b, int i)", "full_signature": "public double dloglikelihood(DataBlock b, int i)", "class_method_signature": "DiscreteModel.dloglikelihood(DataBlock b, int i)", "testcase": false, "constructor": false}, {"identifier": "loglikelihoodGradient", "parameters": "(DataBlock b)", "modifiers": "public", "return": "double[]", "signature": "double[] loglikelihoodGradient(DataBlock b)", "full_signature": "public double[] loglikelihoodGradient(DataBlock b)", "class_method_signature": "DiscreteModel.loglikelihoodGradient(DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "logLikelihoodHessian", "parameters": "(DataBlock b)", "modifiers": "public", "return": "Matrix", "signature": "Matrix logLikelihoodHessian(DataBlock b)", "full_signature": "public Matrix logLikelihoodHessian(DataBlock b)", "class_method_signature": "DiscreteModel.logLikelihoodHessian(DataBlock b)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getY()", "full_signature": "public int[] getY()", "class_method_signature": "DiscreteModel.getY()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "Matrix", "signature": "Matrix getX()", "full_signature": "public Matrix getX()", "class_method_signature": "DiscreteModel.getX()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "protected", "return": "double[]", "signature": "double[] initialize()", "full_signature": "protected double[] initialize()", "class_method_signature": "DiscreteModel.initialize()", "testcase": false, "constructor": false}, {"identifier": "getMinimizer", "parameters": "()", "modifiers": "public", "return": "IFunctionMinimizer", "signature": "IFunctionMinimizer getMinimizer()", "full_signature": "public IFunctionMinimizer getMinimizer()", "class_method_signature": "DiscreteModel.getMinimizer()", "testcase": false, "constructor": false}, {"identifier": "setMinimizer", "parameters": "(IFunctionMinimizer minimizer)", "modifiers": "public", "return": "void", "signature": "void setMinimizer(IFunctionMinimizer minimizer)", "full_signature": "public void setMinimizer(IFunctionMinimizer minimizer)", "class_method_signature": "DiscreteModel.setMinimizer(IFunctionMinimizer minimizer)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/eco/discrete/DiscreteModel.java"}, "focal_method": {"identifier": "process", "parameters": "(int[] y, Matrix X)", "modifiers": "public", "return": "DiscreteModelEvaluation", "body": "public DiscreteModelEvaluation process(int[] y, Matrix X) {\n        m_y = y;\n        m_x = X;\n\n        // initialization \n        double[] c = initialize();\n        // create the function \n        llFn fn = new llFn(this);\n        // optimization...\n        if (getMinimizer().minimize(fn, new DiscreteModelEvaluation(this, new DataBlock(c)))) {\n            return (DiscreteModelEvaluation) getMinimizer().getResult();\n        } else {\n            return null;\n        }\n    }", "signature": "DiscreteModelEvaluation process(int[] y, Matrix X)", "full_signature": "public DiscreteModelEvaluation process(int[] y, Matrix X)", "class_method_signature": "DiscreteModel.process(int[] y, Matrix X)", "testcase": false, "constructor": false, "invocations": ["initialize", "minimize", "getMinimizer", "getResult", "getMinimizer"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}