{"test_class": {"identifier": "CheckedIteratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "utilities/src/test/java/ec/tstoolkit/utilities/CheckedIteratorTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n        CheckedIterator<String, RuntimeException> iterator;\n\n        iterator = create(\"one\");\n        assertEquals(\"one\", iterator.get(0));\n\n        iterator = create(\"one\", \"two\");\n        assertEquals(\"two\", iterator.get(1));\n\n        iterator = create(\"one\", \"two\");\n        assertEquals(\"one\", iterator.get(0));\n        assertEquals(\"two\", iterator.get(0));\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "CheckedIteratorTest.testGet()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "get", "create", "assertEquals", "get", "create", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CheckedIterator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "hasNext", "parameters": "()", "modifiers": "abstract public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "abstract public boolean hasNext()", "class_method_signature": "CheckedIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Nullable abstract public", "return": "E", "signature": "E next()", "full_signature": "@Nullable abstract public E next()", "class_method_signature": "CheckedIterator.next()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(@Nullable E defaultValue)", "modifiers": "@Nullable public", "return": "E", "signature": "E next(@Nullable E defaultValue)", "full_signature": "@Nullable public E next(@Nullable E defaultValue)", "class_method_signature": "CheckedIterator.next(@Nullable E defaultValue)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int count()", "full_signature": "public int count()", "class_method_signature": "CheckedIterator.count()", "testcase": false, "constructor": false}, {"identifier": "copyInto", "parameters": "(@NonNull Collection<? super E> collection)", "modifiers": "public", "return": "boolean", "signature": "boolean copyInto(@NonNull Collection<? super E> collection)", "full_signature": "public boolean copyInto(@NonNull Collection<? super E> collection)", "class_method_signature": "CheckedIterator.copyInto(@NonNull Collection<? super E> collection)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "()", "modifiers": "@NonNull public", "return": "List<E>", "signature": "List<E> toList()", "full_signature": "@NonNull public List<E> toList()", "class_method_signature": "CheckedIterator.toList()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@NonNull Class<E> type)", "modifiers": "@NonNull public", "return": "E[]", "signature": "E[] toArray(@NonNull Class<E> type)", "full_signature": "@NonNull public E[] toArray(@NonNull Class<E> type)", "class_method_signature": "CheckedIterator.toArray(@NonNull Class<E> type)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(@NonNull Function<? super E, V> valueFunc)", "modifiers": "@NonNull public", "return": "Map<E, V>", "signature": "Map<E, V> toMap(@NonNull Function<? super E, V> valueFunc)", "full_signature": "@NonNull public Map<E, V> toMap(@NonNull Function<? super E, V> valueFunc)", "class_method_signature": "CheckedIterator.toMap(@NonNull Function<? super E, V> valueFunc)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(@NonNull Function<? super E, K> keyFunc, @NonNull Function<? super E, V> valueFunc)", "modifiers": "@NonNull public", "return": "Map<K, V>", "signature": "Map<K, V> toMap(@NonNull Function<? super E, K> keyFunc, @NonNull Function<? super E, V> valueFunc)", "full_signature": "@NonNull public Map<K, V> toMap(@NonNull Function<? super E, K> keyFunc, @NonNull Function<? super E, V> valueFunc)", "class_method_signature": "CheckedIterator.toMap(@NonNull Function<? super E, K> keyFunc, @NonNull Function<? super E, V> valueFunc)", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "()", "modifiers": "@Nullable public", "return": "E", "signature": "E getLast()", "full_signature": "@Nullable public E getLast()", "class_method_signature": "CheckedIterator.getLast()", "testcase": false, "constructor": false}, {"identifier": "getLast", "parameters": "(@Nullable E defaultValue)", "modifiers": "@Nullable public", "return": "E", "signature": "E getLast(@Nullable E defaultValue)", "full_signature": "@Nullable public E getLast(@Nullable E defaultValue)", "class_method_signature": "CheckedIterator.getLast(@Nullable E defaultValue)", "testcase": false, "constructor": false}, {"identifier": "advance", "parameters": "(int numberToAdvance)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int advance(int numberToAdvance)", "full_signature": "@VisibleForTesting int advance(int numberToAdvance)", "class_method_signature": "CheckedIterator.advance(int numberToAdvance)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int position)", "modifiers": "@Nullable public", "return": "E", "signature": "E get(int position)", "full_signature": "@Nullable public E get(int position)", "class_method_signature": "CheckedIterator.get(int position)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int position, @Nullable E defaultValue)", "modifiers": "@Nullable public", "return": "E", "signature": "E get(int position, @Nullable E defaultValue)", "full_signature": "@Nullable public E get(int position, @Nullable E defaultValue)", "class_method_signature": "CheckedIterator.get(int position, @Nullable E defaultValue)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(@NonNull Predicate<? super E> predicate)", "modifiers": "public", "return": "boolean", "signature": "boolean all(@NonNull Predicate<? super E> predicate)", "full_signature": "public boolean all(@NonNull Predicate<? super E> predicate)", "class_method_signature": "CheckedIterator.all(@NonNull Predicate<? super E> predicate)", "testcase": false, "constructor": false}, {"identifier": "any", "parameters": "(@NonNull Predicate<? super E> predicate)", "modifiers": "public", "return": "boolean", "signature": "boolean any(@NonNull Predicate<? super E> predicate)", "full_signature": "public boolean any(@NonNull Predicate<? super E> predicate)", "class_method_signature": "CheckedIterator.any(@NonNull Predicate<? super E> predicate)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(@NonNull Predicate<? super E> predicate)", "modifiers": "public", "return": "int", "signature": "int indexOf(@NonNull Predicate<? super E> predicate)", "full_signature": "public int indexOf(@NonNull Predicate<? super E> predicate)", "class_method_signature": "CheckedIterator.indexOf(@NonNull Predicate<? super E> predicate)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(@Nullable E element)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(@Nullable E element)", "full_signature": "public boolean contains(@Nullable E element)", "class_method_signature": "CheckedIterator.contains(@Nullable E element)", "testcase": false, "constructor": false}, {"identifier": "elementsEqual", "parameters": "(@NonNull CheckedIterator<E, T> that)", "modifiers": "public", "return": "boolean", "signature": "boolean elementsEqual(@NonNull CheckedIterator<E, T> that)", "full_signature": "public boolean elementsEqual(@NonNull CheckedIterator<E, T> that)", "class_method_signature": "CheckedIterator.elementsEqual(@NonNull CheckedIterator<E, T> that)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(@NonNull Predicate<? super E> predicate)", "modifiers": "@Nullable public", "return": "E", "signature": "E find(@NonNull Predicate<? super E> predicate)", "full_signature": "@Nullable public E find(@NonNull Predicate<? super E> predicate)", "class_method_signature": "CheckedIterator.find(@NonNull Predicate<? super E> predicate)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(@NonNull Predicate<? super E> predicate, @Nullable E defaultValue)", "modifiers": "@Nullable public", "return": "E", "signature": "E find(@NonNull Predicate<? super E> predicate, @Nullable E defaultValue)", "full_signature": "@Nullable public E find(@NonNull Predicate<? super E> predicate, @Nullable E defaultValue)", "class_method_signature": "CheckedIterator.find(@NonNull Predicate<? super E> predicate, @Nullable E defaultValue)", "testcase": false, "constructor": false}, {"identifier": "frequency", "parameters": "(@Nullable E element)", "modifiers": "public", "return": "int", "signature": "int frequency(@Nullable E element)", "full_signature": "public int frequency(@Nullable E element)", "class_method_signature": "CheckedIterator.frequency(@Nullable E element)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NonNull final Predicate<? super E> predicate)", "modifiers": "@NonNull public", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> filter(@NonNull final Predicate<? super E> predicate)", "full_signature": "@NonNull public CheckedIterator<E, T> filter(@NonNull final Predicate<? super E> predicate)", "class_method_signature": "CheckedIterator.filter(@NonNull final Predicate<? super E> predicate)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NonNull Class<? extends E> type)", "modifiers": "@NonNull public", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> filter(@NonNull Class<? extends E> type)", "full_signature": "@NonNull public CheckedIterator<E, T> filter(@NonNull Class<? extends E> type)", "class_method_signature": "CheckedIterator.filter(@NonNull Class<? extends E> type)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(final int skipSize)", "modifiers": "@NonNull public", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> skip(final int skipSize)", "full_signature": "@NonNull public CheckedIterator<E, T> skip(final int skipSize)", "class_method_signature": "CheckedIterator.skip(final int skipSize)", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(final int limitSize)", "modifiers": "@NonNull public", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> limit(final int limitSize)", "full_signature": "@NonNull public CheckedIterator<E, T> limit(final int limitSize)", "class_method_signature": "CheckedIterator.limit(final int limitSize)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(@NonNull final Function<? super E, ? extends NEW> function)", "modifiers": "@NonNull public", "return": "CheckedIterator<NEW, T>", "signature": "CheckedIterator<NEW, T> transform(@NonNull final Function<? super E, ? extends NEW> function)", "full_signature": "@NonNull public CheckedIterator<NEW, T> transform(@NonNull final Function<? super E, ? extends NEW> function)", "class_method_signature": "CheckedIterator.transform(@NonNull final Function<? super E, ? extends NEW> function)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(@NonNull CheckedIterator<E, T> input)", "modifiers": "@NonNull public", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> concat(@NonNull CheckedIterator<E, T> input)", "full_signature": "@NonNull public CheckedIterator<E, T> concat(@NonNull CheckedIterator<E, T> input)", "class_method_signature": "CheckedIterator.concat(@NonNull CheckedIterator<E, T> input)", "testcase": false, "constructor": false}, {"identifier": "emptyIterator", "parameters": "()", "modifiers": "@NonNull public static", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> emptyIterator()", "full_signature": "@NonNull public static CheckedIterator<E, T> emptyIterator()", "class_method_signature": "CheckedIterator.emptyIterator()", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(@NonNull CheckedIterator<E, T>... inputs)", "modifiers": "@NonNull private static", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> concat(@NonNull CheckedIterator<E, T>... inputs)", "full_signature": "@NonNull private static CheckedIterator<E, T> concat(@NonNull CheckedIterator<E, T>... inputs)", "class_method_signature": "CheckedIterator.concat(@NonNull CheckedIterator<E, T>... inputs)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(@NonNull final Iterator<CheckedIterator<E, T>> inputs)", "modifiers": "@NonNull private static", "return": "CheckedIterator<E, T>", "signature": "CheckedIterator<E, T> concat(@NonNull final Iterator<CheckedIterator<E, T>> inputs)", "full_signature": "@NonNull private static CheckedIterator<E, T> concat(@NonNull final Iterator<CheckedIterator<E, T>> inputs)", "class_method_signature": "CheckedIterator.concat(@NonNull final Iterator<CheckedIterator<E, T>> inputs)", "testcase": false, "constructor": false}, {"identifier": "fromIterator", "parameters": "(@NonNull final Iterator<X> iterator)", "modifiers": "@NonNull public static", "return": "CheckedIterator<X, RuntimeException>", "signature": "CheckedIterator<X, RuntimeException> fromIterator(@NonNull final Iterator<X> iterator)", "full_signature": "@NonNull public static CheckedIterator<X, RuntimeException> fromIterator(@NonNull final Iterator<X> iterator)", "class_method_signature": "CheckedIterator.fromIterator(@NonNull final Iterator<X> iterator)", "testcase": false, "constructor": false}, {"identifier": "fromBufferedReader", "parameters": "(@NonNull final BufferedReader reader)", "modifiers": "@NonNull public static", "return": "CheckedIterator<String, IOException>", "signature": "CheckedIterator<String, IOException> fromBufferedReader(@NonNull final BufferedReader reader)", "full_signature": "@NonNull public static CheckedIterator<String, IOException> fromBufferedReader(@NonNull final BufferedReader reader)", "class_method_signature": "CheckedIterator.fromBufferedReader(@NonNull final BufferedReader reader)", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/ec/tstoolkit/utilities/CheckedIterator.java"}, "focal_method": {"identifier": "get", "parameters": "(int position)", "modifiers": "@Nullable public", "return": "E", "body": "@Nullable\n    public E get(int position) throws T, IllegalArgumentException, NoSuchElementException {\n        advance(position);\n        return next();\n    }", "signature": "E get(int position)", "full_signature": "@Nullable public E get(int position)", "class_method_signature": "CheckedIterator.get(int position)", "testcase": false, "constructor": false, "invocations": ["advance", "next"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}