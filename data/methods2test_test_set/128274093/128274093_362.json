{"test_class": {"identifier": "MaybeFromCallableTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/maybe/MaybeFromCallableTest.java"}, "test_case": {"identifier": "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Exception {\n        Callable<String> func = mock(Callable.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.call()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    // It's okay, unsubscription causes Thread interruption\n\n                    // Restoring interruption status of the Thread\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Maybe<String> fromCallableObservable = Maybe.fromCallable(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromCallableObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        // Wait until func will be invoked\n        observerLatch.await();\n\n        // Unsubscribing before emission\n        outer.cancel();\n\n        // Emitting result\n        funcLatch.countDown();\n\n        // func must be invoked\n        verify(func).call();\n\n        // Observer must not be notified at all\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }", "signature": "void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission()", "class_method_signature": "MaybeFromCallableTest.shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission()", "testcase": true, "constructor": false, "invocations": ["mock", "thenAnswer", "when", "call", "countDown", "await", "interrupt", "currentThread", "fromCallable", "mockObserver", "subscribe", "subscribeOn", "computation", "await", "cancel", "countDown", "call", "verify", "onSubscribe", "verify", "any", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MaybeFromCallable", "superclass": "extends Maybe<T>", "interfaces": "implements Callable<T>", "fields": [{"original_string": "final Callable<? extends T> callable;", "modifier": "final", "type": "Callable<? extends T>", "declarator": "callable", "var_name": "callable"}], "methods": [{"identifier": "MaybeFromCallable", "parameters": "(Callable<? extends T> callable)", "modifiers": "public", "return": "", "signature": " MaybeFromCallable(Callable<? extends T> callable)", "full_signature": "public  MaybeFromCallable(Callable<? extends T> callable)", "class_method_signature": "MaybeFromCallable.MaybeFromCallable(Callable<? extends T> callable)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(MaybeObserver<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(MaybeObserver<? super T> observer)", "full_signature": "@Override protected void subscribeActual(MaybeObserver<? super T> observer)", "class_method_signature": "MaybeFromCallable.subscribeActual(MaybeObserver<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T call()", "full_signature": "@Override public T call()", "class_method_signature": "MaybeFromCallable.call()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/maybe/MaybeFromCallable.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T call() throws Exception {\n        return callable.call();\n    }", "signature": "T call()", "full_signature": "@Override public T call()", "class_method_signature": "MaybeFromCallable.call()", "testcase": false, "constructor": false, "invocations": ["call"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}