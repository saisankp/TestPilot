{"test_class": {"identifier": "AbstractObjectConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@InjectMocks\n    private final AbstractObjectConverter<Object[]> underTest = new AbstractObjectConverter<Object[]>() {\n        @Override\n        public Object[] convert(Object[] data, boolean isVarargs, Class<?>[] parameterTypes) {\n            return null;\n        }\n    };", "modifier": "@InjectMocks\n    private final", "type": "AbstractObjectConverter<Object[]>", "declarator": "underTest = new AbstractObjectConverter<Object[]>() {\n        @Override\n        public Object[] convert(Object[] data, boolean isVarargs, Class<?>[] parameterTypes) {\n            return null;\n        }\n    }", "var_name": "underTest"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/convert/AbstractObjectConverterTest.java"}, "test_case": {"identifier": "testCheckIfArgumentsMatchParameterTypesShouldNotThrowExceptionIfArgumentsIsAreAssignableToParameterTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckIfArgumentsMatchParameterTypesShouldNotThrowExceptionIfArgumentsIsAreAssignableToParameterTypes() {\n        // Given:\n        Object[] arguments = new Object[] { Long.valueOf(1l), Integer.valueOf(2) };\n        Class<?>[] parameterTypes = new Class<?>[] { Number.class, Number.class };\n\n        // When:\n        underTest.checkIfArgumentsMatchParameterTypes(arguments, parameterTypes);\n\n        // Then: no exception\n    }", "signature": "void testCheckIfArgumentsMatchParameterTypesShouldNotThrowExceptionIfArgumentsIsAreAssignableToParameterTypes()", "full_signature": "@Test public void testCheckIfArgumentsMatchParameterTypesShouldNotThrowExceptionIfArgumentsIsAreAssignableToParameterTypes()", "class_method_signature": "AbstractObjectConverterTest.testCheckIfArgumentsMatchParameterTypesShouldNotThrowExceptionIfArgumentsIsAreAssignableToParameterTypes()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "checkIfArgumentsMatchParameterTypes"]}, "focal_class": {"identifier": "AbstractObjectConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(V data, boolean isVarargs, Class<?>[] parameterTypes)", "modifiers": "public abstract", "return": "Object[]", "signature": "Object[] convert(V data, boolean isVarargs, Class<?>[] parameterTypes)", "full_signature": "public abstract Object[] convert(V data, boolean isVarargs, Class<?>[] parameterTypes)", "class_method_signature": "AbstractObjectConverter.convert(V data, boolean isVarargs, Class<?>[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "checkIfArgumentsMatchParameterTypes", "parameters": "(Object[] arguments, Class<?>[] parameterTypes)", "modifiers": "protected", "return": "void", "signature": "void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "full_signature": "protected void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "class_method_signature": "AbstractObjectConverter.checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "testcase": false, "constructor": false}, {"identifier": "isWrappedInstance", "parameters": "(Class<?> clazz, Object object)", "modifiers": "private", "return": "boolean", "signature": "boolean isWrappedInstance(Class<?> clazz, Object object)", "full_signature": "private boolean isWrappedInstance(Class<?> clazz, Object object)", "class_method_signature": "AbstractObjectConverter.isWrappedInstance(Class<?> clazz, Object object)", "testcase": false, "constructor": false}, {"identifier": "isWideningConversion", "parameters": "(Class<?> clazz, Object object)", "modifiers": "private", "return": "boolean", "signature": "boolean isWideningConversion(Class<?> clazz, Object object)", "full_signature": "private boolean isWideningConversion(Class<?> clazz, Object object)", "class_method_signature": "AbstractObjectConverter.isWideningConversion(Class<?> clazz, Object object)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/convert/AbstractObjectConverter.java"}, "focal_method": {"identifier": "checkIfArgumentsMatchParameterTypes", "parameters": "(Object[] arguments, Class<?>[] parameterTypes)", "modifiers": "protected", "return": "void", "body": "protected void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes) {\n        checkNotNull(arguments, \"'arguments' must not be null\");\n        checkNotNull(parameterTypes, \"'testMethod' must not be null\");\n        checkArgument(parameterTypes.length >= arguments.length,\n                \"Expected at most %d arguments for test method but got %d.\", parameterTypes.length, arguments.length);\n\n        for (int idx = 0; idx < arguments.length; idx++) {\n            Object object = arguments[idx];\n            if (object != null) {\n                Class<?> paramType = parameterTypes[idx];\n                if (!paramType.isInstance(object) && !isWrappedInstance(paramType, object)\n                        && !isWideningConversion(paramType, object)) {\n                    throw new IllegalArgumentException(\n                            String.format(\"Parameter number %d is of type '%s' but argument given is '%s' of type '%s'\",\n                                    idx, paramType.getSimpleName(), object, object.getClass().getSimpleName()));\n                }\n            }\n        }\n    }", "signature": "void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "full_signature": "protected void checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "class_method_signature": "AbstractObjectConverter.checkIfArgumentsMatchParameterTypes(Object[] arguments, Class<?>[] parameterTypes)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkArgument", "isInstance", "isWrappedInstance", "isWideningConversion", "format", "getSimpleName", "getSimpleName", "getClass"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}