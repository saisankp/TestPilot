{"test_class": {"identifier": "PolynomialExpansionMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/dataproc/vector/PolynomialExpansionMapperTest.java"}, "test_case": {"identifier": "testGetPolySize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPolySize() {\n\t\tint res1 = PolynomialExpansionMapper.getPolySize(4, 4);\n\t\tint res2 = PolynomialExpansionMapper.getPolySize(65, 2);\n\t\tassertEquals(res1, 70);\n\t\tassertEquals(res2, 2211);\n\t}", "signature": "void testGetPolySize()", "full_signature": "@Test public void testGetPolySize()", "class_method_signature": "PolynomialExpansionMapperTest.testGetPolySize()", "testcase": true, "constructor": false, "invocations": ["getPolySize", "getPolySize", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "PolynomialExpansionMapper", "superclass": "extends SISOMapper", "interfaces": "", "fields": [{"original_string": "private int degree;", "modifier": "private", "type": "int", "declarator": "degree", "var_name": "degree"}, {"original_string": "private static final int CONSTANT = 61;", "modifier": "private static final", "type": "int", "declarator": "CONSTANT = 61", "var_name": "CONSTANT"}], "methods": [{"identifier": "PolynomialExpansionMapper", "parameters": "(TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " PolynomialExpansionMapper(TableSchema dataSchema, Params params)", "full_signature": "public  PolynomialExpansionMapper(TableSchema dataSchema, Params params)", "class_method_signature": "PolynomialExpansionMapper.PolynomialExpansionMapper(TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "getPolySize", "parameters": "(int num, int degree)", "modifiers": "@VisibleForTesting static", "return": "int", "signature": "int getPolySize(int num, int degree)", "full_signature": "@VisibleForTesting static int getPolySize(int num, int degree)", "class_method_signature": "PolynomialExpansionMapper.getPolySize(int num, int degree)", "testcase": false, "constructor": false}, {"identifier": "initOutputColType", "parameters": "()", "modifiers": "@Override protected", "return": "TypeInformation", "signature": "TypeInformation initOutputColType()", "full_signature": "@Override protected TypeInformation initOutputColType()", "class_method_signature": "PolynomialExpansionMapper.initOutputColType()", "testcase": false, "constructor": false}, {"identifier": "mapColumn", "parameters": "(Object input)", "modifiers": "@Override protected", "return": "Object", "signature": "Object mapColumn(Object input)", "full_signature": "@Override protected Object mapColumn(Object input)", "class_method_signature": "PolynomialExpansionMapper.mapColumn(Object input)", "testcase": false, "constructor": false}, {"identifier": "densePE", "parameters": "(DenseVector vec, int degree)", "modifiers": "private", "return": "DenseVector", "signature": "DenseVector densePE(DenseVector vec, int degree)", "full_signature": "private DenseVector densePE(DenseVector vec, int degree)", "class_method_signature": "PolynomialExpansionMapper.densePE(DenseVector vec, int degree)", "testcase": false, "constructor": false}, {"identifier": "sparsePE", "parameters": "(SparseVector vec, int degree)", "modifiers": "private", "return": "SparseVector", "signature": "SparseVector sparsePE(SparseVector vec, int degree)", "full_signature": "private SparseVector sparsePE(SparseVector vec, int degree)", "class_method_signature": "PolynomialExpansionMapper.sparsePE(SparseVector vec, int degree)", "testcase": false, "constructor": false}, {"identifier": "expandDense", "parameters": "(double[] values, int lastIdx, int degree, double factor, double[] retValues,\n\t\t\t\t\t\t\tint curPolyIdx)", "modifiers": "private", "return": "int", "signature": "int expandDense(double[] values, int lastIdx, int degree, double factor, double[] retValues,\n\t\t\t\t\t\t\tint curPolyIdx)", "full_signature": "private int expandDense(double[] values, int lastIdx, int degree, double factor, double[] retValues,\n\t\t\t\t\t\t\tint curPolyIdx)", "class_method_signature": "PolynomialExpansionMapper.expandDense(double[] values, int lastIdx, int degree, double factor, double[] retValues,\n\t\t\t\t\t\t\tint curPolyIdx)", "testcase": false, "constructor": false}, {"identifier": "expandSparse", "parameters": "(int[] indices, double[] values, int lastIdx, int lastFeatureIdx, int degree,\n\t\t\t\t\t\t\t double factor, Tuple2 <Integer, int[]> polyIndices,\n\t\t\t\t\t\t\t Tuple2 <Integer, double[]> polyValues, int curPolyIdx)", "modifiers": "private", "return": "int", "signature": "int expandSparse(int[] indices, double[] values, int lastIdx, int lastFeatureIdx, int degree,\n\t\t\t\t\t\t\t double factor, Tuple2 <Integer, int[]> polyIndices,\n\t\t\t\t\t\t\t Tuple2 <Integer, double[]> polyValues, int curPolyIdx)", "full_signature": "private int expandSparse(int[] indices, double[] values, int lastIdx, int lastFeatureIdx, int degree,\n\t\t\t\t\t\t\t double factor, Tuple2 <Integer, int[]> polyIndices,\n\t\t\t\t\t\t\t Tuple2 <Integer, double[]> polyValues, int curPolyIdx)", "class_method_signature": "PolynomialExpansionMapper.expandSparse(int[] indices, double[] values, int lastIdx, int lastFeatureIdx, int degree,\n\t\t\t\t\t\t\t double factor, Tuple2 <Integer, int[]> polyIndices,\n\t\t\t\t\t\t\t Tuple2 <Integer, double[]> polyValues, int curPolyIdx)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/dataproc/vector/PolynomialExpansionMapper.java"}, "focal_method": {"identifier": "getPolySize", "parameters": "(int num, int degree)", "modifiers": "@VisibleForTesting static", "return": "int", "body": "@VisibleForTesting\n\tstatic int getPolySize(int num, int degree) {\n\t\tif (num == 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (num == 1 || degree == 1) {\n\t\t\treturn num + degree;\n\t\t}\n\t\tif (degree > num) {\n\t\t\treturn getPolySize(degree, num);\n\t\t}\n\t\tlong res = 1;\n\t\tint i = num + 1;\n\t\tint j;\n\t\tif (num + degree < CONSTANT) {\n\t\t\tfor (j = 1; j <= degree; ++j) {\n\t\t\t\tres = res * i / j;\n\t\t\t\t++i;\n\t\t\t}\n\t\t} else {\n\t\t\tint depth;\n\t\t\tfor (j = 1; j <= degree; ++j) {\n\t\t\t\tdepth = ArithmeticUtils.gcd(i, j);\n\t\t\t\tres = ArithmeticUtils.mulAndCheck(res / (j / depth), i / depth);\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\tif (res > Integer.MAX_VALUE) {\n\t\t\tthrow new IllegalArgumentException(\"The expended polynomial size is too large.\");\n\t\t}\n\t\treturn (int) res;\n\n\t}", "signature": "int getPolySize(int num, int degree)", "full_signature": "@VisibleForTesting static int getPolySize(int num, int degree)", "class_method_signature": "PolynomialExpansionMapper.getPolySize(int num, int degree)", "testcase": false, "constructor": false, "invocations": ["getPolySize", "gcd", "mulAndCheck"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}