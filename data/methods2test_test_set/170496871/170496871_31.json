{"test_class": {"identifier": "ImmutableIntSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/internal/util/collection/ImmutableIntSetTest.java"}, "test_case": {"identifier": "contains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contains() {\n        IntSet immutableSet = ImmutableIntSet.wrap(new BitSetIntSet(2, Arrays.asList(2)));\n\n        assertThat(immutableSet.size(), is(1));\n        assertFalse(immutableSet.isEmpty());\n\n        assertTrue(immutableSet.contains(2));\n        assertFalse(immutableSet.contains(1));\n    }", "signature": "void contains()", "full_signature": "@Test public void contains()", "class_method_signature": "ImmutableIntSetTest.contains()", "testcase": true, "constructor": false, "invocations": ["wrap", "asList", "assertThat", "size", "is", "assertFalse", "isEmpty", "assertTrue", "contains", "assertFalse", "contains"]}, "focal_class": {"identifier": "ImmutableIntSet", "superclass": "", "interfaces": "implements IntSet", "fields": [{"original_string": "private static final ImmutableIntSet EMPTY_SET = new ImmutableIntSet(new BitSetIntSet(1));", "modifier": "private static final", "type": "ImmutableIntSet", "declarator": "EMPTY_SET = new ImmutableIntSet(new BitSetIntSet(1))", "var_name": "EMPTY_SET"}, {"original_string": "private final Set<Integer> delegate;", "modifier": "private final", "type": "Set<Integer>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "wrap", "parameters": "(Set<Integer> delegate)", "modifiers": "public static", "return": "ImmutableIntSet", "signature": "ImmutableIntSet wrap(Set<Integer> delegate)", "full_signature": "public static ImmutableIntSet wrap(Set<Integer> delegate)", "class_method_signature": "ImmutableIntSet.wrap(Set<Integer> delegate)", "testcase": false, "constructor": false}, {"identifier": "emptySet", "parameters": "()", "modifiers": "public static", "return": "ImmutableIntSet", "signature": "ImmutableIntSet emptySet()", "full_signature": "public static ImmutableIntSet emptySet()", "class_method_signature": "ImmutableIntSet.emptySet()", "testcase": false, "constructor": false}, {"identifier": "ImmutableIntSet", "parameters": "(Set<Integer> delegate)", "modifiers": "public", "return": "", "signature": " ImmutableIntSet(Set<Integer> delegate)", "full_signature": "public  ImmutableIntSet(Set<Integer> delegate)", "class_method_signature": "ImmutableIntSet.ImmutableIntSet(Set<Integer> delegate)", "testcase": false, "constructor": true}, {"identifier": "contains", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int element)", "full_signature": "@Override public boolean contains(int element)", "class_method_signature": "ImmutableIntSet.contains(int element)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> coll)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> coll)", "full_signature": "@Override public boolean containsAll(Collection<?> coll)", "class_method_signature": "ImmutableIntSet.containsAll(Collection<?> coll)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ImmutableIntSet.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutableIntSet.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "ImmutableIntSet.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@NotNull @Override public Object[] toArray()", "class_method_signature": "ImmutableIntSet.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@NotNull T[] a)", "modifiers": "@NotNull @Override public", "return": "T[]", "signature": "T[] toArray(@NotNull T[] a)", "full_signature": "@NotNull @Override public T[] toArray(@NotNull T[] a)", "class_method_signature": "ImmutableIntSet.toArray(@NotNull T[] a)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] toIntArray()", "full_signature": "@Override public int[] toIntArray()", "class_method_signature": "ImmutableIntSet.toIntArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableIntSet.toString()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@NotNull @Override public Iterator<Integer> iterator()", "class_method_signature": "ImmutableIntSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(int element)", "full_signature": "@Override public boolean add(int element)", "class_method_signature": "ImmutableIntSet.add(int element)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(int element)", "full_signature": "@Override public boolean remove(int element)", "class_method_signature": "ImmutableIntSet.remove(int element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer integer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Integer integer)", "full_signature": "@Override public boolean add(Integer integer)", "class_method_signature": "ImmutableIntSet.add(Integer integer)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "ImmutableIntSet.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(@NotNull Collection<? extends Integer> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(@NotNull Collection<? extends Integer> c)", "full_signature": "@Override public boolean addAll(@NotNull Collection<? extends Integer> c)", "class_method_signature": "ImmutableIntSet.addAll(@NotNull Collection<? extends Integer> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(@NotNull Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(@NotNull Collection<?> c)", "full_signature": "@Override public boolean retainAll(@NotNull Collection<?> c)", "class_method_signature": "ImmutableIntSet.retainAll(@NotNull Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(@NotNull Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(@NotNull Collection<?> c)", "full_signature": "@Override public boolean removeAll(@NotNull Collection<?> c)", "class_method_signature": "ImmutableIntSet.removeAll(@NotNull Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ImmutableIntSet.clear()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(Consumer<? super Integer> act)", "modifiers": "@Override public", "return": "void", "signature": "void forEach(Consumer<? super Integer> act)", "full_signature": "@Override public void forEach(Consumer<? super Integer> act)", "class_method_signature": "ImmutableIntSet.forEach(Consumer<? super Integer> act)", "testcase": false, "constructor": false}, {"identifier": "removeIf", "parameters": "(Predicate<? super Integer> filter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeIf(Predicate<? super Integer> filter)", "full_signature": "@Override public boolean removeIf(Predicate<? super Integer> filter)", "class_method_signature": "ImmutableIntSet.removeIf(Predicate<? super Integer> filter)", "testcase": false, "constructor": false}, {"identifier": "spliterator", "parameters": "()", "modifiers": "@Override public", "return": "Spliterator<Integer>", "signature": "Spliterator<Integer> spliterator()", "full_signature": "@Override public Spliterator<Integer> spliterator()", "class_method_signature": "ImmutableIntSet.spliterator()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<Integer>", "signature": "Stream<Integer> stream()", "full_signature": "@Override public Stream<Integer> stream()", "class_method_signature": "ImmutableIntSet.stream()", "testcase": false, "constructor": false}, {"identifier": "parallelStream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<Integer>", "signature": "Stream<Integer> parallelStream()", "full_signature": "@Override public Stream<Integer> parallelStream()", "class_method_signature": "ImmutableIntSet.parallelStream()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/util/collection/ImmutableIntSet.java"}, "focal_method": {"identifier": "contains", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "body": "@Override public boolean contains(int element) {\n        if (delegate instanceof IntSet)\n            return ((IntSet)delegate).contains(element);\n        else\n            return delegate.contains(element);\n    }", "signature": "boolean contains(int element)", "full_signature": "@Override public boolean contains(int element)", "class_method_signature": "ImmutableIntSet.contains(int element)", "testcase": false, "constructor": false, "invocations": ["contains", "contains"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}