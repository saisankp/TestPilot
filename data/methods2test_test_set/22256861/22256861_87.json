{"test_class": {"identifier": "MissingElementsMergerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/MissingElementsMergerTest.java"}, "test_case": {"identifier": "mergeNodes_multipleGrids", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeNodes_multipleGrids() throws ParserConfigurationException, SAXException, IOException, PDUStitchingException {\n        List<Node> fromParents = new ArrayList<>();\n        fromParents.add(ManifestTestUtils.createNode(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                        \"<slstr:missingElements threshold=\\\"75.000000\\\">\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km stripe A\\\" view=\\\"Nadir\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km stripe B\\\" view=\\\"Nadir\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km TDI\\\" view=\\\"Nadir\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km stripe A\\\" view=\\\"Oblique\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km stripe B\\\" view=\\\"Oblique\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:globalInfo grid=\\\"0.5 km TDI\\\" view=\\\"Oblique\\\" value=\\\"4000\\\" over=\\\"4000\\\" percentage=\\\"100.000000\\\"/>\\n\" +\n                        \"  <slstr:elementMissing grid=\\\"0.5 km stripe A, 0.5 km stripe B, 0.5 km TDI\\\" view=\\\"Nadir\\\" startTime=\\\"2018-04-11T03:22:56.935232Z\\\" stopTime=\\\"2018-04-11T03:27:56.921087Z\\\" percentage=\\\"100.000000\\\">\\n\" +\n                        \"    <slstr:bandSet>S1, S2, S3, S4</slstr:bandSet>\\n\" +\n                        \"  </slstr:elementMissing>\\n\" +\n                        \"  <slstr:elementMissing grid=\\\"0.5 km stripe A, 0.5 km stripe B, 0.5 km TDI\\\" view=\\\"Oblique\\\" startTime=\\\"2018-04-11T03:22:56.929785Z\\\" stopTime=\\\"2018-04-11T03:27:56.840589Z\\\" percentage=\\\"100.000000\\\">\\n\" +\n                        \"    <slstr:bandSet>S1, S2, S3, S4</slstr:bandSet>\\n\" +\n                        \"  </slstr:elementMissing>\\n\" +\n                        \"</slstr:missingElements>\").getFirstChild());\n\n        Document manifest = ManifestTestUtils.createDocument();\n        final Element manifestElement = manifest.createElement(\"slstr:missingElements\");\n        manifest.appendChild(manifestElement);\n\n        new MissingElementsMerger().mergeNodes(fromParents, manifestElement, manifest);\n\n        assertEquals(1, manifestElement.getAttributes().getLength());\n        assert(manifestElement.hasAttribute(\"threshold\"));\n        assertEquals(\"75.000000\", manifestElement.getAttribute(\"threshold\"));\n\n        final NodeList childNodes = manifestElement.getChildNodes();\n        assertEquals(8, childNodes.getLength());\n        final Node globalInfoNode = childNodes.item(0);\n        assertEquals(\"slstr:globalInfo\", globalInfoNode.getNodeName());\n        assert(globalInfoNode.hasAttributes());\n        final NamedNodeMap globalInfoNodeAttributes = globalInfoNode.getAttributes();\n        assertEquals(5, globalInfoNodeAttributes.getLength());\n        assertNotNull(globalInfoNodeAttributes.getNamedItem(\"grid\"));\n        assertEquals(\"0.5 km stripe A\", globalInfoNodeAttributes.getNamedItem(\"grid\").getNodeValue());\n        assertNotNull(globalInfoNodeAttributes.getNamedItem(\"view\"));\n        assertEquals(\"Nadir\", globalInfoNodeAttributes.getNamedItem(\"view\").getNodeValue());\n        assertNotNull(globalInfoNodeAttributes.getNamedItem(\"value\"));\n        assertEquals(\"4000\", globalInfoNodeAttributes.getNamedItem(\"value\").getNodeValue());\n        assertNotNull(globalInfoNodeAttributes.getNamedItem(\"over\"));\n        assertEquals(\"4000\", globalInfoNodeAttributes.getNamedItem(\"over\").getNodeValue());\n        assertNotNull(globalInfoNodeAttributes.getNamedItem(\"percentage\"));\n        assertEquals(\"100.000000\", globalInfoNodeAttributes.getNamedItem(\"percentage\").getNodeValue());\n\n        assertElement(childNodes.item(6), \"0.5 km stripe A, 0.5 km stripe B, 0.5 km TDI\", \"Oblique\",\n                \"2018-04-11T03:22:56.929785Z\", \"2018-04-11T03:27:56.840589Z\", \"100.000000\", \"S1, S2, S3, S4\");\n        assertElement(childNodes.item(7), \"0.5 km stripe A, 0.5 km stripe B, 0.5 km TDI\", \"Nadir\",\n                \"2018-04-11T03:22:56.935232Z\", \"2018-04-11T03:27:56.921087Z\", \"100.000000\", \"S1, S2, S3, S4\");\n    }", "signature": "void mergeNodes_multipleGrids()", "full_signature": "@Test public void mergeNodes_multipleGrids()", "class_method_signature": "MissingElementsMergerTest.mergeNodes_multipleGrids()", "testcase": true, "constructor": false, "invocations": ["add", "getFirstChild", "createNode", "createDocument", "createElement", "appendChild", "mergeNodes", "assertEquals", "getLength", "getAttributes", "hasAttribute", "assertEquals", "getAttribute", "getChildNodes", "assertEquals", "getLength", "item", "assertEquals", "getNodeName", "hasAttributes", "getAttributes", "assertEquals", "getLength", "assertNotNull", "getNamedItem", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "getNamedItem", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "getNamedItem", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "getNamedItem", "assertEquals", "getNodeValue", "getNamedItem", "assertNotNull", "getNamedItem", "assertEquals", "getNodeValue", "getNamedItem", "assertElement", "item", "assertElement", "item"]}, "focal_class": {"identifier": "MissingElementsMerger", "superclass": "extends AbstractElementMerger", "interfaces": "", "fields": [{"original_string": "private final static String SEPARATOR = \"_\";", "modifier": "private final static", "type": "String", "declarator": "SEPARATOR = \"_\"", "var_name": "SEPARATOR"}, {"original_string": "private final static String GLOBAL_INFO_NAME = \"slstr:globalInfo\";", "modifier": "private final static", "type": "String", "declarator": "GLOBAL_INFO_NAME = \"slstr:globalInfo\"", "var_name": "GLOBAL_INFO_NAME"}, {"original_string": "private final static String ELEMENT_MISSING_NAME = \"slstr:elementMissing\";", "modifier": "private final static", "type": "String", "declarator": "ELEMENT_MISSING_NAME = \"slstr:elementMissing\"", "var_name": "ELEMENT_MISSING_NAME"}, {"original_string": "private final static String BAND_SET_ELEMENT = \"slstr:bandSet\";", "modifier": "private final static", "type": "String", "declarator": "BAND_SET_ELEMENT = \"slstr:bandSet\"", "var_name": "BAND_SET_ELEMENT"}, {"original_string": "private final static long NUMBER_OF_MILLIS_BETWEEN_ENTRIES = 450;", "modifier": "private final static", "type": "long", "declarator": "NUMBER_OF_MILLIS_BETWEEN_ENTRIES = 450", "var_name": "NUMBER_OF_MILLIS_BETWEEN_ENTRIES"}, {"original_string": "private final static Logger logger = Logger.getLogger(MissingElementsMerger.class.getSimpleName());", "modifier": "private final static", "type": "Logger", "declarator": "logger = Logger.getLogger(MissingElementsMerger.class.getSimpleName())", "var_name": "logger"}], "methods": [{"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "MissingElementsMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(Document toDocument, Element toParent, NewNode node, String percentage)", "modifiers": "private", "return": "void", "signature": "void addNode(Document toDocument, Element toParent, NewNode node, String percentage)", "full_signature": "private void addNode(Document toDocument, Element toParent, NewNode node, String percentage)", "class_method_signature": "MissingElementsMerger.addNode(Document toDocument, Element toParent, NewNode node, String percentage)", "testcase": false, "constructor": false}, {"identifier": "getBandSetFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getBandSetFromNode(Node node)", "full_signature": "private String getBandSetFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getBandSetFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getStartTimeFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getStartTimeFromNode(Node node)", "full_signature": "private String getStartTimeFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getStartTimeFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getStopTimeFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getStopTimeFromNode(Node node)", "full_signature": "private String getStopTimeFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getStopTimeFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getPercentageFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "double", "signature": "double getPercentageFromNode(Node node)", "full_signature": "private double getPercentageFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getPercentageFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getGridFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getGridFromNode(Node node)", "full_signature": "private String getGridFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getGridFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getViewFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "String", "signature": "String getViewFromNode(Node node)", "full_signature": "private String getViewFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getViewFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getOverFromNode", "parameters": "(Node node)", "modifiers": "private", "return": "int", "signature": "int getOverFromNode(Node node)", "full_signature": "private int getOverFromNode(Node node)", "class_method_signature": "MissingElementsMerger.getOverFromNode(Node node)", "testcase": false, "constructor": false}, {"identifier": "getNumberFormatter", "parameters": "()", "modifiers": "private", "return": "NumberFormatter", "signature": "NumberFormatter getNumberFormatter()", "full_signature": "private NumberFormatter getNumberFormatter()", "class_method_signature": "MissingElementsMerger.getNumberFormatter()", "testcase": false, "constructor": false}, {"identifier": "getNewMissingNodes", "parameters": "(List<Node> fromParents)", "modifiers": "private", "return": "List<NewNode>", "signature": "List<NewNode> getNewMissingNodes(List<Node> fromParents)", "full_signature": "private List<NewNode> getNewMissingNodes(List<Node> fromParents)", "class_method_signature": "MissingElementsMerger.getNewMissingNodes(List<Node> fromParents)", "testcase": false, "constructor": false}, {"identifier": "collectNodes", "parameters": "(List<Node> fromParents, String wantedNodeName)", "modifiers": "private", "return": "Map<String, List<Node>>", "signature": "Map<String, List<Node>> collectNodes(List<Node> fromParents, String wantedNodeName)", "full_signature": "private Map<String, List<Node>> collectNodes(List<Node> fromParents, String wantedNodeName)", "class_method_signature": "MissingElementsMerger.collectNodes(List<Node> fromParents, String wantedNodeName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/manifest/MissingElementsMerger.java"}, "focal_method": {"identifier": "mergeNodes", "parameters": "(List<Node> fromParents, Element toParent, Document toDocument)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument) throws PDUStitchingException {\n        final String threshold = fromParents.get(0).getAttributes().getNamedItem(\"threshold\").getNodeValue();\n        toParent.setAttribute(\"threshold\", threshold);\n        final NumberFormatter numberFormatter = getNumberFormatter();\n        final Map<String, List<Node>> globalInfoNodesListMap = collectNodes(fromParents, GLOBAL_INFO_NAME);\n        Map<String, Double> overs = new HashMap<>();\n        for (Map.Entry<String, List<Node>> globalInfoNodesEntry : globalInfoNodesListMap.entrySet()) {\n            final String[] key = globalInfoNodesEntry.getKey().split(SEPARATOR);\n            final String gridValue = key[0];\n            final String viewValue = key[1];\n            int value = 0;\n            int over = 0;\n            final List<Node> globalInfoNodes = globalInfoNodesEntry.getValue();\n            for (Node globalInfoNode : globalInfoNodes) {\n                final Node valueNode = globalInfoNode.getAttributes().getNamedItem(\"value\");\n                final Node overNode = globalInfoNode.getAttributes().getNamedItem(\"over\");\n                if (valueNode != null && overNode != null) {\n                    value += Integer.parseInt(valueNode.getNodeValue());\n                    final int over1 = Integer.parseInt(overNode.getNodeValue());\n                    over += over1;\n                }\n            }\n            String percentage;\n            try {\n                overs.put(globalInfoNodesEntry.getKey(), (double) over);\n                final double percentageAsDouble = ((double) value / over) * 100;\n                percentage = numberFormatter.valueToString(percentageAsDouble);\n            } catch (ParseException e) {\n                throw new PDUStitchingException(\"Could not format number: \" + e.getMessage());\n            }\n            final Element globalInfoElement = toDocument.createElement(GLOBAL_INFO_NAME);\n            globalInfoElement.setAttribute(\"grid\", gridValue);\n            globalInfoElement.setAttribute(\"view\", viewValue);\n            globalInfoElement.setAttribute(\"value\", String.valueOf(value));\n            globalInfoElement.setAttribute(\"over\", String.valueOf(over));\n            globalInfoElement.setAttribute(\"percentage\", percentage);\n            toParent.appendChild(globalInfoElement);\n        }\n\n        final List<NewNode> newMissingNodes = getNewMissingNodes(fromParents);\n        final List<NewNode> sortedNodes = new ArrayList<>();\n        for (NewNode newNode : newMissingNodes) {\n            boolean inserted = false;\n            for (int j = 0; j < sortedNodes.size(); j++) {\n                final NewNode sortedNode = sortedNodes.get(j);\n                if (newNode.startTime.before(sortedNode.startTime)) {\n                    sortedNodes.add(j, newNode);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                sortedNodes.add(newNode);\n            }\n        }\n        for (NewNode node : sortedNodes) {\n            String key = node.gridValue.split(\",\")[0].trim() + SEPARATOR + node.viewValue;\n            double over = overs.get(key);\n            try {\n                final String percentage = numberFormatter.valueToString((node.value / over) * 100);\n                addNode(toDocument, toParent, node, percentage);\n            } catch (ParseException e) {\n                throw new PDUStitchingException(\"Could not format number: \" + e.getMessage());\n            }\n        }\n    }", "signature": "void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "full_signature": "@Override public void mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "class_method_signature": "MissingElementsMerger.mergeNodes(List<Node> fromParents, Element toParent, Document toDocument)", "testcase": false, "constructor": false, "invocations": ["getNodeValue", "getNamedItem", "getAttributes", "get", "setAttribute", "getNumberFormatter", "collectNodes", "entrySet", "split", "getKey", "getValue", "getNamedItem", "getAttributes", "getNamedItem", "getAttributes", "parseInt", "getNodeValue", "parseInt", "getNodeValue", "put", "getKey", "valueToString", "getMessage", "createElement", "setAttribute", "setAttribute", "setAttribute", "valueOf", "setAttribute", "valueOf", "setAttribute", "appendChild", "getNewMissingNodes", "size", "get", "before", "add", "add", "trim", "split", "get", "valueToString", "addNode", "getMessage"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}