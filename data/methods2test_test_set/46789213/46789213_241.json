{"test_class": {"identifier": "TestPrivateSetDemo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int OT_BATCH_SIZE = 16000;", "modifier": "private static final", "type": "int", "declarator": "OT_BATCH_SIZE = 16000", "var_name": "OT_BATCH_SIZE"}, {"original_string": "private static final int COMPUTATIONAL_SECURITY = 128;", "modifier": "private static final", "type": "int", "declarator": "COMPUTATIONAL_SECURITY = 128", "var_name": "COMPUTATIONAL_SECURITY"}, {"original_string": "private static final int STATISTICAL_SECURITY = 40;", "modifier": "private static final", "type": "int", "declarator": "STATISTICAL_SECURITY = 40", "var_name": "STATISTICAL_SECURITY"}, {"original_string": "private final int noPlayers = 2;", "modifier": "private final", "type": "int", "declarator": "noPlayers = 2", "var_name": "noPlayers"}], "file": "demos/psi/src/test/java/dk/alexandra/fresco/demo/TestPrivateSetDemo.java"}, "test_case": {"identifier": "testPSICmdLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPSICmdLine() throws Exception {\n    Runnable p1 = () -> {\n      try {\n        PrivateSetDemo.main(\n            new String[]{\"-i\", \"1\", \"-p\", \"1:localhost:8081\", \"-p\", \"2:localhost:8082\", \"-s\",\n                \"dummyBool\", \"-in\", \"2,3,4,5,8,9,14\", \"-key\",\n                \"abc123abc123abc123abc123abc123ab\"});\n      } catch (IOException e) {\n        throw new RuntimeException(\"Error\", e);\n      }\n    };\n\n    Runnable p2 = () -> {\n      try {\n        PrivateSetDemo.main(\n            new String[]{\"-i\", \"2\", \"-p\", \"1:localhost:8081\", \"-p\", \"2:localhost:8082\", \"-s\",\n                \"dummyBool\", \"-in\", \"2,3,4,6,7,12,14\", \"-key\",\n                \"abc123abc123abc123abc123abc123ab\"});\n      } catch (IOException e) {\n        throw new RuntimeException(\"Error\", e);\n      }\n    };\n    Thread t1 = new Thread(p1);\n    Thread t2 = new Thread(p2);\n    t1.start();\n    t2.start();\n    t1.join();\n    t2.join();\n  }", "signature": "void testPSICmdLine()", "full_signature": "@Test public void testPSICmdLine()", "class_method_signature": "TestPrivateSetDemo.testPSICmdLine()", "testcase": true, "constructor": false, "invocations": ["main", "main", "start", "start", "join", "join"]}, "focal_class": {"identifier": "PrivateSetDemo", "superclass": "", "interfaces": "implements Application<List<List<Boolean>>, ProtocolBuilderBinary>", "fields": [{"original_string": "private final Boolean[] inKey;", "modifier": "private final", "type": "Boolean[]", "declarator": "inKey", "var_name": "inKey"}, {"original_string": "private final int[] inSet;", "modifier": "private final", "type": "int[]", "declarator": "inSet", "var_name": "inSet"}, {"original_string": "private final int id;", "modifier": "private final", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private static final int BLOCK_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "BLOCK_SIZE = 128", "var_name": "BLOCK_SIZE"}, {"original_string": "private static final int INPUT_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "INPUT_LENGTH = 32", "var_name": "INPUT_LENGTH"}], "methods": [{"identifier": "PrivateSetDemo", "parameters": "(int id, Boolean[] key, int[] set)", "modifiers": "public", "return": "", "signature": " PrivateSetDemo(int id, Boolean[] key, int[] set)", "full_signature": "public  PrivateSetDemo(int id, Boolean[] key, int[] set)", "class_method_signature": "PrivateSetDemo.PrivateSetDemo(int id, Boolean[] key, int[] set)", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "PrivateSetDemo.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "arrayFromString", "parameters": "(String input)", "modifiers": "private static", "return": "int[]", "signature": "int[] arrayFromString(String input)", "full_signature": "private static int[] arrayFromString(String input)", "class_method_signature": "PrivateSetDemo.arrayFromString(String input)", "testcase": false, "constructor": false}, {"identifier": "buildComputation", "parameters": "(ProtocolBuilderBinary producer)", "modifiers": "@Override public", "return": "DRes<List<List<Boolean>>>", "signature": "DRes<List<List<Boolean>>> buildComputation(ProtocolBuilderBinary producer)", "full_signature": "@Override public DRes<List<List<Boolean>>> buildComputation(ProtocolBuilderBinary producer)", "class_method_signature": "PrivateSetDemo.buildComputation(ProtocolBuilderBinary producer)", "testcase": false, "constructor": false}], "file": "demos/psi/src/main/java/dk/alexandra/fresco/demo/PrivateSetDemo.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static <T extends ResourcePoolImpl> void main(String[] args) throws IOException {\n    CmdLineUtil<T, ProtocolBuilderBinary> util = new CmdLineUtil<>();\n    Boolean[] key;\n    int[] inputs;\n\n    util.addOption(Option.builder(\"key\")\n        .desc(\"The key to use for encryption. \" + \"A \" + INPUT_LENGTH\n            + \" char hex string. Required for player 1 and 2. \"\n            + \"For both players this is interpreted as the AES key. \")\n        .longOpt(\"key\").hasArg().build());\n\n    util.addOption(Option.builder(\"in\")\n        .desc(\"The list of integers to use as input for the set intersection problem. \"\n            + \"A comma separated list of integers. Required for player 1 and 2. \"\n            + \"The lists must be of equal length for each player. \")\n        .longOpt(\"input\").hasArg().build());\n\n    CommandLine cmd = util.parse(args);\n    NetworkConfiguration networkConfiguration = util.getNetworkConfiguration();\n\n    // Get and validate the AES specific input.\n    if (networkConfiguration.getMyId() == 1 || networkConfiguration.getMyId() == 2) {\n      if (!cmd.hasOption(\"in\")) {\n        throw new IllegalArgumentException(\"Player 1 and 2 must submit inputs\");\n      }\n      if (!cmd.hasOption(\"key\") || cmd.getOptionValue(\"key\").length() != INPUT_LENGTH) {\n        throw new IllegalArgumentException(\"Player 1 and 2 must submit keys \"\n            + \"(hex string of length \" + INPUT_LENGTH + \")\");\n      }\n      key = ByteAndBitConverter.toBoolean(cmd.getOptionValue(\"key\"));\n\n      for (Option o : cmd.getOptions()) {\n        System.out.println(\"option: \" + o.getOpt() + \" : \" + o.getValue());\n      }\n      inputs = arrayFromString(cmd.getOptionValue(\"in\"));\n\n    } else {\n      throw new IllegalArgumentException(\"Only 2 parties are supported\");\n    }\n\n    // Do the secure computation using config from property files.\n    PrivateSetDemo privateSetDemo = new PrivateSetDemo(networkConfiguration.getMyId(), key, inputs);\n    ProtocolSuite<T, ProtocolBuilderBinary> psConf = util.getProtocolSuite();\n    SecureComputationEngine<T, ProtocolBuilderBinary> sce =\n        new SecureComputationEngineImpl<>(psConf, util.getEvaluator());\n\n    List<List<Boolean>> psiResult;\n    T resourcePool = util.getResourcePool();\n    psiResult = sce.runApplication(privateSetDemo, resourcePool, util.getNetwork());\n    util.closeNetwork();\n    // Print result.\n    System.out.println(\"The resulting ciphertexts are:\");\n    boolean[][] res = new boolean[psiResult.size()][BLOCK_SIZE];\n    for (int j = 0; j < psiResult.size(); j++) {\n      for (int i = 0; i < BLOCK_SIZE; i++) {\n        res[j][i] = psiResult.get(j).get(i);\n      }\n      System.out.println(\"result(\" + j + \"): \" + ByteAndBitConverter.toHex(res[j]));\n    }\n\n  }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "PrivateSetDemo.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["addOption", "build", "hasArg", "longOpt", "desc", "builder", "addOption", "build", "hasArg", "longOpt", "desc", "builder", "parse", "getNetworkConfiguration", "getMyId", "getMyId", "hasOption", "hasOption", "length", "getOptionValue", "toBoolean", "getOptionValue", "getOptions", "println", "getOpt", "getValue", "arrayFromString", "getOptionValue", "getMyId", "getProtocolSuite", "getEvaluator", "getResourcePool", "runApplication", "getNetwork", "closeNetwork", "println", "size", "size", "get", "get", "println", "toHex"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}