{"test_class": {"identifier": "S2UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2UtilsTest.java"}, "test_case": {"identifier": "testTargetS2BandNameMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTargetS2BandNameMatches() throws Exception {\n        String targetBandName = \"taur_01\";\n        assertFalse(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.TAUR_PATTERN));\n        targetBandName = \"taur_B1\";\n        assertTrue(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.TAUR_PATTERN));\n\n        targetBandName = \"rBRR_09\";\n        assertFalse(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.R_BRR_PATTERN));\n        targetBandName = \"rBRR_B9\";\n        assertTrue(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.R_BRR_PATTERN));\n\n        targetBandName = \"rtoa_ng_8A\";\n        assertFalse(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.RTOA_NG_PATTERN));\n        targetBandName = \"rtoa_ng_B8A\";\n        assertTrue(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.RTOA_NG_PATTERN));\n\n        targetBandName = \"rtoa_12\";\n        assertFalse(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.RTOA_PATTERN));\n        targetBandName = \"rtoa_B12\";\n        assertTrue(S2Utils.targetS2BandNameMatches(targetBandName, RayleighCorrectionOp.RTOA_PATTERN));\n    }", "signature": "void testTargetS2BandNameMatches()", "full_signature": "@Test public void testTargetS2BandNameMatches()", "class_method_signature": "S2UtilsTest.testTargetS2BandNameMatches()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "targetS2BandNameMatches", "assertTrue", "targetS2BandNameMatches", "assertFalse", "targetS2BandNameMatches", "assertTrue", "targetS2BandNameMatches", "assertFalse", "targetS2BandNameMatches", "assertTrue", "targetS2BandNameMatches", "assertFalse", "targetS2BandNameMatches", "assertTrue", "targetS2BandNameMatches"]}, "focal_class": {"identifier": "S2Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getS2SpectralBandIndex", "parameters": "(String bandName)", "modifiers": "static", "return": "int", "signature": "int getS2SpectralBandIndex(String bandName)", "full_signature": "static int getS2SpectralBandIndex(String bandName)", "class_method_signature": "S2Utils.getS2SpectralBandIndex(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getS2TargetBandName", "parameters": "(String bandCategory, String bandName)", "modifiers": "static", "return": "String", "signature": "String getS2TargetBandName(String bandCategory, String bandName)", "full_signature": "static String getS2TargetBandName(String bandCategory, String bandName)", "class_method_signature": "S2Utils.getS2TargetBandName(String bandCategory, String bandName)", "testcase": false, "constructor": false}, {"identifier": "targetS2BandNameMatches", "parameters": "(String targetBandName, String pattern)", "modifiers": "static", "return": "boolean", "signature": "boolean targetS2BandNameMatches(String targetBandName, String pattern)", "full_signature": "static boolean targetS2BandNameMatches(String targetBandName, String pattern)", "class_method_signature": "S2Utils.targetS2BandNameMatches(String targetBandName, String pattern)", "testcase": false, "constructor": false}, {"identifier": "getNumBandsToRcCorrect", "parameters": "(String[] sourceBandNames)", "modifiers": "static", "return": "int", "signature": "int getNumBandsToRcCorrect(String[] sourceBandNames)", "full_signature": "static int getNumBandsToRcCorrect(String[] sourceBandNames)", "class_method_signature": "S2Utils.getNumBandsToRcCorrect(String[] sourceBandNames)", "testcase": false, "constructor": false}, {"identifier": "getS2TrueWavelengths", "parameters": "()", "modifiers": "static", "return": "double[]", "signature": "double[] getS2TrueWavelengths()", "full_signature": "static double[] getS2TrueWavelengths()", "class_method_signature": "S2Utils.getS2TrueWavelengths()", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/S2Utils.java"}, "focal_method": {"identifier": "targetS2BandNameMatches", "parameters": "(String targetBandName, String pattern)", "modifiers": "static", "return": "boolean", "body": "static boolean targetS2BandNameMatches(String targetBandName, String pattern) {\n        // pattern e.g. \"rtoa_\\\\d{2}\"\n        String s2Pattern;\n        if (targetBandName.indexOf(\"_B\") == targetBandName.length() - 3) {\n            s2Pattern = pattern.replace(\"\\\\d{2}\", \"B\\\\d{1}\");  // e.g. rBRR_B7\n        } else {\n            s2Pattern = pattern.replace(\"\\\\d{2}\", \"B\\\\d{2}\");  // e.g. rBRR_B12\n        }\n        final String patternPrefix = pattern.substring(0, pattern.length() - 5); // e.g. \"rtoa_\"\n        if (targetBandName.endsWith(\"8A\")) {\n            return targetBandName.equals(patternPrefix + \"B8A\");\n        } else {\n            return targetBandName.matches(s2Pattern);\n        }\n    }", "signature": "boolean targetS2BandNameMatches(String targetBandName, String pattern)", "full_signature": "static boolean targetS2BandNameMatches(String targetBandName, String pattern)", "class_method_signature": "S2Utils.targetS2BandNameMatches(String targetBandName, String pattern)", "testcase": false, "constructor": false, "invocations": ["indexOf", "length", "replace", "replace", "substring", "length", "endsWith", "equals", "matches"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}