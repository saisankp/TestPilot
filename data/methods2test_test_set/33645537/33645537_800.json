{"test_class": {"identifier": "BlockingOperatorNextTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/BlockingOperatorNextTest.java"}, "test_case": {"identifier": "testSingleSourceManyIterators", "parameters": "()", "modifiers": "@Test /* (timeout = 8000) */ public", "return": "void", "body": "@Test /* (timeout = 8000) */\n    public void testSingleSourceManyIterators() throws InterruptedException {\n        Observable<Long> o = Observable.interval(100, TimeUnit.MILLISECONDS);\n        PublishSubject<Void> terminal = PublishSubject.create();\n        BlockingObservable<Long> source = o.takeUntil(terminal).toBlocking();\n\n        Iterable<Long> iter = source.next();\n\n        for (int j = 0; j < 3; j++) {\n            BlockingOperatorNext.NextIterator<Long> it = (BlockingOperatorNext.NextIterator<Long>)iter.iterator();\n\n            for (long i = 0; i < 10; i++) {\n                Assert.assertEquals(true, it.hasNext());\n                Assert.assertEquals(j + \"th iteration next\", Long.valueOf(i), it.next());\n            }\n            terminal.onNext(null);\n        }\n    }", "signature": "void testSingleSourceManyIterators()", "full_signature": "@Test /* (timeout = 8000) */ public void testSingleSourceManyIterators()", "class_method_signature": "BlockingOperatorNextTest.testSingleSourceManyIterators()", "testcase": true, "constructor": false, "invocations": ["interval", "create", "toBlocking", "takeUntil", "next", "iterator", "assertEquals", "hasNext", "assertEquals", "valueOf", "next", "onNext"]}, "focal_class": {"identifier": "BlockingOperatorNext", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BlockingOperatorNext", "parameters": "()", "modifiers": "private", "return": "", "signature": " BlockingOperatorNext()", "full_signature": "private  BlockingOperatorNext()", "class_method_signature": "BlockingOperatorNext.BlockingOperatorNext()", "testcase": false, "constructor": true}, {"identifier": "next", "parameters": "(final Observable<? extends T> items)", "modifiers": "public static", "return": "Iterable<T>", "signature": "Iterable<T> next(final Observable<? extends T> items)", "full_signature": "public static Iterable<T> next(final Observable<? extends T> items)", "class_method_signature": "BlockingOperatorNext.next(final Observable<? extends T> items)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/BlockingOperatorNext.java"}, "focal_method": {"identifier": "next", "parameters": "(final Observable<? extends T> items)", "modifiers": "public static", "return": "Iterable<T>", "body": "public static <T> Iterable<T> next(final Observable<? extends T> items) {\n        return new Iterable<T>() {\n            @Override\n            public Iterator<T> iterator() {\n                NextObserver<T> nextObserver = new NextObserver<T>();\n                return new NextIterator<T>(items, nextObserver);\n            }\n        };\n\n    }", "signature": "Iterable<T> next(final Observable<? extends T> items)", "full_signature": "public static Iterable<T> next(final Observable<? extends T> items)", "class_method_signature": "BlockingOperatorNext.next(final Observable<? extends T> items)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}